P:0000:temp:; Zero page RAM\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; include/zp_ram.asm\n;\n; List of zero-page RAM variables. Currently only holds a\n; variable to keep track of button presses, but will contain\n; more variables that should be accessed often or easily by\n; the game at any time, like temporary variables used by\n; subroutines or macros, game status flags, and the like.\n;\n;\n; Reserve ten temporary variables for use in subroutines.
P:000A:temp16:; Reserve a two-byte temporary variable for use with 16-bit\n; operations (like addresses)
P:000C:pointer:; Two-byte variable to store a pointer address
P:000E:buttons_prev:; Variable to store button presses
P:000F:buttons_held
P:0010:buttons_pressed
P:0011:buttons_released
P:0012:soft_ppu_mask:; PPU mask buffer variable, used to store the new value of\n; the PPU mask outside NMI
P:0013:skip_nmi:; Variables to skip NMI handling
P:0014:force_skip_nmi
P:0015:frame_counter:; Counters and seeds
P:0016:random_seed
P:0017:ball_xpos_hi:; Game specific variables\n; Ball variables
P:0018:ball_xpos_lo
P:0019:ball_ypos_hi
P:001A:ball_ypos_lo
P:001B:ball_lives: number of lives left
P:001C:ball_score: decimal score, five bytes (0-9)
P:0022:ball_bonus: decimal bonus points, three bytes (0-9)
P:0025:ball_left:; Ball bounding box, relative to the screen
P:0026:ball_center
P:0027:ball_right
P:0028:ball_top
P:0029:ball_middle
P:002A:ball_bottom
P:002B:ball_update_position:; Update-position check
P:002C:ball_flags:; Ball flags\n; #% c c c v . f n a\n;    | | | | | | | +-- ball is dead (0) or alive (1)\n;    | | | | | | +---- ball is being nudged left (0) or right (1)\n;    | | | | | +------ ball is frozen (not moving)\n;    | | | | +-------- (unused for now)\n;    | | | +---------- ball moves up (0) or down (1)\n;    +-+-+------------ ball color (1-6)
P:002D:screen_mode:; Screen mode\n; #% u . . . . . t t\n;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)\n;    | +-+-+-+-+------------- unused\n;    +----------------------- should the screen update
P:002E:startlevel_pointer:; Start level pointer\n; You can start the game at level 1, 5, 9, 13 or 17.\n; This is the pointer that tells you at which level to start.
P:002F:ppu_buffer_update:; PPU buffer variables
P:0030:ppu_buffer_pointer
P:0031:explosion_pointer:; Pointer to keep track of the number of explosions
P:0032:sprite_ram_pointer:; Sprite RAM pointer to keep track of sprites to update
P:0033:nudge_counter:; Nudge counter
P:0034:current_level:; Current level
P:0035:colliding_tile:; Tile type the ball is currently colliding with
P:0036:ppu_buffer:; Other RAM (must be ENUM'd within)\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; ram/misc.asm\n;\n; List of additional, non-zeropage RAM variables. Currently\n; empty, but will hold data like the OAM buffer and other,\n; less-often accessed, global variables.\n;\n;\n; Game specific RAM variables\n; miscellaneous (non-zeropage) ram variables go here\n; PPU buffer (3x16 bytes, as a capped max for NMI)
P:0066:explosion_framecounter:; _framecounter, counts from ANIMATION_SPEED to 0 per slide
P:006A:explosion_currentframe:; _currentframe, keeps track which anim frame we're at
P:006E:explosion_attributes:; _attributes, to distinguish between ball and wall explosion
P:0072:explosion_x:; x- and y-coordinate of the explosion
P:0076:explosion_y
P:007A:explosion_active:; active flag to see if animation is/should be shown
P:007E:tile_type:; screen tile type data\n;  #% b m p d ccC s\n;     | | | | ||| +-- block is solid\n;     | | | | ||+---- block color (CHR offset boolean)\n;     | | | | ++----- block color (subpal 0-3)\n;     | | | +-------- death block\n;     | | +---------- paint block\n;     | +------------ move block\n;     +-------------- color block
P:011E:tile_attributes:; attribute table in ram (for easy updating during gameplay)
P:015E:RESET:; Instantly go to the static bank\n; Reset script\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; include/reset.asm\n;\n; Basic reset script. Disables rendering, clears memory, moves\n; sprites off screen and (re)initializes the game.\n;\n;\n; Ignore IRQ's
P:015F::; Disable decimal mode
P:0160::; Disable APU frame IRQ
P:0165::; Set up the stack
P:0168::; Disable NMI, rendering, DMC and APU IRQ's
P:0175::; Clear the vBlank flag
P:0178::; Wait for vBlank
P:017B::; Clear memory\n; Move sprites off screen
P:0180::; Clear other memory
P:0196::; Clear next in line
P:0199::; Wait for vBlank
P:019C::; Turn on NMI, set foreground $0000, background $1000
P:01A1::; Reset PPU scroll pointer
P:01A9::; Initialize game\n; game initialization goes here\n; Tell game to load the intro screen
P:01AD::; Set number of lives (5)
P:01B1::; Start at level -1 for now, because [START] increments level number
P:01B5:MainGameLoop:; Main game loop\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; game/main.asm\n;\n; The main game loop content.\n;\n;\n; Reset sprite pointer every game loop
P:01B9::; Store previous buttons
P:01BD::; Read controller input
P:01C0::; Get buttons released
P:01C8::; Set buttons pressed
P:01D0::; Load screen?
P:01D6::; Get screen type to load
P:01DB::; Get address to load screen type from
P:01E5::; Load screen
P:01EE::; Don't load screen anymore next loop
P:01F4::; Check if we're on the game screen
P:01FD::; Load sprite 0 in place
P:0215::; We're on the game screen\n; Check if position should be updated (ie. has nmi happened yet)
P:021C::; Move the ball\n; Check if ball goes up or down
P:0222::; update the low byte
P:0229::; update the high byte with carry
P:022F::; Check bottom bound
P:0235::; Change ball direction to "up"
P:0246::; update the low byte
P:024D::; update the high byte with carry
P:0253::; Check top bound
P:0257::; Change ball direction to "down"
P:0265::; Check if ball is being nudged
P:0269::; Check if left button is held
P:026F::; update the low byte
P:0276::; update the high byte
P:027C::; Check left bound
P:0280::; Set flag to nudge right and set nudge counter
P:028A::; Check if right button is held
P:0290::; update the low byte
P:0297::; update the high byte
P:029D::; Check right bound
P:02A3::; Set flag to nudge left and set nudge timer
P:02AA::; Check nudge
P:02B4::; update the low byte
P:02BB::; update the high byte
P:02C4::; update the low byte
P:02CB::; update the high byte
P:02D1::; Don't update position again until next frame
P:02D3::; Do collision detection\n; Get ball's x-left, x-center, x-right position
P:02E4::; Get ball's y-top, y-middle, y-bottom position
P:02F5::; Check if ball moves right\n; No need to check nudging here as that will never collide with a tile
P:02FB::; Check tile at right position
P:0308:: no need for left check as ball moves right
P:030A::; Tile is solid; nudge ball and evaluate tile type
P:0317::; Check if ball moves right\n; No need to check nudging here as that will never collide with a tile
P:031D::; Check tile at right position
P:032C::; Tile is solid; nudge ball and evaluate tile type
P:0336::; Check if ball moves up
P:033C::; Check tile at top position
P:0349:: no need for bottom check as ball moves up
P:034B::; Tile is solid; move ball down and evaluate tile type
P:0357::; No movement check needed: since ball is not moving up, it must move down\n; Check tile at bottom position
P:0366::; Tile is solid; move ball up and evaluate tile type
P:036F::; Testinging timed PPU scroll concept\n; Timed updates (test)\n; If B button is pressed
P:0375::; Set up loop fading
P:037D::; Wait for NMI to pass
P:0380::; Now wait for No-sprite 0
P:0387::; Now wait for Sprite 0
P:038E::; Setup tile row loop
P:0390::; Disable drawing
P:0397::; Set up scanline loop
P:039D::; Restore drawing
P:03A7::; Waste 12 frames\n+5
P:03A9::+5
P:03AB::+2
P:03AD::; Waste about 100 frames\n  3 down, 97 to go
P:03AF::  5 down, 95 to go
P:03B2::  5+3L down,  95-3L to go
P:03B4::  5+5L down,  95-5L to go
P:03B5::  4+8L down,  96-8L to go
P:03B7::  7+8L down, 93-8L to go
P:03B9::  9+8L down, 91-8L to go
P:03BA:: 12+8L down, 88-8L to go
P:03D0::; Load the next level
P:03E0::; Add to sprite buffer
P:03FF::; Upon pressing START, (next level) design will be drawn\n; If START button is pressed
P:0405::; Load the next level
P:0415::; Upon pressing A, an explosion will happen on screen\n; If A button is pressed, initiate explosion
P:041E::; Get most recent slot for explosion
P:0420::; If 0, use max pointer value
P:0424::; Decrease pointer by one
P:0427::; Load explosion data into RAM
P:0434::AND #%11110000
P:043A::AND #%11110000
P:044D::; Set up loop
P:044F::; Check if current animation is active. If not, goto next
P:0457::; Check the explosion framecounter
P:045C::; Framecounter is 0\n; Reset to animation speed
P:0461::; Set next animation frame, and check if we're done yet
P:046B::; If we're done, inactivate current explosion, clean\n; up sprite RAM and go to the next one
P:0482::; Load (x,y) position in temp variables
P:048E::; Load attribute in temp variable
P:0493::; Load current frame into Y-register
P:0496::; Load current frame ROM address from table
P:04A0::; Save x-register on stack
P:04A2::; Load sprites into sprite RAM
P:04A6::; Prepare (x,y) offset for loop
P:04A8::; Do not draw empty sprites
P:04AC::; Add y-position to sprite ram buffer
P:04B2::; Get tile number from frame ROM address, and\n; add it to sprite ram buffer
P:04B8::; Add attribute data to sprite ram buffer
P:04BE::; Add x-position to sprite ram buffer
P:04C4::; Check if all sprites are done
P:04C9::; Update x value
P:04D0::; Update temp for x,y position
P:04D8::; Row is done; reset x-position
P:04DC::; Update y-position
P:04E3::; Reset row counter
P:04EC::; Retrieve x-register from stack
P:04EE::; Check if all animations have been updated
P:04F6::; Sprite clean-up
P:0503:sub_GetRandomNumber:; Subroutines\n; RNG\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; subroutine/GetRandomNumber.asm\n;\n; Simple and fast random number generator by White Flame.\n;\n; Set random_seed to an arbitrary number to randomize between\n; gaming sessions, for instance using the frame counter upon\n; pressing START on the intro screen.\n;\n;     ;; IF START PRESSED:\n;     LDA frame_counter\n;     STA random_seed\n;\n; Source:\n; codebase64.org/doku.php?id=base:small_fast_8-bit_prng\n;\n;\n; Force EOR if random_seed is zero
P:0507::; Shift left, and EOR if the high bit is set
P:0511:sub_ReadController:; Read controller input\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; subroutine/ReadController.asm\n;\n; Subroutine that polls the controller and stores the input\n; buttons in a variable. This version only handles controller\n; 1. Expects "buttons" variable to be declared in RAM.\n;\n;\n; Set strobe bit
P:0516::; Set up ring counter
P:0518::; Clear strobe bit
P:051C::; Loop through button presses
P:0522::; Check if ring counter is done
P:0524::; Return from subroutine
P:0525:sub_WaitForVBlank:; vBlank wait\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; subroutine/WaitForVBlank.asm\n;\n; Subroutine that essentially pauses script execution until\n; vBlank happens.\n;\n;
P:052B:sub_ClearScreen:; Game specific subroutines\n; additional game-specific subroutines go here\n; Subroutine to clear the screen\n; If it's a game screen, add noise\n; Check of game screen or not
P:0537::; Set start writing address at tile (0,0) - or PPU address $2000
P:0544::; Set up tile to draw and loop
P:0548::; Write empty tile or noise (#$00) and add one to PPU address
P:054D::; Check if we should draw noise next. Noise is drawn if:\n; - Screen mode is game screen\n; - Y between #$06 and #$19 (inclusive)\n; - X between #$02 and #$1D (inclusive)\n; If not a game screen, or Y exceeds row $17, skip further check
P:0551::; If Y < $6, skip the check
P:0555::; If X < $1, skip the check
P:0559::; If X >= $1D, skip the check. If it IS $1D, set temp = 0
P:0563::; Load a random noise tile (tiles $68-$6F in CHR ROM)
P:056D::; Check if a row has been done. If not, draw the next
P:0572::; Go to the next row (if any left)
P:0575::; If Y is 1A, skip noise tile check until done drawing
P:0581::; Clear attribute table
P:0596:sub_ColorizeBall:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n;  Subroutine: ColorizeBall\n;\n;  Applies the color set through ball_flags to the ball sprite.\n;\n;\n; Get color from ball_flags
P:059C::; Add new light color of ball to PPU palette
P:05AC::; Add new dark color of ball to PPU palette
P:05B7:sub_ColorsMatch:; Subroutine to check if ball color matches colliding tile color\n; Save tile color in temp variable
P:05BD::; Get ball color
P:05C5::; Compare with tile color
P:05C8:sub_ConvertXYToTileType:; Subroutine to convert the ball's position to a tile type\n; - Expects temp to be y-position of ball within game area\n; - Expects temp+1 to be x-position of ball within game area\n; - Puts result in accumulator and zp variable\n; - Corrupts X-register
P:05E0:sub_DisableRendering:; Force NMI skip, disable rendering
P:05F4:sub_EnableRendering:; Enable rendering
P:060E:sub_drawIntroScreenLogoTile
P:0621:sub_EvaluateTileType:; Subroutine to evaluate the colliding tile type and take its\n; corresponding action (move block, kill player, ...)\n; - Expects X-register to be the ADDR_SCREENTILERAM offset\n; - Uses zp variable colliding_tile\n; Check if collided tile is a color block
P:0627::; It's a color block. Check if the colors match
P:062C::; Colors don't match - return
P:062D::; Colors match. Destroy color block\n; - Add the tiles that need updating to ppu buffer\n; - Load destruction animation on tile\n; - Write #$00 in tile type ram (makes not-solid)\n; - Update attribute table accordingly through ppu buffer\n; - If there are no color blocks left:\n;   - Freeze ball\n;   - Initiate level-win state\n; (@TODO)
P:062E::; Check if collided tile is a paint block
P:0634::; It's a paint block. Update ball color\n; Save x-register
P:0636::; Get tile color
P:0640::; Apply tile color to ball
P:064B::; Restore x-register
P:064D::; Return
P:064E::; Check if collided tile is a death block
P:0654::; It is a death block. Kill player and return (@TODO)\n        LDA ball_flags\n        ORA #%00000101\n        STA ball_flags
P:0655::; Check if collided tile is a move block
P:065B::; It is a move block. Check if colors match
P:0660::; Colors don't match - return
P:0661::; Colors match.\n; - Check if next tile is a solid\n; - If not, move the tile:\n;   - Add the tiles that need updating to ppu buffer\n;   - Add move tile sprite over the original tile\n;   - Initiate moving the sprite that way for 16px\n;   - Write #$00 in tile type ram (makes not-solid)\n;   - Update attribute table accordingly through ppu buffer\n; - After moving the sprite, in a different routine:\n;   - Add move tile data on the new tile location\n;   - Write the original tile type data on new position in ram\n;   - Destroy sprite\n;   - Update attribute table accordingly through ppu buffer\n; (@TODO)
P:0662::; Return
P:0663:sub_InitiateNudge
P:066A:sub_JumpToPointer
P:066D:sub_LoadGameScreen:RTS must be handled by the routine (pointer) jumps to\n; Clear the screen
P:0670::; Clear collision and attribute data
P:0679::; Get pointer from current level
P:0685::; Set up the loop
P:0687::; Load (x,y) of current set of tiles
P:0689::; Check if level is done; if so, skip the loop
P:0690::; Store (x,y) and number of tiles and tile data in temp variable
P:0697::; Convert (x,y) to PPU address\n; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
P:06A1::; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
P:06BA::; Add carry to temp+2
P:06C0::; Convert tile data to loop count and tile type\n; temp+4 = color
P:06C6::; If color = 7, this is a wall
P:06CA::; temp+7 = first or second set in CHR (add 5 to offset)
P:06D2::; temp+5 = tile type
P:06DC::; It's a wall! Set CHR offset to 0, and tile type to 4.
P:06E4::; X = tile offset
P:06E8::; temp+6 = number of tiles
P:06F3::; Translate (x,y) to (y,x) for tile RAM
P:0705::; Set up loop
P:0709::; Write PPU address
P:0716::; Write first and second tile
P:0722::; Update PPU address
P:0732::; Write third and fourth tile
P:073E::; Push x-register to stack
P:0740::; Update tile RAM (aka collision table)
P:074F::; Check if shade 1 should be drawn
P:075A::; Check if shade 2 should be drawn
P:0780::; Check if shade 3 should be drawn
P:0797::; Restore x-register from stack
P:0799::; Reset pointer for next tile
P:07A6::; Draw next metatile in this loop (if any left)
P:07A9::; Is it a row or a column?
P:07AD::; It is a column: move pointer down (+$40)
P:07BA::; Add 16 to temp (as a tile RAM pointer)
P:07C4::; It is a row: move pointer right (+$02)
P:07CB::; Add 1 to temp (as a tile RAM pointer)
P:07CD::; Next tile in the row/column
P:07D0::; Go to the next set of tiles
P:07D6::; Level loading is done\n; Top game bound: set PPU_ADDR offset and draw 28 tiles
P:07E5::; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
P:07F4::; Left & right game bounds\n; Set PPU_ADDR and store in temp variables
P:0802::; Set vertical bound tile and set up loop
P:0806::; Show left tile
P:0809::; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
P:0818::; Show right tile
P:081B::; Check if we're done yet
P:081E::; Not done yet: add 3 to low byte for next left bound
P:0825::; Apply carry to high byte
P:082B::; Store next PPU_ADDR to draw at
P:0836::; Draw the corners of the playing field
P:0877::; Draw the hud labels
P:088E::; Draw the current score
P:08A7::; Draw the level number\n; (with primitive HEX>DEC)
P:08E6::; Draw lives (presumes lives to be capped at 9)
P:08F6::; Set and draw bonus
P:0919::; Set attribute data to RAM\n; Byte 0-7 of attribute ram should be #%10100000
P:0925::; Byte 8-55 of attribute ram are filled with game subpal data\n; Reset current attribute value
P:0929::; Get first metatile in tile ram based on attribute index\n; metatile = (attr-8)*2 +(16*(attr-8)/8))
P:092D:: attr - 8 (temp1)
P:092F:: * 2
P:0930:: temp = temp1 * 2
P:0932:: temp1
P:0934:: rounded down to 8's
P:0936:: * 2
P:0938:: + temp1 * 2
P:093A:: first metatile
P:093C::; Store first metatile in y-register
P:093D::; If X MOD 8 == 7, don't apply bottom right metatile
P:0944::; If X >= $30, don't apply bottom right metatile
P:0948::; Add metatile1 subpalette to attribute value
P:094F::; Apply second metatile
P:0950::; If X MOD 8 == 0, don't apply bottom left metatile
P:0955::; If X >= $30, don't apply bottom left metatile
P:0959::; Add metatile2 subpalette to attribute value
P:096B::; Apply third metatile
P:0970::; If X MOD 8 == 7, don't apply top right metatile
P:0977::; If X < $10, don't apply top right metatile
P:097C::; Add metatile3 subpalette to attribute value
P:098E::; Apply fourth metatile
P:098F::; If X MOD 8 == 0, don't apply top left metatile
P:0994::; If X < $10, don't apply top left metatile
P:0999::; Add metatile4 subpalette to attribute value
P:09AA::; Check the next attribute, if any left
P:09B2::; Stream attribute RAM to PPU
P:09CC::; Set initial ball position
P:09EA::; Set initial ball color and direction
P:09F4::; Return
P:09F5:sub_Draw28HorizontalTiles:; Subroutine: draw 28 tiles in a row
P:09FE:sub_LoadIntroScreen:; Load intro palette
P:0A18::; Put ball in the middle
P:0A1E::; Clear the screen
P:0A21::; Set up intro screen draw loop
P:0A23::; Get current byte from intro screen data
P:0A26::; If current byte is #$3F, we're done drawing.
P:0A2D::; If highest bits are %11, draw a plain tile
P:0A34::; If highest bits are %01, set the PPU address\n; If not, draw two logo tiles
P:0A3B::; Get bits 0-2 and store in a temp variable
P:0A42::; Get bits 3-5, shift over to get a value from 0-7
P:0A4A::; Draw the tile that corresponds with that value
P:0A4E::; Do the same for the value stored in temp
P:0A53::; Next byte please
P:0A57::; Just draw the tile value on screen
P:0A5D::; Next byte please
P:0A61::; Reset the PPU latch
P:0A64::; Sanitize and write the high byte of the PPU address
P:0A6C::; Write the low byte of the PPU address
P:0A73::; PPU has been set up to draw tiles at the correct spot now.\n; Next byte please.
P:0A77::; To color the 1.LEVEL: line green, we need to update two\n; values in the PPU attribute data.
P:0A8D:sub_LoadWinScreen
P:0A8E:sub_WriteByteToPPUBuffer:; Prevent updating until full 3-byte buffer is filled,\n; so that graphics won't glitch out if NMI happens during\n; updating the buffer
P:0A92::; Check if buffer full; if so, wait a frame and force update
P:0A9D::; Add ppu_addr high byte to buffer
P:0AA2::; Add ppu_addr low byte to buffer
P:0AA8::; Add ppu_data to buffer
P:0AAE::; Update buffer pointer
P:0AB1::; Tell NMI to update next round
P:0AB3::; Return
P:0AB4:tbl_IntroScreenPalette:; LUTs\n; Initial screen palette
P:0AD4:tbl_IntroScreenLogoChr:; Intro: mapping logo index to chr tile
P:0ADC:tbl_IntroScreenData:; Intro screen data\n; Set PPU address $20AC and draw
P:0AE6::; Set PPU address $20CF and draw
P:0AEA::; Set PPU address $2122 and draw
P:0B06::; Set PPU address $2147 and draw
P:0B1F::; Set PPU address $218B and draw
P:0B2C::; Set PPU address $21E6 and draw
P:0B41::; Set PPU address $222D and draw
P:0B49::; Set PPU address $2281
P:0B4B::; Draw the Crillion logo
P:0BAA::; End of intro
P:0BAB:explosion_slide0:; Animation frames table\n; CHR tile-id's per slide of explosion
P:0BB4:explosion_slide1
P:0BBD:explosion_slide2
P:0BC6:explosion_slide3
P:0BCF:explosion_slide4
P:0BD8:explosion_anim_hi:; High and low bytes of animation slides
P:0BE2:explosion_anim_lo
P:0BEC:tbl_BallColorDark:; Ball palette color table (CBRYGM)
P:0BF2:tbl_BallColorLight
P:0BF8:tbl_LoadScreenHi:; Screen mode drawing routine addresses
P:0BFB:tbl_LoadScreenLo
P:0BFE:lvl_layout_01:; Level data
P:0C19:lvl_layout_02
P:0C4E:lvl_layout_03
P:0C81:lvl_layout_04
P:0CF2:lvl_layout_05
P:0D2D:lvl_layout_06
P:0DB6:lvl_layout_07
P:0DF7:lvl_layout_08
P:0E2E:lvl_layout_09
P:0E71:lvl_layout_10
P:0EA0:lvl_layout_11
P:0EF3:lvl_layout_12
P:0F1E:lvl_layout_13
P:0F71:lvl_layout_14
P:0FE8:lvl_layout_15
P:1019:lvl_layout_16
P:106E:lvl_layout_17
P:10D5:lvl_layout_18
P:112A:lvl_layout_19
P:1169:lvl_layout_20
P:11B4:lvl_layout_21
P:11F1:lvl_layout_22
P:121E:lvl_layout_23
P:1269:lvl_layout_24
P:12AE:lvl_layout_25
P:12DD:tbl_lvl_layout_hi:; Level layout address pointers
P:12F6:tbl_lvl_layout_lo
P:130F:tbl_lvl_ball_startpos:; Ball start position (#$YX)
P:1328:tbl_lvl_ball_init:; Ball start direction, color and tile score\n; #% ccc v tttt\n;    ||| | ++++-- tile score\n;    ||| +------- vertical direction, up (0) or down\n;    +++--------- color (CBRYGM)
P:1341:tbl_Times64:; Helper table to multiply values by 64
P:1345:tbl_GametileTopLeft:; Metatile ID to CHR data mapper
P:134F:tbl_GametileTopRight
P:1359:tbl_GametileBottomLeft
P:1363:tbl_GametileBottomRight
P:136D:tbl_GameTileRamByte:; Metatile ID to RAM byte data mapper
P:1372:tbl_HudText:; HUD text data
P:138E:NMI:; NMI handler\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; include/nmi.asm\n;\n; Non-maskable interrupt script. This script is being executed\n; when vBlank hits.\n;\n;\n; Preserve accumulator through stack
P:138F::; Should NMI be skipped?
P:1396::; When in NMI, skip additional NMI requests
P:139A::; Preserve X, Y, and PC through stack
P:139F::; Check forced NMI skip
P:13A6::; Update PPU mask\nLDA #$00\nSTA PPU_CTRL
P:13AB::; Additional PPU updates go here\n; Check if ppu_buffer needs updating
P:13B2::; Reset ppu control register and mask
P:13BA::; Set up loop\n; Reset hi/lo latch
P:13BD::; Write ppu_buffer hi and lo addresss to PPU_ADDR
P:13CA::; Write ppu_buffer data to PPU_ADDR
P:13D1::; Check if updating is done (eg. X is at pointer)
P:13D9::; Reset ppu buffer update and pointer
P:13DF::; Reset scrolling position
P:13E5::; Restore ppu control register and mask
P:13F1::; Continue other NMI stuff\n; Reset sprite RAM, draw sprites
P:13F9::; Decrease explosion frame counters
P:140C::; Decrease nudge counter
P:1412::; This is what happens when we forced nmi skip\n; Increase frame counters
P:1414::; reset ball_update_position
P:1418::; Don't skip next NMI request
P:141C::; Restore X, Y and PC from stack
P:1421::; Restore accumulator from stack
P:1422::; Return
P:1423:IRQ:; IRQ handler (empty)
R:0000:ADDR_CHRROM
R:0000:ADDR_ZEROPAGE
R:0000:BALL_ATTR
R:0000:BALL_LEFT
R:0000:BALL_TOP
R:0000:IS_INTRO_SCREEN
R:0000:_SPACE
R:0001:BALL_IS_DEAD
R:0001:BALL_TILE_CHR
R:0001:BUTTON_RIGHT
R:0001:IS_GAME_SCREEN
R:0001:KILL_BALL
R:0001:TILE_IS_SOLID
R:0001:_0
R:0002:BALL_SPEED_HI
R:0002:BUTTON_LEFT
R:0002:IS_WIN_SCREEN
R:0002:NUDGE_BALL_RIGHT
R:0002:_1
R:0003:CHECK_SCREEN_MODE
R:0003:NUDGE_FRAMES
R:0003:SLIDE_WIDTH
R:0003:_2
R:0004:ANIMATION_SPEED
R:0004:BALL_HALF_SIZE
R:0004:BALL_IS_FROZEN
R:0004:BUTTON_DOWN
R:0004:FREEZE_BALL
R:0004:MAX_ANIMATIONS
R:0004:_3
R:0005:_4
R:0006:_5
R:0007:_6
R:0008:BALL_HEIGHT
R:0008:BALL_WIDTH
R:0008:BUTTON_UP
R:0008:_7
R:0009:SLIDE_SIZE
R:0009:_8
R:000A:ANIM_SLIDES
R:000A:_9
R:000B:_A
R:000C:_B
R:000D:_C
R:000E:_D
R:000F:_E
R:0010:BALL_MOVES_DOWN
R:0010:BOUND_LEFT
R:0010:BUTTON_START
R:0010:IS_DEATH_BLOCK
R:0010:MOVE_BALL_DOWN
R:0010:_F
R:0011:_G
R:0012:_H
R:0013:_I
R:0014:_J
R:0015:_K
R:0016:_L
R:0017:_M
R:0018:_N
R:0019:_O
R:001A:_P
R:001B:_Q
R:001C:_R
R:001D:_S
R:001E:_T
R:001F:_U
R:0020:BUTTON_SELECT
R:0020:IS_PAINT_BLOCK
R:0020:_V
R:0021:_W
R:0022:_X
R:0023:_Y
R:0024:_Z
R:0025:_COMMA
R:0026:_DOT
R:0027:_COLON
R:0028:_COPY
R:0030:BALL_SPEED_LO
R:0030:BOUND_TOP
R:0040:BUTTON_B
R:0040:IS_MOVE_BLOCK
R:0040:SPRITE_0_HIT
R:0080:BUTTON_A
R:0080:IS_COLOR_BLOCK
R:0080:LOAD_INTRO_SCREEN
R:0081:LOAD_GAME_SCREEN
R:0082:LOAD_WIN_SCREEN
R:00C8:BOUND_BOTTOM
R:00D0:BALL_TOP_WGA
R:00E8:BOUND_RIGHT
R:00EF:MOVE_BALL_UP
R:00F0:BALL_LEFT_WGA
R:00FB:UNFREEZE_BALL
R:00FD:NUDGE_BALL_LEFT
R:00FE:REVIVE_BALL
R:00FF:LEVEL_END
R:0100:ADDR_SOUNDRAM
R:0200:ADDR_SPRITERAM
R:0300:ADDR_OTHERRAM
R:0400:ADDR_SCREENTILERAM
G:2000:PPU_CTRL
G:2001:PPU_MASK
G:2002:PPU_STATUS
G:2003:OAM_ADDR
G:2004:OAM_DATA
G:2005:PPU_SCROLL
G:2006:PPU_ADDR
G:2007:PPU_DATA
G:4010:APU_CTRL
G:4014:OAM_DMA
G:4015:APU_STATUS
G:4016:JOYPAD_1
G:4017:APU_FC
G:4017:JOYPAD_2
G:8000:ADDR_STARTBANK
G:C000:ADDR_ENDBANK
G:FFFA:ADDR_VECTORS
