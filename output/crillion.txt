	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; TEST MODE (comment to disable, or set to level number)
	                            TESTING = #0 ; start at level 1 with 255 lives
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Timers 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           unfreeze_timer         .dsb 1
00042                           
00042                           ;; Current level (doubles as level select variable)
00042                           current_level          .dsb 1
00043                           
00043                           ;; Tile type the ball is currently colliding with
00043                           colliding_tile         .dsb 1
00044                           
00044                           ;; Number of blocks left on screen
00044                           blocks_left            .dsb 1
00045                           
00045                           ;; Sound control variables
00045                           max_noise              .dsb 1
00046                           sweep_noise            .dsb 1
00047                           current_noise          .dsb 1
00048                           noise_timer            .dsb 1
00049                           do_beeps               .dsb 1
0004A                           soft_pulse1            .dsb 1
0004B                           noise_muted            .dsb 1
0004C                           
0004C                           ;; Sound effect variables
0004C                           sfx_address            .dsb 2
0004E                           sfx_timer              .dsb 2
00050                           sfx_frequency          .dsb 2
00052                           
00052                           
00052                           ;; Additional NMI check for timed PPU fade
00052                           check_nmi              .dsb 1
00053                           
00053                           
00053                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 0D C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 0D C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 20                         STA ball_score
0C057 85 21                         STA ball_score+1
0C059 85 22                         STA ball_score+2
0C05B 85 23                         STA ball_score+3
0C05D 85 24                         STA ball_score+4
0C05F 85 25                         STA ball_score+5
0C061                           
0C061                           ifdef TESTING
0C061 A9 FF                         LDA #$FF
0C063 85 1F                         STA ball_lives
0C065 A9 00                         LDA #TESTING
0C067                           endif
0C067                           
0C067 85 42                         STA current_level
0C069                           
0C069                           
0C069                           
0C069                           ;; Main game loop
0C069                           lbl_MainGameLoop:
0C069 20 04 C5                      JSR sub_WaitForNMI ; align main loop
0C06C                               .include "game/main.asm"
0C06C                           
0C06C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C06C                           ;;
0C06C                           ;; game/main.asm
0C06C                           ;;
0C06C                           ;; The main game loop content.
0C06C                           ;;
0C06C                           ;;
0C06C                           
0C06C                               ;; Reset sprite pointer every game loop
0C06C A9 00                         LDA #$00
0C06E 85 3D                         STA sprite_ram_pointer
0C070                           
0C070                               ;; Store previous buttons
0C070 A5 0F                         LDA buttons_held
0C072 85 0E                         STA buttons_prev
0C074                           
0C074                               ;; Read controller input
0C074 20 F0 C4                      JSR sub_ReadController
0C077                           
0C077                               ;; Get buttons released
0C077 A5 0F                         LDA buttons_held
0C079 49 FF                         EOR #$FF
0C07B 25 0E                         AND buttons_prev
0C07D 85 11                         STA buttons_released
0C07F                           
0C07F                               ;; Set buttons pressed
0C07F A5 0E                         LDA buttons_prev
0C081 49 FF                         EOR #$FF
0C083 25 0F                         AND buttons_held
0C085 85 10                         STA buttons_pressed
0C087                           
0C087                               ;; Load screen?
0C087 A5 38                         LDA screen_mode
0C089 29 80                         AND #%10000000
0C08B F0 1E                         BEQ +screenLoaded
0C08D                           
0C08D                               ;; Get screen type to load
0C08D A5 38                         LDA screen_mode
0C08F 29 03                         AND #%00000011
0C091 A8                            TAY
0C092                               
0C092                               ;; Get address to load screen type from
0C092 B9 3F D2                      LDA tbl_LoadScreenLo,y
0C095 85 0C                         STA pointer
0C097 B9 3C D2                      LDA tbl_LoadScreenHi,y
0C09A 85 0D                         STA pointer+1
0C09C                           
0C09C                               ;; Load screen
0C09C 20 90 C6                      JSR sub_DisableRendering
0C09F 20 D4 C9                      JSR sub_JumpToPointer
0C0A2 20 A4 C6                      JSR sub_EnableRendering
0C0A5                               
0C0A5                               ;; Don't load screen anymore next loop
0C0A5 A5 38                         LDA screen_mode
0C0A7 29 7F                         AND #%01111111
0C0A9 85 38                         STA screen_mode
0C0AB                               
0C0AB                           
0C0AB                           +screenLoaded:
0C0AB                               ;; Check if we're on the game screen
0C0AB A5 38                         LDA screen_mode
0C0AD C9 01                         CMP #IS_GAME_SCREEN
0C0AF F0 03                         BEQ +
0C0B1 4C 54 C3                          JMP +checkNextScreen
0C0B4                               +
0C0B4                           
0C0B4                               ;; Load sprite 0 in place
0C0B4 A9 28                         LDA #$28
0C0B6 8D 00 02                      STA ADDR_SPRITERAM
0C0B9 A9 0F                         LDA #$0F
0C0BB 8D 01 02                      STA ADDR_SPRITERAM+1
0C0BE A9 22                         LDA #$22
0C0C0 8D 02 02                      STA ADDR_SPRITERAM+2
0C0C3 A9 F8                         LDA #$F8
0C0C5 8D 03 02                      STA ADDR_SPRITERAM+3
0C0C8 A9 04                         LDA #$04
0C0CA 85 3D                         STA sprite_ram_pointer
0C0CC                           
0C0CC                               ;; We're on the game screen
0C0CC                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0CC A5 35                         LDA sprites_update_position
0C0CE F0 03                         BEQ +
0C0D0 4C BA C2                          JMP +skipSpriteMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Check if ball is frozen
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 04                         AND #BALL_IS_FROZEN
0C0D7 F0 03                         BEQ +
0C0D9 4C 79 C2                          JMP +skipBallMovement
0C0DC                               +
0C0DC                           
0C0DC                               ;; Move the ball
0C0DC                               .include "game/include/main/move_ball.asm"
0C0DC                           
0C0DC                               ;; Check if ball goes up or down
0C0DC A5 37                         LDA ball_flags
0C0DE 29 10                         AND #BALL_MOVES_DOWN
0C0E0 F0 2B                         BEQ +moveBallUp
0C0E2                           
0C0E2                           
0C0E2                           +moveBallDown:
0C0E2                               ;; update the low byte
0C0E2 A5 1A                         LDA ball_ypos_lo
0C0E4 85 1C                         STA ball_ypos_lo_prev
0C0E6 18                            CLC
0C0E7 69 88                         ADC #BALL_SPEED_LO
0C0E9 85 1A                         STA ball_ypos_lo
0C0EB                           
0C0EB                               ;; update the high byte with carry
0C0EB A5 19                         LDA ball_ypos_hi
0C0ED 85 1B                         STA ball_ypos_hi_prev
0C0EF 69 01                         ADC #BALL_SPEED_HI
0C0F1 85 19                         STA ball_ypos_hi
0C0F3                               
0C0F3                               ;; Check bottom bound
0C0F3 C9 C8                         CMP #BOUND_BOTTOM
0C0F5 90 3C                         BCC +checkHorizontalMovement
0C0F7 F0 3A                         BEQ +checkHorizontalMovement
0C0F9                           
0C0F9                           
0C0F9                               ;; Change ball direction to "up"
0C0F9 A9 C8                         LDA #BOUND_BOTTOM
0C0FB 38                            SEC
0C0FC E9 01                         SBC #$01
0C0FE 85 19                         STA ball_ypos_hi
0C100 A9 00                         LDA #$00
0C102 85 1A                         STA ball_ypos_lo
0C104 A5 37                         LDA ball_flags
0C106 29 EF                         AND #MOVE_BALL_UP
0C108 85 37                         STA ball_flags
0C10A 4C 33 C1                      JMP +checkHorizontalMovement
0C10D                           
0C10D                           
0C10D                           +moveBallUp:
0C10D                               ;; update the low byte
0C10D A5 1A                         LDA ball_ypos_lo
0C10F 85 1C                         STA ball_ypos_lo_prev
0C111 38                            SEC
0C112 E9 88                         SBC #BALL_SPEED_LO
0C114 85 1A                         STA ball_ypos_lo
0C116                           
0C116                               ;; update the high byte with carry
0C116 A5 19                         LDA ball_ypos_hi
0C118 85 1B                         STA ball_ypos_hi_prev
0C11A E9 01                         SBC #BALL_SPEED_HI
0C11C 85 19                         STA ball_ypos_hi
0C11E                               
0C11E                               ;; Check top bound
0C11E C9 30                         CMP #BOUND_TOP
0C120 B0 11                         BCS +checkHorizontalMovement
0C122                           
0C122                               ;; Change ball direction to "down"
0C122 A9 30                         LDA #BOUND_TOP
0C124 18                            CLC
0C125 69 01                         ADC #$01
0C127 85 19                         STA ball_ypos_hi
0C129 A9 00                         LDA #$00
0C12B 85 1A                         STA ball_ypos_lo
0C12D A5 37                         LDA ball_flags
0C12F 09 10                         ORA #MOVE_BALL_DOWN
0C131 85 37                         STA ball_flags
0C133                           
0C133                           
0C133                           +checkHorizontalMovement:
0C133                           
0C133                               ;; Check if ball is being nudged
0C133 A5 3E                         LDA nudge_timer
0C135 D0 41                         BNE +doneBallMovement
0C137                           
0C137                               ;; Check if left button is held
0C137 A5 0F                         LDA buttons_held
0C139 29 02                         AND #BUTTON_LEFT
0C13B F0 1B                         BEQ +
0C13D                                   ;; update the low byte
0C13D A5 18                             LDA ball_xpos_lo
0C13F 38                                SEC
0C140 E9 88                             SBC #BALL_SPEED_LO
0C142 85 18                             STA ball_xpos_lo
0C144                           
0C144                                   ;; update the high byte
0C144 A5 17                             LDA ball_xpos_hi
0C146 E9 01                             SBC #BALL_SPEED_HI
0C148 85 17                             STA ball_xpos_hi
0C14A                                   
0C14A                                   ;; Check left bound
0C14A C9 10                             CMP #BOUND_LEFT
0C14C B0 2A                             BCS +doneBallMovement
0C14E                                   
0C14E                                   ;; Set flag to nudge right and set nudge timer
0C14E A5 37                             LDA ball_flags
0C150 09 02                             ORA #NUDGE_BALL_RIGHT
0C152 20 CD C9                          JSR sub_InitiateNudge
0C155                           
0C155 4C 78 C1                          JMP +doneBallMovement        
0C158                               +
0C158                           
0C158                               ;; Check if right button is held
0C158 A5 0F                         LDA buttons_held
0C15A 29 01                         AND #BUTTON_RIGHT
0C15C F0 1A                         BEQ +
0C15E                                   ;; update the low byte
0C15E A5 18                             LDA ball_xpos_lo
0C160 18                                CLC
0C161 69 88                             ADC #BALL_SPEED_LO
0C163 85 18                             STA ball_xpos_lo
0C165                           
0C165                                   ;; update the high byte
0C165 A5 17                             LDA ball_xpos_hi
0C167 69 01                             ADC #BALL_SPEED_HI
0C169 85 17                             STA ball_xpos_hi     
0C16B                           
0C16B                                  ;; Check right bound
0C16B C9 E8                             CMP #BOUND_RIGHT
0C16D 90 09                             BCC +doneBallMovement
0C16F F0 07                             BEQ +doneBallMovement
0C171                                   
0C171                                   ;; Set flag to nudge left and set nudge timer
0C171 A5 37                             LDA ball_flags
0C173 29 FD                             AND #NUDGE_BALL_LEFT
0C175 20 CD C9                          JSR sub_InitiateNudge
0C178                               +
0C178                           
0C178                           
0C178                           +doneBallMovement:
0C178                           
0C178                               ;; Check nudge
0C178 A5 3E                         LDA nudge_timer
0C17A F0 23                         BEQ +doneBallNudging
0C17C A5 37                             LDA ball_flags
0C17E 29 02                             AND #NUDGE_BALL_RIGHT
0C180 F0 10                             BEQ +nudgeBallLeft
0C182                                   
0C182                                       ;; update the low byte
0C182 A5 18                                 LDA ball_xpos_lo
0C184 18                                    CLC
0C185 69 88                                 ADC #BALL_SPEED_LO
0C187 85 18                                 STA ball_xpos_lo
0C189                           
0C189                                       ;; update the high byte
0C189 A5 17                                 LDA ball_xpos_hi
0C18B 69 01                                 ADC #BALL_SPEED_HI
0C18D 85 17                                 STA ball_xpos_hi  
0C18F 4C 9F C1                              JMP +doneBallNudging
0C192                                   +nudgeBallLeft:
0C192                                   
0C192                                   ;; update the low byte
0C192 A5 18                             LDA ball_xpos_lo
0C194 38                                SEC
0C195 E9 88                             SBC #BALL_SPEED_LO
0C197 85 18                             STA ball_xpos_lo
0C199                           
0C199                                   ;; update the high byte
0C199 A5 17                             LDA ball_xpos_hi
0C19B E9 01                             SBC #BALL_SPEED_HI
0C19D 85 17                             STA ball_xpos_hi
0C19F                               +doneBallNudging:
0C19F                           
0C19F                               ;; Don't update position again until next frame
0C19F                               ;; (moved to after move block routine)
0C19F                           
0C19F                           +doneBallHandling:
0C19F                           
0C19F                               
0C19F                               ;; Do collision detection
0C19F                               .include "game/include/main/collision_detection.asm"
0C19F                           
0C19F                               ;; Get ball's x-left, x-center, x-right position
0C19F A5 17                         LDA ball_xpos_hi
0C1A1 18                            CLC
0C1A2 69 F0                         ADC #BALL_LEFT_WGA
0C1A4 85 2F                         STA ball_left
0C1A6 18                            CLC
0C1A7 69 04                         ADC #BALL_HALF_SIZE
0C1A9 85 30                         STA ball_center
0C1AB 18                            CLC
0C1AC 69 04                         ADC #BALL_HALF_SIZE
0C1AE 85 31                         STA ball_right
0C1B0                           
0C1B0                               ;; Get ball's y-top, y-middle, y-bottom position
0C1B0 A5 19                         LDA ball_ypos_hi
0C1B2 18                            CLC
0C1B3 69 D0                         ADC #BALL_TOP_WGA
0C1B5 85 32                         STA ball_top
0C1B7 18                            CLC
0C1B8 69 04                         ADC #BALL_HALF_SIZE
0C1BA 85 33                         STA ball_middle
0C1BC 18                            CLC
0C1BD 69 04                         ADC #BALL_HALF_SIZE
0C1BF 85 34                         STA ball_bottom
0C1C1                           
0C1C1                           +checkRightCollision:
0C1C1                               ;; Check if ball moves right
0C1C1                               ;; No need to check nudging here as that will never collide with a tile
0C1C1 A5 0F                         LDA buttons_held
0C1C3 29 01                         AND #BUTTON_RIGHT
0C1C5 F0 20                         BEQ +checkLeftCollision
0C1C7                           
0C1C7                               ;; Check tile at right position
0C1C7 A5 33                         LDA ball_middle
0C1C9 85 00                         STA temp
0C1CB A5 31                         LDA ball_right
0C1CD 85 01                         STA temp+1
0C1CF 20 78 C6                      JSR sub_ConvertXYToTileType
0C1D2 29 01                         AND #TILE_IS_SOLID
0C1D4 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1D6                           
0C1D6                               ;; Nudge ball and evaluate tile type
0C1D6 A9 01                         LDA #$01
0C1D8 85 36                         STA move_block_space_to_check
0C1DA A5 37                         LDA ball_flags
0C1DC 29 FD                         AND #NUDGE_BALL_LEFT
0C1DE 20 CD C9                      JSR sub_InitiateNudge
0C1E1 20 06 C8                      JSR sub_EvaluateTileType
0C1E4 4C 0A C2                      JMP +checkTopCollision
0C1E7                           
0C1E7                           +checkLeftCollision:
0C1E7                               ;; Check if ball moves right
0C1E7                               ;; No need to check nudging here as that will never collide with a tile
0C1E7 A5 0F                         LDA buttons_held
0C1E9 29 02                         AND #BUTTON_LEFT
0C1EB F0 1D                         BEQ +checkTopCollision
0C1ED                           
0C1ED                               ;; Check tile at right position
0C1ED A5 33                         LDA ball_middle
0C1EF 85 00                         STA temp
0C1F1 A5 2F                         LDA ball_left
0C1F3 85 01                         STA temp+1
0C1F5 20 78 C6                      JSR sub_ConvertXYToTileType
0C1F8 29 01                         AND #TILE_IS_SOLID
0C1FA F0 0E                         BEQ +checkTopCollision
0C1FC                           
0C1FC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1FC A9 FF                         LDA #$FF
0C1FE 85 36                         STA move_block_space_to_check
0C200 A5 37                         LDA ball_flags
0C202 09 02                         ORA #NUDGE_BALL_RIGHT
0C204 20 CD C9                      JSR sub_InitiateNudge
0C207 20 06 C8                      JSR sub_EvaluateTileType
0C20A                               
0C20A                               
0C20A                           +checkTopCollision:
0C20A                               ;; Check if ball moves up
0C20A A5 37                         LDA ball_flags
0C20C 29 10                         AND #BALL_MOVES_DOWN
0C20E D0 27                         BNE +checkBottomCollision
0C210                           
0C210                               ;; Check tile at top position
0C210 A5 32                         LDA ball_top
0C212 85 00                         STA temp
0C214 A5 30                         LDA ball_center
0C216 85 01                         STA temp+1
0C218 20 78 C6                      JSR sub_ConvertXYToTileType
0C21B 29 01                         AND #TILE_IS_SOLID
0C21D F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C21F                           
0C21F                               ;; Tile is solid; move ball down and evaluate tile type
0C21F A5 1C                         LDA ball_ypos_lo_prev
0C221 85 1A                         STA ball_ypos_lo
0C223 A5 1B                         LDA ball_ypos_hi_prev
0C225 85 19                         STA ball_ypos_hi
0C227 A5 37                         LDA ball_flags
0C229 09 10                         ORA #MOVE_BALL_DOWN
0C22B 85 37                         STA ball_flags
0C22D                           
0C22D A9 F0                         LDA #$F0 ; which is -16
0C22F 85 36                         STA move_block_space_to_check
0C231 20 06 C8                      JSR sub_EvaluateTileType
0C234 4C 5B C2                      JMP +doneCheckingCollision
0C237                           
0C237                           +checkBottomCollision:
0C237                               ;; No movement check needed: since ball is not moving up, it must move down
0C237                           
0C237                               ;; Check tile at bottom position
0C237 A5 34                         LDA ball_bottom
0C239 85 00                         STA temp
0C23B A5 30                         LDA ball_center
0C23D 85 01                         STA temp+1
0C23F 20 78 C6                      JSR sub_ConvertXYToTileType
0C242 29 01                         AND #TILE_IS_SOLID
0C244 F0 15                         BEQ +doneCheckingCollision
0C246                           
0C246                               ;; Tile is solid; move ball up and evaluate tile type
0C246 A5 1C                         LDA ball_ypos_lo_prev
0C248 85 1A                         STA ball_ypos_lo
0C24A A5 1B                         LDA ball_ypos_hi_prev
0C24C 85 19                         STA ball_ypos_hi
0C24E A5 37                         LDA ball_flags
0C250 29 EF                         AND #MOVE_BALL_UP
0C252 85 37                         STA ball_flags
0C254                           
0C254 A9 10                         LDA #$10
0C256 85 36                         STA move_block_space_to_check
0C258 20 06 C8                      JSR sub_EvaluateTileType
0C25B                           
0C25B                           +doneCheckingCollision:
0C25B                           
0C25B                               
0C25B                               ;; Update bonus
0C25B                               .include "game/include/main/update_bonus.asm"
0C25B                           
0C25B                           ;; Update the bonus counter on screen
0C25B                           
0C25B                               ;; If bonus = 000, skip decreasing
0C25B A5 2C                         LDA ball_bonus
0C25D 05 2D                         ORA ball_bonus+1
0C25F 05 2E                         ORA ball_bonus+2
0C261 F0 0D                         BEQ +done
0C263                           
0C263                               ;; Check if bonus timer is done yet
0C263 A5 3F                         LDA bonus_timer
0C265 D0 09                         BNE +done
0C267                           
0C267                               ;; Bonus timer is done
0C267                               ;; Reset bonus timer
0C267 A9 08                         LDA #BONUS_FRAMES
0C269 85 3F                         STA bonus_timer
0C26B                               
0C26B                               ;; Subtract one from ball bonus ones
0C26B A2 01                         LDX #$01
0C26D 20 83 D0                      JSR sub_SubtractXFromBonus
0C270                           
0C270                           +done:
0C270                           
0C270                           
0C270                               ;; Check if self-destruct
0C270 A5 10                         LDA buttons_pressed
0C272 29 20                         AND #BUTTON_SELECT
0C274 F0 03                         BEQ +
0C276 20 A0 C8                          JSR sub_Selfdestruct
0C279                               +
0C279                           
0C279                           
0C279                           +skipBallMovement:
0C279                               ;; Move blocks a pixel up/down/left/right
0C279                               .include "game/include/main/move_blocks.asm"
0C279                           
0C279                               ;; Set up block loop
0C279 A2 04                         LDX #MAX_ANIMATIONS
0C27B                           -moveBlocksLoop:
0C27B CA                            DEX
0C27C                           
0C27C                               ;; Check if block is still moving
0C27C BD 80 03                      LDA move_block_timer,x
0C27F F0 33                         BEQ +checkNext
0C281                               
0C281                               ;; Check if block is done moving
0C281 C9 01                         CMP #$01
0C283 D0 0B                         BNE +
0C285                                   ;; If so, draw a tile and remove the sprite
0C285 20 D1 C6                          JSR sub_DrawMoveTile
0C288 A9 00                             LDA #$00
0C28A 9D 80 03                          STA move_block_timer,x
0C28D 4C B4 C2                          JMP +checkNext
0C290                               +
0C290                               
0C290                               ;; Check in which direction the block is moving
0C290                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C290 BD 88 03                      LDA move_block_flags,x
0C293 29 03                         AND #%00000011
0C295 F0 14                         BEQ +movingDown
0C297 C9 01                         CMP #$01
0C299 F0 0A                         BEQ +movingUp
0C29B C9 02                         CMP #$02
0C29D F0 12                         BEQ +movingRight
0C29F                               
0C29F                               ;; Move block in correct direction
0C29F                               +movingLeft:
0C29F DE 78 03                      DEC move_block_x,x
0C2A2 4C B4 C2                      JMP +checkNext
0C2A5                           
0C2A5                               +movingUp:
0C2A5 DE 7C 03                      DEC move_block_y,x
0C2A8 4C B4 C2                      JMP +checkNext
0C2AB                           
0C2AB                               +movingDown:
0C2AB FE 7C 03                      INC move_block_y,x
0C2AE 4C B4 C2                      JMP +checkNext
0C2B1                           
0C2B1                               +movingRight:
0C2B1 FE 78 03                      INC move_block_x,x
0C2B4                           
0C2B4                               ;; Check next block (if any left)
0C2B4                               +checkNext:
0C2B4 E0 00                         CPX #$00
0C2B6 D0 C3                         BNE -moveBlocksLoop
0C2B8                               
0C2B8                               ;; Don't update sprites
0C2B8 E6 35                         INC sprites_update_position
0C2BA                           
0C2BA                           
0C2BA                           +skipSpriteMovement:
0C2BA                               ;; Testing timed PPU scroll concept (disabled)
0C2BA                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2BA                           
0C2BA                               ;; Check if ball is dead
0C2BA A5 37                         LDA ball_flags
0C2BC 29 01                         AND #BALL_IS_DEAD
0C2BE F0 03                         BEQ +
0C2C0 4C E2 C2                          JMP +ballIsDead
0C2C3                               +
0C2C3                               
0C2C3                               ;; Add ball to sprite buffer
0C2C3 A6 3D                         LDX sprite_ram_pointer
0C2C5 A5 19                         LDA ball_ypos_hi
0C2C7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2CA E8                            INX
0C2CB A9 01                         LDA #BALL_TILE_CHR
0C2CD 9D 00 02                      STA ADDR_SPRITERAM,x
0C2D0 E8                            INX
0C2D1 A9 00                         LDA #BALL_ATTR
0C2D3 9D 00 02                      STA ADDR_SPRITERAM,x
0C2D6 E8                            INX
0C2D7 A5 17                         LDA ball_xpos_hi
0C2D9 9D 00 02                      STA ADDR_SPRITERAM,x
0C2DC E8                            INX
0C2DD 86 3D                         STX sprite_ram_pointer
0C2DF 4C F3 C2                      JMP +drawBlocks
0C2E2                           
0C2E2                           +ballIsDead:
0C2E2                               ;; Check if kill timer has reset
0C2E2 A5 40                         LDA kill_timer
0C2E4 F0 03                         BEQ +
0C2E6 4C F3 C2                          JMP +drawBlocks
0C2E9                               +
0C2E9                               
0C2E9                               ;; Take a live
0C2E9 C6 1F                         DEC ball_lives
0C2EB D0 03                         BNE +
0C2ED                                   ;; If no lives left, initiate game over sequence
0C2ED 4C A6 C3                          JMP lbl_GameOver
0C2F0                               +
0C2F0                               
0C2F0                               ;; Reload current level
0C2F0 4C BD C4                      JMP lbl_InitiateLevelLoad
0C2F3                           
0C2F3                           
0C2F3                           +drawBlocks:
0C2F3                               ;; Draw moving block(s, if any)
0C2F3                               .include "game/include/main/draw_blocks.asm"
0C2F3                           
0C2F3                           ;; Handle movement of move blocks
0C2F3                           
0C2F3                               ;; Set up a loop
0C2F3 A0 04                         LDY #MAX_ANIMATIONS
0C2F5                           -drawBlocksLoop:
0C2F5 88                            DEY
0C2F6                           
0C2F6                               ;; If timer is zero, check the next move block
0C2F6 B9 80 03                      LDA move_block_timer,y
0C2F9 F0 52                         BEQ +nextMoveBlock
0C2FB                               
0C2FB                               ;; Get current sprite pointer
0C2FB A6 3D                         LDX sprite_ram_pointer
0C2FD                           
0C2FD                               ;; Draw the sprites on screen
0C2FD B9 7C 03                      LDA move_block_y,y
0C300 9D 00 02                      STA ADDR_SPRITERAM,x
0C303 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C306 18                            CLC
0C307 69 08                         ADC #$08
0C309 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C30C 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C30F E8                            INX
0C310                           
0C310 A9 52                         LDA #$52 ; Top left chr id
0C312 9D 00 02                      STA ADDR_SPRITERAM,x
0C315 A9 53                         LDA #$53 ; Top right chr id
0C317 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C31A A9 62                         LDA #$62 ; Bottom left chr id
0C31C 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C31F A9 63                         LDA #$63 ; Bottom right chr id
0C321 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C324 E8                            INX
0C325                           
0C325 A9 00                         LDA #BALL_ATTR
0C327 9D 00 02                      STA ADDR_SPRITERAM,x
0C32A 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C32D 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C330 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C333 E8                            INX
0C334                           
0C334 B9 78 03                      LDA move_block_x,y
0C337 9D 00 02                      STA ADDR_SPRITERAM,x
0C33A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C33D 18                            CLC
0C33E 69 08                         ADC #$08
0C340 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C343 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C346                           
0C346                               ;; Update sprite RAM pointer
0C346 A5 3D                         LDA sprite_ram_pointer
0C348 18                            CLC
0C349 69 10                         ADC #$10
0C34B 85 3D                         STA sprite_ram_pointer
0C34D                           
0C34D                           
0C34D                           
0C34D                           +nextMoveBlock:
0C34D                               ;; Check the next move block
0C34D C0 00                         CPY #$00
0C34F D0 A4                         BNE -drawBlocksLoop
0C351                           
0C351 4C A0 C3                      JMP +doneScreenLoad
0C354                           
0C354                           
0C354                           
0C354                           +checkNextScreen:
0C354                           
0C354                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C354                               ;; Upon pressing START, the selected level will start
0C354                               .include "game/include/main/select_level.asm"
0C354                           
0C354                               ;; Change level number on start screen
0C354 A5 10                         LDA buttons_pressed
0C356 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C358 F0 3C                         BEQ +checkStartPress
0C35A                           
0C35A                                   ;; Select next level (1, 5, 9, 13, 17)
0C35A A5 42                             LDA current_level
0C35C 18                                CLC
0C35D 69 04                             ADC #$04
0C35F C9 14                             CMP #$14
0C361 D0 02                             BNE +
0C363 A9 00                                 LDA #$00
0C365                                   +
0C365 85 42                             STA current_level
0C367                                   
0C367                                   ;; Convert level number to two-byte value
0C367 A9 00                             LDA #$00
0C369 85 03                             STA temp+3
0C36B A5 42                             LDA current_level
0C36D 18                                CLC
0C36E 69 01                             ADC #$01
0C370                           
0C370                               -
0C370 C9 0A                             CMP #$0A
0C372 90 08                             BCC +
0C374 E6 03                                 INC temp+3
0C376 38                                    SEC
0C377 E9 0A                                 SBC #$0A
0C379 4C 70 C3                              JMP -
0C37C                                   +
0C37C                           
0C37C                                   ;; Add level number to PPU buffer
0C37C 18                                CLC
0C37D 69 01                             ADC #$01
0C37F 85 02                             STA temp+2
0C381 A9 20                             LDA #$20
0C383 85 00                             STA temp
0C385 A9 D0                             LDA #$D0
0C387 85 01                             STA temp+1
0C389 20 D2 D0                          JSR sub_WriteByteToPPUBuffer
0C38C                                   
0C38C C6 01                             DEC temp+1
0C38E A4 03                             LDY temp+3
0C390 C8                                INY
0C391 84 02                             STY temp+2
0C393 20 D2 D0                          JSR sub_WriteByteToPPUBuffer
0C396                                   
0C396                               +checkStartPress:
0C396                           
0C396                           
0C396                           
0C396                               ;; If START button is pressed
0C396 A5 10                         LDA buttons_pressed
0C398 29 10                         AND #BUTTON_START
0C39A F0 04                         BEQ +
0C39C                                   ;; Start the level
0C39C A9 81                             LDA #LOAD_GAME_SCREEN
0C39E 85 38                             STA screen_mode
0C3A0                               +
0C3A0                           
0C3A0                           
0C3A0                           
0C3A0                           +doneScreenLoad:
0C3A0                           
0C3A0                               ;; Load animations (if any)
0C3A0                               ;; and sprite clean-up
0C3A0 20 D7 C9                      JSR sub_LoadAnimations
0C3A3                           
0C3A3 4C 69 C0                      JMP lbl_MainGameLoop
0C3A6                           
0C3A6                           ;; Following sequences are outside main game loop
0C3A6                           .include "game/include/main/game_over.asm"
0C3A6                           
0C3A6                           ;; Game over sequence
0C3A6                           lbl_GameOver:
0C3A6                           
0C3A6                               ;; Disable noise channel
0C3A6 A9 00                         LDA #$00
0C3A8 8D 15 40                      STA APU_STATUS
0C3AB 8D 0C 40                      STA NOISE_VOLUME
0C3AE                               
0C3AE                               ;; Do blinds effect
0C3AE 20 7F C5                      JSR sub_BlindsEffect
0C3B1                           
0C3B1                               ;; Disable draw after HUD to disable screen
0C3B1 20 04 C5                      JSR sub_WaitForNMI
0C3B4                               -
0C3B4 AD 02 20                          LDA PPU_STATUS
0C3B7 29 40                             AND #SPRITE_0_HIT
0C3B9 D0 F9                         BNE -
0C3BB                               -
0C3BB AD 02 20                          LDA PPU_STATUS
0C3BE 29 40                             AND #SPRITE_0_HIT
0C3C0 F0 F9                         BEQ -
0C3C2 A9 00                         LDA #$00
0C3C4 8D 01 20                      STA PPU_MASK
0C3C7                           
0C3C7                               ;; Remove game area from view
0C3C7 2C 02 20                      BIT PPU_STATUS
0C3CA A9 20                         LDA #$20
0C3CC 8D 06 20                      STA PPU_ADDR
0C3CF A9 A0                         LDA #$A0
0C3D1 8D 06 20                      STA PPU_ADDR
0C3D4 A9 00                         LDA #$00
0C3D6 A2 16                         LDX #$16
0C3D8                               -xLoop:
0C3D8 A0 20                             LDY #$20
0C3DA                                   -yLoop:
0C3DA 8D 07 20                              STA PPU_DATA
0C3DD 88                                    DEY
0C3DE D0 FA                             BNE -yLoop
0C3E0 CA                                DEX
0C3E1 D0 F5                         BNE -xLoop
0C3E3                               
0C3E3                               ;; Pause for a little while
0C3E3 A2 18                         LDX #$18
0C3E5                               -
0C3E5 20 04 C5                          JSR sub_WaitForNMI
0C3E8 CA                                DEX
0C3E9 D0 FA                         BNE -
0C3EB                                       
0C3EB                               ;; Do flash effect
0C3EB 20 80 C9                      JSR sub_FlashEffect
0C3EE                           
0C3EE                               ;; Draw GAME OVER tiles over game screen
0C3EE A9 21                         LDA #$21
0C3F0 85 00                         STA temp
0C3F2 A9 EB                         LDA #$EB
0C3F4 85 01                         STA temp+1
0C3F6                           
0C3F6 A2 00                         LDX #$00
0C3F8                               -gameOverTileLoop:
0C3F8 BD F8 D9                          LDA tbl_GameOver,x
0C3FB 85 02                             STA temp+2
0C3FD 20 D2 D0                          JSR sub_WriteByteToPPUBuffer
0C400 E6 01                             INC temp+1
0C402 E8                                INX
0C403 E0 0A                             CPX #$0A
0C405 D0 F1                         BNE -gameOverTileLoop
0C407                               
0C407                               ;; Update GAME OVER attributes on game screen
0C407 A9 23                         LDA #$23
0C409 85 00                         STA temp
0C40B A9 DA                         LDA #$DA
0C40D 85 01                         STA temp+1
0C40F A9 AA                         LDA #$AA
0C411 85 02                         STA temp+2
0C413 A2 04                         LDX #$04
0C415                               -
0C415 20 D2 D0                          JSR sub_WriteByteToPPUBuffer
0C418 E6 01                             INC temp+1
0C41A CA                                DEX
0C41B D0 F8                         BNE -
0C41D 20 04 C5                      JSR sub_WaitForNMI
0C420                               
0C420                              
0C420                               ;; If player score is larger than high score
0C420                               ;; Overwrite high score with player score
0C420                               ;; [@TODO]
0C420                               
0C420                               
0C420                               ;; If player presses either A or START, (soft) reset the game
0C420                               -checkController:
0C420 20 F0 C4                          JSR sub_ReadController
0C423 A5 0F                             LDA buttons_held
0C425 29 90                             AND #%10010000
0C427 F0 F7                         BEQ -checkController
0C429 4C 4B C0                      JMP lbl_SoftReset
0C42C                           
0C42C                           .include "game/include/main/level_win.asm"
0C42C                           
0C42C                           ;; Handling of level win state
0C42C                           lbl_LevelWin:
0C42C                           
0C42C                               ;; Freeze the ball
0C42C A5 37                         LDA ball_flags
0C42E 09 04                         ORA #FREEZE_BALL
0C430 85 37                         STA ball_flags
0C432                           
0C432                               ;; Disable noise channel
0C432 A9 01                         LDA #$01
0C434 85 4B                         STA noise_muted
0C436                               
0C436                               ;; Wait a few frames
0C436 A2 18                         LDX #$18
0C438 20 C0 D0                      JSR sub_WaitXFrames
0C43B                           
0C43B                               ;; Set null tile color to yellow
0C43B A9 3F                         LDA #$3F
0C43D 85 00                         STA temp
0C43F A9 02                         LDA #$02
0C441 85 01                         STA temp+1
0C443 A9 38                         LDA #$38
0C445 85 02                         STA temp+2
0C447 20 D2 D0                      JSR sub_WriteByteToPPUBuffer
0C44A                               
0C44A                               ;; Quick and dirty way to remove ball from screen
0C44A A9 EF                         LDA #$EF
0C44C 8D 04 02                      STA ADDR_SPRITERAM+4
0C44F 8D 05 02                      STA ADDR_SPRITERAM+5
0C452 8D 06 02                      STA ADDR_SPRITERAM+6
0C455 8D 07 02                      STA ADDR_SPRITERAM+7
0C458                               
0C458                               ;; Initiate frequency beeps (@TODO)
0C458                               
0C458                               ;; Wait a few frames
0C458 A2 10                         LDX #$10
0C45A 20 C0 D0                      JSR sub_WaitXFrames
0C45D                               
0C45D                               ;; Restore null tile color to dark blue
0C45D A9 3F                         LDA #$3F
0C45F 85 00                         STA temp
0C461 A9 02                         LDA #$02
0C463 85 01                         STA temp+1
0C465 A9 12                         LDA #$12
0C467 85 02                         STA temp+2
0C469 20 D2 D0                      JSR sub_WriteByteToPPUBuffer
0C46C                           
0C46C                               ;; Wait a few frames
0C46C A2 2D                         LDX #$2D
0C46E 20 C0 D0                      JSR sub_WaitXFrames
0C471                               
0C471                           
0C471                               ;; Play the end level sweep sound effect, and
0C471                               ;; initiate bonus score routine
0C471 A9 B8                         LDA #$B8
0C473 85 4A                         STA soft_pulse1
0C475                           
0C475 A9 01                         LDA #$01
0C477 8D 15 40                      STA APU_STATUS
0C47A 85 49                         STA do_beeps
0C47C                           
0C47C                               -bonusPointsLoop:
0C47C                                   ;; Check how many bonus points to subtract
0C47C                                   ;; (either the max, or what's left)
0C47C A5 2C                             LDA ball_bonus
0C47E 05 2D                             ORA ball_bonus+1
0C480 D0 06                             BNE +fullBonus
0C482 A5 2E                             LDA ball_bonus+2
0C484 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C486 90 02                             BCC +partBonus
0C488                           
0C488                                   +fullBonus:
0C488 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C48A                                   +partBonus:
0C48A                           
0C48A                                   ;; Put value that's added to score on the stack
0C48A AA                                TAX
0C48B BD 6C DA                          LDA tbl_BonusToScore,x
0C48E 48                                PHA
0C48F                           
0C48F                                   ;; Subtract X-register from bonus
0C48F 20 83 D0                          JSR sub_SubtractXFromBonus
0C492                           
0C492                                   ;; Get value from stack and add it to the score
0C492 68                                PLA
0C493 20 13 C5                          JSR sub_AddAccumulatorToScore
0C496                           
0C496                                   ;; Wait for NMI twice
0C496 20 04 C5                          JSR sub_WaitForNMI
0C499 20 04 C5                          JSR sub_WaitForNMI
0C49C                           
0C49C                                   ;; Check if bonus countdown is done
0C49C A5 2C                             LDA ball_bonus
0C49E 05 2D                             ORA ball_bonus+1
0C4A0 05 2E                             ORA ball_bonus+2
0C4A2 D0 D8                         BNE -bonusPointsLoop
0C4A4                           
0C4A4                               ;; fade out the beeping
0C4A4 A2 08                         LDX #$08
0C4A6                               -fadeOutLoop:
0C4A6 20 04 C5                          JSR sub_WaitForNMI
0C4A9 20 04 C5                          JSR sub_WaitForNMI
0C4AC C6 4A                             DEC soft_pulse1
0C4AE CA                                DEX
0C4AF D0 F5                         BNE -fadeOutLoop
0C4B1                           
0C4B1                               ;; Stop random beeping
0C4B1 A9 02                         LDA #$02
0C4B3 85 49                         STA do_beeps
0C4B5                               
0C4B5                               ;; Wait a few frames
0C4B5 A2 30                         LDX #$30
0C4B7 20 C0 D0                      JSR sub_WaitXFrames
0C4BA                           
0C4BA                               ;; Load next level
0C4BA 4C BD C4                      JMP lbl_InitiateLevelLoad
0C4BD                               
0C4BD                           .include "game/include/main/initiate_level_load.asm"
0C4BD                           
0C4BD                           ;; Load level
0C4BD                           lbl_InitiateLevelLoad:
0C4BD                               
0C4BD                               ;; Blind out the screen
0C4BD 20 7F C5                      JSR sub_BlindsEffect
0C4C0                               
0C4C0                               ;; If ball is dead, (re)load current level
0C4C0                               ;; If ball is alive, load next level
0C4C0 A5 37                         LDA ball_flags
0C4C2 29 01                         AND #BALL_IS_DEAD
0C4C4 D0 05                         BNE +
0C4C6 E6 42                             INC current_level
0C4C8 4C D1 C4                          JMP +loadLevel
0C4CB                               +
0C4CB                               
0C4CB                               ;; Revive ball
0C4CB A5 37                         LDA ball_flags
0C4CD 29 FE                         AND #REVIVE_BALL
0C4CF 85 37                         STA ball_flags
0C4D1                           
0C4D1                           +loadLevel:
0C4D1                               ;; This loops back to level 1 after level 25 for now,
0C4D1                               ;; as a proper game ending is yet to be introduced.
0C4D1 A5 42                         LDA current_level
0C4D3 C9 19                         CMP #25
0C4D5 D0 04                         BNE +
0C4D7 A9 00                             LDA #$00
0C4D9 85 42                             STA current_level
0C4DB                               +
0C4DB                               
0C4DB                               ;; Tell the game to load the level screen on the next loop.
0C4DB A9 81                         LDA #LOAD_GAME_SCREEN
0C4DD 85 38                         STA screen_mode
0C4DF                           
0C4DF                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C4DF 4C 69 C0                      JMP lbl_MainGameLoop0C4E2                           
0C4E2                           
0C4E2                           ;; Subroutines
0C4E2                           .include "include/subroutines.asm"
0C4E2                           
0C4E2                           ;; RNG
0C4E2                           .include "subroutine/GetRandomNumber.asm"
0C4E2                           
0C4E2                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4E2                           ;;
0C4E2                           ;; subroutine/GetRandomNumber.asm
0C4E2                           ;;
0C4E2                           ;; Simple and fast random number generator by White Flame.
0C4E2                           ;;
0C4E2                           ;; Set random_seed to an arbitrary number to randomize between
0C4E2                           ;; gaming sessions, for instance using the frame timer upon
0C4E2                           ;; pressing START on the intro screen.
0C4E2                           ;;
0C4E2                           ;;     ;; IF START PRESSED:
0C4E2                           ;;     LDA frame_counter
0C4E2                           ;;     STA random_seed
0C4E2                           ;;
0C4E2                           ;; Source:
0C4E2                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C4E2                           ;;
0C4E2                           ;;
0C4E2                           
0C4E2                           sub_GetRandomNumber:
0C4E2                               ;; Force EOR if random_seed is zero
0C4E2 A5 16                         LDA random_seed
0C4E4 F0 05                         BEQ +doEor
0C4E6                           
0C4E6                               ;; Shift left, and EOR if the high bit is set
0C4E6 0A                            ASL
0C4E7 F0 04                         BEQ +noEor
0C4E9 90 02                         BCC +noEor
0C4EB                           
0C4EB                           +doEor:
0C4EB 49 1D                         EOR #$1D
0C4ED                           
0C4ED                           +noEor:
0C4ED 85 16                         STA random_seed
0C4EF                           
0C4EF 60                            RTS
0C4F0                           
0C4F0                           
0C4F0                           ;; Read controller input
0C4F0                           .include "subroutine/ReadController.asm"
0C4F0                           
0C4F0                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4F0                           ;;
0C4F0                           ;; subroutine/ReadController.asm
0C4F0                           ;;
0C4F0                           ;; Subroutine that polls the controller and stores the input
0C4F0                           ;; buttons in a variable. This version only handles controller
0C4F0                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C4F0                           ;;
0C4F0                           ;;
0C4F0                           
0C4F0                           sub_ReadController:
0C4F0                           
0C4F0                               ;; Set strobe bit
0C4F0 A9 01                         LDA #$01
0C4F2 8D 16 40                      STA JOYPAD_1
0C4F5                           
0C4F5                               ;; Set up ring timer
0C4F5 85 0F                         STA buttons_held
0C4F7                           
0C4F7                               ;; Clear strobe bit
0C4F7 4A                            LSR
0C4F8 8D 16 40                      STA JOYPAD_1
0C4FB                           
0C4FB                               ;; Loop through button presses
0C4FB                               -
0C4FB AD 16 40                          LDA JOYPAD_1
0C4FE 4A                                LSR
0C4FF 26 0F                             ROL buttons_held
0C501                           
0C501                               ;; Check if ring timer is done
0C501 90 F8                         BCC -
0C503                           
0C503                               ;; Return from subroutine
0C503 60                            RTS
0C504                           
0C504                           
0C504                           ;; vBlank/NMI wait
0C504                           .include "subroutine/WaitForNMI.asm"
0C504                           
0C504                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C504                           ;;
0C504                           ;; subroutine/WaitForVBlank.asm
0C504                           ;;
0C504                           ;; Subroutine that essentially pauses script execution until
0C504                           ;; vBlank happens.
0C504                           ;;
0C504                           ;;
0C504                           
0C504                           sub_WaitForNMI:
0C504 A9 01                         LDA #$01
0C506 85 52                         STA check_nmi
0C508                               -
0C508 A5 52                             LDA check_nmi
0C50A D0 FC                         BNE -
0C50C 60                            RTS
0C50D                           
0C50D                           .include "subroutine/WaitForVBlank.asm"
0C50D                           
0C50D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C50D                           ;;
0C50D                           ;; subroutine/WaitForVBlank.asm
0C50D                           ;;
0C50D                           ;; Subroutine that essentially pauses script execution until
0C50D                           ;; vBlank happens.
0C50D                           ;;
0C50D                           ;;
0C50D                           
0C50D                           sub_WaitForVBlank:
0C50D 2C 02 20                      BIT $2002
0C510 10 FB                         BPL sub_WaitForVBlank
0C512 60                            RTS
0C513                           
0C513                           
0C513                           ;; Game specific subroutines
0C513                           .include "game/include/subroutines.asm"
0C513                           
0C513                           ;; additional game-specific subroutines go here
0C513                           
0C513                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C513                           
0C513                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C513                           ;;
0C513                           ;;  sub_AddAccumulatorToScore.asm
0C513                           ;;
0C513                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C513                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C513                           ;;  actual score.
0C513                           ;;
0C513                           ;;
0C513                           
0C513                           
0C513                           sub_AddAccumulatorToScore:
0C513                           
0C513                               ;; Clear old add_to_score
0C513 A2 05                         LDX #$05
0C515 A0 00                         LDY #$00
0C517                               -
0C517 94 26                             STY add_to_score,x
0C519 CA                                DEX
0C51A 10 FB                         BPL -
0C51C                           
0C51C                               ;; Set accumulator to add_to_score variables
0C51C                               ;; Check and update 100s
0C51C                               -checkHundreds:
0C51C C9 64                             CMP #100
0C51E 90 08                             BCC +checkTens
0C520 38                                    SEC
0C521 E9 64                                 SBC #100
0C523 E6 29                                 INC add_to_score+3
0C525 4C 1C C5                              JMP -checkHundreds
0C528                                   +checkTens:
0C528                           
0C528                               ;; Check and update 10s
0C528                               -checkTens:
0C528 C9 0A                             CMP #10
0C52A 90 08                             BCC +setOnes
0C52C 38                                    SEC
0C52D E9 0A                                 SBC #10
0C52F E6 2A                                 INC add_to_score+4
0C531 4C 28 C5                              JMP -checkTens
0C534                                   +setOnes:
0C534                           
0C534                               ;; We're left with 1s
0C534 85 2B                         STA add_to_score+5
0C536                           
0C536                               ;; Byte for byte, add add_to_score to ball_score
0C536 A9 00                         LDA #$00
0C538 85 39                         STA ppu_buffer_update
0C53A A4 3A                         LDY ppu_buffer_pointer
0C53C A2 05                         LDX #$05
0C53E                               -
0C53E B5 26                             LDA add_to_score,x
0C540 18                                CLC
0C541 75 20                             ADC ball_score,x
0C543 C9 0A                             CMP #10
0C545 90 05                             BCC +
0C547 38                                    SEC
0C548 E9 0A                                 SBC #10
0C54A F6 1F                                 INC ball_score-1,x
0C54C                                   +
0C54C                                   
0C54C                                   ;; Update new score digit
0C54C 95 20                             STA ball_score,x
0C54E                           
0C54E                                   ;; Update score tile in PPU
0C54E A9 20                             LDA #$20
0C550 99 00 03                          STA ppu_buffer,y
0C553 C8                                INY
0C554 8A                                TXA
0C555 18                                CLC
0C556 69 83                             ADC #$83
0C558 99 00 03                          STA ppu_buffer,y
0C55B C8                                INY
0C55C B5 20                             LDA ball_score,x
0C55E 18                                CLC
0C55F 69 01                             ADC #$01
0C561 99 00 03                          STA ppu_buffer,y
0C564 C8                                INY
0C565                           
0C565                                   ;; Check next digit (if any left)
0C565 CA                                DEX
0C566 30 03                             BMI +done
0C568 4C 3E C5                      JMP -
0C56B                           
0C56B                           +done:
0C56B                               ;; Update PPU buffer pointer and status
0C56B 84 3A                         STY ppu_buffer_pointer
0C56D A9 01                         LDA #$01
0C56F 85 39                         STA ppu_buffer_update
0C571                           
0C571                               ;; Done: return 
0C571 60                            RTS
0C572                           
0C572                           .include "game/subroutine/BackgroundNoise.asm"
0C572                           
0C572                           ;; Play background noise
0C572                           sub_BackgroundNoise:
0C572 A9 32                         LDA #$32
0C574 8D 0C 40                      STA NOISE_VOLUME
0C577 A9 0E                         LDA #$0E
0C579 8D 0E 40                      STA NOISE_PERIOD
0C57C 85 47                         STA current_noise
0C57E 60                            RTS
0C57F                           
0C57F                           .include "game/subroutine/BlindsEffect.asm"
0C57F                           
0C57F                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C57F                           sub_BlindsEffect:
0C57F                           
0C57F                               ;; Set up loop fading
0C57F A9 00                         LDA #$00
0C581 85 07                         STA temp+7
0C583 A0 08                         LDY #$08
0C585                               -fadeLoop:
0C585 84 08                             STY temp+8
0C587                           
0C587                                   ;; Wait for NMI to pass
0C587 20 04 C5                          JSR sub_WaitForNMI
0C58A                                   
0C58A                                   ;; Now wait for No-sprite 0
0C58A                                   -
0C58A AD 02 20                              LDA PPU_STATUS
0C58D 29 40                                 AND #SPRITE_0_HIT
0C58F D0 F9                             BNE -
0C591                               
0C591                                   ;; Now wait for Sprite 0
0C591                                   -
0C591 AD 02 20                              LDA PPU_STATUS
0C594 29 40                                 AND #SPRITE_0_HIT
0C596 F0 F9                             BEQ -
0C598                                       
0C598                                   ;; Setup tile row loop
0C598 A0 16                             LDY #22
0C59A                                   -tileLoop:
0C59A                                   
0C59A                                       ;; Disable drawing
0C59A A5 12                                 LDA soft_ppu_mask
0C59C 29 F7                                 AND #%11110111
0C59E 8D 01 20                              STA PPU_MASK
0C5A1                                       
0C5A1                                       ;; Set up scanline loop
0C5A1 A2 08                                 LDX #$08
0C5A3                                       -scanlineLoop:
0C5A3 E4 08                                     CPX temp+8
0C5A5 D0 0A                                     BNE +wasteTime
0C5A7                                           
0C5A7                                           ;; Restore drawing
0C5A7 A5 12                                     LDA soft_ppu_mask
0C5A9 09 08                                     ORA #%00001000
0C5AB 8D 01 20                                  STA PPU_MASK
0C5AE 4C B7 C5                                  JMP +wasteMoreTime
0C5B1                           
0C5B1                                           ;; Waste 12 frames
0C5B1                                           +wasteTime:
0C5B1 E6 09                                     INC temp+9   ;+5
0C5B3 C6 09                                     DEC temp+9   ;+5
0C5B5 49 00                                     EOR #$00     ;+2
0C5B7                                           
0C5B7                                           ;; Waste about 100 frames
0C5B7                                           +wasteMoreTime:
0C5B7                                           
0C5B7 86 01                                     STX temp+1     ;  3 down, 97 to go
0C5B9 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C5BB                                           -wasteLoop:
0C5BB EA                                            NOP
0C5BC 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C5BE CA                                            DEX        ;  5+5L down,  95-5L to go
0C5BF D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C5C1                           
0C5C1 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C5C3 CA                                        DEX            ;  9+8L down, 91-8L to go
0C5C4 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C5C6                           
0C5C6 88                                    DEY
0C5C7 D0 D1                             BNE -tileLoop
0C5C9                           
0C5C9 A4 08                             LDY temp+8
0C5CB                                   
0C5CB E6 07                             INC temp+7
0C5CD A5 07                             LDA temp+7
0C5CF C9 02                             CMP #$02
0C5D1 D0 B2                             BNE -fadeLoop
0C5D3                           
0C5D3 A9 00                             LDA #$00
0C5D5 85 07                             STA temp+7
0C5D7 88                                DEY
0C5D8 D0 AB                         BNE -fadeLoop
0C5DA                               
0C5DA 60                            RTS
0C5DB                           
0C5DB                           .include "game/subroutine/ClearScreen.asm"
0C5DB                           
0C5DB                           ;; Subroutine to clear the screen
0C5DB                           ;; If it's a game screen, add noise
0C5DB                           
0C5DB                           sub_ClearScreen:
0C5DB                               ;; Check of game screen or not
0C5DB A5 38                         LDA screen_mode
0C5DD 29 03                         AND #CHECK_SCREEN_MODE
0C5DF C9 01                         CMP #IS_GAME_SCREEN
0C5E1 F0 02                         BEQ +
0C5E3 A9 00                             LDA #$00
0C5E5                               +
0C5E5 85 01                         STA temp+1
0C5E7                               
0C5E7                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C5E7 2C 02 20                      BIT PPU_STATUS
0C5EA A9 20                         LDA #$20
0C5EC 8D 06 20                      STA PPU_ADDR
0C5EF A9 00                         LDA #$00
0C5F1 8D 06 20                      STA PPU_ADDR
0C5F4                               
0C5F4                               ;; Set up tile to draw and loop
0C5F4 85 00                         STA temp
0C5F6 AA                            TAX
0C5F7 A8                            TAY
0C5F8                           
0C5F8                               -     
0C5F8                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C5F8 A5 00                             LDA temp
0C5FA 8D 07 20                          STA PPU_DATA
0C5FD                           
0C5FD                                   ;; Check if we should draw noise next. Noise is drawn if:
0C5FD                                   ;; - Screen mode is game screen
0C5FD                                   ;; - Y between #$06 and #$19 (inclusive)
0C5FD                                   ;; - X between #$02 and #$1D (inclusive)
0C5FD                                   
0C5FD                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C5FD A5 01                             LDA temp+1
0C5FF F0 1C                             BEQ +nextTileInRow
0C601                                   
0C601                                   ;; If Y < $6, skip the check
0C601 C0 06                             CPY #$06
0C603 90 18                             BCC +nextTileInRow
0C605                                   
0C605                                   ;; If X < $1, skip the check
0C605 E0 01                             CPX #$01
0C607 90 14                             BCC +nextTileInRow
0C609                                   
0C609                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C609 E0 1D                             CPX #$1D
0C60B D0 04                             BNE +
0C60D A9 00                                 LDA #$00
0C60F 85 00                                 STA temp
0C611                                   +
0C611 B0 0A                             BCS +nextTileInRow
0C613                                   
0C613                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C613 20 E2 C4                          JSR sub_GetRandomNumber
0C616 29 07                             AND #%00000111
0C618 18                                CLC
0C619 69 68                             ADC #$68
0C61B 85 00                             STA temp
0C61D                           
0C61D                           +nextTileInRow:
0C61D                                   
0C61D                                   ;; Check if a row has been done. If not, draw the next
0C61D E8                                INX
0C61E E0 20                             CPX #$20
0C620 D0 D6                             BNE -
0C622                                   
0C622                                   ;; Go to the next row (if any left)
0C622 A2 00                             LDX #00
0C624 C8                                INY
0C625                                   
0C625                                   ;; If Y is 1A, skip noise tile check until done drawing
0C625 C0 1A                             CPY #$1A
0C627 D0 04                             BNE +
0C629 A9 00                                 LDA #$00
0C62B 85 01                                 STA temp+1
0C62D                                   +
0C62D                                   
0C62D C0 1E                             CPY #$1E
0C62F D0 C7                         BNE -
0C631                           
0C631                               ;; Clear attribute table
0C631 A9 23                         LDA #$23
0C633 8D 06 20                      STA PPU_ADDR
0C636 A9 C0                         LDA #$C0
0C638 8D 06 20                      STA PPU_ADDR
0C63B A9 00                         LDA #$00
0C63D A2 40                         LDX #$40
0C63F                               -
0C63F 8D 07 20                          STA PPU_DATA
0C642 CA                                DEX
0C643 D0 FA                         BNE -
0C645                               
0C645 60                            RTS
0C646                           
0C646                           .include "game/subroutine/ColorizeBall.asm"
0C646                           
0C646                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C646                           ;;
0C646                           ;;  Subroutine: ColorizeBall
0C646                           ;;
0C646                           ;;  Applies the color set through ball_flags to the ball sprite.
0C646                           ;;  Expects ball_flags to be in the accumulator
0C646                           ;;
0C646                           
0C646                           
0C646                           sub_ColorizeBall:
0C646                           
0C646                               ;; Get color from ball_flags
0C646 4A                            LSR
0C647 4A                            LSR
0C648 4A                            LSR
0C649 4A                            LSR
0C64A 4A                            LSR
0C64B AA                            TAX
0C64C                           
0C64C                               ;; Add new light color of ball to PPU palette
0C64C A9 3F                         LDA #$3F
0C64E 85 00                         STA temp
0C650 A9 11                         LDA #$11
0C652 85 01                         STA temp+1
0C654 BD 36 D2                      LDA tbl_BallColorLight,x
0C657 85 02                         STA temp+2
0C659 20 D2 D0                      JSR sub_WriteByteToPPUBuffer
0C65C                               
0C65C                               ;; Add new dark color of ball to PPU palette
0C65C E6 01                         INC temp+1
0C65E BD 30 D2                      LDA tbl_BallColorDark,x
0C661 85 02                         STA temp+2
0C663 20 D2 D0                      JSR sub_WriteByteToPPUBuffer
0C666                               
0C666 60                            RTS
0C667                           
0C667                           .include "game/subroutine/ColorsMatch.asm"
0C667                           
0C667                           ;; Subroutine to check if ball color matches colliding tile color
0C667                           
0C667                           sub_ColorsMatch:
0C667                               ;; Save tile color in temp variable
0C667 A5 43                         LDA colliding_tile
0C669 29 0E                         AND #%00001110
0C66B 85 00                         STA temp
0C66D                           
0C66D                               ;; Get ball color
0C66D A5 37                         LDA ball_flags
0C66F 29 E0                         AND #%11100000
0C671 4A                            LSR
0C672 4A                            LSR
0C673 4A                            LSR
0C674 4A                            LSR
0C675                           
0C675                               ;; Compare with tile color
0C675 C5 00                         CMP temp
0C677 60                            RTS
0C678                           
0C678                           .include "game/subroutine/ConvertXYToTileType.asm"
0C678                           
0C678                           ;; Subroutine to convert the ball's position to a tile type
0C678                           ;; - Expects temp to be y-position of ball within game area
0C678                           ;; - Expects temp+1 to be x-position of ball within game area
0C678                           ;; - Puts result in accumulator and zp variable
0C678                           ;; - Corrupts X-register
0C678                           
0C678                           sub_ConvertXYToTileType:
0C678 A5 01                         LDA temp+1
0C67A 4A                            LSR
0C67B 4A                            LSR
0C67C 4A                            LSR
0C67D 4A                            LSR
0C67E 85 09                         STA temp+9
0C680 A5 00                         LDA temp
0C682 29 F0                         AND #%11110000
0C684 18                            CLC
0C685 65 09                         ADC temp+9
0C687 85 09                         STA temp+9
0C689 AA                            TAX
0C68A BD 00 04                      LDA tile_type, x
0C68D 85 43                         STA colliding_tile
0C68F 60                            RTS
0C690                           
0C690                           .include "game/subroutine/DisableEnableRendering.asm"
0C690                           
0C690                           ;; Subroutines to disable or enable screen rendering
0C690                           
0C690                           sub_DisableRendering:
0C690                               ;; Force NMI skip, disable rendering
0C690 A9 01                     	LDA #$01
0C692 85 14                     	STA force_skip_nmi
0C694 20 0D C5                      JSR sub_WaitForVBlank
0C697 A5 12                         LDA soft_ppu_mask
0C699 29 E7                         AND #%11100111
0C69B 8D 01 20                      STA PPU_MASK
0C69E 85 12                         STA soft_ppu_mask
0C6A0 20 0D C5                      JSR sub_WaitForVBlank
0C6A3 60                            RTS
0C6A4                           
0C6A4                           sub_EnableRendering:
0C6A4                               ;; Enable rendering
0C6A4 A9 00                     	LDA #$00
0C6A6 8D 05 20                  	STA PPU_SCROLL
0C6A9 8D 05 20                  	STA PPU_SCROLL
0C6AC 20 0D C5                      JSR sub_WaitForVBlank
0C6AF 85 14                     	STA force_skip_nmi
0C6B1 A5 12                         LDA soft_ppu_mask
0C6B3 09 18                         ORA #%00011000
0C6B5 85 12                         STA soft_ppu_mask
0C6B7 8D 01 20                      STA PPU_MASK
0C6BA 20 0D C5                      JSR sub_WaitForVBlank
0C6BD 60                            RTS
0C6BE                           
0C6BE                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C6BE                           
0C6BE                           ;; Draw a tile from the logo on the intro screen
0C6BE                           sub_drawIntroScreenLogoTile:
0C6BE B9 18 D1                      LDA tbl_IntroScreenLogoChr,y
0C6C1 C9 60                         CMP #$60
0C6C3 D0 08                         BNE +
0C6C5 20 E2 C4                          JSR sub_GetRandomNumber
0C6C8 29 07                             AND #$07
0C6CA 18                                CLC
0C6CB 69 60                             ADC #$60
0C6CD                               +
0C6CD 8D 07 20                      STA PPU_DATA
0C6D0 60                            RTS
0C6D1                           
0C6D1                           .include "game/subroutine/DrawMoveTile.asm"
0C6D1                           
0C6D1                           ;; Draw the move tile as follows:
0C6D1                           ;;
0C6D1                           ;;  1 2
0C6D1                           ;;  3 4 5
0C6D1                           ;;    6 7
0C6D1                           ;;
0C6D1                           ;; (1,2,3,4) is the move block itself
0C6D1                           ;; (5,6,7) are shades unless that tile is solid
0C6D1                           
0C6D1                           ;; X holds the move block sprite slot
0C6D1                           
0C6D1                           sub_DrawMoveTile:
0C6D1                           
0C6D1                               ;; Get tile type index from sprite x and y values
0C6D1                               ;; and store it in a temp variable
0C6D1 BD 78 03                      LDA move_block_x,x
0C6D4 18                            CLC
0C6D5 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C6D7 4A                            LSR
0C6D8 4A                            LSR
0C6D9 4A                            LSR
0C6DA 4A                            LSR
0C6DB 85 09                         STA temp+9
0C6DD BD 7C 03                      LDA move_block_y,x
0C6E0 18                            CLC
0C6E1 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C6E3 29 F0                         AND #%11110000
0C6E5 18                            CLC
0C6E6 65 09                         ADC temp+9
0C6E8 85 09                         STA temp+9
0C6EA A8                            TAY
0C6EB                               
0C6EB                               ;; Add move tile data on the new tile location
0C6EB BD 84 03                      LDA move_block_tile_type,x
0C6EE 99 00 04                      STA tile_type,y
0C6F1                           
0C6F1                               ;; Draw the original tile type in the ppu buffer
0C6F1                               ;; - get PPU address to write to (temp, temp+1)
0C6F1 8A                            TXA
0C6F2 48                            PHA
0C6F3 A6 09                         LDX temp+9
0C6F5 20 9E C9                      JSR sub_GetPPUAddrFromYXIndex
0C6F8 68                            PLA
0C6F9 AA                            TAX
0C6FA                               
0C6FA                               ;; - based on color, select tile 42 or 4A for top left
0C6FA BD 88 03                      LDA move_block_flags,x
0C6FD 4A                            LSR
0C6FE 4A                            LSR
0C6FF 4A                            LSR
0C700 4A                            LSR
0C701 4A                            LSR
0C702 A8                            TAY
0C703 B9 F1 D9                      LDA tbl_MoveBlockTopLeftTile,y
0C706 85 08                         STA temp+8
0C708                               
0C708                               ;; - save palette ID in temp+6
0C708 98                            TYA
0C709 4A                            LSR
0C70A 85 06                         STA temp+6
0C70C                               
0C70C                               ;; Prepare PPU buffer
0C70C A4 3A                         LDY ppu_buffer_pointer
0C70E A9 00                         LDA #$00
0C710 85 39                         STA ppu_buffer_update
0C712                               
0C712                               ;; Draw tile 1 (top left tile of move block)
0C712 20 F3 C7                      JSR sub_DrawTileTemp018
0C715                           
0C715                               
0C715                               ;; Draw tile 2 (top right tile of move block)
0C715 E6 01                         INC temp+1
0C717 E6 08                         INC temp+8
0C719 20 F3 C7                      JSR sub_DrawTileTemp018
0C71C                           
0C71C                               ;; Draw tile 3 (bottom left tile of move block)
0C71C A5 01                         LDA temp+1
0C71E 18                            CLC
0C71F 69 1F                         ADC #$1F
0C721 85 01                         STA temp+1
0C723 A5 00                         LDA temp
0C725 69 00                         ADC #$00
0C727 85 00                         STA temp
0C729 A5 08                         LDA temp+8
0C72B 18                            CLC
0C72C 69 0F                         ADC #$0F
0C72E 85 08                         STA temp+8
0C730 20 F3 C7                      JSR sub_DrawTileTemp018
0C733                           
0C733                               ;; Draw tile 4 (bottom right tile of move block)
0C733 E6 01                         INC temp+1
0C735 E6 08                         INC temp+8
0C737 20 F3 C7                      JSR sub_DrawTileTemp018
0C73A                           
0C73A                               ;; Load tile type offset in X register
0C73A 8A                            TXA
0C73B 48                            PHA
0C73C A6 09                         LDX temp+9
0C73E                               
0C73E                               ;; Load shade tile in temp+8
0C73E A9 00                         LDA #$00
0C740 85 08                         STA temp+8
0C742                           
0C742                               ;; Draw tile 5 (right shade) unless tile is solid
0C742 E6 01                         INC temp+1
0C744                               
0C744 8A                            TXA
0C745 29 0F                         AND #%00001111
0C747 C9 0D                         CMP #$0D
0C749 F0 0A                         BEQ +nextTile
0C74B                           
0C74B BD 01 04                      LDA tile_type+1,x
0C74E 29 01                         AND #%00000001
0C750 D0 03                         BNE +nextTile
0C752                               
0C752 20 F3 C7                      JSR sub_DrawTileTemp018
0C755                               
0C755                           
0C755                           +nextTile:
0C755                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C755 A5 01                         LDA temp+1
0C757 18                            CLC
0C758 69 1F                         ADC #$1F
0C75A 85 01                         STA temp+1
0C75C A5 00                         LDA temp
0C75E 69 00                         ADC #$00
0C760 85 00                         STA temp
0C762                           
0C762 8A                            TXA
0C763 29 F0                         AND #%11110000
0C765 C9 90                         CMP #$90
0C767 F0 0A                         BEQ +nextTile
0C769                           
0C769 BD 10 04                      LDA tile_type+16,x
0C76C 29 01                         AND #%00000001
0C76E D0 03                         BNE +nextTile
0C770                               
0C770 20 F3 C7                      JSR sub_DrawTileTemp018
0C773                           
0C773                               
0C773                           +nextTile:
0C773                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C773 E6 01                         INC temp+1
0C775                           
0C775 8A                            TXA
0C776 29 F0                         AND #%11110000
0C778 C9 90                         CMP #$90
0C77A F0 11                         BEQ +setTileAttributes
0C77C                               
0C77C 8A                            TXA
0C77D 29 0F                         AND #%00001111
0C77F C9 0D                         CMP #$0D
0C781 F0 0A                         BEQ +setTileAttributes
0C783                               
0C783 BD 11 04                      LDA tile_type+17,x
0C786 29 01                         AND #%00000001
0C788 D0 03                         BNE +setTileAttributes
0C78A                               
0C78A 20 F3 C7                      JSR sub_DrawTileTemp018
0C78D                               
0C78D                           
0C78D                           +setTileAttributes:
0C78D                               ;; Update attribute table accordingly through ppu buffer
0C78D                               ;; - PPU buffer high byte
0C78D 20 59 D0                      JSR sub_SetTileAttributeAddress
0C790                           
0C790 8A                            TXA
0C791 29 10                         AND #%00010000
0C793 F0 05                         BEQ +        
0C795 A9 F0                             LDA #%11110000
0C797 4C 9C C7                          JMP ++
0C79A                               +
0C79A A9 0F                         LDA #%00001111
0C79C                               ++
0C79C 85 02                         STA temp+2
0C79E                               
0C79E 8A                            TXA
0C79F 29 01                         AND #%00000001
0C7A1 F0 07                         BEQ +
0C7A3 A5 02                             LDA temp+2
0C7A5 09 CC                             ORA #%11001100
0C7A7 4C AE C7                          JMP ++
0C7AA                               +
0C7AA A5 02                         LDA temp+2
0C7AC 09 33                         ORA #%00110011
0C7AE                               ++
0C7AE 85 02                         STA temp+2
0C7B0                               
0C7B0 C9 FC                         CMP #%11111100
0C7B2 F0 22                         BEQ +continue
0C7B4                               
0C7B4 C9 F3                         CMP #%11110011
0C7B6 D0 09                         BNE +
0C7B8 A5 06                             LDA temp+6
0C7BA 0A                                ASL
0C7BB 0A                                ASL
0C7BC 85 06                             STA temp+6
0C7BE 4C D6 C7                          JMP +continue
0C7C1                               +
0C7C1                               
0C7C1 C9 CF                         CMP #%11001111
0C7C3 D0 0A                         BNE +
0C7C5 A6 06                             LDX temp+6
0C7C7 BD 94 D9                          LDA tbl_Times16,x
0C7CA 85 06                             STA temp+6
0C7CC 4C D6 C7                          JMP +continue
0C7CF                               +
0C7CF                               
0C7CF A6 06                         LDX temp+6
0C7D1 BD A4 D9                      LDA tbl_Times64,x
0C7D4 85 06                         STA temp+6
0C7D6                                   
0C7D6                           +continue:
0C7D6 A5 00                         LDA temp
0C7D8 38                            SEC
0C7D9 E9 C0                         SBC #$C0
0C7DB AA                            TAX
0C7DC BD A0 04                      LDA tile_attributes,x
0C7DF 25 02                         AND temp+2
0C7E1 05 06                         ORA temp+6
0C7E3 9D A0 04                      STA tile_attributes,x
0C7E6 99 00 03                      STA ppu_buffer,y
0C7E9 C8                            INY
0C7EA                           
0C7EA                               ;; Restore original X
0C7EA 68                            PLA
0C7EB AA                            TAX
0C7EC                               
0C7EC                               ;; Update PPU buffer
0C7EC 84 3A                         STY ppu_buffer_pointer
0C7EE A9 01                         LDA #$01
0C7F0 85 39                         STA ppu_buffer_update
0C7F2                           
0C7F2                               ;; Return
0C7F2 60                            RTS
0C7F3                           
0C7F3                           .include "game/subroutine/DrawTileTemp018.asm"
0C7F3                           
0C7F3                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C7F3                           
0C7F3                           sub_DrawTileTemp018:
0C7F3 A5 00                         LDA temp
0C7F5 99 00 03                      STA ppu_buffer,y
0C7F8 C8                            INY
0C7F9 A5 01                         LDA temp+1
0C7FB 99 00 03                      STA ppu_buffer,y
0C7FE C8                            INY
0C7FF A5 08                         LDA temp+8
0C801 99 00 03                      STA ppu_buffer,y
0C804 C8                            INY
0C805 60                            RTS
0C806                           
0C806                           .include "game/subroutine/EvaluateTileType.asm"
0C806                           
0C806                           ;; Subroutine to evaluate the colliding tile type and take its
0C806                           ;; corresponding action (move block, kill player, ...)
0C806                           ;; - Expects X-register to be the tile_type offset
0C806                           ;; - Uses zp variable colliding_tile
0C806                           
0C806                           sub_EvaluateTileType:
0C806                           
0C806                               ;; Check if collided tile is a color block
0C806 A5 43                         LDA colliding_tile
0C808 29 80                         AND #IS_COLOR_BLOCK
0C80A D0 03                         BNE +
0C80C 4C 75 C8                          JMP +checkIfPaintBlock
0C80F                               +
0C80F                               
0C80F                               ;; It's a color block. Check if the colors match
0C80F 20 67 C6                      JSR sub_ColorsMatch
0C812 F0 06                         BEQ +
0C814                                   ;; Colors don't match
0C814                                   ;; Play bounce sound effect
0C814 A2 02                             LDX #SFX_BOUNCE
0C816 20 D4 CE                          JSR sub_PreloadSfxFromX
0C819                                   
0C819                                   ;; Return
0C819 60                                RTS
0C81A                               +
0C81A                           
0C81A                               ;; Colors match; destroy color block
0C81A                               
0C81A                               ;; Convert the metatile offset value (which is in the X register)
0C81A                               ;; to its corresponding address in PPU
0C81A 20 9E C9                      JSR sub_GetPPUAddrFromYXIndex
0C81D                           
0C81D                               ;; Remove color block from screen by drawing a total
0C81D                               ;; of 7 tiles over it (shade included)
0C81D 20 E3 CE                      JSR sub_RemoveBlockFromScreen
0C820                               
0C820                               ;; - Load destruction animation on tile
0C820                               ;; Get most recent slot for explosion    
0C820 8A                            TXA
0C821 85 02                         STA temp+2
0C823 A6 3B                         LDX explosion_pointer
0C825                           
0C825                               ;; If 0, use max pointer value
0C825 D0 02                         BNE +
0C827 A2 04                             LDX #MAX_ANIMATIONS
0C829                               +
0C829                           
0C829                               ;; Decrease pointer by one
0C829 CA                            DEX
0C82A 86 3B                         STX explosion_pointer
0C82C                           
0C82C                               ;; Load explosion data into RAM
0C82C A9 00                         LDA #$00
0C82E 9D 64 03                      STA explosion_currentframe,x
0C831                           
0C831 A9 04                         LDA #ANIMATION_SPEED
0C833 9D 60 03                      STA explosion_timer,x
0C836                           
0C836 A5 02                         LDA temp+2
0C838 29 0F                         AND #%00001111
0C83A A8                            TAY
0C83B B9 94 D9                      LDA tbl_Times16,y
0C83E 18                            CLC
0C83F 69 0E                         ADC #$0E
0C841 9D 6C 03                      STA explosion_x,x
0C844                           
0C844 A5 02                         LDA temp+2
0C846 29 F0                         AND #%11110000
0C848 18                            CLC
0C849 69 29                         ADC #$29
0C84B 9D 70 03                      STA explosion_y,x
0C84E                           
0C84E A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C850 9D 68 03                      STA explosion_attributes,x
0C853 A9 01                         LDA #$01
0C855 9D 74 03                      STA explosion_active,x
0C858                           
0C858 A5 02                         LDA temp+2
0C85A AA                            TAX
0C85B                               
0C85B                               
0C85B                               ;; - Write #$00 in tile type ram (makes not-solid)
0C85B A9 00                         LDA #$00
0C85D 9D 00 04                      STA tile_type, x
0C860                           
0C860                           
0C860                               ;; Add (80 + level number) to score
0C860 A5 42                         LDA current_level
0C862 18                            CLC
0C863 69 51                         ADC #81
0C865 20 13 C5                      JSR sub_AddAccumulatorToScore
0C868                           
0C868                           
0C868                               ;; Play thud sound effect
0C868 A2 01                         LDX #SFX_THUD
0C86A 20 D4 CE                      JSR sub_PreloadSfxFromX
0C86D                           
0C86D                           
0C86D                               ;; - If there are no color blocks left:
0C86D                               ;;   - Initiate level-win state
0C86D C6 44                         DEC blocks_left
0C86F D0 03                         BNE +
0C871 4C 2C C4                          JMP lbl_LevelWin
0C874                               +
0C874                               
0C874 60                            RTS
0C875                           
0C875                           
0C875                           
0C875                           +checkIfPaintBlock:
0C875                           
0C875                               ;; Check if collided tile is a paint block
0C875 A5 43                         LDA colliding_tile
0C877 29 20                         AND #IS_PAINT_BLOCK
0C879 F0 1F                         BEQ +checkIfDeathBlock
0C87B                                   ;; It's a paint block. Update ball color
0C87B                                   ;; Save x-register
0C87B 8A                                TXA
0C87C 48                                PHA
0C87D                           
0C87D                                   ;; Get tile color
0C87D A5 43                             LDA colliding_tile
0C87F 29 0E                             AND #%00001110
0C881 0A                                ASL
0C882 0A                                ASL
0C883 0A                                ASL
0C884 0A                                ASL
0C885 85 00                             STA temp
0C887                           
0C887                                   ;; Apply tile color to ball
0C887 A5 37                             LDA ball_flags
0C889 29 1F                             AND #%00011111
0C88B 05 00                             ORA temp
0C88D 85 37                             STA ball_flags
0C88F 20 46 C6                          JSR sub_ColorizeBall
0C892                           
0C892                                   ;; Play bounce sound effect
0C892 A2 02                             LDX #SFX_BOUNCE
0C894 20 D4 CE                          JSR sub_PreloadSfxFromX
0C897                           
0C897                                   ;; Restore x-register
0C897 68                                PLA
0C898 AA                                TAX
0C899                           
0C899                                   ;; Return
0C899 60                                RTS
0C89A                                   
0C89A                                   
0C89A                                   
0C89A                           +checkIfDeathBlock:
0C89A                           
0C89A                               ;; Check if collided tile is a death block
0C89A A5 43                         LDA colliding_tile
0C89C 29 10                         AND #IS_DEATH_BLOCK
0C89E F0 3D                         BEQ +checkIfMoveBlock
0C8A0                           
0C8A0                           ;; Also, when the player presses select during gameplay,
0C8A0                           ;; insta-selfdestruct the ball.
0C8A0                           sub_Selfdestruct:
0C8A0                           
0C8A0                                   ;; It is a death block
0C8A0                                   ;; Freeze and kill player
0C8A0 A5 37                             LDA ball_flags
0C8A2 09 05                             ORA #%00000101
0C8A4 85 37                             STA ball_flags
0C8A6                                   
0C8A6                                   ;; Get free explosion slot
0C8A6 A6 3B                             LDX explosion_pointer
0C8A8 D0 02                             BNE +
0C8AA A2 04                                 LDX #MAX_ANIMATIONS
0C8AC                                   +
0C8AC CA                                DEX
0C8AD 86 3B                             STX explosion_pointer
0C8AF                           
0C8AF                                   ;; Load explosion data into RAM
0C8AF A9 00                             LDA #$00
0C8B1 9D 64 03                          STA explosion_currentframe,x
0C8B4                           
0C8B4 A9 04                             LDA #ANIMATION_SPEED
0C8B6 9D 60 03                          STA explosion_timer,x
0C8B9                           
0C8B9 A5 17                             LDA ball_xpos_hi
0C8BB 38                                SEC
0C8BC E9 08                             SBC #$08
0C8BE 9D 6C 03                          STA explosion_x,x
0C8C1                           
0C8C1 A5 19                             LDA ball_ypos_hi
0C8C3 38                                SEC
0C8C4 E9 06                             SBC #$06
0C8C6 9D 70 03                          STA explosion_y,x
0C8C9                           
0C8C9 A9 01                             LDA #$01
0C8CB 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C8CE 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C8D1 85 4B                             STA noise_muted             ; mute background noise
0C8D3                                   
0C8D3                                   ;; Play explosion sound effect
0C8D3 A2 00                             LDX #SFX_EXPLOSION
0C8D5 20 D4 CE                          JSR sub_PreloadSfxFromX
0C8D8                           
0C8D8                                   ;; Set kill timer
0C8D8 A9 60                             LDA #$60
0C8DA 85 40                             STA kill_timer
0C8DC                           
0C8DC                                   ;; Return
0C8DC 60                                RTS
0C8DD                           
0C8DD                           
0C8DD                           
0C8DD                           +checkIfMoveBlock:
0C8DD                           
0C8DD                               ;; Check if collided tile is a move block
0C8DD A5 43                         LDA colliding_tile
0C8DF 29 40                         AND #IS_MOVE_BLOCK
0C8E1 D0 06                         BNE +
0C8E3                                   ;; Tile is not a move block
0C8E3                                   ;; Therefore, it is a solid wall
0C8E3                                   
0C8E3                                   ;; Play bounce sound effect
0C8E3 A2 02                             LDX #SFX_BOUNCE
0C8E5 20 D4 CE                          JSR sub_PreloadSfxFromX
0C8E8                           
0C8E8                                   ;; Return
0C8E8 60                                RTS
0C8E9                               +
0C8E9                           
0C8E9                               ;; It is a move block. Check if colors match
0C8E9 20 67 C6                      JSR sub_ColorsMatch
0C8EC F0 06                         BEQ +
0C8EE                                   ;; Colors do not match
0C8EE                                   ;; Play bounce sound effect
0C8EE A2 02                             LDX #SFX_BOUNCE
0C8F0 20 D4 CE                          JSR sub_PreloadSfxFromX
0C8F3                           
0C8F3                                   ;; Return
0C8F3 60                                RTS
0C8F4                               +
0C8F4                           
0C8F4                               ;; Colors match
0C8F4                               ;; - Check if next tile is within the playground
0C8F4                               ;; (push X onto stack as well)
0C8F4 8A                            TXA
0C8F5 48                            PHA
0C8F6 18                            CLC
0C8F7 65 36                         ADC move_block_space_to_check
0C8F9 AA                            TAX
0C8FA                               
0C8FA 29 0F                         AND #%00001111
0C8FC C9 0E                         CMP #$0E
0C8FE 90 03                         BCC +
0C900 4C 78 C9                          JMP +dontMoveBlock
0C903                               +
0C903 8A                            TXA
0C904 29 F0                         AND #%11110000
0C906 C9 A0                         CMP #$A0
0C908 D0 03                         BNE +
0C90A 4C 78 C9                          JMP +dontMoveBlock
0C90D                               +
0C90D C9 F0                         CMP #$F0
0C90F D0 03                         BNE +
0C911 4C 78 C9                          JMP +dontMoveBlock
0C914                               +
0C914                               
0C914                               ;; Check if the next tile is solid
0C914 BD 00 04                      LDA tile_type,x
0C917 29 01                         AND #TILE_IS_SOLID
0C919 F0 03                         BEQ +
0C91B 4C 78 C9                          JMP +dontMoveBlock
0C91E                               +
0C91E                               
0C91E                               ;; Move block has room to move
0C91E                               ;; Pull original X from stack
0C91E 68                            PLA
0C91F AA                            TAX        
0C920                               
0C920                               ;; Add the tiles that need updating to ppu buffer, and
0C920                               ;; update attribute table accordingly through ppu buffer
0C920 20 9E C9                      JSR sub_GetPPUAddrFromYXIndex
0C923 20 E3 CE                      JSR sub_RemoveBlockFromScreen
0C926                           
0C926                               ;; Store original tile type in temp variable
0C926 BD 00 04                      LDA tile_type,x
0C929 85 08                         STA temp+8
0C92B                           
0C92B                               ;; Write #$00 in tile type ram (makes not-solid)
0C92B A9 00                         LDA #$00
0C92D 9D 00 04                      STA tile_type,x
0C930                           
0C930                               ;; Add move tile sprite over the original tile
0C930                               ;; - Store x in temp variable
0C930 86 03                         STX temp+3
0C932                               
0C932                               ;; - Update move block pointer
0C932 A6 3C                         LDX move_block_pointer
0C934 D0 02                         BNE +
0C936 A2 04                             LDX #MAX_ANIMATIONS
0C938                               +
0C938 CA                            DEX
0C939 86 3C                         STX move_block_pointer
0C93B                           
0C93B                               ;; = Set move block tile type
0C93B A5 08                         LDA temp+8
0C93D 9D 84 03                      STA move_block_tile_type,x
0C940                           
0C940                               ;; - Set move block X position
0C940 A5 03                         LDA temp+3
0C942 29 0F                         AND #%00001111
0C944 A8                            TAY
0C945 C8                            INY
0C946 B9 94 D9                      LDA tbl_Times16,y
0C949 9D 78 03                      STA move_block_x,x
0C94C                               
0C94C                               ;; - Set move block Y position
0C94C A5 03                         LDA temp+3
0C94E 29 F0                         AND #%11110000
0C950 18                            CLC
0C951 69 30                         ADC #$30
0C953 9D 7C 03                      STA move_block_y,x
0C956 DE 7C 03                      DEC move_block_y,x
0C959                               
0C959                               ;; - Set timer to 16 (+1) frames
0C959 A9 11                         LDA #$11
0C95B 9D 80 03                      STA move_block_timer,x
0C95E                               
0C95E                               ;; - Set move direction
0C95E A5 36                         LDA move_block_space_to_check
0C960 29 81                         AND #%10000001
0C962 18                            CLC
0C963 2A                            ROL
0C964 69 00                         ADC #$00
0C966 85 04                         STA temp+4
0C968                               
0C968                               ;; - Set block color as ball color and add direction
0C968 A5 37                         LDA ball_flags
0C96A 29 E0                         AND #BALL_COLOR
0C96C 05 04                         ORA temp+4
0C96E 9D 88 03                      STA move_block_flags,x
0C971                               
0C971                               ;; - Restore original X
0C971 A6 03                         LDX temp+3
0C973                               
0C973                               ;; - Initiate move sound effect
0C973 A9 18                         LDA #$18
0C975 85 4F                         STA sfx_timer+1
0C977                           
0C977                               ;; Return
0C977 60                            RTS
0C978                           
0C978                           
0C978                           ;; Do not move the move block
0C978                           +dontMoveBlock:
0C978                           
0C978                               ;; Play bounce sound effect
0C978 A2 02                         LDX #SFX_BOUNCE
0C97A 20 D4 CE                      JSR sub_PreloadSfxFromX
0C97D                           
0C97D                               ;; Restore X from stack
0C97D 68                            PLA
0C97E AA                            TAX
0C97F                               
0C97F                               ;; Return
0C97F 60                            RTS
0C980                           
0C980                           .include "game/subroutine/FlashEffect.asm"
0C980                           
0C980                           ;; Apply flashing light effect to background color
0C980                           sub_FlashEffect:
0C980 A2 00                         LDX #$00
0C982 86 01                         STX temp+1
0C984 A9 3F                         LDA #$3F
0C986 85 00                         STA temp
0C988                           
0C988                               -flashLoop:
0C988 BD 02 DA                          LDA tbl_BackgroundFade,x
0C98B 85 02                             STA temp+2
0C98D 20 D2 D0                          JSR sub_WriteByteToPPUBuffer
0C990 A0 03                             LDY #$03
0C992                                   -
0C992 20 04 C5                              JSR sub_WaitForNMI
0C995 88                                    DEY
0C996 D0 FA                             BNE -
0C998 E8                                INX
0C999 E0 0A                             CPX #$0A
0C99B D0 EB                         BNE -flashLoop
0C99D                               
0C99D 60                            RTS
0C99E                           
0C99E                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C99E                           
0C99E                           ;; Get the PPU address from YX index
0C99E                           ;; - Expects YX index (aka tile offset) to be in the X register
0C99E                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C99E                           
0C99E                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C99E                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C99E                           
0C99E                           sub_GetPPUAddrFromYXIndex:
0C99E 8A                            TXA
0C99F 29 C0                         AND #%11000000
0C9A1 18                            CLC
0C9A2 2A                            ROL
0C9A3 2A                            ROL
0C9A4 2A                            ROL
0C9A5 69 20                         ADC #$20
0C9A7 85 00                         STA temp
0C9A9                               
0C9A9 8A                            TXA
0C9AA 29 0F                         AND #%00001111
0C9AC 0A                            ASL
0C9AD 85 01                         STA temp+1
0C9AF                               
0C9AF 8A                            TXA
0C9B0 29 30                         AND #%00110000
0C9B2 0A                            ASL
0C9B3 0A                            ASL
0C9B4 18                            CLC
0C9B5 65 01                         ADC temp+1
0C9B7 85 01                         STA temp+1
0C9B9                               
0C9B9 A5 00                         LDA temp
0C9BB 69 00                         ADC #$00
0C9BD 85 00                         STA temp
0C9BF                               
0C9BF A5 01                         LDA temp+1
0C9C1 18                            CLC
0C9C2 69 C2                         ADC #$C2
0C9C4 85 01                         STA temp+1
0C9C6                               
0C9C6 A5 00                         LDA temp
0C9C8 69 00                         ADC #$00
0C9CA 85 00                         STA temp
0C9CC                           
0C9CC 60                            RTS
0C9CD                           
0C9CD                           .include "game/subroutine/InitiateNudge.asm"
0C9CD                           
0C9CD                           ;; Tell ball to nudge
0C9CD                           sub_InitiateNudge:
0C9CD 85 37                         STA ball_flags
0C9CF A9 06                         LDA #NUDGE_FRAMES
0C9D1 85 3E                         STA nudge_timer
0C9D3 60                            RTS
0C9D4                           
0C9D4                           .include "game/subroutine/JumpToPointer.asm"
0C9D4                           
0C9D4                           ;; Helper subroutine to JSR to a variable pointer address
0C9D4                           sub_JumpToPointer:
0C9D4 6C 0C 00                      JMP (pointer)
0C9D7                               ;RTS must be handled by the routine (pointer) jumps to
0C9D7                           
0C9D7                           .include "game/subroutine/LoadAnimations.asm"
0C9D7                           
0C9D7                           sub_LoadAnimations:
0C9D7                           
0C9D7                               ;; Set up loop
0C9D7 A2 00                         LDX #$00
0C9D9                               -loop_load_animation:
0C9D9                                   ;; Check if current animation is active. If not, goto next
0C9D9 BD 74 03                          LDA explosion_active,x
0C9DC D0 03                             BNE +
0C9DE 4C 69 CA                              JMP +next
0C9E1                                   +
0C9E1                           
0C9E1                                   ;; Check the explosion framecounter
0C9E1 BD 60 03                          LDA explosion_timer,x
0C9E4 D0 17                             BNE +
0C9E6                                       ;; Frametimer is 0
0C9E6                                       ;; Reset to animation speed
0C9E6 A9 04                                 LDA #ANIMATION_SPEED
0C9E8 9D 60 03                              STA explosion_timer,x
0C9EB                           
0C9EB                                       ;; Set next animation frame, and check if we're done yet
0C9EB FE 64 03                              INC explosion_currentframe,x
0C9EE BD 64 03                              LDA explosion_currentframe,x
0C9F1 C9 0A                                 CMP #ANIM_SLIDES
0C9F3 D0 08                                 BNE +
0C9F5                           
0C9F5                                       ;; If we're done, inactivate current explosion, go to the next one
0C9F5 A9 00                                 LDA #$00
0C9F7 9D 74 03                              STA explosion_active,x
0C9FA 4C 69 CA                              JMP +next
0C9FD                                   +
0C9FD                           
0C9FD                                   ;; Load (x,y) position in temp variables
0C9FD BD 6C 03                          LDA explosion_x,x
0CA00 85 01                             STA temp+1
0CA02 85 03                             STA temp+3
0CA04 BD 70 03                          LDA explosion_y,x
0CA07 85 02                             STA temp+2
0CA09                           
0CA09                                   ;; Load attribute in temp variable
0CA09 BD 68 03                          LDA explosion_attributes,x
0CA0C 85 04                             STA temp+4
0CA0E                           
0CA0E                                   ;; Load current frame into Y-register
0CA0E BC 64 03                          LDY explosion_currentframe,x
0CA11                           
0CA11                                   ;; Load current frame ROM address from table
0CA11 B9 26 D2                          LDA explosion_anim_lo,y
0CA14 85 0C                             STA pointer
0CA16 B9 1C D2                          LDA explosion_anim_hi,y
0CA19 85 0D                             STA pointer+1
0CA1B                           
0CA1B                                   ;; Save x-register on stack
0CA1B 8A                                TXA
0CA1C 48                                PHA
0CA1D                           
0CA1D                                   ;; Load sprites into sprite RAM
0CA1D A6 3D                             LDX sprite_ram_pointer
0CA1F A0 00                             LDY #$00
0CA21                           
0CA21                                   ;; Prepare (x,y) offset for loop
0CA21 84 00                             STY temp
0CA23                           
0CA23                                   -loop_load_sprite:
0CA23                                   
0CA23                                       ;; Do not draw empty sprites
0CA23 B1 0C                                 LDA (pointer),y
0CA25 F0 18                                 BEQ +nextSprite
0CA27                                   
0CA27                                           ;; Add y-position to sprite ram buffer
0CA27 A5 02                                     LDA temp+2
0CA29 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA2C E8                                        INX
0CA2D                           
0CA2D                                           ;; Get tile number from frame ROM address, and
0CA2D                                           ;; add it to sprite ram buffer
0CA2D B1 0C                                     LDA (pointer),y
0CA2F 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA32 E8                                        INX
0CA33                           
0CA33                                           ;; Add attribute data to sprite ram buffer
0CA33 A5 04                                     LDA temp+4
0CA35 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA38 E8                                        INX
0CA39                           
0CA39                                           ;; Add x-position to sprite ram buffer
0CA39 A5 03                                     LDA temp+3
0CA3B 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA3E E8                                        INX
0CA3F                           
0CA3F                                       +nextSprite:
0CA3F                           
0CA3F                                       ;; Check if all sprites are done
0CA3F C8                                    INY
0CA40 C0 09                                 CPY #SLIDE_SIZE
0CA42 F0 21                                 BEQ +updateSpriteRamPointer
0CA44                           
0CA44                                       ;; Update x value
0CA44 A5 03                                 LDA temp+3
0CA46 18                                    CLC
0CA47 69 08                                 ADC #$08
0CA49 85 03                                 STA temp+3
0CA4B                           
0CA4B                                       ;; Update temp for x,y position
0CA4B E6 00                                 INC temp
0CA4D A5 00                                 LDA temp
0CA4F C9 03                                 CMP #SLIDE_WIDTH
0CA51 D0 0F                                 BNE +
0CA53                                           ;; Row is done; reset x-position
0CA53 A5 01                                     LDA temp+1
0CA55 85 03                                     STA temp+3
0CA57                           
0CA57                                           ;; Update y-position
0CA57 A5 02                                     LDA temp+2
0CA59 18                                        CLC
0CA5A 69 08                                     ADC #$08
0CA5C 85 02                                     STA temp+2
0CA5E                           
0CA5E                                           ;; Reset row timer
0CA5E A9 00                                     LDA #$00
0CA60 85 00                                     STA temp
0CA62                                       +
0CA62                           
0CA62 4C 23 CA                          JMP -loop_load_sprite
0CA65                           
0CA65                               +updateSpriteRamPointer:
0CA65 86 3D                             STX sprite_ram_pointer
0CA67                           
0CA67                                   ;; Retrieve x-register from stack
0CA67 68                                PLA
0CA68 AA                                TAX
0CA69                           
0CA69                               +next:
0CA69                                   ;; Check if all animations have been updated
0CA69 E8                                INX
0CA6A E0 04                             CPX #MAX_ANIMATIONS
0CA6C F0 03                             BEQ +cleanUpSpriteRam
0CA6E                           
0CA6E 4C D9 C9                      JMP -loop_load_animation
0CA71                           
0CA71                           +cleanUpSpriteRam:
0CA71 A6 3D                         LDX sprite_ram_pointer
0CA73 A9 EF                         LDA #$EF
0CA75                               -
0CA75 9D 00 02                          STA ADDR_SPRITERAM,x
0CA78 E8                                INX
0CA79 D0 FA                         BNE -
0CA7B                               
0CA7B 60                            RTS
0CA7C                               
0CA7C                           .include "game/subroutine/LoadGameScreen.asm"
0CA7C                           
0CA7C                           ;; Load the game screen, based on level number
0CA7C                           sub_LoadGameScreen:
0CA7C                           
0CA7C                               ;; Clear the screen
0CA7C 20 DB C5                      JSR sub_ClearScreen
0CA7F                               
0CA7F                               ;; Clear collision and attribute data; reset blocks left in the process
0CA7F A2 00                         LDX #$00
0CA81 8A                            TXA
0CA82 85 44                         STA blocks_left
0CA84                               -
0CA84 9D 00 04                          STA tile_type,x
0CA87 E8                                INX
0CA88 D0 FA                         BNE -
0CA8A                               
0CA8A                               ;; Get pointer from current level
0CA8A A6 42                         LDX current_level
0CA8C BD 46 D9                      LDA tbl_lvl_layout_lo,x
0CA8F 85 0C                         STA pointer
0CA91 BD 2C D9                      LDA tbl_lvl_layout_hi,x
0CA94 85 0D                         STA pointer+1
0CA96                           
0CA96                               ;; Set up the loop
0CA96 A0 00                         LDY #$00
0CA98                           -drawRowColumnLoop:
0CA98                           
0CA98                               ;; Load (x,y) of current set of tiles
0CA98 B1 0C                         LDA (pointer),y
0CA9A                           
0CA9A                               ;; Check if level is done; if so, skip the loop
0CA9A C9 FF                         CMP #LEVEL_END
0CA9C D0 03                         BNE +
0CA9E 4C E7 CB                          JMP +doneLevelLoad
0CAA1                               +
0CAA1                           
0CAA1                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CAA1 85 00                         STA temp
0CAA3 C8                            INY
0CAA4 B1 0C                         LDA (pointer),y
0CAA6 85 01                         STA temp+1
0CAA8                               
0CAA8                               ;; Convert (x,y) to PPU address
0CAA8                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CAA8 A5 00                         LDA temp
0CAAA 29 0F                         AND #%00001111
0CAAC 4A                            LSR
0CAAD 4A                            LSR
0CAAE 09 20                         ORA #$20
0CAB0 85 02                         STA temp+2
0CAB2                               
0CAB2                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CAB2 A5 00                         LDA temp
0CAB4 29 F0                         AND #%11110000
0CAB6 4A                            LSR
0CAB7 4A                            LSR
0CAB8 4A                            LSR
0CAB9 85 03                         STA temp+3
0CABB                               
0CABB A5 00                         LDA temp
0CABD 29 03                         AND #%00000011
0CABF AA                            TAX
0CAC0 BD A4 D9                      LDA tbl_Times64,x
0CAC3 18                            CLC
0CAC4 65 03                         ADC temp+3
0CAC6 18                            CLC
0CAC7 69 C2                         ADC #$C2
0CAC9 85 03                         STA temp+3
0CACB                               
0CACB                               ;; Add carry to temp+2
0CACB A5 02                         LDA temp+2
0CACD 69 00                         ADC #$00
0CACF 85 02                         STA temp+2
0CAD1                           
0CAD1                               ;; Convert tile data to loop count and tile type
0CAD1                               ;; temp+4 = color
0CAD1 A5 01                         LDA temp+1
0CAD3 29 07                         AND #%00000111
0CAD5 85 04                         STA temp+4
0CAD7                               
0CAD7                               ;; If color = 7, this is a wall
0CAD7 C9 07                         CMP #%00000111
0CAD9 F0 12                         BEQ +wallHack
0CADB                                   
0CADB                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CADB 29 01                             AND #%00000001
0CADD F0 02                             BEQ +
0CADF A9 05                                 LDA #$05
0CAE1                                   +
0CAE1 85 07                             STA temp+7
0CAE3                                
0CAE3                                   ;; temp+5 = tile type
0CAE3 A5 01                             LDA temp+1
0CAE5 4A                                LSR
0CAE6 4A                                LSR
0CAE7 4A                                LSR
0CAE8 29 03                             AND #%00000011
0CAEA 4C F3 CA                          JMP +setTileType
0CAED                               +wallHack:
0CAED                               
0CAED                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CAED A9 00                         LDA #$00
0CAEF 85 07                         STA temp+7
0CAF1 A9 04                         LDA #$04
0CAF3                           
0CAF3                           +setTileType:    
0CAF3 85 05                         STA temp+5
0CAF5                               
0CAF5                               ;; X = tile offset
0CAF5 18                            CLC
0CAF6 65 07                         ADC temp+7
0CAF8 AA                            TAX
0CAF9                               
0CAF9                               ;; temp+6 = number of tiles
0CAF9 A5 01                         LDA temp+1
0CAFB 29 60                         AND #%01100000
0CAFD 4A                            LSR
0CAFE 4A                            LSR
0CAFF 4A                            LSR
0CB00 4A                            LSR
0CB01 4A                            LSR
0CB02 85 06                         STA temp+6
0CB04                               
0CB04                               ;; Translate (x,y) to (y,x) for tile RAM
0CB04 A5 00                         LDA temp
0CB06 0A                            ASL
0CB07 0A                            ASL
0CB08 0A                            ASL
0CB09 0A                            ASL
0CB0A 85 08                         STA temp+8
0CB0C A5 00                         LDA temp
0CB0E 4A                            LSR
0CB0F 4A                            LSR
0CB10 4A                            LSR
0CB11 4A                            LSR
0CB12 05 08                         ORA temp+8
0CB14 85 00                         STA temp
0CB16                               
0CB16                               ;; Set up loop
0CB16 98                            TYA
0CB17 48                            PHA
0CB18 A4 06                         LDY temp+6
0CB1A                           
0CB1A                               -drawTileLoop:
0CB1A                                   ;; Write PPU address
0CB1A 2C 02 20                          BIT PPU_STATUS
0CB1D A5 02                             LDA temp+2
0CB1F 8D 06 20                          STA PPU_ADDR
0CB22 A5 03                             LDA temp+3
0CB24 8D 06 20                          STA PPU_ADDR
0CB27                                   
0CB27                                   ;; Write first and second tile
0CB27 BD A8 D9                          LDA tbl_GametileTopLeft,x
0CB2A 8D 07 20                          STA PPU_DATA
0CB2D BD B2 D9                          LDA tbl_GametileTopRight,x
0CB30 8D 07 20                          STA PPU_DATA
0CB33                                   
0CB33                                   ;; Update PPU address
0CB33 2C 02 20                          BIT PPU_STATUS
0CB36 A5 02                             LDA temp+2
0CB38 8D 06 20                          STA PPU_ADDR
0CB3B A5 03                             LDA temp+3
0CB3D 18                                CLC
0CB3E 69 20                             ADC #$20
0CB40 8D 06 20                          STA PPU_ADDR
0CB43                                   
0CB43                                   ;; Write third and fourth tile
0CB43 BD BC D9                          LDA tbl_GametileBottomLeft,x
0CB46 8D 07 20                          STA PPU_DATA
0CB49 BD C6 D9                          LDA tbl_GametileBottomRight,x
0CB4C 8D 07 20                          STA PPU_DATA
0CB4F                           
0CB4F                                   ;; Push x-register to stack
0CB4F 8A                                TXA
0CB50 48                                PHA
0CB51                           
0CB51                                   ;; Update tile RAM (aka collision table)
0CB51 A6 05                             LDX temp+5
0CB53 BD D0 D9                          LDA tbl_GameTileRamByte,x
0CB56 05 04                             ORA temp+4
0CB58 0A                                ASL
0CB59 09 01                             ORA #%00000001
0CB5B A6 00                             LDX temp
0CB5D 9D 00 04                          STA tile_type,x
0CB60                           
0CB60                                   ;; Check if shade 1 should be drawn
0CB60 E8                                INX
0CB61 BD 00 04                          LDA tile_type,x
0CB64 D0 05                             BNE +
0CB66 A9 00                                 LDA #$00
0CB68 8D 07 20                              STA PPU_DATA
0CB6B                                   +
0CB6B                                   
0CB6B                                   ;; Check if shade 2 should be drawn
0CB6B A5 03                             LDA temp+3
0CB6D 18                                CLC
0CB6E 69 41                             ADC #$41
0CB70 85 03                             STA temp+3
0CB72 A5 02                             LDA temp+2
0CB74 69 00                             ADC #$00
0CB76 85 02                             STA temp+2
0CB78                                   
0CB78 8A                                TXA
0CB79 18                                CLC
0CB7A 69 0F                             ADC #$0F
0CB7C AA                                TAX
0CB7D                                   
0CB7D BD 00 04                          LDA tile_type,x
0CB80 D0 0F                             BNE +
0CB82 A5 02                                 LDA temp+2
0CB84 8D 06 20                              STA PPU_ADDR
0CB87 A5 03                                 LDA temp+3
0CB89 8D 06 20                              STA PPU_ADDR
0CB8C A9 00                                 LDA #$00
0CB8E 8D 07 20                              STA PPU_DATA
0CB91                                   +
0CB91                           
0CB91                                   ;; Check if shade 3 should be drawn
0CB91 E8                                INX
0CB92 E6 03                             INC temp+3
0CB94 BD 00 04                          LDA tile_type,x
0CB97 D0 0F                             BNE +
0CB99 A5 02                                 LDA temp+2
0CB9B 8D 06 20                              STA PPU_ADDR
0CB9E A5 03                                 LDA temp+3
0CBA0 8D 06 20                              STA PPU_ADDR
0CBA3 A9 00                                 LDA #$00
0CBA5 8D 07 20                              STA PPU_DATA
0CBA8                                   +
0CBA8                                   
0CBA8                                   ;; Restore x-register from stack
0CBA8 68                                PLA
0CBA9 AA                                TAX
0CBAA                                   
0CBAA                                   ;; Reset pointer for next tile
0CBAA A5 03                             LDA temp+3
0CBAC 38                                SEC
0CBAD E9 42                             SBC #$42
0CBAF 85 03                             STA temp+3
0CBB1 A5 02                             LDA temp+2
0CBB3 E9 00                             SBC #$00
0CBB5 85 02                             STA temp+2
0CBB7                                   
0CBB7                                   ;; Draw next metatile in this loop (if any left)
0CBB7 88                                DEY
0CBB8 30 27                             BMI +doneDrawingRowColumn
0CBBA                                   
0CBBA                                   ;; Is it a row or a column?
0CBBA A5 01                             LDA temp+1
0CBBC 10 17                             BPL +
0CBBE                                       ;; It is a column: move pointer down (+$40)
0CBBE A5 03                                 LDA temp+3
0CBC0 18                                    CLC
0CBC1 69 40                                 ADC #$40
0CBC3 85 03                                 STA temp+3
0CBC5 A5 02                                 LDA temp+2
0CBC7 69 00                                 ADC #$00
0CBC9 85 02                                 STA temp+2
0CBCB                                       
0CBCB                                       ;; Add 16 to temp (as a tile RAM pointer)
0CBCB A5 00                                 LDA temp
0CBCD 18                                    CLC
0CBCE 69 10                                 ADC #$10
0CBD0 85 00                                 STA temp
0CBD2 4C DE CB                              JMP +drawNextTile
0CBD5                                   +
0CBD5                                   
0CBD5                                   ;; It is a row: move pointer right (+$02)
0CBD5 A5 03                             LDA temp+3
0CBD7 18                                CLC
0CBD8 69 02                             ADC #$02
0CBDA 85 03                             STA temp+3
0CBDC                                   
0CBDC                                   ;; Add 1 to temp (as a tile RAM pointer)
0CBDC E6 00                             INC temp
0CBDE                           
0CBDE                               
0CBDE                               ;; Next tile in the row/column
0CBDE                                   +drawNextTile:
0CBDE 4C 1A CB                      JMP -drawTileLoop
0CBE1                           
0CBE1                               ;; Go to the next set of tiles
0CBE1                           +doneDrawingRowColumn:
0CBE1 68                            PLA
0CBE2 A8                            TAY
0CBE3 C8                            INY
0CBE4 4C 98 CA                      JMP -drawRowColumnLoop
0CBE7                           
0CBE7                           ;; Level loading is done
0CBE7                           +doneLevelLoad:
0CBE7                           
0CBE7                               ;; Count number of color blocks
0CBE7 A2 A0                         LDX #160
0CBE9                               -
0CBE9 BD FF 03                          LDA tile_type-1,x
0CBEC 29 80                             AND #%10000000
0CBEE F0 02                             BEQ +
0CBF0 E6 44                                 INC blocks_left
0CBF2                                   +
0CBF2 CA                                DEX
0CBF3 D0 F4                         BNE -
0CBF5                           
0CBF5                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CBF5 A9 20                         LDA #$20
0CBF7 8D 06 20                      STA PPU_ADDR
0CBFA A9 A2                         LDA #$A2
0CBFC 8D 06 20                      STA PPU_ADDR
0CBFF A9 35                         LDA #$35
0CC01 20 3B CE                      JSR sub_Draw28HorizontalTiles
0CC04                           
0CC04                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CC04 A9 23                         LDA #$23
0CC06 8D 06 20                      STA PPU_ADDR
0CC09 A9 42                         LDA #$42
0CC0B 8D 06 20                      STA PPU_ADDR
0CC0E A9 31                         LDA #$31
0CC10 20 3B CE                      JSR sub_Draw28HorizontalTiles
0CC13                           
0CC13                               ;; Left & right game bounds
0CC13                               ;; Set PPU_ADDR and store in temp variables
0CC13 A9 20                         LDA #$20
0CC15 85 00                         STA temp
0CC17 8D 06 20                      STA PPU_ADDR
0CC1A A9 C1                         LDA #$C1
0CC1C 85 01                         STA temp+1
0CC1E 8D 06 20                      STA PPU_ADDR
0CC21                               
0CC21                               ;; Set vertical bound tile and set up loop
0CC21 A0 33                         LDY #$33
0CC23 A2 14                         LDX #20
0CC25                               -
0CC25                                   ;; Show left tile
0CC25 8C 07 20                          STY PPU_DATA
0CC28                                   
0CC28                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CC28 A5 00                             LDA temp
0CC2A 8D 06 20                          STA PPU_ADDR
0CC2D A5 01                             LDA temp+1
0CC2F 18                                CLC
0CC30 69 1D                             ADC #29
0CC32 85 01                             STA temp+1
0CC34 8D 06 20                          STA PPU_ADDR
0CC37                           
0CC37                                   ;; Show right tile
0CC37 8C 07 20                          STY PPU_DATA
0CC3A                           
0CC3A                                   ;; Check if we're done yet
0CC3A CA                                DEX
0CC3B F0 18                             BEQ +drawCorners
0CC3D                                   
0CC3D                                   ;; Not done yet: add 3 to low byte for next left bound
0CC3D A5 01                             LDA temp+1
0CC3F 18                                CLC
0CC40 69 03                             ADC #3
0CC42 85 01                             STA temp+1
0CC44                                   
0CC44                                   ;; Apply carry to high byte
0CC44 A5 00                             LDA temp
0CC46 69 00                             ADC #$00
0CC48 85 00                             STA temp
0CC4A                                   
0CC4A                                   ;; Store next PPU_ADDR to draw at
0CC4A 8D 06 20                          STA PPU_ADDR
0CC4D A5 01                             LDA temp+1
0CC4F 8D 06 20                          STA PPU_ADDR
0CC52 4C 25 CC                      JMP -
0CC55                               
0CC55                               
0CC55                           
0CC55                           +drawCorners:
0CC55                               ;; Draw the corners of the playing field
0CC55 A9 20                         LDA #$20
0CC57 8D 06 20                      STA PPU_ADDR
0CC5A A9 A1                         LDA #$A1
0CC5C 8D 06 20                      STA PPU_ADDR
0CC5F A9 39                         LDA #$39
0CC61 8D 07 20                      STA PPU_DATA
0CC64                           
0CC64 A9 20                         LDA #$20
0CC66 8D 06 20                      STA PPU_ADDR
0CC69 A9 BE                         LDA #$BE
0CC6B 8D 06 20                      STA PPU_ADDR
0CC6E A9 3A                         LDA #$3A
0CC70 8D 07 20                      STA PPU_DATA
0CC73                               ;; (added background tile for Sprite-0 hit)
0CC73 A9 3F                         LDA #$3F
0CC75 8D 07 20                      STA PPU_DATA
0CC78                           
0CC78 A9 23                         LDA #$23
0CC7A 8D 06 20                      STA PPU_ADDR
0CC7D A9 41                         LDA #$41
0CC7F 8D 06 20                      STA PPU_ADDR
0CC82 A9 36                         LDA #$36
0CC84 8D 07 20                      STA PPU_DATA
0CC87                           
0CC87 A9 23                         LDA #$23
0CC89 8D 06 20                      STA PPU_ADDR
0CC8C A9 5E                         LDA #$5E
0CC8E 8D 06 20                      STA PPU_ADDR
0CC91 A9 34                         LDA #$34
0CC93 8D 07 20                      STA PPU_DATA
0CC96                           
0CC96                           
0CC96                               ;; Draw the hud labels
0CC96 A9 20                         LDA #$20
0CC98 8D 06 20                      STA PPU_ADDR
0CC9B A9 62                         LDA #$62
0CC9D 8D 06 20                      STA PPU_ADDR
0CCA0 A2 00                         LDX #$00
0CCA2                               -
0CCA2 BD D5 D9                          LDA tbl_HudText,x
0CCA5 8D 07 20                          STA PPU_DATA
0CCA8 E8                                INX
0CCA9 E0 1C                             CPX #28
0CCAB D0 F5                         BNE -
0CCAD                           
0CCAD                           
0CCAD                               ;; Draw the current score
0CCAD A9 20                         LDA #$20
0CCAF 8D 06 20                      STA PPU_ADDR
0CCB2 A9 83                         LDA #$83
0CCB4 8D 06 20                      STA PPU_ADDR
0CCB7 A2 00                         LDX #$00
0CCB9                               -
0CCB9 B5 20                             LDA ball_score,x
0CCBB 18                                CLC
0CCBC 69 01                             ADC #$01
0CCBE 8D 07 20                          STA PPU_DATA
0CCC1 E8                                INX
0CCC2 E0 06                             CPX #$06
0CCC4 D0 F3                         BNE -
0CCC6                           
0CCC6                           
0CCC6                               ;; Draw the level number
0CCC6                               ;; (with primitive HEX>DEC)
0CCC6 A5 42                         LDA current_level
0CCC8 18                            CLC
0CCC9 69 01                         ADC #$01
0CCCB 85 01                         STA temp+1
0CCCD                               
0CCCD C9 14                         CMP #20
0CCCF B0 13                         BCS +tempIsTwo
0CCD1                               
0CCD1 C9 0A                         CMP #10
0CCD3 B0 05                         BCS +tempIsOne
0CCD5                               
0CCD5 A9 00                         LDA #$00
0CCD7 4C EB CC                      JMP +setTemp
0CCDA                               
0CCDA                           +tempIsOne:
0CCDA 38                            SEC
0CCDB E9 0A                         SBC #10
0CCDD 85 01                         STA temp+1
0CCDF A9 01                         LDA #$01
0CCE1 4C EB CC                      JMP +setTemp
0CCE4                               
0CCE4                           +tempIsTwo:
0CCE4 38                            SEC
0CCE5 E9 14                         SBC #20
0CCE7 85 01                         STA temp+1
0CCE9 A9 02                         LDA #$02
0CCEB                           
0CCEB                           +setTemp:
0CCEB 85 00                         STA temp
0CCED                               
0CCED E6 00                         INC temp
0CCEF E6 01                         INC temp+1
0CCF1                               
0CCF1 A9 20                         LDA #$20
0CCF3 8D 06 20                      STA PPU_ADDR
0CCF6 A9 8B                         LDA #$8B
0CCF8 8D 06 20                      STA PPU_ADDR
0CCFB A5 00                         LDA temp
0CCFD 8D 07 20                      STA PPU_DATA
0CD00 A5 01                         LDA temp+1
0CD02 8D 07 20                      STA PPU_DATA
0CD05                           
0CD05                           
0CD05                               ;; Draw lives (presumes lives to be capped at 9)
0CD05 A9 20                         LDA #$20
0CD07 8D 06 20                      STA PPU_ADDR
0CD0A A9 92                         LDA #$92
0CD0C 8D 06 20                      STA PPU_ADDR
0CD0F A6 1F                         LDX ball_lives
0CD11 E8                            INX
0CD12 8E 07 20                      STX PPU_DATA
0CD15                           
0CD15                           
0CD15                               ;; Set and draw bonus
0CD15 A9 07                         LDA #$07
0CD17 85 2C                         STA ball_bonus
0CD19 A9 09                         LDA #$09
0CD1B 85 2D                         STA ball_bonus+1
0CD1D 85 2E                         STA ball_bonus+2
0CD1F                               
0CD1F A9 20                         LDA #$20
0CD21 8D 06 20                      STA PPU_ADDR
0CD24 A9 9A                         LDA #$9A
0CD26 8D 06 20                      STA PPU_ADDR
0CD29 A2 00                         LDX #$00
0CD2B                               -
0CD2B B5 2C                             LDA ball_bonus,x
0CD2D 18                                CLC
0CD2E 69 01                             ADC #$01
0CD30 8D 07 20                          STA PPU_DATA
0CD33 E8                                INX
0CD34 E0 03                             CPX #$03
0CD36 D0 F3                         BNE -
0CD38                           
0CD38                           
0CD38                               ;; Set attribute data to RAM
0CD38                               
0CD38                               ;; Byte 0-7 of attribute ram should be #%10100000
0CD38 A2 00                         LDX #$00
0CD3A A9 A0                         LDA #$A0
0CD3C                               -
0CD3C 9D A0 04                          STA tile_attributes,x
0CD3F E8                                INX
0CD40 E0 08                             CPX #$08
0CD42 D0 F8                         BNE -
0CD44                           
0CD44                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CD44                           
0CD44                           -attributeLoop:
0CD44                               ;; Reset current attribute value
0CD44 A9 00                         LDA #$00
0CD46 85 02                         STA temp+2
0CD48                           
0CD48                               ;; Get first metatile in tile ram based on attribute index
0CD48                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CD48 8A                            TXA
0CD49                           
0CD49 38                            SEC
0CD4A E9 08                         SBC #$08
0CD4C 85 01                         STA temp+1      ; attr - 8 (temp1)
0CD4E 0A                            ASL             ; * 2
0CD4F 85 00                         STA temp        ; temp = temp1 * 2
0CD51                           
0CD51 A5 01                         LDA temp+1      ; temp1
0CD53 29 F8                         AND #%11111000  ; rounded down to 8's
0CD55 0A                            ASL             ; * 2
0CD56 18                            CLC
0CD57 65 00                         ADC temp        ; + temp1 * 2
0CD59 85 00                         STA temp        ; first metatile
0CD5B                           
0CD5B                               ;; Store first metatile in y-register
0CD5B A8                            TAY
0CD5C                           
0CD5C                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CD5C 8A                            TXA
0CD5D 29 07                         AND #%00000111
0CD5F C9 07                         CMP #%00000111
0CD61 F0 0B                         BEQ +
0CD63                           
0CD63                               ;; If X >= $30, don't apply bottom right metatile
0CD63 E0 30                         CPX #$30
0CD65 B0 07                         BCS +
0CD67                               
0CD67                               ;; Add metatile1 subpalette to attribute value
0CD67 B9 00 04                      LDA tile_type,y
0CD6A 29 0C                         AND #%00001100
0CD6C 85 02                         STA temp+2
0CD6E                               +
0CD6E                           
0CD6E                           
0CD6E                               ;; Apply second metatile
0CD6E 88                            DEY
0CD6F                           
0CD6F                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CD6F 8A                            TXA
0CD70 29 07                         AND #%00000111
0CD72 F0 10                         BEQ +
0CD74                           
0CD74                               ;; If X >= $30, don't apply bottom left metatile
0CD74 E0 30                         CPX #$30
0CD76 B0 0C                         BCS +
0CD78                           
0CD78                           
0CD78                           
0CD78                               ;; Add metatile2 subpalette to attribute value
0CD78 B9 00 04                      LDA tile_type,y
0CD7B 29 0C                         AND #%00001100
0CD7D 4A                            LSR
0CD7E 4A                            LSR
0CD7F 05 02                         ORA temp+2
0CD81 4C 86 CD                      JMP ++
0CD84                               +
0CD84 A5 02                         LDA temp+2
0CD86                               ++
0CD86 0A                            ASL
0CD87 0A                            ASL
0CD88 85 02                         STA temp+2
0CD8A                           
0CD8A                           
0CD8A                               ;; Apply third metatile
0CD8A 98                            TYA
0CD8B 38                            SEC
0CD8C E9 0F                         SBC #$0F
0CD8E A8                            TAY
0CD8F                           
0CD8F                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD8F 8A                            TXA
0CD90 29 07                         AND #%00000111
0CD92 C9 07                         CMP #%00000111
0CD94 F0 11                         BEQ +
0CD96                           
0CD96                               ;; If X < $10, don't apply top right metatile
0CD96 8A                            TXA
0CD97 29 F0                         AND #%11110000
0CD99 F0 0C                         BEQ +
0CD9B                           
0CD9B                               ;; Add metatile3 subpalette to attribute value
0CD9B B9 00 04                      LDA tile_type,y
0CD9E 29 0C                         AND #%00001100
0CDA0 4A                            LSR
0CDA1 4A                            LSR
0CDA2 05 02                         ORA temp+2
0CDA4 4C A9 CD                      JMP ++
0CDA7                               +
0CDA7 A5 02                         LDA temp+2
0CDA9                               ++
0CDA9 0A                            ASL
0CDAA 0A                            ASL
0CDAB 85 02                         STA temp+2
0CDAD                           
0CDAD                           
0CDAD                               ;; Apply fourth metatile
0CDAD 88                            DEY
0CDAE                           
0CDAE                               ;; If X MOD 8 == 0, don't apply top left metatile
0CDAE 8A                            TXA
0CDAF 29 07                         AND #%00000111
0CDB1 F0 11                         BEQ +
0CDB3                           
0CDB3                               ;; If X < $10, don't apply top left metatile
0CDB3 8A                            TXA
0CDB4 29 F0                         AND #%11110000
0CDB6 F0 0C                         BEQ +
0CDB8                           
0CDB8                               ;; Add metatile4 subpalette to attribute value
0CDB8 B9 00 04                      LDA tile_type,y
0CDBB 29 0C                         AND #%00001100
0CDBD 4A                            LSR
0CDBE 4A                            LSR
0CDBF 05 02                         ORA temp+2
0CDC1 4C C6 CD                      JMP ++
0CDC4                               +
0CDC4 A5 02                         LDA temp+2
0CDC6                               ++
0CDC6 9D A0 04                      STA tile_attributes,x
0CDC9                           
0CDC9                               ;; Check the next attribute, if any left
0CDC9 E8                            INX
0CDCA E0 38                         CPX #$38
0CDCC F0 03                         BEQ +
0CDCE 4C 44 CD                          JMP -attributeLoop
0CDD1                               +
0CDD1                           
0CDD1                               ;; Stream attribute RAM to PPU
0CDD1 2C 02 20                      BIT PPU_STATUS
0CDD4 A9 23                         LDA #$23
0CDD6 8D 06 20                      STA PPU_ADDR
0CDD9 A9 C0                         LDA #$C0
0CDDB 8D 06 20                      STA PPU_ADDR
0CDDE A2 00                         LDX #$00
0CDE0                               -
0CDE0 BD A0 04                          LDA tile_attributes,x
0CDE3 8D 07 20                          STA PPU_DATA
0CDE6 E8                                INX
0CDE7 E0 40                             CPX #$40
0CDE9 D0 F5                         BNE -
0CDEB                           
0CDEB                               ;; Set initial ball position
0CDEB A6 42                         LDX current_level
0CDED BD 60 D9                      LDA tbl_lvl_ball_startpos,x
0CDF0 29 F0                         AND #%11110000
0CDF2 18                            CLC
0CDF3 69 34                         ADC #$34
0CDF5 85 19                         STA ball_ypos_hi
0CDF7 BD 60 D9                      LDA tbl_lvl_ball_startpos,x
0CDFA 0A                            ASL
0CDFB 0A                            ASL
0CDFC 0A                            ASL
0CDFD 0A                            ASL
0CDFE 18                            CLC
0CDFF 69 14                         ADC #$14
0CE01 85 17                         STA ball_xpos_hi
0CE03 A9 00                         LDA #$00
0CE05 85 18                         STA ball_xpos_lo
0CE07 85 1A                         STA ball_ypos_lo
0CE09                               
0CE09                               ;; Set initial ball color and direction
0CE09 BD 7A D9                      LDA tbl_lvl_ball_init,x
0CE0C 29 F0                         AND #%11110000
0CE0E 85 37                         STA ball_flags
0CE10 20 46 C6                      JSR sub_ColorizeBall
0CE13                               
0CE13                               ;; Reset bonus timer
0CE13 A9 08                         LDA #BONUS_FRAMES
0CE15 85 3F                         STA bonus_timer
0CE17                               
0CE17                               ;; Play background noise
0CE17 A9 08                         LDA #$08
0CE19 8D 15 40                      STA APU_STATUS
0CE1C 8D 0F 40                      STA NOISE_LENGTH
0CE1F A9 0E                         LDA #$0E
0CE21 85 47                         STA current_noise
0CE23 A9 00                         LDA #$00
0CE25 85 45                         STA max_noise
0CE27 85 48                         STA noise_timer
0CE29 85 46                         STA sweep_noise
0CE2B 85 4B                         STA noise_muted
0CE2D 20 72 C5                      JSR sub_BackgroundNoise
0CE30                           
0CE30                               ;; Freeze the ball
0CE30 A5 37                         LDA ball_flags
0CE32 09 04                         ORA #FREEZE_BALL
0CE34 85 37                         STA ball_flags
0CE36                               
0CE36                               ;; Start unfreeze timer
0CE36 A9 30                         LDA #$30
0CE38 85 41                         STA unfreeze_timer
0CE3A                           
0CE3A                               ;; Return
0CE3A 60                            RTS
0CE3B                           
0CE3B                           
0CE3B                           ;; Subroutine: draw 28 tiles in a row
0CE3B                           sub_Draw28HorizontalTiles:
0CE3B A2 1C                         LDX #28
0CE3D                               -
0CE3D 8D 07 20                          STA PPU_DATA
0CE40 CA                                DEX
0CE41 D0 FA                         BNE -
0CE43 60                            RTS
0CE44                           
0CE44                           .include "game/subroutine/LoadIntroScreen.asm"
0CE44                           
0CE44                           ;; Load the intro screen
0CE44                           sub_LoadIntroScreen:
0CE44                           
0CE44                               ;; Load intro palette
0CE44 2C 02 20                      BIT PPU_STATUS
0CE47 A9 3F                         LDA #$3F
0CE49 8D 06 20                      STA PPU_ADDR
0CE4C A9 00                         LDA #$00
0CE4E 8D 06 20                      STA PPU_ADDR
0CE51 A2 00                         LDX #$00
0CE53                               -
0CE53 BD F8 D0                          LDA tbl_IntroScreenPalette,x
0CE56 8D 07 20                          STA PPU_DATA
0CE59 E8                                INX
0CE5A E0 20                             CPX #$20
0CE5C D0 F5                         BNE -
0CE5E                               
0CE5E                               ;; Put ball in the middle
0CE5E A9 7C                         LDA #$7C
0CE60 85 17                         STA ball_xpos_hi
0CE62 85 19                         STA ball_ypos_hi
0CE64                           
0CE64                               ;; Clear the screen
0CE64 20 DB C5                      JSR sub_ClearScreen
0CE67                           
0CE67                               ;; Set up intro screen draw loop
0CE67 A2 00                         LDX #$00
0CE69                           
0CE69                           -loop_IntroScreenData:
0CE69                           
0CE69                               ;; Get current byte from intro screen data
0CE69 BD 20 D1                      LDA tbl_IntroScreenData,x
0CE6C                           
0CE6C                               ;; If current byte is #$3F, we're done drawing.
0CE6C C9 3F                         CMP #$3F
0CE6E D0 03                         BNE +
0CE70 4C BD CE                          JMP +goToEndIntroScreen
0CE73                               +
0CE73                           
0CE73                               ;; If highest bits are %11, draw a plain tile
0CE73 29 C0                         AND #%11000000
0CE75 D0 03                         BNE +
0CE77 4C 9D CE                          JMP +drawTile
0CE7A                               +
0CE7A                               
0CE7A                               ;; If highest bits are %01, set the PPU address
0CE7A                               ;; If not, draw two logo tiles
0CE7A C9 40                         CMP #%01000000
0CE7C D0 03                         BNE +drawLogo
0CE7E 4C A7 CE                          JMP +setPpuAddr
0CE81                           
0CE81                           +drawLogo:
0CE81                               ;; Get bits 0-2 and store in a temp variable
0CE81 BD 20 D1                      LDA tbl_IntroScreenData,x
0CE84 29 07                         AND #%00000111
0CE86 85 00                         STA temp
0CE88                               
0CE88                               ;; Get bits 3-5, shift over to get a value from 0-7
0CE88 BD 20 D1                      LDA tbl_IntroScreenData,x
0CE8B 4A                            LSR
0CE8C 4A                            LSR
0CE8D 4A                            LSR
0CE8E 29 07                         AND #%00000111
0CE90                               
0CE90                               ;; Draw the tile that corresponds with that value
0CE90 A8                            TAY
0CE91 20 BE C6                      JSR sub_drawIntroScreenLogoTile
0CE94                               
0CE94                               ;; Do the same for the value stored in temp
0CE94 A4 00                         LDY temp
0CE96 20 BE C6                      JSR sub_drawIntroScreenLogoTile
0CE99                           
0CE99                               ;; Next byte please
0CE99 E8                            INX
0CE9A 4C 69 CE                      JMP -loop_IntroScreenData
0CE9D                           
0CE9D                           +drawTile:
0CE9D                               ;; Just draw the tile value on screen
0CE9D BD 20 D1                      LDA tbl_IntroScreenData,x
0CEA0 8D 07 20                      STA PPU_DATA
0CEA3                               
0CEA3                               ;; Next byte please
0CEA3 E8                            INX
0CEA4 4C 69 CE                      JMP -loop_IntroScreenData
0CEA7                           
0CEA7                           
0CEA7                           +setPpuAddr:
0CEA7                               ;; Reset the PPU latch
0CEA7 2C 02 20                      BIT PPU_STATUS
0CEAA                               
0CEAA                               ;; Sanitize and write the high byte of the PPU address
0CEAA BD 20 D1                      LDA tbl_IntroScreenData,x
0CEAD 29 3F                         AND #%00111111
0CEAF 8D 06 20                      STA PPU_ADDR
0CEB2                           
0CEB2                               ;; Write the low byte of the PPU address
0CEB2 E8                            INX
0CEB3 BD 20 D1                      LDA tbl_IntroScreenData,x
0CEB6 8D 06 20                      STA PPU_ADDR
0CEB9                               
0CEB9                               ;; PPU has been set up to draw tiles at the correct spot now.
0CEB9                               
0CEB9                               ;; Next byte please.
0CEB9 E8                            INX
0CEBA 4C 69 CE                      JMP -loop_IntroScreenData
0CEBD                           
0CEBD                           +goToEndIntroScreen:
0CEBD                           
0CEBD                               ;; To color the 1.LEVEL: line green, we need to update two
0CEBD                               ;; values in the PPU attribute data.
0CEBD 2C 02 20                      BIT PPU_STATUS
0CEC0 A9 23                         LDA #$23
0CEC2 8D 06 20                      STA PPU_ADDR
0CEC5 A9 CB                         LDA #$CB
0CEC7 8D 06 20                      STA PPU_ADDR
0CECA A9 0A                         LDA #%00001010
0CECC 8D 07 20                      STA PPU_DATA
0CECF 8D 07 20                      STA PPU_DATA
0CED2                           
0CED2 60                            RTS
0CED3                           
0CED3                           .include "game/subroutine/LoadWinScreen.asm"
0CED3                           
0CED3                           ;; Load the win screen (in progress)
0CED3                           sub_LoadWinScreen:
0CED3 60                            RTS
0CED4                           
0CED4                           .include "game/subroutine/PreloadSfxFromX.asm"
0CED4                           
0CED4                           sub_PreloadSfxFromX:
0CED4                               
0CED4                               ;; Load sample X into sfx address (low byte)
0CED4 BD 51 DA                      LDA tbl_Sfx_lo,x
0CED7 85 4C                         STA sfx_address
0CED9                               
0CED9                               ;; Load sample X into sfx address (high byte)
0CED9 BD 4E DA                      LDA tbl_Sfx_hi,x
0CEDC 85 4D                         STA sfx_address+1
0CEDE                               
0CEDE                               ;; Start SFX timer
0CEDE A9 01                         LDA #$01
0CEE0 85 4E                         STA sfx_timer
0CEE2                               
0CEE2 60                            RTS
0CEE3                               
0CEE3                               0CEE3                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CEE3                           
0CEE3                           ;; Remove a block from screen
0CEE3                           sub_RemoveBlockFromScreen:
0CEE3                           
0CEE3                               ;; Get current buffer location
0CEE3 A4 3A                         LDY ppu_buffer_pointer
0CEE5                               
0CEE5                               ;; TILE 1: if metatile on top left is solid, draw
0CEE5                               ;; null tile, else draw random noise tile
0CEE5 A9 00                         LDA #$00
0CEE7 85 39                         STA ppu_buffer_update
0CEE9                               
0CEE9 A5 00                         LDA temp
0CEEB 99 00 03                      STA ppu_buffer,y
0CEEE C8                            INY
0CEEF A5 01                         LDA temp+1
0CEF1 99 00 03                      STA ppu_buffer,y
0CEF4 C8                            INY
0CEF5                               
0CEF5 8A                            TXA
0CEF6 29 0F                         AND #%00001111
0CEF8 F0 11                         BEQ +drawRandomTile
0CEFA                           
0CEFA 8A                            TXA
0CEFB 29 F0                         AND #%11110000
0CEFD F0 0C                         BEQ +drawRandomTile
0CEFF                           
0CEFF BD EF 03                      LDA tile_type-17,x
0CF02 29 01                         AND #%00000001
0CF04 F0 05                         BEQ +drawRandomTile  
0CF06                           
0CF06                               ;; Draw a null tile
0CF06 A9 00                         LDA #$00
0CF08 4C 13 CF                      JMP +addToPPUBuffer
0CF0B                               
0CF0B                           +drawRandomTile:
0CF0B                               ;; Draw a random tile
0CF0B 20 E2 C4                      JSR sub_GetRandomNumber
0CF0E 29 07                         AND #%00000111
0CF10 18                            CLC
0CF11 69 68                         ADC #$68
0CF13                               
0CF13                               ;; Add tile to ppu buffer
0CF13                           +addToPPUBuffer:
0CF13 99 00 03                      STA ppu_buffer,y
0CF16 C8                            INY
0CF17                           
0CF17                               ;; TILE 2: If metatile above is solid, draw null,
0CF17                               ;; else draw random noise.
0CF17 E6 01                         INC temp+1
0CF19 A5 00                         LDA temp
0CF1B 99 00 03                      STA ppu_buffer,y
0CF1E C8                            INY
0CF1F A5 01                         LDA temp+1
0CF21 99 00 03                      STA ppu_buffer,y
0CF24 C8                            INY
0CF25                               
0CF25 8A                            TXA
0CF26 29 F0                         AND #%11110000
0CF28 F0 0C                         BEQ +drawRandomTile
0CF2A                               
0CF2A BD F0 03                      LDA tile_type-16,x
0CF2D 29 01                         AND #%00000001
0CF2F F0 05                         BEQ +drawRandomTile
0CF31                               
0CF31 A9 00                         LDA #%00
0CF33 4C 3E CF                      JMP +addToPPUBuffer
0CF36                           
0CF36                           +drawRandomTile:
0CF36 20 E2 C4                      JSR sub_GetRandomNumber
0CF39 29 07                         AND #%00000111
0CF3B 18                            CLC
0CF3C 69 68                         ADC #$68
0CF3E                           
0CF3E                           +addToPPUBuffer:
0CF3E 99 00 03                      STA ppu_buffer,y
0CF41 C8                            INY
0CF42                               
0CF42                               ;; TILE 3 - If metatile left is solid, draw null,
0CF42                               ;; else draw random noise.
0CF42 A5 01                         LDA temp+1
0CF44 18                            CLC
0CF45 69 1F                         ADC #$1F
0CF47 85 01                         STA temp+1
0CF49 A5 00                         LDA temp
0CF4B 69 00                         ADC #$00
0CF4D 85 00                         STA temp
0CF4F 99 00 03                      STA ppu_buffer,y
0CF52 C8                            INY
0CF53 A5 01                         LDA temp+1
0CF55 99 00 03                      STA ppu_buffer,y
0CF58 C8                            INY
0CF59                               
0CF59 8A                            TXA
0CF5A 29 0F                         AND #%00001111
0CF5C F0 0C                         BEQ +drawRandomTile
0CF5E                               
0CF5E BD FF 03                      LDA tile_type-1,x
0CF61 29 01                         AND #%00000001
0CF63 F0 05                         BEQ +drawRandomTile
0CF65                               
0CF65 A9 00                         LDA #%00
0CF67 4C 72 CF                      JMP +addToPPUBuffer
0CF6A                           
0CF6A                           +drawRandomTile:
0CF6A 20 E2 C4                      JSR sub_GetRandomNumber
0CF6D 29 07                         AND #%00000111
0CF6F 18                            CLC
0CF70 69 68                         ADC #$68
0CF72                               
0CF72                           +addToPPUBuffer:
0CF72 99 00 03                      STA ppu_buffer,y
0CF75 C8                            INY
0CF76                               
0CF76                               ;; TILE 4 - Always random noise
0CF76 E6 01                         INC temp+1
0CF78 A5 00                         LDA temp
0CF7A 99 00 03                      STA ppu_buffer,y
0CF7D C8                            INY
0CF7E A5 01                         LDA temp+1
0CF80 99 00 03                      STA ppu_buffer,y
0CF83 C8                            INY
0CF84 20 E2 C4                      JSR sub_GetRandomNumber
0CF87 29 07                         AND #%00000111
0CF89 18                            CLC
0CF8A 69 68                         ADC #$68
0CF8C 99 00 03                      STA ppu_buffer,y
0CF8F C8                            INY
0CF90                           
0CF90                               ;; TILE 5 - If tile on the right is solid, skip,
0CF90                               ;; else draw random noise tile
0CF90 E6 01                         INC temp+1
0CF92                               
0CF92 8A                            TXA
0CF93 29 0F                         AND #%00001111
0CF95 C9 0D                         CMP #$0D
0CF97 F0 1F                         BEQ +skipTile
0CF99                               
0CF99 BD 01 04                      LDA tile_type+1,x
0CF9C 29 01                         AND #%00000001
0CF9E D0 18                         BNE +skipTile
0CFA0 A5 00                             LDA temp
0CFA2 99 00 03                          STA ppu_buffer,y
0CFA5 C8                                INY
0CFA6 A5 01                             LDA temp+1
0CFA8 99 00 03                          STA ppu_buffer,y
0CFAB C8                                INY
0CFAC 20 E2 C4                          JSR sub_GetRandomNumber
0CFAF 29 07                             AND #%00000111
0CFB1 18                                CLC
0CFB2 69 68                             ADC #$68
0CFB4 99 00 03                          STA ppu_buffer,y
0CFB7 C8                                INY    
0CFB8                               +skipTile:
0CFB8                           
0CFB8                               ;; TILE 6 - If tile on bottom is solid, skip,
0CFB8                               ;; else draw random noise
0CFB8 A5 01                         LDA temp+1
0CFBA 18                            CLC
0CFBB 69 1F                         ADC #$1F
0CFBD 85 01                         STA temp+1
0CFBF A5 00                         LDA temp
0CFC1 69 00                         ADC #$00
0CFC3 85 00                         STA temp
0CFC5                           
0CFC5 8A                            TXA
0CFC6 29 F0                         AND #%11110000
0CFC8 C9 90                         CMP #$90
0CFCA F0 1F                         BEQ +skipTile
0CFCC                           
0CFCC BD 10 04                      LDA tile_type+16,x
0CFCF 29 01                         AND #%00000001
0CFD1 D0 18                         BNE +skipTile
0CFD3 A5 00                             LDA temp
0CFD5 99 00 03                          STA ppu_buffer,y
0CFD8 C8                                INY
0CFD9 A5 01                             LDA temp+1
0CFDB 99 00 03                          STA ppu_buffer,y
0CFDE C8                                INY
0CFDF 20 E2 C4                          JSR sub_GetRandomNumber
0CFE2 29 07                             AND #%00000111
0CFE4 18                                CLC
0CFE5 69 68                             ADC #$68
0CFE7 99 00 03                          STA ppu_buffer,y
0CFEA C8                                INY    
0CFEB                               +skipTile:
0CFEB                               
0CFEB                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CFEB                               ;; else draw random noise
0CFEB E6 01                         INC temp+1
0CFED                           
0CFED 8A                            TXA
0CFEE 29 F0                         AND #%11110000
0CFF0 C9 90                         CMP #$90
0CFF2 F0 26                         BEQ +skipTile
0CFF4                               
0CFF4 8A                            TXA
0CFF5 29 0F                         AND #%00001111
0CFF7 C9 0D                         CMP #$0D
0CFF9 F0 1F                         BEQ +skipTile
0CFFB                               
0CFFB BD 11 04                      LDA tile_type+17,x
0CFFE 29 01                         AND #%00000001
0D000 D0 18                         BNE +skipTile
0D002 A5 00                             LDA temp
0D004 99 00 03                          STA ppu_buffer,y
0D007 C8                                INY
0D008 A5 01                             LDA temp+1
0D00A 99 00 03                          STA ppu_buffer,y
0D00D C8                                INY
0D00E 20 E2 C4                          JSR sub_GetRandomNumber
0D011 29 07                             AND #%00000111
0D013 18                                CLC
0D014 69 68                             ADC #$68
0D016 99 00 03                          STA ppu_buffer,y
0D019 C8                                INY    
0D01A                               +skipTile:   
0D01A                           
0D01A                           
0D01A                               ;; Update attribute table accordingly through ppu buffer
0D01A 20 59 D0                      JSR sub_SetTileAttributeAddress
0D01D                               
0D01D 8A                            TXA
0D01E 29 10                         AND #%00010000
0D020 F0 05                         BEQ +
0D022 A9 F0                             LDA #%11110000
0D024 4C 29 D0                          JMP ++
0D027                               +
0D027 A9 0F                         LDA #%00001111
0D029                               ++
0D029 85 02                         STA temp+2
0D02B                               
0D02B 8A                            TXA
0D02C 48                            PHA
0D02D 29 01                         AND #%00000001
0D02F F0 07                         BEQ +
0D031 A5 02                             LDA temp+2
0D033 09 CC                             ORA #%11001100
0D035 4C 3C D0                          JMP ++
0D038                               +
0D038 A5 02                         LDA temp+2
0D03A 09 33                         ORA #%00110011
0D03C                               ++
0D03C 85 02                         STA temp+2
0D03E                               
0D03E A5 00                         LDA temp
0D040 38                            SEC
0D041 E9 C0                         SBC #$C0
0D043 AA                            TAX
0D044 BD A0 04                      LDA tile_attributes,x
0D047 25 02                         AND temp+2
0D049 9D A0 04                      STA tile_attributes,x
0D04C 99 00 03                      STA ppu_buffer,y
0D04F C8                            INY
0D050 68                            PLA
0D051 AA                            TAX
0D052                           
0D052                               ;; Tell PPU to update tiles and attributes next frame
0D052 84 3A                         STY ppu_buffer_pointer
0D054 A9 01                         LDA #$01
0D056 85 39                         STA ppu_buffer_update
0D058                            
0D058                               ;; We're done - return
0D058 60                            RTS
0D059                           
0D059                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D059                           
0D059                           ;; Set the correct tile attribute address based on game tile (x) 
0D059                           ;; into the correct ppu buffer slot (y)
0D059                           
0D059                           sub_SetTileAttributeAddress:
0D059 A9 23                         LDA #$23
0D05B 99 00 03                      STA ppu_buffer,y
0D05E C8                            INY
0D05F                               
0D05F 8A                            TXA
0D060 29 F0                         AND #%11110000
0D062 4A                            LSR
0D063 4A                            LSR
0D064 4A                            LSR
0D065 4A                            LSR
0D066 18                            CLC
0D067 69 01                         ADC #$01
0D069 4A                            LSR
0D06A 0A                            ASL
0D06B 0A                            ASL
0D06C 0A                            ASL
0D06D 18                            CLC
0D06E 69 C8                         ADC #$C8
0D070 85 00                         STA temp
0D072 8A                            TXA
0D073 29 0F                         AND #%00001111
0D075 18                            CLC
0D076 69 01                         ADC #$01
0D078 4A                            LSR
0D079 18                            CLC
0D07A 65 00                         ADC temp
0D07C 85 00                         STA temp
0D07E 99 00 03                      STA ppu_buffer,y
0D081 C8                            INY
0D082                                  
0D082 60                            RTS
0D083                           
0D083                           .include "game/subroutine/SubtractXFromBonus.asm"
0D083                           
0D083                           sub_SubtractXFromBonus:
0D083 86 09                         STX temp+9
0D085 A5 2E                         LDA ball_bonus+2
0D087 38                            SEC
0D088 E5 09                         SBC temp+9
0D08A 30 05                         BMI +
0D08C 85 2E                             STA ball_bonus+2
0D08E 4C A6 D0                          JMP +updateBonusOnScreen
0D091                               +
0D091                           
0D091 18                            CLC
0D092 69 0A                         ADC #$0A
0D094 85 2E                         STA ball_bonus+2
0D096 C6 2D                         DEC ball_bonus+1
0D098 10 0C                         BPL +updateBonusOnScreen
0D09A                           
0D09A A9 09                         LDA #$09
0D09C 85 2D                         STA ball_bonus+1
0D09E C6 2C                         DEC ball_bonus
0D0A0 10 04                         BPL +updateBonusOnScreen
0D0A2                           
0D0A2 A9 00                         LDA #$00
0D0A4 85 2C                         STA ball_bonus
0D0A6                           
0D0A6                               +updateBonusOnScreen:
0D0A6 A9 20                         LDA #$20
0D0A8 85 00                         STA temp
0D0AA A9 9C                         LDA #$9C
0D0AC 85 01                         STA temp+1
0D0AE A2 02                         LDX #$02
0D0B0                               
0D0B0                               -updateNextDigit:
0D0B0 B5 2C                             LDA ball_bonus,x
0D0B2 18                                CLC
0D0B3 69 01                             ADC #$01
0D0B5 85 02                             STA temp+2
0D0B7 20 D2 D0                          JSR sub_WriteByteToPPUBuffer
0D0BA C6 01                             DEC temp+1
0D0BC CA                                DEX
0D0BD 10 F1                         BPL -updateNextDigit
0D0BF                           
0D0BF 60                            RTS
0D0C0                           
0D0C0                           .include "game/subroutine/WaitXFrames.asm"
0D0C0                           
0D0C0                           sub_WaitXFrames:
0D0C0                               
0D0C0                               ;; Push X to stack
0D0C0 8A                            TXA
0D0C1 48                            PHA
0D0C2                               
0D0C2                               ;; Wait for NMI
0D0C2 20 04 C5                      JSR sub_WaitForNMI
0D0C5                           
0D0C5                               ;; Clear pointer, except for sprite-zero and ball
0D0C5 A9 08                         LDA #$08
0D0C7 85 3D                         STA sprite_ram_pointer
0D0C9                           
0D0C9                               ;; Load animations (if any)
0D0C9 20 D7 C9                      JSR sub_LoadAnimations
0D0CC                               
0D0CC                               ;; Restore original X
0D0CC 68                            PLA
0D0CD AA                            TAX
0D0CE                               
0D0CE                               ;; Check if all X frames have passed
0D0CE CA                            DEX
0D0CF D0 EF                         BNE sub_WaitXFrames
0D0D1                               
0D0D1                               ;; Return
0D0D1 60                            RTS
0D0D2                           
0D0D2                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D0D2                           
0D0D2                           ;; Write the byte in temp+2 and the ppu address (temp)
0D0D2                           ;; to a buffer, so NMI can update it before the next frame
0D0D2                           
0D0D2                           sub_WriteByteToPPUBuffer:
0D0D2                           
0D0D2                               ;; Prevent updating until full 3-byte buffer is filled,
0D0D2                               ;; so that graphics won't glitch out if NMI happens during
0D0D2                               ;; updating the buffer
0D0D2 A9 00                         LDA #$00
0D0D4 85 39                         STA ppu_buffer_update
0D0D6                           
0D0D6                               ;; Check if buffer full; if so, wait a frame and force update
0D0D6 A4 3A                         LDY ppu_buffer_pointer
0D0D8 C0 60                         CPY #$60
0D0DA D0 05                         BNE +
0D0DC E6 39                             INC ppu_buffer_update
0D0DE 20 0D C5                          JSR sub_WaitForVBlank
0D0E1                               +
0D0E1                           
0D0E1                               ;; Add ppu_addr high byte to buffer
0D0E1 A5 00                         LDA temp
0D0E3 99 00 03                      STA ppu_buffer,y
0D0E6                           
0D0E6                               ;; Add ppu_addr low byte to buffer
0D0E6 C8                            INY
0D0E7 A5 01                         LDA temp+1
0D0E9 99 00 03                      STA ppu_buffer,y
0D0EC                           
0D0EC                               ;; Add ppu_data to buffer
0D0EC C8                            INY
0D0ED A5 02                         LDA temp+2
0D0EF 99 00 03                      STA ppu_buffer,y
0D0F2                           
0D0F2                               ;; Update buffer pointer
0D0F2 C8                            INY
0D0F3 84 3A                         STY ppu_buffer_pointer
0D0F5                           
0D0F5                               ;; Tell NMI to update next round
0D0F5 E6 39                         INC ppu_buffer_update
0D0F7                           
0D0F7                               ;; Return
0D0F7 60                            RTS
0D0F8                           
0D0F8                           
0D0F8                           
0D0F8                           
0D0F8                           ;; LUTs
0D0F8                           .include "game/include/tables.asm"
0D0F8                           
0D0F8                           ;; Initial screen palette
0D0F8                           tbl_IntroScreenPalette:
0D0F8 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D0FC 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D100 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D104 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D108                           
0D108 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D10C 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D110 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D114 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D118                           
0D118                           
0D118                           ;; Intro: mapping logo index to chr tile
0D118                           tbl_IntroScreenLogoChr:
0D118 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D120                           
0D120                           
0D120                           ;; Intro screen data
0D120                           tbl_IntroScreenData:
0D120                           
0D120                               ;; Set PPU address $20AC and draw
0D120 60 AC                         .db #$60, #$AC
0D122 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D12A                           
0D12A                               ;; Set PPU address $20CF and draw
0D12A 60 CF                         .db #$60, #$CF
0D12C 01 02                         .db #_0, #_1
0D12E                               
0D12E                               ;; Set PPU address $2122 and draw
0D12E 61 22                         .db #$61, #$22
0D130 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D137 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D13D 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D145 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D14A                               
0D14A                               ;; Set PPU address $2147 and draw
0D14A 61 47                         .db #$61, #$47
0D14C 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D153 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D157 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D15D 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D163                               
0D163                               ;; Set PPU address $218B and draw
0D163 61 8B                         .db #$61, #$8B
0D165 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D16B 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D170                               
0D170                               ;; Set PPU address $21E6 and draw
0D170 61 E6                         .db #$61, #$E6
0D172 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D17A 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D17E 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D185                               
0D185                               ;; Set PPU address $222D and draw
0D185 62 2D                         .db #$62, #$2D
0D187 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D18D                               
0D18D                               ;; Set PPU address $2281
0D18D 62 81                         .db #$62, #$81
0D18F                               
0D18F                               ;; Draw the Crillion logo
0D18F E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D193 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D197 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D19B E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D19F                               
0D19F D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D1A3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1A7 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1AB D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1AF                               
0D1AF D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D1B3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1B7 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1BB D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1BF                           
0D1BF D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1C3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1C7 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1CB D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1CF                               
0D1CF D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1D3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1D7 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1DB D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1DF                           
0D1DF F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D1E3 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D1E7 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D1EB F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D1EE                           
0D1EE                               ;; End of intro
0D1EE 3F                            .db #$3F
0D1EF                           
0D1EF                           
0D1EF                           ;; Animation frames table
0D1EF                           .include "game/include/table/animation_frames.asm"
0D1EF                           
0D1EF                           ;; CHR tile-id's per slide of explosion
0D1EF                           explosion_slide0:
0D1EF 00 00 00                      .db #$00, #$00, #$00
0D1F2 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D1F5 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D1F8                           
0D1F8                           explosion_slide1:
0D1F8 00 00 00                      .db #$00, #$00, #$00
0D1FB 29 2A 2B                      .db #$29, #$2A, #$2B
0D1FE 39 3A 3B                      .db #$39, #$3A, #$3B
0D201                           
0D201                           explosion_slide2:
0D201 16 00 00                      .db #$16, #$00, #$00
0D204 26 27 28                      .db #$26, #$27, #$28
0D207 36 37 38                      .db #$36, #$37, #$38
0D20A                           
0D20A                           explosion_slide3:
0D20A 00 14 15                      .db #$00, #$14, #$15
0D20D 23 24 25                      .db #$23, #$24, #$25
0D210 33 34 35                      .db #$33, #$34, #$35
0D213                           
0D213                           explosion_slide4:
0D213 10 11 12                      .db #$10, #$11, #$12
0D216 20 21 22                      .db #$20, #$21, #$22
0D219 30 31 32                      .db #$30, #$31, #$32
0D21C                           
0D21C                           ;; High and low bytes of animation slides
0D21C                           explosion_anim_hi:
0D21C D1                            .db >#explosion_slide0
0D21D D1                            .db >#explosion_slide1
0D21E D2                            .db >#explosion_slide2
0D21F D2                            .db >#explosion_slide3
0D220 D2                            .db >#explosion_slide4
0D221 D2                            .db >#explosion_slide4
0D222 D2                            .db >#explosion_slide3
0D223 D2                            .db >#explosion_slide2
0D224 D1                            .db >#explosion_slide1
0D225 D1                            .db >#explosion_slide0
0D226                           
0D226                           explosion_anim_lo:
0D226 EF                            .db <#explosion_slide0
0D227 F8                            .db <#explosion_slide1
0D228 01                            .db <#explosion_slide2
0D229 0A                            .db <#explosion_slide3
0D22A 13                            .db <#explosion_slide4
0D22B 13                            .db <#explosion_slide4
0D22C 0A                            .db <#explosion_slide3
0D22D 01                            .db <#explosion_slide2
0D22E F8                            .db <#explosion_slide1
0D22F EF                            .db <#explosion_slide0
0D230                           
0D230                           
0D230                           
0D230                           ;; Ball palette color table (CBRYGM)
0D230                           tbl_BallColorDark:
0D230 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D236                            
0D236                           tbl_BallColorLight:
0D236 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D23C                           
0D23C                               
0D23C                           ;; Screen mode drawing routine addresses
0D23C                           tbl_LoadScreenHi:
0D23C CE CA CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D23F                           
0D23F                           tbl_LoadScreenLo:
0D23F 44 7C D3                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D242                           
0D242                           
0D242                           ;; Level data
0D242                           .include "game/include/table/level_data.asm"
0D242                           
0D242                           ;; Level layout tables
0D242                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D242                           
0D242                           ifdef TESTING
0D242                           lvl_test:
0D242 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D24A 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D252 FF                            .db #LEVEL_END
0D253                           endif
0D253                           
0D253                           lvl_layout_01:
0D253 61 21                         .db #$61, #%00100001
0D255 52 61                         .db #$52, #%01100001
0D257 43 65                         .db #$43, #%01100101
0D259 83 05                         .db #$83, #%00000101
0D25B 93 15                         .db #$93, #%00010101
0D25D 34 7A                         .db #$34, #%01111010
0D25F 74 7A                         .db #$74, #%01111010
0D261 35 7A                         .db #$35, #%01111010
0D263 75 7A                         .db #$75, #%01111010
0D265 46 65                         .db #$46, #%01100101
0D267 86 25                         .db #$86, #%00100101
0D269 57 61                         .db #$57, #%01100001
0D26B 68 21                         .db #$68, #%00100001
0D26D FF                            .db #LEVEL_END
0D26E                           
0D26E                           lvl_layout_02:
0D26E C0 0A                         .db #$C0, #%00001010
0D270 11 15                         .db #$11, #%00010101
0D272 21 62                         .db #$21, #%01100010
0D274 61 62                         .db #$61, #%01100010
0D276 A1 42                         .db #$A1, #%01000010
0D278 12 67                         .db #$12, #%01100111
0D27A 52 67                         .db #$52, #%01100111
0D27C 92 67                         .db #$92, #%01100111
0D27E C3 0D                         .db #$C3, #%00001101
0D280 14 11                         .db #$14, #%00010001
0D282 24 65                         .db #$24, #%01100101
0D284 64 65                         .db #$64, #%01100101
0D286 A4 45                         .db #$A4, #%01000101
0D288 15 67                         .db #$15, #%01100111
0D28A 55 67                         .db #$55, #%01100111
0D28C 95 67                         .db #$95, #%01100111
0D28E 17 12                         .db #$17, #%00010010
0D290 27 61                         .db #$27, #%01100001
0D292 67 61                         .db #$67, #%01100001
0D294 A7 41                         .db #$A7, #%01000001
0D296 38 7A                         .db #$38, #%01111010
0D298 98 5A                         .db #$98, #%01011010
0D29A 18 27                         .db #$18, #%00100111
0D29C 48 27                         .db #$48, #%00100111
0D29E 78 27                         .db #$78, #%00100111
0D2A0 C8 07                         .db #$C8, #%00000111
0D2A2 FF                            .db #LEVEL_END
0D2A3                           
0D2A3                           lvl_layout_03:
0D2A3 00 7A                         .db #$00, #%01111010
0D2A5 40 7A                         .db #$40, #%01111010
0D2A7 80 7A                         .db #$80, #%01111010
0D2A9 C0 1A                         .db #$C0, #%00011010
0D2AB 10 A1                         .db #$10, #%10100001
0D2AD 13 E1                         .db #$13, #%11100001
0D2AF 17 C1                         .db #$17, #%11000001
0D2B1 30 C1                         .db #$30, #%11000001
0D2B3 34 C1                         .db #$34, #%11000001
0D2B5 38 A1                         .db #$38, #%10100001
0D2B7 50 E1                         .db #$50, #%11100001
0D2B9 55 81                         .db #$55, #%10000001
0D2BB 57 C1                         .db #$57, #%11000001
0D2BD 70 C1                         .db #$70, #%11000001
0D2BF 73 A1                         .db #$73, #%10100001
0D2C1 76 E1                         .db #$76, #%11100001
0D2C3 90 E1                         .db #$90, #%11100001
0D2C5 95 81                         .db #$95, #%10000001
0D2C7 97 C1                         .db #$97, #%11000001
0D2C9 B0 C1                         .db #$B0, #%11000001
0D2CB B4 C1                         .db #$B4, #%11000001
0D2CD B8 A1                         .db #$B8, #%10100001
0D2CF D0 A1                         .db #$D0, #%10100001
0D2D1 D3 E1                         .db #$D3, #%11100001
0D2D3 D7 C1                         .db #$D7, #%11000001
0D2D5 FF                            .db #LEVEL_END
0D2D6                           
0D2D6                           lvl_layout_04:
0D2D6 00 4C                         .db #$00, #%01001100
0D2D8 40 6C                         .db #$40, #%01101100
0D2DA 80 4C                         .db #$80, #%01001100
0D2DC 81 AC                         .db #$81, #%10101100
0D2DE C1 2C                         .db #$C1, #%00101100
0D2E0 02 6C                         .db #$02, #%01101100
0D2E2 42 CC                         .db #$42, #%11001100
0D2E4 62 EC                         .db #$62, #%11101100
0D2E6 A2 CC                         .db #$A2, #%11001100
0D2E8 C3 CC                         .db #$C3, #%11001100
0D2EA 04 4C                         .db #$04, #%01001100
0D2EC 84 2C                         .db #$84, #%00101100
0D2EE 25 AC                         .db #$25, #%10101100
0D2F0 85 AC                         .db #$85, #%10101100
0D2F2 06 AC                         .db #$06, #%10101100
0D2F4 36 CC                         .db #$36, #%11001100
0D2F6 56 CC                         .db #$56, #%11001100
0D2F8 66 EC                         .db #$66, #%11101100
0D2FA 96 6C                         .db #$96, #%01101100
0D2FC C7 AC                         .db #$C7, #%10101100
0D2FE 08 2C                         .db #$08, #%00101100
0D300 78 6C                         .db #$78, #%01101100
0D302 D8 0C                         .db #$D8, #%00001100
0D304 30 A1                         .db #$30, #%10100001
0D306 B0 21                         .db #$B0, #%00100001
0D308 01 41                         .db #$01, #%01000001
0D30A 41 61                         .db #$41, #%01100001
0D30C 91 A1                         .db #$91, #%10100001
0D30E A1 21                         .db #$A1, #%00100001
0D310 52 C1                         .db #$52, #%11000001
0D312 72 E1                         .db #$72, #%11100001
0D314 B2 C1                         .db #$B2, #%11000001
0D316 C2 21                         .db #$C2, #%00100001
0D318 03 41                         .db #$03, #%01000001
0D31A 33 C1                         .db #$33, #%11000001
0D31C 83 21                         .db #$83, #%00100001
0D31E D3 E1                         .db #$D3, #%11100001
0D320 05 21                         .db #$05, #%00100001
0D322 45 E1                         .db #$45, #%11100001
0D324 A5 21                         .db #$A5, #%00100001
0D326 16 A1                         .db #$16, #%10100001
0D328 76 A1                         .db #$76, #%10100001
0D32A 27 A1                         .db #$27, #%10100001
0D32C 57 21                         .db #$57, #%00100001
0D32E 87 41                         .db #$87, #%01000001
0D330 B7 A1                         .db #$B7, #%10100001
0D332 19 21                         .db #$19, #%00100001
0D334 39 41                         .db #$39, #%01000001
0D336 89 41                         .db #$89, #%01000001
0D338 C9 21                         .db #$C9, #%00100001
0D33A D0 1A                         .db #$D0, #%00011010
0D33C 55 1A                         .db #$55, #%00011010
0D33E 95 1A                         .db #$95, #%00011010
0D340 D7 1A                         .db #$D7, #%00011010
0D342 09 1A                         .db #$09, #%00011010
0D344 79 1A                         .db #$79, #%00011010
0D346 FF                            .db #LEVEL_END
0D347                           
0D347                           lvl_layout_05:
0D347 40 0A                         .db #$40, #%00001010
0D349 70 1A                         .db #$70, #%00011010
0D34B B0 42                         .db #$B0, #%01000010
0D34D 41 A7                         .db #$41, #%10100111
0D34F B1 22                         .db #$B1, #%00100010
0D351 D1 15                         .db #$D1, #%00010101
0D353 22 0A                         .db #$22, #%00001010
0D355 52 05                         .db #$52, #%00000101
0D357 B2 42                         .db #$B2, #%01000010
0D359 03 27                         .db #$03, #%00100111
0D35B 33 67                         .db #$33, #%01100111
0D35D 73 67                         .db #$73, #%01100111
0D35F B3 47                         .db #$B3, #%01000111
0D361 05 E5                         .db #$05, #%11100101
0D363 25 A5                         .db #$25, #%10100101
0D365 35 25                         .db #$35, #%00100101
0D367 65 45                         .db #$65, #%01000101
0D369 A5 45                         .db #$A5, #%01000101
0D36B 46 E5                         .db #$46, #%11100101
0D36D 66 E5                         .db #$66, #%11100101
0D36F 86 E5                         .db #$86, #%11100101
0D371 A6 E2                         .db #$A6, #%11100010
0D373 C6 E5                         .db #$C6, #%11100101
0D375 27 25                         .db #$27, #%00100101
0D377 77 05                         .db #$77, #%00000101
0D379 B7 02                         .db #$B7, #%00000010
0D37B 09 05                         .db #$09, #%00000101
0D37D 79 05                         .db #$79, #%00000101
0D37F B9 02                         .db #$B9, #%00000010
0D381 FF                            .db #LEVEL_END
0D382                           
0D382                           lvl_layout_06:
0D382 00 03                         .db #$00, #%00000011
0D384 20 03                         .db #$20, #%00000011
0D386 40 03                         .db #$40, #%00000011
0D388 A0 03                         .db #$A0, #%00000011
0D38A C0 03                         .db #$C0, #%00000011
0D38C 11 03                         .db #$11, #%00000011
0D38E 31 03                         .db #$31, #%00000011
0D390 51 03                         .db #$51, #%00000011
0D392 91 03                         .db #$91, #%00000011
0D394 B1 03                         .db #$B1, #%00000011
0D396 D1 03                         .db #$D1, #%00000011
0D398 02 03                         .db #$02, #%00000011
0D39A 22 03                         .db #$22, #%00000011
0D39C 42 03                         .db #$42, #%00000011
0D39E A2 03                         .db #$A2, #%00000011
0D3A0 C2 03                         .db #$C2, #%00000011
0D3A2 13 03                         .db #$13, #%00000011
0D3A4 33 03                         .db #$33, #%00000011
0D3A6 53 03                         .db #$53, #%00000011
0D3A8 93 03                         .db #$93, #%00000011
0D3AA B3 03                         .db #$B3, #%00000011
0D3AC D3 03                         .db #$D3, #%00000011
0D3AE 04 03                         .db #$04, #%00000011
0D3B0 24 03                         .db #$24, #%00000011
0D3B2 44 03                         .db #$44, #%00000011
0D3B4 A4 03                         .db #$A4, #%00000011
0D3B6 C4 03                         .db #$C4, #%00000011
0D3B8 15 03                         .db #$15, #%00000011
0D3BA 35 03                         .db #$35, #%00000011
0D3BC 55 03                         .db #$55, #%00000011
0D3BE 95 03                         .db #$95, #%00000011
0D3C0 B5 03                         .db #$B5, #%00000011
0D3C2 D5 03                         .db #$D5, #%00000011
0D3C4 06 03                         .db #$06, #%00000011
0D3C6 26 03                         .db #$26, #%00000011
0D3C8 46 03                         .db #$46, #%00000011
0D3CA A6 03                         .db #$A6, #%00000011
0D3CC C6 03                         .db #$C6, #%00000011
0D3CE 17 03                         .db #$17, #%00000011
0D3D0 37 03                         .db #$37, #%00000011
0D3D2 57 03                         .db #$57, #%00000011
0D3D4 97 03                         .db #$97, #%00000011
0D3D6 B7 03                         .db #$B7, #%00000011
0D3D8 D7 03                         .db #$D7, #%00000011
0D3DA 08 03                         .db #$08, #%00000011
0D3DC 28 03                         .db #$28, #%00000011
0D3DE 48 03                         .db #$48, #%00000011
0D3E0 A8 03                         .db #$A8, #%00000011
0D3E2 C8 03                         .db #$C8, #%00000011
0D3E4 19 03                         .db #$19, #%00000011
0D3E6 39 03                         .db #$39, #%00000011
0D3E8 59 03                         .db #$59, #%00000011
0D3EA 99 03                         .db #$99, #%00000011
0D3EC B9 03                         .db #$B9, #%00000011
0D3EE D9 03                         .db #$D9, #%00000011
0D3F0 60 4B                         .db #$60, #%01001011
0D3F2 71 CB                         .db #$71, #%11001011
0D3F4 62 4B                         .db #$62, #%01001011
0D3F6 64 4B                         .db #$64, #%01001011
0D3F8 75 CB                         .db #$75, #%11001011
0D3FA 66 4B                         .db #$66, #%01001011
0D3FC 68 4B                         .db #$68, #%01001011
0D3FE 79 0B                         .db #$79, #%00001011
0D400 70 03                         .db #$70, #%00000011
0D402 72 03                         .db #$72, #%00000011
0D404 74 03                         .db #$74, #%00000011
0D406 76 03                         .db #$76, #%00000011
0D408 78 03                         .db #$78, #%00000011
0D40A FF                            .db #LEVEL_END
0D40B                           
0D40B                           lvl_layout_07:
0D40B 00 11                         .db #$00, #%00010001
0D40D 01 FA                         .db #$01, #%11111010
0D40F 12 BA                         .db #$12, #%10111010
0D411 23 DA                         .db #$23, #%11011010
0D413 34 FA                         .db #$34, #%11111010
0D415 05 DA                         .db #$05, #%11011010
0D417 15 FA                         .db #$15, #%11111010
0D419 45 BA                         .db #$45, #%10111010
0D41B 56 DA                         .db #$56, #%11011010
0D41D 27 BA                         .db #$27, #%10111010
0D41F 67 DA                         .db #$67, #%11011010
0D421 38 3A                         .db #$38, #%00111010
0D423 78 BA                         .db #$78, #%10111010
0D425 09 3A                         .db #$09, #%00111010
0D427 39 3A                         .db #$39, #%00111010
0D429 89 1A                         .db #$89, #%00011010
0D42B B0 01                         .db #$B0, #%00000001
0D42D D0 01                         .db #$D0, #%00000001
0D42F A1 01                         .db #$A1, #%00000001
0D431 C1 11                         .db #$C1, #%00010001
0D433 B2 01                         .db #$B2, #%00000001
0D435 D2 01                         .db #$D2, #%00000001
0D437 A3 01                         .db #$A3, #%00000001
0D439 C3 01                         .db #$C3, #%00000001
0D43B B4 01                         .db #$B4, #%00000001
0D43D D4 01                         .db #$D4, #%00000001
0D43F A5 01                         .db #$A5, #%00000001
0D441 C5 01                         .db #$C5, #%00000001
0D443 B6 01                         .db #$B6, #%00000001
0D445 D6 01                         .db #$D6, #%00000001
0D447 A7 01                         .db #$A7, #%00000001
0D449 C7 01                         .db #$C7, #%00000001
0D44B FF                            .db #LEVEL_END
0D44C                           
0D44C                           lvl_layout_08:
0D44C 40 B5                         .db #$40, #%10110101
0D44E 31 0D                         .db #$31, #%00001101
0D450 61 10                         .db #$61, #%00010000
0D452 42 C7                         .db #$42, #%11000111
0D454 52 67                         .db #$52, #%01100111
0D456 63 C7                         .db #$63, #%11000111
0D458 83 E7                         .db #$83, #%11100111
0D45A 05 07                         .db #$05, #%00000111
0D45C 15 3A                         .db #$15, #%00111010
0D45E 07 63                         .db #$07, #%01100011
0D460 27 13                         .db #$27, #%00010011
0D462 38 A5                         .db #$38, #%10100101
0D464 09 14                         .db #$09, #%00010100
0D466 19 05                         .db #$19, #%00000101
0D468 D0 E0                         .db #$D0, #%11100000
0D46A C2 A0                         .db #$C2, #%10100000
0D46C B3 E0                         .db #$B3, #%11100000
0D46E D5 E0                         .db #$D5, #%11100000
0D470 C6 E0                         .db #$C6, #%11100000
0D472 B0 C4                         .db #$B0, #%11000100
0D474 C0 A4                         .db #$C0, #%10100100
0D476 D1 A4                         .db #$D1, #%10100100
0D478 C4 24                         .db #$C4, #%00100100
0D47A C5 04                         .db #$C5, #%00000100
0D47C B7 44                         .db #$B7, #%01000100
0D47E B8 A4                         .db #$B8, #%10100100
0D480 D9 05                         .db #$D9, #%00000101
0D482 FF                            .db #LEVEL_END
0D483                           
0D483                           lvl_layout_09:
0D483 81 04                         .db #$81, #%00000100
0D485 D1 04                         .db #$D1, #%00000100
0D487 32 C4                         .db #$32, #%11000100
0D489 A2 C4                         .db #$A2, #%11000100
0D48B C2 24                         .db #$C2, #%00100100
0D48D 13 24                         .db #$13, #%00100100
0D48F 53 04                         .db #$53, #%00000100
0D491 C3 27                         .db #$C3, #%00100111
0D493 15 6C                         .db #$15, #%01101100
0D495 55 6C                         .db #$55, #%01101100
0D497 95 6C                         .db #$95, #%01101100
0D499 D5 0C                         .db #$D5, #%00001100
0D49B 27 C7                         .db #$27, #%11000111
0D49D 47 C7                         .db #$47, #%11000111
0D49F 67 C7                         .db #$67, #%11000111
0D4A1 87 C7                         .db #$87, #%11000111
0D4A3 A7 C7                         .db #$A7, #%11000111
0D4A5 C7 C7                         .db #$C7, #%11000111
0D4A7 08 13                         .db #$08, #%00010011
0D4A9 28 15                         .db #$28, #%00010101
0D4AB 48 12                         .db #$48, #%00010010
0D4AD 68 15                         .db #$68, #%00010101
0D4AF 88 11                         .db #$88, #%00010001
0D4B1 A8 10                         .db #$A8, #%00010000
0D4B3 C8 14                         .db #$C8, #%00010100
0D4B5 09 07                         .db #$09, #%00000111
0D4B7 19 03                         .db #$19, #%00000011
0D4B9 39 05                         .db #$39, #%00000101
0D4BB 59 02                         .db #$59, #%00000010
0D4BD 79 05                         .db #$79, #%00000101
0D4BF 99 01                         .db #$99, #%00000001
0D4C1 B9 00                         .db #$B9, #%00000000
0D4C3 D9 04                         .db #$D9, #%00000100
0D4C5 FF                            .db #LEVEL_END
0D4C6                           
0D4C6                           lvl_layout_10:
0D4C6 00 02                         .db #$00, #%00000010
0D4C8 10 C9                         .db #$10, #%11001001
0D4CA 50 C9                         .db #$50, #%11001001
0D4CC 90 C9                         .db #$90, #%11001001
0D4CE D0 C9                         .db #$D0, #%11001001
0D4D0 31 C9                         .db #$31, #%11001001
0D4D2 71 C9                         .db #$71, #%11001001
0D4D4 B1 C9                         .db #$B1, #%11001001
0D4D6 13 C9                         .db #$13, #%11001001
0D4D8 53 C9                         .db #$53, #%11001001
0D4DA 93 C9                         .db #$93, #%11001001
0D4DC D3 C9                         .db #$D3, #%11001001
0D4DE 34 C9                         .db #$34, #%11001001
0D4E0 74 C9                         .db #$74, #%11001001
0D4E2 B4 C9                         .db #$B4, #%11001001
0D4E4 16 C9                         .db #$16, #%11001001
0D4E6 56 C9                         .db #$56, #%11001001
0D4E8 96 C9                         .db #$96, #%11001001
0D4EA D6 C9                         .db #$D6, #%11001001
0D4EC 37 C9                         .db #$37, #%11001001
0D4EE 77 C9                         .db #$77, #%11001001
0D4F0 B7 C9                         .db #$B7, #%11001001
0D4F2 D8 12                         .db #$D8, #%00010010
0D4F4 FF                            .db #LEVEL_END
0D4F5                           
0D4F5                           lvl_layout_11:
0D4F5 00 65                         .db #$00, #%01100101
0D4F7 40 45                         .db #$40, #%01000101
0D4F9 50 A7                         .db #$50, #%10100111
0D4FB 80 05                         .db #$80, #%00000101
0D4FD 90 A7                         .db #$90, #%10100111
0D4FF A0 65                         .db #$A0, #%01100101
0D501 01 43                         .db #$01, #%01000011
0D503 31 23                         .db #$31, #%00100011
0D505 61 A7                         .db #$61, #%10100111
0D507 81 A7                         .db #$81, #%10100111
0D509 A1 63                         .db #$A1, #%01100011
0D50B 02 44                         .db #$02, #%01000100
0D50D 32 44                         .db #$32, #%01000100
0D50F 92 04                         .db #$92, #%00000100
0D511 A2 64                         .db #$A2, #%01100100
0D513 03 40                         .db #$03, #%01000000
0D515 33 40                         .db #$33, #%01000000
0D517 64 81                         .db #$64, #%10000001
0D519 84 82                         .db #$84, #%10000010
0D51B 93 00                         .db #$93, #%00000000
0D51D A3 60                         .db #$A3, #%01100000
0D51F 04 41                         .db #$04, #%01000001
0D521 34 41                         .db #$34, #%01000001
0D523 94 02                         .db #$94, #%00000010
0D525 A4 62                         .db #$A4, #%01100010
0D527 05 47                         .db #$05, #%01000111
0D529 35 67                         .db #$35, #%01100111
0D52B 75 0A                         .db #$75, #%00001010
0D52D 85 47                         .db #$85, #%01000111
0D52F B5 47                         .db #$B5, #%01000111
0D531 06 E7                         .db #$06, #%11100111
0D533 16 5A                         .db #$16, #%01011010
0D535 26 11                         .db #$26, #%00010001
0D537 46 13                         .db #$46, #%00010011
0D539 56 1A                         .db #$56, #%00011010
0D53B 66 14                         .db #$66, #%00010100
0D53D 86 10                         .db #$86, #%00010000
0D53F 96 5A                         .db #$96, #%01011010
0D541 A6 12                         .db #$A6, #%00010010
0D543 C6 15                         .db #$C6, #%00010101
0D545 D6 E7                         .db #$D6, #%11100111
0D547 FF                            .db #LEVEL_END
0D548                           
0D548                           lvl_layout_12:
0D548 00 00                         .db #$00, #%00000000
0D54A 50 C0                         .db #$50, #%11000000
0D54C 80 00                         .db #$80, #%00000000
0D54E 61 00                         .db #$61, #%00000000
0D550 22 C0                         .db #$22, #%11000000
0D552 82 E0                         .db #$82, #%11100000
0D554 C2 E0                         .db #$C2, #%11100000
0D556 A3 20                         .db #$A3, #%00100000
0D558 C3 10                         .db #$C3, #%00010000
0D55A 04 00                         .db #$04, #%00000000
0D55C 54 20                         .db #$54, #%00100000
0D55E 15 0A                         .db #$15, #%00001010
0D560 25 C0                         .db #$25, #%11000000
0D562 55 E0                         .db #$55, #%11100000
0D564 86 20                         .db #$86, #%00100000
0D566 C6 E0                         .db #$C6, #%11100000
0D568 C7 A0                         .db #$C7, #%10100000
0D56A 88 00                         .db #$88, #%00000000
0D56C 59 00                         .db #$59, #%00000000
0D56E 89 20                         .db #$89, #%00100000
0D570 D9 1A                         .db #$D9, #%00011010
0D572 FF                            .db #LEVEL_END
0D573                           
0D573                           lvl_layout_13:
0D573 10 E0                         .db #$10, #%11100000
0D575 20 E0                         .db #$20, #%11100000
0D577 30 E0                         .db #$30, #%11100000
0D579 40 40                         .db #$40, #%01000000
0D57B 80 60                         .db #$80, #%01100000
0D57D C0 E0                         .db #$C0, #%11100000
0D57F D0 E0                         .db #$D0, #%11100000
0D581 41 40                         .db #$41, #%01000000
0D583 71 60                         .db #$71, #%01100000
0D585 52 60                         .db #$52, #%01100000
0D587 A2 20                         .db #$A2, #%00100000
0D589 43 60                         .db #$43, #%01100000
0D58B 83 60                         .db #$83, #%01100000
0D58D 14 74                         .db #$14, #%01110100
0D58F 54 74                         .db #$54, #%01110100
0D591 94 74                         .db #$94, #%01110100
0D593 D4 14                         .db #$D4, #%00010100
0D595 15 0D                         .db #$15, #%00001101
0D597 55 0D                         .db #$55, #%00001101
0D599 95 0D                         .db #$95, #%00001101
0D59B D5 0D                         .db #$D5, #%00001101
0D59D 26 0D                         .db #$26, #%00001101
0D59F 46 0D                         .db #$46, #%00001101
0D5A1 66 0D                         .db #$66, #%00001101
0D5A3 86 0D                         .db #$86, #%00001101
0D5A5 A6 0D                         .db #$A6, #%00001101
0D5A7 C6 0D                         .db #$C6, #%00001101
0D5A9 07 10                         .db #$07, #%00010000
0D5AB 37 0D                         .db #$37, #%00001101
0D5AD 77 0D                         .db #$77, #%00001101
0D5AF B7 0D                         .db #$B7, #%00001101
0D5B1 28 0D                         .db #$28, #%00001101
0D5B3 48 0D                         .db #$48, #%00001101
0D5B5 68 0D                         .db #$68, #%00001101
0D5B7 88 0D                         .db #$88, #%00001101
0D5B9 A8 0D                         .db #$A8, #%00001101
0D5BB C8 0D                         .db #$C8, #%00001101
0D5BD 19 0D                         .db #$19, #%00001101
0D5BF 59 0D                         .db #$59, #%00001101
0D5C1 99 0D                         .db #$99, #%00001101
0D5C3 D9 0D                         .db #$D9, #%00001101
0D5C5 FF                            .db #LEVEL_END
0D5C6                           
0D5C6                           lvl_layout_14:
0D5C6 00 67                         .db #$00, #%01100111
0D5C8 40 67                         .db #$40, #%01100111
0D5CA 80 67                         .db #$80, #%01100111
0D5CC C0 27                         .db #$C0, #%00100111
0D5CE 01 27                         .db #$01, #%00100111
0D5D0 31 C7                         .db #$31, #%11000111
0D5D2 51 C7                         .db #$51, #%11000111
0D5D4 71 C7                         .db #$71, #%11000111
0D5D6 91 C7                         .db #$91, #%11000111
0D5D8 B1 C7                         .db #$B1, #%11000111
0D5DA D1 07                         .db #$D1, #%00000111
0D5DC 02 E7                         .db #$02, #%11100111
0D5DE 06 E7                         .db #$06, #%11100111
0D5E0 13 07                         .db #$13, #%00000111
0D5E2 D3 07                         .db #$D3, #%00000111
0D5E4 15 07                         .db #$15, #%00000111
0D5E6 35 07                         .db #$35, #%00000111
0D5E8 55 07                         .db #$55, #%00000111
0D5EA 75 07                         .db #$75, #%00000111
0D5EC 95 07                         .db #$95, #%00000111
0D5EE B5 07                         .db #$B5, #%00000111
0D5F0 D5 07                         .db #$D5, #%00000111
0D5F2 17 07                         .db #$17, #%00000111
0D5F4 37 C7                         .db #$37, #%11000111
0D5F6 57 C7                         .db #$57, #%11000111
0D5F8 77 C7                         .db #$77, #%11000111
0D5FA 97 C7                         .db #$97, #%11000111
0D5FC B7 C7                         .db #$B7, #%11000111
0D5FE D7 07                         .db #$D7, #%00000111
0D600 19 07                         .db #$19, #%00000111
0D602 D9 07                         .db #$D9, #%00000111
0D604 22 4C                         .db #$22, #%01001100
0D606 62 4C                         .db #$62, #%01001100
0D608 A2 4C                         .db #$A2, #%01001100
0D60A 24 0C                         .db #$24, #%00001100
0D60C 44 0C                         .db #$44, #%00001100
0D60E 64 0C                         .db #$64, #%00001100
0D610 84 0C                         .db #$84, #%00001100
0D612 A4 0C                         .db #$A4, #%00001100
0D614 C4 0C                         .db #$C4, #%00001100
0D616 26 0C                         .db #$26, #%00001100
0D618 46 0C                         .db #$46, #%00001100
0D61A 66 0C                         .db #$66, #%00001100
0D61C 86 0C                         .db #$86, #%00001100
0D61E A6 0C                         .db #$A6, #%00001100
0D620 C6 0C                         .db #$C6, #%00001100
0D622 28 4C                         .db #$28, #%01001100
0D624 68 4C                         .db #$68, #%01001100
0D626 A8 4C                         .db #$A8, #%01001100
0D628 32 04                         .db #$32, #%00000100
0D62A 52 04                         .db #$52, #%00000100
0D62C 72 04                         .db #$72, #%00000100
0D62E 92 04                         .db #$92, #%00000100
0D630 B2 04                         .db #$B2, #%00000100
0D632 38 04                         .db #$38, #%00000100
0D634 58 04                         .db #$58, #%00000100
0D636 78 04                         .db #$78, #%00000100
0D638 98 04                         .db #$98, #%00000100
0D63A B8 04                         .db #$B8, #%00000100
0D63C FF                            .db #LEVEL_END
0D63D                           
0D63D                           lvl_layout_15:
0D63D 00 7A                         .db #$00, #%01111010
0D63F 40 7A                         .db #$40, #%01111010
0D641 80 7A                         .db #$80, #%01111010
0D643 C0 3A                         .db #$C0, #%00111010
0D645 61 64                         .db #$61, #%01100100
0D647 05 E4                         .db #$05, #%11100100
0D649 15 64                         .db #$15, #%01100100
0D64B 55 64                         .db #$55, #%01100100
0D64D 95 64                         .db #$95, #%01100100
0D64F D5 E4                         .db #$D5, #%11100100
0D651 26 04                         .db #$26, #%00000100
0D653 46 44                         .db #$46, #%01000100
0D655 76 64                         .db #$76, #%01100100
0D657 C6 04                         .db #$C6, #%00000100
0D659 17 04                         .db #$17, #%00000100
0D65B 37 64                         .db #$37, #%01100100
0D65D 77 44                         .db #$77, #%01000100
0D65F B7 04                         .db #$B7, #%00000100
0D661 18 64                         .db #$18, #%01100100
0D663 58 64                         .db #$58, #%01100100
0D665 98 64                         .db #$98, #%01100100
0D667 FF                            .db #LEVEL_END
0D668                           
0D668                           lvl_layout_16:
0D668 10 E1                         .db #$10, #%11100001
0D66A 20 9A                         .db #$20, #%10011010
0D66C 30 E1                         .db #$30, #%11100001
0D66E 40 E1                         .db #$40, #%11100001
0D670 50 E1                         .db #$50, #%11100001
0D672 60 C1                         .db #$60, #%11000001
0D674 70 E1                         .db #$70, #%11100001
0D676 80 E1                         .db #$80, #%11100001
0D678 90 E1                         .db #$90, #%11100001
0D67A A0 61                         .db #$A0, #%01100001
0D67C 21 C1                         .db #$21, #%11000001
0D67E A1 1A                         .db #$A1, #%00011010
0D680 B1 41                         .db #$B1, #%01000001
0D682 A2 E1                         .db #$A2, #%11100001
0D684 B2 E1                         .db #$B2, #%11100001
0D686 C2 1A                         .db #$C2, #%00011010
0D688 D2 E1                         .db #$D2, #%11100001
0D68A 63 1A                         .db #$63, #%00011010
0D68C C3 C1                         .db #$C3, #%11000001
0D68E 14 61                         .db #$14, #%01100001
0D690 54 61                         .db #$54, #%01100001
0D692 94 C1                         .db #$94, #%11000001
0D694 15 61                         .db #$15, #%01100001
0D696 55 41                         .db #$55, #%01000001
0D698 85 1A                         .db #$85, #%00011010
0D69A 16 41                         .db #$16, #%01000001
0D69C 46 1A                         .db #$46, #%00011010
0D69E 56 61                         .db #$56, #%01100001
0D6A0 A6 61                         .db #$A6, #%01100001
0D6A2 17 67                         .db #$17, #%01100111
0D6A4 57 67                         .db #$57, #%01100111
0D6A6 97 67                         .db #$97, #%01100111
0D6A8 D7 07                         .db #$D7, #%00000111
0D6AA 28 41                         .db #$28, #%01000001
0D6AC 58 61                         .db #$58, #%01100001
0D6AE A8 41                         .db #$A8, #%01000001
0D6B0 18 11                         .db #$18, #%00010001
0D6B2 38 11                         .db #$38, #%00010001
0D6B4 98 11                         .db #$98, #%00010001
0D6B6 B8 11                         .db #$B8, #%00010001
0D6B8 D8 11                         .db #$D8, #%00010001
0D6BA 59 09                         .db #$59, #%00001001
0D6BC FF                            .db #LEVEL_END
0D6BD                           
0D6BD                           lvl_layout_17:
0D6BD 10 EA                         .db #$10, #%11101010
0D6BF 20 E2                         .db #$20, #%11100010
0D6C1 30 62                         .db #$30, #%01100010
0D6C3 70 02                         .db #$70, #%00000010
0D6C5 80 6A                         .db #$80, #%01101010
0D6C7 90 22                         .db #$90, #%00100010
0D6C9 01 AA                         .db #$01, #%10101010
0D6CB 31 6A                         .db #$31, #%01101010
0D6CD 81 2A                         .db #$81, #%00101010
0D6CF A1 02                         .db #$A1, #%00000010
0D6D1 C1 02                         .db #$C1, #%00000010
0D6D3 D1 0A                         .db #$D1, #%00001010
0D6D5 32 EA                         .db #$32, #%11101010
0D6D7 42 6A                         .db #$42, #%01101010
0D6D9 62 02                         .db #$62, #%00000010
0D6DB 92 6A                         .db #$92, #%01101010
0D6DD D2 E2                         .db #$D2, #%11100010
0D6DF 43 1A                         .db #$43, #%00011010
0D6E1 53 CA                         .db #$53, #%11001010
0D6E3 73 02                         .db #$73, #%00000010
0D6E5 83 4A                         .db #$83, #%01001010
0D6E7 B3 CA                         .db #$B3, #%11001010
0D6E9 C3 EA                         .db #$C3, #%11101010
0D6EB 04 0A                         .db #$04, #%00001010
0D6ED 14 A2                         .db #$14, #%10100010
0D6EF 24 AA                         .db #$24, #%10101010
0D6F1 44 AA                         .db #$44, #%10101010
0D6F3 64 6A                         .db #$64, #%01101010
0D6F5 65 6A                         .db #$65, #%01101010
0D6F7 A5 AA                         .db #$A5, #%10101010
0D6F9 06 EA                         .db #$06, #%11101010
0D6FB 16 62                         .db #$16, #%01100010
0D6FD 66 22                         .db #$66, #%00100010
0D6FF 86 2A                         .db #$86, #%00101010
0D701 17 42                         .db #$17, #%01000010
0D703 47 12                         .db #$47, #%00010010
0D705 57 6A                         .db #$57, #%01101010
0D707 97 4A                         .db #$97, #%01001010
0D709 A7 02                         .db #$A7, #%00000010
0D70B 18 02                         .db #$18, #%00000010
0D70D 28 0A                         .db #$28, #%00001010
0D70F 38 22                         .db #$38, #%00100010
0D711 68 2A                         .db #$68, #%00101010
0D713 88 62                         .db #$88, #%01100010
0D715 C8 0A                         .db #$C8, #%00001010
0D717 D8 02                         .db #$D8, #%00000010
0D719 19 2A                         .db #$19, #%00101010
0D71B 39 2A                         .db #$39, #%00101010
0D71D 69 42                         .db #$69, #%01000010
0D71F 99 2A                         .db #$99, #%00101010
0D721 B9 42                         .db #$B9, #%01000010
0D723 FF                            .db #LEVEL_END
0D724                           
0D724                           lvl_layout_18:
0D724 00 12                         .db #$00, #%00010010
0D726 40 1A                         .db #$40, #%00011010
0D728 50 11                         .db #$50, #%00010001
0D72A 70 1A                         .db #$70, #%00011010
0D72C 80 10                         .db #$80, #%00010000
0D72E D0 13                         .db #$D0, #%00010011
0D730 01 1A                         .db #$01, #%00011010
0D732 22 15                         .db #$22, #%00010101
0D734 A2 1A                         .db #$A2, #%00011010
0D736 B2 14                         .db #$B2, #%00010100
0D738 03 67                         .db #$03, #%01100111
0D73A 43 67                         .db #$43, #%01100111
0D73C 83 67                         .db #$83, #%01100111
0D73E 24 09                         .db #$24, #%00001001
0D740 74 0D                         .db #$74, #%00001101
0D742 C4 0A                         .db #$C4, #%00001010
0D744 05 A7                         .db #$05, #%10100111
0D746 45 27                         .db #$45, #%00100111
0D748 95 27                         .db #$95, #%00100111
0D74A 16 C7                         .db #$16, #%11000111
0D74C 36 67                         .db #$36, #%01100111
0D74E 86 67                         .db #$86, #%01100111
0D750 D6 07                         .db #$D6, #%00000111
0D752 07 A3                         .db #$07, #%10100011
0D754 27 23                         .db #$27, #%00100011
0D756 47 C7                         .db #$47, #%11000111
0D758 57 A0                         .db #$57, #%10100000
0D75A 67 A7                         .db #$67, #%10100111
0D75C 77 20                         .db #$77, #%00100000
0D75E 97 C7                         .db #$97, #%11000111
0D760 A7 A4                         .db #$A7, #%10100100
0D762 B7 A7                         .db #$B7, #%10100111
0D764 C7 24                         .db #$C7, #%00100100
0D766 28 0B                         .db #$28, #%00001011
0D768 38 A3                         .db #$38, #%10100011
0D76A 78 08                         .db #$78, #%00001000
0D76C 88 A0                         .db #$88, #%10100000
0D76E C8 0C                         .db #$C8, #%00001100
0D770 D8 A4                         .db #$D8, #%10100100
0D772 09 43                         .db #$09, #%01000011
0D774 59 40                         .db #$59, #%01000000
0D776 A9 44                         .db #$A9, #%01000100
0D778 FF                            .db #LEVEL_END
0D779                           
0D779                           lvl_layout_19:
0D779 11 A8                         .db #$11, #%10101000
0D77B 21 68                         .db #$21, #%01101000
0D77D 81 28                         .db #$81, #%00101000
0D77F B1 48                         .db #$B1, #%01001000
0D781 22 48                         .db #$22, #%01001000
0D783 62 68                         .db #$62, #%01101000
0D785 B2 28                         .db #$B2, #%00101000
0D787 23 28                         .db #$23, #%00101000
0D789 83 28                         .db #$83, #%00101000
0D78B B3 28                         .db #$B3, #%00101000
0D78D 04 E8                         .db #$04, #%11101000
0D78F 24 08                         .db #$24, #%00001000
0D791 44 08                         .db #$44, #%00001000
0D793 64 E8                         .db #$64, #%11101000
0D795 84 E8                         .db #$84, #%11101000
0D797 C4 A8                         .db #$C4, #%10101000
0D799 D4 E8                         .db #$D4, #%11101000
0D79B 15 48                         .db #$15, #%01001000
0D79D 55 C8                         .db #$55, #%11001000
0D79F 75 C8                         .db #$75, #%11001000
0D7A1 A5 08                         .db #$A5, #%00001000
0D7A3 36 08                         .db #$36, #%00001000
0D7A5 B6 08                         .db #$B6, #%00001000
0D7A7 27 48                         .db #$27, #%01001000
0D7A9 97 28                         .db #$97, #%00101000
0D7AB C7 08                         .db #$C7, #%00001000
0D7AD 09 61                         .db #$09, #%01100001
0D7AF 19 11                         .db #$19, #%00010001
0D7B1 49 61                         .db #$49, #%01100001
0D7B3 89 31                         .db #$89, #%00110001
0D7B5 A9 61                         .db #$A9, #%01100001
0D7B7 FF                            .db #LEVEL_END
0D7B8                           
0D7B8                           lvl_layout_20:
0D7B8 00 60                         .db #$00, #%01100000
0D7BA 10 1A                         .db #$10, #%00011010
0D7BC 40 A7                         .db #$40, #%10100111
0D7BE 50 20                         .db #$50, #%00100000
0D7C0 70 1A                         .db #$70, #%00011010
0D7C2 80 40                         .db #$80, #%01000000
0D7C4 B0 1A                         .db #$B0, #%00011010
0D7C6 C0 20                         .db #$C0, #%00100000
0D7C8 01 40                         .db #$01, #%01000000
0D7CA 31 1A                         .db #$31, #%00011010
0D7CC A1 40                         .db #$A1, #%01000000
0D7CE D1 1A                         .db #$D1, #%00011010
0D7D0 43 67                         .db #$43, #%01100111
0D7D2 83 47                         .db #$83, #%01000111
0D7D4 44 A7                         .db #$44, #%10100111
0D7D6 54 25                         .db #$54, #%00100101
0D7D8 94 08                         .db #$94, #%00001000
0D7DA A4 A7                         .db #$A4, #%10100111
0D7DC 55 05                         .db #$55, #%00000101
0D7DE 65 08                         .db #$65, #%00001000
0D7E0 06 27                         .db #$06, #%00100111
0D7E2 36 67                         .db #$36, #%01100111
0D7E4 76 28                         .db #$76, #%00101000
0D7E6 A6 27                         .db #$A6, #%00100111
0D7E8 D6 07                         .db #$D6, #%00000111
0D7EA A7 A7                         .db #$A7, #%10100111
0D7EC 08 60                         .db #$08, #%01100000
0D7EE 09 60                         .db #$09, #%01100000
0D7F0 18 A7                         .db #$18, #%10100111
0D7F2 48 A7                         .db #$48, #%10100111
0D7F4 58 47                         .db #$58, #%01000111
0D7F6 88 27                         .db #$88, #%00100111
0D7F8 B8 20                         .db #$B8, #%00100000
0D7FA D8 1A                         .db #$D8, #%00011010
0D7FC 59 15                         .db #$59, #%00010101
0D7FE 69 60                         .db #$69, #%01100000
0D800 A9 60                         .db #$A9, #%01100000
0D802 FF                            .db #LEVEL_END
0D803                           
0D803                           lvl_layout_21:
0D803 00 13                         .db #$00, #%00010011
0D805 10 11                         .db #$10, #%00010001
0D807 20 67                         .db #$20, #%01100111
0D809 60 67                         .db #$60, #%01100111
0D80B A0 47                         .db #$A0, #%01000111
0D80D D0 15                         .db #$D0, #%00010101
0D80F 32 63                         .db #$32, #%01100011
0D811 72 05                         .db #$72, #%00000101
0D813 82 43                         .db #$82, #%01000011
0D815 B2 43                         .db #$B2, #%01000011
0D817 33 03                         .db #$33, #%00000011
0D819 43 2A                         .db #$43, #%00101010
0D81B 63 7A                         .db #$63, #%01111010
0D81D 73 2A                         .db #$73, #%00101010
0D81F A3 7A                         .db #$A3, #%01111010
0D821 34 63                         .db #$34, #%01100011
0D823 74 63                         .db #$74, #%01100011
0D825 B4 43                         .db #$B4, #%01000011
0D827 06 63                         .db #$06, #%01100011
0D829 46 63                         .db #$46, #%01100011
0D82B 86 63                         .db #$86, #%01100011
0D82D C6 C3                         .db #$C6, #%11000011
0D82F 07 7A                         .db #$07, #%01111010
0D831 47 7A                         .db #$47, #%01111010
0D833 67 0A                         .db #$67, #%00001010
0D835 87 7A                         .db #$87, #%01111010
0D837 08 13                         .db #$08, #%00010011
0D839 18 43                         .db #$18, #%01000011
0D83B 48 63                         .db #$48, #%01100011
0D83D 88 63                         .db #$88, #%01100011
0D83F FF                            .db #LEVEL_END
0D840                           
0D840                           lvl_layout_22:
0D840 00 7A                         .db #$00, #%01111010
0D842 40 7A                         .db #$40, #%01111010
0D844 80 7A                         .db #$80, #%01111010
0D846 C0 3A                         .db #$C0, #%00111010
0D848 13 67                         .db #$13, #%01100111
0D84A 83 A7                         .db #$83, #%10100111
0D84C B3 07                         .db #$B3, #%00000111
0D84E 14 07                         .db #$14, #%00000111
0D850 44 07                         .db #$44, #%00000111
0D852 A4 07                         .db #$A4, #%00000111
0D854 15 A5                         .db #$15, #%10100101
0D856 45 A5                         .db #$45, #%10100101
0D858 85 25                         .db #$85, #%00100101
0D85A 86 05                         .db #$86, #%00000101
0D85C A6 05                         .db #$A6, #%00000101
0D85E 17 11                         .db #$17, #%00010001
0D860 47 A1                         .db #$47, #%10100001
0D862 87 A1                         .db #$87, #%10100001
0D864 B7 A1                         .db #$B7, #%10100001
0D866 18 41                         .db #$18, #%01000001
0D868 68 01                         .db #$68, #%00000001
0D86A D8 01                         .db #$D8, #%00000001
0D86C FF                            .db #LEVEL_END
0D86D                           
0D86D                           lvl_layout_23:
0D86D 00 71                         .db #$00, #%01110001
0D86F 40 11                         .db #$40, #%00010001
0D871 50 43                         .db #$50, #%01000011
0D873 80 D1                         .db #$80, #%11010001
0D875 90 E3                         .db #$90, #%11100011
0D877 A0 63                         .db #$A0, #%01100011
0D879 01 63                         .db #$01, #%01100011
0D87B 41 63                         .db #$41, #%01100011
0D87D A1 63                         .db #$A1, #%01100011
0D87F 02 63                         .db #$02, #%01100011
0D881 42 63                         .db #$42, #%01100011
0D883 62 11                         .db #$62, #%00010001
0D885 A2 67                         .db #$A2, #%01100111
0D887 04 63                         .db #$04, #%01100011
0D889 44 23                         .db #$44, #%00100011
0D88B 64 D1                         .db #$64, #%11010001
0D88D 74 E3                         .db #$74, #%11100011
0D88F 84 F1                         .db #$84, #%11110001
0D891 94 E3                         .db #$94, #%11100011
0D893 A4 C7                         .db #$A4, #%11000111
0D895 B4 23                         .db #$B4, #%00100011
0D897 05 63                         .db #$05, #%01100011
0D899 45 23                         .db #$45, #%00100011
0D89B 06 71                         .db #$06, #%01110001
0D89D 46 11                         .db #$46, #%00010001
0D89F 56 E3                         .db #$56, #%11100011
0D8A1 D6 07                         .db #$D6, #%00000111
0D8A3 17 D1                         .db #$17, #%11010001
0D8A5 27 43                         .db #$27, #%01000011
0D8A7 67 D1                         .db #$67, #%11010001
0D8A9 A7 C7                         .db #$A7, #%11000111
0D8AB C7 A7                         .db #$C7, #%10100111
0D8AD D7 B3                         .db #$D7, #%10110011
0D8AF 28 43                         .db #$28, #%01000011
0D8B1 78 43                         .db #$78, #%01000011
0D8B3 29 43                         .db #$29, #%01000011
0D8B5 79 43                         .db #$79, #%01000011
0D8B7 FF                           .db #LEVEL_END
0D8B8                           
0D8B8                           lvl_layout_24:
0D8B8 02 67                         .db #$02, #%01100111
0D8BA 42 67                         .db #$42, #%01100111
0D8BC 82 67                         .db #$82, #%01100111
0D8BE 05 67                         .db #$05, #%01100111
0D8C0 45 67                         .db #$45, #%01100111
0D8C2 85 67                         .db #$85, #%01100111
0D8C4 08 67                         .db #$08, #%01100111
0D8C6 48 67                         .db #$48, #%01100111
0D8C8 88 67                         .db #$88, #%01100111
0D8CA 30 E7                         .db #$30, #%11100111
0D8CC 70 E7                         .db #$70, #%11100111
0D8CE B0 E7                         .db #$B0, #%11100111
0D8D0 34 E7                         .db #$34, #%11100111
0D8D2 74 E7                         .db #$74, #%11100111
0D8D4 B4 E7                         .db #$B4, #%11100111
0D8D6 20 13                         .db #$20, #%00010011
0D8D8 40 10                         .db #$40, #%00010000
0D8DA 80 02                         .db #$80, #%00000010
0D8DC 41 05                         .db #$41, #%00000101
0D8DE B1 09                         .db #$B1, #%00001001
0D8E0 02 09                         .db #$02, #%00001001
0D8E2 52 0C                         .db #$52, #%00001100
0D8E4 13 11                         .db #$13, #%00010001
0D8E6 33 04                         .db #$33, #%00000100
0D8E8 74 0C                         .db #$74, #%00001100
0D8EA B4 08                         .db #$B4, #%00001000
0D8EC 15 09                         .db #$15, #%00001001
0D8EE 55 0C                         .db #$55, #%00001100
0D8F0 95 0C                         .db #$95, #%00001100
0D8F2 47 03                         .db #$47, #%00000011
0D8F4 A7 12                         .db #$A7, #%00010010
0D8F6 18 15                         .db #$18, #%00010101
0D8F8 09 05                         .db #$09, #%00000101
0D8FA 19 03                         .db #$19, #%00000011
0D8FC FF                            .db #LEVEL_END
0D8FD                           
0D8FD                           lvl_layout_25:
0D8FD 00 12                         .db #$00, #%00010010
0D8FF 10 63                         .db #$10, #%01100011
0D901 60 63                         .db #$60, #%01100011
0D903 A0 07                         .db #$A0, #%00000111
0D905 01 11                         .db #$01, #%00010001
0D907 A1 02                         .db #$A1, #%00000010
0D909 02 67                         .db #$02, #%01100111
0D90B 42 07                         .db #$42, #%00000111
0D90D 62 67                         .db #$62, #%01100111
0D90F A2 C7                         .db #$A2, #%11000111
0D911 03 61                         .db #$03, #%01100001
0D913 43 01                         .db #$43, #%00000001
0D915 63 61                         .db #$63, #%01100001
0D917 A6 E7                         .db #$A6, #%11100111
0D919 B6 47                         .db #$B6, #%01000111
0D91B C6 01                         .db #$C6, #%00000001
0D91D B7 42                         .db #$B7, #%01000010
0D91F B8 42                         .db #$B8, #%01000010
0D921 C8 0A                         .db #$C8, #%00001010
0D923 09 7A                         .db #$09, #%01111010
0D925 49 7A                         .db #$49, #%01111010
0D927 89 3A                         .db #$89, #%00111010
0D929 B9 42                         .db #$B9, #%01000010
0D92B FF                            .db #LEVEL_END
0D92C                           
0D92C                           ;; Level layout address pointers
0D92C                           tbl_lvl_layout_hi:
0D92C                           ifdef TESTING
0D92C D2                            .db >#lvl_test
0D92D                           endif
0D92D D2 D2 D2 D2 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D932 D3 D4 D4 D4 D4                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D937 D4 D5 D5 D5 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D93C D6 D6 D7 D7 D7                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D941 D8 D8 D8 D8 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D946                           
0D946                           tbl_lvl_layout_lo:
0D946                           ifdef TESTING
0D946 42                            .db <#lvl_test
0D947                           endif
0D947 53 6E A3 D6 47                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D94C 82 0B 4C 83 C6                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D951 F5 48 73 C6 3D                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D956 68 BD 24 79 B8                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D95B 03 40 6D B8 FD                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D960                           
0D960                           ;; Ball start position (#$YX)
0D960                           tbl_lvl_ball_startpos:
0D960                           ifdef TESTING
0D960 29                            .db #$29
0D961                           endif
0D961 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D966 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D96B 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D970 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D975 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D97A                           
0D97A                               
0D97A                           ;; Ball start direction, color and tile score
0D97A                           ;; #% ccc v tttt
0D97A                           ;;    ||| | ++++-- tile score
0D97A                           ;;    ||| +------- vertical direction, up (0) or down
0D97A                           ;;    +++--------- color (CBRYGM)
0D97A                           tbl_lvl_ball_init:
0D97A                           ifdef TESTING
0D97A 20                            .db #%00100000
0D97B                           endif
0D97B 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D980 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D985 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D98A 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D98F 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D994                           
0D994                           
0D994                           
0D994                           ;; Helper table to multiply values by 16
0D994                           tbl_Times16:
0D994 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D99C 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D9A4                               
0D9A4                           
0D9A4                           ;; Helper table to multiply values by 64
0D9A4                           tbl_Times64:
0D9A4 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D9A8                           
0D9A8                           
0D9A8                           ;; Metatile ID to CHR data mapper
0D9A8                           tbl_GametileTopLeft:
0D9A8 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D9B2                           
0D9B2                           tbl_GametileTopRight:
0D9B2 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D9BC                           
0D9BC                           tbl_GametileBottomLeft:
0D9BC 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D9C6                           
0D9C6                           tbl_GametileBottomRight:
0D9C6 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D9D0                           
0D9D0                           ;; Metatile ID to RAM byte data mapper
0D9D0                           tbl_GameTileRamByte:
0D9D0 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D9D5                           
0D9D5                           ;; HUD text data
0D9D5                           tbl_HudText:
0D9D5 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D9DD 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D9E4 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D9EC 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D9F1                           
0D9F1                           ;; Move block top left tile based on color
0D9F1                           tbl_MoveBlockTopLeftTile:
0D9F1 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D9F8                           
0D9F8                           ;; Game over data
0D9F8                           tbl_GameOver:
0D9F8 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D9FC 00 00                         .db #_SPACE, #_SPACE
0D9FE 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DA02                           
0DA02                           ;; Background fade pallette table
0DA02                           tbl_BackgroundFade:
0DA02 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DA0C                           
0DA0C                           ;; Sound effects
0DA0C                           .include "game/include/table/sfx.asm"
0DA0C                           ;;
0DA0C                           ;; Explosion sound effects
0DA0C                           ;;
0DA0C                           ;;   #% ffff vvvv
0DA0C                           ;;      |||| ++++---- volume (0=low, 15=high)
0DA0C                           ;;      ++++-------- frequency (0=low, 15=high)
0DA0C                           ;;
0DA0C                           ;; #$FF = end of sfx
0DA0C                           ;;
0DA0C                           
0DA0C                           tbl_ExplosionSfx:
0DA0C 00                            .db #$00 ; buffer byte
0DA0D 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DA15 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DA1D 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DA25 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DA2D 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DA35 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DA3A                           
0DA3A                           tbl_ThudSfx:
0DA3A 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA3B 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DA43 E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DA48                           
0DA48                           tbl_BounceSfx:
0DA48 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA49 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DA4D                           
0DA4D 00                            .db #$00
0DA4E                           
0DA4E                           tbl_Sfx_hi:
0DA4E DA DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DA51                           
0DA51                           tbl_Sfx_lo:
0DA51 0C 3A 48                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DA54                           
0DA54                           
0DA54                           ;; Volume envelope for move sound effect (reversed)
0DA54                           tbl_MoveSfxVolume:
0DA54 00 00 02 03 0B 0C 0B 0B       .db #$00, #$00, #$02, #$03, #$0B, #$0C, #$0B, #$0B
0DA5C 09 09 08 07 06 06 05 05       .db #$09, #$09, #$08, #$07, #$06, #$06, #$05, #$05
0DA64 04 04 03 03 03 03 02 01       .db #$04, #$04, #$03, #$03, #$03, #$03, #$02, #$01
0DA6C                           
0DA6C                           ;; Lookup table to convert bonus ticks to score
0DA6C                           tbl_BonusToScore:
0DA6C 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DA76                           
0DA76                           
0DA76                           ;; NMI handler
0DA76                           NMI:
0DA76                               .include "interrupt/nmi.asm"
0DA76                           
0DA76                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DA76                           ;;
0DA76                           ;; include/nmi.asm
0DA76                           ;;
0DA76                           ;; Non-maskable interrupt script. This script is being executed
0DA76                           ;; when vBlank hits.
0DA76                           ;;
0DA76                           ;;
0DA76                           
0DA76                               ;; Preserve accumulator through stack
0DA76 48                            PHA
0DA77                           
0DA77                               ;; Should NMI be skipped?
0DA77 A5 13                         LDA skip_nmi
0DA79 F0 03                         BEQ +
0DA7B 4C 3C DC                          JMP +skip_nmi
0DA7E                               +
0DA7E                           
0DA7E                               ;; When in NMI, skip additional NMI requests
0DA7E A9 01                         LDA #$01
0DA80 85 13                         STA skip_nmi
0DA82                           
0DA82                               ;; Preserve X, Y, and PC through stack
0DA82 8A                            TXA
0DA83 48                            PHA
0DA84 98                            TYA
0DA85 48                            PHA
0DA86 08                            PHP
0DA87                               
0DA87                               ;; Check forced NMI skip
0DA87 A5 14                         LDA force_skip_nmi
0DA89 F0 03                         BEQ +
0DA8B 4C 2B DC                          JMP +force_skip_nmi
0DA8E                               +
0DA8E                           
0DA8E                               ;; Update PPU mask
0DA8E                               ;LDA #$00
0DA8E                               ;STA PPU_CTRL
0DA8E A5 12                         LDA soft_ppu_mask
0DA90 8D 01 20                      STA PPU_MASK
0DA93                               
0DA93                               
0DA93                               ;; Additional PPU updates go here
0DA93                               .include "game/interrupt/nmi.asm"
0DA93                           
0DA93                               ;; Check if ppu_buffer needs updating
0DA93 A5 39                         LDA ppu_buffer_update
0DA95 D0 03                         BNE +
0DA97 4C D9 DA                          JMP +no_ppu_buffer_update
0DA9A                               +
0DA9A                           
0DA9A                               ;; Reset ppu control register and mask
0DA9A A2 00                         LDX #$00
0DA9C 8E 00 20                      STX PPU_CTRL
0DA9F 8E 01 20                      STX PPU_MASK
0DAA2                           
0DAA2                               ;; Set up loop
0DAA2                               -
0DAA2                                   ;; Reset hi/lo latch
0DAA2 2C 02 20                          BIT PPU_STATUS
0DAA5                           
0DAA5                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DAA5 BD 00 03                          LDA ppu_buffer,x
0DAA8 8D 06 20                          STA PPU_ADDR
0DAAB E8                                INX
0DAAC BD 00 03                          LDA ppu_buffer,x
0DAAF 8D 06 20                          STA PPU_ADDR
0DAB2                           
0DAB2                                   ;; Write ppu_buffer data to PPU_ADDR
0DAB2 E8                                INX
0DAB3 BD 00 03                          LDA ppu_buffer,x
0DAB6 8D 07 20                          STA PPU_DATA
0DAB9                           
0DAB9                                   ;; Check if updating is done (eg. X is at pointer)
0DAB9 E8                                INX
0DABA E4 3A                             CPX ppu_buffer_pointer
0DABC F0 03                             BEQ +
0DABE 4C A2 DA                      JMP -
0DAC1                           +
0DAC1                           
0DAC1                               ;; Reset ppu buffer update and pointer
0DAC1 A9 00                         LDA #$00
0DAC3 85 39                         STA ppu_buffer_update
0DAC5 85 3A                         STA ppu_buffer_pointer
0DAC7                               
0DAC7                               ;; Reset scrolling position
0DAC7 8D 05 20                      STA PPU_SCROLL
0DACA 8D 05 20                      STA PPU_SCROLL
0DACD                           
0DACD                               ;; Restore ppu control register and mask
0DACD A9 90                         LDA #%10010000
0DACF 8D 00 20                      STA PPU_CTRL
0DAD2 A5 12                         LDA soft_ppu_mask
0DAD4 8D 01 20                      STA PPU_MASK
0DAD7 A9 00                         LDA #$00
0DAD9                           
0DAD9                           ;; Continue other NMI stuff
0DAD9                           +no_ppu_buffer_update:
0DAD9                           
0DAD9                               ;; Reset sprite RAM, draw sprites
0DAD9 8D 03 20                      STA OAM_ADDR
0DADC A9 02                         LDA #$02
0DADE 8D 14 40                      STA OAM_DMA
0DAE1                           
0DAE1                               ;; Decrease explosion and move block timers
0DAE1 A0 04                         LDY #MAX_ANIMATIONS
0DAE3 A2 00                         LDX #$00
0DAE5                               -
0DAE5 BD 60 03                          LDA explosion_timer,x
0DAE8 F0 03                             BEQ +
0DAEA DE 60 03                              DEC explosion_timer,x
0DAED                                   +
0DAED                           
0DAED BD 80 03                          LDA move_block_timer,x
0DAF0 F0 03                             BEQ +
0DAF2 DE 80 03                              DEC move_block_timer,x
0DAF5                                   +
0DAF5                                   
0DAF5 E8                                INX
0DAF6 88                                DEY
0DAF7 F0 03                             BEQ +done
0DAF9 4C E5 DA                      JMP -
0DAFC                           +done:
0DAFC                           
0DAFC                               ;; Decrease nudge timer
0DAFC A5 3E                         LDA nudge_timer
0DAFE F0 02                         BEQ +
0DB00 C6 3E                             DEC nudge_timer
0DB02                               +
0DB02                           
0DB02                               ;; Decrease bonus timer
0DB02 A5 3F                         LDA bonus_timer
0DB04 F0 02                         BEQ +
0DB06 C6 3F                             DEC bonus_timer
0DB08                               +
0DB08                           
0DB08                               ;; Decrease kill timer
0DB08 A5 40                         LDA kill_timer
0DB0A F0 02                         BEQ +
0DB0C C6 40                             DEC kill_timer
0DB0E                               +
0DB0E                               
0DB0E                               ;; Decrease and handle unfreeze timer
0DB0E A5 41                         LDA unfreeze_timer
0DB10 F0 0A                         BEQ +
0DB12 C6 41                             DEC unfreeze_timer
0DB14 D0 06                             BNE +
0DB16                                   
0DB16 A5 37                             LDA ball_flags
0DB18 29 FB                             AND #UNFREEZE_BALL
0DB1A 85 37                             STA ball_flags
0DB1C                               +
0DB1C                           
0DB1C                               ;; Play background noise
0DB1C A5 38                         LDA screen_mode
0DB1E 29 01                         AND #IS_GAME_SCREEN
0DB20 F0 0C                         BEQ +
0DB22                                   .include "game/include/main/background_sound.asm"
0DB22                           
0DB22                               ;; If noise is muted, no noise should play
0DB22 A5 4B                         LDA noise_muted
0DB24 F0 08                         BEQ +
0DB26 A9 30                             LDA #$30
0DB28 8D 0C 40                          STA NOISE_VOLUME
0DB2B 4C 93 DB                          JMP +endNoise
0DB2E                               +
0DB2E                               
0DB2E                               ;; At random times, set max_noise period to $03-$0A
0DB2E A5 45                         LDA max_noise
0DB30 D0 1D                         BNE +
0DB32 20 E2 C4                          JSR sub_GetRandomNumber
0DB35 29 EF                             AND #%11101111
0DB37 D0 16                             BNE +
0DB39                                   
0DB39 A5 15                             LDA frame_counter
0DB3B 85 16                             STA random_seed
0DB3D 20 E2 C4                          JSR sub_GetRandomNumber
0DB40 29 07                             AND #$07
0DB42 69 03                             ADC #$03
0DB44 85 45                             STA max_noise
0DB46 A9 01                             LDA #$01
0DB48 85 46                             STA sweep_noise
0DB4A A9 34                             LDA #$34
0DB4C 8D 0C 40                          STA NOISE_VOLUME
0DB4F                               +
0DB4F                           
0DB4F                               ;; if sweep noise = $00: constant noise
0DB4F                               ;; else if sweep noise > $80: decrease pitch
0DB4F                               ;; else: increase pitch
0DB4F A5 46                         LDA sweep_noise
0DB51 F0 18                         BEQ +constantNoise
0DB53 30 2A                         BMI +decreaseNoise
0DB55                           
0DB55                           ;; Sweep noise up to max noise pitch
0DB55                           +increaseNoise:
0DB55 C6 47                         DEC current_noise
0DB57 A5 47                         LDA current_noise
0DB59 8D 0E 40                      STA NOISE_PERIOD
0DB5C C5 45                         CMP max_noise
0DB5E D0 08                         BNE +
0DB60 A9 00                             LDA #$00
0DB62 85 46                             STA sweep_noise
0DB64 A9 0A                             LDA #$0A
0DB66 85 48                             STA noise_timer
0DB68                               +
0DB68 4C 93 DB                      JMP +endNoise
0DB6B                           
0DB6B                           ;; Keep noise at constant pitch
0DB6B                           +constantNoise:
0DB6B A5 45                         LDA max_noise
0DB6D F0 24                         BEQ +endNoise
0DB6F                           
0DB6F A5 48                         LDA noise_timer
0DB71 D0 07                         BNE +
0DB73 A9 80                             LDA #$80
0DB75 85 46                             STA sweep_noise
0DB77 4C 93 DB                          JMP +endNoise
0DB7A                               +
0DB7A C6 48                         DEC noise_timer
0DB7C 4C 93 DB                      JMP +endNoise
0DB7F                           
0DB7F                           ;; Sweep noise down to initial pitch
0DB7F                           +decreaseNoise:
0DB7F E6 47                         INC current_noise
0DB81 A5 47                         LDA current_noise
0DB83 8D 0E 40                      STA NOISE_PERIOD
0DB86 C9 0E                         CMP #$0E
0DB88 D0 09                         BNE +endNoise
0DB8A                           
0DB8A 20 72 C5                      JSR sub_BackgroundNoise
0DB8D A9 00                         LDA #$00
0DB8F 85 45                         STA max_noise
0DB91 85 46                         STA sweep_noise
0DB93                           
0DB93                           +endNoise:
0DB93                           
0DB93                               +
0DB93                           
0DB93                               ;; Play bonus to score bleeps
0DB93                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DB93                           
0DB93                           ;; Random bleepy noises
0DB93                           
0DB93 A5 49                         LDA do_beeps
0DB95 F0 2E                         BEQ +continue
0DB97                               
0DB97 C9 02                         CMP #$02
0DB99 D0 12                         BNE +beep
0DB9B                              
0DB9B                           +stopBeep:
0DB9B A9 00                         LDA #$00
0DB9D 85 49                         STA do_beeps
0DB9F A9 08                         LDA #$08
0DBA1 8D 15 40                      STA APU_STATUS
0DBA4 8D 0F 40                      STA NOISE_LENGTH
0DBA7 20 72 C5                      JSR sub_BackgroundNoise
0DBAA 4C C5 DB                      JMP +continue
0DBAD                               
0DBAD                           +beep:
0DBAD A9 01                         LDA #$01
0DBAF 8D 15 40                      STA APU_STATUS
0DBB2 A5 4A                         LDA soft_pulse1
0DBB4 8D 00 40                      STA PULSE1_VOLUME
0DBB7 20 E2 C4                      JSR sub_GetRandomNumber
0DBBA 8D 02 40                      STA PULSE1_TIMER_LO
0DBBD 20 E2 C4                      JSR sub_GetRandomNumber
0DBC0 29 01                         AND #$01
0DBC2 8D 03 40                      STA PULSE1_TIMER_HI
0DBC5                           
0DBC5                           +continue:
0DBC5                           
0DBC5                               
0DBC5                               ;; Play sound effect
0DBC5                               .include "game/include/main/nmi_sfx.asm"
0DBC5                           
0DBC5                               ;; Get current explosion sfx frame; if not set, skip this
0DBC5 A4 4E                         LDY sfx_timer
0DBC7 F0 1F                         BEQ +done
0DBC9                               
0DBC9                                   ;; Check if explosion sfx is done; if so, disable and skip
0DBC9 B1 4C                             LDA (sfx_address),y
0DBCB D0 07                             BNE +
0DBCD A9 00                                 LDA #$00
0DBCF 85 4E                                 STA sfx_timer
0DBD1 4C E8 DB                              JMP +done
0DBD4                                   +
0DBD4                                   
0DBD4                                   ;; Set low nibble as volume
0DBD4 29 0F                             AND #$0F
0DBD6 09 30                             ORA #$30
0DBD8 8D 0C 40                          STA NOISE_VOLUME
0DBDB                                   
0DBDB                                   ;; Set high nibble as frequency
0DBDB B1 4C                             LDA (sfx_address),y
0DBDD 4A                                LSR
0DBDE 4A                                LSR
0DBDF 4A                                LSR
0DBE0 4A                                LSR
0DBE1 49 0F                             EOR #$0F
0DBE3 8D 0E 40                          STA NOISE_PERIOD
0DBE6                                   
0DBE6                                   ;; Next frame
0DBE6 E6 4E                             INC sfx_timer
0DBE8                               +done:
0DBE8                           
0DBE8                           
0DBE8                               ;; Check move sfx
0DBE8 A4 4F                         LDY sfx_timer+1
0DBEA F0 3F                         BEQ +done
0DBEC                           
0DBEC C6 4F                             DEC sfx_timer+1
0DBEE C0 18                             CPY #$18
0DBF0 D0 0D                             BNE +
0DBF2                                       ;; Update APU status
0DBF2 A9 09                                 LDA #$09
0DBF4 8D 15 40                              STA APU_STATUS
0DBF7 A9 8B                                 LDA #$8B
0DBF9 85 50                                 STA sfx_frequency
0DBFB A9 0A                                 LDA #$0A
0DBFD 85 51                                 STA sfx_frequency+1
0DBFF                                   +
0DBFF                                   
0DBFF                                   ;; Set volume
0DBFF A9 70                             LDA #$70
0DC01 19 54 DA                          ORA tbl_MoveSfxVolume,y
0DC04 8D 00 40                          STA PULSE1_VOLUME
0DC07                                   
0DC07 84 00                             STY temp
0DC09 A9 18                             LDA #$18
0DC0B 38                                SEC
0DC0C E5 00                             SBC temp
0DC0E 4A                                LSR
0DC0F 18                                CLC
0DC10 69 03                             ADC #$03
0DC12 65 50                             ADC sfx_frequency
0DC14 85 50                             STA sfx_frequency
0DC16 8D 02 40                          STA PULSE1_TIMER_LO
0DC19 A5 51                             LDA sfx_frequency+1
0DC1B 69 00                             ADC #$00
0DC1D 85 51                             STA sfx_frequency+1
0DC1F 8D 03 40                          STA PULSE1_TIMER_HI
0DC22                                   
0DC22 C0 01                             CPY #$01
0DC24 D0 05                             BNE +done
0DC26                           
0DC26                                   ;; Disable
0DC26 A9 00                             LDA #$00
0DC28 8D 01 40                          STA $4001
0DC2B                                   
0DC2B                               +done:
0DC2B                               
0DC2B                           
0DC2B                           ;; This is what happens when we forced nmi skip
0DC2B                           +force_skip_nmi:
0DC2B                           
0DC2B                               ;; Increase frame timers
0DC2B E6 15                         INC frame_counter
0DC2D                           
0DC2D                               ;; reset sprites_update_position
0DC2D A9 00                         LDA #$00
0DC2F 85 35                         STA sprites_update_position
0DC31                           
0DC31                               ;; Don't skip next NMI request
0DC31 A9 00                         LDA #$00
0DC33 85 13                         STA skip_nmi
0DC35 85 52                         STA check_nmi
0DC37                           
0DC37                               ;; Restore X, Y and PC from stack
0DC37 28                            PLP
0DC38 68                            PLA
0DC39 A8                            TAY
0DC3A 68                            PLA
0DC3B AA                            TAX
0DC3C                           
0DC3C                           +skip_nmi:
0DC3C                               ;; Restore accumulator from stack
0DC3C 68                            PLA
0DC3D                           
0DC3D                               ;; Return
0DC3D 40                            RTI
0DC3E                           
0DC3E                           
0DC3E                           ;; IRQ handler (empty)
0DC3E                           IRQ:
0DC3E                               .include "interrupt/irq.asm"
0DC3E                           
0DC3E 40                            RTI
0DC3F                           
0DC3F                           
0DC3F                           ;; Interrupt vectors
0DC3F 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 76 DA                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 3E DC                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
