                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_OTHERRAM  = $0300
                                ADDR_SPRITERAM = $0200
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI = #$02
                                BALL_SPEED_LO = #$C0
                                BALL_TILE_CHR = #$01
                                BALL_ATTR     = #%00000000
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD    = #%00000001
                                KILL_BALL       = #%00000001
                                REVIVE_BALL     = #%11111110
                                BALL_IS_NUDGED  = #%00000010
                                NUDGE_BALL      = #%00000010
                                STOP_NUDGE_BALL = #%11111101
                                BALL_MOVES_DOWN = #%00000100
                                MOVE_BALL_DOWN  = #%00000100
                                MOVE_BALL_UP    = #%11111011
                                BALL_IS_FROZEN  = #%00010000
                                FREEZE_BALL     = #%00010000
                                UNFREEZE_BALL   = #%11101111
                                
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$10
                                BOUND_BOTTOM    = #$98
                                BOUND_LEFT      = #$10
                                BOUND_RIGHT     = #$E8
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                
                                ;; Sprite RAM address
                                SPRITE_RAM      = $0200
                                
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               frame_counter_60  .dsb 1
00017                               second_counter    .dsb 2
00019                               random_seed       .dsb 1
0001A                           
0001A                               ;; Game specific variables
0001A                               .include "game/ram/zp.asm"
0001A                           ;; Ball variables
0001A                           ball_xpos_hi        .dsb 1
0001B                           ball_xpos_lo        .dsb 1
0001C                           ball_ypos_hi        .dsb 1
0001D                           ball_ypos_lo        .dsb 1
0001E                           ball_lives          .dsb 1   ; number of lives left
0001F                           ball_score          .dsb 6   ; decimal score, five bytes (0-9)
00025                           ball_bonus          .dsb 3   ; decimal bonus points, three bytes (0-9)
00028                           
00028                           
00028                           ;; Update-position check
00028                           ball_update_position   .dsb 1
00029                           
00029                           
00029                           ;; Ball flags
00029                           ;; #% c c c f . v n a
00029                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00029                           ;;    | | | | | | +---- ball is being nudged (1) or not (0)
00029                           ;;    | | | | | +------ ball moves up (0) or down (1)
00029                           ;;    | | | | +-------- (unused for now)
00029                           ;;    | | | +---------- ball is frozen (not moving)
00029                           ;;    +-+-+------------ ball color (1-6)
00029                           ball_flags          .dsb 1
0002A                           
0002A                           
0002A                           ;; Screen mode
0002A                           ;; #%00000000 = intro screen
0002A                           ;; #%. . . . . . w g
0002A                           ;;   | | | | | | | +--------- game mode (1) or not (0)
0002A                           ;;   | | | | | | +----------- win screen (1) or not (0)
0002A                           ;;   +-+-+-+-+-+------------- unused
0002A                           screen_mode         .dsb 1
0002B                           
0002B                           
0002B                           ;; Start level pointer
0002B                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002B                           ;; This is the pointer that tells you at which level to start.
0002B                           startlevel_pointer  .dsb 1 
0002C                           
0002C                           
0002C                           ;; PPU buffer variables
0002C                           ppu_buffer_update   .dsb 1
0002D                           ppu_buffer_pointer  .dsb 1
0002E                           
0002E                           ;; Pointer to keep track of the number of explosions
0002E                           explosion_pointer         .dsb 1
0002F                           
0002F                           ;; Sprite RAM pointer to keep track of sprites to update
0002F                           sprite_ram_pointer        .dsb 1
00030                           
00030                               00030                           .ende
                                
                                ;; Other RAM
                                .enum ADDR_OTHERRAM
00300                               .include "ram/misc.asm"
00300                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00300                           ;;
00300                           ;; ram/misc.asm
00300                           ;;
00300                           ;; List of additional, non-zeropage RAM variables. Currently
00300                           ;; empty, but will hold data like the OAM buffer and other,
00300                           ;; less-often accessed, global variables.
00300                           ;;
00300                           ;;
00300                           
00300                           
00300                               ;; Game specific RAM variables
00300                               .include "game/ram/misc.asm"
00300                           ;; miscellaneous (non-zeropage) ram variables go here
00300                           
00300                           ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                           ppu_buffer                .dsb 48
00330                           
00330                           ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                           explosion_framecounter    .dsb 4
00334                           
00334                           ;; _currentframe, keeps track which anim frame we're at
00334                           explosion_currentframe    .dsb 4
00338                           
00338                           ;; _attributes, to distinguish between ball and wall explosion
00338                           explosion_attributes      .dsb 4
0033C                           
0033C                           ;; x- and y-coordinate of the explosion
0033C                           explosion_x               .dsb 4
00340                           explosion_y               .dsb 4
00344                           
00344                           ;; active flag to see if animation is/should be shown
00344                           explosion_active          .dsb 4
00348                           .ende
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 00 C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 00 C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Force NMI skip
0C04B A9 01                     	LDA #$01
0C04D 85 14                     	STA force_skip_nmi
0C04F                           
0C04F                               ;; Disable rendering
0C04F A5 12                         LDA soft_ppu_mask
0C051 29 E7                         AND #%11100111
0C053 85 12                         STA soft_ppu_mask
0C055 20 00 C3                      JSR sub_WaitForVBlank
0C058                           
0C058                               ;; Load intro palette
0C058 2C 02 20                      BIT PPU_STATUS
0C05B A9 3F                         LDA #$3F
0C05D 8D 06 20                      STA PPU_ADDR
0C060 A9 00                         LDA #$00
0C062 8D 06 20                      STA PPU_ADDR
0C065 A2 00                         LDX #$00
0C067                               -
0C067 BD 19 C3                          LDA tbl_IntroScreenPalette,x
0C06A 8D 07 20                          STA PPU_DATA
0C06D E8                                INX
0C06E E0 20                             CPX #$20
0C070 D0 F5                         BNE -
0C072                               
0C072                               ;; Put ball in the middle
0C072 A9 7C                         LDA #$7C
0C074 85 1A                         STA ball_xpos_hi
0C076 85 1C                         STA ball_ypos_hi
0C078                           
0C078                               ;; Clear the screen)
0C078 2C 02 20                      BIT PPU_STATUS
0C07B A9 20                         LDA #$20
0C07D 8D 06 20                      STA PPU_ADDR
0C080 A9 00                         LDA #$00
0C082 8D 06 20                      STA PPU_ADDR
0C085 AA                            TAX
0C086 A8                            TAY
0C087                               -
0C087 8D 07 20                          STA PPU_DATA
0C08A E8                                INX
0C08B D0 FA                             BNE -
0C08D C8                                INY
0C08E C0 04                             CPY #$04
0C090 D0 F5                         BNE -
0C092                           
0C092                               ;; Set up intro screen draw loop
0C092 A2 00                         LDX #$00
0C094                           
0C094                           -loop_IntroScreenData:
0C094                           
0C094                               ;; Get current byte from intro screen data
0C094 BD 41 C3                      LDA tbl_IntroScreenData,x
0C097                           
0C097                               ;; If current byte is #$3F, we're done drawing.
0C097 C9 3F                         CMP #$3F
0C099 D0 03                         BNE +
0C09B 4C E8 C0                          JMP +goToEndIntroScreen
0C09E                               +
0C09E                           
0C09E                               ;; If highest bits are %11, draw a plain tile
0C09E 29 C0                         AND #%11000000
0C0A0 D0 03                         BNE +
0C0A2 4C C8 C0                          JMP +drawTile
0C0A5                               +
0C0A5                               
0C0A5                               ;; If highest bits are %01, set the PPU address
0C0A5                               ;; If not, draw two logo tiles
0C0A5 C9 40                         CMP #%01000000
0C0A7 D0 03                         BNE +drawLogo
0C0A9 4C D2 C0                          JMP +setPpuAddr
0C0AC                           
0C0AC                           +drawLogo:
0C0AC                               ;; Get bits 0-2 and store in a temp variable
0C0AC BD 41 C3                      LDA tbl_IntroScreenData,x
0C0AF 29 07                         AND #%00000111
0C0B1 85 00                         STA temp
0C0B3                               
0C0B3                               ;; Get bits 3-5, shift over to get a value from 0-7
0C0B3 BD 41 C3                      LDA tbl_IntroScreenData,x
0C0B6 4A                            LSR
0C0B7 4A                            LSR
0C0B8 4A                            LSR
0C0B9 29 07                         AND #%00000111
0C0BB                               
0C0BB                               ;; Draw the tile that corresponds with that value
0C0BB A8                            TAY
0C0BC 20 06 C3                      JSR sub_drawIntroScreenLogoTile
0C0BF                               
0C0BF                               ;; Do the same for the value stored in temp
0C0BF A4 00                         LDY temp
0C0C1 20 06 C3                      JSR sub_drawIntroScreenLogoTile
0C0C4                           
0C0C4                               ;; Next byte please
0C0C4 E8                            INX
0C0C5 4C 94 C0                      JMP -loop_IntroScreenData
0C0C8                           
0C0C8                           +drawTile:
0C0C8                               ;; Just draw the tile value on screen
0C0C8 BD 41 C3                      LDA tbl_IntroScreenData,x
0C0CB 8D 07 20                      STA PPU_DATA
0C0CE                               
0C0CE                               ;; Next byte please
0C0CE E8                            INX
0C0CF 4C 94 C0                      JMP -loop_IntroScreenData
0C0D2                           
0C0D2                           
0C0D2                           +setPpuAddr:
0C0D2                               ;; Reset the PPU latch
0C0D2 2C 02 20                      BIT PPU_STATUS
0C0D5                               
0C0D5                               ;; Sanitize and write the high byte of the PPU address
0C0D5 BD 41 C3                      LDA tbl_IntroScreenData,x
0C0D8 29 3F                         AND #%00111111
0C0DA 8D 06 20                      STA PPU_ADDR
0C0DD                           
0C0DD                               ;; Write the low byte of the PPU address
0C0DD E8                            INX
0C0DE BD 41 C3                      LDA tbl_IntroScreenData,x
0C0E1 8D 06 20                      STA PPU_ADDR
0C0E4                               
0C0E4                               ;; PPU has been set up to draw tiles at the correct spot now.
0C0E4                               
0C0E4                               ;; Next byte please.
0C0E4 E8                            INX
0C0E5 4C 94 C0                      JMP -loop_IntroScreenData
0C0E8                           
0C0E8                           +goToEndIntroScreen:
0C0E8                           
0C0E8                               ;; To color the 1.LEVEL: line green, we need to update two
0C0E8                               ;; values in the PPU attribute data.
0C0E8 2C 02 20                      BIT PPU_STATUS
0C0EB A9 23                         LDA #$23
0C0ED 8D 06 20                      STA PPU_ADDR
0C0F0 A9 CB                         LDA #$CB
0C0F2 8D 06 20                      STA PPU_ADDR
0C0F5 A9 0A                         LDA #%00001010
0C0F7 8D 07 20                      STA PPU_DATA
0C0FA 8D 07 20                      STA PPU_DATA
0C0FD                           
0C0FD                               ;; Enable rendering
0C0FD A5 12                         LDA soft_ppu_mask
0C0FF 09 1E                         ORA #%00011110
0C101 85 12                         STA soft_ppu_mask
0C103 A9 00                     	LDA #$00
0C105 8D 05 20                  	STA PPU_SCROLL
0C108 8D 05 20                  	STA PPU_SCROLL
0C10B 85 14                     	STA force_skip_nmi
0C10D 20 00 C3                      JSR sub_WaitForVBlank
0C110                           
0C110                           
0C110                           ;; Main game loop
0C110                           MainGameLoop:
0C110                               .include "game/main.asm"
0C110                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C110                           ;;
0C110                           ;; game/main.asm
0C110                           ;;
0C110                           ;; The main game loop content.
0C110                           ;;
0C110                           ;;
0C110                           
0C110                               ;; Reset sprite pointer every game loop
0C110 A9 00                         LDA #$00
0C112 85 2F                         STA sprite_ram_pointer
0C114                           
0C114                               ;; Store previous buttons
0C114 A5 0F                         LDA buttons_held
0C116 85 0E                         STA buttons_prev
0C118                           
0C118                               ;; Read controller input
0C118 20 EC C2                      JSR sub_ReadController
0C11B                           
0C11B                               ;; Get buttons released
0C11B A5 0F                         LDA buttons_held
0C11D 49 FF                         EOR #$FF
0C11F 25 0E                         AND buttons_prev
0C121 85 11                         STA buttons_released
0C123                           
0C123                               ;; Set buttons pressed
0C123 A5 0E                         LDA buttons_prev
0C125 49 FF                         EOR #$FF
0C127 25 0F                         AND buttons_held
0C129 85 10                         STA buttons_pressed
0C12B                           
0C12B                           
0C12B                           ;; Testing my concept scripts
0C12B                           .include "game/test/tile_update.asm"
0C12B                               ;; If START button is pressed
0C12B A5 10                         LDA buttons_pressed
0C12D 29 10                         AND #BUTTON_START
0C12F D0 03                         BNE +
0C131 4C 59 C1                          JMP +end
0C134                               +
0C134                               
0C134                               ;; Prevent updating until full 3-byte buffer is filled,
0C134                               ;; so that graphics won't glitch out if NMI happens during
0C134                               ;; updating the buffer
0C134 A9 00                         LDA #$00
0C136 85 2C                         STA ppu_buffer_update
0C138                           
0C138                               ;; Check if buffer full; if so, wait a frame and force update
0C138 A4 2D                         LDY ppu_buffer_pointer
0C13A C0 30                         CPY #$30
0C13C D0 05                         BNE +
0C13E E6 2C                             INC ppu_buffer_update
0C140 20 00 C3                          JSR sub_WaitForVBlank
0C143                               +
0C143                           
0C143                               ;; Add ppu_addr high byte to buffer
0C143 A9 21                         LDA #$21
0C145 99 00 03                      STA ppu_buffer,y
0C148                           
0C148                               ;; Add ppu_addr low byte to buffer
0C148 C8                            INY
0C149 A9 E0                         LDA #$E0
0C14B 99 00 03                      STA ppu_buffer,y
0C14E                           
0C14E                               ;; Add ppu_data (in this case, chr tile id $3C) to buffer
0C14E C8                            INY
0C14F A9 28                         LDA #$28
0C151 99 00 03                      STA ppu_buffer,y
0C154                           
0C154                               ;; Update buffer pointer
0C154 C8                            INY
0C155 84 2D                         STY ppu_buffer_pointer
0C157                           
0C157                               ;; Tell NMI to update next round
0C157 E6 2C                         INC ppu_buffer_update
0C159                           
0C159                              
0C159                           +end:0C159                           .include "game/test/show_animation.asm"
0C159                               ;; If A button is pressed, initiate explosion
0C159 A5 10                         LDA buttons_pressed
0C15B 29 80                         AND #BUTTON_A
0C15D D0 03                         BNE +
0C15F 4C 91 C1                          JMP +end
0C162                               +
0C162                           
0C162                               ;; Get most recent slot for explosion
0C162 A6 2E                         LDX explosion_pointer
0C164                           
0C164                               ;; If 0, use max pointer value
0C164 D0 02                         BNE +
0C166 A2 04                             LDX #MAX_ANIMATIONS
0C168                               +
0C168                           
0C168                               ;; Decrease pointer by one
0C168 CA                            DEX
0C169 86 2E                         STX explosion_pointer
0C16B                           
0C16B                               ;; Load explosion data into RAM
0C16B A9 00                         LDA #$00
0C16D 9D 34 03                      STA explosion_currentframe,x
0C170 A9 04                         LDA #ANIMATION_SPEED
0C172 9D 30 03                      STA explosion_framecounter,x
0C175 20 DE C2                      JSR sub_GetRandomNumber
0C178                               ;AND #%11110000
0C178 9D 3C 03                      STA explosion_x,x
0C17B 20 DE C2                      JSR sub_GetRandomNumber
0C17E                               ;AND #%11110000
0C17E 9D 40 03                      STA explosion_y,x
0C181 20 DE C2                      JSR sub_GetRandomNumber
0C184 29 02                         AND #%00000010
0C186 18                            CLC
0C187 69 01                         ADC #$01
0C189 9D 38 03                      STA explosion_attributes,x
0C18C A9 01                         LDA #$01
0C18E 9D 44 03                      STA explosion_active,x
0C191                           
0C191                           
0C191                           +end:
0C191                           
0C191                               ;; Set up loop
0C191 A2 00                         LDX #$00
0C193                               -loop_load_animation:
0C193                                   ;; Check if current animation is active. If not, goto next
0C193 BD 44 03                          LDA explosion_active,x
0C196 D0 03                             BNE +
0C198 4C 32 C2                              JMP +next
0C19B                                   +
0C19B                           
0C19B                                   ;; Check the explosion framecounter
0C19B BD 30 03                          LDA explosion_framecounter,x
0C19E D0 26                             BNE +
0C1A0                                       ;; Framecounter is 0
0C1A0                                       ;; Reset to animation speed
0C1A0 A9 04                                 LDA #ANIMATION_SPEED
0C1A2 9D 30 03                              STA explosion_framecounter,x
0C1A5                           
0C1A5                                       ;; Set next animation frame, and check if we're done yet
0C1A5 FE 34 03                              INC explosion_currentframe,x
0C1A8 BD 34 03                              LDA explosion_currentframe,x
0C1AB C9 0A                                 CMP #ANIM_SLIDES
0C1AD D0 17                                 BNE +
0C1AF                           
0C1AF                                       ;; If we're done, inactivate current explosion, clean
0C1AF                                       ;; up sprite RAM and go to the next one
0C1AF A9 00                                 LDA #$00
0C1B1 9D 44 03                              STA explosion_active,x
0C1B4                                       
0C1B4 A9 09                                 LDA #SLIDE_SIZE
0C1B6 0A                                    ASL
0C1B7 0A                                    ASL
0C1B8 A8                                    TAY
0C1B9 A9 EF                                 LDA #$EF
0C1BB                                       -
0C1BB 88                                        DEY
0C1BC 99 00 02                                  STA SPRITE_RAM,y
0C1BF C0 00                                     CPY #00
0C1C1 D0 F8                                 BNE -
0C1C3                                       
0C1C3 4C 32 C2                              JMP +next
0C1C6                                   +
0C1C6                           
0C1C6                                   ;; Load (x,y) position in temp variables
0C1C6 BD 3C 03                          LDA explosion_x,x
0C1C9 85 01                             STA temp+1
0C1CB 85 03                             STA temp+3
0C1CD BD 40 03                          LDA explosion_y,x
0C1D0 85 02                             STA temp+2
0C1D2                           
0C1D2                                   ;; Load attribute in temp variable
0C1D2 BD 38 03                          LDA explosion_attributes,x
0C1D5 85 04                             STA temp+4
0C1D7                           
0C1D7                                   ;; Load current frame into Y-register
0C1D7 BC 34 03                          LDY explosion_currentframe,x
0C1DA                           
0C1DA                                   ;; Load current frame ROM address from table
0C1DA B9 47 C4                          LDA explosion_anim_lo,y
0C1DD 85 0C                             STA pointer
0C1DF B9 3D C4                          LDA explosion_anim_hi,y
0C1E2 85 0D                             STA pointer+1
0C1E4                           
0C1E4                                   ;; Save x-register on stack
0C1E4 8A                                TXA
0C1E5 48                                PHA
0C1E6                           
0C1E6                                   ;; Load sprites into sprite RAM
0C1E6 A6 2F                             LDX sprite_ram_pointer
0C1E8 A0 00                             LDY #$00
0C1EA                           
0C1EA                                   ;; Prepare (x,y) offset for loop
0C1EA 84 00                             STY temp
0C1EC                           
0C1EC                                   -loop_load_sprite:
0C1EC                                   
0C1EC                                       ;; Do not draw empty sprites
0C1EC B1 0C                                 LDA (pointer),y
0C1EE F0 18                                 BEQ +nextSprite
0C1F0                                   
0C1F0                                           ;; Add y-position to sprite ram buffer
0C1F0 A5 02                                     LDA temp+2
0C1F2 9D 00 02                                  STA SPRITE_RAM,x
0C1F5 E8                                        INX
0C1F6                           
0C1F6                                           ;; Get tile number from frame ROM address, and
0C1F6                                           ;; add it to sprite ram buffer
0C1F6 B1 0C                                     LDA (pointer),y
0C1F8 9D 00 02                                  STA SPRITE_RAM,x
0C1FB E8                                        INX
0C1FC                           
0C1FC                                           ;; Add attribute data to sprite ram buffer
0C1FC A5 04                                     LDA temp+4
0C1FE 9D 00 02                                  STA SPRITE_RAM,x
0C201 E8                                        INX
0C202                           
0C202                                           ;; Add x-position to sprite ram buffer
0C202 A5 03                                     LDA temp+3
0C204 9D 00 02                                  STA SPRITE_RAM,x
0C207 E8                                        INX
0C208                           
0C208                                       +nextSprite:
0C208                           
0C208                                       ;; Check if all sprites are done
0C208 C8                                    INY
0C209 C0 09                                 CPY #SLIDE_SIZE
0C20B F0 21                                 BEQ +done
0C20D                           
0C20D                                       ;; Update x value
0C20D A5 03                                 LDA temp+3
0C20F 18                                    CLC
0C210 69 08                                 ADC #$08
0C212 85 03                                 STA temp+3
0C214                           
0C214                                       ;; Update temp for x,y position
0C214 E6 00                                 INC temp
0C216 A5 00                                 LDA temp
0C218 C9 03                                 CMP #SLIDE_WIDTH
0C21A D0 0F                                 BNE +
0C21C                                           ;; Row is done; reset x-position
0C21C A5 01                                     LDA temp+1
0C21E 85 03                                     STA temp+3
0C220                           
0C220                                           ;; Update y-position
0C220 A5 02                                     LDA temp+2
0C222 18                                        CLC
0C223 69 08                                     ADC #$08
0C225 85 02                                     STA temp+2
0C227                           
0C227                                           ;; Reset row counter
0C227 A9 00                                     LDA #$00
0C229 85 00                                     STA temp
0C22B                                       +
0C22B                           
0C22B 4C EC C1                          JMP -loop_load_sprite
0C22E                           
0C22E                               +done:
0C22E 86 2F                             STX sprite_ram_pointer
0C230                           
0C230                                   ;; Retrieve x-register from stack
0C230 68                                PLA
0C231 AA                                TAX
0C232                           
0C232                               +next:
0C232                                   ;; Check if all animations have been updated
0C232 E8                                INX
0C233 E0 04                             CPX #MAX_ANIMATIONS
0C235 F0 03                             BEQ +done
0C237                           
0C237 4C 93 C1                      JMP -loop_load_animation
0C23A                           +done:
0C23A                           .include "game/test/move_ball.asm"
0C23A                           
0C23A                               ;; check if position should be updated (ie. has nmi happened yet)
0C23A A5 28                         LDA ball_update_position
0C23C F0 03                         BEQ +
0C23E 4C B5 C2                          JMP +skipBallMovement
0C241                               +
0C241                           
0C241                               ;; Check if ball goes up or down
0C241 A5 29                         LDA ball_flags
0C243 29 04                         AND #BALL_MOVES_DOWN
0C245 F0 24                         BEQ +moveBallUp
0C247                           
0C247                           
0C247                           +moveBallDown:
0C247                               ;; update the low byte
0C247 A5 1D                         LDA ball_ypos_lo
0C249 18                            CLC
0C24A 69 C0                         ADC #BALL_SPEED_LO
0C24C 85 1D                         STA ball_ypos_lo
0C24E                           
0C24E                               ;; update the high byte with carry
0C24E A5 1C                         LDA ball_ypos_hi
0C250 69 02                         ADC #BALL_SPEED_HI
0C252 85 1C                         STA ball_ypos_hi
0C254                               
0C254                               ;; Check bottom bound
0C254 C9 98                         CMP #BOUND_BOTTOM
0C256 90 32                         BCC +checkHorizontalMovement
0C258 F0 30                         BEQ +checkHorizontalMovement
0C25A                           
0C25A                               ;; Change ball direction to "up"
0C25A A9 98                         LDA #BOUND_BOTTOM
0C25C 85 1C                         STA ball_ypos_hi
0C25E A9 00                         LDA #$00
0C260 85 1D                         STA ball_ypos_lo
0C262 A5 29                         LDA ball_flags
0C264 29 FB                         AND #MOVE_BALL_UP
0C266 85 29                         STA ball_flags
0C268 4C 8A C2                      JMP +checkHorizontalMovement
0C26B                           
0C26B                           
0C26B                           +moveBallUp:
0C26B                               ;; update the low byte
0C26B A5 1D                         LDA ball_ypos_lo
0C26D 38                            SEC
0C26E E9 C0                         SBC #BALL_SPEED_LO
0C270 85 1D                         STA ball_ypos_lo
0C272                           
0C272                               ;; update the high byte with carry
0C272 A5 1C                         LDA ball_ypos_hi
0C274 E9 02                         SBC #BALL_SPEED_HI
0C276 85 1C                         STA ball_ypos_hi
0C278                               
0C278                               ;; Check top bound
0C278 C9 10                         CMP #BOUND_TOP
0C27A B0 0E                         BCS +checkHorizontalMovement
0C27C                           
0C27C                               ;; Change ball direction to "down"
0C27C A9 10                         LDA #BOUND_TOP
0C27E 85 1C                         STA ball_ypos_hi
0C280 A9 00                         LDA #$00
0C282 85 1D                         STA ball_ypos_lo
0C284 A5 29                         LDA ball_flags
0C286 09 04                         ORA #MOVE_BALL_DOWN
0C288 85 29                         STA ball_flags
0C28A                           
0C28A                           
0C28A                           +checkHorizontalMovement:
0C28A                               ;; Check if left button is held
0C28A A5 0F                         LDA buttons_held
0C28C 29 02                         AND #BUTTON_LEFT
0C28E F0 10                         BEQ +
0C290                                   ;; update the low byte
0C290 A5 1B                             LDA ball_xpos_lo
0C292 38                                SEC
0C293 E9 C0                             SBC #BALL_SPEED_LO
0C295 85 1B                             STA ball_xpos_lo
0C297                           
0C297                                   ;; update the high byte
0C297 A5 1A                             LDA ball_xpos_hi
0C299 E9 02                             SBC #BALL_SPEED_HI
0C29B 85 1A                             STA ball_xpos_hi
0C29D                           
0C29D 4C B3 C2                          JMP +doneBallMovement        
0C2A0                               +
0C2A0                           
0C2A0                               ;; Check if right button is held
0C2A0 A5 0F                         LDA buttons_held
0C2A2 29 01                         AND #BUTTON_RIGHT
0C2A4 F0 0D                         BEQ +
0C2A6                                   ;; update the low byte
0C2A6 A5 1B                             LDA ball_xpos_lo
0C2A8 18                                CLC
0C2A9 69 C0                             ADC #BALL_SPEED_LO
0C2AB 85 1B                             STA ball_xpos_lo
0C2AD                           
0C2AD                                   ;; update the high byte
0C2AD A5 1A                             LDA ball_xpos_hi
0C2AF 69 02                             ADC #BALL_SPEED_HI
0C2B1 85 1A                             STA ball_xpos_hi     
0C2B3                               +
0C2B3                           
0C2B3                           
0C2B3                           +doneBallMovement:
0C2B3                               ;; Don't update position again until next frame
0C2B3 E6 28                         INC ball_update_position
0C2B5                           
0C2B5                           
0C2B5                           +skipBallMovement:
0C2B5                               ;; Add to sprite buffer
0C2B5 A6 2F                         LDX sprite_ram_pointer
0C2B7 A5 1C                         LDA ball_ypos_hi
0C2B9 9D 00 02                      STA SPRITE_RAM,x
0C2BC E8                            INX
0C2BD A9 01                         LDA #BALL_TILE_CHR
0C2BF 9D 00 02                      STA SPRITE_RAM,x
0C2C2 E8                            INX
0C2C3 A9 00                         LDA #BALL_ATTR
0C2C5 9D 00 02                      STA SPRITE_RAM,x
0C2C8 E8                            INX
0C2C9 A5 1A                         LDA ball_xpos_hi
0C2CB 9D 00 02                      STA SPRITE_RAM,x
0C2CE E8                            INX
0C2CF 86 2F                         STX sprite_ram_pointer
0C2D1                           
0C2D1                           
0C2D1                           
0C2D1                               ;; Sprite clean-up
0C2D1 A6 2F                         LDX sprite_ram_pointer
0C2D3 A9 EF                         LDA #$EF
0C2D5                               -
0C2D5 9D 00 02                          STA SPRITE_RAM,x
0C2D8 E8                                INX
0C2D9 D0 FA                         BNE -
0C2DB 4C 10 C1                      JMP MainGameLoop
0C2DE                           
0C2DE                           ;; Subroutines
0C2DE                           .include "include/subroutines.asm"
0C2DE                           
0C2DE                           ;; RNG
0C2DE                           .include "subroutine/GetRandomNumber.asm"
0C2DE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C2DE                           ;;
0C2DE                           ;; subroutine/GetRandomNumber.asm
0C2DE                           ;;
0C2DE                           ;; Simple and fast random number generator by White Flame.
0C2DE                           ;;
0C2DE                           ;; Set random_seed to an arbitrary number to randomize between
0C2DE                           ;; gaming sessions, for instance using the frame counter upon
0C2DE                           ;; pressing START on the intro screen.
0C2DE                           ;;
0C2DE                           ;;     ;; IF START PRESSED:
0C2DE                           ;;     LDA frame_counter
0C2DE                           ;;     STA random_seed
0C2DE                           ;;
0C2DE                           ;; Source:
0C2DE                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C2DE                           ;;
0C2DE                           ;;
0C2DE                           
0C2DE                           sub_GetRandomNumber:
0C2DE                               ;; Force EOR if random_seed is zero
0C2DE A5 19                         LDA random_seed
0C2E0 F0 05                         BEQ +doEor
0C2E2                           
0C2E2                               ;; Shift left, and EOR if the high bit is set
0C2E2 0A                            ASL
0C2E3 F0 04                         BEQ +noEor
0C2E5 90 02                         BCC +noEor
0C2E7                           
0C2E7                           +doEor:
0C2E7 49 1D                         EOR #$1D
0C2E9                           
0C2E9                           +noEor:
0C2E9 85 19                         STA random_seed
0C2EB                           
0C2EB 60                            RTS
0C2EC                           
0C2EC                           
0C2EC                           ;; Read controller input
0C2EC                           .include "subroutine/ReadController.asm"
0C2EC                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C2EC                           ;;
0C2EC                           ;; subroutine/ReadController.asm
0C2EC                           ;;
0C2EC                           ;; Subroutine that polls the controller and stores the input
0C2EC                           ;; buttons in a variable. This version only handles controller
0C2EC                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C2EC                           ;;
0C2EC                           ;;
0C2EC                           
0C2EC                           sub_ReadController:
0C2EC                           
0C2EC                               ;; Set strobe bit
0C2EC A9 01                         LDA #$01
0C2EE 8D 16 40                      STA JOYPAD_1
0C2F1                           
0C2F1                               ;; Set up ring counter
0C2F1 85 0F                         STA buttons_held
0C2F3                           
0C2F3                               ;; Clear strobe bit
0C2F3 4A                            LSR
0C2F4 8D 16 40                      STA JOYPAD_1
0C2F7                           
0C2F7                               ;; Loop through button presses
0C2F7                               -
0C2F7 AD 16 40                          LDA JOYPAD_1
0C2FA 4A                                LSR
0C2FB 26 0F                             ROL buttons_held
0C2FD                           
0C2FD                               ;; Check if ring counter is done
0C2FD 90 F8                         BCC -
0C2FF                           
0C2FF                               ;; Return from subroutine
0C2FF 60                            RTS
0C300                           
0C300                           
0C300                           ;; vBlank wait
0C300                           .include "subroutine/WaitForVBlank.asm"
0C300                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C300                           ;;
0C300                           ;; subroutine/WaitForVBlank.asm
0C300                           ;;
0C300                           ;; Subroutine that essentially pauses script execution until
0C300                           ;; vBlank happens.
0C300                           ;;
0C300                           ;;
0C300                           
0C300                           sub_WaitForVBlank:
0C300 2C 02 20                      BIT $2002
0C303 10 FB                         BPL sub_WaitForVBlank
0C305 60                            RTS
0C306                           
0C306                           
0C306                           ;; Game specific subroutines
0C306                           .include "game/include/subroutines.asm"
0C306                           ;; additional game-specific subroutines go here
0C306                           
0C306                           sub_drawIntroScreenLogoTile:
0C306 B9 39 C3                      LDA tbl_IntroScreenLogoChr,y
0C309 C9 60                         CMP #$60
0C30B D0 08                         BNE +
0C30D 20 DE C2                          JSR sub_GetRandomNumber
0C310 29 07                             AND #$07
0C312 18                                CLC
0C313 69 60                             ADC #$60
0C315                               +
0C315 8D 07 20                      STA PPU_DATA
0C318 60                            RTS
0C319                           
0C319                           ;; LUTs
0C319                           .include "game/include/tables.asm"
0C319                           
0C319                           ;; Intro screen palette
0C319                           tbl_IntroScreenPalette:
0C319 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C31D 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C321 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C325 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C329                           
0C329 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C32D 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C331 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C335 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C339                           
0C339                           
0C339                           ;; Intro: mapping logo index to chr tile
0C339                           tbl_IntroScreenLogoChr:
0C339 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C341                           
0C341                           
0C341                           ;; Intro screen data
0C341                           tbl_IntroScreenData:
0C341                           
0C341                               ;; Set PPU address $20AC
0C341 60 AC                         .db #$60, #$AC
0C343                               
0C343                               ;; Draw
0C343 02 26 16 0F 20 0F 16 27       .db #$02, #$26, #$16, #$0F, #$20, #$0F, #$16, #$27 ; 1.LEVEL:
0C34B                           
0C34B                               ;; Set PPU address $20CF
0C34B 60 CF                         .db #$60, #$CF
0C34D                               
0C34D                               ;; Draw
0C34D 01 02                         .db #$01, #$02                                     ; 01
0C34F                               
0C34F                               ;; Set PPU address $2122
0C34F 61 22                         .db #$61, #$22
0C351                               
0C351                               ;; Draw
0C351 0E 0F 1D 13 11 18 25          .db #$0E, #$0F, #$1D, #$13, #$11, #$18, #$25       ; DESIGN,
0C358 1D 19 1F 18 0E 25             .db #$1D, #$19, #$1F, #$18, #$0E, #$25             ; SOUND,
0C35E 11 1C 0B 1A 12 13 0D 1D       .db #$11, #$1C, #$0B, #$1A, #$12, #$13, #$0D, #$1D ; GRAPHICS
0C366 00 0B 18 0E 00                .db #$00, #$0B, #$18, #$0E, #$00                   ; _AND_
0C36B                               
0C36B                               ;; Set PPU address $2147
0C36B 61 47                         .db #$61, #$47
0C36D                               
0C36D                               ;; Draw
0C36D 1A 1C 19 11 1C 0B 17          .db #$1A, #$1C, #$19, #$11, #$1C, #$0B, #$17       ; PROGRAM
0C374 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C378 19 16 13 20 0F 1C             .db #$19, #$16, #$13, #$20, #$0F, #$1C             ; OLIVER
0C37E 00 15 13 1C 21 0B             .db #$00, #$15, #$13, #$1C, #$21, #$0B             ; _KIRWA
0C384                               
0C384                               ;; Set PPU address $218B
0C384 61 8B                         .db #$61, #$8B
0C386                               
0C386                               ;; Draw
0C386 28 00 02 0A 09 08             .db #$28, #$00, #$02, #$0A, #$09, #$08             ; C_1987
0C38C 25 02 0A 09 09                .db #$25, #$02, #$0A, #$09, #$09                   ; ,1988
0C391                               
0C391                               ;; Set PPU address $21E6
0C391 61 E6                         .db #$61, #$E6
0C393                               
0C393                               ;; Draw
0C393 18 0F 1D 00 1A 19 1C 1E       .db #$18, #$0F, #$1D, #$00, #$1A, #$19, #$1C, #$1E ; NES_PORT
0C39B 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C39F 15 0F 20 13 18 09 02          .db #$15, #$0F, #$20, #$13, #$18, #$09, #$02       ; KEVIN81
0C3A6                               
0C3A6                               ;; Set PPU address $222D
0C3A6 62 2D                         .db #$62, #$2D
0C3A8                               
0C3A8                               ;; Draw
0C3A8 28 00 03 01 03 04             .db #$28, #$00, #$03, #$01, #$03, #$04             ; C_2023
0C3AE                               
0C3AE                               ;; Set PPU address $2281
0C3AE 62 81                         .db #$62, #$81
0C3B0                               
0C3B0                               ;; Draw the Crillion logo
0C3B0 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C3B4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C3B8 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C3BC E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C3C0                               
0C3C0 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C3C4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C3C8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C3CC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C3D0                               
0C3D0 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C3D4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C3D8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C3DC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C3E0                           
0C3E0 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C3E4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C3E8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C3EC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C3F0                               
0C3F0 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C3F4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C3F8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C3FC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C400                           
0C400 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C404 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C408 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C40C F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C40F                           
0C40F                               ;; End of intro
0C40F 3F                            .db #$3F
0C410                           
0C410                           ;; test animation table
0C410                           .include "game/test/show_animation_table.asm"0C410                           ;; CHR tile-id's per slide of explosion
0C410                           explosion_slide0:
0C410 00 00 00                      .db #$00, #$00, #$00
0C413 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C416 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C419                           
0C419                           explosion_slide1:
0C419 00 00 00                      .db #$00, #$00, #$00
0C41C 29 2A 2B                      .db #$29, #$2A, #$2B
0C41F 39 3A 3B                      .db #$39, #$3A, #$3B
0C422                           
0C422                           explosion_slide2:
0C422 16 00 00                      .db #$16, #$00, #$00
0C425 26 27 28                      .db #$26, #$27, #$28
0C428 36 37 38                      .db #$36, #$37, #$38
0C42B                           
0C42B                           explosion_slide3:
0C42B 00 14 15                      .db #$00, #$14, #$15
0C42E 23 24 25                      .db #$23, #$24, #$25
0C431 33 34 35                      .db #$33, #$34, #$35
0C434                           
0C434                           explosion_slide4:
0C434 10 11 12                      .db #$10, #$11, #$12
0C437 20 21 22                      .db #$20, #$21, #$22
0C43A 30 31 32                      .db #$30, #$31, #$32
0C43D                           
0C43D                           ;; High and low bytes of animation slides
0C43D                           explosion_anim_hi:
0C43D C4                            .db >#explosion_slide0
0C43E C4                            .db >#explosion_slide1
0C43F C4                            .db >#explosion_slide2
0C440 C4                            .db >#explosion_slide3
0C441 C4                            .db >#explosion_slide4
0C442 C4                            .db >#explosion_slide4
0C443 C4                            .db >#explosion_slide3
0C444 C4                            .db >#explosion_slide2
0C445 C4                            .db >#explosion_slide1
0C446 C4                            .db >#explosion_slide0
0C447                           
0C447                           explosion_anim_lo:
0C447 10                            .db <#explosion_slide0
0C448 19                            .db <#explosion_slide1
0C449 22                            .db <#explosion_slide2
0C44A 2B                            .db <#explosion_slide3
0C44B 34                            .db <#explosion_slide4
0C44C 34                            .db <#explosion_slide4
0C44D 2B                            .db <#explosion_slide3
0C44E 22                            .db <#explosion_slide2
0C44F 19                            .db <#explosion_slide1
0C450 10                            .db <#explosion_slide0
0C451                           
0C451                           
0C451                           ;; NMI handler
0C451                           NMI:
0C451                               .include "interrupt/nmi.asm"
0C451                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C451                           ;;
0C451                           ;; include/nmi.asm
0C451                           ;;
0C451                           ;; Non-maskable interrupt script. This script is being executed
0C451                           ;; when vBlank hits.
0C451                           ;;
0C451                           ;;
0C451                           
0C451                               ;; Preserve accumulator through stack
0C451 48                            PHA
0C452                           
0C452                               ;; Should NMI be skipped?
0C452 A5 13                         LDA skip_nmi
0C454 F0 03                         BEQ +
0C456 4C EE C4                          JMP +skip_nmi
0C459                               +
0C459                           
0C459                               ;; When in NMI, skip additional NMI requests
0C459 A9 01                         LDA #$01
0C45B 85 13                         STA skip_nmi
0C45D                           
0C45D                               ;; Preserve X, Y, and PC through stack
0C45D 8A                            TXA
0C45E 48                            PHA
0C45F 98                            TYA
0C460 48                            PHA
0C461 08                            PHP
0C462                               
0C462                               ;; Check forced NMI skip
0C462 A5 14                         LDA force_skip_nmi
0C464 F0 03                         BEQ +
0C466 4C CD C4                          JMP +force_skip_nmi
0C469                               +
0C469                           
0C469                               ;; Update PPU mask
0C469                               ;LDA #$00
0C469                               ;STA PPU_CTRL
0C469 A5 12                         LDA soft_ppu_mask
0C46B 8D 01 20                      STA PPU_MASK
0C46E                               
0C46E                               
0C46E                               ;; Additional PPU updates go here
0C46E                               .include "game/test/tile_update_nmi.asm"
0C46E                           
0C46E                               ;; Check if ppu_buffer needs updating
0C46E A5 2C                         LDA ppu_buffer_update
0C470 D0 03                         BNE +
0C472 4C B2 C4                          JMP +no_ppu_buffer_update
0C475                               +
0C475                           
0C475                               ;; Reset ppu control register, mask and scrolling position
0C475 A2 00                         LDX #$00
0C477 8E 00 20                      STX PPU_CTRL
0C47A 8E 01 20                      STX PPU_MASK
0C47D                           
0C47D                               ;; Set up loop
0C47D                               -
0C47D                                   ;; Reset hi/lo latch
0C47D 2C 02 20                          BIT PPU_STATUS
0C480                           
0C480                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0C480 BD 00 03                          LDA ppu_buffer,x
0C483 8D 06 20                          STA PPU_ADDR
0C486 E8                                INX
0C487 BD 00 03                          LDA ppu_buffer,x
0C48A 8D 06 20                          STA PPU_ADDR
0C48D                           
0C48D                                   ;; Write ppu_buffer data to PPU_ADDR
0C48D E8                                INX
0C48E BD 00 03                          LDA ppu_buffer,x
0C491 8D 07 20                          STA PPU_DATA
0C494                           
0C494                                   ;; Check if updating is done (eg. X is at pointer)
0C494 E8                                INX
0C495 E4 2D                             CPX ppu_buffer_pointer
0C497 F0 03                             BEQ +
0C499 4C 7D C4                      JMP -
0C49C                           +
0C49C                           
0C49C                               ;; Reset ppu buffer update and pointer
0C49C A9 00                         LDA #$00
0C49E 85 2C                         STA ppu_buffer_update
0C4A0 85 2D                         STA ppu_buffer_pointer
0C4A2                               
0C4A2                               ;; Reset scrolling position
0C4A2 8D 05 20                      STA PPU_SCROLL
0C4A5 8D 05 20                      STA PPU_SCROLL
0C4A8                           
0C4A8                               ;; Restore ppu control register and mask
0C4A8 A9 90                         LDA #%10010000
0C4AA 8D 00 20                      STA PPU_CTRL
0C4AD A5 12                         LDA soft_ppu_mask
0C4AF 8D 01 20                      STA PPU_MASK
0C4B2                           
0C4B2                           ;; Continue other NMI stuff
0C4B2                           +no_ppu_buffer_update:
0C4B2                               .include "game/test/show_animation_nmi.asm"
0C4B2                               ;; Reset sprite RAM, draw sprites
0C4B2 8D 03 20                      STA OAM_ADDR
0C4B5 A9 02                         LDA #$02
0C4B7 8D 14 40                      STA OAM_DMA
0C4BA                           
0C4BA A0 04                         LDY #MAX_ANIMATIONS
0C4BC A2 00                         LDX #$00
0C4BE                               -
0C4BE BD 30 03                          LDA explosion_framecounter,x
0C4C1 F0 03                             BEQ +
0C4C3 DE 30 03                              DEC explosion_framecounter,x
0C4C6                                   +
0C4C6 E8                                INX
0C4C7 88                                DEY
0C4C8 F0 03                             BEQ +done        
0C4CA 4C BE C4                      JMP -
0C4CD                           +done:
0C4CD                           
0C4CD                           ;; This is what happens when we forced nmi skip
0C4CD                           +force_skip_nmi:
0C4CD                           
0C4CD                               ;; Increase frame counters
0C4CD E6 15                         INC frame_counter
0C4CF E6 16                         INC frame_counter_60
0C4D1                               
0C4D1                               ;; Increase second counter (if 60 frames have passed)
0C4D1 A5 16                         LDA frame_counter_60
0C4D3 C9 3C                         CMP #60
0C4D5 D0 0A                         BNE +
0C4D7 E6 18                             INC second_counter+1
0C4D9 D0 02                             BNE ++
0C4DB E6 17                                 INC second_counter
0C4DD                                   ++
0C4DD A9 00                             LDA #$00
0C4DF 85 16                             STA frame_counter_60
0C4E1                               +
0C4E1                           
0C4E1                               ;; reset ball_update_position
0C4E1 A9 00                         LDA #$00
0C4E3 85 28                         STA ball_update_position
0C4E5                           
0C4E5                               ;; Don't skip next NMI request
0C4E5 A9 00                         LDA #$00
0C4E7 85 13                         STA skip_nmi
0C4E9                           
0C4E9                               ;; Restore X, Y and PC from stack
0C4E9 28                            PLP
0C4EA 68                            PLA
0C4EB A8                            TAY
0C4EC 68                            PLA
0C4ED AA                            TAX
0C4EE                           
0C4EE                           +skip_nmi:
0C4EE                               ;; Restore accumulator from stack
0C4EE 68                            PLA
0C4EF                           
0C4EF                               ;; Return
0C4EF 40                            RTI
0C4F0                           
0C4F0                           ;; IRQ handler (empty)
0C4F0                           IRQ:
0C4F0                               .include "interrupt/irq.asm"
0C4F0 40                            RTI0C4F1                           
0C4F1                           ;; Interrupt vectors
0C4F1 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 51 C4                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE F0 C4                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
