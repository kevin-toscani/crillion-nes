	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$02        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$30        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$03
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                               00036                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 CE C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 CE C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 BA C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 9F CA                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 9C CA                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 89 C4                      JSR sub_DisableRendering
0C08A 20 13 C5                      JSR sub_JumpToPointer
0C08D 20 9D C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 2D                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C A8 C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 22                         LDA #$22
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 20                         LDA #$20
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 E2                         LDA #$E2
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 32                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 2B                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 89 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 2C                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 24                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 18                            CLC
0C0C7 69 30                         ADC #BALL_SPEED_LO
0C0C9 85 1A                         STA ball_ypos_lo
0C0CB                           
0C0CB                               ;; update the high byte with carry
0C0CB A5 19                         LDA ball_ypos_hi
0C0CD 69 02                         ADC #BALL_SPEED_HI
0C0CF 85 19                         STA ball_ypos_hi
0C0D1                               
0C0D1                               ;; Check bottom bound
0C0D1 C9 C8                         CMP #BOUND_BOTTOM
0C0D3 90 32                         BCC +checkHorizontalMovement
0C0D5 F0 30                         BEQ +checkHorizontalMovement
0C0D7                           
0C0D7                           
0C0D7                               ;; Change ball direction to "up"
0C0D7 A9 C8                         LDA #BOUND_BOTTOM
0C0D9 85 19                         STA ball_ypos_hi
0C0DB A9 00                         LDA #$00
0C0DD 85 1A                         STA ball_ypos_lo
0C0DF A5 2C                         LDA ball_flags
0C0E1 29 EF                         AND #MOVE_BALL_UP
0C0E3 85 2C                         STA ball_flags
0C0E5 4C 07 C1                      JMP +checkHorizontalMovement
0C0E8                           
0C0E8                           
0C0E8                           +moveBallUp:
0C0E8                               ;; update the low byte
0C0E8 A5 1A                         LDA ball_ypos_lo
0C0EA 38                            SEC
0C0EB E9 30                         SBC #BALL_SPEED_LO
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF                           
0C0EF                               ;; update the high byte with carry
0C0EF A5 19                         LDA ball_ypos_hi
0C0F1 E9 02                         SBC #BALL_SPEED_HI
0C0F3 85 19                         STA ball_ypos_hi
0C0F5                               
0C0F5                               ;; Check top bound
0C0F5 C9 30                         CMP #BOUND_TOP
0C0F7 B0 0E                         BCS +checkHorizontalMovement
0C0F9                           
0C0F9                               ;; Change ball direction to "down"
0C0F9 A9 30                         LDA #BOUND_TOP
0C0FB 85 19                         STA ball_ypos_hi
0C0FD A9 00                         LDA #$00
0C0FF 85 1A                         STA ball_ypos_lo
0C101 A5 2C                         LDA ball_flags
0C103 09 10                         ORA #MOVE_BALL_DOWN
0C105 85 2C                         STA ball_flags
0C107                           
0C107                           
0C107                           +checkHorizontalMovement:
0C107                           
0C107                               ;; Check if ball is being nudged
0C107 A5 33                         LDA nudge_counter
0C109 D0 41                         BNE +doneBallMovement
0C10B                           
0C10B                               ;; Check if left button is held
0C10B A5 0F                         LDA buttons_held
0C10D 29 02                         AND #BUTTON_LEFT
0C10F F0 1B                         BEQ +
0C111                                   ;; update the low byte
0C111 A5 18                             LDA ball_xpos_lo
0C113 38                                SEC
0C114 E9 30                             SBC #BALL_SPEED_LO
0C116 85 18                             STA ball_xpos_lo
0C118                           
0C118                                   ;; update the high byte
0C118 A5 17                             LDA ball_xpos_hi
0C11A E9 02                             SBC #BALL_SPEED_HI
0C11C 85 17                             STA ball_xpos_hi
0C11E                                   
0C11E                                   ;; Check left bound
0C11E C9 10                             CMP #BOUND_LEFT
0C120 B0 2A                             BCS +doneBallMovement
0C122                                   
0C122                                   ;; Set flag to nudge right and set nudge counter
0C122 A5 2C                             LDA ball_flags
0C124 09 02                             ORA #NUDGE_BALL_RIGHT
0C126 20 0C C5                          JSR sub_InitiateNudge
0C129                           
0C129 4C 4C C1                          JMP +doneBallMovement        
0C12C                               +
0C12C                           
0C12C                               ;; Check if right button is held
0C12C A5 0F                         LDA buttons_held
0C12E 29 01                         AND #BUTTON_RIGHT
0C130 F0 1A                         BEQ +
0C132                                   ;; update the low byte
0C132 A5 18                             LDA ball_xpos_lo
0C134 18                                CLC
0C135 69 30                             ADC #BALL_SPEED_LO
0C137 85 18                             STA ball_xpos_lo
0C139                           
0C139                                   ;; update the high byte
0C139 A5 17                             LDA ball_xpos_hi
0C13B 69 02                             ADC #BALL_SPEED_HI
0C13D 85 17                             STA ball_xpos_hi     
0C13F                           
0C13F                                  ;; Check right bound
0C13F C9 E8                             CMP #BOUND_RIGHT
0C141 90 09                             BCC +doneBallMovement
0C143 F0 07                             BEQ +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge left and set nudge timer
0C145 A5 2C                             LDA ball_flags
0C147 29 FD                             AND #NUDGE_BALL_LEFT
0C149 20 0C C5                          JSR sub_InitiateNudge
0C14C                               +
0C14C                           
0C14C                           
0C14C                           +doneBallMovement:
0C14C                           
0C14C                               ;; Check nudge
0C14C A5 33                         LDA nudge_counter
0C14E F0 23                         BEQ +doneBallNudging
0C150 A5 2C                             LDA ball_flags
0C152 29 02                             AND #NUDGE_BALL_RIGHT
0C154 F0 10                             BEQ +nudgeBallLeft
0C156                                   
0C156                                       ;; update the low byte
0C156 A5 18                                 LDA ball_xpos_lo
0C158 18                                    CLC
0C159 69 30                                 ADC #BALL_SPEED_LO
0C15B 85 18                                 STA ball_xpos_lo
0C15D                           
0C15D                                       ;; update the high byte
0C15D A5 17                                 LDA ball_xpos_hi
0C15F 69 02                                 ADC #BALL_SPEED_HI
0C161 85 17                                 STA ball_xpos_hi  
0C163 4C 73 C1                              JMP +doneBallNudging
0C166                                   +nudgeBallLeft:
0C166                                   
0C166                                   ;; update the low byte
0C166 A5 18                             LDA ball_xpos_lo
0C168 38                                SEC
0C169 E9 30                             SBC #BALL_SPEED_LO
0C16B 85 18                             STA ball_xpos_lo
0C16D                           
0C16D                                   ;; update the high byte
0C16D A5 17                             LDA ball_xpos_hi
0C16F E9 02                             SBC #BALL_SPEED_HI
0C171 85 17                             STA ball_xpos_hi
0C173                               +doneBallNudging:
0C173                           
0C173                               ;; Don't update position again until next frame
0C173 E6 2B                         INC ball_update_position
0C175                           
0C175                               
0C175                               ;; Do collision detection
0C175                               .include "game/include/main/collision_detection.asm"
0C175                           
0C175                               ;; Get ball's x-left, x-center, x-right position
0C175 A5 17                         LDA ball_xpos_hi
0C177 18                            CLC
0C178 69 F0                         ADC #BALL_LEFT_WGA
0C17A 85 25                         STA ball_left
0C17C 18                            CLC
0C17D 69 04                         ADC #BALL_HALF_SIZE
0C17F 85 26                         STA ball_center
0C181 18                            CLC
0C182 69 04                         ADC #BALL_HALF_SIZE
0C184 85 27                         STA ball_right
0C186                           
0C186                               ;; Get ball's y-top, y-middle, y-bottom position
0C186 A5 19                         LDA ball_ypos_hi
0C188 18                            CLC
0C189 69 D0                         ADC #BALL_TOP_WGA
0C18B 85 28                         STA ball_top
0C18D 18                            CLC
0C18E 69 04                         ADC #BALL_HALF_SIZE
0C190 85 29                         STA ball_middle
0C192 18                            CLC
0C193 69 04                         ADC #BALL_HALF_SIZE
0C195 85 2A                         STA ball_bottom
0C197                           
0C197                           +checkRightCollision:
0C197                               ;; Check if ball moves right
0C197                               ;; No need to check nudging here as that will never collide with a tile
0C197 A5 0F                         LDA buttons_held
0C199 29 01                         AND #BUTTON_RIGHT
0C19B F0 1C                         BEQ +checkLeftCollision
0C19D                           
0C19D                               ;; Check tile at right position
0C19D A5 29                         LDA ball_middle
0C19F 85 00                         STA temp
0C1A1 A5 27                         LDA ball_right
0C1A3 85 01                         STA temp+1
0C1A5 20 71 C4                      JSR sub_ConvertXYToTileType
0C1A8 29 01                         AND #TILE_IS_SOLID
0C1AA F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1AC                           
0C1AC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1AC A5 2C                         LDA ball_flags
0C1AE 29 FD                         AND #NUDGE_BALL_LEFT
0C1B0 20 0C C5                      JSR sub_InitiateNudge
0C1B3 20 CA C4                      JSR sub_EvaluateTileType
0C1B6 4C D8 C1                      JMP +checkTopCollision
0C1B9                           
0C1B9                           +checkLeftCollision:
0C1B9                               ;; Check if ball moves right
0C1B9                               ;; No need to check nudging here as that will never collide with a tile
0C1B9 A5 0F                         LDA buttons_held
0C1BB 29 02                         AND #BUTTON_LEFT
0C1BD F0 19                         BEQ +checkTopCollision
0C1BF                           
0C1BF                               ;; Check tile at right position
0C1BF A5 29                         LDA ball_middle
0C1C1 85 00                         STA temp
0C1C3 A5 25                         LDA ball_left
0C1C5 85 01                         STA temp+1
0C1C7 20 71 C4                      JSR sub_ConvertXYToTileType
0C1CA 29 01                         AND #TILE_IS_SOLID
0C1CC F0 0A                         BEQ +checkTopCollision
0C1CE                           
0C1CE                               ;; Tile is solid; nudge ball and evaluate tile type
0C1CE A5 2C                         LDA ball_flags
0C1D0 09 02                         ORA #NUDGE_BALL_RIGHT
0C1D2 20 0C C5                      JSR sub_InitiateNudge
0C1D5 20 CA C4                      JSR sub_EvaluateTileType
0C1D8                               
0C1D8                               
0C1D8                           +checkTopCollision:
0C1D8                               ;; Check if ball moves up
0C1D8 A5 2C                         LDA ball_flags
0C1DA 29 10                         AND #BALL_MOVES_DOWN
0C1DC D0 1B                         BNE +checkBottomCollision
0C1DE                           
0C1DE                               ;; Check tile at top position
0C1DE A5 28                         LDA ball_top
0C1E0 85 00                         STA temp
0C1E2 A5 26                         LDA ball_center
0C1E4 85 01                         STA temp+1
0C1E6 20 71 C4                      JSR sub_ConvertXYToTileType
0C1E9 29 01                         AND #TILE_IS_SOLID
0C1EB F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1ED                           
0C1ED                               ;; Tile is solid; move ball down and evaluate tile type
0C1ED A5 2C                         LDA ball_flags
0C1EF 09 10                         ORA #MOVE_BALL_DOWN
0C1F1 85 2C                         STA ball_flags
0C1F3 20 CA C4                      JSR sub_EvaluateTileType
0C1F6 4C 11 C2                      JMP +doneCheckingCollision
0C1F9                           
0C1F9                           +checkBottomCollision:
0C1F9                               ;; No movement check needed: since ball is not moving up, it must move down
0C1F9                           
0C1F9                               ;; Check tile at bottom position
0C1F9 A5 2A                         LDA ball_bottom
0C1FB 85 00                         STA temp
0C1FD A5 26                         LDA ball_center
0C1FF 85 01                         STA temp+1
0C201 20 71 C4                      JSR sub_ConvertXYToTileType
0C204 29 01                         AND #TILE_IS_SOLID
0C206 F0 09                         BEQ +doneCheckingCollision
0C208                           
0C208                               ;; Tile is solid; move ball up and evaluate tile type
0C208 A5 2C                         LDA ball_flags
0C20A 29 EF                         AND #MOVE_BALL_UP
0C20C 85 2C                         STA ball_flags
0C20E 20 CA C4                      JSR sub_EvaluateTileType
0C211                           
0C211                           +doneCheckingCollision:
0C211                           
0C211                           
0C211                               ;; Testinging timed PPU scroll concept
0C211                               .include "game/test/timed_ppuscroll_test.asm"
0C211                           ;; Timed updates (test)
0C211                           
0C211                               ;; If B button is pressed
0C211 A5 10                         LDA buttons_pressed
0C213 29 10                         AND #BUTTON_START
0C215 F0 72                         BEQ +end
0C217                               
0C217                               ;; Set up loop fading
0C217 A9 00                         LDA #$00
0C219 85 07                         STA temp+7
0C21B A0 08                         LDY #$08
0C21D                               -fadeLoop:
0C21D 84 08                             STY temp+8
0C21F                           
0C21F                                   ;; Wait for NMI to pass
0C21F 20 CE C3                          JSR sub_WaitForVBlank
0C222                                   
0C222                                   ;; Now wait for No-sprite 0
0C222                                   -
0C222 AD 02 20                              LDA PPU_STATUS
0C225 29 40                                 AND #SPRITE_0_HIT
0C227 D0 F9                             BNE -
0C229                               
0C229                                   ;; Now wait for Sprite 0
0C229                                   -
0C229 AD 02 20                              LDA PPU_STATUS
0C22C 29 40                                 AND #SPRITE_0_HIT
0C22E F0 F9                             BEQ -
0C230                                       
0C230                                   ;; Setup tile row loop
0C230 A0 16                             LDY #22
0C232                                   -tileLoop:
0C232                                       ;; Disable drawing
0C232 A5 12                                 LDA soft_ppu_mask
0C234 29 F7                                 AND #%11110111
0C236 8D 01 20                              STA PPU_MASK
0C239                                       
0C239                                       ;; Set up scanline loop
0C239 A2 08                                 LDX #$08
0C23B                                       -scanlineLoop:
0C23B E4 08                                     CPX temp+8
0C23D D0 0A                                     BNE +wasteTime
0C23F                                           
0C23F                                           ;; Restore drawing
0C23F A5 12                                     LDA soft_ppu_mask
0C241 09 08                                     ORA #%00001000
0C243 8D 01 20                                  STA PPU_MASK
0C246 4C 4F C2                                  JMP +wasteMoreTime
0C249                           
0C249                                           ;; Waste 12 frames
0C249                                           +wasteTime:
0C249 E6 09                                     INC temp+9   ;+5
0C24B C6 09                                     DEC temp+9   ;+5
0C24D 49 00                                     EOR #$00     ;+2
0C24F                                           
0C24F                                           ;; Waste about 100 frames
0C24F                                           +wasteMoreTime:
0C24F                                           
0C24F 86 01                                     STX temp+1     ;  3 down, 97 to go
0C251 A2 0B                                     LDX #$0B       ;  5 down, 95 to go
0C253                                           -wasteLoop:
0C253 EA                                            NOP
0C254 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C256 CA                                            DEX        ;  5+5L down,  95-5L to go
0C257 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C259                           
0C259 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C25B CA                                        DEX            ;  9+8L down, 91-8L to go
0C25C D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C25E                           
0C25E 88                                    DEY
0C25F D0 D1                             BNE -tileLoop
0C261                           
0C261 A4 08                             LDY temp+8
0C263                                   
0C263 E6 07                             INC temp+7
0C265 A5 07                             LDA temp+7
0C267 C9 02                             CMP #$02
0C269 D0 B2                             BNE -fadeLoop
0C26B                           
0C26B A9 00                             LDA #$00
0C26D 85 07                             STA temp+7
0C26F 88                                DEY
0C270 D0 AB                         BNE -fadeLoop
0C272                               
0C272                               ;; Turn off the screen
0C272 A5 12                         LDA soft_ppu_mask
0C274 29 F7                         AND #%11110111
0C276 8D 01 20                      STA PPU_MASK
0C279                           
0C279                               ;; Load the next level
0C279 E6 34                         INC current_level
0C27B A5 34                         LDA current_level
0C27D C9 19                         CMP #25
0C27F D0 04                         BNE +
0C281 A9 00                             LDA #$00
0C283 85 34                             STA current_level
0C285                               +
0C285                               
0C285 A9 81                         LDA #LOAD_GAME_SCREEN
0C287 85 2D                         STA screen_mode
0C289                           
0C289                           
0C289                           +end:
0C289                           
0C289                           
0C289                           +skipBallMovement:
0C289                               ;; Add to sprite buffer
0C289 A6 32                         LDX sprite_ram_pointer
0C28B A5 19                         LDA ball_ypos_hi
0C28D 9D 00 02                      STA ADDR_SPRITERAM,x
0C290 E8                            INX
0C291 A9 01                         LDA #BALL_TILE_CHR
0C293 9D 00 02                      STA ADDR_SPRITERAM,x
0C296 E8                            INX
0C297 A9 00                         LDA #BALL_ATTR
0C299 9D 00 02                      STA ADDR_SPRITERAM,x
0C29C E8                            INX
0C29D A5 17                         LDA ball_xpos_hi
0C29F 9D 00 02                      STA ADDR_SPRITERAM,x
0C2A2 E8                            INX
0C2A3 86 32                         STX sprite_ram_pointer
0C2A5 4C BE C2                      JMP +doneScreenLoad
0C2A8                           
0C2A8                           
0C2A8                           +checkNextScreen:
0C2A8                           
0C2A8                               ;; Upon pressing START, (next level) design will be drawn
0C2A8                               .include "game/test/load_next_level.asm"
0C2A8                               ;; If START button is pressed
0C2A8 A5 10                         LDA buttons_pressed
0C2AA 29 10                         AND #BUTTON_START
0C2AC F0 10                         BEQ +continue
0C2AE                                   ;; Load the next level
0C2AE E6 34                             INC current_level
0C2B0 A5 34                             LDA current_level
0C2B2 C9 19                             CMP #25
0C2B4 D0 04                             BNE +
0C2B6 A9 00                                 LDA #$00
0C2B8 85 34                                 STA current_level
0C2BA                                   +
0C2BA                                   
0C2BA A9 81                             LDA #LOAD_GAME_SCREEN
0C2BC 85 2D                             STA screen_mode
0C2BE                           
0C2BE                               +continue:
0C2BE                           
0C2BE                           
0C2BE                           +doneScreenLoad:
0C2BE                           
0C2BE                               ;; Upon pressing A, an explosion will happen on screen
0C2BE                               .include "game/test/show_animation.asm"
0C2BE                               ;; If A button is pressed, initiate explosion
0C2BE A5 10                         LDA buttons_pressed
0C2C0 29 80                         AND #BUTTON_A
0C2C2 D0 03                         BNE +
0C2C4 4C F6 C2                          JMP +end
0C2C7                               +
0C2C7                           
0C2C7                               ;; Get most recent slot for explosion
0C2C7 A6 31                         LDX explosion_pointer
0C2C9                           
0C2C9                               ;; If 0, use max pointer value
0C2C9 D0 02                         BNE +
0C2CB A2 04                             LDX #MAX_ANIMATIONS
0C2CD                               +
0C2CD                           
0C2CD                               ;; Decrease pointer by one
0C2CD CA                            DEX
0C2CE 86 31                         STX explosion_pointer
0C2D0                           
0C2D0                               ;; Load explosion data into RAM
0C2D0 A9 00                         LDA #$00
0C2D2 9D 34 03                      STA explosion_currentframe,x
0C2D5 A9 04                         LDA #ANIMATION_SPEED
0C2D7 9D 30 03                      STA explosion_framecounter,x
0C2DA 20 AC C3                      JSR sub_GetRandomNumber
0C2DD                               ;AND #%11110000
0C2DD 9D 3C 03                      STA explosion_x,x
0C2E0 20 AC C3                      JSR sub_GetRandomNumber
0C2E3                               ;AND #%11110000
0C2E3 9D 40 03                      STA explosion_y,x
0C2E6 20 AC C3                      JSR sub_GetRandomNumber
0C2E9 29 02                         AND #%00000010
0C2EB 18                            CLC
0C2EC 69 01                         ADC #$01
0C2EE 9D 38 03                      STA explosion_attributes,x
0C2F1 A9 01                         LDA #$01
0C2F3 9D 44 03                      STA explosion_active,x
0C2F6                           
0C2F6                           
0C2F6                           +end:
0C2F6                           
0C2F6                               ;; Set up loop
0C2F6 A2 00                         LDX #$00
0C2F8                               -loop_load_animation:
0C2F8                                   ;; Check if current animation is active. If not, goto next
0C2F8 BD 44 03                          LDA explosion_active,x
0C2FB D0 03                             BNE +
0C2FD 4C 97 C3                              JMP +next
0C300                                   +
0C300                           
0C300                                   ;; Check the explosion framecounter
0C300 BD 30 03                          LDA explosion_framecounter,x
0C303 D0 26                             BNE +
0C305                                       ;; Framecounter is 0
0C305                                       ;; Reset to animation speed
0C305 A9 04                                 LDA #ANIMATION_SPEED
0C307 9D 30 03                              STA explosion_framecounter,x
0C30A                           
0C30A                                       ;; Set next animation frame, and check if we're done yet
0C30A FE 34 03                              INC explosion_currentframe,x
0C30D BD 34 03                              LDA explosion_currentframe,x
0C310 C9 0A                                 CMP #ANIM_SLIDES
0C312 D0 17                                 BNE +
0C314                           
0C314                                       ;; If we're done, inactivate current explosion, clean
0C314                                       ;; up sprite RAM and go to the next one
0C314 A9 00                                 LDA #$00
0C316 9D 44 03                              STA explosion_active,x
0C319                                       
0C319 A9 09                                 LDA #SLIDE_SIZE
0C31B 0A                                    ASL
0C31C 0A                                    ASL
0C31D A8                                    TAY
0C31E A9 EF                                 LDA #$EF
0C320                                       -
0C320 88                                        DEY
0C321 99 00 02                                  STA ADDR_SPRITERAM,y
0C324 C0 00                                     CPY #00
0C326 D0 F8                                 BNE -
0C328                                       
0C328 4C 97 C3                              JMP +next
0C32B                                   +
0C32B                           
0C32B                                   ;; Load (x,y) position in temp variables
0C32B BD 3C 03                          LDA explosion_x,x
0C32E 85 01                             STA temp+1
0C330 85 03                             STA temp+3
0C332 BD 40 03                          LDA explosion_y,x
0C335 85 02                             STA temp+2
0C337                           
0C337                                   ;; Load attribute in temp variable
0C337 BD 38 03                          LDA explosion_attributes,x
0C33A 85 04                             STA temp+4
0C33C                           
0C33C                                   ;; Load current frame into Y-register
0C33C BC 34 03                          LDY explosion_currentframe,x
0C33F                           
0C33F                                   ;; Load current frame ROM address from table
0C33F B9 86 CA                          LDA explosion_anim_lo,y
0C342 85 0C                             STA pointer
0C344 B9 7C CA                          LDA explosion_anim_hi,y
0C347 85 0D                             STA pointer+1
0C349                           
0C349                                   ;; Save x-register on stack
0C349 8A                                TXA
0C34A 48                                PHA
0C34B                           
0C34B                                   ;; Load sprites into sprite RAM
0C34B A6 32                             LDX sprite_ram_pointer
0C34D A0 00                             LDY #$00
0C34F                           
0C34F                                   ;; Prepare (x,y) offset for loop
0C34F 84 00                             STY temp
0C351                           
0C351                                   -loop_load_sprite:
0C351                                   
0C351                                       ;; Do not draw empty sprites
0C351 B1 0C                                 LDA (pointer),y
0C353 F0 18                                 BEQ +nextSprite
0C355                                   
0C355                                           ;; Add y-position to sprite ram buffer
0C355 A5 02                                     LDA temp+2
0C357 9D 00 02                                  STA ADDR_SPRITERAM,x
0C35A E8                                        INX
0C35B                           
0C35B                                           ;; Get tile number from frame ROM address, and
0C35B                                           ;; add it to sprite ram buffer
0C35B B1 0C                                     LDA (pointer),y
0C35D 9D 00 02                                  STA ADDR_SPRITERAM,x
0C360 E8                                        INX
0C361                           
0C361                                           ;; Add attribute data to sprite ram buffer
0C361 A5 04                                     LDA temp+4
0C363 9D 00 02                                  STA ADDR_SPRITERAM,x
0C366 E8                                        INX
0C367                           
0C367                                           ;; Add x-position to sprite ram buffer
0C367 A5 03                                     LDA temp+3
0C369 9D 00 02                                  STA ADDR_SPRITERAM,x
0C36C E8                                        INX
0C36D                           
0C36D                                       +nextSprite:
0C36D                           
0C36D                                       ;; Check if all sprites are done
0C36D C8                                    INY
0C36E C0 09                                 CPY #SLIDE_SIZE
0C370 F0 21                                 BEQ +done
0C372                           
0C372                                       ;; Update x value
0C372 A5 03                                 LDA temp+3
0C374 18                                    CLC
0C375 69 08                                 ADC #$08
0C377 85 03                                 STA temp+3
0C379                           
0C379                                       ;; Update temp for x,y position
0C379 E6 00                                 INC temp
0C37B A5 00                                 LDA temp
0C37D C9 03                                 CMP #SLIDE_WIDTH
0C37F D0 0F                                 BNE +
0C381                                           ;; Row is done; reset x-position
0C381 A5 01                                     LDA temp+1
0C383 85 03                                     STA temp+3
0C385                           
0C385                                           ;; Update y-position
0C385 A5 02                                     LDA temp+2
0C387 18                                        CLC
0C388 69 08                                     ADC #$08
0C38A 85 02                                     STA temp+2
0C38C                           
0C38C                                           ;; Reset row counter
0C38C A9 00                                     LDA #$00
0C38E 85 00                                     STA temp
0C390                                       +
0C390                           
0C390 4C 51 C3                          JMP -loop_load_sprite
0C393                           
0C393                               +done:
0C393 86 32                             STX sprite_ram_pointer
0C395                           
0C395                                   ;; Retrieve x-register from stack
0C395 68                                PLA
0C396 AA                                TAX
0C397                           
0C397                               +next:
0C397                                   ;; Check if all animations have been updated
0C397 E8                                INX
0C398 E0 04                             CPX #MAX_ANIMATIONS
0C39A F0 03                             BEQ +done
0C39C                           
0C39C 4C F8 C2                      JMP -loop_load_animation
0C39F                           +done:
0C39F                           
0C39F                           
0C39F                               ;; Sprite clean-up
0C39F A6 32                         LDX sprite_ram_pointer
0C3A1 A9 EF                         LDA #$EF
0C3A3                               -
0C3A3 9D 00 02                          STA ADDR_SPRITERAM,x
0C3A6 E8                                INX
0C3A7 D0 FA                         BNE -
0C3A9 4C 57 C0                      JMP MainGameLoop
0C3AC                           
0C3AC                           ;; Subroutines
0C3AC                           .include "include/subroutines.asm"
0C3AC                           
0C3AC                           ;; RNG
0C3AC                           .include "subroutine/GetRandomNumber.asm"
0C3AC                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3AC                           ;;
0C3AC                           ;; subroutine/GetRandomNumber.asm
0C3AC                           ;;
0C3AC                           ;; Simple and fast random number generator by White Flame.
0C3AC                           ;;
0C3AC                           ;; Set random_seed to an arbitrary number to randomize between
0C3AC                           ;; gaming sessions, for instance using the frame counter upon
0C3AC                           ;; pressing START on the intro screen.
0C3AC                           ;;
0C3AC                           ;;     ;; IF START PRESSED:
0C3AC                           ;;     LDA frame_counter
0C3AC                           ;;     STA random_seed
0C3AC                           ;;
0C3AC                           ;; Source:
0C3AC                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C3AC                           ;;
0C3AC                           ;;
0C3AC                           
0C3AC                           sub_GetRandomNumber:
0C3AC                               ;; Force EOR if random_seed is zero
0C3AC A5 16                         LDA random_seed
0C3AE F0 05                         BEQ +doEor
0C3B0                           
0C3B0                               ;; Shift left, and EOR if the high bit is set
0C3B0 0A                            ASL
0C3B1 F0 04                         BEQ +noEor
0C3B3 90 02                         BCC +noEor
0C3B5                           
0C3B5                           +doEor:
0C3B5 49 1D                         EOR #$1D
0C3B7                           
0C3B7                           +noEor:
0C3B7 85 16                         STA random_seed
0C3B9                           
0C3B9 60                            RTS
0C3BA                           
0C3BA                           
0C3BA                           ;; Read controller input
0C3BA                           .include "subroutine/ReadController.asm"
0C3BA                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3BA                           ;;
0C3BA                           ;; subroutine/ReadController.asm
0C3BA                           ;;
0C3BA                           ;; Subroutine that polls the controller and stores the input
0C3BA                           ;; buttons in a variable. This version only handles controller
0C3BA                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C3BA                           ;;
0C3BA                           ;;
0C3BA                           
0C3BA                           sub_ReadController:
0C3BA                           
0C3BA                               ;; Set strobe bit
0C3BA A9 01                         LDA #$01
0C3BC 8D 16 40                      STA JOYPAD_1
0C3BF                           
0C3BF                               ;; Set up ring counter
0C3BF 85 0F                         STA buttons_held
0C3C1                           
0C3C1                               ;; Clear strobe bit
0C3C1 4A                            LSR
0C3C2 8D 16 40                      STA JOYPAD_1
0C3C5                           
0C3C5                               ;; Loop through button presses
0C3C5                               -
0C3C5 AD 16 40                          LDA JOYPAD_1
0C3C8 4A                                LSR
0C3C9 26 0F                             ROL buttons_held
0C3CB                           
0C3CB                               ;; Check if ring counter is done
0C3CB 90 F8                         BCC -
0C3CD                           
0C3CD                               ;; Return from subroutine
0C3CD 60                            RTS
0C3CE                           
0C3CE                           
0C3CE                           ;; vBlank wait
0C3CE                           .include "subroutine/WaitForVBlank.asm"
0C3CE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3CE                           ;;
0C3CE                           ;; subroutine/WaitForVBlank.asm
0C3CE                           ;;
0C3CE                           ;; Subroutine that essentially pauses script execution until
0C3CE                           ;; vBlank happens.
0C3CE                           ;;
0C3CE                           ;;
0C3CE                           
0C3CE                           sub_WaitForVBlank:
0C3CE 2C 02 20                      BIT $2002
0C3D1 10 FB                         BPL sub_WaitForVBlank
0C3D3 60                            RTS
0C3D4                           
0C3D4                           
0C3D4                           ;; Game specific subroutines
0C3D4                           .include "game/include/subroutines.asm"
0C3D4                           ;; additional game-specific subroutines go here
0C3D4                           
0C3D4                           .include "game/subroutine/ClearScreen.asm"
0C3D4                           ;; Subroutine to clear the screen
0C3D4                           ;; If it's a game screen, add noise
0C3D4                           
0C3D4                           sub_ClearScreen:
0C3D4                               ;; Check of game screen or not
0C3D4 A5 2D                         LDA screen_mode
0C3D6 29 03                         AND #CHECK_SCREEN_MODE
0C3D8 C9 01                         CMP #IS_GAME_SCREEN
0C3DA F0 02                         BEQ +
0C3DC A9 00                             LDA #$00
0C3DE                               +
0C3DE 85 01                         STA temp+1
0C3E0                               
0C3E0                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C3E0 2C 02 20                      BIT PPU_STATUS
0C3E3 A9 20                         LDA #$20
0C3E5 8D 06 20                      STA PPU_ADDR
0C3E8 A9 00                         LDA #$00
0C3EA 8D 06 20                      STA PPU_ADDR
0C3ED                               
0C3ED                               ;; Set up tile to draw and loop
0C3ED 85 00                         STA temp
0C3EF AA                            TAX
0C3F0 A8                            TAY
0C3F1                           
0C3F1                               -     
0C3F1                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C3F1 A5 00                             LDA temp
0C3F3 8D 07 20                          STA PPU_DATA
0C3F6                           
0C3F6                                   ;; Check if we should draw noise next. Noise is drawn if:
0C3F6                                   ;; - Screen mode is game screen
0C3F6                                   ;; - Y between #$06 and #$19 (inclusive)
0C3F6                                   ;; - X between #$02 and #$1D (inclusive)
0C3F6                                   
0C3F6                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C3F6 A5 01                             LDA temp+1
0C3F8 F0 1C                             BEQ +nextTileInRow
0C3FA                                   
0C3FA                                   ;; If Y < $6, skip the check
0C3FA C0 06                             CPY #$06
0C3FC 90 18                             BCC +nextTileInRow
0C3FE                                   
0C3FE                                   ;; If X < $1, skip the check
0C3FE E0 01                             CPX #$01
0C400 90 14                             BCC +nextTileInRow
0C402                                   
0C402                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C402 E0 1D                             CPX #$1D
0C404 D0 04                             BNE +
0C406 A9 00                                 LDA #$00
0C408 85 00                                 STA temp
0C40A                                   +
0C40A B0 0A                             BCS +nextTileInRow
0C40C                                   
0C40C                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C40C 20 AC C3                          JSR sub_GetRandomNumber
0C40F 29 07                             AND #%00000111
0C411 18                                CLC
0C412 69 68                             ADC #$68
0C414 85 00                             STA temp
0C416                           
0C416                           +nextTileInRow:
0C416                                   
0C416                                   ;; Check if a row has been done. If not, draw the next
0C416 E8                                INX
0C417 E0 20                             CPX #$20
0C419 D0 D6                             BNE -
0C41B                                   
0C41B                                   ;; Go to the next row (if any left)
0C41B A2 00                             LDX #00
0C41D C8                                INY
0C41E                                   
0C41E                                   ;; If Y is 1A, skip noise tile check until done drawing
0C41E C0 1A                             CPY #$1A
0C420 D0 04                             BNE +
0C422 A9 00                                 LDA #$00
0C424 85 01                                 STA temp+1
0C426                                   +
0C426                                   
0C426 C0 1E                             CPY #$1E
0C428 D0 C7                         BNE -
0C42A                           
0C42A                               ;; Clear attribute table
0C42A A9 23                         LDA #$23
0C42C 8D 06 20                      STA PPU_ADDR
0C42F A9 C0                         LDA #$C0
0C431 8D 06 20                      STA PPU_ADDR
0C434 A9 00                         LDA #$00
0C436 A2 40                         LDX #$40
0C438                               -
0C438 8D 07 20                          STA PPU_DATA
0C43B CA                                DEX
0C43C D0 FA                         BNE -
0C43E                               
0C43E 60                            RTS0C43F                           .include "game/subroutine/ColorizeBall.asm"
0C43F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C43F                           ;;
0C43F                           ;;  Subroutine: ColorizeBall
0C43F                           ;;
0C43F                           ;;  Applies the color set through ball_flags to the ball sprite.
0C43F                           ;;
0C43F                           ;;
0C43F                           
0C43F                           
0C43F                           sub_ColorizeBall:
0C43F                           
0C43F                               ;; Get color from ball_flags
0C43F 4A                            LSR
0C440 4A                            LSR
0C441 4A                            LSR
0C442 4A                            LSR
0C443 4A                            LSR
0C444 AA                            TAX
0C445                           
0C445                               ;; Add new light color of ball to PPU palette
0C445 A9 3F                         LDA #$3F
0C447 85 00                         STA temp
0C449 A9 11                         LDA #$11
0C44B 85 01                         STA temp+1
0C44D BD 96 CA                      LDA tbl_BallColorLight,x
0C450 85 02                         STA temp+2
0C452 20 32 C9                      JSR sub_WriteByteToPPUBuffer
0C455                               
0C455                               ;; Add new dark color of ball to PPU palette
0C455 E6 01                         INC temp+1
0C457 BD 90 CA                      LDA tbl_BallColorDark,x
0C45A 85 02                         STA temp+2
0C45C 20 32 C9                      JSR sub_WriteByteToPPUBuffer
0C45F                               
0C45F 60                            RTS
0C460                           
0C460                           .include "game/subroutine/ColorsMatch.asm"
0C460                           
0C460                           ;; Subroutine to check if ball color matches colliding tile color
0C460                           
0C460                           sub_ColorsMatch:
0C460                               ;; Save tile color in temp variable
0C460 A5 35                         LDA colliding_tile
0C462 29 0E                         AND #%00001110
0C464 85 00                         STA temp
0C466                           
0C466                               ;; Get ball color
0C466 A5 2C                         LDA ball_flags
0C468 29 E0                         AND #%11100000
0C46A 4A                            LSR
0C46B 4A                            LSR
0C46C 4A                            LSR
0C46D 4A                            LSR
0C46E                           
0C46E                               ;; Compare with tile color
0C46E C5 00                         CMP temp
0C470 60                            RTS
0C471                           
0C471                           .include "game/subroutine/ConvertXYToTileType.asm"
0C471                           
0C471                           ;; Subroutine to convert the ball's position to a tile type
0C471                           ;; - Expects temp to be y-position of ball within game area
0C471                           ;; - Expects temp+1 to be x-position of ball within game area
0C471                           ;; - Puts result in accumulator and zp variable
0C471                           ;; - Corrupts X-register
0C471                           
0C471                           sub_ConvertXYToTileType:
0C471 A5 01                         LDA temp+1
0C473 4A                            LSR
0C474 4A                            LSR
0C475 4A                            LSR
0C476 4A                            LSR
0C477 85 09                         STA temp+9
0C479 A5 00                         LDA temp
0C47B 29 F0                         AND #%11110000
0C47D 18                            CLC
0C47E 65 09                         ADC temp+9
0C480 85 09                         STA temp+9
0C482 AA                            TAX
0C483 BD 00 04                      LDA ADDR_SCREENTILERAM, x
0C486 85 35                         STA colliding_tile
0C488 60                            RTS
0C489                           
0C489                           .include "game/subroutine/DisableEnableRendering.asm"
0C489                           sub_DisableRendering:
0C489                               ;; Force NMI skip, disable rendering
0C489 A9 01                     	LDA #$01
0C48B 85 14                     	STA force_skip_nmi
0C48D 20 CE C3                      JSR sub_WaitForVBlank
0C490 A5 12                         LDA soft_ppu_mask
0C492 29 E7                         AND #%11100111
0C494 8D 01 20                      STA PPU_MASK
0C497 85 12                         STA soft_ppu_mask
0C499 20 CE C3                      JSR sub_WaitForVBlank
0C49C 60                            RTS
0C49D                           
0C49D                           sub_EnableRendering:
0C49D                               ;; Enable rendering
0C49D A9 00                     	LDA #$00
0C49F 8D 05 20                  	STA PPU_SCROLL
0C4A2 8D 05 20                  	STA PPU_SCROLL
0C4A5 20 CE C3                      JSR sub_WaitForVBlank
0C4A8 85 14                     	STA force_skip_nmi
0C4AA A5 12                         LDA soft_ppu_mask
0C4AC 09 18                         ORA #%00011000
0C4AE 85 12                         STA soft_ppu_mask
0C4B0 8D 01 20                      STA PPU_MASK
0C4B3 20 CE C3                      JSR sub_WaitForVBlank
0C4B6 60                            RTS
0C4B7                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C4B7                           sub_drawIntroScreenLogoTile:
0C4B7 B9 78 C9                      LDA tbl_IntroScreenLogoChr,y
0C4BA C9 60                         CMP #$60
0C4BC D0 08                         BNE +
0C4BE 20 AC C3                          JSR sub_GetRandomNumber
0C4C1 29 07                             AND #$07
0C4C3 18                                CLC
0C4C4 69 60                             ADC #$60
0C4C6                               +
0C4C6 8D 07 20                      STA PPU_DATA
0C4C9 60                            RTS
0C4CA                           .include "game/subroutine/EvaluateTileType.asm"
0C4CA                           
0C4CA                           ;; Subroutine to evaluate the colliding tile type and take its
0C4CA                           ;; corresponding action (move block, kill player, ...)
0C4CA                           ;; - Expects X-register to be the ADDR_SCREENTILERAM offset
0C4CA                           ;; - Uses zp variable colliding_tile
0C4CA                           
0C4CA                           sub_EvaluateTileType:
0C4CA                           
0C4CA                               ;; Check if collided tile is a color block
0C4CA A5 35                         LDA colliding_tile
0C4CC 29 80                         AND #IS_COLOR_BLOCK
0C4CE F0 07                         BEQ +checkIfPaintBlock
0C4D0                                   ;; It's a color block. Check if the colors match
0C4D0 20 60 C4                          JSR sub_ColorsMatch
0C4D3 F0 01                             BEQ +
0C4D5                                       ;; Colors don't match - return
0C4D5 60                                    RTS
0C4D6                                   +
0C4D6                           
0C4D6                                   ;; Colors match. Destroy color block
0C4D6                                   ;; - Add the tiles that need updating to ppu buffer
0C4D6                                   ;; - Load destruction animation on tile
0C4D6                                   ;; - Write #$00 in tile type ram (makes not-solid)
0C4D6                                   ;; - Update attribute table accordingly through ppu buffer
0C4D6                                   ;; - If there are no color blocks left:
0C4D6                                   ;;   - Freeze ball
0C4D6                                   ;;   - Initiate level-win state
0C4D6                                   ;; (@TODO)
0C4D6 60                                RTS
0C4D7                               +checkIfPaintBlock:
0C4D7                               
0C4D7                               ;; Check if collided tile is a paint block
0C4D7 A5 35                         LDA colliding_tile
0C4D9 29 20                         AND #IS_PAINT_BLOCK
0C4DB F0 1A                         BEQ +checkIfDeathBlock
0C4DD                                   ;; It's a paint block. Update ball color
0C4DD                                   ;; Save x-register
0C4DD 8A                                TXA
0C4DE 48                                PHA
0C4DF                           
0C4DF                                   ;; Get tile color
0C4DF A5 35                             LDA colliding_tile
0C4E1 29 0E                             AND #%00001110
0C4E3 0A                                ASL
0C4E4 0A                                ASL
0C4E5 0A                                ASL
0C4E6 0A                                ASL
0C4E7 85 00                             STA temp
0C4E9                           
0C4E9                                   ;; Apply tile color to ball
0C4E9 A5 2C                             LDA ball_flags
0C4EB 29 1F                             AND #%00011111
0C4ED 05 00                             ORA temp
0C4EF 85 2C                             STA ball_flags
0C4F1 20 3F C4                          JSR sub_ColorizeBall
0C4F4                           
0C4F4                                   ;; Restore x-register
0C4F4 68                                PLA
0C4F5 AA                                TAX
0C4F6                           
0C4F6                                   ;; Return
0C4F6 60                                RTS
0C4F7                               +checkIfDeathBlock:
0C4F7                           
0C4F7                               ;; Check if collided tile is a death block
0C4F7 A5 35                         LDA colliding_tile
0C4F9 29 10                         AND #IS_DEATH_BLOCK
0C4FB F0 01                         BEQ +checkIfMoveBlock
0C4FD                                   ;; It is a death block. Kill player and return (@TODO)
0C4FD                           ;        LDA ball_flags
0C4FD                           ;        ORA #%00000101
0C4FD                           ;        STA ball_flags
0C4FD 60                                RTS
0C4FE                               +checkIfMoveBlock:
0C4FE                           
0C4FE                               ;; Check if collided tile is a move block
0C4FE A5 35                         LDA colliding_tile
0C500 29 40                         AND #IS_MOVE_BLOCK
0C502 F0 07                         BEQ +done
0C504                                   ;; It is a move block. Check if colors match
0C504 20 60 C4                          JSR sub_ColorsMatch
0C507 F0 01                             BEQ +
0C509                                       ;; Colors don't match - return
0C509 60                                    RTS
0C50A                                   +
0C50A                           
0C50A                                   ;; Colors match.
0C50A                                   ;; - Check if next tile is a solid
0C50A                                   ;; - If not, move the tile:
0C50A                                   ;;   - Add the tiles that need updating to ppu buffer
0C50A                                   ;;   - Add move tile sprite over the original tile
0C50A                                   ;;   - Initiate moving the sprite that way for 16px
0C50A                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C50A                                   ;;   - Update attribute table accordingly through ppu buffer
0C50A                                   ;; - After moving the sprite, in a different routine:
0C50A                                   ;;   - Add move tile data on the new tile location
0C50A                                   ;;   - Write the original tile type data on new position in ram
0C50A                                   ;;   - Destroy sprite
0C50A                                   ;;   - Update attribute table accordingly through ppu buffer
0C50A                                   ;; (@TODO)
0C50A 60                                RTS
0C50B                               +done:
0C50B                           
0C50B                               ;; Return
0C50B 60                            RTS
0C50C                           
0C50C                           .include "game/subroutine/InitiateNudge.asm"
0C50C                           
0C50C                           sub_InitiateNudge:
0C50C 85 2C                         STA ball_flags
0C50E A9 03                         LDA #NUDGE_FRAMES
0C510 85 33                         STA nudge_counter
0C512 60                            RTS
0C513                           
0C513                           .include "game/subroutine/JumpToPointer.asm"
0C513                           sub_JumpToPointer:
0C513 6C 0C 00                      JMP (pointer)
0C516                               ;RTS must be handled by the routine (pointer) jumps to
0C516                           .include "game/subroutine/LoadGameScreen.asm"
0C516                           sub_LoadGameScreen:
0C516                           
0C516                               ;; Clear the screen
0C516 20 D4 C3                      JSR sub_ClearScreen
0C519                               
0C519                               ;; Clear collision and attribute data
0C519 A2 00                         LDX #$00
0C51B 8A                            TXA
0C51C                               -
0C51C 9D 00 04                          STA tile_type,x
0C51F E8                                INX
0C520 D0 FA                         BNE -
0C522                               
0C522                               ;; Get pointer from current level
0C522 A6 34                         LDX current_level
0C524 BD 9A D1                      LDA tbl_lvl_layout_lo,x
0C527 85 0C                         STA pointer
0C529 BD 81 D1                      LDA tbl_lvl_layout_hi,x
0C52C 85 0D                         STA pointer+1
0C52E                           
0C52E                               ;; Set up the loop
0C52E A0 00                         LDY #$00
0C530                           -drawRowColumnLoop:
0C530                           
0C530                               ;; Load (x,y) of current set of tiles
0C530 B1 0C                         LDA (pointer),y
0C532                           
0C532                               ;; Check if level is done; if so, skip the loop
0C532 C9 FF                         CMP #LEVEL_END
0C534 D0 03                         BNE +
0C536 4C 7F C6                          JMP +doneLevelLoad
0C539                               +
0C539                           
0C539                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C539 85 00                         STA temp
0C53B C8                            INY
0C53C B1 0C                         LDA (pointer),y
0C53E 85 01                         STA temp+1
0C540                               
0C540                               ;; Convert (x,y) to PPU address
0C540                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C540 A5 00                         LDA temp
0C542 29 0F                         AND #%00001111
0C544 4A                            LSR
0C545 4A                            LSR
0C546 09 20                         ORA #$20
0C548 85 02                         STA temp+2
0C54A                               
0C54A                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C54A A5 00                         LDA temp
0C54C 29 F0                         AND #%11110000
0C54E 4A                            LSR
0C54F 4A                            LSR
0C550 4A                            LSR
0C551 85 03                         STA temp+3
0C553                               
0C553 A5 00                         LDA temp
0C555 29 03                         AND #%00000011
0C557 AA                            TAX
0C558 BD E5 D1                      LDA tbl_Times64,x
0C55B 18                            CLC
0C55C 65 03                         ADC temp+3
0C55E 18                            CLC
0C55F 69 C2                         ADC #$C2
0C561 85 03                         STA temp+3
0C563                               
0C563                               ;; Add carry to temp+2
0C563 A5 02                         LDA temp+2
0C565 69 00                         ADC #$00
0C567 85 02                         STA temp+2
0C569                           
0C569                               ;; Convert tile data to loop count and tile type
0C569                               ;; temp+4 = color
0C569 A5 01                         LDA temp+1
0C56B 29 07                         AND #%00000111
0C56D 85 04                         STA temp+4
0C56F                               
0C56F                               ;; If color = 7, this is a wall
0C56F C9 07                         CMP #%00000111
0C571 F0 12                         BEQ +wallHack
0C573                                   
0C573                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C573 29 01                             AND #%00000001
0C575 F0 02                             BEQ +
0C577 A9 05                                 LDA #$05
0C579                                   +
0C579 85 07                             STA temp+7
0C57B                                
0C57B                                   ;; temp+5 = tile type
0C57B A5 01                             LDA temp+1
0C57D 4A                                LSR
0C57E 4A                                LSR
0C57F 4A                                LSR
0C580 29 03                             AND #%00000011
0C582 4C 8B C5                          JMP +setTileType
0C585                               +wallHack:
0C585                               
0C585                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C585 A9 00                         LDA #$00
0C587 85 07                         STA temp+7
0C589 A9 04                         LDA #$04
0C58B                           
0C58B                           +setTileType:    
0C58B 85 05                         STA temp+5
0C58D                               
0C58D                               ;; X = tile offset
0C58D 18                            CLC
0C58E 65 07                         ADC temp+7
0C590 AA                            TAX
0C591                               
0C591                               ;; temp+6 = number of tiles
0C591 A5 01                         LDA temp+1
0C593 29 60                         AND #%01100000
0C595 4A                            LSR
0C596 4A                            LSR
0C597 4A                            LSR
0C598 4A                            LSR
0C599 4A                            LSR
0C59A 85 06                         STA temp+6
0C59C                               
0C59C                               ;; Translate (x,y) to (y,x) for tile RAM
0C59C A5 00                         LDA temp
0C59E 0A                            ASL
0C59F 0A                            ASL
0C5A0 0A                            ASL
0C5A1 0A                            ASL
0C5A2 85 08                         STA temp+8
0C5A4 A5 00                         LDA temp
0C5A6 4A                            LSR
0C5A7 4A                            LSR
0C5A8 4A                            LSR
0C5A9 4A                            LSR
0C5AA 05 08                         ORA temp+8
0C5AC 85 00                         STA temp
0C5AE                               
0C5AE                               ;; Set up loop
0C5AE 98                            TYA
0C5AF 48                            PHA
0C5B0 A4 06                         LDY temp+6
0C5B2                           
0C5B2                               -drawTileLoop:
0C5B2                                   ;; Write PPU address
0C5B2 2C 02 20                          BIT PPU_STATUS
0C5B5 A5 02                             LDA temp+2
0C5B7 8D 06 20                          STA PPU_ADDR
0C5BA A5 03                             LDA temp+3
0C5BC 8D 06 20                          STA PPU_ADDR
0C5BF                                   
0C5BF                                   ;; Write first and second tile
0C5BF BD E9 D1                          LDA tbl_GametileTopLeft,x
0C5C2 8D 07 20                          STA PPU_DATA
0C5C5 BD F3 D1                          LDA tbl_GametileTopRight,x
0C5C8 8D 07 20                          STA PPU_DATA
0C5CB                                   
0C5CB                                   ;; Update PPU address
0C5CB 2C 02 20                          BIT PPU_STATUS
0C5CE A5 02                             LDA temp+2
0C5D0 8D 06 20                          STA PPU_ADDR
0C5D3 A5 03                             LDA temp+3
0C5D5 18                                CLC
0C5D6 69 20                             ADC #$20
0C5D8 8D 06 20                          STA PPU_ADDR
0C5DB                                   
0C5DB                                   ;; Write third and fourth tile
0C5DB BD FD D1                          LDA tbl_GametileBottomLeft,x
0C5DE 8D 07 20                          STA PPU_DATA
0C5E1 BD 07 D2                          LDA tbl_GametileBottomRight,x
0C5E4 8D 07 20                          STA PPU_DATA
0C5E7                           
0C5E7                                   ;; Push x-register to stack
0C5E7 8A                                TXA
0C5E8 48                                PHA
0C5E9                                   
0C5E9                                   ;; Update tile RAM (aka collision table)
0C5E9 A6 05                             LDX temp+5
0C5EB BD 11 D2                          LDA tbl_GameTileRamByte,x
0C5EE 05 04                             ORA temp+4
0C5F0 0A                                ASL
0C5F1 09 01                             ORA #%00000001
0C5F3 A6 00                             LDX temp
0C5F5 9D 00 04                          STA tile_type,x
0C5F8                           
0C5F8                                   ;; Check if shade 1 should be drawn
0C5F8 E8                                INX
0C5F9 BD 00 04                          LDA tile_type,x
0C5FC D0 05                             BNE +
0C5FE A9 00                                 LDA #$00
0C600 8D 07 20                              STA PPU_DATA
0C603                                   +
0C603                                   
0C603                                   ;; Check if shade 2 should be drawn
0C603 A5 03                             LDA temp+3
0C605 18                                CLC
0C606 69 41                             ADC #$41
0C608 85 03                             STA temp+3
0C60A A5 02                             LDA temp+2
0C60C 69 00                             ADC #$00
0C60E 85 02                             STA temp+2
0C610                                   
0C610 8A                                TXA
0C611 18                                CLC
0C612 69 0F                             ADC #$0F
0C614 AA                                TAX
0C615                                   
0C615 BD 00 04                          LDA tile_type,x
0C618 D0 0F                             BNE +
0C61A A5 02                                 LDA temp+2
0C61C 8D 06 20                              STA PPU_ADDR
0C61F A5 03                                 LDA temp+3
0C621 8D 06 20                              STA PPU_ADDR
0C624 A9 00                                 LDA #$00
0C626 8D 07 20                              STA PPU_DATA
0C629                                   +
0C629                           
0C629                                   ;; Check if shade 3 should be drawn
0C629 E8                                INX
0C62A E6 03                             INC temp+3
0C62C BD 00 04                          LDA tile_type,x
0C62F D0 0F                             BNE +
0C631 A5 02                                 LDA temp+2
0C633 8D 06 20                              STA PPU_ADDR
0C636 A5 03                                 LDA temp+3
0C638 8D 06 20                              STA PPU_ADDR
0C63B A9 00                                 LDA #$00
0C63D 8D 07 20                              STA PPU_DATA
0C640                                   +
0C640                                   
0C640                                   ;; Restore x-register from stack
0C640 68                                PLA
0C641 AA                                TAX
0C642                                   
0C642                                   ;; Reset pointer for next tile
0C642 A5 03                             LDA temp+3
0C644 38                                SEC
0C645 E9 42                             SBC #$42
0C647 85 03                             STA temp+3
0C649 A5 02                             LDA temp+2
0C64B E9 00                             SBC #$00
0C64D 85 02                             STA temp+2
0C64F                                   
0C64F                                   ;; Draw next metatile in this loop (if any left)
0C64F 88                                DEY
0C650 30 27                             BMI +doneDrawingRowColumn
0C652                                   
0C652                                   ;; Is it a row or a column?
0C652 A5 01                             LDA temp+1
0C654 10 17                             BPL +
0C656                                       ;; It is a column: move pointer down (+$40)
0C656 A5 03                                 LDA temp+3
0C658 18                                    CLC
0C659 69 40                                 ADC #$40
0C65B 85 03                                 STA temp+3
0C65D A5 02                                 LDA temp+2
0C65F 69 00                                 ADC #$00
0C661 85 02                                 STA temp+2
0C663                                       
0C663                                       ;; Add 16 to temp (as a tile RAM pointer)
0C663 A5 00                                 LDA temp
0C665 18                                    CLC
0C666 69 10                                 ADC #$10
0C668 85 00                                 STA temp
0C66A 4C 76 C6                              JMP +drawNextTile
0C66D                                   +
0C66D                                   
0C66D                                   ;; It is a row: move pointer right (+$02)
0C66D A5 03                             LDA temp+3
0C66F 18                                CLC
0C670 69 02                             ADC #$02
0C672 85 03                             STA temp+3
0C674                                   
0C674                                   ;; Add 1 to temp (as a tile RAM pointer)
0C674 E6 00                             INC temp
0C676                           
0C676                               
0C676                               ;; Next tile in the row/column
0C676                                   +drawNextTile:
0C676 4C B2 C5                      JMP -drawTileLoop
0C679                           
0C679                               ;; Go to the next set of tiles
0C679                           +doneDrawingRowColumn:
0C679 68                            PLA
0C67A A8                            TAY
0C67B C8                            INY
0C67C 4C 30 C5                      JMP -drawRowColumnLoop
0C67F                           
0C67F                           ;; Level loading is done
0C67F                           +doneLevelLoad:
0C67F                           
0C67F                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C67F A9 20                         LDA #$20
0C681 8D 06 20                      STA PPU_ADDR
0C684 A9 A2                         LDA #$A2
0C686 8D 06 20                      STA PPU_ADDR
0C689 A9 35                         LDA #$35
0C68B 20 99 C8                      JSR sub_Draw28HorizontalTiles
0C68E                           
0C68E                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C68E A9 23                         LDA #$23
0C690 8D 06 20                      STA PPU_ADDR
0C693 A9 42                         LDA #$42
0C695 8D 06 20                      STA PPU_ADDR
0C698 A9 31                         LDA #$31
0C69A 20 99 C8                      JSR sub_Draw28HorizontalTiles
0C69D                           
0C69D                               ;; Left & right game bounds
0C69D                               ;; Set PPU_ADDR and store in temp variables
0C69D A9 20                         LDA #$20
0C69F 85 00                         STA temp
0C6A1 8D 06 20                      STA PPU_ADDR
0C6A4 A9 C1                         LDA #$C1
0C6A6 85 01                         STA temp+1
0C6A8 8D 06 20                      STA PPU_ADDR
0C6AB                               
0C6AB                               ;; Set vertical bound tile and set up loop
0C6AB A0 33                         LDY #$33
0C6AD A2 14                         LDX #20
0C6AF                               -
0C6AF                                   ;; Show left tile
0C6AF 8C 07 20                          STY PPU_DATA
0C6B2                                   
0C6B2                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C6B2 A5 00                             LDA temp
0C6B4 8D 06 20                          STA PPU_ADDR
0C6B7 A5 01                             LDA temp+1
0C6B9 18                                CLC
0C6BA 69 1D                             ADC #29
0C6BC 85 01                             STA temp+1
0C6BE 8D 06 20                          STA PPU_ADDR
0C6C1                           
0C6C1                                   ;; Show right tile
0C6C1 8C 07 20                          STY PPU_DATA
0C6C4                           
0C6C4                                   ;; Check if we're done yet
0C6C4 CA                                DEX
0C6C5 F0 18                             BEQ +drawCorners
0C6C7                                   
0C6C7                                   ;; Not done yet: add 3 to low byte for next left bound
0C6C7 A5 01                             LDA temp+1
0C6C9 18                                CLC
0C6CA 69 03                             ADC #3
0C6CC 85 01                             STA temp+1
0C6CE                                   
0C6CE                                   ;; Apply carry to high byte
0C6CE A5 00                             LDA temp
0C6D0 69 00                             ADC #$00
0C6D2 85 00                             STA temp
0C6D4                                   
0C6D4                                   ;; Store next PPU_ADDR to draw at
0C6D4 8D 06 20                          STA PPU_ADDR
0C6D7 A5 01                             LDA temp+1
0C6D9 8D 06 20                          STA PPU_ADDR
0C6DC 4C AF C6                      JMP -
0C6DF                               
0C6DF                               
0C6DF                           
0C6DF                           +drawCorners:
0C6DF                               ;; Draw the corners of the playing field
0C6DF A9 20                         LDA #$20
0C6E1 8D 06 20                      STA PPU_ADDR
0C6E4 A9 A1                         LDA #$A1
0C6E6 8D 06 20                      STA PPU_ADDR
0C6E9 A9 39                         LDA #$39
0C6EB 8D 07 20                      STA PPU_DATA
0C6EE                           
0C6EE A9 20                         LDA #$20
0C6F0 8D 06 20                      STA PPU_ADDR
0C6F3 A9 BE                         LDA #$BE
0C6F5 8D 06 20                      STA PPU_ADDR
0C6F8 A9 3A                         LDA #$3A
0C6FA 8D 07 20                      STA PPU_DATA
0C6FD                           
0C6FD A9 23                         LDA #$23
0C6FF 8D 06 20                      STA PPU_ADDR
0C702 A9 41                         LDA #$41
0C704 8D 06 20                      STA PPU_ADDR
0C707 A9 36                         LDA #$36
0C709 8D 07 20                      STA PPU_DATA
0C70C                           
0C70C A9 23                         LDA #$23
0C70E 8D 06 20                      STA PPU_ADDR
0C711 A9 5E                         LDA #$5E
0C713 8D 06 20                      STA PPU_ADDR
0C716 A9 34                         LDA #$34
0C718 8D 07 20                      STA PPU_DATA
0C71B                           
0C71B                           
0C71B                               ;; Draw the hud labels
0C71B A9 20                         LDA #$20
0C71D 8D 06 20                      STA PPU_ADDR
0C720 A9 62                         LDA #$62
0C722 8D 06 20                      STA PPU_ADDR
0C725 A2 00                         LDX #$00
0C727                               -
0C727 BD 16 D2                          LDA tbl_HudText,x
0C72A 8D 07 20                          STA PPU_DATA
0C72D E8                                INX
0C72E E0 1C                             CPX #28
0C730 D0 F5                         BNE -
0C732                           
0C732                           
0C732                               ;; Draw the current score
0C732 A9 20                         LDA #$20
0C734 8D 06 20                      STA PPU_ADDR
0C737 A9 83                         LDA #$83
0C739 8D 06 20                      STA PPU_ADDR
0C73C A2 00                         LDX #$00
0C73E                               -
0C73E B5 1C                             LDA ball_score,x
0C740 18                                CLC
0C741 69 01                             ADC #$01
0C743 8D 07 20                          STA PPU_DATA
0C746 E8                                INX
0C747 E0 06                             CPX #$06
0C749 D0 F3                         BNE -
0C74B                           
0C74B                           
0C74B                               ;; Draw the level number
0C74B                               ;; (with primitive HEX>DEC)
0C74B A5 34                         LDA current_level
0C74D 18                            CLC
0C74E 69 01                         ADC #$01
0C750 85 01                         STA temp+1
0C752                               
0C752 C9 14                         CMP #20
0C754 B0 13                         BCS +tempIsTwo
0C756                               
0C756 C9 0A                         CMP #10
0C758 B0 05                         BCS +tempIsOne
0C75A                               
0C75A A9 00                         LDA #$00
0C75C 4C 70 C7                      JMP +setTemp
0C75F                               
0C75F                           +tempIsOne:
0C75F 38                            SEC
0C760 E9 0A                         SBC #10
0C762 85 01                         STA temp+1
0C764 A9 01                         LDA #$01
0C766 4C 70 C7                      JMP +setTemp
0C769                               
0C769                           +tempIsTwo:
0C769 38                            SEC
0C76A E9 14                         SBC #20
0C76C 85 01                         STA temp+1
0C76E A9 02                         LDA #$02
0C770                           
0C770                           +setTemp:
0C770 85 00                         STA temp
0C772                               
0C772 E6 00                         INC temp
0C774 E6 01                         INC temp+1
0C776                               
0C776 A9 20                         LDA #$20
0C778 8D 06 20                      STA PPU_ADDR
0C77B A9 8B                         LDA #$8B
0C77D 8D 06 20                      STA PPU_ADDR
0C780 A5 00                         LDA temp
0C782 8D 07 20                      STA PPU_DATA
0C785 A5 01                         LDA temp+1
0C787 8D 07 20                      STA PPU_DATA
0C78A                           
0C78A                           
0C78A                               ;; Draw lives (presumes lives to be capped at 9)
0C78A A9 20                         LDA #$20
0C78C 8D 06 20                      STA PPU_ADDR
0C78F A9 92                         LDA #$92
0C791 8D 06 20                      STA PPU_ADDR
0C794 A6 1B                         LDX ball_lives
0C796 E8                            INX
0C797 8E 07 20                      STX PPU_DATA
0C79A                           
0C79A                           
0C79A                               ;; Set and draw bonus
0C79A A9 07                         LDA #$07
0C79C 85 22                         STA ball_bonus
0C79E A9 09                         LDA #$09
0C7A0 85 23                         STA ball_bonus+1
0C7A2 85 24                         STA ball_bonus+2
0C7A4                               
0C7A4 A9 20                         LDA #$20
0C7A6 8D 06 20                      STA PPU_ADDR
0C7A9 A9 9A                         LDA #$9A
0C7AB 8D 06 20                      STA PPU_ADDR
0C7AE A2 00                         LDX #$00
0C7B0                               -
0C7B0 B5 22                             LDA ball_bonus,x
0C7B2 18                                CLC
0C7B3 69 01                             ADC #$01
0C7B5 8D 07 20                          STA PPU_DATA
0C7B8 E8                                INX
0C7B9 E0 03                             CPX #$03
0C7BB D0 F3                         BNE -
0C7BD                           
0C7BD                           
0C7BD                               ;; Set attribute data to RAM
0C7BD                               
0C7BD                               ;; Byte 0-7 of attribute ram should be #%10100000
0C7BD A2 00                         LDX #$00
0C7BF A9 A0                         LDA #$A0
0C7C1                               -
0C7C1 9D A0 04                          STA tile_attributes,x
0C7C4 E8                                INX
0C7C5 E0 08                             CPX #$08
0C7C7 D0 F8                         BNE -
0C7C9                           
0C7C9                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C7C9                           
0C7C9                           -attributeLoop:
0C7C9                               ;; Reset current attribute value
0C7C9 A9 00                         LDA #$00
0C7CB 85 02                         STA temp+2
0C7CD                           
0C7CD                               ;; Get first metatile in tile ram based on attribute index
0C7CD                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C7CD 8A                            TXA
0C7CE                           
0C7CE 38                            SEC
0C7CF E9 08                         SBC #$08
0C7D1 85 01                         STA temp+1      ; attr - 8 (temp1)
0C7D3 0A                            ASL             ; * 2
0C7D4 85 00                         STA temp        ; temp = temp1 * 2
0C7D6                           
0C7D6 A5 01                         LDA temp+1      ; temp1
0C7D8 29 F8                         AND #%11111000  ; rounded down to 8's
0C7DA 0A                            ASL             ; * 2
0C7DB 18                            CLC
0C7DC 65 00                         ADC temp        ; + temp1 * 2
0C7DE 85 00                         STA temp        ; first metatile
0C7E0                           
0C7E0                               ;; Store first metatile in y-register
0C7E0 A8                            TAY
0C7E1                           
0C7E1                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C7E1 8A                            TXA
0C7E2 29 07                         AND #%00000111
0C7E4 C9 07                         CMP #%00000111
0C7E6 F0 0B                         BEQ +
0C7E8                           
0C7E8                               ;; If X >= $30, don't apply bottom right metatile
0C7E8 E0 30                         CPX #$30
0C7EA B0 07                         BCS +
0C7EC                               
0C7EC                               ;; Add metatile1 subpalette to attribute value
0C7EC B9 00 04                      LDA tile_type,y
0C7EF 29 0C                         AND #%00001100
0C7F1 85 02                         STA temp+2
0C7F3                               +
0C7F3                           
0C7F3                           
0C7F3                               ;; Apply second metatile
0C7F3 88                            DEY
0C7F4                           
0C7F4                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C7F4 8A                            TXA
0C7F5 29 07                         AND #%00000111
0C7F7 F0 10                         BEQ +
0C7F9                           
0C7F9                               ;; If X >= $30, don't apply bottom left metatile
0C7F9 E0 30                         CPX #$30
0C7FB B0 0C                         BCS +
0C7FD                           
0C7FD                           
0C7FD                           
0C7FD                               ;; Add metatile2 subpalette to attribute value
0C7FD B9 00 04                      LDA tile_type,y
0C800 29 0C                         AND #%00001100
0C802 4A                            LSR
0C803 4A                            LSR
0C804 05 02                         ORA temp+2
0C806 4C 0B C8                      JMP ++
0C809                               +
0C809 A5 02                         LDA temp+2
0C80B                               ++
0C80B 0A                            ASL
0C80C 0A                            ASL
0C80D 85 02                         STA temp+2
0C80F                           
0C80F                           
0C80F                               ;; Apply third metatile
0C80F 98                            TYA
0C810 38                            SEC
0C811 E9 0F                         SBC #$0F
0C813 A8                            TAY
0C814                           
0C814                               ;; If X MOD 8 == 7, don't apply top right metatile
0C814 8A                            TXA
0C815 29 07                         AND #%00000111
0C817 C9 07                         CMP #%00000111
0C819 F0 11                         BEQ +
0C81B                           
0C81B                               ;; If X < $10, don't apply top right metatile
0C81B 8A                            TXA
0C81C 29 F0                         AND #%11110000
0C81E F0 0C                         BEQ +
0C820                           
0C820                               ;; Add metatile3 subpalette to attribute value
0C820 B9 00 04                      LDA tile_type,y
0C823 29 0C                         AND #%00001100
0C825 4A                            LSR
0C826 4A                            LSR
0C827 05 02                         ORA temp+2
0C829 4C 2E C8                      JMP ++
0C82C                               +
0C82C A5 02                         LDA temp+2
0C82E                               ++
0C82E 0A                            ASL
0C82F 0A                            ASL
0C830 85 02                         STA temp+2
0C832                           
0C832                           
0C832                               ;; Apply fourth metatile
0C832 88                            DEY
0C833                           
0C833                               ;; If X MOD 8 == 0, don't apply top left metatile
0C833 8A                            TXA
0C834 29 07                         AND #%00000111
0C836 F0 11                         BEQ +
0C838                           
0C838                               ;; If X < $10, don't apply top left metatile
0C838 8A                            TXA
0C839 29 F0                         AND #%11110000
0C83B F0 0C                         BEQ +
0C83D                           
0C83D                               ;; Add metatile4 subpalette to attribute value
0C83D B9 00 04                      LDA tile_type,y
0C840 29 0C                         AND #%00001100
0C842 4A                            LSR
0C843 4A                            LSR
0C844 05 02                         ORA temp+2
0C846 4C 4B C8                      JMP ++
0C849                               +
0C849 A5 02                         LDA temp+2
0C84B                               ++
0C84B 9D A0 04                      STA tile_attributes,x
0C84E                           
0C84E                               ;; Check the next attribute, if any left
0C84E E8                            INX
0C84F E0 38                         CPX #$38
0C851 F0 03                         BEQ +
0C853 4C C9 C7                          JMP -attributeLoop
0C856                               +
0C856                           
0C856                               ;; Stream attribute RAM to PPU
0C856 2C 02 20                      BIT PPU_STATUS
0C859 A9 23                         LDA #$23
0C85B 8D 06 20                      STA PPU_ADDR
0C85E A9 C0                         LDA #$C0
0C860 8D 06 20                      STA PPU_ADDR
0C863 A2 00                         LDX #$00
0C865                               -
0C865 BD A0 04                          LDA tile_attributes,x
0C868 8D 07 20                          STA PPU_DATA
0C86B E8                                INX
0C86C E0 40                             CPX #$40
0C86E D0 F5                         BNE -
0C870                           
0C870                               ;; Set initial ball position
0C870 A6 34                         LDX current_level
0C872 BD B3 D1                      LDA tbl_lvl_ball_startpos,x
0C875 29 F0                         AND #%11110000
0C877 18                            CLC
0C878 69 34                         ADC #$34
0C87A 85 19                         STA ball_ypos_hi
0C87C BD B3 D1                      LDA tbl_lvl_ball_startpos,x
0C87F 0A                            ASL
0C880 0A                            ASL
0C881 0A                            ASL
0C882 0A                            ASL
0C883 18                            CLC
0C884 69 14                         ADC #$14
0C886 85 17                         STA ball_xpos_hi
0C888 A9 00                         LDA #$00
0C88A 85 18                         STA ball_xpos_lo
0C88C 85 1A                         STA ball_ypos_lo
0C88E                               
0C88E                               ;; Set initial ball color and direction
0C88E BD CC D1                      LDA tbl_lvl_ball_init,x
0C891 29 F0                         AND #%11110000
0C893 85 2C                         STA ball_flags
0C895 20 3F C4                      JSR sub_ColorizeBall
0C898                               
0C898                               ;; Return
0C898 60                            RTS
0C899                           
0C899                           
0C899                           ;; Subroutine: draw 28 tiles in a row
0C899                           sub_Draw28HorizontalTiles:
0C899 A2 1C                         LDX #28
0C89B                               -
0C89B 8D 07 20                          STA PPU_DATA
0C89E CA                                DEX
0C89F D0 FA                         BNE -
0C8A1 60                            RTS0C8A2                           .include "game/subroutine/LoadIntroScreen.asm"
0C8A2                           sub_LoadIntroScreen:
0C8A2                           
0C8A2                               ;; Load intro palette
0C8A2 2C 02 20                      BIT PPU_STATUS
0C8A5 A9 3F                         LDA #$3F
0C8A7 8D 06 20                      STA PPU_ADDR
0C8AA A9 00                         LDA #$00
0C8AC 8D 06 20                      STA PPU_ADDR
0C8AF A2 00                         LDX #$00
0C8B1                               -
0C8B1 BD 58 C9                          LDA tbl_IntroScreenPalette,x
0C8B4 8D 07 20                          STA PPU_DATA
0C8B7 E8                                INX
0C8B8 E0 20                             CPX #$20
0C8BA D0 F5                         BNE -
0C8BC                               
0C8BC                               ;; Put ball in the middle
0C8BC A9 7C                         LDA #$7C
0C8BE 85 17                         STA ball_xpos_hi
0C8C0 85 19                         STA ball_ypos_hi
0C8C2                           
0C8C2                               ;; Clear the screen
0C8C2 20 D4 C3                      JSR sub_ClearScreen
0C8C5                           
0C8C5                               ;; Set up intro screen draw loop
0C8C5 A2 00                         LDX #$00
0C8C7                           
0C8C7                           -loop_IntroScreenData:
0C8C7                           
0C8C7                               ;; Get current byte from intro screen data
0C8C7 BD 80 C9                      LDA tbl_IntroScreenData,x
0C8CA                           
0C8CA                               ;; If current byte is #$3F, we're done drawing.
0C8CA C9 3F                         CMP #$3F
0C8CC D0 03                         BNE +
0C8CE 4C 1B C9                          JMP +goToEndIntroScreen
0C8D1                               +
0C8D1                           
0C8D1                               ;; If highest bits are %11, draw a plain tile
0C8D1 29 C0                         AND #%11000000
0C8D3 D0 03                         BNE +
0C8D5 4C FB C8                          JMP +drawTile
0C8D8                               +
0C8D8                               
0C8D8                               ;; If highest bits are %01, set the PPU address
0C8D8                               ;; If not, draw two logo tiles
0C8D8 C9 40                         CMP #%01000000
0C8DA D0 03                         BNE +drawLogo
0C8DC 4C 05 C9                          JMP +setPpuAddr
0C8DF                           
0C8DF                           +drawLogo:
0C8DF                               ;; Get bits 0-2 and store in a temp variable
0C8DF BD 80 C9                      LDA tbl_IntroScreenData,x
0C8E2 29 07                         AND #%00000111
0C8E4 85 00                         STA temp
0C8E6                               
0C8E6                               ;; Get bits 3-5, shift over to get a value from 0-7
0C8E6 BD 80 C9                      LDA tbl_IntroScreenData,x
0C8E9 4A                            LSR
0C8EA 4A                            LSR
0C8EB 4A                            LSR
0C8EC 29 07                         AND #%00000111
0C8EE                               
0C8EE                               ;; Draw the tile that corresponds with that value
0C8EE A8                            TAY
0C8EF 20 B7 C4                      JSR sub_drawIntroScreenLogoTile
0C8F2                               
0C8F2                               ;; Do the same for the value stored in temp
0C8F2 A4 00                         LDY temp
0C8F4 20 B7 C4                      JSR sub_drawIntroScreenLogoTile
0C8F7                           
0C8F7                               ;; Next byte please
0C8F7 E8                            INX
0C8F8 4C C7 C8                      JMP -loop_IntroScreenData
0C8FB                           
0C8FB                           +drawTile:
0C8FB                               ;; Just draw the tile value on screen
0C8FB BD 80 C9                      LDA tbl_IntroScreenData,x
0C8FE 8D 07 20                      STA PPU_DATA
0C901                               
0C901                               ;; Next byte please
0C901 E8                            INX
0C902 4C C7 C8                      JMP -loop_IntroScreenData
0C905                           
0C905                           
0C905                           +setPpuAddr:
0C905                               ;; Reset the PPU latch
0C905 2C 02 20                      BIT PPU_STATUS
0C908                               
0C908                               ;; Sanitize and write the high byte of the PPU address
0C908 BD 80 C9                      LDA tbl_IntroScreenData,x
0C90B 29 3F                         AND #%00111111
0C90D 8D 06 20                      STA PPU_ADDR
0C910                           
0C910                               ;; Write the low byte of the PPU address
0C910 E8                            INX
0C911 BD 80 C9                      LDA tbl_IntroScreenData,x
0C914 8D 06 20                      STA PPU_ADDR
0C917                               
0C917                               ;; PPU has been set up to draw tiles at the correct spot now.
0C917                               
0C917                               ;; Next byte please.
0C917 E8                            INX
0C918 4C C7 C8                      JMP -loop_IntroScreenData
0C91B                           
0C91B                           +goToEndIntroScreen:
0C91B                           
0C91B                               ;; To color the 1.LEVEL: line green, we need to update two
0C91B                               ;; values in the PPU attribute data.
0C91B 2C 02 20                      BIT PPU_STATUS
0C91E A9 23                         LDA #$23
0C920 8D 06 20                      STA PPU_ADDR
0C923 A9 CB                         LDA #$CB
0C925 8D 06 20                      STA PPU_ADDR
0C928 A9 0A                         LDA #%00001010
0C92A 8D 07 20                      STA PPU_DATA
0C92D 8D 07 20                      STA PPU_DATA
0C930                           
0C930 60                            RTS
0C931                           
0C931                           .include "game/subroutine/LoadWinScreen.asm"
0C931                           sub_LoadWinScreen:
0C931 60                            RTS
0C932                           
0C932                           .include "game/subroutine/WriteByteToPPU.asm"
0C932                           sub_WriteByteToPPUBuffer:
0C932                           
0C932                               ;; Prevent updating until full 3-byte buffer is filled,
0C932                               ;; so that graphics won't glitch out if NMI happens during
0C932                               ;; updating the buffer
0C932 A9 00                         LDA #$00
0C934 85 2F                         STA ppu_buffer_update
0C936                           
0C936                               ;; Check if buffer full; if so, wait a frame and force update
0C936 A4 30                         LDY ppu_buffer_pointer
0C938 C0 30                         CPY #$30
0C93A D0 05                         BNE +
0C93C E6 2F                             INC ppu_buffer_update
0C93E 20 CE C3                          JSR sub_WaitForVBlank
0C941                               +
0C941                           
0C941                               ;; Add ppu_addr high byte to buffer
0C941 A5 00                         LDA temp
0C943 99 00 03                      STA ppu_buffer,y
0C946                           
0C946                               ;; Add ppu_addr low byte to buffer
0C946 C8                            INY
0C947 A5 01                         LDA temp+1
0C949 99 00 03                      STA ppu_buffer,y
0C94C                           
0C94C                               ;; Add ppu_data to buffer
0C94C C8                            INY
0C94D A5 02                         LDA temp+2
0C94F 99 00 03                      STA ppu_buffer,y
0C952                           
0C952                               ;; Update buffer pointer
0C952 C8                            INY
0C953 84 30                         STY ppu_buffer_pointer
0C955                           
0C955                               ;; Tell NMI to update next round
0C955 E6 2F                         INC ppu_buffer_update
0C957                           
0C957                               ;; Return
0C957 60                            RTS0C958                           
0C958                           
0C958                           ;; LUTs
0C958                           .include "game/include/tables.asm"
0C958                           
0C958                           ;; Intro screen palette
0C958                           tbl_IntroScreenPalette:
0C958 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C95C 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C960 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C964 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C968                           
0C968 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C96C 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C970 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C974 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C978                           
0C978                           
0C978                           ;; Intro: mapping logo index to chr tile
0C978                           tbl_IntroScreenLogoChr:
0C978 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C980                           
0C980                           
0C980                           ;; Intro screen data
0C980                           tbl_IntroScreenData:
0C980                           
0C980                               ;; Set PPU address $20AC and draw
0C980 60 AC                         .db #$60, #$AC
0C982 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C98A                           
0C98A                               ;; Set PPU address $20CF and draw
0C98A 60 CF                         .db #$60, #$CF
0C98C 01 02                         .db #_0, #_1
0C98E                               
0C98E                               ;; Set PPU address $2122 and draw
0C98E 61 22                         .db #$61, #$22
0C990 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C997 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C99D 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C9A5 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C9AA                               
0C9AA                               ;; Set PPU address $2147 and draw
0C9AA 61 47                         .db #$61, #$47
0C9AC 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C9B3 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C9B7 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C9BD 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C9C3                               
0C9C3                               ;; Set PPU address $218B and draw
0C9C3 61 8B                         .db #$61, #$8B
0C9C5 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C9CB 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C9D0                               
0C9D0                               ;; Set PPU address $21E6 and draw
0C9D0 61 E6                         .db #$61, #$E6
0C9D2 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C9DA 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C9DE 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C9E5                               
0C9E5                               ;; Set PPU address $222D and draw
0C9E5 62 2D                         .db #$62, #$2D
0C9E7 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C9ED                               
0C9ED                               ;; Set PPU address $2281
0C9ED 62 81                         .db #$62, #$81
0C9EF                               
0C9EF                               ;; Draw the Crillion logo
0C9EF E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C9F3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C9F7 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C9FB E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C9FF                               
0C9FF D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CA03 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CA07 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CA0B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CA0F                               
0CA0F D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CA13 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CA17 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CA1B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CA1F                           
0CA1F D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CA23 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CA27 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CA2B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CA2F                               
0CA2F D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CA33 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CA37 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CA3B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CA3F                           
0CA3F F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CA43 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CA47 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CA4B F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CA4E                           
0CA4E                               ;; End of intro
0CA4E 3F                            .db #$3F
0CA4F                           
0CA4F                           
0CA4F                           ;; Animation frames table
0CA4F                           .include "game/include/table/animation_frames.asm"
0CA4F                           ;; CHR tile-id's per slide of explosion
0CA4F                           explosion_slide0:
0CA4F 00 00 00                      .db #$00, #$00, #$00
0CA52 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CA55 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CA58                           
0CA58                           explosion_slide1:
0CA58 00 00 00                      .db #$00, #$00, #$00
0CA5B 29 2A 2B                      .db #$29, #$2A, #$2B
0CA5E 39 3A 3B                      .db #$39, #$3A, #$3B
0CA61                           
0CA61                           explosion_slide2:
0CA61 16 00 00                      .db #$16, #$00, #$00
0CA64 26 27 28                      .db #$26, #$27, #$28
0CA67 36 37 38                      .db #$36, #$37, #$38
0CA6A                           
0CA6A                           explosion_slide3:
0CA6A 00 14 15                      .db #$00, #$14, #$15
0CA6D 23 24 25                      .db #$23, #$24, #$25
0CA70 33 34 35                      .db #$33, #$34, #$35
0CA73                           
0CA73                           explosion_slide4:
0CA73 10 11 12                      .db #$10, #$11, #$12
0CA76 20 21 22                      .db #$20, #$21, #$22
0CA79 30 31 32                      .db #$30, #$31, #$32
0CA7C                           
0CA7C                           ;; High and low bytes of animation slides
0CA7C                           explosion_anim_hi:
0CA7C CA                            .db >#explosion_slide0
0CA7D CA                            .db >#explosion_slide1
0CA7E CA                            .db >#explosion_slide2
0CA7F CA                            .db >#explosion_slide3
0CA80 CA                            .db >#explosion_slide4
0CA81 CA                            .db >#explosion_slide4
0CA82 CA                            .db >#explosion_slide3
0CA83 CA                            .db >#explosion_slide2
0CA84 CA                            .db >#explosion_slide1
0CA85 CA                            .db >#explosion_slide0
0CA86                           
0CA86                           explosion_anim_lo:
0CA86 4F                            .db <#explosion_slide0
0CA87 58                            .db <#explosion_slide1
0CA88 61                            .db <#explosion_slide2
0CA89 6A                            .db <#explosion_slide3
0CA8A 73                            .db <#explosion_slide4
0CA8B 73                            .db <#explosion_slide4
0CA8C 6A                            .db <#explosion_slide3
0CA8D 61                            .db <#explosion_slide2
0CA8E 58                            .db <#explosion_slide1
0CA8F 4F                            .db <#explosion_slide0
0CA90                           
0CA90                           
0CA90                           
0CA90                           ;; Ball palette color table (CBRYGM)
0CA90                           tbl_BallColorDark:
0CA90 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CA96                            
0CA96                           tbl_BallColorLight:
0CA96 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CA9C                           
0CA9C                               
0CA9C                           ;; Screen mode drawing routine addresses
0CA9C                           tbl_LoadScreenHi:
0CA9C C8 C5 C9                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CA9F                           
0CA9F                           tbl_LoadScreenLo:
0CA9F A2 16 31                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CAA2                           
0CAA2                           
0CAA2                           ;; Level data
0CAA2                           .include "game/include/table/level_data.asm"
0CAA2                           lvl_layout_01:
0CAA2 61 21                         .db #$61, #%00100001
0CAA4 52 61                         .db #$52, #%01100001
0CAA6 43 65                         .db #$43, #%01100101
0CAA8 83 05                         .db #$83, #%00000101
0CAAA 93 15                         .db #$93, #%00010101
0CAAC 34 7A                         .db #$34, #%01111010
0CAAE 74 7A                         .db #$74, #%01111010
0CAB0 35 7A                         .db #$35, #%01111010
0CAB2 75 7A                         .db #$75, #%01111010
0CAB4 46 65                         .db #$46, #%01100101
0CAB6 86 25                         .db #$86, #%00100101
0CAB8 57 61                         .db #$57, #%01100001
0CABA 68 21                         .db #$68, #%00100001
0CABC FF                            .db #LEVEL_END
0CABD                           
0CABD                           lvl_layout_02:
0CABD C0 0A                         .db #$C0, #%00001010
0CABF 11 15                         .db #$11, #%00010101
0CAC1 21 62                         .db #$21, #%01100010
0CAC3 61 62                         .db #$61, #%01100010
0CAC5 A1 42                         .db #$A1, #%01000010
0CAC7 12 67                         .db #$12, #%01100111
0CAC9 52 67                         .db #$52, #%01100111
0CACB 92 67                         .db #$92, #%01100111
0CACD C3 0D                         .db #$C3, #%00001101
0CACF 14 11                         .db #$14, #%00010001
0CAD1 24 65                         .db #$24, #%01100101
0CAD3 64 65                         .db #$64, #%01100101
0CAD5 A4 45                         .db #$A4, #%01000101
0CAD7 15 67                         .db #$15, #%01100111
0CAD9 55 67                         .db #$55, #%01100111
0CADB 95 67                         .db #$95, #%01100111
0CADD 17 12                         .db #$17, #%00010010
0CADF 27 61                         .db #$27, #%01100001
0CAE1 67 61                         .db #$67, #%01100001
0CAE3 A7 41                         .db #$A7, #%01000001
0CAE5 38 7A                         .db #$38, #%01111010
0CAE7 98 5A                         .db #$98, #%01011010
0CAE9 18 27                         .db #$18, #%00100111
0CAEB 48 27                         .db #$48, #%00100111
0CAED 78 27                         .db #$78, #%00100111
0CAEF C8 07                         .db #$C8, #%00000111
0CAF1 FF                            .db #LEVEL_END
0CAF2                           
0CAF2                           lvl_layout_03:
0CAF2 00 7A                         .db #$00, #%01111010
0CAF4 40 7A                         .db #$40, #%01111010
0CAF6 80 7A                         .db #$80, #%01111010
0CAF8 C0 1A                         .db #$C0, #%00011010
0CAFA 10 A1                         .db #$10, #%10100001
0CAFC 13 E1                         .db #$13, #%11100001
0CAFE 17 C1                         .db #$17, #%11000001
0CB00 30 C1                         .db #$30, #%11000001
0CB02 34 C1                         .db #$34, #%11000001
0CB04 38 A1                         .db #$38, #%10100001
0CB06 50 E1                         .db #$50, #%11100001
0CB08 55 81                         .db #$55, #%10000001
0CB0A 57 C1                         .db #$57, #%11000001
0CB0C 70 C1                         .db #$70, #%11000001
0CB0E 73 A1                         .db #$73, #%10100001
0CB10 76 E1                         .db #$76, #%11100001
0CB12 90 E1                         .db #$90, #%11100001
0CB14 95 81                         .db #$95, #%10000001
0CB16 97 C1                         .db #$97, #%11000001
0CB18 B0 C1                         .db #$B0, #%11000001
0CB1A B4 C1                         .db #$B4, #%11000001
0CB1C B8 A1                         .db #$B8, #%10100001
0CB1E D0 A1                         .db #$D0, #%10100001
0CB20 D3 E1                         .db #$D3, #%11100001
0CB22 D7 C1                         .db #$D7, #%11000001
0CB24 FF                            .db #LEVEL_END
0CB25                           
0CB25                           lvl_layout_04:
0CB25 00 4C                         .db #$00, #%01001100
0CB27 40 6C                         .db #$40, #%01101100
0CB29 80 4C                         .db #$80, #%01001100
0CB2B 81 AC                         .db #$81, #%10101100
0CB2D C1 2C                         .db #$C1, #%00101100
0CB2F 02 6C                         .db #$02, #%01101100
0CB31 42 CC                         .db #$42, #%11001100
0CB33 62 EC                         .db #$62, #%11101100
0CB35 A2 CC                         .db #$A2, #%11001100
0CB37 C3 CC                         .db #$C3, #%11001100
0CB39 04 4C                         .db #$04, #%01001100
0CB3B 84 2C                         .db #$84, #%00101100
0CB3D 25 AC                         .db #$25, #%10101100
0CB3F 85 AC                         .db #$85, #%10101100
0CB41 06 AC                         .db #$06, #%10101100
0CB43 36 CC                         .db #$36, #%11001100
0CB45 56 CC                         .db #$56, #%11001100
0CB47 66 EC                         .db #$66, #%11101100
0CB49 96 6C                         .db #$96, #%01101100
0CB4B C7 AC                         .db #$C7, #%10101100
0CB4D 08 2C                         .db #$08, #%00101100
0CB4F 78 6C                         .db #$78, #%01101100
0CB51 D8 0C                         .db #$D8, #%00001100
0CB53 30 A1                         .db #$30, #%10100001
0CB55 B0 21                         .db #$B0, #%00100001
0CB57 01 41                         .db #$01, #%01000001
0CB59 41 61                         .db #$41, #%01100001
0CB5B 91 A1                         .db #$91, #%10100001
0CB5D A1 21                         .db #$A1, #%00100001
0CB5F 52 C1                         .db #$52, #%11000001
0CB61 72 E1                         .db #$72, #%11100001
0CB63 B2 C1                         .db #$B2, #%11000001
0CB65 C2 21                         .db #$C2, #%00100001
0CB67 03 41                         .db #$03, #%01000001
0CB69 33 C1                         .db #$33, #%11000001
0CB6B 83 21                         .db #$83, #%00100001
0CB6D D3 E1                         .db #$D3, #%11100001
0CB6F 05 21                         .db #$05, #%00100001
0CB71 45 E1                         .db #$45, #%11100001
0CB73 A5 21                         .db #$A5, #%00100001
0CB75 16 A1                         .db #$16, #%10100001
0CB77 76 A1                         .db #$76, #%10100001
0CB79 27 A1                         .db #$27, #%10100001
0CB7B 57 01                         .db #$57, #%00000001
0CB7D 87 41                         .db #$87, #%01000001
0CB7F B7 A1                         .db #$B7, #%10100001
0CB81 19 21                         .db #$19, #%00100001
0CB83 39 41                         .db #$39, #%01000001
0CB85 89 41                         .db #$89, #%01000001
0CB87 C9 21                         .db #$C9, #%00100001
0CB89 D0 1A                         .db #$D0, #%00011010
0CB8B 55 1A                         .db #$55, #%00011010
0CB8D 95 1A                         .db #$95, #%00011010
0CB8F D7 1A                         .db #$D7, #%00011010
0CB91 09 1A                         .db #$09, #%00011010
0CB93 79 1A                         .db #$79, #%00011010
0CB95 FF                            .db #LEVEL_END
0CB96                           
0CB96                           lvl_layout_05:
0CB96 40 0A                         .db #$40, #%00001010
0CB98 70 1A                         .db #$70, #%00011010
0CB9A B0 42                         .db #$B0, #%01000010
0CB9C 41 A7                         .db #$41, #%10100111
0CB9E B1 22                         .db #$B1, #%00100010
0CBA0 D1 15                         .db #$D1, #%00010101
0CBA2 22 0A                         .db #$22, #%00001010
0CBA4 52 05                         .db #$52, #%00000101
0CBA6 B2 42                         .db #$B2, #%01000010
0CBA8 03 27                         .db #$03, #%00100111
0CBAA 33 67                         .db #$33, #%01100111
0CBAC 73 67                         .db #$73, #%01100111
0CBAE B3 47                         .db #$B3, #%01000111
0CBB0 05 E5                         .db #$05, #%11100101
0CBB2 25 A5                         .db #$25, #%10100101
0CBB4 35 25                         .db #$35, #%00100101
0CBB6 65 45                         .db #$65, #%01000101
0CBB8 A5 45                         .db #$A5, #%01000101
0CBBA 46 E5                         .db #$46, #%11100101
0CBBC 66 E5                         .db #$66, #%11100101
0CBBE 86 E5                         .db #$86, #%11100101
0CBC0 A6 E2                         .db #$A6, #%11100010
0CBC2 C6 E5                         .db #$C6, #%11100101
0CBC4 27 25                         .db #$27, #%00100101
0CBC6 77 05                         .db #$77, #%00000101
0CBC8 B7 02                         .db #$B7, #%00000010
0CBCA 09 05                         .db #$09, #%00000101
0CBCC 79 05                         .db #$79, #%00000101
0CBCE B9 02                         .db #$B9, #%00000010
0CBD0 FF                            .db #LEVEL_END
0CBD1                           
0CBD1                           lvl_layout_06:
0CBD1 00 03                         .db #$00, #%00000011
0CBD3 20 03                         .db #$20, #%00000011
0CBD5 40 03                         .db #$40, #%00000011
0CBD7 A0 03                         .db #$A0, #%00000011
0CBD9 C0 03                         .db #$C0, #%00000011
0CBDB 11 03                         .db #$11, #%00000011
0CBDD 31 03                         .db #$31, #%00000011
0CBDF 51 03                         .db #$51, #%00000011
0CBE1 91 03                         .db #$91, #%00000011
0CBE3 B1 03                         .db #$B1, #%00000011
0CBE5 D1 03                         .db #$D1, #%00000011
0CBE7 02 03                         .db #$02, #%00000011
0CBE9 22 03                         .db #$22, #%00000011
0CBEB 42 03                         .db #$42, #%00000011
0CBED A2 03                         .db #$A2, #%00000011
0CBEF C2 03                         .db #$C2, #%00000011
0CBF1 13 03                         .db #$13, #%00000011
0CBF3 33 03                         .db #$33, #%00000011
0CBF5 53 03                         .db #$53, #%00000011
0CBF7 93 03                         .db #$93, #%00000011
0CBF9 B3 03                         .db #$B3, #%00000011
0CBFB D3 03                         .db #$D3, #%00000011
0CBFD 04 03                         .db #$04, #%00000011
0CBFF 24 03                         .db #$24, #%00000011
0CC01 44 03                         .db #$44, #%00000011
0CC03 A4 03                         .db #$A4, #%00000011
0CC05 C4 03                         .db #$C4, #%00000011
0CC07 15 03                         .db #$15, #%00000011
0CC09 35 03                         .db #$35, #%00000011
0CC0B 55 03                         .db #$55, #%00000011
0CC0D 95 03                         .db #$95, #%00000011
0CC0F B5 03                         .db #$B5, #%00000011
0CC11 D5 03                         .db #$D5, #%00000011
0CC13 06 03                         .db #$06, #%00000011
0CC15 26 03                         .db #$26, #%00000011
0CC17 46 03                         .db #$46, #%00000011
0CC19 A6 03                         .db #$A6, #%00000011
0CC1B C6 03                         .db #$C6, #%00000011
0CC1D 17 03                         .db #$17, #%00000011
0CC1F 37 03                         .db #$37, #%00000011
0CC21 57 03                         .db #$57, #%00000011
0CC23 97 03                         .db #$97, #%00000011
0CC25 B7 03                         .db #$B7, #%00000011
0CC27 D7 03                         .db #$D7, #%00000011
0CC29 08 03                         .db #$08, #%00000011
0CC2B 28 03                         .db #$28, #%00000011
0CC2D 48 03                         .db #$48, #%00000011
0CC2F A8 03                         .db #$A8, #%00000011
0CC31 C8 03                         .db #$C8, #%00000011
0CC33 19 03                         .db #$19, #%00000011
0CC35 39 03                         .db #$39, #%00000011
0CC37 59 03                         .db #$59, #%00000011
0CC39 99 03                         .db #$99, #%00000011
0CC3B B9 03                         .db #$B9, #%00000011
0CC3D D9 03                         .db #$D9, #%00000011
0CC3F 60 4B                         .db #$60, #%01001011
0CC41 71 CB                         .db #$71, #%11001011
0CC43 62 4B                         .db #$62, #%01001011
0CC45 64 4B                         .db #$64, #%01001011
0CC47 75 CB                         .db #$75, #%11001011
0CC49 66 4B                         .db #$66, #%01001011
0CC4B 68 4B                         .db #$68, #%01001011
0CC4D 79 0B                         .db #$79, #%00001011
0CC4F 70 03                         .db #$70, #%00000011
0CC51 72 03                         .db #$72, #%00000011
0CC53 74 03                         .db #$74, #%00000011
0CC55 76 03                         .db #$76, #%00000011
0CC57 78 03                         .db #$78, #%00000011
0CC59 FF                            .db #LEVEL_END
0CC5A                           
0CC5A                           lvl_layout_07:
0CC5A 00 11                         .db #$00, #%00010001
0CC5C 01 FA                         .db #$01, #%11111010
0CC5E 12 BA                         .db #$12, #%10111010
0CC60 23 DA                         .db #$23, #%11011010
0CC62 34 FA                         .db #$34, #%11111010
0CC64 05 DA                         .db #$05, #%11011010
0CC66 15 FA                         .db #$15, #%11111010
0CC68 45 BA                         .db #$45, #%10111010
0CC6A 56 DA                         .db #$56, #%11011010
0CC6C 27 BA                         .db #$27, #%10111010
0CC6E 67 DA                         .db #$67, #%11011010
0CC70 38 3A                         .db #$38, #%00111010
0CC72 78 BA                         .db #$78, #%10111010
0CC74 09 3A                         .db #$09, #%00111010
0CC76 39 3A                         .db #$39, #%00111010
0CC78 89 1A                         .db #$89, #%00011010
0CC7A B0 01                         .db #$B0, #%00000001
0CC7C D0 01                         .db #$D0, #%00000001
0CC7E A1 01                         .db #$A1, #%00000001
0CC80 C1 11                         .db #$C1, #%00010001
0CC82 B2 01                         .db #$B2, #%00000001
0CC84 D2 01                         .db #$D2, #%00000001
0CC86 A3 01                         .db #$A3, #%00000001
0CC88 C3 01                         .db #$C3, #%00000001
0CC8A B4 01                         .db #$B4, #%00000001
0CC8C D4 01                         .db #$D4, #%00000001
0CC8E A5 01                         .db #$A5, #%00000001
0CC90 C5 01                         .db #$C5, #%00000001
0CC92 B6 01                         .db #$B6, #%00000001
0CC94 D6 01                         .db #$D6, #%00000001
0CC96 A7 01                         .db #$A7, #%00000001
0CC98 C7 01                         .db #$C7, #%00000001
0CC9A FF                            .db #LEVEL_END
0CC9B                           
0CC9B                           lvl_layout_08:
0CC9B 40 B5                         .db #$40, #%10110101
0CC9D 31 0D                         .db #$31, #%00001101
0CC9F 61 10                         .db #$61, #%00010000
0CCA1 42 C7                         .db #$42, #%11000111
0CCA3 52 67                         .db #$52, #%01100111
0CCA5 63 C7                         .db #$63, #%11000111
0CCA7 83 E7                         .db #$83, #%11100111
0CCA9 05 07                         .db #$05, #%00000111
0CCAB 15 3A                         .db #$15, #%00111010
0CCAD 07 63                         .db #$07, #%01100011
0CCAF 27 13                         .db #$27, #%00010011
0CCB1 38 A5                         .db #$38, #%10100101
0CCB3 09 14                         .db #$09, #%00010100
0CCB5 19 05                         .db #$19, #%00000101
0CCB7 D0 E0                         .db #$D0, #%11100000
0CCB9 C2 A0                         .db #$C2, #%10100000
0CCBB B3 E0                         .db #$B3, #%11100000
0CCBD D5 E0                         .db #$D5, #%11100000
0CCBF C6 E0                         .db #$C6, #%11100000
0CCC1 B0 C4                         .db #$B0, #%11000100
0CCC3 C0 A4                         .db #$C0, #%10100100
0CCC5 D1 A4                         .db #$D1, #%10100100
0CCC7 C4 24                         .db #$C4, #%00100100
0CCC9 C5 04                         .db #$C5, #%00000100
0CCCB B7 44                         .db #$B7, #%01000100
0CCCD B8 A4                         .db #$B8, #%10100100
0CCCF D9 05                         .db #$D9, #%00000101
0CCD1 FF                            .db #LEVEL_END
0CCD2                           
0CCD2                           lvl_layout_09:
0CCD2 81 04                         .db #$81, #%00000100
0CCD4 D1 04                         .db #$D1, #%00000100
0CCD6 32 C4                         .db #$32, #%11000100
0CCD8 A2 C4                         .db #$A2, #%11000100
0CCDA C2 24                         .db #$C2, #%00100100
0CCDC 13 24                         .db #$13, #%00100100
0CCDE 53 04                         .db #$53, #%00000100
0CCE0 C3 27                         .db #$C3, #%00100111
0CCE2 15 6C                         .db #$15, #%01101100
0CCE4 55 6C                         .db #$55, #%01101100
0CCE6 95 6C                         .db #$95, #%01101100
0CCE8 D5 0C                         .db #$D5, #%00001100
0CCEA 27 C7                         .db #$27, #%11000111
0CCEC 47 C7                         .db #$47, #%11000111
0CCEE 67 C7                         .db #$67, #%11000111
0CCF0 87 C7                         .db #$87, #%11000111
0CCF2 A7 C7                         .db #$A7, #%11000111
0CCF4 C7 C7                         .db #$C7, #%11000111
0CCF6 08 13                         .db #$08, #%00010011
0CCF8 28 15                         .db #$28, #%00010101
0CCFA 48 12                         .db #$48, #%00010010
0CCFC 68 15                         .db #$68, #%00010101
0CCFE 88 11                         .db #$88, #%00010001
0CD00 A8 10                         .db #$A8, #%00010000
0CD02 C8 14                         .db #$C8, #%00010100
0CD04 09 07                         .db #$09, #%00000111
0CD06 19 03                         .db #$19, #%00000011
0CD08 39 05                         .db #$39, #%00000101
0CD0A 59 02                         .db #$59, #%00000010
0CD0C 79 05                         .db #$79, #%00000101
0CD0E 99 01                         .db #$99, #%00000001
0CD10 B9 00                         .db #$B9, #%00000000
0CD12 D9 04                         .db #$D9, #%00000100
0CD14 FF                            .db #LEVEL_END
0CD15                           
0CD15                           lvl_layout_10:
0CD15 00 02                         .db #$00, #%00000010
0CD17 10 C9                         .db #$10, #%11001001
0CD19 50 C9                         .db #$50, #%11001001
0CD1B 90 C9                         .db #$90, #%11001001
0CD1D D0 C9                         .db #$D0, #%11001001
0CD1F 31 C9                         .db #$31, #%11001001
0CD21 71 C9                         .db #$71, #%11001001
0CD23 B1 C9                         .db #$B1, #%11001001
0CD25 13 C9                         .db #$13, #%11001001
0CD27 53 C9                         .db #$53, #%11001001
0CD29 93 C9                         .db #$93, #%11001001
0CD2B D3 C9                         .db #$D3, #%11001001
0CD2D 34 C9                         .db #$34, #%11001001
0CD2F 74 C9                         .db #$74, #%11001001
0CD31 B4 C9                         .db #$B4, #%11001001
0CD33 16 C9                         .db #$16, #%11001001
0CD35 56 C9                         .db #$56, #%11001001
0CD37 96 C9                         .db #$96, #%11001001
0CD39 D6 C9                         .db #$D6, #%11001001
0CD3B 37 C9                         .db #$37, #%11001001
0CD3D 77 C9                         .db #$77, #%11001001
0CD3F B7 C9                         .db #$B7, #%11001001
0CD41 D8 12                         .db #$D8, #%00010010
0CD43 FF                            .db #LEVEL_END
0CD44                           
0CD44                           lvl_layout_11:
0CD44 00 65                         .db #$00, #%01100101
0CD46 40 45                         .db #$40, #%01000101
0CD48 50 A7                         .db #$50, #%10100111
0CD4A 80 05                         .db #$80, #%00000101
0CD4C 90 A7                         .db #$90, #%10100111
0CD4E A0 65                         .db #$A0, #%01100101
0CD50 01 43                         .db #$01, #%01000011
0CD52 31 23                         .db #$31, #%00100011
0CD54 61 A7                         .db #$61, #%10100111
0CD56 81 A7                         .db #$81, #%10100111
0CD58 A1 63                         .db #$A1, #%01100011
0CD5A 02 44                         .db #$02, #%01000100
0CD5C 32 44                         .db #$32, #%01000100
0CD5E 92 04                         .db #$92, #%00000100
0CD60 A2 64                         .db #$A2, #%01100100
0CD62 03 40                         .db #$03, #%01000000
0CD64 33 40                         .db #$33, #%01000000
0CD66 63 A1                         .db #$63, #%10100001
0CD68 83 A2                         .db #$83, #%10100010
0CD6A 93 00                         .db #$93, #%00000000
0CD6C A3 60                         .db #$A3, #%01100000
0CD6E 04 41                         .db #$04, #%01000001
0CD70 34 41                         .db #$34, #%01000001
0CD72 94 02                         .db #$94, #%00000010
0CD74 A4 62                         .db #$A4, #%01100010
0CD76 05 47                         .db #$05, #%01000111
0CD78 35 67                         .db #$35, #%01100111
0CD7A 75 0A                         .db #$75, #%00001010
0CD7C 85 47                         .db #$85, #%01000111
0CD7E B5 47                         .db #$B5, #%01000111
0CD80 06 E7                         .db #$06, #%11100111
0CD82 16 5A                         .db #$16, #%01011010
0CD84 26 11                         .db #$26, #%00010001
0CD86 46 13                         .db #$46, #%00010011
0CD88 56 1A                         .db #$56, #%00011010
0CD8A 66 14                         .db #$66, #%00010100
0CD8C 86 10                         .db #$86, #%00010000
0CD8E 96 5A                         .db #$96, #%01011010
0CD90 A6 12                         .db #$A6, #%00010010
0CD92 C6 15                         .db #$C6, #%00010101
0CD94 D6 E7                         .db #$D6, #%11100111
0CD96 FF                            .db #LEVEL_END
0CD97                           
0CD97                           lvl_layout_12:
0CD97 00 00                         .db #$00, #%00000000
0CD99 50 C0                         .db #$50, #%11000000
0CD9B 80 00                         .db #$80, #%00000000
0CD9D 61 00                         .db #$61, #%00000000
0CD9F 22 C0                         .db #$22, #%11000000
0CDA1 82 E0                         .db #$82, #%11100000
0CDA3 C2 E0                         .db #$C2, #%11100000
0CDA5 A3 20                         .db #$A3, #%00100000
0CDA7 C3 10                         .db #$C3, #%00010000
0CDA9 04 00                         .db #$04, #%00000000
0CDAB 54 20                         .db #$54, #%00100000
0CDAD 15 0A                         .db #$15, #%00001010
0CDAF 25 C0                         .db #$25, #%11000000
0CDB1 55 E0                         .db #$55, #%11100000
0CDB3 86 20                         .db #$86, #%00100000
0CDB5 C6 E0                         .db #$C6, #%11100000
0CDB7 C7 A0                         .db #$C7, #%10100000
0CDB9 88 00                         .db #$88, #%00000000
0CDBB 59 00                         .db #$59, #%00000000
0CDBD 89 20                         .db #$89, #%00100000
0CDBF D9 1A                         .db #$D9, #%00011010
0CDC1 FF                            .db #LEVEL_END
0CDC2                           
0CDC2                           lvl_layout_13:
0CDC2 10 E0                         .db #$10, #%11100000
0CDC4 20 E0                         .db #$20, #%11100000
0CDC6 30 E0                         .db #$30, #%11100000
0CDC8 40 40                         .db #$40, #%01000000
0CDCA 80 60                         .db #$80, #%01100000
0CDCC C0 E0                         .db #$C0, #%11100000
0CDCE D0 E0                         .db #$D0, #%11100000
0CDD0 41 40                         .db #$41, #%01000000
0CDD2 71 60                         .db #$71, #%01100000
0CDD4 52 60                         .db #$52, #%01100000
0CDD6 A2 20                         .db #$A2, #%00100000
0CDD8 43 60                         .db #$43, #%01100000
0CDDA 83 60                         .db #$83, #%01100000
0CDDC 14 74                         .db #$14, #%01110100
0CDDE 54 74                         .db #$54, #%01110100
0CDE0 94 74                         .db #$94, #%01110100
0CDE2 D4 14                         .db #$D4, #%00010100
0CDE4 15 0D                         .db #$15, #%00001101
0CDE6 55 0D                         .db #$55, #%00001101
0CDE8 95 0D                         .db #$95, #%00001101
0CDEA D5 0D                         .db #$D5, #%00001101
0CDEC 26 0D                         .db #$26, #%00001101
0CDEE 46 0D                         .db #$46, #%00001101
0CDF0 66 0D                         .db #$66, #%00001101
0CDF2 86 0D                         .db #$86, #%00001101
0CDF4 A6 0D                         .db #$A6, #%00001101
0CDF6 C6 0D                         .db #$C6, #%00001101
0CDF8 07 10                         .db #$07, #%00010000
0CDFA 37 0D                         .db #$37, #%00001101
0CDFC 77 0D                         .db #$77, #%00001101
0CDFE B7 0D                         .db #$B7, #%00001101
0CE00 28 0D                         .db #$28, #%00001101
0CE02 48 0D                         .db #$48, #%00001101
0CE04 68 0D                         .db #$68, #%00001101
0CE06 88 0D                         .db #$88, #%00001101
0CE08 A8 0D                         .db #$A8, #%00001101
0CE0A C8 0D                         .db #$C8, #%00001101
0CE0C 19 0D                         .db #$19, #%00001101
0CE0E 59 0D                         .db #$59, #%00001101
0CE10 99 0D                         .db #$99, #%00001101
0CE12 D9 0D                         .db #$D9, #%00001101
0CE14 FF                            .db #LEVEL_END
0CE15                           
0CE15                           lvl_layout_14:
0CE15 00 67                         .db #$00, #%01100111
0CE17 40 67                         .db #$40, #%01100111
0CE19 80 67                         .db #$80, #%01100111
0CE1B C0 27                         .db #$C0, #%00100111
0CE1D 01 27                         .db #$01, #%00100111
0CE1F 31 C7                         .db #$31, #%11000111
0CE21 51 C7                         .db #$51, #%11000111
0CE23 71 C7                         .db #$71, #%11000111
0CE25 91 C7                         .db #$91, #%11000111
0CE27 B1 C7                         .db #$B1, #%11000111
0CE29 D1 07                         .db #$D1, #%00000111
0CE2B 02 E7                         .db #$02, #%11100111
0CE2D 06 E7                         .db #$06, #%11100111
0CE2F 13 07                         .db #$13, #%00000111
0CE31 D3 07                         .db #$D3, #%00000111
0CE33 15 07                         .db #$15, #%00000111
0CE35 35 07                         .db #$35, #%00000111
0CE37 55 07                         .db #$55, #%00000111
0CE39 75 07                         .db #$75, #%00000111
0CE3B 95 07                         .db #$95, #%00000111
0CE3D B5 07                         .db #$B5, #%00000111
0CE3F D5 07                         .db #$D5, #%00000111
0CE41 17 07                         .db #$17, #%00000111
0CE43 37 C7                         .db #$37, #%11000111
0CE45 57 C7                         .db #$57, #%11000111
0CE47 77 C7                         .db #$77, #%11000111
0CE49 97 C7                         .db #$97, #%11000111
0CE4B B7 C7                         .db #$B7, #%11000111
0CE4D D7 07                         .db #$D7, #%00000111
0CE4F 19 07                         .db #$19, #%00000111
0CE51 D9 07                         .db #$D9, #%00000111
0CE53 22 4C                         .db #$22, #%01001100
0CE55 62 4C                         .db #$62, #%01001100
0CE57 A2 4C                         .db #$A2, #%01001100
0CE59 24 0C                         .db #$24, #%00001100
0CE5B 44 0C                         .db #$44, #%00001100
0CE5D 64 0C                         .db #$64, #%00001100
0CE5F 84 0C                         .db #$84, #%00001100
0CE61 A4 0C                         .db #$A4, #%00001100
0CE63 C4 0C                         .db #$C4, #%00001100
0CE65 26 0C                         .db #$26, #%00001100
0CE67 46 0C                         .db #$46, #%00001100
0CE69 66 0C                         .db #$66, #%00001100
0CE6B 86 0C                         .db #$86, #%00001100
0CE6D A6 0C                         .db #$A6, #%00001100
0CE6F C6 0C                         .db #$C6, #%00001100
0CE71 28 4C                         .db #$28, #%01001100
0CE73 68 4C                         .db #$68, #%01001100
0CE75 A8 4C                         .db #$A8, #%01001100
0CE77 32 04                         .db #$32, #%00000100
0CE79 52 04                         .db #$52, #%00000100
0CE7B 72 04                         .db #$72, #%00000100
0CE7D 92 04                         .db #$92, #%00000100
0CE7F B2 04                         .db #$B2, #%00000100
0CE81 38 04                         .db #$38, #%00000100
0CE83 58 04                         .db #$58, #%00000100
0CE85 78 04                         .db #$78, #%00000100
0CE87 98 04                         .db #$98, #%00000100
0CE89 B8 04                         .db #$B8, #%00000100
0CE8B FF                            .db #LEVEL_END
0CE8C                           
0CE8C                           lvl_layout_15:
0CE8C 00 7A                         .db #$00, #%01111010
0CE8E 40 7A                         .db #$40, #%01111010
0CE90 80 7A                         .db #$80, #%01111010
0CE92 C0 3A                         .db #$C0, #%00111010
0CE94 31 04                         .db #$31, #%00000100
0CE96 51 04                         .db #$51, #%00000100
0CE98 81 04                         .db #$81, #%00000100
0CE9A A1 04                         .db #$A1, #%00000100
0CE9C 05 E4                         .db #$05, #%11100100
0CE9E 15 64                         .db #$15, #%01100100
0CEA0 55 64                         .db #$55, #%01100100
0CEA2 95 64                         .db #$95, #%01100100
0CEA4 D5 E4                         .db #$D5, #%11100100
0CEA6 26 04                         .db #$26, #%00000100
0CEA8 46 44                         .db #$46, #%01000100
0CEAA 76 64                         .db #$76, #%01100100
0CEAC C6 04                         .db #$C6, #%00000100
0CEAE 17 04                         .db #$17, #%00000100
0CEB0 37 64                         .db #$37, #%01100100
0CEB2 77 44                         .db #$77, #%01000100
0CEB4 B7 04                         .db #$B7, #%00000100
0CEB6 18 64                         .db #$18, #%01100100
0CEB8 58 64                         .db #$58, #%01100100
0CEBA 98 64                         .db #$98, #%01100100
0CEBC FF                            .db #LEVEL_END
0CEBD                           
0CEBD                           lvl_layout_16:
0CEBD 10 E1                         .db #$10, #%11100001
0CEBF 20 9A                         .db #$20, #%10011010
0CEC1 30 E1                         .db #$30, #%11100001
0CEC3 40 E1                         .db #$40, #%11100001
0CEC5 50 E1                         .db #$50, #%11100001
0CEC7 60 C1                         .db #$60, #%11000001
0CEC9 70 E1                         .db #$70, #%11100001
0CECB 80 E1                         .db #$80, #%11100001
0CECD 90 E1                         .db #$90, #%11100001
0CECF A0 61                         .db #$A0, #%01100001
0CED1 21 C1                         .db #$21, #%11000001
0CED3 A1 1A                         .db #$A1, #%00011010
0CED5 B1 41                         .db #$B1, #%01000001
0CED7 A2 E1                         .db #$A2, #%11100001
0CED9 B2 E1                         .db #$B2, #%11100001
0CEDB C2 1A                         .db #$C2, #%00011010
0CEDD D2 E1                         .db #$D2, #%11100001
0CEDF 63 1A                         .db #$63, #%00011010
0CEE1 C3 C1                         .db #$C3, #%11000001
0CEE3 14 61                         .db #$14, #%01100001
0CEE5 54 61                         .db #$54, #%01100001
0CEE7 94 C1                         .db #$94, #%11000001
0CEE9 15 61                         .db #$15, #%01100001
0CEEB 55 41                         .db #$55, #%01000001
0CEED 85 1A                         .db #$85, #%00011010
0CEEF 16 41                         .db #$16, #%01000001
0CEF1 46 1A                         .db #$46, #%00011010
0CEF3 56 61                         .db #$56, #%01100001
0CEF5 A6 61                         .db #$A6, #%01100001
0CEF7 17 67                         .db #$17, #%01100111
0CEF9 57 67                         .db #$57, #%01100111
0CEFB 97 67                         .db #$97, #%01100111
0CEFD D7 07                         .db #$D7, #%00000111
0CEFF 28 41                         .db #$28, #%01000001
0CF01 58 61                         .db #$58, #%01100001
0CF03 A8 41                         .db #$A8, #%01000001
0CF05 18 11                         .db #$18, #%00010001
0CF07 38 11                         .db #$38, #%00010001
0CF09 98 11                         .db #$98, #%00010001
0CF0B B8 11                         .db #$B8, #%00010001
0CF0D D8 11                         .db #$D8, #%00010001
0CF0F 59 09                         .db #$59, #%00001001
0CF11 FF                            .db #LEVEL_END
0CF12                           
0CF12                           lvl_layout_17:
0CF12 10 EA                         .db #$10, #%11101010
0CF14 20 E2                         .db #$20, #%11100010
0CF16 30 62                         .db #$30, #%01100010
0CF18 70 02                         .db #$70, #%00000010
0CF1A 80 6A                         .db #$80, #%01101010
0CF1C 90 22                         .db #$90, #%00100010
0CF1E 01 AA                         .db #$01, #%10101010
0CF20 31 6A                         .db #$31, #%01101010
0CF22 81 2A                         .db #$81, #%00101010
0CF24 A1 02                         .db #$A1, #%00000010
0CF26 C1 02                         .db #$C1, #%00000010
0CF28 D1 0A                         .db #$D1, #%00001010
0CF2A 32 EA                         .db #$32, #%11101010
0CF2C 42 6A                         .db #$42, #%01101010
0CF2E 62 02                         .db #$62, #%00000010
0CF30 92 6A                         .db #$92, #%01101010
0CF32 D2 E2                         .db #$D2, #%11100010
0CF34 43 1A                         .db #$43, #%00011010
0CF36 53 CA                         .db #$53, #%11001010
0CF38 73 02                         .db #$73, #%00000010
0CF3A 83 4A                         .db #$83, #%01001010
0CF3C B3 CA                         .db #$B3, #%11001010
0CF3E C3 EA                         .db #$C3, #%11101010
0CF40 04 0A                         .db #$04, #%00001010
0CF42 14 A2                         .db #$14, #%10100010
0CF44 24 AA                         .db #$24, #%10101010
0CF46 44 AA                         .db #$44, #%10101010
0CF48 64 6A                         .db #$64, #%01101010
0CF4A 65 6A                         .db #$65, #%01101010
0CF4C A5 AA                         .db #$A5, #%10101010
0CF4E 06 EA                         .db #$06, #%11101010
0CF50 16 62                         .db #$16, #%01100010
0CF52 66 22                         .db #$66, #%00100010
0CF54 86 2A                         .db #$86, #%00101010
0CF56 17 42                         .db #$17, #%01000010
0CF58 47 12                         .db #$47, #%00010010
0CF5A 57 6A                         .db #$57, #%01101010
0CF5C 97 4A                         .db #$97, #%01001010
0CF5E A7 02                         .db #$A7, #%00000010
0CF60 18 02                         .db #$18, #%00000010
0CF62 28 0A                         .db #$28, #%00001010
0CF64 38 22                         .db #$38, #%00100010
0CF66 68 2A                         .db #$68, #%00101010
0CF68 88 62                         .db #$88, #%01100010
0CF6A C8 0A                         .db #$C8, #%00001010
0CF6C D8 02                         .db #$D8, #%00000010
0CF6E 19 2A                         .db #$19, #%00101010
0CF70 39 2A                         .db #$39, #%00101010
0CF72 69 42                         .db #$69, #%01000010
0CF74 99 2A                         .db #$99, #%00101010
0CF76 B9 42                         .db #$B9, #%01000010
0CF78 FF                            .db #LEVEL_END
0CF79                           
0CF79                           lvl_layout_18:
0CF79 00 12                         .db #$00, #%00010010
0CF7B 40 1A                         .db #$40, #%00011010
0CF7D 50 11                         .db #$50, #%00010001
0CF7F 70 1A                         .db #$70, #%00011010
0CF81 80 10                         .db #$80, #%00010000
0CF83 D0 13                         .db #$D0, #%00010011
0CF85 01 1A                         .db #$01, #%00011010
0CF87 22 15                         .db #$22, #%00010101
0CF89 A2 1A                         .db #$A2, #%00011010
0CF8B B2 14                         .db #$B2, #%00010100
0CF8D 03 67                         .db #$03, #%01100111
0CF8F 43 67                         .db #$43, #%01100111
0CF91 83 67                         .db #$83, #%01100111
0CF93 24 09                         .db #$24, #%00001001
0CF95 74 0D                         .db #$74, #%00001101
0CF97 C4 0A                         .db #$C4, #%00001010
0CF99 05 A7                         .db #$05, #%10100111
0CF9B 45 27                         .db #$45, #%00100111
0CF9D 95 27                         .db #$95, #%00100111
0CF9F 16 C7                         .db #$16, #%11000111
0CFA1 36 67                         .db #$36, #%01100111
0CFA3 86 67                         .db #$86, #%01100111
0CFA5 D6 07                         .db #$D6, #%00000111
0CFA7 07 A3                         .db #$07, #%10100011
0CFA9 27 23                         .db #$27, #%00100011
0CFAB 47 C7                         .db #$47, #%11000111
0CFAD 57 A0                         .db #$57, #%10100000
0CFAF 67 A7                         .db #$67, #%10100111
0CFB1 77 20                         .db #$77, #%00100000
0CFB3 97 C7                         .db #$97, #%11000111
0CFB5 A7 A4                         .db #$A7, #%10100100
0CFB7 B7 A7                         .db #$B7, #%10100111
0CFB9 C7 24                         .db #$C7, #%00100100
0CFBB 28 0B                         .db #$28, #%00001011
0CFBD 38 A3                         .db #$38, #%10100011
0CFBF 78 08                         .db #$78, #%00001000
0CFC1 88 A3                         .db #$88, #%10100011
0CFC3 C8 0C                         .db #$C8, #%00001100
0CFC5 D8 A4                         .db #$D8, #%10100100
0CFC7 09 43                         .db #$09, #%01000011
0CFC9 59 40                         .db #$59, #%01000000
0CFCB A9 44                         .db #$A9, #%01000100
0CFCD FF                            .db #LEVEL_END
0CFCE                           
0CFCE                           lvl_layout_19:
0CFCE 11 A8                         .db #$11, #%10101000
0CFD0 21 68                         .db #$21, #%01101000
0CFD2 81 28                         .db #$81, #%00101000
0CFD4 B1 48                         .db #$B1, #%01001000
0CFD6 22 48                         .db #$22, #%01001000
0CFD8 62 68                         .db #$62, #%01101000
0CFDA B2 28                         .db #$B2, #%00101000
0CFDC 23 28                         .db #$23, #%00101000
0CFDE 83 28                         .db #$83, #%00101000
0CFE0 B3 28                         .db #$B3, #%00101000
0CFE2 04 E8                         .db #$04, #%11101000
0CFE4 24 08                         .db #$24, #%00001000
0CFE6 44 08                         .db #$44, #%00001000
0CFE8 64 E8                         .db #$64, #%11101000
0CFEA 84 E8                         .db #$84, #%11101000
0CFEC C4 A8                         .db #$C4, #%10101000
0CFEE D4 E8                         .db #$D4, #%11101000
0CFF0 15 48                         .db #$15, #%01001000
0CFF2 55 C8                         .db #$55, #%11001000
0CFF4 75 C8                         .db #$75, #%11001000
0CFF6 A5 08                         .db #$A5, #%00001000
0CFF8 36 08                         .db #$36, #%00001000
0CFFA B6 08                         .db #$B6, #%00001000
0CFFC 27 48                         .db #$27, #%01001000
0CFFE 97 28                         .db #$97, #%00101000
0D000 C7 08                         .db #$C7, #%00001000
0D002 09 61                         .db #$09, #%01100001
0D004 19 11                         .db #$19, #%00010001
0D006 49 61                         .db #$49, #%01100001
0D008 89 31                         .db #$89, #%00110001
0D00A A9 61                         .db #$A9, #%01100001
0D00C FF                            .db #LEVEL_END
0D00D                           
0D00D                           lvl_layout_20:
0D00D 00 60                         .db #$00, #%01100000
0D00F 10 1A                         .db #$10, #%00011010
0D011 40 A7                         .db #$40, #%10100111
0D013 50 20                         .db #$50, #%00100000
0D015 70 1A                         .db #$70, #%00011010
0D017 80 40                         .db #$80, #%01000000
0D019 B0 1A                         .db #$B0, #%00011010
0D01B C0 20                         .db #$C0, #%00100000
0D01D 01 40                         .db #$01, #%01000000
0D01F 31 1A                         .db #$31, #%00011010
0D021 A1 40                         .db #$A1, #%01000000
0D023 D1 1A                         .db #$D1, #%00011010
0D025 43 67                         .db #$43, #%01100111
0D027 83 47                         .db #$83, #%01000111
0D029 44 A7                         .db #$44, #%10100111
0D02B 54 25                         .db #$54, #%00100101
0D02D 94 08                         .db #$94, #%00001000
0D02F A4 A7                         .db #$A4, #%10100111
0D031 55 05                         .db #$55, #%00000101
0D033 65 08                         .db #$65, #%00001000
0D035 06 27                         .db #$06, #%00100111
0D037 36 67                         .db #$36, #%01100111
0D039 76 28                         .db #$76, #%00101000
0D03B A6 27                         .db #$A6, #%00100111
0D03D D6 07                         .db #$D6, #%00000111
0D03F A7 A7                         .db #$A7, #%10100111
0D041 08 60                         .db #$08, #%01100000
0D043 09 60                         .db #$09, #%01100000
0D045 18 A7                         .db #$18, #%10100111
0D047 48 A7                         .db #$48, #%10100111
0D049 58 47                         .db #$58, #%01000111
0D04B 88 27                         .db #$88, #%00100111
0D04D B8 20                         .db #$B8, #%00100000
0D04F D8 1A                         .db #$D8, #%00011010
0D051 59 15                         .db #$59, #%00010101
0D053 69 60                         .db #$69, #%01100000
0D055 A9 60                         .db #$A9, #%01100000
0D057 FF                            .db #LEVEL_END
0D058                           
0D058                           lvl_layout_21:
0D058 00 13                         .db #$00, #%00010011
0D05A 10 11                         .db #$10, #%00010001
0D05C 20 67                         .db #$20, #%01100111
0D05E 60 67                         .db #$60, #%01100111
0D060 A0 47                         .db #$A0, #%01000111
0D062 D0 15                         .db #$D0, #%00010101
0D064 32 63                         .db #$32, #%01100011
0D066 72 05                         .db #$72, #%00000101
0D068 82 43                         .db #$82, #%01000011
0D06A B2 43                         .db #$B2, #%01000011
0D06C 33 03                         .db #$33, #%00000011
0D06E 43 2A                         .db #$43, #%00101010
0D070 63 7A                         .db #$63, #%01111010
0D072 73 2A                         .db #$73, #%00101010
0D074 A3 7A                         .db #$A3, #%01111010
0D076 34 63                         .db #$34, #%01100011
0D078 74 63                         .db #$74, #%01100011
0D07A B4 43                         .db #$B4, #%01000011
0D07C 06 63                         .db #$06, #%01100011
0D07E 46 63                         .db #$46, #%01100011
0D080 86 63                         .db #$86, #%01100011
0D082 C6 C3                         .db #$C6, #%11000011
0D084 07 7A                         .db #$07, #%01111010
0D086 47 7A                         .db #$47, #%01111010
0D088 67 0A                         .db #$67, #%00001010
0D08A 87 7A                         .db #$87, #%01111010
0D08C 08 13                         .db #$08, #%00010011
0D08E 18 43                         .db #$18, #%01000011
0D090 48 63                         .db #$48, #%01100011
0D092 88 63                         .db #$88, #%01100011
0D094 FF                            .db #LEVEL_END
0D095                           
0D095                           lvl_layout_22:
0D095 00 7A                         .db #$00, #%01111010
0D097 40 7A                         .db #$40, #%01111010
0D099 80 7A                         .db #$80, #%01111010
0D09B C0 3A                         .db #$C0, #%00111010
0D09D 13 67                         .db #$13, #%01100111
0D09F 83 A7                         .db #$83, #%10100111
0D0A1 B3 07                         .db #$B3, #%00000111
0D0A3 14 07                         .db #$14, #%00000111
0D0A5 44 07                         .db #$44, #%00000111
0D0A7 A4 07                         .db #$A4, #%00000111
0D0A9 15 A5                         .db #$15, #%10100101
0D0AB 45 A5                         .db #$45, #%10100101
0D0AD 85 25                         .db #$85, #%00100101
0D0AF 86 05                         .db #$86, #%00000101
0D0B1 A6 05                         .db #$A6, #%00000101
0D0B3 17 11                         .db #$17, #%00010001
0D0B5 47 A1                         .db #$47, #%10100001
0D0B7 87 A1                         .db #$87, #%10100001
0D0B9 B7 A1                         .db #$B7, #%10100001
0D0BB 18 41                         .db #$18, #%01000001
0D0BD 68 01                         .db #$68, #%00000001
0D0BF D8 01                         .db #$D8, #%00000001
0D0C1 FF                            .db #LEVEL_END
0D0C2                           
0D0C2                           lvl_layout_23:
0D0C2 00 71                         .db #$00, #%01110001
0D0C4 40 11                         .db #$40, #%00010001
0D0C6 50 43                         .db #$50, #%01000011
0D0C8 80 D1                         .db #$80, #%11010001
0D0CA 90 E3                         .db #$90, #%11100011
0D0CC A0 63                         .db #$A0, #%01100011
0D0CE 01 63                         .db #$01, #%01100011
0D0D0 41 63                         .db #$41, #%01100011
0D0D2 A1 63                         .db #$A1, #%01100011
0D0D4 02 63                         .db #$02, #%01100011
0D0D6 42 63                         .db #$42, #%01100011
0D0D8 62 11                         .db #$62, #%00010001
0D0DA A2 67                         .db #$A2, #%01100111
0D0DC 04 63                         .db #$04, #%01100011
0D0DE 44 23                         .db #$44, #%00100011
0D0E0 64 D1                         .db #$64, #%11010001
0D0E2 74 E3                         .db #$74, #%11100011
0D0E4 84 F1                         .db #$84, #%11110001
0D0E6 94 E3                         .db #$94, #%11100011
0D0E8 A4 C7                         .db #$A4, #%11000111
0D0EA B4 23                         .db #$B4, #%00100011
0D0EC 05 63                         .db #$05, #%01100011
0D0EE 45 23                         .db #$45, #%00100011
0D0F0 06 71                         .db #$06, #%01110001
0D0F2 46 11                         .db #$46, #%00010001
0D0F4 56 E3                         .db #$56, #%11100011
0D0F6 D6 07                         .db #$D6, #%00000111
0D0F8 17 D1                         .db #$17, #%11010001
0D0FA 27 43                         .db #$27, #%01000011
0D0FC 67 D1                         .db #$67, #%11010001
0D0FE A7 C7                         .db #$A7, #%11000111
0D100 C7 A7                         .db #$C7, #%10100111
0D102 D7 B3                         .db #$D7, #%10110011
0D104 28 43                         .db #$28, #%01000011
0D106 78 43                         .db #$78, #%01000011
0D108 29 43                         .db #$29, #%01000011
0D10A 79 43                         .db #$79, #%01000011
0D10C FF                           .db #LEVEL_END
0D10D                           
0D10D                           lvl_layout_24:
0D10D 02 67                         .db #$02, #%01100111
0D10F 42 67                         .db #$42, #%01100111
0D111 82 67                         .db #$82, #%01100111
0D113 05 67                         .db #$05, #%01100111
0D115 45 67                         .db #$45, #%01100111
0D117 85 67                         .db #$85, #%01100111
0D119 08 67                         .db #$08, #%01100111
0D11B 48 67                         .db #$48, #%01100111
0D11D 88 67                         .db #$88, #%01100111
0D11F 30 E7                         .db #$30, #%11100111
0D121 70 E7                         .db #$70, #%11100111
0D123 B0 E7                         .db #$B0, #%11100111
0D125 34 E7                         .db #$34, #%11100111
0D127 74 E7                         .db #$74, #%11100111
0D129 B4 E7                         .db #$B4, #%11100111
0D12B 20 13                         .db #$20, #%00010011
0D12D 40 10                         .db #$40, #%00010000
0D12F 80 02                         .db #$80, #%00000010
0D131 41 05                         .db #$41, #%00000101
0D133 B1 09                         .db #$B1, #%00001001
0D135 02 09                         .db #$02, #%00001001
0D137 52 0C                         .db #$52, #%00001100
0D139 13 11                         .db #$13, #%00010001
0D13B 33 04                         .db #$33, #%00000100
0D13D 74 0C                         .db #$74, #%00001100
0D13F B4 08                         .db #$B4, #%00001000
0D141 15 09                         .db #$15, #%00001001
0D143 55 0C                         .db #$55, #%00001100
0D145 95 0C                         .db #$95, #%00001100
0D147 47 03                         .db #$47, #%00000011
0D149 A7 12                         .db #$A7, #%00010010
0D14B 18 15                         .db #$18, #%00010101
0D14D 09 05                         .db #$09, #%00000101
0D14F 19 03                         .db #$19, #%00000011
0D151 FF                            .db #LEVEL_END
0D152                           
0D152                           lvl_layout_25:
0D152 00 12                         .db #$00, #%00010010
0D154 10 63                         .db #$10, #%01100011
0D156 60 63                         .db #$60, #%01100011
0D158 A0 07                         .db #$A0, #%00000111
0D15A 01 11                         .db #$01, #%00010001
0D15C A1 02                         .db #$A1, #%00000010
0D15E 02 67                         .db #$02, #%01100111
0D160 42 07                         .db #$42, #%00000111
0D162 62 67                         .db #$62, #%01100111
0D164 A2 C7                         .db #$A2, #%11000111
0D166 03 61                         .db #$03, #%01100001
0D168 43 01                         .db #$43, #%00000001
0D16A 63 61                         .db #$63, #%01100001
0D16C A6 E7                         .db #$A6, #%11100111
0D16E B6 47                         .db #$B6, #%01000111
0D170 C6 01                         .db #$C6, #%00000001
0D172 B7 42                         .db #$B7, #%01000010
0D174 B8 42                         .db #$B8, #%01000010
0D176 C8 0A                         .db #$C8, #%00001010
0D178 09 7A                         .db #$09, #%01111010
0D17A 49 7A                         .db #$49, #%01111010
0D17C 89 3A                         .db #$89, #%00111010
0D17E B9 42                         .db #$B9, #%01000010
0D180 FF                            .db #LEVEL_END
0D181                           
0D181                           ;; Level layout address pointers
0D181                           tbl_lvl_layout_hi:
0D181 CA CA CA CB CB                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D186 CB CC CC CC CD                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D18B CD CD CD CE CE                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D190 CE CF CF CF D0                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D195 D0 D0 D0 D1 D1                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D19A                           
0D19A                           tbl_lvl_layout_lo:
0D19A A2 BD F2 25 96                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D19F D1 5A 9B D2 15                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D1A4 44 97 C2 15 8C                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D1A9 BD 12 79 CE 0D                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D1AE 58 95 C2 0D 52                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D1B3                           
0D1B3                           ;; Ball start position (#$YX)
0D1B3                           tbl_lvl_ball_startpos:
0D1B3 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D1B8 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D1BD 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D1C2 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D1C7 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D1CC                               
0D1CC                           ;; Ball start direction, color and tile score
0D1CC                           ;; #% ccc v tttt
0D1CC                           ;;    ||| | ++++-- tile score
0D1CC                           ;;    ||| +------- vertical direction, up (0) or down
0D1CC                           ;;    +++--------- color (CBRYGM)
0D1CC                           tbl_lvl_ball_init:
0D1CC 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D1D1 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D1D6 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D1DB 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D1E0 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D1E5                           
0D1E5                           
0D1E5                           
0D1E5                           ;; Helper table to multiply values by 64
0D1E5                           tbl_Times64:
0D1E5 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D1E9                           
0D1E9                           
0D1E9                           ;; Metatile ID to CHR data mapper
0D1E9                           tbl_GametileTopLeft:
0D1E9 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D1F3                           
0D1F3                           tbl_GametileTopRight:
0D1F3 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D1FD                           
0D1FD                           tbl_GametileBottomLeft:
0D1FD 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D207                           
0D207                           tbl_GametileBottomRight:
0D207 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D211                           
0D211                           ;; Metatile ID to RAM byte data mapper
0D211                           tbl_GameTileRamByte:
0D211 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D216                           
0D216                           ;; HUD text data
0D216                           tbl_HudText:
0D216 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D21E 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D225 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D22D 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D232                           
0D232                           ;; NMI handler
0D232                           NMI:
0D232                               .include "interrupt/nmi.asm"
0D232                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D232                           ;;
0D232                           ;; include/nmi.asm
0D232                           ;;
0D232                           ;; Non-maskable interrupt script. This script is being executed
0D232                           ;; when vBlank hits.
0D232                           ;;
0D232                           ;;
0D232                           
0D232                               ;; Preserve accumulator through stack
0D232 48                            PHA
0D233                           
0D233                               ;; Should NMI be skipped?
0D233 A5 13                         LDA skip_nmi
0D235 F0 03                         BEQ +
0D237 4C C5 D2                          JMP +skip_nmi
0D23A                               +
0D23A                           
0D23A                               ;; When in NMI, skip additional NMI requests
0D23A A9 01                         LDA #$01
0D23C 85 13                         STA skip_nmi
0D23E                           
0D23E                               ;; Preserve X, Y, and PC through stack
0D23E 8A                            TXA
0D23F 48                            PHA
0D240 98                            TYA
0D241 48                            PHA
0D242 08                            PHP
0D243                               
0D243                               ;; Check forced NMI skip
0D243 A5 14                         LDA force_skip_nmi
0D245 F0 03                         BEQ +
0D247 4C B6 D2                          JMP +force_skip_nmi
0D24A                               +
0D24A                           
0D24A                               ;; Update PPU mask
0D24A                               ;LDA #$00
0D24A                               ;STA PPU_CTRL
0D24A A5 12                         LDA soft_ppu_mask
0D24C 8D 01 20                      STA PPU_MASK
0D24F                               
0D24F                               
0D24F                               ;; Additional PPU updates go here
0D24F                               .include "game/interrupt/nmi.asm"
0D24F                           
0D24F                               ;; Check if ppu_buffer needs updating
0D24F A5 2F                         LDA ppu_buffer_update
0D251 D0 03                         BNE +
0D253 4C 95 D2                          JMP +no_ppu_buffer_update
0D256                               +
0D256                           
0D256                               ;; Reset ppu control register and mask
0D256 A2 00                         LDX #$00
0D258 8E 00 20                      STX PPU_CTRL
0D25B 8E 01 20                      STX PPU_MASK
0D25E                           
0D25E                               ;; Set up loop
0D25E                               -
0D25E                                   ;; Reset hi/lo latch
0D25E 2C 02 20                          BIT PPU_STATUS
0D261                           
0D261                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D261 BD 00 03                          LDA ppu_buffer,x
0D264 8D 06 20                          STA PPU_ADDR
0D267 E8                                INX
0D268 BD 00 03                          LDA ppu_buffer,x
0D26B 8D 06 20                          STA PPU_ADDR
0D26E                           
0D26E                                   ;; Write ppu_buffer data to PPU_ADDR
0D26E E8                                INX
0D26F BD 00 03                          LDA ppu_buffer,x
0D272 8D 07 20                          STA PPU_DATA
0D275                           
0D275                                   ;; Check if updating is done (eg. X is at pointer)
0D275 E8                                INX
0D276 E4 30                             CPX ppu_buffer_pointer
0D278 F0 03                             BEQ +
0D27A 4C 5E D2                      JMP -
0D27D                           +
0D27D                           
0D27D                               ;; Reset ppu buffer update and pointer
0D27D A9 00                         LDA #$00
0D27F 85 2F                         STA ppu_buffer_update
0D281 85 30                         STA ppu_buffer_pointer
0D283                               
0D283                               ;; Reset scrolling position
0D283 8D 05 20                      STA PPU_SCROLL
0D286 8D 05 20                      STA PPU_SCROLL
0D289                           
0D289                               ;; Restore ppu control register and mask
0D289 A9 90                         LDA #%10010000
0D28B 8D 00 20                      STA PPU_CTRL
0D28E A5 12                         LDA soft_ppu_mask
0D290 8D 01 20                      STA PPU_MASK
0D293 A9 00                         LDA #$00
0D295                           
0D295                           ;; Continue other NMI stuff
0D295                           +no_ppu_buffer_update:
0D295                           
0D295                               ;; Reset sprite RAM, draw sprites
0D295 8D 03 20                      STA OAM_ADDR
0D298 A9 02                         LDA #$02
0D29A 8D 14 40                      STA OAM_DMA
0D29D                           
0D29D                               ;; Decrease explosion frame counters
0D29D A0 04                         LDY #MAX_ANIMATIONS
0D29F A2 00                         LDX #$00
0D2A1                               -
0D2A1 BD 30 03                          LDA explosion_framecounter,x
0D2A4 F0 03                             BEQ +
0D2A6 DE 30 03                              DEC explosion_framecounter,x
0D2A9                                   +
0D2A9 E8                                INX
0D2AA 88                                DEY
0D2AB F0 03                             BEQ +done        
0D2AD 4C A1 D2                      JMP -
0D2B0                           +done:
0D2B0                               
0D2B0                               ;; Decrease nudge counter
0D2B0 A5 33                         LDA nudge_counter
0D2B2 F0 02                         BEQ +
0D2B4 C6 33                             DEC nudge_counter
0D2B6                               +
0D2B6                           
0D2B6                           ;; This is what happens when we forced nmi skip
0D2B6                           +force_skip_nmi:
0D2B6                           
0D2B6                               ;; Increase frame counters
0D2B6 E6 15                         INC frame_counter
0D2B8                           
0D2B8                               ;; reset ball_update_position
0D2B8 A9 00                         LDA #$00
0D2BA 85 2B                         STA ball_update_position
0D2BC                           
0D2BC                               ;; Don't skip next NMI request
0D2BC A9 00                         LDA #$00
0D2BE 85 13                         STA skip_nmi
0D2C0                           
0D2C0                               ;; Restore X, Y and PC from stack
0D2C0 28                            PLP
0D2C1 68                            PLA
0D2C2 A8                            TAY
0D2C3 68                            PLA
0D2C4 AA                            TAX
0D2C5                           
0D2C5                           +skip_nmi:
0D2C5                               ;; Restore accumulator from stack
0D2C5 68                            PLA
0D2C6                           
0D2C6                               ;; Return
0D2C6 40                            RTI
0D2C7                           
0D2C7                           ;; IRQ handler (empty)
0D2C7                           IRQ:
0D2C7                               .include "interrupt/irq.asm"
0D2C7 40                            RTI0D2C8                           
0D2C8                           ;; Interrupt vectors
0D2C8 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 32 D2                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE C7 D2                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
