	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$02        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$30        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$03
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                               00036                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 C7 C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 C7 C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 B3 C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 9D CA                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 9A CA                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 82 C4                      JSR sub_DisableRendering
0C08A 20 0C C5                      JSR sub_JumpToPointer
0C08D 20 96 C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 2D                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C A1 C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 32                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 2B                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 82 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 2C                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 24                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 18                            CLC
0C0C7 69 30                         ADC #BALL_SPEED_LO
0C0C9 85 1A                         STA ball_ypos_lo
0C0CB                           
0C0CB                               ;; update the high byte with carry
0C0CB A5 19                         LDA ball_ypos_hi
0C0CD 69 02                         ADC #BALL_SPEED_HI
0C0CF 85 19                         STA ball_ypos_hi
0C0D1                               
0C0D1                               ;; Check bottom bound
0C0D1 C9 C8                         CMP #BOUND_BOTTOM
0C0D3 90 32                         BCC +checkHorizontalMovement
0C0D5 F0 30                         BEQ +checkHorizontalMovement
0C0D7                           
0C0D7                           
0C0D7                               ;; Change ball direction to "up"
0C0D7 A9 C8                         LDA #BOUND_BOTTOM
0C0D9 85 19                         STA ball_ypos_hi
0C0DB A9 00                         LDA #$00
0C0DD 85 1A                         STA ball_ypos_lo
0C0DF A5 2C                         LDA ball_flags
0C0E1 29 EF                         AND #MOVE_BALL_UP
0C0E3 85 2C                         STA ball_flags
0C0E5 4C 07 C1                      JMP +checkHorizontalMovement
0C0E8                           
0C0E8                           
0C0E8                           +moveBallUp:
0C0E8                               ;; update the low byte
0C0E8 A5 1A                         LDA ball_ypos_lo
0C0EA 38                            SEC
0C0EB E9 30                         SBC #BALL_SPEED_LO
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF                           
0C0EF                               ;; update the high byte with carry
0C0EF A5 19                         LDA ball_ypos_hi
0C0F1 E9 02                         SBC #BALL_SPEED_HI
0C0F3 85 19                         STA ball_ypos_hi
0C0F5                               
0C0F5                               ;; Check top bound
0C0F5 C9 30                         CMP #BOUND_TOP
0C0F7 B0 0E                         BCS +checkHorizontalMovement
0C0F9                           
0C0F9                               ;; Change ball direction to "down"
0C0F9 A9 30                         LDA #BOUND_TOP
0C0FB 85 19                         STA ball_ypos_hi
0C0FD A9 00                         LDA #$00
0C0FF 85 1A                         STA ball_ypos_lo
0C101 A5 2C                         LDA ball_flags
0C103 09 10                         ORA #MOVE_BALL_DOWN
0C105 85 2C                         STA ball_flags
0C107                           
0C107                           
0C107                           +checkHorizontalMovement:
0C107                           
0C107                               ;; Check if ball is being nudged
0C107 A5 33                         LDA nudge_counter
0C109 D0 41                         BNE +doneBallMovement
0C10B                           
0C10B                               ;; Check if left button is held
0C10B A5 0F                         LDA buttons_held
0C10D 29 02                         AND #BUTTON_LEFT
0C10F F0 1B                         BEQ +
0C111                                   ;; update the low byte
0C111 A5 18                             LDA ball_xpos_lo
0C113 38                                SEC
0C114 E9 30                             SBC #BALL_SPEED_LO
0C116 85 18                             STA ball_xpos_lo
0C118                           
0C118                                   ;; update the high byte
0C118 A5 17                             LDA ball_xpos_hi
0C11A E9 02                             SBC #BALL_SPEED_HI
0C11C 85 17                             STA ball_xpos_hi
0C11E                                   
0C11E                                   ;; Check left bound
0C11E C9 10                             CMP #BOUND_LEFT
0C120 B0 2A                             BCS +doneBallMovement
0C122                                   
0C122                                   ;; Set flag to nudge right and set nudge counter
0C122 A5 2C                             LDA ball_flags
0C124 09 02                             ORA #NUDGE_BALL_RIGHT
0C126 20 05 C5                          JSR sub_InitiateNudge
0C129                           
0C129 4C 4C C1                          JMP +doneBallMovement        
0C12C                               +
0C12C                           
0C12C                               ;; Check if right button is held
0C12C A5 0F                         LDA buttons_held
0C12E 29 01                         AND #BUTTON_RIGHT
0C130 F0 1A                         BEQ +
0C132                                   ;; update the low byte
0C132 A5 18                             LDA ball_xpos_lo
0C134 18                                CLC
0C135 69 30                             ADC #BALL_SPEED_LO
0C137 85 18                             STA ball_xpos_lo
0C139                           
0C139                                   ;; update the high byte
0C139 A5 17                             LDA ball_xpos_hi
0C13B 69 02                             ADC #BALL_SPEED_HI
0C13D 85 17                             STA ball_xpos_hi     
0C13F                           
0C13F                                  ;; Check right bound
0C13F C9 E8                             CMP #BOUND_RIGHT
0C141 90 09                             BCC +doneBallMovement
0C143 F0 07                             BEQ +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge left and set nudge timer
0C145 A5 2C                             LDA ball_flags
0C147 29 FD                             AND #NUDGE_BALL_LEFT
0C149 20 05 C5                          JSR sub_InitiateNudge
0C14C                               +
0C14C                           
0C14C                           
0C14C                           +doneBallMovement:
0C14C                           
0C14C                               ;; Check nudge
0C14C A5 33                         LDA nudge_counter
0C14E F0 23                         BEQ +doneBallNudging
0C150 A5 2C                             LDA ball_flags
0C152 29 02                             AND #NUDGE_BALL_RIGHT
0C154 F0 10                             BEQ +nudgeBallLeft
0C156                                   
0C156                                       ;; update the low byte
0C156 A5 18                                 LDA ball_xpos_lo
0C158 18                                    CLC
0C159 69 30                                 ADC #BALL_SPEED_LO
0C15B 85 18                                 STA ball_xpos_lo
0C15D                           
0C15D                                       ;; update the high byte
0C15D A5 17                                 LDA ball_xpos_hi
0C15F 69 02                                 ADC #BALL_SPEED_HI
0C161 85 17                                 STA ball_xpos_hi  
0C163 4C 73 C1                              JMP +doneBallNudging
0C166                                   +nudgeBallLeft:
0C166                                   
0C166                                   ;; update the low byte
0C166 A5 18                             LDA ball_xpos_lo
0C168 38                                SEC
0C169 E9 30                             SBC #BALL_SPEED_LO
0C16B 85 18                             STA ball_xpos_lo
0C16D                           
0C16D                                   ;; update the high byte
0C16D A5 17                             LDA ball_xpos_hi
0C16F E9 02                             SBC #BALL_SPEED_HI
0C171 85 17                             STA ball_xpos_hi
0C173                               +doneBallNudging:
0C173                           
0C173                               ;; Don't update position again until next frame
0C173 E6 2B                         INC ball_update_position
0C175                           
0C175                               
0C175                               ;; Do collision detection
0C175                               .include "game/include/main/collision_detection.asm"
0C175                           
0C175                               ;; Get ball's x-left, x-center, x-right position
0C175 A5 17                         LDA ball_xpos_hi
0C177 18                            CLC
0C178 69 F0                         ADC #BALL_LEFT_WGA
0C17A 85 25                         STA ball_left
0C17C 18                            CLC
0C17D 69 04                         ADC #BALL_HALF_SIZE
0C17F 85 26                         STA ball_center
0C181 18                            CLC
0C182 69 04                         ADC #BALL_HALF_SIZE
0C184 85 27                         STA ball_right
0C186                           
0C186                               ;; Get ball's y-top, y-middle, y-bottom position
0C186 A5 19                         LDA ball_ypos_hi
0C188 18                            CLC
0C189 69 D0                         ADC #BALL_TOP_WGA
0C18B 85 28                         STA ball_top
0C18D 18                            CLC
0C18E 69 04                         ADC #BALL_HALF_SIZE
0C190 85 29                         STA ball_middle
0C192 18                            CLC
0C193 69 04                         ADC #BALL_HALF_SIZE
0C195 85 2A                         STA ball_bottom
0C197                           
0C197                           +checkRightCollision:
0C197                               ;; Check if ball moves right
0C197                               ;; No need to check nudging here as that will never collide with a tile
0C197 A5 0F                         LDA buttons_held
0C199 29 01                         AND #BUTTON_RIGHT
0C19B F0 1C                         BEQ +checkLeftCollision
0C19D                           
0C19D                               ;; Check tile at right position
0C19D A5 29                         LDA ball_middle
0C19F 85 00                         STA temp
0C1A1 A5 27                         LDA ball_right
0C1A3 85 01                         STA temp+1
0C1A5 20 6A C4                      JSR sub_ConvertXYToTileType
0C1A8 29 01                         AND #TILE_IS_SOLID
0C1AA F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1AC                           
0C1AC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1AC A5 2C                         LDA ball_flags
0C1AE 29 FD                         AND #NUDGE_BALL_LEFT
0C1B0 20 05 C5                      JSR sub_InitiateNudge
0C1B3 20 C3 C4                      JSR sub_EvaluateTileType
0C1B6 4C D8 C1                      JMP +checkTopCollision
0C1B9                           
0C1B9                           +checkLeftCollision:
0C1B9                               ;; Check if ball moves right
0C1B9                               ;; No need to check nudging here as that will never collide with a tile
0C1B9 A5 0F                         LDA buttons_held
0C1BB 29 02                         AND #BUTTON_LEFT
0C1BD F0 19                         BEQ +checkTopCollision
0C1BF                           
0C1BF                               ;; Check tile at right position
0C1BF A5 29                         LDA ball_middle
0C1C1 85 00                         STA temp
0C1C3 A5 25                         LDA ball_left
0C1C5 85 01                         STA temp+1
0C1C7 20 6A C4                      JSR sub_ConvertXYToTileType
0C1CA 29 01                         AND #TILE_IS_SOLID
0C1CC F0 0A                         BEQ +checkTopCollision
0C1CE                           
0C1CE                               ;; Tile is solid; nudge ball and evaluate tile type
0C1CE A5 2C                         LDA ball_flags
0C1D0 09 02                         ORA #NUDGE_BALL_RIGHT
0C1D2 20 05 C5                      JSR sub_InitiateNudge
0C1D5 20 C3 C4                      JSR sub_EvaluateTileType
0C1D8                               
0C1D8                               
0C1D8                           +checkTopCollision:
0C1D8                               ;; Check if ball moves up
0C1D8 A5 2C                         LDA ball_flags
0C1DA 29 10                         AND #BALL_MOVES_DOWN
0C1DC D0 1B                         BNE +checkBottomCollision
0C1DE                           
0C1DE                               ;; Check tile at top position
0C1DE A5 28                         LDA ball_top
0C1E0 85 00                         STA temp
0C1E2 A5 26                         LDA ball_center
0C1E4 85 01                         STA temp+1
0C1E6 20 6A C4                      JSR sub_ConvertXYToTileType
0C1E9 29 01                         AND #TILE_IS_SOLID
0C1EB F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1ED                           
0C1ED                               ;; Tile is solid; move ball down and evaluate tile type
0C1ED A5 2C                         LDA ball_flags
0C1EF 09 10                         ORA #MOVE_BALL_DOWN
0C1F1 85 2C                         STA ball_flags
0C1F3 20 C3 C4                      JSR sub_EvaluateTileType
0C1F6 4C 11 C2                      JMP +doneCheckingCollision
0C1F9                           
0C1F9                           +checkBottomCollision:
0C1F9                               ;; No movement check needed: since ball is not moving up, it must move down
0C1F9                           
0C1F9                               ;; Check tile at bottom position
0C1F9 A5 2A                         LDA ball_bottom
0C1FB 85 00                         STA temp
0C1FD A5 26                         LDA ball_center
0C1FF 85 01                         STA temp+1
0C201 20 6A C4                      JSR sub_ConvertXYToTileType
0C204 29 01                         AND #TILE_IS_SOLID
0C206 F0 09                         BEQ +doneCheckingCollision
0C208                           
0C208                               ;; Tile is solid; move ball up and evaluate tile type
0C208 A5 2C                         LDA ball_flags
0C20A 29 EF                         AND #MOVE_BALL_UP
0C20C 85 2C                         STA ball_flags
0C20E 20 C3 C4                      JSR sub_EvaluateTileType
0C211                           
0C211                           +doneCheckingCollision:
0C211                           
0C211                           
0C211                               ;; Testinging timed PPU scroll concept
0C211                               .include "game/test/timed_ppuscroll_test.asm"
0C211                           ;; Timed updates (test)
0C211                           
0C211                               ;; If B button is pressed
0C211 A5 10                         LDA buttons_pressed
0C213 29 10                         AND #BUTTON_START
0C215 F0 6B                         BEQ +end
0C217                               
0C217                               ;; Set up loop fading
0C217 A9 00                         LDA #$00
0C219 85 07                         STA temp+7
0C21B A0 08                         LDY #$08
0C21D                               -fadeLoop:
0C21D 84 08                             STY temp+8
0C21F                           
0C21F                                   ;; Wait for NMI to pass
0C21F 20 C7 C3                          JSR sub_WaitForVBlank
0C222                                   
0C222                                   ;; Now wait for No-sprite 0
0C222                                   -
0C222 AD 02 20                              LDA PPU_STATUS
0C225 29 40                                 AND #SPRITE_0_HIT
0C227 D0 F9                             BNE -
0C229                               
0C229                                   ;; Now wait for Sprite 0
0C229                                   -
0C229 AD 02 20                              LDA PPU_STATUS
0C22C 29 40                                 AND #SPRITE_0_HIT
0C22E F0 F9                             BEQ -
0C230                                       
0C230                                   ;; Setup tile row loop
0C230 A0 16                             LDY #22
0C232                                   -tileLoop:
0C232                                   
0C232                                       ;; Disable drawing
0C232 A5 12                                 LDA soft_ppu_mask
0C234 29 F7                                 AND #%11110111
0C236 8D 01 20                              STA PPU_MASK
0C239                                       
0C239                                       ;; Set up scanline loop
0C239 A2 08                                 LDX #$08
0C23B                                       -scanlineLoop:
0C23B E4 08                                     CPX temp+8
0C23D D0 0A                                     BNE +wasteTime
0C23F                                           
0C23F                                           ;; Restore drawing
0C23F A5 12                                     LDA soft_ppu_mask
0C241 09 08                                     ORA #%00001000
0C243 8D 01 20                                  STA PPU_MASK
0C246 4C 4F C2                                  JMP +wasteMoreTime
0C249                           
0C249                                           ;; Waste 12 frames
0C249                                           +wasteTime:
0C249 E6 09                                     INC temp+9   ;+5
0C24B C6 09                                     DEC temp+9   ;+5
0C24D 49 00                                     EOR #$00     ;+2
0C24F                                           
0C24F                                           ;; Waste about 100 frames
0C24F                                           +wasteMoreTime:
0C24F                                           
0C24F 86 01                                     STX temp+1     ;  3 down, 97 to go
0C251 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C253                                           -wasteLoop:
0C253 EA                                            NOP
0C254 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C256 CA                                            DEX        ;  5+5L down,  95-5L to go
0C257 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C259                           
0C259 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C25B CA                                        DEX            ;  9+8L down, 91-8L to go
0C25C D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C25E                           
0C25E 88                                    DEY
0C25F D0 D1                             BNE -tileLoop
0C261                           
0C261 A4 08                             LDY temp+8
0C263                                   
0C263 E6 07                             INC temp+7
0C265 A5 07                             LDA temp+7
0C267 C9 02                             CMP #$02
0C269 D0 B2                             BNE -fadeLoop
0C26B                           
0C26B A9 00                             LDA #$00
0C26D 85 07                             STA temp+7
0C26F 88                                DEY
0C270 D0 AB                         BNE -fadeLoop
0C272                               
0C272                               ;; Load the next level
0C272 E6 34                         INC current_level
0C274 A5 34                         LDA current_level
0C276 C9 19                         CMP #25
0C278 D0 04                         BNE +
0C27A A9 00                             LDA #$00
0C27C 85 34                             STA current_level
0C27E                               +
0C27E                               
0C27E A9 81                         LDA #LOAD_GAME_SCREEN
0C280 85 2D                         STA screen_mode
0C282                           
0C282                           
0C282                           +end:
0C282                           
0C282                           
0C282                           +skipBallMovement:
0C282                               ;; Add to sprite buffer
0C282 A6 32                         LDX sprite_ram_pointer
0C284 A5 19                         LDA ball_ypos_hi
0C286 9D 00 02                      STA ADDR_SPRITERAM,x
0C289 E8                            INX
0C28A A9 01                         LDA #BALL_TILE_CHR
0C28C 9D 00 02                      STA ADDR_SPRITERAM,x
0C28F E8                            INX
0C290 A9 00                         LDA #BALL_ATTR
0C292 9D 00 02                      STA ADDR_SPRITERAM,x
0C295 E8                            INX
0C296 A5 17                         LDA ball_xpos_hi
0C298 9D 00 02                      STA ADDR_SPRITERAM,x
0C29B E8                            INX
0C29C 86 32                         STX sprite_ram_pointer
0C29E 4C B7 C2                      JMP +doneScreenLoad
0C2A1                           
0C2A1                           
0C2A1                           +checkNextScreen:
0C2A1                           
0C2A1                               ;; Upon pressing START, (next level) design will be drawn
0C2A1                               .include "game/test/load_next_level.asm"
0C2A1                               ;; If START button is pressed
0C2A1 A5 10                         LDA buttons_pressed
0C2A3 29 10                         AND #BUTTON_START
0C2A5 F0 10                         BEQ +continue
0C2A7                                   ;; Load the next level
0C2A7 E6 34                             INC current_level
0C2A9 A5 34                             LDA current_level
0C2AB C9 19                             CMP #25
0C2AD D0 04                             BNE +
0C2AF A9 00                                 LDA #$00
0C2B1 85 34                                 STA current_level
0C2B3                                   +
0C2B3                                   
0C2B3 A9 81                             LDA #LOAD_GAME_SCREEN
0C2B5 85 2D                             STA screen_mode
0C2B7                           
0C2B7                               +continue:
0C2B7                           
0C2B7                           
0C2B7                           +doneScreenLoad:
0C2B7                           
0C2B7                               ;; Upon pressing A, an explosion will happen on screen
0C2B7                               .include "game/test/show_animation.asm"
0C2B7                               ;; If A button is pressed, initiate explosion
0C2B7 A5 10                         LDA buttons_pressed
0C2B9 29 80                         AND #BUTTON_A
0C2BB D0 03                         BNE +
0C2BD 4C EF C2                          JMP +end
0C2C0                               +
0C2C0                           
0C2C0                               ;; Get most recent slot for explosion
0C2C0 A6 31                         LDX explosion_pointer
0C2C2                           
0C2C2                               ;; If 0, use max pointer value
0C2C2 D0 02                         BNE +
0C2C4 A2 04                             LDX #MAX_ANIMATIONS
0C2C6                               +
0C2C6                           
0C2C6                               ;; Decrease pointer by one
0C2C6 CA                            DEX
0C2C7 86 31                         STX explosion_pointer
0C2C9                           
0C2C9                               ;; Load explosion data into RAM
0C2C9 A9 00                         LDA #$00
0C2CB 9D 34 03                      STA explosion_currentframe,x
0C2CE A9 04                         LDA #ANIMATION_SPEED
0C2D0 9D 30 03                      STA explosion_framecounter,x
0C2D3 20 A5 C3                      JSR sub_GetRandomNumber
0C2D6                               ;AND #%11110000
0C2D6 9D 3C 03                      STA explosion_x,x
0C2D9 20 A5 C3                      JSR sub_GetRandomNumber
0C2DC                               ;AND #%11110000
0C2DC 9D 40 03                      STA explosion_y,x
0C2DF 20 A5 C3                      JSR sub_GetRandomNumber
0C2E2 29 02                         AND #%00000010
0C2E4 18                            CLC
0C2E5 69 01                         ADC #$01
0C2E7 9D 38 03                      STA explosion_attributes,x
0C2EA A9 01                         LDA #$01
0C2EC 9D 44 03                      STA explosion_active,x
0C2EF                           
0C2EF                           
0C2EF                           +end:
0C2EF                           
0C2EF                               ;; Set up loop
0C2EF A2 00                         LDX #$00
0C2F1                               -loop_load_animation:
0C2F1                                   ;; Check if current animation is active. If not, goto next
0C2F1 BD 44 03                          LDA explosion_active,x
0C2F4 D0 03                             BNE +
0C2F6 4C 90 C3                              JMP +next
0C2F9                                   +
0C2F9                           
0C2F9                                   ;; Check the explosion framecounter
0C2F9 BD 30 03                          LDA explosion_framecounter,x
0C2FC D0 26                             BNE +
0C2FE                                       ;; Framecounter is 0
0C2FE                                       ;; Reset to animation speed
0C2FE A9 04                                 LDA #ANIMATION_SPEED
0C300 9D 30 03                              STA explosion_framecounter,x
0C303                           
0C303                                       ;; Set next animation frame, and check if we're done yet
0C303 FE 34 03                              INC explosion_currentframe,x
0C306 BD 34 03                              LDA explosion_currentframe,x
0C309 C9 0A                                 CMP #ANIM_SLIDES
0C30B D0 17                                 BNE +
0C30D                           
0C30D                                       ;; If we're done, inactivate current explosion, clean
0C30D                                       ;; up sprite RAM and go to the next one
0C30D A9 00                                 LDA #$00
0C30F 9D 44 03                              STA explosion_active,x
0C312                                       
0C312 A9 09                                 LDA #SLIDE_SIZE
0C314 0A                                    ASL
0C315 0A                                    ASL
0C316 A8                                    TAY
0C317 A9 EF                                 LDA #$EF
0C319                                       -
0C319 88                                        DEY
0C31A 99 00 02                                  STA ADDR_SPRITERAM,y
0C31D C0 00                                     CPY #00
0C31F D0 F8                                 BNE -
0C321                                       
0C321 4C 90 C3                              JMP +next
0C324                                   +
0C324                           
0C324                                   ;; Load (x,y) position in temp variables
0C324 BD 3C 03                          LDA explosion_x,x
0C327 85 01                             STA temp+1
0C329 85 03                             STA temp+3
0C32B BD 40 03                          LDA explosion_y,x
0C32E 85 02                             STA temp+2
0C330                           
0C330                                   ;; Load attribute in temp variable
0C330 BD 38 03                          LDA explosion_attributes,x
0C333 85 04                             STA temp+4
0C335                           
0C335                                   ;; Load current frame into Y-register
0C335 BC 34 03                          LDY explosion_currentframe,x
0C338                           
0C338                                   ;; Load current frame ROM address from table
0C338 B9 84 CA                          LDA explosion_anim_lo,y
0C33B 85 0C                             STA pointer
0C33D B9 7A CA                          LDA explosion_anim_hi,y
0C340 85 0D                             STA pointer+1
0C342                           
0C342                                   ;; Save x-register on stack
0C342 8A                                TXA
0C343 48                                PHA
0C344                           
0C344                                   ;; Load sprites into sprite RAM
0C344 A6 32                             LDX sprite_ram_pointer
0C346 A0 00                             LDY #$00
0C348                           
0C348                                   ;; Prepare (x,y) offset for loop
0C348 84 00                             STY temp
0C34A                           
0C34A                                   -loop_load_sprite:
0C34A                                   
0C34A                                       ;; Do not draw empty sprites
0C34A B1 0C                                 LDA (pointer),y
0C34C F0 18                                 BEQ +nextSprite
0C34E                                   
0C34E                                           ;; Add y-position to sprite ram buffer
0C34E A5 02                                     LDA temp+2
0C350 9D 00 02                                  STA ADDR_SPRITERAM,x
0C353 E8                                        INX
0C354                           
0C354                                           ;; Get tile number from frame ROM address, and
0C354                                           ;; add it to sprite ram buffer
0C354 B1 0C                                     LDA (pointer),y
0C356 9D 00 02                                  STA ADDR_SPRITERAM,x
0C359 E8                                        INX
0C35A                           
0C35A                                           ;; Add attribute data to sprite ram buffer
0C35A A5 04                                     LDA temp+4
0C35C 9D 00 02                                  STA ADDR_SPRITERAM,x
0C35F E8                                        INX
0C360                           
0C360                                           ;; Add x-position to sprite ram buffer
0C360 A5 03                                     LDA temp+3
0C362 9D 00 02                                  STA ADDR_SPRITERAM,x
0C365 E8                                        INX
0C366                           
0C366                                       +nextSprite:
0C366                           
0C366                                       ;; Check if all sprites are done
0C366 C8                                    INY
0C367 C0 09                                 CPY #SLIDE_SIZE
0C369 F0 21                                 BEQ +done
0C36B                           
0C36B                                       ;; Update x value
0C36B A5 03                                 LDA temp+3
0C36D 18                                    CLC
0C36E 69 08                                 ADC #$08
0C370 85 03                                 STA temp+3
0C372                           
0C372                                       ;; Update temp for x,y position
0C372 E6 00                                 INC temp
0C374 A5 00                                 LDA temp
0C376 C9 03                                 CMP #SLIDE_WIDTH
0C378 D0 0F                                 BNE +
0C37A                                           ;; Row is done; reset x-position
0C37A A5 01                                     LDA temp+1
0C37C 85 03                                     STA temp+3
0C37E                           
0C37E                                           ;; Update y-position
0C37E A5 02                                     LDA temp+2
0C380 18                                        CLC
0C381 69 08                                     ADC #$08
0C383 85 02                                     STA temp+2
0C385                           
0C385                                           ;; Reset row counter
0C385 A9 00                                     LDA #$00
0C387 85 00                                     STA temp
0C389                                       +
0C389                           
0C389 4C 4A C3                          JMP -loop_load_sprite
0C38C                           
0C38C                               +done:
0C38C 86 32                             STX sprite_ram_pointer
0C38E                           
0C38E                                   ;; Retrieve x-register from stack
0C38E 68                                PLA
0C38F AA                                TAX
0C390                           
0C390                               +next:
0C390                                   ;; Check if all animations have been updated
0C390 E8                                INX
0C391 E0 04                             CPX #MAX_ANIMATIONS
0C393 F0 03                             BEQ +done
0C395                           
0C395 4C F1 C2                      JMP -loop_load_animation
0C398                           +done:
0C398                           
0C398                           
0C398                               ;; Sprite clean-up
0C398 A6 32                         LDX sprite_ram_pointer
0C39A A9 EF                         LDA #$EF
0C39C                               -
0C39C 9D 00 02                          STA ADDR_SPRITERAM,x
0C39F E8                                INX
0C3A0 D0 FA                         BNE -
0C3A2 4C 57 C0                      JMP MainGameLoop
0C3A5                           
0C3A5                           ;; Subroutines
0C3A5                           .include "include/subroutines.asm"
0C3A5                           
0C3A5                           ;; RNG
0C3A5                           .include "subroutine/GetRandomNumber.asm"
0C3A5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3A5                           ;;
0C3A5                           ;; subroutine/GetRandomNumber.asm
0C3A5                           ;;
0C3A5                           ;; Simple and fast random number generator by White Flame.
0C3A5                           ;;
0C3A5                           ;; Set random_seed to an arbitrary number to randomize between
0C3A5                           ;; gaming sessions, for instance using the frame counter upon
0C3A5                           ;; pressing START on the intro screen.
0C3A5                           ;;
0C3A5                           ;;     ;; IF START PRESSED:
0C3A5                           ;;     LDA frame_counter
0C3A5                           ;;     STA random_seed
0C3A5                           ;;
0C3A5                           ;; Source:
0C3A5                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C3A5                           ;;
0C3A5                           ;;
0C3A5                           
0C3A5                           sub_GetRandomNumber:
0C3A5                               ;; Force EOR if random_seed is zero
0C3A5 A5 16                         LDA random_seed
0C3A7 F0 05                         BEQ +doEor
0C3A9                           
0C3A9                               ;; Shift left, and EOR if the high bit is set
0C3A9 0A                            ASL
0C3AA F0 04                         BEQ +noEor
0C3AC 90 02                         BCC +noEor
0C3AE                           
0C3AE                           +doEor:
0C3AE 49 1D                         EOR #$1D
0C3B0                           
0C3B0                           +noEor:
0C3B0 85 16                         STA random_seed
0C3B2                           
0C3B2 60                            RTS
0C3B3                           
0C3B3                           
0C3B3                           ;; Read controller input
0C3B3                           .include "subroutine/ReadController.asm"
0C3B3                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3B3                           ;;
0C3B3                           ;; subroutine/ReadController.asm
0C3B3                           ;;
0C3B3                           ;; Subroutine that polls the controller and stores the input
0C3B3                           ;; buttons in a variable. This version only handles controller
0C3B3                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C3B3                           ;;
0C3B3                           ;;
0C3B3                           
0C3B3                           sub_ReadController:
0C3B3                           
0C3B3                               ;; Set strobe bit
0C3B3 A9 01                         LDA #$01
0C3B5 8D 16 40                      STA JOYPAD_1
0C3B8                           
0C3B8                               ;; Set up ring counter
0C3B8 85 0F                         STA buttons_held
0C3BA                           
0C3BA                               ;; Clear strobe bit
0C3BA 4A                            LSR
0C3BB 8D 16 40                      STA JOYPAD_1
0C3BE                           
0C3BE                               ;; Loop through button presses
0C3BE                               -
0C3BE AD 16 40                          LDA JOYPAD_1
0C3C1 4A                                LSR
0C3C2 26 0F                             ROL buttons_held
0C3C4                           
0C3C4                               ;; Check if ring counter is done
0C3C4 90 F8                         BCC -
0C3C6                           
0C3C6                               ;; Return from subroutine
0C3C6 60                            RTS
0C3C7                           
0C3C7                           
0C3C7                           ;; vBlank wait
0C3C7                           .include "subroutine/WaitForVBlank.asm"
0C3C7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3C7                           ;;
0C3C7                           ;; subroutine/WaitForVBlank.asm
0C3C7                           ;;
0C3C7                           ;; Subroutine that essentially pauses script execution until
0C3C7                           ;; vBlank happens.
0C3C7                           ;;
0C3C7                           ;;
0C3C7                           
0C3C7                           sub_WaitForVBlank:
0C3C7 2C 02 20                      BIT $2002
0C3CA 10 FB                         BPL sub_WaitForVBlank
0C3CC 60                            RTS
0C3CD                           
0C3CD                           
0C3CD                           ;; Game specific subroutines
0C3CD                           .include "game/include/subroutines.asm"
0C3CD                           ;; additional game-specific subroutines go here
0C3CD                           
0C3CD                           .include "game/subroutine/ClearScreen.asm"
0C3CD                           ;; Subroutine to clear the screen
0C3CD                           ;; If it's a game screen, add noise
0C3CD                           
0C3CD                           sub_ClearScreen:
0C3CD                               ;; Check of game screen or not
0C3CD A5 2D                         LDA screen_mode
0C3CF 29 03                         AND #CHECK_SCREEN_MODE
0C3D1 C9 01                         CMP #IS_GAME_SCREEN
0C3D3 F0 02                         BEQ +
0C3D5 A9 00                             LDA #$00
0C3D7                               +
0C3D7 85 01                         STA temp+1
0C3D9                               
0C3D9                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C3D9 2C 02 20                      BIT PPU_STATUS
0C3DC A9 20                         LDA #$20
0C3DE 8D 06 20                      STA PPU_ADDR
0C3E1 A9 00                         LDA #$00
0C3E3 8D 06 20                      STA PPU_ADDR
0C3E6                               
0C3E6                               ;; Set up tile to draw and loop
0C3E6 85 00                         STA temp
0C3E8 AA                            TAX
0C3E9 A8                            TAY
0C3EA                           
0C3EA                               -     
0C3EA                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C3EA A5 00                             LDA temp
0C3EC 8D 07 20                          STA PPU_DATA
0C3EF                           
0C3EF                                   ;; Check if we should draw noise next. Noise is drawn if:
0C3EF                                   ;; - Screen mode is game screen
0C3EF                                   ;; - Y between #$06 and #$19 (inclusive)
0C3EF                                   ;; - X between #$02 and #$1D (inclusive)
0C3EF                                   
0C3EF                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C3EF A5 01                             LDA temp+1
0C3F1 F0 1C                             BEQ +nextTileInRow
0C3F3                                   
0C3F3                                   ;; If Y < $6, skip the check
0C3F3 C0 06                             CPY #$06
0C3F5 90 18                             BCC +nextTileInRow
0C3F7                                   
0C3F7                                   ;; If X < $1, skip the check
0C3F7 E0 01                             CPX #$01
0C3F9 90 14                             BCC +nextTileInRow
0C3FB                                   
0C3FB                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C3FB E0 1D                             CPX #$1D
0C3FD D0 04                             BNE +
0C3FF A9 00                                 LDA #$00
0C401 85 00                                 STA temp
0C403                                   +
0C403 B0 0A                             BCS +nextTileInRow
0C405                                   
0C405                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C405 20 A5 C3                          JSR sub_GetRandomNumber
0C408 29 07                             AND #%00000111
0C40A 18                                CLC
0C40B 69 68                             ADC #$68
0C40D 85 00                             STA temp
0C40F                           
0C40F                           +nextTileInRow:
0C40F                                   
0C40F                                   ;; Check if a row has been done. If not, draw the next
0C40F E8                                INX
0C410 E0 20                             CPX #$20
0C412 D0 D6                             BNE -
0C414                                   
0C414                                   ;; Go to the next row (if any left)
0C414 A2 00                             LDX #00
0C416 C8                                INY
0C417                                   
0C417                                   ;; If Y is 1A, skip noise tile check until done drawing
0C417 C0 1A                             CPY #$1A
0C419 D0 04                             BNE +
0C41B A9 00                                 LDA #$00
0C41D 85 01                                 STA temp+1
0C41F                                   +
0C41F                                   
0C41F C0 1E                             CPY #$1E
0C421 D0 C7                         BNE -
0C423                           
0C423                               ;; Clear attribute table
0C423 A9 23                         LDA #$23
0C425 8D 06 20                      STA PPU_ADDR
0C428 A9 C0                         LDA #$C0
0C42A 8D 06 20                      STA PPU_ADDR
0C42D A9 00                         LDA #$00
0C42F A2 40                         LDX #$40
0C431                               -
0C431 8D 07 20                          STA PPU_DATA
0C434 CA                                DEX
0C435 D0 FA                         BNE -
0C437                               
0C437 60                            RTS0C438                           .include "game/subroutine/ColorizeBall.asm"
0C438                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C438                           ;;
0C438                           ;;  Subroutine: ColorizeBall
0C438                           ;;
0C438                           ;;  Applies the color set through ball_flags to the ball sprite.
0C438                           ;;
0C438                           ;;
0C438                           
0C438                           
0C438                           sub_ColorizeBall:
0C438                           
0C438                               ;; Get color from ball_flags
0C438 4A                            LSR
0C439 4A                            LSR
0C43A 4A                            LSR
0C43B 4A                            LSR
0C43C 4A                            LSR
0C43D AA                            TAX
0C43E                           
0C43E                               ;; Add new light color of ball to PPU palette
0C43E A9 3F                         LDA #$3F
0C440 85 00                         STA temp
0C442 A9 11                         LDA #$11
0C444 85 01                         STA temp+1
0C446 BD 94 CA                      LDA tbl_BallColorLight,x
0C449 85 02                         STA temp+2
0C44B 20 30 C9                      JSR sub_WriteByteToPPUBuffer
0C44E                               
0C44E                               ;; Add new dark color of ball to PPU palette
0C44E E6 01                         INC temp+1
0C450 BD 8E CA                      LDA tbl_BallColorDark,x
0C453 85 02                         STA temp+2
0C455 20 30 C9                      JSR sub_WriteByteToPPUBuffer
0C458                               
0C458 60                            RTS
0C459                           
0C459                           .include "game/subroutine/ColorsMatch.asm"
0C459                           
0C459                           ;; Subroutine to check if ball color matches colliding tile color
0C459                           
0C459                           sub_ColorsMatch:
0C459                               ;; Save tile color in temp variable
0C459 A5 35                         LDA colliding_tile
0C45B 29 0E                         AND #%00001110
0C45D 85 00                         STA temp
0C45F                           
0C45F                               ;; Get ball color
0C45F A5 2C                         LDA ball_flags
0C461 29 E0                         AND #%11100000
0C463 4A                            LSR
0C464 4A                            LSR
0C465 4A                            LSR
0C466 4A                            LSR
0C467                           
0C467                               ;; Compare with tile color
0C467 C5 00                         CMP temp
0C469 60                            RTS
0C46A                           
0C46A                           .include "game/subroutine/ConvertXYToTileType.asm"
0C46A                           
0C46A                           ;; Subroutine to convert the ball's position to a tile type
0C46A                           ;; - Expects temp to be y-position of ball within game area
0C46A                           ;; - Expects temp+1 to be x-position of ball within game area
0C46A                           ;; - Puts result in accumulator and zp variable
0C46A                           ;; - Corrupts X-register
0C46A                           
0C46A                           sub_ConvertXYToTileType:
0C46A A5 01                         LDA temp+1
0C46C 4A                            LSR
0C46D 4A                            LSR
0C46E 4A                            LSR
0C46F 4A                            LSR
0C470 85 09                         STA temp+9
0C472 A5 00                         LDA temp
0C474 29 F0                         AND #%11110000
0C476 18                            CLC
0C477 65 09                         ADC temp+9
0C479 85 09                         STA temp+9
0C47B AA                            TAX
0C47C BD 00 04                      LDA ADDR_SCREENTILERAM, x
0C47F 85 35                         STA colliding_tile
0C481 60                            RTS
0C482                           
0C482                           .include "game/subroutine/DisableEnableRendering.asm"
0C482                           sub_DisableRendering:
0C482                               ;; Force NMI skip, disable rendering
0C482 A9 01                     	LDA #$01
0C484 85 14                     	STA force_skip_nmi
0C486 20 C7 C3                      JSR sub_WaitForVBlank
0C489 A5 12                         LDA soft_ppu_mask
0C48B 29 E7                         AND #%11100111
0C48D 8D 01 20                      STA PPU_MASK
0C490 85 12                         STA soft_ppu_mask
0C492 20 C7 C3                      JSR sub_WaitForVBlank
0C495 60                            RTS
0C496                           
0C496                           sub_EnableRendering:
0C496                               ;; Enable rendering
0C496 A9 00                     	LDA #$00
0C498 8D 05 20                  	STA PPU_SCROLL
0C49B 8D 05 20                  	STA PPU_SCROLL
0C49E 20 C7 C3                      JSR sub_WaitForVBlank
0C4A1 85 14                     	STA force_skip_nmi
0C4A3 A5 12                         LDA soft_ppu_mask
0C4A5 09 18                         ORA #%00011000
0C4A7 85 12                         STA soft_ppu_mask
0C4A9 8D 01 20                      STA PPU_MASK
0C4AC 20 C7 C3                      JSR sub_WaitForVBlank
0C4AF 60                            RTS
0C4B0                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C4B0                           sub_drawIntroScreenLogoTile:
0C4B0 B9 76 C9                      LDA tbl_IntroScreenLogoChr,y
0C4B3 C9 60                         CMP #$60
0C4B5 D0 08                         BNE +
0C4B7 20 A5 C3                          JSR sub_GetRandomNumber
0C4BA 29 07                             AND #$07
0C4BC 18                                CLC
0C4BD 69 60                             ADC #$60
0C4BF                               +
0C4BF 8D 07 20                      STA PPU_DATA
0C4C2 60                            RTS
0C4C3                           .include "game/subroutine/EvaluateTileType.asm"
0C4C3                           
0C4C3                           ;; Subroutine to evaluate the colliding tile type and take its
0C4C3                           ;; corresponding action (move block, kill player, ...)
0C4C3                           ;; - Expects X-register to be the ADDR_SCREENTILERAM offset
0C4C3                           ;; - Uses zp variable colliding_tile
0C4C3                           
0C4C3                           sub_EvaluateTileType:
0C4C3                           
0C4C3                               ;; Check if collided tile is a color block
0C4C3 A5 35                         LDA colliding_tile
0C4C5 29 80                         AND #IS_COLOR_BLOCK
0C4C7 F0 07                         BEQ +checkIfPaintBlock
0C4C9                                   ;; It's a color block. Check if the colors match
0C4C9 20 59 C4                          JSR sub_ColorsMatch
0C4CC F0 01                             BEQ +
0C4CE                                       ;; Colors don't match - return
0C4CE 60                                    RTS
0C4CF                                   +
0C4CF                           
0C4CF                                   ;; Colors match. Destroy color block
0C4CF                                   ;; - Add the tiles that need updating to ppu buffer
0C4CF                                   ;; - Load destruction animation on tile
0C4CF                                   ;; - Write #$00 in tile type ram (makes not-solid)
0C4CF                                   ;; - Update attribute table accordingly through ppu buffer
0C4CF                                   ;; - If there are no color blocks left:
0C4CF                                   ;;   - Freeze ball
0C4CF                                   ;;   - Initiate level-win state
0C4CF                                   ;; (@TODO)
0C4CF 60                                RTS
0C4D0                               +checkIfPaintBlock:
0C4D0                               
0C4D0                               ;; Check if collided tile is a paint block
0C4D0 A5 35                         LDA colliding_tile
0C4D2 29 20                         AND #IS_PAINT_BLOCK
0C4D4 F0 1A                         BEQ +checkIfDeathBlock
0C4D6                                   ;; It's a paint block. Update ball color
0C4D6                                   ;; Save x-register
0C4D6 8A                                TXA
0C4D7 48                                PHA
0C4D8                           
0C4D8                                   ;; Get tile color
0C4D8 A5 35                             LDA colliding_tile
0C4DA 29 0E                             AND #%00001110
0C4DC 0A                                ASL
0C4DD 0A                                ASL
0C4DE 0A                                ASL
0C4DF 0A                                ASL
0C4E0 85 00                             STA temp
0C4E2                           
0C4E2                                   ;; Apply tile color to ball
0C4E2 A5 2C                             LDA ball_flags
0C4E4 29 1F                             AND #%00011111
0C4E6 05 00                             ORA temp
0C4E8 85 2C                             STA ball_flags
0C4EA 20 38 C4                          JSR sub_ColorizeBall
0C4ED                           
0C4ED                                   ;; Restore x-register
0C4ED 68                                PLA
0C4EE AA                                TAX
0C4EF                           
0C4EF                                   ;; Return
0C4EF 60                                RTS
0C4F0                               +checkIfDeathBlock:
0C4F0                           
0C4F0                               ;; Check if collided tile is a death block
0C4F0 A5 35                         LDA colliding_tile
0C4F2 29 10                         AND #IS_DEATH_BLOCK
0C4F4 F0 01                         BEQ +checkIfMoveBlock
0C4F6                                   ;; It is a death block. Kill player and return (@TODO)
0C4F6                           ;        LDA ball_flags
0C4F6                           ;        ORA #%00000101
0C4F6                           ;        STA ball_flags
0C4F6 60                                RTS
0C4F7                               +checkIfMoveBlock:
0C4F7                           
0C4F7                               ;; Check if collided tile is a move block
0C4F7 A5 35                         LDA colliding_tile
0C4F9 29 40                         AND #IS_MOVE_BLOCK
0C4FB F0 07                         BEQ +done
0C4FD                                   ;; It is a move block. Check if colors match
0C4FD 20 59 C4                          JSR sub_ColorsMatch
0C500 F0 01                             BEQ +
0C502                                       ;; Colors don't match - return
0C502 60                                    RTS
0C503                                   +
0C503                           
0C503                                   ;; Colors match.
0C503                                   ;; - Check if next tile is a solid
0C503                                   ;; - If not, move the tile:
0C503                                   ;;   - Add the tiles that need updating to ppu buffer
0C503                                   ;;   - Add move tile sprite over the original tile
0C503                                   ;;   - Initiate moving the sprite that way for 16px
0C503                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C503                                   ;;   - Update attribute table accordingly through ppu buffer
0C503                                   ;; - After moving the sprite, in a different routine:
0C503                                   ;;   - Add move tile data on the new tile location
0C503                                   ;;   - Write the original tile type data on new position in ram
0C503                                   ;;   - Destroy sprite
0C503                                   ;;   - Update attribute table accordingly through ppu buffer
0C503                                   ;; (@TODO)
0C503 60                                RTS
0C504                               +done:
0C504                           
0C504                               ;; Return
0C504 60                            RTS
0C505                           
0C505                           .include "game/subroutine/InitiateNudge.asm"
0C505                           
0C505                           sub_InitiateNudge:
0C505 85 2C                         STA ball_flags
0C507 A9 03                         LDA #NUDGE_FRAMES
0C509 85 33                         STA nudge_counter
0C50B 60                            RTS
0C50C                           
0C50C                           .include "game/subroutine/JumpToPointer.asm"
0C50C                           sub_JumpToPointer:
0C50C 6C 0C 00                      JMP (pointer)
0C50F                               ;RTS must be handled by the routine (pointer) jumps to
0C50F                           .include "game/subroutine/LoadGameScreen.asm"
0C50F                           sub_LoadGameScreen:
0C50F                           
0C50F                               ;; Clear the screen
0C50F 20 CD C3                      JSR sub_ClearScreen
0C512                               
0C512                               ;; Clear collision and attribute data
0C512 A2 00                         LDX #$00
0C514 8A                            TXA
0C515                               -
0C515 9D 00 04                          STA tile_type,x
0C518 E8                                INX
0C519 D0 FA                         BNE -
0C51B                               
0C51B                               ;; Get pointer from current level
0C51B A6 34                         LDX current_level
0C51D BD 98 D1                      LDA tbl_lvl_layout_lo,x
0C520 85 0C                         STA pointer
0C522 BD 7F D1                      LDA tbl_lvl_layout_hi,x
0C525 85 0D                         STA pointer+1
0C527                           
0C527                               ;; Set up the loop
0C527 A0 00                         LDY #$00
0C529                           -drawRowColumnLoop:
0C529                           
0C529                               ;; Load (x,y) of current set of tiles
0C529 B1 0C                         LDA (pointer),y
0C52B                           
0C52B                               ;; Check if level is done; if so, skip the loop
0C52B C9 FF                         CMP #LEVEL_END
0C52D D0 03                         BNE +
0C52F 4C 78 C6                          JMP +doneLevelLoad
0C532                               +
0C532                           
0C532                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C532 85 00                         STA temp
0C534 C8                            INY
0C535 B1 0C                         LDA (pointer),y
0C537 85 01                         STA temp+1
0C539                               
0C539                               ;; Convert (x,y) to PPU address
0C539                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C539 A5 00                         LDA temp
0C53B 29 0F                         AND #%00001111
0C53D 4A                            LSR
0C53E 4A                            LSR
0C53F 09 20                         ORA #$20
0C541 85 02                         STA temp+2
0C543                               
0C543                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C543 A5 00                         LDA temp
0C545 29 F0                         AND #%11110000
0C547 4A                            LSR
0C548 4A                            LSR
0C549 4A                            LSR
0C54A 85 03                         STA temp+3
0C54C                               
0C54C A5 00                         LDA temp
0C54E 29 03                         AND #%00000011
0C550 AA                            TAX
0C551 BD E3 D1                      LDA tbl_Times64,x
0C554 18                            CLC
0C555 65 03                         ADC temp+3
0C557 18                            CLC
0C558 69 C2                         ADC #$C2
0C55A 85 03                         STA temp+3
0C55C                               
0C55C                               ;; Add carry to temp+2
0C55C A5 02                         LDA temp+2
0C55E 69 00                         ADC #$00
0C560 85 02                         STA temp+2
0C562                           
0C562                               ;; Convert tile data to loop count and tile type
0C562                               ;; temp+4 = color
0C562 A5 01                         LDA temp+1
0C564 29 07                         AND #%00000111
0C566 85 04                         STA temp+4
0C568                               
0C568                               ;; If color = 7, this is a wall
0C568 C9 07                         CMP #%00000111
0C56A F0 12                         BEQ +wallHack
0C56C                                   
0C56C                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C56C 29 01                             AND #%00000001
0C56E F0 02                             BEQ +
0C570 A9 05                                 LDA #$05
0C572                                   +
0C572 85 07                             STA temp+7
0C574                                
0C574                                   ;; temp+5 = tile type
0C574 A5 01                             LDA temp+1
0C576 4A                                LSR
0C577 4A                                LSR
0C578 4A                                LSR
0C579 29 03                             AND #%00000011
0C57B 4C 84 C5                          JMP +setTileType
0C57E                               +wallHack:
0C57E                               
0C57E                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C57E A9 00                         LDA #$00
0C580 85 07                         STA temp+7
0C582 A9 04                         LDA #$04
0C584                           
0C584                           +setTileType:    
0C584 85 05                         STA temp+5
0C586                               
0C586                               ;; X = tile offset
0C586 18                            CLC
0C587 65 07                         ADC temp+7
0C589 AA                            TAX
0C58A                               
0C58A                               ;; temp+6 = number of tiles
0C58A A5 01                         LDA temp+1
0C58C 29 60                         AND #%01100000
0C58E 4A                            LSR
0C58F 4A                            LSR
0C590 4A                            LSR
0C591 4A                            LSR
0C592 4A                            LSR
0C593 85 06                         STA temp+6
0C595                               
0C595                               ;; Translate (x,y) to (y,x) for tile RAM
0C595 A5 00                         LDA temp
0C597 0A                            ASL
0C598 0A                            ASL
0C599 0A                            ASL
0C59A 0A                            ASL
0C59B 85 08                         STA temp+8
0C59D A5 00                         LDA temp
0C59F 4A                            LSR
0C5A0 4A                            LSR
0C5A1 4A                            LSR
0C5A2 4A                            LSR
0C5A3 05 08                         ORA temp+8
0C5A5 85 00                         STA temp
0C5A7                               
0C5A7                               ;; Set up loop
0C5A7 98                            TYA
0C5A8 48                            PHA
0C5A9 A4 06                         LDY temp+6
0C5AB                           
0C5AB                               -drawTileLoop:
0C5AB                                   ;; Write PPU address
0C5AB 2C 02 20                          BIT PPU_STATUS
0C5AE A5 02                             LDA temp+2
0C5B0 8D 06 20                          STA PPU_ADDR
0C5B3 A5 03                             LDA temp+3
0C5B5 8D 06 20                          STA PPU_ADDR
0C5B8                                   
0C5B8                                   ;; Write first and second tile
0C5B8 BD E7 D1                          LDA tbl_GametileTopLeft,x
0C5BB 8D 07 20                          STA PPU_DATA
0C5BE BD F1 D1                          LDA tbl_GametileTopRight,x
0C5C1 8D 07 20                          STA PPU_DATA
0C5C4                                   
0C5C4                                   ;; Update PPU address
0C5C4 2C 02 20                          BIT PPU_STATUS
0C5C7 A5 02                             LDA temp+2
0C5C9 8D 06 20                          STA PPU_ADDR
0C5CC A5 03                             LDA temp+3
0C5CE 18                                CLC
0C5CF 69 20                             ADC #$20
0C5D1 8D 06 20                          STA PPU_ADDR
0C5D4                                   
0C5D4                                   ;; Write third and fourth tile
0C5D4 BD FB D1                          LDA tbl_GametileBottomLeft,x
0C5D7 8D 07 20                          STA PPU_DATA
0C5DA BD 05 D2                          LDA tbl_GametileBottomRight,x
0C5DD 8D 07 20                          STA PPU_DATA
0C5E0                           
0C5E0                                   ;; Push x-register to stack
0C5E0 8A                                TXA
0C5E1 48                                PHA
0C5E2                                   
0C5E2                                   ;; Update tile RAM (aka collision table)
0C5E2 A6 05                             LDX temp+5
0C5E4 BD 0F D2                          LDA tbl_GameTileRamByte,x
0C5E7 05 04                             ORA temp+4
0C5E9 0A                                ASL
0C5EA 09 01                             ORA #%00000001
0C5EC A6 00                             LDX temp
0C5EE 9D 00 04                          STA tile_type,x
0C5F1                           
0C5F1                                   ;; Check if shade 1 should be drawn
0C5F1 E8                                INX
0C5F2 BD 00 04                          LDA tile_type,x
0C5F5 D0 05                             BNE +
0C5F7 A9 00                                 LDA #$00
0C5F9 8D 07 20                              STA PPU_DATA
0C5FC                                   +
0C5FC                                   
0C5FC                                   ;; Check if shade 2 should be drawn
0C5FC A5 03                             LDA temp+3
0C5FE 18                                CLC
0C5FF 69 41                             ADC #$41
0C601 85 03                             STA temp+3
0C603 A5 02                             LDA temp+2
0C605 69 00                             ADC #$00
0C607 85 02                             STA temp+2
0C609                                   
0C609 8A                                TXA
0C60A 18                                CLC
0C60B 69 0F                             ADC #$0F
0C60D AA                                TAX
0C60E                                   
0C60E BD 00 04                          LDA tile_type,x
0C611 D0 0F                             BNE +
0C613 A5 02                                 LDA temp+2
0C615 8D 06 20                              STA PPU_ADDR
0C618 A5 03                                 LDA temp+3
0C61A 8D 06 20                              STA PPU_ADDR
0C61D A9 00                                 LDA #$00
0C61F 8D 07 20                              STA PPU_DATA
0C622                                   +
0C622                           
0C622                                   ;; Check if shade 3 should be drawn
0C622 E8                                INX
0C623 E6 03                             INC temp+3
0C625 BD 00 04                          LDA tile_type,x
0C628 D0 0F                             BNE +
0C62A A5 02                                 LDA temp+2
0C62C 8D 06 20                              STA PPU_ADDR
0C62F A5 03                                 LDA temp+3
0C631 8D 06 20                              STA PPU_ADDR
0C634 A9 00                                 LDA #$00
0C636 8D 07 20                              STA PPU_DATA
0C639                                   +
0C639                                   
0C639                                   ;; Restore x-register from stack
0C639 68                                PLA
0C63A AA                                TAX
0C63B                                   
0C63B                                   ;; Reset pointer for next tile
0C63B A5 03                             LDA temp+3
0C63D 38                                SEC
0C63E E9 42                             SBC #$42
0C640 85 03                             STA temp+3
0C642 A5 02                             LDA temp+2
0C644 E9 00                             SBC #$00
0C646 85 02                             STA temp+2
0C648                                   
0C648                                   ;; Draw next metatile in this loop (if any left)
0C648 88                                DEY
0C649 30 27                             BMI +doneDrawingRowColumn
0C64B                                   
0C64B                                   ;; Is it a row or a column?
0C64B A5 01                             LDA temp+1
0C64D 10 17                             BPL +
0C64F                                       ;; It is a column: move pointer down (+$40)
0C64F A5 03                                 LDA temp+3
0C651 18                                    CLC
0C652 69 40                                 ADC #$40
0C654 85 03                                 STA temp+3
0C656 A5 02                                 LDA temp+2
0C658 69 00                                 ADC #$00
0C65A 85 02                                 STA temp+2
0C65C                                       
0C65C                                       ;; Add 16 to temp (as a tile RAM pointer)
0C65C A5 00                                 LDA temp
0C65E 18                                    CLC
0C65F 69 10                                 ADC #$10
0C661 85 00                                 STA temp
0C663 4C 6F C6                              JMP +drawNextTile
0C666                                   +
0C666                                   
0C666                                   ;; It is a row: move pointer right (+$02)
0C666 A5 03                             LDA temp+3
0C668 18                                CLC
0C669 69 02                             ADC #$02
0C66B 85 03                             STA temp+3
0C66D                                   
0C66D                                   ;; Add 1 to temp (as a tile RAM pointer)
0C66D E6 00                             INC temp
0C66F                           
0C66F                               
0C66F                               ;; Next tile in the row/column
0C66F                                   +drawNextTile:
0C66F 4C AB C5                      JMP -drawTileLoop
0C672                           
0C672                               ;; Go to the next set of tiles
0C672                           +doneDrawingRowColumn:
0C672 68                            PLA
0C673 A8                            TAY
0C674 C8                            INY
0C675 4C 29 C5                      JMP -drawRowColumnLoop
0C678                           
0C678                           ;; Level loading is done
0C678                           +doneLevelLoad:
0C678                           
0C678                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C678 A9 20                         LDA #$20
0C67A 8D 06 20                      STA PPU_ADDR
0C67D A9 A2                         LDA #$A2
0C67F 8D 06 20                      STA PPU_ADDR
0C682 A9 35                         LDA #$35
0C684 20 97 C8                      JSR sub_Draw28HorizontalTiles
0C687                           
0C687                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C687 A9 23                         LDA #$23
0C689 8D 06 20                      STA PPU_ADDR
0C68C A9 42                         LDA #$42
0C68E 8D 06 20                      STA PPU_ADDR
0C691 A9 31                         LDA #$31
0C693 20 97 C8                      JSR sub_Draw28HorizontalTiles
0C696                           
0C696                               ;; Left & right game bounds
0C696                               ;; Set PPU_ADDR and store in temp variables
0C696 A9 20                         LDA #$20
0C698 85 00                         STA temp
0C69A 8D 06 20                      STA PPU_ADDR
0C69D A9 C1                         LDA #$C1
0C69F 85 01                         STA temp+1
0C6A1 8D 06 20                      STA PPU_ADDR
0C6A4                               
0C6A4                               ;; Set vertical bound tile and set up loop
0C6A4 A0 33                         LDY #$33
0C6A6 A2 14                         LDX #20
0C6A8                               -
0C6A8                                   ;; Show left tile
0C6A8 8C 07 20                          STY PPU_DATA
0C6AB                                   
0C6AB                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C6AB A5 00                             LDA temp
0C6AD 8D 06 20                          STA PPU_ADDR
0C6B0 A5 01                             LDA temp+1
0C6B2 18                                CLC
0C6B3 69 1D                             ADC #29
0C6B5 85 01                             STA temp+1
0C6B7 8D 06 20                          STA PPU_ADDR
0C6BA                           
0C6BA                                   ;; Show right tile
0C6BA 8C 07 20                          STY PPU_DATA
0C6BD                           
0C6BD                                   ;; Check if we're done yet
0C6BD CA                                DEX
0C6BE F0 18                             BEQ +drawCorners
0C6C0                                   
0C6C0                                   ;; Not done yet: add 3 to low byte for next left bound
0C6C0 A5 01                             LDA temp+1
0C6C2 18                                CLC
0C6C3 69 03                             ADC #3
0C6C5 85 01                             STA temp+1
0C6C7                                   
0C6C7                                   ;; Apply carry to high byte
0C6C7 A5 00                             LDA temp
0C6C9 69 00                             ADC #$00
0C6CB 85 00                             STA temp
0C6CD                                   
0C6CD                                   ;; Store next PPU_ADDR to draw at
0C6CD 8D 06 20                          STA PPU_ADDR
0C6D0 A5 01                             LDA temp+1
0C6D2 8D 06 20                          STA PPU_ADDR
0C6D5 4C A8 C6                      JMP -
0C6D8                               
0C6D8                               
0C6D8                           
0C6D8                           +drawCorners:
0C6D8                               ;; Draw the corners of the playing field
0C6D8 A9 20                         LDA #$20
0C6DA 8D 06 20                      STA PPU_ADDR
0C6DD A9 A1                         LDA #$A1
0C6DF 8D 06 20                      STA PPU_ADDR
0C6E2 A9 39                         LDA #$39
0C6E4 8D 07 20                      STA PPU_DATA
0C6E7                           
0C6E7 A9 20                         LDA #$20
0C6E9 8D 06 20                      STA PPU_ADDR
0C6EC A9 BE                         LDA #$BE
0C6EE 8D 06 20                      STA PPU_ADDR
0C6F1 A9 3A                         LDA #$3A
0C6F3 8D 07 20                      STA PPU_DATA
0C6F6 A9 3F                         LDA #$3F
0C6F8 8D 07 20                      STA PPU_DATA
0C6FB                           
0C6FB A9 23                         LDA #$23
0C6FD 8D 06 20                      STA PPU_ADDR
0C700 A9 41                         LDA #$41
0C702 8D 06 20                      STA PPU_ADDR
0C705 A9 36                         LDA #$36
0C707 8D 07 20                      STA PPU_DATA
0C70A                           
0C70A A9 23                         LDA #$23
0C70C 8D 06 20                      STA PPU_ADDR
0C70F A9 5E                         LDA #$5E
0C711 8D 06 20                      STA PPU_ADDR
0C714 A9 34                         LDA #$34
0C716 8D 07 20                      STA PPU_DATA
0C719                           
0C719                           
0C719                               ;; Draw the hud labels
0C719 A9 20                         LDA #$20
0C71B 8D 06 20                      STA PPU_ADDR
0C71E A9 62                         LDA #$62
0C720 8D 06 20                      STA PPU_ADDR
0C723 A2 00                         LDX #$00
0C725                               -
0C725 BD 14 D2                          LDA tbl_HudText,x
0C728 8D 07 20                          STA PPU_DATA
0C72B E8                                INX
0C72C E0 1C                             CPX #28
0C72E D0 F5                         BNE -
0C730                           
0C730                           
0C730                               ;; Draw the current score
0C730 A9 20                         LDA #$20
0C732 8D 06 20                      STA PPU_ADDR
0C735 A9 83                         LDA #$83
0C737 8D 06 20                      STA PPU_ADDR
0C73A A2 00                         LDX #$00
0C73C                               -
0C73C B5 1C                             LDA ball_score,x
0C73E 18                                CLC
0C73F 69 01                             ADC #$01
0C741 8D 07 20                          STA PPU_DATA
0C744 E8                                INX
0C745 E0 06                             CPX #$06
0C747 D0 F3                         BNE -
0C749                           
0C749                           
0C749                               ;; Draw the level number
0C749                               ;; (with primitive HEX>DEC)
0C749 A5 34                         LDA current_level
0C74B 18                            CLC
0C74C 69 01                         ADC #$01
0C74E 85 01                         STA temp+1
0C750                               
0C750 C9 14                         CMP #20
0C752 B0 13                         BCS +tempIsTwo
0C754                               
0C754 C9 0A                         CMP #10
0C756 B0 05                         BCS +tempIsOne
0C758                               
0C758 A9 00                         LDA #$00
0C75A 4C 6E C7                      JMP +setTemp
0C75D                               
0C75D                           +tempIsOne:
0C75D 38                            SEC
0C75E E9 0A                         SBC #10
0C760 85 01                         STA temp+1
0C762 A9 01                         LDA #$01
0C764 4C 6E C7                      JMP +setTemp
0C767                               
0C767                           +tempIsTwo:
0C767 38                            SEC
0C768 E9 14                         SBC #20
0C76A 85 01                         STA temp+1
0C76C A9 02                         LDA #$02
0C76E                           
0C76E                           +setTemp:
0C76E 85 00                         STA temp
0C770                               
0C770 E6 00                         INC temp
0C772 E6 01                         INC temp+1
0C774                               
0C774 A9 20                         LDA #$20
0C776 8D 06 20                      STA PPU_ADDR
0C779 A9 8B                         LDA #$8B
0C77B 8D 06 20                      STA PPU_ADDR
0C77E A5 00                         LDA temp
0C780 8D 07 20                      STA PPU_DATA
0C783 A5 01                         LDA temp+1
0C785 8D 07 20                      STA PPU_DATA
0C788                           
0C788                           
0C788                               ;; Draw lives (presumes lives to be capped at 9)
0C788 A9 20                         LDA #$20
0C78A 8D 06 20                      STA PPU_ADDR
0C78D A9 92                         LDA #$92
0C78F 8D 06 20                      STA PPU_ADDR
0C792 A6 1B                         LDX ball_lives
0C794 E8                            INX
0C795 8E 07 20                      STX PPU_DATA
0C798                           
0C798                           
0C798                               ;; Set and draw bonus
0C798 A9 07                         LDA #$07
0C79A 85 22                         STA ball_bonus
0C79C A9 09                         LDA #$09
0C79E 85 23                         STA ball_bonus+1
0C7A0 85 24                         STA ball_bonus+2
0C7A2                               
0C7A2 A9 20                         LDA #$20
0C7A4 8D 06 20                      STA PPU_ADDR
0C7A7 A9 9A                         LDA #$9A
0C7A9 8D 06 20                      STA PPU_ADDR
0C7AC A2 00                         LDX #$00
0C7AE                               -
0C7AE B5 22                             LDA ball_bonus,x
0C7B0 18                                CLC
0C7B1 69 01                             ADC #$01
0C7B3 8D 07 20                          STA PPU_DATA
0C7B6 E8                                INX
0C7B7 E0 03                             CPX #$03
0C7B9 D0 F3                         BNE -
0C7BB                           
0C7BB                           
0C7BB                               ;; Set attribute data to RAM
0C7BB                               
0C7BB                               ;; Byte 0-7 of attribute ram should be #%10100000
0C7BB A2 00                         LDX #$00
0C7BD A9 A0                         LDA #$A0
0C7BF                               -
0C7BF 9D A0 04                          STA tile_attributes,x
0C7C2 E8                                INX
0C7C3 E0 08                             CPX #$08
0C7C5 D0 F8                         BNE -
0C7C7                           
0C7C7                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C7C7                           
0C7C7                           -attributeLoop:
0C7C7                               ;; Reset current attribute value
0C7C7 A9 00                         LDA #$00
0C7C9 85 02                         STA temp+2
0C7CB                           
0C7CB                               ;; Get first metatile in tile ram based on attribute index
0C7CB                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C7CB 8A                            TXA
0C7CC                           
0C7CC 38                            SEC
0C7CD E9 08                         SBC #$08
0C7CF 85 01                         STA temp+1      ; attr - 8 (temp1)
0C7D1 0A                            ASL             ; * 2
0C7D2 85 00                         STA temp        ; temp = temp1 * 2
0C7D4                           
0C7D4 A5 01                         LDA temp+1      ; temp1
0C7D6 29 F8                         AND #%11111000  ; rounded down to 8's
0C7D8 0A                            ASL             ; * 2
0C7D9 18                            CLC
0C7DA 65 00                         ADC temp        ; + temp1 * 2
0C7DC 85 00                         STA temp        ; first metatile
0C7DE                           
0C7DE                               ;; Store first metatile in y-register
0C7DE A8                            TAY
0C7DF                           
0C7DF                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C7DF 8A                            TXA
0C7E0 29 07                         AND #%00000111
0C7E2 C9 07                         CMP #%00000111
0C7E4 F0 0B                         BEQ +
0C7E6                           
0C7E6                               ;; If X >= $30, don't apply bottom right metatile
0C7E6 E0 30                         CPX #$30
0C7E8 B0 07                         BCS +
0C7EA                               
0C7EA                               ;; Add metatile1 subpalette to attribute value
0C7EA B9 00 04                      LDA tile_type,y
0C7ED 29 0C                         AND #%00001100
0C7EF 85 02                         STA temp+2
0C7F1                               +
0C7F1                           
0C7F1                           
0C7F1                               ;; Apply second metatile
0C7F1 88                            DEY
0C7F2                           
0C7F2                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C7F2 8A                            TXA
0C7F3 29 07                         AND #%00000111
0C7F5 F0 10                         BEQ +
0C7F7                           
0C7F7                               ;; If X >= $30, don't apply bottom left metatile
0C7F7 E0 30                         CPX #$30
0C7F9 B0 0C                         BCS +
0C7FB                           
0C7FB                           
0C7FB                           
0C7FB                               ;; Add metatile2 subpalette to attribute value
0C7FB B9 00 04                      LDA tile_type,y
0C7FE 29 0C                         AND #%00001100
0C800 4A                            LSR
0C801 4A                            LSR
0C802 05 02                         ORA temp+2
0C804 4C 09 C8                      JMP ++
0C807                               +
0C807 A5 02                         LDA temp+2
0C809                               ++
0C809 0A                            ASL
0C80A 0A                            ASL
0C80B 85 02                         STA temp+2
0C80D                           
0C80D                           
0C80D                               ;; Apply third metatile
0C80D 98                            TYA
0C80E 38                            SEC
0C80F E9 0F                         SBC #$0F
0C811 A8                            TAY
0C812                           
0C812                               ;; If X MOD 8 == 7, don't apply top right metatile
0C812 8A                            TXA
0C813 29 07                         AND #%00000111
0C815 C9 07                         CMP #%00000111
0C817 F0 11                         BEQ +
0C819                           
0C819                               ;; If X < $10, don't apply top right metatile
0C819 8A                            TXA
0C81A 29 F0                         AND #%11110000
0C81C F0 0C                         BEQ +
0C81E                           
0C81E                               ;; Add metatile3 subpalette to attribute value
0C81E B9 00 04                      LDA tile_type,y
0C821 29 0C                         AND #%00001100
0C823 4A                            LSR
0C824 4A                            LSR
0C825 05 02                         ORA temp+2
0C827 4C 2C C8                      JMP ++
0C82A                               +
0C82A A5 02                         LDA temp+2
0C82C                               ++
0C82C 0A                            ASL
0C82D 0A                            ASL
0C82E 85 02                         STA temp+2
0C830                           
0C830                           
0C830                               ;; Apply fourth metatile
0C830 88                            DEY
0C831                           
0C831                               ;; If X MOD 8 == 0, don't apply top left metatile
0C831 8A                            TXA
0C832 29 07                         AND #%00000111
0C834 F0 11                         BEQ +
0C836                           
0C836                               ;; If X < $10, don't apply top left metatile
0C836 8A                            TXA
0C837 29 F0                         AND #%11110000
0C839 F0 0C                         BEQ +
0C83B                           
0C83B                               ;; Add metatile4 subpalette to attribute value
0C83B B9 00 04                      LDA tile_type,y
0C83E 29 0C                         AND #%00001100
0C840 4A                            LSR
0C841 4A                            LSR
0C842 05 02                         ORA temp+2
0C844 4C 49 C8                      JMP ++
0C847                               +
0C847 A5 02                         LDA temp+2
0C849                               ++
0C849 9D A0 04                      STA tile_attributes,x
0C84C                           
0C84C                               ;; Check the next attribute, if any left
0C84C E8                            INX
0C84D E0 38                         CPX #$38
0C84F F0 03                         BEQ +
0C851 4C C7 C7                          JMP -attributeLoop
0C854                               +
0C854                           
0C854                               ;; Stream attribute RAM to PPU
0C854 2C 02 20                      BIT PPU_STATUS
0C857 A9 23                         LDA #$23
0C859 8D 06 20                      STA PPU_ADDR
0C85C A9 C0                         LDA #$C0
0C85E 8D 06 20                      STA PPU_ADDR
0C861 A2 00                         LDX #$00
0C863                               -
0C863 BD A0 04                          LDA tile_attributes,x
0C866 8D 07 20                          STA PPU_DATA
0C869 E8                                INX
0C86A E0 40                             CPX #$40
0C86C D0 F5                         BNE -
0C86E                           
0C86E                               ;; Set initial ball position
0C86E A6 34                         LDX current_level
0C870 BD B1 D1                      LDA tbl_lvl_ball_startpos,x
0C873 29 F0                         AND #%11110000
0C875 18                            CLC
0C876 69 34                         ADC #$34
0C878 85 19                         STA ball_ypos_hi
0C87A BD B1 D1                      LDA tbl_lvl_ball_startpos,x
0C87D 0A                            ASL
0C87E 0A                            ASL
0C87F 0A                            ASL
0C880 0A                            ASL
0C881 18                            CLC
0C882 69 14                         ADC #$14
0C884 85 17                         STA ball_xpos_hi
0C886 A9 00                         LDA #$00
0C888 85 18                         STA ball_xpos_lo
0C88A 85 1A                         STA ball_ypos_lo
0C88C                               
0C88C                               ;; Set initial ball color and direction
0C88C BD CA D1                      LDA tbl_lvl_ball_init,x
0C88F 29 F0                         AND #%11110000
0C891 85 2C                         STA ball_flags
0C893 20 38 C4                      JSR sub_ColorizeBall
0C896                               
0C896                               ;; Return
0C896 60                            RTS
0C897                           
0C897                           
0C897                           ;; Subroutine: draw 28 tiles in a row
0C897                           sub_Draw28HorizontalTiles:
0C897 A2 1C                         LDX #28
0C899                               -
0C899 8D 07 20                          STA PPU_DATA
0C89C CA                                DEX
0C89D D0 FA                         BNE -
0C89F 60                            RTS0C8A0                           .include "game/subroutine/LoadIntroScreen.asm"
0C8A0                           sub_LoadIntroScreen:
0C8A0                           
0C8A0                               ;; Load intro palette
0C8A0 2C 02 20                      BIT PPU_STATUS
0C8A3 A9 3F                         LDA #$3F
0C8A5 8D 06 20                      STA PPU_ADDR
0C8A8 A9 00                         LDA #$00
0C8AA 8D 06 20                      STA PPU_ADDR
0C8AD A2 00                         LDX #$00
0C8AF                               -
0C8AF BD 56 C9                          LDA tbl_IntroScreenPalette,x
0C8B2 8D 07 20                          STA PPU_DATA
0C8B5 E8                                INX
0C8B6 E0 20                             CPX #$20
0C8B8 D0 F5                         BNE -
0C8BA                               
0C8BA                               ;; Put ball in the middle
0C8BA A9 7C                         LDA #$7C
0C8BC 85 17                         STA ball_xpos_hi
0C8BE 85 19                         STA ball_ypos_hi
0C8C0                           
0C8C0                               ;; Clear the screen
0C8C0 20 CD C3                      JSR sub_ClearScreen
0C8C3                           
0C8C3                               ;; Set up intro screen draw loop
0C8C3 A2 00                         LDX #$00
0C8C5                           
0C8C5                           -loop_IntroScreenData:
0C8C5                           
0C8C5                               ;; Get current byte from intro screen data
0C8C5 BD 7E C9                      LDA tbl_IntroScreenData,x
0C8C8                           
0C8C8                               ;; If current byte is #$3F, we're done drawing.
0C8C8 C9 3F                         CMP #$3F
0C8CA D0 03                         BNE +
0C8CC 4C 19 C9                          JMP +goToEndIntroScreen
0C8CF                               +
0C8CF                           
0C8CF                               ;; If highest bits are %11, draw a plain tile
0C8CF 29 C0                         AND #%11000000
0C8D1 D0 03                         BNE +
0C8D3 4C F9 C8                          JMP +drawTile
0C8D6                               +
0C8D6                               
0C8D6                               ;; If highest bits are %01, set the PPU address
0C8D6                               ;; If not, draw two logo tiles
0C8D6 C9 40                         CMP #%01000000
0C8D8 D0 03                         BNE +drawLogo
0C8DA 4C 03 C9                          JMP +setPpuAddr
0C8DD                           
0C8DD                           +drawLogo:
0C8DD                               ;; Get bits 0-2 and store in a temp variable
0C8DD BD 7E C9                      LDA tbl_IntroScreenData,x
0C8E0 29 07                         AND #%00000111
0C8E2 85 00                         STA temp
0C8E4                               
0C8E4                               ;; Get bits 3-5, shift over to get a value from 0-7
0C8E4 BD 7E C9                      LDA tbl_IntroScreenData,x
0C8E7 4A                            LSR
0C8E8 4A                            LSR
0C8E9 4A                            LSR
0C8EA 29 07                         AND #%00000111
0C8EC                               
0C8EC                               ;; Draw the tile that corresponds with that value
0C8EC A8                            TAY
0C8ED 20 B0 C4                      JSR sub_drawIntroScreenLogoTile
0C8F0                               
0C8F0                               ;; Do the same for the value stored in temp
0C8F0 A4 00                         LDY temp
0C8F2 20 B0 C4                      JSR sub_drawIntroScreenLogoTile
0C8F5                           
0C8F5                               ;; Next byte please
0C8F5 E8                            INX
0C8F6 4C C5 C8                      JMP -loop_IntroScreenData
0C8F9                           
0C8F9                           +drawTile:
0C8F9                               ;; Just draw the tile value on screen
0C8F9 BD 7E C9                      LDA tbl_IntroScreenData,x
0C8FC 8D 07 20                      STA PPU_DATA
0C8FF                               
0C8FF                               ;; Next byte please
0C8FF E8                            INX
0C900 4C C5 C8                      JMP -loop_IntroScreenData
0C903                           
0C903                           
0C903                           +setPpuAddr:
0C903                               ;; Reset the PPU latch
0C903 2C 02 20                      BIT PPU_STATUS
0C906                               
0C906                               ;; Sanitize and write the high byte of the PPU address
0C906 BD 7E C9                      LDA tbl_IntroScreenData,x
0C909 29 3F                         AND #%00111111
0C90B 8D 06 20                      STA PPU_ADDR
0C90E                           
0C90E                               ;; Write the low byte of the PPU address
0C90E E8                            INX
0C90F BD 7E C9                      LDA tbl_IntroScreenData,x
0C912 8D 06 20                      STA PPU_ADDR
0C915                               
0C915                               ;; PPU has been set up to draw tiles at the correct spot now.
0C915                               
0C915                               ;; Next byte please.
0C915 E8                            INX
0C916 4C C5 C8                      JMP -loop_IntroScreenData
0C919                           
0C919                           +goToEndIntroScreen:
0C919                           
0C919                               ;; To color the 1.LEVEL: line green, we need to update two
0C919                               ;; values in the PPU attribute data.
0C919 2C 02 20                      BIT PPU_STATUS
0C91C A9 23                         LDA #$23
0C91E 8D 06 20                      STA PPU_ADDR
0C921 A9 CB                         LDA #$CB
0C923 8D 06 20                      STA PPU_ADDR
0C926 A9 0A                         LDA #%00001010
0C928 8D 07 20                      STA PPU_DATA
0C92B 8D 07 20                      STA PPU_DATA
0C92E                           
0C92E 60                            RTS
0C92F                           
0C92F                           .include "game/subroutine/LoadWinScreen.asm"
0C92F                           sub_LoadWinScreen:
0C92F 60                            RTS
0C930                           
0C930                           .include "game/subroutine/WriteByteToPPU.asm"
0C930                           sub_WriteByteToPPUBuffer:
0C930                           
0C930                               ;; Prevent updating until full 3-byte buffer is filled,
0C930                               ;; so that graphics won't glitch out if NMI happens during
0C930                               ;; updating the buffer
0C930 A9 00                         LDA #$00
0C932 85 2F                         STA ppu_buffer_update
0C934                           
0C934                               ;; Check if buffer full; if so, wait a frame and force update
0C934 A4 30                         LDY ppu_buffer_pointer
0C936 C0 30                         CPY #$30
0C938 D0 05                         BNE +
0C93A E6 2F                             INC ppu_buffer_update
0C93C 20 C7 C3                          JSR sub_WaitForVBlank
0C93F                               +
0C93F                           
0C93F                               ;; Add ppu_addr high byte to buffer
0C93F A5 00                         LDA temp
0C941 99 00 03                      STA ppu_buffer,y
0C944                           
0C944                               ;; Add ppu_addr low byte to buffer
0C944 C8                            INY
0C945 A5 01                         LDA temp+1
0C947 99 00 03                      STA ppu_buffer,y
0C94A                           
0C94A                               ;; Add ppu_data to buffer
0C94A C8                            INY
0C94B A5 02                         LDA temp+2
0C94D 99 00 03                      STA ppu_buffer,y
0C950                           
0C950                               ;; Update buffer pointer
0C950 C8                            INY
0C951 84 30                         STY ppu_buffer_pointer
0C953                           
0C953                               ;; Tell NMI to update next round
0C953 E6 2F                         INC ppu_buffer_update
0C955                           
0C955                               ;; Return
0C955 60                            RTS0C956                           
0C956                           
0C956                           ;; LUTs
0C956                           .include "game/include/tables.asm"
0C956                           
0C956                           ;; Initial screen palette
0C956                           tbl_IntroScreenPalette:
0C956 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C95A 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C95E 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C962 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C966                           
0C966 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C96A 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C96E 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0C972 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C976                           
0C976                           
0C976                           ;; Intro: mapping logo index to chr tile
0C976                           tbl_IntroScreenLogoChr:
0C976 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C97E                           
0C97E                           
0C97E                           ;; Intro screen data
0C97E                           tbl_IntroScreenData:
0C97E                           
0C97E                               ;; Set PPU address $20AC and draw
0C97E 60 AC                         .db #$60, #$AC
0C980 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C988                           
0C988                               ;; Set PPU address $20CF and draw
0C988 60 CF                         .db #$60, #$CF
0C98A 01 02                         .db #_0, #_1
0C98C                               
0C98C                               ;; Set PPU address $2122 and draw
0C98C 61 22                         .db #$61, #$22
0C98E 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C995 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C99B 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C9A3 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C9A8                               
0C9A8                               ;; Set PPU address $2147 and draw
0C9A8 61 47                         .db #$61, #$47
0C9AA 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C9B1 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C9B5 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C9BB 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C9C1                               
0C9C1                               ;; Set PPU address $218B and draw
0C9C1 61 8B                         .db #$61, #$8B
0C9C3 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C9C9 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C9CE                               
0C9CE                               ;; Set PPU address $21E6 and draw
0C9CE 61 E6                         .db #$61, #$E6
0C9D0 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C9D8 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C9DC 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C9E3                               
0C9E3                               ;; Set PPU address $222D and draw
0C9E3 62 2D                         .db #$62, #$2D
0C9E5 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C9EB                               
0C9EB                               ;; Set PPU address $2281
0C9EB 62 81                         .db #$62, #$81
0C9ED                               
0C9ED                               ;; Draw the Crillion logo
0C9ED E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C9F1 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C9F5 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C9F9 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C9FD                               
0C9FD D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CA01 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CA05 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CA09 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CA0D                               
0CA0D D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CA11 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CA15 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CA19 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CA1D                           
0CA1D D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CA21 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CA25 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CA29 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CA2D                               
0CA2D D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CA31 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CA35 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CA39 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CA3D                           
0CA3D F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CA41 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CA45 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CA49 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CA4C                           
0CA4C                               ;; End of intro
0CA4C 3F                            .db #$3F
0CA4D                           
0CA4D                           
0CA4D                           ;; Animation frames table
0CA4D                           .include "game/include/table/animation_frames.asm"
0CA4D                           ;; CHR tile-id's per slide of explosion
0CA4D                           explosion_slide0:
0CA4D 00 00 00                      .db #$00, #$00, #$00
0CA50 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CA53 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CA56                           
0CA56                           explosion_slide1:
0CA56 00 00 00                      .db #$00, #$00, #$00
0CA59 29 2A 2B                      .db #$29, #$2A, #$2B
0CA5C 39 3A 3B                      .db #$39, #$3A, #$3B
0CA5F                           
0CA5F                           explosion_slide2:
0CA5F 16 00 00                      .db #$16, #$00, #$00
0CA62 26 27 28                      .db #$26, #$27, #$28
0CA65 36 37 38                      .db #$36, #$37, #$38
0CA68                           
0CA68                           explosion_slide3:
0CA68 00 14 15                      .db #$00, #$14, #$15
0CA6B 23 24 25                      .db #$23, #$24, #$25
0CA6E 33 34 35                      .db #$33, #$34, #$35
0CA71                           
0CA71                           explosion_slide4:
0CA71 10 11 12                      .db #$10, #$11, #$12
0CA74 20 21 22                      .db #$20, #$21, #$22
0CA77 30 31 32                      .db #$30, #$31, #$32
0CA7A                           
0CA7A                           ;; High and low bytes of animation slides
0CA7A                           explosion_anim_hi:
0CA7A CA                            .db >#explosion_slide0
0CA7B CA                            .db >#explosion_slide1
0CA7C CA                            .db >#explosion_slide2
0CA7D CA                            .db >#explosion_slide3
0CA7E CA                            .db >#explosion_slide4
0CA7F CA                            .db >#explosion_slide4
0CA80 CA                            .db >#explosion_slide3
0CA81 CA                            .db >#explosion_slide2
0CA82 CA                            .db >#explosion_slide1
0CA83 CA                            .db >#explosion_slide0
0CA84                           
0CA84                           explosion_anim_lo:
0CA84 4D                            .db <#explosion_slide0
0CA85 56                            .db <#explosion_slide1
0CA86 5F                            .db <#explosion_slide2
0CA87 68                            .db <#explosion_slide3
0CA88 71                            .db <#explosion_slide4
0CA89 71                            .db <#explosion_slide4
0CA8A 68                            .db <#explosion_slide3
0CA8B 5F                            .db <#explosion_slide2
0CA8C 56                            .db <#explosion_slide1
0CA8D 4D                            .db <#explosion_slide0
0CA8E                           
0CA8E                           
0CA8E                           
0CA8E                           ;; Ball palette color table (CBRYGM)
0CA8E                           tbl_BallColorDark:
0CA8E 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CA94                            
0CA94                           tbl_BallColorLight:
0CA94 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CA9A                           
0CA9A                               
0CA9A                           ;; Screen mode drawing routine addresses
0CA9A                           tbl_LoadScreenHi:
0CA9A C8 C5 C9                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CA9D                           
0CA9D                           tbl_LoadScreenLo:
0CA9D A0 0F 2F                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CAA0                           
0CAA0                           
0CAA0                           ;; Level data
0CAA0                           .include "game/include/table/level_data.asm"
0CAA0                           lvl_layout_01:
0CAA0 61 21                         .db #$61, #%00100001
0CAA2 52 61                         .db #$52, #%01100001
0CAA4 43 65                         .db #$43, #%01100101
0CAA6 83 05                         .db #$83, #%00000101
0CAA8 93 15                         .db #$93, #%00010101
0CAAA 34 7A                         .db #$34, #%01111010
0CAAC 74 7A                         .db #$74, #%01111010
0CAAE 35 7A                         .db #$35, #%01111010
0CAB0 75 7A                         .db #$75, #%01111010
0CAB2 46 65                         .db #$46, #%01100101
0CAB4 86 25                         .db #$86, #%00100101
0CAB6 57 61                         .db #$57, #%01100001
0CAB8 68 21                         .db #$68, #%00100001
0CABA FF                            .db #LEVEL_END
0CABB                           
0CABB                           lvl_layout_02:
0CABB C0 0A                         .db #$C0, #%00001010
0CABD 11 15                         .db #$11, #%00010101
0CABF 21 62                         .db #$21, #%01100010
0CAC1 61 62                         .db #$61, #%01100010
0CAC3 A1 42                         .db #$A1, #%01000010
0CAC5 12 67                         .db #$12, #%01100111
0CAC7 52 67                         .db #$52, #%01100111
0CAC9 92 67                         .db #$92, #%01100111
0CACB C3 0D                         .db #$C3, #%00001101
0CACD 14 11                         .db #$14, #%00010001
0CACF 24 65                         .db #$24, #%01100101
0CAD1 64 65                         .db #$64, #%01100101
0CAD3 A4 45                         .db #$A4, #%01000101
0CAD5 15 67                         .db #$15, #%01100111
0CAD7 55 67                         .db #$55, #%01100111
0CAD9 95 67                         .db #$95, #%01100111
0CADB 17 12                         .db #$17, #%00010010
0CADD 27 61                         .db #$27, #%01100001
0CADF 67 61                         .db #$67, #%01100001
0CAE1 A7 41                         .db #$A7, #%01000001
0CAE3 38 7A                         .db #$38, #%01111010
0CAE5 98 5A                         .db #$98, #%01011010
0CAE7 18 27                         .db #$18, #%00100111
0CAE9 48 27                         .db #$48, #%00100111
0CAEB 78 27                         .db #$78, #%00100111
0CAED C8 07                         .db #$C8, #%00000111
0CAEF FF                            .db #LEVEL_END
0CAF0                           
0CAF0                           lvl_layout_03:
0CAF0 00 7A                         .db #$00, #%01111010
0CAF2 40 7A                         .db #$40, #%01111010
0CAF4 80 7A                         .db #$80, #%01111010
0CAF6 C0 1A                         .db #$C0, #%00011010
0CAF8 10 A1                         .db #$10, #%10100001
0CAFA 13 E1                         .db #$13, #%11100001
0CAFC 17 C1                         .db #$17, #%11000001
0CAFE 30 C1                         .db #$30, #%11000001
0CB00 34 C1                         .db #$34, #%11000001
0CB02 38 A1                         .db #$38, #%10100001
0CB04 50 E1                         .db #$50, #%11100001
0CB06 55 81                         .db #$55, #%10000001
0CB08 57 C1                         .db #$57, #%11000001
0CB0A 70 C1                         .db #$70, #%11000001
0CB0C 73 A1                         .db #$73, #%10100001
0CB0E 76 E1                         .db #$76, #%11100001
0CB10 90 E1                         .db #$90, #%11100001
0CB12 95 81                         .db #$95, #%10000001
0CB14 97 C1                         .db #$97, #%11000001
0CB16 B0 C1                         .db #$B0, #%11000001
0CB18 B4 C1                         .db #$B4, #%11000001
0CB1A B8 A1                         .db #$B8, #%10100001
0CB1C D0 A1                         .db #$D0, #%10100001
0CB1E D3 E1                         .db #$D3, #%11100001
0CB20 D7 C1                         .db #$D7, #%11000001
0CB22 FF                            .db #LEVEL_END
0CB23                           
0CB23                           lvl_layout_04:
0CB23 00 4C                         .db #$00, #%01001100
0CB25 40 6C                         .db #$40, #%01101100
0CB27 80 4C                         .db #$80, #%01001100
0CB29 81 AC                         .db #$81, #%10101100
0CB2B C1 2C                         .db #$C1, #%00101100
0CB2D 02 6C                         .db #$02, #%01101100
0CB2F 42 CC                         .db #$42, #%11001100
0CB31 62 EC                         .db #$62, #%11101100
0CB33 A2 CC                         .db #$A2, #%11001100
0CB35 C3 CC                         .db #$C3, #%11001100
0CB37 04 4C                         .db #$04, #%01001100
0CB39 84 2C                         .db #$84, #%00101100
0CB3B 25 AC                         .db #$25, #%10101100
0CB3D 85 AC                         .db #$85, #%10101100
0CB3F 06 AC                         .db #$06, #%10101100
0CB41 36 CC                         .db #$36, #%11001100
0CB43 56 CC                         .db #$56, #%11001100
0CB45 66 EC                         .db #$66, #%11101100
0CB47 96 6C                         .db #$96, #%01101100
0CB49 C7 AC                         .db #$C7, #%10101100
0CB4B 08 2C                         .db #$08, #%00101100
0CB4D 78 6C                         .db #$78, #%01101100
0CB4F D8 0C                         .db #$D8, #%00001100
0CB51 30 A1                         .db #$30, #%10100001
0CB53 B0 21                         .db #$B0, #%00100001
0CB55 01 41                         .db #$01, #%01000001
0CB57 41 61                         .db #$41, #%01100001
0CB59 91 A1                         .db #$91, #%10100001
0CB5B A1 21                         .db #$A1, #%00100001
0CB5D 52 C1                         .db #$52, #%11000001
0CB5F 72 E1                         .db #$72, #%11100001
0CB61 B2 C1                         .db #$B2, #%11000001
0CB63 C2 21                         .db #$C2, #%00100001
0CB65 03 41                         .db #$03, #%01000001
0CB67 33 C1                         .db #$33, #%11000001
0CB69 83 21                         .db #$83, #%00100001
0CB6B D3 E1                         .db #$D3, #%11100001
0CB6D 05 21                         .db #$05, #%00100001
0CB6F 45 E1                         .db #$45, #%11100001
0CB71 A5 21                         .db #$A5, #%00100001
0CB73 16 A1                         .db #$16, #%10100001
0CB75 76 A1                         .db #$76, #%10100001
0CB77 27 A1                         .db #$27, #%10100001
0CB79 57 01                         .db #$57, #%00000001
0CB7B 87 41                         .db #$87, #%01000001
0CB7D B7 A1                         .db #$B7, #%10100001
0CB7F 19 21                         .db #$19, #%00100001
0CB81 39 41                         .db #$39, #%01000001
0CB83 89 41                         .db #$89, #%01000001
0CB85 C9 21                         .db #$C9, #%00100001
0CB87 D0 1A                         .db #$D0, #%00011010
0CB89 55 1A                         .db #$55, #%00011010
0CB8B 95 1A                         .db #$95, #%00011010
0CB8D D7 1A                         .db #$D7, #%00011010
0CB8F 09 1A                         .db #$09, #%00011010
0CB91 79 1A                         .db #$79, #%00011010
0CB93 FF                            .db #LEVEL_END
0CB94                           
0CB94                           lvl_layout_05:
0CB94 40 0A                         .db #$40, #%00001010
0CB96 70 1A                         .db #$70, #%00011010
0CB98 B0 42                         .db #$B0, #%01000010
0CB9A 41 A7                         .db #$41, #%10100111
0CB9C B1 22                         .db #$B1, #%00100010
0CB9E D1 15                         .db #$D1, #%00010101
0CBA0 22 0A                         .db #$22, #%00001010
0CBA2 52 05                         .db #$52, #%00000101
0CBA4 B2 42                         .db #$B2, #%01000010
0CBA6 03 27                         .db #$03, #%00100111
0CBA8 33 67                         .db #$33, #%01100111
0CBAA 73 67                         .db #$73, #%01100111
0CBAC B3 47                         .db #$B3, #%01000111
0CBAE 05 E5                         .db #$05, #%11100101
0CBB0 25 A5                         .db #$25, #%10100101
0CBB2 35 25                         .db #$35, #%00100101
0CBB4 65 45                         .db #$65, #%01000101
0CBB6 A5 45                         .db #$A5, #%01000101
0CBB8 46 E5                         .db #$46, #%11100101
0CBBA 66 E5                         .db #$66, #%11100101
0CBBC 86 E5                         .db #$86, #%11100101
0CBBE A6 E2                         .db #$A6, #%11100010
0CBC0 C6 E5                         .db #$C6, #%11100101
0CBC2 27 25                         .db #$27, #%00100101
0CBC4 77 05                         .db #$77, #%00000101
0CBC6 B7 02                         .db #$B7, #%00000010
0CBC8 09 05                         .db #$09, #%00000101
0CBCA 79 05                         .db #$79, #%00000101
0CBCC B9 02                         .db #$B9, #%00000010
0CBCE FF                            .db #LEVEL_END
0CBCF                           
0CBCF                           lvl_layout_06:
0CBCF 00 03                         .db #$00, #%00000011
0CBD1 20 03                         .db #$20, #%00000011
0CBD3 40 03                         .db #$40, #%00000011
0CBD5 A0 03                         .db #$A0, #%00000011
0CBD7 C0 03                         .db #$C0, #%00000011
0CBD9 11 03                         .db #$11, #%00000011
0CBDB 31 03                         .db #$31, #%00000011
0CBDD 51 03                         .db #$51, #%00000011
0CBDF 91 03                         .db #$91, #%00000011
0CBE1 B1 03                         .db #$B1, #%00000011
0CBE3 D1 03                         .db #$D1, #%00000011
0CBE5 02 03                         .db #$02, #%00000011
0CBE7 22 03                         .db #$22, #%00000011
0CBE9 42 03                         .db #$42, #%00000011
0CBEB A2 03                         .db #$A2, #%00000011
0CBED C2 03                         .db #$C2, #%00000011
0CBEF 13 03                         .db #$13, #%00000011
0CBF1 33 03                         .db #$33, #%00000011
0CBF3 53 03                         .db #$53, #%00000011
0CBF5 93 03                         .db #$93, #%00000011
0CBF7 B3 03                         .db #$B3, #%00000011
0CBF9 D3 03                         .db #$D3, #%00000011
0CBFB 04 03                         .db #$04, #%00000011
0CBFD 24 03                         .db #$24, #%00000011
0CBFF 44 03                         .db #$44, #%00000011
0CC01 A4 03                         .db #$A4, #%00000011
0CC03 C4 03                         .db #$C4, #%00000011
0CC05 15 03                         .db #$15, #%00000011
0CC07 35 03                         .db #$35, #%00000011
0CC09 55 03                         .db #$55, #%00000011
0CC0B 95 03                         .db #$95, #%00000011
0CC0D B5 03                         .db #$B5, #%00000011
0CC0F D5 03                         .db #$D5, #%00000011
0CC11 06 03                         .db #$06, #%00000011
0CC13 26 03                         .db #$26, #%00000011
0CC15 46 03                         .db #$46, #%00000011
0CC17 A6 03                         .db #$A6, #%00000011
0CC19 C6 03                         .db #$C6, #%00000011
0CC1B 17 03                         .db #$17, #%00000011
0CC1D 37 03                         .db #$37, #%00000011
0CC1F 57 03                         .db #$57, #%00000011
0CC21 97 03                         .db #$97, #%00000011
0CC23 B7 03                         .db #$B7, #%00000011
0CC25 D7 03                         .db #$D7, #%00000011
0CC27 08 03                         .db #$08, #%00000011
0CC29 28 03                         .db #$28, #%00000011
0CC2B 48 03                         .db #$48, #%00000011
0CC2D A8 03                         .db #$A8, #%00000011
0CC2F C8 03                         .db #$C8, #%00000011
0CC31 19 03                         .db #$19, #%00000011
0CC33 39 03                         .db #$39, #%00000011
0CC35 59 03                         .db #$59, #%00000011
0CC37 99 03                         .db #$99, #%00000011
0CC39 B9 03                         .db #$B9, #%00000011
0CC3B D9 03                         .db #$D9, #%00000011
0CC3D 60 4B                         .db #$60, #%01001011
0CC3F 71 CB                         .db #$71, #%11001011
0CC41 62 4B                         .db #$62, #%01001011
0CC43 64 4B                         .db #$64, #%01001011
0CC45 75 CB                         .db #$75, #%11001011
0CC47 66 4B                         .db #$66, #%01001011
0CC49 68 4B                         .db #$68, #%01001011
0CC4B 79 0B                         .db #$79, #%00001011
0CC4D 70 03                         .db #$70, #%00000011
0CC4F 72 03                         .db #$72, #%00000011
0CC51 74 03                         .db #$74, #%00000011
0CC53 76 03                         .db #$76, #%00000011
0CC55 78 03                         .db #$78, #%00000011
0CC57 FF                            .db #LEVEL_END
0CC58                           
0CC58                           lvl_layout_07:
0CC58 00 11                         .db #$00, #%00010001
0CC5A 01 FA                         .db #$01, #%11111010
0CC5C 12 BA                         .db #$12, #%10111010
0CC5E 23 DA                         .db #$23, #%11011010
0CC60 34 FA                         .db #$34, #%11111010
0CC62 05 DA                         .db #$05, #%11011010
0CC64 15 FA                         .db #$15, #%11111010
0CC66 45 BA                         .db #$45, #%10111010
0CC68 56 DA                         .db #$56, #%11011010
0CC6A 27 BA                         .db #$27, #%10111010
0CC6C 67 DA                         .db #$67, #%11011010
0CC6E 38 3A                         .db #$38, #%00111010
0CC70 78 BA                         .db #$78, #%10111010
0CC72 09 3A                         .db #$09, #%00111010
0CC74 39 3A                         .db #$39, #%00111010
0CC76 89 1A                         .db #$89, #%00011010
0CC78 B0 01                         .db #$B0, #%00000001
0CC7A D0 01                         .db #$D0, #%00000001
0CC7C A1 01                         .db #$A1, #%00000001
0CC7E C1 11                         .db #$C1, #%00010001
0CC80 B2 01                         .db #$B2, #%00000001
0CC82 D2 01                         .db #$D2, #%00000001
0CC84 A3 01                         .db #$A3, #%00000001
0CC86 C3 01                         .db #$C3, #%00000001
0CC88 B4 01                         .db #$B4, #%00000001
0CC8A D4 01                         .db #$D4, #%00000001
0CC8C A5 01                         .db #$A5, #%00000001
0CC8E C5 01                         .db #$C5, #%00000001
0CC90 B6 01                         .db #$B6, #%00000001
0CC92 D6 01                         .db #$D6, #%00000001
0CC94 A7 01                         .db #$A7, #%00000001
0CC96 C7 01                         .db #$C7, #%00000001
0CC98 FF                            .db #LEVEL_END
0CC99                           
0CC99                           lvl_layout_08:
0CC99 40 B5                         .db #$40, #%10110101
0CC9B 31 0D                         .db #$31, #%00001101
0CC9D 61 10                         .db #$61, #%00010000
0CC9F 42 C7                         .db #$42, #%11000111
0CCA1 52 67                         .db #$52, #%01100111
0CCA3 63 C7                         .db #$63, #%11000111
0CCA5 83 E7                         .db #$83, #%11100111
0CCA7 05 07                         .db #$05, #%00000111
0CCA9 15 3A                         .db #$15, #%00111010
0CCAB 07 63                         .db #$07, #%01100011
0CCAD 27 13                         .db #$27, #%00010011
0CCAF 38 A5                         .db #$38, #%10100101
0CCB1 09 14                         .db #$09, #%00010100
0CCB3 19 05                         .db #$19, #%00000101
0CCB5 D0 E0                         .db #$D0, #%11100000
0CCB7 C2 A0                         .db #$C2, #%10100000
0CCB9 B3 E0                         .db #$B3, #%11100000
0CCBB D5 E0                         .db #$D5, #%11100000
0CCBD C6 E0                         .db #$C6, #%11100000
0CCBF B0 C4                         .db #$B0, #%11000100
0CCC1 C0 A4                         .db #$C0, #%10100100
0CCC3 D1 A4                         .db #$D1, #%10100100
0CCC5 C4 24                         .db #$C4, #%00100100
0CCC7 C5 04                         .db #$C5, #%00000100
0CCC9 B7 44                         .db #$B7, #%01000100
0CCCB B8 A4                         .db #$B8, #%10100100
0CCCD D9 05                         .db #$D9, #%00000101
0CCCF FF                            .db #LEVEL_END
0CCD0                           
0CCD0                           lvl_layout_09:
0CCD0 81 04                         .db #$81, #%00000100
0CCD2 D1 04                         .db #$D1, #%00000100
0CCD4 32 C4                         .db #$32, #%11000100
0CCD6 A2 C4                         .db #$A2, #%11000100
0CCD8 C2 24                         .db #$C2, #%00100100
0CCDA 13 24                         .db #$13, #%00100100
0CCDC 53 04                         .db #$53, #%00000100
0CCDE C3 27                         .db #$C3, #%00100111
0CCE0 15 6C                         .db #$15, #%01101100
0CCE2 55 6C                         .db #$55, #%01101100
0CCE4 95 6C                         .db #$95, #%01101100
0CCE6 D5 0C                         .db #$D5, #%00001100
0CCE8 27 C7                         .db #$27, #%11000111
0CCEA 47 C7                         .db #$47, #%11000111
0CCEC 67 C7                         .db #$67, #%11000111
0CCEE 87 C7                         .db #$87, #%11000111
0CCF0 A7 C7                         .db #$A7, #%11000111
0CCF2 C7 C7                         .db #$C7, #%11000111
0CCF4 08 13                         .db #$08, #%00010011
0CCF6 28 15                         .db #$28, #%00010101
0CCF8 48 12                         .db #$48, #%00010010
0CCFA 68 15                         .db #$68, #%00010101
0CCFC 88 11                         .db #$88, #%00010001
0CCFE A8 10                         .db #$A8, #%00010000
0CD00 C8 14                         .db #$C8, #%00010100
0CD02 09 07                         .db #$09, #%00000111
0CD04 19 03                         .db #$19, #%00000011
0CD06 39 05                         .db #$39, #%00000101
0CD08 59 02                         .db #$59, #%00000010
0CD0A 79 05                         .db #$79, #%00000101
0CD0C 99 01                         .db #$99, #%00000001
0CD0E B9 00                         .db #$B9, #%00000000
0CD10 D9 04                         .db #$D9, #%00000100
0CD12 FF                            .db #LEVEL_END
0CD13                           
0CD13                           lvl_layout_10:
0CD13 00 02                         .db #$00, #%00000010
0CD15 10 C9                         .db #$10, #%11001001
0CD17 50 C9                         .db #$50, #%11001001
0CD19 90 C9                         .db #$90, #%11001001
0CD1B D0 C9                         .db #$D0, #%11001001
0CD1D 31 C9                         .db #$31, #%11001001
0CD1F 71 C9                         .db #$71, #%11001001
0CD21 B1 C9                         .db #$B1, #%11001001
0CD23 13 C9                         .db #$13, #%11001001
0CD25 53 C9                         .db #$53, #%11001001
0CD27 93 C9                         .db #$93, #%11001001
0CD29 D3 C9                         .db #$D3, #%11001001
0CD2B 34 C9                         .db #$34, #%11001001
0CD2D 74 C9                         .db #$74, #%11001001
0CD2F B4 C9                         .db #$B4, #%11001001
0CD31 16 C9                         .db #$16, #%11001001
0CD33 56 C9                         .db #$56, #%11001001
0CD35 96 C9                         .db #$96, #%11001001
0CD37 D6 C9                         .db #$D6, #%11001001
0CD39 37 C9                         .db #$37, #%11001001
0CD3B 77 C9                         .db #$77, #%11001001
0CD3D B7 C9                         .db #$B7, #%11001001
0CD3F D8 12                         .db #$D8, #%00010010
0CD41 FF                            .db #LEVEL_END
0CD42                           
0CD42                           lvl_layout_11:
0CD42 00 65                         .db #$00, #%01100101
0CD44 40 45                         .db #$40, #%01000101
0CD46 50 A7                         .db #$50, #%10100111
0CD48 80 05                         .db #$80, #%00000101
0CD4A 90 A7                         .db #$90, #%10100111
0CD4C A0 65                         .db #$A0, #%01100101
0CD4E 01 43                         .db #$01, #%01000011
0CD50 31 23                         .db #$31, #%00100011
0CD52 61 A7                         .db #$61, #%10100111
0CD54 81 A7                         .db #$81, #%10100111
0CD56 A1 63                         .db #$A1, #%01100011
0CD58 02 44                         .db #$02, #%01000100
0CD5A 32 44                         .db #$32, #%01000100
0CD5C 92 04                         .db #$92, #%00000100
0CD5E A2 64                         .db #$A2, #%01100100
0CD60 03 40                         .db #$03, #%01000000
0CD62 33 40                         .db #$33, #%01000000
0CD64 63 A1                         .db #$63, #%10100001
0CD66 83 A2                         .db #$83, #%10100010
0CD68 93 00                         .db #$93, #%00000000
0CD6A A3 60                         .db #$A3, #%01100000
0CD6C 04 41                         .db #$04, #%01000001
0CD6E 34 41                         .db #$34, #%01000001
0CD70 94 02                         .db #$94, #%00000010
0CD72 A4 62                         .db #$A4, #%01100010
0CD74 05 47                         .db #$05, #%01000111
0CD76 35 67                         .db #$35, #%01100111
0CD78 75 0A                         .db #$75, #%00001010
0CD7A 85 47                         .db #$85, #%01000111
0CD7C B5 47                         .db #$B5, #%01000111
0CD7E 06 E7                         .db #$06, #%11100111
0CD80 16 5A                         .db #$16, #%01011010
0CD82 26 11                         .db #$26, #%00010001
0CD84 46 13                         .db #$46, #%00010011
0CD86 56 1A                         .db #$56, #%00011010
0CD88 66 14                         .db #$66, #%00010100
0CD8A 86 10                         .db #$86, #%00010000
0CD8C 96 5A                         .db #$96, #%01011010
0CD8E A6 12                         .db #$A6, #%00010010
0CD90 C6 15                         .db #$C6, #%00010101
0CD92 D6 E7                         .db #$D6, #%11100111
0CD94 FF                            .db #LEVEL_END
0CD95                           
0CD95                           lvl_layout_12:
0CD95 00 00                         .db #$00, #%00000000
0CD97 50 C0                         .db #$50, #%11000000
0CD99 80 00                         .db #$80, #%00000000
0CD9B 61 00                         .db #$61, #%00000000
0CD9D 22 C0                         .db #$22, #%11000000
0CD9F 82 E0                         .db #$82, #%11100000
0CDA1 C2 E0                         .db #$C2, #%11100000
0CDA3 A3 20                         .db #$A3, #%00100000
0CDA5 C3 10                         .db #$C3, #%00010000
0CDA7 04 00                         .db #$04, #%00000000
0CDA9 54 20                         .db #$54, #%00100000
0CDAB 15 0A                         .db #$15, #%00001010
0CDAD 25 C0                         .db #$25, #%11000000
0CDAF 55 E0                         .db #$55, #%11100000
0CDB1 86 20                         .db #$86, #%00100000
0CDB3 C6 E0                         .db #$C6, #%11100000
0CDB5 C7 A0                         .db #$C7, #%10100000
0CDB7 88 00                         .db #$88, #%00000000
0CDB9 59 00                         .db #$59, #%00000000
0CDBB 89 20                         .db #$89, #%00100000
0CDBD D9 1A                         .db #$D9, #%00011010
0CDBF FF                            .db #LEVEL_END
0CDC0                           
0CDC0                           lvl_layout_13:
0CDC0 10 E0                         .db #$10, #%11100000
0CDC2 20 E0                         .db #$20, #%11100000
0CDC4 30 E0                         .db #$30, #%11100000
0CDC6 40 40                         .db #$40, #%01000000
0CDC8 80 60                         .db #$80, #%01100000
0CDCA C0 E0                         .db #$C0, #%11100000
0CDCC D0 E0                         .db #$D0, #%11100000
0CDCE 41 40                         .db #$41, #%01000000
0CDD0 71 60                         .db #$71, #%01100000
0CDD2 52 60                         .db #$52, #%01100000
0CDD4 A2 20                         .db #$A2, #%00100000
0CDD6 43 60                         .db #$43, #%01100000
0CDD8 83 60                         .db #$83, #%01100000
0CDDA 14 74                         .db #$14, #%01110100
0CDDC 54 74                         .db #$54, #%01110100
0CDDE 94 74                         .db #$94, #%01110100
0CDE0 D4 14                         .db #$D4, #%00010100
0CDE2 15 0D                         .db #$15, #%00001101
0CDE4 55 0D                         .db #$55, #%00001101
0CDE6 95 0D                         .db #$95, #%00001101
0CDE8 D5 0D                         .db #$D5, #%00001101
0CDEA 26 0D                         .db #$26, #%00001101
0CDEC 46 0D                         .db #$46, #%00001101
0CDEE 66 0D                         .db #$66, #%00001101
0CDF0 86 0D                         .db #$86, #%00001101
0CDF2 A6 0D                         .db #$A6, #%00001101
0CDF4 C6 0D                         .db #$C6, #%00001101
0CDF6 07 10                         .db #$07, #%00010000
0CDF8 37 0D                         .db #$37, #%00001101
0CDFA 77 0D                         .db #$77, #%00001101
0CDFC B7 0D                         .db #$B7, #%00001101
0CDFE 28 0D                         .db #$28, #%00001101
0CE00 48 0D                         .db #$48, #%00001101
0CE02 68 0D                         .db #$68, #%00001101
0CE04 88 0D                         .db #$88, #%00001101
0CE06 A8 0D                         .db #$A8, #%00001101
0CE08 C8 0D                         .db #$C8, #%00001101
0CE0A 19 0D                         .db #$19, #%00001101
0CE0C 59 0D                         .db #$59, #%00001101
0CE0E 99 0D                         .db #$99, #%00001101
0CE10 D9 0D                         .db #$D9, #%00001101
0CE12 FF                            .db #LEVEL_END
0CE13                           
0CE13                           lvl_layout_14:
0CE13 00 67                         .db #$00, #%01100111
0CE15 40 67                         .db #$40, #%01100111
0CE17 80 67                         .db #$80, #%01100111
0CE19 C0 27                         .db #$C0, #%00100111
0CE1B 01 27                         .db #$01, #%00100111
0CE1D 31 C7                         .db #$31, #%11000111
0CE1F 51 C7                         .db #$51, #%11000111
0CE21 71 C7                         .db #$71, #%11000111
0CE23 91 C7                         .db #$91, #%11000111
0CE25 B1 C7                         .db #$B1, #%11000111
0CE27 D1 07                         .db #$D1, #%00000111
0CE29 02 E7                         .db #$02, #%11100111
0CE2B 06 E7                         .db #$06, #%11100111
0CE2D 13 07                         .db #$13, #%00000111
0CE2F D3 07                         .db #$D3, #%00000111
0CE31 15 07                         .db #$15, #%00000111
0CE33 35 07                         .db #$35, #%00000111
0CE35 55 07                         .db #$55, #%00000111
0CE37 75 07                         .db #$75, #%00000111
0CE39 95 07                         .db #$95, #%00000111
0CE3B B5 07                         .db #$B5, #%00000111
0CE3D D5 07                         .db #$D5, #%00000111
0CE3F 17 07                         .db #$17, #%00000111
0CE41 37 C7                         .db #$37, #%11000111
0CE43 57 C7                         .db #$57, #%11000111
0CE45 77 C7                         .db #$77, #%11000111
0CE47 97 C7                         .db #$97, #%11000111
0CE49 B7 C7                         .db #$B7, #%11000111
0CE4B D7 07                         .db #$D7, #%00000111
0CE4D 19 07                         .db #$19, #%00000111
0CE4F D9 07                         .db #$D9, #%00000111
0CE51 22 4C                         .db #$22, #%01001100
0CE53 62 4C                         .db #$62, #%01001100
0CE55 A2 4C                         .db #$A2, #%01001100
0CE57 24 0C                         .db #$24, #%00001100
0CE59 44 0C                         .db #$44, #%00001100
0CE5B 64 0C                         .db #$64, #%00001100
0CE5D 84 0C                         .db #$84, #%00001100
0CE5F A4 0C                         .db #$A4, #%00001100
0CE61 C4 0C                         .db #$C4, #%00001100
0CE63 26 0C                         .db #$26, #%00001100
0CE65 46 0C                         .db #$46, #%00001100
0CE67 66 0C                         .db #$66, #%00001100
0CE69 86 0C                         .db #$86, #%00001100
0CE6B A6 0C                         .db #$A6, #%00001100
0CE6D C6 0C                         .db #$C6, #%00001100
0CE6F 28 4C                         .db #$28, #%01001100
0CE71 68 4C                         .db #$68, #%01001100
0CE73 A8 4C                         .db #$A8, #%01001100
0CE75 32 04                         .db #$32, #%00000100
0CE77 52 04                         .db #$52, #%00000100
0CE79 72 04                         .db #$72, #%00000100
0CE7B 92 04                         .db #$92, #%00000100
0CE7D B2 04                         .db #$B2, #%00000100
0CE7F 38 04                         .db #$38, #%00000100
0CE81 58 04                         .db #$58, #%00000100
0CE83 78 04                         .db #$78, #%00000100
0CE85 98 04                         .db #$98, #%00000100
0CE87 B8 04                         .db #$B8, #%00000100
0CE89 FF                            .db #LEVEL_END
0CE8A                           
0CE8A                           lvl_layout_15:
0CE8A 00 7A                         .db #$00, #%01111010
0CE8C 40 7A                         .db #$40, #%01111010
0CE8E 80 7A                         .db #$80, #%01111010
0CE90 C0 3A                         .db #$C0, #%00111010
0CE92 31 04                         .db #$31, #%00000100
0CE94 51 04                         .db #$51, #%00000100
0CE96 81 04                         .db #$81, #%00000100
0CE98 A1 04                         .db #$A1, #%00000100
0CE9A 05 E4                         .db #$05, #%11100100
0CE9C 15 64                         .db #$15, #%01100100
0CE9E 55 64                         .db #$55, #%01100100
0CEA0 95 64                         .db #$95, #%01100100
0CEA2 D5 E4                         .db #$D5, #%11100100
0CEA4 26 04                         .db #$26, #%00000100
0CEA6 46 44                         .db #$46, #%01000100
0CEA8 76 64                         .db #$76, #%01100100
0CEAA C6 04                         .db #$C6, #%00000100
0CEAC 17 04                         .db #$17, #%00000100
0CEAE 37 64                         .db #$37, #%01100100
0CEB0 77 44                         .db #$77, #%01000100
0CEB2 B7 04                         .db #$B7, #%00000100
0CEB4 18 64                         .db #$18, #%01100100
0CEB6 58 64                         .db #$58, #%01100100
0CEB8 98 64                         .db #$98, #%01100100
0CEBA FF                            .db #LEVEL_END
0CEBB                           
0CEBB                           lvl_layout_16:
0CEBB 10 E1                         .db #$10, #%11100001
0CEBD 20 9A                         .db #$20, #%10011010
0CEBF 30 E1                         .db #$30, #%11100001
0CEC1 40 E1                         .db #$40, #%11100001
0CEC3 50 E1                         .db #$50, #%11100001
0CEC5 60 C1                         .db #$60, #%11000001
0CEC7 70 E1                         .db #$70, #%11100001
0CEC9 80 E1                         .db #$80, #%11100001
0CECB 90 E1                         .db #$90, #%11100001
0CECD A0 61                         .db #$A0, #%01100001
0CECF 21 C1                         .db #$21, #%11000001
0CED1 A1 1A                         .db #$A1, #%00011010
0CED3 B1 41                         .db #$B1, #%01000001
0CED5 A2 E1                         .db #$A2, #%11100001
0CED7 B2 E1                         .db #$B2, #%11100001
0CED9 C2 1A                         .db #$C2, #%00011010
0CEDB D2 E1                         .db #$D2, #%11100001
0CEDD 63 1A                         .db #$63, #%00011010
0CEDF C3 C1                         .db #$C3, #%11000001
0CEE1 14 61                         .db #$14, #%01100001
0CEE3 54 61                         .db #$54, #%01100001
0CEE5 94 C1                         .db #$94, #%11000001
0CEE7 15 61                         .db #$15, #%01100001
0CEE9 55 41                         .db #$55, #%01000001
0CEEB 85 1A                         .db #$85, #%00011010
0CEED 16 41                         .db #$16, #%01000001
0CEEF 46 1A                         .db #$46, #%00011010
0CEF1 56 61                         .db #$56, #%01100001
0CEF3 A6 61                         .db #$A6, #%01100001
0CEF5 17 67                         .db #$17, #%01100111
0CEF7 57 67                         .db #$57, #%01100111
0CEF9 97 67                         .db #$97, #%01100111
0CEFB D7 07                         .db #$D7, #%00000111
0CEFD 28 41                         .db #$28, #%01000001
0CEFF 58 61                         .db #$58, #%01100001
0CF01 A8 41                         .db #$A8, #%01000001
0CF03 18 11                         .db #$18, #%00010001
0CF05 38 11                         .db #$38, #%00010001
0CF07 98 11                         .db #$98, #%00010001
0CF09 B8 11                         .db #$B8, #%00010001
0CF0B D8 11                         .db #$D8, #%00010001
0CF0D 59 09                         .db #$59, #%00001001
0CF0F FF                            .db #LEVEL_END
0CF10                           
0CF10                           lvl_layout_17:
0CF10 10 EA                         .db #$10, #%11101010
0CF12 20 E2                         .db #$20, #%11100010
0CF14 30 62                         .db #$30, #%01100010
0CF16 70 02                         .db #$70, #%00000010
0CF18 80 6A                         .db #$80, #%01101010
0CF1A 90 22                         .db #$90, #%00100010
0CF1C 01 AA                         .db #$01, #%10101010
0CF1E 31 6A                         .db #$31, #%01101010
0CF20 81 2A                         .db #$81, #%00101010
0CF22 A1 02                         .db #$A1, #%00000010
0CF24 C1 02                         .db #$C1, #%00000010
0CF26 D1 0A                         .db #$D1, #%00001010
0CF28 32 EA                         .db #$32, #%11101010
0CF2A 42 6A                         .db #$42, #%01101010
0CF2C 62 02                         .db #$62, #%00000010
0CF2E 92 6A                         .db #$92, #%01101010
0CF30 D2 E2                         .db #$D2, #%11100010
0CF32 43 1A                         .db #$43, #%00011010
0CF34 53 CA                         .db #$53, #%11001010
0CF36 73 02                         .db #$73, #%00000010
0CF38 83 4A                         .db #$83, #%01001010
0CF3A B3 CA                         .db #$B3, #%11001010
0CF3C C3 EA                         .db #$C3, #%11101010
0CF3E 04 0A                         .db #$04, #%00001010
0CF40 14 A2                         .db #$14, #%10100010
0CF42 24 AA                         .db #$24, #%10101010
0CF44 44 AA                         .db #$44, #%10101010
0CF46 64 6A                         .db #$64, #%01101010
0CF48 65 6A                         .db #$65, #%01101010
0CF4A A5 AA                         .db #$A5, #%10101010
0CF4C 06 EA                         .db #$06, #%11101010
0CF4E 16 62                         .db #$16, #%01100010
0CF50 66 22                         .db #$66, #%00100010
0CF52 86 2A                         .db #$86, #%00101010
0CF54 17 42                         .db #$17, #%01000010
0CF56 47 12                         .db #$47, #%00010010
0CF58 57 6A                         .db #$57, #%01101010
0CF5A 97 4A                         .db #$97, #%01001010
0CF5C A7 02                         .db #$A7, #%00000010
0CF5E 18 02                         .db #$18, #%00000010
0CF60 28 0A                         .db #$28, #%00001010
0CF62 38 22                         .db #$38, #%00100010
0CF64 68 2A                         .db #$68, #%00101010
0CF66 88 62                         .db #$88, #%01100010
0CF68 C8 0A                         .db #$C8, #%00001010
0CF6A D8 02                         .db #$D8, #%00000010
0CF6C 19 2A                         .db #$19, #%00101010
0CF6E 39 2A                         .db #$39, #%00101010
0CF70 69 42                         .db #$69, #%01000010
0CF72 99 2A                         .db #$99, #%00101010
0CF74 B9 42                         .db #$B9, #%01000010
0CF76 FF                            .db #LEVEL_END
0CF77                           
0CF77                           lvl_layout_18:
0CF77 00 12                         .db #$00, #%00010010
0CF79 40 1A                         .db #$40, #%00011010
0CF7B 50 11                         .db #$50, #%00010001
0CF7D 70 1A                         .db #$70, #%00011010
0CF7F 80 10                         .db #$80, #%00010000
0CF81 D0 13                         .db #$D0, #%00010011
0CF83 01 1A                         .db #$01, #%00011010
0CF85 22 15                         .db #$22, #%00010101
0CF87 A2 1A                         .db #$A2, #%00011010
0CF89 B2 14                         .db #$B2, #%00010100
0CF8B 03 67                         .db #$03, #%01100111
0CF8D 43 67                         .db #$43, #%01100111
0CF8F 83 67                         .db #$83, #%01100111
0CF91 24 09                         .db #$24, #%00001001
0CF93 74 0D                         .db #$74, #%00001101
0CF95 C4 0A                         .db #$C4, #%00001010
0CF97 05 A7                         .db #$05, #%10100111
0CF99 45 27                         .db #$45, #%00100111
0CF9B 95 27                         .db #$95, #%00100111
0CF9D 16 C7                         .db #$16, #%11000111
0CF9F 36 67                         .db #$36, #%01100111
0CFA1 86 67                         .db #$86, #%01100111
0CFA3 D6 07                         .db #$D6, #%00000111
0CFA5 07 A3                         .db #$07, #%10100011
0CFA7 27 23                         .db #$27, #%00100011
0CFA9 47 C7                         .db #$47, #%11000111
0CFAB 57 A0                         .db #$57, #%10100000
0CFAD 67 A7                         .db #$67, #%10100111
0CFAF 77 20                         .db #$77, #%00100000
0CFB1 97 C7                         .db #$97, #%11000111
0CFB3 A7 A4                         .db #$A7, #%10100100
0CFB5 B7 A7                         .db #$B7, #%10100111
0CFB7 C7 24                         .db #$C7, #%00100100
0CFB9 28 0B                         .db #$28, #%00001011
0CFBB 38 A3                         .db #$38, #%10100011
0CFBD 78 08                         .db #$78, #%00001000
0CFBF 88 A3                         .db #$88, #%10100011
0CFC1 C8 0C                         .db #$C8, #%00001100
0CFC3 D8 A4                         .db #$D8, #%10100100
0CFC5 09 43                         .db #$09, #%01000011
0CFC7 59 40                         .db #$59, #%01000000
0CFC9 A9 44                         .db #$A9, #%01000100
0CFCB FF                            .db #LEVEL_END
0CFCC                           
0CFCC                           lvl_layout_19:
0CFCC 11 A8                         .db #$11, #%10101000
0CFCE 21 68                         .db #$21, #%01101000
0CFD0 81 28                         .db #$81, #%00101000
0CFD2 B1 48                         .db #$B1, #%01001000
0CFD4 22 48                         .db #$22, #%01001000
0CFD6 62 68                         .db #$62, #%01101000
0CFD8 B2 28                         .db #$B2, #%00101000
0CFDA 23 28                         .db #$23, #%00101000
0CFDC 83 28                         .db #$83, #%00101000
0CFDE B3 28                         .db #$B3, #%00101000
0CFE0 04 E8                         .db #$04, #%11101000
0CFE2 24 08                         .db #$24, #%00001000
0CFE4 44 08                         .db #$44, #%00001000
0CFE6 64 E8                         .db #$64, #%11101000
0CFE8 84 E8                         .db #$84, #%11101000
0CFEA C4 A8                         .db #$C4, #%10101000
0CFEC D4 E8                         .db #$D4, #%11101000
0CFEE 15 48                         .db #$15, #%01001000
0CFF0 55 C8                         .db #$55, #%11001000
0CFF2 75 C8                         .db #$75, #%11001000
0CFF4 A5 08                         .db #$A5, #%00001000
0CFF6 36 08                         .db #$36, #%00001000
0CFF8 B6 08                         .db #$B6, #%00001000
0CFFA 27 48                         .db #$27, #%01001000
0CFFC 97 28                         .db #$97, #%00101000
0CFFE C7 08                         .db #$C7, #%00001000
0D000 09 61                         .db #$09, #%01100001
0D002 19 11                         .db #$19, #%00010001
0D004 49 61                         .db #$49, #%01100001
0D006 89 31                         .db #$89, #%00110001
0D008 A9 61                         .db #$A9, #%01100001
0D00A FF                            .db #LEVEL_END
0D00B                           
0D00B                           lvl_layout_20:
0D00B 00 60                         .db #$00, #%01100000
0D00D 10 1A                         .db #$10, #%00011010
0D00F 40 A7                         .db #$40, #%10100111
0D011 50 20                         .db #$50, #%00100000
0D013 70 1A                         .db #$70, #%00011010
0D015 80 40                         .db #$80, #%01000000
0D017 B0 1A                         .db #$B0, #%00011010
0D019 C0 20                         .db #$C0, #%00100000
0D01B 01 40                         .db #$01, #%01000000
0D01D 31 1A                         .db #$31, #%00011010
0D01F A1 40                         .db #$A1, #%01000000
0D021 D1 1A                         .db #$D1, #%00011010
0D023 43 67                         .db #$43, #%01100111
0D025 83 47                         .db #$83, #%01000111
0D027 44 A7                         .db #$44, #%10100111
0D029 54 25                         .db #$54, #%00100101
0D02B 94 08                         .db #$94, #%00001000
0D02D A4 A7                         .db #$A4, #%10100111
0D02F 55 05                         .db #$55, #%00000101
0D031 65 08                         .db #$65, #%00001000
0D033 06 27                         .db #$06, #%00100111
0D035 36 67                         .db #$36, #%01100111
0D037 76 28                         .db #$76, #%00101000
0D039 A6 27                         .db #$A6, #%00100111
0D03B D6 07                         .db #$D6, #%00000111
0D03D A7 A7                         .db #$A7, #%10100111
0D03F 08 60                         .db #$08, #%01100000
0D041 09 60                         .db #$09, #%01100000
0D043 18 A7                         .db #$18, #%10100111
0D045 48 A7                         .db #$48, #%10100111
0D047 58 47                         .db #$58, #%01000111
0D049 88 27                         .db #$88, #%00100111
0D04B B8 20                         .db #$B8, #%00100000
0D04D D8 1A                         .db #$D8, #%00011010
0D04F 59 15                         .db #$59, #%00010101
0D051 69 60                         .db #$69, #%01100000
0D053 A9 60                         .db #$A9, #%01100000
0D055 FF                            .db #LEVEL_END
0D056                           
0D056                           lvl_layout_21:
0D056 00 13                         .db #$00, #%00010011
0D058 10 11                         .db #$10, #%00010001
0D05A 20 67                         .db #$20, #%01100111
0D05C 60 67                         .db #$60, #%01100111
0D05E A0 47                         .db #$A0, #%01000111
0D060 D0 15                         .db #$D0, #%00010101
0D062 32 63                         .db #$32, #%01100011
0D064 72 05                         .db #$72, #%00000101
0D066 82 43                         .db #$82, #%01000011
0D068 B2 43                         .db #$B2, #%01000011
0D06A 33 03                         .db #$33, #%00000011
0D06C 43 2A                         .db #$43, #%00101010
0D06E 63 7A                         .db #$63, #%01111010
0D070 73 2A                         .db #$73, #%00101010
0D072 A3 7A                         .db #$A3, #%01111010
0D074 34 63                         .db #$34, #%01100011
0D076 74 63                         .db #$74, #%01100011
0D078 B4 43                         .db #$B4, #%01000011
0D07A 06 63                         .db #$06, #%01100011
0D07C 46 63                         .db #$46, #%01100011
0D07E 86 63                         .db #$86, #%01100011
0D080 C6 C3                         .db #$C6, #%11000011
0D082 07 7A                         .db #$07, #%01111010
0D084 47 7A                         .db #$47, #%01111010
0D086 67 0A                         .db #$67, #%00001010
0D088 87 7A                         .db #$87, #%01111010
0D08A 08 13                         .db #$08, #%00010011
0D08C 18 43                         .db #$18, #%01000011
0D08E 48 63                         .db #$48, #%01100011
0D090 88 63                         .db #$88, #%01100011
0D092 FF                            .db #LEVEL_END
0D093                           
0D093                           lvl_layout_22:
0D093 00 7A                         .db #$00, #%01111010
0D095 40 7A                         .db #$40, #%01111010
0D097 80 7A                         .db #$80, #%01111010
0D099 C0 3A                         .db #$C0, #%00111010
0D09B 13 67                         .db #$13, #%01100111
0D09D 83 A7                         .db #$83, #%10100111
0D09F B3 07                         .db #$B3, #%00000111
0D0A1 14 07                         .db #$14, #%00000111
0D0A3 44 07                         .db #$44, #%00000111
0D0A5 A4 07                         .db #$A4, #%00000111
0D0A7 15 A5                         .db #$15, #%10100101
0D0A9 45 A5                         .db #$45, #%10100101
0D0AB 85 25                         .db #$85, #%00100101
0D0AD 86 05                         .db #$86, #%00000101
0D0AF A6 05                         .db #$A6, #%00000101
0D0B1 17 11                         .db #$17, #%00010001
0D0B3 47 A1                         .db #$47, #%10100001
0D0B5 87 A1                         .db #$87, #%10100001
0D0B7 B7 A1                         .db #$B7, #%10100001
0D0B9 18 41                         .db #$18, #%01000001
0D0BB 68 01                         .db #$68, #%00000001
0D0BD D8 01                         .db #$D8, #%00000001
0D0BF FF                            .db #LEVEL_END
0D0C0                           
0D0C0                           lvl_layout_23:
0D0C0 00 71                         .db #$00, #%01110001
0D0C2 40 11                         .db #$40, #%00010001
0D0C4 50 43                         .db #$50, #%01000011
0D0C6 80 D1                         .db #$80, #%11010001
0D0C8 90 E3                         .db #$90, #%11100011
0D0CA A0 63                         .db #$A0, #%01100011
0D0CC 01 63                         .db #$01, #%01100011
0D0CE 41 63                         .db #$41, #%01100011
0D0D0 A1 63                         .db #$A1, #%01100011
0D0D2 02 63                         .db #$02, #%01100011
0D0D4 42 63                         .db #$42, #%01100011
0D0D6 62 11                         .db #$62, #%00010001
0D0D8 A2 67                         .db #$A2, #%01100111
0D0DA 04 63                         .db #$04, #%01100011
0D0DC 44 23                         .db #$44, #%00100011
0D0DE 64 D1                         .db #$64, #%11010001
0D0E0 74 E3                         .db #$74, #%11100011
0D0E2 84 F1                         .db #$84, #%11110001
0D0E4 94 E3                         .db #$94, #%11100011
0D0E6 A4 C7                         .db #$A4, #%11000111
0D0E8 B4 23                         .db #$B4, #%00100011
0D0EA 05 63                         .db #$05, #%01100011
0D0EC 45 23                         .db #$45, #%00100011
0D0EE 06 71                         .db #$06, #%01110001
0D0F0 46 11                         .db #$46, #%00010001
0D0F2 56 E3                         .db #$56, #%11100011
0D0F4 D6 07                         .db #$D6, #%00000111
0D0F6 17 D1                         .db #$17, #%11010001
0D0F8 27 43                         .db #$27, #%01000011
0D0FA 67 D1                         .db #$67, #%11010001
0D0FC A7 C7                         .db #$A7, #%11000111
0D0FE C7 A7                         .db #$C7, #%10100111
0D100 D7 B3                         .db #$D7, #%10110011
0D102 28 43                         .db #$28, #%01000011
0D104 78 43                         .db #$78, #%01000011
0D106 29 43                         .db #$29, #%01000011
0D108 79 43                         .db #$79, #%01000011
0D10A FF                           .db #LEVEL_END
0D10B                           
0D10B                           lvl_layout_24:
0D10B 02 67                         .db #$02, #%01100111
0D10D 42 67                         .db #$42, #%01100111
0D10F 82 67                         .db #$82, #%01100111
0D111 05 67                         .db #$05, #%01100111
0D113 45 67                         .db #$45, #%01100111
0D115 85 67                         .db #$85, #%01100111
0D117 08 67                         .db #$08, #%01100111
0D119 48 67                         .db #$48, #%01100111
0D11B 88 67                         .db #$88, #%01100111
0D11D 30 E7                         .db #$30, #%11100111
0D11F 70 E7                         .db #$70, #%11100111
0D121 B0 E7                         .db #$B0, #%11100111
0D123 34 E7                         .db #$34, #%11100111
0D125 74 E7                         .db #$74, #%11100111
0D127 B4 E7                         .db #$B4, #%11100111
0D129 20 13                         .db #$20, #%00010011
0D12B 40 10                         .db #$40, #%00010000
0D12D 80 02                         .db #$80, #%00000010
0D12F 41 05                         .db #$41, #%00000101
0D131 B1 09                         .db #$B1, #%00001001
0D133 02 09                         .db #$02, #%00001001
0D135 52 0C                         .db #$52, #%00001100
0D137 13 11                         .db #$13, #%00010001
0D139 33 04                         .db #$33, #%00000100
0D13B 74 0C                         .db #$74, #%00001100
0D13D B4 08                         .db #$B4, #%00001000
0D13F 15 09                         .db #$15, #%00001001
0D141 55 0C                         .db #$55, #%00001100
0D143 95 0C                         .db #$95, #%00001100
0D145 47 03                         .db #$47, #%00000011
0D147 A7 12                         .db #$A7, #%00010010
0D149 18 15                         .db #$18, #%00010101
0D14B 09 05                         .db #$09, #%00000101
0D14D 19 03                         .db #$19, #%00000011
0D14F FF                            .db #LEVEL_END
0D150                           
0D150                           lvl_layout_25:
0D150 00 12                         .db #$00, #%00010010
0D152 10 63                         .db #$10, #%01100011
0D154 60 63                         .db #$60, #%01100011
0D156 A0 07                         .db #$A0, #%00000111
0D158 01 11                         .db #$01, #%00010001
0D15A A1 02                         .db #$A1, #%00000010
0D15C 02 67                         .db #$02, #%01100111
0D15E 42 07                         .db #$42, #%00000111
0D160 62 67                         .db #$62, #%01100111
0D162 A2 C7                         .db #$A2, #%11000111
0D164 03 61                         .db #$03, #%01100001
0D166 43 01                         .db #$43, #%00000001
0D168 63 61                         .db #$63, #%01100001
0D16A A6 E7                         .db #$A6, #%11100111
0D16C B6 47                         .db #$B6, #%01000111
0D16E C6 01                         .db #$C6, #%00000001
0D170 B7 42                         .db #$B7, #%01000010
0D172 B8 42                         .db #$B8, #%01000010
0D174 C8 0A                         .db #$C8, #%00001010
0D176 09 7A                         .db #$09, #%01111010
0D178 49 7A                         .db #$49, #%01111010
0D17A 89 3A                         .db #$89, #%00111010
0D17C B9 42                         .db #$B9, #%01000010
0D17E FF                            .db #LEVEL_END
0D17F                           
0D17F                           ;; Level layout address pointers
0D17F                           tbl_lvl_layout_hi:
0D17F CA CA CA CB CB                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D184 CB CC CC CC CD                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D189 CD CD CD CE CE                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D18E CE CF CF CF D0                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D193 D0 D0 D0 D1 D1                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D198                           
0D198                           tbl_lvl_layout_lo:
0D198 A0 BB F0 23 94                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D19D CF 58 99 D0 13                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D1A2 42 95 C0 13 8A                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D1A7 BB 10 77 CC 0B                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D1AC 56 93 C0 0B 50                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D1B1                           
0D1B1                           ;; Ball start position (#$YX)
0D1B1                           tbl_lvl_ball_startpos:
0D1B1 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D1B6 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D1BB 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D1C0 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D1C5 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D1CA                               
0D1CA                           ;; Ball start direction, color and tile score
0D1CA                           ;; #% ccc v tttt
0D1CA                           ;;    ||| | ++++-- tile score
0D1CA                           ;;    ||| +------- vertical direction, up (0) or down
0D1CA                           ;;    +++--------- color (CBRYGM)
0D1CA                           tbl_lvl_ball_init:
0D1CA 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D1CF 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D1D4 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D1D9 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D1DE 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D1E3                           
0D1E3                           
0D1E3                           
0D1E3                           ;; Helper table to multiply values by 64
0D1E3                           tbl_Times64:
0D1E3 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D1E7                           
0D1E7                           
0D1E7                           ;; Metatile ID to CHR data mapper
0D1E7                           tbl_GametileTopLeft:
0D1E7 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D1F1                           
0D1F1                           tbl_GametileTopRight:
0D1F1 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D1FB                           
0D1FB                           tbl_GametileBottomLeft:
0D1FB 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D205                           
0D205                           tbl_GametileBottomRight:
0D205 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D20F                           
0D20F                           ;; Metatile ID to RAM byte data mapper
0D20F                           tbl_GameTileRamByte:
0D20F 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D214                           
0D214                           ;; HUD text data
0D214                           tbl_HudText:
0D214 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D21C 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D223 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D22B 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D230                           
0D230                           ;; NMI handler
0D230                           NMI:
0D230                               .include "interrupt/nmi.asm"
0D230                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D230                           ;;
0D230                           ;; include/nmi.asm
0D230                           ;;
0D230                           ;; Non-maskable interrupt script. This script is being executed
0D230                           ;; when vBlank hits.
0D230                           ;;
0D230                           ;;
0D230                           
0D230                               ;; Preserve accumulator through stack
0D230 48                            PHA
0D231                           
0D231                               ;; Should NMI be skipped?
0D231 A5 13                         LDA skip_nmi
0D233 F0 03                         BEQ +
0D235 4C C3 D2                          JMP +skip_nmi
0D238                               +
0D238                           
0D238                               ;; When in NMI, skip additional NMI requests
0D238 A9 01                         LDA #$01
0D23A 85 13                         STA skip_nmi
0D23C                           
0D23C                               ;; Preserve X, Y, and PC through stack
0D23C 8A                            TXA
0D23D 48                            PHA
0D23E 98                            TYA
0D23F 48                            PHA
0D240 08                            PHP
0D241                               
0D241                               ;; Check forced NMI skip
0D241 A5 14                         LDA force_skip_nmi
0D243 F0 03                         BEQ +
0D245 4C B4 D2                          JMP +force_skip_nmi
0D248                               +
0D248                           
0D248                               ;; Update PPU mask
0D248                               ;LDA #$00
0D248                               ;STA PPU_CTRL
0D248 A5 12                         LDA soft_ppu_mask
0D24A 8D 01 20                      STA PPU_MASK
0D24D                               
0D24D                               
0D24D                               ;; Additional PPU updates go here
0D24D                               .include "game/interrupt/nmi.asm"
0D24D                           
0D24D                               ;; Check if ppu_buffer needs updating
0D24D A5 2F                         LDA ppu_buffer_update
0D24F D0 03                         BNE +
0D251 4C 93 D2                          JMP +no_ppu_buffer_update
0D254                               +
0D254                           
0D254                               ;; Reset ppu control register and mask
0D254 A2 00                         LDX #$00
0D256 8E 00 20                      STX PPU_CTRL
0D259 8E 01 20                      STX PPU_MASK
0D25C                           
0D25C                               ;; Set up loop
0D25C                               -
0D25C                                   ;; Reset hi/lo latch
0D25C 2C 02 20                          BIT PPU_STATUS
0D25F                           
0D25F                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D25F BD 00 03                          LDA ppu_buffer,x
0D262 8D 06 20                          STA PPU_ADDR
0D265 E8                                INX
0D266 BD 00 03                          LDA ppu_buffer,x
0D269 8D 06 20                          STA PPU_ADDR
0D26C                           
0D26C                                   ;; Write ppu_buffer data to PPU_ADDR
0D26C E8                                INX
0D26D BD 00 03                          LDA ppu_buffer,x
0D270 8D 07 20                          STA PPU_DATA
0D273                           
0D273                                   ;; Check if updating is done (eg. X is at pointer)
0D273 E8                                INX
0D274 E4 30                             CPX ppu_buffer_pointer
0D276 F0 03                             BEQ +
0D278 4C 5C D2                      JMP -
0D27B                           +
0D27B                           
0D27B                               ;; Reset ppu buffer update and pointer
0D27B A9 00                         LDA #$00
0D27D 85 2F                         STA ppu_buffer_update
0D27F 85 30                         STA ppu_buffer_pointer
0D281                               
0D281                               ;; Reset scrolling position
0D281 8D 05 20                      STA PPU_SCROLL
0D284 8D 05 20                      STA PPU_SCROLL
0D287                           
0D287                               ;; Restore ppu control register and mask
0D287 A9 90                         LDA #%10010000
0D289 8D 00 20                      STA PPU_CTRL
0D28C A5 12                         LDA soft_ppu_mask
0D28E 8D 01 20                      STA PPU_MASK
0D291 A9 00                         LDA #$00
0D293                           
0D293                           ;; Continue other NMI stuff
0D293                           +no_ppu_buffer_update:
0D293                           
0D293                               ;; Reset sprite RAM, draw sprites
0D293 8D 03 20                      STA OAM_ADDR
0D296 A9 02                         LDA #$02
0D298 8D 14 40                      STA OAM_DMA
0D29B                           
0D29B                               ;; Decrease explosion frame counters
0D29B A0 04                         LDY #MAX_ANIMATIONS
0D29D A2 00                         LDX #$00
0D29F                               -
0D29F BD 30 03                          LDA explosion_framecounter,x
0D2A2 F0 03                             BEQ +
0D2A4 DE 30 03                              DEC explosion_framecounter,x
0D2A7                                   +
0D2A7 E8                                INX
0D2A8 88                                DEY
0D2A9 F0 03                             BEQ +done        
0D2AB 4C 9F D2                      JMP -
0D2AE                           +done:
0D2AE                               
0D2AE                               ;; Decrease nudge counter
0D2AE A5 33                         LDA nudge_counter
0D2B0 F0 02                         BEQ +
0D2B2 C6 33                             DEC nudge_counter
0D2B4                               +
0D2B4                           
0D2B4                           ;; This is what happens when we forced nmi skip
0D2B4                           +force_skip_nmi:
0D2B4                           
0D2B4                               ;; Increase frame counters
0D2B4 E6 15                         INC frame_counter
0D2B6                           
0D2B6                               ;; reset ball_update_position
0D2B6 A9 00                         LDA #$00
0D2B8 85 2B                         STA ball_update_position
0D2BA                           
0D2BA                               ;; Don't skip next NMI request
0D2BA A9 00                         LDA #$00
0D2BC 85 13                         STA skip_nmi
0D2BE                           
0D2BE                               ;; Restore X, Y and PC from stack
0D2BE 28                            PLP
0D2BF 68                            PLA
0D2C0 A8                            TAY
0D2C1 68                            PLA
0D2C2 AA                            TAX
0D2C3                           
0D2C3                           +skip_nmi:
0D2C3                               ;; Restore accumulator from stack
0D2C3 68                            PLA
0D2C4                           
0D2C4                               ;; Return
0D2C4 40                            RTI
0D2C5                           
0D2C5                           ;; IRQ handler (empty)
0D2C5                           IRQ:
0D2C5                               .include "interrupt/irq.asm"
0D2C5 40                            RTI0D2C6                           
0D2C6                           ;; Interrupt vectors
0D2C6 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 30 D2                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE C5 D2                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
