	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; Enable test mode
	                            ;; - Test mode adds a test level and allows the developer to start
	                            ;;   at any given level with any number of lives. Remove the line
	                            ;;   that starts with TESTING (or add a semicolon in front) to
	                            ;;   disable test mode.
	                            ;TESTING    =   1
	                            START_LEVEL =   0
	                            LAST_LEVEL  =   1
	                            START_LIVES = 255
	                            
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            PULSE2_VOLUME   = $4004
	                            PULSE2_SWEEP    = $4005
	                            PULSE2_TIMER_LO = $4006
	                            PULSE2_TIMER_HI = $4007
	                            PULSE2_LENGTH   = $4007
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Sentience (warm boot) check string
00000                               sentience       .dsb 5
00005                               
00005                               ;; High score variables (declared up high, so basic reset
00005                               ;; can skip over those)
00005                               hi_score        .dsb 6
0000B                               
0000B                               ;; Reserve ten temporary variables for use in subroutines.
0000B                               temp              .dsb 10
00015                           
00015                               ;; Reserve a two-byte temporary variable for use with
00015                               ;; 16-bit operations (like addresses)
00015                               temp16            .dsb 2
00017                           
00017                               ;; Two-byte variable to store a pointer address
00017                               pointer           .dsb 2
00019                           
00019                               ;; Variable to store button presses
00019                               buttons_prev      .dsb 1
0001A                               buttons_held      .dsb 1
0001B                               buttons_pressed   .dsb 1
0001C                               buttons_released  .dsb 1
0001D                           
0001D                               ;; PPU mask buffer variable, used to store the new value of
0001D                               ;; the PPU mask outside NMI
0001D                               soft_ppu_mask     .dsb 1
0001E                           
0001E                               ;; Variables to skip NMI handling
0001E                               skip_nmi          .dsb 1
0001F                               force_skip_nmi    .dsb 1
00020                           
00020                               ;; Counters and seeds
00020                               frame_counter     .dsb 1
00021                               random_seed       .dsb 1
00022                           
00022                               ;; Game specific variables
00022                               .include "game/ram/zp.asm"
00022                           
00022                           ;; Ball variables
00022                           ball_xpos_hi           .dsb 1
00023                           ball_xpos_lo           .dsb 1
00024                           ball_ypos_hi           .dsb 1
00025                           ball_ypos_lo           .dsb 1
00026                           ball_ypos_hi_prev      .dsb 1
00027                           ball_ypos_lo_prev      .dsb 1
00028                           ball_xpos_hi_prev      .dsb 1
00029                           ball_xpos_lo_prev      .dsb 1
0002A                           ball_lives             .dsb 1   ; number of lives left
0002B                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00031                           add_to_score           .dsb 6
00037                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0003A                           
0003A                           ;; Ball bounding box, relative to the screen
0003A                           ball_left              .dsb 1
0003B                           ball_center            .dsb 1
0003C                           ball_right             .dsb 1
0003D                           ball_top               .dsb 1
0003E                           ball_middle            .dsb 1
0003F                           ball_bottom            .dsb 1
00040                           
00040                           ;; Update-position check
00040                           sprites_update_position  .dsb 1
00041                           
00041                           ;; Lock block space helper variable
00041                           ;; When the ball hits a lock block, it should only move if the space
00041                           ;; where it moves to, is not solid. This variable holds the metatile
00041                           ;; offset of the position where the lock block should move to, so
00041                           ;; we can check if it is solid or not.
00041                           ;;
00041                           ;; UP:    #%11110000 #$F0
00041                           ;; DOWN:  #%00010000 #$10
00041                           ;; LEFT:  #%11111111 #$FF
00041                           ;; RIGHT: #%00000001 #$01
00041                           ;;        #%d......h
00041                           move_block_space_to_check  .dsb 1
00042                           
00042                           
00042                           ;; Ball flags
00042                           ;; #% c c c v . f n a
00042                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00042                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00042                           ;;    | | | | | +------ ball is frozen (not moving)
00042                           ;;    | | | | +-------- (unused for now)
00042                           ;;    | | | +---------- ball moves up (0) or down (1)
00042                           ;;    +-+-+------------ ball color (1-6)
00042                           ball_flags             .dsb 1
00043                           
00043                           
00043                           ;; Screen mode
00043                           ;; #% u . . . . . t t
00043                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00043                           ;;    | +-+-+-+-+------------- unused
00043                           ;;    +----------------------- should the screen update
00043                           screen_mode            .dsb 1
00044                           
00044                           
00044                           
00044                           ;; PPU buffer variables
00044                           ppu_buffer_update      .dsb 1
00045                           ppu_buffer_pointer     .dsb 1
00046                           
00046                           ;; Pointer to keep track of the number of explosions
00046                           explosion_pointer      .dsb 1
00047                           
00047                           ;; Pointer to keep track of the number of move blocks
00047                           move_block_pointer     .dsb 1
00048                           
00048                           ;; Sprite RAM pointer to keep track of sprites to update
00048                           sprite_ram_pointer     .dsb 1
00049                           
00049                           ;; Timers 
00049                           nudge_timer            .dsb 1
0004A                           bonus_timer            .dsb 1
0004B                           kill_timer             .dsb 1
0004C                           unfreeze_timer         .dsb 1
0004D                           endgame_palette_timer  .dsb 1
0004E                           
0004E                           ;; Current level (doubles as level select variable)
0004E                           current_level          .dsb 1
0004F                           
0004F                           ;; Tile type the ball is currently colliding with
0004F                           colliding_tile         .dsb 1
00050                           
00050                           ;; Number of blocks left on screen
00050                           blocks_left            .dsb 1
00051                           
00051                           ;; Sound control variables
00051                           max_noise              .dsb 1
00052                           sweep_noise            .dsb 1
00053                           current_noise          .dsb 1
00054                           noise_timer            .dsb 1
00055                           do_beeps               .dsb 1
00056                           soft_pulse1            .dsb 1
00057                           noise_muted            .dsb 1
00058                           
00058                           ;; Sound effect variables
00058                           sfx_address            .dsb 2
0005A                           sfx_timer              .dsb 3
0005D                           sfx_frequency          .dsb 2
0005F                           sfx_sweep_count        .dsb 1
00060                           sfx_sweep_volume       .dsb 1
00061                           sfx_sweep_next_volume  .dsb 1
00062                           sfx_sweep_frequency    .dsb 1
00063                           
00063                           sfx_endgame_enabled    .dsb 1
00064                           sfx_endgame_p1_rest    .dsb 1
00065                           sfx_endgame_p1_freq_hi .dsb 1
00066                           sfx_endgame_p1_freq_lo .dsb 1
00067                           sfx_endgame_p2_rest    .dsb 1
00068                           sfx_endgame_p2_freq_hi .dsb 1
00069                           sfx_endgame_p2_freq_lo .dsb 1
0006A                           
0006A                           
0006A                           ;; Additional NMI check for timed PPU fade
0006A                           check_nmi              .dsb 1
0006B                           
0006B                           ;; The TV system this game is running on (0=ntsc, 1=pal, 2=dendy, 3=unknown)
0006B                           tv_system              .dsb 1
0006C                           
0006C                           ;; This variable should be used for absolutely nothing
0006C                           void                   .dsb 1
0006D                           
0006D                           ;; Hacky solution to prevent double blinds
0006D                           game_won               .dsb 10006E                           
0006E                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 D8 C6                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022                                   ;; Skip first eleven bytes
0C022                                   ;; (cold boot check and high score)
0C022 A9 00                             LDA #$00
0C024 E0 0B                             CPX #$0B
0C026 90 02                             BCC +
0C028 95 00                                 STA ADDR_ZEROPAGE,x
0C02A                                   +
0C02A 9D 00 01                          STA $0100,x
0C02D 9D 00 03                          STA $0300,x
0C030 9D 00 04                          STA $0400,x
0C033 9D 00 05                          STA $0500,x
0C036 9D 00 06                          STA $0600,x
0C039 9D 00 07                          STA $0700,x
0C03C                           
0C03C                                   ;; Clear next in line
0C03C E8                                INX
0C03D D0 DE                         BNE -clrMem
0C03F                           
0C03F                               ;; Wait for vBlank
0C03F 20 D8 C6                      JSR sub_WaitForVBlank
0C042                           
0C042                           	;; Turn on NMI, set foreground $0000, background $1000
0C042 A9 90                         LDA #%10010000
0C044 8D 00 20                      STA PPU_CTRL
0C047                               
0C047                               ;; Reset PPU scroll pointer
0C047 A0 00                         LDY #0
0C049 8C 05 20                      STY $2005
0C04C 8C 05 20                      STY $2005
0C04F                               
0C04F                               ;; Initialize game
0C04F                               .include "game/interrupt/reset.asm"
0C04F                           
0C04F                           ;; Softer reset
0C04F                           ;; After game over, the game JMPs here to prevent
0C04F                           ;; resetting the high score
0C04F                           
0C04F                           lbl_SoftReset:
0C04F                           
0C04F                               ;; Check for cold or warm boot, by comparing
0C04F                               ;; the 6-byte RAM and ROM sentience string.
0C04F A2 00                         LDX #$00
0C051 A0 00                         LDY #$00
0C053                               -
0C053 BD 3C DD                          LDA tbl_Sentient,x
0C056 D5 00                             CMP sentience,x
0C058 F0 01                             BEQ +
0C05A C8                                    INY
0C05B                                   +
0C05B 95 00                             STA sentience,x
0C05D E8                                INX
0C05E E0 05                             CPX #$05
0C060 D0 F1                         BNE -
0C062                           
0C062                               ;; If system is sentient (warm boot), Y is zero now.
0C062 C0 00                         CPY #$00
0C064 F0 10                         BEQ +
0C066                           
0C066                                   ;; System not sentient (cold boot)
0C066                                   ;; Set default hi score to 100.000
0C066 A9 01                             LDA #$01
0C068 85 05                             STA hi_score
0C06A A9 00                             LDA #$00
0C06C 85 06                             STA hi_score+1
0C06E 85 07                             STA hi_score+2
0C070 85 08                             STA hi_score+3
0C072 85 09                             STA hi_score+4
0C074 85 0A                             STA hi_score+5
0C076                               +
0C076                           
0C076                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C076                           ;;
0C076                           ;;  NES TV system detection code
0C076                           ;;  Copyright 2011 Damian Yerrick
0C076                           ;;  https://www.nesdev.org/wiki/Detect_TV_system
0C076                           ;;
0C076 A2 00                         LDX #$00
0C078 A0 00                         LDY #$00
0C07A A9 01                         LDA #$01
0C07C 85 6A                         STA check_nmi
0C07E                               -
0C07E C5 6A                             CMP check_nmi
0C080 F0 FC                         BEQ -
0C082 A9 01                         LDA #$01
0C084 85 6A                         STA check_nmi
0C086                               -
0C086 E8                                INX
0C087 D0 01                             BNE +
0C089 C8                                    INY
0C08A C5 6A                             + CMP check_nmi
0C08C F0 F8                         BEQ -
0C08E 98                            TYA
0C08F 38                            SEC
0C090 E9 0A                         SBC #$0A
0C092 C9 03                         CMP #$03
0C094 90 02                         BCC +
0C096 A9 03                             LDA #$03
0C098 85 6B                         + STA tv_system ; 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C09A                           ;;
0C09A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C09A                           
0C09A                           
0C09A                               ;; Tell game to load the intro screen
0C09A A9 80                         LDA #LOAD_INTRO_SCREEN
0C09C 85 43                         STA screen_mode
0C09E                           
0C09E                               ;; Set number of lives (5)
0C09E A9 05                         LDA #$05
0C0A0 85 2A                         STA ball_lives
0C0A2                           
0C0A2                               ;; Start at level 1
0C0A2 A9 00                         LDA #$00
0C0A4 85 2B                         STA ball_score
0C0A6 85 2C                         STA ball_score+1
0C0A8 85 2D                         STA ball_score+2
0C0AA 85 2E                         STA ball_score+3
0C0AC 85 2F                         STA ball_score+4
0C0AE 85 30                         STA ball_score+5
0C0B0                           
0C0B0                           ifdef TESTING
0C0B0                               LDA #START_LIVES
0C0B0                               STA ball_lives
0C0B0                               LDA #START_LEVEL
0C0B0                           endif
0C0B0                           
0C0B0 85 4E                         STA current_level
0C0B2                           
0C0B2                           
0C0B2                           
0C0B2                           ;; Main game loop
0C0B2                           lbl_MainGameLoop:
0C0B2 20 CF C6                      JSR sub_WaitForNMI ; align main loop
0C0B5                               .include "game/main.asm"
0C0B5                           
0C0B5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C0B5                           ;;
0C0B5                           ;; game/main.asm
0C0B5                           ;;
0C0B5                           ;; The main game loop content.
0C0B5                           ;;
0C0B5                           ;;
0C0B5                           
0C0B5                               ;; Reset sprite pointer every game loop
0C0B5 A9 00                         LDA #$00
0C0B7 85 48                         STA sprite_ram_pointer
0C0B9                           
0C0B9                               ;; Store previous buttons
0C0B9 A5 1A                         LDA buttons_held
0C0BB 85 19                         STA buttons_prev
0C0BD                           
0C0BD                               ;; Read controller input
0C0BD 20 BB C6                      JSR sub_ReadController
0C0C0                           
0C0C0                               ;; Get buttons released
0C0C0 A5 1A                         LDA buttons_held
0C0C2 49 FF                         EOR #$FF
0C0C4 25 19                         AND buttons_prev
0C0C6 85 1C                         STA buttons_released
0C0C8                           
0C0C8                               ;; Set buttons pressed
0C0C8 A5 19                         LDA buttons_prev
0C0CA 49 FF                         EOR #$FF
0C0CC 25 1A                         AND buttons_held
0C0CE 85 1B                         STA buttons_pressed
0C0D0                           
0C0D0                               ;; Load screen?
0C0D0 A5 43                         LDA screen_mode
0C0D2 29 80                         AND #%10000000
0C0D4 F0 1E                         BEQ +screenLoaded
0C0D6                           
0C0D6                               ;; Get screen type to load
0C0D6 A5 43                         LDA screen_mode
0C0D8 29 03                         AND #%00000011
0C0DA A8                            TAY
0C0DB                               
0C0DB                               ;; Get address to load screen type from
0C0DB B9 9A D4                      LDA tbl_LoadScreenLo,y
0C0DE 85 17                         STA pointer
0C0E0 B9 97 D4                      LDA tbl_LoadScreenHi,y
0C0E3 85 18                         STA pointer+1
0C0E5                           
0C0E5                               ;; Load screen
0C0E5 20 9B C8                      JSR sub_DisableRendering
0C0E8 20 F0 CB                      JSR sub_JumpToPointer
0C0EB 20 AF C8                      JSR sub_EnableRendering
0C0EE                               
0C0EE                               ;; Don't load screen anymore next loop
0C0EE A5 43                         LDA screen_mode
0C0F0 29 7F                         AND #%01111111
0C0F2 85 43                         STA screen_mode
0C0F4                               
0C0F4                           
0C0F4                           +screenLoaded:
0C0F4                               ;; Check if we're on the game screen
0C0F4 A5 43                         LDA screen_mode
0C0F6 C9 01                         CMP #IS_GAME_SCREEN
0C0F8 F0 03                         BEQ +
0C0FA 4C 9D C3                          JMP +checkNextScreen
0C0FD                               +
0C0FD                           
0C0FD                               ;; Load sprite 0 in place
0C0FD A9 18                         LDA #$18
0C0FF 8D 00 02                      STA ADDR_SPRITERAM
0C102 A9 0F                         LDA #$0F
0C104 8D 01 02                      STA ADDR_SPRITERAM+1
0C107 A9 22                         LDA #$22
0C109 8D 02 02                      STA ADDR_SPRITERAM+2
0C10C A9 F8                         LDA #$F8
0C10E 8D 03 02                      STA ADDR_SPRITERAM+3
0C111 A9 04                         LDA #$04
0C113 85 48                         STA sprite_ram_pointer
0C115                           
0C115                               ;; We're on the game screen
0C115                               ;; Check if position should be updated (ie. has nmi happened yet)
0C115 A5 40                         LDA sprites_update_position
0C117 F0 03                         BEQ +
0C119 4C 03 C3                          JMP +skipSpriteMovement
0C11C                               +
0C11C                           
0C11C                               ;; Check if ball is frozen
0C11C A5 42                         LDA ball_flags
0C11E 29 04                         AND #BALL_IS_FROZEN
0C120 F0 03                         BEQ +
0C122 4C C2 C2                          JMP +skipBallMovement
0C125                               +
0C125                           
0C125                               ;; Move the ball
0C125                               .include "game/include/main/move_ball.asm"
0C125                           
0C125                               ;; Check if ball goes up or down
0C125 A5 42                         LDA ball_flags
0C127 29 10                         AND #BALL_MOVES_DOWN
0C129 F0 2B                         BEQ +moveBallUp
0C12B                           
0C12B                           
0C12B                           +moveBallDown:
0C12B                               ;; update the low byte
0C12B A5 25                         LDA ball_ypos_lo
0C12D 85 27                         STA ball_ypos_lo_prev
0C12F 18                            CLC
0C130 69 88                         ADC #BALL_SPEED_LO
0C132 85 25                         STA ball_ypos_lo
0C134                           
0C134                               ;; update the high byte with carry
0C134 A5 24                         LDA ball_ypos_hi
0C136 85 26                         STA ball_ypos_hi_prev
0C138 69 01                         ADC #BALL_SPEED_HI
0C13A 85 24                         STA ball_ypos_hi
0C13C                               
0C13C                               ;; Check bottom bound
0C13C C9 C8                         CMP #BOUND_BOTTOM
0C13E 90 3C                         BCC +checkHorizontalMovement
0C140 F0 3A                         BEQ +checkHorizontalMovement
0C142                           
0C142                           
0C142                               ;; Change ball direction to "up"
0C142 A9 C8                         LDA #BOUND_BOTTOM
0C144 38                            SEC
0C145 E9 01                         SBC #$01
0C147 85 24                         STA ball_ypos_hi
0C149 A9 00                         LDA #$00
0C14B 85 25                         STA ball_ypos_lo
0C14D A5 42                         LDA ball_flags
0C14F 29 EF                         AND #MOVE_BALL_UP
0C151 85 42                         STA ball_flags
0C153 4C 7C C1                      JMP +checkHorizontalMovement
0C156                           
0C156                           
0C156                           +moveBallUp:
0C156                               ;; update the low byte
0C156 A5 25                         LDA ball_ypos_lo
0C158 85 27                         STA ball_ypos_lo_prev
0C15A 38                            SEC
0C15B E9 88                         SBC #BALL_SPEED_LO
0C15D 85 25                         STA ball_ypos_lo
0C15F                           
0C15F                               ;; update the high byte with carry
0C15F A5 24                         LDA ball_ypos_hi
0C161 85 26                         STA ball_ypos_hi_prev
0C163 E9 01                         SBC #BALL_SPEED_HI
0C165 85 24                         STA ball_ypos_hi
0C167                               
0C167                               ;; Check top bound
0C167 C9 30                         CMP #BOUND_TOP
0C169 B0 11                         BCS +checkHorizontalMovement
0C16B                           
0C16B                               ;; Change ball direction to "down"
0C16B A9 30                         LDA #BOUND_TOP
0C16D 18                            CLC
0C16E 69 01                         ADC #$01
0C170 85 24                         STA ball_ypos_hi
0C172 A9 00                         LDA #$00
0C174 85 25                         STA ball_ypos_lo
0C176 A5 42                         LDA ball_flags
0C178 09 10                         ORA #MOVE_BALL_DOWN
0C17A 85 42                         STA ball_flags
0C17C                           
0C17C                           
0C17C                           +checkHorizontalMovement:
0C17C                           
0C17C                               ;; Check if ball is being nudged
0C17C A5 49                         LDA nudge_timer
0C17E D0 41                         BNE +doneBallMovement
0C180                           
0C180                               ;; Check if left button is held
0C180 A5 1A                         LDA buttons_held
0C182 29 02                         AND #BUTTON_LEFT
0C184 F0 1B                         BEQ +
0C186                                   ;; update the low byte
0C186 A5 23                             LDA ball_xpos_lo
0C188 38                                SEC
0C189 E9 88                             SBC #BALL_SPEED_LO
0C18B 85 23                             STA ball_xpos_lo
0C18D                           
0C18D                                   ;; update the high byte
0C18D A5 22                             LDA ball_xpos_hi
0C18F E9 01                             SBC #BALL_SPEED_HI
0C191 85 22                             STA ball_xpos_hi
0C193                                   
0C193                                   ;; Check left bound
0C193 C9 10                             CMP #BOUND_LEFT
0C195 B0 2A                             BCS +doneBallMovement
0C197                                   
0C197                                   ;; Set flag to nudge right and set nudge timer
0C197 A5 42                             LDA ball_flags
0C199 09 02                             ORA #NUDGE_BALL_RIGHT
0C19B 20 E9 CB                          JSR sub_InitiateNudge
0C19E                           
0C19E 4C C1 C1                          JMP +doneBallMovement        
0C1A1                               +
0C1A1                           
0C1A1                               ;; Check if right button is held
0C1A1 A5 1A                         LDA buttons_held
0C1A3 29 01                         AND #BUTTON_RIGHT
0C1A5 F0 1A                         BEQ +
0C1A7                                   ;; update the low byte
0C1A7 A5 23                             LDA ball_xpos_lo
0C1A9 18                                CLC
0C1AA 69 88                             ADC #BALL_SPEED_LO
0C1AC 85 23                             STA ball_xpos_lo
0C1AE                           
0C1AE                                   ;; update the high byte
0C1AE A5 22                             LDA ball_xpos_hi
0C1B0 69 01                             ADC #BALL_SPEED_HI
0C1B2 85 22                             STA ball_xpos_hi     
0C1B4                           
0C1B4                                  ;; Check right bound
0C1B4 C9 E8                             CMP #BOUND_RIGHT
0C1B6 90 09                             BCC +doneBallMovement
0C1B8 F0 07                             BEQ +doneBallMovement
0C1BA                                   
0C1BA                                   ;; Set flag to nudge left and set nudge timer
0C1BA A5 42                             LDA ball_flags
0C1BC 29 FD                             AND #NUDGE_BALL_LEFT
0C1BE 20 E9 CB                          JSR sub_InitiateNudge
0C1C1                               +
0C1C1                           
0C1C1                           
0C1C1                           +doneBallMovement:
0C1C1                           
0C1C1                               ;; Check nudge
0C1C1 A5 49                         LDA nudge_timer
0C1C3 F0 23                         BEQ +doneBallNudging
0C1C5 A5 42                             LDA ball_flags
0C1C7 29 02                             AND #NUDGE_BALL_RIGHT
0C1C9 F0 10                             BEQ +nudgeBallLeft
0C1CB                                   
0C1CB                                       ;; update the low byte
0C1CB A5 23                                 LDA ball_xpos_lo
0C1CD 18                                    CLC
0C1CE 69 88                                 ADC #BALL_SPEED_LO
0C1D0 85 23                                 STA ball_xpos_lo
0C1D2                           
0C1D2                                       ;; update the high byte
0C1D2 A5 22                                 LDA ball_xpos_hi
0C1D4 69 01                                 ADC #BALL_SPEED_HI
0C1D6 85 22                                 STA ball_xpos_hi  
0C1D8 4C E8 C1                              JMP +doneBallNudging
0C1DB                                   +nudgeBallLeft:
0C1DB                                   
0C1DB                                   ;; update the low byte
0C1DB A5 23                             LDA ball_xpos_lo
0C1DD 38                                SEC
0C1DE E9 88                             SBC #BALL_SPEED_LO
0C1E0 85 23                             STA ball_xpos_lo
0C1E2                           
0C1E2                                   ;; update the high byte
0C1E2 A5 22                             LDA ball_xpos_hi
0C1E4 E9 01                             SBC #BALL_SPEED_HI
0C1E6 85 22                             STA ball_xpos_hi
0C1E8                               +doneBallNudging:
0C1E8                           
0C1E8                               ;; Don't update position again until next frame
0C1E8                               ;; (moved to after move block routine)
0C1E8                           
0C1E8                           +doneBallHandling:
0C1E8                           
0C1E8                               
0C1E8                               ;; Do collision detection
0C1E8                               .include "game/include/main/collision_detection.asm"
0C1E8                           
0C1E8                               ;; Get ball's x-left, x-center, x-right position
0C1E8 A5 22                         LDA ball_xpos_hi
0C1EA 18                            CLC
0C1EB 69 F0                         ADC #BALL_LEFT_WGA
0C1ED 85 3A                         STA ball_left
0C1EF 18                            CLC
0C1F0 69 04                         ADC #BALL_HALF_SIZE
0C1F2 85 3B                         STA ball_center
0C1F4 18                            CLC
0C1F5 69 04                         ADC #BALL_HALF_SIZE
0C1F7 85 3C                         STA ball_right
0C1F9                           
0C1F9                               ;; Get ball's y-top, y-middle, y-bottom position
0C1F9 A5 24                         LDA ball_ypos_hi
0C1FB 18                            CLC
0C1FC 69 D0                         ADC #BALL_TOP_WGA
0C1FE 85 3D                         STA ball_top
0C200 18                            CLC
0C201 69 04                         ADC #BALL_HALF_SIZE
0C203 85 3E                         STA ball_middle
0C205 18                            CLC
0C206 69 04                         ADC #BALL_HALF_SIZE
0C208 85 3F                         STA ball_bottom
0C20A                           
0C20A                           +checkRightCollision:
0C20A                               ;; Check if ball moves right
0C20A                               ;; No need to check nudging here as that will never collide with a tile
0C20A A5 1A                         LDA buttons_held
0C20C 29 01                         AND #BUTTON_RIGHT
0C20E F0 20                         BEQ +checkLeftCollision
0C210                           
0C210                               ;; Check tile at right position
0C210 A5 3E                         LDA ball_middle
0C212 85 0B                         STA temp
0C214 A5 3C                         LDA ball_right
0C216 85 0C                         STA temp+1
0C218 20 83 C8                      JSR sub_ConvertXYToTileType
0C21B 29 01                         AND #TILE_IS_SOLID
0C21D F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C21F                           
0C21F                               ;; Nudge ball and evaluate tile type
0C21F A9 01                         LDA #$01
0C221 85 41                         STA move_block_space_to_check
0C223 A5 42                         LDA ball_flags
0C225 29 FD                         AND #NUDGE_BALL_LEFT
0C227 20 E9 CB                      JSR sub_InitiateNudge
0C22A 20 11 CA                      JSR sub_EvaluateTileType
0C22D 4C 53 C2                      JMP +checkTopCollision
0C230                           
0C230                           +checkLeftCollision:
0C230                               ;; Check if ball moves right
0C230                               ;; No need to check nudging here as that will never collide with a tile
0C230 A5 1A                         LDA buttons_held
0C232 29 02                         AND #BUTTON_LEFT
0C234 F0 1D                         BEQ +checkTopCollision
0C236                           
0C236                               ;; Check tile at right position
0C236 A5 3E                         LDA ball_middle
0C238 85 0B                         STA temp
0C23A A5 3A                         LDA ball_left
0C23C 85 0C                         STA temp+1
0C23E 20 83 C8                      JSR sub_ConvertXYToTileType
0C241 29 01                         AND #TILE_IS_SOLID
0C243 F0 0E                         BEQ +checkTopCollision
0C245                           
0C245                               ;; Tile is solid; nudge ball and evaluate tile type
0C245 A9 FF                         LDA #$FF
0C247 85 41                         STA move_block_space_to_check
0C249 A5 42                         LDA ball_flags
0C24B 09 02                         ORA #NUDGE_BALL_RIGHT
0C24D 20 E9 CB                      JSR sub_InitiateNudge
0C250 20 11 CA                      JSR sub_EvaluateTileType
0C253                               
0C253                               
0C253                           +checkTopCollision:
0C253                               ;; Check if ball moves up
0C253 A5 42                         LDA ball_flags
0C255 29 10                         AND #BALL_MOVES_DOWN
0C257 D0 27                         BNE +checkBottomCollision
0C259                           
0C259                               ;; Check tile at top position
0C259 A5 3D                         LDA ball_top
0C25B 85 0B                         STA temp
0C25D A5 3B                         LDA ball_center
0C25F 85 0C                         STA temp+1
0C261 20 83 C8                      JSR sub_ConvertXYToTileType
0C264 29 01                         AND #TILE_IS_SOLID
0C266 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C268                           
0C268                               ;; Tile is solid; move ball down and evaluate tile type
0C268 A5 27                         LDA ball_ypos_lo_prev
0C26A 85 25                         STA ball_ypos_lo
0C26C A5 26                         LDA ball_ypos_hi_prev
0C26E 85 24                         STA ball_ypos_hi
0C270 A5 42                         LDA ball_flags
0C272 09 10                         ORA #MOVE_BALL_DOWN
0C274 85 42                         STA ball_flags
0C276                           
0C276 A9 F0                         LDA #$F0 ; which is -16
0C278 85 41                         STA move_block_space_to_check
0C27A 20 11 CA                      JSR sub_EvaluateTileType
0C27D 4C A4 C2                      JMP +doneCheckingCollision
0C280                           
0C280                           +checkBottomCollision:
0C280                               ;; No movement check needed: since ball is not moving up, it must move down
0C280                           
0C280                               ;; Check tile at bottom position
0C280 A5 3F                         LDA ball_bottom
0C282 85 0B                         STA temp
0C284 A5 3B                         LDA ball_center
0C286 85 0C                         STA temp+1
0C288 20 83 C8                      JSR sub_ConvertXYToTileType
0C28B 29 01                         AND #TILE_IS_SOLID
0C28D F0 15                         BEQ +doneCheckingCollision
0C28F                           
0C28F                               ;; Tile is solid; move ball up and evaluate tile type
0C28F A5 27                         LDA ball_ypos_lo_prev
0C291 85 25                         STA ball_ypos_lo
0C293 A5 26                         LDA ball_ypos_hi_prev
0C295 85 24                         STA ball_ypos_hi
0C297 A5 42                         LDA ball_flags
0C299 29 EF                         AND #MOVE_BALL_UP
0C29B 85 42                         STA ball_flags
0C29D                           
0C29D A9 10                         LDA #$10
0C29F 85 41                         STA move_block_space_to_check
0C2A1 20 11 CA                      JSR sub_EvaluateTileType
0C2A4                           
0C2A4                           +doneCheckingCollision:
0C2A4                           
0C2A4                               
0C2A4                               ;; Update bonus
0C2A4                               .include "game/include/main/update_bonus.asm"
0C2A4                           
0C2A4                           ;; Update the bonus counter on screen
0C2A4                           
0C2A4                               ;; If bonus = 000, skip decreasing
0C2A4 A5 37                         LDA ball_bonus
0C2A6 05 38                         ORA ball_bonus+1
0C2A8 05 39                         ORA ball_bonus+2
0C2AA F0 0D                         BEQ +done
0C2AC                           
0C2AC                               ;; Check if bonus timer is done yet
0C2AC A5 4A                         LDA bonus_timer
0C2AE D0 09                         BNE +done
0C2B0                           
0C2B0                               ;; Bonus timer is done
0C2B0                               ;; Reset bonus timer
0C2B0 A9 08                         LDA #BONUS_FRAMES
0C2B2 85 4A                         STA bonus_timer
0C2B4                               
0C2B4                               ;; Subtract one from ball bonus ones
0C2B4 A2 01                         LDX #$01
0C2B6 20 BA D2                      JSR sub_SubtractXFromBonus
0C2B9                           
0C2B9                           +done:
0C2B9                           
0C2B9                           
0C2B9                               ;; Check if self-destruct
0C2B9 A5 1B                         LDA buttons_pressed
0C2BB 29 20                         AND #BUTTON_SELECT
0C2BD F0 03                         BEQ +
0C2BF 20 AA CA                          JSR sub_Selfdestruct
0C2C2                               +
0C2C2                           
0C2C2                           
0C2C2                           +skipBallMovement:
0C2C2                               ;; Move blocks a pixel up/down/left/right
0C2C2                               .include "game/include/main/move_blocks.asm"
0C2C2                           
0C2C2                               ;; Set up block loop
0C2C2 A2 04                         LDX #MAX_ANIMATIONS
0C2C4                           -moveBlocksLoop:
0C2C4 CA                            DEX
0C2C5                           
0C2C5                               ;; Check if block is still moving
0C2C5 BD 80 03                      LDA move_block_timer,x
0C2C8 F0 33                         BEQ +checkNext
0C2CA                               
0C2CA                               ;; Check if block is done moving
0C2CA C9 01                         CMP #$01
0C2CC D0 0B                         BNE +
0C2CE                                   ;; If so, draw a tile and remove the sprite
0C2CE 20 DC C8                          JSR sub_DrawMoveTile
0C2D1 A9 00                             LDA #$00
0C2D3 9D 80 03                          STA move_block_timer,x
0C2D6 4C FD C2                          JMP +checkNext
0C2D9                               +
0C2D9                               
0C2D9                               ;; Check in which direction the block is moving
0C2D9                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2D9 BD 88 03                      LDA move_block_flags,x
0C2DC 29 03                         AND #%00000011
0C2DE F0 14                         BEQ +movingDown
0C2E0 C9 01                         CMP #$01
0C2E2 F0 0A                         BEQ +movingUp
0C2E4 C9 02                         CMP #$02
0C2E6 F0 12                         BEQ +movingRight
0C2E8                               
0C2E8                               ;; Move block in correct direction
0C2E8                               +movingLeft:
0C2E8 DE 78 03                      DEC move_block_x,x
0C2EB 4C FD C2                      JMP +checkNext
0C2EE                           
0C2EE                               +movingUp:
0C2EE DE 7C 03                      DEC move_block_y,x
0C2F1 4C FD C2                      JMP +checkNext
0C2F4                           
0C2F4                               +movingDown:
0C2F4 FE 7C 03                      INC move_block_y,x
0C2F7 4C FD C2                      JMP +checkNext
0C2FA                           
0C2FA                               +movingRight:
0C2FA FE 78 03                      INC move_block_x,x
0C2FD                           
0C2FD                               ;; Check next block (if any left)
0C2FD                               +checkNext:
0C2FD E0 00                         CPX #$00
0C2FF D0 C3                         BNE -moveBlocksLoop
0C301                               
0C301                               ;; Don't update sprites
0C301 E6 40                         INC sprites_update_position
0C303                           
0C303                           
0C303                           +skipSpriteMovement:
0C303                               ;; Testing timed PPU scroll concept (disabled)
0C303                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C303                           
0C303                               ;; Check if ball is dead
0C303 A5 42                         LDA ball_flags
0C305 29 01                         AND #BALL_IS_DEAD
0C307 F0 03                         BEQ +
0C309 4C 2B C3                          JMP +ballIsDead
0C30C                               +
0C30C                               
0C30C                               ;; Add ball to sprite buffer
0C30C A6 48                         LDX sprite_ram_pointer
0C30E A5 24                         LDA ball_ypos_hi
0C310 9D 00 02                      STA ADDR_SPRITERAM,x
0C313 E8                            INX
0C314 A9 01                         LDA #BALL_TILE_CHR
0C316 9D 00 02                      STA ADDR_SPRITERAM,x
0C319 E8                            INX
0C31A A9 00                         LDA #BALL_ATTR
0C31C 9D 00 02                      STA ADDR_SPRITERAM,x
0C31F E8                            INX
0C320 A5 22                         LDA ball_xpos_hi
0C322 9D 00 02                      STA ADDR_SPRITERAM,x
0C325 E8                            INX
0C326 86 48                         STX sprite_ram_pointer
0C328 4C 3C C3                      JMP +drawBlocks
0C32B                           
0C32B                           +ballIsDead:
0C32B                               ;; Check if kill timer has reset
0C32B A5 4B                         LDA kill_timer
0C32D F0 03                         BEQ +
0C32F 4C 3C C3                          JMP +drawBlocks
0C332                               +
0C332                               
0C332                               ;; Take a live
0C332 C6 2A                         DEC ball_lives
0C334 D0 03                         BNE +
0C336                                   ;; If no lives left, initiate game over sequence
0C336 4C EF C3                          JMP lbl_GameOver
0C339                               +
0C339                               
0C339                               ;; Reload current level
0C339 4C 8C C5                      JMP lbl_InitiateLevelLoad
0C33C                           
0C33C                           
0C33C                           +drawBlocks:
0C33C                               ;; Draw moving block(s, if any)
0C33C                               .include "game/include/main/draw_blocks.asm"
0C33C                           
0C33C                           ;; Handle movement of move blocks
0C33C                           
0C33C                               ;; Set up a loop
0C33C A0 04                         LDY #MAX_ANIMATIONS
0C33E                           -drawBlocksLoop:
0C33E 88                            DEY
0C33F                           
0C33F                               ;; If timer is zero, check the next move block
0C33F B9 80 03                      LDA move_block_timer,y
0C342 F0 52                         BEQ +nextMoveBlock
0C344                               
0C344                               ;; Get current sprite pointer
0C344 A6 48                         LDX sprite_ram_pointer
0C346                           
0C346                               ;; Draw the sprites on screen
0C346 B9 7C 03                      LDA move_block_y,y
0C349 9D 00 02                      STA ADDR_SPRITERAM,x
0C34C 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C34F 18                            CLC
0C350 69 08                         ADC #$08
0C352 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C355 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C358 E8                            INX
0C359                           
0C359 A9 52                         LDA #$52 ; Top left chr id
0C35B 9D 00 02                      STA ADDR_SPRITERAM,x
0C35E A9 53                         LDA #$53 ; Top right chr id
0C360 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C363 A9 62                         LDA #$62 ; Bottom left chr id
0C365 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C368 A9 63                         LDA #$63 ; Bottom right chr id
0C36A 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C36D E8                            INX
0C36E                           
0C36E A9 00                         LDA #BALL_ATTR
0C370 9D 00 02                      STA ADDR_SPRITERAM,x
0C373 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C376 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C379 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C37C E8                            INX
0C37D                           
0C37D B9 78 03                      LDA move_block_x,y
0C380 9D 00 02                      STA ADDR_SPRITERAM,x
0C383 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C386 18                            CLC
0C387 69 08                         ADC #$08
0C389 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C38C 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C38F                           
0C38F                               ;; Update sprite RAM pointer
0C38F A5 48                         LDA sprite_ram_pointer
0C391 18                            CLC
0C392 69 10                         ADC #$10
0C394 85 48                         STA sprite_ram_pointer
0C396                           
0C396                           
0C396                           
0C396                           +nextMoveBlock:
0C396                               ;; Check the next move block
0C396 C0 00                         CPY #$00
0C398 D0 A4                         BNE -drawBlocksLoop
0C39A                           
0C39A 4C E9 C3                      JMP +doneScreenLoad
0C39D                           
0C39D                           
0C39D                           
0C39D                           +checkNextScreen:
0C39D                           
0C39D                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C39D                               ;; Upon pressing START, the selected level will start
0C39D                               .include "game/include/main/select_level.asm"
0C39D                           
0C39D                               ;; Change level number on start screen
0C39D A5 1B                         LDA buttons_pressed
0C39F 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3A1 F0 3C                         BEQ +checkStartPress
0C3A3                           
0C3A3                                   ;; Select next level (1, 5, 9, 13, 17)
0C3A3 A5 4E                             LDA current_level
0C3A5 18                                CLC
0C3A6 69 04                             ADC #$04
0C3A8 C9 14                             CMP #$14
0C3AA D0 02                             BNE +
0C3AC A9 00                                 LDA #$00
0C3AE                                   +
0C3AE 85 4E                             STA current_level
0C3B0                                   
0C3B0                                   ;; Convert level number to two-byte value
0C3B0 A9 00                             LDA #$00
0C3B2 85 0E                             STA temp+3
0C3B4 A5 4E                             LDA current_level
0C3B6 18                                CLC
0C3B7 69 01                             ADC #$01
0C3B9                           
0C3B9                               -
0C3B9 C9 0A                             CMP #$0A
0C3BB 90 08                             BCC +
0C3BD E6 0E                                 INC temp+3
0C3BF 38                                    SEC
0C3C0 E9 0A                                 SBC #$0A
0C3C2 4C B9 C3                              JMP -
0C3C5                                   +
0C3C5                           
0C3C5                                   ;; Add level number to PPU buffer
0C3C5 18                                CLC
0C3C6 69 01                             ADC #$01
0C3C8 85 0D                             STA temp+2
0C3CA A9 20                             LDA #$20
0C3CC 85 0B                             STA temp
0C3CE A9 C7                             LDA #$C7
0C3D0 85 0C                             STA temp+1
0C3D2 20 1F D3                          JSR sub_WriteByteToPPUBuffer
0C3D5                                   
0C3D5 C6 0C                             DEC temp+1
0C3D7 A4 0E                             LDY temp+3
0C3D9 C8                                INY
0C3DA 84 0D                             STY temp+2
0C3DC 20 1F D3                          JSR sub_WriteByteToPPUBuffer
0C3DF                                   
0C3DF                               +checkStartPress:
0C3DF                           
0C3DF                           
0C3DF                           
0C3DF                               ;; If START button is pressed
0C3DF A5 1B                         LDA buttons_pressed
0C3E1 29 10                         AND #BUTTON_START
0C3E3 F0 04                         BEQ +
0C3E5                                   ;; Start the level
0C3E5 A9 81                             LDA #LOAD_GAME_SCREEN
0C3E7 85 43                             STA screen_mode
0C3E9                               +
0C3E9                           
0C3E9                           
0C3E9                           
0C3E9                           +doneScreenLoad:
0C3E9                           
0C3E9                               ;; Load animations (if any)
0C3E9                               ;; and sprite clean-up
0C3E9 20 F3 CB                      JSR sub_LoadAnimations
0C3EC                           
0C3EC 4C B2 C0                      JMP lbl_MainGameLoop
0C3EF                           
0C3EF                           ;; Following sequences are outside main game loop
0C3EF                           .include "game/include/main/game_over.asm"
0C3EF                           
0C3EF                           ;; Game over sequence
0C3EF                           lbl_GameOver:
0C3EF                           
0C3EF                               ;; Check if current score exceeds high score
0C3EF A2 00                         LDX #$00
0C3F1                               -checkHiScoreLoop:
0C3F1                           
0C3F1                                   ;; Compare ball score digit with high score digit
0C3F1 B5 2B                             LDA ball_score,x
0C3F3 D5 05                             CMP hi_score,x
0C3F5                           
0C3F5                                   ;; If the score digit is lower, the entire score must
0C3F5                                   ;; be lower, so we can skip checking the other digits
0C3F5 90 18                             BCC +hiScoreHandlingDone
0C3F7                           
0C3F7                                   ;; If the score digit is equal, check the next digit
0C3F7 F0 03                             BEQ +checkNextDigit
0C3F9                           
0C3F9                                   ;; If the score digit is higher, update the high score
0C3F9 4C 04 C4                          JMP +updateHighScore
0C3FC                           
0C3FC                                   ;; Check the next digit (if any digits are left)
0C3FC                                   +checkNextDigit:
0C3FC E8                                INX
0C3FD E0 06                             CPX #$06
0C3FF D0 F0                         BNE -checkHiScoreLoop
0C401                           
0C401                               ;; All digits are equal? What are the odds!
0C401                               ;; Either way, we don't have to update the high score,
0C401                               ;; although doing so won't do any harm, so if we need
0C401                               ;; three more bytes at the cost of a couple dozen
0C401                               ;; cycles, we can skip this jump.
0C401 4C 0F C4                      JMP +hiScoreHandlingDone
0C404                           
0C404                               ;; Transfer the ball score values to the high score values
0C404                               +updateHighScore:
0C404 A2 00                         LDX #$00
0C406                               -
0C406 B5 2B                             LDA ball_score,x
0C408 95 05                             STA hi_score,x
0C40A E8                                INX
0C40B E0 06                             CPX #$06
0C40D D0 F7                         BNE -
0C40F                           
0C40F                               ;; The high score has been handled now.
0C40F                               +hiScoreHandlingDone:
0C40F                               
0C40F                               ;; Disable noise channel
0C40F A9 00                         LDA #$00
0C411 8D 15 40                      STA APU_STATUS
0C414 8D 0C 40                      STA NOISE_VOLUME
0C417                               
0C417                               ;; Do blinds effect
0C417 A5 6D                         LDA game_won
0C419 D0 03                         BNE +
0C41B 20 71 C7                          JSR sub_BlindsEffect
0C41E                               +
0C41E A9 00                         LDA #$00
0C420 85 6D                         STA game_won
0C422                           
0C422                               ;; Disable draw after HUD to disable screen
0C422 20 CF C6                      JSR sub_WaitForNMI
0C425                               -
0C425 AD 02 20                          LDA PPU_STATUS
0C428 29 40                             AND #SPRITE_0_HIT
0C42A D0 F9                         BNE -
0C42C                               -
0C42C AD 02 20                          LDA PPU_STATUS
0C42F 29 40                             AND #SPRITE_0_HIT
0C431 F0 F9                         BEQ -
0C433 20 0C D3                      JSR sub_Waste6
0C436 20 0F D3                      JSR sub_Waste5
0C439 20 12 D3                      JSR sub_Waste4
0C43C 20 15 D3                      JSR sub_Waste3
0C43F 20 1B D3                      JSR sub_Waste1
0C442 20 1E D3                      JSR sub_Waste0
0C445 A9 00                         LDA #$00
0C447 8D 01 20                      STA PPU_MASK
0C44A                               
0C44A                               ;; Remove game area from view
0C44A 2C 02 20                      BIT PPU_STATUS
0C44D A9 20                         LDA #$20
0C44F 8D 06 20                      STA PPU_ADDR
0C452 A9 A0                         LDA #$A0
0C454 8D 06 20                      STA PPU_ADDR
0C457 A9 00                         LDA #$00
0C459 A2 16                         LDX #$16
0C45B                               -xLoop:
0C45B A0 20                             LDY #$20
0C45D                                   -yLoop:
0C45D 8D 07 20                              STA PPU_DATA
0C460 88                                    DEY
0C461 D0 FA                             BNE -yLoop
0C463 CA                                DEX
0C464 D0 F5                         BNE -xLoop
0C466                               
0C466                               ;; Set lives to 0
0C466 2C 02 20                      BIT PPU_STATUS
0C469 A9 20                         LDA #$20
0C46B 8D 06 20                      STA PPU_ADDR
0C46E A9 92                         LDA #$92
0C470 8D 06 20                      STA PPU_ADDR
0C473 A9 01                         LDA #$01
0C475 8D 07 20                      STA PPU_DATA
0C478                               
0C478                               ;; Reset scroll
0C478 A9 00                         LDA #$00
0C47A 8D 05 20                      STA PPU_SCROLL
0C47D 8D 05 20                      STA PPU_SCROLL
0C480 20 CF C6                      JSR sub_WaitForNMI
0C483                           
0C483                               ;; Pause for a little while
0C483 A2 18                         LDX #$18
0C485                               -
0C485 20 CF C6                          JSR sub_WaitForNMI
0C488 CA                                DEX
0C489 D0 FA                         BNE -
0C48B                                       
0C48B                               ;; Do flash effect
0C48B 20 8A CB                      JSR sub_FlashEffect
0C48E                           
0C48E                               ;; Draw GAME OVER tiles over game screen
0C48E A9 21                         LDA #$21
0C490 85 0B                         STA temp
0C492 A9 EB                         LDA #$EB
0C494 85 0C                         STA temp+1
0C496                           
0C496 A2 00                         LDX #$00
0C498                               -gameOverTileLoop:
0C498 BD 40 DC                          LDA tbl_GameOver,x
0C49B 85 0D                             STA temp+2
0C49D 20 1F D3                          JSR sub_WriteByteToPPUBuffer
0C4A0 E6 0C                             INC temp+1
0C4A2 E8                                INX
0C4A3 E0 0A                             CPX #$0A
0C4A5 D0 F1                         BNE -gameOverTileLoop
0C4A7                               
0C4A7                               ;; Update GAME OVER attributes on game screen
0C4A7 A9 23                         LDA #$23
0C4A9 85 0B                         STA temp
0C4AB A9 DA                         LDA #$DA
0C4AD 85 0C                         STA temp+1
0C4AF A9 AA                         LDA #$AA
0C4B1 85 0D                         STA temp+2
0C4B3 A2 04                         LDX #$04
0C4B5                               -
0C4B5 20 1F D3                          JSR sub_WriteByteToPPUBuffer
0C4B8 E6 0C                             INC temp+1
0C4BA CA                                DEX
0C4BB D0 F8                         BNE -
0C4BD 20 CF C6                      JSR sub_WaitForNMI
0C4C0                               
0C4C0                              
0C4C0                               ;; If player score is larger than high score
0C4C0                               ;; Overwrite high score with player score
0C4C0                               ;; [@TODO]
0C4C0                               
0C4C0                               
0C4C0                               ;; If player presses either A or START, (soft) reset the game
0C4C0                               -checkController:
0C4C0 20 BB C6                          JSR sub_ReadController
0C4C3 A5 1A                             LDA buttons_held
0C4C5 29 90                             AND #%10010000
0C4C7 F0 F7                         BEQ -checkController
0C4C9 4C 4F C0                      JMP lbl_SoftReset
0C4CC                           
0C4CC                           .include "game/include/main/level_win.asm"
0C4CC                           
0C4CC                           ;; Handling of level win state
0C4CC                           lbl_LevelWin:
0C4CC                           
0C4CC                               ;; Freeze the ball
0C4CC A5 42                         LDA ball_flags
0C4CE 09 04                         ORA #FREEZE_BALL
0C4D0 85 42                         STA ball_flags
0C4D2                           
0C4D2                               ;; Disable noise channel
0C4D2 A9 01                         LDA #$01
0C4D4 85 57                         STA noise_muted
0C4D6                               
0C4D6                               ;; Wait a few frames
0C4D6 A2 18                         LDX #$18
0C4D8 20 F7 D2                      JSR sub_WaitXFrames
0C4DB                           
0C4DB                               ;; Set null tile color to yellow
0C4DB A9 3F                         LDA #$3F
0C4DD 85 0B                         STA temp
0C4DF A9 02                         LDA #$02
0C4E1 85 0C                         STA temp+1
0C4E3 A9 38                         LDA #$38
0C4E5 85 0D                         STA temp+2
0C4E7 20 1F D3                      JSR sub_WriteByteToPPUBuffer
0C4EA                               
0C4EA                               ;; Quick and dirty way to remove ball from screen
0C4EA A9 EF                         LDA #$EF
0C4EC 8D 04 02                      STA ADDR_SPRITERAM+4
0C4EF 8D 05 02                      STA ADDR_SPRITERAM+5
0C4F2 8D 06 02                      STA ADDR_SPRITERAM+6
0C4F5 8D 07 02                      STA ADDR_SPRITERAM+7
0C4F8                               
0C4F8                               ;; Wait a few frames
0C4F8 A2 10                         LDX #$10
0C4FA 20 F7 D2                      JSR sub_WaitXFrames
0C4FD                               
0C4FD                               ;; Restore null tile color to dark blue
0C4FD A9 3F                         LDA #$3F
0C4FF 85 0B                         STA temp
0C501 A9 02                         LDA #$02
0C503 85 0C                         STA temp+1
0C505 A9 12                         LDA #$12
0C507 85 0D                         STA temp+2
0C509 20 1F D3                      JSR sub_WriteByteToPPUBuffer
0C50C                               
0C50C                               ;; Initiate frequency beeps (@TODO)
0C50C A9 0F                         LDA #$0F
0C50E 85 5F                         STA sfx_sweep_count
0C510                               -sweepsLoop:
0C510                               
0C510                                   ;; Reset volume for new sweep
0C510 A5 5F                             LDA sfx_sweep_count
0C512 85 61                             STA sfx_sweep_next_volume
0C514                                   
0C514                                   ;; Set up single sweep loop
0C514 A2 00                             LDX #$00
0C516                                   -sweepLoop:
0C516                                   
0C516                                       ;; Set current low frequency
0C516 BD F7 DC                              LDA tbl_SweepFrequency,x
0C519 85 62                                 STA sfx_sweep_frequency
0C51B                                       
0C51B                                       ;; Set current volume
0C51B A4 61                                 LDY sfx_sweep_next_volume
0C51D 84 60                                 STY sfx_sweep_volume
0C51F                                       
0C51F                                       ;; Wait for NMI to play sfx
0C51F 20 CF C6                              JSR sub_WaitForNMI
0C522                           
0C522                                       ;; Prepare next volume
0C522 B9 E7 DC                              LDA tbl_SweepVolume,y
0C525 85 61                                 STA sfx_sweep_next_volume
0C527                                       
0C527                                       ;; Clear pointer, except for sprite-zero and ball
0C527 A9 08                                 LDA #$08
0C529 85 48                                 STA sprite_ram_pointer
0C52B                           
0C52B                                       ;; Load animations (if any)
0C52B 8A                                    TXA
0C52C 48                                    PHA
0C52D 20 F3 CB                              JSR sub_LoadAnimations
0C530 68                                    PLA
0C531 AA                                    TAX
0C532                           
0C532                                       ;; Play next frequency
0C532 E8                                    INX
0C533 E0 05                                 CPX #$05
0C535 D0 DF                             BNE -sweepLoop
0C537                                   
0C537                                   ;; Play next sweep
0C537 C6 5F                             DEC sfx_sweep_count
0C539 D0 D5                         BNE -sweepsLoop
0C53B                           
0C53B                               ;; Wait a few frames
0C53B A2 2D                         LDX #$2D
0C53D 20 F7 D2                      JSR sub_WaitXFrames
0C540                               
0C540                           
0C540                               ;; Play the end level sweep sound effect, and
0C540                               ;; initiate bonus score routine
0C540 A9 B8                         LDA #$B8
0C542 85 56                         STA soft_pulse1
0C544                           
0C544 A9 01                         LDA #$01
0C546 8D 15 40                      STA APU_STATUS
0C549 85 55                         STA do_beeps
0C54B                           
0C54B                               -bonusPointsLoop:
0C54B                                   ;; Check how many bonus points to subtract
0C54B                                   ;; (either the max, or what's left)
0C54B A5 37                             LDA ball_bonus
0C54D 05 38                             ORA ball_bonus+1
0C54F D0 06                             BNE +fullBonus
0C551 A5 39                             LDA ball_bonus+2
0C553 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C555 90 02                             BCC +partBonus
0C557                           
0C557                                   +fullBonus:
0C557 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C559                                   +partBonus:
0C559                           
0C559                                   ;; Put value that's added to score on the stack
0C559 AA                                TAX
0C55A BD 32 DD                          LDA tbl_BonusToScore,x
0C55D 48                                PHA
0C55E                           
0C55E                                   ;; Subtract X-register from bonus
0C55E 20 BA D2                          JSR sub_SubtractXFromBonus
0C561                           
0C561                                   ;; Get value from stack and add it to the score
0C561 68                                PLA
0C562 20 DE C6                          JSR sub_AddAccumulatorToScore
0C565                           
0C565                                   ;; Wait for NMI twice
0C565 20 CF C6                          JSR sub_WaitForNMI
0C568 20 CF C6                          JSR sub_WaitForNMI
0C56B                           
0C56B                                   ;; Check if bonus countdown is done
0C56B A5 37                             LDA ball_bonus
0C56D 05 38                             ORA ball_bonus+1
0C56F 05 39                             ORA ball_bonus+2
0C571 D0 D8                         BNE -bonusPointsLoop
0C573                           
0C573                               ;; fade out the beeping
0C573 A2 08                         LDX #$08
0C575                               -fadeOutLoop:
0C575 20 CF C6                          JSR sub_WaitForNMI
0C578 20 CF C6                          JSR sub_WaitForNMI
0C57B C6 56                             DEC soft_pulse1
0C57D CA                                DEX
0C57E D0 F5                         BNE -fadeOutLoop
0C580                           
0C580                               ;; Stop random beeping
0C580 A9 02                         LDA #$02
0C582 85 55                         STA do_beeps
0C584                               
0C584                               ;; Wait a few frames
0C584 A2 30                         LDX #$30
0C586 20 F7 D2                      JSR sub_WaitXFrames
0C589                           
0C589                               ;; Load next level
0C589 4C 8C C5                      JMP lbl_InitiateLevelLoad
0C58C                               
0C58C                           .include "game/include/main/initiate_level_load.asm"
0C58C                           
0C58C                           ;; Load level
0C58C                           lbl_InitiateLevelLoad:
0C58C                               
0C58C                               ;; Blind out the screen
0C58C 20 71 C7                      JSR sub_BlindsEffect
0C58F                               
0C58F                               ;; If ball is dead, (re)load current level
0C58F                               ;; If ball is alive, load next level
0C58F A5 42                         LDA ball_flags
0C591 29 01                         AND #BALL_IS_DEAD
0C593 D0 05                         BNE +
0C595 E6 4E                             INC current_level
0C597 4C A0 C5                          JMP +loadLevel
0C59A                               +
0C59A                               
0C59A                               ;; Revive ball
0C59A A5 42                         LDA ball_flags
0C59C 29 FE                         AND #REVIVE_BALL
0C59E 85 42                         STA ball_flags
0C5A0                           
0C5A0                           +loadLevel:
0C5A0                               ;; This loops back to level 1 after level 25* for now,
0C5A0                               ;; as a proper game ending is yet to be introduced.
0C5A0                               ;; *26 in test mode
0C5A0 A5 4E                         LDA current_level
0C5A2                               ifdef TESTING
0C5A2                                   CMP #LAST_LEVEL
0C5A2                               else
0C5A2 C9 19                             CMP #25
0C5A4                               endif
0C5A4 D0 03                         BNE +
0C5A6 4C B0 C5                          JMP lbl_GameWin
0C5A9                               +
0C5A9                               
0C5A9                               ;; Tell the game to load the level screen on the next loop.
0C5A9 A9 81                         LDA #LOAD_GAME_SCREEN
0C5AB 85 43                         STA screen_mode
0C5AD                           
0C5AD                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C5AD 4C B2 C0                      JMP lbl_MainGameLoop0C5B0                           .include "game/include/main/game_win.asm"
0C5B0                           
0C5B0                           lbl_GameWin:
0C5B0                           
0C5B0                               ;; Tell the game that it has been won
0C5B0 E6 6D                         INC game_won
0C5B2 E6 63                         INC sfx_endgame_enabled
0C5B4                               
0C5B4                               ;; Clear out game screen
0C5B4 20 CF C6                      JSR sub_WaitForNMI
0C5B7                               -
0C5B7 AD 02 20                          LDA PPU_STATUS
0C5BA 29 40                             AND #SPRITE_0_HIT
0C5BC D0 F9                         BNE -
0C5BE                               -
0C5BE AD 02 20                          LDA PPU_STATUS
0C5C1 29 40                             AND #SPRITE_0_HIT
0C5C3 F0 F9                         BEQ -
0C5C5 20 0C D3                      JSR sub_Waste6
0C5C8 20 0F D3                      JSR sub_Waste5
0C5CB 20 12 D3                      JSR sub_Waste4
0C5CE 20 15 D3                      JSR sub_Waste3
0C5D1 20 1B D3                      JSR sub_Waste1
0C5D4 20 1E D3                      JSR sub_Waste0
0C5D7 A9 00                         LDA #$00
0C5D9 8D 01 20                      STA PPU_MASK
0C5DC                               
0C5DC                               ;; Remove game area from view
0C5DC 2C 02 20                      BIT PPU_STATUS
0C5DF A9 20                         LDA #$20
0C5E1 8D 06 20                      STA PPU_ADDR
0C5E4 A9 A0                         LDA #$A0
0C5E6 8D 06 20                      STA PPU_ADDR
0C5E9 A9 00                         LDA #$00
0C5EB A2 16                         LDX #$16
0C5ED                               -xLoop:
0C5ED A0 20                             LDY #$20
0C5EF                                   -yLoop:
0C5EF 8D 07 20                              STA PPU_DATA
0C5F2 88                                    DEY
0C5F3 D0 FA                             BNE -yLoop
0C5F5 CA                                DEX
0C5F6 D0 F5                         BNE -xLoop
0C5F8                               
0C5F8                               ;; Set lives to 0
0C5F8 2C 02 20                      BIT PPU_STATUS
0C5FB A9 20                         LDA #$20
0C5FD 8D 06 20                      STA PPU_ADDR
0C600 A9 92                         LDA #$92
0C602 8D 06 20                      STA PPU_ADDR
0C605 A9 01                         LDA #$01
0C607 8D 07 20                      STA PPU_DATA
0C60A                               
0C60A                               ;; Reset scroll
0C60A A9 00                         LDA #$00
0C60C 8D 05 20                      STA PPU_SCROLL
0C60F 8D 05 20                      STA PPU_SCROLL
0C612 20 CF C6                      JSR sub_WaitForNMI
0C615                               
0C615                               ;; Do a flashy screen and play a frequency sweep at the same time
0C615 A2 00                         LDX #$00
0C617                               -endSweepsLoop:
0C617                                   ;; Reset frequency
0C617 A9 00                             LDA #$00
0C619 85 64                             STA sfx_endgame_p1_rest
0C61B 85 67                             STA sfx_endgame_p2_rest
0C61D A9 08                             LDA #$08
0C61F 85 65                             STA sfx_endgame_p1_freq_hi
0C621 A9 7A                             LDA #$7A
0C623 85 66                             STA sfx_endgame_p1_freq_lo
0C625 A9 09                             LDA #$09
0C627 85 68                             STA sfx_endgame_p2_freq_hi
0C629 A9 3A                             LDA #$3A
0C62B 85 69                             STA sfx_endgame_p2_freq_lo
0C62D                                   
0C62D                                   ;; Get current sweep length
0C62D BD FC DC                          LDA tbl_EndSweepLength,x
0C630 85 10                             STA temp+5
0C632 A0 00                             LDY #$00
0C634                                   -endSweepLoop:
0C634                           
0C634 A5 20                                 LDA frame_counter
0C636 29 01                                 AND #$01
0C638 F0 2D                                 BEQ +playNote
0C63A                           
0C63A                                           ;; Get background color from table
0C63A 8A                                        TXA
0C63B 48                                        PHA
0C63C E6 4D                                     INC endgame_palette_timer
0C63E A5 4D                                     LDA endgame_palette_timer
0C640 29 0F                                     AND #$0F
0C642 AA                                        TAX
0C643 BD 41 DD                                  LDA tbl_EndGamePalette,x
0C646 85 0D                                     STA temp+2
0C648 68                                        PLA
0C649 AA                                        TAX
0C64A                                       
0C64A                                           ;; Put background color in PPU buffer
0C64A 98                                        TYA
0C64B 48                                        PHA
0C64C A9 3F                                     LDA #$3F
0C64E 85 0B                                     STA temp
0C650 A9 00                                     LDA #$00
0C652 85 0C                                     STA temp+1
0C654 20 1F D3                                  JSR sub_WriteByteToPPUBuffer
0C657 A9 0D                                     LDA #$0D
0C659 85 0C                                     STA temp+1
0C65B 20 1F D3                                  JSR sub_WriteByteToPPUBuffer
0C65E A9 19                                     LDA #$19
0C660 85 0C                                     STA temp+1
0C662 20 1F D3                                  JSR sub_WriteByteToPPUBuffer
0C665 68                                        PLA
0C666 A8                                        TAY
0C667                           
0C667                                       +playNote:
0C667                                       ;; Play the note
0C667 20 CF C6                              JSR sub_WaitForNMI
0C66A                                       
0C66A                                       ;; Prepare the next note
0C66A A5 64                                 LDA sfx_endgame_p1_rest
0C66C 18                                    CLC
0C66D 7D 20 DD                              ADC tbl_EndSweepFreqDeltaRest,x
0C670 85 64                                 STA sfx_endgame_p1_rest
0C672 A5 66                                 LDA sfx_endgame_p1_freq_lo
0C674 7D 0E DD                              ADC tbl_EndSweepFreqDeltaLo,x
0C677 85 66                                 STA sfx_endgame_p1_freq_lo
0C679 A5 65                                 LDA sfx_endgame_p1_freq_hi
0C67B 69 00                                 ADC #$00
0C67D 85 65                                 STA sfx_endgame_p1_freq_hi
0C67F                                       
0C67F A5 67                                 LDA sfx_endgame_p2_rest
0C681 38                                    SEC
0C682 FD 20 DD                              SBC tbl_EndSweepFreqDeltaRest,x
0C685 85 67                                 STA sfx_endgame_p2_rest
0C687 A5 69                                 LDA sfx_endgame_p2_freq_lo
0C689 FD 0E DD                              SBC tbl_EndSweepFreqDeltaLo,x
0C68C 85 69                                 STA sfx_endgame_p2_freq_lo
0C68E A5 68                                 LDA sfx_endgame_p2_freq_hi
0C690 E9 00                                 SBC #$00
0C692 85 68                                 STA sfx_endgame_p2_freq_hi
0C694                           
0C694                                       ;; Do next frequency in the sweep
0C694 C8                                    INY
0C695 C4 10                                 CPY temp+5
0C697 D0 9B                             BNE -endSweepLoop
0C699                                   
0C699 E8                                INX
0C69A E0 12                             CPX #$12
0C69C F0 03                             BEQ +disableSfx
0C69E 4C 17 C6                      JMP -endSweepsLoop
0C6A1                           
0C6A1                               ;; Stop endgame sweep
0C6A1                               +disableSfx:
0C6A1 A9 FF                         LDA #$FF
0C6A3 85 63                         STA sfx_endgame_enabled
0C6A5                               
0C6A5                               ;; Wait a little
0C6A5 A2 10                         LDX #$10
0C6A7 20 F7 D2                      JSR sub_WaitXFrames
0C6AA                           
0C6AA                               ;; Initiate the game over sequence
0C6AA 4C EF C3                      JMP lbl_GameOver
0C6AD                           
0C6AD                           
0C6AD                           
0C6AD                           ;; Subroutines
0C6AD                           .include "include/subroutines.asm"
0C6AD                           
0C6AD                           ;; RNG
0C6AD                           .include "subroutine/GetRandomNumber.asm"
0C6AD                           
0C6AD                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6AD                           ;;
0C6AD                           ;; subroutine/GetRandomNumber.asm
0C6AD                           ;;
0C6AD                           ;; Simple and fast random number generator by White Flame.
0C6AD                           ;;
0C6AD                           ;; Set random_seed to an arbitrary number to randomize between
0C6AD                           ;; gaming sessions, for instance using the frame timer upon
0C6AD                           ;; pressing START on the intro screen.
0C6AD                           ;;
0C6AD                           ;;     ;; IF START PRESSED:
0C6AD                           ;;     LDA frame_counter
0C6AD                           ;;     STA random_seed
0C6AD                           ;;
0C6AD                           ;; Source:
0C6AD                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C6AD                           ;;
0C6AD                           ;;
0C6AD                           
0C6AD                           sub_GetRandomNumber:
0C6AD                               ;; Force EOR if random_seed is zero
0C6AD A5 21                         LDA random_seed
0C6AF F0 05                         BEQ +doEor
0C6B1                           
0C6B1                               ;; Shift left, and EOR if the high bit is set
0C6B1 0A                            ASL
0C6B2 F0 04                         BEQ +noEor
0C6B4 90 02                         BCC +noEor
0C6B6                           
0C6B6                           +doEor:
0C6B6 49 1D                         EOR #$1D
0C6B8                           
0C6B8                           +noEor:
0C6B8 85 21                         STA random_seed
0C6BA                           
0C6BA 60                            RTS
0C6BB                           
0C6BB                           
0C6BB                           ;; Read controller input
0C6BB                           .include "subroutine/ReadController.asm"
0C6BB                           
0C6BB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6BB                           ;;
0C6BB                           ;; subroutine/ReadController.asm
0C6BB                           ;;
0C6BB                           ;; Subroutine that polls the controller and stores the input
0C6BB                           ;; buttons in a variable. This version only handles controller
0C6BB                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C6BB                           ;;
0C6BB                           ;;
0C6BB                           
0C6BB                           sub_ReadController:
0C6BB                           
0C6BB                               ;; Set strobe bit
0C6BB A9 01                         LDA #$01
0C6BD 8D 16 40                      STA JOYPAD_1
0C6C0                           
0C6C0                               ;; Set up ring timer
0C6C0 85 1A                         STA buttons_held
0C6C2                           
0C6C2                               ;; Clear strobe bit
0C6C2 4A                            LSR
0C6C3 8D 16 40                      STA JOYPAD_1
0C6C6                           
0C6C6                               ;; Loop through button presses
0C6C6                               -
0C6C6 AD 16 40                          LDA JOYPAD_1
0C6C9 4A                                LSR
0C6CA 26 1A                             ROL buttons_held
0C6CC                           
0C6CC                               ;; Check if ring timer is done
0C6CC 90 F8                         BCC -
0C6CE                           
0C6CE                               ;; Return from subroutine
0C6CE 60                            RTS
0C6CF                           
0C6CF                           
0C6CF                           ;; vBlank/NMI wait
0C6CF                           .include "subroutine/WaitForNMI.asm"
0C6CF                           
0C6CF                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6CF                           ;;
0C6CF                           ;; subroutine/WaitForVBlank.asm
0C6CF                           ;;
0C6CF                           ;; Subroutine that essentially pauses script execution until
0C6CF                           ;; vBlank happens.
0C6CF                           ;;
0C6CF                           ;;
0C6CF                           
0C6CF                           sub_WaitForNMI:
0C6CF A9 01                         LDA #$01
0C6D1 85 6A                         STA check_nmi
0C6D3                               -
0C6D3 A5 6A                             LDA check_nmi
0C6D5 D0 FC                         BNE -
0C6D7 60                            RTS
0C6D8                           
0C6D8                           .include "subroutine/WaitForVBlank.asm"
0C6D8                           
0C6D8                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6D8                           ;;
0C6D8                           ;; subroutine/WaitForVBlank.asm
0C6D8                           ;;
0C6D8                           ;; Subroutine that essentially pauses script execution until
0C6D8                           ;; vBlank happens.
0C6D8                           ;;
0C6D8                           ;;
0C6D8                           
0C6D8                           sub_WaitForVBlank:
0C6D8 2C 02 20                      BIT $2002
0C6DB 10 FB                         BPL sub_WaitForVBlank
0C6DD 60                            RTS
0C6DE                           
0C6DE                           
0C6DE                           ;; Game specific subroutines
0C6DE                           .include "game/include/subroutines.asm"
0C6DE                           
0C6DE                           ;; additional game-specific subroutines go here
0C6DE                           
0C6DE                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C6DE                           
0C6DE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6DE                           ;;
0C6DE                           ;;  sub_AddAccumulatorToScore.asm
0C6DE                           ;;
0C6DE                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C6DE                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C6DE                           ;;  actual score.
0C6DE                           ;;
0C6DE                           ;;
0C6DE                           
0C6DE                           
0C6DE                           sub_AddAccumulatorToScore:
0C6DE                           
0C6DE                               ;; Clear old add_to_score
0C6DE A2 05                         LDX #$05
0C6E0 A0 00                         LDY #$00
0C6E2                               -
0C6E2 94 31                             STY add_to_score,x
0C6E4 CA                                DEX
0C6E5 10 FB                         BPL -
0C6E7                           
0C6E7                               ;; Set accumulator to add_to_score variables
0C6E7                               ;; Check and update 100s
0C6E7                               -checkHundreds:
0C6E7 C9 64                             CMP #100
0C6E9 90 08                             BCC +checkTens
0C6EB 38                                    SEC
0C6EC E9 64                                 SBC #100
0C6EE E6 34                                 INC add_to_score+3
0C6F0 4C E7 C6                              JMP -checkHundreds
0C6F3                                   +checkTens:
0C6F3                           
0C6F3                               ;; Check and update 10s
0C6F3                               -checkTens:
0C6F3 C9 0A                             CMP #10
0C6F5 90 08                             BCC +setOnes
0C6F7 38                                    SEC
0C6F8 E9 0A                                 SBC #10
0C6FA E6 35                                 INC add_to_score+4
0C6FC 4C F3 C6                              JMP -checkTens
0C6FF                                   +setOnes:
0C6FF                           
0C6FF                               ;; We're left with 1s
0C6FF 85 36                         STA add_to_score+5
0C701                           
0C701                               ;; Store the value of the score's second digit (i.e. the 10k
0C701                               ;; digit) so we can check if this has changed later
0C701 A5 2C                         LDA ball_score+1
0C703 85 10                         STA temp+5
0C705                           
0C705                               ;; Byte for byte, add add_to_score to ball_score
0C705 A9 00                         LDA #$00
0C707 85 44                         STA ppu_buffer_update
0C709 A4 45                         LDY ppu_buffer_pointer
0C70B A2 05                         LDX #$05
0C70D                               -
0C70D B5 31                             LDA add_to_score,x
0C70F 18                                CLC
0C710 75 2B                             ADC ball_score,x
0C712 C9 0A                             CMP #10
0C714 90 05                             BCC +
0C716 38                                    SEC
0C717 E9 0A                                 SBC #10
0C719 F6 2A                                 INC ball_score-1,x
0C71B                                   +
0C71B                                   
0C71B                                   ;; Update new score digit
0C71B 95 2B                             STA ball_score,x
0C71D                           
0C71D                                   ;; Update score tile in PPU
0C71D A9 20                             LDA #$20
0C71F 99 00 03                          STA ppu_buffer,y
0C722 C8                                INY
0C723 8A                                TXA
0C724 18                                CLC
0C725 69 83                             ADC #$83
0C727 99 00 03                          STA ppu_buffer,y
0C72A C8                                INY
0C72B B5 2B                             LDA ball_score,x
0C72D 18                                CLC
0C72E 69 01                             ADC #$01
0C730 99 00 03                          STA ppu_buffer,y
0C733 C8                                INY
0C734                           
0C734                                   ;; Check next digit (if any left)
0C734 CA                                DEX
0C735 30 03                             BMI +done
0C737 4C 0D C7                      JMP -
0C73A                           
0C73A                           +done:
0C73A                           
0C73A                               ;; Check if the second digit has changed
0C73A A5 10                         LDA temp+5
0C73C C5 2C                         CMP ball_score+1
0C73E F0 1D                         BEQ +updateBufferPointer
0C740                           
0C740                               ;; Second digit changed; check if player has seven lives
0C740 A5 2A                         LDA ball_lives
0C742 C9 07                         CMP #$07
0C744 F0 17                         BEQ +updateBufferPointer
0C746                           
0C746                               ;; Player does not have seven lives: add a life
0C746 E6 2A                         INC ball_lives
0C748                           
0C748                               ;; Update the lives digit in the HUD via PPU buffer 
0C748 A9 20                         LDA #$20
0C74A 99 00 03                      STA ppu_buffer,y
0C74D C8                            INY
0C74E A9 92                         LDA #$92
0C750 99 00 03                      STA ppu_buffer,y
0C753 C8                            INY
0C754 A5 2A                         LDA ball_lives
0C756 18                            CLC
0C757 69 01                         ADC #$01
0C759 99 00 03                      STA ppu_buffer,y
0C75C C8                            INY
0C75D                           
0C75D                           +updateBufferPointer:
0C75D                               ;; Update PPU buffer pointer and status
0C75D 84 45                         STY ppu_buffer_pointer
0C75F A9 01                         LDA #$01
0C761 85 44                         STA ppu_buffer_update
0C763                           
0C763                               ;; Done: return 
0C763 60                            RTS
0C764                           
0C764                           .include "game/subroutine/BackgroundNoise.asm"
0C764                           
0C764                           ;; Play background noise
0C764                           sub_BackgroundNoise:
0C764 A9 32                         LDA #$32
0C766 8D 0C 40                      STA NOISE_VOLUME
0C769 A9 0E                         LDA #$0E
0C76B 8D 0E 40                      STA NOISE_PERIOD
0C76E 85 53                         STA current_noise
0C770 60                            RTS
0C771                           
0C771                           .include "game/subroutine/BlindsEffect.asm"
0C771                           
0C771                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C771                           sub_BlindsEffect:
0C771                           
0C771                               ;; Set up loop fading
0C771 A9 00                         LDA #$00
0C773 85 12                         STA temp+7
0C775 A0 08                         LDY #$08
0C777                               -fadeLoop:
0C777 84 13                             STY temp+8
0C779                           
0C779                                   ;; Wait for NMI to pass
0C779 20 CF C6                          JSR sub_WaitForNMI
0C77C                                   
0C77C                                   ;; Now wait for No-sprite 0
0C77C                                   -
0C77C AD 02 20                              LDA PPU_STATUS
0C77F 29 40                                 AND #SPRITE_0_HIT
0C781 D0 F9                             BNE -
0C783                               
0C783                                   ;; Now wait for Sprite 0
0C783                                   -
0C783 AD 02 20                              LDA PPU_STATUS
0C786 29 40                                 AND #SPRITE_0_HIT
0C788 F0 F9                             BEQ -
0C78A                                   
0C78A                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C78A 20 0C D3                          JSR sub_Waste6
0C78D 20 0F D3                          JSR sub_Waste5
0C790 20 12 D3                          JSR sub_Waste4
0C793 20 15 D3                          JSR sub_Waste3
0C796 20 1B D3                          JSR sub_Waste1
0C799 20 1E D3                          JSR sub_Waste0
0C79C                                   
0C79C                                   
0C79C                                   ;; Setup tile row loop
0C79C A0 16                             LDY #22
0C79E                                   -tileLoop:
0C79E                                   
0C79E                                       ;; Disable drawing
0C79E A5 1D                                 LDA soft_ppu_mask
0C7A0 29 F7                                 AND #%11110111
0C7A2 8D 01 20                              STA PPU_MASK
0C7A5                                       
0C7A5                                       ;; Set up scanline loop
0C7A5 A2 08                                 LDX #$08
0C7A7                                       -scanlineLoop:
0C7A7 E4 13                                     CPX temp+8
0C7A9 D0 0A                                     BNE +wasteTime
0C7AB                                           
0C7AB                                           ;; Restore drawing
0C7AB A5 1D                                     LDA soft_ppu_mask
0C7AD 09 08                                     ORA #%00001000
0C7AF 8D 01 20                                  STA PPU_MASK
0C7B2 4C BB C7                                  JMP +wasteMoreTime
0C7B5                           
0C7B5                                           ;; Waste 12 frames
0C7B5                                           +wasteTime:
0C7B5 E6 6C                                     INC void     ;+5
0C7B7 C6 6C                                     DEC void     ;+5
0C7B9 49 00                                     EOR #$00     ;+2
0C7BB                                           
0C7BB                                           ;; Waste about a scanline worth of frames
0C7BB                                           +wasteMoreTime:
0C7BB 20 18 D3                                  JSR sub_Waste2
0C7BE 20 1E D3                                  JSR sub_Waste0
0C7C1 20 1E D3                                  JSR sub_Waste0
0C7C4 E6 6C                                     INC void
0C7C6 49 00                                     EOR #$00
0C7C8 49 00                                     EOR #$00
0C7CA CA                                        DEX
0C7CB D0 DA                                 BNE -scanlineLoop
0C7CD C6 6C                                 DEC void
0C7CF 49 00                                 EOR #$00
0C7D1 88                                    DEY
0C7D2 D0 CA                             BNE -tileLoop
0C7D4                           
0C7D4 A4 13                             LDY temp+8
0C7D6                                   
0C7D6 E6 12                             INC temp+7
0C7D8 A5 12                             LDA temp+7
0C7DA C9 02                             CMP #$02
0C7DC D0 99                             BNE -fadeLoop
0C7DE                           
0C7DE A9 00                             LDA #$00
0C7E0 85 12                             STA temp+7
0C7E2 88                                DEY
0C7E3 D0 92                         BNE -fadeLoop
0C7E5                               
0C7E5 60                            RTS
0C7E6                           
0C7E6                           .include "game/subroutine/ClearScreen.asm"
0C7E6                           
0C7E6                           ;; Subroutine to clear the screen
0C7E6                           ;; If it's a game screen, add noise
0C7E6                           
0C7E6                           sub_ClearScreen:
0C7E6                               ;; Check of game screen or not
0C7E6 A5 43                         LDA screen_mode
0C7E8 29 03                         AND #CHECK_SCREEN_MODE
0C7EA C9 01                         CMP #IS_GAME_SCREEN
0C7EC F0 02                         BEQ +
0C7EE A9 00                             LDA #$00
0C7F0                               +
0C7F0 85 0C                         STA temp+1
0C7F2                               
0C7F2                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C7F2 2C 02 20                      BIT PPU_STATUS
0C7F5 A9 20                         LDA #$20
0C7F7 8D 06 20                      STA PPU_ADDR
0C7FA A9 00                         LDA #$00
0C7FC 8D 06 20                      STA PPU_ADDR
0C7FF                               
0C7FF                               ;; Set up tile to draw and loop
0C7FF 85 0B                         STA temp
0C801 AA                            TAX
0C802 A8                            TAY
0C803                           
0C803                               -     
0C803                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C803 A5 0B                             LDA temp
0C805 8D 07 20                          STA PPU_DATA
0C808                           
0C808                                   ;; Check if we should draw noise next. Noise is drawn if:
0C808                                   ;; - Screen mode is game screen
0C808                                   ;; - Y between #$06 and #$19 (inclusive)
0C808                                   ;; - X between #$02 and #$1D (inclusive)
0C808                                   
0C808                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C808 A5 0C                             LDA temp+1
0C80A F0 1C                             BEQ +nextTileInRow
0C80C                                   
0C80C                                   ;; If Y < $6, skip the check
0C80C C0 06                             CPY #$06
0C80E 90 18                             BCC +nextTileInRow
0C810                                   
0C810                                   ;; If X < $1, skip the check
0C810 E0 01                             CPX #$01
0C812 90 14                             BCC +nextTileInRow
0C814                                   
0C814                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C814 E0 1D                             CPX #$1D
0C816 D0 04                             BNE +
0C818 A9 00                                 LDA #$00
0C81A 85 0B                                 STA temp
0C81C                                   +
0C81C B0 0A                             BCS +nextTileInRow
0C81E                                   
0C81E                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C81E 20 AD C6                          JSR sub_GetRandomNumber
0C821 29 07                             AND #%00000111
0C823 18                                CLC
0C824 69 68                             ADC #$68
0C826 85 0B                             STA temp
0C828                           
0C828                           +nextTileInRow:
0C828                                   
0C828                                   ;; Check if a row has been done. If not, draw the next
0C828 E8                                INX
0C829 E0 20                             CPX #$20
0C82B D0 D6                             BNE -
0C82D                                   
0C82D                                   ;; Go to the next row (if any left)
0C82D A2 00                             LDX #00
0C82F C8                                INY
0C830                                   
0C830                                   ;; If Y is 1A, skip noise tile check until done drawing
0C830 C0 1A                             CPY #$1A
0C832 D0 04                             BNE +
0C834 A9 00                                 LDA #$00
0C836 85 0C                                 STA temp+1
0C838                                   +
0C838                                   
0C838 C0 1E                             CPY #$1E
0C83A D0 C7                         BNE -
0C83C                           
0C83C                               ;; Clear attribute table
0C83C A9 23                         LDA #$23
0C83E 8D 06 20                      STA PPU_ADDR
0C841 A9 C0                         LDA #$C0
0C843 8D 06 20                      STA PPU_ADDR
0C846 A9 00                         LDA #$00
0C848 A2 40                         LDX #$40
0C84A                               -
0C84A 8D 07 20                          STA PPU_DATA
0C84D CA                                DEX
0C84E D0 FA                         BNE -
0C850                               
0C850 60                            RTS
0C851                           
0C851                           .include "game/subroutine/ColorizeBall.asm"
0C851                           
0C851                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C851                           ;;
0C851                           ;;  Subroutine: ColorizeBall
0C851                           ;;
0C851                           ;;  Applies the color set through ball_flags to the ball sprite.
0C851                           ;;  Expects ball_flags to be in the accumulator
0C851                           ;;
0C851                           
0C851                           
0C851                           sub_ColorizeBall:
0C851                           
0C851                               ;; Get color from ball_flags
0C851 4A                            LSR
0C852 4A                            LSR
0C853 4A                            LSR
0C854 4A                            LSR
0C855 4A                            LSR
0C856 AA                            TAX
0C857                           
0C857                               ;; Add new light color of ball to PPU palette
0C857 A9 3F                         LDA #$3F
0C859 85 0B                         STA temp
0C85B A9 11                         LDA #$11
0C85D 85 0C                         STA temp+1
0C85F BD 91 D4                      LDA tbl_BallColorLight,x
0C862 85 0D                         STA temp+2
0C864 20 1F D3                      JSR sub_WriteByteToPPUBuffer
0C867                               
0C867                               ;; Add new dark color of ball to PPU palette
0C867 E6 0C                         INC temp+1
0C869 BD 8B D4                      LDA tbl_BallColorDark,x
0C86C 85 0D                         STA temp+2
0C86E 20 1F D3                      JSR sub_WriteByteToPPUBuffer
0C871                               
0C871 60                            RTS
0C872                           
0C872                           .include "game/subroutine/ColorsMatch.asm"
0C872                           
0C872                           ;; Subroutine to check if ball color matches colliding tile color
0C872                           
0C872                           sub_ColorsMatch:
0C872                               ;; Save tile color in temp variable
0C872 A5 4F                         LDA colliding_tile
0C874 29 0E                         AND #%00001110
0C876 85 0B                         STA temp
0C878                           
0C878                               ;; Get ball color
0C878 A5 42                         LDA ball_flags
0C87A 29 E0                         AND #%11100000
0C87C 4A                            LSR
0C87D 4A                            LSR
0C87E 4A                            LSR
0C87F 4A                            LSR
0C880                           
0C880                               ;; Compare with tile color
0C880 C5 0B                         CMP temp
0C882 60                            RTS
0C883                           
0C883                           .include "game/subroutine/ConvertXYToTileType.asm"
0C883                           
0C883                           ;; Subroutine to convert the ball's position to a tile type
0C883                           ;; - Expects temp to be y-position of ball within game area
0C883                           ;; - Expects temp+1 to be x-position of ball within game area
0C883                           ;; - Puts result in accumulator and zp variable
0C883                           ;; - Corrupts X-register
0C883                           
0C883                           sub_ConvertXYToTileType:
0C883 A5 0C                         LDA temp+1
0C885 4A                            LSR
0C886 4A                            LSR
0C887 4A                            LSR
0C888 4A                            LSR
0C889 85 14                         STA temp+9
0C88B A5 0B                         LDA temp
0C88D 29 F0                         AND #%11110000
0C88F 18                            CLC
0C890 65 14                         ADC temp+9
0C892 85 14                         STA temp+9
0C894 AA                            TAX
0C895 BD 00 04                      LDA tile_type, x
0C898 85 4F                         STA colliding_tile
0C89A 60                            RTS
0C89B                           
0C89B                           .include "game/subroutine/DisableEnableRendering.asm"
0C89B                           
0C89B                           ;; Subroutines to disable or enable screen rendering
0C89B                           
0C89B                           sub_DisableRendering:
0C89B                               ;; Force NMI skip, disable rendering
0C89B A9 01                     	LDA #$01
0C89D 85 1F                     	STA force_skip_nmi
0C89F 20 D8 C6                      JSR sub_WaitForVBlank
0C8A2 A5 1D                         LDA soft_ppu_mask
0C8A4 29 E7                         AND #%11100111
0C8A6 8D 01 20                      STA PPU_MASK
0C8A9 85 1D                         STA soft_ppu_mask
0C8AB 20 D8 C6                      JSR sub_WaitForVBlank
0C8AE 60                            RTS
0C8AF                           
0C8AF                           sub_EnableRendering:
0C8AF                               ;; Enable rendering
0C8AF A9 00                     	LDA #$00
0C8B1 8D 05 20                  	STA PPU_SCROLL
0C8B4 8D 05 20                  	STA PPU_SCROLL
0C8B7 20 D8 C6                      JSR sub_WaitForVBlank
0C8BA 85 1F                     	STA force_skip_nmi
0C8BC A5 1D                         LDA soft_ppu_mask
0C8BE 09 18                         ORA #%00011000
0C8C0 85 1D                         STA soft_ppu_mask
0C8C2 8D 01 20                      STA PPU_MASK
0C8C5 20 D8 C6                      JSR sub_WaitForVBlank
0C8C8 60                            RTS
0C8C9                           
0C8C9                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C8C9                           
0C8C9                           ;; Draw a tile from the logo on the intro screen
0C8C9                           sub_drawIntroScreenLogoTile:
0C8C9 B9 65 D3                      LDA tbl_IntroScreenLogoChr,y
0C8CC C9 60                         CMP #$60
0C8CE D0 08                         BNE +
0C8D0 20 AD C6                          JSR sub_GetRandomNumber
0C8D3 29 07                             AND #$07
0C8D5 18                                CLC
0C8D6 69 60                             ADC #$60
0C8D8                               +
0C8D8 8D 07 20                      STA PPU_DATA
0C8DB 60                            RTS
0C8DC                           
0C8DC                           .include "game/subroutine/DrawMoveTile.asm"
0C8DC                           
0C8DC                           ;; Draw the move tile as follows:
0C8DC                           ;;
0C8DC                           ;;  1 2
0C8DC                           ;;  3 4 5
0C8DC                           ;;    6 7
0C8DC                           ;;
0C8DC                           ;; (1,2,3,4) is the move block itself
0C8DC                           ;; (5,6,7) are shades unless that tile is solid
0C8DC                           
0C8DC                           ;; X holds the move block sprite slot
0C8DC                           
0C8DC                           sub_DrawMoveTile:
0C8DC                           
0C8DC                               ;; Get tile type index from sprite x and y values
0C8DC                               ;; and store it in a temp variable
0C8DC BD 78 03                      LDA move_block_x,x
0C8DF 18                            CLC
0C8E0 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C8E2 4A                            LSR
0C8E3 4A                            LSR
0C8E4 4A                            LSR
0C8E5 4A                            LSR
0C8E6 85 14                         STA temp+9
0C8E8 BD 7C 03                      LDA move_block_y,x
0C8EB 18                            CLC
0C8EC 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C8EE 29 F0                         AND #%11110000
0C8F0 18                            CLC
0C8F1 65 14                         ADC temp+9
0C8F3 85 14                         STA temp+9
0C8F5 A8                            TAY
0C8F6                               
0C8F6                               ;; Add move tile data on the new tile location
0C8F6 BD 84 03                      LDA move_block_tile_type,x
0C8F9 99 00 04                      STA tile_type,y
0C8FC                           
0C8FC                               ;; Draw the original tile type in the ppu buffer
0C8FC                               ;; - get PPU address to write to (temp, temp+1)
0C8FC 8A                            TXA
0C8FD 48                            PHA
0C8FE A6 14                         LDX temp+9
0C900 20 BA CB                      JSR sub_GetPPUAddrFromYXIndex
0C903 68                            PLA
0C904 AA                            TAX
0C905                               
0C905                               ;; - based on color, select tile 42 or 4A for top left
0C905 BD 88 03                      LDA move_block_flags,x
0C908 4A                            LSR
0C909 4A                            LSR
0C90A 4A                            LSR
0C90B 4A                            LSR
0C90C 4A                            LSR
0C90D A8                            TAY
0C90E B9 39 DC                      LDA tbl_MoveBlockTopLeftTile,y
0C911 85 13                         STA temp+8
0C913                               
0C913                               ;; - save palette ID in temp+6
0C913 98                            TYA
0C914 4A                            LSR
0C915 85 11                         STA temp+6
0C917                               
0C917                               ;; Prepare PPU buffer
0C917 A4 45                         LDY ppu_buffer_pointer
0C919 A9 00                         LDA #$00
0C91B 85 44                         STA ppu_buffer_update
0C91D                               
0C91D                               ;; Draw tile 1 (top left tile of move block)
0C91D 20 FE C9                      JSR sub_DrawTileTemp018
0C920                           
0C920                               
0C920                               ;; Draw tile 2 (top right tile of move block)
0C920 E6 0C                         INC temp+1
0C922 E6 13                         INC temp+8
0C924 20 FE C9                      JSR sub_DrawTileTemp018
0C927                           
0C927                               ;; Draw tile 3 (bottom left tile of move block)
0C927 A5 0C                         LDA temp+1
0C929 18                            CLC
0C92A 69 1F                         ADC #$1F
0C92C 85 0C                         STA temp+1
0C92E A5 0B                         LDA temp
0C930 69 00                         ADC #$00
0C932 85 0B                         STA temp
0C934 A5 13                         LDA temp+8
0C936 18                            CLC
0C937 69 0F                         ADC #$0F
0C939 85 13                         STA temp+8
0C93B 20 FE C9                      JSR sub_DrawTileTemp018
0C93E                           
0C93E                               ;; Draw tile 4 (bottom right tile of move block)
0C93E E6 0C                         INC temp+1
0C940 E6 13                         INC temp+8
0C942 20 FE C9                      JSR sub_DrawTileTemp018
0C945                           
0C945                               ;; Load tile type offset in X register
0C945 8A                            TXA
0C946 48                            PHA
0C947 A6 14                         LDX temp+9
0C949                               
0C949                               ;; Load shade tile in temp+8
0C949 A9 00                         LDA #$00
0C94B 85 13                         STA temp+8
0C94D                           
0C94D                               ;; Draw tile 5 (right shade) unless tile is solid
0C94D E6 0C                         INC temp+1
0C94F                               
0C94F 8A                            TXA
0C950 29 0F                         AND #%00001111
0C952 C9 0D                         CMP #$0D
0C954 F0 0A                         BEQ +nextTile
0C956                           
0C956 BD 01 04                      LDA tile_type+1,x
0C959 29 01                         AND #%00000001
0C95B D0 03                         BNE +nextTile
0C95D                               
0C95D 20 FE C9                      JSR sub_DrawTileTemp018
0C960                               
0C960                           
0C960                           +nextTile:
0C960                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C960 A5 0C                         LDA temp+1
0C962 18                            CLC
0C963 69 1F                         ADC #$1F
0C965 85 0C                         STA temp+1
0C967 A5 0B                         LDA temp
0C969 69 00                         ADC #$00
0C96B 85 0B                         STA temp
0C96D                           
0C96D 8A                            TXA
0C96E 29 F0                         AND #%11110000
0C970 C9 90                         CMP #$90
0C972 F0 0A                         BEQ +nextTile
0C974                           
0C974 BD 10 04                      LDA tile_type+16,x
0C977 29 01                         AND #%00000001
0C979 D0 03                         BNE +nextTile
0C97B                               
0C97B 20 FE C9                      JSR sub_DrawTileTemp018
0C97E                           
0C97E                               
0C97E                           +nextTile:
0C97E                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C97E E6 0C                         INC temp+1
0C980                           
0C980 8A                            TXA
0C981 29 F0                         AND #%11110000
0C983 C9 90                         CMP #$90
0C985 F0 11                         BEQ +setTileAttributes
0C987                               
0C987 8A                            TXA
0C988 29 0F                         AND #%00001111
0C98A C9 0D                         CMP #$0D
0C98C F0 0A                         BEQ +setTileAttributes
0C98E                               
0C98E BD 11 04                      LDA tile_type+17,x
0C991 29 01                         AND #%00000001
0C993 D0 03                         BNE +setTileAttributes
0C995                               
0C995 20 FE C9                      JSR sub_DrawTileTemp018
0C998                               
0C998                           
0C998                           +setTileAttributes:
0C998                               ;; Update attribute table accordingly through ppu buffer
0C998                               ;; - PPU buffer high byte
0C998 20 90 D2                      JSR sub_SetTileAttributeAddress
0C99B                           
0C99B 8A                            TXA
0C99C 29 10                         AND #%00010000
0C99E F0 05                         BEQ +        
0C9A0 A9 F0                             LDA #%11110000
0C9A2 4C A7 C9                          JMP ++
0C9A5                               +
0C9A5 A9 0F                         LDA #%00001111
0C9A7                               ++
0C9A7 85 0D                         STA temp+2
0C9A9                               
0C9A9 8A                            TXA
0C9AA 29 01                         AND #%00000001
0C9AC F0 07                         BEQ +
0C9AE A5 0D                             LDA temp+2
0C9B0 09 CC                             ORA #%11001100
0C9B2 4C B9 C9                          JMP ++
0C9B5                               +
0C9B5 A5 0D                         LDA temp+2
0C9B7 09 33                         ORA #%00110011
0C9B9                               ++
0C9B9 85 0D                         STA temp+2
0C9BB                               
0C9BB C9 FC                         CMP #%11111100
0C9BD F0 22                         BEQ +continue
0C9BF                               
0C9BF C9 F3                         CMP #%11110011
0C9C1 D0 09                         BNE +
0C9C3 A5 11                             LDA temp+6
0C9C5 0A                                ASL
0C9C6 0A                                ASL
0C9C7 85 11                             STA temp+6
0C9C9 4C E1 C9                          JMP +continue
0C9CC                               +
0C9CC                               
0C9CC C9 CF                         CMP #%11001111
0C9CE D0 0A                         BNE +
0C9D0 A6 11                             LDX temp+6
0C9D2 BD DA DB                          LDA tbl_Times16,x
0C9D5 85 11                             STA temp+6
0C9D7 4C E1 C9                          JMP +continue
0C9DA                               +
0C9DA                               
0C9DA A6 11                         LDX temp+6
0C9DC BD EA DB                      LDA tbl_Times64,x
0C9DF 85 11                         STA temp+6
0C9E1                                   
0C9E1                           +continue:
0C9E1 A5 0B                         LDA temp
0C9E3 38                            SEC
0C9E4 E9 C0                         SBC #$C0
0C9E6 AA                            TAX
0C9E7 BD A0 04                      LDA tile_attributes,x
0C9EA 25 0D                         AND temp+2
0C9EC 05 11                         ORA temp+6
0C9EE 9D A0 04                      STA tile_attributes,x
0C9F1 99 00 03                      STA ppu_buffer,y
0C9F4 C8                            INY
0C9F5                           
0C9F5                               ;; Restore original X
0C9F5 68                            PLA
0C9F6 AA                            TAX
0C9F7                               
0C9F7                               ;; Update PPU buffer
0C9F7 84 45                         STY ppu_buffer_pointer
0C9F9 A9 01                         LDA #$01
0C9FB 85 44                         STA ppu_buffer_update
0C9FD                           
0C9FD                               ;; Return
0C9FD 60                            RTS
0C9FE                           
0C9FE                           .include "game/subroutine/DrawTileTemp018.asm"
0C9FE                           
0C9FE                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C9FE                           
0C9FE                           sub_DrawTileTemp018:
0C9FE A5 0B                         LDA temp
0CA00 99 00 03                      STA ppu_buffer,y
0CA03 C8                            INY
0CA04 A5 0C                         LDA temp+1
0CA06 99 00 03                      STA ppu_buffer,y
0CA09 C8                            INY
0CA0A A5 13                         LDA temp+8
0CA0C 99 00 03                      STA ppu_buffer,y
0CA0F C8                            INY
0CA10 60                            RTS
0CA11                           
0CA11                           .include "game/subroutine/EvaluateTileType.asm"
0CA11                           
0CA11                           ;; Subroutine to evaluate the colliding tile type and take its
0CA11                           ;; corresponding action (move block, kill player, ...)
0CA11                           ;; - Expects X-register to be the tile_type offset
0CA11                           ;; - Uses zp variable colliding_tile
0CA11                           
0CA11                           sub_EvaluateTileType:
0CA11                           
0CA11                               ;; Check if collided tile is a color block
0CA11 A5 4F                         LDA colliding_tile
0CA13 29 80                         AND #IS_COLOR_BLOCK
0CA15 D0 03                         BNE +
0CA17 4C 80 CA                          JMP +checkIfPaintBlock
0CA1A                               +
0CA1A                               
0CA1A                               ;; It's a color block. Check if the colors match
0CA1A 20 72 C8                      JSR sub_ColorsMatch
0CA1D F0 06                         BEQ +
0CA1F                                   ;; Colors don't match
0CA1F                                   ;; Play bounce sound effect
0CA1F A2 02                             LDX #SFX_BOUNCE
0CA21 20 0B D1                          JSR sub_PreloadSfxFromX
0CA24                                   
0CA24                                   ;; Return
0CA24 60                                RTS
0CA25                               +
0CA25                           
0CA25                               ;; Colors match; destroy color block
0CA25                               
0CA25                               ;; Convert the metatile offset value (which is in the X register)
0CA25                               ;; to its corresponding address in PPU
0CA25 20 BA CB                      JSR sub_GetPPUAddrFromYXIndex
0CA28                           
0CA28                               ;; Remove color block from screen by drawing a total
0CA28                               ;; of 7 tiles over it (shade included)
0CA28 20 1A D1                      JSR sub_RemoveBlockFromScreen
0CA2B                               
0CA2B                               ;; - Load destruction animation on tile
0CA2B                               ;; Get most recent slot for explosion    
0CA2B 8A                            TXA
0CA2C 85 0D                         STA temp+2
0CA2E A6 46                         LDX explosion_pointer
0CA30                           
0CA30                               ;; If 0, use max pointer value
0CA30 D0 02                         BNE +
0CA32 A2 04                             LDX #MAX_ANIMATIONS
0CA34                               +
0CA34                           
0CA34                               ;; Decrease pointer by one
0CA34 CA                            DEX
0CA35 86 46                         STX explosion_pointer
0CA37                           
0CA37                               ;; Load explosion data into RAM
0CA37 A9 00                         LDA #$00
0CA39 9D 64 03                      STA explosion_currentframe,x
0CA3C                           
0CA3C A9 04                         LDA #ANIMATION_SPEED
0CA3E 9D 60 03                      STA explosion_timer,x
0CA41                           
0CA41 A5 0D                         LDA temp+2
0CA43 29 0F                         AND #%00001111
0CA45 A8                            TAY
0CA46 B9 DA DB                      LDA tbl_Times16,y
0CA49 18                            CLC
0CA4A 69 0E                         ADC #$0E
0CA4C 9D 6C 03                      STA explosion_x,x
0CA4F                           
0CA4F A5 0D                         LDA temp+2
0CA51 29 F0                         AND #%11110000
0CA53 18                            CLC
0CA54 69 29                         ADC #$29
0CA56 9D 70 03                      STA explosion_y,x
0CA59                           
0CA59 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0CA5B 9D 68 03                      STA explosion_attributes,x
0CA5E A9 01                         LDA #$01
0CA60 9D 74 03                      STA explosion_active,x
0CA63                           
0CA63 A5 0D                         LDA temp+2
0CA65 AA                            TAX
0CA66                               
0CA66                               
0CA66                               ;; - Write #$00 in tile type ram (makes not-solid)
0CA66 A9 00                         LDA #$00
0CA68 9D 00 04                      STA tile_type, x
0CA6B                           
0CA6B                           
0CA6B                               ;; Add (80 + level number) to score
0CA6B A5 4E                         LDA current_level
0CA6D 18                            CLC
0CA6E 69 51                         ADC #81
0CA70 20 DE C6                      JSR sub_AddAccumulatorToScore
0CA73                           
0CA73                           
0CA73                               ;; Play thud sound effect
0CA73 A2 01                         LDX #SFX_THUD
0CA75 20 0B D1                      JSR sub_PreloadSfxFromX
0CA78                           
0CA78                           
0CA78                               ;; - If there are no color blocks left:
0CA78                               ;;   - Initiate level-win state
0CA78 C6 50                         DEC blocks_left
0CA7A D0 03                         BNE +
0CA7C 4C CC C4                          JMP lbl_LevelWin
0CA7F                               +
0CA7F                               
0CA7F 60                            RTS
0CA80                           
0CA80                           
0CA80                           
0CA80                           +checkIfPaintBlock:
0CA80                           
0CA80                               ;; Check if collided tile is a paint block
0CA80 A5 4F                         LDA colliding_tile
0CA82 29 20                         AND #IS_PAINT_BLOCK
0CA84 F0 1E                         BEQ +checkIfDeathBlock
0CA86                                   ;; It's a paint block. Update ball color
0CA86                                   ;; Save x-register
0CA86 8A                                TXA
0CA87 48                                PHA
0CA88                           
0CA88                                   ;; Get tile color
0CA88 A5 4F                             LDA colliding_tile
0CA8A 29 0E                             AND #%00001110
0CA8C 0A                                ASL
0CA8D 0A                                ASL
0CA8E 0A                                ASL
0CA8F 0A                                ASL
0CA90 85 0B                             STA temp
0CA92                           
0CA92                                   ;; Apply tile color to ball
0CA92 A5 42                             LDA ball_flags
0CA94 29 1F                             AND #%00011111
0CA96 05 0B                             ORA temp
0CA98 85 42                             STA ball_flags
0CA9A 20 51 C8                          JSR sub_ColorizeBall
0CA9D                           
0CA9D                                   ;; Play paint sound effect
0CA9D A9 10                             LDA #$10
0CA9F 85 5C                             STA sfx_timer+2
0CAA1                           
0CAA1                                   ;; Restore x-register
0CAA1 68                                PLA
0CAA2 AA                                TAX
0CAA3                           
0CAA3                                   ;; Return
0CAA3 60                                RTS
0CAA4                                   
0CAA4                                   
0CAA4                                   
0CAA4                           +checkIfDeathBlock:
0CAA4                           
0CAA4                               ;; Check if collided tile is a death block
0CAA4 A5 4F                         LDA colliding_tile
0CAA6 29 10                         AND #IS_DEATH_BLOCK
0CAA8 F0 3D                         BEQ +checkIfMoveBlock
0CAAA                           
0CAAA                           ;; Also, when the player presses select during gameplay,
0CAAA                           ;; insta-selfdestruct the ball.
0CAAA                           sub_Selfdestruct:
0CAAA                           
0CAAA                                   ;; It is a death block
0CAAA                                   ;; Freeze and kill player
0CAAA A5 42                             LDA ball_flags
0CAAC 09 05                             ORA #%00000101
0CAAE 85 42                             STA ball_flags
0CAB0                                   
0CAB0                                   ;; Get free explosion slot
0CAB0 A6 46                             LDX explosion_pointer
0CAB2 D0 02                             BNE +
0CAB4 A2 04                                 LDX #MAX_ANIMATIONS
0CAB6                                   +
0CAB6 CA                                DEX
0CAB7 86 46                             STX explosion_pointer
0CAB9                           
0CAB9                                   ;; Load explosion data into RAM
0CAB9 A9 00                             LDA #$00
0CABB 9D 64 03                          STA explosion_currentframe,x
0CABE                           
0CABE A9 04                             LDA #ANIMATION_SPEED
0CAC0 9D 60 03                          STA explosion_timer,x
0CAC3                           
0CAC3 A5 22                             LDA ball_xpos_hi
0CAC5 38                                SEC
0CAC6 E9 08                             SBC #$08
0CAC8 9D 6C 03                          STA explosion_x,x
0CACB                           
0CACB A5 24                             LDA ball_ypos_hi
0CACD 38                                SEC
0CACE E9 06                             SBC #$06
0CAD0 9D 70 03                          STA explosion_y,x
0CAD3                           
0CAD3 A9 01                             LDA #$01
0CAD5 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0CAD8 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0CADB 85 57                             STA noise_muted             ; mute background noise
0CADD                                   
0CADD                                   ;; Play explosion sound effect
0CADD A2 00                             LDX #SFX_EXPLOSION
0CADF 20 0B D1                          JSR sub_PreloadSfxFromX
0CAE2                           
0CAE2                                   ;; Set kill timer
0CAE2 A9 60                             LDA #$60
0CAE4 85 4B                             STA kill_timer
0CAE6                           
0CAE6                                   ;; Return
0CAE6 60                                RTS
0CAE7                           
0CAE7                           
0CAE7                           
0CAE7                           +checkIfMoveBlock:
0CAE7                           
0CAE7                               ;; Check if collided tile is a move block
0CAE7 A5 4F                         LDA colliding_tile
0CAE9 29 40                         AND #IS_MOVE_BLOCK
0CAEB D0 06                         BNE +
0CAED                                   ;; Tile is not a move block
0CAED                                   ;; Therefore, it is a solid wall
0CAED                                   
0CAED                                   ;; Play bounce sound effect
0CAED A2 02                             LDX #SFX_BOUNCE
0CAEF 20 0B D1                          JSR sub_PreloadSfxFromX
0CAF2                           
0CAF2                                   ;; Return
0CAF2 60                                RTS
0CAF3                               +
0CAF3                           
0CAF3                               ;; It is a move block. Check if colors match
0CAF3 20 72 C8                      JSR sub_ColorsMatch
0CAF6 F0 06                         BEQ +
0CAF8                                   ;; Colors do not match
0CAF8                                   ;; Play bounce sound effect
0CAF8 A2 02                             LDX #SFX_BOUNCE
0CAFA 20 0B D1                          JSR sub_PreloadSfxFromX
0CAFD                           
0CAFD                                   ;; Return
0CAFD 60                                RTS
0CAFE                               +
0CAFE                           
0CAFE                               ;; Colors match
0CAFE                               ;; - Check if next tile is within the playground
0CAFE                               ;; (push X onto stack as well)
0CAFE 8A                            TXA
0CAFF 48                            PHA
0CB00 18                            CLC
0CB01 65 41                         ADC move_block_space_to_check
0CB03 AA                            TAX
0CB04                               
0CB04 29 0F                         AND #%00001111
0CB06 C9 0E                         CMP #$0E
0CB08 90 03                         BCC +
0CB0A 4C 82 CB                          JMP +dontMoveBlock
0CB0D                               +
0CB0D 8A                            TXA
0CB0E 29 F0                         AND #%11110000
0CB10 C9 A0                         CMP #$A0
0CB12 D0 03                         BNE +
0CB14 4C 82 CB                          JMP +dontMoveBlock
0CB17                               +
0CB17 C9 F0                         CMP #$F0
0CB19 D0 03                         BNE +
0CB1B 4C 82 CB                          JMP +dontMoveBlock
0CB1E                               +
0CB1E                               
0CB1E                               ;; Check if the next tile is solid
0CB1E BD 00 04                      LDA tile_type,x
0CB21 29 01                         AND #TILE_IS_SOLID
0CB23 F0 03                         BEQ +
0CB25 4C 82 CB                          JMP +dontMoveBlock
0CB28                               +
0CB28                               
0CB28                               ;; Move block has room to move
0CB28                               ;; Pull original X from stack
0CB28 68                            PLA
0CB29 AA                            TAX        
0CB2A                               
0CB2A                               ;; Add the tiles that need updating to ppu buffer, and
0CB2A                               ;; update attribute table accordingly through ppu buffer
0CB2A 20 BA CB                      JSR sub_GetPPUAddrFromYXIndex
0CB2D 20 1A D1                      JSR sub_RemoveBlockFromScreen
0CB30                           
0CB30                               ;; Store original tile type in temp variable
0CB30 BD 00 04                      LDA tile_type,x
0CB33 85 13                         STA temp+8
0CB35                           
0CB35                               ;; Write #$00 in tile type ram (makes not-solid)
0CB35 A9 00                         LDA #$00
0CB37 9D 00 04                      STA tile_type,x
0CB3A                           
0CB3A                               ;; Add move tile sprite over the original tile
0CB3A                               ;; - Store x in temp variable
0CB3A 86 0E                         STX temp+3
0CB3C                               
0CB3C                               ;; - Update move block pointer
0CB3C A6 47                         LDX move_block_pointer
0CB3E D0 02                         BNE +
0CB40 A2 04                             LDX #MAX_ANIMATIONS
0CB42                               +
0CB42 CA                            DEX
0CB43 86 47                         STX move_block_pointer
0CB45                           
0CB45                               ;; = Set move block tile type
0CB45 A5 13                         LDA temp+8
0CB47 9D 84 03                      STA move_block_tile_type,x
0CB4A                           
0CB4A                               ;; - Set move block X position
0CB4A A5 0E                         LDA temp+3
0CB4C 29 0F                         AND #%00001111
0CB4E A8                            TAY
0CB4F C8                            INY
0CB50 B9 DA DB                      LDA tbl_Times16,y
0CB53 9D 78 03                      STA move_block_x,x
0CB56                               
0CB56                               ;; - Set move block Y position
0CB56 A5 0E                         LDA temp+3
0CB58 29 F0                         AND #%11110000
0CB5A 18                            CLC
0CB5B 69 30                         ADC #$30
0CB5D 9D 7C 03                      STA move_block_y,x
0CB60 DE 7C 03                      DEC move_block_y,x
0CB63                               
0CB63                               ;; - Set timer to 16 (+1) frames
0CB63 A9 11                         LDA #$11
0CB65 9D 80 03                      STA move_block_timer,x
0CB68                               
0CB68                               ;; - Set move direction
0CB68 A5 41                         LDA move_block_space_to_check
0CB6A 29 81                         AND #%10000001
0CB6C 18                            CLC
0CB6D 2A                            ROL
0CB6E 69 00                         ADC #$00
0CB70 85 0F                         STA temp+4
0CB72                               
0CB72                               ;; - Set block color as ball color and add direction
0CB72 A5 42                         LDA ball_flags
0CB74 29 E0                         AND #BALL_COLOR
0CB76 05 0F                         ORA temp+4
0CB78 9D 88 03                      STA move_block_flags,x
0CB7B                               
0CB7B                               ;; - Restore original X
0CB7B A6 0E                         LDX temp+3
0CB7D                               
0CB7D                               ;; - Initiate move sound effect
0CB7D A9 18                         LDA #$18
0CB7F 85 5B                         STA sfx_timer+1
0CB81                           
0CB81                               ;; Return
0CB81 60                            RTS
0CB82                           
0CB82                           
0CB82                           ;; Do not move the move block
0CB82                           +dontMoveBlock:
0CB82                           
0CB82                               ;; Play bounce sound effect
0CB82 A2 02                         LDX #SFX_BOUNCE
0CB84 20 0B D1                      JSR sub_PreloadSfxFromX
0CB87                           
0CB87                               ;; Restore X from stack
0CB87 68                            PLA
0CB88 AA                            TAX
0CB89                               
0CB89                               ;; Return
0CB89 60                            RTS
0CB8A                           
0CB8A                           .include "game/subroutine/FlashEffect.asm"
0CB8A                           
0CB8A                           ;; Apply flashing light effect to background color
0CB8A                           sub_FlashEffect:
0CB8A A2 00                         LDX #$00
0CB8C 86 0C                         STX temp+1
0CB8E A9 3F                         LDA #$3F
0CB90 85 0B                         STA temp
0CB92                           
0CB92                               -flashLoop:
0CB92 BD 4A DC                          LDA tbl_BackgroundFade,x
0CB95 85 0D                             STA temp+2
0CB97 20 1F D3                          JSR sub_WriteByteToPPUBuffer
0CB9A A9 0D                             LDA #$0D
0CB9C 85 0C                             STA temp+1
0CB9E 20 1F D3                          JSR sub_WriteByteToPPUBuffer
0CBA1 A9 19                             LDA #$19
0CBA3 85 0C                             STA temp+1
0CBA5 20 1F D3                          JSR sub_WriteByteToPPUBuffer
0CBA8 A9 00                             LDA #$00
0CBAA 85 0C                             STA temp+1
0CBAC A0 03                             LDY #$03
0CBAE                                   -
0CBAE 20 CF C6                              JSR sub_WaitForNMI
0CBB1 88                                    DEY
0CBB2 D0 FA                             BNE -
0CBB4 E8                                INX
0CBB5 E0 0A                             CPX #$0A
0CBB7 D0 D9                         BNE -flashLoop
0CBB9                               
0CBB9 60                            RTS
0CBBA                           
0CBBA                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0CBBA                           
0CBBA                           ;; Get the PPU address from YX index
0CBBA                           ;; - Expects YX index (aka tile offset) to be in the X register
0CBBA                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0CBBA                           
0CBBA                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0CBBA                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0CBBA                           
0CBBA                           sub_GetPPUAddrFromYXIndex:
0CBBA 8A                            TXA
0CBBB 29 C0                         AND #%11000000
0CBBD 18                            CLC
0CBBE 2A                            ROL
0CBBF 2A                            ROL
0CBC0 2A                            ROL
0CBC1 69 20                         ADC #$20
0CBC3 85 0B                         STA temp
0CBC5                               
0CBC5 8A                            TXA
0CBC6 29 0F                         AND #%00001111
0CBC8 0A                            ASL
0CBC9 85 0C                         STA temp+1
0CBCB                               
0CBCB 8A                            TXA
0CBCC 29 30                         AND #%00110000
0CBCE 0A                            ASL
0CBCF 0A                            ASL
0CBD0 18                            CLC
0CBD1 65 0C                         ADC temp+1
0CBD3 85 0C                         STA temp+1
0CBD5                               
0CBD5 A5 0B                         LDA temp
0CBD7 69 00                         ADC #$00
0CBD9 85 0B                         STA temp
0CBDB                               
0CBDB A5 0C                         LDA temp+1
0CBDD 18                            CLC
0CBDE 69 C2                         ADC #$C2
0CBE0 85 0C                         STA temp+1
0CBE2                               
0CBE2 A5 0B                         LDA temp
0CBE4 69 00                         ADC #$00
0CBE6 85 0B                         STA temp
0CBE8                           
0CBE8 60                            RTS
0CBE9                           
0CBE9                           .include "game/subroutine/InitiateNudge.asm"
0CBE9                           
0CBE9                           ;; Tell ball to nudge
0CBE9                           sub_InitiateNudge:
0CBE9 85 42                         STA ball_flags
0CBEB A9 06                         LDA #NUDGE_FRAMES
0CBED 85 49                         STA nudge_timer
0CBEF 60                            RTS
0CBF0                           
0CBF0                           .include "game/subroutine/JumpToPointer.asm"
0CBF0                           
0CBF0                           ;; Helper subroutine to JSR to a variable pointer address
0CBF0                           sub_JumpToPointer:
0CBF0 6C 17 00                      JMP (pointer)
0CBF3                               ;RTS must be handled by the routine (pointer) jumps to
0CBF3                           
0CBF3                           .include "game/subroutine/LoadAnimations.asm"
0CBF3                           
0CBF3                           sub_LoadAnimations:
0CBF3                           
0CBF3                               ;; Set up loop
0CBF3 A2 00                         LDX #$00
0CBF5                               -loop_load_animation:
0CBF5                                   ;; Check if current animation is active. If not, goto next
0CBF5 BD 74 03                          LDA explosion_active,x
0CBF8 D0 03                             BNE +
0CBFA 4C 85 CC                              JMP +next
0CBFD                                   +
0CBFD                           
0CBFD                                   ;; Check the explosion framecounter
0CBFD BD 60 03                          LDA explosion_timer,x
0CC00 D0 17                             BNE +
0CC02                                       ;; Frametimer is 0
0CC02                                       ;; Reset to animation speed
0CC02 A9 04                                 LDA #ANIMATION_SPEED
0CC04 9D 60 03                              STA explosion_timer,x
0CC07                           
0CC07                                       ;; Set next animation frame, and check if we're done yet
0CC07 FE 64 03                              INC explosion_currentframe,x
0CC0A BD 64 03                              LDA explosion_currentframe,x
0CC0D C9 0A                                 CMP #ANIM_SLIDES
0CC0F D0 08                                 BNE +
0CC11                           
0CC11                                       ;; If we're done, inactivate current explosion, go to the next one
0CC11 A9 00                                 LDA #$00
0CC13 9D 74 03                              STA explosion_active,x
0CC16 4C 85 CC                              JMP +next
0CC19                                   +
0CC19                           
0CC19                                   ;; Load (x,y) position in temp variables
0CC19 BD 6C 03                          LDA explosion_x,x
0CC1C 85 0C                             STA temp+1
0CC1E 85 0E                             STA temp+3
0CC20 BD 70 03                          LDA explosion_y,x
0CC23 85 0D                             STA temp+2
0CC25                           
0CC25                                   ;; Load attribute in temp variable
0CC25 BD 68 03                          LDA explosion_attributes,x
0CC28 85 0F                             STA temp+4
0CC2A                           
0CC2A                                   ;; Load current frame into Y-register
0CC2A BC 64 03                          LDY explosion_currentframe,x
0CC2D                           
0CC2D                                   ;; Load current frame ROM address from table
0CC2D B9 81 D4                          LDA explosion_anim_lo,y
0CC30 85 17                             STA pointer
0CC32 B9 77 D4                          LDA explosion_anim_hi,y
0CC35 85 18                             STA pointer+1
0CC37                           
0CC37                                   ;; Save x-register on stack
0CC37 8A                                TXA
0CC38 48                                PHA
0CC39                           
0CC39                                   ;; Load sprites into sprite RAM
0CC39 A6 48                             LDX sprite_ram_pointer
0CC3B A0 00                             LDY #$00
0CC3D                           
0CC3D                                   ;; Prepare (x,y) offset for loop
0CC3D 84 0B                             STY temp
0CC3F                           
0CC3F                                   -loop_load_sprite:
0CC3F                                   
0CC3F                                       ;; Do not draw empty sprites
0CC3F B1 17                                 LDA (pointer),y
0CC41 F0 18                                 BEQ +nextSprite
0CC43                                   
0CC43                                           ;; Add y-position to sprite ram buffer
0CC43 A5 0D                                     LDA temp+2
0CC45 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC48 E8                                        INX
0CC49                           
0CC49                                           ;; Get tile number from frame ROM address, and
0CC49                                           ;; add it to sprite ram buffer
0CC49 B1 17                                     LDA (pointer),y
0CC4B 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC4E E8                                        INX
0CC4F                           
0CC4F                                           ;; Add attribute data to sprite ram buffer
0CC4F A5 0F                                     LDA temp+4
0CC51 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC54 E8                                        INX
0CC55                           
0CC55                                           ;; Add x-position to sprite ram buffer
0CC55 A5 0E                                     LDA temp+3
0CC57 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC5A E8                                        INX
0CC5B                           
0CC5B                                       +nextSprite:
0CC5B                           
0CC5B                                       ;; Check if all sprites are done
0CC5B C8                                    INY
0CC5C C0 09                                 CPY #SLIDE_SIZE
0CC5E F0 21                                 BEQ +updateSpriteRamPointer
0CC60                           
0CC60                                       ;; Update x value
0CC60 A5 0E                                 LDA temp+3
0CC62 18                                    CLC
0CC63 69 08                                 ADC #$08
0CC65 85 0E                                 STA temp+3
0CC67                           
0CC67                                       ;; Update temp for x,y position
0CC67 E6 0B                                 INC temp
0CC69 A5 0B                                 LDA temp
0CC6B C9 03                                 CMP #SLIDE_WIDTH
0CC6D D0 0F                                 BNE +
0CC6F                                           ;; Row is done; reset x-position
0CC6F A5 0C                                     LDA temp+1
0CC71 85 0E                                     STA temp+3
0CC73                           
0CC73                                           ;; Update y-position
0CC73 A5 0D                                     LDA temp+2
0CC75 18                                        CLC
0CC76 69 08                                     ADC #$08
0CC78 85 0D                                     STA temp+2
0CC7A                           
0CC7A                                           ;; Reset row timer
0CC7A A9 00                                     LDA #$00
0CC7C 85 0B                                     STA temp
0CC7E                                       +
0CC7E                           
0CC7E 4C 3F CC                          JMP -loop_load_sprite
0CC81                           
0CC81                               +updateSpriteRamPointer:
0CC81 86 48                             STX sprite_ram_pointer
0CC83                           
0CC83                                   ;; Retrieve x-register from stack
0CC83 68                                PLA
0CC84 AA                                TAX
0CC85                           
0CC85                               +next:
0CC85                                   ;; Check if all animations have been updated
0CC85 E8                                INX
0CC86 E0 04                             CPX #MAX_ANIMATIONS
0CC88 F0 03                             BEQ +cleanUpSpriteRam
0CC8A                           
0CC8A 4C F5 CB                      JMP -loop_load_animation
0CC8D                           
0CC8D                           +cleanUpSpriteRam:
0CC8D A6 48                         LDX sprite_ram_pointer
0CC8F A9 EF                         LDA #$EF
0CC91                               -
0CC91 9D 00 02                          STA ADDR_SPRITERAM,x
0CC94 E8                                INX
0CC95 D0 FA                         BNE -
0CC97                               
0CC97 60                            RTS
0CC98                               
0CC98                           .include "game/subroutine/LoadGameScreen.asm"
0CC98                           
0CC98                           ;; Load the game screen, based on level number
0CC98                           sub_LoadGameScreen:
0CC98                           
0CC98                               ;; Clear the screen
0CC98 20 E6 C7                      JSR sub_ClearScreen
0CC9B                               
0CC9B                               ;; Clear collision and attribute data; reset blocks left in the process
0CC9B A2 00                         LDX #$00
0CC9D 8A                            TXA
0CC9E 85 50                         STA blocks_left
0CCA0                               -
0CCA0 9D 00 04                          STA tile_type,x
0CCA3 E8                                INX
0CCA4 D0 FA                         BNE -
0CCA6                               
0CCA6                               ;; Get pointer from current level
0CCA6 A6 4E                         LDX current_level
0CCA8 BD 8F DB                      LDA tbl_lvl_layout_lo,x
0CCAB 85 17                         STA pointer
0CCAD BD 76 DB                      LDA tbl_lvl_layout_hi,x
0CCB0 85 18                         STA pointer+1
0CCB2                           
0CCB2                               ;; Set up the loop
0CCB2 A0 00                         LDY #$00
0CCB4                           -drawRowColumnLoop:
0CCB4                           
0CCB4                               ;; Load (x,y) of current set of tiles
0CCB4 B1 17                         LDA (pointer),y
0CCB6                           
0CCB6                               ;; Check if level is done; if so, skip the loop
0CCB6 C9 FF                         CMP #LEVEL_END
0CCB8 D0 03                         BNE +
0CCBA 4C 03 CE                          JMP +doneLevelLoad
0CCBD                               +
0CCBD                           
0CCBD                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CCBD 85 0B                         STA temp
0CCBF C8                            INY
0CCC0 B1 17                         LDA (pointer),y
0CCC2 85 0C                         STA temp+1
0CCC4                               
0CCC4                               ;; Convert (x,y) to PPU address
0CCC4                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CCC4 A5 0B                         LDA temp
0CCC6 29 0F                         AND #%00001111
0CCC8 4A                            LSR
0CCC9 4A                            LSR
0CCCA 09 20                         ORA #$20
0CCCC 85 0D                         STA temp+2
0CCCE                               
0CCCE                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CCCE A5 0B                         LDA temp
0CCD0 29 F0                         AND #%11110000
0CCD2 4A                            LSR
0CCD3 4A                            LSR
0CCD4 4A                            LSR
0CCD5 85 0E                         STA temp+3
0CCD7                               
0CCD7 A5 0B                         LDA temp
0CCD9 29 03                         AND #%00000011
0CCDB AA                            TAX
0CCDC BD EA DB                      LDA tbl_Times64,x
0CCDF 18                            CLC
0CCE0 65 0E                         ADC temp+3
0CCE2 18                            CLC
0CCE3 69 C2                         ADC #$C2
0CCE5 85 0E                         STA temp+3
0CCE7                               
0CCE7                               ;; Add carry to temp+2
0CCE7 A5 0D                         LDA temp+2
0CCE9 69 00                         ADC #$00
0CCEB 85 0D                         STA temp+2
0CCED                           
0CCED                               ;; Convert tile data to loop count and tile type
0CCED                               ;; temp+4 = color
0CCED A5 0C                         LDA temp+1
0CCEF 29 07                         AND #%00000111
0CCF1 85 0F                         STA temp+4
0CCF3                               
0CCF3                               ;; If color = 7, this is a wall
0CCF3 C9 07                         CMP #%00000111
0CCF5 F0 12                         BEQ +wallHack
0CCF7                                   
0CCF7                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CCF7 29 01                             AND #%00000001
0CCF9 F0 02                             BEQ +
0CCFB A9 05                                 LDA #$05
0CCFD                                   +
0CCFD 85 12                             STA temp+7
0CCFF                                
0CCFF                                   ;; temp+5 = tile type
0CCFF A5 0C                             LDA temp+1
0CD01 4A                                LSR
0CD02 4A                                LSR
0CD03 4A                                LSR
0CD04 29 03                             AND #%00000011
0CD06 4C 0F CD                          JMP +setTileType
0CD09                               +wallHack:
0CD09                               
0CD09                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CD09 A9 00                         LDA #$00
0CD0B 85 12                         STA temp+7
0CD0D A9 04                         LDA #$04
0CD0F                           
0CD0F                           +setTileType:    
0CD0F 85 10                         STA temp+5
0CD11                               
0CD11                               ;; X = tile offset
0CD11 18                            CLC
0CD12 65 12                         ADC temp+7
0CD14 AA                            TAX
0CD15                               
0CD15                               ;; temp+6 = number of tiles
0CD15 A5 0C                         LDA temp+1
0CD17 29 60                         AND #%01100000
0CD19 4A                            LSR
0CD1A 4A                            LSR
0CD1B 4A                            LSR
0CD1C 4A                            LSR
0CD1D 4A                            LSR
0CD1E 85 11                         STA temp+6
0CD20                               
0CD20                               ;; Translate (x,y) to (y,x) for tile RAM
0CD20 A5 0B                         LDA temp
0CD22 0A                            ASL
0CD23 0A                            ASL
0CD24 0A                            ASL
0CD25 0A                            ASL
0CD26 85 13                         STA temp+8
0CD28 A5 0B                         LDA temp
0CD2A 4A                            LSR
0CD2B 4A                            LSR
0CD2C 4A                            LSR
0CD2D 4A                            LSR
0CD2E 05 13                         ORA temp+8
0CD30 85 0B                         STA temp
0CD32                               
0CD32                               ;; Set up loop
0CD32 98                            TYA
0CD33 48                            PHA
0CD34 A4 11                         LDY temp+6
0CD36                           
0CD36                               -drawTileLoop:
0CD36                                   ;; Write PPU address
0CD36 2C 02 20                          BIT PPU_STATUS
0CD39 A5 0D                             LDA temp+2
0CD3B 8D 06 20                          STA PPU_ADDR
0CD3E A5 0E                             LDA temp+3
0CD40 8D 06 20                          STA PPU_ADDR
0CD43                                   
0CD43                                   ;; Write first and second tile
0CD43 BD EE DB                          LDA tbl_GametileTopLeft,x
0CD46 8D 07 20                          STA PPU_DATA
0CD49 BD F8 DB                          LDA tbl_GametileTopRight,x
0CD4C 8D 07 20                          STA PPU_DATA
0CD4F                                   
0CD4F                                   ;; Update PPU address
0CD4F 2C 02 20                          BIT PPU_STATUS
0CD52 A5 0D                             LDA temp+2
0CD54 8D 06 20                          STA PPU_ADDR
0CD57 A5 0E                             LDA temp+3
0CD59 18                                CLC
0CD5A 69 20                             ADC #$20
0CD5C 8D 06 20                          STA PPU_ADDR
0CD5F                                   
0CD5F                                   ;; Write third and fourth tile
0CD5F BD 02 DC                          LDA tbl_GametileBottomLeft,x
0CD62 8D 07 20                          STA PPU_DATA
0CD65 BD 0C DC                          LDA tbl_GametileBottomRight,x
0CD68 8D 07 20                          STA PPU_DATA
0CD6B                           
0CD6B                                   ;; Push x-register to stack
0CD6B 8A                                TXA
0CD6C 48                                PHA
0CD6D                           
0CD6D                                   ;; Update tile RAM (aka collision table)
0CD6D A6 10                             LDX temp+5
0CD6F BD 16 DC                          LDA tbl_GameTileRamByte,x
0CD72 05 0F                             ORA temp+4
0CD74 0A                                ASL
0CD75 09 01                             ORA #%00000001
0CD77 A6 0B                             LDX temp
0CD79 9D 00 04                          STA tile_type,x
0CD7C                           
0CD7C                                   ;; Check if shade 1 should be drawn
0CD7C E8                                INX
0CD7D BD 00 04                          LDA tile_type,x
0CD80 D0 05                             BNE +
0CD82 A9 00                                 LDA #$00
0CD84 8D 07 20                              STA PPU_DATA
0CD87                                   +
0CD87                                   
0CD87                                   ;; Check if shade 2 should be drawn
0CD87 A5 0E                             LDA temp+3
0CD89 18                                CLC
0CD8A 69 41                             ADC #$41
0CD8C 85 0E                             STA temp+3
0CD8E A5 0D                             LDA temp+2
0CD90 69 00                             ADC #$00
0CD92 85 0D                             STA temp+2
0CD94                                   
0CD94 8A                                TXA
0CD95 18                                CLC
0CD96 69 0F                             ADC #$0F
0CD98 AA                                TAX
0CD99                                   
0CD99 BD 00 04                          LDA tile_type,x
0CD9C D0 0F                             BNE +
0CD9E A5 0D                                 LDA temp+2
0CDA0 8D 06 20                              STA PPU_ADDR
0CDA3 A5 0E                                 LDA temp+3
0CDA5 8D 06 20                              STA PPU_ADDR
0CDA8 A9 00                                 LDA #$00
0CDAA 8D 07 20                              STA PPU_DATA
0CDAD                                   +
0CDAD                           
0CDAD                                   ;; Check if shade 3 should be drawn
0CDAD E8                                INX
0CDAE E6 0E                             INC temp+3
0CDB0 BD 00 04                          LDA tile_type,x
0CDB3 D0 0F                             BNE +
0CDB5 A5 0D                                 LDA temp+2
0CDB7 8D 06 20                              STA PPU_ADDR
0CDBA A5 0E                                 LDA temp+3
0CDBC 8D 06 20                              STA PPU_ADDR
0CDBF A9 00                                 LDA #$00
0CDC1 8D 07 20                              STA PPU_DATA
0CDC4                                   +
0CDC4                                   
0CDC4                                   ;; Restore x-register from stack
0CDC4 68                                PLA
0CDC5 AA                                TAX
0CDC6                                   
0CDC6                                   ;; Reset pointer for next tile
0CDC6 A5 0E                             LDA temp+3
0CDC8 38                                SEC
0CDC9 E9 42                             SBC #$42
0CDCB 85 0E                             STA temp+3
0CDCD A5 0D                             LDA temp+2
0CDCF E9 00                             SBC #$00
0CDD1 85 0D                             STA temp+2
0CDD3                                   
0CDD3                                   ;; Draw next metatile in this loop (if any left)
0CDD3 88                                DEY
0CDD4 30 27                             BMI +doneDrawingRowColumn
0CDD6                                   
0CDD6                                   ;; Is it a row or a column?
0CDD6 A5 0C                             LDA temp+1
0CDD8 10 17                             BPL +
0CDDA                                       ;; It is a column: move pointer down (+$40)
0CDDA A5 0E                                 LDA temp+3
0CDDC 18                                    CLC
0CDDD 69 40                                 ADC #$40
0CDDF 85 0E                                 STA temp+3
0CDE1 A5 0D                                 LDA temp+2
0CDE3 69 00                                 ADC #$00
0CDE5 85 0D                                 STA temp+2
0CDE7                                       
0CDE7                                       ;; Add 16 to temp (as a tile RAM pointer)
0CDE7 A5 0B                                 LDA temp
0CDE9 18                                    CLC
0CDEA 69 10                                 ADC #$10
0CDEC 85 0B                                 STA temp
0CDEE 4C FA CD                              JMP +drawNextTile
0CDF1                                   +
0CDF1                                   
0CDF1                                   ;; It is a row: move pointer right (+$02)
0CDF1 A5 0E                             LDA temp+3
0CDF3 18                                CLC
0CDF4 69 02                             ADC #$02
0CDF6 85 0E                             STA temp+3
0CDF8                                   
0CDF8                                   ;; Add 1 to temp (as a tile RAM pointer)
0CDF8 E6 0B                             INC temp
0CDFA                           
0CDFA                               
0CDFA                               ;; Next tile in the row/column
0CDFA                                   +drawNextTile:
0CDFA 4C 36 CD                      JMP -drawTileLoop
0CDFD                           
0CDFD                               ;; Go to the next set of tiles
0CDFD                           +doneDrawingRowColumn:
0CDFD 68                            PLA
0CDFE A8                            TAY
0CDFF C8                            INY
0CE00 4C B4 CC                      JMP -drawRowColumnLoop
0CE03                           
0CE03                           ;; Level loading is done
0CE03                           +doneLevelLoad:
0CE03                           
0CE03                               ;; Count number of color blocks
0CE03 A2 A0                         LDX #160
0CE05                               -
0CE05 BD FF 03                          LDA tile_type-1,x
0CE08 29 80                             AND #%10000000
0CE0A F0 02                             BEQ +
0CE0C E6 50                                 INC blocks_left
0CE0E                                   +
0CE0E CA                                DEX
0CE0F D0 F4                         BNE -
0CE11                           
0CE11                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CE11 A9 20                         LDA #$20
0CE13 8D 06 20                      STA PPU_ADDR
0CE16 A9 A2                         LDA #$A2
0CE18 8D 06 20                      STA PPU_ADDR
0CE1B A9 35                         LDA #$35
0CE1D 20 58 D0                      JSR sub_Draw28HorizontalTiles
0CE20                           
0CE20                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CE20 A9 23                         LDA #$23
0CE22 8D 06 20                      STA PPU_ADDR
0CE25 A9 42                         LDA #$42
0CE27 8D 06 20                      STA PPU_ADDR
0CE2A A9 31                         LDA #$31
0CE2C 20 58 D0                      JSR sub_Draw28HorizontalTiles
0CE2F                           
0CE2F                               ;; Left & right game bounds
0CE2F                               ;; Set PPU_ADDR and store in temp variables
0CE2F A9 20                         LDA #$20
0CE31 85 0B                         STA temp
0CE33 8D 06 20                      STA PPU_ADDR
0CE36 A9 C1                         LDA #$C1
0CE38 85 0C                         STA temp+1
0CE3A 8D 06 20                      STA PPU_ADDR
0CE3D                               
0CE3D                               ;; Set vertical bound tile and set up loop
0CE3D A0 33                         LDY #$33
0CE3F A2 14                         LDX #20
0CE41                               -
0CE41                                   ;; Show left tile
0CE41 8C 07 20                          STY PPU_DATA
0CE44                                   
0CE44                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CE44 A5 0B                             LDA temp
0CE46 8D 06 20                          STA PPU_ADDR
0CE49 A5 0C                             LDA temp+1
0CE4B 18                                CLC
0CE4C 69 1D                             ADC #29
0CE4E 85 0C                             STA temp+1
0CE50 8D 06 20                          STA PPU_ADDR
0CE53                           
0CE53                                   ;; Show right tile
0CE53 8C 07 20                          STY PPU_DATA
0CE56                           
0CE56                                   ;; Check if we're done yet
0CE56 CA                                DEX
0CE57 F0 18                             BEQ +drawCorners
0CE59                                   
0CE59                                   ;; Not done yet: add 3 to low byte for next left bound
0CE59 A5 0C                             LDA temp+1
0CE5B 18                                CLC
0CE5C 69 03                             ADC #3
0CE5E 85 0C                             STA temp+1
0CE60                                   
0CE60                                   ;; Apply carry to high byte
0CE60 A5 0B                             LDA temp
0CE62 69 00                             ADC #$00
0CE64 85 0B                             STA temp
0CE66                                   
0CE66                                   ;; Store next PPU_ADDR to draw at
0CE66 8D 06 20                          STA PPU_ADDR
0CE69 A5 0C                             LDA temp+1
0CE6B 8D 06 20                          STA PPU_ADDR
0CE6E 4C 41 CE                      JMP -
0CE71                               
0CE71                               
0CE71                           
0CE71                           +drawCorners:
0CE71                               ;; Draw the corners of the playing field
0CE71 A9 20                         LDA #$20
0CE73 8D 06 20                      STA PPU_ADDR
0CE76 A9 A1                         LDA #$A1
0CE78 8D 06 20                      STA PPU_ADDR
0CE7B A9 39                         LDA #$39
0CE7D 8D 07 20                      STA PPU_DATA
0CE80                           
0CE80 A9 20                         LDA #$20
0CE82 8D 06 20                      STA PPU_ADDR
0CE85 A9 BE                         LDA #$BE
0CE87 8D 06 20                      STA PPU_ADDR
0CE8A A9 3A                         LDA #$3A
0CE8C 8D 07 20                      STA PPU_DATA
0CE8F                           
0CE8F A9 23                         LDA #$23
0CE91 8D 06 20                      STA PPU_ADDR
0CE94 A9 41                         LDA #$41
0CE96 8D 06 20                      STA PPU_ADDR
0CE99 A9 36                         LDA #$36
0CE9B 8D 07 20                      STA PPU_DATA
0CE9E                           
0CE9E A9 23                         LDA #$23
0CEA0 8D 06 20                      STA PPU_ADDR
0CEA3 A9 5E                         LDA #$5E
0CEA5 8D 06 20                      STA PPU_ADDR
0CEA8 A9 34                         LDA #$34
0CEAA 8D 07 20                      STA PPU_DATA
0CEAD                               
0CEAD                           
0CEAD                               ;; Draw the hud labels
0CEAD A9 20                         LDA #$20
0CEAF 8D 06 20                      STA PPU_ADDR
0CEB2 A9 62                         LDA #$62
0CEB4 8D 06 20                      STA PPU_ADDR
0CEB7 A2 00                         LDX #$00
0CEB9                               -
0CEB9 BD 1B DC                          LDA tbl_HudText,x
0CEBC 8D 07 20                          STA PPU_DATA
0CEBF E8                                INX
0CEC0 E0 1E                             CPX #$1E
0CEC2 D0 F5                         BNE -
0CEC4                           
0CEC4                           
0CEC4                               ;; Draw the current score
0CEC4 A9 20                         LDA #$20
0CEC6 8D 06 20                      STA PPU_ADDR
0CEC9 A9 83                         LDA #$83
0CECB 8D 06 20                      STA PPU_ADDR
0CECE A2 00                         LDX #$00
0CED0                               -
0CED0 B5 2B                             LDA ball_score,x
0CED2 18                                CLC
0CED3 69 01                             ADC #$01
0CED5 8D 07 20                          STA PPU_DATA
0CED8 E8                                INX
0CED9 E0 06                             CPX #$06
0CEDB D0 F3                         BNE -
0CEDD                           
0CEDD                           
0CEDD                               ;; Draw the level number
0CEDD                               ;; (with primitive HEX>DEC)
0CEDD A5 4E                         LDA current_level
0CEDF 18                            CLC
0CEE0 69 01                         ADC #$01
0CEE2 85 0C                         STA temp+1
0CEE4                               
0CEE4 C9 14                         CMP #20
0CEE6 B0 13                         BCS +tempIsTwo
0CEE8                               
0CEE8 C9 0A                         CMP #10
0CEEA B0 05                         BCS +tempIsOne
0CEEC                               
0CEEC A9 00                         LDA #$00
0CEEE 4C 02 CF                      JMP +setTemp
0CEF1                               
0CEF1                           +tempIsOne:
0CEF1 38                            SEC
0CEF2 E9 0A                         SBC #10
0CEF4 85 0C                         STA temp+1
0CEF6 A9 01                         LDA #$01
0CEF8 4C 02 CF                      JMP +setTemp
0CEFB                               
0CEFB                           +tempIsTwo:
0CEFB 38                            SEC
0CEFC E9 14                         SBC #20
0CEFE 85 0C                         STA temp+1
0CF00 A9 02                         LDA #$02
0CF02                           
0CF02                           +setTemp:
0CF02 85 0B                         STA temp
0CF04                               
0CF04 E6 0B                         INC temp
0CF06 E6 0C                         INC temp+1
0CF08                               
0CF08 A9 20                         LDA #$20
0CF0A 8D 06 20                      STA PPU_ADDR
0CF0D A9 8B                         LDA #$8B
0CF0F 8D 06 20                      STA PPU_ADDR
0CF12 A5 0B                         LDA temp
0CF14 8D 07 20                      STA PPU_DATA
0CF17 A5 0C                         LDA temp+1
0CF19 8D 07 20                      STA PPU_DATA
0CF1C                           
0CF1C                           
0CF1C                               ;; Draw lives (presumes lives to be capped at 9)
0CF1C A9 20                         LDA #$20
0CF1E 8D 06 20                      STA PPU_ADDR
0CF21 A9 92                         LDA #$92
0CF23 8D 06 20                      STA PPU_ADDR
0CF26 A6 2A                         LDX ball_lives
0CF28 E8                            INX
0CF29 8E 07 20                      STX PPU_DATA
0CF2C                           
0CF2C                           
0CF2C                               ;; Set and draw bonus
0CF2C A9 07                         LDA #$07
0CF2E 85 37                         STA ball_bonus
0CF30 A9 09                         LDA #$09
0CF32 85 38                         STA ball_bonus+1
0CF34 85 39                         STA ball_bonus+2
0CF36                               
0CF36 A9 20                         LDA #$20
0CF38 8D 06 20                      STA PPU_ADDR
0CF3B A9 9A                         LDA #$9A
0CF3D 8D 06 20                      STA PPU_ADDR
0CF40 A2 00                         LDX #$00
0CF42                               -
0CF42 B5 37                             LDA ball_bonus,x
0CF44 18                                CLC
0CF45 69 01                             ADC #$01
0CF47 8D 07 20                          STA PPU_DATA
0CF4A E8                                INX
0CF4B E0 03                             CPX #$03
0CF4D D0 F3                         BNE -
0CF4F                           
0CF4F                           
0CF4F                               ;; Set attribute data to RAM
0CF4F                               
0CF4F                               ;; Byte 0-6 of attribute ram should be #%10100000
0CF4F A2 00                         LDX #$00
0CF51 A9 A0                         LDA #$A0
0CF53                               -
0CF53 9D A0 04                          STA tile_attributes,x
0CF56 E8                                INX
0CF57 E0 07                             CPX #$07
0CF59 D0 F8                         BNE -
0CF5B                               
0CF5B                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CF5B A9 E0                         LDA #$E0
0CF5D 9D A0 04                      STA tile_attributes,x
0CF60 E8                            INX
0CF61                           
0CF61                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CF61                           
0CF61                           -attributeLoop:
0CF61                               ;; Reset current attribute value
0CF61 A9 00                         LDA #$00
0CF63 85 0D                         STA temp+2
0CF65                           
0CF65                               ;; Get first metatile in tile ram based on attribute index
0CF65                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CF65 8A                            TXA
0CF66                           
0CF66 38                            SEC
0CF67 E9 08                         SBC #$08
0CF69 85 0C                         STA temp+1      ; attr - 8 (temp1)
0CF6B 0A                            ASL             ; * 2
0CF6C 85 0B                         STA temp        ; temp = temp1 * 2
0CF6E                           
0CF6E A5 0C                         LDA temp+1      ; temp1
0CF70 29 F8                         AND #%11111000  ; rounded down to 8's
0CF72 0A                            ASL             ; * 2
0CF73 18                            CLC
0CF74 65 0B                         ADC temp        ; + temp1 * 2
0CF76 85 0B                         STA temp        ; first metatile
0CF78                           
0CF78                               ;; Store first metatile in y-register
0CF78 A8                            TAY
0CF79                           
0CF79                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CF79 8A                            TXA
0CF7A 29 07                         AND #%00000111
0CF7C C9 07                         CMP #%00000111
0CF7E F0 0B                         BEQ +
0CF80                           
0CF80                               ;; If X >= $30, don't apply bottom right metatile
0CF80 E0 30                         CPX #$30
0CF82 B0 07                         BCS +
0CF84                               
0CF84                               ;; Add metatile1 subpalette to attribute value
0CF84 B9 00 04                      LDA tile_type,y
0CF87 29 0C                         AND #%00001100
0CF89 85 0D                         STA temp+2
0CF8B                               +
0CF8B                           
0CF8B                           
0CF8B                               ;; Apply second metatile
0CF8B 88                            DEY
0CF8C                           
0CF8C                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CF8C 8A                            TXA
0CF8D 29 07                         AND #%00000111
0CF8F F0 10                         BEQ +
0CF91                           
0CF91                               ;; If X >= $30, don't apply bottom left metatile
0CF91 E0 30                         CPX #$30
0CF93 B0 0C                         BCS +
0CF95                           
0CF95                           
0CF95                           
0CF95                               ;; Add metatile2 subpalette to attribute value
0CF95 B9 00 04                      LDA tile_type,y
0CF98 29 0C                         AND #%00001100
0CF9A 4A                            LSR
0CF9B 4A                            LSR
0CF9C 05 0D                         ORA temp+2
0CF9E 4C A3 CF                      JMP ++
0CFA1                               +
0CFA1 A5 0D                         LDA temp+2
0CFA3                               ++
0CFA3 0A                            ASL
0CFA4 0A                            ASL
0CFA5 85 0D                         STA temp+2
0CFA7                           
0CFA7                           
0CFA7                               ;; Apply third metatile
0CFA7 98                            TYA
0CFA8 38                            SEC
0CFA9 E9 0F                         SBC #$0F
0CFAB A8                            TAY
0CFAC                           
0CFAC                               ;; If X MOD 8 == 7, don't apply top right metatile
0CFAC 8A                            TXA
0CFAD 29 07                         AND #%00000111
0CFAF C9 07                         CMP #%00000111
0CFB1 F0 11                         BEQ +
0CFB3                           
0CFB3                               ;; If X < $10, don't apply top right metatile
0CFB3 8A                            TXA
0CFB4 29 F0                         AND #%11110000
0CFB6 F0 0C                         BEQ +
0CFB8                           
0CFB8                               ;; Add metatile3 subpalette to attribute value
0CFB8 B9 00 04                      LDA tile_type,y
0CFBB 29 0C                         AND #%00001100
0CFBD 4A                            LSR
0CFBE 4A                            LSR
0CFBF 05 0D                         ORA temp+2
0CFC1 4C C6 CF                      JMP ++
0CFC4                               +
0CFC4 A5 0D                         LDA temp+2
0CFC6                               ++
0CFC6 0A                            ASL
0CFC7 0A                            ASL
0CFC8 85 0D                         STA temp+2
0CFCA                           
0CFCA                           
0CFCA                               ;; Apply fourth metatile
0CFCA 88                            DEY
0CFCB                           
0CFCB                               ;; If X MOD 8 == 0, don't apply top left metatile
0CFCB 8A                            TXA
0CFCC 29 07                         AND #%00000111
0CFCE F0 11                         BEQ +
0CFD0                           
0CFD0                               ;; If X < $10, don't apply top left metatile
0CFD0 8A                            TXA
0CFD1 29 F0                         AND #%11110000
0CFD3 F0 0C                         BEQ +
0CFD5                           
0CFD5                               ;; Add metatile4 subpalette to attribute value
0CFD5 B9 00 04                      LDA tile_type,y
0CFD8 29 0C                         AND #%00001100
0CFDA 4A                            LSR
0CFDB 4A                            LSR
0CFDC 05 0D                         ORA temp+2
0CFDE 4C E3 CF                      JMP ++
0CFE1                               +
0CFE1 A5 0D                         LDA temp+2
0CFE3                               ++
0CFE3 9D A0 04                      STA tile_attributes,x
0CFE6                           
0CFE6                               ;; Check the next attribute, if any left
0CFE6 E8                            INX
0CFE7 E0 38                         CPX #$38
0CFE9 F0 03                         BEQ +
0CFEB 4C 61 CF                          JMP -attributeLoop
0CFEE                               +
0CFEE                           
0CFEE                               ;; Stream attribute RAM to PPU
0CFEE 2C 02 20                      BIT PPU_STATUS
0CFF1 A9 23                         LDA #$23
0CFF3 8D 06 20                      STA PPU_ADDR
0CFF6 A9 C0                         LDA #$C0
0CFF8 8D 06 20                      STA PPU_ADDR
0CFFB A2 00                         LDX #$00
0CFFD                               -
0CFFD BD A0 04                          LDA tile_attributes,x
0D000 8D 07 20                          STA PPU_DATA
0D003 E8                                INX
0D004 E0 40                             CPX #$40
0D006 D0 F5                         BNE -
0D008                           
0D008                               ;; Set initial ball position
0D008 A6 4E                         LDX current_level
0D00A BD A8 DB                      LDA tbl_lvl_ball_startpos,x
0D00D 29 F0                         AND #%11110000
0D00F 18                            CLC
0D010 69 34                         ADC #$34
0D012 85 24                         STA ball_ypos_hi
0D014 BD A8 DB                      LDA tbl_lvl_ball_startpos,x
0D017 0A                            ASL
0D018 0A                            ASL
0D019 0A                            ASL
0D01A 0A                            ASL
0D01B 18                            CLC
0D01C 69 14                         ADC #$14
0D01E 85 22                         STA ball_xpos_hi
0D020 A9 00                         LDA #$00
0D022 85 23                         STA ball_xpos_lo
0D024 85 25                         STA ball_ypos_lo
0D026                               
0D026                               ;; Set initial ball color and direction
0D026 BD C1 DB                      LDA tbl_lvl_ball_init,x
0D029 29 F0                         AND #%11110000
0D02B 85 42                         STA ball_flags
0D02D 20 51 C8                      JSR sub_ColorizeBall
0D030                               
0D030                               ;; Reset bonus timer
0D030 A9 08                         LDA #BONUS_FRAMES
0D032 85 4A                         STA bonus_timer
0D034                               
0D034                               ;; Play background noise
0D034 A9 08                         LDA #$08
0D036 8D 15 40                      STA APU_STATUS
0D039 8D 0F 40                      STA NOISE_LENGTH
0D03C A9 0E                         LDA #$0E
0D03E 85 53                         STA current_noise
0D040 A9 00                         LDA #$00
0D042 85 51                         STA max_noise
0D044 85 54                         STA noise_timer
0D046 85 52                         STA sweep_noise
0D048 85 57                         STA noise_muted
0D04A 20 64 C7                      JSR sub_BackgroundNoise
0D04D                           
0D04D                               ;; Freeze the ball
0D04D A5 42                         LDA ball_flags
0D04F 09 04                         ORA #FREEZE_BALL
0D051 85 42                         STA ball_flags
0D053                               
0D053                               ;; Start unfreeze timer
0D053 A9 30                         LDA #$30
0D055 85 4C                         STA unfreeze_timer
0D057                           
0D057                               ;; Return
0D057 60                            RTS
0D058                           
0D058                           
0D058                           ;; Subroutine: draw 28 tiles in a row
0D058                           sub_Draw28HorizontalTiles:
0D058 A2 1C                         LDX #28
0D05A                               -
0D05A 8D 07 20                          STA PPU_DATA
0D05D CA                                DEX
0D05E D0 FA                         BNE -
0D060 60                            RTS
0D061                           
0D061                           .include "game/subroutine/LoadIntroScreen.asm"
0D061                           
0D061                           ;; Load the intro screen
0D061                           sub_LoadIntroScreen:
0D061                           
0D061                               ;; Load intro palette
0D061 2C 02 20                      BIT PPU_STATUS
0D064 A9 3F                         LDA #$3F
0D066 8D 06 20                      STA PPU_ADDR
0D069 A9 00                         LDA #$00
0D06B 8D 06 20                      STA PPU_ADDR
0D06E A2 00                         LDX #$00
0D070                               -
0D070 BD 45 D3                          LDA tbl_IntroScreenPalette,x
0D073 8D 07 20                          STA PPU_DATA
0D076 E8                                INX
0D077 E0 20                             CPX #$20
0D079 D0 F5                         BNE -
0D07B                               
0D07B                               ;; Put ball in the middle
0D07B A9 7C                         LDA #$7C
0D07D 85 22                         STA ball_xpos_hi
0D07F 85 24                         STA ball_ypos_hi
0D081                           
0D081                               ;; Clear the screen
0D081 20 E6 C7                      JSR sub_ClearScreen
0D084                           
0D084                               ;; Set up intro screen draw loop
0D084 A2 00                         LDX #$00
0D086                           
0D086                           -loop_IntroScreenData:
0D086                           
0D086                               ;; Get current byte from intro screen data
0D086 BD 6D D3                      LDA tbl_IntroScreenData,x
0D089                           
0D089                               ;; If current byte is #$3E, draw high score
0D089 C9 3E                         CMP #$3E
0D08B D0 14                         BNE +
0D08D A0 00                             LDY #$00
0D08F                                   -
0D08F B9 05 00                              LDA hi_score,y
0D092 18                                    CLC
0D093 69 01                                 ADC #1
0D095 8D 07 20                              STA PPU_DATA
0D098 C8                                    INY
0D099 C0 06                                 CPY #$06
0D09B D0 F2                             BNE -
0D09D E8                                INX
0D09E 4C 86 D0                          JMP -loop_IntroScreenData
0D0A1                               +
0D0A1                           
0D0A1                               ;; If current byte is #$3F, we're done drawing.
0D0A1 C9 3F                         CMP #$3F
0D0A3 D0 03                         BNE +
0D0A5 4C F2 D0                          JMP +goToEndIntroScreen
0D0A8                               +
0D0A8                           
0D0A8                               ;; If highest bits are %11, draw a plain tile
0D0A8 29 C0                         AND #%11000000
0D0AA D0 03                         BNE +
0D0AC 4C D2 D0                          JMP +drawTile
0D0AF                               +
0D0AF                               
0D0AF                               ;; If highest bits are %01, set the PPU address
0D0AF                               ;; If not, draw two logo tiles
0D0AF C9 40                         CMP #%01000000
0D0B1 D0 03                         BNE +drawLogo
0D0B3 4C DC D0                          JMP +setPpuAddr
0D0B6                           
0D0B6                           +drawLogo:
0D0B6                               ;; Get bits 0-2 and store in a temp variable
0D0B6 BD 6D D3                      LDA tbl_IntroScreenData,x
0D0B9 29 07                         AND #%00000111
0D0BB 85 0B                         STA temp
0D0BD                               
0D0BD                               ;; Get bits 3-5, shift over to get a value from 0-7
0D0BD BD 6D D3                      LDA tbl_IntroScreenData,x
0D0C0 4A                            LSR
0D0C1 4A                            LSR
0D0C2 4A                            LSR
0D0C3 29 07                         AND #%00000111
0D0C5                               
0D0C5                               ;; Draw the tile that corresponds with that value
0D0C5 A8                            TAY
0D0C6 20 C9 C8                      JSR sub_drawIntroScreenLogoTile
0D0C9                               
0D0C9                               ;; Do the same for the value stored in temp
0D0C9 A4 0B                         LDY temp
0D0CB 20 C9 C8                      JSR sub_drawIntroScreenLogoTile
0D0CE                           
0D0CE                               ;; Next byte please
0D0CE E8                            INX
0D0CF 4C 86 D0                      JMP -loop_IntroScreenData
0D0D2                           
0D0D2                           +drawTile:
0D0D2                               ;; Just draw the tile value on screen
0D0D2 BD 6D D3                      LDA tbl_IntroScreenData,x
0D0D5 8D 07 20                      STA PPU_DATA
0D0D8                               
0D0D8                               ;; Next byte please
0D0D8 E8                            INX
0D0D9 4C 86 D0                      JMP -loop_IntroScreenData
0D0DC                           
0D0DC                           
0D0DC                           +setPpuAddr:
0D0DC                               ;; Reset the PPU latch
0D0DC 2C 02 20                      BIT PPU_STATUS
0D0DF                               
0D0DF                               ;; Sanitize and write the high byte of the PPU address
0D0DF BD 6D D3                      LDA tbl_IntroScreenData,x
0D0E2 29 3F                         AND #%00111111
0D0E4 8D 06 20                      STA PPU_ADDR
0D0E7                           
0D0E7                               ;; Write the low byte of the PPU address
0D0E7 E8                            INX
0D0E8 BD 6D D3                      LDA tbl_IntroScreenData,x
0D0EB 8D 06 20                      STA PPU_ADDR
0D0EE                               
0D0EE                               ;; PPU has been set up to draw tiles at the correct spot now.
0D0EE                               
0D0EE                               ;; Next byte please.
0D0EE E8                            INX
0D0EF 4C 86 D0                      JMP -loop_IntroScreenData
0D0F2                           
0D0F2                           +goToEndIntroScreen:
0D0F2                           
0D0F2                               ;; To color the 1.LEVEL: line green, we need to update two
0D0F2                               ;; values in the PPU attribute data.
0D0F2 A0 08                         LDY #$08
0D0F4 2C 02 20                      BIT PPU_STATUS
0D0F7 A9 23                         LDA #$23
0D0F9 8D 06 20                      STA PPU_ADDR
0D0FC A9 C8                         LDA #$C8
0D0FE 8D 06 20                      STA PPU_ADDR
0D101 A9 0A                         LDA #%00001010
0D103                               -
0D103 8D 07 20                          STA PPU_DATA
0D106 88                                DEY
0D107 D0 FA                         BNE -
0D109                           
0D109 60                            RTS
0D10A                           
0D10A                           .include "game/subroutine/LoadWinScreen.asm"
0D10A                           
0D10A                           ;; Load the win screen (in progress)
0D10A                           sub_LoadWinScreen:
0D10A 60                            RTS
0D10B                           
0D10B                           .include "game/subroutine/PreloadSfxFromX.asm"
0D10B                           
0D10B                           sub_PreloadSfxFromX:
0D10B                               
0D10B                               ;; Load sample X into sfx address (low byte)
0D10B BD 99 DC                      LDA tbl_Sfx_lo,x
0D10E 85 58                         STA sfx_address
0D110                               
0D110                               ;; Load sample X into sfx address (high byte)
0D110 BD 96 DC                      LDA tbl_Sfx_hi,x
0D113 85 59                         STA sfx_address+1
0D115                               
0D115                               ;; Start SFX timer
0D115 A9 01                         LDA #$01
0D117 85 5A                         STA sfx_timer
0D119                               
0D119 60                            RTS
0D11A                               
0D11A                               0D11A                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0D11A                           
0D11A                           ;; Remove a block from screen
0D11A                           sub_RemoveBlockFromScreen:
0D11A                           
0D11A                               ;; Get current buffer location
0D11A A4 45                         LDY ppu_buffer_pointer
0D11C                               
0D11C                               ;; TILE 1: if metatile on top left is solid, draw
0D11C                               ;; null tile, else draw random noise tile
0D11C A9 00                         LDA #$00
0D11E 85 44                         STA ppu_buffer_update
0D120                               
0D120 A5 0B                         LDA temp
0D122 99 00 03                      STA ppu_buffer,y
0D125 C8                            INY
0D126 A5 0C                         LDA temp+1
0D128 99 00 03                      STA ppu_buffer,y
0D12B C8                            INY
0D12C                               
0D12C 8A                            TXA
0D12D 29 0F                         AND #%00001111
0D12F F0 11                         BEQ +drawRandomTile
0D131                           
0D131 8A                            TXA
0D132 29 F0                         AND #%11110000
0D134 F0 0C                         BEQ +drawRandomTile
0D136                           
0D136 BD EF 03                      LDA tile_type-17,x
0D139 29 01                         AND #%00000001
0D13B F0 05                         BEQ +drawRandomTile  
0D13D                           
0D13D                               ;; Draw a null tile
0D13D A9 00                         LDA #$00
0D13F 4C 4A D1                      JMP +addToPPUBuffer
0D142                               
0D142                           +drawRandomTile:
0D142                               ;; Draw a random tile
0D142 20 AD C6                      JSR sub_GetRandomNumber
0D145 29 07                         AND #%00000111
0D147 18                            CLC
0D148 69 68                         ADC #$68
0D14A                               
0D14A                               ;; Add tile to ppu buffer
0D14A                           +addToPPUBuffer:
0D14A 99 00 03                      STA ppu_buffer,y
0D14D C8                            INY
0D14E                           
0D14E                               ;; TILE 2: If metatile above is solid, draw null,
0D14E                               ;; else draw random noise.
0D14E E6 0C                         INC temp+1
0D150 A5 0B                         LDA temp
0D152 99 00 03                      STA ppu_buffer,y
0D155 C8                            INY
0D156 A5 0C                         LDA temp+1
0D158 99 00 03                      STA ppu_buffer,y
0D15B C8                            INY
0D15C                               
0D15C 8A                            TXA
0D15D 29 F0                         AND #%11110000
0D15F F0 0C                         BEQ +drawRandomTile
0D161                               
0D161 BD F0 03                      LDA tile_type-16,x
0D164 29 01                         AND #%00000001
0D166 F0 05                         BEQ +drawRandomTile
0D168                               
0D168 A9 00                         LDA #%00
0D16A 4C 75 D1                      JMP +addToPPUBuffer
0D16D                           
0D16D                           +drawRandomTile:
0D16D 20 AD C6                      JSR sub_GetRandomNumber
0D170 29 07                         AND #%00000111
0D172 18                            CLC
0D173 69 68                         ADC #$68
0D175                           
0D175                           +addToPPUBuffer:
0D175 99 00 03                      STA ppu_buffer,y
0D178 C8                            INY
0D179                               
0D179                               ;; TILE 3 - If metatile left is solid, draw null,
0D179                               ;; else draw random noise.
0D179 A5 0C                         LDA temp+1
0D17B 18                            CLC
0D17C 69 1F                         ADC #$1F
0D17E 85 0C                         STA temp+1
0D180 A5 0B                         LDA temp
0D182 69 00                         ADC #$00
0D184 85 0B                         STA temp
0D186 99 00 03                      STA ppu_buffer,y
0D189 C8                            INY
0D18A A5 0C                         LDA temp+1
0D18C 99 00 03                      STA ppu_buffer,y
0D18F C8                            INY
0D190                               
0D190 8A                            TXA
0D191 29 0F                         AND #%00001111
0D193 F0 0C                         BEQ +drawRandomTile
0D195                               
0D195 BD FF 03                      LDA tile_type-1,x
0D198 29 01                         AND #%00000001
0D19A F0 05                         BEQ +drawRandomTile
0D19C                               
0D19C A9 00                         LDA #%00
0D19E 4C A9 D1                      JMP +addToPPUBuffer
0D1A1                           
0D1A1                           +drawRandomTile:
0D1A1 20 AD C6                      JSR sub_GetRandomNumber
0D1A4 29 07                         AND #%00000111
0D1A6 18                            CLC
0D1A7 69 68                         ADC #$68
0D1A9                               
0D1A9                           +addToPPUBuffer:
0D1A9 99 00 03                      STA ppu_buffer,y
0D1AC C8                            INY
0D1AD                               
0D1AD                               ;; TILE 4 - Always random noise
0D1AD E6 0C                         INC temp+1
0D1AF A5 0B                         LDA temp
0D1B1 99 00 03                      STA ppu_buffer,y
0D1B4 C8                            INY
0D1B5 A5 0C                         LDA temp+1
0D1B7 99 00 03                      STA ppu_buffer,y
0D1BA C8                            INY
0D1BB 20 AD C6                      JSR sub_GetRandomNumber
0D1BE 29 07                         AND #%00000111
0D1C0 18                            CLC
0D1C1 69 68                         ADC #$68
0D1C3 99 00 03                      STA ppu_buffer,y
0D1C6 C8                            INY
0D1C7                           
0D1C7                               ;; TILE 5 - If tile on the right is solid, skip,
0D1C7                               ;; else draw random noise tile
0D1C7 E6 0C                         INC temp+1
0D1C9                               
0D1C9 8A                            TXA
0D1CA 29 0F                         AND #%00001111
0D1CC C9 0D                         CMP #$0D
0D1CE F0 1F                         BEQ +skipTile
0D1D0                               
0D1D0 BD 01 04                      LDA tile_type+1,x
0D1D3 29 01                         AND #%00000001
0D1D5 D0 18                         BNE +skipTile
0D1D7 A5 0B                             LDA temp
0D1D9 99 00 03                          STA ppu_buffer,y
0D1DC C8                                INY
0D1DD A5 0C                             LDA temp+1
0D1DF 99 00 03                          STA ppu_buffer,y
0D1E2 C8                                INY
0D1E3 20 AD C6                          JSR sub_GetRandomNumber
0D1E6 29 07                             AND #%00000111
0D1E8 18                                CLC
0D1E9 69 68                             ADC #$68
0D1EB 99 00 03                          STA ppu_buffer,y
0D1EE C8                                INY    
0D1EF                               +skipTile:
0D1EF                           
0D1EF                               ;; TILE 6 - If tile on bottom is solid, skip,
0D1EF                               ;; else draw random noise
0D1EF A5 0C                         LDA temp+1
0D1F1 18                            CLC
0D1F2 69 1F                         ADC #$1F
0D1F4 85 0C                         STA temp+1
0D1F6 A5 0B                         LDA temp
0D1F8 69 00                         ADC #$00
0D1FA 85 0B                         STA temp
0D1FC                           
0D1FC 8A                            TXA
0D1FD 29 F0                         AND #%11110000
0D1FF C9 90                         CMP #$90
0D201 F0 1F                         BEQ +skipTile
0D203                           
0D203 BD 10 04                      LDA tile_type+16,x
0D206 29 01                         AND #%00000001
0D208 D0 18                         BNE +skipTile
0D20A A5 0B                             LDA temp
0D20C 99 00 03                          STA ppu_buffer,y
0D20F C8                                INY
0D210 A5 0C                             LDA temp+1
0D212 99 00 03                          STA ppu_buffer,y
0D215 C8                                INY
0D216 20 AD C6                          JSR sub_GetRandomNumber
0D219 29 07                             AND #%00000111
0D21B 18                                CLC
0D21C 69 68                             ADC #$68
0D21E 99 00 03                          STA ppu_buffer,y
0D221 C8                                INY    
0D222                               +skipTile:
0D222                               
0D222                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D222                               ;; else draw random noise
0D222 E6 0C                         INC temp+1
0D224                           
0D224 8A                            TXA
0D225 29 F0                         AND #%11110000
0D227 C9 90                         CMP #$90
0D229 F0 26                         BEQ +skipTile
0D22B                               
0D22B 8A                            TXA
0D22C 29 0F                         AND #%00001111
0D22E C9 0D                         CMP #$0D
0D230 F0 1F                         BEQ +skipTile
0D232                               
0D232 BD 11 04                      LDA tile_type+17,x
0D235 29 01                         AND #%00000001
0D237 D0 18                         BNE +skipTile
0D239 A5 0B                             LDA temp
0D23B 99 00 03                          STA ppu_buffer,y
0D23E C8                                INY
0D23F A5 0C                             LDA temp+1
0D241 99 00 03                          STA ppu_buffer,y
0D244 C8                                INY
0D245 20 AD C6                          JSR sub_GetRandomNumber
0D248 29 07                             AND #%00000111
0D24A 18                                CLC
0D24B 69 68                             ADC #$68
0D24D 99 00 03                          STA ppu_buffer,y
0D250 C8                                INY    
0D251                               +skipTile:   
0D251                           
0D251                           
0D251                               ;; Update attribute table accordingly through ppu buffer
0D251 20 90 D2                      JSR sub_SetTileAttributeAddress
0D254                               
0D254 8A                            TXA
0D255 29 10                         AND #%00010000
0D257 F0 05                         BEQ +
0D259 A9 F0                             LDA #%11110000
0D25B 4C 60 D2                          JMP ++
0D25E                               +
0D25E A9 0F                         LDA #%00001111
0D260                               ++
0D260 85 0D                         STA temp+2
0D262                               
0D262 8A                            TXA
0D263 48                            PHA
0D264 29 01                         AND #%00000001
0D266 F0 07                         BEQ +
0D268 A5 0D                             LDA temp+2
0D26A 09 CC                             ORA #%11001100
0D26C 4C 73 D2                          JMP ++
0D26F                               +
0D26F A5 0D                         LDA temp+2
0D271 09 33                         ORA #%00110011
0D273                               ++
0D273 85 0D                         STA temp+2
0D275                               
0D275 A5 0B                         LDA temp
0D277 38                            SEC
0D278 E9 C0                         SBC #$C0
0D27A AA                            TAX
0D27B BD A0 04                      LDA tile_attributes,x
0D27E 25 0D                         AND temp+2
0D280 9D A0 04                      STA tile_attributes,x
0D283 99 00 03                      STA ppu_buffer,y
0D286 C8                            INY
0D287 68                            PLA
0D288 AA                            TAX
0D289                           
0D289                               ;; Tell PPU to update tiles and attributes next frame
0D289 84 45                         STY ppu_buffer_pointer
0D28B A9 01                         LDA #$01
0D28D 85 44                         STA ppu_buffer_update
0D28F                            
0D28F                               ;; We're done - return
0D28F 60                            RTS
0D290                           
0D290                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D290                           
0D290                           ;; Set the correct tile attribute address based on game tile (x) 
0D290                           ;; into the correct ppu buffer slot (y)
0D290                           
0D290                           sub_SetTileAttributeAddress:
0D290 A9 23                         LDA #$23
0D292 99 00 03                      STA ppu_buffer,y
0D295 C8                            INY
0D296                               
0D296 8A                            TXA
0D297 29 F0                         AND #%11110000
0D299 4A                            LSR
0D29A 4A                            LSR
0D29B 4A                            LSR
0D29C 4A                            LSR
0D29D 18                            CLC
0D29E 69 01                         ADC #$01
0D2A0 4A                            LSR
0D2A1 0A                            ASL
0D2A2 0A                            ASL
0D2A3 0A                            ASL
0D2A4 18                            CLC
0D2A5 69 C8                         ADC #$C8
0D2A7 85 0B                         STA temp
0D2A9 8A                            TXA
0D2AA 29 0F                         AND #%00001111
0D2AC 18                            CLC
0D2AD 69 01                         ADC #$01
0D2AF 4A                            LSR
0D2B0 18                            CLC
0D2B1 65 0B                         ADC temp
0D2B3 85 0B                         STA temp
0D2B5 99 00 03                      STA ppu_buffer,y
0D2B8 C8                            INY
0D2B9                                  
0D2B9 60                            RTS
0D2BA                           
0D2BA                           .include "game/subroutine/SubtractXFromBonus.asm"
0D2BA                           
0D2BA                           sub_SubtractXFromBonus:
0D2BA 86 14                         STX temp+9
0D2BC A5 39                         LDA ball_bonus+2
0D2BE 38                            SEC
0D2BF E5 14                         SBC temp+9
0D2C1 30 05                         BMI +
0D2C3 85 39                             STA ball_bonus+2
0D2C5 4C DD D2                          JMP +updateBonusOnScreen
0D2C8                               +
0D2C8                           
0D2C8 18                            CLC
0D2C9 69 0A                         ADC #$0A
0D2CB 85 39                         STA ball_bonus+2
0D2CD C6 38                         DEC ball_bonus+1
0D2CF 10 0C                         BPL +updateBonusOnScreen
0D2D1                           
0D2D1 A9 09                         LDA #$09
0D2D3 85 38                         STA ball_bonus+1
0D2D5 C6 37                         DEC ball_bonus
0D2D7 10 04                         BPL +updateBonusOnScreen
0D2D9                           
0D2D9 A9 00                         LDA #$00
0D2DB 85 37                         STA ball_bonus
0D2DD                           
0D2DD                               +updateBonusOnScreen:
0D2DD A9 20                         LDA #$20
0D2DF 85 0B                         STA temp
0D2E1 A9 9C                         LDA #$9C
0D2E3 85 0C                         STA temp+1
0D2E5 A2 02                         LDX #$02
0D2E7                               
0D2E7                               -updateNextDigit:
0D2E7 B5 37                             LDA ball_bonus,x
0D2E9 18                                CLC
0D2EA 69 01                             ADC #$01
0D2EC 85 0D                             STA temp+2
0D2EE 20 1F D3                          JSR sub_WriteByteToPPUBuffer
0D2F1 C6 0C                             DEC temp+1
0D2F3 CA                                DEX
0D2F4 10 F1                         BPL -updateNextDigit
0D2F6                           
0D2F6 60                            RTS
0D2F7                           
0D2F7                           .include "game/subroutine/WaitXFrames.asm"
0D2F7                           
0D2F7                           sub_WaitXFrames:
0D2F7                               
0D2F7                               ;; Push X to stack
0D2F7 8A                            TXA
0D2F8 48                            PHA
0D2F9                               
0D2F9                               ;; Wait for NMI
0D2F9 20 CF C6                      JSR sub_WaitForNMI
0D2FC                           
0D2FC                               ;; Clear pointer, except for sprite-zero and ball
0D2FC A9 08                         LDA #$08
0D2FE 85 48                         STA sprite_ram_pointer
0D300                           
0D300                               ;; Load animations (if any)
0D300 20 F3 CB                      JSR sub_LoadAnimations
0D303                               
0D303                               ;; Restore original X
0D303 68                            PLA
0D304 AA                            TAX
0D305                               
0D305                               ;; Check if all X frames have passed
0D305 CA                            DEX
0D306 D0 EF                         BNE sub_WaitXFrames
0D308                               
0D308                               ;; Return
0D308 60                            RTS
0D309                           
0D309                           .include "game/subroutine/Waste.asm"
0D309 20 0C D3                  sub_Waste7: JSR sub_Waste6
0D30C 20 0F D3                  sub_Waste6: JSR sub_Waste5
0D30F 20 12 D3                  sub_Waste5: JSR sub_Waste4
0D312 20 15 D3                  sub_Waste4: JSR sub_Waste3
0D315 20 18 D3                  sub_Waste3: JSR sub_Waste2
0D318 20 1B D3                  sub_Waste2: JSR sub_Waste1
0D31B 20 1E D3                  sub_Waste1: JSR sub_Waste0
0D31E 60                        sub_Waste0: RTS0D31F                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D31F                           
0D31F                           ;; Write the byte in temp+2 and the ppu address (temp)
0D31F                           ;; to a buffer, so NMI can update it before the next frame
0D31F                           
0D31F                           sub_WriteByteToPPUBuffer:
0D31F                           
0D31F                               ;; Prevent updating until full 3-byte buffer is filled,
0D31F                               ;; so that graphics won't glitch out if NMI happens during
0D31F                               ;; updating the buffer
0D31F A9 00                         LDA #$00
0D321 85 44                         STA ppu_buffer_update
0D323                           
0D323                               ;; Check if buffer full; if so, wait a frame and force update
0D323 A4 45                         LDY ppu_buffer_pointer
0D325 C0 60                         CPY #$60
0D327 D0 05                         BNE +
0D329 E6 44                             INC ppu_buffer_update
0D32B 20 D8 C6                          JSR sub_WaitForVBlank
0D32E                               +
0D32E                           
0D32E                               ;; Add ppu_addr high byte to buffer
0D32E A5 0B                         LDA temp
0D330 99 00 03                      STA ppu_buffer,y
0D333                           
0D333                               ;; Add ppu_addr low byte to buffer
0D333 C8                            INY
0D334 A5 0C                         LDA temp+1
0D336 99 00 03                      STA ppu_buffer,y
0D339                           
0D339                               ;; Add ppu_data to buffer
0D339 C8                            INY
0D33A A5 0D                         LDA temp+2
0D33C 99 00 03                      STA ppu_buffer,y
0D33F                           
0D33F                               ;; Update buffer pointer
0D33F C8                            INY
0D340 84 45                         STY ppu_buffer_pointer
0D342                           
0D342                               ;; Tell NMI to update next round
0D342 E6 44                         INC ppu_buffer_update
0D344                           
0D344                               ;; Return
0D344 60                            RTS
0D345                           
0D345                           
0D345                           
0D345                           
0D345                           ;; LUTs
0D345                           .include "game/include/tables.asm"
0D345                           
0D345                           ;; Initial screen palette
0D345                           tbl_IntroScreenPalette:
0D345 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D349 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D34D 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D351 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D355                           
0D355 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D359 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D35D 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D361 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D365                           
0D365                           
0D365                           ;; Intro: mapping logo index to chr tile
0D365                           tbl_IntroScreenLogoChr:
0D365 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D36D                           
0D36D                           
0D36D                           ;; Intro screen data
0D36D                           tbl_IntroScreenData:
0D36D                           
0D36D                               ;; Set PPU address $20A3 and draw
0D36D 60 A3                         .db #$60, #$A3
0D36F 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D377                           
0D377                               ;; Set PPU address $20C6 and draw
0D377 60 C6                         .db #$60, #$C6
0D379 01 02                         .db #_0, #_1    
0D37B                           
0D37B                               ;; Set PPU address $20B4 and draw
0D37B 60 B4                         .db #$60, #$B4
0D37D 12 13 00 1D 0D 19 1C 0F..     .db #_H, #_I, #_SPACE, #_S, #_C, #_O, #_R, #_E, #_COLON
0D386                           
0D386                               ;; Set PPU address $20D6 and draw high score
0D386 60 D6 3E                      .db #$60, #$D6, #$3E
0D389                           
0D389                               
0D389                               ;; Set PPU address $2122 and draw
0D389 61 22                         .db #$61, #$22
0D38B 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D392 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D398 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D3A0 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D3A5                               
0D3A5                               ;; Set PPU address $2147 and draw
0D3A5 61 47                         .db #$61, #$47
0D3A7 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D3AE 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D3B2 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D3B8 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D3BE                               
0D3BE                               ;; Set PPU address $218B and draw
0D3BE 61 8B                         .db #$61, #$8B
0D3C0 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D3C6 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D3CB                               
0D3CB                               ;; Set PPU address $21E6 and draw
0D3CB 61 E6                         .db #$61, #$E6
0D3CD 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D3D5 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D3D9 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D3E0                               
0D3E0                               ;; Set PPU address $222D and draw
0D3E0 62 2D                         .db #$62, #$2D
0D3E2 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D3E8                               
0D3E8                               ;; Set PPU address $2281
0D3E8 62 81                         .db #$62, #$81
0D3EA                               
0D3EA                               ;; Draw the Crillion logo
0D3EA E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D3EE C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D3F2 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D3F6 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D3FA                               
0D3FA D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D3FE C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D402 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D406 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D40A                               
0D40A D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D40E C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D412 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D416 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D41A                           
0D41A D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D41E C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D422 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D426 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D42A                               
0D42A D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D42E C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D432 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D436 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D43A                           
0D43A F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D43E C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D442 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D446 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D449                           
0D449                               ;; End of intro
0D449 3F                            .db #$3F
0D44A                           
0D44A                           
0D44A                           ;; Animation frames table
0D44A                           .include "game/include/table/animation_frames.asm"
0D44A                           
0D44A                           ;; CHR tile-id's per slide of explosion
0D44A                           explosion_slide0:
0D44A 00 00 00                      .db #$00, #$00, #$00
0D44D 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D450 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D453                           
0D453                           explosion_slide1:
0D453 00 00 00                      .db #$00, #$00, #$00
0D456 29 2A 2B                      .db #$29, #$2A, #$2B
0D459 39 3A 3B                      .db #$39, #$3A, #$3B
0D45C                           
0D45C                           explosion_slide2:
0D45C 16 00 00                      .db #$16, #$00, #$00
0D45F 26 27 28                      .db #$26, #$27, #$28
0D462 36 37 38                      .db #$36, #$37, #$38
0D465                           
0D465                           explosion_slide3:
0D465 00 14 15                      .db #$00, #$14, #$15
0D468 23 24 25                      .db #$23, #$24, #$25
0D46B 33 34 35                      .db #$33, #$34, #$35
0D46E                           
0D46E                           explosion_slide4:
0D46E 10 11 12                      .db #$10, #$11, #$12
0D471 20 21 22                      .db #$20, #$21, #$22
0D474 30 31 32                      .db #$30, #$31, #$32
0D477                           
0D477                           ;; High and low bytes of animation slides
0D477                           explosion_anim_hi:
0D477 D4                            .db >#explosion_slide0
0D478 D4                            .db >#explosion_slide1
0D479 D4                            .db >#explosion_slide2
0D47A D4                            .db >#explosion_slide3
0D47B D4                            .db >#explosion_slide4
0D47C D4                            .db >#explosion_slide4
0D47D D4                            .db >#explosion_slide3
0D47E D4                            .db >#explosion_slide2
0D47F D4                            .db >#explosion_slide1
0D480 D4                            .db >#explosion_slide0
0D481                           
0D481                           explosion_anim_lo:
0D481 4A                            .db <#explosion_slide0
0D482 53                            .db <#explosion_slide1
0D483 5C                            .db <#explosion_slide2
0D484 65                            .db <#explosion_slide3
0D485 6E                            .db <#explosion_slide4
0D486 6E                            .db <#explosion_slide4
0D487 65                            .db <#explosion_slide3
0D488 5C                            .db <#explosion_slide2
0D489 53                            .db <#explosion_slide1
0D48A 4A                            .db <#explosion_slide0
0D48B                           
0D48B                           
0D48B                           
0D48B                           ;; Ball palette color table (CBRYGM)
0D48B                           tbl_BallColorDark:
0D48B 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D491                            
0D491                           tbl_BallColorLight:
0D491 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D497                           
0D497                               
0D497                           ;; Screen mode drawing routine addresses
0D497                           tbl_LoadScreenHi:
0D497 D0 CC D1                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D49A                           
0D49A                           tbl_LoadScreenLo:
0D49A 61 98 0A                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D49D                           
0D49D                           
0D49D                           ;; Level data
0D49D                           .include "game/include/table/level_data.asm"
0D49D                           
0D49D                           ;; Level layout tables
0D49D                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D49D                           
0D49D                           ifdef TESTING
0D49D                           lvl_test:
0D49D                               .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D49D                               .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D49D                               .db #LEVEL_END
0D49D                           endif
0D49D                           
0D49D                           lvl_layout_01:
0D49D 61 21                         .db #$61, #%00100001
0D49F 52 61                         .db #$52, #%01100001
0D4A1 43 65                         .db #$43, #%01100101
0D4A3 83 05                         .db #$83, #%00000101
0D4A5 93 15                         .db #$93, #%00010101
0D4A7 34 7A                         .db #$34, #%01111010
0D4A9 74 7A                         .db #$74, #%01111010
0D4AB 35 7A                         .db #$35, #%01111010
0D4AD 75 7A                         .db #$75, #%01111010
0D4AF 46 65                         .db #$46, #%01100101
0D4B1 86 25                         .db #$86, #%00100101
0D4B3 57 61                         .db #$57, #%01100001
0D4B5 68 21                         .db #$68, #%00100001
0D4B7 FF                            .db #LEVEL_END
0D4B8                           
0D4B8                           lvl_layout_02:
0D4B8 C0 0A                         .db #$C0, #%00001010
0D4BA 11 15                         .db #$11, #%00010101
0D4BC 21 62                         .db #$21, #%01100010
0D4BE 61 62                         .db #$61, #%01100010
0D4C0 A1 42                         .db #$A1, #%01000010
0D4C2 12 67                         .db #$12, #%01100111
0D4C4 52 67                         .db #$52, #%01100111
0D4C6 92 67                         .db #$92, #%01100111
0D4C8 C3 0D                         .db #$C3, #%00001101
0D4CA 14 11                         .db #$14, #%00010001
0D4CC 24 65                         .db #$24, #%01100101
0D4CE 64 65                         .db #$64, #%01100101
0D4D0 A4 45                         .db #$A4, #%01000101
0D4D2 15 67                         .db #$15, #%01100111
0D4D4 55 67                         .db #$55, #%01100111
0D4D6 95 67                         .db #$95, #%01100111
0D4D8 17 12                         .db #$17, #%00010010
0D4DA 27 61                         .db #$27, #%01100001
0D4DC 67 61                         .db #$67, #%01100001
0D4DE A7 41                         .db #$A7, #%01000001
0D4E0 38 7A                         .db #$38, #%01111010
0D4E2 98 5A                         .db #$98, #%01011010
0D4E4 18 27                         .db #$18, #%00100111
0D4E6 48 27                         .db #$48, #%00100111
0D4E8 78 27                         .db #$78, #%00100111
0D4EA C8 07                         .db #$C8, #%00000111
0D4EC FF                            .db #LEVEL_END
0D4ED                           
0D4ED                           lvl_layout_03:
0D4ED 00 7A                         .db #$00, #%01111010
0D4EF 40 7A                         .db #$40, #%01111010
0D4F1 80 7A                         .db #$80, #%01111010
0D4F3 C0 1A                         .db #$C0, #%00011010
0D4F5 10 A1                         .db #$10, #%10100001
0D4F7 13 E1                         .db #$13, #%11100001
0D4F9 17 C1                         .db #$17, #%11000001
0D4FB 30 C1                         .db #$30, #%11000001
0D4FD 34 C1                         .db #$34, #%11000001
0D4FF 38 A1                         .db #$38, #%10100001
0D501 50 E1                         .db #$50, #%11100001
0D503 55 81                         .db #$55, #%10000001
0D505 57 C1                         .db #$57, #%11000001
0D507 70 C1                         .db #$70, #%11000001
0D509 73 A1                         .db #$73, #%10100001
0D50B 76 E1                         .db #$76, #%11100001
0D50D 90 E1                         .db #$90, #%11100001
0D50F 95 81                         .db #$95, #%10000001
0D511 97 C1                         .db #$97, #%11000001
0D513 B0 C1                         .db #$B0, #%11000001
0D515 B4 C1                         .db #$B4, #%11000001
0D517 B8 A1                         .db #$B8, #%10100001
0D519 D0 A1                         .db #$D0, #%10100001
0D51B D3 E1                         .db #$D3, #%11100001
0D51D D7 C1                         .db #$D7, #%11000001
0D51F FF                            .db #LEVEL_END
0D520                           
0D520                           lvl_layout_04:
0D520 00 4C                         .db #$00, #%01001100
0D522 40 6C                         .db #$40, #%01101100
0D524 80 4C                         .db #$80, #%01001100
0D526 81 AC                         .db #$81, #%10101100
0D528 C1 2C                         .db #$C1, #%00101100
0D52A 02 6C                         .db #$02, #%01101100
0D52C 42 CC                         .db #$42, #%11001100
0D52E 62 EC                         .db #$62, #%11101100
0D530 A2 CC                         .db #$A2, #%11001100
0D532 C3 CC                         .db #$C3, #%11001100
0D534 04 4C                         .db #$04, #%01001100
0D536 84 2C                         .db #$84, #%00101100
0D538 25 AC                         .db #$25, #%10101100
0D53A 85 AC                         .db #$85, #%10101100
0D53C 06 AC                         .db #$06, #%10101100
0D53E 36 CC                         .db #$36, #%11001100
0D540 56 CC                         .db #$56, #%11001100
0D542 66 EC                         .db #$66, #%11101100
0D544 96 6C                         .db #$96, #%01101100
0D546 C7 AC                         .db #$C7, #%10101100
0D548 08 2C                         .db #$08, #%00101100
0D54A 78 6C                         .db #$78, #%01101100
0D54C D8 0C                         .db #$D8, #%00001100
0D54E 30 A1                         .db #$30, #%10100001
0D550 B0 21                         .db #$B0, #%00100001
0D552 01 41                         .db #$01, #%01000001
0D554 41 61                         .db #$41, #%01100001
0D556 91 A1                         .db #$91, #%10100001
0D558 A1 21                         .db #$A1, #%00100001
0D55A 52 C1                         .db #$52, #%11000001
0D55C 72 E1                         .db #$72, #%11100001
0D55E B2 C1                         .db #$B2, #%11000001
0D560 C2 21                         .db #$C2, #%00100001
0D562 03 41                         .db #$03, #%01000001
0D564 33 C1                         .db #$33, #%11000001
0D566 83 21                         .db #$83, #%00100001
0D568 D3 E1                         .db #$D3, #%11100001
0D56A 05 21                         .db #$05, #%00100001
0D56C 45 E1                         .db #$45, #%11100001
0D56E A5 21                         .db #$A5, #%00100001
0D570 16 A1                         .db #$16, #%10100001
0D572 76 A1                         .db #$76, #%10100001
0D574 27 A1                         .db #$27, #%10100001
0D576 57 21                         .db #$57, #%00100001
0D578 87 41                         .db #$87, #%01000001
0D57A B7 A1                         .db #$B7, #%10100001
0D57C 19 21                         .db #$19, #%00100001
0D57E 39 41                         .db #$39, #%01000001
0D580 89 41                         .db #$89, #%01000001
0D582 C9 21                         .db #$C9, #%00100001
0D584 D0 1A                         .db #$D0, #%00011010
0D586 55 1A                         .db #$55, #%00011010
0D588 95 1A                         .db #$95, #%00011010
0D58A D7 1A                         .db #$D7, #%00011010
0D58C 09 1A                         .db #$09, #%00011010
0D58E 79 1A                         .db #$79, #%00011010
0D590 FF                            .db #LEVEL_END
0D591                           
0D591                           lvl_layout_05:
0D591 40 0A                         .db #$40, #%00001010
0D593 70 1A                         .db #$70, #%00011010
0D595 B0 42                         .db #$B0, #%01000010
0D597 41 A7                         .db #$41, #%10100111
0D599 B1 22                         .db #$B1, #%00100010
0D59B D1 15                         .db #$D1, #%00010101
0D59D 22 0A                         .db #$22, #%00001010
0D59F 52 05                         .db #$52, #%00000101
0D5A1 B2 42                         .db #$B2, #%01000010
0D5A3 03 27                         .db #$03, #%00100111
0D5A5 33 67                         .db #$33, #%01100111
0D5A7 73 67                         .db #$73, #%01100111
0D5A9 B3 47                         .db #$B3, #%01000111
0D5AB 05 E5                         .db #$05, #%11100101
0D5AD 25 A5                         .db #$25, #%10100101
0D5AF 35 25                         .db #$35, #%00100101
0D5B1 65 45                         .db #$65, #%01000101
0D5B3 A5 45                         .db #$A5, #%01000101
0D5B5 46 E5                         .db #$46, #%11100101
0D5B7 66 E5                         .db #$66, #%11100101
0D5B9 86 E5                         .db #$86, #%11100101
0D5BB A6 E2                         .db #$A6, #%11100010
0D5BD C6 E5                         .db #$C6, #%11100101
0D5BF 27 25                         .db #$27, #%00100101
0D5C1 77 05                         .db #$77, #%00000101
0D5C3 B7 02                         .db #$B7, #%00000010
0D5C5 09 05                         .db #$09, #%00000101
0D5C7 79 05                         .db #$79, #%00000101
0D5C9 B9 02                         .db #$B9, #%00000010
0D5CB FF                            .db #LEVEL_END
0D5CC                           
0D5CC                           lvl_layout_06:
0D5CC 00 03                         .db #$00, #%00000011
0D5CE 20 03                         .db #$20, #%00000011
0D5D0 40 03                         .db #$40, #%00000011
0D5D2 A0 03                         .db #$A0, #%00000011
0D5D4 C0 03                         .db #$C0, #%00000011
0D5D6 11 03                         .db #$11, #%00000011
0D5D8 31 03                         .db #$31, #%00000011
0D5DA 51 03                         .db #$51, #%00000011
0D5DC 91 03                         .db #$91, #%00000011
0D5DE B1 03                         .db #$B1, #%00000011
0D5E0 D1 03                         .db #$D1, #%00000011
0D5E2 02 03                         .db #$02, #%00000011
0D5E4 22 03                         .db #$22, #%00000011
0D5E6 42 03                         .db #$42, #%00000011
0D5E8 A2 03                         .db #$A2, #%00000011
0D5EA C2 03                         .db #$C2, #%00000011
0D5EC 13 03                         .db #$13, #%00000011
0D5EE 33 03                         .db #$33, #%00000011
0D5F0 53 03                         .db #$53, #%00000011
0D5F2 93 03                         .db #$93, #%00000011
0D5F4 B3 03                         .db #$B3, #%00000011
0D5F6 D3 03                         .db #$D3, #%00000011
0D5F8 04 03                         .db #$04, #%00000011
0D5FA 24 03                         .db #$24, #%00000011
0D5FC 44 03                         .db #$44, #%00000011
0D5FE A4 03                         .db #$A4, #%00000011
0D600 C4 03                         .db #$C4, #%00000011
0D602 15 03                         .db #$15, #%00000011
0D604 35 03                         .db #$35, #%00000011
0D606 55 03                         .db #$55, #%00000011
0D608 95 03                         .db #$95, #%00000011
0D60A B5 03                         .db #$B5, #%00000011
0D60C D5 03                         .db #$D5, #%00000011
0D60E 06 03                         .db #$06, #%00000011
0D610 26 03                         .db #$26, #%00000011
0D612 46 03                         .db #$46, #%00000011
0D614 A6 03                         .db #$A6, #%00000011
0D616 C6 03                         .db #$C6, #%00000011
0D618 17 03                         .db #$17, #%00000011
0D61A 37 03                         .db #$37, #%00000011
0D61C 57 03                         .db #$57, #%00000011
0D61E 97 03                         .db #$97, #%00000011
0D620 B7 03                         .db #$B7, #%00000011
0D622 D7 03                         .db #$D7, #%00000011
0D624 08 03                         .db #$08, #%00000011
0D626 28 03                         .db #$28, #%00000011
0D628 48 03                         .db #$48, #%00000011
0D62A A8 03                         .db #$A8, #%00000011
0D62C C8 03                         .db #$C8, #%00000011
0D62E 19 03                         .db #$19, #%00000011
0D630 39 03                         .db #$39, #%00000011
0D632 59 03                         .db #$59, #%00000011
0D634 99 03                         .db #$99, #%00000011
0D636 B9 03                         .db #$B9, #%00000011
0D638 D9 03                         .db #$D9, #%00000011
0D63A 60 4B                         .db #$60, #%01001011
0D63C 71 CB                         .db #$71, #%11001011
0D63E 62 4B                         .db #$62, #%01001011
0D640 64 4B                         .db #$64, #%01001011
0D642 75 CB                         .db #$75, #%11001011
0D644 66 4B                         .db #$66, #%01001011
0D646 68 4B                         .db #$68, #%01001011
0D648 79 0B                         .db #$79, #%00001011
0D64A 70 03                         .db #$70, #%00000011
0D64C 72 03                         .db #$72, #%00000011
0D64E 74 03                         .db #$74, #%00000011
0D650 76 03                         .db #$76, #%00000011
0D652 78 03                         .db #$78, #%00000011
0D654 FF                            .db #LEVEL_END
0D655                           
0D655                           lvl_layout_07:
0D655 00 11                         .db #$00, #%00010001
0D657 01 FA                         .db #$01, #%11111010
0D659 12 BA                         .db #$12, #%10111010
0D65B 23 DA                         .db #$23, #%11011010
0D65D 34 FA                         .db #$34, #%11111010
0D65F 05 DA                         .db #$05, #%11011010
0D661 15 FA                         .db #$15, #%11111010
0D663 45 BA                         .db #$45, #%10111010
0D665 56 DA                         .db #$56, #%11011010
0D667 27 BA                         .db #$27, #%10111010
0D669 67 DA                         .db #$67, #%11011010
0D66B 38 3A                         .db #$38, #%00111010
0D66D 78 BA                         .db #$78, #%10111010
0D66F 09 3A                         .db #$09, #%00111010
0D671 39 3A                         .db #$39, #%00111010
0D673 89 1A                         .db #$89, #%00011010
0D675 B0 01                         .db #$B0, #%00000001
0D677 D0 01                         .db #$D0, #%00000001
0D679 A1 01                         .db #$A1, #%00000001
0D67B C1 11                         .db #$C1, #%00010001
0D67D B2 01                         .db #$B2, #%00000001
0D67F D2 01                         .db #$D2, #%00000001
0D681 A3 01                         .db #$A3, #%00000001
0D683 C3 01                         .db #$C3, #%00000001
0D685 B4 01                         .db #$B4, #%00000001
0D687 D4 01                         .db #$D4, #%00000001
0D689 A5 01                         .db #$A5, #%00000001
0D68B C5 01                         .db #$C5, #%00000001
0D68D B6 01                         .db #$B6, #%00000001
0D68F D6 01                         .db #$D6, #%00000001
0D691 A7 01                         .db #$A7, #%00000001
0D693 C7 01                         .db #$C7, #%00000001
0D695 FF                            .db #LEVEL_END
0D696                           
0D696                           lvl_layout_08:
0D696 40 B5                         .db #$40, #%10110101
0D698 31 0D                         .db #$31, #%00001101
0D69A 61 10                         .db #$61, #%00010000
0D69C 42 C7                         .db #$42, #%11000111
0D69E 52 67                         .db #$52, #%01100111
0D6A0 63 C7                         .db #$63, #%11000111
0D6A2 83 E7                         .db #$83, #%11100111
0D6A4 05 07                         .db #$05, #%00000111
0D6A6 15 3A                         .db #$15, #%00111010
0D6A8 07 63                         .db #$07, #%01100011
0D6AA 27 13                         .db #$27, #%00010011
0D6AC 38 A5                         .db #$38, #%10100101
0D6AE 09 14                         .db #$09, #%00010100
0D6B0 19 05                         .db #$19, #%00000101
0D6B2 D0 E0                         .db #$D0, #%11100000
0D6B4 C2 A0                         .db #$C2, #%10100000
0D6B6 B3 E0                         .db #$B3, #%11100000
0D6B8 D5 E0                         .db #$D5, #%11100000
0D6BA C6 E0                         .db #$C6, #%11100000
0D6BC B0 C4                         .db #$B0, #%11000100
0D6BE C0 A4                         .db #$C0, #%10100100
0D6C0 D1 A4                         .db #$D1, #%10100100
0D6C2 C4 24                         .db #$C4, #%00100100
0D6C4 C5 04                         .db #$C5, #%00000100
0D6C6 B7 44                         .db #$B7, #%01000100
0D6C8 B8 A4                         .db #$B8, #%10100100
0D6CA D9 05                         .db #$D9, #%00000101
0D6CC FF                            .db #LEVEL_END
0D6CD                           
0D6CD                           lvl_layout_09:
0D6CD 81 04                         .db #$81, #%00000100
0D6CF D1 04                         .db #$D1, #%00000100
0D6D1 32 C4                         .db #$32, #%11000100
0D6D3 A2 C4                         .db #$A2, #%11000100
0D6D5 C2 24                         .db #$C2, #%00100100
0D6D7 13 24                         .db #$13, #%00100100
0D6D9 53 04                         .db #$53, #%00000100
0D6DB C3 27                         .db #$C3, #%00100111
0D6DD 15 6C                         .db #$15, #%01101100
0D6DF 55 6C                         .db #$55, #%01101100
0D6E1 95 6C                         .db #$95, #%01101100
0D6E3 D5 0C                         .db #$D5, #%00001100
0D6E5 27 C7                         .db #$27, #%11000111
0D6E7 47 C7                         .db #$47, #%11000111
0D6E9 67 C7                         .db #$67, #%11000111
0D6EB 87 C7                         .db #$87, #%11000111
0D6ED A7 C7                         .db #$A7, #%11000111
0D6EF C7 C7                         .db #$C7, #%11000111
0D6F1 08 13                         .db #$08, #%00010011
0D6F3 28 15                         .db #$28, #%00010101
0D6F5 48 12                         .db #$48, #%00010010
0D6F7 68 15                         .db #$68, #%00010101
0D6F9 88 11                         .db #$88, #%00010001
0D6FB A8 10                         .db #$A8, #%00010000
0D6FD C8 14                         .db #$C8, #%00010100
0D6FF 09 07                         .db #$09, #%00000111
0D701 19 03                         .db #$19, #%00000011
0D703 39 05                         .db #$39, #%00000101
0D705 59 02                         .db #$59, #%00000010
0D707 79 05                         .db #$79, #%00000101
0D709 99 01                         .db #$99, #%00000001
0D70B B9 00                         .db #$B9, #%00000000
0D70D D9 04                         .db #$D9, #%00000100
0D70F FF                            .db #LEVEL_END
0D710                           
0D710                           lvl_layout_10:
0D710 00 02                         .db #$00, #%00000010
0D712 10 C9                         .db #$10, #%11001001
0D714 50 C9                         .db #$50, #%11001001
0D716 90 C9                         .db #$90, #%11001001
0D718 D0 C9                         .db #$D0, #%11001001
0D71A 31 C9                         .db #$31, #%11001001
0D71C 71 C9                         .db #$71, #%11001001
0D71E B1 C9                         .db #$B1, #%11001001
0D720 13 C9                         .db #$13, #%11001001
0D722 53 C9                         .db #$53, #%11001001
0D724 93 C9                         .db #$93, #%11001001
0D726 D3 C9                         .db #$D3, #%11001001
0D728 34 C9                         .db #$34, #%11001001
0D72A 74 C9                         .db #$74, #%11001001
0D72C B4 C9                         .db #$B4, #%11001001
0D72E 16 C9                         .db #$16, #%11001001
0D730 56 C9                         .db #$56, #%11001001
0D732 96 C9                         .db #$96, #%11001001
0D734 D6 C9                         .db #$D6, #%11001001
0D736 37 C9                         .db #$37, #%11001001
0D738 77 C9                         .db #$77, #%11001001
0D73A B7 C9                         .db #$B7, #%11001001
0D73C D8 12                         .db #$D8, #%00010010
0D73E FF                            .db #LEVEL_END
0D73F                           
0D73F                           lvl_layout_11:
0D73F 00 65                         .db #$00, #%01100101
0D741 40 45                         .db #$40, #%01000101
0D743 50 A7                         .db #$50, #%10100111
0D745 80 05                         .db #$80, #%00000101
0D747 90 A7                         .db #$90, #%10100111
0D749 A0 65                         .db #$A0, #%01100101
0D74B 01 43                         .db #$01, #%01000011
0D74D 31 23                         .db #$31, #%00100011
0D74F 61 A7                         .db #$61, #%10100111
0D751 81 A7                         .db #$81, #%10100111
0D753 A1 63                         .db #$A1, #%01100011
0D755 02 44                         .db #$02, #%01000100
0D757 32 44                         .db #$32, #%01000100
0D759 92 04                         .db #$92, #%00000100
0D75B A2 64                         .db #$A2, #%01100100
0D75D 03 40                         .db #$03, #%01000000
0D75F 33 40                         .db #$33, #%01000000
0D761 64 81                         .db #$64, #%10000001
0D763 84 82                         .db #$84, #%10000010
0D765 93 00                         .db #$93, #%00000000
0D767 A3 60                         .db #$A3, #%01100000
0D769 04 41                         .db #$04, #%01000001
0D76B 34 41                         .db #$34, #%01000001
0D76D 94 02                         .db #$94, #%00000010
0D76F A4 62                         .db #$A4, #%01100010
0D771 05 47                         .db #$05, #%01000111
0D773 35 67                         .db #$35, #%01100111
0D775 75 0A                         .db #$75, #%00001010
0D777 85 47                         .db #$85, #%01000111
0D779 B5 47                         .db #$B5, #%01000111
0D77B 06 E7                         .db #$06, #%11100111
0D77D 16 5A                         .db #$16, #%01011010
0D77F 26 11                         .db #$26, #%00010001
0D781 46 13                         .db #$46, #%00010011
0D783 56 1A                         .db #$56, #%00011010
0D785 66 14                         .db #$66, #%00010100
0D787 86 10                         .db #$86, #%00010000
0D789 96 5A                         .db #$96, #%01011010
0D78B A6 12                         .db #$A6, #%00010010
0D78D C6 15                         .db #$C6, #%00010101
0D78F D6 E7                         .db #$D6, #%11100111
0D791 FF                            .db #LEVEL_END
0D792                           
0D792                           lvl_layout_12:
0D792 00 00                         .db #$00, #%00000000
0D794 50 C0                         .db #$50, #%11000000
0D796 80 00                         .db #$80, #%00000000
0D798 61 00                         .db #$61, #%00000000
0D79A 22 C0                         .db #$22, #%11000000
0D79C 82 E0                         .db #$82, #%11100000
0D79E C2 E0                         .db #$C2, #%11100000
0D7A0 A3 20                         .db #$A3, #%00100000
0D7A2 C3 10                         .db #$C3, #%00010000
0D7A4 04 00                         .db #$04, #%00000000
0D7A6 54 20                         .db #$54, #%00100000
0D7A8 15 0A                         .db #$15, #%00001010
0D7AA 25 C0                         .db #$25, #%11000000
0D7AC 55 E0                         .db #$55, #%11100000
0D7AE 86 20                         .db #$86, #%00100000
0D7B0 C6 E0                         .db #$C6, #%11100000
0D7B2 C7 A0                         .db #$C7, #%10100000
0D7B4 88 00                         .db #$88, #%00000000
0D7B6 59 00                         .db #$59, #%00000000
0D7B8 89 20                         .db #$89, #%00100000
0D7BA D9 1A                         .db #$D9, #%00011010
0D7BC FF                            .db #LEVEL_END
0D7BD                           
0D7BD                           lvl_layout_13:
0D7BD 10 E0                         .db #$10, #%11100000
0D7BF 20 E0                         .db #$20, #%11100000
0D7C1 30 E0                         .db #$30, #%11100000
0D7C3 40 40                         .db #$40, #%01000000
0D7C5 80 60                         .db #$80, #%01100000
0D7C7 C0 E0                         .db #$C0, #%11100000
0D7C9 D0 E0                         .db #$D0, #%11100000
0D7CB 41 40                         .db #$41, #%01000000
0D7CD 71 60                         .db #$71, #%01100000
0D7CF 52 60                         .db #$52, #%01100000
0D7D1 A2 20                         .db #$A2, #%00100000
0D7D3 43 60                         .db #$43, #%01100000
0D7D5 83 60                         .db #$83, #%01100000
0D7D7 14 74                         .db #$14, #%01110100
0D7D9 54 74                         .db #$54, #%01110100
0D7DB 94 74                         .db #$94, #%01110100
0D7DD D4 14                         .db #$D4, #%00010100
0D7DF 15 0D                         .db #$15, #%00001101
0D7E1 55 0D                         .db #$55, #%00001101
0D7E3 95 0D                         .db #$95, #%00001101
0D7E5 D5 0D                         .db #$D5, #%00001101
0D7E7 26 0D                         .db #$26, #%00001101
0D7E9 46 0D                         .db #$46, #%00001101
0D7EB 66 0D                         .db #$66, #%00001101
0D7ED 86 0D                         .db #$86, #%00001101
0D7EF A6 0D                         .db #$A6, #%00001101
0D7F1 C6 0D                         .db #$C6, #%00001101
0D7F3 07 10                         .db #$07, #%00010000
0D7F5 37 0D                         .db #$37, #%00001101
0D7F7 77 0D                         .db #$77, #%00001101
0D7F9 B7 0D                         .db #$B7, #%00001101
0D7FB 28 0D                         .db #$28, #%00001101
0D7FD 48 0D                         .db #$48, #%00001101
0D7FF 68 0D                         .db #$68, #%00001101
0D801 88 0D                         .db #$88, #%00001101
0D803 A8 0D                         .db #$A8, #%00001101
0D805 C8 0D                         .db #$C8, #%00001101
0D807 19 0D                         .db #$19, #%00001101
0D809 59 0D                         .db #$59, #%00001101
0D80B 99 0D                         .db #$99, #%00001101
0D80D D9 0D                         .db #$D9, #%00001101
0D80F FF                            .db #LEVEL_END
0D810                           
0D810                           lvl_layout_14:
0D810 00 67                         .db #$00, #%01100111
0D812 40 67                         .db #$40, #%01100111
0D814 80 67                         .db #$80, #%01100111
0D816 C0 27                         .db #$C0, #%00100111
0D818 01 27                         .db #$01, #%00100111
0D81A 31 C7                         .db #$31, #%11000111
0D81C 51 C7                         .db #$51, #%11000111
0D81E 71 C7                         .db #$71, #%11000111
0D820 91 C7                         .db #$91, #%11000111
0D822 B1 C7                         .db #$B1, #%11000111
0D824 D1 07                         .db #$D1, #%00000111
0D826 02 E7                         .db #$02, #%11100111
0D828 06 E7                         .db #$06, #%11100111
0D82A 13 07                         .db #$13, #%00000111
0D82C D3 07                         .db #$D3, #%00000111
0D82E 15 07                         .db #$15, #%00000111
0D830 35 07                         .db #$35, #%00000111
0D832 55 07                         .db #$55, #%00000111
0D834 75 07                         .db #$75, #%00000111
0D836 95 07                         .db #$95, #%00000111
0D838 B5 07                         .db #$B5, #%00000111
0D83A D5 07                         .db #$D5, #%00000111
0D83C 17 07                         .db #$17, #%00000111
0D83E 37 C7                         .db #$37, #%11000111
0D840 57 C7                         .db #$57, #%11000111
0D842 77 C7                         .db #$77, #%11000111
0D844 97 C7                         .db #$97, #%11000111
0D846 B7 C7                         .db #$B7, #%11000111
0D848 D7 07                         .db #$D7, #%00000111
0D84A 19 07                         .db #$19, #%00000111
0D84C D9 07                         .db #$D9, #%00000111
0D84E 22 4C                         .db #$22, #%01001100
0D850 62 4C                         .db #$62, #%01001100
0D852 A2 4C                         .db #$A2, #%01001100
0D854 24 0C                         .db #$24, #%00001100
0D856 44 0C                         .db #$44, #%00001100
0D858 64 0C                         .db #$64, #%00001100
0D85A 84 0C                         .db #$84, #%00001100
0D85C A4 0C                         .db #$A4, #%00001100
0D85E C4 0C                         .db #$C4, #%00001100
0D860 26 0C                         .db #$26, #%00001100
0D862 46 0C                         .db #$46, #%00001100
0D864 66 0C                         .db #$66, #%00001100
0D866 86 0C                         .db #$86, #%00001100
0D868 A6 0C                         .db #$A6, #%00001100
0D86A C6 0C                         .db #$C6, #%00001100
0D86C 28 4C                         .db #$28, #%01001100
0D86E 68 4C                         .db #$68, #%01001100
0D870 A8 4C                         .db #$A8, #%01001100
0D872 32 04                         .db #$32, #%00000100
0D874 52 04                         .db #$52, #%00000100
0D876 72 04                         .db #$72, #%00000100
0D878 92 04                         .db #$92, #%00000100
0D87A B2 04                         .db #$B2, #%00000100
0D87C 38 04                         .db #$38, #%00000100
0D87E 58 04                         .db #$58, #%00000100
0D880 78 04                         .db #$78, #%00000100
0D882 98 04                         .db #$98, #%00000100
0D884 B8 04                         .db #$B8, #%00000100
0D886 FF                            .db #LEVEL_END
0D887                           
0D887                           lvl_layout_15:
0D887 00 7A                         .db #$00, #%01111010
0D889 40 7A                         .db #$40, #%01111010
0D88B 80 7A                         .db #$80, #%01111010
0D88D C0 3A                         .db #$C0, #%00111010
0D88F 61 64                         .db #$61, #%01100100
0D891 05 E4                         .db #$05, #%11100100
0D893 15 64                         .db #$15, #%01100100
0D895 55 64                         .db #$55, #%01100100
0D897 95 64                         .db #$95, #%01100100
0D899 D5 E4                         .db #$D5, #%11100100
0D89B 26 04                         .db #$26, #%00000100
0D89D 46 44                         .db #$46, #%01000100
0D89F 76 64                         .db #$76, #%01100100
0D8A1 C6 04                         .db #$C6, #%00000100
0D8A3 17 04                         .db #$17, #%00000100
0D8A5 37 64                         .db #$37, #%01100100
0D8A7 77 44                         .db #$77, #%01000100
0D8A9 B7 04                         .db #$B7, #%00000100
0D8AB 18 64                         .db #$18, #%01100100
0D8AD 58 64                         .db #$58, #%01100100
0D8AF 98 64                         .db #$98, #%01100100
0D8B1 FF                            .db #LEVEL_END
0D8B2                           
0D8B2                           lvl_layout_16:
0D8B2 10 E1                         .db #$10, #%11100001
0D8B4 20 9A                         .db #$20, #%10011010
0D8B6 30 E1                         .db #$30, #%11100001
0D8B8 40 E1                         .db #$40, #%11100001
0D8BA 50 E1                         .db #$50, #%11100001
0D8BC 60 C1                         .db #$60, #%11000001
0D8BE 70 E1                         .db #$70, #%11100001
0D8C0 80 E1                         .db #$80, #%11100001
0D8C2 90 E1                         .db #$90, #%11100001
0D8C4 A0 61                         .db #$A0, #%01100001
0D8C6 21 C1                         .db #$21, #%11000001
0D8C8 A1 1A                         .db #$A1, #%00011010
0D8CA B1 41                         .db #$B1, #%01000001
0D8CC A2 E1                         .db #$A2, #%11100001
0D8CE B2 E1                         .db #$B2, #%11100001
0D8D0 C2 1A                         .db #$C2, #%00011010
0D8D2 D2 E1                         .db #$D2, #%11100001
0D8D4 63 1A                         .db #$63, #%00011010
0D8D6 C3 C1                         .db #$C3, #%11000001
0D8D8 14 61                         .db #$14, #%01100001
0D8DA 54 61                         .db #$54, #%01100001
0D8DC 94 C1                         .db #$94, #%11000001
0D8DE 15 61                         .db #$15, #%01100001
0D8E0 55 41                         .db #$55, #%01000001
0D8E2 85 1A                         .db #$85, #%00011010
0D8E4 16 41                         .db #$16, #%01000001
0D8E6 46 1A                         .db #$46, #%00011010
0D8E8 56 61                         .db #$56, #%01100001
0D8EA A6 61                         .db #$A6, #%01100001
0D8EC 17 67                         .db #$17, #%01100111
0D8EE 57 67                         .db #$57, #%01100111
0D8F0 97 67                         .db #$97, #%01100111
0D8F2 D7 07                         .db #$D7, #%00000111
0D8F4 28 41                         .db #$28, #%01000001
0D8F6 58 61                         .db #$58, #%01100001
0D8F8 A8 41                         .db #$A8, #%01000001
0D8FA 18 11                         .db #$18, #%00010001
0D8FC 38 11                         .db #$38, #%00010001
0D8FE 98 11                         .db #$98, #%00010001
0D900 B8 11                         .db #$B8, #%00010001
0D902 D8 11                         .db #$D8, #%00010001
0D904 59 09                         .db #$59, #%00001001
0D906 FF                            .db #LEVEL_END
0D907                           
0D907                           lvl_layout_17:
0D907 10 EA                         .db #$10, #%11101010
0D909 20 E2                         .db #$20, #%11100010
0D90B 30 62                         .db #$30, #%01100010
0D90D 70 02                         .db #$70, #%00000010
0D90F 80 6A                         .db #$80, #%01101010
0D911 90 22                         .db #$90, #%00100010
0D913 01 AA                         .db #$01, #%10101010
0D915 31 6A                         .db #$31, #%01101010
0D917 81 2A                         .db #$81, #%00101010
0D919 A1 02                         .db #$A1, #%00000010
0D91B C1 02                         .db #$C1, #%00000010
0D91D D1 0A                         .db #$D1, #%00001010
0D91F 32 EA                         .db #$32, #%11101010
0D921 42 6A                         .db #$42, #%01101010
0D923 62 02                         .db #$62, #%00000010
0D925 92 6A                         .db #$92, #%01101010
0D927 D2 E2                         .db #$D2, #%11100010
0D929 43 1A                         .db #$43, #%00011010
0D92B 53 CA                         .db #$53, #%11001010
0D92D 73 02                         .db #$73, #%00000010
0D92F 83 4A                         .db #$83, #%01001010
0D931 B3 CA                         .db #$B3, #%11001010
0D933 C3 EA                         .db #$C3, #%11101010
0D935 04 0A                         .db #$04, #%00001010
0D937 14 A2                         .db #$14, #%10100010
0D939 24 AA                         .db #$24, #%10101010
0D93B 44 AA                         .db #$44, #%10101010
0D93D 64 6A                         .db #$64, #%01101010
0D93F 65 6A                         .db #$65, #%01101010
0D941 A5 AA                         .db #$A5, #%10101010
0D943 06 EA                         .db #$06, #%11101010
0D945 16 62                         .db #$16, #%01100010
0D947 56 42                         .db #$56, #%01000010
0D949 86 2A                         .db #$86, #%00101010
0D94B 17 42                         .db #$17, #%01000010
0D94D 47 12                         .db #$47, #%00010010
0D94F 57 6A                         .db #$57, #%01101010
0D951 97 4A                         .db #$97, #%01001010
0D953 A7 02                         .db #$A7, #%00000010
0D955 18 02                         .db #$18, #%00000010
0D957 28 0A                         .db #$28, #%00001010
0D959 38 22                         .db #$38, #%00100010
0D95B 68 2A                         .db #$68, #%00101010
0D95D 88 62                         .db #$88, #%01100010
0D95F C8 0A                         .db #$C8, #%00001010
0D961 D8 02                         .db #$D8, #%00000010
0D963 19 2A                         .db #$19, #%00101010
0D965 39 2A                         .db #$39, #%00101010
0D967 69 42                         .db #$69, #%01000010
0D969 99 2A                         .db #$99, #%00101010
0D96B B9 42                         .db #$B9, #%01000010
0D96D FF                            .db #LEVEL_END
0D96E                           
0D96E                           lvl_layout_18:
0D96E 00 12                         .db #$00, #%00010010
0D970 40 1A                         .db #$40, #%00011010
0D972 50 11                         .db #$50, #%00010001
0D974 70 1A                         .db #$70, #%00011010
0D976 80 10                         .db #$80, #%00010000
0D978 D0 13                         .db #$D0, #%00010011
0D97A 01 1A                         .db #$01, #%00011010
0D97C 22 15                         .db #$22, #%00010101
0D97E A2 1A                         .db #$A2, #%00011010
0D980 B2 14                         .db #$B2, #%00010100
0D982 03 67                         .db #$03, #%01100111
0D984 43 67                         .db #$43, #%01100111
0D986 83 67                         .db #$83, #%01100111
0D988 24 09                         .db #$24, #%00001001
0D98A 74 0D                         .db #$74, #%00001101
0D98C C4 0A                         .db #$C4, #%00001010
0D98E 05 A7                         .db #$05, #%10100111
0D990 45 27                         .db #$45, #%00100111
0D992 95 27                         .db #$95, #%00100111
0D994 16 C7                         .db #$16, #%11000111
0D996 36 67                         .db #$36, #%01100111
0D998 86 67                         .db #$86, #%01100111
0D99A D6 07                         .db #$D6, #%00000111
0D99C 07 A3                         .db #$07, #%10100011
0D99E 27 23                         .db #$27, #%00100011
0D9A0 47 C7                         .db #$47, #%11000111
0D9A2 57 A0                         .db #$57, #%10100000
0D9A4 67 A7                         .db #$67, #%10100111
0D9A6 77 20                         .db #$77, #%00100000
0D9A8 97 C7                         .db #$97, #%11000111
0D9AA A7 A4                         .db #$A7, #%10100100
0D9AC B7 A7                         .db #$B7, #%10100111
0D9AE C7 24                         .db #$C7, #%00100100
0D9B0 28 0B                         .db #$28, #%00001011
0D9B2 38 A3                         .db #$38, #%10100011
0D9B4 78 08                         .db #$78, #%00001000
0D9B6 88 A0                         .db #$88, #%10100000
0D9B8 C8 0C                         .db #$C8, #%00001100
0D9BA D8 A4                         .db #$D8, #%10100100
0D9BC 09 43                         .db #$09, #%01000011
0D9BE 59 40                         .db #$59, #%01000000
0D9C0 A9 44                         .db #$A9, #%01000100
0D9C2 FF                            .db #LEVEL_END
0D9C3                           
0D9C3                           lvl_layout_19:
0D9C3 11 A8                         .db #$11, #%10101000
0D9C5 21 68                         .db #$21, #%01101000
0D9C7 81 28                         .db #$81, #%00101000
0D9C9 B1 48                         .db #$B1, #%01001000
0D9CB 22 48                         .db #$22, #%01001000
0D9CD 62 68                         .db #$62, #%01101000
0D9CF B2 28                         .db #$B2, #%00101000
0D9D1 23 28                         .db #$23, #%00101000
0D9D3 83 28                         .db #$83, #%00101000
0D9D5 B3 28                         .db #$B3, #%00101000
0D9D7 04 E8                         .db #$04, #%11101000
0D9D9 24 08                         .db #$24, #%00001000
0D9DB 44 08                         .db #$44, #%00001000
0D9DD 64 E8                         .db #$64, #%11101000
0D9DF 84 E8                         .db #$84, #%11101000
0D9E1 C4 A8                         .db #$C4, #%10101000
0D9E3 D4 E8                         .db #$D4, #%11101000
0D9E5 15 48                         .db #$15, #%01001000
0D9E7 55 C8                         .db #$55, #%11001000
0D9E9 75 C8                         .db #$75, #%11001000
0D9EB A5 08                         .db #$A5, #%00001000
0D9ED 36 08                         .db #$36, #%00001000
0D9EF B6 08                         .db #$B6, #%00001000
0D9F1 27 48                         .db #$27, #%01001000
0D9F3 97 28                         .db #$97, #%00101000
0D9F5 C7 08                         .db #$C7, #%00001000
0D9F7 09 61                         .db #$09, #%01100001
0D9F9 19 11                         .db #$19, #%00010001
0D9FB 49 61                         .db #$49, #%01100001
0D9FD 89 31                         .db #$89, #%00110001
0D9FF A9 61                         .db #$A9, #%01100001
0DA01 FF                            .db #LEVEL_END
0DA02                           
0DA02                           lvl_layout_20:
0DA02 00 60                         .db #$00, #%01100000
0DA04 10 1A                         .db #$10, #%00011010
0DA06 40 A7                         .db #$40, #%10100111
0DA08 50 20                         .db #$50, #%00100000
0DA0A 70 1A                         .db #$70, #%00011010
0DA0C 80 40                         .db #$80, #%01000000
0DA0E B0 1A                         .db #$B0, #%00011010
0DA10 C0 20                         .db #$C0, #%00100000
0DA12 01 40                         .db #$01, #%01000000
0DA14 31 1A                         .db #$31, #%00011010
0DA16 A1 40                         .db #$A1, #%01000000
0DA18 D1 1A                         .db #$D1, #%00011010
0DA1A 43 67                         .db #$43, #%01100111
0DA1C 83 47                         .db #$83, #%01000111
0DA1E 44 A7                         .db #$44, #%10100111
0DA20 54 25                         .db #$54, #%00100101
0DA22 94 08                         .db #$94, #%00001000
0DA24 A4 A7                         .db #$A4, #%10100111
0DA26 55 05                         .db #$55, #%00000101
0DA28 65 08                         .db #$65, #%00001000
0DA2A 06 27                         .db #$06, #%00100111
0DA2C 36 67                         .db #$36, #%01100111
0DA2E 76 28                         .db #$76, #%00101000
0DA30 A6 27                         .db #$A6, #%00100111
0DA32 D6 07                         .db #$D6, #%00000111
0DA34 A7 A7                         .db #$A7, #%10100111
0DA36 08 60                         .db #$08, #%01100000
0DA38 09 60                         .db #$09, #%01100000
0DA3A 18 A7                         .db #$18, #%10100111
0DA3C 48 A7                         .db #$48, #%10100111
0DA3E 58 47                         .db #$58, #%01000111
0DA40 88 27                         .db #$88, #%00100111
0DA42 B8 20                         .db #$B8, #%00100000
0DA44 D8 1A                         .db #$D8, #%00011010
0DA46 59 15                         .db #$59, #%00010101
0DA48 69 60                         .db #$69, #%01100000
0DA4A A9 60                         .db #$A9, #%01100000
0DA4C FF                            .db #LEVEL_END
0DA4D                           
0DA4D                           lvl_layout_21:
0DA4D 00 13                         .db #$00, #%00010011
0DA4F 10 11                         .db #$10, #%00010001
0DA51 20 67                         .db #$20, #%01100111
0DA53 60 67                         .db #$60, #%01100111
0DA55 A0 47                         .db #$A0, #%01000111
0DA57 D0 15                         .db #$D0, #%00010101
0DA59 32 63                         .db #$32, #%01100011
0DA5B 72 05                         .db #$72, #%00000101
0DA5D 82 43                         .db #$82, #%01000011
0DA5F B2 43                         .db #$B2, #%01000011
0DA61 33 03                         .db #$33, #%00000011
0DA63 43 2A                         .db #$43, #%00101010
0DA65 63 7A                         .db #$63, #%01111010
0DA67 73 2A                         .db #$73, #%00101010
0DA69 A3 7A                         .db #$A3, #%01111010
0DA6B 34 63                         .db #$34, #%01100011
0DA6D 74 63                         .db #$74, #%01100011
0DA6F B4 43                         .db #$B4, #%01000011
0DA71 06 63                         .db #$06, #%01100011
0DA73 46 63                         .db #$46, #%01100011
0DA75 86 63                         .db #$86, #%01100011
0DA77 C6 C3                         .db #$C6, #%11000011
0DA79 07 7A                         .db #$07, #%01111010
0DA7B 47 7A                         .db #$47, #%01111010
0DA7D 67 0A                         .db #$67, #%00001010
0DA7F 87 7A                         .db #$87, #%01111010
0DA81 08 13                         .db #$08, #%00010011
0DA83 18 43                         .db #$18, #%01000011
0DA85 48 63                         .db #$48, #%01100011
0DA87 88 63                         .db #$88, #%01100011
0DA89 FF                            .db #LEVEL_END
0DA8A                           
0DA8A                           lvl_layout_22:
0DA8A 00 7A                         .db #$00, #%01111010
0DA8C 40 7A                         .db #$40, #%01111010
0DA8E 80 7A                         .db #$80, #%01111010
0DA90 C0 3A                         .db #$C0, #%00111010
0DA92 13 67                         .db #$13, #%01100111
0DA94 83 A7                         .db #$83, #%10100111
0DA96 B3 07                         .db #$B3, #%00000111
0DA98 14 07                         .db #$14, #%00000111
0DA9A 44 07                         .db #$44, #%00000111
0DA9C A4 07                         .db #$A4, #%00000111
0DA9E 15 A5                         .db #$15, #%10100101
0DAA0 45 A5                         .db #$45, #%10100101
0DAA2 85 25                         .db #$85, #%00100101
0DAA4 86 05                         .db #$86, #%00000101
0DAA6 A6 05                         .db #$A6, #%00000101
0DAA8 17 11                         .db #$17, #%00010001
0DAAA 47 A1                         .db #$47, #%10100001
0DAAC 87 A1                         .db #$87, #%10100001
0DAAE B7 A1                         .db #$B7, #%10100001
0DAB0 18 41                         .db #$18, #%01000001
0DAB2 68 01                         .db #$68, #%00000001
0DAB4 D8 01                         .db #$D8, #%00000001
0DAB6 FF                            .db #LEVEL_END
0DAB7                           
0DAB7                           lvl_layout_23:
0DAB7 00 71                         .db #$00, #%01110001
0DAB9 40 11                         .db #$40, #%00010001
0DABB 50 43                         .db #$50, #%01000011
0DABD 80 D1                         .db #$80, #%11010001
0DABF 90 E3                         .db #$90, #%11100011
0DAC1 A0 63                         .db #$A0, #%01100011
0DAC3 01 63                         .db #$01, #%01100011
0DAC5 41 63                         .db #$41, #%01100011
0DAC7 A1 63                         .db #$A1, #%01100011
0DAC9 02 63                         .db #$02, #%01100011
0DACB 42 63                         .db #$42, #%01100011
0DACD 62 11                         .db #$62, #%00010001
0DACF A2 67                         .db #$A2, #%01100111
0DAD1 04 63                         .db #$04, #%01100011
0DAD3 44 23                         .db #$44, #%00100011
0DAD5 64 D1                         .db #$64, #%11010001
0DAD7 74 E3                         .db #$74, #%11100011
0DAD9 84 F1                         .db #$84, #%11110001
0DADB 94 E3                         .db #$94, #%11100011
0DADD A4 C7                         .db #$A4, #%11000111
0DADF B4 23                         .db #$B4, #%00100011
0DAE1 05 63                         .db #$05, #%01100011
0DAE3 45 23                         .db #$45, #%00100011
0DAE5 06 71                         .db #$06, #%01110001
0DAE7 46 11                         .db #$46, #%00010001
0DAE9 56 E3                         .db #$56, #%11100011
0DAEB D6 07                         .db #$D6, #%00000111
0DAED 17 D1                         .db #$17, #%11010001
0DAEF 27 43                         .db #$27, #%01000011
0DAF1 67 D1                         .db #$67, #%11010001
0DAF3 A7 C7                         .db #$A7, #%11000111
0DAF5 C7 A7                         .db #$C7, #%10100111
0DAF7 D7 B3                         .db #$D7, #%10110011
0DAF9 28 43                         .db #$28, #%01000011
0DAFB 78 43                         .db #$78, #%01000011
0DAFD 29 43                         .db #$29, #%01000011
0DAFF 79 43                         .db #$79, #%01000011
0DB01 FF                           .db #LEVEL_END
0DB02                           
0DB02                           lvl_layout_24:
0DB02 02 67                         .db #$02, #%01100111
0DB04 42 67                         .db #$42, #%01100111
0DB06 82 67                         .db #$82, #%01100111
0DB08 05 67                         .db #$05, #%01100111
0DB0A 45 67                         .db #$45, #%01100111
0DB0C 85 67                         .db #$85, #%01100111
0DB0E 08 67                         .db #$08, #%01100111
0DB10 48 67                         .db #$48, #%01100111
0DB12 88 67                         .db #$88, #%01100111
0DB14 30 E7                         .db #$30, #%11100111
0DB16 70 E7                         .db #$70, #%11100111
0DB18 B0 E7                         .db #$B0, #%11100111
0DB1A 34 E7                         .db #$34, #%11100111
0DB1C 74 E7                         .db #$74, #%11100111
0DB1E B4 E7                         .db #$B4, #%11100111
0DB20 20 13                         .db #$20, #%00010011
0DB22 40 10                         .db #$40, #%00010000
0DB24 80 02                         .db #$80, #%00000010
0DB26 41 05                         .db #$41, #%00000101
0DB28 B1 09                         .db #$B1, #%00001001
0DB2A 02 09                         .db #$02, #%00001001
0DB2C 52 0C                         .db #$52, #%00001100
0DB2E 13 11                         .db #$13, #%00010001
0DB30 33 04                         .db #$33, #%00000100
0DB32 74 0C                         .db #$74, #%00001100
0DB34 B4 08                         .db #$B4, #%00001000
0DB36 15 09                         .db #$15, #%00001001
0DB38 55 0C                         .db #$55, #%00001100
0DB3A 95 0C                         .db #$95, #%00001100
0DB3C 47 03                         .db #$47, #%00000011
0DB3E A7 12                         .db #$A7, #%00010010
0DB40 18 15                         .db #$18, #%00010101
0DB42 09 05                         .db #$09, #%00000101
0DB44 19 03                         .db #$19, #%00000011
0DB46 FF                            .db #LEVEL_END
0DB47                           
0DB47                           lvl_layout_25:
0DB47 00 12                         .db #$00, #%00010010
0DB49 10 63                         .db #$10, #%01100011
0DB4B 60 63                         .db #$60, #%01100011
0DB4D A0 07                         .db #$A0, #%00000111
0DB4F 01 11                         .db #$01, #%00010001
0DB51 A1 02                         .db #$A1, #%00000010
0DB53 02 67                         .db #$02, #%01100111
0DB55 42 07                         .db #$42, #%00000111
0DB57 62 67                         .db #$62, #%01100111
0DB59 A2 C7                         .db #$A2, #%11000111
0DB5B 03 61                         .db #$03, #%01100001
0DB5D 43 01                         .db #$43, #%00000001
0DB5F 63 61                         .db #$63, #%01100001
0DB61 A6 E7                         .db #$A6, #%11100111
0DB63 B6 47                         .db #$B6, #%01000111
0DB65 C6 01                         .db #$C6, #%00000001
0DB67 B7 42                         .db #$B7, #%01000010
0DB69 B8 42                         .db #$B8, #%01000010
0DB6B C8 0A                         .db #$C8, #%00001010
0DB6D 09 7A                         .db #$09, #%01111010
0DB6F 49 7A                         .db #$49, #%01111010
0DB71 89 3A                         .db #$89, #%00111010
0DB73 B9 42                         .db #$B9, #%01000010
0DB75 FF                            .db #LEVEL_END
0DB76                           
0DB76                           ;; Level layout address pointers
0DB76                           tbl_lvl_layout_hi:
0DB76                           ifdef TESTING
0DB76                               .db >#lvl_test
0DB76                           endif
0DB76 D4 D4 D4 D5 D5                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0DB7B D5 D6 D6 D6 D7                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0DB80 D7 D7 D7 D8 D8                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0DB85 D8 D9 D9 D9 DA                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0DB8A DA DA DA DB DB                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0DB8F                           
0DB8F                           tbl_lvl_layout_lo:
0DB8F                           ifdef TESTING
0DB8F                               .db <#lvl_test
0DB8F                           endif
0DB8F 9D B8 ED 20 91                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0DB94 CC 55 96 CD 10                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0DB99 3F 92 BD 10 87                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0DB9E B2 07 6E C3 02                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0DBA3 4D 8A B7 02 47                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0DBA8                           
0DBA8                           ;; Ball start position (#$YX)
0DBA8                           tbl_lvl_ball_startpos:
0DBA8                           ifdef TESTING
0DBA8                               .db #$29
0DBA8                           endif
0DBA8 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0DBAD 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0DBB2 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0DBB7 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0DBBC 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0DBC1                           
0DBC1                               
0DBC1                           ;; Ball start direction, color and tile score
0DBC1                           ;; #% ccc v tttt
0DBC1                           ;;    ||| | ++++-- tile score
0DBC1                           ;;    ||| +------- vertical direction, up (0) or down
0DBC1                           ;;    +++--------- color (CBRYGM)
0DBC1                           tbl_lvl_ball_init:
0DBC1                           ifdef TESTING
0DBC1                               .db #%00100000
0DBC1                           endif
0DBC1 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0DBC6 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0DBCB 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0DBD0 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0DBD5 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0DBDA                           
0DBDA                           
0DBDA                           
0DBDA                           ;; Helper table to multiply values by 16
0DBDA                           tbl_Times16:
0DBDA 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0DBE2 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0DBEA                               
0DBEA                           
0DBEA                           ;; Helper table to multiply values by 64
0DBEA                           tbl_Times64:
0DBEA 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0DBEE                           
0DBEE                           
0DBEE                           ;; Metatile ID to CHR data mapper
0DBEE                           tbl_GametileTopLeft:
0DBEE 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0DBF8                           
0DBF8                           tbl_GametileTopRight:
0DBF8 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0DC02                           
0DC02                           tbl_GametileBottomLeft:
0DC02 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0DC0C                           
0DC0C                           tbl_GametileBottomRight:
0DC0C 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DC16                           
0DC16                           ;; Metatile ID to RAM byte data mapper
0DC16                           tbl_GameTileRamByte:
0DC16 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DC1B                           
0DC1B                           ;; HUD text data (with opaque background tile for sprite zero)
0DC1B                           tbl_HudText:
0DC1B 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DC23 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DC2A 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DC32 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DC39                           
0DC39                           ;; Move block top left tile based on color
0DC39                           tbl_MoveBlockTopLeftTile:
0DC39 42 4A 42 4A 42 4A 42          .db #$42, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DC40                           
0DC40                           ;; Game over data
0DC40                           tbl_GameOver:
0DC40 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DC44 00 00                         .db #_SPACE, #_SPACE
0DC46 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DC4A                           
0DC4A                           ;; Background fade pallette table
0DC4A                           tbl_BackgroundFade:
0DC4A 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DC54                           
0DC54                           ;; Sound effects
0DC54                           .include "game/include/table/sfx.asm"
0DC54                           ;;
0DC54                           ;; Explosion sound effects
0DC54                           ;;
0DC54                           ;;   #% ffff vvvv
0DC54                           ;;      |||| ++++---- volume (0=low, 15=high)
0DC54                           ;;      ++++-------- frequency (0=low, 15=high)
0DC54                           ;;
0DC54                           ;; #$FF = end of sfx
0DC54                           ;;
0DC54                           
0DC54                           tbl_ExplosionSfx:
0DC54 00                            .db #$00 ; buffer byte
0DC55 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DC5D 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DC65 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DC6D 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DC75 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DC7D 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DC82                           
0DC82                           tbl_ThudSfx:
0DC82 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DC83 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DC8B E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DC90                           
0DC90                           tbl_BounceSfx:
0DC90 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DC91 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DC95                           
0DC95 00                            .db #$00
0DC96                           
0DC96                           tbl_Sfx_hi:
0DC96 DC DC DC                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DC99                           
0DC99                           tbl_Sfx_lo:
0DC99 54 82 90                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DC9C                           
0DC9C                           
0DC9C                           ;; Volume envelope for move sound effect (reversed)
0DC9C                           tbl_MoveSfxVolume:
0DC9C 70 70 72 73 7B 7C 7B 7B       .db #$70, #$70, #$72, #$73, #$7B, #$7C, #$7B, #$7B
0DCA4 79 79 78 77 76 76 75 75       .db #$79, #$79, #$78, #$77, #$76, #$76, #$75, #$75
0DCAC 74 74 73 73 73 73 72 71       .db #$74, #$74, #$73, #$73, #$73, #$73, #$72, #$71
0DCB4                           
0DCB4                           ;; Volume and frequency table for paint sound effect (reversed)
0DCB4 00                        tbl_PaintSfxVolume: .db #$00
0DCB5 B0 B1 B2 B3 B2 B4 B6 B3       .db #$B0, #$B1, #$B2, #$B3, #$B2, #$B4, #$B6, #$B3
0DCBD B6 B9 B5 B9 B5 B9 B5 B9       .db #$B6, #$B9, #$B5, #$B9, #$B5, #$B9, #$B5, #$B9
0DCC5 00                        tbl_PaintSfxFreqHi: .db #$00
0DCC6 08 08 08 08 08 08 08 08       .db #$08, #$08, #$08, #$08, #$08, #$08, #$08, #$08
0DCCE 08 09 08 09 09 09 09 09       .db #$08, #$09, #$08, #$09, #$09, #$09, #$09, #$09
0DCD6 00                        tbl_PaintSfxFreqLo: .db #$00
0DCD7 68 90 B8 E0 A4 CC F4 BC       .db #$68, #$90, #$B8, #$E0, #$A4, #$CC, #$F4, #$BC
0DCDF E4 0C F6 32 1A 56 44 80       .db #$E4, #$0C, #$F6, #$32, #$1A, #$56, #$44, #$80
0DCE7                               
0DCE7                           ;; End level sweep
0DCE7                           tbl_SweepVolume:
0DCE7 00 00 00 01 02 03 03 04       .db #$00, #$00, #$00, #$01, #$02, #$03, #$03, #$04
0DCEF 05 07 08 09 09 0A 0B 0D       .db #$05, #$07, #$08, #$09, #$09, #$0A, #$0B, #$0D
0DCF7                           tbl_SweepFrequency:
0DCF7 20 48 70 98 C0                .db #$20, #$48, #$70, #$98, #$C0
0DCFC                           
0DCFC                           ;; End game sweep
0DCFC                           tbl_EndSweepLength:
0DCFC 02 02 03 03 04 04 05 05       .db #$02, #$02, #$03, #$03, #$04, #$04, #$05, #$05
0DD04 06 07 08 0A 0D 12 19 20       .db #$06, #$07, #$08, #$0A, #$0D, #$12, #$19, #$20
0DD0C 24 26                         .db #$24, #$26
0DD0E                           
0DD0E                           tbl_EndSweepFreqDeltaLo:
0DD0E 60 60 40 40 30 30 26 26       .db #$60, #$60, #$40, #$40, #$30, #$30, #$26, #$26
0DD16 20 1B 18 13 0E 0A 07 06       .db #$20, #$1B, #$18, #$13, #$0E, #$0A, #$07, #$06
0DD1E 05 05                         .db #$05, #$05
0DD20                           
0DD20                           tbl_EndSweepFreqDeltaRest:
0DD20 00 00 00 00 00 00 66 66       .db #$00, #$00, #$00, #$00, #$00, #$00, #$66, #$66
0DD28 00 6E 00 33 C5 AB AE 00       .db #$00, #$6E, #$00, #$33, #$C5, #$AB, #$AE, #$00
0DD30 55 55                         .db #$55, #$55
0DD32                           
0DD32                           ;; Lookup table to convert bonus ticks to score
0DD32                           tbl_BonusToScore:
0DD32 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DD3C                           
0DD3C                           ;; Check string for sentience (warm boot)
0DD3C C0 FF EE 54 07            tbl_Sentient: .db #$C0, #$FF, #$EE, #$54, #$07
0DD41                           
0DD41                           tbl_EndGamePalette:
0DD41 0F 2D 00 3D                   .db #$0F, #$2D, #$00, #$3D
0DD45 3C 3B 38 37                   .db #$3C, #$3B, #$38, #$37
0DD49 37 38 3B 3C                   .db #$37, #$38, #$3B, #$3C
0DD4D 3D 00 2D 0F                   .db #$3D, #$00, #$2D, #$0F0DD51                           
0DD51                           ;; NMI handler
0DD51                           NMI:
0DD51                               .include "interrupt/nmi.asm"
0DD51                           
0DD51                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DD51                           ;;
0DD51                           ;; include/nmi.asm
0DD51                           ;;
0DD51                           ;; Non-maskable interrupt script. This script is being executed
0DD51                           ;; when vBlank hits.
0DD51                           ;;
0DD51                           ;;
0DD51                           
0DD51                               ;; Preserve accumulator through stack
0DD51 48                            PHA
0DD52                           
0DD52                               ;; Should NMI be skipped?
0DD52 A5 1E                         LDA skip_nmi
0DD54 F0 03                         BEQ +
0DD56 4C 8A DF                          JMP +skip_nmi
0DD59                               +
0DD59                           
0DD59                               ;; When in NMI, skip additional NMI requests
0DD59 A9 01                         LDA #$01
0DD5B 85 1E                         STA skip_nmi
0DD5D                           
0DD5D                               ;; Preserve X, Y, and PC through stack
0DD5D 8A                            TXA
0DD5E 48                            PHA
0DD5F 98                            TYA
0DD60 48                            PHA
0DD61 08                            PHP
0DD62                               
0DD62                               ;; Check forced NMI skip
0DD62 A5 1F                         LDA force_skip_nmi
0DD64 F0 03                         BEQ +
0DD66 4C 79 DF                          JMP +force_skip_nmi
0DD69                               +
0DD69                           
0DD69                               ;; Update PPU mask
0DD69                               ;LDA #$00
0DD69                               ;STA PPU_CTRL
0DD69 A5 1D                         LDA soft_ppu_mask
0DD6B 8D 01 20                      STA PPU_MASK
0DD6E                               
0DD6E                               
0DD6E                               ;; Additional PPU updates go here
0DD6E                               .include "game/interrupt/nmi.asm"
0DD6E                           
0DD6E                               ;; Check if ppu_buffer needs updating
0DD6E A5 44                         LDA ppu_buffer_update
0DD70 D0 03                         BNE +
0DD72 4C B4 DD                          JMP +no_ppu_buffer_update
0DD75                               +
0DD75                           
0DD75                               ;; Reset ppu control register and mask
0DD75 A2 00                         LDX #$00
0DD77 8E 00 20                      STX PPU_CTRL
0DD7A 8E 01 20                      STX PPU_MASK
0DD7D                           
0DD7D                               ;; Set up loop
0DD7D                               -
0DD7D                                   ;; Reset hi/lo latch
0DD7D 2C 02 20                          BIT PPU_STATUS
0DD80                           
0DD80                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DD80 BD 00 03                          LDA ppu_buffer,x
0DD83 8D 06 20                          STA PPU_ADDR
0DD86 E8                                INX
0DD87 BD 00 03                          LDA ppu_buffer,x
0DD8A 8D 06 20                          STA PPU_ADDR
0DD8D                           
0DD8D                                   ;; Write ppu_buffer data to PPU_ADDR
0DD8D E8                                INX
0DD8E BD 00 03                          LDA ppu_buffer,x
0DD91 8D 07 20                          STA PPU_DATA
0DD94                           
0DD94                                   ;; Check if updating is done (eg. X is at pointer)
0DD94 E8                                INX
0DD95 E4 45                             CPX ppu_buffer_pointer
0DD97 F0 03                             BEQ +
0DD99 4C 7D DD                      JMP -
0DD9C                           +
0DD9C                           
0DD9C                               ;; Reset ppu buffer update and pointer
0DD9C A9 00                         LDA #$00
0DD9E 85 44                         STA ppu_buffer_update
0DDA0 85 45                         STA ppu_buffer_pointer
0DDA2                               
0DDA2                               ;; Reset scrolling position
0DDA2 8D 05 20                      STA PPU_SCROLL
0DDA5 8D 05 20                      STA PPU_SCROLL
0DDA8                           
0DDA8                               ;; Restore ppu control register and mask
0DDA8 A9 90                         LDA #%10010000
0DDAA 8D 00 20                      STA PPU_CTRL
0DDAD A5 1D                         LDA soft_ppu_mask
0DDAF 8D 01 20                      STA PPU_MASK
0DDB2 A9 00                         LDA #$00
0DDB4                           
0DDB4                           ;; Continue other NMI stuff
0DDB4                           +no_ppu_buffer_update:
0DDB4                           
0DDB4                               ;; Reset sprite RAM, draw sprites
0DDB4 8D 03 20                      STA OAM_ADDR
0DDB7 A9 02                         LDA #$02
0DDB9 8D 14 40                      STA OAM_DMA
0DDBC                           
0DDBC                               ;; Decrease explosion and move block timers
0DDBC A0 04                         LDY #MAX_ANIMATIONS
0DDBE A2 00                         LDX #$00
0DDC0                               -
0DDC0 BD 60 03                          LDA explosion_timer,x
0DDC3 F0 03                             BEQ +
0DDC5 DE 60 03                              DEC explosion_timer,x
0DDC8                                   +
0DDC8                           
0DDC8 BD 80 03                          LDA move_block_timer,x
0DDCB F0 03                             BEQ +
0DDCD DE 80 03                              DEC move_block_timer,x
0DDD0                                   +
0DDD0                                   
0DDD0 E8                                INX
0DDD1 88                                DEY
0DDD2 F0 03                             BEQ +done
0DDD4 4C C0 DD                      JMP -
0DDD7                           +done:
0DDD7                           
0DDD7                               ;; Decrease nudge timer
0DDD7 A5 49                         LDA nudge_timer
0DDD9 F0 02                         BEQ +
0DDDB C6 49                             DEC nudge_timer
0DDDD                               +
0DDDD                           
0DDDD                               ;; Decrease bonus timer
0DDDD A5 4A                         LDA bonus_timer
0DDDF F0 02                         BEQ +
0DDE1 C6 4A                             DEC bonus_timer
0DDE3                               +
0DDE3                           
0DDE3                               ;; Decrease kill timer
0DDE3 A5 4B                         LDA kill_timer
0DDE5 F0 02                         BEQ +
0DDE7 C6 4B                             DEC kill_timer
0DDE9                               +
0DDE9                               
0DDE9                               ;; Decrease and handle unfreeze timer
0DDE9 A5 4C                         LDA unfreeze_timer
0DDEB F0 0A                         BEQ +
0DDED C6 4C                             DEC unfreeze_timer
0DDEF D0 06                             BNE +
0DDF1                                   
0DDF1 A5 42                             LDA ball_flags
0DDF3 29 FB                             AND #UNFREEZE_BALL
0DDF5 85 42                             STA ball_flags
0DDF7                               +
0DDF7                           
0DDF7                               ;; Play background noise
0DDF7 A5 43                         LDA screen_mode
0DDF9 29 01                         AND #IS_GAME_SCREEN
0DDFB F0 0C                         BEQ +
0DDFD                                   .include "game/include/main/background_sound.asm"
0DDFD                           
0DDFD                               ;; If noise is muted, no noise should play
0DDFD A5 57                         LDA noise_muted
0DDFF F0 08                         BEQ +
0DE01 A9 30                             LDA #$30
0DE03 8D 0C 40                          STA NOISE_VOLUME
0DE06 4C 6E DE                          JMP +endNoise
0DE09                               +
0DE09                               
0DE09                               ;; At random times, set max_noise period to $03-$0A
0DE09 A5 51                         LDA max_noise
0DE0B D0 1D                         BNE +
0DE0D 20 AD C6                          JSR sub_GetRandomNumber
0DE10 29 EF                             AND #%11101111
0DE12 D0 16                             BNE +
0DE14                                   
0DE14 A5 20                             LDA frame_counter
0DE16 85 21                             STA random_seed
0DE18 20 AD C6                          JSR sub_GetRandomNumber
0DE1B 29 07                             AND #$07
0DE1D 69 03                             ADC #$03
0DE1F 85 51                             STA max_noise
0DE21 A9 01                             LDA #$01
0DE23 85 52                             STA sweep_noise
0DE25 A9 34                             LDA #$34
0DE27 8D 0C 40                          STA NOISE_VOLUME
0DE2A                               +
0DE2A                           
0DE2A                               ;; if sweep noise = $00: constant noise
0DE2A                               ;; else if sweep noise > $80: decrease pitch
0DE2A                               ;; else: increase pitch
0DE2A A5 52                         LDA sweep_noise
0DE2C F0 18                         BEQ +constantNoise
0DE2E 30 2A                         BMI +decreaseNoise
0DE30                           
0DE30                           ;; Sweep noise up to max noise pitch
0DE30                           +increaseNoise:
0DE30 C6 53                         DEC current_noise
0DE32 A5 53                         LDA current_noise
0DE34 8D 0E 40                      STA NOISE_PERIOD
0DE37 C5 51                         CMP max_noise
0DE39 D0 08                         BNE +
0DE3B A9 00                             LDA #$00
0DE3D 85 52                             STA sweep_noise
0DE3F A9 0A                             LDA #$0A
0DE41 85 54                             STA noise_timer
0DE43                               +
0DE43 4C 6E DE                      JMP +endNoise
0DE46                           
0DE46                           ;; Keep noise at constant pitch
0DE46                           +constantNoise:
0DE46 A5 51                         LDA max_noise
0DE48 F0 24                         BEQ +endNoise
0DE4A                           
0DE4A A5 54                         LDA noise_timer
0DE4C D0 07                         BNE +
0DE4E A9 80                             LDA #$80
0DE50 85 52                             STA sweep_noise
0DE52 4C 6E DE                          JMP +endNoise
0DE55                               +
0DE55 C6 54                         DEC noise_timer
0DE57 4C 6E DE                      JMP +endNoise
0DE5A                           
0DE5A                           ;; Sweep noise down to initial pitch
0DE5A                           +decreaseNoise:
0DE5A E6 53                         INC current_noise
0DE5C A5 53                         LDA current_noise
0DE5E 8D 0E 40                      STA NOISE_PERIOD
0DE61 C9 0E                         CMP #$0E
0DE63 D0 09                         BNE +endNoise
0DE65                           
0DE65 20 64 C7                      JSR sub_BackgroundNoise
0DE68 A9 00                         LDA #$00
0DE6A 85 51                         STA max_noise
0DE6C 85 52                         STA sweep_noise
0DE6E                           
0DE6E                           +endNoise:
0DE6E                           
0DE6E                               +
0DE6E                           
0DE6E                               ;; Play bonus to score bleeps
0DE6E                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DE6E                           
0DE6E                           ;; Random bleepy noises
0DE6E                           
0DE6E A5 55                         LDA do_beeps
0DE70 F0 2E                         BEQ +continue
0DE72                               
0DE72 C9 02                         CMP #$02
0DE74 D0 12                         BNE +beep
0DE76                              
0DE76                           +stopBeep:
0DE76 A9 00                         LDA #$00
0DE78 85 55                         STA do_beeps
0DE7A A9 08                         LDA #$08
0DE7C 8D 15 40                      STA APU_STATUS
0DE7F 8D 0F 40                      STA NOISE_LENGTH
0DE82 20 64 C7                      JSR sub_BackgroundNoise
0DE85 4C A0 DE                      JMP +continue
0DE88                               
0DE88                           +beep:
0DE88 A9 01                         LDA #$01
0DE8A 8D 15 40                      STA APU_STATUS
0DE8D A5 56                         LDA soft_pulse1
0DE8F 8D 00 40                      STA PULSE1_VOLUME
0DE92 20 AD C6                      JSR sub_GetRandomNumber
0DE95 8D 02 40                      STA PULSE1_TIMER_LO
0DE98 20 AD C6                      JSR sub_GetRandomNumber
0DE9B 29 01                         AND #$01
0DE9D 8D 03 40                      STA PULSE1_TIMER_HI
0DEA0                           
0DEA0                           +continue:
0DEA0                           
0DEA0                               
0DEA0                               ;; Play sound effect
0DEA0                               .include "game/include/main/nmi_sfx.asm"
0DEA0                           
0DEA0                               ;; Get current explosion sfx frame; if not set, skip this
0DEA0 A4 5A                         LDY sfx_timer
0DEA2 F0 1F                         BEQ +done
0DEA4                               
0DEA4                                   ;; Check if explosion sfx is done; if so, disable and skip
0DEA4 B1 58                             LDA (sfx_address),y
0DEA6 D0 07                             BNE +
0DEA8 A9 00                                 LDA #$00
0DEAA 85 5A                                 STA sfx_timer
0DEAC 4C C3 DE                              JMP +done
0DEAF                                   +
0DEAF                                   
0DEAF                                   ;; Set low nibble as volume
0DEAF 29 0F                             AND #$0F
0DEB1 09 30                             ORA #$30
0DEB3 8D 0C 40                          STA NOISE_VOLUME
0DEB6                                   
0DEB6                                   ;; Set high nibble as frequency
0DEB6 B1 58                             LDA (sfx_address),y
0DEB8 4A                                LSR
0DEB9 4A                                LSR
0DEBA 4A                                LSR
0DEBB 4A                                LSR
0DEBC 49 0F                             EOR #$0F
0DEBE 8D 0E 40                          STA NOISE_PERIOD
0DEC1                                   
0DEC1                                   ;; Next frame
0DEC1 E6 5A                             INC sfx_timer
0DEC3                               +done:
0DEC3                           
0DEC3                           
0DEC3                               ;; Check move sfx
0DEC3 A4 5B                         LDY sfx_timer+1
0DEC5 F0 34                         BEQ +done
0DEC7                           
0DEC7 C6 5B                             DEC sfx_timer+1
0DEC9 C0 18                             CPY #$18
0DECB D0 0D                             BNE +
0DECD                                       ;; Update APU status
0DECD A9 09                                 LDA #$09
0DECF 8D 15 40                              STA APU_STATUS
0DED2 A9 8B                                 LDA #$8B
0DED4 85 5D                                 STA sfx_frequency
0DED6 A9 0A                                 LDA #$0A
0DED8 85 5E                                 STA sfx_frequency+1
0DEDA                                   +
0DEDA                                   
0DEDA                                   ;; Set volume
0DEDA B9 9C DC                          LDA tbl_MoveSfxVolume,y
0DEDD 8D 00 40                          STA PULSE1_VOLUME
0DEE0                                   
0DEE0 84 0B                             STY temp
0DEE2 A9 18                             LDA #$18
0DEE4 38                                SEC
0DEE5 E5 0B                             SBC temp
0DEE7 4A                                LSR
0DEE8 18                                CLC
0DEE9 69 03                             ADC #$03
0DEEB 65 5D                             ADC sfx_frequency
0DEED 85 5D                             STA sfx_frequency
0DEEF 8D 02 40                          STA PULSE1_TIMER_LO
0DEF2 A5 5E                             LDA sfx_frequency+1
0DEF4 69 00                             ADC #$00
0DEF6 85 5E                             STA sfx_frequency+1
0DEF8 8D 03 40                          STA PULSE1_TIMER_HI
0DEFB                               +done:
0DEFB                           
0DEFB                           
0DEFB                               ;; Check paint sfx
0DEFB A4 5C                         LDY sfx_timer+2
0DEFD F0 1D                         BEQ +done
0DEFF                           
0DEFF C6 5C                             DEC sfx_timer+2
0DF01 C0 10                             CPY #$10
0DF03 D0 05                             BNE +
0DF05                                       ;; Update APU status
0DF05 A9 09                                 LDA #$09
0DF07 8D 15 40                              STA APU_STATUS
0DF0A                                   +
0DF0A                                   
0DF0A                                   ;; Set volume
0DF0A B9 B4 DC                          LDA tbl_PaintSfxVolume,y
0DF0D 8D 00 40                          STA PULSE1_VOLUME
0DF10 B9 D6 DC                          LDA tbl_PaintSfxFreqLo,y
0DF13 8D 02 40                          STA PULSE1_TIMER_LO
0DF16 B9 C5 DC                          LDA tbl_PaintSfxFreqHi,y
0DF19 8D 03 40                          STA PULSE1_TIMER_HI
0DF1C                               +done:
0DF1C                           
0DF1C                           
0DF1C                               ;; Check sweep sfx
0DF1C A5 5F                         LDA sfx_sweep_count
0DF1E F0 1A                         BEQ +done
0DF20 C9 0F                             CMP #$0F
0DF22 D0 05                             BNE +
0DF24 A9 01                                 LDA #$01
0DF26 8D 15 40                              STA APU_STATUS
0DF29                                   +
0DF29 A5 60                             LDA sfx_sweep_volume
0DF2B 09 70                             ORA #$70
0DF2D 8D 00 40                          STA PULSE1_VOLUME
0DF30 A5 62                             LDA sfx_sweep_frequency
0DF32 8D 02 40                          STA PULSE1_TIMER_LO
0DF35 A9 08                             LDA #$08
0DF37 8D 03 40                          STA PULSE1_TIMER_HI
0DF3A                               +done:
0DF3A                               
0DF3A                               
0DF3A                               ;; Check end game sweep
0DF3A A5 63                         LDA sfx_endgame_enabled
0DF3C F0 3B                         BEQ +done
0DF3E C9 01                             CMP #$01
0DF40 D0 07                             BNE +
0DF42 A9 03                                 LDA #$03
0DF44 8D 15 40                              STA APU_STATUS
0DF47 E6 63                                 INC sfx_endgame_enabled
0DF49                                   +
0DF49                                   
0DF49 C9 FF                             CMP #$FF
0DF4B D0 10                             BNE +
0DF4D A9 00                                 LDA #$00
0DF4F 85 63                                 STA sfx_endgame_enabled
0DF51 8D 15 40                              STA APU_STATUS
0DF54 8D 00 40                              STA PULSE1_VOLUME
0DF57 8D 04 40                              STA PULSE2_VOLUME
0DF5A 4C 79 DF                              JMP +done
0DF5D                                   +
0DF5D A9 77                             LDA #$77
0DF5F 8D 00 40                          STA PULSE1_VOLUME
0DF62 8D 04 40                          STA PULSE2_VOLUME
0DF65 A5 65                             LDA sfx_endgame_p1_freq_hi
0DF67 8D 03 40                          STA PULSE1_TIMER_HI
0DF6A A5 66                             LDA sfx_endgame_p1_freq_lo
0DF6C 8D 02 40                          STA PULSE1_TIMER_LO 
0DF6F A5 68                             LDA sfx_endgame_p2_freq_hi
0DF71 8D 07 40                          STA PULSE2_TIMER_HI
0DF74 A5 69                             LDA sfx_endgame_p2_freq_lo
0DF76 8D 06 40                          STA PULSE2_TIMER_LO
0DF79                               +done:
0DF79                           
0DF79                               
0DF79                           
0DF79                           ;; This is what happens when we forced nmi skip
0DF79                           +force_skip_nmi:
0DF79                           
0DF79                               ;; Increase frame timers
0DF79 E6 20                         INC frame_counter
0DF7B                           
0DF7B                               ;; reset sprites_update_position
0DF7B A9 00                         LDA #$00
0DF7D 85 40                         STA sprites_update_position
0DF7F                           
0DF7F                               ;; Don't skip next NMI request
0DF7F A9 00                         LDA #$00
0DF81 85 1E                         STA skip_nmi
0DF83 85 6A                         STA check_nmi
0DF85                           
0DF85                               ;; Restore X, Y and PC from stack
0DF85 28                            PLP
0DF86 68                            PLA
0DF87 A8                            TAY
0DF88 68                            PLA
0DF89 AA                            TAX
0DF8A                           
0DF8A                           +skip_nmi:
0DF8A                               ;; Restore accumulator from stack
0DF8A 68                            PLA
0DF8B                           
0DF8B                               ;; Return
0DF8B 40                            RTI
0DF8C                           
0DF8C                           
0DF8C                           ;; IRQ handler (empty)
0DF8C                           IRQ:
0DF8C                               .include "interrupt/irq.asm"
0DF8C                           
0DF8C 40                            RTI
0DF8D                           
0DF8D                           
0DF8D                           ;; Interrupt vectors
0DF8D 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 51 DD                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 8C DF                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
