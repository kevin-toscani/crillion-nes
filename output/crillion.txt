	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$74        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Counters 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           
00041                           ;; Current level (doubles as level select variable)
00041                           current_level          .dsb 1
00042                           
00042                           ;; Tile type the ball is currently colliding with
00042                           colliding_tile         .dsb 1
00043                           
00043                           ;; Number of blocks left on screen
00043                           blocks_left            .dsb 1
00044                           
00044                           ;; Sound control variables
00044                           max_noise              .dsb 1
00045                           sweep_noise            .dsb 1
00046                           current_noise          .dsb 1
00047                           noise_timer            .dsb 1
00048                           do_beeps               .dsb 1
00049                           
00049                           ;; Additional NMI check for timed PPU fade
00049                           check_nmi              .dsb 1
0004A                               0004A                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 64 C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 64 C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 41                         STA current_level
0C057 85 20                         STA ball_score
0C059 85 21                         STA ball_score+1
0C05B 85 22                         STA ball_score+2
0C05D 85 23                         STA ball_score+3
0C05F 85 24                         STA ball_score+4
0C061 85 25                         STA ball_score+5
0C063                           
0C063                           
0C063                           ;; Main game loop
0C063                           MainGameLoop:
0C063                               .include "game/main.asm"
0C063                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C063                           ;;
0C063                           ;; game/main.asm
0C063                           ;;
0C063                           ;; The main game loop content.
0C063                           ;;
0C063                           ;;
0C063                           
0C063                               ;; Reset sprite pointer every game loop
0C063 A9 00                         LDA #$00
0C065 85 3D                         STA sprite_ram_pointer
0C067                           
0C067                               ;; Store previous buttons
0C067 A5 0F                         LDA buttons_held
0C069 85 0E                         STA buttons_prev
0C06B                           
0C06B                               ;; Read controller input
0C06B 20 47 C5                      JSR sub_ReadController
0C06E                           
0C06E                               ;; Get buttons released
0C06E A5 0F                         LDA buttons_held
0C070 49 FF                         EOR #$FF
0C072 25 0E                         AND buttons_prev
0C074 85 11                         STA buttons_released
0C076                           
0C076                               ;; Set buttons pressed
0C076 A5 0E                         LDA buttons_prev
0C078 49 FF                         EOR #$FF
0C07A 25 0F                         AND buttons_held
0C07C 85 10                         STA buttons_pressed
0C07E                           
0C07E                               ;; Load screen?
0C07E A5 38                         LDA screen_mode
0C080 29 80                         AND #%10000000
0C082 F0 1E                         BEQ +screenLoaded
0C084                           
0C084                               ;; Get screen type to load
0C084 A5 38                         LDA screen_mode
0C086 29 03                         AND #%00000011
0C088 A8                            TAY
0C089                               
0C089                               ;; Get address to load screen type from
0C089 B9 63 D1                      LDA tbl_LoadScreenLo,y
0C08C 85 0C                         STA pointer
0C08E B9 60 D1                      LDA tbl_LoadScreenHi,y
0C091 85 0D                         STA pointer+1
0C093                           
0C093                               ;; Load screen
0C093 20 E7 C6                      JSR sub_DisableRendering
0C096 20 07 CA                      JSR sub_JumpToPointer
0C099 20 FB C6                      JSR sub_EnableRendering
0C09C                               
0C09C                               ;; Don't load screen anymore next loop
0C09C A5 38                         LDA screen_mode
0C09E 29 7F                         AND #%01111111
0C0A0 85 38                         STA screen_mode
0C0A2                               
0C0A2                           
0C0A2                           +screenLoaded:
0C0A2                           
0C0A2                               ;; Check if we're on the game screen
0C0A2 A5 38                         LDA screen_mode
0C0A4 C9 01                         CMP #IS_GAME_SCREEN
0C0A6 F0 03                         BEQ +
0C0A8 4C B1 C3                          JMP +checkNextScreen
0C0AB                               +
0C0AB                           
0C0AB                               ;; Load sprite 0 in place
0C0AB A9 28                         LDA #$28
0C0AD 8D 00 02                      STA ADDR_SPRITERAM
0C0B0 A9 0F                         LDA #$0F
0C0B2 8D 01 02                      STA ADDR_SPRITERAM+1
0C0B5 A9 22                         LDA #$22
0C0B7 8D 02 02                      STA ADDR_SPRITERAM+2
0C0BA A9 F8                         LDA #$F8
0C0BC 8D 03 02                      STA ADDR_SPRITERAM+3
0C0BF A9 04                         LDA #$04
0C0C1 85 3D                         STA sprite_ram_pointer
0C0C3                           
0C0C3                               ;; We're on the game screen
0C0C3                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0C3 A5 35                         LDA sprites_update_position
0C0C5 F0 03                         BEQ +
0C0C7 4C E4 C2                          JMP +skipSpriteMovement
0C0CA                               +
0C0CA                           
0C0CA                               ;; Check if ball is frozen
0C0CA A5 37                         LDA ball_flags
0C0CC 29 04                         AND #BALL_IS_FROZEN
0C0CE F0 03                         BEQ +
0C0D0 4C A3 C2                          JMP +skipBallMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Move the ball
0C0D3                               .include "game/include/main/move_ball.asm"
0C0D3                           
0C0D3                               ;; Check if ball goes up or down
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 10                         AND #BALL_MOVES_DOWN
0C0D7 F0 2B                         BEQ +moveBallUp
0C0D9                           
0C0D9                           
0C0D9                           +moveBallDown:
0C0D9                               ;; update the low byte
0C0D9 A5 1A                         LDA ball_ypos_lo
0C0DB 85 1C                         STA ball_ypos_lo_prev
0C0DD 18                            CLC
0C0DE 69 74                         ADC #BALL_SPEED_LO
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2                           
0C0E2                               ;; update the high byte with carry
0C0E2 A5 19                         LDA ball_ypos_hi
0C0E4 85 1B                         STA ball_ypos_hi_prev
0C0E6 69 01                         ADC #BALL_SPEED_HI
0C0E8 85 19                         STA ball_ypos_hi
0C0EA                               
0C0EA                               ;; Check bottom bound
0C0EA C9 C8                         CMP #BOUND_BOTTOM
0C0EC 90 3C                         BCC +checkHorizontalMovement
0C0EE F0 3A                         BEQ +checkHorizontalMovement
0C0F0                           
0C0F0                           
0C0F0                               ;; Change ball direction to "up"
0C0F0 A9 C8                         LDA #BOUND_BOTTOM
0C0F2 38                            SEC
0C0F3 E9 01                         SBC #$01
0C0F5 85 19                         STA ball_ypos_hi
0C0F7 A9 00                         LDA #$00
0C0F9 85 1A                         STA ball_ypos_lo
0C0FB A5 37                         LDA ball_flags
0C0FD 29 EF                         AND #MOVE_BALL_UP
0C0FF 85 37                         STA ball_flags
0C101 4C 2A C1                      JMP +checkHorizontalMovement
0C104                           
0C104                           
0C104                           +moveBallUp:
0C104                               ;; update the low byte
0C104 A5 1A                         LDA ball_ypos_lo
0C106 85 1C                         STA ball_ypos_lo_prev
0C108 38                            SEC
0C109 E9 74                         SBC #BALL_SPEED_LO
0C10B 85 1A                         STA ball_ypos_lo
0C10D                           
0C10D                               ;; update the high byte with carry
0C10D A5 19                         LDA ball_ypos_hi
0C10F 85 1B                         STA ball_ypos_hi_prev
0C111 E9 01                         SBC #BALL_SPEED_HI
0C113 85 19                         STA ball_ypos_hi
0C115                               
0C115                               ;; Check top bound
0C115 C9 30                         CMP #BOUND_TOP
0C117 B0 11                         BCS +checkHorizontalMovement
0C119                           
0C119                               ;; Change ball direction to "down"
0C119 A9 30                         LDA #BOUND_TOP
0C11B 18                            CLC
0C11C 69 01                         ADC #$01
0C11E 85 19                         STA ball_ypos_hi
0C120 A9 00                         LDA #$00
0C122 85 1A                         STA ball_ypos_lo
0C124 A5 37                         LDA ball_flags
0C126 09 10                         ORA #MOVE_BALL_DOWN
0C128 85 37                         STA ball_flags
0C12A                           
0C12A                           
0C12A                           +checkHorizontalMovement:
0C12A                           
0C12A                               ;; Check if ball is being nudged
0C12A A5 3E                         LDA nudge_timer
0C12C D0 41                         BNE +doneBallMovement
0C12E                           
0C12E                               ;; Check if left button is held
0C12E A5 0F                         LDA buttons_held
0C130 29 02                         AND #BUTTON_LEFT
0C132 F0 1B                         BEQ +
0C134                                   ;; update the low byte
0C134 A5 18                             LDA ball_xpos_lo
0C136 38                                SEC
0C137 E9 74                             SBC #BALL_SPEED_LO
0C139 85 18                             STA ball_xpos_lo
0C13B                           
0C13B                                   ;; update the high byte
0C13B A5 17                             LDA ball_xpos_hi
0C13D E9 01                             SBC #BALL_SPEED_HI
0C13F 85 17                             STA ball_xpos_hi
0C141                                   
0C141                                   ;; Check left bound
0C141 C9 10                             CMP #BOUND_LEFT
0C143 B0 2A                             BCS +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge right and set nudge timer
0C145 A5 37                             LDA ball_flags
0C147 09 02                             ORA #NUDGE_BALL_RIGHT
0C149 20 00 CA                          JSR sub_InitiateNudge
0C14C                           
0C14C 4C 6F C1                          JMP +doneBallMovement        
0C14F                               +
0C14F                           
0C14F                               ;; Check if right button is held
0C14F A5 0F                         LDA buttons_held
0C151 29 01                         AND #BUTTON_RIGHT
0C153 F0 1A                         BEQ +
0C155                                   ;; update the low byte
0C155 A5 18                             LDA ball_xpos_lo
0C157 18                                CLC
0C158 69 74                             ADC #BALL_SPEED_LO
0C15A 85 18                             STA ball_xpos_lo
0C15C                           
0C15C                                   ;; update the high byte
0C15C A5 17                             LDA ball_xpos_hi
0C15E 69 01                             ADC #BALL_SPEED_HI
0C160 85 17                             STA ball_xpos_hi     
0C162                           
0C162                                  ;; Check right bound
0C162 C9 E8                             CMP #BOUND_RIGHT
0C164 90 09                             BCC +doneBallMovement
0C166 F0 07                             BEQ +doneBallMovement
0C168                                   
0C168                                   ;; Set flag to nudge left and set nudge timer
0C168 A5 37                             LDA ball_flags
0C16A 29 FD                             AND #NUDGE_BALL_LEFT
0C16C 20 00 CA                          JSR sub_InitiateNudge
0C16F                               +
0C16F                           
0C16F                           
0C16F                           +doneBallMovement:
0C16F                           
0C16F                               ;; Check nudge
0C16F A5 3E                         LDA nudge_timer
0C171 F0 23                         BEQ +doneBallNudging
0C173 A5 37                             LDA ball_flags
0C175 29 02                             AND #NUDGE_BALL_RIGHT
0C177 F0 10                             BEQ +nudgeBallLeft
0C179                                   
0C179                                       ;; update the low byte
0C179 A5 18                                 LDA ball_xpos_lo
0C17B 18                                    CLC
0C17C 69 74                                 ADC #BALL_SPEED_LO
0C17E 85 18                                 STA ball_xpos_lo
0C180                           
0C180                                       ;; update the high byte
0C180 A5 17                                 LDA ball_xpos_hi
0C182 69 01                                 ADC #BALL_SPEED_HI
0C184 85 17                                 STA ball_xpos_hi  
0C186 4C 96 C1                              JMP +doneBallNudging
0C189                                   +nudgeBallLeft:
0C189                                   
0C189                                   ;; update the low byte
0C189 A5 18                             LDA ball_xpos_lo
0C18B 38                                SEC
0C18C E9 74                             SBC #BALL_SPEED_LO
0C18E 85 18                             STA ball_xpos_lo
0C190                           
0C190                                   ;; update the high byte
0C190 A5 17                             LDA ball_xpos_hi
0C192 E9 01                             SBC #BALL_SPEED_HI
0C194 85 17                             STA ball_xpos_hi
0C196                               +doneBallNudging:
0C196                           
0C196                               ;; Don't update position again until next frame
0C196                               ;; (moved to after move block routine)
0C196                           
0C196                           +doneBallHandling:0C196                               
0C196                               ;; Do collision detection
0C196                               .include "game/include/main/collision_detection.asm"
0C196                           
0C196                               ;; Get ball's x-left, x-center, x-right position
0C196 A5 17                         LDA ball_xpos_hi
0C198 18                            CLC
0C199 69 F0                         ADC #BALL_LEFT_WGA
0C19B 85 2F                         STA ball_left
0C19D 18                            CLC
0C19E 69 04                         ADC #BALL_HALF_SIZE
0C1A0 85 30                         STA ball_center
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 31                         STA ball_right
0C1A7                           
0C1A7                               ;; Get ball's y-top, y-middle, y-bottom position
0C1A7 A5 19                         LDA ball_ypos_hi
0C1A9 18                            CLC
0C1AA 69 D0                         ADC #BALL_TOP_WGA
0C1AC 85 32                         STA ball_top
0C1AE 18                            CLC
0C1AF 69 04                         ADC #BALL_HALF_SIZE
0C1B1 85 33                         STA ball_middle
0C1B3 18                            CLC
0C1B4 69 04                         ADC #BALL_HALF_SIZE
0C1B6 85 34                         STA ball_bottom
0C1B8                           
0C1B8                           +checkRightCollision:
0C1B8                               ;; Check if ball moves right
0C1B8                               ;; No need to check nudging here as that will never collide with a tile
0C1B8 A5 0F                         LDA buttons_held
0C1BA 29 01                         AND #BUTTON_RIGHT
0C1BC F0 20                         BEQ +checkLeftCollision
0C1BE                           
0C1BE                               ;; Check tile at right position
0C1BE A5 33                         LDA ball_middle
0C1C0 85 00                         STA temp
0C1C2 A5 31                         LDA ball_right
0C1C4 85 01                         STA temp+1
0C1C6 20 CF C6                      JSR sub_ConvertXYToTileType
0C1C9 29 01                         AND #TILE_IS_SOLID
0C1CB F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1CD                           
0C1CD                               ;; Nudge ball and evaluate tile type
0C1CD A9 01                         LDA #$01
0C1CF 85 36                         STA move_block_space_to_check
0C1D1 A5 37                         LDA ball_flags
0C1D3 29 FD                         AND #NUDGE_BALL_LEFT
0C1D5 20 00 CA                      JSR sub_InitiateNudge
0C1D8 20 5D C8                      JSR sub_EvaluateTileType
0C1DB 4C 01 C2                      JMP +checkTopCollision
0C1DE                           
0C1DE                           +checkLeftCollision:
0C1DE                               ;; Check if ball moves right
0C1DE                               ;; No need to check nudging here as that will never collide with a tile
0C1DE A5 0F                         LDA buttons_held
0C1E0 29 02                         AND #BUTTON_LEFT
0C1E2 F0 1D                         BEQ +checkTopCollision
0C1E4                           
0C1E4                               ;; Check tile at right position
0C1E4 A5 33                         LDA ball_middle
0C1E6 85 00                         STA temp
0C1E8 A5 2F                         LDA ball_left
0C1EA 85 01                         STA temp+1
0C1EC 20 CF C6                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 0E                         BEQ +checkTopCollision
0C1F3                           
0C1F3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1F3 A9 FF                         LDA #$FF
0C1F5 85 36                         STA move_block_space_to_check
0C1F7 A5 37                         LDA ball_flags
0C1F9 09 02                         ORA #NUDGE_BALL_RIGHT
0C1FB 20 00 CA                      JSR sub_InitiateNudge
0C1FE 20 5D C8                      JSR sub_EvaluateTileType
0C201                               
0C201                               
0C201                           +checkTopCollision:
0C201                               ;; Check if ball moves up
0C201 A5 37                         LDA ball_flags
0C203 29 10                         AND #BALL_MOVES_DOWN
0C205 D0 27                         BNE +checkBottomCollision
0C207                           
0C207                               ;; Check tile at top position
0C207 A5 32                         LDA ball_top
0C209 85 00                         STA temp
0C20B A5 30                         LDA ball_center
0C20D 85 01                         STA temp+1
0C20F 20 CF C6                      JSR sub_ConvertXYToTileType
0C212 29 01                         AND #TILE_IS_SOLID
0C214 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C216                           
0C216                               ;; Tile is solid; move ball down and evaluate tile type
0C216 A5 1C                         LDA ball_ypos_lo_prev
0C218 85 1A                         STA ball_ypos_lo
0C21A A5 1B                         LDA ball_ypos_hi_prev
0C21C 85 19                         STA ball_ypos_hi
0C21E A5 37                         LDA ball_flags
0C220 09 10                         ORA #MOVE_BALL_DOWN
0C222 85 37                         STA ball_flags
0C224                           
0C224 A9 F0                         LDA #$F0 ; which is -16
0C226 85 36                         STA move_block_space_to_check
0C228 20 5D C8                      JSR sub_EvaluateTileType
0C22B 4C 52 C2                      JMP +doneCheckingCollision
0C22E                           
0C22E                           +checkBottomCollision:
0C22E                               ;; No movement check needed: since ball is not moving up, it must move down
0C22E                           
0C22E                               ;; Check tile at bottom position
0C22E A5 34                         LDA ball_bottom
0C230 85 00                         STA temp
0C232 A5 30                         LDA ball_center
0C234 85 01                         STA temp+1
0C236 20 CF C6                      JSR sub_ConvertXYToTileType
0C239 29 01                         AND #TILE_IS_SOLID
0C23B F0 15                         BEQ +doneCheckingCollision
0C23D                           
0C23D                               ;; Tile is solid; move ball up and evaluate tile type
0C23D A5 1C                         LDA ball_ypos_lo_prev
0C23F 85 1A                         STA ball_ypos_lo
0C241 A5 1B                         LDA ball_ypos_hi_prev
0C243 85 19                         STA ball_ypos_hi
0C245 A5 37                         LDA ball_flags
0C247 29 EF                         AND #MOVE_BALL_UP
0C249 85 37                         STA ball_flags
0C24B                           
0C24B A9 10                         LDA #$10
0C24D 85 36                         STA move_block_space_to_check
0C24F 20 5D C8                      JSR sub_EvaluateTileType
0C252                           
0C252                           +doneCheckingCollision:
0C252                           
0C252                               
0C252                               ;; Update bonus
0C252                               .include "game/include/main/update_bonus.asm"
0C252                           ;; update_bonus.asm
0C252                           
0C252                               ;; If bonus = 000, skip decreasing
0C252 A5 2C                         LDA ball_bonus
0C254 18                            CLC
0C255 65 2D                         ADC ball_bonus+1
0C257 18                            CLC
0C258 65 2E                         ADC ball_bonus+2
0C25A F0 33                         BEQ +done
0C25C                           
0C25C                               ;; Check if bonus timer is done yet
0C25C A5 3F                         LDA bonus_timer
0C25E D0 2F                         BNE +done
0C260                           
0C260                               ;; Bonus timer is done
0C260                               ;; Reset bonus timer
0C260 A9 08                         LDA #BONUS_FRAMES
0C262 85 3F                         STA bonus_timer
0C264                               
0C264                               ;; Subtract one from ball bonus ones
0C264 C6 2E                         DEC ball_bonus+2
0C266                               
0C266                               ;; Check if underflow
0C266 10 0E                         BPL +updateBonusOnScreen
0C268                           
0C268                               ;; If underflow, set 9 and subtract one from bonus tens
0C268 A9 09                         LDA #$09
0C26A 85 2E                         STA ball_bonus+2
0C26C C6 2D                         DEC ball_bonus+1
0C26E                               
0C26E                               ;; Check if underflow
0C26E 10 06                         BPL +updateBonusOnScreen
0C270                           
0C270                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C270 A9 09                         LDA #$09
0C272 85 2D                         STA ball_bonus+1
0C274 C6 2C                         DEC ball_bonus
0C276                           
0C276                               ;;209A 209B 209C
0C276                           +updateBonusOnScreen:
0C276 A9 20                         LDA #$20
0C278 85 00                         STA temp
0C27A A9 9C                         LDA #$9C
0C27C 85 01                         STA temp+1
0C27E A2 02                         LDX #$02
0C280                               
0C280                               -updateNextDigit:
0C280 B5 2C                             LDA ball_bonus,x
0C282 18                                CLC
0C283 69 01                             ADC #$01
0C285 85 02                             STA temp+2
0C287 20 F6 CF                          JSR sub_WriteByteToPPUBuffer
0C28A C6 01                             DEC temp+1
0C28C CA                                DEX
0C28D 10 F1                         BPL -updateNextDigit
0C28F                                   
0C28F                           +done:0C28F                               
0C28F                               ;; Input test for beeps
0C28F                               .include "game/test/input_beeps.asm"
0C28F A5 10                         LDA buttons_pressed
0C291 29 20                         AND #BUTTON_SELECT
0C293 F0 04                         BEQ +
0C295 A9 01                             LDA #$01
0C297 85 48                             STA do_beeps
0C299                               +
0C299                               
0C299 A5 11                         LDA buttons_released
0C29B 29 20                         AND #BUTTON_SELECT
0C29D F0 04                         BEQ +
0C29F A9 02                             LDA #$02
0C2A1 85 48                             STA do_beeps
0C2A3                               +0C2A3                           
0C2A3                           
0C2A3                           +skipBallMovement:
0C2A3                               ;; Move blocks a pixel up/down/left/right
0C2A3                               .include "game/include/main/move_blocks.asm"
0C2A3                           
0C2A3                               ;; Set up block loop
0C2A3 A2 04                         LDX #MAX_ANIMATIONS
0C2A5                           -moveBlocksLoop:
0C2A5 CA                            DEX
0C2A6                           
0C2A6                               ;; Check if block is still moving
0C2A6 BD 80 03                      LDA move_block_timer,x
0C2A9 F0 33                         BEQ +checkNext
0C2AB                               
0C2AB                               ;; Check if block is done moving
0C2AB C9 01                         CMP #$01
0C2AD D0 0B                         BNE +
0C2AF                                   ;; If so, draw a tile and remove the sprite
0C2AF 20 28 C7                          JSR sub_DrawMoveTile
0C2B2 A9 00                             LDA #$00
0C2B4 9D 80 03                          STA move_block_timer,x
0C2B7 4C DE C2                          JMP +checkNext
0C2BA                               +
0C2BA                               
0C2BA                               ;; Check in which direction the block is moving
0C2BA                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2BA BD 88 03                      LDA move_block_flags,x
0C2BD 29 03                         AND #%00000011
0C2BF F0 14                         BEQ +movingDown
0C2C1 C9 01                         CMP #$01
0C2C3 F0 0A                         BEQ +movingUp
0C2C5 C9 02                         CMP #$02
0C2C7 F0 12                         BEQ +movingRight
0C2C9                               
0C2C9                               ;; Move block in correct direction
0C2C9                               +movingLeft:
0C2C9 DE 78 03                      DEC move_block_x,x
0C2CC 4C DE C2                      JMP +checkNext
0C2CF                           
0C2CF                               +movingUp:
0C2CF DE 7C 03                      DEC move_block_y,x
0C2D2 4C DE C2                      JMP +checkNext
0C2D5                           
0C2D5                               +movingDown:
0C2D5 FE 7C 03                      INC move_block_y,x
0C2D8 4C DE C2                      JMP +checkNext
0C2DB                           
0C2DB                               +movingRight:
0C2DB FE 78 03                      INC move_block_x,x
0C2DE                           
0C2DE                               ;; Check next block (if any left)
0C2DE                               +checkNext:
0C2DE E0 00                         CPX #$00
0C2E0 D0 C3                         BNE -moveBlocksLoop
0C2E2                               
0C2E2                               ;; Don't update sprites
0C2E2 E6 35                         INC sprites_update_position
0C2E4                           
0C2E4                           +skipSpriteMovement:
0C2E4                               ;; Testing timed PPU scroll concept
0C2E4                               .include "game/test/timed_ppuscroll_test.asm"
0C2E4                           ;; Timed updates (test)
0C2E4                           
0C2E4                               ;; If B button is pressed
0C2E4 A5 10                         LDA buttons_pressed
0C2E6 29 10                         AND #BUTTON_START
0C2E8 D0 03                         BNE +
0C2EA 4C 17 C3                          JMP +end
0C2ED                               +
0C2ED                           
0C2ED                           lbl_initiate_level_load:
0C2ED                               ;; Disable noise channel
0C2ED A9 00                         LDA #$00
0C2EF 8D 15 40                      STA APU_STATUS
0C2F2 8D 0C 40                      STA NOISE_VOLUME
0C2F5                               
0C2F5 20 D6 C5                      JSR sub_BlindsEffect
0C2F8                               
0C2F8                               ;; Load the next level if ball not dead
0C2F8 A5 37                         LDA ball_flags
0C2FA 29 01                         AND #BALL_IS_DEAD
0C2FC D0 05                         BNE +
0C2FE E6 41                             INC current_level
0C300 4C 09 C3                          JMP +loadLevel
0C303                               +
0C303                               
0C303                               ;; Revive ball
0C303 A5 37                         LDA ball_flags
0C305 29 FE                         AND #REVIVE_BALL
0C307 85 37                         STA ball_flags
0C309                           
0C309                           +loadLevel:
0C309 A5 41                         LDA current_level
0C30B C9 19                         CMP #25
0C30D D0 04                         BNE +
0C30F A9 00                             LDA #$00
0C311 85 41                             STA current_level
0C313                               +
0C313                               
0C313 A9 81                         LDA #LOAD_GAME_SCREEN
0C315 85 38                         STA screen_mode
0C317                           
0C317                           
0C317                           +end:
0C317                           
0C317                               ;; Check if ball is dead
0C317 A5 37                         LDA ball_flags
0C319 29 01                         AND #BALL_IS_DEAD
0C31B F0 03                         BEQ +
0C31D 4C 3F C3                          JMP +ballIsDead
0C320                               +
0C320                               
0C320                               ;; Add ball to sprite buffer
0C320 A6 3D                         LDX sprite_ram_pointer
0C322 A5 19                         LDA ball_ypos_hi
0C324 9D 00 02                      STA ADDR_SPRITERAM,x
0C327 E8                            INX
0C328 A9 01                         LDA #BALL_TILE_CHR
0C32A 9D 00 02                      STA ADDR_SPRITERAM,x
0C32D E8                            INX
0C32E A9 00                         LDA #BALL_ATTR
0C330 9D 00 02                      STA ADDR_SPRITERAM,x
0C333 E8                            INX
0C334 A5 17                         LDA ball_xpos_hi
0C336 9D 00 02                      STA ADDR_SPRITERAM,x
0C339 E8                            INX
0C33A 86 3D                         STX sprite_ram_pointer
0C33C 4C 50 C3                      JMP +drawBlocks
0C33F                           
0C33F                           +ballIsDead:
0C33F                               ;; Check if kill timer has reset
0C33F A5 40                         LDA kill_timer
0C341 F0 03                         BEQ +
0C343 4C 50 C3                          JMP +drawBlocks
0C346                               +
0C346                               
0C346                               ;; Take a live
0C346 C6 1F                         DEC ball_lives
0C348 D0 03                         BNE +
0C34A                                   ;; If no lives left, initiate game over sequence
0C34A 4C B3 C4                          JMP lbl_GameOver
0C34D                               +
0C34D                               
0C34D                               ;; Reload current level
0C34D 4C ED C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C350                           
0C350                           
0C350                           +drawBlocks:
0C350                               ;; Draw moving block(s, if any)
0C350                               .include "game/include/main/draw_blocks.asm"
0C350                           ;; Handle movement of move blocks
0C350                           
0C350                               ;; Set up a loop
0C350 A0 04                         LDY #MAX_ANIMATIONS
0C352                           -drawBlocksLoop:
0C352 88                            DEY
0C353                           
0C353                               ;; If timer is zero, check the next move block
0C353 B9 80 03                      LDA move_block_timer,y
0C356 F0 52                         BEQ +nextMoveBlock
0C358                               
0C358                               ;; Get current sprite pointer
0C358 A6 3D                         LDX sprite_ram_pointer
0C35A                           
0C35A                               ;; Draw the sprites on screen
0C35A B9 7C 03                      LDA move_block_y,y
0C35D 9D 00 02                      STA ADDR_SPRITERAM,x
0C360 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C363 18                            CLC
0C364 69 08                         ADC #$08
0C366 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C369 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C36C E8                            INX
0C36D                           
0C36D A9 52                         LDA #$52 ; Top left chr id
0C36F 9D 00 02                      STA ADDR_SPRITERAM,x
0C372 A9 53                         LDA #$53 ; Top right chr id
0C374 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C377 A9 62                         LDA #$62 ; Bottom left chr id
0C379 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C37C A9 63                         LDA #$63 ; Bottom right chr id
0C37E 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C381 E8                            INX
0C382                           
0C382 A9 00                         LDA #BALL_ATTR
0C384 9D 00 02                      STA ADDR_SPRITERAM,x
0C387 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C38A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C38D 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C390 E8                            INX
0C391                           
0C391 B9 78 03                      LDA move_block_x,y
0C394 9D 00 02                      STA ADDR_SPRITERAM,x
0C397 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C39A 18                            CLC
0C39B 69 08                         ADC #$08
0C39D 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3A0 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3A3                           
0C3A3                               ;; Update sprite RAM pointer
0C3A3 A5 3D                         LDA sprite_ram_pointer
0C3A5 18                            CLC
0C3A6 69 10                         ADC #$10
0C3A8 85 3D                         STA sprite_ram_pointer
0C3AA                           
0C3AA                           
0C3AA                           
0C3AA                           +nextMoveBlock:
0C3AA                               ;; Check the next move block
0C3AA C0 00                         CPY #$00
0C3AC D0 A4                         BNE -drawBlocksLoop
0C3AE                           
0C3AE 4C FD C3                      JMP +doneScreenLoad
0C3B1                           
0C3B1                           
0C3B1                           
0C3B1                           +checkNextScreen:
0C3B1                           
0C3B1                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C3B1                               ;; Upon pressing START, the selected level will start
0C3B1                               .include "game/include/main/select_level.asm"
0C3B1 A5 10                         LDA buttons_pressed
0C3B3 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3B5 F0 3C                         BEQ +checkStartPress
0C3B7                           
0C3B7                                   ;; Select next level (1, 5, 9, 13, 17)
0C3B7 A5 41                             LDA current_level
0C3B9 18                                CLC
0C3BA 69 04                             ADC #$04
0C3BC C9 14                             CMP #$14
0C3BE D0 02                             BNE +
0C3C0 A9 00                                 LDA #$00
0C3C2                                   +
0C3C2 85 41                             STA current_level
0C3C4                                   
0C3C4                                   ;; Convert level number to two-byte value
0C3C4 A9 00                             LDA #$00
0C3C6 85 03                             STA temp+3
0C3C8 A5 41                             LDA current_level
0C3CA 18                                CLC
0C3CB 69 01                             ADC #$01
0C3CD                           
0C3CD                               -
0C3CD C9 0A                             CMP #$0A
0C3CF 90 08                             BCC +
0C3D1 E6 03                                 INC temp+3
0C3D3 38                                    SEC
0C3D4 E9 0A                                 SBC #$0A
0C3D6 4C CD C3                              JMP -
0C3D9                                   +
0C3D9                           
0C3D9                                   ;; Add level number to PPU buffer
0C3D9 18                                CLC
0C3DA 69 01                             ADC #$01
0C3DC 85 02                             STA temp+2
0C3DE A9 20                             LDA #$20
0C3E0 85 00                             STA temp
0C3E2 A9 D0                             LDA #$D0
0C3E4 85 01                             STA temp+1
0C3E6 20 F6 CF                          JSR sub_WriteByteToPPUBuffer
0C3E9                                   
0C3E9 C6 01                             DEC temp+1
0C3EB A4 03                             LDY temp+3
0C3ED C8                                INY
0C3EE 84 02                             STY temp+2
0C3F0 20 F6 CF                          JSR sub_WriteByteToPPUBuffer
0C3F3                                   
0C3F3                               +checkStartPress:
0C3F3                           
0C3F3                           
0C3F3                           
0C3F3                               ;; If START button is pressed
0C3F3 A5 10                         LDA buttons_pressed
0C3F5 29 10                         AND #BUTTON_START
0C3F7 F0 04                         BEQ +
0C3F9                                   ;; Start the level
0C3F9 A9 81                             LDA #LOAD_GAME_SCREEN
0C3FB 85 38                             STA screen_mode
0C3FD                               +
0C3FD                           
0C3FD                           
0C3FD                           
0C3FD                           +doneScreenLoad:
0C3FD                           
0C3FD                               ;; Load animations (if any)
0C3FD                               .include "game/include/main/load_animations.asm"
0C3FD                               ;; Set up loop
0C3FD A2 00                         LDX #$00
0C3FF                               -loop_load_animation:
0C3FF                                   ;; Check if current animation is active. If not, goto next
0C3FF BD 74 03                          LDA explosion_active,x
0C402 D0 03                             BNE +
0C404 4C 9E C4                              JMP +next
0C407                                   +
0C407                           
0C407                                   ;; Check the explosion framecounter
0C407 BD 60 03                          LDA explosion_timer,x
0C40A D0 26                             BNE +
0C40C                                       ;; Frametimer is 0
0C40C                                       ;; Reset to animation speed
0C40C A9 04                                 LDA #ANIMATION_SPEED
0C40E 9D 60 03                              STA explosion_timer,x
0C411                           
0C411                                       ;; Set next animation frame, and check if we're done yet
0C411 FE 64 03                              INC explosion_currentframe,x
0C414 BD 64 03                              LDA explosion_currentframe,x
0C417 C9 0A                                 CMP #ANIM_SLIDES
0C419 D0 17                                 BNE +
0C41B                           
0C41B                                       ;; If we're done, inactivate current explosion, clean
0C41B                                       ;; up sprite RAM and go to the next one
0C41B A9 00                                 LDA #$00
0C41D 9D 74 03                              STA explosion_active,x
0C420                                       
0C420 A9 09                                 LDA #SLIDE_SIZE
0C422 0A                                    ASL
0C423 0A                                    ASL
0C424 A8                                    TAY
0C425 A9 EF                                 LDA #$EF
0C427                                       -
0C427 88                                        DEY
0C428 99 00 02                                  STA ADDR_SPRITERAM,y
0C42B C0 00                                     CPY #00
0C42D D0 F8                                 BNE -
0C42F                                       
0C42F 4C 9E C4                              JMP +next
0C432                                   +
0C432                           
0C432                                   ;; Load (x,y) position in temp variables
0C432 BD 6C 03                          LDA explosion_x,x
0C435 85 01                             STA temp+1
0C437 85 03                             STA temp+3
0C439 BD 70 03                          LDA explosion_y,x
0C43C 85 02                             STA temp+2
0C43E                           
0C43E                                   ;; Load attribute in temp variable
0C43E BD 68 03                          LDA explosion_attributes,x
0C441 85 04                             STA temp+4
0C443                           
0C443                                   ;; Load current frame into Y-register
0C443 BC 64 03                          LDY explosion_currentframe,x
0C446                           
0C446                                   ;; Load current frame ROM address from table
0C446 B9 4A D1                          LDA explosion_anim_lo,y
0C449 85 0C                             STA pointer
0C44B B9 40 D1                          LDA explosion_anim_hi,y
0C44E 85 0D                             STA pointer+1
0C450                           
0C450                                   ;; Save x-register on stack
0C450 8A                                TXA
0C451 48                                PHA
0C452                           
0C452                                   ;; Load sprites into sprite RAM
0C452 A6 3D                             LDX sprite_ram_pointer
0C454 A0 00                             LDY #$00
0C456                           
0C456                                   ;; Prepare (x,y) offset for loop
0C456 84 00                             STY temp
0C458                           
0C458                                   -loop_load_sprite:
0C458                                   
0C458                                       ;; Do not draw empty sprites
0C458 B1 0C                                 LDA (pointer),y
0C45A F0 18                                 BEQ +nextSprite
0C45C                                   
0C45C                                           ;; Add y-position to sprite ram buffer
0C45C A5 02                                     LDA temp+2
0C45E 9D 00 02                                  STA ADDR_SPRITERAM,x
0C461 E8                                        INX
0C462                           
0C462                                           ;; Get tile number from frame ROM address, and
0C462                                           ;; add it to sprite ram buffer
0C462 B1 0C                                     LDA (pointer),y
0C464 9D 00 02                                  STA ADDR_SPRITERAM,x
0C467 E8                                        INX
0C468                           
0C468                                           ;; Add attribute data to sprite ram buffer
0C468 A5 04                                     LDA temp+4
0C46A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C46D E8                                        INX
0C46E                           
0C46E                                           ;; Add x-position to sprite ram buffer
0C46E A5 03                                     LDA temp+3
0C470 9D 00 02                                  STA ADDR_SPRITERAM,x
0C473 E8                                        INX
0C474                           
0C474                                       +nextSprite:
0C474                           
0C474                                       ;; Check if all sprites are done
0C474 C8                                    INY
0C475 C0 09                                 CPY #SLIDE_SIZE
0C477 F0 21                                 BEQ +done
0C479                           
0C479                                       ;; Update x value
0C479 A5 03                                 LDA temp+3
0C47B 18                                    CLC
0C47C 69 08                                 ADC #$08
0C47E 85 03                                 STA temp+3
0C480                           
0C480                                       ;; Update temp for x,y position
0C480 E6 00                                 INC temp
0C482 A5 00                                 LDA temp
0C484 C9 03                                 CMP #SLIDE_WIDTH
0C486 D0 0F                                 BNE +
0C488                                           ;; Row is done; reset x-position
0C488 A5 01                                     LDA temp+1
0C48A 85 03                                     STA temp+3
0C48C                           
0C48C                                           ;; Update y-position
0C48C A5 02                                     LDA temp+2
0C48E 18                                        CLC
0C48F 69 08                                     ADC #$08
0C491 85 02                                     STA temp+2
0C493                           
0C493                                           ;; Reset row timer
0C493 A9 00                                     LDA #$00
0C495 85 00                                     STA temp
0C497                                       +
0C497                           
0C497 4C 58 C4                          JMP -loop_load_sprite
0C49A                           
0C49A                               +done:
0C49A 86 3D                             STX sprite_ram_pointer
0C49C                           
0C49C                                   ;; Retrieve x-register from stack
0C49C 68                                PLA
0C49D AA                                TAX
0C49E                           
0C49E                               +next:
0C49E                                   ;; Check if all animations have been updated
0C49E E8                                INX
0C49F E0 04                             CPX #MAX_ANIMATIONS
0C4A1 F0 03                             BEQ +done
0C4A3                           
0C4A3 4C FF C3                      JMP -loop_load_animation
0C4A6                           +done:
0C4A6                           
0C4A6                               ;; Sprite clean-up
0C4A6 A6 3D                         LDX sprite_ram_pointer
0C4A8 A9 EF                         LDA #$EF
0C4AA                               -
0C4AA 9D 00 02                          STA ADDR_SPRITERAM,x
0C4AD E8                                INX
0C4AE D0 FA                         BNE -
0C4B0 4C 63 C0                      JMP MainGameLoop
0C4B3                           
0C4B3                           ;; Game over sequence is outside main game loop
0C4B3                           .include "game/include/main/game_over.asm"
0C4B3                           lbl_GameOver:
0C4B3                           
0C4B3                               ;; Disable noise channel
0C4B3 A9 00                         LDA #$00
0C4B5 8D 15 40                      STA APU_STATUS
0C4B8 8D 0C 40                      STA NOISE_VOLUME
0C4BB                               
0C4BB                               ;; Do blinds effect
0C4BB 20 D6 C5                      JSR sub_BlindsEffect
0C4BE                           
0C4BE                               ;; Disable draw after HUD to disable screen
0C4BE 20 5B C5                      JSR sub_WaitForNMI
0C4C1                               -
0C4C1 AD 02 20                          LDA PPU_STATUS
0C4C4 29 40                             AND #SPRITE_0_HIT
0C4C6 D0 F9                         BNE -
0C4C8                               -
0C4C8 AD 02 20                          LDA PPU_STATUS
0C4CB 29 40                             AND #SPRITE_0_HIT
0C4CD F0 F9                         BEQ -
0C4CF A9 00                         LDA #$00
0C4D1 8D 01 20                      STA PPU_MASK
0C4D4                           
0C4D4                               ;; Remove game area from view
0C4D4 2C 02 20                      BIT PPU_STATUS
0C4D7 A9 20                         LDA #$20
0C4D9 8D 06 20                      STA PPU_ADDR
0C4DC A9 A0                         LDA #$A0
0C4DE 8D 06 20                      STA PPU_ADDR
0C4E1 A9 00                         LDA #$00
0C4E3 A2 16                         LDX #$16
0C4E5                               -xLoop:
0C4E5 A0 20                             LDY #$20
0C4E7                                   -yLoop:
0C4E7 8D 07 20                              STA PPU_DATA
0C4EA 88                                    DEY
0C4EB D0 FA                             BNE -yLoop
0C4ED CA                                DEX
0C4EE D0 F5                         BNE -xLoop
0C4F0                               
0C4F0                               ;; Pause for a little while
0C4F0 A2 18                         LDX #$18
0C4F2                               -
0C4F2 20 5B C5                          JSR sub_WaitForNMI
0C4F5 CA                                DEX
0C4F6 D0 FA                         BNE -
0C4F8                                       
0C4F8                               ;; Do flash effect
0C4F8 20 B3 C9                      JSR sub_FlashEffect
0C4FB                           
0C4FB                               ;; Draw GAME OVER tiles over game screen
0C4FB A9 21                         LDA #$21
0C4FD 85 00                         STA temp
0C4FF A9 EB                         LDA #$EB
0C501 85 01                         STA temp+1
0C503                           
0C503 A2 00                         LDX #$00
0C505                               -gameOverTileLoop:
0C505 BD 0D D9                          LDA tbl_GameOver,x
0C508 85 02                             STA temp+2
0C50A 20 F6 CF                          JSR sub_WriteByteToPPUBuffer
0C50D E6 01                             INC temp+1
0C50F E8                                INX
0C510 E0 0A                             CPX #$0A
0C512 D0 F1                         BNE -gameOverTileLoop
0C514                               
0C514                               ;; Update GAME OVER attributes on game screen
0C514 A9 23                         LDA #$23
0C516 85 00                         STA temp
0C518 A9 DA                         LDA #$DA
0C51A 85 01                         STA temp+1
0C51C A9 AA                         LDA #$AA
0C51E 85 02                         STA temp+2
0C520 A2 04                         LDX #$04
0C522                               -
0C522 20 F6 CF                          JSR sub_WriteByteToPPUBuffer
0C525 E6 01                             INC temp+1
0C527 CA                                DEX
0C528 D0 F8                         BNE -
0C52A 20 5B C5                      JSR sub_WaitForNMI
0C52D                               
0C52D                              
0C52D                               ;; If player score is larger than high score
0C52D                               ;; Overwrite high score with player score
0C52D                               ;; [@TODO]
0C52D                               
0C52D                               
0C52D                               ;; If player presses either A or START, (soft) reset the game
0C52D                               -checkController:
0C52D 20 47 C5                          JSR sub_ReadController
0C530 A5 0F                             LDA buttons_held
0C532 29 90                             AND #%10010000
0C534 F0 F7                         BEQ -checkController
0C536 4C 4B C0                      JMP lbl_SoftReset
0C539                           
0C539                           ;; Subroutines
0C539                           .include "include/subroutines.asm"
0C539                           
0C539                           ;; RNG
0C539                           .include "subroutine/GetRandomNumber.asm"
0C539                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C539                           ;;
0C539                           ;; subroutine/GetRandomNumber.asm
0C539                           ;;
0C539                           ;; Simple and fast random number generator by White Flame.
0C539                           ;;
0C539                           ;; Set random_seed to an arbitrary number to randomize between
0C539                           ;; gaming sessions, for instance using the frame timer upon
0C539                           ;; pressing START on the intro screen.
0C539                           ;;
0C539                           ;;     ;; IF START PRESSED:
0C539                           ;;     LDA frame_counter
0C539                           ;;     STA random_seed
0C539                           ;;
0C539                           ;; Source:
0C539                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C539                           ;;
0C539                           ;;
0C539                           
0C539                           sub_GetRandomNumber:
0C539                               ;; Force EOR if random_seed is zero
0C539 A5 16                         LDA random_seed
0C53B F0 05                         BEQ +doEor
0C53D                           
0C53D                               ;; Shift left, and EOR if the high bit is set
0C53D 0A                            ASL
0C53E F0 04                         BEQ +noEor
0C540 90 02                         BCC +noEor
0C542                           
0C542                           +doEor:
0C542 49 1D                         EOR #$1D
0C544                           
0C544                           +noEor:
0C544 85 16                         STA random_seed
0C546                           
0C546 60                            RTS
0C547                           
0C547                           
0C547                           ;; Read controller input
0C547                           .include "subroutine/ReadController.asm"
0C547                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C547                           ;;
0C547                           ;; subroutine/ReadController.asm
0C547                           ;;
0C547                           ;; Subroutine that polls the controller and stores the input
0C547                           ;; buttons in a variable. This version only handles controller
0C547                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C547                           ;;
0C547                           ;;
0C547                           
0C547                           sub_ReadController:
0C547                           
0C547                               ;; Set strobe bit
0C547 A9 01                         LDA #$01
0C549 8D 16 40                      STA JOYPAD_1
0C54C                           
0C54C                               ;; Set up ring timer
0C54C 85 0F                         STA buttons_held
0C54E                           
0C54E                               ;; Clear strobe bit
0C54E 4A                            LSR
0C54F 8D 16 40                      STA JOYPAD_1
0C552                           
0C552                               ;; Loop through button presses
0C552                               -
0C552 AD 16 40                          LDA JOYPAD_1
0C555 4A                                LSR
0C556 26 0F                             ROL buttons_held
0C558                           
0C558                               ;; Check if ring timer is done
0C558 90 F8                         BCC -
0C55A                           
0C55A                               ;; Return from subroutine
0C55A 60                            RTS
0C55B                           
0C55B                           
0C55B                           ;; vBlank/NMI wait
0C55B                           .include "subroutine/WaitForNMI.asm"
0C55B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C55B                           ;;
0C55B                           ;; subroutine/WaitForVBlank.asm
0C55B                           ;;
0C55B                           ;; Subroutine that essentially pauses script execution until
0C55B                           ;; vBlank happens.
0C55B                           ;;
0C55B                           ;;
0C55B                           
0C55B                           sub_WaitForNMI:
0C55B A9 01                         LDA #$01
0C55D 85 49                         STA check_nmi
0C55F                               -
0C55F A5 49                             LDA check_nmi
0C561 D0 FC                         BNE -
0C563 60                            RTS
0C564                           
0C564                           .include "subroutine/WaitForVBlank.asm"
0C564                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C564                           ;;
0C564                           ;; subroutine/WaitForVBlank.asm
0C564                           ;;
0C564                           ;; Subroutine that essentially pauses script execution until
0C564                           ;; vBlank happens.
0C564                           ;;
0C564                           ;;
0C564                           
0C564                           sub_WaitForVBlank:
0C564 2C 02 20                      BIT $2002
0C567 10 FB                         BPL sub_WaitForVBlank
0C569 60                            RTS
0C56A                           
0C56A                           
0C56A                           ;; Game specific subroutines
0C56A                           .include "game/include/subroutines.asm"
0C56A                           ;; additional game-specific subroutines go here
0C56A                           
0C56A                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C56A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C56A                           ;;
0C56A                           ;;  sub_AddAccumulatorToScore.asm
0C56A                           ;;
0C56A                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C56A                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C56A                           ;;  actual score.
0C56A                           ;;
0C56A                           ;;
0C56A                           
0C56A                           
0C56A                           sub_AddAccumulatorToScore:
0C56A                           
0C56A                               ;; Clear old add_to_score
0C56A A2 05                         LDX #$05
0C56C A0 00                         LDY #$00
0C56E                               -
0C56E 94 26                             STY add_to_score,x
0C570 CA                                DEX
0C571 10 FB                         BPL -
0C573                           
0C573                               ;; Set accumulator to add_to_score variables
0C573                               ;; Check and update 100s
0C573                               -checkHundreds:
0C573 C9 64                             CMP #100
0C575 90 08                             BCC +checkTens
0C577 38                                    SEC
0C578 E9 64                                 SBC #100
0C57A E6 29                                 INC add_to_score+3
0C57C 4C 73 C5                              JMP -checkHundreds
0C57F                                   +checkTens:
0C57F                           
0C57F                               ;; Check and update 10s
0C57F                               -checkTens:
0C57F C9 0A                             CMP #10
0C581 90 08                             BCC +setOnes
0C583 38                                    SEC
0C584 E9 0A                                 SBC #10
0C586 E6 2A                                 INC add_to_score+4
0C588 4C 7F C5                              JMP -checkTens
0C58B                                   +setOnes:
0C58B                           
0C58B                               ;; We're left with 1s
0C58B 85 2B                         STA add_to_score+5
0C58D                           
0C58D                               ;; Byte for byte, add add_to_score to ball_score
0C58D A9 00                         LDA #$00
0C58F 85 39                         STA ppu_buffer_update
0C591 A4 3A                         LDY ppu_buffer_pointer
0C593 A2 05                         LDX #$05
0C595                               -
0C595 B5 26                             LDA add_to_score,x
0C597 18                                CLC
0C598 75 20                             ADC ball_score,x
0C59A C9 0A                             CMP #10
0C59C 90 05                             BCC +
0C59E 38                                    SEC
0C59F E9 0A                                 SBC #10
0C5A1 F6 1F                                 INC ball_score-1,x
0C5A3                                   +
0C5A3                                   
0C5A3                                   ;; Update new score digit
0C5A3 95 20                             STA ball_score,x
0C5A5                           
0C5A5                                   ;; Update score tile in PPU
0C5A5 A9 20                             LDA #$20
0C5A7 99 00 03                          STA ppu_buffer,y
0C5AA C8                                INY
0C5AB 8A                                TXA
0C5AC 18                                CLC
0C5AD 69 83                             ADC #$83
0C5AF 99 00 03                          STA ppu_buffer,y
0C5B2 C8                                INY
0C5B3 B5 20                             LDA ball_score,x
0C5B5 18                                CLC
0C5B6 69 01                             ADC #$01
0C5B8 99 00 03                          STA ppu_buffer,y
0C5BB C8                                INY
0C5BC                           
0C5BC                                   ;; Check next digit (if any left)
0C5BC CA                                DEX
0C5BD 30 03                             BMI +done
0C5BF 4C 95 C5                      JMP -
0C5C2                           
0C5C2                           +done:
0C5C2                               ;; Update PPU buffer pointer and status
0C5C2 84 3A                         STY ppu_buffer_pointer
0C5C4 A9 01                         LDA #$01
0C5C6 85 39                         STA ppu_buffer_update
0C5C8                           
0C5C8                               ;; Done: return 
0C5C8 60                            RTS
0C5C9                           
0C5C9                           .include "game/subroutine/BackgroundNoise.asm"
0C5C9                           
0C5C9                           sub_BackgroundNoise:
0C5C9 A9 32                         LDA #$32
0C5CB 8D 0C 40                      STA NOISE_VOLUME
0C5CE A9 0E                         LDA #$0E
0C5D0 8D 0E 40                      STA NOISE_PERIOD
0C5D3 85 46                         STA current_noise
0C5D5 60                            RTS0C5D6                           .include "game/subroutine/BlindsEffect.asm"
0C5D6                           
0C5D6                           sub_BlindsEffect:
0C5D6                           
0C5D6                               ;; Set up loop fading
0C5D6 A9 00                         LDA #$00
0C5D8 85 07                         STA temp+7
0C5DA A0 08                         LDY #$08
0C5DC                               -fadeLoop:
0C5DC 84 08                             STY temp+8
0C5DE                           
0C5DE                                   ;; Wait for NMI to pass
0C5DE 20 5B C5                          JSR sub_WaitForNMI
0C5E1                                   
0C5E1                                   ;; Now wait for No-sprite 0
0C5E1                                   -
0C5E1 AD 02 20                              LDA PPU_STATUS
0C5E4 29 40                                 AND #SPRITE_0_HIT
0C5E6 D0 F9                             BNE -
0C5E8                               
0C5E8                                   ;; Now wait for Sprite 0
0C5E8                                   -
0C5E8 AD 02 20                              LDA PPU_STATUS
0C5EB 29 40                                 AND #SPRITE_0_HIT
0C5ED F0 F9                             BEQ -
0C5EF                                       
0C5EF                                   ;; Setup tile row loop
0C5EF A0 16                             LDY #22
0C5F1                                   -tileLoop:
0C5F1                                   
0C5F1                                       ;; Disable drawing
0C5F1 A5 12                                 LDA soft_ppu_mask
0C5F3 29 F7                                 AND #%11110111
0C5F5 8D 01 20                              STA PPU_MASK
0C5F8                                       
0C5F8                                       ;; Set up scanline loop
0C5F8 A2 08                                 LDX #$08
0C5FA                                       -scanlineLoop:
0C5FA E4 08                                     CPX temp+8
0C5FC D0 0A                                     BNE +wasteTime
0C5FE                                           
0C5FE                                           ;; Restore drawing
0C5FE A5 12                                     LDA soft_ppu_mask
0C600 09 08                                     ORA #%00001000
0C602 8D 01 20                                  STA PPU_MASK
0C605 4C 0E C6                                  JMP +wasteMoreTime
0C608                           
0C608                                           ;; Waste 12 frames
0C608                                           +wasteTime:
0C608 E6 09                                     INC temp+9   ;+5
0C60A C6 09                                     DEC temp+9   ;+5
0C60C 49 00                                     EOR #$00     ;+2
0C60E                                           
0C60E                                           ;; Waste about 100 frames
0C60E                                           +wasteMoreTime:
0C60E                                           
0C60E 86 01                                     STX temp+1     ;  3 down, 97 to go
0C610 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C612                                           -wasteLoop:
0C612 EA                                            NOP
0C613 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C615 CA                                            DEX        ;  5+5L down,  95-5L to go
0C616 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C618                           
0C618 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C61A CA                                        DEX            ;  9+8L down, 91-8L to go
0C61B D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C61D                           
0C61D 88                                    DEY
0C61E D0 D1                             BNE -tileLoop
0C620                           
0C620 A4 08                             LDY temp+8
0C622                                   
0C622 E6 07                             INC temp+7
0C624 A5 07                             LDA temp+7
0C626 C9 02                             CMP #$02
0C628 D0 B2                             BNE -fadeLoop
0C62A                           
0C62A A9 00                             LDA #$00
0C62C 85 07                             STA temp+7
0C62E 88                                DEY
0C62F D0 AB                         BNE -fadeLoop
0C631                               
0C631 60                            RTS
0C632                           .include "game/subroutine/ClearScreen.asm"
0C632                           ;; Subroutine to clear the screen
0C632                           ;; If it's a game screen, add noise
0C632                           
0C632                           sub_ClearScreen:
0C632                               ;; Check of game screen or not
0C632 A5 38                         LDA screen_mode
0C634 29 03                         AND #CHECK_SCREEN_MODE
0C636 C9 01                         CMP #IS_GAME_SCREEN
0C638 F0 02                         BEQ +
0C63A A9 00                             LDA #$00
0C63C                               +
0C63C 85 01                         STA temp+1
0C63E                               
0C63E                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C63E 2C 02 20                      BIT PPU_STATUS
0C641 A9 20                         LDA #$20
0C643 8D 06 20                      STA PPU_ADDR
0C646 A9 00                         LDA #$00
0C648 8D 06 20                      STA PPU_ADDR
0C64B                               
0C64B                               ;; Set up tile to draw and loop
0C64B 85 00                         STA temp
0C64D AA                            TAX
0C64E A8                            TAY
0C64F                           
0C64F                               -     
0C64F                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C64F A5 00                             LDA temp
0C651 8D 07 20                          STA PPU_DATA
0C654                           
0C654                                   ;; Check if we should draw noise next. Noise is drawn if:
0C654                                   ;; - Screen mode is game screen
0C654                                   ;; - Y between #$06 and #$19 (inclusive)
0C654                                   ;; - X between #$02 and #$1D (inclusive)
0C654                                   
0C654                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C654 A5 01                             LDA temp+1
0C656 F0 1C                             BEQ +nextTileInRow
0C658                                   
0C658                                   ;; If Y < $6, skip the check
0C658 C0 06                             CPY #$06
0C65A 90 18                             BCC +nextTileInRow
0C65C                                   
0C65C                                   ;; If X < $1, skip the check
0C65C E0 01                             CPX #$01
0C65E 90 14                             BCC +nextTileInRow
0C660                                   
0C660                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C660 E0 1D                             CPX #$1D
0C662 D0 04                             BNE +
0C664 A9 00                                 LDA #$00
0C666 85 00                                 STA temp
0C668                                   +
0C668 B0 0A                             BCS +nextTileInRow
0C66A                                   
0C66A                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C66A 20 39 C5                          JSR sub_GetRandomNumber
0C66D 29 07                             AND #%00000111
0C66F 18                                CLC
0C670 69 68                             ADC #$68
0C672 85 00                             STA temp
0C674                           
0C674                           +nextTileInRow:
0C674                                   
0C674                                   ;; Check if a row has been done. If not, draw the next
0C674 E8                                INX
0C675 E0 20                             CPX #$20
0C677 D0 D6                             BNE -
0C679                                   
0C679                                   ;; Go to the next row (if any left)
0C679 A2 00                             LDX #00
0C67B C8                                INY
0C67C                                   
0C67C                                   ;; If Y is 1A, skip noise tile check until done drawing
0C67C C0 1A                             CPY #$1A
0C67E D0 04                             BNE +
0C680 A9 00                                 LDA #$00
0C682 85 01                                 STA temp+1
0C684                                   +
0C684                                   
0C684 C0 1E                             CPY #$1E
0C686 D0 C7                         BNE -
0C688                           
0C688                               ;; Clear attribute table
0C688 A9 23                         LDA #$23
0C68A 8D 06 20                      STA PPU_ADDR
0C68D A9 C0                         LDA #$C0
0C68F 8D 06 20                      STA PPU_ADDR
0C692 A9 00                         LDA #$00
0C694 A2 40                         LDX #$40
0C696                               -
0C696 8D 07 20                          STA PPU_DATA
0C699 CA                                DEX
0C69A D0 FA                         BNE -
0C69C                               
0C69C 60                            RTS0C69D                           .include "game/subroutine/ColorizeBall.asm"
0C69D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C69D                           ;;
0C69D                           ;;  Subroutine: ColorizeBall
0C69D                           ;;
0C69D                           ;;  Applies the color set through ball_flags to the ball sprite.
0C69D                           ;;  Expects ball_flags to be in the accumulator
0C69D                           ;;
0C69D                           
0C69D                           
0C69D                           sub_ColorizeBall:
0C69D                           
0C69D                               ;; Get color from ball_flags
0C69D 4A                            LSR
0C69E 4A                            LSR
0C69F 4A                            LSR
0C6A0 4A                            LSR
0C6A1 4A                            LSR
0C6A2 AA                            TAX
0C6A3                           
0C6A3                               ;; Add new light color of ball to PPU palette
0C6A3 A9 3F                         LDA #$3F
0C6A5 85 00                         STA temp
0C6A7 A9 11                         LDA #$11
0C6A9 85 01                         STA temp+1
0C6AB BD 5A D1                      LDA tbl_BallColorLight,x
0C6AE 85 02                         STA temp+2
0C6B0 20 F6 CF                      JSR sub_WriteByteToPPUBuffer
0C6B3                               
0C6B3                               ;; Add new dark color of ball to PPU palette
0C6B3 E6 01                         INC temp+1
0C6B5 BD 54 D1                      LDA tbl_BallColorDark,x
0C6B8 85 02                         STA temp+2
0C6BA 20 F6 CF                      JSR sub_WriteByteToPPUBuffer
0C6BD                               
0C6BD 60                            RTS
0C6BE                           
0C6BE                           .include "game/subroutine/ColorsMatch.asm"
0C6BE                           
0C6BE                           ;; Subroutine to check if ball color matches colliding tile color
0C6BE                           
0C6BE                           sub_ColorsMatch:
0C6BE                               ;; Save tile color in temp variable
0C6BE A5 42                         LDA colliding_tile
0C6C0 29 0E                         AND #%00001110
0C6C2 85 00                         STA temp
0C6C4                           
0C6C4                               ;; Get ball color
0C6C4 A5 37                         LDA ball_flags
0C6C6 29 E0                         AND #%11100000
0C6C8 4A                            LSR
0C6C9 4A                            LSR
0C6CA 4A                            LSR
0C6CB 4A                            LSR
0C6CC                           
0C6CC                               ;; Compare with tile color
0C6CC C5 00                         CMP temp
0C6CE 60                            RTS
0C6CF                           
0C6CF                           .include "game/subroutine/ConvertXYToTileType.asm"
0C6CF                           
0C6CF                           ;; Subroutine to convert the ball's position to a tile type
0C6CF                           ;; - Expects temp to be y-position of ball within game area
0C6CF                           ;; - Expects temp+1 to be x-position of ball within game area
0C6CF                           ;; - Puts result in accumulator and zp variable
0C6CF                           ;; - Corrupts X-register
0C6CF                           
0C6CF                           sub_ConvertXYToTileType:
0C6CF A5 01                         LDA temp+1
0C6D1 4A                            LSR
0C6D2 4A                            LSR
0C6D3 4A                            LSR
0C6D4 4A                            LSR
0C6D5 85 09                         STA temp+9
0C6D7 A5 00                         LDA temp
0C6D9 29 F0                         AND #%11110000
0C6DB 18                            CLC
0C6DC 65 09                         ADC temp+9
0C6DE 85 09                         STA temp+9
0C6E0 AA                            TAX
0C6E1 BD 00 04                      LDA tile_type, x
0C6E4 85 42                         STA colliding_tile
0C6E6 60                            RTS
0C6E7                           
0C6E7                           .include "game/subroutine/DisableEnableRendering.asm"
0C6E7                           sub_DisableRendering:
0C6E7                               ;; Force NMI skip, disable rendering
0C6E7 A9 01                     	LDA #$01
0C6E9 85 14                     	STA force_skip_nmi
0C6EB 20 64 C5                      JSR sub_WaitForVBlank
0C6EE A5 12                         LDA soft_ppu_mask
0C6F0 29 E7                         AND #%11100111
0C6F2 8D 01 20                      STA PPU_MASK
0C6F5 85 12                         STA soft_ppu_mask
0C6F7 20 64 C5                      JSR sub_WaitForVBlank
0C6FA 60                            RTS
0C6FB                           
0C6FB                           sub_EnableRendering:
0C6FB                               ;; Enable rendering
0C6FB A9 00                     	LDA #$00
0C6FD 8D 05 20                  	STA PPU_SCROLL
0C700 8D 05 20                  	STA PPU_SCROLL
0C703 20 64 C5                      JSR sub_WaitForVBlank
0C706 85 14                     	STA force_skip_nmi
0C708 A5 12                         LDA soft_ppu_mask
0C70A 09 18                         ORA #%00011000
0C70C 85 12                         STA soft_ppu_mask
0C70E 8D 01 20                      STA PPU_MASK
0C711 20 64 C5                      JSR sub_WaitForVBlank
0C714 60                            RTS
0C715                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C715                           sub_drawIntroScreenLogoTile:
0C715 B9 3C D0                      LDA tbl_IntroScreenLogoChr,y
0C718 C9 60                         CMP #$60
0C71A D0 08                         BNE +
0C71C 20 39 C5                          JSR sub_GetRandomNumber
0C71F 29 07                             AND #$07
0C721 18                                CLC
0C722 69 60                             ADC #$60
0C724                               +
0C724 8D 07 20                      STA PPU_DATA
0C727 60                            RTS
0C728                           .include "game/subroutine/DrawMoveTile.asm"
0C728                           ;; Draw the move tile as follows:
0C728                           ;;
0C728                           ;;  1 2
0C728                           ;;  3 4 5
0C728                           ;;    6 7
0C728                           ;;
0C728                           ;; (1,2,3,4) is the move block itself
0C728                           ;; (5,6,7) are shades unless that tile is solid
0C728                           
0C728                           ;; X holds the move block sprite slot
0C728                           
0C728                           sub_DrawMoveTile:
0C728                           
0C728                               ;; Get tile type index from sprite x and y values
0C728                               ;; and store it in a temp variable
0C728 BD 78 03                      LDA move_block_x,x
0C72B 18                            CLC
0C72C 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C72E 4A                            LSR
0C72F 4A                            LSR
0C730 4A                            LSR
0C731 4A                            LSR
0C732 85 09                         STA temp+9
0C734 BD 7C 03                      LDA move_block_y,x
0C737 18                            CLC
0C738 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C73A 29 F0                         AND #%11110000
0C73C 18                            CLC
0C73D 65 09                         ADC temp+9
0C73F 85 09                         STA temp+9
0C741 A8                            TAY
0C742                               
0C742                               ;; Add move tile data on the new tile location
0C742 BD 84 03                      LDA move_block_tile_type,x
0C745 99 00 04                      STA tile_type,y
0C748                           
0C748                               ;; Draw the original tile type in the ppu buffer
0C748                               ;; - get PPU address to write to (temp, temp+1)
0C748 8A                            TXA
0C749 48                            PHA
0C74A A6 09                         LDX temp+9
0C74C 20 D1 C9                      JSR sub_GetPPUAddrFromYXIndex
0C74F 68                            PLA
0C750 AA                            TAX
0C751                               
0C751                               ;; - based on color, select tile 42 or 4A for top left
0C751 BD 88 03                      LDA move_block_flags,x
0C754 4A                            LSR
0C755 4A                            LSR
0C756 4A                            LSR
0C757 4A                            LSR
0C758 4A                            LSR
0C759 A8                            TAY
0C75A B9 06 D9                      LDA tbl_MoveBlockTopLeftTile,y
0C75D 85 08                         STA temp+8
0C75F                               
0C75F                               ;; - save palette ID in temp+6
0C75F 98                            TYA
0C760 4A                            LSR
0C761 85 06                         STA temp+6
0C763                               
0C763                               ;; Prepare PPU buffer
0C763 A4 3A                         LDY ppu_buffer_pointer
0C765 A9 00                         LDA #$00
0C767 85 39                         STA ppu_buffer_update
0C769                               
0C769                               ;; Draw tile 1 (top left tile of move block)
0C769 20 4A C8                      JSR sub_DrawTileTemp018
0C76C                           
0C76C                               
0C76C                               ;; Draw tile 2 (top right tile of move block)
0C76C E6 01                         INC temp+1
0C76E E6 08                         INC temp+8
0C770 20 4A C8                      JSR sub_DrawTileTemp018
0C773                           
0C773                               ;; Draw tile 3 (bottom left tile of move block)
0C773 A5 01                         LDA temp+1
0C775 18                            CLC
0C776 69 1F                         ADC #$1F
0C778 85 01                         STA temp+1
0C77A A5 00                         LDA temp
0C77C 69 00                         ADC #$00
0C77E 85 00                         STA temp
0C780 A5 08                         LDA temp+8
0C782 18                            CLC
0C783 69 0F                         ADC #$0F
0C785 85 08                         STA temp+8
0C787 20 4A C8                      JSR sub_DrawTileTemp018
0C78A                           
0C78A                               ;; Draw tile 4 (bottom right tile of move block)
0C78A E6 01                         INC temp+1
0C78C E6 08                         INC temp+8
0C78E 20 4A C8                      JSR sub_DrawTileTemp018
0C791                           
0C791                               ;; Load tile type offset in X register
0C791 8A                            TXA
0C792 48                            PHA
0C793 A6 09                         LDX temp+9
0C795                               
0C795                               ;; Load shade tile in temp+8
0C795 A9 00                         LDA #$00
0C797 85 08                         STA temp+8
0C799                           
0C799                               ;; Draw tile 5 (right shade) unless tile is solid
0C799 E6 01                         INC temp+1
0C79B                               
0C79B 8A                            TXA
0C79C 29 0F                         AND #%00001111
0C79E C9 0D                         CMP #$0D
0C7A0 F0 0A                         BEQ +nextTile
0C7A2                           
0C7A2 BD 01 04                      LDA tile_type+1,x
0C7A5 29 01                         AND #%00000001
0C7A7 D0 03                         BNE +nextTile
0C7A9                               
0C7A9 20 4A C8                      JSR sub_DrawTileTemp018
0C7AC                               
0C7AC                           
0C7AC                           +nextTile:
0C7AC                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C7AC A5 01                         LDA temp+1
0C7AE 18                            CLC
0C7AF 69 1F                         ADC #$1F
0C7B1 85 01                         STA temp+1
0C7B3 A5 00                         LDA temp
0C7B5 69 00                         ADC #$00
0C7B7 85 00                         STA temp
0C7B9                           
0C7B9 8A                            TXA
0C7BA 29 F0                         AND #%11110000
0C7BC C9 90                         CMP #$90
0C7BE F0 0A                         BEQ +nextTile
0C7C0                           
0C7C0 BD 10 04                      LDA tile_type+16,x
0C7C3 29 01                         AND #%00000001
0C7C5 D0 03                         BNE +nextTile
0C7C7                               
0C7C7 20 4A C8                      JSR sub_DrawTileTemp018
0C7CA                           
0C7CA                               
0C7CA                           +nextTile:
0C7CA                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C7CA E6 01                         INC temp+1
0C7CC                           
0C7CC 8A                            TXA
0C7CD 29 F0                         AND #%11110000
0C7CF C9 90                         CMP #$90
0C7D1 F0 11                         BEQ +setTileAttributes
0C7D3                               
0C7D3 8A                            TXA
0C7D4 29 0F                         AND #%00001111
0C7D6 C9 0D                         CMP #$0D
0C7D8 F0 0A                         BEQ +setTileAttributes
0C7DA                               
0C7DA BD 11 04                      LDA tile_type+17,x
0C7DD 29 01                         AND #%00000001
0C7DF D0 03                         BNE +setTileAttributes
0C7E1                               
0C7E1 20 4A C8                      JSR sub_DrawTileTemp018
0C7E4                               
0C7E4                           
0C7E4                           +setTileAttributes:
0C7E4                               ;; Update attribute table accordingly through ppu buffer
0C7E4                               ;; - PPU buffer high byte
0C7E4 20 CC CF                      JSR sub_SetTileAttributeAddress
0C7E7                           
0C7E7 8A                            TXA
0C7E8 29 10                         AND #%00010000
0C7EA F0 05                         BEQ +        
0C7EC A9 F0                             LDA #%11110000
0C7EE 4C F3 C7                          JMP ++
0C7F1                               +
0C7F1 A9 0F                         LDA #%00001111
0C7F3                               ++
0C7F3 85 02                         STA temp+2
0C7F5                               
0C7F5 8A                            TXA
0C7F6 29 01                         AND #%00000001
0C7F8 F0 07                         BEQ +
0C7FA A5 02                             LDA temp+2
0C7FC 09 CC                             ORA #%11001100
0C7FE 4C 05 C8                          JMP ++
0C801                               +
0C801 A5 02                         LDA temp+2
0C803 09 33                         ORA #%00110011
0C805                               ++
0C805 85 02                         STA temp+2
0C807                               
0C807 C9 FC                         CMP #%11111100
0C809 F0 22                         BEQ +continue
0C80B                               
0C80B C9 F3                         CMP #%11110011
0C80D D0 09                         BNE +
0C80F A5 06                             LDA temp+6
0C811 0A                                ASL
0C812 0A                                ASL
0C813 85 06                             STA temp+6
0C815 4C 2D C8                          JMP +continue
0C818                               +
0C818                               
0C818 C9 CF                         CMP #%11001111
0C81A D0 0A                         BNE +
0C81C A6 06                             LDX temp+6
0C81E BD A9 D8                          LDA tbl_Times16,x
0C821 85 06                             STA temp+6
0C823 4C 2D C8                          JMP +continue
0C826                               +
0C826                               
0C826 A6 06                         LDX temp+6
0C828 BD B9 D8                      LDA tbl_Times64,x
0C82B 85 06                         STA temp+6
0C82D                                   
0C82D                           +continue:
0C82D A5 00                         LDA temp
0C82F 38                            SEC
0C830 E9 C0                         SBC #$C0
0C832 AA                            TAX
0C833 BD A0 04                      LDA tile_attributes,x
0C836 25 02                         AND temp+2
0C838 05 06                         ORA temp+6
0C83A 9D A0 04                      STA tile_attributes,x
0C83D 99 00 03                      STA ppu_buffer,y
0C840 C8                            INY
0C841                           
0C841                               ;; Restore original X
0C841 68                            PLA
0C842 AA                            TAX
0C843                               
0C843                               ;; Update PPU buffer
0C843 84 3A                         STY ppu_buffer_pointer
0C845 A9 01                         LDA #$01
0C847 85 39                         STA ppu_buffer_update
0C849                           
0C849                               ;; Return
0C849 60                            RTS
0C84A                           .include "game/subroutine/DrawTileTemp018.asm"
0C84A                           
0C84A                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C84A                           
0C84A                           sub_DrawTileTemp018:
0C84A A5 00                         LDA temp
0C84C 99 00 03                      STA ppu_buffer,y
0C84F C8                            INY
0C850 A5 01                         LDA temp+1
0C852 99 00 03                      STA ppu_buffer,y
0C855 C8                            INY
0C856 A5 08                         LDA temp+8
0C858 99 00 03                      STA ppu_buffer,y
0C85B C8                            INY
0C85C 60                            RTS
0C85D                           .include "game/subroutine/EvaluateTileType.asm"
0C85D                           ;; Subroutine to evaluate the colliding tile type and take its
0C85D                           ;; corresponding action (move block, kill player, ...)
0C85D                           ;; - Expects X-register to be the tile_type offset
0C85D                           ;; - Uses zp variable colliding_tile
0C85D                           
0C85D                           sub_EvaluateTileType:
0C85D                           
0C85D                               ;; Check if collided tile is a color block
0C85D A5 42                         LDA colliding_tile
0C85F 29 80                         AND #IS_COLOR_BLOCK
0C861 D0 03                         BNE +
0C863 4C C5 C8                          JMP +checkIfPaintBlock
0C866                               +
0C866                               
0C866                               ;; It's a color block. Check if the colors match
0C866 20 BE C6                      JSR sub_ColorsMatch
0C869 F0 01                         BEQ +
0C86B                                   ;; Colors don't match - return
0C86B 60                                RTS
0C86C                               +
0C86C                           
0C86C                               ;; Colors match; destroy color block
0C86C                               
0C86C                               ;; Convert the metatile offset value (which is in the X register)
0C86C                               ;; to its corresponding address in PPU
0C86C 20 D1 C9                      JSR sub_GetPPUAddrFromYXIndex
0C86F                           
0C86F                               ;; Remove color block from screen by drawing a total
0C86F                               ;; of 7 tiles over it (shade included)
0C86F 20 56 CE                      JSR sub_RemoveBlockFromScreen
0C872                               
0C872                               ;; - Load destruction animation on tile
0C872                               ;; Get most recent slot for explosion    
0C872 8A                            TXA
0C873 85 02                         STA temp+2
0C875 A6 3B                         LDX explosion_pointer
0C877                           
0C877                               ;; If 0, use max pointer value
0C877 D0 02                         BNE +
0C879 A2 04                             LDX #MAX_ANIMATIONS
0C87B                               +
0C87B                           
0C87B                               ;; Decrease pointer by one
0C87B CA                            DEX
0C87C 86 3B                         STX explosion_pointer
0C87E                           
0C87E                               ;; Load explosion data into RAM
0C87E A9 00                         LDA #$00
0C880 9D 64 03                      STA explosion_currentframe,x
0C883                           
0C883 A9 04                         LDA #ANIMATION_SPEED
0C885 9D 60 03                      STA explosion_timer,x
0C888                           
0C888 A5 02                         LDA temp+2
0C88A 29 0F                         AND #%00001111
0C88C A8                            TAY
0C88D B9 A9 D8                      LDA tbl_Times16,y
0C890 18                            CLC
0C891 69 0E                         ADC #$0E
0C893 9D 6C 03                      STA explosion_x,x
0C896                           
0C896 A5 02                         LDA temp+2
0C898 29 F0                         AND #%11110000
0C89A 18                            CLC
0C89B 69 29                         ADC #$29
0C89D 9D 70 03                      STA explosion_y,x
0C8A0                           
0C8A0 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C8A2 9D 68 03                      STA explosion_attributes,x
0C8A5 A9 01                         LDA #$01
0C8A7 9D 74 03                      STA explosion_active,x
0C8AA                           
0C8AA A5 02                         LDA temp+2
0C8AC AA                            TAX
0C8AD                               
0C8AD                               
0C8AD                               ;; - Write #$00 in tile type ram (makes not-solid)
0C8AD A9 00                         LDA #$00
0C8AF 9D 00 04                      STA tile_type, x
0C8B2                           
0C8B2                           
0C8B2                               ;; Add (80 + level number) to score
0C8B2 A5 41                         LDA current_level
0C8B4 18                            CLC
0C8B5 69 51                         ADC #81
0C8B7 20 6A C5                      JSR sub_AddAccumulatorToScore
0C8BA                           
0C8BA                           
0C8BA                               ;; - If there are no color blocks left:
0C8BA                               ;;   - Freeze ball
0C8BA                               ;;   - Initiate level-win state [@TODO]
0C8BA C6 43                         DEC blocks_left
0C8BC D0 06                         BNE +
0C8BE A5 37                             LDA ball_flags
0C8C0 09 04                             ORA #FREEZE_BALL
0C8C2 85 37                             STA ball_flags
0C8C4                               +
0C8C4                               
0C8C4 60                            RTS
0C8C5                           
0C8C5                           +checkIfPaintBlock:
0C8C5                           
0C8C5                           
0C8C5                               ;; Check if collided tile is a paint block
0C8C5 A5 42                         LDA colliding_tile
0C8C7 29 20                         AND #IS_PAINT_BLOCK
0C8C9 F0 1A                         BEQ +checkIfDeathBlock
0C8CB                                   ;; It's a paint block. Update ball color
0C8CB                                   ;; Save x-register
0C8CB 8A                                TXA
0C8CC 48                                PHA
0C8CD                           
0C8CD                                   ;; Get tile color
0C8CD A5 42                             LDA colliding_tile
0C8CF 29 0E                             AND #%00001110
0C8D1 0A                                ASL
0C8D2 0A                                ASL
0C8D3 0A                                ASL
0C8D4 0A                                ASL
0C8D5 85 00                             STA temp
0C8D7                           
0C8D7                                   ;; Apply tile color to ball
0C8D7 A5 37                             LDA ball_flags
0C8D9 29 1F                             AND #%00011111
0C8DB 05 00                             ORA temp
0C8DD 85 37                             STA ball_flags
0C8DF 20 9D C6                          JSR sub_ColorizeBall
0C8E2                           
0C8E2                                   ;; Restore x-register
0C8E2 68                                PLA
0C8E3 AA                                TAX
0C8E4                           
0C8E4                                   ;; Return
0C8E4 60                                RTS
0C8E5                               +checkIfDeathBlock:
0C8E5                           
0C8E5                               ;; Check if collided tile is a death block
0C8E5 A5 42                         LDA colliding_tile
0C8E7 29 10                         AND #IS_DEATH_BLOCK
0C8E9 F0 38                         BEQ +checkIfMoveBlock
0C8EB                           
0C8EB                                   ;; It is a death block
0C8EB                                   ;; Freeze and kill player
0C8EB A5 37                             LDA ball_flags
0C8ED 09 05                             ORA #%00000101
0C8EF 85 37                             STA ball_flags
0C8F1                                   
0C8F1                                   ;; Get free explosion slot
0C8F1 A6 3B                             LDX explosion_pointer
0C8F3 D0 02                             BNE +
0C8F5 A2 04                                 LDX #MAX_ANIMATIONS
0C8F7                                   +
0C8F7 CA                                DEX
0C8F8 86 3B                             STX explosion_pointer
0C8FA                           
0C8FA                                   ;; Load explosion data into RAM
0C8FA A9 00                             LDA #$00
0C8FC 9D 64 03                          STA explosion_currentframe,x
0C8FF                           
0C8FF A9 04                             LDA #ANIMATION_SPEED
0C901 9D 60 03                          STA explosion_timer,x
0C904                           
0C904 A5 17                             LDA ball_xpos_hi
0C906 38                                SEC
0C907 E9 08                             SBC #$08
0C909 9D 6C 03                          STA explosion_x,x
0C90C                           
0C90C A5 19                             LDA ball_ypos_hi
0C90E 38                                SEC
0C90F E9 06                             SBC #$06
0C911 9D 70 03                          STA explosion_y,x
0C914                           
0C914 A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C916 9D 68 03                          STA explosion_attributes,x
0C919                           
0C919 A9 01                             LDA #$01
0C91B 9D 74 03                          STA explosion_active,x
0C91E                           
0C91E                                   ;; Set kill timer
0C91E A9 60                             LDA #$60
0C920 85 40                             STA kill_timer
0C922                           
0C922                                   ;; Return
0C922 60                                RTS
0C923                           
0C923                           
0C923                           +checkIfMoveBlock:
0C923                           
0C923                               ;; Check if collided tile is a move block
0C923 A5 42                         LDA colliding_tile
0C925 29 40                         AND #IS_MOVE_BLOCK
0C927 D0 01                         BNE +
0C929 60                                RTS
0C92A                               +
0C92A                           
0C92A                               ;; It is a move block. Check if colors match
0C92A 20 BE C6                      JSR sub_ColorsMatch
0C92D F0 01                         BEQ +
0C92F 60                                RTS
0C930                               +
0C930                           
0C930                               ;; Colors match
0C930                               ;; - Check if next tile is within the playground
0C930                               ;; (push X onto stack as well)
0C930 8A                            TXA
0C931 48                            PHA
0C932 18                            CLC
0C933 65 36                         ADC move_block_space_to_check
0C935 AA                            TAX
0C936                               
0C936 29 0F                         AND #%00001111
0C938 C9 0E                         CMP #$0E
0C93A 90 03                         BCC +
0C93C 4C B0 C9                          JMP +restoreX
0C93F                               +
0C93F 8A                            TXA
0C940 29 F0                         AND #%11110000
0C942 C9 A0                         CMP #$A0
0C944 D0 03                         BNE +
0C946 4C B0 C9                          JMP +restoreX
0C949                               +
0C949 C9 F0                         CMP #$F0
0C94B D0 03                         BNE +
0C94D 4C B0 C9                          JMP +restoreX
0C950                               +
0C950                               
0C950                               ;; Check if the next tile is solid
0C950 BD 00 04                      LDA tile_type,x
0C953 29 01                         AND #TILE_IS_SOLID
0C955 F0 03                         BEQ +
0C957 4C B0 C9                          JMP +restoreX
0C95A                               +
0C95A                               
0C95A                               ;; Move block has room to move
0C95A                               ;; Pull original X from stack
0C95A 68                            PLA
0C95B AA                            TAX        
0C95C                               
0C95C                               ;; Add the tiles that need updating to ppu buffer, and
0C95C                               ;; update attribute table accordingly through ppu buffer
0C95C 20 D1 C9                      JSR sub_GetPPUAddrFromYXIndex
0C95F 20 56 CE                      JSR sub_RemoveBlockFromScreen
0C962                           
0C962                               ;; Store original tile type in temp variable
0C962 BD 00 04                      LDA tile_type,x
0C965 85 08                         STA temp+8
0C967                           
0C967                               ;; Write #$00 in tile type ram (makes not-solid)
0C967 A9 00                         LDA #$00
0C969 9D 00 04                      STA tile_type,x
0C96C                           
0C96C                               ;; Add move tile sprite over the original tile
0C96C                               ;; - Store x in temp variable
0C96C 86 03                         STX temp+3
0C96E                               
0C96E                               ;; - Update move block pointer
0C96E A6 3C                         LDX move_block_pointer
0C970 D0 02                         BNE +
0C972 A2 04                             LDX #MAX_ANIMATIONS
0C974                               +
0C974 CA                            DEX
0C975 86 3C                         STX move_block_pointer
0C977                           
0C977                               ;; = Set move block tile type
0C977 A5 08                         LDA temp+8
0C979 9D 84 03                      STA move_block_tile_type,x
0C97C                           
0C97C                               ;; - Set move block X position
0C97C A5 03                         LDA temp+3
0C97E 29 0F                         AND #%00001111
0C980 A8                            TAY
0C981 C8                            INY
0C982 B9 A9 D8                      LDA tbl_Times16,y
0C985 9D 78 03                      STA move_block_x,x
0C988                               
0C988                               ;; - Set move block Y position
0C988 A5 03                         LDA temp+3
0C98A 29 F0                         AND #%11110000
0C98C 18                            CLC
0C98D 69 30                         ADC #$30
0C98F 9D 7C 03                      STA move_block_y,x
0C992 DE 7C 03                      DEC move_block_y,x
0C995                               
0C995                               ;; - Set timer to 16 (+1) frames
0C995 A9 11                         LDA #$11
0C997 9D 80 03                      STA move_block_timer,x
0C99A                               
0C99A                               ;; - Set move direction
0C99A A5 36                         LDA move_block_space_to_check
0C99C 29 81                         AND #%10000001
0C99E 18                            CLC
0C99F 2A                            ROL
0C9A0 69 00                         ADC #$00
0C9A2 85 04                         STA temp+4
0C9A4                               
0C9A4                               ;; - Set block color as ball color and add direction
0C9A4 A5 37                         LDA ball_flags
0C9A6 29 E0                         AND #BALL_COLOR
0C9A8 05 04                         ORA temp+4
0C9AA 9D 88 03                      STA move_block_flags,x
0C9AD                               
0C9AD                               ;; - Restore original X
0C9AD A6 03                         LDX temp+3
0C9AF                           
0C9AF                               ;; Return
0C9AF 60                            RTS
0C9B0                           
0C9B0                           
0C9B0                           ;; Pull X register from stack before returning
0C9B0                           +restoreX:
0C9B0 68                            PLA
0C9B1 AA                            TAX
0C9B2 60                            RTS
0C9B3                           .include "game/subroutine/FlashEffect.asm"
0C9B3                           sub_FlashEffect:
0C9B3 A2 00                         LDX #$00
0C9B5 86 01                         STX temp+1
0C9B7 A9 3F                         LDA #$3F
0C9B9 85 00                         STA temp
0C9BB                           
0C9BB                               -flashLoop:
0C9BB BD 17 D9                          LDA tbl_BackgroundFade,x
0C9BE 85 02                             STA temp+2
0C9C0 20 F6 CF                          JSR sub_WriteByteToPPUBuffer
0C9C3 A0 03                             LDY #$03
0C9C5                                   -
0C9C5 20 5B C5                              JSR sub_WaitForNMI
0C9C8 88                                    DEY
0C9C9 D0 FA                             BNE -
0C9CB E8                                INX
0C9CC E0 0A                             CPX #$0A
0C9CE D0 EB                         BNE -flashLoop
0C9D0                               
0C9D0 60                            RTS0C9D1                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C9D1                           sub_GetPPUAddrFromYXIndex:
0C9D1                           
0C9D1                               ;; Get the PPU address from YX index
0C9D1                               ;; - Expects YX index (aka tile offset) to be in the X register
0C9D1                               ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C9D1                               
0C9D1                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C9D1                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C9D1                               
0C9D1 8A                            TXA
0C9D2 29 C0                         AND #%11000000
0C9D4 18                            CLC
0C9D5 2A                            ROL
0C9D6 2A                            ROL
0C9D7 2A                            ROL
0C9D8 69 20                         ADC #$20
0C9DA 85 00                         STA temp
0C9DC                               
0C9DC 8A                            TXA
0C9DD 29 0F                         AND #%00001111
0C9DF 0A                            ASL
0C9E0 85 01                         STA temp+1
0C9E2                               
0C9E2 8A                            TXA
0C9E3 29 30                         AND #%00110000
0C9E5 0A                            ASL
0C9E6 0A                            ASL
0C9E7 18                            CLC
0C9E8 65 01                         ADC temp+1
0C9EA 85 01                         STA temp+1
0C9EC                               
0C9EC A5 00                         LDA temp
0C9EE 69 00                         ADC #$00
0C9F0 85 00                         STA temp
0C9F2                               
0C9F2 A5 01                         LDA temp+1
0C9F4 18                            CLC
0C9F5 69 C2                         ADC #$C2
0C9F7 85 01                         STA temp+1
0C9F9                               
0C9F9 A5 00                         LDA temp
0C9FB 69 00                         ADC #$00
0C9FD 85 00                         STA temp
0C9FF                           
0C9FF 60                            RTS0CA00                           .include "game/subroutine/InitiateNudge.asm"
0CA00                           
0CA00                           sub_InitiateNudge:
0CA00 85 37                         STA ball_flags
0CA02 A9 05                         LDA #NUDGE_FRAMES
0CA04 85 3E                         STA nudge_timer
0CA06 60                            RTS
0CA07                           
0CA07                           .include "game/subroutine/JumpToPointer.asm"
0CA07                           sub_JumpToPointer:
0CA07 6C 0C 00                      JMP (pointer)
0CA0A                               ;RTS must be handled by the routine (pointer) jumps to
0CA0A                           .include "game/subroutine/LoadGameScreen.asm"
0CA0A                           sub_LoadGameScreen:
0CA0A                           
0CA0A                               ;; Clear the screen
0CA0A 20 32 C6                      JSR sub_ClearScreen
0CA0D                               
0CA0D                               ;; Clear collision and attribute data; reset blocks left in the process
0CA0D A2 00                         LDX #$00
0CA0F 8A                            TXA
0CA10 85 43                         STA blocks_left
0CA12                               -
0CA12 9D 00 04                          STA tile_type,x
0CA15 E8                                INX
0CA16 D0 FA                         BNE -
0CA18                               
0CA18                               ;; Get pointer from current level
0CA18 A6 41                         LDX current_level
0CA1A BD 5E D8                      LDA tbl_lvl_layout_lo,x
0CA1D 85 0C                         STA pointer
0CA1F BD 45 D8                      LDA tbl_lvl_layout_hi,x
0CA22 85 0D                         STA pointer+1
0CA24                           
0CA24                               ;; Set up the loop
0CA24 A0 00                         LDY #$00
0CA26                           -drawRowColumnLoop:
0CA26                           
0CA26                               ;; Load (x,y) of current set of tiles
0CA26 B1 0C                         LDA (pointer),y
0CA28                           
0CA28                               ;; Check if level is done; if so, skip the loop
0CA28 C9 FF                         CMP #LEVEL_END
0CA2A D0 03                         BNE +
0CA2C 4C 75 CB                          JMP +doneLevelLoad
0CA2F                               +
0CA2F                           
0CA2F                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CA2F 85 00                         STA temp
0CA31 C8                            INY
0CA32 B1 0C                         LDA (pointer),y
0CA34 85 01                         STA temp+1
0CA36                               
0CA36                               ;; Convert (x,y) to PPU address
0CA36                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CA36 A5 00                         LDA temp
0CA38 29 0F                         AND #%00001111
0CA3A 4A                            LSR
0CA3B 4A                            LSR
0CA3C 09 20                         ORA #$20
0CA3E 85 02                         STA temp+2
0CA40                               
0CA40                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CA40 A5 00                         LDA temp
0CA42 29 F0                         AND #%11110000
0CA44 4A                            LSR
0CA45 4A                            LSR
0CA46 4A                            LSR
0CA47 85 03                         STA temp+3
0CA49                               
0CA49 A5 00                         LDA temp
0CA4B 29 03                         AND #%00000011
0CA4D AA                            TAX
0CA4E BD B9 D8                      LDA tbl_Times64,x
0CA51 18                            CLC
0CA52 65 03                         ADC temp+3
0CA54 18                            CLC
0CA55 69 C2                         ADC #$C2
0CA57 85 03                         STA temp+3
0CA59                               
0CA59                               ;; Add carry to temp+2
0CA59 A5 02                         LDA temp+2
0CA5B 69 00                         ADC #$00
0CA5D 85 02                         STA temp+2
0CA5F                           
0CA5F                               ;; Convert tile data to loop count and tile type
0CA5F                               ;; temp+4 = color
0CA5F A5 01                         LDA temp+1
0CA61 29 07                         AND #%00000111
0CA63 85 04                         STA temp+4
0CA65                               
0CA65                               ;; If color = 7, this is a wall
0CA65 C9 07                         CMP #%00000111
0CA67 F0 12                         BEQ +wallHack
0CA69                                   
0CA69                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CA69 29 01                             AND #%00000001
0CA6B F0 02                             BEQ +
0CA6D A9 05                                 LDA #$05
0CA6F                                   +
0CA6F 85 07                             STA temp+7
0CA71                                
0CA71                                   ;; temp+5 = tile type
0CA71 A5 01                             LDA temp+1
0CA73 4A                                LSR
0CA74 4A                                LSR
0CA75 4A                                LSR
0CA76 29 03                             AND #%00000011
0CA78 4C 81 CA                          JMP +setTileType
0CA7B                               +wallHack:
0CA7B                               
0CA7B                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CA7B A9 00                         LDA #$00
0CA7D 85 07                         STA temp+7
0CA7F A9 04                         LDA #$04
0CA81                           
0CA81                           +setTileType:    
0CA81 85 05                         STA temp+5
0CA83                               
0CA83                               ;; X = tile offset
0CA83 18                            CLC
0CA84 65 07                         ADC temp+7
0CA86 AA                            TAX
0CA87                               
0CA87                               ;; temp+6 = number of tiles
0CA87 A5 01                         LDA temp+1
0CA89 29 60                         AND #%01100000
0CA8B 4A                            LSR
0CA8C 4A                            LSR
0CA8D 4A                            LSR
0CA8E 4A                            LSR
0CA8F 4A                            LSR
0CA90 85 06                         STA temp+6
0CA92                               
0CA92                               ;; Translate (x,y) to (y,x) for tile RAM
0CA92 A5 00                         LDA temp
0CA94 0A                            ASL
0CA95 0A                            ASL
0CA96 0A                            ASL
0CA97 0A                            ASL
0CA98 85 08                         STA temp+8
0CA9A A5 00                         LDA temp
0CA9C 4A                            LSR
0CA9D 4A                            LSR
0CA9E 4A                            LSR
0CA9F 4A                            LSR
0CAA0 05 08                         ORA temp+8
0CAA2 85 00                         STA temp
0CAA4                               
0CAA4                               ;; Set up loop
0CAA4 98                            TYA
0CAA5 48                            PHA
0CAA6 A4 06                         LDY temp+6
0CAA8                           
0CAA8                               -drawTileLoop:
0CAA8                                   ;; Write PPU address
0CAA8 2C 02 20                          BIT PPU_STATUS
0CAAB A5 02                             LDA temp+2
0CAAD 8D 06 20                          STA PPU_ADDR
0CAB0 A5 03                             LDA temp+3
0CAB2 8D 06 20                          STA PPU_ADDR
0CAB5                                   
0CAB5                                   ;; Write first and second tile
0CAB5 BD BD D8                          LDA tbl_GametileTopLeft,x
0CAB8 8D 07 20                          STA PPU_DATA
0CABB BD C7 D8                          LDA tbl_GametileTopRight,x
0CABE 8D 07 20                          STA PPU_DATA
0CAC1                                   
0CAC1                                   ;; Update PPU address
0CAC1 2C 02 20                          BIT PPU_STATUS
0CAC4 A5 02                             LDA temp+2
0CAC6 8D 06 20                          STA PPU_ADDR
0CAC9 A5 03                             LDA temp+3
0CACB 18                                CLC
0CACC 69 20                             ADC #$20
0CACE 8D 06 20                          STA PPU_ADDR
0CAD1                                   
0CAD1                                   ;; Write third and fourth tile
0CAD1 BD D1 D8                          LDA tbl_GametileBottomLeft,x
0CAD4 8D 07 20                          STA PPU_DATA
0CAD7 BD DB D8                          LDA tbl_GametileBottomRight,x
0CADA 8D 07 20                          STA PPU_DATA
0CADD                           
0CADD                                   ;; Push x-register to stack
0CADD 8A                                TXA
0CADE 48                                PHA
0CADF                           
0CADF                                   ;; Update tile RAM (aka collision table)
0CADF A6 05                             LDX temp+5
0CAE1 BD E5 D8                          LDA tbl_GameTileRamByte,x
0CAE4 05 04                             ORA temp+4
0CAE6 0A                                ASL
0CAE7 09 01                             ORA #%00000001
0CAE9 A6 00                             LDX temp
0CAEB 9D 00 04                          STA tile_type,x
0CAEE                           
0CAEE                                   ;; Check if shade 1 should be drawn
0CAEE E8                                INX
0CAEF BD 00 04                          LDA tile_type,x
0CAF2 D0 05                             BNE +
0CAF4 A9 00                                 LDA #$00
0CAF6 8D 07 20                              STA PPU_DATA
0CAF9                                   +
0CAF9                                   
0CAF9                                   ;; Check if shade 2 should be drawn
0CAF9 A5 03                             LDA temp+3
0CAFB 18                                CLC
0CAFC 69 41                             ADC #$41
0CAFE 85 03                             STA temp+3
0CB00 A5 02                             LDA temp+2
0CB02 69 00                             ADC #$00
0CB04 85 02                             STA temp+2
0CB06                                   
0CB06 8A                                TXA
0CB07 18                                CLC
0CB08 69 0F                             ADC #$0F
0CB0A AA                                TAX
0CB0B                                   
0CB0B BD 00 04                          LDA tile_type,x
0CB0E D0 0F                             BNE +
0CB10 A5 02                                 LDA temp+2
0CB12 8D 06 20                              STA PPU_ADDR
0CB15 A5 03                                 LDA temp+3
0CB17 8D 06 20                              STA PPU_ADDR
0CB1A A9 00                                 LDA #$00
0CB1C 8D 07 20                              STA PPU_DATA
0CB1F                                   +
0CB1F                           
0CB1F                                   ;; Check if shade 3 should be drawn
0CB1F E8                                INX
0CB20 E6 03                             INC temp+3
0CB22 BD 00 04                          LDA tile_type,x
0CB25 D0 0F                             BNE +
0CB27 A5 02                                 LDA temp+2
0CB29 8D 06 20                              STA PPU_ADDR
0CB2C A5 03                                 LDA temp+3
0CB2E 8D 06 20                              STA PPU_ADDR
0CB31 A9 00                                 LDA #$00
0CB33 8D 07 20                              STA PPU_DATA
0CB36                                   +
0CB36                                   
0CB36                                   ;; Restore x-register from stack
0CB36 68                                PLA
0CB37 AA                                TAX
0CB38                                   
0CB38                                   ;; Reset pointer for next tile
0CB38 A5 03                             LDA temp+3
0CB3A 38                                SEC
0CB3B E9 42                             SBC #$42
0CB3D 85 03                             STA temp+3
0CB3F A5 02                             LDA temp+2
0CB41 E9 00                             SBC #$00
0CB43 85 02                             STA temp+2
0CB45                                   
0CB45                                   ;; Draw next metatile in this loop (if any left)
0CB45 88                                DEY
0CB46 30 27                             BMI +doneDrawingRowColumn
0CB48                                   
0CB48                                   ;; Is it a row or a column?
0CB48 A5 01                             LDA temp+1
0CB4A 10 17                             BPL +
0CB4C                                       ;; It is a column: move pointer down (+$40)
0CB4C A5 03                                 LDA temp+3
0CB4E 18                                    CLC
0CB4F 69 40                                 ADC #$40
0CB51 85 03                                 STA temp+3
0CB53 A5 02                                 LDA temp+2
0CB55 69 00                                 ADC #$00
0CB57 85 02                                 STA temp+2
0CB59                                       
0CB59                                       ;; Add 16 to temp (as a tile RAM pointer)
0CB59 A5 00                                 LDA temp
0CB5B 18                                    CLC
0CB5C 69 10                                 ADC #$10
0CB5E 85 00                                 STA temp
0CB60 4C 6C CB                              JMP +drawNextTile
0CB63                                   +
0CB63                                   
0CB63                                   ;; It is a row: move pointer right (+$02)
0CB63 A5 03                             LDA temp+3
0CB65 18                                CLC
0CB66 69 02                             ADC #$02
0CB68 85 03                             STA temp+3
0CB6A                                   
0CB6A                                   ;; Add 1 to temp (as a tile RAM pointer)
0CB6A E6 00                             INC temp
0CB6C                           
0CB6C                               
0CB6C                               ;; Next tile in the row/column
0CB6C                                   +drawNextTile:
0CB6C 4C A8 CA                      JMP -drawTileLoop
0CB6F                           
0CB6F                               ;; Go to the next set of tiles
0CB6F                           +doneDrawingRowColumn:
0CB6F 68                            PLA
0CB70 A8                            TAY
0CB71 C8                            INY
0CB72 4C 26 CA                      JMP -drawRowColumnLoop
0CB75                           
0CB75                           ;; Level loading is done
0CB75                           +doneLevelLoad:
0CB75                           
0CB75                               ;; Count number of color blocks
0CB75 A2 A0                         LDX #160
0CB77                               -
0CB77 BD FF 03                          LDA tile_type-1,x
0CB7A 29 80                             AND #%10000000
0CB7C F0 02                             BEQ +
0CB7E E6 43                                 INC blocks_left
0CB80                                   +
0CB80 CA                                DEX
0CB81 D0 F4                         BNE -
0CB83                           
0CB83                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CB83 A9 20                         LDA #$20
0CB85 8D 06 20                      STA PPU_ADDR
0CB88 A9 A2                         LDA #$A2
0CB8A 8D 06 20                      STA PPU_ADDR
0CB8D A9 35                         LDA #$35
0CB8F 20 BD CD                      JSR sub_Draw28HorizontalTiles
0CB92                           
0CB92                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CB92 A9 23                         LDA #$23
0CB94 8D 06 20                      STA PPU_ADDR
0CB97 A9 42                         LDA #$42
0CB99 8D 06 20                      STA PPU_ADDR
0CB9C A9 31                         LDA #$31
0CB9E 20 BD CD                      JSR sub_Draw28HorizontalTiles
0CBA1                           
0CBA1                               ;; Left & right game bounds
0CBA1                               ;; Set PPU_ADDR and store in temp variables
0CBA1 A9 20                         LDA #$20
0CBA3 85 00                         STA temp
0CBA5 8D 06 20                      STA PPU_ADDR
0CBA8 A9 C1                         LDA #$C1
0CBAA 85 01                         STA temp+1
0CBAC 8D 06 20                      STA PPU_ADDR
0CBAF                               
0CBAF                               ;; Set vertical bound tile and set up loop
0CBAF A0 33                         LDY #$33
0CBB1 A2 14                         LDX #20
0CBB3                               -
0CBB3                                   ;; Show left tile
0CBB3 8C 07 20                          STY PPU_DATA
0CBB6                                   
0CBB6                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CBB6 A5 00                             LDA temp
0CBB8 8D 06 20                          STA PPU_ADDR
0CBBB A5 01                             LDA temp+1
0CBBD 18                                CLC
0CBBE 69 1D                             ADC #29
0CBC0 85 01                             STA temp+1
0CBC2 8D 06 20                          STA PPU_ADDR
0CBC5                           
0CBC5                                   ;; Show right tile
0CBC5 8C 07 20                          STY PPU_DATA
0CBC8                           
0CBC8                                   ;; Check if we're done yet
0CBC8 CA                                DEX
0CBC9 F0 18                             BEQ +drawCorners
0CBCB                                   
0CBCB                                   ;; Not done yet: add 3 to low byte for next left bound
0CBCB A5 01                             LDA temp+1
0CBCD 18                                CLC
0CBCE 69 03                             ADC #3
0CBD0 85 01                             STA temp+1
0CBD2                                   
0CBD2                                   ;; Apply carry to high byte
0CBD2 A5 00                             LDA temp
0CBD4 69 00                             ADC #$00
0CBD6 85 00                             STA temp
0CBD8                                   
0CBD8                                   ;; Store next PPU_ADDR to draw at
0CBD8 8D 06 20                          STA PPU_ADDR
0CBDB A5 01                             LDA temp+1
0CBDD 8D 06 20                          STA PPU_ADDR
0CBE0 4C B3 CB                      JMP -
0CBE3                               
0CBE3                               
0CBE3                           
0CBE3                           +drawCorners:
0CBE3                               ;; Draw the corners of the playing field
0CBE3 A9 20                         LDA #$20
0CBE5 8D 06 20                      STA PPU_ADDR
0CBE8 A9 A1                         LDA #$A1
0CBEA 8D 06 20                      STA PPU_ADDR
0CBED A9 39                         LDA #$39
0CBEF 8D 07 20                      STA PPU_DATA
0CBF2                           
0CBF2 A9 20                         LDA #$20
0CBF4 8D 06 20                      STA PPU_ADDR
0CBF7 A9 BE                         LDA #$BE
0CBF9 8D 06 20                      STA PPU_ADDR
0CBFC A9 3A                         LDA #$3A
0CBFE 8D 07 20                      STA PPU_DATA
0CC01                               ;; (added background tile for Sprite-0 hit)
0CC01 A9 3F                         LDA #$3F
0CC03 8D 07 20                      STA PPU_DATA
0CC06                           
0CC06 A9 23                         LDA #$23
0CC08 8D 06 20                      STA PPU_ADDR
0CC0B A9 41                         LDA #$41
0CC0D 8D 06 20                      STA PPU_ADDR
0CC10 A9 36                         LDA #$36
0CC12 8D 07 20                      STA PPU_DATA
0CC15                           
0CC15 A9 23                         LDA #$23
0CC17 8D 06 20                      STA PPU_ADDR
0CC1A A9 5E                         LDA #$5E
0CC1C 8D 06 20                      STA PPU_ADDR
0CC1F A9 34                         LDA #$34
0CC21 8D 07 20                      STA PPU_DATA
0CC24                           
0CC24                           
0CC24                               ;; Draw the hud labels
0CC24 A9 20                         LDA #$20
0CC26 8D 06 20                      STA PPU_ADDR
0CC29 A9 62                         LDA #$62
0CC2B 8D 06 20                      STA PPU_ADDR
0CC2E A2 00                         LDX #$00
0CC30                               -
0CC30 BD EA D8                          LDA tbl_HudText,x
0CC33 8D 07 20                          STA PPU_DATA
0CC36 E8                                INX
0CC37 E0 1C                             CPX #28
0CC39 D0 F5                         BNE -
0CC3B                           
0CC3B                           
0CC3B                               ;; Draw the current score
0CC3B A9 20                         LDA #$20
0CC3D 8D 06 20                      STA PPU_ADDR
0CC40 A9 83                         LDA #$83
0CC42 8D 06 20                      STA PPU_ADDR
0CC45 A2 00                         LDX #$00
0CC47                               -
0CC47 B5 20                             LDA ball_score,x
0CC49 18                                CLC
0CC4A 69 01                             ADC #$01
0CC4C 8D 07 20                          STA PPU_DATA
0CC4F E8                                INX
0CC50 E0 06                             CPX #$06
0CC52 D0 F3                         BNE -
0CC54                           
0CC54                           
0CC54                               ;; Draw the level number
0CC54                               ;; (with primitive HEX>DEC)
0CC54 A5 41                         LDA current_level
0CC56 18                            CLC
0CC57 69 01                         ADC #$01
0CC59 85 01                         STA temp+1
0CC5B                               
0CC5B C9 14                         CMP #20
0CC5D B0 13                         BCS +tempIsTwo
0CC5F                               
0CC5F C9 0A                         CMP #10
0CC61 B0 05                         BCS +tempIsOne
0CC63                               
0CC63 A9 00                         LDA #$00
0CC65 4C 79 CC                      JMP +setTemp
0CC68                               
0CC68                           +tempIsOne:
0CC68 38                            SEC
0CC69 E9 0A                         SBC #10
0CC6B 85 01                         STA temp+1
0CC6D A9 01                         LDA #$01
0CC6F 4C 79 CC                      JMP +setTemp
0CC72                               
0CC72                           +tempIsTwo:
0CC72 38                            SEC
0CC73 E9 14                         SBC #20
0CC75 85 01                         STA temp+1
0CC77 A9 02                         LDA #$02
0CC79                           
0CC79                           +setTemp:
0CC79 85 00                         STA temp
0CC7B                               
0CC7B E6 00                         INC temp
0CC7D E6 01                         INC temp+1
0CC7F                               
0CC7F A9 20                         LDA #$20
0CC81 8D 06 20                      STA PPU_ADDR
0CC84 A9 8B                         LDA #$8B
0CC86 8D 06 20                      STA PPU_ADDR
0CC89 A5 00                         LDA temp
0CC8B 8D 07 20                      STA PPU_DATA
0CC8E A5 01                         LDA temp+1
0CC90 8D 07 20                      STA PPU_DATA
0CC93                           
0CC93                           
0CC93                               ;; Draw lives (presumes lives to be capped at 9)
0CC93 A9 20                         LDA #$20
0CC95 8D 06 20                      STA PPU_ADDR
0CC98 A9 92                         LDA #$92
0CC9A 8D 06 20                      STA PPU_ADDR
0CC9D A6 1F                         LDX ball_lives
0CC9F E8                            INX
0CCA0 8E 07 20                      STX PPU_DATA
0CCA3                           
0CCA3                           
0CCA3                               ;; Set and draw bonus
0CCA3 A9 07                         LDA #$07
0CCA5 85 2C                         STA ball_bonus
0CCA7 A9 09                         LDA #$09
0CCA9 85 2D                         STA ball_bonus+1
0CCAB 85 2E                         STA ball_bonus+2
0CCAD                               
0CCAD A9 20                         LDA #$20
0CCAF 8D 06 20                      STA PPU_ADDR
0CCB2 A9 9A                         LDA #$9A
0CCB4 8D 06 20                      STA PPU_ADDR
0CCB7 A2 00                         LDX #$00
0CCB9                               -
0CCB9 B5 2C                             LDA ball_bonus,x
0CCBB 18                                CLC
0CCBC 69 01                             ADC #$01
0CCBE 8D 07 20                          STA PPU_DATA
0CCC1 E8                                INX
0CCC2 E0 03                             CPX #$03
0CCC4 D0 F3                         BNE -
0CCC6                           
0CCC6                           
0CCC6                               ;; Set attribute data to RAM
0CCC6                               
0CCC6                               ;; Byte 0-7 of attribute ram should be #%10100000
0CCC6 A2 00                         LDX #$00
0CCC8 A9 A0                         LDA #$A0
0CCCA                               -
0CCCA 9D A0 04                          STA tile_attributes,x
0CCCD E8                                INX
0CCCE E0 08                             CPX #$08
0CCD0 D0 F8                         BNE -
0CCD2                           
0CCD2                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CCD2                           
0CCD2                           -attributeLoop:
0CCD2                               ;; Reset current attribute value
0CCD2 A9 00                         LDA #$00
0CCD4 85 02                         STA temp+2
0CCD6                           
0CCD6                               ;; Get first metatile in tile ram based on attribute index
0CCD6                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CCD6 8A                            TXA
0CCD7                           
0CCD7 38                            SEC
0CCD8 E9 08                         SBC #$08
0CCDA 85 01                         STA temp+1      ; attr - 8 (temp1)
0CCDC 0A                            ASL             ; * 2
0CCDD 85 00                         STA temp        ; temp = temp1 * 2
0CCDF                           
0CCDF A5 01                         LDA temp+1      ; temp1
0CCE1 29 F8                         AND #%11111000  ; rounded down to 8's
0CCE3 0A                            ASL             ; * 2
0CCE4 18                            CLC
0CCE5 65 00                         ADC temp        ; + temp1 * 2
0CCE7 85 00                         STA temp        ; first metatile
0CCE9                           
0CCE9                               ;; Store first metatile in y-register
0CCE9 A8                            TAY
0CCEA                           
0CCEA                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CCEA 8A                            TXA
0CCEB 29 07                         AND #%00000111
0CCED C9 07                         CMP #%00000111
0CCEF F0 0B                         BEQ +
0CCF1                           
0CCF1                               ;; If X >= $30, don't apply bottom right metatile
0CCF1 E0 30                         CPX #$30
0CCF3 B0 07                         BCS +
0CCF5                               
0CCF5                               ;; Add metatile1 subpalette to attribute value
0CCF5 B9 00 04                      LDA tile_type,y
0CCF8 29 0C                         AND #%00001100
0CCFA 85 02                         STA temp+2
0CCFC                               +
0CCFC                           
0CCFC                           
0CCFC                               ;; Apply second metatile
0CCFC 88                            DEY
0CCFD                           
0CCFD                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CCFD 8A                            TXA
0CCFE 29 07                         AND #%00000111
0CD00 F0 10                         BEQ +
0CD02                           
0CD02                               ;; If X >= $30, don't apply bottom left metatile
0CD02 E0 30                         CPX #$30
0CD04 B0 0C                         BCS +
0CD06                           
0CD06                           
0CD06                           
0CD06                               ;; Add metatile2 subpalette to attribute value
0CD06 B9 00 04                      LDA tile_type,y
0CD09 29 0C                         AND #%00001100
0CD0B 4A                            LSR
0CD0C 4A                            LSR
0CD0D 05 02                         ORA temp+2
0CD0F 4C 14 CD                      JMP ++
0CD12                               +
0CD12 A5 02                         LDA temp+2
0CD14                               ++
0CD14 0A                            ASL
0CD15 0A                            ASL
0CD16 85 02                         STA temp+2
0CD18                           
0CD18                           
0CD18                               ;; Apply third metatile
0CD18 98                            TYA
0CD19 38                            SEC
0CD1A E9 0F                         SBC #$0F
0CD1C A8                            TAY
0CD1D                           
0CD1D                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD1D 8A                            TXA
0CD1E 29 07                         AND #%00000111
0CD20 C9 07                         CMP #%00000111
0CD22 F0 11                         BEQ +
0CD24                           
0CD24                               ;; If X < $10, don't apply top right metatile
0CD24 8A                            TXA
0CD25 29 F0                         AND #%11110000
0CD27 F0 0C                         BEQ +
0CD29                           
0CD29                               ;; Add metatile3 subpalette to attribute value
0CD29 B9 00 04                      LDA tile_type,y
0CD2C 29 0C                         AND #%00001100
0CD2E 4A                            LSR
0CD2F 4A                            LSR
0CD30 05 02                         ORA temp+2
0CD32 4C 37 CD                      JMP ++
0CD35                               +
0CD35 A5 02                         LDA temp+2
0CD37                               ++
0CD37 0A                            ASL
0CD38 0A                            ASL
0CD39 85 02                         STA temp+2
0CD3B                           
0CD3B                           
0CD3B                               ;; Apply fourth metatile
0CD3B 88                            DEY
0CD3C                           
0CD3C                               ;; If X MOD 8 == 0, don't apply top left metatile
0CD3C 8A                            TXA
0CD3D 29 07                         AND #%00000111
0CD3F F0 11                         BEQ +
0CD41                           
0CD41                               ;; If X < $10, don't apply top left metatile
0CD41 8A                            TXA
0CD42 29 F0                         AND #%11110000
0CD44 F0 0C                         BEQ +
0CD46                           
0CD46                               ;; Add metatile4 subpalette to attribute value
0CD46 B9 00 04                      LDA tile_type,y
0CD49 29 0C                         AND #%00001100
0CD4B 4A                            LSR
0CD4C 4A                            LSR
0CD4D 05 02                         ORA temp+2
0CD4F 4C 54 CD                      JMP ++
0CD52                               +
0CD52 A5 02                         LDA temp+2
0CD54                               ++
0CD54 9D A0 04                      STA tile_attributes,x
0CD57                           
0CD57                               ;; Check the next attribute, if any left
0CD57 E8                            INX
0CD58 E0 38                         CPX #$38
0CD5A F0 03                         BEQ +
0CD5C 4C D2 CC                          JMP -attributeLoop
0CD5F                               +
0CD5F                           
0CD5F                               ;; Stream attribute RAM to PPU
0CD5F 2C 02 20                      BIT PPU_STATUS
0CD62 A9 23                         LDA #$23
0CD64 8D 06 20                      STA PPU_ADDR
0CD67 A9 C0                         LDA #$C0
0CD69 8D 06 20                      STA PPU_ADDR
0CD6C A2 00                         LDX #$00
0CD6E                               -
0CD6E BD A0 04                          LDA tile_attributes,x
0CD71 8D 07 20                          STA PPU_DATA
0CD74 E8                                INX
0CD75 E0 40                             CPX #$40
0CD77 D0 F5                         BNE -
0CD79                           
0CD79                               ;; Set initial ball position
0CD79 A6 41                         LDX current_level
0CD7B BD 77 D8                      LDA tbl_lvl_ball_startpos,x
0CD7E 29 F0                         AND #%11110000
0CD80 18                            CLC
0CD81 69 34                         ADC #$34
0CD83 85 19                         STA ball_ypos_hi
0CD85 BD 77 D8                      LDA tbl_lvl_ball_startpos,x
0CD88 0A                            ASL
0CD89 0A                            ASL
0CD8A 0A                            ASL
0CD8B 0A                            ASL
0CD8C 18                            CLC
0CD8D 69 14                         ADC #$14
0CD8F 85 17                         STA ball_xpos_hi
0CD91 A9 00                         LDA #$00
0CD93 85 18                         STA ball_xpos_lo
0CD95 85 1A                         STA ball_ypos_lo
0CD97                               
0CD97                               ;; Set initial ball color and direction
0CD97 BD 90 D8                      LDA tbl_lvl_ball_init,x
0CD9A 29 F0                         AND #%11110000
0CD9C 85 37                         STA ball_flags
0CD9E 20 9D C6                      JSR sub_ColorizeBall
0CDA1                               
0CDA1                               ;; Reset bonus timer
0CDA1 A9 08                         LDA #BONUS_FRAMES
0CDA3 85 3F                         STA bonus_timer
0CDA5                               
0CDA5                               ;; Play background noise
0CDA5 A9 08                         LDA #$08
0CDA7 8D 15 40                      STA APU_STATUS
0CDAA 8D 0F 40                      STA NOISE_LENGTH
0CDAD A9 0E                         LDA #$0E
0CDAF 85 46                         STA current_noise
0CDB1 A9 00                         LDA #$00
0CDB3 85 44                         STA max_noise
0CDB5 85 47                         STA noise_timer
0CDB7 85 45                         STA sweep_noise
0CDB9 20 C9 C5                      JSR sub_BackgroundNoise
0CDBC                           
0CDBC                               ;; Return
0CDBC 60                            RTS
0CDBD                           
0CDBD                           
0CDBD                           ;; Subroutine: draw 28 tiles in a row
0CDBD                           sub_Draw28HorizontalTiles:
0CDBD A2 1C                         LDX #28
0CDBF                               -
0CDBF 8D 07 20                          STA PPU_DATA
0CDC2 CA                                DEX
0CDC3 D0 FA                         BNE -
0CDC5 60                            RTS0CDC6                           .include "game/subroutine/LoadIntroScreen.asm"
0CDC6                           sub_LoadIntroScreen:
0CDC6                           
0CDC6                               ;; Load intro palette
0CDC6 2C 02 20                      BIT PPU_STATUS
0CDC9 A9 3F                         LDA #$3F
0CDCB 8D 06 20                      STA PPU_ADDR
0CDCE A9 00                         LDA #$00
0CDD0 8D 06 20                      STA PPU_ADDR
0CDD3 A2 00                         LDX #$00
0CDD5                               -
0CDD5 BD 1C D0                          LDA tbl_IntroScreenPalette,x
0CDD8 8D 07 20                          STA PPU_DATA
0CDDB E8                                INX
0CDDC E0 20                             CPX #$20
0CDDE D0 F5                         BNE -
0CDE0                               
0CDE0                               ;; Put ball in the middle
0CDE0 A9 7C                         LDA #$7C
0CDE2 85 17                         STA ball_xpos_hi
0CDE4 85 19                         STA ball_ypos_hi
0CDE6                           
0CDE6                               ;; Clear the screen
0CDE6 20 32 C6                      JSR sub_ClearScreen
0CDE9                           
0CDE9                               ;; Set up intro screen draw loop
0CDE9 A2 00                         LDX #$00
0CDEB                           
0CDEB                           -loop_IntroScreenData:
0CDEB                           
0CDEB                               ;; Get current byte from intro screen data
0CDEB BD 44 D0                      LDA tbl_IntroScreenData,x
0CDEE                           
0CDEE                               ;; If current byte is #$3F, we're done drawing.
0CDEE C9 3F                         CMP #$3F
0CDF0 D0 03                         BNE +
0CDF2 4C 3F CE                          JMP +goToEndIntroScreen
0CDF5                               +
0CDF5                           
0CDF5                               ;; If highest bits are %11, draw a plain tile
0CDF5 29 C0                         AND #%11000000
0CDF7 D0 03                         BNE +
0CDF9 4C 1F CE                          JMP +drawTile
0CDFC                               +
0CDFC                               
0CDFC                               ;; If highest bits are %01, set the PPU address
0CDFC                               ;; If not, draw two logo tiles
0CDFC C9 40                         CMP #%01000000
0CDFE D0 03                         BNE +drawLogo
0CE00 4C 29 CE                          JMP +setPpuAddr
0CE03                           
0CE03                           +drawLogo:
0CE03                               ;; Get bits 0-2 and store in a temp variable
0CE03 BD 44 D0                      LDA tbl_IntroScreenData,x
0CE06 29 07                         AND #%00000111
0CE08 85 00                         STA temp
0CE0A                               
0CE0A                               ;; Get bits 3-5, shift over to get a value from 0-7
0CE0A BD 44 D0                      LDA tbl_IntroScreenData,x
0CE0D 4A                            LSR
0CE0E 4A                            LSR
0CE0F 4A                            LSR
0CE10 29 07                         AND #%00000111
0CE12                               
0CE12                               ;; Draw the tile that corresponds with that value
0CE12 A8                            TAY
0CE13 20 15 C7                      JSR sub_drawIntroScreenLogoTile
0CE16                               
0CE16                               ;; Do the same for the value stored in temp
0CE16 A4 00                         LDY temp
0CE18 20 15 C7                      JSR sub_drawIntroScreenLogoTile
0CE1B                           
0CE1B                               ;; Next byte please
0CE1B E8                            INX
0CE1C 4C EB CD                      JMP -loop_IntroScreenData
0CE1F                           
0CE1F                           +drawTile:
0CE1F                               ;; Just draw the tile value on screen
0CE1F BD 44 D0                      LDA tbl_IntroScreenData,x
0CE22 8D 07 20                      STA PPU_DATA
0CE25                               
0CE25                               ;; Next byte please
0CE25 E8                            INX
0CE26 4C EB CD                      JMP -loop_IntroScreenData
0CE29                           
0CE29                           
0CE29                           +setPpuAddr:
0CE29                               ;; Reset the PPU latch
0CE29 2C 02 20                      BIT PPU_STATUS
0CE2C                               
0CE2C                               ;; Sanitize and write the high byte of the PPU address
0CE2C BD 44 D0                      LDA tbl_IntroScreenData,x
0CE2F 29 3F                         AND #%00111111
0CE31 8D 06 20                      STA PPU_ADDR
0CE34                           
0CE34                               ;; Write the low byte of the PPU address
0CE34 E8                            INX
0CE35 BD 44 D0                      LDA tbl_IntroScreenData,x
0CE38 8D 06 20                      STA PPU_ADDR
0CE3B                               
0CE3B                               ;; PPU has been set up to draw tiles at the correct spot now.
0CE3B                               
0CE3B                               ;; Next byte please.
0CE3B E8                            INX
0CE3C 4C EB CD                      JMP -loop_IntroScreenData
0CE3F                           
0CE3F                           +goToEndIntroScreen:
0CE3F                           
0CE3F                               ;; To color the 1.LEVEL: line green, we need to update two
0CE3F                               ;; values in the PPU attribute data.
0CE3F 2C 02 20                      BIT PPU_STATUS
0CE42 A9 23                         LDA #$23
0CE44 8D 06 20                      STA PPU_ADDR
0CE47 A9 CB                         LDA #$CB
0CE49 8D 06 20                      STA PPU_ADDR
0CE4C A9 0A                         LDA #%00001010
0CE4E 8D 07 20                      STA PPU_DATA
0CE51 8D 07 20                      STA PPU_DATA
0CE54                           
0CE54 60                            RTS
0CE55                           
0CE55                           .include "game/subroutine/LoadWinScreen.asm"
0CE55                           sub_LoadWinScreen:
0CE55 60                            RTS
0CE56                           
0CE56                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CE56                           sub_RemoveBlockFromScreen:
0CE56                           
0CE56                               ;; Get current buffer location
0CE56 A4 3A                         LDY ppu_buffer_pointer
0CE58                               
0CE58                               ;; TILE 1: if metatile on top left is solid, draw
0CE58                               ;; null tile, else draw random noise tile
0CE58 A9 00                         LDA #$00
0CE5A 85 39                         STA ppu_buffer_update
0CE5C                               
0CE5C A5 00                         LDA temp
0CE5E 99 00 03                      STA ppu_buffer,y
0CE61 C8                            INY
0CE62 A5 01                         LDA temp+1
0CE64 99 00 03                      STA ppu_buffer,y
0CE67 C8                            INY
0CE68                               
0CE68 8A                            TXA
0CE69 29 0F                         AND #%00001111
0CE6B F0 11                         BEQ +drawRandomTile
0CE6D                           
0CE6D 8A                            TXA
0CE6E 29 F0                         AND #%11110000
0CE70 F0 0C                         BEQ +drawRandomTile
0CE72                           
0CE72 BD EF 03                      LDA tile_type-17,x
0CE75 29 01                         AND #%00000001
0CE77 F0 05                         BEQ +drawRandomTile  
0CE79                           
0CE79                               ;; Draw a null tile
0CE79 A9 00                         LDA #$00
0CE7B 4C 86 CE                      JMP +addToPPUBuffer
0CE7E                               
0CE7E                           +drawRandomTile:
0CE7E                               ;; Draw a random tile
0CE7E 20 39 C5                      JSR sub_GetRandomNumber
0CE81 29 07                         AND #%00000111
0CE83 18                            CLC
0CE84 69 68                         ADC #$68
0CE86                               
0CE86                               ;; Add tile to ppu buffer
0CE86                           +addToPPUBuffer:
0CE86 99 00 03                      STA ppu_buffer,y
0CE89 C8                            INY
0CE8A                           
0CE8A                               ;; TILE 2: If metatile above is solid, draw null,
0CE8A                               ;; else draw random noise.
0CE8A E6 01                         INC temp+1
0CE8C A5 00                         LDA temp
0CE8E 99 00 03                      STA ppu_buffer,y
0CE91 C8                            INY
0CE92 A5 01                         LDA temp+1
0CE94 99 00 03                      STA ppu_buffer,y
0CE97 C8                            INY
0CE98                               
0CE98 8A                            TXA
0CE99 29 F0                         AND #%11110000
0CE9B F0 0C                         BEQ +drawRandomTile
0CE9D                               
0CE9D BD F0 03                      LDA tile_type-16,x
0CEA0 29 01                         AND #%00000001
0CEA2 F0 05                         BEQ +drawRandomTile
0CEA4                               
0CEA4 A9 00                         LDA #%00
0CEA6 4C B1 CE                      JMP +addToPPUBuffer
0CEA9                           
0CEA9                           +drawRandomTile:
0CEA9 20 39 C5                      JSR sub_GetRandomNumber
0CEAC 29 07                         AND #%00000111
0CEAE 18                            CLC
0CEAF 69 68                         ADC #$68
0CEB1                           
0CEB1                           +addToPPUBuffer:
0CEB1 99 00 03                      STA ppu_buffer,y
0CEB4 C8                            INY
0CEB5                               
0CEB5                               ;; TILE 3 - If metatile left is solid, draw null,
0CEB5                               ;; else draw random noise.
0CEB5 A5 01                         LDA temp+1
0CEB7 18                            CLC
0CEB8 69 1F                         ADC #$1F
0CEBA 85 01                         STA temp+1
0CEBC A5 00                         LDA temp
0CEBE 69 00                         ADC #$00
0CEC0 85 00                         STA temp
0CEC2 99 00 03                      STA ppu_buffer,y
0CEC5 C8                            INY
0CEC6 A5 01                         LDA temp+1
0CEC8 99 00 03                      STA ppu_buffer,y
0CECB C8                            INY
0CECC                               
0CECC 8A                            TXA
0CECD 29 0F                         AND #%00001111
0CECF F0 0C                         BEQ +drawRandomTile
0CED1                               
0CED1 BD FF 03                      LDA tile_type-1,x
0CED4 29 01                         AND #%00000001
0CED6 F0 05                         BEQ +drawRandomTile
0CED8                               
0CED8 A9 00                         LDA #%00
0CEDA 4C E5 CE                      JMP +addToPPUBuffer
0CEDD                           
0CEDD                           +drawRandomTile:
0CEDD 20 39 C5                      JSR sub_GetRandomNumber
0CEE0 29 07                         AND #%00000111
0CEE2 18                            CLC
0CEE3 69 68                         ADC #$68
0CEE5                               
0CEE5                           +addToPPUBuffer:
0CEE5 99 00 03                      STA ppu_buffer,y
0CEE8 C8                            INY
0CEE9                               
0CEE9                               ;; TILE 4 - Always random noise
0CEE9 E6 01                         INC temp+1
0CEEB A5 00                         LDA temp
0CEED 99 00 03                      STA ppu_buffer,y
0CEF0 C8                            INY
0CEF1 A5 01                         LDA temp+1
0CEF3 99 00 03                      STA ppu_buffer,y
0CEF6 C8                            INY
0CEF7 20 39 C5                      JSR sub_GetRandomNumber
0CEFA 29 07                         AND #%00000111
0CEFC 18                            CLC
0CEFD 69 68                         ADC #$68
0CEFF 99 00 03                      STA ppu_buffer,y
0CF02 C8                            INY
0CF03                           
0CF03                               ;; TILE 5 - If tile on the right is solid, skip,
0CF03                               ;; else draw random noise tile
0CF03 E6 01                         INC temp+1
0CF05                               
0CF05 8A                            TXA
0CF06 29 0F                         AND #%00001111
0CF08 C9 0D                         CMP #$0D
0CF0A F0 1F                         BEQ +skipTile
0CF0C                               
0CF0C BD 01 04                      LDA tile_type+1,x
0CF0F 29 01                         AND #%00000001
0CF11 D0 18                         BNE +skipTile
0CF13 A5 00                             LDA temp
0CF15 99 00 03                          STA ppu_buffer,y
0CF18 C8                                INY
0CF19 A5 01                             LDA temp+1
0CF1B 99 00 03                          STA ppu_buffer,y
0CF1E C8                                INY
0CF1F 20 39 C5                          JSR sub_GetRandomNumber
0CF22 29 07                             AND #%00000111
0CF24 18                                CLC
0CF25 69 68                             ADC #$68
0CF27 99 00 03                          STA ppu_buffer,y
0CF2A C8                                INY    
0CF2B                               +skipTile:
0CF2B                           
0CF2B                               ;; TILE 6 - If tile on bottom is solid, skip,
0CF2B                               ;; else draw random noise
0CF2B A5 01                         LDA temp+1
0CF2D 18                            CLC
0CF2E 69 1F                         ADC #$1F
0CF30 85 01                         STA temp+1
0CF32 A5 00                         LDA temp
0CF34 69 00                         ADC #$00
0CF36 85 00                         STA temp
0CF38                           
0CF38 8A                            TXA
0CF39 29 F0                         AND #%11110000
0CF3B C9 90                         CMP #$90
0CF3D F0 1F                         BEQ +skipTile
0CF3F                           
0CF3F BD 10 04                      LDA tile_type+16,x
0CF42 29 01                         AND #%00000001
0CF44 D0 18                         BNE +skipTile
0CF46 A5 00                             LDA temp
0CF48 99 00 03                          STA ppu_buffer,y
0CF4B C8                                INY
0CF4C A5 01                             LDA temp+1
0CF4E 99 00 03                          STA ppu_buffer,y
0CF51 C8                                INY
0CF52 20 39 C5                          JSR sub_GetRandomNumber
0CF55 29 07                             AND #%00000111
0CF57 18                                CLC
0CF58 69 68                             ADC #$68
0CF5A 99 00 03                          STA ppu_buffer,y
0CF5D C8                                INY    
0CF5E                               +skipTile:
0CF5E                               
0CF5E                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CF5E                               ;; else draw random noise
0CF5E E6 01                         INC temp+1
0CF60                           
0CF60 8A                            TXA
0CF61 29 F0                         AND #%11110000
0CF63 C9 90                         CMP #$90
0CF65 F0 26                         BEQ +skipTile
0CF67                               
0CF67 8A                            TXA
0CF68 29 0F                         AND #%00001111
0CF6A C9 0D                         CMP #$0D
0CF6C F0 1F                         BEQ +skipTile
0CF6E                               
0CF6E BD 11 04                      LDA tile_type+17,x
0CF71 29 01                         AND #%00000001
0CF73 D0 18                         BNE +skipTile
0CF75 A5 00                             LDA temp
0CF77 99 00 03                          STA ppu_buffer,y
0CF7A C8                                INY
0CF7B A5 01                             LDA temp+1
0CF7D 99 00 03                          STA ppu_buffer,y
0CF80 C8                                INY
0CF81 20 39 C5                          JSR sub_GetRandomNumber
0CF84 29 07                             AND #%00000111
0CF86 18                                CLC
0CF87 69 68                             ADC #$68
0CF89 99 00 03                          STA ppu_buffer,y
0CF8C C8                                INY    
0CF8D                               +skipTile:   
0CF8D                           
0CF8D                           
0CF8D                               ;; Update attribute table accordingly through ppu buffer
0CF8D 20 CC CF                      JSR sub_SetTileAttributeAddress
0CF90                               
0CF90 8A                            TXA
0CF91 29 10                         AND #%00010000
0CF93 F0 05                         BEQ +
0CF95 A9 F0                             LDA #%11110000
0CF97 4C 9C CF                          JMP ++
0CF9A                               +
0CF9A A9 0F                         LDA #%00001111
0CF9C                               ++
0CF9C 85 02                         STA temp+2
0CF9E                               
0CF9E 8A                            TXA
0CF9F 48                            PHA
0CFA0 29 01                         AND #%00000001
0CFA2 F0 07                         BEQ +
0CFA4 A5 02                             LDA temp+2
0CFA6 09 CC                             ORA #%11001100
0CFA8 4C AF CF                          JMP ++
0CFAB                               +
0CFAB A5 02                         LDA temp+2
0CFAD 09 33                         ORA #%00110011
0CFAF                               ++
0CFAF 85 02                         STA temp+2
0CFB1                               
0CFB1 A5 00                         LDA temp
0CFB3 38                            SEC
0CFB4 E9 C0                         SBC #$C0
0CFB6 AA                            TAX
0CFB7 BD A0 04                      LDA tile_attributes,x
0CFBA 25 02                         AND temp+2
0CFBC 9D A0 04                      STA tile_attributes,x
0CFBF 99 00 03                      STA ppu_buffer,y
0CFC2 C8                            INY
0CFC3 68                            PLA
0CFC4 AA                            TAX
0CFC5                           
0CFC5                               ;; Tell PPU to update tiles and attributes next frame
0CFC5 84 3A                         STY ppu_buffer_pointer
0CFC7 A9 01                         LDA #$01
0CFC9 85 39                         STA ppu_buffer_update
0CFCB                            
0CFCB                               ;; We're done - return
0CFCB 60                            RTS0CFCC                           .include "game/subroutine/SetTileAttributeAddress.asm"
0CFCC                           
0CFCC                           sub_SetTileAttributeAddress:
0CFCC A9 23                         LDA #$23
0CFCE 99 00 03                      STA ppu_buffer,y
0CFD1 C8                            INY
0CFD2                               
0CFD2 8A                            TXA
0CFD3 29 F0                         AND #%11110000
0CFD5 4A                            LSR
0CFD6 4A                            LSR
0CFD7 4A                            LSR
0CFD8 4A                            LSR
0CFD9 18                            CLC
0CFDA 69 01                         ADC #1
0CFDC 4A                            LSR
0CFDD 0A                            ASL
0CFDE 0A                            ASL
0CFDF 0A                            ASL
0CFE0 18                            CLC
0CFE1 69 C8                         ADC #$C8
0CFE3 85 00                         STA temp
0CFE5 8A                            TXA
0CFE6 29 0F                         AND #%00001111
0CFE8 18                            CLC
0CFE9 69 01                         ADC #$01
0CFEB 4A                            LSR
0CFEC 18                            CLC
0CFED 65 00                         ADC temp
0CFEF 85 00                         STA temp
0CFF1 99 00 03                      STA ppu_buffer,y
0CFF4 C8                            INY
0CFF5                                  
0CFF5 60                            RTS
0CFF6                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CFF6                           sub_WriteByteToPPUBuffer:
0CFF6                           
0CFF6                               ;; Prevent updating until full 3-byte buffer is filled,
0CFF6                               ;; so that graphics won't glitch out if NMI happens during
0CFF6                               ;; updating the buffer
0CFF6 A9 00                         LDA #$00
0CFF8 85 39                         STA ppu_buffer_update
0CFFA                           
0CFFA                               ;; Check if buffer full; if so, wait a frame and force update
0CFFA A4 3A                         LDY ppu_buffer_pointer
0CFFC C0 60                         CPY #$60
0CFFE D0 05                         BNE +
0D000 E6 39                             INC ppu_buffer_update
0D002 20 64 C5                          JSR sub_WaitForVBlank
0D005                               +
0D005                           
0D005                               ;; Add ppu_addr high byte to buffer
0D005 A5 00                         LDA temp
0D007 99 00 03                      STA ppu_buffer,y
0D00A                           
0D00A                               ;; Add ppu_addr low byte to buffer
0D00A C8                            INY
0D00B A5 01                         LDA temp+1
0D00D 99 00 03                      STA ppu_buffer,y
0D010                           
0D010                               ;; Add ppu_data to buffer
0D010 C8                            INY
0D011 A5 02                         LDA temp+2
0D013 99 00 03                      STA ppu_buffer,y
0D016                           
0D016                               ;; Update buffer pointer
0D016 C8                            INY
0D017 84 3A                         STY ppu_buffer_pointer
0D019                           
0D019                               ;; Tell NMI to update next round
0D019 E6 39                         INC ppu_buffer_update
0D01B                           
0D01B                               ;; Return
0D01B 60                            RTS0D01C                           
0D01C                           ;; LUTs
0D01C                           .include "game/include/tables.asm"
0D01C                           
0D01C                           ;; Initial screen palette
0D01C                           tbl_IntroScreenPalette:
0D01C 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D020 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D024 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D028 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D02C                           
0D02C 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D030 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D034 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D038 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D03C                           
0D03C                           
0D03C                           ;; Intro: mapping logo index to chr tile
0D03C                           tbl_IntroScreenLogoChr:
0D03C 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D044                           
0D044                           
0D044                           ;; Intro screen data
0D044                           tbl_IntroScreenData:
0D044                           
0D044                               ;; Set PPU address $20AC and draw
0D044 60 AC                         .db #$60, #$AC
0D046 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D04E                           
0D04E                               ;; Set PPU address $20CF and draw
0D04E 60 CF                         .db #$60, #$CF
0D050 01 02                         .db #_0, #_1
0D052                               
0D052                               ;; Set PPU address $2122 and draw
0D052 61 22                         .db #$61, #$22
0D054 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D05B 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D061 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D069 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D06E                               
0D06E                               ;; Set PPU address $2147 and draw
0D06E 61 47                         .db #$61, #$47
0D070 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D077 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D07B 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D081 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D087                               
0D087                               ;; Set PPU address $218B and draw
0D087 61 8B                         .db #$61, #$8B
0D089 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D08F 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D094                               
0D094                               ;; Set PPU address $21E6 and draw
0D094 61 E6                         .db #$61, #$E6
0D096 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D09E 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D0A2 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D0A9                               
0D0A9                               ;; Set PPU address $222D and draw
0D0A9 62 2D                         .db #$62, #$2D
0D0AB 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D0B1                               
0D0B1                               ;; Set PPU address $2281
0D0B1 62 81                         .db #$62, #$81
0D0B3                               
0D0B3                               ;; Draw the Crillion logo
0D0B3 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D0B7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0BB C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D0BF E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D0C3                               
0D0C3 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D0C7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0CB C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0CF D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0D3                               
0D0D3 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D0D7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0DB C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0DF D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0E3                           
0D0E3 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D0E7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0EB C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0EF D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0F3                               
0D0F3 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D0F7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0FB C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0FF D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D103                           
0D103 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D107 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D10B C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D10F F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D112                           
0D112                               ;; End of intro
0D112 3F                            .db #$3F
0D113                           
0D113                           
0D113                           ;; Animation frames table
0D113                           .include "game/include/table/animation_frames.asm"
0D113                           ;; CHR tile-id's per slide of explosion
0D113                           explosion_slide0:
0D113 00 00 00                      .db #$00, #$00, #$00
0D116 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D119 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D11C                           
0D11C                           explosion_slide1:
0D11C 00 00 00                      .db #$00, #$00, #$00
0D11F 29 2A 2B                      .db #$29, #$2A, #$2B
0D122 39 3A 3B                      .db #$39, #$3A, #$3B
0D125                           
0D125                           explosion_slide2:
0D125 16 00 00                      .db #$16, #$00, #$00
0D128 26 27 28                      .db #$26, #$27, #$28
0D12B 36 37 38                      .db #$36, #$37, #$38
0D12E                           
0D12E                           explosion_slide3:
0D12E 00 14 15                      .db #$00, #$14, #$15
0D131 23 24 25                      .db #$23, #$24, #$25
0D134 33 34 35                      .db #$33, #$34, #$35
0D137                           
0D137                           explosion_slide4:
0D137 10 11 12                      .db #$10, #$11, #$12
0D13A 20 21 22                      .db #$20, #$21, #$22
0D13D 30 31 32                      .db #$30, #$31, #$32
0D140                           
0D140                           ;; High and low bytes of animation slides
0D140                           explosion_anim_hi:
0D140 D1                            .db >#explosion_slide0
0D141 D1                            .db >#explosion_slide1
0D142 D1                            .db >#explosion_slide2
0D143 D1                            .db >#explosion_slide3
0D144 D1                            .db >#explosion_slide4
0D145 D1                            .db >#explosion_slide4
0D146 D1                            .db >#explosion_slide3
0D147 D1                            .db >#explosion_slide2
0D148 D1                            .db >#explosion_slide1
0D149 D1                            .db >#explosion_slide0
0D14A                           
0D14A                           explosion_anim_lo:
0D14A 13                            .db <#explosion_slide0
0D14B 1C                            .db <#explosion_slide1
0D14C 25                            .db <#explosion_slide2
0D14D 2E                            .db <#explosion_slide3
0D14E 37                            .db <#explosion_slide4
0D14F 37                            .db <#explosion_slide4
0D150 2E                            .db <#explosion_slide3
0D151 25                            .db <#explosion_slide2
0D152 1C                            .db <#explosion_slide1
0D153 13                            .db <#explosion_slide0
0D154                           
0D154                           
0D154                           
0D154                           ;; Ball palette color table (CBRYGM)
0D154                           tbl_BallColorDark:
0D154 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D15A                            
0D15A                           tbl_BallColorLight:
0D15A 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D160                           
0D160                               
0D160                           ;; Screen mode drawing routine addresses
0D160                           tbl_LoadScreenHi:
0D160 CD CA CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D163                           
0D163                           tbl_LoadScreenLo:
0D163 C6 0A 55                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D166                           
0D166                           
0D166                           ;; Level data
0D166                           .include "game/include/table/level_data.asm"
0D166                           lvl_layout_01:
0D166 61 21                         .db #$61, #%00100001
0D168 52 61                         .db #$52, #%01100001
0D16A 43 65                         .db #$43, #%01100101
0D16C 83 05                         .db #$83, #%00000101
0D16E 93 15                         .db #$93, #%00010101
0D170 34 7A                         .db #$34, #%01111010
0D172 74 7A                         .db #$74, #%01111010
0D174 35 7A                         .db #$35, #%01111010
0D176 75 7A                         .db #$75, #%01111010
0D178 46 65                         .db #$46, #%01100101
0D17A 86 25                         .db #$86, #%00100101
0D17C 57 61                         .db #$57, #%01100001
0D17E 68 21                         .db #$68, #%00100001
0D180 FF                            .db #LEVEL_END
0D181                           
0D181                           lvl_layout_02:
0D181 C0 0A                         .db #$C0, #%00001010
0D183 11 15                         .db #$11, #%00010101
0D185 21 62                         .db #$21, #%01100010
0D187 61 62                         .db #$61, #%01100010
0D189 A1 42                         .db #$A1, #%01000010
0D18B 12 67                         .db #$12, #%01100111
0D18D 52 67                         .db #$52, #%01100111
0D18F 92 67                         .db #$92, #%01100111
0D191 C3 0D                         .db #$C3, #%00001101
0D193 14 11                         .db #$14, #%00010001
0D195 24 65                         .db #$24, #%01100101
0D197 64 65                         .db #$64, #%01100101
0D199 A4 45                         .db #$A4, #%01000101
0D19B 15 67                         .db #$15, #%01100111
0D19D 55 67                         .db #$55, #%01100111
0D19F 95 67                         .db #$95, #%01100111
0D1A1 17 12                         .db #$17, #%00010010
0D1A3 27 61                         .db #$27, #%01100001
0D1A5 67 61                         .db #$67, #%01100001
0D1A7 A7 41                         .db #$A7, #%01000001
0D1A9 38 7A                         .db #$38, #%01111010
0D1AB 98 5A                         .db #$98, #%01011010
0D1AD 18 27                         .db #$18, #%00100111
0D1AF 48 27                         .db #$48, #%00100111
0D1B1 78 27                         .db #$78, #%00100111
0D1B3 C8 07                         .db #$C8, #%00000111
0D1B5 FF                            .db #LEVEL_END
0D1B6                           
0D1B6                           lvl_layout_03:
0D1B6 00 7A                         .db #$00, #%01111010
0D1B8 40 7A                         .db #$40, #%01111010
0D1BA 80 7A                         .db #$80, #%01111010
0D1BC C0 1A                         .db #$C0, #%00011010
0D1BE 10 A1                         .db #$10, #%10100001
0D1C0 13 E1                         .db #$13, #%11100001
0D1C2 17 C1                         .db #$17, #%11000001
0D1C4 30 C1                         .db #$30, #%11000001
0D1C6 34 C1                         .db #$34, #%11000001
0D1C8 38 A1                         .db #$38, #%10100001
0D1CA 50 E1                         .db #$50, #%11100001
0D1CC 55 81                         .db #$55, #%10000001
0D1CE 57 C1                         .db #$57, #%11000001
0D1D0 70 C1                         .db #$70, #%11000001
0D1D2 73 A1                         .db #$73, #%10100001
0D1D4 76 E1                         .db #$76, #%11100001
0D1D6 90 E1                         .db #$90, #%11100001
0D1D8 95 81                         .db #$95, #%10000001
0D1DA 97 C1                         .db #$97, #%11000001
0D1DC B0 C1                         .db #$B0, #%11000001
0D1DE B4 C1                         .db #$B4, #%11000001
0D1E0 B8 A1                         .db #$B8, #%10100001
0D1E2 D0 A1                         .db #$D0, #%10100001
0D1E4 D3 E1                         .db #$D3, #%11100001
0D1E6 D7 C1                         .db #$D7, #%11000001
0D1E8 FF                            .db #LEVEL_END
0D1E9                           
0D1E9                           lvl_layout_04:
0D1E9 00 4C                         .db #$00, #%01001100
0D1EB 40 6C                         .db #$40, #%01101100
0D1ED 80 4C                         .db #$80, #%01001100
0D1EF 81 AC                         .db #$81, #%10101100
0D1F1 C1 2C                         .db #$C1, #%00101100
0D1F3 02 6C                         .db #$02, #%01101100
0D1F5 42 CC                         .db #$42, #%11001100
0D1F7 62 EC                         .db #$62, #%11101100
0D1F9 A2 CC                         .db #$A2, #%11001100
0D1FB C3 CC                         .db #$C3, #%11001100
0D1FD 04 4C                         .db #$04, #%01001100
0D1FF 84 2C                         .db #$84, #%00101100
0D201 25 AC                         .db #$25, #%10101100
0D203 85 AC                         .db #$85, #%10101100
0D205 06 AC                         .db #$06, #%10101100
0D207 36 CC                         .db #$36, #%11001100
0D209 56 CC                         .db #$56, #%11001100
0D20B 66 EC                         .db #$66, #%11101100
0D20D 96 6C                         .db #$96, #%01101100
0D20F C7 AC                         .db #$C7, #%10101100
0D211 08 2C                         .db #$08, #%00101100
0D213 78 6C                         .db #$78, #%01101100
0D215 D8 0C                         .db #$D8, #%00001100
0D217 30 A1                         .db #$30, #%10100001
0D219 B0 21                         .db #$B0, #%00100001
0D21B 01 41                         .db #$01, #%01000001
0D21D 41 61                         .db #$41, #%01100001
0D21F 91 A1                         .db #$91, #%10100001
0D221 A1 21                         .db #$A1, #%00100001
0D223 52 C1                         .db #$52, #%11000001
0D225 72 E1                         .db #$72, #%11100001
0D227 B2 C1                         .db #$B2, #%11000001
0D229 C2 21                         .db #$C2, #%00100001
0D22B 03 41                         .db #$03, #%01000001
0D22D 33 C1                         .db #$33, #%11000001
0D22F 83 21                         .db #$83, #%00100001
0D231 D3 E1                         .db #$D3, #%11100001
0D233 05 21                         .db #$05, #%00100001
0D235 45 E1                         .db #$45, #%11100001
0D237 A5 21                         .db #$A5, #%00100001
0D239 16 A1                         .db #$16, #%10100001
0D23B 76 A1                         .db #$76, #%10100001
0D23D 27 A1                         .db #$27, #%10100001
0D23F 57 21                         .db #$57, #%00100001
0D241 87 41                         .db #$87, #%01000001
0D243 B7 A1                         .db #$B7, #%10100001
0D245 19 21                         .db #$19, #%00100001
0D247 39 41                         .db #$39, #%01000001
0D249 89 41                         .db #$89, #%01000001
0D24B C9 21                         .db #$C9, #%00100001
0D24D D0 1A                         .db #$D0, #%00011010
0D24F 55 1A                         .db #$55, #%00011010
0D251 95 1A                         .db #$95, #%00011010
0D253 D7 1A                         .db #$D7, #%00011010
0D255 09 1A                         .db #$09, #%00011010
0D257 79 1A                         .db #$79, #%00011010
0D259 FF                            .db #LEVEL_END
0D25A                           
0D25A                           lvl_layout_05:
0D25A 40 0A                         .db #$40, #%00001010
0D25C 70 1A                         .db #$70, #%00011010
0D25E B0 42                         .db #$B0, #%01000010
0D260 41 A7                         .db #$41, #%10100111
0D262 B1 22                         .db #$B1, #%00100010
0D264 D1 15                         .db #$D1, #%00010101
0D266 22 0A                         .db #$22, #%00001010
0D268 52 05                         .db #$52, #%00000101
0D26A B2 42                         .db #$B2, #%01000010
0D26C 03 27                         .db #$03, #%00100111
0D26E 33 67                         .db #$33, #%01100111
0D270 73 67                         .db #$73, #%01100111
0D272 B3 47                         .db #$B3, #%01000111
0D274 05 E5                         .db #$05, #%11100101
0D276 25 A5                         .db #$25, #%10100101
0D278 35 25                         .db #$35, #%00100101
0D27A 65 45                         .db #$65, #%01000101
0D27C A5 45                         .db #$A5, #%01000101
0D27E 46 E5                         .db #$46, #%11100101
0D280 66 E5                         .db #$66, #%11100101
0D282 86 E5                         .db #$86, #%11100101
0D284 A6 E2                         .db #$A6, #%11100010
0D286 C6 E5                         .db #$C6, #%11100101
0D288 27 25                         .db #$27, #%00100101
0D28A 77 05                         .db #$77, #%00000101
0D28C B7 02                         .db #$B7, #%00000010
0D28E 09 05                         .db #$09, #%00000101
0D290 79 05                         .db #$79, #%00000101
0D292 B9 02                         .db #$B9, #%00000010
0D294 FF                            .db #LEVEL_END
0D295                           
0D295                           lvl_layout_06:
0D295 00 03                         .db #$00, #%00000011
0D297 20 03                         .db #$20, #%00000011
0D299 40 03                         .db #$40, #%00000011
0D29B A0 03                         .db #$A0, #%00000011
0D29D C0 03                         .db #$C0, #%00000011
0D29F 11 03                         .db #$11, #%00000011
0D2A1 31 03                         .db #$31, #%00000011
0D2A3 51 03                         .db #$51, #%00000011
0D2A5 91 03                         .db #$91, #%00000011
0D2A7 B1 03                         .db #$B1, #%00000011
0D2A9 D1 03                         .db #$D1, #%00000011
0D2AB 02 03                         .db #$02, #%00000011
0D2AD 22 03                         .db #$22, #%00000011
0D2AF 42 03                         .db #$42, #%00000011
0D2B1 A2 03                         .db #$A2, #%00000011
0D2B3 C2 03                         .db #$C2, #%00000011
0D2B5 13 03                         .db #$13, #%00000011
0D2B7 33 03                         .db #$33, #%00000011
0D2B9 53 03                         .db #$53, #%00000011
0D2BB 93 03                         .db #$93, #%00000011
0D2BD B3 03                         .db #$B3, #%00000011
0D2BF D3 03                         .db #$D3, #%00000011
0D2C1 04 03                         .db #$04, #%00000011
0D2C3 24 03                         .db #$24, #%00000011
0D2C5 44 03                         .db #$44, #%00000011
0D2C7 A4 03                         .db #$A4, #%00000011
0D2C9 C4 03                         .db #$C4, #%00000011
0D2CB 15 03                         .db #$15, #%00000011
0D2CD 35 03                         .db #$35, #%00000011
0D2CF 55 03                         .db #$55, #%00000011
0D2D1 95 03                         .db #$95, #%00000011
0D2D3 B5 03                         .db #$B5, #%00000011
0D2D5 D5 03                         .db #$D5, #%00000011
0D2D7 06 03                         .db #$06, #%00000011
0D2D9 26 03                         .db #$26, #%00000011
0D2DB 46 03                         .db #$46, #%00000011
0D2DD A6 03                         .db #$A6, #%00000011
0D2DF C6 03                         .db #$C6, #%00000011
0D2E1 17 03                         .db #$17, #%00000011
0D2E3 37 03                         .db #$37, #%00000011
0D2E5 57 03                         .db #$57, #%00000011
0D2E7 97 03                         .db #$97, #%00000011
0D2E9 B7 03                         .db #$B7, #%00000011
0D2EB D7 03                         .db #$D7, #%00000011
0D2ED 08 03                         .db #$08, #%00000011
0D2EF 28 03                         .db #$28, #%00000011
0D2F1 48 03                         .db #$48, #%00000011
0D2F3 A8 03                         .db #$A8, #%00000011
0D2F5 C8 03                         .db #$C8, #%00000011
0D2F7 19 03                         .db #$19, #%00000011
0D2F9 39 03                         .db #$39, #%00000011
0D2FB 59 03                         .db #$59, #%00000011
0D2FD 99 03                         .db #$99, #%00000011
0D2FF B9 03                         .db #$B9, #%00000011
0D301 D9 03                         .db #$D9, #%00000011
0D303 60 4B                         .db #$60, #%01001011
0D305 71 CB                         .db #$71, #%11001011
0D307 62 4B                         .db #$62, #%01001011
0D309 64 4B                         .db #$64, #%01001011
0D30B 75 CB                         .db #$75, #%11001011
0D30D 66 4B                         .db #$66, #%01001011
0D30F 68 4B                         .db #$68, #%01001011
0D311 79 0B                         .db #$79, #%00001011
0D313 70 03                         .db #$70, #%00000011
0D315 72 03                         .db #$72, #%00000011
0D317 74 03                         .db #$74, #%00000011
0D319 76 03                         .db #$76, #%00000011
0D31B 78 03                         .db #$78, #%00000011
0D31D FF                            .db #LEVEL_END
0D31E                           
0D31E                           lvl_layout_07:
0D31E 00 11                         .db #$00, #%00010001
0D320 01 FA                         .db #$01, #%11111010
0D322 12 BA                         .db #$12, #%10111010
0D324 23 DA                         .db #$23, #%11011010
0D326 34 FA                         .db #$34, #%11111010
0D328 05 DA                         .db #$05, #%11011010
0D32A 15 FA                         .db #$15, #%11111010
0D32C 45 BA                         .db #$45, #%10111010
0D32E 56 DA                         .db #$56, #%11011010
0D330 27 BA                         .db #$27, #%10111010
0D332 67 DA                         .db #$67, #%11011010
0D334 38 3A                         .db #$38, #%00111010
0D336 78 BA                         .db #$78, #%10111010
0D338 09 3A                         .db #$09, #%00111010
0D33A 39 3A                         .db #$39, #%00111010
0D33C 89 1A                         .db #$89, #%00011010
0D33E B0 01                         .db #$B0, #%00000001
0D340 D0 01                         .db #$D0, #%00000001
0D342 A1 01                         .db #$A1, #%00000001
0D344 C1 11                         .db #$C1, #%00010001
0D346 B2 01                         .db #$B2, #%00000001
0D348 D2 01                         .db #$D2, #%00000001
0D34A A3 01                         .db #$A3, #%00000001
0D34C C3 01                         .db #$C3, #%00000001
0D34E B4 01                         .db #$B4, #%00000001
0D350 D4 01                         .db #$D4, #%00000001
0D352 A5 01                         .db #$A5, #%00000001
0D354 C5 01                         .db #$C5, #%00000001
0D356 B6 01                         .db #$B6, #%00000001
0D358 D6 01                         .db #$D6, #%00000001
0D35A A7 01                         .db #$A7, #%00000001
0D35C C7 01                         .db #$C7, #%00000001
0D35E FF                            .db #LEVEL_END
0D35F                           
0D35F                           lvl_layout_08:
0D35F 40 B5                         .db #$40, #%10110101
0D361 31 0D                         .db #$31, #%00001101
0D363 61 10                         .db #$61, #%00010000
0D365 42 C7                         .db #$42, #%11000111
0D367 52 67                         .db #$52, #%01100111
0D369 63 C7                         .db #$63, #%11000111
0D36B 83 E7                         .db #$83, #%11100111
0D36D 05 07                         .db #$05, #%00000111
0D36F 15 3A                         .db #$15, #%00111010
0D371 07 63                         .db #$07, #%01100011
0D373 27 13                         .db #$27, #%00010011
0D375 38 A5                         .db #$38, #%10100101
0D377 09 14                         .db #$09, #%00010100
0D379 19 05                         .db #$19, #%00000101
0D37B D0 E0                         .db #$D0, #%11100000
0D37D C2 A0                         .db #$C2, #%10100000
0D37F B3 E0                         .db #$B3, #%11100000
0D381 D5 E0                         .db #$D5, #%11100000
0D383 C6 E0                         .db #$C6, #%11100000
0D385 B0 C4                         .db #$B0, #%11000100
0D387 C0 A4                         .db #$C0, #%10100100
0D389 D1 A4                         .db #$D1, #%10100100
0D38B C4 24                         .db #$C4, #%00100100
0D38D C5 04                         .db #$C5, #%00000100
0D38F B7 44                         .db #$B7, #%01000100
0D391 B8 A4                         .db #$B8, #%10100100
0D393 D9 05                         .db #$D9, #%00000101
0D395 FF                            .db #LEVEL_END
0D396                           
0D396                           lvl_layout_09:
0D396 81 04                         .db #$81, #%00000100
0D398 D1 04                         .db #$D1, #%00000100
0D39A 32 C4                         .db #$32, #%11000100
0D39C A2 C4                         .db #$A2, #%11000100
0D39E C2 24                         .db #$C2, #%00100100
0D3A0 13 24                         .db #$13, #%00100100
0D3A2 53 04                         .db #$53, #%00000100
0D3A4 C3 27                         .db #$C3, #%00100111
0D3A6 15 6C                         .db #$15, #%01101100
0D3A8 55 6C                         .db #$55, #%01101100
0D3AA 95 6C                         .db #$95, #%01101100
0D3AC D5 0C                         .db #$D5, #%00001100
0D3AE 27 C7                         .db #$27, #%11000111
0D3B0 47 C7                         .db #$47, #%11000111
0D3B2 67 C7                         .db #$67, #%11000111
0D3B4 87 C7                         .db #$87, #%11000111
0D3B6 A7 C7                         .db #$A7, #%11000111
0D3B8 C7 C7                         .db #$C7, #%11000111
0D3BA 08 13                         .db #$08, #%00010011
0D3BC 28 15                         .db #$28, #%00010101
0D3BE 48 12                         .db #$48, #%00010010
0D3C0 68 15                         .db #$68, #%00010101
0D3C2 88 11                         .db #$88, #%00010001
0D3C4 A8 10                         .db #$A8, #%00010000
0D3C6 C8 14                         .db #$C8, #%00010100
0D3C8 09 07                         .db #$09, #%00000111
0D3CA 19 03                         .db #$19, #%00000011
0D3CC 39 05                         .db #$39, #%00000101
0D3CE 59 02                         .db #$59, #%00000010
0D3D0 79 05                         .db #$79, #%00000101
0D3D2 99 01                         .db #$99, #%00000001
0D3D4 B9 00                         .db #$B9, #%00000000
0D3D6 D9 04                         .db #$D9, #%00000100
0D3D8 FF                            .db #LEVEL_END
0D3D9                           
0D3D9                           lvl_layout_10:
0D3D9 00 02                         .db #$00, #%00000010
0D3DB 10 C9                         .db #$10, #%11001001
0D3DD 50 C9                         .db #$50, #%11001001
0D3DF 90 C9                         .db #$90, #%11001001
0D3E1 D0 C9                         .db #$D0, #%11001001
0D3E3 31 C9                         .db #$31, #%11001001
0D3E5 71 C9                         .db #$71, #%11001001
0D3E7 B1 C9                         .db #$B1, #%11001001
0D3E9 13 C9                         .db #$13, #%11001001
0D3EB 53 C9                         .db #$53, #%11001001
0D3ED 93 C9                         .db #$93, #%11001001
0D3EF D3 C9                         .db #$D3, #%11001001
0D3F1 34 C9                         .db #$34, #%11001001
0D3F3 74 C9                         .db #$74, #%11001001
0D3F5 B4 C9                         .db #$B4, #%11001001
0D3F7 16 C9                         .db #$16, #%11001001
0D3F9 56 C9                         .db #$56, #%11001001
0D3FB 96 C9                         .db #$96, #%11001001
0D3FD D6 C9                         .db #$D6, #%11001001
0D3FF 37 C9                         .db #$37, #%11001001
0D401 77 C9                         .db #$77, #%11001001
0D403 B7 C9                         .db #$B7, #%11001001
0D405 D8 12                         .db #$D8, #%00010010
0D407 FF                            .db #LEVEL_END
0D408                           
0D408                           lvl_layout_11:
0D408 00 65                         .db #$00, #%01100101
0D40A 40 45                         .db #$40, #%01000101
0D40C 50 A7                         .db #$50, #%10100111
0D40E 80 05                         .db #$80, #%00000101
0D410 90 A7                         .db #$90, #%10100111
0D412 A0 65                         .db #$A0, #%01100101
0D414 01 43                         .db #$01, #%01000011
0D416 31 23                         .db #$31, #%00100011
0D418 61 A7                         .db #$61, #%10100111
0D41A 81 A7                         .db #$81, #%10100111
0D41C A1 63                         .db #$A1, #%01100011
0D41E 02 44                         .db #$02, #%01000100
0D420 32 44                         .db #$32, #%01000100
0D422 92 04                         .db #$92, #%00000100
0D424 A2 64                         .db #$A2, #%01100100
0D426 03 40                         .db #$03, #%01000000
0D428 33 40                         .db #$33, #%01000000
0D42A 63 A1                         .db #$63, #%10100001
0D42C 83 A2                         .db #$83, #%10100010
0D42E 93 00                         .db #$93, #%00000000
0D430 A3 60                         .db #$A3, #%01100000
0D432 04 41                         .db #$04, #%01000001
0D434 34 41                         .db #$34, #%01000001
0D436 94 02                         .db #$94, #%00000010
0D438 A4 62                         .db #$A4, #%01100010
0D43A 05 47                         .db #$05, #%01000111
0D43C 35 67                         .db #$35, #%01100111
0D43E 75 0A                         .db #$75, #%00001010
0D440 85 47                         .db #$85, #%01000111
0D442 B5 47                         .db #$B5, #%01000111
0D444 06 E7                         .db #$06, #%11100111
0D446 16 5A                         .db #$16, #%01011010
0D448 26 11                         .db #$26, #%00010001
0D44A 46 13                         .db #$46, #%00010011
0D44C 56 1A                         .db #$56, #%00011010
0D44E 66 14                         .db #$66, #%00010100
0D450 86 10                         .db #$86, #%00010000
0D452 96 5A                         .db #$96, #%01011010
0D454 A6 12                         .db #$A6, #%00010010
0D456 C6 15                         .db #$C6, #%00010101
0D458 D6 E7                         .db #$D6, #%11100111
0D45A FF                            .db #LEVEL_END
0D45B                           
0D45B                           lvl_layout_12:
0D45B 00 00                         .db #$00, #%00000000
0D45D 50 C0                         .db #$50, #%11000000
0D45F 80 00                         .db #$80, #%00000000
0D461 61 00                         .db #$61, #%00000000
0D463 22 C0                         .db #$22, #%11000000
0D465 82 E0                         .db #$82, #%11100000
0D467 C2 E0                         .db #$C2, #%11100000
0D469 A3 20                         .db #$A3, #%00100000
0D46B C3 10                         .db #$C3, #%00010000
0D46D 04 00                         .db #$04, #%00000000
0D46F 54 20                         .db #$54, #%00100000
0D471 15 0A                         .db #$15, #%00001010
0D473 25 C0                         .db #$25, #%11000000
0D475 55 E0                         .db #$55, #%11100000
0D477 86 20                         .db #$86, #%00100000
0D479 C6 E0                         .db #$C6, #%11100000
0D47B C7 A0                         .db #$C7, #%10100000
0D47D 88 00                         .db #$88, #%00000000
0D47F 59 00                         .db #$59, #%00000000
0D481 89 20                         .db #$89, #%00100000
0D483 D9 1A                         .db #$D9, #%00011010
0D485 FF                            .db #LEVEL_END
0D486                           
0D486                           lvl_layout_13:
0D486 10 E0                         .db #$10, #%11100000
0D488 20 E0                         .db #$20, #%11100000
0D48A 30 E0                         .db #$30, #%11100000
0D48C 40 40                         .db #$40, #%01000000
0D48E 80 60                         .db #$80, #%01100000
0D490 C0 E0                         .db #$C0, #%11100000
0D492 D0 E0                         .db #$D0, #%11100000
0D494 41 40                         .db #$41, #%01000000
0D496 71 60                         .db #$71, #%01100000
0D498 52 60                         .db #$52, #%01100000
0D49A A2 20                         .db #$A2, #%00100000
0D49C 43 60                         .db #$43, #%01100000
0D49E 83 60                         .db #$83, #%01100000
0D4A0 14 74                         .db #$14, #%01110100
0D4A2 54 74                         .db #$54, #%01110100
0D4A4 94 74                         .db #$94, #%01110100
0D4A6 D4 14                         .db #$D4, #%00010100
0D4A8 15 0D                         .db #$15, #%00001101
0D4AA 55 0D                         .db #$55, #%00001101
0D4AC 95 0D                         .db #$95, #%00001101
0D4AE D5 0D                         .db #$D5, #%00001101
0D4B0 26 0D                         .db #$26, #%00001101
0D4B2 46 0D                         .db #$46, #%00001101
0D4B4 66 0D                         .db #$66, #%00001101
0D4B6 86 0D                         .db #$86, #%00001101
0D4B8 A6 0D                         .db #$A6, #%00001101
0D4BA C6 0D                         .db #$C6, #%00001101
0D4BC 07 10                         .db #$07, #%00010000
0D4BE 37 0D                         .db #$37, #%00001101
0D4C0 77 0D                         .db #$77, #%00001101
0D4C2 B7 0D                         .db #$B7, #%00001101
0D4C4 28 0D                         .db #$28, #%00001101
0D4C6 48 0D                         .db #$48, #%00001101
0D4C8 68 0D                         .db #$68, #%00001101
0D4CA 88 0D                         .db #$88, #%00001101
0D4CC A8 0D                         .db #$A8, #%00001101
0D4CE C8 0D                         .db #$C8, #%00001101
0D4D0 19 0D                         .db #$19, #%00001101
0D4D2 59 0D                         .db #$59, #%00001101
0D4D4 99 0D                         .db #$99, #%00001101
0D4D6 D9 0D                         .db #$D9, #%00001101
0D4D8 FF                            .db #LEVEL_END
0D4D9                           
0D4D9                           lvl_layout_14:
0D4D9 00 67                         .db #$00, #%01100111
0D4DB 40 67                         .db #$40, #%01100111
0D4DD 80 67                         .db #$80, #%01100111
0D4DF C0 27                         .db #$C0, #%00100111
0D4E1 01 27                         .db #$01, #%00100111
0D4E3 31 C7                         .db #$31, #%11000111
0D4E5 51 C7                         .db #$51, #%11000111
0D4E7 71 C7                         .db #$71, #%11000111
0D4E9 91 C7                         .db #$91, #%11000111
0D4EB B1 C7                         .db #$B1, #%11000111
0D4ED D1 07                         .db #$D1, #%00000111
0D4EF 02 E7                         .db #$02, #%11100111
0D4F1 06 E7                         .db #$06, #%11100111
0D4F3 13 07                         .db #$13, #%00000111
0D4F5 D3 07                         .db #$D3, #%00000111
0D4F7 15 07                         .db #$15, #%00000111
0D4F9 35 07                         .db #$35, #%00000111
0D4FB 55 07                         .db #$55, #%00000111
0D4FD 75 07                         .db #$75, #%00000111
0D4FF 95 07                         .db #$95, #%00000111
0D501 B5 07                         .db #$B5, #%00000111
0D503 D5 07                         .db #$D5, #%00000111
0D505 17 07                         .db #$17, #%00000111
0D507 37 C7                         .db #$37, #%11000111
0D509 57 C7                         .db #$57, #%11000111
0D50B 77 C7                         .db #$77, #%11000111
0D50D 97 C7                         .db #$97, #%11000111
0D50F B7 C7                         .db #$B7, #%11000111
0D511 D7 07                         .db #$D7, #%00000111
0D513 19 07                         .db #$19, #%00000111
0D515 D9 07                         .db #$D9, #%00000111
0D517 22 4C                         .db #$22, #%01001100
0D519 62 4C                         .db #$62, #%01001100
0D51B A2 4C                         .db #$A2, #%01001100
0D51D 24 0C                         .db #$24, #%00001100
0D51F 44 0C                         .db #$44, #%00001100
0D521 64 0C                         .db #$64, #%00001100
0D523 84 0C                         .db #$84, #%00001100
0D525 A4 0C                         .db #$A4, #%00001100
0D527 C4 0C                         .db #$C4, #%00001100
0D529 26 0C                         .db #$26, #%00001100
0D52B 46 0C                         .db #$46, #%00001100
0D52D 66 0C                         .db #$66, #%00001100
0D52F 86 0C                         .db #$86, #%00001100
0D531 A6 0C                         .db #$A6, #%00001100
0D533 C6 0C                         .db #$C6, #%00001100
0D535 28 4C                         .db #$28, #%01001100
0D537 68 4C                         .db #$68, #%01001100
0D539 A8 4C                         .db #$A8, #%01001100
0D53B 32 04                         .db #$32, #%00000100
0D53D 52 04                         .db #$52, #%00000100
0D53F 72 04                         .db #$72, #%00000100
0D541 92 04                         .db #$92, #%00000100
0D543 B2 04                         .db #$B2, #%00000100
0D545 38 04                         .db #$38, #%00000100
0D547 58 04                         .db #$58, #%00000100
0D549 78 04                         .db #$78, #%00000100
0D54B 98 04                         .db #$98, #%00000100
0D54D B8 04                         .db #$B8, #%00000100
0D54F FF                            .db #LEVEL_END
0D550                           
0D550                           lvl_layout_15:
0D550 00 7A                         .db #$00, #%01111010
0D552 40 7A                         .db #$40, #%01111010
0D554 80 7A                         .db #$80, #%01111010
0D556 C0 3A                         .db #$C0, #%00111010
0D558 41 04                         .db #$41, #%00000100
0D55A 61 04                         .db #$61, #%00000100
0D55C 81 04                         .db #$81, #%00000100
0D55E A1 04                         .db #$A1, #%00000100
0D560 05 E4                         .db #$05, #%11100100
0D562 15 64                         .db #$15, #%01100100
0D564 55 64                         .db #$55, #%01100100
0D566 95 64                         .db #$95, #%01100100
0D568 D5 E4                         .db #$D5, #%11100100
0D56A 26 04                         .db #$26, #%00000100
0D56C 46 44                         .db #$46, #%01000100
0D56E 76 64                         .db #$76, #%01100100
0D570 C6 04                         .db #$C6, #%00000100
0D572 17 04                         .db #$17, #%00000100
0D574 37 64                         .db #$37, #%01100100
0D576 77 44                         .db #$77, #%01000100
0D578 B7 04                         .db #$B7, #%00000100
0D57A 18 64                         .db #$18, #%01100100
0D57C 58 64                         .db #$58, #%01100100
0D57E 98 64                         .db #$98, #%01100100
0D580 FF                            .db #LEVEL_END
0D581                           
0D581                           lvl_layout_16:
0D581 10 E1                         .db #$10, #%11100001
0D583 20 9A                         .db #$20, #%10011010
0D585 30 E1                         .db #$30, #%11100001
0D587 40 E1                         .db #$40, #%11100001
0D589 50 E1                         .db #$50, #%11100001
0D58B 60 C1                         .db #$60, #%11000001
0D58D 70 E1                         .db #$70, #%11100001
0D58F 80 E1                         .db #$80, #%11100001
0D591 90 E1                         .db #$90, #%11100001
0D593 A0 61                         .db #$A0, #%01100001
0D595 21 C1                         .db #$21, #%11000001
0D597 A1 1A                         .db #$A1, #%00011010
0D599 B1 41                         .db #$B1, #%01000001
0D59B A2 E1                         .db #$A2, #%11100001
0D59D B2 E1                         .db #$B2, #%11100001
0D59F C2 1A                         .db #$C2, #%00011010
0D5A1 D2 E1                         .db #$D2, #%11100001
0D5A3 63 1A                         .db #$63, #%00011010
0D5A5 C3 C1                         .db #$C3, #%11000001
0D5A7 14 61                         .db #$14, #%01100001
0D5A9 54 61                         .db #$54, #%01100001
0D5AB 94 C1                         .db #$94, #%11000001
0D5AD 15 61                         .db #$15, #%01100001
0D5AF 55 41                         .db #$55, #%01000001
0D5B1 85 1A                         .db #$85, #%00011010
0D5B3 16 41                         .db #$16, #%01000001
0D5B5 46 1A                         .db #$46, #%00011010
0D5B7 56 61                         .db #$56, #%01100001
0D5B9 A6 61                         .db #$A6, #%01100001
0D5BB 17 67                         .db #$17, #%01100111
0D5BD 57 67                         .db #$57, #%01100111
0D5BF 97 67                         .db #$97, #%01100111
0D5C1 D7 07                         .db #$D7, #%00000111
0D5C3 28 41                         .db #$28, #%01000001
0D5C5 58 61                         .db #$58, #%01100001
0D5C7 A8 41                         .db #$A8, #%01000001
0D5C9 18 11                         .db #$18, #%00010001
0D5CB 38 11                         .db #$38, #%00010001
0D5CD 98 11                         .db #$98, #%00010001
0D5CF B8 11                         .db #$B8, #%00010001
0D5D1 D8 11                         .db #$D8, #%00010001
0D5D3 59 09                         .db #$59, #%00001001
0D5D5 FF                            .db #LEVEL_END
0D5D6                           
0D5D6                           lvl_layout_17:
0D5D6 10 EA                         .db #$10, #%11101010
0D5D8 20 E2                         .db #$20, #%11100010
0D5DA 30 62                         .db #$30, #%01100010
0D5DC 70 02                         .db #$70, #%00000010
0D5DE 80 6A                         .db #$80, #%01101010
0D5E0 90 22                         .db #$90, #%00100010
0D5E2 01 AA                         .db #$01, #%10101010
0D5E4 31 6A                         .db #$31, #%01101010
0D5E6 81 2A                         .db #$81, #%00101010
0D5E8 A1 02                         .db #$A1, #%00000010
0D5EA C1 02                         .db #$C1, #%00000010
0D5EC D1 0A                         .db #$D1, #%00001010
0D5EE 32 EA                         .db #$32, #%11101010
0D5F0 42 6A                         .db #$42, #%01101010
0D5F2 62 02                         .db #$62, #%00000010
0D5F4 92 6A                         .db #$92, #%01101010
0D5F6 D2 E2                         .db #$D2, #%11100010
0D5F8 43 1A                         .db #$43, #%00011010
0D5FA 53 CA                         .db #$53, #%11001010
0D5FC 73 02                         .db #$73, #%00000010
0D5FE 83 4A                         .db #$83, #%01001010
0D600 B3 CA                         .db #$B3, #%11001010
0D602 C3 EA                         .db #$C3, #%11101010
0D604 04 0A                         .db #$04, #%00001010
0D606 14 A2                         .db #$14, #%10100010
0D608 24 AA                         .db #$24, #%10101010
0D60A 44 AA                         .db #$44, #%10101010
0D60C 64 6A                         .db #$64, #%01101010
0D60E 65 6A                         .db #$65, #%01101010
0D610 A5 AA                         .db #$A5, #%10101010
0D612 06 EA                         .db #$06, #%11101010
0D614 16 62                         .db #$16, #%01100010
0D616 66 22                         .db #$66, #%00100010
0D618 86 2A                         .db #$86, #%00101010
0D61A 17 42                         .db #$17, #%01000010
0D61C 47 12                         .db #$47, #%00010010
0D61E 57 6A                         .db #$57, #%01101010
0D620 97 4A                         .db #$97, #%01001010
0D622 A7 02                         .db #$A7, #%00000010
0D624 18 02                         .db #$18, #%00000010
0D626 28 0A                         .db #$28, #%00001010
0D628 38 22                         .db #$38, #%00100010
0D62A 68 2A                         .db #$68, #%00101010
0D62C 88 62                         .db #$88, #%01100010
0D62E C8 0A                         .db #$C8, #%00001010
0D630 D8 02                         .db #$D8, #%00000010
0D632 19 2A                         .db #$19, #%00101010
0D634 39 2A                         .db #$39, #%00101010
0D636 69 42                         .db #$69, #%01000010
0D638 99 2A                         .db #$99, #%00101010
0D63A B9 42                         .db #$B9, #%01000010
0D63C FF                            .db #LEVEL_END
0D63D                           
0D63D                           lvl_layout_18:
0D63D 00 12                         .db #$00, #%00010010
0D63F 40 1A                         .db #$40, #%00011010
0D641 50 11                         .db #$50, #%00010001
0D643 70 1A                         .db #$70, #%00011010
0D645 80 10                         .db #$80, #%00010000
0D647 D0 13                         .db #$D0, #%00010011
0D649 01 1A                         .db #$01, #%00011010
0D64B 22 15                         .db #$22, #%00010101
0D64D A2 1A                         .db #$A2, #%00011010
0D64F B2 14                         .db #$B2, #%00010100
0D651 03 67                         .db #$03, #%01100111
0D653 43 67                         .db #$43, #%01100111
0D655 83 67                         .db #$83, #%01100111
0D657 24 09                         .db #$24, #%00001001
0D659 74 0D                         .db #$74, #%00001101
0D65B C4 0A                         .db #$C4, #%00001010
0D65D 05 A7                         .db #$05, #%10100111
0D65F 45 27                         .db #$45, #%00100111
0D661 95 27                         .db #$95, #%00100111
0D663 16 C7                         .db #$16, #%11000111
0D665 36 67                         .db #$36, #%01100111
0D667 86 67                         .db #$86, #%01100111
0D669 D6 07                         .db #$D6, #%00000111
0D66B 07 A3                         .db #$07, #%10100011
0D66D 27 23                         .db #$27, #%00100011
0D66F 47 C7                         .db #$47, #%11000111
0D671 57 A0                         .db #$57, #%10100000
0D673 67 A7                         .db #$67, #%10100111
0D675 77 20                         .db #$77, #%00100000
0D677 97 C7                         .db #$97, #%11000111
0D679 A7 A4                         .db #$A7, #%10100100
0D67B B7 A7                         .db #$B7, #%10100111
0D67D C7 24                         .db #$C7, #%00100100
0D67F 28 0B                         .db #$28, #%00001011
0D681 38 A3                         .db #$38, #%10100011
0D683 78 08                         .db #$78, #%00001000
0D685 88 A0                         .db #$88, #%10100000
0D687 C8 0C                         .db #$C8, #%00001100
0D689 D8 A4                         .db #$D8, #%10100100
0D68B 09 43                         .db #$09, #%01000011
0D68D 59 40                         .db #$59, #%01000000
0D68F A9 44                         .db #$A9, #%01000100
0D691 FF                            .db #LEVEL_END
0D692                           
0D692                           lvl_layout_19:
0D692 11 A8                         .db #$11, #%10101000
0D694 21 68                         .db #$21, #%01101000
0D696 81 28                         .db #$81, #%00101000
0D698 B1 48                         .db #$B1, #%01001000
0D69A 22 48                         .db #$22, #%01001000
0D69C 62 68                         .db #$62, #%01101000
0D69E B2 28                         .db #$B2, #%00101000
0D6A0 23 28                         .db #$23, #%00101000
0D6A2 83 28                         .db #$83, #%00101000
0D6A4 B3 28                         .db #$B3, #%00101000
0D6A6 04 E8                         .db #$04, #%11101000
0D6A8 24 08                         .db #$24, #%00001000
0D6AA 44 08                         .db #$44, #%00001000
0D6AC 64 E8                         .db #$64, #%11101000
0D6AE 84 E8                         .db #$84, #%11101000
0D6B0 C4 A8                         .db #$C4, #%10101000
0D6B2 D4 E8                         .db #$D4, #%11101000
0D6B4 15 48                         .db #$15, #%01001000
0D6B6 55 C8                         .db #$55, #%11001000
0D6B8 75 C8                         .db #$75, #%11001000
0D6BA A5 08                         .db #$A5, #%00001000
0D6BC 36 08                         .db #$36, #%00001000
0D6BE B6 08                         .db #$B6, #%00001000
0D6C0 27 48                         .db #$27, #%01001000
0D6C2 97 28                         .db #$97, #%00101000
0D6C4 C7 08                         .db #$C7, #%00001000
0D6C6 09 61                         .db #$09, #%01100001
0D6C8 19 11                         .db #$19, #%00010001
0D6CA 49 61                         .db #$49, #%01100001
0D6CC 89 31                         .db #$89, #%00110001
0D6CE A9 61                         .db #$A9, #%01100001
0D6D0 FF                            .db #LEVEL_END
0D6D1                           
0D6D1                           lvl_layout_20:
0D6D1 00 60                         .db #$00, #%01100000
0D6D3 10 1A                         .db #$10, #%00011010
0D6D5 40 A7                         .db #$40, #%10100111
0D6D7 50 20                         .db #$50, #%00100000
0D6D9 70 1A                         .db #$70, #%00011010
0D6DB 80 40                         .db #$80, #%01000000
0D6DD B0 1A                         .db #$B0, #%00011010
0D6DF C0 20                         .db #$C0, #%00100000
0D6E1 01 40                         .db #$01, #%01000000
0D6E3 31 1A                         .db #$31, #%00011010
0D6E5 A1 40                         .db #$A1, #%01000000
0D6E7 D1 1A                         .db #$D1, #%00011010
0D6E9 43 67                         .db #$43, #%01100111
0D6EB 83 47                         .db #$83, #%01000111
0D6ED 44 A7                         .db #$44, #%10100111
0D6EF 54 25                         .db #$54, #%00100101
0D6F1 94 08                         .db #$94, #%00001000
0D6F3 A4 A7                         .db #$A4, #%10100111
0D6F5 55 05                         .db #$55, #%00000101
0D6F7 65 08                         .db #$65, #%00001000
0D6F9 06 27                         .db #$06, #%00100111
0D6FB 36 67                         .db #$36, #%01100111
0D6FD 76 28                         .db #$76, #%00101000
0D6FF A6 27                         .db #$A6, #%00100111
0D701 D6 07                         .db #$D6, #%00000111
0D703 A7 A7                         .db #$A7, #%10100111
0D705 08 60                         .db #$08, #%01100000
0D707 09 60                         .db #$09, #%01100000
0D709 18 A7                         .db #$18, #%10100111
0D70B 48 A7                         .db #$48, #%10100111
0D70D 58 47                         .db #$58, #%01000111
0D70F 88 27                         .db #$88, #%00100111
0D711 B8 20                         .db #$B8, #%00100000
0D713 D8 1A                         .db #$D8, #%00011010
0D715 59 15                         .db #$59, #%00010101
0D717 69 60                         .db #$69, #%01100000
0D719 A9 60                         .db #$A9, #%01100000
0D71B FF                            .db #LEVEL_END
0D71C                           
0D71C                           lvl_layout_21:
0D71C 00 13                         .db #$00, #%00010011
0D71E 10 11                         .db #$10, #%00010001
0D720 20 67                         .db #$20, #%01100111
0D722 60 67                         .db #$60, #%01100111
0D724 A0 47                         .db #$A0, #%01000111
0D726 D0 15                         .db #$D0, #%00010101
0D728 32 63                         .db #$32, #%01100011
0D72A 72 05                         .db #$72, #%00000101
0D72C 82 43                         .db #$82, #%01000011
0D72E B2 43                         .db #$B2, #%01000011
0D730 33 03                         .db #$33, #%00000011
0D732 43 2A                         .db #$43, #%00101010
0D734 63 7A                         .db #$63, #%01111010
0D736 73 2A                         .db #$73, #%00101010
0D738 A3 7A                         .db #$A3, #%01111010
0D73A 34 63                         .db #$34, #%01100011
0D73C 74 63                         .db #$74, #%01100011
0D73E B4 43                         .db #$B4, #%01000011
0D740 06 63                         .db #$06, #%01100011
0D742 46 63                         .db #$46, #%01100011
0D744 86 63                         .db #$86, #%01100011
0D746 C6 C3                         .db #$C6, #%11000011
0D748 07 7A                         .db #$07, #%01111010
0D74A 47 7A                         .db #$47, #%01111010
0D74C 67 0A                         .db #$67, #%00001010
0D74E 87 7A                         .db #$87, #%01111010
0D750 08 13                         .db #$08, #%00010011
0D752 18 43                         .db #$18, #%01000011
0D754 48 63                         .db #$48, #%01100011
0D756 88 63                         .db #$88, #%01100011
0D758 FF                            .db #LEVEL_END
0D759                           
0D759                           lvl_layout_22:
0D759 00 7A                         .db #$00, #%01111010
0D75B 40 7A                         .db #$40, #%01111010
0D75D 80 7A                         .db #$80, #%01111010
0D75F C0 3A                         .db #$C0, #%00111010
0D761 13 67                         .db #$13, #%01100111
0D763 83 A7                         .db #$83, #%10100111
0D765 B3 07                         .db #$B3, #%00000111
0D767 14 07                         .db #$14, #%00000111
0D769 44 07                         .db #$44, #%00000111
0D76B A4 07                         .db #$A4, #%00000111
0D76D 15 A5                         .db #$15, #%10100101
0D76F 45 A5                         .db #$45, #%10100101
0D771 85 25                         .db #$85, #%00100101
0D773 86 05                         .db #$86, #%00000101
0D775 A6 05                         .db #$A6, #%00000101
0D777 17 11                         .db #$17, #%00010001
0D779 47 A1                         .db #$47, #%10100001
0D77B 87 A1                         .db #$87, #%10100001
0D77D B7 A1                         .db #$B7, #%10100001
0D77F 18 41                         .db #$18, #%01000001
0D781 68 01                         .db #$68, #%00000001
0D783 D8 01                         .db #$D8, #%00000001
0D785 FF                            .db #LEVEL_END
0D786                           
0D786                           lvl_layout_23:
0D786 00 71                         .db #$00, #%01110001
0D788 40 11                         .db #$40, #%00010001
0D78A 50 43                         .db #$50, #%01000011
0D78C 80 D1                         .db #$80, #%11010001
0D78E 90 E3                         .db #$90, #%11100011
0D790 A0 63                         .db #$A0, #%01100011
0D792 01 63                         .db #$01, #%01100011
0D794 41 63                         .db #$41, #%01100011
0D796 A1 63                         .db #$A1, #%01100011
0D798 02 63                         .db #$02, #%01100011
0D79A 42 63                         .db #$42, #%01100011
0D79C 62 11                         .db #$62, #%00010001
0D79E A2 67                         .db #$A2, #%01100111
0D7A0 04 63                         .db #$04, #%01100011
0D7A2 44 23                         .db #$44, #%00100011
0D7A4 64 D1                         .db #$64, #%11010001
0D7A6 74 E3                         .db #$74, #%11100011
0D7A8 84 F1                         .db #$84, #%11110001
0D7AA 94 E3                         .db #$94, #%11100011
0D7AC A4 C7                         .db #$A4, #%11000111
0D7AE B4 23                         .db #$B4, #%00100011
0D7B0 05 63                         .db #$05, #%01100011
0D7B2 45 23                         .db #$45, #%00100011
0D7B4 06 71                         .db #$06, #%01110001
0D7B6 46 11                         .db #$46, #%00010001
0D7B8 56 E3                         .db #$56, #%11100011
0D7BA D6 07                         .db #$D6, #%00000111
0D7BC 17 D1                         .db #$17, #%11010001
0D7BE 27 43                         .db #$27, #%01000011
0D7C0 67 D1                         .db #$67, #%11010001
0D7C2 A7 C7                         .db #$A7, #%11000111
0D7C4 C7 A7                         .db #$C7, #%10100111
0D7C6 D7 B3                         .db #$D7, #%10110011
0D7C8 28 43                         .db #$28, #%01000011
0D7CA 78 43                         .db #$78, #%01000011
0D7CC 29 43                         .db #$29, #%01000011
0D7CE 79 43                         .db #$79, #%01000011
0D7D0 FF                           .db #LEVEL_END
0D7D1                           
0D7D1                           lvl_layout_24:
0D7D1 02 67                         .db #$02, #%01100111
0D7D3 42 67                         .db #$42, #%01100111
0D7D5 82 67                         .db #$82, #%01100111
0D7D7 05 67                         .db #$05, #%01100111
0D7D9 45 67                         .db #$45, #%01100111
0D7DB 85 67                         .db #$85, #%01100111
0D7DD 08 67                         .db #$08, #%01100111
0D7DF 48 67                         .db #$48, #%01100111
0D7E1 88 67                         .db #$88, #%01100111
0D7E3 30 E7                         .db #$30, #%11100111
0D7E5 70 E7                         .db #$70, #%11100111
0D7E7 B0 E7                         .db #$B0, #%11100111
0D7E9 34 E7                         .db #$34, #%11100111
0D7EB 74 E7                         .db #$74, #%11100111
0D7ED B4 E7                         .db #$B4, #%11100111
0D7EF 20 13                         .db #$20, #%00010011
0D7F1 40 10                         .db #$40, #%00010000
0D7F3 80 02                         .db #$80, #%00000010
0D7F5 41 05                         .db #$41, #%00000101
0D7F7 B1 09                         .db #$B1, #%00001001
0D7F9 02 09                         .db #$02, #%00001001
0D7FB 52 0C                         .db #$52, #%00001100
0D7FD 13 11                         .db #$13, #%00010001
0D7FF 33 04                         .db #$33, #%00000100
0D801 74 0C                         .db #$74, #%00001100
0D803 B4 08                         .db #$B4, #%00001000
0D805 15 09                         .db #$15, #%00001001
0D807 55 0C                         .db #$55, #%00001100
0D809 95 0C                         .db #$95, #%00001100
0D80B 47 03                         .db #$47, #%00000011
0D80D A7 12                         .db #$A7, #%00010010
0D80F 18 15                         .db #$18, #%00010101
0D811 09 05                         .db #$09, #%00000101
0D813 19 03                         .db #$19, #%00000011
0D815 FF                            .db #LEVEL_END
0D816                           
0D816                           lvl_layout_25:
0D816 00 12                         .db #$00, #%00010010
0D818 10 63                         .db #$10, #%01100011
0D81A 60 63                         .db #$60, #%01100011
0D81C A0 07                         .db #$A0, #%00000111
0D81E 01 11                         .db #$01, #%00010001
0D820 A1 02                         .db #$A1, #%00000010
0D822 02 67                         .db #$02, #%01100111
0D824 42 07                         .db #$42, #%00000111
0D826 62 67                         .db #$62, #%01100111
0D828 A2 C7                         .db #$A2, #%11000111
0D82A 03 61                         .db #$03, #%01100001
0D82C 43 01                         .db #$43, #%00000001
0D82E 63 61                         .db #$63, #%01100001
0D830 A6 E7                         .db #$A6, #%11100111
0D832 B6 47                         .db #$B6, #%01000111
0D834 C6 01                         .db #$C6, #%00000001
0D836 B7 42                         .db #$B7, #%01000010
0D838 B8 42                         .db #$B8, #%01000010
0D83A C8 0A                         .db #$C8, #%00001010
0D83C 09 7A                         .db #$09, #%01111010
0D83E 49 7A                         .db #$49, #%01111010
0D840 89 3A                         .db #$89, #%00111010
0D842 B9 42                         .db #$B9, #%01000010
0D844 FF                            .db #LEVEL_END
0D845                           
0D845                           ;; Level layout address pointers
0D845                           tbl_lvl_layout_hi:
0D845 D1 D1 D1 D1 D2                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D84A D2 D3 D3 D3 D3                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D84F D4 D4 D4 D4 D5                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D854 D5 D5 D6 D6 D6                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D859 D7 D7 D7 D7 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D85E                           
0D85E                           tbl_lvl_layout_lo:
0D85E 66 81 B6 E9 5A                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D863 95 1E 5F 96 D9                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D868 08 5B 86 D9 50                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D86D 81 D6 3D 92 D1                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D872 1C 59 86 D1 16                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D877                           
0D877                           ;; Ball start position (#$YX)
0D877                           tbl_lvl_ball_startpos:
0D877 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D87C 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D881 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D886 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D88B 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D890                               
0D890                           ;; Ball start direction, color and tile score
0D890                           ;; #% ccc v tttt
0D890                           ;;    ||| | ++++-- tile score
0D890                           ;;    ||| +------- vertical direction, up (0) or down
0D890                           ;;    +++--------- color (CBRYGM)
0D890                           tbl_lvl_ball_init:
0D890 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D895 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D89A 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D89F 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D8A4 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D8A9                           
0D8A9                           
0D8A9                           
0D8A9                           ;; Helper table to multiply values by 16
0D8A9                           tbl_Times16:
0D8A9 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D8B1 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D8B9                               
0D8B9                           
0D8B9                           ;; Helper table to multiply values by 64
0D8B9                           tbl_Times64:
0D8B9 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D8BD                           
0D8BD                           
0D8BD                           ;; Metatile ID to CHR data mapper
0D8BD                           tbl_GametileTopLeft:
0D8BD 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D8C7                           
0D8C7                           tbl_GametileTopRight:
0D8C7 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D8D1                           
0D8D1                           tbl_GametileBottomLeft:
0D8D1 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D8DB                           
0D8DB                           tbl_GametileBottomRight:
0D8DB 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D8E5                           
0D8E5                           ;; Metatile ID to RAM byte data mapper
0D8E5                           tbl_GameTileRamByte:
0D8E5 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D8EA                           
0D8EA                           ;; HUD text data
0D8EA                           tbl_HudText:
0D8EA 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D8F2 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D8F9 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D901 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D906                           
0D906                           ;; Move block top left tile based on color
0D906                           tbl_MoveBlockTopLeftTile:
0D906 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D90D                           
0D90D                           ;; Game over data
0D90D                           tbl_GameOver:
0D90D 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D911 00 00                         .db #_SPACE, #_SPACE
0D913 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0D917                           
0D917                           tbl_BackgroundFade:
0D917 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F0D921                           
0D921                           ;; NMI handler
0D921                           NMI:
0D921                               .include "interrupt/nmi.asm"
0D921                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D921                           ;;
0D921                           ;; include/nmi.asm
0D921                           ;;
0D921                           ;; Non-maskable interrupt script. This script is being executed
0D921                           ;; when vBlank hits.
0D921                           ;;
0D921                           ;;
0D921                           
0D921                               ;; Preserve accumulator through stack
0D921 48                            PHA
0D922                           
0D922                               ;; Should NMI be skipped?
0D922 A5 13                         LDA skip_nmi
0D924 F0 03                         BEQ +
0D926 4C 67 DA                          JMP +skip_nmi
0D929                               +
0D929                           
0D929                               ;; When in NMI, skip additional NMI requests
0D929 A9 01                         LDA #$01
0D92B 85 13                         STA skip_nmi
0D92D                           
0D92D                               ;; Preserve X, Y, and PC through stack
0D92D 8A                            TXA
0D92E 48                            PHA
0D92F 98                            TYA
0D930 48                            PHA
0D931 08                            PHP
0D932                               
0D932                               ;; Check forced NMI skip
0D932 A5 14                         LDA force_skip_nmi
0D934 F0 03                         BEQ +
0D936 4C 56 DA                          JMP +force_skip_nmi
0D939                               +
0D939                           
0D939                               ;; Update PPU mask
0D939                               ;LDA #$00
0D939                               ;STA PPU_CTRL
0D939 A5 12                         LDA soft_ppu_mask
0D93B 8D 01 20                      STA PPU_MASK
0D93E                               
0D93E                               
0D93E                               ;; Additional PPU updates go here
0D93E                               .include "game/interrupt/nmi.asm"
0D93E                           
0D93E                               ;; Check if ppu_buffer needs updating
0D93E A5 39                         LDA ppu_buffer_update
0D940 D0 03                         BNE +
0D942 4C 84 D9                          JMP +no_ppu_buffer_update
0D945                               +
0D945                           
0D945                               ;; Reset ppu control register and mask
0D945 A2 00                         LDX #$00
0D947 8E 00 20                      STX PPU_CTRL
0D94A 8E 01 20                      STX PPU_MASK
0D94D                           
0D94D                               ;; Set up loop
0D94D                               -
0D94D                                   ;; Reset hi/lo latch
0D94D 2C 02 20                          BIT PPU_STATUS
0D950                           
0D950                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D950 BD 00 03                          LDA ppu_buffer,x
0D953 8D 06 20                          STA PPU_ADDR
0D956 E8                                INX
0D957 BD 00 03                          LDA ppu_buffer,x
0D95A 8D 06 20                          STA PPU_ADDR
0D95D                           
0D95D                                   ;; Write ppu_buffer data to PPU_ADDR
0D95D E8                                INX
0D95E BD 00 03                          LDA ppu_buffer,x
0D961 8D 07 20                          STA PPU_DATA
0D964                           
0D964                                   ;; Check if updating is done (eg. X is at pointer)
0D964 E8                                INX
0D965 E4 3A                             CPX ppu_buffer_pointer
0D967 F0 03                             BEQ +
0D969 4C 4D D9                      JMP -
0D96C                           +
0D96C                           
0D96C                               ;; Reset ppu buffer update and pointer
0D96C A9 00                         LDA #$00
0D96E 85 39                         STA ppu_buffer_update
0D970 85 3A                         STA ppu_buffer_pointer
0D972                               
0D972                               ;; Reset scrolling position
0D972 8D 05 20                      STA PPU_SCROLL
0D975 8D 05 20                      STA PPU_SCROLL
0D978                           
0D978                               ;; Restore ppu control register and mask
0D978 A9 90                         LDA #%10010000
0D97A 8D 00 20                      STA PPU_CTRL
0D97D A5 12                         LDA soft_ppu_mask
0D97F 8D 01 20                      STA PPU_MASK
0D982 A9 00                         LDA #$00
0D984                           
0D984                           ;; Continue other NMI stuff
0D984                           +no_ppu_buffer_update:
0D984                           
0D984                               ;; Reset sprite RAM, draw sprites
0D984 8D 03 20                      STA OAM_ADDR
0D987 A9 02                         LDA #$02
0D989 8D 14 40                      STA OAM_DMA
0D98C                           
0D98C                               ;; Decrease explosion and move block timers
0D98C A0 04                         LDY #MAX_ANIMATIONS
0D98E A2 00                         LDX #$00
0D990                               -
0D990 BD 60 03                          LDA explosion_timer,x
0D993 F0 03                             BEQ +
0D995 DE 60 03                              DEC explosion_timer,x
0D998                                   +
0D998                           
0D998 BD 80 03                          LDA move_block_timer,x
0D99B F0 03                             BEQ +
0D99D DE 80 03                              DEC move_block_timer,x
0D9A0                                   +
0D9A0                                   
0D9A0 E8                                INX
0D9A1 88                                DEY
0D9A2 F0 03                             BEQ +done
0D9A4 4C 90 D9                      JMP -
0D9A7                           +done:
0D9A7                           
0D9A7                               ;; Decrease nudge timer
0D9A7 A5 3E                         LDA nudge_timer
0D9A9 F0 02                         BEQ +
0D9AB C6 3E                             DEC nudge_timer
0D9AD                               +
0D9AD                           
0D9AD                               ;; Decrease bonus timer
0D9AD A5 3F                         LDA bonus_timer
0D9AF F0 02                         BEQ +
0D9B1 C6 3F                             DEC bonus_timer
0D9B3                               +
0D9B3                           
0D9B3                               ;; Decrease kill timer
0D9B3 A5 40                         LDA kill_timer
0D9B5 F0 02                         BEQ +
0D9B7 C6 40                             DEC kill_timer
0D9B9                               +
0D9B9                           
0D9B9                               ;; Play background noise
0D9B9 A5 38                         LDA screen_mode
0D9BB 29 01                         AND #IS_GAME_SCREEN
0D9BD F0 21                         BEQ +
0D9BF                                   .include "game/include/main/background_sound.asm"
0D9BF                               ;; At random times, set max_noise period to $03-$0A
0D9BF A5 44                         LDA max_noise
0D9C1 D0 1D                         BNE +
0D9C3 20 39 C5                          JSR sub_GetRandomNumber
0D9C6 29 EF                             AND #%11101111
0D9C8 D0 16                             BNE +
0D9CA                                   
0D9CA A5 15                             LDA frame_counter
0D9CC 85 16                             STA random_seed
0D9CE 20 39 C5                          JSR sub_GetRandomNumber
0D9D1 29 07                             AND #$07
0D9D3 69 03                             ADC #$03
0D9D5 85 44                             STA max_noise
0D9D7 A9 01                             LDA #$01
0D9D9 85 45                             STA sweep_noise
0D9DB A9 34                             LDA #$34
0D9DD 8D 0C 40                          STA NOISE_VOLUME
0D9E0                           
0D9E0                               +
0D9E0                           
0D9E0                               ;; if sweep noise = $00: constant noise
0D9E0                               ;; else if sweep noise > $80: decrease pitch
0D9E0                               ;; else: increase pitch
0D9E0 A5 45                         LDA sweep_noise
0D9E2 F0 18                         BEQ +constantNoise
0D9E4 30 2A                         BMI +decreaseNoise
0D9E6                           
0D9E6                           ;; Sweep noise up to max noise pitch
0D9E6                           +increaseNoise:
0D9E6 C6 46                         DEC current_noise
0D9E8 A5 46                         LDA current_noise
0D9EA 8D 0E 40                      STA NOISE_PERIOD
0D9ED C5 44                         CMP max_noise
0D9EF D0 08                         BNE +
0D9F1 A9 00                             LDA #$00
0D9F3 85 45                             STA sweep_noise
0D9F5 A9 0A                             LDA #$0A
0D9F7 85 47                             STA noise_timer
0D9F9                               +
0D9F9 4C 24 DA                      JMP +endNoise
0D9FC                           
0D9FC                           ;; Keep noise at constant pitch
0D9FC                           +constantNoise:
0D9FC A5 44                         LDA max_noise
0D9FE F0 24                         BEQ +endNoise
0DA00                           
0DA00 A5 47                         LDA noise_timer
0DA02 D0 07                         BNE +
0DA04 A9 80                             LDA #$80
0DA06 85 45                             STA sweep_noise
0DA08 4C 24 DA                          JMP +endNoise
0DA0B                               +
0DA0B C6 47                         DEC noise_timer
0DA0D 4C 24 DA                      JMP +endNoise
0DA10                           
0DA10                           ;; Sweep noise down to initial pitch
0DA10                           +decreaseNoise:
0DA10 E6 46                         INC current_noise
0DA12 A5 46                         LDA current_noise
0DA14 8D 0E 40                      STA NOISE_PERIOD
0DA17 C9 0E                         CMP #$0E
0DA19 D0 09                         BNE +endNoise
0DA1B                           
0DA1B 20 C9 C5                      JSR sub_BackgroundNoise
0DA1E A9 00                         LDA #$00
0DA20 85 44                         STA max_noise
0DA22 85 45                         STA sweep_noise
0DA24                           
0DA24                           +endNoise:
0DA24                           
0DA24                               +
0DA24                           
0DA24                               ;; Test: random bleeps
0DA24                               .include "game/test/random_descending_bleeps.asm"
0DA24                           ;; Random bleepy noises
0DA24 A5 48                         LDA do_beeps
0DA26 F0 2E                         BEQ +continue
0DA28                               
0DA28 C9 02                         CMP #$02
0DA2A D0 12                         BNE +beep
0DA2C                              
0DA2C                           +stopBeep:
0DA2C A9 00                         LDA #$00
0DA2E 85 48                         STA do_beeps
0DA30 A9 08                         LDA #$08
0DA32 8D 15 40                      STA APU_STATUS
0DA35 8D 0F 40                      STA NOISE_LENGTH
0DA38 20 C9 C5                      JSR sub_BackgroundNoise
0DA3B 4C 56 DA                      JMP +continue
0DA3E                               
0DA3E                           +beep:
0DA3E A9 01                         LDA #$01
0DA40 8D 15 40                      STA APU_STATUS
0DA43 A9 B8                         LDA #$B8
0DA45 8D 00 40                      STA PULSE1_VOLUME
0DA48 20 39 C5                      JSR sub_GetRandomNumber
0DA4B 8D 02 40                      STA PULSE1_TIMER_LO
0DA4E 20 39 C5                      JSR sub_GetRandomNumber
0DA51 29 01                         AND #$01
0DA53 8D 03 40                      STA PULSE1_TIMER_HI
0DA56                           
0DA56                           +continue:0DA56                               
0DA56                           
0DA56                           
0DA56                           ;; This is what happens when we forced nmi skip
0DA56                           +force_skip_nmi:
0DA56                           
0DA56                               ;; Increase frame timers
0DA56 E6 15                         INC frame_counter
0DA58                           
0DA58                               ;; reset sprites_update_position
0DA58 A9 00                         LDA #$00
0DA5A 85 35                         STA sprites_update_position
0DA5C                           
0DA5C                               ;; Don't skip next NMI request
0DA5C A9 00                         LDA #$00
0DA5E 85 13                         STA skip_nmi
0DA60 85 49                         STA check_nmi
0DA62                           
0DA62                               ;; Restore X, Y and PC from stack
0DA62 28                            PLP
0DA63 68                            PLA
0DA64 A8                            TAY
0DA65 68                            PLA
0DA66 AA                            TAX
0DA67                           
0DA67                           +skip_nmi:
0DA67                               ;; Restore accumulator from stack
0DA67 68                            PLA
0DA68                           
0DA68                               ;; Return
0DA68 40                            RTI
0DA69                           
0DA69                           ;; IRQ handler (empty)
0DA69                           IRQ:
0DA69                               .include "interrupt/irq.asm"
0DA69 40                            RTI0DA6A                           
0DA6A                           ;; Interrupt vectors
0DA6A 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 21 D9                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 69 DA                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
