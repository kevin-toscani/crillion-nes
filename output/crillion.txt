                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_SPRITERAM = $0200
                                ADDR_OTHERRAM  = $0300
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Starting address for screen tile RAM
                                ADDR_SCREENTILERAM  = $0400
                                
                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI = #$02
                                BALL_SPEED_LO = #$30
                                BALL_TILE_CHR = #$01
                                BALL_ATTR     = #%00000000
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD     = #%00000001
                                KILL_BALL        = #%00000001
                                REVIVE_BALL      = #%11111110
                                NUDGE_BALL_RIGHT = #%00000010
                                NUDGE_BALL_LEFT  = #%11111101
                                BALL_MOVES_DOWN  = #%00000100
                                MOVE_BALL_DOWN   = #%00000100
                                MOVE_BALL_UP     = #%11111011
                                BALL_IS_FROZEN   = #%00010000
                                FREEZE_BALL      = #%00010000
                                UNFREEZE_BALL    = #%11101111
                                
                                
                                ;; Screen load helpers
                                LOAD_INTRO_SCREEN = #%10000000
                                LOAD_GAME_SCREEN  = #%10000001
                                LOAD_WIN_SCREEN   = #%10000010
                                IS_INTRO_SCREEN   = #%00000000
                                IS_GAME_SCREEN    = #%00000001
                                IS_WIN_SCREEN     = #%00000010
                                CHECK_SCREEN_MODE = #%00000011
                                
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$30
                                BOUND_BOTTOM    = #$C8
                                BOUND_LEFT      = #$10
                                BOUND_RIGHT     = #$E8
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                
                                ;; Max number of nudge frames
                                NUDGE_FRAMES    = #$03
                                
                                
                                ;; Helper constant for when a level is done loading
                                LEVEL_END       = #$FF
                                
                                
                                ;; Character map
                                _SPACE = #$00
                                _0     = #$01
                                _1     = #$02
                                _2     = #$03
                                _3     = #$04
                                _4     = #$05
                                _5     = #$06
                                _6     = #$07
                                _7     = #$08
                                _8     = #$09
                                _9     = #$0A
                                _A     = #$0B
                                _B     = #$0C
                                _C     = #$0D
                                _D     = #$0E
                                _E     = #$0F
                                _F     = #$10
                                _G     = #$11
                                _H     = #$12
                                _I     = #$13
                                _J     = #$14
                                _K     = #$15
                                _L     = #$16
                                _M     = #$17
                                _N     = #$18
                                _O     = #$19
                                _P     = #$1A
                                _Q     = #$1B
                                _R     = #$1C
                                _S     = #$1D
                                _T     = #$1E
                                _U     = #$1F
                                _V     = #$20
                                _W     = #$21
                                _X     = #$22
                                _Y     = #$23
                                _Z     = #$24
                                _COMMA = #$25
                                _DOT   = #$26
                                _COLON = #$27
                                _COPY  = #$28
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           
00025                           ;; Update-position check
00025                           ball_update_position   .dsb 1
00026                           
00026                           
00026                           ;; Ball flags
00026                           ;; #% c c c f . v n a
00026                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00026                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00026                           ;;    | | | | | +------ ball moves up (0) or down (1)
00026                           ;;    | | | | +-------- (unused for now)
00026                           ;;    | | | +---------- ball is frozen (not moving)
00026                           ;;    +-+-+------------ ball color (1-6)
00026                           ball_flags             .dsb 1
00027                           
00027                           
00027                           ;; Screen mode
00027                           ;; #% u . . . . . t t
00027                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00027                           ;;    | +-+-+-+-+------------- unused
00027                           ;;    +----------------------- should the screen update
00027                           screen_mode            .dsb 1
00028                           
00028                           
00028                           ;; Start level pointer
00028                           ;; You can start the game at level 1, 5, 9, 13 or 17.
00028                           ;; This is the pointer that tells you at which level to start.
00028                           startlevel_pointer     .dsb 1 
00029                           
00029                           
00029                           ;; PPU buffer variables
00029                           ppu_buffer_update      .dsb 1
0002A                           ppu_buffer_pointer     .dsb 1
0002B                           
0002B                           ;; Pointer to keep track of the number of explosions
0002B                           explosion_pointer      .dsb 1
0002C                           
0002C                           ;; Sprite RAM pointer to keep track of sprites to update
0002C                           sprite_ram_pointer     .dsb 1
0002D                           
0002D                           ;; Nudge counter
0002D                           nudge_counter          .dsb 1
0002E                           
0002E                           ;; Current level
0002E                           current_level          .dsb 1
0002F                           
0002F                               0002F                           .ende
                                
                                ;; Other RAM (must be ENUM'd within)
                                .include "ram/misc.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; ram/misc.asm
                                ;;
                                ;; List of additional, non-zeropage RAM variables. Currently
                                ;; empty, but will hold data like the OAM buffer and other,
                                ;; less-often accessed, global variables.
                                ;;
                                ;;
                                
                                
                                    ;; Game specific RAM variables
                                    .include "game/ram/misc.asm"
                                ;; miscellaneous (non-zeropage) ram variables go here
                                
                                .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
                                
                                
                                ;; screen tile data (14x10 metatiles)
                                .enum ADDR_SCREENTILERAM
00400                               tile_type                 .dsb 160
004A0                               tile_attributes           .dsb 64
004E0                           .ende
                                
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 A5 C2                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 A5 C2                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 27                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 2E                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 2C                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 91 C2                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 27                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 27                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 12 C9                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 0F C9                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 3B C3                      JSR sub_DisableRendering
0C08A 20 7C C3                      JSR sub_JumpToPointer
0C08D 20 4F C3                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 27                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 27                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; CONCEPT SCRIPTS
0C096                               
0C096                               ;; Upon pressing A, an explosion will happen on screen
0C096                               .include "game/test/show_animation.asm"
0C096                               ;; If A button is pressed, initiate explosion
0C096 A5 10                         LDA buttons_pressed
0C098 29 80                         AND #BUTTON_A
0C09A D0 03                         BNE +
0C09C 4C CE C0                          JMP +end
0C09F                               +
0C09F                           
0C09F                               ;; Get most recent slot for explosion
0C09F A6 2B                         LDX explosion_pointer
0C0A1                           
0C0A1                               ;; If 0, use max pointer value
0C0A1 D0 02                         BNE +
0C0A3 A2 04                             LDX #MAX_ANIMATIONS
0C0A5                               +
0C0A5                           
0C0A5                               ;; Decrease pointer by one
0C0A5 CA                            DEX
0C0A6 86 2B                         STX explosion_pointer
0C0A8                           
0C0A8                               ;; Load explosion data into RAM
0C0A8 A9 00                         LDA #$00
0C0AA 9D 34 03                      STA explosion_currentframe,x
0C0AD A9 04                         LDA #ANIMATION_SPEED
0C0AF 9D 30 03                      STA explosion_framecounter,x
0C0B2 20 83 C2                      JSR sub_GetRandomNumber
0C0B5                               ;AND #%11110000
0C0B5 9D 3C 03                      STA explosion_x,x
0C0B8 20 83 C2                      JSR sub_GetRandomNumber
0C0BB                               ;AND #%11110000
0C0BB 9D 40 03                      STA explosion_y,x
0C0BE 20 83 C2                      JSR sub_GetRandomNumber
0C0C1 29 02                         AND #%00000010
0C0C3 18                            CLC
0C0C4 69 01                         ADC #$01
0C0C6 9D 38 03                      STA explosion_attributes,x
0C0C9 A9 01                         LDA #$01
0C0CB 9D 44 03                      STA explosion_active,x
0C0CE                           
0C0CE                           
0C0CE                           +end:
0C0CE                           
0C0CE                               ;; Set up loop
0C0CE A2 00                         LDX #$00
0C0D0                               -loop_load_animation:
0C0D0                                   ;; Check if current animation is active. If not, goto next
0C0D0 BD 44 03                          LDA explosion_active,x
0C0D3 D0 03                             BNE +
0C0D5 4C 6F C1                              JMP +next
0C0D8                                   +
0C0D8                           
0C0D8                                   ;; Check the explosion framecounter
0C0D8 BD 30 03                          LDA explosion_framecounter,x
0C0DB D0 26                             BNE +
0C0DD                                       ;; Framecounter is 0
0C0DD                                       ;; Reset to animation speed
0C0DD A9 04                                 LDA #ANIMATION_SPEED
0C0DF 9D 30 03                              STA explosion_framecounter,x
0C0E2                           
0C0E2                                       ;; Set next animation frame, and check if we're done yet
0C0E2 FE 34 03                              INC explosion_currentframe,x
0C0E5 BD 34 03                              LDA explosion_currentframe,x
0C0E8 C9 0A                                 CMP #ANIM_SLIDES
0C0EA D0 17                                 BNE +
0C0EC                           
0C0EC                                       ;; If we're done, inactivate current explosion, clean
0C0EC                                       ;; up sprite RAM and go to the next one
0C0EC A9 00                                 LDA #$00
0C0EE 9D 44 03                              STA explosion_active,x
0C0F1                                       
0C0F1 A9 09                                 LDA #SLIDE_SIZE
0C0F3 0A                                    ASL
0C0F4 0A                                    ASL
0C0F5 A8                                    TAY
0C0F6 A9 EF                                 LDA #$EF
0C0F8                                       -
0C0F8 88                                        DEY
0C0F9 99 00 02                                  STA ADDR_SPRITERAM,y
0C0FC C0 00                                     CPY #00
0C0FE D0 F8                                 BNE -
0C100                                       
0C100 4C 6F C1                              JMP +next
0C103                                   +
0C103                           
0C103                                   ;; Load (x,y) position in temp variables
0C103 BD 3C 03                          LDA explosion_x,x
0C106 85 01                             STA temp+1
0C108 85 03                             STA temp+3
0C10A BD 40 03                          LDA explosion_y,x
0C10D 85 02                             STA temp+2
0C10F                           
0C10F                                   ;; Load attribute in temp variable
0C10F BD 38 03                          LDA explosion_attributes,x
0C112 85 04                             STA temp+4
0C114                           
0C114                                   ;; Load current frame into Y-register
0C114 BC 34 03                          LDY explosion_currentframe,x
0C117                           
0C117                                   ;; Load current frame ROM address from table
0C117 B9 F9 C8                          LDA explosion_anim_lo,y
0C11A 85 0C                             STA pointer
0C11C B9 EF C8                          LDA explosion_anim_hi,y
0C11F 85 0D                             STA pointer+1
0C121                           
0C121                                   ;; Save x-register on stack
0C121 8A                                TXA
0C122 48                                PHA
0C123                           
0C123                                   ;; Load sprites into sprite RAM
0C123 A6 2C                             LDX sprite_ram_pointer
0C125 A0 00                             LDY #$00
0C127                           
0C127                                   ;; Prepare (x,y) offset for loop
0C127 84 00                             STY temp
0C129                           
0C129                                   -loop_load_sprite:
0C129                                   
0C129                                       ;; Do not draw empty sprites
0C129 B1 0C                                 LDA (pointer),y
0C12B F0 18                                 BEQ +nextSprite
0C12D                                   
0C12D                                           ;; Add y-position to sprite ram buffer
0C12D A5 02                                     LDA temp+2
0C12F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C132 E8                                        INX
0C133                           
0C133                                           ;; Get tile number from frame ROM address, and
0C133                                           ;; add it to sprite ram buffer
0C133 B1 0C                                     LDA (pointer),y
0C135 9D 00 02                                  STA ADDR_SPRITERAM,x
0C138 E8                                        INX
0C139                           
0C139                                           ;; Add attribute data to sprite ram buffer
0C139 A5 04                                     LDA temp+4
0C13B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13E E8                                        INX
0C13F                           
0C13F                                           ;; Add x-position to sprite ram buffer
0C13F A5 03                                     LDA temp+3
0C141 9D 00 02                                  STA ADDR_SPRITERAM,x
0C144 E8                                        INX
0C145                           
0C145                                       +nextSprite:
0C145                           
0C145                                       ;; Check if all sprites are done
0C145 C8                                    INY
0C146 C0 09                                 CPY #SLIDE_SIZE
0C148 F0 21                                 BEQ +done
0C14A                           
0C14A                                       ;; Update x value
0C14A A5 03                                 LDA temp+3
0C14C 18                                    CLC
0C14D 69 08                                 ADC #$08
0C14F 85 03                                 STA temp+3
0C151                           
0C151                                       ;; Update temp for x,y position
0C151 E6 00                                 INC temp
0C153 A5 00                                 LDA temp
0C155 C9 03                                 CMP #SLIDE_WIDTH
0C157 D0 0F                                 BNE +
0C159                                           ;; Row is done; reset x-position
0C159 A5 01                                     LDA temp+1
0C15B 85 03                                     STA temp+3
0C15D                           
0C15D                                           ;; Update y-position
0C15D A5 02                                     LDA temp+2
0C15F 18                                        CLC
0C160 69 08                                     ADC #$08
0C162 85 02                                     STA temp+2
0C164                           
0C164                                           ;; Reset row counter
0C164 A9 00                                     LDA #$00
0C166 85 00                                     STA temp
0C168                                       +
0C168                           
0C168 4C 29 C1                          JMP -loop_load_sprite
0C16B                           
0C16B                               +done:
0C16B 86 2C                             STX sprite_ram_pointer
0C16D                           
0C16D                                   ;; Retrieve x-register from stack
0C16D 68                                PLA
0C16E AA                                TAX
0C16F                           
0C16F                               +next:
0C16F                                   ;; Check if all animations have been updated
0C16F E8                                INX
0C170 E0 04                             CPX #MAX_ANIMATIONS
0C172 F0 03                             BEQ +done
0C174                           
0C174 4C D0 C0                      JMP -loop_load_animation
0C177                           +done:
0C177                           
0C177                               ;; On the game screen, the ball should move
0C177 A5 27                         LDA screen_mode
0C179 C9 01                         CMP #IS_GAME_SCREEN
0C17B F0 03                         BEQ +
0C17D 4C 60 C2                          JMP ++
0C180                               +
0C180                               .include "game/test/move_ball.asm"
0C180                           
0C180                               ;; check if position should be updated (ie. has nmi happened yet)
0C180 A5 25                         LDA ball_update_position
0C182 F0 03                         BEQ +
0C184 4C 44 C2                          JMP +skipBallMovement
0C187                               +
0C187                           
0C187                               ;; Check if ball goes up or down
0C187 A5 26                         LDA ball_flags
0C189 29 04                         AND #BALL_MOVES_DOWN
0C18B F0 24                         BEQ +moveBallUp
0C18D                           
0C18D                           
0C18D                           +moveBallDown:
0C18D                               ;; update the low byte
0C18D A5 1A                         LDA ball_ypos_lo
0C18F 18                            CLC
0C190 69 30                         ADC #BALL_SPEED_LO
0C192 85 1A                         STA ball_ypos_lo
0C194                           
0C194                               ;; update the high byte with carry
0C194 A5 19                         LDA ball_ypos_hi
0C196 69 02                         ADC #BALL_SPEED_HI
0C198 85 19                         STA ball_ypos_hi
0C19A                               
0C19A                               ;; Check bottom bound
0C19A C9 C8                         CMP #BOUND_BOTTOM
0C19C 90 32                         BCC +checkHorizontalMovement
0C19E F0 30                         BEQ +checkHorizontalMovement
0C1A0                           
0C1A0                           
0C1A0                               ;; Change ball direction to "up"
0C1A0 A9 C8                         LDA #BOUND_BOTTOM
0C1A2 85 19                         STA ball_ypos_hi
0C1A4 A9 00                         LDA #$00
0C1A6 85 1A                         STA ball_ypos_lo
0C1A8 A5 26                         LDA ball_flags
0C1AA 29 FB                         AND #MOVE_BALL_UP
0C1AC 85 26                         STA ball_flags
0C1AE 4C D0 C1                      JMP +checkHorizontalMovement
0C1B1                           
0C1B1                           
0C1B1                           +moveBallUp:
0C1B1                               ;; update the low byte
0C1B1 A5 1A                         LDA ball_ypos_lo
0C1B3 38                            SEC
0C1B4 E9 30                         SBC #BALL_SPEED_LO
0C1B6 85 1A                         STA ball_ypos_lo
0C1B8                           
0C1B8                               ;; update the high byte with carry
0C1B8 A5 19                         LDA ball_ypos_hi
0C1BA E9 02                         SBC #BALL_SPEED_HI
0C1BC 85 19                         STA ball_ypos_hi
0C1BE                               
0C1BE                               ;; Check top bound
0C1BE C9 30                         CMP #BOUND_TOP
0C1C0 B0 0E                         BCS +checkHorizontalMovement
0C1C2                           
0C1C2                               ;; Change ball direction to "down"
0C1C2 A9 30                         LDA #BOUND_TOP
0C1C4 85 19                         STA ball_ypos_hi
0C1C6 A9 00                         LDA #$00
0C1C8 85 1A                         STA ball_ypos_lo
0C1CA A5 26                         LDA ball_flags
0C1CC 09 04                         ORA #MOVE_BALL_DOWN
0C1CE 85 26                         STA ball_flags
0C1D0                           
0C1D0                           
0C1D0                           +checkHorizontalMovement:
0C1D0                           
0C1D0                               ;; Check if ball is being nudged
0C1D0 A5 2D                         LDA nudge_counter
0C1D2 D0 47                         BNE +doneBallMovement
0C1D4                           
0C1D4                               ;; Check if left button is held
0C1D4 A5 0F                         LDA buttons_held
0C1D6 29 02                         AND #BUTTON_LEFT
0C1D8 F0 1E                         BEQ +
0C1DA                                   ;; update the low byte
0C1DA A5 18                             LDA ball_xpos_lo
0C1DC 38                                SEC
0C1DD E9 30                             SBC #BALL_SPEED_LO
0C1DF 85 18                             STA ball_xpos_lo
0C1E1                           
0C1E1                                   ;; update the high byte
0C1E1 A5 17                             LDA ball_xpos_hi
0C1E3 E9 02                             SBC #BALL_SPEED_HI
0C1E5 85 17                             STA ball_xpos_hi
0C1E7                                   
0C1E7                                   ;; Check left bound
0C1E7 C9 10                             CMP #BOUND_LEFT
0C1E9 B0 30                             BCS +doneBallMovement
0C1EB                                   
0C1EB                                   ;; Set flag to nudge right
0C1EB A5 26                             LDA ball_flags
0C1ED 09 02                             ORA #NUDGE_BALL_RIGHT
0C1EF 85 26                             STA ball_flags
0C1F1                                   
0C1F1                                   ;; Set nudge timer
0C1F1 A9 03                             LDA #NUDGE_FRAMES
0C1F3 85 2D                             STA nudge_counter
0C1F5                                   
0C1F5                           
0C1F5 4C 1B C2                          JMP +doneBallMovement        
0C1F8                               +
0C1F8                           
0C1F8                               ;; Check if right button is held
0C1F8 A5 0F                         LDA buttons_held
0C1FA 29 01                         AND #BUTTON_RIGHT
0C1FC F0 1D                         BEQ +
0C1FE                                   ;; update the low byte
0C1FE A5 18                             LDA ball_xpos_lo
0C200 18                                CLC
0C201 69 30                             ADC #BALL_SPEED_LO
0C203 85 18                             STA ball_xpos_lo
0C205                           
0C205                                   ;; update the high byte
0C205 A5 17                             LDA ball_xpos_hi
0C207 69 02                             ADC #BALL_SPEED_HI
0C209 85 17                             STA ball_xpos_hi     
0C20B                           
0C20B                                  ;; Check right bound
0C20B C9 E8                             CMP #BOUND_RIGHT
0C20D 90 0C                             BCC +doneBallMovement
0C20F F0 0A                             BEQ +doneBallMovement
0C211                                   
0C211                                   ;; Set flag to nudge right
0C211 A5 26                             LDA ball_flags
0C213 29 FD                             AND #NUDGE_BALL_LEFT
0C215 85 26                             STA ball_flags
0C217                                   
0C217                                   ;; Set nudge timer
0C217 A9 03                             LDA #NUDGE_FRAMES
0C219 85 2D                             STA nudge_counter
0C21B                               +
0C21B                           
0C21B                           
0C21B                           +doneBallMovement:
0C21B                           
0C21B                               ;; Check nudge
0C21B A5 2D                         LDA nudge_counter
0C21D F0 23                         BEQ +doneBallNudging
0C21F A5 26                             LDA ball_flags
0C221 29 02                             AND #NUDGE_BALL_RIGHT
0C223 F0 10                             BEQ +nudgeBallLeft
0C225                                   
0C225                                       ;; update the low byte
0C225 A5 18                                 LDA ball_xpos_lo
0C227 18                                    CLC
0C228 69 30                                 ADC #BALL_SPEED_LO
0C22A 85 18                                 STA ball_xpos_lo
0C22C                           
0C22C                                       ;; update the high byte
0C22C A5 17                                 LDA ball_xpos_hi
0C22E 69 02                                 ADC #BALL_SPEED_HI
0C230 85 17                                 STA ball_xpos_hi  
0C232 4C 42 C2                              JMP +doneBallNudging
0C235                                   +nudgeBallLeft:
0C235                                   
0C235                                   ;; update the low byte
0C235 A5 18                             LDA ball_xpos_lo
0C237 38                                SEC
0C238 E9 30                             SBC #BALL_SPEED_LO
0C23A 85 18                             STA ball_xpos_lo
0C23C                           
0C23C                                   ;; update the high byte
0C23C A5 17                             LDA ball_xpos_hi
0C23E E9 02                             SBC #BALL_SPEED_HI
0C240 85 17                             STA ball_xpos_hi
0C242                               +doneBallNudging:
0C242                           
0C242                               ;; Don't update position again until next frame
0C242 E6 25                         INC ball_update_position
0C244                           
0C244                           
0C244                           
0C244                           +skipBallMovement:
0C244                               ;; Add to sprite buffer
0C244 A6 2C                         LDX sprite_ram_pointer
0C246 A5 19                         LDA ball_ypos_hi
0C248 9D 00 02                      STA ADDR_SPRITERAM,x
0C24B E8                            INX
0C24C A9 01                         LDA #BALL_TILE_CHR
0C24E 9D 00 02                      STA ADDR_SPRITERAM,x
0C251 E8                            INX
0C252 A9 00                         LDA #BALL_ATTR
0C254 9D 00 02                      STA ADDR_SPRITERAM,x
0C257 E8                            INX
0C258 A5 17                         LDA ball_xpos_hi
0C25A 9D 00 02                      STA ADDR_SPRITERAM,x
0C25D E8                            INX
0C25E 86 2C                         STX sprite_ram_pointer
0C260                           
0C260                               ++
0C260                               
0C260                               ;; Upon pressing START, (next level) design will be drawn
0C260                               .include "game/test/load_next_level.asm"
0C260                               ;; If START button is pressed
0C260 A5 10                         LDA buttons_pressed
0C262 29 10                         AND #BUTTON_START
0C264 F0 10                         BEQ +continue
0C266                                   ;; Load the next level
0C266 E6 2E                             INC current_level
0C268 A5 2E                             LDA current_level
0C26A C9 0A                             CMP #10
0C26C D0 04                             BNE +
0C26E A9 00                                 LDA #$00
0C270 85 2E                                 STA current_level
0C272                                   +
0C272                                   
0C272 A9 81                             LDA #LOAD_GAME_SCREEN
0C274 85 27                             STA screen_mode
0C276                           
0C276                               +continue:
0C276                           
0C276                           
0C276                           
0C276                               ;; Sprite clean-up
0C276 A6 2C                         LDX sprite_ram_pointer
0C278 A9 EF                         LDA #$EF
0C27A                               -
0C27A 9D 00 02                          STA ADDR_SPRITERAM,x
0C27D E8                                INX
0C27E D0 FA                         BNE -
0C280 4C 57 C0                      JMP MainGameLoop
0C283                           
0C283                           ;; Subroutines
0C283                           .include "include/subroutines.asm"
0C283                           
0C283                           ;; RNG
0C283                           .include "subroutine/GetRandomNumber.asm"
0C283                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C283                           ;;
0C283                           ;; subroutine/GetRandomNumber.asm
0C283                           ;;
0C283                           ;; Simple and fast random number generator by White Flame.
0C283                           ;;
0C283                           ;; Set random_seed to an arbitrary number to randomize between
0C283                           ;; gaming sessions, for instance using the frame counter upon
0C283                           ;; pressing START on the intro screen.
0C283                           ;;
0C283                           ;;     ;; IF START PRESSED:
0C283                           ;;     LDA frame_counter
0C283                           ;;     STA random_seed
0C283                           ;;
0C283                           ;; Source:
0C283                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C283                           ;;
0C283                           ;;
0C283                           
0C283                           sub_GetRandomNumber:
0C283                               ;; Force EOR if random_seed is zero
0C283 A5 16                         LDA random_seed
0C285 F0 05                         BEQ +doEor
0C287                           
0C287                               ;; Shift left, and EOR if the high bit is set
0C287 0A                            ASL
0C288 F0 04                         BEQ +noEor
0C28A 90 02                         BCC +noEor
0C28C                           
0C28C                           +doEor:
0C28C 49 1D                         EOR #$1D
0C28E                           
0C28E                           +noEor:
0C28E 85 16                         STA random_seed
0C290                           
0C290 60                            RTS
0C291                           
0C291                           
0C291                           ;; Read controller input
0C291                           .include "subroutine/ReadController.asm"
0C291                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C291                           ;;
0C291                           ;; subroutine/ReadController.asm
0C291                           ;;
0C291                           ;; Subroutine that polls the controller and stores the input
0C291                           ;; buttons in a variable. This version only handles controller
0C291                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C291                           ;;
0C291                           ;;
0C291                           
0C291                           sub_ReadController:
0C291                           
0C291                               ;; Set strobe bit
0C291 A9 01                         LDA #$01
0C293 8D 16 40                      STA JOYPAD_1
0C296                           
0C296                               ;; Set up ring counter
0C296 85 0F                         STA buttons_held
0C298                           
0C298                               ;; Clear strobe bit
0C298 4A                            LSR
0C299 8D 16 40                      STA JOYPAD_1
0C29C                           
0C29C                               ;; Loop through button presses
0C29C                               -
0C29C AD 16 40                          LDA JOYPAD_1
0C29F 4A                                LSR
0C2A0 26 0F                             ROL buttons_held
0C2A2                           
0C2A2                               ;; Check if ring counter is done
0C2A2 90 F8                         BCC -
0C2A4                           
0C2A4                               ;; Return from subroutine
0C2A4 60                            RTS
0C2A5                           
0C2A5                           
0C2A5                           ;; vBlank wait
0C2A5                           .include "subroutine/WaitForVBlank.asm"
0C2A5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C2A5                           ;;
0C2A5                           ;; subroutine/WaitForVBlank.asm
0C2A5                           ;;
0C2A5                           ;; Subroutine that essentially pauses script execution until
0C2A5                           ;; vBlank happens.
0C2A5                           ;;
0C2A5                           ;;
0C2A5                           
0C2A5                           sub_WaitForVBlank:
0C2A5 2C 02 20                      BIT $2002
0C2A8 10 FB                         BPL sub_WaitForVBlank
0C2AA 60                            RTS
0C2AB                           
0C2AB                           
0C2AB                           ;; Game specific subroutines
0C2AB                           .include "game/include/subroutines.asm"
0C2AB                           ;; additional game-specific subroutines go here
0C2AB                           
0C2AB                           .include "game/subroutine/ClearScreen.asm"
0C2AB                           ;; Subroutine to clear the screen
0C2AB                           ;; If it's a game screen, add noise
0C2AB                           
0C2AB                           sub_ClearScreen:
0C2AB                               ;; Check of game screen or not
0C2AB A5 27                         LDA screen_mode
0C2AD 29 03                         AND #CHECK_SCREEN_MODE
0C2AF C9 01                         CMP #IS_GAME_SCREEN
0C2B1 F0 02                         BEQ +
0C2B3 A9 00                             LDA #$00
0C2B5                               +
0C2B5 85 01                         STA temp+1
0C2B7                               
0C2B7                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C2B7 2C 02 20                      BIT PPU_STATUS
0C2BA A9 20                         LDA #$20
0C2BC 8D 06 20                      STA PPU_ADDR
0C2BF A9 00                         LDA #$00
0C2C1 8D 06 20                      STA PPU_ADDR
0C2C4                               
0C2C4                               ;; Set up tile to draw and loop
0C2C4 85 00                         STA temp
0C2C6 AA                            TAX
0C2C7 A8                            TAY
0C2C8                           
0C2C8                               -     
0C2C8                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C2C8 A5 00                             LDA temp
0C2CA 8D 07 20                          STA PPU_DATA
0C2CD                           
0C2CD                                   ;; Check if we should draw noise next. Noise is drawn if:
0C2CD                                   ;; - Screen mode is game screen
0C2CD                                   ;; - Y between #$06 and #$19 (inclusive)
0C2CD                                   ;; - X between #$02 and #$1D (inclusive)
0C2CD                                   
0C2CD                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C2CD A5 01                             LDA temp+1
0C2CF F0 1C                             BEQ +nextTileInRow
0C2D1                                   
0C2D1                                   ;; If Y < $6, skip the check
0C2D1 C0 06                             CPY #$06
0C2D3 90 18                             BCC +nextTileInRow
0C2D5                                   
0C2D5                                   ;; If X < $1, skip the check
0C2D5 E0 01                             CPX #$01
0C2D7 90 14                             BCC +nextTileInRow
0C2D9                                   
0C2D9                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C2D9 E0 1D                             CPX #$1D
0C2DB D0 04                             BNE +
0C2DD A9 00                                 LDA #$00
0C2DF 85 00                                 STA temp
0C2E1                                   +
0C2E1 B0 0A                             BCS +nextTileInRow
0C2E3                                   
0C2E3                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C2E3 20 83 C2                          JSR sub_GetRandomNumber
0C2E6 29 07                             AND #%00000111
0C2E8 18                                CLC
0C2E9 69 68                             ADC #$68
0C2EB 85 00                             STA temp
0C2ED                           
0C2ED                           +nextTileInRow:
0C2ED                                   
0C2ED                                   ;; Check if a row has been done. If not, draw the next
0C2ED E8                                INX
0C2EE E0 20                             CPX #$20
0C2F0 D0 D6                             BNE -
0C2F2                                   
0C2F2                                   ;; Go to the next row (if any left)
0C2F2 A2 00                             LDX #00
0C2F4 C8                                INY
0C2F5                                   
0C2F5                                   ;; If Y is 1A, skip noise tile check until done drawing
0C2F5 C0 1A                             CPY #$1A
0C2F7 D0 04                             BNE +
0C2F9 A9 00                                 LDA #$00
0C2FB 85 01                                 STA temp+1
0C2FD                                   +
0C2FD                                   
0C2FD C0 1E                             CPY #$1E
0C2FF D0 C7                         BNE -
0C301                           
0C301                               ;; Clear attribute table
0C301 A9 23                         LDA #$23
0C303 8D 06 20                      STA PPU_ADDR
0C306 A9 C0                         LDA #$C0
0C308 8D 06 20                      STA PPU_ADDR
0C30B A9 00                         LDA #$00
0C30D A2 40                         LDX #$40
0C30F                               -
0C30F 8D 07 20                          STA PPU_DATA
0C312 CA                                DEX
0C313 D0 FA                         BNE -
0C315                               
0C315 60                            RTS0C316                           .include "game/subroutine/ColorizeBall.asm"
0C316                           sub_ColorizeBall:
0C316                           
0C316                               ;; Update color in ball flags
0C316 85 00                         STA temp
0C318 A5 26                         LDA ball_flags
0C31A 29 1F                         AND #%00011111
0C31C 05 00                         ORA temp
0C31E 85 26                         STA ball_flags
0C320                           
0C320                               ;; Add new light color of ball to PPU palette
0C320 A9 3F                         LDA #$3F
0C322 85 00                         STA temp
0C324 A9 11                         LDA #$11
0C326 85 01                         STA temp+1
0C328 BD 09 C9                      LDA tbl_BallColorLight,x
0C32B 85 02                         STA temp+2
0C32D 20 A5 C7                      JSR sub_WriteByteToPPUBuffer
0C330                               
0C330                               ;; Add new dark color of ball to PPU palette
0C330 E6 01                         INC temp+1
0C332 BD 03 C9                      LDA tbl_BallColorDark,x
0C335 85 02                         STA temp+2
0C337 20 A5 C7                      JSR sub_WriteByteToPPUBuffer
0C33A                               
0C33A 60                            RTS0C33B                           .include "game/subroutine/DisableEnableRendering.asm"
0C33B                           sub_DisableRendering:
0C33B                               ;; Force NMI skip, disable rendering
0C33B A9 01                     	LDA #$01
0C33D 85 14                     	STA force_skip_nmi
0C33F 20 A5 C2                      JSR sub_WaitForVBlank
0C342 A5 12                         LDA soft_ppu_mask
0C344 29 E7                         AND #%11100111
0C346 8D 01 20                      STA PPU_MASK
0C349 85 12                         STA soft_ppu_mask
0C34B 20 A5 C2                      JSR sub_WaitForVBlank
0C34E 60                            RTS
0C34F                           
0C34F                           sub_EnableRendering:
0C34F                               ;; Enable rendering
0C34F A9 00                     	LDA #$00
0C351 8D 05 20                  	STA PPU_SCROLL
0C354 8D 05 20                  	STA PPU_SCROLL
0C357 20 A5 C2                      JSR sub_WaitForVBlank
0C35A 85 14                     	STA force_skip_nmi
0C35C A5 12                         LDA soft_ppu_mask
0C35E 09 18                         ORA #%00011000
0C360 85 12                         STA soft_ppu_mask
0C362 8D 01 20                      STA PPU_MASK
0C365 20 A5 C2                      JSR sub_WaitForVBlank
0C368 60                            RTS
0C369                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C369                           sub_drawIntroScreenLogoTile:
0C369 B9 EB C7                      LDA tbl_IntroScreenLogoChr,y
0C36C C9 60                         CMP #$60
0C36E D0 08                         BNE +
0C370 20 83 C2                          JSR sub_GetRandomNumber
0C373 29 07                             AND #$07
0C375 18                                CLC
0C376 69 60                             ADC #$60
0C378                               +
0C378 8D 07 20                      STA PPU_DATA
0C37B 60                            RTS
0C37C                           .include "game/subroutine/JumpToPointer.asm"
0C37C                           sub_JumpToPointer:
0C37C 6C 0C 00                      JMP (pointer)
0C37F                               ;RTS must be handled by the routine (pointer) jumps to
0C37F                           .include "game/subroutine/LoadGameScreen.asm"
0C37F                           sub_LoadGameScreen:
0C37F                           
0C37F                               ;; Clear the screen
0C37F 20 AB C2                      JSR sub_ClearScreen
0C382                               
0C382                               ;; Clear collision and attribute data
0C382 A2 00                         LDX #$00
0C384 8A                            TXA
0C385                               -
0C385 9D 00 04                          STA tile_type,x
0C388 E8                                INX
0C389 D0 FA                         BNE -
0C38B                               
0C38B                               ;; Get pointer from current level
0C38B A6 2E                         LDX current_level
0C38D BD E3 CB                      LDA tbl_lvl_layout_lo,x
0C390 85 0C                         STA pointer
0C392 BD CA CB                      LDA tbl_lvl_layout_hi,x
0C395 85 0D                         STA pointer+1
0C397                           
0C397                               ;; Set up the loop
0C397 A0 00                         LDY #$00
0C399                           -drawRowColumnLoop:
0C399                           
0C399                               ;; Load (x,y) of current set of tiles
0C399 B1 0C                         LDA (pointer),y
0C39B                           
0C39B                               ;; Check if level is done; if so, skip the loop
0C39B C9 FF                         CMP #LEVEL_END
0C39D D0 03                         BNE +
0C39F 4C E8 C4                          JMP +doneLevelLoad
0C3A2                               +
0C3A2                           
0C3A2                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C3A2 85 00                         STA temp
0C3A4 C8                            INY
0C3A5 B1 0C                         LDA (pointer),y
0C3A7 85 01                         STA temp+1
0C3A9                               
0C3A9                               ;; Convert (x,y) to PPU address
0C3A9                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C3A9 A5 00                         LDA temp
0C3AB 29 0F                         AND #%00001111
0C3AD 4A                            LSR
0C3AE 4A                            LSR
0C3AF 09 20                         ORA #$20
0C3B1 85 02                         STA temp+2
0C3B3                               
0C3B3                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C3B3 A5 00                         LDA temp
0C3B5 29 F0                         AND #%11110000
0C3B7 4A                            LSR
0C3B8 4A                            LSR
0C3B9 4A                            LSR
0C3BA 85 03                         STA temp+3
0C3BC                               
0C3BC A5 00                         LDA temp
0C3BE 29 03                         AND #%00000011
0C3C0 AA                            TAX
0C3C1 BD 2E CC                      LDA tbl_Times64,x
0C3C4 18                            CLC
0C3C5 65 03                         ADC temp+3
0C3C7 18                            CLC
0C3C8 69 C2                         ADC #$C2
0C3CA 85 03                         STA temp+3
0C3CC                               
0C3CC                               ;; Add carry to temp+2
0C3CC A5 02                         LDA temp+2
0C3CE 69 00                         ADC #$00
0C3D0 85 02                         STA temp+2
0C3D2                           
0C3D2                               ;; Convert tile data to loop count and tile type
0C3D2                               ;; temp+4 = color
0C3D2 A5 01                         LDA temp+1
0C3D4 29 07                         AND #%00000111
0C3D6 85 04                         STA temp+4
0C3D8                               
0C3D8                               ;; If color = 7, this is a wall
0C3D8 C9 07                         CMP #%00000111
0C3DA F0 12                         BEQ +wallHack
0C3DC                                   
0C3DC                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C3DC 29 01                             AND #%00000001
0C3DE F0 02                             BEQ +
0C3E0 A9 05                                 LDA #$05
0C3E2                                   +
0C3E2 85 07                             STA temp+7
0C3E4                                
0C3E4                                   ;; temp+5 = tile type
0C3E4 A5 01                             LDA temp+1
0C3E6 4A                                LSR
0C3E7 4A                                LSR
0C3E8 4A                                LSR
0C3E9 29 03                             AND #%00000011
0C3EB 4C F4 C3                          JMP +setTileType
0C3EE                               +wallHack:
0C3EE                               
0C3EE                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C3EE A9 00                         LDA #$00
0C3F0 85 07                         STA temp+7
0C3F2 A9 04                         LDA #$04
0C3F4                           
0C3F4                           +setTileType:    
0C3F4 85 05                         STA temp+5
0C3F6                               
0C3F6                               ;; X = tile offset
0C3F6 18                            CLC
0C3F7 65 07                         ADC temp+7
0C3F9 AA                            TAX
0C3FA                               
0C3FA                               ;; temp+6 = number of tiles
0C3FA A5 01                         LDA temp+1
0C3FC 29 60                         AND #%01100000
0C3FE 4A                            LSR
0C3FF 4A                            LSR
0C400 4A                            LSR
0C401 4A                            LSR
0C402 4A                            LSR
0C403 85 06                         STA temp+6
0C405                               
0C405                               ;; Translate (x,y) to (y,x) for tile RAM
0C405 A5 00                         LDA temp
0C407 0A                            ASL
0C408 0A                            ASL
0C409 0A                            ASL
0C40A 0A                            ASL
0C40B 85 08                         STA temp+8
0C40D A5 00                         LDA temp
0C40F 4A                            LSR
0C410 4A                            LSR
0C411 4A                            LSR
0C412 4A                            LSR
0C413 05 08                         ORA temp+8
0C415 85 00                         STA temp
0C417                               
0C417                               ;; Set up loop
0C417 98                            TYA
0C418 48                            PHA
0C419 A4 06                         LDY temp+6
0C41B                           
0C41B                               -drawTileLoop:
0C41B                                   ;; Write PPU address
0C41B 2C 02 20                          BIT PPU_STATUS
0C41E A5 02                             LDA temp+2
0C420 8D 06 20                          STA PPU_ADDR
0C423 A5 03                             LDA temp+3
0C425 8D 06 20                          STA PPU_ADDR
0C428                                   
0C428                                   ;; Write first and second tile
0C428 BD 32 CC                          LDA tbl_GametileTopLeft,x
0C42B 8D 07 20                          STA PPU_DATA
0C42E BD 3C CC                          LDA tbl_GametileTopRight,x
0C431 8D 07 20                          STA PPU_DATA
0C434                                   
0C434                                   ;; Update PPU address
0C434 2C 02 20                          BIT PPU_STATUS
0C437 A5 02                             LDA temp+2
0C439 8D 06 20                          STA PPU_ADDR
0C43C A5 03                             LDA temp+3
0C43E 18                                CLC
0C43F 69 20                             ADC #$20
0C441 8D 06 20                          STA PPU_ADDR
0C444                                   
0C444                                   ;; Write third and fourth tile
0C444 BD 46 CC                          LDA tbl_GametileBottomLeft,x
0C447 8D 07 20                          STA PPU_DATA
0C44A BD 50 CC                          LDA tbl_GametileBottomRight,x
0C44D 8D 07 20                          STA PPU_DATA
0C450                           
0C450                                   ;; Push x-register to stack
0C450 8A                                TXA
0C451 48                                PHA
0C452                                   
0C452                                   ;; Update tile RAM (aka collision table)
0C452 A6 05                             LDX temp+5
0C454 BD 5A CC                          LDA tbl_GameTileRamByte,x
0C457 05 04                             ORA temp+4
0C459 0A                                ASL
0C45A 09 01                             ORA #%00000001
0C45C A6 00                             LDX temp
0C45E 9D 00 04                          STA tile_type,x
0C461                           
0C461                                   ;; Check if shade 1 should be drawn
0C461 E8                                INX
0C462 BD 00 04                          LDA tile_type,x
0C465 D0 05                             BNE +
0C467 A9 00                                 LDA #$00
0C469 8D 07 20                              STA PPU_DATA
0C46C                                   +
0C46C                                   
0C46C                                   ;; Check if shade 2 should be drawn
0C46C A5 03                             LDA temp+3
0C46E 18                                CLC
0C46F 69 41                             ADC #$41
0C471 85 03                             STA temp+3
0C473 A5 02                             LDA temp+2
0C475 69 00                             ADC #$00
0C477 85 02                             STA temp+2
0C479                                   
0C479 8A                                TXA
0C47A 18                                CLC
0C47B 69 0F                             ADC #$0F
0C47D AA                                TAX
0C47E                                   
0C47E BD 00 04                          LDA tile_type,x
0C481 D0 0F                             BNE +
0C483 A5 02                                 LDA temp+2
0C485 8D 06 20                              STA PPU_ADDR
0C488 A5 03                                 LDA temp+3
0C48A 8D 06 20                              STA PPU_ADDR
0C48D A9 00                                 LDA #$00
0C48F 8D 07 20                              STA PPU_DATA
0C492                                   +
0C492                           
0C492                                   ;; Check if shade 3 should be drawn
0C492 E8                                INX
0C493 E6 03                             INC temp+3
0C495 BD 00 04                          LDA tile_type,x
0C498 D0 0F                             BNE +
0C49A A5 02                                 LDA temp+2
0C49C 8D 06 20                              STA PPU_ADDR
0C49F A5 03                                 LDA temp+3
0C4A1 8D 06 20                              STA PPU_ADDR
0C4A4 A9 00                                 LDA #$00
0C4A6 8D 07 20                              STA PPU_DATA
0C4A9                                   +
0C4A9                                   
0C4A9                                   ;; Restore x-register from stack
0C4A9 68                                PLA
0C4AA AA                                TAX
0C4AB                                   
0C4AB                                   ;; Reset pointer for next tile
0C4AB A5 03                             LDA temp+3
0C4AD 38                                SEC
0C4AE E9 42                             SBC #$42
0C4B0 85 03                             STA temp+3
0C4B2 A5 02                             LDA temp+2
0C4B4 E9 00                             SBC #$00
0C4B6 85 02                             STA temp+2
0C4B8                                   
0C4B8                                   ;; Draw next metatile in this loop (if any left)
0C4B8 88                                DEY
0C4B9 30 27                             BMI +doneDrawingRowColumn
0C4BB                                   
0C4BB                                   ;; Is it a row or a column?
0C4BB A5 01                             LDA temp+1
0C4BD 10 17                             BPL +
0C4BF                                       ;; It is a column: move pointer down (+$40)
0C4BF A5 03                                 LDA temp+3
0C4C1 18                                    CLC
0C4C2 69 40                                 ADC #$40
0C4C4 85 03                                 STA temp+3
0C4C6 A5 02                                 LDA temp+2
0C4C8 69 00                                 ADC #$00
0C4CA 85 02                                 STA temp+2
0C4CC                                       
0C4CC                                       ;; Add 16 to temp (as a tile RAM pointer)
0C4CC A5 00                                 LDA temp
0C4CE 18                                    CLC
0C4CF 69 10                                 ADC #$10
0C4D1 85 00                                 STA temp
0C4D3 4C DF C4                              JMP +drawNextTile
0C4D6                                   +
0C4D6                                   
0C4D6                                   ;; It is a row: move pointer right (+$02)
0C4D6 A5 03                             LDA temp+3
0C4D8 18                                CLC
0C4D9 69 02                             ADC #$02
0C4DB 85 03                             STA temp+3
0C4DD                                   
0C4DD                                   ;; Add 1 to temp (as a tile RAM pointer)
0C4DD E6 00                             INC temp
0C4DF                           
0C4DF                               
0C4DF                               ;; Next tile in the row/column
0C4DF                                   +drawNextTile:
0C4DF 4C 1B C4                      JMP -drawTileLoop
0C4E2                           
0C4E2                               ;; Go to the next set of tiles
0C4E2                           +doneDrawingRowColumn:
0C4E2 68                            PLA
0C4E3 A8                            TAY
0C4E4 C8                            INY
0C4E5 4C 99 C3                      JMP -drawRowColumnLoop
0C4E8                           
0C4E8                           ;; Level loading is done
0C4E8                           +doneLevelLoad:
0C4E8                           
0C4E8                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C4E8 A9 20                         LDA #$20
0C4EA 8D 06 20                      STA PPU_ADDR
0C4ED A9 A2                         LDA #$A2
0C4EF 8D 06 20                      STA PPU_ADDR
0C4F2 A9 35                         LDA #$35
0C4F4 20 0C C7                      JSR sub_Draw28HorizontalTiles
0C4F7                           
0C4F7                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C4F7 A9 23                         LDA #$23
0C4F9 8D 06 20                      STA PPU_ADDR
0C4FC A9 42                         LDA #$42
0C4FE 8D 06 20                      STA PPU_ADDR
0C501 A9 31                         LDA #$31
0C503 20 0C C7                      JSR sub_Draw28HorizontalTiles
0C506                           
0C506                               ;; Left & right game bounds
0C506                               ;; Set PPU_ADDR and store in temp variables
0C506 A9 20                         LDA #$20
0C508 85 00                         STA temp
0C50A 8D 06 20                      STA PPU_ADDR
0C50D A9 C1                         LDA #$C1
0C50F 85 01                         STA temp+1
0C511 8D 06 20                      STA PPU_ADDR
0C514                               
0C514                               ;; Set vertical bound tile and set up loop
0C514 A0 33                         LDY #$33
0C516 A2 14                         LDX #20
0C518                               -
0C518                                   ;; Show left tile
0C518 8C 07 20                          STY PPU_DATA
0C51B                                   
0C51B                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C51B A5 00                             LDA temp
0C51D 8D 06 20                          STA PPU_ADDR
0C520 A5 01                             LDA temp+1
0C522 18                                CLC
0C523 69 1D                             ADC #29
0C525 85 01                             STA temp+1
0C527 8D 06 20                          STA PPU_ADDR
0C52A                           
0C52A                                   ;; Show right tile
0C52A 8C 07 20                          STY PPU_DATA
0C52D                           
0C52D                                   ;; Check if we're done yet
0C52D CA                                DEX
0C52E F0 18                             BEQ +drawCorners
0C530                                   
0C530                                   ;; Not done yet: add 3 to low byte for next left bound
0C530 A5 01                             LDA temp+1
0C532 18                                CLC
0C533 69 03                             ADC #3
0C535 85 01                             STA temp+1
0C537                                   
0C537                                   ;; Apply carry to high byte
0C537 A5 00                             LDA temp
0C539 69 00                             ADC #$00
0C53B 85 00                             STA temp
0C53D                                   
0C53D                                   ;; Store next PPU_ADDR to draw at
0C53D 8D 06 20                          STA PPU_ADDR
0C540 A5 01                             LDA temp+1
0C542 8D 06 20                          STA PPU_ADDR
0C545 4C 18 C5                      JMP -
0C548                               
0C548                               
0C548                           
0C548                           +drawCorners:
0C548                               ;; Draw the corners of the playing field
0C548 A9 20                         LDA #$20
0C54A 8D 06 20                      STA PPU_ADDR
0C54D A9 A1                         LDA #$A1
0C54F 8D 06 20                      STA PPU_ADDR
0C552 A9 39                         LDA #$39
0C554 8D 07 20                      STA PPU_DATA
0C557                           
0C557 A9 20                         LDA #$20
0C559 8D 06 20                      STA PPU_ADDR
0C55C A9 BE                         LDA #$BE
0C55E 8D 06 20                      STA PPU_ADDR
0C561 A9 3A                         LDA #$3A
0C563 8D 07 20                      STA PPU_DATA
0C566                           
0C566 A9 23                         LDA #$23
0C568 8D 06 20                      STA PPU_ADDR
0C56B A9 41                         LDA #$41
0C56D 8D 06 20                      STA PPU_ADDR
0C570 A9 36                         LDA #$36
0C572 8D 07 20                      STA PPU_DATA
0C575                           
0C575 A9 23                         LDA #$23
0C577 8D 06 20                      STA PPU_ADDR
0C57A A9 5E                         LDA #$5E
0C57C 8D 06 20                      STA PPU_ADDR
0C57F A9 34                         LDA #$34
0C581 8D 07 20                      STA PPU_DATA
0C584                           
0C584                           
0C584                               ;; Draw the hud labels
0C584 A9 20                         LDA #$20
0C586 8D 06 20                      STA PPU_ADDR
0C589 A9 62                         LDA #$62
0C58B 8D 06 20                      STA PPU_ADDR
0C58E A2 00                         LDX #$00
0C590                               -
0C590 BD 5F CC                          LDA tbl_HudText,x
0C593 8D 07 20                          STA PPU_DATA
0C596 E8                                INX
0C597 E0 1C                             CPX #28
0C599 D0 F5                         BNE -
0C59B                           
0C59B                           
0C59B                               ;; Draw the current score
0C59B A9 20                         LDA #$20
0C59D 8D 06 20                      STA PPU_ADDR
0C5A0 A9 83                         LDA #$83
0C5A2 8D 06 20                      STA PPU_ADDR
0C5A5 A2 00                         LDX #$00
0C5A7                               -
0C5A7 B5 1C                             LDA ball_score,x
0C5A9 18                                CLC
0C5AA 69 01                             ADC #$01
0C5AC 8D 07 20                          STA PPU_DATA
0C5AF E8                                INX
0C5B0 E0 06                             CPX #$06
0C5B2 D0 F3                         BNE -
0C5B4                           
0C5B4                           
0C5B4                               ;; Draw the level number
0C5B4                               ;; (with primitive HEX>DEC)
0C5B4 A5 2E                         LDA current_level
0C5B6 18                            CLC
0C5B7 69 01                         ADC #$01
0C5B9 85 01                         STA temp+1
0C5BB                               
0C5BB C9 14                         CMP #20
0C5BD B0 13                         BCS +tempIsTwo
0C5BF                               
0C5BF C9 0A                         CMP #10
0C5C1 B0 05                         BCS +tempIsOne
0C5C3                               
0C5C3 A9 00                         LDA #$00
0C5C5 4C D9 C5                      JMP +setTemp
0C5C8                               
0C5C8                           +tempIsOne:
0C5C8 38                            SEC
0C5C9 E9 0A                         SBC #10
0C5CB 85 01                         STA temp+1
0C5CD A9 01                         LDA #$01
0C5CF 4C D9 C5                      JMP +setTemp
0C5D2                               
0C5D2                           +tempIsTwo:
0C5D2 38                            SEC
0C5D3 E9 14                         SBC #20
0C5D5 85 01                         STA temp+1
0C5D7 A9 02                         LDA #$02
0C5D9                           
0C5D9                           +setTemp:
0C5D9 85 00                         STA temp
0C5DB                               
0C5DB E6 00                         INC temp
0C5DD E6 01                         INC temp+1
0C5DF                               
0C5DF A9 20                         LDA #$20
0C5E1 8D 06 20                      STA PPU_ADDR
0C5E4 A9 8B                         LDA #$8B
0C5E6 8D 06 20                      STA PPU_ADDR
0C5E9 A5 00                         LDA temp
0C5EB 8D 07 20                      STA PPU_DATA
0C5EE A5 01                         LDA temp+1
0C5F0 8D 07 20                      STA PPU_DATA
0C5F3                           
0C5F3                           
0C5F3                               ;; Draw lives (presumes lives to be capped at 9)
0C5F3 A9 20                         LDA #$20
0C5F5 8D 06 20                      STA PPU_ADDR
0C5F8 A9 92                         LDA #$92
0C5FA 8D 06 20                      STA PPU_ADDR
0C5FD A6 1B                         LDX ball_lives
0C5FF E8                            INX
0C600 8E 07 20                      STX PPU_DATA
0C603                           
0C603                           
0C603                               ;; Set and draw bonus
0C603 A9 07                         LDA #$07
0C605 85 22                         STA ball_bonus
0C607 A9 09                         LDA #$09
0C609 85 23                         STA ball_bonus+1
0C60B 85 24                         STA ball_bonus+2
0C60D                               
0C60D A9 20                         LDA #$20
0C60F 8D 06 20                      STA PPU_ADDR
0C612 A9 9A                         LDA #$9A
0C614 8D 06 20                      STA PPU_ADDR
0C617 A2 00                         LDX #$00
0C619                               -
0C619 B5 22                             LDA ball_bonus,x
0C61B 18                                CLC
0C61C 69 01                             ADC #$01
0C61E 8D 07 20                          STA PPU_DATA
0C621 E8                                INX
0C622 E0 03                             CPX #$03
0C624 D0 F3                         BNE -
0C626                           
0C626                           
0C626                               ;; Set attribute data to RAM
0C626                               
0C626                               ;; Byte 0-7 of attribute ram should be #%10100000
0C626 A2 00                         LDX #$00
0C628 A9 A0                         LDA #$A0
0C62A                               -
0C62A 9D A0 04                          STA tile_attributes,x
0C62D E8                                INX
0C62E E0 08                             CPX #$08
0C630 D0 F8                         BNE -
0C632                           
0C632                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C632                           
0C632                           -attributeLoop:
0C632                               ;; Reset current attribute value
0C632 A9 00                         LDA #$00
0C634 85 02                         STA temp+2
0C636                           
0C636                               ;; Get first metatile in tile ram based on attribute index
0C636                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C636 8A                            TXA
0C637                           
0C637 38                            SEC
0C638 E9 08                         SBC #$08
0C63A 85 01                         STA temp+1      ; attr - 8 (temp1)
0C63C 0A                            ASL             ; * 2
0C63D 85 00                         STA temp        ; temp = temp1 * 2
0C63F                           
0C63F A5 01                         LDA temp+1      ; temp1
0C641 29 F8                         AND #%11111000  ; rounded down to 8's
0C643 0A                            ASL             ; * 2
0C644 18                            CLC
0C645 65 00                         ADC temp        ; + temp1 * 2
0C647 85 00                         STA temp        ; first metatile
0C649                           
0C649                               ;; Store first metatile in y-register
0C649 A8                            TAY
0C64A                           
0C64A                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C64A 8A                            TXA
0C64B 29 07                         AND #%00000111
0C64D C9 07                         CMP #%00000111
0C64F F0 0B                         BEQ +
0C651                           
0C651                               ;; If X >= $30, don't apply bottom right metatile
0C651 E0 30                         CPX #$30
0C653 B0 07                         BCS +
0C655                               
0C655                               ;; Add metatile1 subpalette to attribute value
0C655 B9 00 04                      LDA tile_type,y
0C658 29 0C                         AND #%00001100
0C65A 85 02                         STA temp+2
0C65C                               +
0C65C                           
0C65C                           
0C65C                               ;; Apply second metatile
0C65C 88                            DEY
0C65D                           
0C65D                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C65D 8A                            TXA
0C65E 29 07                         AND #%00000111
0C660 F0 10                         BEQ +
0C662                           
0C662                               ;; If X >= $30, don't apply bottom left metatile
0C662 E0 30                         CPX #$30
0C664 B0 0C                         BCS +
0C666                           
0C666                           
0C666                           
0C666                               ;; Add metatile2 subpalette to attribute value
0C666 B9 00 04                      LDA tile_type,y
0C669 29 0C                         AND #%00001100
0C66B 4A                            LSR
0C66C 4A                            LSR
0C66D 05 02                         ORA temp+2
0C66F 4C 74 C6                      JMP ++
0C672                               +
0C672 A5 02                         LDA temp+2
0C674                               ++
0C674 0A                            ASL
0C675 0A                            ASL
0C676 85 02                         STA temp+2
0C678                           
0C678                           
0C678                               ;; Apply third metatile
0C678 98                            TYA
0C679 38                            SEC
0C67A E9 0F                         SBC #$0F
0C67C A8                            TAY
0C67D                           
0C67D                               ;; If X MOD 8 == 7, don't apply top right metatile
0C67D 8A                            TXA
0C67E 29 07                         AND #%00000111
0C680 C9 07                         CMP #%00000111
0C682 F0 11                         BEQ +
0C684                           
0C684                               ;; If X < $10, don't apply top right metatile
0C684 8A                            TXA
0C685 29 F0                         AND #%11110000
0C687 F0 0C                         BEQ +
0C689                           
0C689                               ;; Add metatile3 subpalette to attribute value
0C689 B9 00 04                      LDA tile_type,y
0C68C 29 0C                         AND #%00001100
0C68E 4A                            LSR
0C68F 4A                            LSR
0C690 05 02                         ORA temp+2
0C692 4C 97 C6                      JMP ++
0C695                               +
0C695 A5 02                         LDA temp+2
0C697                               ++
0C697 0A                            ASL
0C698 0A                            ASL
0C699 85 02                         STA temp+2
0C69B                           
0C69B                           
0C69B                               ;; Apply fourth metatile
0C69B 88                            DEY
0C69C                           
0C69C                               ;; If X MOD 8 == 0, don't apply top left metatile
0C69C 8A                            TXA
0C69D 29 07                         AND #%00000111
0C69F F0 11                         BEQ +
0C6A1                           
0C6A1                               ;; If X < $10, don't apply top left metatile
0C6A1 8A                            TXA
0C6A2 29 F0                         AND #%11110000
0C6A4 F0 0C                         BEQ +
0C6A6                           
0C6A6                               ;; Add metatile4 subpalette to attribute value
0C6A6 B9 00 04                      LDA tile_type,y
0C6A9 29 0C                         AND #%00001100
0C6AB 4A                            LSR
0C6AC 4A                            LSR
0C6AD 05 02                         ORA temp+2
0C6AF 4C B4 C6                      JMP ++
0C6B2                               +
0C6B2 A5 02                         LDA temp+2
0C6B4                               ++
0C6B4 9D A0 04                      STA tile_attributes,x
0C6B7                           
0C6B7                               ;; Check the next attribute, if any left
0C6B7 E8                            INX
0C6B8 E0 38                         CPX #$38
0C6BA F0 03                         BEQ +
0C6BC 4C 32 C6                          JMP -attributeLoop
0C6BF                               +
0C6BF                           
0C6BF                               ;; Stream attribute RAM to PPU
0C6BF 2C 02 20                      BIT PPU_STATUS
0C6C2 A9 23                         LDA #$23
0C6C4 8D 06 20                      STA PPU_ADDR
0C6C7 A9 C0                         LDA #$C0
0C6C9 8D 06 20                      STA PPU_ADDR
0C6CC A2 00                         LDX #$00
0C6CE                               -
0C6CE BD A0 04                          LDA tile_attributes,x
0C6D1 8D 07 20                          STA PPU_DATA
0C6D4 E8                                INX
0C6D5 E0 40                             CPX #$40
0C6D7 D0 F5                         BNE -
0C6D9                           
0C6D9                               ;; Set initial ball position
0C6D9 A6 2E                         LDX current_level
0C6DB BD FC CB                      LDA tbl_lvl_ball_startpos,x
0C6DE 29 F0                         AND #%11110000
0C6E0 18                            CLC
0C6E1 69 34                         ADC #$34
0C6E3 85 19                         STA ball_ypos_hi
0C6E5 BC FC CB                      LDY tbl_lvl_ball_startpos,x
0C6E8 0A                            ASL
0C6E9 0A                            ASL
0C6EA 0A                            ASL
0C6EB 0A                            ASL
0C6EC 18                            CLC
0C6ED 69 14                         ADC #$14
0C6EF 85 17                         STA ball_xpos_hi
0C6F1 A9 00                         LDA #$00
0C6F3 85 18                         STA ball_xpos_lo
0C6F5 85 1A                         STA ball_ypos_lo
0C6F7                               
0C6F7                               ;; Set initial ball direction
0C6F7 BD 15 CC                      LDA tbl_lvl_ball_init,x
0C6FA 29 80                         AND #%10000000
0C6FC F0 02                         BEQ +
0C6FE A9 FB                             LDA #MOVE_BALL_UP
0C700                               +
0C700 85 26                         STA ball_flags
0C702                               
0C702                               ;; Set initial ball color
0C702 BD 15 CC                      LDA tbl_lvl_ball_init,x
0C705 29 70                         AND #%01110000
0C707 0A                            ASL
0C708 20 16 C3                      JSR sub_ColorizeBall
0C70B                               
0C70B                               ;; Return
0C70B 60                            RTS
0C70C                           
0C70C                           
0C70C                           ;; Subroutine: draw 28 tiles in a row
0C70C                           sub_Draw28HorizontalTiles:
0C70C A2 1C                         LDX #28
0C70E                               -
0C70E 8D 07 20                          STA PPU_DATA
0C711 CA                                DEX
0C712 D0 FA                         BNE -
0C714 60                            RTS0C715                           .include "game/subroutine/LoadIntroScreen.asm"
0C715                           sub_LoadIntroScreen:
0C715                           
0C715                               ;; Load intro palette
0C715 2C 02 20                      BIT PPU_STATUS
0C718 A9 3F                         LDA #$3F
0C71A 8D 06 20                      STA PPU_ADDR
0C71D A9 00                         LDA #$00
0C71F 8D 06 20                      STA PPU_ADDR
0C722 A2 00                         LDX #$00
0C724                               -
0C724 BD CB C7                          LDA tbl_IntroScreenPalette,x
0C727 8D 07 20                          STA PPU_DATA
0C72A E8                                INX
0C72B E0 20                             CPX #$20
0C72D D0 F5                         BNE -
0C72F                               
0C72F                               ;; Put ball in the middle
0C72F A9 7C                         LDA #$7C
0C731 85 17                         STA ball_xpos_hi
0C733 85 19                         STA ball_ypos_hi
0C735                           
0C735                               ;; Clear the screen
0C735 20 AB C2                      JSR sub_ClearScreen
0C738                           
0C738                               ;; Set up intro screen draw loop
0C738 A2 00                         LDX #$00
0C73A                           
0C73A                           -loop_IntroScreenData:
0C73A                           
0C73A                               ;; Get current byte from intro screen data
0C73A BD F3 C7                      LDA tbl_IntroScreenData,x
0C73D                           
0C73D                               ;; If current byte is #$3F, we're done drawing.
0C73D C9 3F                         CMP #$3F
0C73F D0 03                         BNE +
0C741 4C 8E C7                          JMP +goToEndIntroScreen
0C744                               +
0C744                           
0C744                               ;; If highest bits are %11, draw a plain tile
0C744 29 C0                         AND #%11000000
0C746 D0 03                         BNE +
0C748 4C 6E C7                          JMP +drawTile
0C74B                               +
0C74B                               
0C74B                               ;; If highest bits are %01, set the PPU address
0C74B                               ;; If not, draw two logo tiles
0C74B C9 40                         CMP #%01000000
0C74D D0 03                         BNE +drawLogo
0C74F 4C 78 C7                          JMP +setPpuAddr
0C752                           
0C752                           +drawLogo:
0C752                               ;; Get bits 0-2 and store in a temp variable
0C752 BD F3 C7                      LDA tbl_IntroScreenData,x
0C755 29 07                         AND #%00000111
0C757 85 00                         STA temp
0C759                               
0C759                               ;; Get bits 3-5, shift over to get a value from 0-7
0C759 BD F3 C7                      LDA tbl_IntroScreenData,x
0C75C 4A                            LSR
0C75D 4A                            LSR
0C75E 4A                            LSR
0C75F 29 07                         AND #%00000111
0C761                               
0C761                               ;; Draw the tile that corresponds with that value
0C761 A8                            TAY
0C762 20 69 C3                      JSR sub_drawIntroScreenLogoTile
0C765                               
0C765                               ;; Do the same for the value stored in temp
0C765 A4 00                         LDY temp
0C767 20 69 C3                      JSR sub_drawIntroScreenLogoTile
0C76A                           
0C76A                               ;; Next byte please
0C76A E8                            INX
0C76B 4C 3A C7                      JMP -loop_IntroScreenData
0C76E                           
0C76E                           +drawTile:
0C76E                               ;; Just draw the tile value on screen
0C76E BD F3 C7                      LDA tbl_IntroScreenData,x
0C771 8D 07 20                      STA PPU_DATA
0C774                               
0C774                               ;; Next byte please
0C774 E8                            INX
0C775 4C 3A C7                      JMP -loop_IntroScreenData
0C778                           
0C778                           
0C778                           +setPpuAddr:
0C778                               ;; Reset the PPU latch
0C778 2C 02 20                      BIT PPU_STATUS
0C77B                               
0C77B                               ;; Sanitize and write the high byte of the PPU address
0C77B BD F3 C7                      LDA tbl_IntroScreenData,x
0C77E 29 3F                         AND #%00111111
0C780 8D 06 20                      STA PPU_ADDR
0C783                           
0C783                               ;; Write the low byte of the PPU address
0C783 E8                            INX
0C784 BD F3 C7                      LDA tbl_IntroScreenData,x
0C787 8D 06 20                      STA PPU_ADDR
0C78A                               
0C78A                               ;; PPU has been set up to draw tiles at the correct spot now.
0C78A                               
0C78A                               ;; Next byte please.
0C78A E8                            INX
0C78B 4C 3A C7                      JMP -loop_IntroScreenData
0C78E                           
0C78E                           +goToEndIntroScreen:
0C78E                           
0C78E                               ;; To color the 1.LEVEL: line green, we need to update two
0C78E                               ;; values in the PPU attribute data.
0C78E 2C 02 20                      BIT PPU_STATUS
0C791 A9 23                         LDA #$23
0C793 8D 06 20                      STA PPU_ADDR
0C796 A9 CB                         LDA #$CB
0C798 8D 06 20                      STA PPU_ADDR
0C79B A9 0A                         LDA #%00001010
0C79D 8D 07 20                      STA PPU_DATA
0C7A0 8D 07 20                      STA PPU_DATA
0C7A3                           
0C7A3 60                            RTS
0C7A4                           
0C7A4                           .include "game/subroutine/LoadWinScreen.asm"
0C7A4                           sub_LoadWinScreen:
0C7A4 60                            RTS
0C7A5                           
0C7A5                           .include "game/subroutine/WriteByteToPPU.asm"
0C7A5                           sub_WriteByteToPPUBuffer:
0C7A5                           
0C7A5                               ;; Prevent updating until full 3-byte buffer is filled,
0C7A5                               ;; so that graphics won't glitch out if NMI happens during
0C7A5                               ;; updating the buffer
0C7A5 A9 00                         LDA #$00
0C7A7 85 29                         STA ppu_buffer_update
0C7A9                           
0C7A9                               ;; Check if buffer full; if so, wait a frame and force update
0C7A9 A4 2A                         LDY ppu_buffer_pointer
0C7AB C0 30                         CPY #$30
0C7AD D0 05                         BNE +
0C7AF E6 29                             INC ppu_buffer_update
0C7B1 20 A5 C2                          JSR sub_WaitForVBlank
0C7B4                               +
0C7B4                           
0C7B4                               ;; Add ppu_addr high byte to buffer
0C7B4 A5 00                         LDA temp
0C7B6 99 00 03                      STA ppu_buffer,y
0C7B9                           
0C7B9                               ;; Add ppu_addr low byte to buffer
0C7B9 C8                            INY
0C7BA A5 01                         LDA temp+1
0C7BC 99 00 03                      STA ppu_buffer,y
0C7BF                           
0C7BF                               ;; Add ppu_data to buffer
0C7BF C8                            INY
0C7C0 A5 02                         LDA temp+2
0C7C2 99 00 03                      STA ppu_buffer,y
0C7C5                           
0C7C5                               ;; Update buffer pointer
0C7C5 C8                            INY
0C7C6 84 2A                         STY ppu_buffer_pointer
0C7C8                           
0C7C8                               ;; Tell NMI to update next round
0C7C8 E6 29                         INC ppu_buffer_update
0C7CA                           
0C7CA                               ;; Return
0C7CA 60                            RTS0C7CB                           
0C7CB                           
0C7CB                           ;; LUTs
0C7CB                           .include "game/include/tables.asm"
0C7CB                           
0C7CB                           ;; Intro screen palette
0C7CB                           tbl_IntroScreenPalette:
0C7CB 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C7CF 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C7D3 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C7D7 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C7DB                           
0C7DB 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C7DF 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C7E3 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C7E7 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C7EB                           
0C7EB                           
0C7EB                           ;; Intro: mapping logo index to chr tile
0C7EB                           tbl_IntroScreenLogoChr:
0C7EB 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C7F3                           
0C7F3                           
0C7F3                           ;; Intro screen data
0C7F3                           tbl_IntroScreenData:
0C7F3                           
0C7F3                               ;; Set PPU address $20AC and draw
0C7F3 60 AC                         .db #$60, #$AC
0C7F5 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C7FD                           
0C7FD                               ;; Set PPU address $20CF and draw
0C7FD 60 CF                         .db #$60, #$CF
0C7FF 01 02                         .db #_0, #_1
0C801                               
0C801                               ;; Set PPU address $2122 and draw
0C801 61 22                         .db #$61, #$22
0C803 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C80A 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C810 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C818 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C81D                               
0C81D                               ;; Set PPU address $2147 and draw
0C81D 61 47                         .db #$61, #$47
0C81F 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C826 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C82A 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C830 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C836                               
0C836                               ;; Set PPU address $218B and draw
0C836 61 8B                         .db #$61, #$8B
0C838 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C83E 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C843                               
0C843                               ;; Set PPU address $21E6 and draw
0C843 61 E6                         .db #$61, #$E6
0C845 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C84D 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C851 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C858                               
0C858                               ;; Set PPU address $222D and draw
0C858 62 2D                         .db #$62, #$2D
0C85A 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C860                               
0C860                               ;; Set PPU address $2281
0C860 62 81                         .db #$62, #$81
0C862                               
0C862                               ;; Draw the Crillion logo
0C862 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C866 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C86A C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C86E E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C872                               
0C872 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C876 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C87A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C87E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C882                               
0C882 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C886 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C88A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C88E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C892                           
0C892 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C896 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C89A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C89E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C8A2                               
0C8A2 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C8A6 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C8AA C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C8AE D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C8B2                           
0C8B2 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C8B6 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C8BA C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C8BE F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C8C1                           
0C8C1                               ;; End of intro
0C8C1 3F                            .db #$3F
0C8C2                           
0C8C2                           
0C8C2                           ;; test animation table
0C8C2                           .include "game/test/show_animation_table.asm"
0C8C2                           ;; CHR tile-id's per slide of explosion
0C8C2                           explosion_slide0:
0C8C2 00 00 00                      .db #$00, #$00, #$00
0C8C5 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C8C8 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C8CB                           
0C8CB                           explosion_slide1:
0C8CB 00 00 00                      .db #$00, #$00, #$00
0C8CE 29 2A 2B                      .db #$29, #$2A, #$2B
0C8D1 39 3A 3B                      .db #$39, #$3A, #$3B
0C8D4                           
0C8D4                           explosion_slide2:
0C8D4 16 00 00                      .db #$16, #$00, #$00
0C8D7 26 27 28                      .db #$26, #$27, #$28
0C8DA 36 37 38                      .db #$36, #$37, #$38
0C8DD                           
0C8DD                           explosion_slide3:
0C8DD 00 14 15                      .db #$00, #$14, #$15
0C8E0 23 24 25                      .db #$23, #$24, #$25
0C8E3 33 34 35                      .db #$33, #$34, #$35
0C8E6                           
0C8E6                           explosion_slide4:
0C8E6 10 11 12                      .db #$10, #$11, #$12
0C8E9 20 21 22                      .db #$20, #$21, #$22
0C8EC 30 31 32                      .db #$30, #$31, #$32
0C8EF                           
0C8EF                           ;; High and low bytes of animation slides
0C8EF                           explosion_anim_hi:
0C8EF C8                            .db >#explosion_slide0
0C8F0 C8                            .db >#explosion_slide1
0C8F1 C8                            .db >#explosion_slide2
0C8F2 C8                            .db >#explosion_slide3
0C8F3 C8                            .db >#explosion_slide4
0C8F4 C8                            .db >#explosion_slide4
0C8F5 C8                            .db >#explosion_slide3
0C8F6 C8                            .db >#explosion_slide2
0C8F7 C8                            .db >#explosion_slide1
0C8F8 C8                            .db >#explosion_slide0
0C8F9                           
0C8F9                           explosion_anim_lo:
0C8F9 C2                            .db <#explosion_slide0
0C8FA CB                            .db <#explosion_slide1
0C8FB D4                            .db <#explosion_slide2
0C8FC DD                            .db <#explosion_slide3
0C8FD E6                            .db <#explosion_slide4
0C8FE E6                            .db <#explosion_slide4
0C8FF DD                            .db <#explosion_slide3
0C900 D4                            .db <#explosion_slide2
0C901 CB                            .db <#explosion_slide1
0C902 C2                            .db <#explosion_slide0
0C903                           
0C903                           
0C903                           
0C903                           ;; Ball palette color cycle
0C903                           tbl_BallColorDark:
0C903 12 14 16 27 28 19             .db #$12, #$14, #$16, #$27, #$28, #$19
0C909                            
0C909                           tbl_BallColorLight:
0C909 2C 24 25 37 20 2B             .db #$2C, #$24, #$25, #$37, #$20, #$2B
0C90F                           
0C90F                               
0C90F                           ;; Screen mode drawing routine addresses
0C90F                           tbl_LoadScreenHi:
0C90F C7 C3 C7                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C912                           
0C912                           tbl_LoadScreenLo:
0C912 15 7F A4                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C915                           
0C915                           
0C915                           ;; Test level data
0C915                           .include "game/test/level_data.asm"
0C915                           lvl_layout_01:
0C915 61 21                         .db #$61, #%00100001
0C917 52 61                         .db #$52, #%01100001
0C919 43 65                         .db #$43, #%01100101
0C91B 83 05                         .db #$83, #%00000101
0C91D 93 15                         .db #$93, #%00010101
0C91F 34 7A                         .db #$34, #%01111010
0C921 74 7A                         .db #$74, #%01111010
0C923 35 7A                         .db #$35, #%01111010
0C925 75 7A                         .db #$75, #%01111010
0C927 46 65                         .db #$46, #%01100101
0C929 86 25                         .db #$86, #%00100101
0C92B 57 61                         .db #$57, #%01100001
0C92D 68 21                         .db #$68, #%00100001
0C92F FF                            .db #LEVEL_END
0C930                           
0C930                           lvl_layout_02:
0C930 C0 0A                         .db #$C0, #%00001010
0C932 11 15                         .db #$11, #%00010101
0C934 21 62                         .db #$21, #%01100010
0C936 61 62                         .db #$61, #%01100010
0C938 A1 42                         .db #$A1, #%01000010
0C93A 12 67                         .db #$12, #%01100111
0C93C 52 67                         .db #$52, #%01100111
0C93E 92 67                         .db #$92, #%01100111
0C940 C3 0D                         .db #$C3, #%00001101
0C942 14 11                         .db #$14, #%00010001
0C944 24 65                         .db #$24, #%01100101
0C946 64 65                         .db #$64, #%01100101
0C948 A4 45                         .db #$A4, #%01000101
0C94A 15 67                         .db #$15, #%01100111
0C94C 55 67                         .db #$55, #%01100111
0C94E 95 67                         .db #$95, #%01100111
0C950 17 12                         .db #$17, #%00010010
0C952 27 61                         .db #$27, #%01100001
0C954 67 61                         .db #$67, #%01100001
0C956 A7 41                         .db #$A7, #%01000001
0C958 38 7A                         .db #$38, #%01111010
0C95A 98 5A                         .db #$98, #%01011010
0C95C 18 27                         .db #$18, #%00100111
0C95E 48 27                         .db #$48, #%00100111
0C960 78 27                         .db #$78, #%00100111
0C962 C8 07                         .db #$C8, #%00000111
0C964 FF                            .db #LEVEL_END
0C965                           
0C965                           lvl_layout_03:
0C965 00 7A                         .db #$00, #%01111010
0C967 40 7A                         .db #$40, #%01111010
0C969 80 7A                         .db #$80, #%01111010
0C96B C0 1A                         .db #$C0, #%00011010
0C96D 10 A1                         .db #$10, #%10100001
0C96F 13 E1                         .db #$13, #%11100001
0C971 17 C1                         .db #$17, #%11000001
0C973 30 C1                         .db #$30, #%11000001
0C975 34 C1                         .db #$34, #%11000001
0C977 38 A1                         .db #$38, #%10100001
0C979 50 E1                         .db #$50, #%11100001
0C97B 55 81                         .db #$55, #%10000001
0C97D 57 C1                         .db #$57, #%11000001
0C97F 70 C1                         .db #$70, #%11000001
0C981 73 A1                         .db #$73, #%10100001
0C983 76 E1                         .db #$76, #%11100001
0C985 90 E1                         .db #$90, #%11100001
0C987 95 81                         .db #$95, #%10000001
0C989 97 C1                         .db #$97, #%11000001
0C98B B0 C1                         .db #$B0, #%11000001
0C98D B4 C1                         .db #$B4, #%11000001
0C98F B8 A1                         .db #$B8, #%10100001
0C991 D0 A1                         .db #$D0, #%10100001
0C993 D3 E1                         .db #$D3, #%11100001
0C995 D7 C1                         .db #$D7, #%11000001
0C997 FF                            .db #LEVEL_END
0C998                           
0C998                           lvl_layout_04:
0C998 00 44                         .db #$00, #%01000100
0C99A 30 A9                         .db #$30, #%10101001
0C99C 40 64                         .db #$40, #%01100100
0C99E 80 44                         .db #$80, #%01000100
0C9A0 B0 29                         .db #$B0, #%00101001
0C9A2 01 49                         .db #$01, #%01001001
0C9A4 41 69                         .db #$41, #%01101001
0C9A6 81 A4                         .db #$81, #%10100100
0C9A8 91 A9                         .db #$91, #%10101001
0C9AA A1 29                         .db #$A1, #%00101001
0C9AC C1 24                         .db #$C1, #%00100100
0C9AE 02 64                         .db #$02, #%01100100
0C9B0 42 C4                         .db #$42, #%11000100
0C9B2 52 C9                         .db #$52, #%11001001
0C9B4 62 E4                         .db #$62, #%11100100
0C9B6 72 E9                         .db #$72, #%11101001
0C9B8 A2 C4                         .db #$A2, #%11000100
0C9BA B2 C9                         .db #$B2, #%11001001
0C9BC C2 29                         .db #$C2, #%00101001
0C9BE 03 49                         .db #$03, #%01001001
0C9C0 33 C9                         .db #$33, #%11001001
0C9C2 83 29                         .db #$83, #%00101001
0C9C4 C3 C4                         .db #$C3, #%11000100
0C9C6 D3 E9                         .db #$D3, #%11101001
0C9C8 04 44                         .db #$04, #%01000100
0C9CA 84 24                         .db #$84, #%00100100
0C9CC 05 29                         .db #$05, #%00101001
0C9CE 25 A4                         .db #$25, #%10100100
0C9D0 45 E9                         .db #$45, #%11101001
0C9D2 85 A4                         .db #$85, #%10100100
0C9D4 A5 29                         .db #$A5, #%00101001
0C9D6 06 A4                         .db #$06, #%10100100
0C9D8 16 A9                         .db #$16, #%10101001
0C9DA 36 C4                         .db #$36, #%11000100
0C9DC 56 C4                         .db #$56, #%11000100
0C9DE 66 E4                         .db #$66, #%11100100
0C9E0 76 A9                         .db #$76, #%10101001
0C9E2 96 E4                         .db #$96, #%11100100
0C9E4 27 A9                         .db #$27, #%10101001
0C9E6 57 09                         .db #$57, #%00001001
0C9E8 87 49                         .db #$87, #%01001001
0C9EA B7 A9                         .db #$B7, #%10101001
0C9EC C7 A4                         .db #$C7, #%10100100
0C9EE 08 24                         .db #$08, #%00100100
0C9F0 78 64                         .db #$78, #%01100100
0C9F2 D8 04                         .db #$D8, #%00000100
0C9F4 19 29                         .db #$19, #%00101001
0C9F6 39 49                         .db #$39, #%01001001
0C9F8 89 49                         .db #$89, #%01001001
0C9FA C9 29                         .db #$C9, #%00101001
0C9FC FF                            .db #LEVEL_END
0C9FD                           
0C9FD                           lvl_layout_05:
0C9FD 40 0A                         .db #$40, #%00001010
0C9FF 70 1A                         .db #$70, #%00011010
0CA01 B0 42                         .db #$B0, #%01000010
0CA03 41 A7                         .db #$41, #%10100111
0CA05 B1 22                         .db #$B1, #%00100010
0CA07 D1 15                         .db #$D1, #%00010101
0CA09 22 0A                         .db #$22, #%00001010
0CA0B 52 05                         .db #$52, #%00000101
0CA0D B2 42                         .db #$B2, #%01000010
0CA0F 03 27                         .db #$03, #%00100111
0CA11 33 67                         .db #$33, #%01100111
0CA13 73 67                         .db #$73, #%01100111
0CA15 B3 47                         .db #$B3, #%01000111
0CA17 05 E5                         .db #$05, #%11100101
0CA19 25 A5                         .db #$25, #%10100101
0CA1B 35 25                         .db #$35, #%00100101
0CA1D 65 45                         .db #$65, #%01000101
0CA1F A5 45                         .db #$A5, #%01000101
0CA21 46 E5                         .db #$46, #%11100101
0CA23 66 E5                         .db #$66, #%11100101
0CA25 86 E5                         .db #$86, #%11100101
0CA27 A6 E2                         .db #$A6, #%11100010
0CA29 C6 E5                         .db #$C6, #%11100101
0CA2B 27 25                         .db #$27, #%00100101
0CA2D 77 05                         .db #$77, #%00000101
0CA2F B7 02                         .db #$B7, #%00000010
0CA31 09 05                         .db #$09, #%00000101
0CA33 79 05                         .db #$79, #%00000101
0CA35 B9 02                         .db #$B9, #%00000010
0CA37 FF                            .db #LEVEL_END
0CA38                           
0CA38                           lvl_layout_06:
0CA38 00 03                         .db #$00, #%00000011
0CA3A 20 03                         .db #$20, #%00000011
0CA3C 40 03                         .db #$40, #%00000011
0CA3E A0 03                         .db #$A0, #%00000011
0CA40 C0 03                         .db #$C0, #%00000011
0CA42 11 03                         .db #$11, #%00000011
0CA44 31 03                         .db #$31, #%00000011
0CA46 51 03                         .db #$51, #%00000011
0CA48 91 03                         .db #$91, #%00000011
0CA4A B1 03                         .db #$B1, #%00000011
0CA4C D1 03                         .db #$D1, #%00000011
0CA4E 02 03                         .db #$02, #%00000011
0CA50 22 03                         .db #$22, #%00000011
0CA52 42 03                         .db #$42, #%00000011
0CA54 A2 03                         .db #$A2, #%00000011
0CA56 C2 03                         .db #$C2, #%00000011
0CA58 13 03                         .db #$13, #%00000011
0CA5A 33 03                         .db #$33, #%00000011
0CA5C 53 03                         .db #$53, #%00000011
0CA5E 93 03                         .db #$93, #%00000011
0CA60 B3 03                         .db #$B3, #%00000011
0CA62 D3 03                         .db #$D3, #%00000011
0CA64 04 03                         .db #$04, #%00000011
0CA66 24 03                         .db #$24, #%00000011
0CA68 44 03                         .db #$44, #%00000011
0CA6A A4 03                         .db #$A4, #%00000011
0CA6C C4 03                         .db #$C4, #%00000011
0CA6E 15 03                         .db #$15, #%00000011
0CA70 35 03                         .db #$35, #%00000011
0CA72 55 03                         .db #$55, #%00000011
0CA74 95 03                         .db #$95, #%00000011
0CA76 B5 03                         .db #$B5, #%00000011
0CA78 D5 03                         .db #$D5, #%00000011
0CA7A 06 03                         .db #$06, #%00000011
0CA7C 26 03                         .db #$26, #%00000011
0CA7E 46 03                         .db #$46, #%00000011
0CA80 A6 03                         .db #$A6, #%00000011
0CA82 C6 03                         .db #$C6, #%00000011
0CA84 17 03                         .db #$17, #%00000011
0CA86 37 03                         .db #$37, #%00000011
0CA88 57 03                         .db #$57, #%00000011
0CA8A 97 03                         .db #$97, #%00000011
0CA8C B7 03                         .db #$B7, #%00000011
0CA8E D7 03                         .db #$D7, #%00000011
0CA90 08 03                         .db #$08, #%00000011
0CA92 28 03                         .db #$28, #%00000011
0CA94 48 03                         .db #$48, #%00000011
0CA96 A8 03                         .db #$A8, #%00000011
0CA98 C8 03                         .db #$C8, #%00000011
0CA9A 19 03                         .db #$19, #%00000011
0CA9C 39 03                         .db #$39, #%00000011
0CA9E 59 03                         .db #$59, #%00000011
0CAA0 99 03                         .db #$99, #%00000011
0CAA2 B9 03                         .db #$B9, #%00000011
0CAA4 D9 03                         .db #$D9, #%00000011
0CAA6 60 4B                         .db #$60, #%01001011
0CAA8 71 CB                         .db #$71, #%11001011
0CAAA 62 4B                         .db #$62, #%01001011
0CAAC 64 4B                         .db #$64, #%01001011
0CAAE 75 CB                         .db #$75, #%11001011
0CAB0 66 4B                         .db #$66, #%01001011
0CAB2 68 4B                         .db #$68, #%01001011
0CAB4 79 0B                         .db #$79, #%00001011
0CAB6 70 03                         .db #$70, #%00000011
0CAB8 72 03                         .db #$72, #%00000011
0CABA 74 03                         .db #$74, #%00000011
0CABC 76 03                         .db #$76, #%00000011
0CABE 78 03                         .db #$78, #%00000011
0CAC0 FF                            .db #LEVEL_END
0CAC1                           
0CAC1                           lvl_layout_07:
0CAC1 00 11                         .db #$00, #%00010001
0CAC3 01 FC                         .db #$01, #%11111100
0CAC5 12 BC                         .db #$12, #%10111100
0CAC7 23 DC                         .db #$23, #%11011100
0CAC9 34 FC                         .db #$34, #%11111100
0CACB 05 DC                         .db #$05, #%11011100
0CACD 15 FC                         .db #$15, #%11111100
0CACF 45 BC                         .db #$45, #%10111100
0CAD1 56 DC                         .db #$56, #%11011100
0CAD3 27 BC                         .db #$27, #%10111100
0CAD5 67 DC                         .db #$67, #%11011100
0CAD7 38 3C                         .db #$38, #%00111100
0CAD9 78 BC                         .db #$78, #%10111100
0CADB 09 3C                         .db #$09, #%00111100
0CADD 39 3C                         .db #$39, #%00111100
0CADF 89 1C                         .db #$89, #%00011100
0CAE1 B0 01                         .db #$B0, #%00000001
0CAE3 D0 01                         .db #$D0, #%00000001
0CAE5 A1 01                         .db #$A1, #%00000001
0CAE7 C1 11                         .db #$C1, #%00010001
0CAE9 B2 01                         .db #$B2, #%00000001
0CAEB D2 01                         .db #$D2, #%00000001
0CAED A3 01                         .db #$A3, #%00000001
0CAEF C3 01                         .db #$C3, #%00000001
0CAF1 B4 01                         .db #$B4, #%00000001
0CAF3 D4 01                         .db #$D4, #%00000001
0CAF5 A5 01                         .db #$A5, #%00000001
0CAF7 C5 01                         .db #$C5, #%00000001
0CAF9 B6 01                         .db #$B6, #%00000001
0CAFB D6 01                         .db #$D6, #%00000001
0CAFD A7 01                         .db #$A7, #%00000001
0CAFF C7 01                         .db #$C7, #%00000001
0CB01 FF                            .db #LEVEL_END
0CB02                           
0CB02                           lvl_layout_08:
0CB02 40 B5                         .db #$40, #%10110101
0CB04 31 0D                         .db #$31, #%00001101
0CB06 61 10                         .db #$61, #%00010000
0CB08 42 C7                         .db #$42, #%11000111
0CB0A 52 67                         .db #$52, #%01100111
0CB0C 63 C7                         .db #$63, #%11000111
0CB0E 83 E7                         .db #$83, #%11100111
0CB10 05 07                         .db #$05, #%00000111
0CB12 15 3A                         .db #$15, #%00111010
0CB14 07 63                         .db #$07, #%01100011
0CB16 27 13                         .db #$27, #%00010011
0CB18 38 A5                         .db #$38, #%10100101
0CB1A 09 14                         .db #$09, #%00010100
0CB1C 19 05                         .db #$19, #%00000101
0CB1E D0 E0                         .db #$D0, #%11100000
0CB20 C2 A0                         .db #$C2, #%10100000
0CB22 B3 E0                         .db #$B3, #%11100000
0CB24 D5 E0                         .db #$D5, #%11100000
0CB26 C6 E0                         .db #$C6, #%11100000
0CB28 B0 C4                         .db #$B0, #%11000100
0CB2A C0 A4                         .db #$C0, #%10100100
0CB2C D1 A4                         .db #$D1, #%10100100
0CB2E C4 24                         .db #$C4, #%00100100
0CB30 C5 04                         .db #$C5, #%00000100
0CB32 B7 44                         .db #$B7, #%01000100
0CB34 B8 A4                         .db #$B8, #%10100100
0CB36 D9 05                         .db #$D9, #%00000101
0CB38 FF                            .db #LEVEL_END
0CB39                           
0CB39                           lvl_layout_09:
0CB39 00 02                         .db #$00, #%00000010
0CB3B 10 C9                         .db #$10, #%11001001
0CB3D 50 C9                         .db #$50, #%11001001
0CB3F 90 C9                         .db #$90, #%11001001
0CB41 D0 C9                         .db #$D0, #%11001001
0CB43 31 C9                         .db #$31, #%11001001
0CB45 71 C9                         .db #$71, #%11001001
0CB47 B1 C9                         .db #$B1, #%11001001
0CB49 13 C9                         .db #$13, #%11001001
0CB4B 53 C9                         .db #$53, #%11001001
0CB4D 93 C9                         .db #$93, #%11001001
0CB4F D3 C9                         .db #$D3, #%11001001
0CB51 34 C9                         .db #$34, #%11001001
0CB53 74 C9                         .db #$74, #%11001001
0CB55 B4 C9                         .db #$B4, #%11001001
0CB57 16 C9                         .db #$16, #%11001001
0CB59 56 C9                         .db #$56, #%11001001
0CB5B 96 C9                         .db #$96, #%11001001
0CB5D D6 C9                         .db #$D6, #%11001001
0CB5F 37 C9                         .db #$37, #%11001001
0CB61 77 C9                         .db #$77, #%11001001
0CB63 B7 C9                         .db #$B7, #%11001001
0CB65 D8 12                         .db #$D8, #%00010010
0CB67 FF                            .db #LEVEL_END
0CB68                           
0CB68                           lvl_layout_10:
0CB68 00 65                         .db #$00, #%01100101
0CB6A 40 45                         .db #$40, #%01000101
0CB6C 50 A7                         .db #$50, #%10100111
0CB6E 80 05                         .db #$80, #%00000101
0CB70 90 A7                         .db #$90, #%10100111
0CB72 A0 65                         .db #$A0, #%01100101
0CB74 01 43                         .db #$01, #%01000011
0CB76 31 23                         .db #$31, #%00100011
0CB78 61 A7                         .db #$61, #%10100111
0CB7A 81 A7                         .db #$81, #%10100111
0CB7C A1 63                         .db #$A1, #%01100011
0CB7E 02 44                         .db #$02, #%01000100
0CB80 32 44                         .db #$32, #%01000100
0CB82 92 04                         .db #$92, #%00000100
0CB84 A2 64                         .db #$A2, #%01100100
0CB86 03 40                         .db #$03, #%01000000
0CB88 33 40                         .db #$33, #%01000000
0CB8A 63 A1                         .db #$63, #%10100001
0CB8C 83 A2                         .db #$83, #%10100010
0CB8E 93 00                         .db #$93, #%00000000
0CB90 A3 60                         .db #$A3, #%01100000
0CB92 04 41                         .db #$04, #%01000001
0CB94 34 41                         .db #$34, #%01000001
0CB96 94 02                         .db #$94, #%00000010
0CB98 A4 62                         .db #$A4, #%01100010
0CB9A 05 47                         .db #$05, #%01000111
0CB9C 35 67                         .db #$35, #%01100111
0CB9E 75 0A                         .db #$75, #%00001010
0CBA0 85 47                         .db #$85, #%01000111
0CBA2 B5 47                         .db #$B5, #%01000111
0CBA4 06 E7                         .db #$06, #%11100111
0CBA6 16 5A                         .db #$16, #%01011010
0CBA8 26 11                         .db #$26, #%00010001
0CBAA 46 13                         .db #$46, #%00010011
0CBAC 56 1A                         .db #$56, #%00011010
0CBAE 66 14                         .db #$66, #%00010100
0CBB0 86 10                         .db #$86, #%00010000
0CBB2 96 5C                         .db #$96, #%01011100
0CBB4 A6 12                         .db #$A6, #%00010010
0CBB6 C6 15                         .db #$C6, #%00010101
0CBB8 D6 E7                         .db #$D6, #%11100111
0CBBA FF                            .db #LEVEL_END
0CBBB                           
0CBBB                           lvl_layout_11:
0CBBB FF                            .db #LEVEL_END
0CBBC                           
0CBBC                           lvl_layout_12:
0CBBC FF                            .db #LEVEL_END
0CBBD                           
0CBBD                           lvl_layout_13:
0CBBD FF                            .db #LEVEL_END
0CBBE                           
0CBBE                           lvl_layout_14:
0CBBE FF                            .db #LEVEL_END
0CBBF                           
0CBBF                           lvl_layout_15:
0CBBF FF                            .db #LEVEL_END
0CBC0                           
0CBC0                           lvl_layout_16:
0CBC0 FF                            .db #LEVEL_END
0CBC1                           
0CBC1                           lvl_layout_17:
0CBC1 FF                            .db #LEVEL_END
0CBC2                           
0CBC2                           lvl_layout_18:
0CBC2 FF                            .db #LEVEL_END
0CBC3                           
0CBC3                           lvl_layout_19:
0CBC3 FF                            .db #LEVEL_END
0CBC4                           
0CBC4                           lvl_layout_20:
0CBC4 FF                            .db #LEVEL_END
0CBC5                           
0CBC5                           lvl_layout_21:
0CBC5 FF                            .db #LEVEL_END
0CBC6                           
0CBC6                           lvl_layout_22:
0CBC6 FF                            .db #LEVEL_END
0CBC7                           
0CBC7                           lvl_layout_23:
0CBC7 FF                            .db #LEVEL_END
0CBC8                           
0CBC8                           lvl_layout_24:
0CBC8 FF                            .db #LEVEL_END
0CBC9                           
0CBC9                           lvl_layout_25:
0CBC9 FF                            .db #LEVEL_END
0CBCA                           
0CBCA                           ;; Level layout address pointers
0CBCA                           tbl_lvl_layout_hi:
0CBCA C9 C9 C9 C9 C9                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0CBCF CA CA CB CB CB                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0CBD4 CB CB CB CB CB                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0CBD9 CB CB CB CB CB                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0CBDE CB CB CB CB CB                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0CBE3                           
0CBE3                           tbl_lvl_layout_lo:
0CBE3 15 30 65 98 FD                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0CBE8 38 C1 02 39 68                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0CBED BB BC BD BE BF                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0CBF2 C0 C1 C2 C3 C4                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0CBF7 C5 C6 C7 C8 C9                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0CBFC                           
0CBFC                           ;; Ball start position
0CBFC                           tbl_lvl_ball_startpos:
0CBFC 57 57 57 57 57                .db #$57, #$57, #$57, #$57, #$57
0CC01 57 57 57 57 57                .db #$57, #$57, #$57, #$57, #$57
0CC06 57 57 57 57 57                .db #$57, #$57, #$57, #$57, #$57
0CC0B 57 57 57 57 57                .db #$57, #$57, #$57, #$57, #$57
0CC10 57 57 57 57 57                .db #$57, #$57, #$57, #$57, #$57
0CC15                               
0CC15                           ;; Ball start direction, color and tile score
0CC15                           ;; #% v ccc tttt
0CC15                           ;;    | ||| ++++-- tile score
0CC15                           ;;    | +++------- color
0CC15                           ;;    +----------- vertical direction, down (0) or up (1)
0CC15                           tbl_lvl_ball_init:
0CC15 00 00 00 00 00                .db #%00000000, #%00000000, #%00000000, #%00000000, #%00000000
0CC1A 00 00 00 00 00                .db #%00000000, #%00000000, #%00000000, #%00000000, #%00000000
0CC1F 00 00 00 00 00                .db #%00000000, #%00000000, #%00000000, #%00000000, #%00000000
0CC24 00 00 00 00 00                .db #%00000000, #%00000000, #%00000000, #%00000000, #%00000000
0CC29 00 00 00 00 00                .db #%00000000, #%00000000, #%00000000, #%00000000, #%00000000
0CC2E                           
0CC2E                           
0CC2E                           ;; Helper table to multiply values by 64
0CC2E                           tbl_Times64:
0CC2E 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0CC32                           
0CC32                           
0CC32                           ;; Metatile ID to CHR data mapper
0CC32                           tbl_GametileTopLeft:
0CC32 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0CC3C                           
0CC3C                           tbl_GametileTopRight:
0CC3C 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0CC46                           
0CC46                           tbl_GametileBottomLeft:
0CC46 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0CC50                           
0CC50                           tbl_GametileBottomRight:
0CC50 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0CC5A                           
0CC5A                           ;; Metatile ID to RAM byte data mapper
0CC5A                           tbl_GameTileRamByte:
0CC5A 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0CC5F                           
0CC5F                           ;; HUD text data
0CC5F                           tbl_HudText:
0CC5F 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0CC67 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0CC6E 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0CC76 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0CC7B                           
0CC7B                           ;; NMI handler
0CC7B                           NMI:
0CC7B                               .include "interrupt/nmi.asm"
0CC7B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0CC7B                           ;;
0CC7B                           ;; include/nmi.asm
0CC7B                           ;;
0CC7B                           ;; Non-maskable interrupt script. This script is being executed
0CC7B                           ;; when vBlank hits.
0CC7B                           ;;
0CC7B                           ;;
0CC7B                           
0CC7B                               ;; Preserve accumulator through stack
0CC7B 48                            PHA
0CC7C                           
0CC7C                               ;; Should NMI be skipped?
0CC7C A5 13                         LDA skip_nmi
0CC7E F0 03                         BEQ +
0CC80 4C 0E CD                          JMP +skip_nmi
0CC83                               +
0CC83                           
0CC83                               ;; When in NMI, skip additional NMI requests
0CC83 A9 01                         LDA #$01
0CC85 85 13                         STA skip_nmi
0CC87                           
0CC87                               ;; Preserve X, Y, and PC through stack
0CC87 8A                            TXA
0CC88 48                            PHA
0CC89 98                            TYA
0CC8A 48                            PHA
0CC8B 08                            PHP
0CC8C                               
0CC8C                               ;; Check forced NMI skip
0CC8C A5 14                         LDA force_skip_nmi
0CC8E F0 03                         BEQ +
0CC90 4C FF CC                          JMP +force_skip_nmi
0CC93                               +
0CC93                           
0CC93                               ;; Update PPU mask
0CC93                               ;LDA #$00
0CC93                               ;STA PPU_CTRL
0CC93 A5 12                         LDA soft_ppu_mask
0CC95 8D 01 20                      STA PPU_MASK
0CC98                               
0CC98                               
0CC98                               ;; Additional PPU updates go here
0CC98                               .include "game/test/tile_update_nmi.asm"
0CC98                           
0CC98                               ;; Check if ppu_buffer needs updating
0CC98 A5 29                         LDA ppu_buffer_update
0CC9A D0 03                         BNE +
0CC9C 4C DE CC                          JMP +no_ppu_buffer_update
0CC9F                               +
0CC9F                           
0CC9F                               ;; Reset ppu control register and mask
0CC9F A2 00                         LDX #$00
0CCA1 8E 00 20                      STX PPU_CTRL
0CCA4 8E 01 20                      STX PPU_MASK
0CCA7                           
0CCA7                               ;; Set up loop
0CCA7                               -
0CCA7                                   ;; Reset hi/lo latch
0CCA7 2C 02 20                          BIT PPU_STATUS
0CCAA                           
0CCAA                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0CCAA BD 00 03                          LDA ppu_buffer,x
0CCAD 8D 06 20                          STA PPU_ADDR
0CCB0 E8                                INX
0CCB1 BD 00 03                          LDA ppu_buffer,x
0CCB4 8D 06 20                          STA PPU_ADDR
0CCB7                           
0CCB7                                   ;; Write ppu_buffer data to PPU_ADDR
0CCB7 E8                                INX
0CCB8 BD 00 03                          LDA ppu_buffer,x
0CCBB 8D 07 20                          STA PPU_DATA
0CCBE                           
0CCBE                                   ;; Check if updating is done (eg. X is at pointer)
0CCBE E8                                INX
0CCBF E4 2A                             CPX ppu_buffer_pointer
0CCC1 F0 03                             BEQ +
0CCC3 4C A7 CC                      JMP -
0CCC6                           +
0CCC6                           
0CCC6                               ;; Reset ppu buffer update and pointer
0CCC6 A9 00                         LDA #$00
0CCC8 85 29                         STA ppu_buffer_update
0CCCA 85 2A                         STA ppu_buffer_pointer
0CCCC                               
0CCCC                               ;; Reset scrolling position
0CCCC 8D 05 20                      STA PPU_SCROLL
0CCCF 8D 05 20                      STA PPU_SCROLL
0CCD2                           
0CCD2                               ;; Restore ppu control register and mask
0CCD2 A9 90                         LDA #%10010000
0CCD4 8D 00 20                      STA PPU_CTRL
0CCD7 A5 12                         LDA soft_ppu_mask
0CCD9 8D 01 20                      STA PPU_MASK
0CCDC A9 00                         LDA #$00
0CCDE                           
0CCDE                           ;; Continue other NMI stuff
0CCDE                           +no_ppu_buffer_update:
0CCDE                               .include "game/test/show_animation_nmi.asm"
0CCDE                               ;; Reset sprite RAM, draw sprites
0CCDE 8D 03 20                      STA OAM_ADDR
0CCE1 A9 02                         LDA #$02
0CCE3 8D 14 40                      STA OAM_DMA
0CCE6                           
0CCE6 A0 04                         LDY #MAX_ANIMATIONS
0CCE8 A2 00                         LDX #$00
0CCEA                               -
0CCEA BD 30 03                          LDA explosion_framecounter,x
0CCED F0 03                             BEQ +
0CCEF DE 30 03                              DEC explosion_framecounter,x
0CCF2                                   +
0CCF2 E8                                INX
0CCF3 88                                DEY
0CCF4 F0 03                             BEQ +done        
0CCF6 4C EA CC                      JMP -
0CCF9                           +done:
0CCF9                               
0CCF9 A5 2D                         LDA nudge_counter
0CCFB F0 02                         BEQ +
0CCFD C6 2D                             DEC nudge_counter
0CCFF                               +
0CCFF                           
0CCFF                           ;; This is what happens when we forced nmi skip
0CCFF                           +force_skip_nmi:
0CCFF                           
0CCFF                               ;; Increase frame counters
0CCFF E6 15                         INC frame_counter
0CD01                           
0CD01                               ;; reset ball_update_position
0CD01 A9 00                         LDA #$00
0CD03 85 25                         STA ball_update_position
0CD05                           
0CD05                               ;; Don't skip next NMI request
0CD05 A9 00                         LDA #$00
0CD07 85 13                         STA skip_nmi
0CD09                           
0CD09                               ;; Restore X, Y and PC from stack
0CD09 28                            PLP
0CD0A 68                            PLA
0CD0B A8                            TAY
0CD0C 68                            PLA
0CD0D AA                            TAX
0CD0E                           
0CD0E                           +skip_nmi:
0CD0E                               ;; Restore accumulator from stack
0CD0E 68                            PLA
0CD0F                           
0CD0F                               ;; Return
0CD0F 40                            RTI
0CD10                           
0CD10                           ;; IRQ handler (empty)
0CD10                           IRQ:
0CD10                               .include "interrupt/irq.asm"
0CD10 40                            RTI0CD11                           
0CD11                           ;; Interrupt vectors
0CD11 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 7B CC                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 10 CD                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
