	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; Enable test mode
	                            ;; - Test mode adds a test level and allows the developer to start
	                            ;;   at any given level with any number of lives. Remove the line
	                            ;;   that starts with TESTING (or add a semicolon in front) to
	                            ;;   disable test mode.
	                            ;TESTING    =   1
	                            START_LEVEL =   0
	                            LAST_LEVEL  =   1
	                            START_LIVES = 255
	                            
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            PULSE2_VOLUME   = $4004
	                            PULSE2_SWEEP    = $4005
	                            PULSE2_TIMER_LO = $4006
	                            PULSE2_TIMER_HI = $4007
	                            PULSE2_LENGTH   = $4007
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Sentience (warm boot) check string
00000                               sentience       .dsb 5
00005                               
00005                               ;; High score variables (declared up high, so basic reset
00005                               ;; can skip over those)
00005                               hi_score        .dsb 6
0000B                               
0000B                               ;; Reserve ten temporary variables for use in subroutines.
0000B                               temp              .dsb 10
00015                           
00015                               ;; Reserve a two-byte temporary variable for use with
00015                               ;; 16-bit operations (like addresses)
00015                               temp16            .dsb 2
00017                           
00017                               ;; Two-byte variable to store a pointer address
00017                               pointer           .dsb 2
00019                           
00019                               ;; Variable to store button presses
00019                               buttons_prev      .dsb 1
0001A                               buttons_held      .dsb 1
0001B                               buttons_pressed   .dsb 1
0001C                               buttons_released  .dsb 1
0001D                           
0001D                               ;; PPU mask buffer variable, used to store the new value of
0001D                               ;; the PPU mask outside NMI
0001D                               soft_ppu_mask     .dsb 1
0001E                           
0001E                               ;; Variables to skip NMI handling
0001E                               skip_nmi          .dsb 1
0001F                               force_skip_nmi    .dsb 1
00020                           
00020                               ;; Counters and seeds
00020                               frame_counter     .dsb 1
00021                               random_seed       .dsb 1
00022                           
00022                               ;; Game specific variables
00022                               .include "game/ram/zp.asm"
00022                           
00022                           ;; Ball variables
00022                           ball_xpos_hi           .dsb 1
00023                           ball_xpos_lo           .dsb 1
00024                           ball_ypos_hi           .dsb 1
00025                           ball_ypos_lo           .dsb 1
00026                           ball_ypos_hi_prev      .dsb 1
00027                           ball_ypos_lo_prev      .dsb 1
00028                           ball_xpos_hi_prev      .dsb 1
00029                           ball_xpos_lo_prev      .dsb 1
0002A                           ball_lives             .dsb 1   ; number of lives left
0002B                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00031                           add_to_score           .dsb 6
00037                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0003A                           
0003A                           ;; Ball bounding box, relative to the screen
0003A                           ball_left              .dsb 1
0003B                           ball_center            .dsb 1
0003C                           ball_right             .dsb 1
0003D                           ball_top               .dsb 1
0003E                           ball_middle            .dsb 1
0003F                           ball_bottom            .dsb 1
00040                           
00040                           ;; Update-position check
00040                           sprites_update_position  .dsb 1
00041                           
00041                           ;; Lock block space helper variable
00041                           ;; When the ball hits a lock block, it should only move if the space
00041                           ;; where it moves to, is not solid. This variable holds the metatile
00041                           ;; offset of the position where the lock block should move to, so
00041                           ;; we can check if it is solid or not.
00041                           ;;
00041                           ;; UP:    #%11110000 #$F0
00041                           ;; DOWN:  #%00010000 #$10
00041                           ;; LEFT:  #%11111111 #$FF
00041                           ;; RIGHT: #%00000001 #$01
00041                           ;;        #%d......h
00041                           move_block_space_to_check  .dsb 1
00042                           
00042                           
00042                           ;; Ball flags
00042                           ;; #% c c c v . f n a
00042                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00042                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00042                           ;;    | | | | | +------ ball is frozen (not moving)
00042                           ;;    | | | | +-------- (unused for now)
00042                           ;;    | | | +---------- ball moves up (0) or down (1)
00042                           ;;    +-+-+------------ ball color (1-6)
00042                           ball_flags             .dsb 1
00043                           
00043                           
00043                           ;; Screen mode
00043                           ;; #% u . . . . . t t
00043                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00043                           ;;    | +-+-+-+-+------------- unused
00043                           ;;    +----------------------- should the screen update
00043                           screen_mode            .dsb 1
00044                           
00044                           
00044                           
00044                           ;; PPU buffer variables
00044                           ppu_buffer_update      .dsb 1
00045                           ppu_buffer_pointer     .dsb 1
00046                           
00046                           ;; Pointer to keep track of the number of explosions
00046                           explosion_pointer      .dsb 1
00047                           
00047                           ;; Pointer to keep track of the number of move blocks
00047                           move_block_pointer     .dsb 1
00048                           
00048                           ;; Sprite RAM pointer to keep track of sprites to update
00048                           sprite_ram_pointer     .dsb 1
00049                           
00049                           ;; Timers 
00049                           nudge_timer            .dsb 1
0004A                           bonus_timer            .dsb 1
0004B                           kill_timer             .dsb 1
0004C                           unfreeze_timer         .dsb 1
0004D                           endgame_palette_timer  .dsb 1
0004E                           
0004E                           ;; Current level (doubles as level select variable)
0004E                           current_level          .dsb 1
0004F                           
0004F                           ;; Tile type the ball is currently colliding with
0004F                           colliding_tile         .dsb 1
00050                           
00050                           ;; Number of blocks left on screen
00050                           blocks_left            .dsb 1
00051                           
00051                           ;; Sound control variables
00051                           max_noise              .dsb 1
00052                           sweep_noise            .dsb 1
00053                           current_noise          .dsb 1
00054                           noise_timer            .dsb 1
00055                           do_beeps               .dsb 1
00056                           soft_pulse1            .dsb 1
00057                           noise_muted            .dsb 1
00058                           
00058                           ;; Sound effect variables
00058                           sfx_address            .dsb 2
0005A                           sfx_timer              .dsb 3
0005D                           sfx_frequency          .dsb 2
0005F                           sfx_sweep_count        .dsb 1
00060                           sfx_sweep_volume       .dsb 1
00061                           sfx_sweep_next_volume  .dsb 1
00062                           sfx_sweep_frequency    .dsb 1
00063                           
00063                           sfx_endgame_enabled    .dsb 1
00064                           sfx_endgame_p1_rest    .dsb 1
00065                           sfx_endgame_p1_freq_hi .dsb 1
00066                           sfx_endgame_p1_freq_lo .dsb 1
00067                           sfx_endgame_p2_rest    .dsb 1
00068                           sfx_endgame_p2_freq_hi .dsb 1
00069                           sfx_endgame_p2_freq_lo .dsb 1
0006A                           
0006A                           
0006A                           ;; Additional NMI check for timed PPU fade
0006A                           check_nmi              .dsb 1
0006B                           
0006B                           ;; The TV system this game is running on (0=ntsc, 1=pal, 2=dendy, 3=unknown)
0006B                           tv_system              .dsb 1
0006C                           
0006C                           ;; This variable should be used for absolutely nothing
0006C                           void                   .dsb 1
0006D                           
0006D                           ;; Hacky solution to prevent double blinds
0006D                           game_won               .dsb 10006E                           
0006E                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 D8 C6                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022                                   ;; Skip first eleven bytes
0C022                                   ;; (cold boot check and high score)
0C022 A9 00                             LDA #$00
0C024 E0 0B                             CPX #$0B
0C026 90 02                             BCC +
0C028 95 00                                 STA ADDR_ZEROPAGE,x
0C02A                                   +
0C02A 9D 00 01                          STA $0100,x
0C02D 9D 00 03                          STA $0300,x
0C030 9D 00 04                          STA $0400,x
0C033 9D 00 05                          STA $0500,x
0C036 9D 00 06                          STA $0600,x
0C039 9D 00 07                          STA $0700,x
0C03C                           
0C03C                                   ;; Clear next in line
0C03C E8                                INX
0C03D D0 DE                         BNE -clrMem
0C03F                           
0C03F                               ;; Wait for vBlank
0C03F 20 D8 C6                      JSR sub_WaitForVBlank
0C042                           
0C042                           	;; Turn on NMI, set foreground $0000, background $1000
0C042 A9 90                         LDA #%10010000
0C044 8D 00 20                      STA PPU_CTRL
0C047                               
0C047                               ;; Reset PPU scroll pointer
0C047 A0 00                         LDY #0
0C049 8C 05 20                      STY $2005
0C04C 8C 05 20                      STY $2005
0C04F                               
0C04F                               ;; Initialize game
0C04F                               .include "game/interrupt/reset.asm"
0C04F                           
0C04F                           ;; Softer reset
0C04F                           ;; After game over, the game JMPs here to prevent
0C04F                           ;; resetting the high score
0C04F                           
0C04F                           lbl_SoftReset:
0C04F                           
0C04F                               ;; Check for cold or warm boot, by comparing
0C04F                               ;; the 6-byte RAM and ROM sentience string.
0C04F A2 00                         LDX #$00
0C051 A0 00                         LDY #$00
0C053                               -
0C053 BD 15 DD                          LDA tbl_Sentient,x
0C056 D5 00                             CMP sentience,x
0C058 F0 01                             BEQ +
0C05A C8                                    INY
0C05B                                   +
0C05B 95 00                             STA sentience,x
0C05D E8                                INX
0C05E E0 05                             CPX #$05
0C060 D0 F1                         BNE -
0C062                           
0C062                               ;; If system is sentient (warm boot), Y is zero now.
0C062 C0 00                         CPY #$00
0C064 F0 10                         BEQ +
0C066                           
0C066                                   ;; System not sentient (cold boot)
0C066                                   ;; Set default hi score to 100.000
0C066 A9 01                             LDA #$01
0C068 85 05                             STA hi_score
0C06A A9 00                             LDA #$00
0C06C 85 06                             STA hi_score+1
0C06E 85 07                             STA hi_score+2
0C070 85 08                             STA hi_score+3
0C072 85 09                             STA hi_score+4
0C074 85 0A                             STA hi_score+5
0C076                               +
0C076                           
0C076                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C076                           ;;
0C076                           ;;  NES TV system detection code
0C076                           ;;  Copyright 2011 Damian Yerrick
0C076                           ;;  https://www.nesdev.org/wiki/Detect_TV_system
0C076                           ;;
0C076 A2 00                         LDX #$00
0C078 A0 00                         LDY #$00
0C07A A9 01                         LDA #$01
0C07C 85 6A                         STA check_nmi
0C07E                               -
0C07E C5 6A                             CMP check_nmi
0C080 F0 FC                         BEQ -
0C082 A9 01                         LDA #$01
0C084 85 6A                         STA check_nmi
0C086                               -
0C086 E8                                INX
0C087 D0 01                             BNE +
0C089 C8                                    INY
0C08A C5 6A                             + CMP check_nmi
0C08C F0 F8                         BEQ -
0C08E 98                            TYA
0C08F 38                            SEC
0C090 E9 0A                         SBC #$0A
0C092 C9 03                         CMP #$03
0C094 90 02                         BCC +
0C096 A9 03                             LDA #$03
0C098 85 6B                         + STA tv_system ; 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C09A                           ;;
0C09A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C09A                           
0C09A                           
0C09A                               ;; Tell game to load the intro screen
0C09A A9 80                         LDA #LOAD_INTRO_SCREEN
0C09C 85 43                         STA screen_mode
0C09E                           
0C09E                               ;; Set number of lives (5)
0C09E A9 05                         LDA #$05
0C0A0 85 2A                         STA ball_lives
0C0A2                           
0C0A2                               ;; Start at level 1
0C0A2 A9 00                         LDA #$00
0C0A4 85 2B                         STA ball_score
0C0A6 85 2C                         STA ball_score+1
0C0A8 85 2D                         STA ball_score+2
0C0AA 85 2E                         STA ball_score+3
0C0AC 85 2F                         STA ball_score+4
0C0AE 85 30                         STA ball_score+5
0C0B0                           
0C0B0                           ifdef TESTING
0C0B0                               LDA #START_LIVES
0C0B0                               STA ball_lives
0C0B0                               LDA #START_LEVEL
0C0B0                           endif
0C0B0                           
0C0B0 85 4E                         STA current_level
0C0B2                           
0C0B2                           
0C0B2                           
0C0B2                           ;; Main game loop
0C0B2                           lbl_MainGameLoop:
0C0B2 20 CF C6                      JSR sub_WaitForNMI ; align main loop
0C0B5                               .include "game/main.asm"
0C0B5                           
0C0B5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C0B5                           ;;
0C0B5                           ;; game/main.asm
0C0B5                           ;;
0C0B5                           ;; The main game loop content.
0C0B5                           ;;
0C0B5                           ;;
0C0B5                           
0C0B5                               ;; Reset sprite pointer every game loop
0C0B5 A9 00                         LDA #$00
0C0B7 85 48                         STA sprite_ram_pointer
0C0B9                           
0C0B9                               ;; Store previous buttons
0C0B9 A5 1A                         LDA buttons_held
0C0BB 85 19                         STA buttons_prev
0C0BD                           
0C0BD                               ;; Read controller input
0C0BD 20 BB C6                      JSR sub_ReadController
0C0C0                           
0C0C0                               ;; Get buttons released
0C0C0 A5 1A                         LDA buttons_held
0C0C2 49 FF                         EOR #$FF
0C0C4 25 19                         AND buttons_prev
0C0C6 85 1C                         STA buttons_released
0C0C8                           
0C0C8                               ;; Set buttons pressed
0C0C8 A5 19                         LDA buttons_prev
0C0CA 49 FF                         EOR #$FF
0C0CC 25 1A                         AND buttons_held
0C0CE 85 1B                         STA buttons_pressed
0C0D0                           
0C0D0                               ;; Load screen?
0C0D0 A5 43                         LDA screen_mode
0C0D2 29 80                         AND #%10000000
0C0D4 F0 1E                         BEQ +screenLoaded
0C0D6                           
0C0D6                               ;; Get screen type to load
0C0D6 A5 43                         LDA screen_mode
0C0D8 29 03                         AND #%00000011
0C0DA A8                            TAY
0C0DB                               
0C0DB                               ;; Get address to load screen type from
0C0DB B9 73 D4                      LDA tbl_LoadScreenLo,y
0C0DE 85 17                         STA pointer
0C0E0 B9 70 D4                      LDA tbl_LoadScreenHi,y
0C0E3 85 18                         STA pointer+1
0C0E5                           
0C0E5                               ;; Load screen
0C0E5 20 74 C8                      JSR sub_DisableRendering
0C0E8 20 C9 CB                      JSR sub_JumpToPointer
0C0EB 20 88 C8                      JSR sub_EnableRendering
0C0EE                               
0C0EE                               ;; Don't load screen anymore next loop
0C0EE A5 43                         LDA screen_mode
0C0F0 29 7F                         AND #%01111111
0C0F2 85 43                         STA screen_mode
0C0F4                               
0C0F4                           
0C0F4                           +screenLoaded:
0C0F4                               ;; Check if we're on the game screen
0C0F4 A5 43                         LDA screen_mode
0C0F6 C9 01                         CMP #IS_GAME_SCREEN
0C0F8 F0 03                         BEQ +
0C0FA 4C 9D C3                          JMP +checkNextScreen
0C0FD                               +
0C0FD                           
0C0FD                               ;; Load sprite 0 in place
0C0FD A9 18                         LDA #$18
0C0FF 8D 00 02                      STA ADDR_SPRITERAM
0C102 A9 0F                         LDA #$0F
0C104 8D 01 02                      STA ADDR_SPRITERAM+1
0C107 A9 22                         LDA #$22
0C109 8D 02 02                      STA ADDR_SPRITERAM+2
0C10C A9 F8                         LDA #$F8
0C10E 8D 03 02                      STA ADDR_SPRITERAM+3
0C111 A9 04                         LDA #$04
0C113 85 48                         STA sprite_ram_pointer
0C115                           
0C115                               ;; We're on the game screen
0C115                               ;; Check if position should be updated (ie. has nmi happened yet)
0C115 A5 40                         LDA sprites_update_position
0C117 F0 03                         BEQ +
0C119 4C 03 C3                          JMP +skipSpriteMovement
0C11C                               +
0C11C                           
0C11C                               ;; Check if ball is frozen
0C11C A5 42                         LDA ball_flags
0C11E 29 04                         AND #BALL_IS_FROZEN
0C120 F0 03                         BEQ +
0C122 4C C2 C2                          JMP +skipBallMovement
0C125                               +
0C125                           
0C125                               ;; Move the ball
0C125                               .include "game/include/main/move_ball.asm"
0C125                           
0C125                               ;; Check if ball goes up or down
0C125 A5 42                         LDA ball_flags
0C127 29 10                         AND #BALL_MOVES_DOWN
0C129 F0 2B                         BEQ +moveBallUp
0C12B                           
0C12B                           
0C12B                           +moveBallDown:
0C12B                               ;; update the low byte
0C12B A5 25                         LDA ball_ypos_lo
0C12D 85 27                         STA ball_ypos_lo_prev
0C12F 18                            CLC
0C130 69 88                         ADC #BALL_SPEED_LO
0C132 85 25                         STA ball_ypos_lo
0C134                           
0C134                               ;; update the high byte with carry
0C134 A5 24                         LDA ball_ypos_hi
0C136 85 26                         STA ball_ypos_hi_prev
0C138 69 01                         ADC #BALL_SPEED_HI
0C13A 85 24                         STA ball_ypos_hi
0C13C                               
0C13C                               ;; Check bottom bound
0C13C C9 C8                         CMP #BOUND_BOTTOM
0C13E 90 3C                         BCC +checkHorizontalMovement
0C140 F0 3A                         BEQ +checkHorizontalMovement
0C142                           
0C142                           
0C142                               ;; Change ball direction to "up"
0C142 A9 C8                         LDA #BOUND_BOTTOM
0C144 38                            SEC
0C145 E9 01                         SBC #$01
0C147 85 24                         STA ball_ypos_hi
0C149 A9 00                         LDA #$00
0C14B 85 25                         STA ball_ypos_lo
0C14D A5 42                         LDA ball_flags
0C14F 29 EF                         AND #MOVE_BALL_UP
0C151 85 42                         STA ball_flags
0C153 4C 7C C1                      JMP +checkHorizontalMovement
0C156                           
0C156                           
0C156                           +moveBallUp:
0C156                               ;; update the low byte
0C156 A5 25                         LDA ball_ypos_lo
0C158 85 27                         STA ball_ypos_lo_prev
0C15A 38                            SEC
0C15B E9 88                         SBC #BALL_SPEED_LO
0C15D 85 25                         STA ball_ypos_lo
0C15F                           
0C15F                               ;; update the high byte with carry
0C15F A5 24                         LDA ball_ypos_hi
0C161 85 26                         STA ball_ypos_hi_prev
0C163 E9 01                         SBC #BALL_SPEED_HI
0C165 85 24                         STA ball_ypos_hi
0C167                               
0C167                               ;; Check top bound
0C167 C9 30                         CMP #BOUND_TOP
0C169 B0 11                         BCS +checkHorizontalMovement
0C16B                           
0C16B                               ;; Change ball direction to "down"
0C16B A9 30                         LDA #BOUND_TOP
0C16D 18                            CLC
0C16E 69 01                         ADC #$01
0C170 85 24                         STA ball_ypos_hi
0C172 A9 00                         LDA #$00
0C174 85 25                         STA ball_ypos_lo
0C176 A5 42                         LDA ball_flags
0C178 09 10                         ORA #MOVE_BALL_DOWN
0C17A 85 42                         STA ball_flags
0C17C                           
0C17C                           
0C17C                           +checkHorizontalMovement:
0C17C                           
0C17C                               ;; Check if ball is being nudged
0C17C A5 49                         LDA nudge_timer
0C17E D0 41                         BNE +doneBallMovement
0C180                           
0C180                               ;; Check if left button is held
0C180 A5 1A                         LDA buttons_held
0C182 29 02                         AND #BUTTON_LEFT
0C184 F0 1B                         BEQ +
0C186                                   ;; update the low byte
0C186 A5 23                             LDA ball_xpos_lo
0C188 38                                SEC
0C189 E9 88                             SBC #BALL_SPEED_LO
0C18B 85 23                             STA ball_xpos_lo
0C18D                           
0C18D                                   ;; update the high byte
0C18D A5 22                             LDA ball_xpos_hi
0C18F E9 01                             SBC #BALL_SPEED_HI
0C191 85 22                             STA ball_xpos_hi
0C193                                   
0C193                                   ;; Check left bound
0C193 C9 10                             CMP #BOUND_LEFT
0C195 B0 2A                             BCS +doneBallMovement
0C197                                   
0C197                                   ;; Set flag to nudge right and set nudge timer
0C197 A5 42                             LDA ball_flags
0C199 09 02                             ORA #NUDGE_BALL_RIGHT
0C19B 20 C2 CB                          JSR sub_InitiateNudge
0C19E                           
0C19E 4C C1 C1                          JMP +doneBallMovement        
0C1A1                               +
0C1A1                           
0C1A1                               ;; Check if right button is held
0C1A1 A5 1A                         LDA buttons_held
0C1A3 29 01                         AND #BUTTON_RIGHT
0C1A5 F0 1A                         BEQ +
0C1A7                                   ;; update the low byte
0C1A7 A5 23                             LDA ball_xpos_lo
0C1A9 18                                CLC
0C1AA 69 88                             ADC #BALL_SPEED_LO
0C1AC 85 23                             STA ball_xpos_lo
0C1AE                           
0C1AE                                   ;; update the high byte
0C1AE A5 22                             LDA ball_xpos_hi
0C1B0 69 01                             ADC #BALL_SPEED_HI
0C1B2 85 22                             STA ball_xpos_hi     
0C1B4                           
0C1B4                                  ;; Check right bound
0C1B4 C9 E8                             CMP #BOUND_RIGHT
0C1B6 90 09                             BCC +doneBallMovement
0C1B8 F0 07                             BEQ +doneBallMovement
0C1BA                                   
0C1BA                                   ;; Set flag to nudge left and set nudge timer
0C1BA A5 42                             LDA ball_flags
0C1BC 29 FD                             AND #NUDGE_BALL_LEFT
0C1BE 20 C2 CB                          JSR sub_InitiateNudge
0C1C1                               +
0C1C1                           
0C1C1                           
0C1C1                           +doneBallMovement:
0C1C1                           
0C1C1                               ;; Check nudge
0C1C1 A5 49                         LDA nudge_timer
0C1C3 F0 23                         BEQ +doneBallNudging
0C1C5 A5 42                             LDA ball_flags
0C1C7 29 02                             AND #NUDGE_BALL_RIGHT
0C1C9 F0 10                             BEQ +nudgeBallLeft
0C1CB                                   
0C1CB                                       ;; update the low byte
0C1CB A5 23                                 LDA ball_xpos_lo
0C1CD 18                                    CLC
0C1CE 69 88                                 ADC #BALL_SPEED_LO
0C1D0 85 23                                 STA ball_xpos_lo
0C1D2                           
0C1D2                                       ;; update the high byte
0C1D2 A5 22                                 LDA ball_xpos_hi
0C1D4 69 01                                 ADC #BALL_SPEED_HI
0C1D6 85 22                                 STA ball_xpos_hi  
0C1D8 4C E8 C1                              JMP +doneBallNudging
0C1DB                                   +nudgeBallLeft:
0C1DB                                   
0C1DB                                   ;; update the low byte
0C1DB A5 23                             LDA ball_xpos_lo
0C1DD 38                                SEC
0C1DE E9 88                             SBC #BALL_SPEED_LO
0C1E0 85 23                             STA ball_xpos_lo
0C1E2                           
0C1E2                                   ;; update the high byte
0C1E2 A5 22                             LDA ball_xpos_hi
0C1E4 E9 01                             SBC #BALL_SPEED_HI
0C1E6 85 22                             STA ball_xpos_hi
0C1E8                               +doneBallNudging:
0C1E8                           
0C1E8                               ;; Don't update position again until next frame
0C1E8                               ;; (moved to after move block routine)
0C1E8                           
0C1E8                           +doneBallHandling:
0C1E8                           
0C1E8                               
0C1E8                               ;; Do collision detection
0C1E8                               .include "game/include/main/collision_detection.asm"
0C1E8                           
0C1E8                               ;; Get ball's x-left, x-center, x-right position
0C1E8 A5 22                         LDA ball_xpos_hi
0C1EA 18                            CLC
0C1EB 69 F0                         ADC #BALL_LEFT_WGA
0C1ED 85 3A                         STA ball_left
0C1EF 18                            CLC
0C1F0 69 04                         ADC #BALL_HALF_SIZE
0C1F2 85 3B                         STA ball_center
0C1F4 18                            CLC
0C1F5 69 04                         ADC #BALL_HALF_SIZE
0C1F7 85 3C                         STA ball_right
0C1F9                           
0C1F9                               ;; Get ball's y-top, y-middle, y-bottom position
0C1F9 A5 24                         LDA ball_ypos_hi
0C1FB 18                            CLC
0C1FC 69 D0                         ADC #BALL_TOP_WGA
0C1FE 85 3D                         STA ball_top
0C200 18                            CLC
0C201 69 04                         ADC #BALL_HALF_SIZE
0C203 85 3E                         STA ball_middle
0C205 18                            CLC
0C206 69 04                         ADC #BALL_HALF_SIZE
0C208 85 3F                         STA ball_bottom
0C20A                           
0C20A                           +checkRightCollision:
0C20A                               ;; Check if ball moves right
0C20A                               ;; No need to check nudging here as that will never collide with a tile
0C20A A5 1A                         LDA buttons_held
0C20C 29 01                         AND #BUTTON_RIGHT
0C20E F0 20                         BEQ +checkLeftCollision
0C210                           
0C210                               ;; Check tile at right position
0C210 A5 3E                         LDA ball_middle
0C212 85 0B                         STA temp
0C214 A5 3C                         LDA ball_right
0C216 85 0C                         STA temp+1
0C218 20 5C C8                      JSR sub_ConvertXYToTileType
0C21B 29 01                         AND #TILE_IS_SOLID
0C21D F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C21F                           
0C21F                               ;; Nudge ball and evaluate tile type
0C21F A9 01                         LDA #$01
0C221 85 41                         STA move_block_space_to_check
0C223 A5 42                         LDA ball_flags
0C225 29 FD                         AND #NUDGE_BALL_LEFT
0C227 20 C2 CB                      JSR sub_InitiateNudge
0C22A 20 EA C9                      JSR sub_EvaluateTileType
0C22D 4C 53 C2                      JMP +checkTopCollision
0C230                           
0C230                           +checkLeftCollision:
0C230                               ;; Check if ball moves right
0C230                               ;; No need to check nudging here as that will never collide with a tile
0C230 A5 1A                         LDA buttons_held
0C232 29 02                         AND #BUTTON_LEFT
0C234 F0 1D                         BEQ +checkTopCollision
0C236                           
0C236                               ;; Check tile at right position
0C236 A5 3E                         LDA ball_middle
0C238 85 0B                         STA temp
0C23A A5 3A                         LDA ball_left
0C23C 85 0C                         STA temp+1
0C23E 20 5C C8                      JSR sub_ConvertXYToTileType
0C241 29 01                         AND #TILE_IS_SOLID
0C243 F0 0E                         BEQ +checkTopCollision
0C245                           
0C245                               ;; Tile is solid; nudge ball and evaluate tile type
0C245 A9 FF                         LDA #$FF
0C247 85 41                         STA move_block_space_to_check
0C249 A5 42                         LDA ball_flags
0C24B 09 02                         ORA #NUDGE_BALL_RIGHT
0C24D 20 C2 CB                      JSR sub_InitiateNudge
0C250 20 EA C9                      JSR sub_EvaluateTileType
0C253                               
0C253                               
0C253                           +checkTopCollision:
0C253                               ;; Check if ball moves up
0C253 A5 42                         LDA ball_flags
0C255 29 10                         AND #BALL_MOVES_DOWN
0C257 D0 27                         BNE +checkBottomCollision
0C259                           
0C259                               ;; Check tile at top position
0C259 A5 3D                         LDA ball_top
0C25B 85 0B                         STA temp
0C25D A5 3B                         LDA ball_center
0C25F 85 0C                         STA temp+1
0C261 20 5C C8                      JSR sub_ConvertXYToTileType
0C264 29 01                         AND #TILE_IS_SOLID
0C266 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C268                           
0C268                               ;; Tile is solid; move ball down and evaluate tile type
0C268 A5 27                         LDA ball_ypos_lo_prev
0C26A 85 25                         STA ball_ypos_lo
0C26C A5 26                         LDA ball_ypos_hi_prev
0C26E 85 24                         STA ball_ypos_hi
0C270 A5 42                         LDA ball_flags
0C272 09 10                         ORA #MOVE_BALL_DOWN
0C274 85 42                         STA ball_flags
0C276                           
0C276 A9 F0                         LDA #$F0 ; which is -16
0C278 85 41                         STA move_block_space_to_check
0C27A 20 EA C9                      JSR sub_EvaluateTileType
0C27D 4C A4 C2                      JMP +doneCheckingCollision
0C280                           
0C280                           +checkBottomCollision:
0C280                               ;; No movement check needed: since ball is not moving up, it must move down
0C280                           
0C280                               ;; Check tile at bottom position
0C280 A5 3F                         LDA ball_bottom
0C282 85 0B                         STA temp
0C284 A5 3B                         LDA ball_center
0C286 85 0C                         STA temp+1
0C288 20 5C C8                      JSR sub_ConvertXYToTileType
0C28B 29 01                         AND #TILE_IS_SOLID
0C28D F0 15                         BEQ +doneCheckingCollision
0C28F                           
0C28F                               ;; Tile is solid; move ball up and evaluate tile type
0C28F A5 27                         LDA ball_ypos_lo_prev
0C291 85 25                         STA ball_ypos_lo
0C293 A5 26                         LDA ball_ypos_hi_prev
0C295 85 24                         STA ball_ypos_hi
0C297 A5 42                         LDA ball_flags
0C299 29 EF                         AND #MOVE_BALL_UP
0C29B 85 42                         STA ball_flags
0C29D                           
0C29D A9 10                         LDA #$10
0C29F 85 41                         STA move_block_space_to_check
0C2A1 20 EA C9                      JSR sub_EvaluateTileType
0C2A4                           
0C2A4                           +doneCheckingCollision:
0C2A4                           
0C2A4                               
0C2A4                               ;; Update bonus
0C2A4                               .include "game/include/main/update_bonus.asm"
0C2A4                           
0C2A4                           ;; Update the bonus counter on screen
0C2A4                           
0C2A4                               ;; If bonus = 000, skip decreasing
0C2A4 A5 37                         LDA ball_bonus
0C2A6 05 38                         ORA ball_bonus+1
0C2A8 05 39                         ORA ball_bonus+2
0C2AA F0 0D                         BEQ +done
0C2AC                           
0C2AC                               ;; Check if bonus timer is done yet
0C2AC A5 4A                         LDA bonus_timer
0C2AE D0 09                         BNE +done
0C2B0                           
0C2B0                               ;; Bonus timer is done
0C2B0                               ;; Reset bonus timer
0C2B0 A9 08                         LDA #BONUS_FRAMES
0C2B2 85 4A                         STA bonus_timer
0C2B4                               
0C2B4                               ;; Subtract one from ball bonus ones
0C2B4 A2 01                         LDX #$01
0C2B6 20 93 D2                      JSR sub_SubtractXFromBonus
0C2B9                           
0C2B9                           +done:
0C2B9                           
0C2B9                           
0C2B9                               ;; Check if self-destruct
0C2B9 A5 1B                         LDA buttons_pressed
0C2BB 29 20                         AND #BUTTON_SELECT
0C2BD F0 03                         BEQ +
0C2BF 20 83 CA                          JSR sub_Selfdestruct
0C2C2                               +
0C2C2                           
0C2C2                           
0C2C2                           +skipBallMovement:
0C2C2                               ;; Move blocks a pixel up/down/left/right
0C2C2                               .include "game/include/main/move_blocks.asm"
0C2C2                           
0C2C2                               ;; Set up block loop
0C2C2 A2 04                         LDX #MAX_ANIMATIONS
0C2C4                           -moveBlocksLoop:
0C2C4 CA                            DEX
0C2C5                           
0C2C5                               ;; Check if block is still moving
0C2C5 BD 80 03                      LDA move_block_timer,x
0C2C8 F0 33                         BEQ +checkNext
0C2CA                               
0C2CA                               ;; Check if block is done moving
0C2CA C9 01                         CMP #$01
0C2CC D0 0B                         BNE +
0C2CE                                   ;; If so, draw a tile and remove the sprite
0C2CE 20 B5 C8                          JSR sub_DrawMoveTile
0C2D1 A9 00                             LDA #$00
0C2D3 9D 80 03                          STA move_block_timer,x
0C2D6 4C FD C2                          JMP +checkNext
0C2D9                               +
0C2D9                               
0C2D9                               ;; Check in which direction the block is moving
0C2D9                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2D9 BD 88 03                      LDA move_block_flags,x
0C2DC 29 03                         AND #%00000011
0C2DE F0 14                         BEQ +movingDown
0C2E0 C9 01                         CMP #$01
0C2E2 F0 0A                         BEQ +movingUp
0C2E4 C9 02                         CMP #$02
0C2E6 F0 12                         BEQ +movingRight
0C2E8                               
0C2E8                               ;; Move block in correct direction
0C2E8                               +movingLeft:
0C2E8 DE 78 03                      DEC move_block_x,x
0C2EB 4C FD C2                      JMP +checkNext
0C2EE                           
0C2EE                               +movingUp:
0C2EE DE 7C 03                      DEC move_block_y,x
0C2F1 4C FD C2                      JMP +checkNext
0C2F4                           
0C2F4                               +movingDown:
0C2F4 FE 7C 03                      INC move_block_y,x
0C2F7 4C FD C2                      JMP +checkNext
0C2FA                           
0C2FA                               +movingRight:
0C2FA FE 78 03                      INC move_block_x,x
0C2FD                           
0C2FD                               ;; Check next block (if any left)
0C2FD                               +checkNext:
0C2FD E0 00                         CPX #$00
0C2FF D0 C3                         BNE -moveBlocksLoop
0C301                               
0C301                               ;; Don't update sprites
0C301 E6 40                         INC sprites_update_position
0C303                           
0C303                           
0C303                           +skipSpriteMovement:
0C303                               ;; Testing timed PPU scroll concept (disabled)
0C303                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C303                           
0C303                               ;; Check if ball is dead
0C303 A5 42                         LDA ball_flags
0C305 29 01                         AND #BALL_IS_DEAD
0C307 F0 03                         BEQ +
0C309 4C 2B C3                          JMP +ballIsDead
0C30C                               +
0C30C                               
0C30C                               ;; Add ball to sprite buffer
0C30C A6 48                         LDX sprite_ram_pointer
0C30E A5 24                         LDA ball_ypos_hi
0C310 9D 00 02                      STA ADDR_SPRITERAM,x
0C313 E8                            INX
0C314 A9 01                         LDA #BALL_TILE_CHR
0C316 9D 00 02                      STA ADDR_SPRITERAM,x
0C319 E8                            INX
0C31A A9 00                         LDA #BALL_ATTR
0C31C 9D 00 02                      STA ADDR_SPRITERAM,x
0C31F E8                            INX
0C320 A5 22                         LDA ball_xpos_hi
0C322 9D 00 02                      STA ADDR_SPRITERAM,x
0C325 E8                            INX
0C326 86 48                         STX sprite_ram_pointer
0C328 4C 3C C3                      JMP +drawBlocks
0C32B                           
0C32B                           +ballIsDead:
0C32B                               ;; Check if kill timer has reset
0C32B A5 4B                         LDA kill_timer
0C32D F0 03                         BEQ +
0C32F 4C 3C C3                          JMP +drawBlocks
0C332                               +
0C332                               
0C332                               ;; Take a live
0C332 C6 2A                         DEC ball_lives
0C334 D0 03                         BNE +
0C336                                   ;; If no lives left, initiate game over sequence
0C336 4C EF C3                          JMP lbl_GameOver
0C339                               +
0C339                               
0C339                               ;; Reload current level
0C339 4C 8C C5                      JMP lbl_InitiateLevelLoad
0C33C                           
0C33C                           
0C33C                           +drawBlocks:
0C33C                               ;; Draw moving block(s, if any)
0C33C                               .include "game/include/main/draw_blocks.asm"
0C33C                           
0C33C                           ;; Handle movement of move blocks
0C33C                           
0C33C                               ;; Set up a loop
0C33C A0 04                         LDY #MAX_ANIMATIONS
0C33E                           -drawBlocksLoop:
0C33E 88                            DEY
0C33F                           
0C33F                               ;; If timer is zero, check the next move block
0C33F B9 80 03                      LDA move_block_timer,y
0C342 F0 52                         BEQ +nextMoveBlock
0C344                               
0C344                               ;; Get current sprite pointer
0C344 A6 48                         LDX sprite_ram_pointer
0C346                           
0C346                               ;; Draw the sprites on screen
0C346 B9 7C 03                      LDA move_block_y,y
0C349 9D 00 02                      STA ADDR_SPRITERAM,x
0C34C 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C34F 18                            CLC
0C350 69 08                         ADC #$08
0C352 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C355 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C358 E8                            INX
0C359                           
0C359 A9 52                         LDA #$52 ; Top left chr id
0C35B 9D 00 02                      STA ADDR_SPRITERAM,x
0C35E A9 53                         LDA #$53 ; Top right chr id
0C360 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C363 A9 62                         LDA #$62 ; Bottom left chr id
0C365 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C368 A9 63                         LDA #$63 ; Bottom right chr id
0C36A 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C36D E8                            INX
0C36E                           
0C36E A9 00                         LDA #BALL_ATTR
0C370 9D 00 02                      STA ADDR_SPRITERAM,x
0C373 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C376 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C379 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C37C E8                            INX
0C37D                           
0C37D B9 78 03                      LDA move_block_x,y
0C380 9D 00 02                      STA ADDR_SPRITERAM,x
0C383 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C386 18                            CLC
0C387 69 08                         ADC #$08
0C389 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C38C 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C38F                           
0C38F                               ;; Update sprite RAM pointer
0C38F A5 48                         LDA sprite_ram_pointer
0C391 18                            CLC
0C392 69 10                         ADC #$10
0C394 85 48                         STA sprite_ram_pointer
0C396                           
0C396                           
0C396                           
0C396                           +nextMoveBlock:
0C396                               ;; Check the next move block
0C396 C0 00                         CPY #$00
0C398 D0 A4                         BNE -drawBlocksLoop
0C39A                           
0C39A 4C E9 C3                      JMP +doneScreenLoad
0C39D                           
0C39D                           
0C39D                           
0C39D                           +checkNextScreen:
0C39D                           
0C39D                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C39D                               ;; Upon pressing START, the selected level will start
0C39D                               .include "game/include/main/select_level.asm"
0C39D                           
0C39D                               ;; Change level number on start screen
0C39D A5 1B                         LDA buttons_pressed
0C39F 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3A1 F0 3C                         BEQ +checkStartPress
0C3A3                           
0C3A3                                   ;; Select next level (1, 5, 9, 13, 17)
0C3A3 A5 4E                             LDA current_level
0C3A5 18                                CLC
0C3A6 69 04                             ADC #$04
0C3A8 C9 14                             CMP #$14
0C3AA D0 02                             BNE +
0C3AC A9 00                                 LDA #$00
0C3AE                                   +
0C3AE 85 4E                             STA current_level
0C3B0                                   
0C3B0                                   ;; Convert level number to two-byte value
0C3B0 A9 00                             LDA #$00
0C3B2 85 0E                             STA temp+3
0C3B4 A5 4E                             LDA current_level
0C3B6 18                                CLC
0C3B7 69 01                             ADC #$01
0C3B9                           
0C3B9                               -
0C3B9 C9 0A                             CMP #$0A
0C3BB 90 08                             BCC +
0C3BD E6 0E                                 INC temp+3
0C3BF 38                                    SEC
0C3C0 E9 0A                                 SBC #$0A
0C3C2 4C B9 C3                              JMP -
0C3C5                                   +
0C3C5                           
0C3C5                                   ;; Add level number to PPU buffer
0C3C5 18                                CLC
0C3C6 69 01                             ADC #$01
0C3C8 85 0D                             STA temp+2
0C3CA A9 20                             LDA #$20
0C3CC 85 0B                             STA temp
0C3CE A9 C7                             LDA #$C7
0C3D0 85 0C                             STA temp+1
0C3D2 20 F8 D2                          JSR sub_WriteByteToPPUBuffer
0C3D5                                   
0C3D5 C6 0C                             DEC temp+1
0C3D7 A4 0E                             LDY temp+3
0C3D9 C8                                INY
0C3DA 84 0D                             STY temp+2
0C3DC 20 F8 D2                          JSR sub_WriteByteToPPUBuffer
0C3DF                                   
0C3DF                               +checkStartPress:
0C3DF                           
0C3DF                           
0C3DF                           
0C3DF                               ;; If START button is pressed
0C3DF A5 1B                         LDA buttons_pressed
0C3E1 29 10                         AND #BUTTON_START
0C3E3 F0 04                         BEQ +
0C3E5                                   ;; Start the level
0C3E5 A9 81                             LDA #LOAD_GAME_SCREEN
0C3E7 85 43                             STA screen_mode
0C3E9                               +
0C3E9                           
0C3E9                           
0C3E9                           
0C3E9                           +doneScreenLoad:
0C3E9                           
0C3E9                               ;; Load animations (if any)
0C3E9                               ;; and sprite clean-up
0C3E9 20 CC CB                      JSR sub_LoadAnimations
0C3EC                           
0C3EC 4C B2 C0                      JMP lbl_MainGameLoop
0C3EF                           
0C3EF                           ;; Following sequences are outside main game loop
0C3EF                           .include "game/include/main/game_over.asm"
0C3EF                           
0C3EF                           ;; Game over sequence
0C3EF                           lbl_GameOver:
0C3EF                           
0C3EF                               ;; Check if current score exceeds high score
0C3EF A2 00                         LDX #$00
0C3F1                               -checkHiScoreLoop:
0C3F1                           
0C3F1                                   ;; Compare ball score digit with high score digit
0C3F1 B5 2B                             LDA ball_score,x
0C3F3 D5 05                             CMP hi_score,x
0C3F5                           
0C3F5                                   ;; If the score digit is lower, the entire score must
0C3F5                                   ;; be lower, so we can skip checking the other digits
0C3F5 90 18                             BCC +hiScoreHandlingDone
0C3F7                           
0C3F7                                   ;; If the score digit is equal, check the next digit
0C3F7 F0 03                             BEQ +checkNextDigit
0C3F9                           
0C3F9                                   ;; If the score digit is higher, update the high score
0C3F9 4C 04 C4                          JMP +updateHighScore
0C3FC                           
0C3FC                                   ;; Check the next digit (if any digits are left)
0C3FC                                   +checkNextDigit:
0C3FC E8                                INX
0C3FD E0 06                             CPX #$06
0C3FF D0 F0                         BNE -checkHiScoreLoop
0C401                           
0C401                               ;; All digits are equal? What are the odds!
0C401                               ;; Either way, we don't have to update the high score,
0C401                               ;; although doing so won't do any harm, so if we need
0C401                               ;; three more bytes at the cost of a couple dozen
0C401                               ;; cycles, we can skip this jump.
0C401 4C 0F C4                      JMP +hiScoreHandlingDone
0C404                           
0C404                               ;; Transfer the ball score values to the high score values
0C404                               +updateHighScore:
0C404 A2 00                         LDX #$00
0C406                               -
0C406 B5 2B                             LDA ball_score,x
0C408 95 05                             STA hi_score,x
0C40A E8                                INX
0C40B E0 06                             CPX #$06
0C40D D0 F7                         BNE -
0C40F                           
0C40F                               ;; The high score has been handled now.
0C40F                               +hiScoreHandlingDone:
0C40F                               
0C40F                               ;; Disable noise channel
0C40F A9 00                         LDA #$00
0C411 8D 15 40                      STA APU_STATUS
0C414 8D 0C 40                      STA NOISE_VOLUME
0C417                               
0C417                               ;; Do blinds effect
0C417 A5 6D                         LDA game_won
0C419 D0 03                         BNE +
0C41B 20 4A C7                          JSR sub_BlindsEffect
0C41E                               +
0C41E A9 00                         LDA #$00
0C420 85 6D                         STA game_won
0C422                           
0C422                               ;; Disable draw after HUD to disable screen
0C422 20 CF C6                      JSR sub_WaitForNMI
0C425                               -
0C425 AD 02 20                          LDA PPU_STATUS
0C428 29 40                             AND #SPRITE_0_HIT
0C42A D0 F9                         BNE -
0C42C                               -
0C42C AD 02 20                          LDA PPU_STATUS
0C42F 29 40                             AND #SPRITE_0_HIT
0C431 F0 F9                         BEQ -
0C433 20 E5 D2                      JSR sub_Waste6
0C436 20 E8 D2                      JSR sub_Waste5
0C439 20 EB D2                      JSR sub_Waste4
0C43C 20 EE D2                      JSR sub_Waste3
0C43F 20 F4 D2                      JSR sub_Waste1
0C442 20 F7 D2                      JSR sub_Waste0
0C445 A9 00                         LDA #$00
0C447 8D 01 20                      STA PPU_MASK
0C44A                               
0C44A                               ;; Remove game area from view
0C44A 2C 02 20                      BIT PPU_STATUS
0C44D A9 20                         LDA #$20
0C44F 8D 06 20                      STA PPU_ADDR
0C452 A9 A0                         LDA #$A0
0C454 8D 06 20                      STA PPU_ADDR
0C457 A9 00                         LDA #$00
0C459 A2 16                         LDX #$16
0C45B                               -xLoop:
0C45B A0 20                             LDY #$20
0C45D                                   -yLoop:
0C45D 8D 07 20                              STA PPU_DATA
0C460 88                                    DEY
0C461 D0 FA                             BNE -yLoop
0C463 CA                                DEX
0C464 D0 F5                         BNE -xLoop
0C466                               
0C466                               ;; Set lives to 0
0C466 2C 02 20                      BIT PPU_STATUS
0C469 A9 20                         LDA #$20
0C46B 8D 06 20                      STA PPU_ADDR
0C46E A9 92                         LDA #$92
0C470 8D 06 20                      STA PPU_ADDR
0C473 A9 01                         LDA #$01
0C475 8D 07 20                      STA PPU_DATA
0C478                               
0C478                               ;; Reset scroll
0C478 A9 00                         LDA #$00
0C47A 8D 05 20                      STA PPU_SCROLL
0C47D 8D 05 20                      STA PPU_SCROLL
0C480 20 CF C6                      JSR sub_WaitForNMI
0C483                           
0C483                               ;; Pause for a little while
0C483 A2 18                         LDX #$18
0C485                               -
0C485 20 CF C6                          JSR sub_WaitForNMI
0C488 CA                                DEX
0C489 D0 FA                         BNE -
0C48B                                       
0C48B                               ;; Do flash effect
0C48B 20 63 CB                      JSR sub_FlashEffect
0C48E                           
0C48E                               ;; Draw GAME OVER tiles over game screen
0C48E A9 21                         LDA #$21
0C490 85 0B                         STA temp
0C492 A9 EB                         LDA #$EB
0C494 85 0C                         STA temp+1
0C496                           
0C496 A2 00                         LDX #$00
0C498                               -gameOverTileLoop:
0C498 BD 19 DC                          LDA tbl_GameOver,x
0C49B 85 0D                             STA temp+2
0C49D 20 F8 D2                          JSR sub_WriteByteToPPUBuffer
0C4A0 E6 0C                             INC temp+1
0C4A2 E8                                INX
0C4A3 E0 0A                             CPX #$0A
0C4A5 D0 F1                         BNE -gameOverTileLoop
0C4A7                               
0C4A7                               ;; Update GAME OVER attributes on game screen
0C4A7 A9 23                         LDA #$23
0C4A9 85 0B                         STA temp
0C4AB A9 DA                         LDA #$DA
0C4AD 85 0C                         STA temp+1
0C4AF A9 AA                         LDA #$AA
0C4B1 85 0D                         STA temp+2
0C4B3 A2 04                         LDX #$04
0C4B5                               -
0C4B5 20 F8 D2                          JSR sub_WriteByteToPPUBuffer
0C4B8 E6 0C                             INC temp+1
0C4BA CA                                DEX
0C4BB D0 F8                         BNE -
0C4BD 20 CF C6                      JSR sub_WaitForNMI
0C4C0                               
0C4C0                              
0C4C0                               ;; If player score is larger than high score
0C4C0                               ;; Overwrite high score with player score
0C4C0                               ;; [@TODO]
0C4C0                               
0C4C0                               
0C4C0                               ;; If player presses either A or START, (soft) reset the game
0C4C0                               -checkController:
0C4C0 20 BB C6                          JSR sub_ReadController
0C4C3 A5 1A                             LDA buttons_held
0C4C5 29 90                             AND #%10010000
0C4C7 F0 F7                         BEQ -checkController
0C4C9 4C 4F C0                      JMP lbl_SoftReset
0C4CC                           
0C4CC                           .include "game/include/main/level_win.asm"
0C4CC                           
0C4CC                           ;; Handling of level win state
0C4CC                           lbl_LevelWin:
0C4CC                           
0C4CC                               ;; Freeze the ball
0C4CC A5 42                         LDA ball_flags
0C4CE 09 04                         ORA #FREEZE_BALL
0C4D0 85 42                         STA ball_flags
0C4D2                           
0C4D2                               ;; Disable noise channel
0C4D2 A9 01                         LDA #$01
0C4D4 85 57                         STA noise_muted
0C4D6                               
0C4D6                               ;; Wait a few frames
0C4D6 A2 18                         LDX #$18
0C4D8 20 D0 D2                      JSR sub_WaitXFrames
0C4DB                           
0C4DB                               ;; Set null tile color to yellow
0C4DB A9 3F                         LDA #$3F
0C4DD 85 0B                         STA temp
0C4DF A9 02                         LDA #$02
0C4E1 85 0C                         STA temp+1
0C4E3 A9 38                         LDA #$38
0C4E5 85 0D                         STA temp+2
0C4E7 20 F8 D2                      JSR sub_WriteByteToPPUBuffer
0C4EA                               
0C4EA                               ;; Quick and dirty way to remove ball from screen
0C4EA A9 EF                         LDA #$EF
0C4EC 8D 04 02                      STA ADDR_SPRITERAM+4
0C4EF 8D 05 02                      STA ADDR_SPRITERAM+5
0C4F2 8D 06 02                      STA ADDR_SPRITERAM+6
0C4F5 8D 07 02                      STA ADDR_SPRITERAM+7
0C4F8                               
0C4F8                               ;; Wait a few frames
0C4F8 A2 10                         LDX #$10
0C4FA 20 D0 D2                      JSR sub_WaitXFrames
0C4FD                               
0C4FD                               ;; Restore null tile color to dark blue
0C4FD A9 3F                         LDA #$3F
0C4FF 85 0B                         STA temp
0C501 A9 02                         LDA #$02
0C503 85 0C                         STA temp+1
0C505 A9 12                         LDA #$12
0C507 85 0D                         STA temp+2
0C509 20 F8 D2                      JSR sub_WriteByteToPPUBuffer
0C50C                               
0C50C                               ;; Initiate frequency beeps (@TODO)
0C50C A9 0F                         LDA #$0F
0C50E 85 5F                         STA sfx_sweep_count
0C510                               -sweepsLoop:
0C510                               
0C510                                   ;; Reset volume for new sweep
0C510 A5 5F                             LDA sfx_sweep_count
0C512 85 61                             STA sfx_sweep_next_volume
0C514                                   
0C514                                   ;; Set up single sweep loop
0C514 A2 00                             LDX #$00
0C516                                   -sweepLoop:
0C516                                   
0C516                                       ;; Set current low frequency
0C516 BD D0 DC                              LDA tbl_SweepFrequency,x
0C519 85 62                                 STA sfx_sweep_frequency
0C51B                                       
0C51B                                       ;; Set current volume
0C51B A4 61                                 LDY sfx_sweep_next_volume
0C51D 84 60                                 STY sfx_sweep_volume
0C51F                                       
0C51F                                       ;; Wait for NMI to play sfx
0C51F 20 CF C6                              JSR sub_WaitForNMI
0C522                           
0C522                                       ;; Prepare next volume
0C522 B9 C0 DC                              LDA tbl_SweepVolume,y
0C525 85 61                                 STA sfx_sweep_next_volume
0C527                                       
0C527                                       ;; Clear pointer, except for sprite-zero and ball
0C527 A9 08                                 LDA #$08
0C529 85 48                                 STA sprite_ram_pointer
0C52B                           
0C52B                                       ;; Load animations (if any)
0C52B 8A                                    TXA
0C52C 48                                    PHA
0C52D 20 CC CB                              JSR sub_LoadAnimations
0C530 68                                    PLA
0C531 AA                                    TAX
0C532                           
0C532                                       ;; Play next frequency
0C532 E8                                    INX
0C533 E0 05                                 CPX #$05
0C535 D0 DF                             BNE -sweepLoop
0C537                                   
0C537                                   ;; Play next sweep
0C537 C6 5F                             DEC sfx_sweep_count
0C539 D0 D5                         BNE -sweepsLoop
0C53B                           
0C53B                               ;; Wait a few frames
0C53B A2 2D                         LDX #$2D
0C53D 20 D0 D2                      JSR sub_WaitXFrames
0C540                               
0C540                           
0C540                               ;; Play the end level sweep sound effect, and
0C540                               ;; initiate bonus score routine
0C540 A9 B8                         LDA #$B8
0C542 85 56                         STA soft_pulse1
0C544                           
0C544 A9 01                         LDA #$01
0C546 8D 15 40                      STA APU_STATUS
0C549 85 55                         STA do_beeps
0C54B                           
0C54B                               -bonusPointsLoop:
0C54B                                   ;; Check how many bonus points to subtract
0C54B                                   ;; (either the max, or what's left)
0C54B A5 37                             LDA ball_bonus
0C54D 05 38                             ORA ball_bonus+1
0C54F D0 06                             BNE +fullBonus
0C551 A5 39                             LDA ball_bonus+2
0C553 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C555 90 02                             BCC +partBonus
0C557                           
0C557                                   +fullBonus:
0C557 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C559                                   +partBonus:
0C559                           
0C559                                   ;; Put value that's added to score on the stack
0C559 AA                                TAX
0C55A BD 0B DD                          LDA tbl_BonusToScore,x
0C55D 48                                PHA
0C55E                           
0C55E                                   ;; Subtract X-register from bonus
0C55E 20 93 D2                          JSR sub_SubtractXFromBonus
0C561                           
0C561                                   ;; Get value from stack and add it to the score
0C561 68                                PLA
0C562 20 DE C6                          JSR sub_AddAccumulatorToScore
0C565                           
0C565                                   ;; Wait for NMI twice
0C565 20 CF C6                          JSR sub_WaitForNMI
0C568 20 CF C6                          JSR sub_WaitForNMI
0C56B                           
0C56B                                   ;; Check if bonus countdown is done
0C56B A5 37                             LDA ball_bonus
0C56D 05 38                             ORA ball_bonus+1
0C56F 05 39                             ORA ball_bonus+2
0C571 D0 D8                         BNE -bonusPointsLoop
0C573                           
0C573                               ;; fade out the beeping
0C573 A2 08                         LDX #$08
0C575                               -fadeOutLoop:
0C575 20 CF C6                          JSR sub_WaitForNMI
0C578 20 CF C6                          JSR sub_WaitForNMI
0C57B C6 56                             DEC soft_pulse1
0C57D CA                                DEX
0C57E D0 F5                         BNE -fadeOutLoop
0C580                           
0C580                               ;; Stop random beeping
0C580 A9 02                         LDA #$02
0C582 85 55                         STA do_beeps
0C584                               
0C584                               ;; Wait a few frames
0C584 A2 30                         LDX #$30
0C586 20 D0 D2                      JSR sub_WaitXFrames
0C589                           
0C589                               ;; Load next level
0C589 4C 8C C5                      JMP lbl_InitiateLevelLoad
0C58C                               
0C58C                           .include "game/include/main/initiate_level_load.asm"
0C58C                           
0C58C                           ;; Load level
0C58C                           lbl_InitiateLevelLoad:
0C58C                               
0C58C                               ;; Blind out the screen
0C58C 20 4A C7                      JSR sub_BlindsEffect
0C58F                               
0C58F                               ;; If ball is dead, (re)load current level
0C58F                               ;; If ball is alive, load next level
0C58F A5 42                         LDA ball_flags
0C591 29 01                         AND #BALL_IS_DEAD
0C593 D0 05                         BNE +
0C595 E6 4E                             INC current_level
0C597 4C A0 C5                          JMP +loadLevel
0C59A                               +
0C59A                               
0C59A                               ;; Revive ball
0C59A A5 42                         LDA ball_flags
0C59C 29 FE                         AND #REVIVE_BALL
0C59E 85 42                         STA ball_flags
0C5A0                           
0C5A0                           +loadLevel:
0C5A0                               ;; This loops back to level 1 after level 25* for now,
0C5A0                               ;; as a proper game ending is yet to be introduced.
0C5A0                               ;; *26 in test mode
0C5A0 A5 4E                         LDA current_level
0C5A2                               ifdef TESTING
0C5A2                                   CMP #LAST_LEVEL
0C5A2                               else
0C5A2 C9 19                             CMP #25
0C5A4                               endif
0C5A4 D0 03                         BNE +
0C5A6 4C B0 C5                          JMP lbl_GameWin
0C5A9                               +
0C5A9                               
0C5A9                               ;; Tell the game to load the level screen on the next loop.
0C5A9 A9 81                         LDA #LOAD_GAME_SCREEN
0C5AB 85 43                         STA screen_mode
0C5AD                           
0C5AD                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C5AD 4C B2 C0                      JMP lbl_MainGameLoop0C5B0                           .include "game/include/main/game_win.asm"
0C5B0                           
0C5B0                           lbl_GameWin:
0C5B0                           
0C5B0                               ;; Tell the game that it has been won
0C5B0 E6 6D                         INC game_won
0C5B2 E6 63                         INC sfx_endgame_enabled
0C5B4                               
0C5B4                               ;; Clear out game screen
0C5B4 20 CF C6                      JSR sub_WaitForNMI
0C5B7                               -
0C5B7 AD 02 20                          LDA PPU_STATUS
0C5BA 29 40                             AND #SPRITE_0_HIT
0C5BC D0 F9                         BNE -
0C5BE                               -
0C5BE AD 02 20                          LDA PPU_STATUS
0C5C1 29 40                             AND #SPRITE_0_HIT
0C5C3 F0 F9                         BEQ -
0C5C5 20 E5 D2                      JSR sub_Waste6
0C5C8 20 E8 D2                      JSR sub_Waste5
0C5CB 20 EB D2                      JSR sub_Waste4
0C5CE 20 EE D2                      JSR sub_Waste3
0C5D1 20 F4 D2                      JSR sub_Waste1
0C5D4 20 F7 D2                      JSR sub_Waste0
0C5D7 A9 00                         LDA #$00
0C5D9 8D 01 20                      STA PPU_MASK
0C5DC                               
0C5DC                               ;; Remove game area from view
0C5DC 2C 02 20                      BIT PPU_STATUS
0C5DF A9 20                         LDA #$20
0C5E1 8D 06 20                      STA PPU_ADDR
0C5E4 A9 A0                         LDA #$A0
0C5E6 8D 06 20                      STA PPU_ADDR
0C5E9 A9 00                         LDA #$00
0C5EB A2 16                         LDX #$16
0C5ED                               -xLoop:
0C5ED A0 20                             LDY #$20
0C5EF                                   -yLoop:
0C5EF 8D 07 20                              STA PPU_DATA
0C5F2 88                                    DEY
0C5F3 D0 FA                             BNE -yLoop
0C5F5 CA                                DEX
0C5F6 D0 F5                         BNE -xLoop
0C5F8                               
0C5F8                               ;; Set lives to 0
0C5F8 2C 02 20                      BIT PPU_STATUS
0C5FB A9 20                         LDA #$20
0C5FD 8D 06 20                      STA PPU_ADDR
0C600 A9 92                         LDA #$92
0C602 8D 06 20                      STA PPU_ADDR
0C605 A9 01                         LDA #$01
0C607 8D 07 20                      STA PPU_DATA
0C60A                               
0C60A                               ;; Reset scroll
0C60A A9 00                         LDA #$00
0C60C 8D 05 20                      STA PPU_SCROLL
0C60F 8D 05 20                      STA PPU_SCROLL
0C612 20 CF C6                      JSR sub_WaitForNMI
0C615                               
0C615                               ;; Do a flashy screen and play a frequency sweep at the same time
0C615 A2 00                         LDX #$00
0C617                               -endSweepsLoop:
0C617                                   ;; Reset frequency
0C617 A9 00                             LDA #$00
0C619 85 64                             STA sfx_endgame_p1_rest
0C61B 85 67                             STA sfx_endgame_p2_rest
0C61D A9 08                             LDA #$08
0C61F 85 65                             STA sfx_endgame_p1_freq_hi
0C621 A9 7A                             LDA #$7A
0C623 85 66                             STA sfx_endgame_p1_freq_lo
0C625 A9 09                             LDA #$09
0C627 85 68                             STA sfx_endgame_p2_freq_hi
0C629 A9 3A                             LDA #$3A
0C62B 85 69                             STA sfx_endgame_p2_freq_lo
0C62D                                   
0C62D                                   ;; Get current sweep length
0C62D BD D5 DC                          LDA tbl_EndSweepLength,x
0C630 85 10                             STA temp+5
0C632 A0 00                             LDY #$00
0C634                                   -endSweepLoop:
0C634                           
0C634 A5 20                                 LDA frame_counter
0C636 29 01                                 AND #$01
0C638 F0 2D                                 BEQ +playNote
0C63A                           
0C63A                                           ;; Get background color from table
0C63A 8A                                        TXA
0C63B 48                                        PHA
0C63C E6 4D                                     INC endgame_palette_timer
0C63E A5 4D                                     LDA endgame_palette_timer
0C640 29 0F                                     AND #$0F
0C642 AA                                        TAX
0C643 BD 1A DD                                  LDA tbl_EndGamePalette,x
0C646 85 0D                                     STA temp+2
0C648 68                                        PLA
0C649 AA                                        TAX
0C64A                                       
0C64A                                           ;; Put background color in PPU buffer
0C64A 98                                        TYA
0C64B 48                                        PHA
0C64C A9 3F                                     LDA #$3F
0C64E 85 0B                                     STA temp
0C650 A9 00                                     LDA #$00
0C652 85 0C                                     STA temp+1
0C654 20 F8 D2                                  JSR sub_WriteByteToPPUBuffer
0C657 A9 0D                                     LDA #$0D
0C659 85 0C                                     STA temp+1
0C65B 20 F8 D2                                  JSR sub_WriteByteToPPUBuffer
0C65E A9 19                                     LDA #$19
0C660 85 0C                                     STA temp+1
0C662 20 F8 D2                                  JSR sub_WriteByteToPPUBuffer
0C665 68                                        PLA
0C666 A8                                        TAY
0C667                           
0C667                                       +playNote:
0C667                                       ;; Play the note
0C667 20 CF C6                              JSR sub_WaitForNMI
0C66A                                       
0C66A                                       ;; Prepare the next note
0C66A A5 64                                 LDA sfx_endgame_p1_rest
0C66C 18                                    CLC
0C66D 7D F9 DC                              ADC tbl_EndSweepFreqDeltaRest,x
0C670 85 64                                 STA sfx_endgame_p1_rest
0C672 A5 66                                 LDA sfx_endgame_p1_freq_lo
0C674 7D E7 DC                              ADC tbl_EndSweepFreqDeltaLo,x
0C677 85 66                                 STA sfx_endgame_p1_freq_lo
0C679 A5 65                                 LDA sfx_endgame_p1_freq_hi
0C67B 69 00                                 ADC #$00
0C67D 85 65                                 STA sfx_endgame_p1_freq_hi
0C67F                                       
0C67F A5 67                                 LDA sfx_endgame_p2_rest
0C681 38                                    SEC
0C682 FD F9 DC                              SBC tbl_EndSweepFreqDeltaRest,x
0C685 85 67                                 STA sfx_endgame_p2_rest
0C687 A5 69                                 LDA sfx_endgame_p2_freq_lo
0C689 FD E7 DC                              SBC tbl_EndSweepFreqDeltaLo,x
0C68C 85 69                                 STA sfx_endgame_p2_freq_lo
0C68E A5 68                                 LDA sfx_endgame_p2_freq_hi
0C690 E9 00                                 SBC #$00
0C692 85 68                                 STA sfx_endgame_p2_freq_hi
0C694                           
0C694                                       ;; Do next frequency in the sweep
0C694 C8                                    INY
0C695 C4 10                                 CPY temp+5
0C697 D0 9B                             BNE -endSweepLoop
0C699                                   
0C699 E8                                INX
0C69A E0 12                             CPX #$12
0C69C F0 03                             BEQ +disableSfx
0C69E 4C 17 C6                      JMP -endSweepsLoop
0C6A1                           
0C6A1                               ;; Stop endgame sweep
0C6A1                               +disableSfx:
0C6A1 A9 FF                         LDA #$FF
0C6A3 85 63                         STA sfx_endgame_enabled
0C6A5                               
0C6A5                               ;; Wait a little
0C6A5 A2 10                         LDX #$10
0C6A7 20 D0 D2                      JSR sub_WaitXFrames
0C6AA                           
0C6AA                               ;; Initiate the game over sequence
0C6AA 4C EF C3                      JMP lbl_GameOver
0C6AD                           
0C6AD                           
0C6AD                           
0C6AD                           ;; Subroutines
0C6AD                           .include "include/subroutines.asm"
0C6AD                           
0C6AD                           ;; RNG
0C6AD                           .include "subroutine/GetRandomNumber.asm"
0C6AD                           
0C6AD                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6AD                           ;;
0C6AD                           ;; subroutine/GetRandomNumber.asm
0C6AD                           ;;
0C6AD                           ;; Simple and fast random number generator by White Flame.
0C6AD                           ;;
0C6AD                           ;; Set random_seed to an arbitrary number to randomize between
0C6AD                           ;; gaming sessions, for instance using the frame timer upon
0C6AD                           ;; pressing START on the intro screen.
0C6AD                           ;;
0C6AD                           ;;     ;; IF START PRESSED:
0C6AD                           ;;     LDA frame_counter
0C6AD                           ;;     STA random_seed
0C6AD                           ;;
0C6AD                           ;; Source:
0C6AD                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C6AD                           ;;
0C6AD                           ;;
0C6AD                           
0C6AD                           sub_GetRandomNumber:
0C6AD                               ;; Force EOR if random_seed is zero
0C6AD A5 21                         LDA random_seed
0C6AF F0 05                         BEQ +doEor
0C6B1                           
0C6B1                               ;; Shift left, and EOR if the high bit is set
0C6B1 0A                            ASL
0C6B2 F0 04                         BEQ +noEor
0C6B4 90 02                         BCC +noEor
0C6B6                           
0C6B6                           +doEor:
0C6B6 49 1D                         EOR #$1D
0C6B8                           
0C6B8                           +noEor:
0C6B8 85 21                         STA random_seed
0C6BA                           
0C6BA 60                            RTS
0C6BB                           
0C6BB                           
0C6BB                           ;; Read controller input
0C6BB                           .include "subroutine/ReadController.asm"
0C6BB                           
0C6BB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6BB                           ;;
0C6BB                           ;; subroutine/ReadController.asm
0C6BB                           ;;
0C6BB                           ;; Subroutine that polls the controller and stores the input
0C6BB                           ;; buttons in a variable. This version only handles controller
0C6BB                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C6BB                           ;;
0C6BB                           ;;
0C6BB                           
0C6BB                           sub_ReadController:
0C6BB                           
0C6BB                               ;; Set strobe bit
0C6BB A9 01                         LDA #$01
0C6BD 8D 16 40                      STA JOYPAD_1
0C6C0                           
0C6C0                               ;; Set up ring timer
0C6C0 85 1A                         STA buttons_held
0C6C2                           
0C6C2                               ;; Clear strobe bit
0C6C2 4A                            LSR
0C6C3 8D 16 40                      STA JOYPAD_1
0C6C6                           
0C6C6                               ;; Loop through button presses
0C6C6                               -
0C6C6 AD 16 40                          LDA JOYPAD_1
0C6C9 4A                                LSR
0C6CA 26 1A                             ROL buttons_held
0C6CC                           
0C6CC                               ;; Check if ring timer is done
0C6CC 90 F8                         BCC -
0C6CE                           
0C6CE                               ;; Return from subroutine
0C6CE 60                            RTS
0C6CF                           
0C6CF                           
0C6CF                           ;; vBlank/NMI wait
0C6CF                           .include "subroutine/WaitForNMI.asm"
0C6CF                           
0C6CF                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6CF                           ;;
0C6CF                           ;; subroutine/WaitForVBlank.asm
0C6CF                           ;;
0C6CF                           ;; Subroutine that essentially pauses script execution until
0C6CF                           ;; vBlank happens.
0C6CF                           ;;
0C6CF                           ;;
0C6CF                           
0C6CF                           sub_WaitForNMI:
0C6CF A9 01                         LDA #$01
0C6D1 85 6A                         STA check_nmi
0C6D3                               -
0C6D3 A5 6A                             LDA check_nmi
0C6D5 D0 FC                         BNE -
0C6D7 60                            RTS
0C6D8                           
0C6D8                           .include "subroutine/WaitForVBlank.asm"
0C6D8                           
0C6D8                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6D8                           ;;
0C6D8                           ;; subroutine/WaitForVBlank.asm
0C6D8                           ;;
0C6D8                           ;; Subroutine that essentially pauses script execution until
0C6D8                           ;; vBlank happens.
0C6D8                           ;;
0C6D8                           ;;
0C6D8                           
0C6D8                           sub_WaitForVBlank:
0C6D8 2C 02 20                      BIT $2002
0C6DB 10 FB                         BPL sub_WaitForVBlank
0C6DD 60                            RTS
0C6DE                           
0C6DE                           
0C6DE                           ;; Game specific subroutines
0C6DE                           .include "game/include/subroutines.asm"
0C6DE                           
0C6DE                           ;; additional game-specific subroutines go here
0C6DE                           
0C6DE                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C6DE                           
0C6DE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6DE                           ;;
0C6DE                           ;;  sub_AddAccumulatorToScore.asm
0C6DE                           ;;
0C6DE                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C6DE                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C6DE                           ;;  actual score.
0C6DE                           ;;
0C6DE                           ;;
0C6DE                           
0C6DE                           
0C6DE                           sub_AddAccumulatorToScore:
0C6DE                           
0C6DE                               ;; Clear old add_to_score
0C6DE A2 05                         LDX #$05
0C6E0 A0 00                         LDY #$00
0C6E2                               -
0C6E2 94 31                             STY add_to_score,x
0C6E4 CA                                DEX
0C6E5 10 FB                         BPL -
0C6E7                           
0C6E7                               ;; Set accumulator to add_to_score variables
0C6E7                               ;; Check and update 100s
0C6E7                               -checkHundreds:
0C6E7 C9 64                             CMP #100
0C6E9 90 08                             BCC +checkTens
0C6EB 38                                    SEC
0C6EC E9 64                                 SBC #100
0C6EE E6 34                                 INC add_to_score+3
0C6F0 4C E7 C6                              JMP -checkHundreds
0C6F3                                   +checkTens:
0C6F3                           
0C6F3                               ;; Check and update 10s
0C6F3                               -checkTens:
0C6F3 C9 0A                             CMP #10
0C6F5 90 08                             BCC +setOnes
0C6F7 38                                    SEC
0C6F8 E9 0A                                 SBC #10
0C6FA E6 35                                 INC add_to_score+4
0C6FC 4C F3 C6                              JMP -checkTens
0C6FF                                   +setOnes:
0C6FF                           
0C6FF                               ;; We're left with 1s
0C6FF 85 36                         STA add_to_score+5
0C701                           
0C701                               ;; Byte for byte, add add_to_score to ball_score
0C701 A9 00                         LDA #$00
0C703 85 44                         STA ppu_buffer_update
0C705 A4 45                         LDY ppu_buffer_pointer
0C707 A2 05                         LDX #$05
0C709                               -
0C709 B5 31                             LDA add_to_score,x
0C70B 18                                CLC
0C70C 75 2B                             ADC ball_score,x
0C70E C9 0A                             CMP #10
0C710 90 05                             BCC +
0C712 38                                    SEC
0C713 E9 0A                                 SBC #10
0C715 F6 2A                                 INC ball_score-1,x
0C717                                   +
0C717                                   
0C717                                   ;; Update new score digit
0C717 95 2B                             STA ball_score,x
0C719                           
0C719                                   ;; Update score tile in PPU
0C719 A9 20                             LDA #$20
0C71B 99 00 03                          STA ppu_buffer,y
0C71E C8                                INY
0C71F 8A                                TXA
0C720 18                                CLC
0C721 69 83                             ADC #$83
0C723 99 00 03                          STA ppu_buffer,y
0C726 C8                                INY
0C727 B5 2B                             LDA ball_score,x
0C729 18                                CLC
0C72A 69 01                             ADC #$01
0C72C 99 00 03                          STA ppu_buffer,y
0C72F C8                                INY
0C730                           
0C730                                   ;; Check next digit (if any left)
0C730 CA                                DEX
0C731 30 03                             BMI +done
0C733 4C 09 C7                      JMP -
0C736                           
0C736                           +done:
0C736                               ;; Update PPU buffer pointer and status
0C736 84 45                         STY ppu_buffer_pointer
0C738 A9 01                         LDA #$01
0C73A 85 44                         STA ppu_buffer_update
0C73C                           
0C73C                               ;; Done: return 
0C73C 60                            RTS
0C73D                           
0C73D                           .include "game/subroutine/BackgroundNoise.asm"
0C73D                           
0C73D                           ;; Play background noise
0C73D                           sub_BackgroundNoise:
0C73D A9 32                         LDA #$32
0C73F 8D 0C 40                      STA NOISE_VOLUME
0C742 A9 0E                         LDA #$0E
0C744 8D 0E 40                      STA NOISE_PERIOD
0C747 85 53                         STA current_noise
0C749 60                            RTS
0C74A                           
0C74A                           .include "game/subroutine/BlindsEffect.asm"
0C74A                           
0C74A                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C74A                           sub_BlindsEffect:
0C74A                           
0C74A                               ;; Set up loop fading
0C74A A9 00                         LDA #$00
0C74C 85 12                         STA temp+7
0C74E A0 08                         LDY #$08
0C750                               -fadeLoop:
0C750 84 13                             STY temp+8
0C752                           
0C752                                   ;; Wait for NMI to pass
0C752 20 CF C6                          JSR sub_WaitForNMI
0C755                                   
0C755                                   ;; Now wait for No-sprite 0
0C755                                   -
0C755 AD 02 20                              LDA PPU_STATUS
0C758 29 40                                 AND #SPRITE_0_HIT
0C75A D0 F9                             BNE -
0C75C                               
0C75C                                   ;; Now wait for Sprite 0
0C75C                                   -
0C75C AD 02 20                              LDA PPU_STATUS
0C75F 29 40                                 AND #SPRITE_0_HIT
0C761 F0 F9                             BEQ -
0C763                                   
0C763                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C763 20 E5 D2                          JSR sub_Waste6
0C766 20 E8 D2                          JSR sub_Waste5
0C769 20 EB D2                          JSR sub_Waste4
0C76C 20 EE D2                          JSR sub_Waste3
0C76F 20 F4 D2                          JSR sub_Waste1
0C772 20 F7 D2                          JSR sub_Waste0
0C775                                   
0C775                                   
0C775                                   ;; Setup tile row loop
0C775 A0 16                             LDY #22
0C777                                   -tileLoop:
0C777                                   
0C777                                       ;; Disable drawing
0C777 A5 1D                                 LDA soft_ppu_mask
0C779 29 F7                                 AND #%11110111
0C77B 8D 01 20                              STA PPU_MASK
0C77E                                       
0C77E                                       ;; Set up scanline loop
0C77E A2 08                                 LDX #$08
0C780                                       -scanlineLoop:
0C780 E4 13                                     CPX temp+8
0C782 D0 0A                                     BNE +wasteTime
0C784                                           
0C784                                           ;; Restore drawing
0C784 A5 1D                                     LDA soft_ppu_mask
0C786 09 08                                     ORA #%00001000
0C788 8D 01 20                                  STA PPU_MASK
0C78B 4C 94 C7                                  JMP +wasteMoreTime
0C78E                           
0C78E                                           ;; Waste 12 frames
0C78E                                           +wasteTime:
0C78E E6 6C                                     INC void     ;+5
0C790 C6 6C                                     DEC void     ;+5
0C792 49 00                                     EOR #$00     ;+2
0C794                                           
0C794                                           ;; Waste about a scanline worth of frames
0C794                                           +wasteMoreTime:
0C794 20 F1 D2                                  JSR sub_Waste2
0C797 20 F7 D2                                  JSR sub_Waste0
0C79A 20 F7 D2                                  JSR sub_Waste0
0C79D E6 6C                                     INC void
0C79F 49 00                                     EOR #$00
0C7A1 49 00                                     EOR #$00
0C7A3 CA                                        DEX
0C7A4 D0 DA                                 BNE -scanlineLoop
0C7A6 C6 6C                                 DEC void
0C7A8 49 00                                 EOR #$00
0C7AA 88                                    DEY
0C7AB D0 CA                             BNE -tileLoop
0C7AD                           
0C7AD A4 13                             LDY temp+8
0C7AF                                   
0C7AF E6 12                             INC temp+7
0C7B1 A5 12                             LDA temp+7
0C7B3 C9 02                             CMP #$02
0C7B5 D0 99                             BNE -fadeLoop
0C7B7                           
0C7B7 A9 00                             LDA #$00
0C7B9 85 12                             STA temp+7
0C7BB 88                                DEY
0C7BC D0 92                         BNE -fadeLoop
0C7BE                               
0C7BE 60                            RTS
0C7BF                           
0C7BF                           .include "game/subroutine/ClearScreen.asm"
0C7BF                           
0C7BF                           ;; Subroutine to clear the screen
0C7BF                           ;; If it's a game screen, add noise
0C7BF                           
0C7BF                           sub_ClearScreen:
0C7BF                               ;; Check of game screen or not
0C7BF A5 43                         LDA screen_mode
0C7C1 29 03                         AND #CHECK_SCREEN_MODE
0C7C3 C9 01                         CMP #IS_GAME_SCREEN
0C7C5 F0 02                         BEQ +
0C7C7 A9 00                             LDA #$00
0C7C9                               +
0C7C9 85 0C                         STA temp+1
0C7CB                               
0C7CB                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C7CB 2C 02 20                      BIT PPU_STATUS
0C7CE A9 20                         LDA #$20
0C7D0 8D 06 20                      STA PPU_ADDR
0C7D3 A9 00                         LDA #$00
0C7D5 8D 06 20                      STA PPU_ADDR
0C7D8                               
0C7D8                               ;; Set up tile to draw and loop
0C7D8 85 0B                         STA temp
0C7DA AA                            TAX
0C7DB A8                            TAY
0C7DC                           
0C7DC                               -     
0C7DC                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C7DC A5 0B                             LDA temp
0C7DE 8D 07 20                          STA PPU_DATA
0C7E1                           
0C7E1                                   ;; Check if we should draw noise next. Noise is drawn if:
0C7E1                                   ;; - Screen mode is game screen
0C7E1                                   ;; - Y between #$06 and #$19 (inclusive)
0C7E1                                   ;; - X between #$02 and #$1D (inclusive)
0C7E1                                   
0C7E1                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C7E1 A5 0C                             LDA temp+1
0C7E3 F0 1C                             BEQ +nextTileInRow
0C7E5                                   
0C7E5                                   ;; If Y < $6, skip the check
0C7E5 C0 06                             CPY #$06
0C7E7 90 18                             BCC +nextTileInRow
0C7E9                                   
0C7E9                                   ;; If X < $1, skip the check
0C7E9 E0 01                             CPX #$01
0C7EB 90 14                             BCC +nextTileInRow
0C7ED                                   
0C7ED                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C7ED E0 1D                             CPX #$1D
0C7EF D0 04                             BNE +
0C7F1 A9 00                                 LDA #$00
0C7F3 85 0B                                 STA temp
0C7F5                                   +
0C7F5 B0 0A                             BCS +nextTileInRow
0C7F7                                   
0C7F7                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C7F7 20 AD C6                          JSR sub_GetRandomNumber
0C7FA 29 07                             AND #%00000111
0C7FC 18                                CLC
0C7FD 69 68                             ADC #$68
0C7FF 85 0B                             STA temp
0C801                           
0C801                           +nextTileInRow:
0C801                                   
0C801                                   ;; Check if a row has been done. If not, draw the next
0C801 E8                                INX
0C802 E0 20                             CPX #$20
0C804 D0 D6                             BNE -
0C806                                   
0C806                                   ;; Go to the next row (if any left)
0C806 A2 00                             LDX #00
0C808 C8                                INY
0C809                                   
0C809                                   ;; If Y is 1A, skip noise tile check until done drawing
0C809 C0 1A                             CPY #$1A
0C80B D0 04                             BNE +
0C80D A9 00                                 LDA #$00
0C80F 85 0C                                 STA temp+1
0C811                                   +
0C811                                   
0C811 C0 1E                             CPY #$1E
0C813 D0 C7                         BNE -
0C815                           
0C815                               ;; Clear attribute table
0C815 A9 23                         LDA #$23
0C817 8D 06 20                      STA PPU_ADDR
0C81A A9 C0                         LDA #$C0
0C81C 8D 06 20                      STA PPU_ADDR
0C81F A9 00                         LDA #$00
0C821 A2 40                         LDX #$40
0C823                               -
0C823 8D 07 20                          STA PPU_DATA
0C826 CA                                DEX
0C827 D0 FA                         BNE -
0C829                               
0C829 60                            RTS
0C82A                           
0C82A                           .include "game/subroutine/ColorizeBall.asm"
0C82A                           
0C82A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C82A                           ;;
0C82A                           ;;  Subroutine: ColorizeBall
0C82A                           ;;
0C82A                           ;;  Applies the color set through ball_flags to the ball sprite.
0C82A                           ;;  Expects ball_flags to be in the accumulator
0C82A                           ;;
0C82A                           
0C82A                           
0C82A                           sub_ColorizeBall:
0C82A                           
0C82A                               ;; Get color from ball_flags
0C82A 4A                            LSR
0C82B 4A                            LSR
0C82C 4A                            LSR
0C82D 4A                            LSR
0C82E 4A                            LSR
0C82F AA                            TAX
0C830                           
0C830                               ;; Add new light color of ball to PPU palette
0C830 A9 3F                         LDA #$3F
0C832 85 0B                         STA temp
0C834 A9 11                         LDA #$11
0C836 85 0C                         STA temp+1
0C838 BD 6A D4                      LDA tbl_BallColorLight,x
0C83B 85 0D                         STA temp+2
0C83D 20 F8 D2                      JSR sub_WriteByteToPPUBuffer
0C840                               
0C840                               ;; Add new dark color of ball to PPU palette
0C840 E6 0C                         INC temp+1
0C842 BD 64 D4                      LDA tbl_BallColorDark,x
0C845 85 0D                         STA temp+2
0C847 20 F8 D2                      JSR sub_WriteByteToPPUBuffer
0C84A                               
0C84A 60                            RTS
0C84B                           
0C84B                           .include "game/subroutine/ColorsMatch.asm"
0C84B                           
0C84B                           ;; Subroutine to check if ball color matches colliding tile color
0C84B                           
0C84B                           sub_ColorsMatch:
0C84B                               ;; Save tile color in temp variable
0C84B A5 4F                         LDA colliding_tile
0C84D 29 0E                         AND #%00001110
0C84F 85 0B                         STA temp
0C851                           
0C851                               ;; Get ball color
0C851 A5 42                         LDA ball_flags
0C853 29 E0                         AND #%11100000
0C855 4A                            LSR
0C856 4A                            LSR
0C857 4A                            LSR
0C858 4A                            LSR
0C859                           
0C859                               ;; Compare with tile color
0C859 C5 0B                         CMP temp
0C85B 60                            RTS
0C85C                           
0C85C                           .include "game/subroutine/ConvertXYToTileType.asm"
0C85C                           
0C85C                           ;; Subroutine to convert the ball's position to a tile type
0C85C                           ;; - Expects temp to be y-position of ball within game area
0C85C                           ;; - Expects temp+1 to be x-position of ball within game area
0C85C                           ;; - Puts result in accumulator and zp variable
0C85C                           ;; - Corrupts X-register
0C85C                           
0C85C                           sub_ConvertXYToTileType:
0C85C A5 0C                         LDA temp+1
0C85E 4A                            LSR
0C85F 4A                            LSR
0C860 4A                            LSR
0C861 4A                            LSR
0C862 85 14                         STA temp+9
0C864 A5 0B                         LDA temp
0C866 29 F0                         AND #%11110000
0C868 18                            CLC
0C869 65 14                         ADC temp+9
0C86B 85 14                         STA temp+9
0C86D AA                            TAX
0C86E BD 00 04                      LDA tile_type, x
0C871 85 4F                         STA colliding_tile
0C873 60                            RTS
0C874                           
0C874                           .include "game/subroutine/DisableEnableRendering.asm"
0C874                           
0C874                           ;; Subroutines to disable or enable screen rendering
0C874                           
0C874                           sub_DisableRendering:
0C874                               ;; Force NMI skip, disable rendering
0C874 A9 01                     	LDA #$01
0C876 85 1F                     	STA force_skip_nmi
0C878 20 D8 C6                      JSR sub_WaitForVBlank
0C87B A5 1D                         LDA soft_ppu_mask
0C87D 29 E7                         AND #%11100111
0C87F 8D 01 20                      STA PPU_MASK
0C882 85 1D                         STA soft_ppu_mask
0C884 20 D8 C6                      JSR sub_WaitForVBlank
0C887 60                            RTS
0C888                           
0C888                           sub_EnableRendering:
0C888                               ;; Enable rendering
0C888 A9 00                     	LDA #$00
0C88A 8D 05 20                  	STA PPU_SCROLL
0C88D 8D 05 20                  	STA PPU_SCROLL
0C890 20 D8 C6                      JSR sub_WaitForVBlank
0C893 85 1F                     	STA force_skip_nmi
0C895 A5 1D                         LDA soft_ppu_mask
0C897 09 18                         ORA #%00011000
0C899 85 1D                         STA soft_ppu_mask
0C89B 8D 01 20                      STA PPU_MASK
0C89E 20 D8 C6                      JSR sub_WaitForVBlank
0C8A1 60                            RTS
0C8A2                           
0C8A2                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C8A2                           
0C8A2                           ;; Draw a tile from the logo on the intro screen
0C8A2                           sub_drawIntroScreenLogoTile:
0C8A2 B9 3E D3                      LDA tbl_IntroScreenLogoChr,y
0C8A5 C9 60                         CMP #$60
0C8A7 D0 08                         BNE +
0C8A9 20 AD C6                          JSR sub_GetRandomNumber
0C8AC 29 07                             AND #$07
0C8AE 18                                CLC
0C8AF 69 60                             ADC #$60
0C8B1                               +
0C8B1 8D 07 20                      STA PPU_DATA
0C8B4 60                            RTS
0C8B5                           
0C8B5                           .include "game/subroutine/DrawMoveTile.asm"
0C8B5                           
0C8B5                           ;; Draw the move tile as follows:
0C8B5                           ;;
0C8B5                           ;;  1 2
0C8B5                           ;;  3 4 5
0C8B5                           ;;    6 7
0C8B5                           ;;
0C8B5                           ;; (1,2,3,4) is the move block itself
0C8B5                           ;; (5,6,7) are shades unless that tile is solid
0C8B5                           
0C8B5                           ;; X holds the move block sprite slot
0C8B5                           
0C8B5                           sub_DrawMoveTile:
0C8B5                           
0C8B5                               ;; Get tile type index from sprite x and y values
0C8B5                               ;; and store it in a temp variable
0C8B5 BD 78 03                      LDA move_block_x,x
0C8B8 18                            CLC
0C8B9 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C8BB 4A                            LSR
0C8BC 4A                            LSR
0C8BD 4A                            LSR
0C8BE 4A                            LSR
0C8BF 85 14                         STA temp+9
0C8C1 BD 7C 03                      LDA move_block_y,x
0C8C4 18                            CLC
0C8C5 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C8C7 29 F0                         AND #%11110000
0C8C9 18                            CLC
0C8CA 65 14                         ADC temp+9
0C8CC 85 14                         STA temp+9
0C8CE A8                            TAY
0C8CF                               
0C8CF                               ;; Add move tile data on the new tile location
0C8CF BD 84 03                      LDA move_block_tile_type,x
0C8D2 99 00 04                      STA tile_type,y
0C8D5                           
0C8D5                               ;; Draw the original tile type in the ppu buffer
0C8D5                               ;; - get PPU address to write to (temp, temp+1)
0C8D5 8A                            TXA
0C8D6 48                            PHA
0C8D7 A6 14                         LDX temp+9
0C8D9 20 93 CB                      JSR sub_GetPPUAddrFromYXIndex
0C8DC 68                            PLA
0C8DD AA                            TAX
0C8DE                               
0C8DE                               ;; - based on color, select tile 42 or 4A for top left
0C8DE BD 88 03                      LDA move_block_flags,x
0C8E1 4A                            LSR
0C8E2 4A                            LSR
0C8E3 4A                            LSR
0C8E4 4A                            LSR
0C8E5 4A                            LSR
0C8E6 A8                            TAY
0C8E7 B9 12 DC                      LDA tbl_MoveBlockTopLeftTile,y
0C8EA 85 13                         STA temp+8
0C8EC                               
0C8EC                               ;; - save palette ID in temp+6
0C8EC 98                            TYA
0C8ED 4A                            LSR
0C8EE 85 11                         STA temp+6
0C8F0                               
0C8F0                               ;; Prepare PPU buffer
0C8F0 A4 45                         LDY ppu_buffer_pointer
0C8F2 A9 00                         LDA #$00
0C8F4 85 44                         STA ppu_buffer_update
0C8F6                               
0C8F6                               ;; Draw tile 1 (top left tile of move block)
0C8F6 20 D7 C9                      JSR sub_DrawTileTemp018
0C8F9                           
0C8F9                               
0C8F9                               ;; Draw tile 2 (top right tile of move block)
0C8F9 E6 0C                         INC temp+1
0C8FB E6 13                         INC temp+8
0C8FD 20 D7 C9                      JSR sub_DrawTileTemp018
0C900                           
0C900                               ;; Draw tile 3 (bottom left tile of move block)
0C900 A5 0C                         LDA temp+1
0C902 18                            CLC
0C903 69 1F                         ADC #$1F
0C905 85 0C                         STA temp+1
0C907 A5 0B                         LDA temp
0C909 69 00                         ADC #$00
0C90B 85 0B                         STA temp
0C90D A5 13                         LDA temp+8
0C90F 18                            CLC
0C910 69 0F                         ADC #$0F
0C912 85 13                         STA temp+8
0C914 20 D7 C9                      JSR sub_DrawTileTemp018
0C917                           
0C917                               ;; Draw tile 4 (bottom right tile of move block)
0C917 E6 0C                         INC temp+1
0C919 E6 13                         INC temp+8
0C91B 20 D7 C9                      JSR sub_DrawTileTemp018
0C91E                           
0C91E                               ;; Load tile type offset in X register
0C91E 8A                            TXA
0C91F 48                            PHA
0C920 A6 14                         LDX temp+9
0C922                               
0C922                               ;; Load shade tile in temp+8
0C922 A9 00                         LDA #$00
0C924 85 13                         STA temp+8
0C926                           
0C926                               ;; Draw tile 5 (right shade) unless tile is solid
0C926 E6 0C                         INC temp+1
0C928                               
0C928 8A                            TXA
0C929 29 0F                         AND #%00001111
0C92B C9 0D                         CMP #$0D
0C92D F0 0A                         BEQ +nextTile
0C92F                           
0C92F BD 01 04                      LDA tile_type+1,x
0C932 29 01                         AND #%00000001
0C934 D0 03                         BNE +nextTile
0C936                               
0C936 20 D7 C9                      JSR sub_DrawTileTemp018
0C939                               
0C939                           
0C939                           +nextTile:
0C939                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C939 A5 0C                         LDA temp+1
0C93B 18                            CLC
0C93C 69 1F                         ADC #$1F
0C93E 85 0C                         STA temp+1
0C940 A5 0B                         LDA temp
0C942 69 00                         ADC #$00
0C944 85 0B                         STA temp
0C946                           
0C946 8A                            TXA
0C947 29 F0                         AND #%11110000
0C949 C9 90                         CMP #$90
0C94B F0 0A                         BEQ +nextTile
0C94D                           
0C94D BD 10 04                      LDA tile_type+16,x
0C950 29 01                         AND #%00000001
0C952 D0 03                         BNE +nextTile
0C954                               
0C954 20 D7 C9                      JSR sub_DrawTileTemp018
0C957                           
0C957                               
0C957                           +nextTile:
0C957                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C957 E6 0C                         INC temp+1
0C959                           
0C959 8A                            TXA
0C95A 29 F0                         AND #%11110000
0C95C C9 90                         CMP #$90
0C95E F0 11                         BEQ +setTileAttributes
0C960                               
0C960 8A                            TXA
0C961 29 0F                         AND #%00001111
0C963 C9 0D                         CMP #$0D
0C965 F0 0A                         BEQ +setTileAttributes
0C967                               
0C967 BD 11 04                      LDA tile_type+17,x
0C96A 29 01                         AND #%00000001
0C96C D0 03                         BNE +setTileAttributes
0C96E                               
0C96E 20 D7 C9                      JSR sub_DrawTileTemp018
0C971                               
0C971                           
0C971                           +setTileAttributes:
0C971                               ;; Update attribute table accordingly through ppu buffer
0C971                               ;; - PPU buffer high byte
0C971 20 69 D2                      JSR sub_SetTileAttributeAddress
0C974                           
0C974 8A                            TXA
0C975 29 10                         AND #%00010000
0C977 F0 05                         BEQ +        
0C979 A9 F0                             LDA #%11110000
0C97B 4C 80 C9                          JMP ++
0C97E                               +
0C97E A9 0F                         LDA #%00001111
0C980                               ++
0C980 85 0D                         STA temp+2
0C982                               
0C982 8A                            TXA
0C983 29 01                         AND #%00000001
0C985 F0 07                         BEQ +
0C987 A5 0D                             LDA temp+2
0C989 09 CC                             ORA #%11001100
0C98B 4C 92 C9                          JMP ++
0C98E                               +
0C98E A5 0D                         LDA temp+2
0C990 09 33                         ORA #%00110011
0C992                               ++
0C992 85 0D                         STA temp+2
0C994                               
0C994 C9 FC                         CMP #%11111100
0C996 F0 22                         BEQ +continue
0C998                               
0C998 C9 F3                         CMP #%11110011
0C99A D0 09                         BNE +
0C99C A5 11                             LDA temp+6
0C99E 0A                                ASL
0C99F 0A                                ASL
0C9A0 85 11                             STA temp+6
0C9A2 4C BA C9                          JMP +continue
0C9A5                               +
0C9A5                               
0C9A5 C9 CF                         CMP #%11001111
0C9A7 D0 0A                         BNE +
0C9A9 A6 11                             LDX temp+6
0C9AB BD B3 DB                          LDA tbl_Times16,x
0C9AE 85 11                             STA temp+6
0C9B0 4C BA C9                          JMP +continue
0C9B3                               +
0C9B3                               
0C9B3 A6 11                         LDX temp+6
0C9B5 BD C3 DB                      LDA tbl_Times64,x
0C9B8 85 11                         STA temp+6
0C9BA                                   
0C9BA                           +continue:
0C9BA A5 0B                         LDA temp
0C9BC 38                            SEC
0C9BD E9 C0                         SBC #$C0
0C9BF AA                            TAX
0C9C0 BD A0 04                      LDA tile_attributes,x
0C9C3 25 0D                         AND temp+2
0C9C5 05 11                         ORA temp+6
0C9C7 9D A0 04                      STA tile_attributes,x
0C9CA 99 00 03                      STA ppu_buffer,y
0C9CD C8                            INY
0C9CE                           
0C9CE                               ;; Restore original X
0C9CE 68                            PLA
0C9CF AA                            TAX
0C9D0                               
0C9D0                               ;; Update PPU buffer
0C9D0 84 45                         STY ppu_buffer_pointer
0C9D2 A9 01                         LDA #$01
0C9D4 85 44                         STA ppu_buffer_update
0C9D6                           
0C9D6                               ;; Return
0C9D6 60                            RTS
0C9D7                           
0C9D7                           .include "game/subroutine/DrawTileTemp018.asm"
0C9D7                           
0C9D7                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C9D7                           
0C9D7                           sub_DrawTileTemp018:
0C9D7 A5 0B                         LDA temp
0C9D9 99 00 03                      STA ppu_buffer,y
0C9DC C8                            INY
0C9DD A5 0C                         LDA temp+1
0C9DF 99 00 03                      STA ppu_buffer,y
0C9E2 C8                            INY
0C9E3 A5 13                         LDA temp+8
0C9E5 99 00 03                      STA ppu_buffer,y
0C9E8 C8                            INY
0C9E9 60                            RTS
0C9EA                           
0C9EA                           .include "game/subroutine/EvaluateTileType.asm"
0C9EA                           
0C9EA                           ;; Subroutine to evaluate the colliding tile type and take its
0C9EA                           ;; corresponding action (move block, kill player, ...)
0C9EA                           ;; - Expects X-register to be the tile_type offset
0C9EA                           ;; - Uses zp variable colliding_tile
0C9EA                           
0C9EA                           sub_EvaluateTileType:
0C9EA                           
0C9EA                               ;; Check if collided tile is a color block
0C9EA A5 4F                         LDA colliding_tile
0C9EC 29 80                         AND #IS_COLOR_BLOCK
0C9EE D0 03                         BNE +
0C9F0 4C 59 CA                          JMP +checkIfPaintBlock
0C9F3                               +
0C9F3                               
0C9F3                               ;; It's a color block. Check if the colors match
0C9F3 20 4B C8                      JSR sub_ColorsMatch
0C9F6 F0 06                         BEQ +
0C9F8                                   ;; Colors don't match
0C9F8                                   ;; Play bounce sound effect
0C9F8 A2 02                             LDX #SFX_BOUNCE
0C9FA 20 E4 D0                          JSR sub_PreloadSfxFromX
0C9FD                                   
0C9FD                                   ;; Return
0C9FD 60                                RTS
0C9FE                               +
0C9FE                           
0C9FE                               ;; Colors match; destroy color block
0C9FE                               
0C9FE                               ;; Convert the metatile offset value (which is in the X register)
0C9FE                               ;; to its corresponding address in PPU
0C9FE 20 93 CB                      JSR sub_GetPPUAddrFromYXIndex
0CA01                           
0CA01                               ;; Remove color block from screen by drawing a total
0CA01                               ;; of 7 tiles over it (shade included)
0CA01 20 F3 D0                      JSR sub_RemoveBlockFromScreen
0CA04                               
0CA04                               ;; - Load destruction animation on tile
0CA04                               ;; Get most recent slot for explosion    
0CA04 8A                            TXA
0CA05 85 0D                         STA temp+2
0CA07 A6 46                         LDX explosion_pointer
0CA09                           
0CA09                               ;; If 0, use max pointer value
0CA09 D0 02                         BNE +
0CA0B A2 04                             LDX #MAX_ANIMATIONS
0CA0D                               +
0CA0D                           
0CA0D                               ;; Decrease pointer by one
0CA0D CA                            DEX
0CA0E 86 46                         STX explosion_pointer
0CA10                           
0CA10                               ;; Load explosion data into RAM
0CA10 A9 00                         LDA #$00
0CA12 9D 64 03                      STA explosion_currentframe,x
0CA15                           
0CA15 A9 04                         LDA #ANIMATION_SPEED
0CA17 9D 60 03                      STA explosion_timer,x
0CA1A                           
0CA1A A5 0D                         LDA temp+2
0CA1C 29 0F                         AND #%00001111
0CA1E A8                            TAY
0CA1F B9 B3 DB                      LDA tbl_Times16,y
0CA22 18                            CLC
0CA23 69 0E                         ADC #$0E
0CA25 9D 6C 03                      STA explosion_x,x
0CA28                           
0CA28 A5 0D                         LDA temp+2
0CA2A 29 F0                         AND #%11110000
0CA2C 18                            CLC
0CA2D 69 29                         ADC #$29
0CA2F 9D 70 03                      STA explosion_y,x
0CA32                           
0CA32 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0CA34 9D 68 03                      STA explosion_attributes,x
0CA37 A9 01                         LDA #$01
0CA39 9D 74 03                      STA explosion_active,x
0CA3C                           
0CA3C A5 0D                         LDA temp+2
0CA3E AA                            TAX
0CA3F                               
0CA3F                               
0CA3F                               ;; - Write #$00 in tile type ram (makes not-solid)
0CA3F A9 00                         LDA #$00
0CA41 9D 00 04                      STA tile_type, x
0CA44                           
0CA44                           
0CA44                               ;; Add (80 + level number) to score
0CA44 A5 4E                         LDA current_level
0CA46 18                            CLC
0CA47 69 51                         ADC #81
0CA49 20 DE C6                      JSR sub_AddAccumulatorToScore
0CA4C                           
0CA4C                           
0CA4C                               ;; Play thud sound effect
0CA4C A2 01                         LDX #SFX_THUD
0CA4E 20 E4 D0                      JSR sub_PreloadSfxFromX
0CA51                           
0CA51                           
0CA51                               ;; - If there are no color blocks left:
0CA51                               ;;   - Initiate level-win state
0CA51 C6 50                         DEC blocks_left
0CA53 D0 03                         BNE +
0CA55 4C CC C4                          JMP lbl_LevelWin
0CA58                               +
0CA58                               
0CA58 60                            RTS
0CA59                           
0CA59                           
0CA59                           
0CA59                           +checkIfPaintBlock:
0CA59                           
0CA59                               ;; Check if collided tile is a paint block
0CA59 A5 4F                         LDA colliding_tile
0CA5B 29 20                         AND #IS_PAINT_BLOCK
0CA5D F0 1E                         BEQ +checkIfDeathBlock
0CA5F                                   ;; It's a paint block. Update ball color
0CA5F                                   ;; Save x-register
0CA5F 8A                                TXA
0CA60 48                                PHA
0CA61                           
0CA61                                   ;; Get tile color
0CA61 A5 4F                             LDA colliding_tile
0CA63 29 0E                             AND #%00001110
0CA65 0A                                ASL
0CA66 0A                                ASL
0CA67 0A                                ASL
0CA68 0A                                ASL
0CA69 85 0B                             STA temp
0CA6B                           
0CA6B                                   ;; Apply tile color to ball
0CA6B A5 42                             LDA ball_flags
0CA6D 29 1F                             AND #%00011111
0CA6F 05 0B                             ORA temp
0CA71 85 42                             STA ball_flags
0CA73 20 2A C8                          JSR sub_ColorizeBall
0CA76                           
0CA76                                   ;; Play paint sound effect
0CA76 A9 10                             LDA #$10
0CA78 85 5C                             STA sfx_timer+2
0CA7A                           
0CA7A                                   ;; Restore x-register
0CA7A 68                                PLA
0CA7B AA                                TAX
0CA7C                           
0CA7C                                   ;; Return
0CA7C 60                                RTS
0CA7D                                   
0CA7D                                   
0CA7D                                   
0CA7D                           +checkIfDeathBlock:
0CA7D                           
0CA7D                               ;; Check if collided tile is a death block
0CA7D A5 4F                         LDA colliding_tile
0CA7F 29 10                         AND #IS_DEATH_BLOCK
0CA81 F0 3D                         BEQ +checkIfMoveBlock
0CA83                           
0CA83                           ;; Also, when the player presses select during gameplay,
0CA83                           ;; insta-selfdestruct the ball.
0CA83                           sub_Selfdestruct:
0CA83                           
0CA83                                   ;; It is a death block
0CA83                                   ;; Freeze and kill player
0CA83 A5 42                             LDA ball_flags
0CA85 09 05                             ORA #%00000101
0CA87 85 42                             STA ball_flags
0CA89                                   
0CA89                                   ;; Get free explosion slot
0CA89 A6 46                             LDX explosion_pointer
0CA8B D0 02                             BNE +
0CA8D A2 04                                 LDX #MAX_ANIMATIONS
0CA8F                                   +
0CA8F CA                                DEX
0CA90 86 46                             STX explosion_pointer
0CA92                           
0CA92                                   ;; Load explosion data into RAM
0CA92 A9 00                             LDA #$00
0CA94 9D 64 03                          STA explosion_currentframe,x
0CA97                           
0CA97 A9 04                             LDA #ANIMATION_SPEED
0CA99 9D 60 03                          STA explosion_timer,x
0CA9C                           
0CA9C A5 22                             LDA ball_xpos_hi
0CA9E 38                                SEC
0CA9F E9 08                             SBC #$08
0CAA1 9D 6C 03                          STA explosion_x,x
0CAA4                           
0CAA4 A5 24                             LDA ball_ypos_hi
0CAA6 38                                SEC
0CAA7 E9 06                             SBC #$06
0CAA9 9D 70 03                          STA explosion_y,x
0CAAC                           
0CAAC A9 01                             LDA #$01
0CAAE 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0CAB1 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0CAB4 85 57                             STA noise_muted             ; mute background noise
0CAB6                                   
0CAB6                                   ;; Play explosion sound effect
0CAB6 A2 00                             LDX #SFX_EXPLOSION
0CAB8 20 E4 D0                          JSR sub_PreloadSfxFromX
0CABB                           
0CABB                                   ;; Set kill timer
0CABB A9 60                             LDA #$60
0CABD 85 4B                             STA kill_timer
0CABF                           
0CABF                                   ;; Return
0CABF 60                                RTS
0CAC0                           
0CAC0                           
0CAC0                           
0CAC0                           +checkIfMoveBlock:
0CAC0                           
0CAC0                               ;; Check if collided tile is a move block
0CAC0 A5 4F                         LDA colliding_tile
0CAC2 29 40                         AND #IS_MOVE_BLOCK
0CAC4 D0 06                         BNE +
0CAC6                                   ;; Tile is not a move block
0CAC6                                   ;; Therefore, it is a solid wall
0CAC6                                   
0CAC6                                   ;; Play bounce sound effect
0CAC6 A2 02                             LDX #SFX_BOUNCE
0CAC8 20 E4 D0                          JSR sub_PreloadSfxFromX
0CACB                           
0CACB                                   ;; Return
0CACB 60                                RTS
0CACC                               +
0CACC                           
0CACC                               ;; It is a move block. Check if colors match
0CACC 20 4B C8                      JSR sub_ColorsMatch
0CACF F0 06                         BEQ +
0CAD1                                   ;; Colors do not match
0CAD1                                   ;; Play bounce sound effect
0CAD1 A2 02                             LDX #SFX_BOUNCE
0CAD3 20 E4 D0                          JSR sub_PreloadSfxFromX
0CAD6                           
0CAD6                                   ;; Return
0CAD6 60                                RTS
0CAD7                               +
0CAD7                           
0CAD7                               ;; Colors match
0CAD7                               ;; - Check if next tile is within the playground
0CAD7                               ;; (push X onto stack as well)
0CAD7 8A                            TXA
0CAD8 48                            PHA
0CAD9 18                            CLC
0CADA 65 41                         ADC move_block_space_to_check
0CADC AA                            TAX
0CADD                               
0CADD 29 0F                         AND #%00001111
0CADF C9 0E                         CMP #$0E
0CAE1 90 03                         BCC +
0CAE3 4C 5B CB                          JMP +dontMoveBlock
0CAE6                               +
0CAE6 8A                            TXA
0CAE7 29 F0                         AND #%11110000
0CAE9 C9 A0                         CMP #$A0
0CAEB D0 03                         BNE +
0CAED 4C 5B CB                          JMP +dontMoveBlock
0CAF0                               +
0CAF0 C9 F0                         CMP #$F0
0CAF2 D0 03                         BNE +
0CAF4 4C 5B CB                          JMP +dontMoveBlock
0CAF7                               +
0CAF7                               
0CAF7                               ;; Check if the next tile is solid
0CAF7 BD 00 04                      LDA tile_type,x
0CAFA 29 01                         AND #TILE_IS_SOLID
0CAFC F0 03                         BEQ +
0CAFE 4C 5B CB                          JMP +dontMoveBlock
0CB01                               +
0CB01                               
0CB01                               ;; Move block has room to move
0CB01                               ;; Pull original X from stack
0CB01 68                            PLA
0CB02 AA                            TAX        
0CB03                               
0CB03                               ;; Add the tiles that need updating to ppu buffer, and
0CB03                               ;; update attribute table accordingly through ppu buffer
0CB03 20 93 CB                      JSR sub_GetPPUAddrFromYXIndex
0CB06 20 F3 D0                      JSR sub_RemoveBlockFromScreen
0CB09                           
0CB09                               ;; Store original tile type in temp variable
0CB09 BD 00 04                      LDA tile_type,x
0CB0C 85 13                         STA temp+8
0CB0E                           
0CB0E                               ;; Write #$00 in tile type ram (makes not-solid)
0CB0E A9 00                         LDA #$00
0CB10 9D 00 04                      STA tile_type,x
0CB13                           
0CB13                               ;; Add move tile sprite over the original tile
0CB13                               ;; - Store x in temp variable
0CB13 86 0E                         STX temp+3
0CB15                               
0CB15                               ;; - Update move block pointer
0CB15 A6 47                         LDX move_block_pointer
0CB17 D0 02                         BNE +
0CB19 A2 04                             LDX #MAX_ANIMATIONS
0CB1B                               +
0CB1B CA                            DEX
0CB1C 86 47                         STX move_block_pointer
0CB1E                           
0CB1E                               ;; = Set move block tile type
0CB1E A5 13                         LDA temp+8
0CB20 9D 84 03                      STA move_block_tile_type,x
0CB23                           
0CB23                               ;; - Set move block X position
0CB23 A5 0E                         LDA temp+3
0CB25 29 0F                         AND #%00001111
0CB27 A8                            TAY
0CB28 C8                            INY
0CB29 B9 B3 DB                      LDA tbl_Times16,y
0CB2C 9D 78 03                      STA move_block_x,x
0CB2F                               
0CB2F                               ;; - Set move block Y position
0CB2F A5 0E                         LDA temp+3
0CB31 29 F0                         AND #%11110000
0CB33 18                            CLC
0CB34 69 30                         ADC #$30
0CB36 9D 7C 03                      STA move_block_y,x
0CB39 DE 7C 03                      DEC move_block_y,x
0CB3C                               
0CB3C                               ;; - Set timer to 16 (+1) frames
0CB3C A9 11                         LDA #$11
0CB3E 9D 80 03                      STA move_block_timer,x
0CB41                               
0CB41                               ;; - Set move direction
0CB41 A5 41                         LDA move_block_space_to_check
0CB43 29 81                         AND #%10000001
0CB45 18                            CLC
0CB46 2A                            ROL
0CB47 69 00                         ADC #$00
0CB49 85 0F                         STA temp+4
0CB4B                               
0CB4B                               ;; - Set block color as ball color and add direction
0CB4B A5 42                         LDA ball_flags
0CB4D 29 E0                         AND #BALL_COLOR
0CB4F 05 0F                         ORA temp+4
0CB51 9D 88 03                      STA move_block_flags,x
0CB54                               
0CB54                               ;; - Restore original X
0CB54 A6 0E                         LDX temp+3
0CB56                               
0CB56                               ;; - Initiate move sound effect
0CB56 A9 18                         LDA #$18
0CB58 85 5B                         STA sfx_timer+1
0CB5A                           
0CB5A                               ;; Return
0CB5A 60                            RTS
0CB5B                           
0CB5B                           
0CB5B                           ;; Do not move the move block
0CB5B                           +dontMoveBlock:
0CB5B                           
0CB5B                               ;; Play bounce sound effect
0CB5B A2 02                         LDX #SFX_BOUNCE
0CB5D 20 E4 D0                      JSR sub_PreloadSfxFromX
0CB60                           
0CB60                               ;; Restore X from stack
0CB60 68                            PLA
0CB61 AA                            TAX
0CB62                               
0CB62                               ;; Return
0CB62 60                            RTS
0CB63                           
0CB63                           .include "game/subroutine/FlashEffect.asm"
0CB63                           
0CB63                           ;; Apply flashing light effect to background color
0CB63                           sub_FlashEffect:
0CB63 A2 00                         LDX #$00
0CB65 86 0C                         STX temp+1
0CB67 A9 3F                         LDA #$3F
0CB69 85 0B                         STA temp
0CB6B                           
0CB6B                               -flashLoop:
0CB6B BD 23 DC                          LDA tbl_BackgroundFade,x
0CB6E 85 0D                             STA temp+2
0CB70 20 F8 D2                          JSR sub_WriteByteToPPUBuffer
0CB73 A9 0D                             LDA #$0D
0CB75 85 0C                             STA temp+1
0CB77 20 F8 D2                          JSR sub_WriteByteToPPUBuffer
0CB7A A9 19                             LDA #$19
0CB7C 85 0C                             STA temp+1
0CB7E 20 F8 D2                          JSR sub_WriteByteToPPUBuffer
0CB81 A9 00                             LDA #$00
0CB83 85 0C                             STA temp+1
0CB85 A0 03                             LDY #$03
0CB87                                   -
0CB87 20 CF C6                              JSR sub_WaitForNMI
0CB8A 88                                    DEY
0CB8B D0 FA                             BNE -
0CB8D E8                                INX
0CB8E E0 0A                             CPX #$0A
0CB90 D0 D9                         BNE -flashLoop
0CB92                               
0CB92 60                            RTS
0CB93                           
0CB93                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0CB93                           
0CB93                           ;; Get the PPU address from YX index
0CB93                           ;; - Expects YX index (aka tile offset) to be in the X register
0CB93                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0CB93                           
0CB93                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0CB93                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0CB93                           
0CB93                           sub_GetPPUAddrFromYXIndex:
0CB93 8A                            TXA
0CB94 29 C0                         AND #%11000000
0CB96 18                            CLC
0CB97 2A                            ROL
0CB98 2A                            ROL
0CB99 2A                            ROL
0CB9A 69 20                         ADC #$20
0CB9C 85 0B                         STA temp
0CB9E                               
0CB9E 8A                            TXA
0CB9F 29 0F                         AND #%00001111
0CBA1 0A                            ASL
0CBA2 85 0C                         STA temp+1
0CBA4                               
0CBA4 8A                            TXA
0CBA5 29 30                         AND #%00110000
0CBA7 0A                            ASL
0CBA8 0A                            ASL
0CBA9 18                            CLC
0CBAA 65 0C                         ADC temp+1
0CBAC 85 0C                         STA temp+1
0CBAE                               
0CBAE A5 0B                         LDA temp
0CBB0 69 00                         ADC #$00
0CBB2 85 0B                         STA temp
0CBB4                               
0CBB4 A5 0C                         LDA temp+1
0CBB6 18                            CLC
0CBB7 69 C2                         ADC #$C2
0CBB9 85 0C                         STA temp+1
0CBBB                               
0CBBB A5 0B                         LDA temp
0CBBD 69 00                         ADC #$00
0CBBF 85 0B                         STA temp
0CBC1                           
0CBC1 60                            RTS
0CBC2                           
0CBC2                           .include "game/subroutine/InitiateNudge.asm"
0CBC2                           
0CBC2                           ;; Tell ball to nudge
0CBC2                           sub_InitiateNudge:
0CBC2 85 42                         STA ball_flags
0CBC4 A9 06                         LDA #NUDGE_FRAMES
0CBC6 85 49                         STA nudge_timer
0CBC8 60                            RTS
0CBC9                           
0CBC9                           .include "game/subroutine/JumpToPointer.asm"
0CBC9                           
0CBC9                           ;; Helper subroutine to JSR to a variable pointer address
0CBC9                           sub_JumpToPointer:
0CBC9 6C 17 00                      JMP (pointer)
0CBCC                               ;RTS must be handled by the routine (pointer) jumps to
0CBCC                           
0CBCC                           .include "game/subroutine/LoadAnimations.asm"
0CBCC                           
0CBCC                           sub_LoadAnimations:
0CBCC                           
0CBCC                               ;; Set up loop
0CBCC A2 00                         LDX #$00
0CBCE                               -loop_load_animation:
0CBCE                                   ;; Check if current animation is active. If not, goto next
0CBCE BD 74 03                          LDA explosion_active,x
0CBD1 D0 03                             BNE +
0CBD3 4C 5E CC                              JMP +next
0CBD6                                   +
0CBD6                           
0CBD6                                   ;; Check the explosion framecounter
0CBD6 BD 60 03                          LDA explosion_timer,x
0CBD9 D0 17                             BNE +
0CBDB                                       ;; Frametimer is 0
0CBDB                                       ;; Reset to animation speed
0CBDB A9 04                                 LDA #ANIMATION_SPEED
0CBDD 9D 60 03                              STA explosion_timer,x
0CBE0                           
0CBE0                                       ;; Set next animation frame, and check if we're done yet
0CBE0 FE 64 03                              INC explosion_currentframe,x
0CBE3 BD 64 03                              LDA explosion_currentframe,x
0CBE6 C9 0A                                 CMP #ANIM_SLIDES
0CBE8 D0 08                                 BNE +
0CBEA                           
0CBEA                                       ;; If we're done, inactivate current explosion, go to the next one
0CBEA A9 00                                 LDA #$00
0CBEC 9D 74 03                              STA explosion_active,x
0CBEF 4C 5E CC                              JMP +next
0CBF2                                   +
0CBF2                           
0CBF2                                   ;; Load (x,y) position in temp variables
0CBF2 BD 6C 03                          LDA explosion_x,x
0CBF5 85 0C                             STA temp+1
0CBF7 85 0E                             STA temp+3
0CBF9 BD 70 03                          LDA explosion_y,x
0CBFC 85 0D                             STA temp+2
0CBFE                           
0CBFE                                   ;; Load attribute in temp variable
0CBFE BD 68 03                          LDA explosion_attributes,x
0CC01 85 0F                             STA temp+4
0CC03                           
0CC03                                   ;; Load current frame into Y-register
0CC03 BC 64 03                          LDY explosion_currentframe,x
0CC06                           
0CC06                                   ;; Load current frame ROM address from table
0CC06 B9 5A D4                          LDA explosion_anim_lo,y
0CC09 85 17                             STA pointer
0CC0B B9 50 D4                          LDA explosion_anim_hi,y
0CC0E 85 18                             STA pointer+1
0CC10                           
0CC10                                   ;; Save x-register on stack
0CC10 8A                                TXA
0CC11 48                                PHA
0CC12                           
0CC12                                   ;; Load sprites into sprite RAM
0CC12 A6 48                             LDX sprite_ram_pointer
0CC14 A0 00                             LDY #$00
0CC16                           
0CC16                                   ;; Prepare (x,y) offset for loop
0CC16 84 0B                             STY temp
0CC18                           
0CC18                                   -loop_load_sprite:
0CC18                                   
0CC18                                       ;; Do not draw empty sprites
0CC18 B1 17                                 LDA (pointer),y
0CC1A F0 18                                 BEQ +nextSprite
0CC1C                                   
0CC1C                                           ;; Add y-position to sprite ram buffer
0CC1C A5 0D                                     LDA temp+2
0CC1E 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC21 E8                                        INX
0CC22                           
0CC22                                           ;; Get tile number from frame ROM address, and
0CC22                                           ;; add it to sprite ram buffer
0CC22 B1 17                                     LDA (pointer),y
0CC24 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC27 E8                                        INX
0CC28                           
0CC28                                           ;; Add attribute data to sprite ram buffer
0CC28 A5 0F                                     LDA temp+4
0CC2A 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC2D E8                                        INX
0CC2E                           
0CC2E                                           ;; Add x-position to sprite ram buffer
0CC2E A5 0E                                     LDA temp+3
0CC30 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC33 E8                                        INX
0CC34                           
0CC34                                       +nextSprite:
0CC34                           
0CC34                                       ;; Check if all sprites are done
0CC34 C8                                    INY
0CC35 C0 09                                 CPY #SLIDE_SIZE
0CC37 F0 21                                 BEQ +updateSpriteRamPointer
0CC39                           
0CC39                                       ;; Update x value
0CC39 A5 0E                                 LDA temp+3
0CC3B 18                                    CLC
0CC3C 69 08                                 ADC #$08
0CC3E 85 0E                                 STA temp+3
0CC40                           
0CC40                                       ;; Update temp for x,y position
0CC40 E6 0B                                 INC temp
0CC42 A5 0B                                 LDA temp
0CC44 C9 03                                 CMP #SLIDE_WIDTH
0CC46 D0 0F                                 BNE +
0CC48                                           ;; Row is done; reset x-position
0CC48 A5 0C                                     LDA temp+1
0CC4A 85 0E                                     STA temp+3
0CC4C                           
0CC4C                                           ;; Update y-position
0CC4C A5 0D                                     LDA temp+2
0CC4E 18                                        CLC
0CC4F 69 08                                     ADC #$08
0CC51 85 0D                                     STA temp+2
0CC53                           
0CC53                                           ;; Reset row timer
0CC53 A9 00                                     LDA #$00
0CC55 85 0B                                     STA temp
0CC57                                       +
0CC57                           
0CC57 4C 18 CC                          JMP -loop_load_sprite
0CC5A                           
0CC5A                               +updateSpriteRamPointer:
0CC5A 86 48                             STX sprite_ram_pointer
0CC5C                           
0CC5C                                   ;; Retrieve x-register from stack
0CC5C 68                                PLA
0CC5D AA                                TAX
0CC5E                           
0CC5E                               +next:
0CC5E                                   ;; Check if all animations have been updated
0CC5E E8                                INX
0CC5F E0 04                             CPX #MAX_ANIMATIONS
0CC61 F0 03                             BEQ +cleanUpSpriteRam
0CC63                           
0CC63 4C CE CB                      JMP -loop_load_animation
0CC66                           
0CC66                           +cleanUpSpriteRam:
0CC66 A6 48                         LDX sprite_ram_pointer
0CC68 A9 EF                         LDA #$EF
0CC6A                               -
0CC6A 9D 00 02                          STA ADDR_SPRITERAM,x
0CC6D E8                                INX
0CC6E D0 FA                         BNE -
0CC70                               
0CC70 60                            RTS
0CC71                               
0CC71                           .include "game/subroutine/LoadGameScreen.asm"
0CC71                           
0CC71                           ;; Load the game screen, based on level number
0CC71                           sub_LoadGameScreen:
0CC71                           
0CC71                               ;; Clear the screen
0CC71 20 BF C7                      JSR sub_ClearScreen
0CC74                               
0CC74                               ;; Clear collision and attribute data; reset blocks left in the process
0CC74 A2 00                         LDX #$00
0CC76 8A                            TXA
0CC77 85 50                         STA blocks_left
0CC79                               -
0CC79 9D 00 04                          STA tile_type,x
0CC7C E8                                INX
0CC7D D0 FA                         BNE -
0CC7F                               
0CC7F                               ;; Get pointer from current level
0CC7F A6 4E                         LDX current_level
0CC81 BD 68 DB                      LDA tbl_lvl_layout_lo,x
0CC84 85 17                         STA pointer
0CC86 BD 4F DB                      LDA tbl_lvl_layout_hi,x
0CC89 85 18                         STA pointer+1
0CC8B                           
0CC8B                               ;; Set up the loop
0CC8B A0 00                         LDY #$00
0CC8D                           -drawRowColumnLoop:
0CC8D                           
0CC8D                               ;; Load (x,y) of current set of tiles
0CC8D B1 17                         LDA (pointer),y
0CC8F                           
0CC8F                               ;; Check if level is done; if so, skip the loop
0CC8F C9 FF                         CMP #LEVEL_END
0CC91 D0 03                         BNE +
0CC93 4C DC CD                          JMP +doneLevelLoad
0CC96                               +
0CC96                           
0CC96                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CC96 85 0B                         STA temp
0CC98 C8                            INY
0CC99 B1 17                         LDA (pointer),y
0CC9B 85 0C                         STA temp+1
0CC9D                               
0CC9D                               ;; Convert (x,y) to PPU address
0CC9D                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CC9D A5 0B                         LDA temp
0CC9F 29 0F                         AND #%00001111
0CCA1 4A                            LSR
0CCA2 4A                            LSR
0CCA3 09 20                         ORA #$20
0CCA5 85 0D                         STA temp+2
0CCA7                               
0CCA7                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CCA7 A5 0B                         LDA temp
0CCA9 29 F0                         AND #%11110000
0CCAB 4A                            LSR
0CCAC 4A                            LSR
0CCAD 4A                            LSR
0CCAE 85 0E                         STA temp+3
0CCB0                               
0CCB0 A5 0B                         LDA temp
0CCB2 29 03                         AND #%00000011
0CCB4 AA                            TAX
0CCB5 BD C3 DB                      LDA tbl_Times64,x
0CCB8 18                            CLC
0CCB9 65 0E                         ADC temp+3
0CCBB 18                            CLC
0CCBC 69 C2                         ADC #$C2
0CCBE 85 0E                         STA temp+3
0CCC0                               
0CCC0                               ;; Add carry to temp+2
0CCC0 A5 0D                         LDA temp+2
0CCC2 69 00                         ADC #$00
0CCC4 85 0D                         STA temp+2
0CCC6                           
0CCC6                               ;; Convert tile data to loop count and tile type
0CCC6                               ;; temp+4 = color
0CCC6 A5 0C                         LDA temp+1
0CCC8 29 07                         AND #%00000111
0CCCA 85 0F                         STA temp+4
0CCCC                               
0CCCC                               ;; If color = 7, this is a wall
0CCCC C9 07                         CMP #%00000111
0CCCE F0 12                         BEQ +wallHack
0CCD0                                   
0CCD0                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CCD0 29 01                             AND #%00000001
0CCD2 F0 02                             BEQ +
0CCD4 A9 05                                 LDA #$05
0CCD6                                   +
0CCD6 85 12                             STA temp+7
0CCD8                                
0CCD8                                   ;; temp+5 = tile type
0CCD8 A5 0C                             LDA temp+1
0CCDA 4A                                LSR
0CCDB 4A                                LSR
0CCDC 4A                                LSR
0CCDD 29 03                             AND #%00000011
0CCDF 4C E8 CC                          JMP +setTileType
0CCE2                               +wallHack:
0CCE2                               
0CCE2                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CCE2 A9 00                         LDA #$00
0CCE4 85 12                         STA temp+7
0CCE6 A9 04                         LDA #$04
0CCE8                           
0CCE8                           +setTileType:    
0CCE8 85 10                         STA temp+5
0CCEA                               
0CCEA                               ;; X = tile offset
0CCEA 18                            CLC
0CCEB 65 12                         ADC temp+7
0CCED AA                            TAX
0CCEE                               
0CCEE                               ;; temp+6 = number of tiles
0CCEE A5 0C                         LDA temp+1
0CCF0 29 60                         AND #%01100000
0CCF2 4A                            LSR
0CCF3 4A                            LSR
0CCF4 4A                            LSR
0CCF5 4A                            LSR
0CCF6 4A                            LSR
0CCF7 85 11                         STA temp+6
0CCF9                               
0CCF9                               ;; Translate (x,y) to (y,x) for tile RAM
0CCF9 A5 0B                         LDA temp
0CCFB 0A                            ASL
0CCFC 0A                            ASL
0CCFD 0A                            ASL
0CCFE 0A                            ASL
0CCFF 85 13                         STA temp+8
0CD01 A5 0B                         LDA temp
0CD03 4A                            LSR
0CD04 4A                            LSR
0CD05 4A                            LSR
0CD06 4A                            LSR
0CD07 05 13                         ORA temp+8
0CD09 85 0B                         STA temp
0CD0B                               
0CD0B                               ;; Set up loop
0CD0B 98                            TYA
0CD0C 48                            PHA
0CD0D A4 11                         LDY temp+6
0CD0F                           
0CD0F                               -drawTileLoop:
0CD0F                                   ;; Write PPU address
0CD0F 2C 02 20                          BIT PPU_STATUS
0CD12 A5 0D                             LDA temp+2
0CD14 8D 06 20                          STA PPU_ADDR
0CD17 A5 0E                             LDA temp+3
0CD19 8D 06 20                          STA PPU_ADDR
0CD1C                                   
0CD1C                                   ;; Write first and second tile
0CD1C BD C7 DB                          LDA tbl_GametileTopLeft,x
0CD1F 8D 07 20                          STA PPU_DATA
0CD22 BD D1 DB                          LDA tbl_GametileTopRight,x
0CD25 8D 07 20                          STA PPU_DATA
0CD28                                   
0CD28                                   ;; Update PPU address
0CD28 2C 02 20                          BIT PPU_STATUS
0CD2B A5 0D                             LDA temp+2
0CD2D 8D 06 20                          STA PPU_ADDR
0CD30 A5 0E                             LDA temp+3
0CD32 18                                CLC
0CD33 69 20                             ADC #$20
0CD35 8D 06 20                          STA PPU_ADDR
0CD38                                   
0CD38                                   ;; Write third and fourth tile
0CD38 BD DB DB                          LDA tbl_GametileBottomLeft,x
0CD3B 8D 07 20                          STA PPU_DATA
0CD3E BD E5 DB                          LDA tbl_GametileBottomRight,x
0CD41 8D 07 20                          STA PPU_DATA
0CD44                           
0CD44                                   ;; Push x-register to stack
0CD44 8A                                TXA
0CD45 48                                PHA
0CD46                           
0CD46                                   ;; Update tile RAM (aka collision table)
0CD46 A6 10                             LDX temp+5
0CD48 BD EF DB                          LDA tbl_GameTileRamByte,x
0CD4B 05 0F                             ORA temp+4
0CD4D 0A                                ASL
0CD4E 09 01                             ORA #%00000001
0CD50 A6 0B                             LDX temp
0CD52 9D 00 04                          STA tile_type,x
0CD55                           
0CD55                                   ;; Check if shade 1 should be drawn
0CD55 E8                                INX
0CD56 BD 00 04                          LDA tile_type,x
0CD59 D0 05                             BNE +
0CD5B A9 00                                 LDA #$00
0CD5D 8D 07 20                              STA PPU_DATA
0CD60                                   +
0CD60                                   
0CD60                                   ;; Check if shade 2 should be drawn
0CD60 A5 0E                             LDA temp+3
0CD62 18                                CLC
0CD63 69 41                             ADC #$41
0CD65 85 0E                             STA temp+3
0CD67 A5 0D                             LDA temp+2
0CD69 69 00                             ADC #$00
0CD6B 85 0D                             STA temp+2
0CD6D                                   
0CD6D 8A                                TXA
0CD6E 18                                CLC
0CD6F 69 0F                             ADC #$0F
0CD71 AA                                TAX
0CD72                                   
0CD72 BD 00 04                          LDA tile_type,x
0CD75 D0 0F                             BNE +
0CD77 A5 0D                                 LDA temp+2
0CD79 8D 06 20                              STA PPU_ADDR
0CD7C A5 0E                                 LDA temp+3
0CD7E 8D 06 20                              STA PPU_ADDR
0CD81 A9 00                                 LDA #$00
0CD83 8D 07 20                              STA PPU_DATA
0CD86                                   +
0CD86                           
0CD86                                   ;; Check if shade 3 should be drawn
0CD86 E8                                INX
0CD87 E6 0E                             INC temp+3
0CD89 BD 00 04                          LDA tile_type,x
0CD8C D0 0F                             BNE +
0CD8E A5 0D                                 LDA temp+2
0CD90 8D 06 20                              STA PPU_ADDR
0CD93 A5 0E                                 LDA temp+3
0CD95 8D 06 20                              STA PPU_ADDR
0CD98 A9 00                                 LDA #$00
0CD9A 8D 07 20                              STA PPU_DATA
0CD9D                                   +
0CD9D                                   
0CD9D                                   ;; Restore x-register from stack
0CD9D 68                                PLA
0CD9E AA                                TAX
0CD9F                                   
0CD9F                                   ;; Reset pointer for next tile
0CD9F A5 0E                             LDA temp+3
0CDA1 38                                SEC
0CDA2 E9 42                             SBC #$42
0CDA4 85 0E                             STA temp+3
0CDA6 A5 0D                             LDA temp+2
0CDA8 E9 00                             SBC #$00
0CDAA 85 0D                             STA temp+2
0CDAC                                   
0CDAC                                   ;; Draw next metatile in this loop (if any left)
0CDAC 88                                DEY
0CDAD 30 27                             BMI +doneDrawingRowColumn
0CDAF                                   
0CDAF                                   ;; Is it a row or a column?
0CDAF A5 0C                             LDA temp+1
0CDB1 10 17                             BPL +
0CDB3                                       ;; It is a column: move pointer down (+$40)
0CDB3 A5 0E                                 LDA temp+3
0CDB5 18                                    CLC
0CDB6 69 40                                 ADC #$40
0CDB8 85 0E                                 STA temp+3
0CDBA A5 0D                                 LDA temp+2
0CDBC 69 00                                 ADC #$00
0CDBE 85 0D                                 STA temp+2
0CDC0                                       
0CDC0                                       ;; Add 16 to temp (as a tile RAM pointer)
0CDC0 A5 0B                                 LDA temp
0CDC2 18                                    CLC
0CDC3 69 10                                 ADC #$10
0CDC5 85 0B                                 STA temp
0CDC7 4C D3 CD                              JMP +drawNextTile
0CDCA                                   +
0CDCA                                   
0CDCA                                   ;; It is a row: move pointer right (+$02)
0CDCA A5 0E                             LDA temp+3
0CDCC 18                                CLC
0CDCD 69 02                             ADC #$02
0CDCF 85 0E                             STA temp+3
0CDD1                                   
0CDD1                                   ;; Add 1 to temp (as a tile RAM pointer)
0CDD1 E6 0B                             INC temp
0CDD3                           
0CDD3                               
0CDD3                               ;; Next tile in the row/column
0CDD3                                   +drawNextTile:
0CDD3 4C 0F CD                      JMP -drawTileLoop
0CDD6                           
0CDD6                               ;; Go to the next set of tiles
0CDD6                           +doneDrawingRowColumn:
0CDD6 68                            PLA
0CDD7 A8                            TAY
0CDD8 C8                            INY
0CDD9 4C 8D CC                      JMP -drawRowColumnLoop
0CDDC                           
0CDDC                           ;; Level loading is done
0CDDC                           +doneLevelLoad:
0CDDC                           
0CDDC                               ;; Count number of color blocks
0CDDC A2 A0                         LDX #160
0CDDE                               -
0CDDE BD FF 03                          LDA tile_type-1,x
0CDE1 29 80                             AND #%10000000
0CDE3 F0 02                             BEQ +
0CDE5 E6 50                                 INC blocks_left
0CDE7                                   +
0CDE7 CA                                DEX
0CDE8 D0 F4                         BNE -
0CDEA                           
0CDEA                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CDEA A9 20                         LDA #$20
0CDEC 8D 06 20                      STA PPU_ADDR
0CDEF A9 A2                         LDA #$A2
0CDF1 8D 06 20                      STA PPU_ADDR
0CDF4 A9 35                         LDA #$35
0CDF6 20 31 D0                      JSR sub_Draw28HorizontalTiles
0CDF9                           
0CDF9                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CDF9 A9 23                         LDA #$23
0CDFB 8D 06 20                      STA PPU_ADDR
0CDFE A9 42                         LDA #$42
0CE00 8D 06 20                      STA PPU_ADDR
0CE03 A9 31                         LDA #$31
0CE05 20 31 D0                      JSR sub_Draw28HorizontalTiles
0CE08                           
0CE08                               ;; Left & right game bounds
0CE08                               ;; Set PPU_ADDR and store in temp variables
0CE08 A9 20                         LDA #$20
0CE0A 85 0B                         STA temp
0CE0C 8D 06 20                      STA PPU_ADDR
0CE0F A9 C1                         LDA #$C1
0CE11 85 0C                         STA temp+1
0CE13 8D 06 20                      STA PPU_ADDR
0CE16                               
0CE16                               ;; Set vertical bound tile and set up loop
0CE16 A0 33                         LDY #$33
0CE18 A2 14                         LDX #20
0CE1A                               -
0CE1A                                   ;; Show left tile
0CE1A 8C 07 20                          STY PPU_DATA
0CE1D                                   
0CE1D                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CE1D A5 0B                             LDA temp
0CE1F 8D 06 20                          STA PPU_ADDR
0CE22 A5 0C                             LDA temp+1
0CE24 18                                CLC
0CE25 69 1D                             ADC #29
0CE27 85 0C                             STA temp+1
0CE29 8D 06 20                          STA PPU_ADDR
0CE2C                           
0CE2C                                   ;; Show right tile
0CE2C 8C 07 20                          STY PPU_DATA
0CE2F                           
0CE2F                                   ;; Check if we're done yet
0CE2F CA                                DEX
0CE30 F0 18                             BEQ +drawCorners
0CE32                                   
0CE32                                   ;; Not done yet: add 3 to low byte for next left bound
0CE32 A5 0C                             LDA temp+1
0CE34 18                                CLC
0CE35 69 03                             ADC #3
0CE37 85 0C                             STA temp+1
0CE39                                   
0CE39                                   ;; Apply carry to high byte
0CE39 A5 0B                             LDA temp
0CE3B 69 00                             ADC #$00
0CE3D 85 0B                             STA temp
0CE3F                                   
0CE3F                                   ;; Store next PPU_ADDR to draw at
0CE3F 8D 06 20                          STA PPU_ADDR
0CE42 A5 0C                             LDA temp+1
0CE44 8D 06 20                          STA PPU_ADDR
0CE47 4C 1A CE                      JMP -
0CE4A                               
0CE4A                               
0CE4A                           
0CE4A                           +drawCorners:
0CE4A                               ;; Draw the corners of the playing field
0CE4A A9 20                         LDA #$20
0CE4C 8D 06 20                      STA PPU_ADDR
0CE4F A9 A1                         LDA #$A1
0CE51 8D 06 20                      STA PPU_ADDR
0CE54 A9 39                         LDA #$39
0CE56 8D 07 20                      STA PPU_DATA
0CE59                           
0CE59 A9 20                         LDA #$20
0CE5B 8D 06 20                      STA PPU_ADDR
0CE5E A9 BE                         LDA #$BE
0CE60 8D 06 20                      STA PPU_ADDR
0CE63 A9 3A                         LDA #$3A
0CE65 8D 07 20                      STA PPU_DATA
0CE68                           
0CE68 A9 23                         LDA #$23
0CE6A 8D 06 20                      STA PPU_ADDR
0CE6D A9 41                         LDA #$41
0CE6F 8D 06 20                      STA PPU_ADDR
0CE72 A9 36                         LDA #$36
0CE74 8D 07 20                      STA PPU_DATA
0CE77                           
0CE77 A9 23                         LDA #$23
0CE79 8D 06 20                      STA PPU_ADDR
0CE7C A9 5E                         LDA #$5E
0CE7E 8D 06 20                      STA PPU_ADDR
0CE81 A9 34                         LDA #$34
0CE83 8D 07 20                      STA PPU_DATA
0CE86                               
0CE86                           
0CE86                               ;; Draw the hud labels
0CE86 A9 20                         LDA #$20
0CE88 8D 06 20                      STA PPU_ADDR
0CE8B A9 62                         LDA #$62
0CE8D 8D 06 20                      STA PPU_ADDR
0CE90 A2 00                         LDX #$00
0CE92                               -
0CE92 BD F4 DB                          LDA tbl_HudText,x
0CE95 8D 07 20                          STA PPU_DATA
0CE98 E8                                INX
0CE99 E0 1E                             CPX #$1E
0CE9B D0 F5                         BNE -
0CE9D                           
0CE9D                           
0CE9D                               ;; Draw the current score
0CE9D A9 20                         LDA #$20
0CE9F 8D 06 20                      STA PPU_ADDR
0CEA2 A9 83                         LDA #$83
0CEA4 8D 06 20                      STA PPU_ADDR
0CEA7 A2 00                         LDX #$00
0CEA9                               -
0CEA9 B5 2B                             LDA ball_score,x
0CEAB 18                                CLC
0CEAC 69 01                             ADC #$01
0CEAE 8D 07 20                          STA PPU_DATA
0CEB1 E8                                INX
0CEB2 E0 06                             CPX #$06
0CEB4 D0 F3                         BNE -
0CEB6                           
0CEB6                           
0CEB6                               ;; Draw the level number
0CEB6                               ;; (with primitive HEX>DEC)
0CEB6 A5 4E                         LDA current_level
0CEB8 18                            CLC
0CEB9 69 01                         ADC #$01
0CEBB 85 0C                         STA temp+1
0CEBD                               
0CEBD C9 14                         CMP #20
0CEBF B0 13                         BCS +tempIsTwo
0CEC1                               
0CEC1 C9 0A                         CMP #10
0CEC3 B0 05                         BCS +tempIsOne
0CEC5                               
0CEC5 A9 00                         LDA #$00
0CEC7 4C DB CE                      JMP +setTemp
0CECA                               
0CECA                           +tempIsOne:
0CECA 38                            SEC
0CECB E9 0A                         SBC #10
0CECD 85 0C                         STA temp+1
0CECF A9 01                         LDA #$01
0CED1 4C DB CE                      JMP +setTemp
0CED4                               
0CED4                           +tempIsTwo:
0CED4 38                            SEC
0CED5 E9 14                         SBC #20
0CED7 85 0C                         STA temp+1
0CED9 A9 02                         LDA #$02
0CEDB                           
0CEDB                           +setTemp:
0CEDB 85 0B                         STA temp
0CEDD                               
0CEDD E6 0B                         INC temp
0CEDF E6 0C                         INC temp+1
0CEE1                               
0CEE1 A9 20                         LDA #$20
0CEE3 8D 06 20                      STA PPU_ADDR
0CEE6 A9 8B                         LDA #$8B
0CEE8 8D 06 20                      STA PPU_ADDR
0CEEB A5 0B                         LDA temp
0CEED 8D 07 20                      STA PPU_DATA
0CEF0 A5 0C                         LDA temp+1
0CEF2 8D 07 20                      STA PPU_DATA
0CEF5                           
0CEF5                           
0CEF5                               ;; Draw lives (presumes lives to be capped at 9)
0CEF5 A9 20                         LDA #$20
0CEF7 8D 06 20                      STA PPU_ADDR
0CEFA A9 92                         LDA #$92
0CEFC 8D 06 20                      STA PPU_ADDR
0CEFF A6 2A                         LDX ball_lives
0CF01 E8                            INX
0CF02 8E 07 20                      STX PPU_DATA
0CF05                           
0CF05                           
0CF05                               ;; Set and draw bonus
0CF05 A9 07                         LDA #$07
0CF07 85 37                         STA ball_bonus
0CF09 A9 09                         LDA #$09
0CF0B 85 38                         STA ball_bonus+1
0CF0D 85 39                         STA ball_bonus+2
0CF0F                               
0CF0F A9 20                         LDA #$20
0CF11 8D 06 20                      STA PPU_ADDR
0CF14 A9 9A                         LDA #$9A
0CF16 8D 06 20                      STA PPU_ADDR
0CF19 A2 00                         LDX #$00
0CF1B                               -
0CF1B B5 37                             LDA ball_bonus,x
0CF1D 18                                CLC
0CF1E 69 01                             ADC #$01
0CF20 8D 07 20                          STA PPU_DATA
0CF23 E8                                INX
0CF24 E0 03                             CPX #$03
0CF26 D0 F3                         BNE -
0CF28                           
0CF28                           
0CF28                               ;; Set attribute data to RAM
0CF28                               
0CF28                               ;; Byte 0-6 of attribute ram should be #%10100000
0CF28 A2 00                         LDX #$00
0CF2A A9 A0                         LDA #$A0
0CF2C                               -
0CF2C 9D A0 04                          STA tile_attributes,x
0CF2F E8                                INX
0CF30 E0 07                             CPX #$07
0CF32 D0 F8                         BNE -
0CF34                               
0CF34                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CF34 A9 E0                         LDA #$E0
0CF36 9D A0 04                      STA tile_attributes,x
0CF39 E8                            INX
0CF3A                           
0CF3A                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CF3A                           
0CF3A                           -attributeLoop:
0CF3A                               ;; Reset current attribute value
0CF3A A9 00                         LDA #$00
0CF3C 85 0D                         STA temp+2
0CF3E                           
0CF3E                               ;; Get first metatile in tile ram based on attribute index
0CF3E                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CF3E 8A                            TXA
0CF3F                           
0CF3F 38                            SEC
0CF40 E9 08                         SBC #$08
0CF42 85 0C                         STA temp+1      ; attr - 8 (temp1)
0CF44 0A                            ASL             ; * 2
0CF45 85 0B                         STA temp        ; temp = temp1 * 2
0CF47                           
0CF47 A5 0C                         LDA temp+1      ; temp1
0CF49 29 F8                         AND #%11111000  ; rounded down to 8's
0CF4B 0A                            ASL             ; * 2
0CF4C 18                            CLC
0CF4D 65 0B                         ADC temp        ; + temp1 * 2
0CF4F 85 0B                         STA temp        ; first metatile
0CF51                           
0CF51                               ;; Store first metatile in y-register
0CF51 A8                            TAY
0CF52                           
0CF52                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CF52 8A                            TXA
0CF53 29 07                         AND #%00000111
0CF55 C9 07                         CMP #%00000111
0CF57 F0 0B                         BEQ +
0CF59                           
0CF59                               ;; If X >= $30, don't apply bottom right metatile
0CF59 E0 30                         CPX #$30
0CF5B B0 07                         BCS +
0CF5D                               
0CF5D                               ;; Add metatile1 subpalette to attribute value
0CF5D B9 00 04                      LDA tile_type,y
0CF60 29 0C                         AND #%00001100
0CF62 85 0D                         STA temp+2
0CF64                               +
0CF64                           
0CF64                           
0CF64                               ;; Apply second metatile
0CF64 88                            DEY
0CF65                           
0CF65                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CF65 8A                            TXA
0CF66 29 07                         AND #%00000111
0CF68 F0 10                         BEQ +
0CF6A                           
0CF6A                               ;; If X >= $30, don't apply bottom left metatile
0CF6A E0 30                         CPX #$30
0CF6C B0 0C                         BCS +
0CF6E                           
0CF6E                           
0CF6E                           
0CF6E                               ;; Add metatile2 subpalette to attribute value
0CF6E B9 00 04                      LDA tile_type,y
0CF71 29 0C                         AND #%00001100
0CF73 4A                            LSR
0CF74 4A                            LSR
0CF75 05 0D                         ORA temp+2
0CF77 4C 7C CF                      JMP ++
0CF7A                               +
0CF7A A5 0D                         LDA temp+2
0CF7C                               ++
0CF7C 0A                            ASL
0CF7D 0A                            ASL
0CF7E 85 0D                         STA temp+2
0CF80                           
0CF80                           
0CF80                               ;; Apply third metatile
0CF80 98                            TYA
0CF81 38                            SEC
0CF82 E9 0F                         SBC #$0F
0CF84 A8                            TAY
0CF85                           
0CF85                               ;; If X MOD 8 == 7, don't apply top right metatile
0CF85 8A                            TXA
0CF86 29 07                         AND #%00000111
0CF88 C9 07                         CMP #%00000111
0CF8A F0 11                         BEQ +
0CF8C                           
0CF8C                               ;; If X < $10, don't apply top right metatile
0CF8C 8A                            TXA
0CF8D 29 F0                         AND #%11110000
0CF8F F0 0C                         BEQ +
0CF91                           
0CF91                               ;; Add metatile3 subpalette to attribute value
0CF91 B9 00 04                      LDA tile_type,y
0CF94 29 0C                         AND #%00001100
0CF96 4A                            LSR
0CF97 4A                            LSR
0CF98 05 0D                         ORA temp+2
0CF9A 4C 9F CF                      JMP ++
0CF9D                               +
0CF9D A5 0D                         LDA temp+2
0CF9F                               ++
0CF9F 0A                            ASL
0CFA0 0A                            ASL
0CFA1 85 0D                         STA temp+2
0CFA3                           
0CFA3                           
0CFA3                               ;; Apply fourth metatile
0CFA3 88                            DEY
0CFA4                           
0CFA4                               ;; If X MOD 8 == 0, don't apply top left metatile
0CFA4 8A                            TXA
0CFA5 29 07                         AND #%00000111
0CFA7 F0 11                         BEQ +
0CFA9                           
0CFA9                               ;; If X < $10, don't apply top left metatile
0CFA9 8A                            TXA
0CFAA 29 F0                         AND #%11110000
0CFAC F0 0C                         BEQ +
0CFAE                           
0CFAE                               ;; Add metatile4 subpalette to attribute value
0CFAE B9 00 04                      LDA tile_type,y
0CFB1 29 0C                         AND #%00001100
0CFB3 4A                            LSR
0CFB4 4A                            LSR
0CFB5 05 0D                         ORA temp+2
0CFB7 4C BC CF                      JMP ++
0CFBA                               +
0CFBA A5 0D                         LDA temp+2
0CFBC                               ++
0CFBC 9D A0 04                      STA tile_attributes,x
0CFBF                           
0CFBF                               ;; Check the next attribute, if any left
0CFBF E8                            INX
0CFC0 E0 38                         CPX #$38
0CFC2 F0 03                         BEQ +
0CFC4 4C 3A CF                          JMP -attributeLoop
0CFC7                               +
0CFC7                           
0CFC7                               ;; Stream attribute RAM to PPU
0CFC7 2C 02 20                      BIT PPU_STATUS
0CFCA A9 23                         LDA #$23
0CFCC 8D 06 20                      STA PPU_ADDR
0CFCF A9 C0                         LDA #$C0
0CFD1 8D 06 20                      STA PPU_ADDR
0CFD4 A2 00                         LDX #$00
0CFD6                               -
0CFD6 BD A0 04                          LDA tile_attributes,x
0CFD9 8D 07 20                          STA PPU_DATA
0CFDC E8                                INX
0CFDD E0 40                             CPX #$40
0CFDF D0 F5                         BNE -
0CFE1                           
0CFE1                               ;; Set initial ball position
0CFE1 A6 4E                         LDX current_level
0CFE3 BD 81 DB                      LDA tbl_lvl_ball_startpos,x
0CFE6 29 F0                         AND #%11110000
0CFE8 18                            CLC
0CFE9 69 34                         ADC #$34
0CFEB 85 24                         STA ball_ypos_hi
0CFED BD 81 DB                      LDA tbl_lvl_ball_startpos,x
0CFF0 0A                            ASL
0CFF1 0A                            ASL
0CFF2 0A                            ASL
0CFF3 0A                            ASL
0CFF4 18                            CLC
0CFF5 69 14                         ADC #$14
0CFF7 85 22                         STA ball_xpos_hi
0CFF9 A9 00                         LDA #$00
0CFFB 85 23                         STA ball_xpos_lo
0CFFD 85 25                         STA ball_ypos_lo
0CFFF                               
0CFFF                               ;; Set initial ball color and direction
0CFFF BD 9A DB                      LDA tbl_lvl_ball_init,x
0D002 29 F0                         AND #%11110000
0D004 85 42                         STA ball_flags
0D006 20 2A C8                      JSR sub_ColorizeBall
0D009                               
0D009                               ;; Reset bonus timer
0D009 A9 08                         LDA #BONUS_FRAMES
0D00B 85 4A                         STA bonus_timer
0D00D                               
0D00D                               ;; Play background noise
0D00D A9 08                         LDA #$08
0D00F 8D 15 40                      STA APU_STATUS
0D012 8D 0F 40                      STA NOISE_LENGTH
0D015 A9 0E                         LDA #$0E
0D017 85 53                         STA current_noise
0D019 A9 00                         LDA #$00
0D01B 85 51                         STA max_noise
0D01D 85 54                         STA noise_timer
0D01F 85 52                         STA sweep_noise
0D021 85 57                         STA noise_muted
0D023 20 3D C7                      JSR sub_BackgroundNoise
0D026                           
0D026                               ;; Freeze the ball
0D026 A5 42                         LDA ball_flags
0D028 09 04                         ORA #FREEZE_BALL
0D02A 85 42                         STA ball_flags
0D02C                               
0D02C                               ;; Start unfreeze timer
0D02C A9 30                         LDA #$30
0D02E 85 4C                         STA unfreeze_timer
0D030                           
0D030                               ;; Return
0D030 60                            RTS
0D031                           
0D031                           
0D031                           ;; Subroutine: draw 28 tiles in a row
0D031                           sub_Draw28HorizontalTiles:
0D031 A2 1C                         LDX #28
0D033                               -
0D033 8D 07 20                          STA PPU_DATA
0D036 CA                                DEX
0D037 D0 FA                         BNE -
0D039 60                            RTS
0D03A                           
0D03A                           .include "game/subroutine/LoadIntroScreen.asm"
0D03A                           
0D03A                           ;; Load the intro screen
0D03A                           sub_LoadIntroScreen:
0D03A                           
0D03A                               ;; Load intro palette
0D03A 2C 02 20                      BIT PPU_STATUS
0D03D A9 3F                         LDA #$3F
0D03F 8D 06 20                      STA PPU_ADDR
0D042 A9 00                         LDA #$00
0D044 8D 06 20                      STA PPU_ADDR
0D047 A2 00                         LDX #$00
0D049                               -
0D049 BD 1E D3                          LDA tbl_IntroScreenPalette,x
0D04C 8D 07 20                          STA PPU_DATA
0D04F E8                                INX
0D050 E0 20                             CPX #$20
0D052 D0 F5                         BNE -
0D054                               
0D054                               ;; Put ball in the middle
0D054 A9 7C                         LDA #$7C
0D056 85 22                         STA ball_xpos_hi
0D058 85 24                         STA ball_ypos_hi
0D05A                           
0D05A                               ;; Clear the screen
0D05A 20 BF C7                      JSR sub_ClearScreen
0D05D                           
0D05D                               ;; Set up intro screen draw loop
0D05D A2 00                         LDX #$00
0D05F                           
0D05F                           -loop_IntroScreenData:
0D05F                           
0D05F                               ;; Get current byte from intro screen data
0D05F BD 46 D3                      LDA tbl_IntroScreenData,x
0D062                           
0D062                               ;; If current byte is #$3E, draw high score
0D062 C9 3E                         CMP #$3E
0D064 D0 14                         BNE +
0D066 A0 00                             LDY #$00
0D068                                   -
0D068 B9 05 00                              LDA hi_score,y
0D06B 18                                    CLC
0D06C 69 01                                 ADC #1
0D06E 8D 07 20                              STA PPU_DATA
0D071 C8                                    INY
0D072 C0 06                                 CPY #$06
0D074 D0 F2                             BNE -
0D076 E8                                INX
0D077 4C 5F D0                          JMP -loop_IntroScreenData
0D07A                               +
0D07A                           
0D07A                               ;; If current byte is #$3F, we're done drawing.
0D07A C9 3F                         CMP #$3F
0D07C D0 03                         BNE +
0D07E 4C CB D0                          JMP +goToEndIntroScreen
0D081                               +
0D081                           
0D081                               ;; If highest bits are %11, draw a plain tile
0D081 29 C0                         AND #%11000000
0D083 D0 03                         BNE +
0D085 4C AB D0                          JMP +drawTile
0D088                               +
0D088                               
0D088                               ;; If highest bits are %01, set the PPU address
0D088                               ;; If not, draw two logo tiles
0D088 C9 40                         CMP #%01000000
0D08A D0 03                         BNE +drawLogo
0D08C 4C B5 D0                          JMP +setPpuAddr
0D08F                           
0D08F                           +drawLogo:
0D08F                               ;; Get bits 0-2 and store in a temp variable
0D08F BD 46 D3                      LDA tbl_IntroScreenData,x
0D092 29 07                         AND #%00000111
0D094 85 0B                         STA temp
0D096                               
0D096                               ;; Get bits 3-5, shift over to get a value from 0-7
0D096 BD 46 D3                      LDA tbl_IntroScreenData,x
0D099 4A                            LSR
0D09A 4A                            LSR
0D09B 4A                            LSR
0D09C 29 07                         AND #%00000111
0D09E                               
0D09E                               ;; Draw the tile that corresponds with that value
0D09E A8                            TAY
0D09F 20 A2 C8                      JSR sub_drawIntroScreenLogoTile
0D0A2                               
0D0A2                               ;; Do the same for the value stored in temp
0D0A2 A4 0B                         LDY temp
0D0A4 20 A2 C8                      JSR sub_drawIntroScreenLogoTile
0D0A7                           
0D0A7                               ;; Next byte please
0D0A7 E8                            INX
0D0A8 4C 5F D0                      JMP -loop_IntroScreenData
0D0AB                           
0D0AB                           +drawTile:
0D0AB                               ;; Just draw the tile value on screen
0D0AB BD 46 D3                      LDA tbl_IntroScreenData,x
0D0AE 8D 07 20                      STA PPU_DATA
0D0B1                               
0D0B1                               ;; Next byte please
0D0B1 E8                            INX
0D0B2 4C 5F D0                      JMP -loop_IntroScreenData
0D0B5                           
0D0B5                           
0D0B5                           +setPpuAddr:
0D0B5                               ;; Reset the PPU latch
0D0B5 2C 02 20                      BIT PPU_STATUS
0D0B8                               
0D0B8                               ;; Sanitize and write the high byte of the PPU address
0D0B8 BD 46 D3                      LDA tbl_IntroScreenData,x
0D0BB 29 3F                         AND #%00111111
0D0BD 8D 06 20                      STA PPU_ADDR
0D0C0                           
0D0C0                               ;; Write the low byte of the PPU address
0D0C0 E8                            INX
0D0C1 BD 46 D3                      LDA tbl_IntroScreenData,x
0D0C4 8D 06 20                      STA PPU_ADDR
0D0C7                               
0D0C7                               ;; PPU has been set up to draw tiles at the correct spot now.
0D0C7                               
0D0C7                               ;; Next byte please.
0D0C7 E8                            INX
0D0C8 4C 5F D0                      JMP -loop_IntroScreenData
0D0CB                           
0D0CB                           +goToEndIntroScreen:
0D0CB                           
0D0CB                               ;; To color the 1.LEVEL: line green, we need to update two
0D0CB                               ;; values in the PPU attribute data.
0D0CB A0 08                         LDY #$08
0D0CD 2C 02 20                      BIT PPU_STATUS
0D0D0 A9 23                         LDA #$23
0D0D2 8D 06 20                      STA PPU_ADDR
0D0D5 A9 C8                         LDA #$C8
0D0D7 8D 06 20                      STA PPU_ADDR
0D0DA A9 0A                         LDA #%00001010
0D0DC                               -
0D0DC 8D 07 20                          STA PPU_DATA
0D0DF 88                                DEY
0D0E0 D0 FA                         BNE -
0D0E2                           
0D0E2 60                            RTS
0D0E3                           
0D0E3                           .include "game/subroutine/LoadWinScreen.asm"
0D0E3                           
0D0E3                           ;; Load the win screen (in progress)
0D0E3                           sub_LoadWinScreen:
0D0E3 60                            RTS
0D0E4                           
0D0E4                           .include "game/subroutine/PreloadSfxFromX.asm"
0D0E4                           
0D0E4                           sub_PreloadSfxFromX:
0D0E4                               
0D0E4                               ;; Load sample X into sfx address (low byte)
0D0E4 BD 72 DC                      LDA tbl_Sfx_lo,x
0D0E7 85 58                         STA sfx_address
0D0E9                               
0D0E9                               ;; Load sample X into sfx address (high byte)
0D0E9 BD 6F DC                      LDA tbl_Sfx_hi,x
0D0EC 85 59                         STA sfx_address+1
0D0EE                               
0D0EE                               ;; Start SFX timer
0D0EE A9 01                         LDA #$01
0D0F0 85 5A                         STA sfx_timer
0D0F2                               
0D0F2 60                            RTS
0D0F3                               
0D0F3                               0D0F3                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0D0F3                           
0D0F3                           ;; Remove a block from screen
0D0F3                           sub_RemoveBlockFromScreen:
0D0F3                           
0D0F3                               ;; Get current buffer location
0D0F3 A4 45                         LDY ppu_buffer_pointer
0D0F5                               
0D0F5                               ;; TILE 1: if metatile on top left is solid, draw
0D0F5                               ;; null tile, else draw random noise tile
0D0F5 A9 00                         LDA #$00
0D0F7 85 44                         STA ppu_buffer_update
0D0F9                               
0D0F9 A5 0B                         LDA temp
0D0FB 99 00 03                      STA ppu_buffer,y
0D0FE C8                            INY
0D0FF A5 0C                         LDA temp+1
0D101 99 00 03                      STA ppu_buffer,y
0D104 C8                            INY
0D105                               
0D105 8A                            TXA
0D106 29 0F                         AND #%00001111
0D108 F0 11                         BEQ +drawRandomTile
0D10A                           
0D10A 8A                            TXA
0D10B 29 F0                         AND #%11110000
0D10D F0 0C                         BEQ +drawRandomTile
0D10F                           
0D10F BD EF 03                      LDA tile_type-17,x
0D112 29 01                         AND #%00000001
0D114 F0 05                         BEQ +drawRandomTile  
0D116                           
0D116                               ;; Draw a null tile
0D116 A9 00                         LDA #$00
0D118 4C 23 D1                      JMP +addToPPUBuffer
0D11B                               
0D11B                           +drawRandomTile:
0D11B                               ;; Draw a random tile
0D11B 20 AD C6                      JSR sub_GetRandomNumber
0D11E 29 07                         AND #%00000111
0D120 18                            CLC
0D121 69 68                         ADC #$68
0D123                               
0D123                               ;; Add tile to ppu buffer
0D123                           +addToPPUBuffer:
0D123 99 00 03                      STA ppu_buffer,y
0D126 C8                            INY
0D127                           
0D127                               ;; TILE 2: If metatile above is solid, draw null,
0D127                               ;; else draw random noise.
0D127 E6 0C                         INC temp+1
0D129 A5 0B                         LDA temp
0D12B 99 00 03                      STA ppu_buffer,y
0D12E C8                            INY
0D12F A5 0C                         LDA temp+1
0D131 99 00 03                      STA ppu_buffer,y
0D134 C8                            INY
0D135                               
0D135 8A                            TXA
0D136 29 F0                         AND #%11110000
0D138 F0 0C                         BEQ +drawRandomTile
0D13A                               
0D13A BD F0 03                      LDA tile_type-16,x
0D13D 29 01                         AND #%00000001
0D13F F0 05                         BEQ +drawRandomTile
0D141                               
0D141 A9 00                         LDA #%00
0D143 4C 4E D1                      JMP +addToPPUBuffer
0D146                           
0D146                           +drawRandomTile:
0D146 20 AD C6                      JSR sub_GetRandomNumber
0D149 29 07                         AND #%00000111
0D14B 18                            CLC
0D14C 69 68                         ADC #$68
0D14E                           
0D14E                           +addToPPUBuffer:
0D14E 99 00 03                      STA ppu_buffer,y
0D151 C8                            INY
0D152                               
0D152                               ;; TILE 3 - If metatile left is solid, draw null,
0D152                               ;; else draw random noise.
0D152 A5 0C                         LDA temp+1
0D154 18                            CLC
0D155 69 1F                         ADC #$1F
0D157 85 0C                         STA temp+1
0D159 A5 0B                         LDA temp
0D15B 69 00                         ADC #$00
0D15D 85 0B                         STA temp
0D15F 99 00 03                      STA ppu_buffer,y
0D162 C8                            INY
0D163 A5 0C                         LDA temp+1
0D165 99 00 03                      STA ppu_buffer,y
0D168 C8                            INY
0D169                               
0D169 8A                            TXA
0D16A 29 0F                         AND #%00001111
0D16C F0 0C                         BEQ +drawRandomTile
0D16E                               
0D16E BD FF 03                      LDA tile_type-1,x
0D171 29 01                         AND #%00000001
0D173 F0 05                         BEQ +drawRandomTile
0D175                               
0D175 A9 00                         LDA #%00
0D177 4C 82 D1                      JMP +addToPPUBuffer
0D17A                           
0D17A                           +drawRandomTile:
0D17A 20 AD C6                      JSR sub_GetRandomNumber
0D17D 29 07                         AND #%00000111
0D17F 18                            CLC
0D180 69 68                         ADC #$68
0D182                               
0D182                           +addToPPUBuffer:
0D182 99 00 03                      STA ppu_buffer,y
0D185 C8                            INY
0D186                               
0D186                               ;; TILE 4 - Always random noise
0D186 E6 0C                         INC temp+1
0D188 A5 0B                         LDA temp
0D18A 99 00 03                      STA ppu_buffer,y
0D18D C8                            INY
0D18E A5 0C                         LDA temp+1
0D190 99 00 03                      STA ppu_buffer,y
0D193 C8                            INY
0D194 20 AD C6                      JSR sub_GetRandomNumber
0D197 29 07                         AND #%00000111
0D199 18                            CLC
0D19A 69 68                         ADC #$68
0D19C 99 00 03                      STA ppu_buffer,y
0D19F C8                            INY
0D1A0                           
0D1A0                               ;; TILE 5 - If tile on the right is solid, skip,
0D1A0                               ;; else draw random noise tile
0D1A0 E6 0C                         INC temp+1
0D1A2                               
0D1A2 8A                            TXA
0D1A3 29 0F                         AND #%00001111
0D1A5 C9 0D                         CMP #$0D
0D1A7 F0 1F                         BEQ +skipTile
0D1A9                               
0D1A9 BD 01 04                      LDA tile_type+1,x
0D1AC 29 01                         AND #%00000001
0D1AE D0 18                         BNE +skipTile
0D1B0 A5 0B                             LDA temp
0D1B2 99 00 03                          STA ppu_buffer,y
0D1B5 C8                                INY
0D1B6 A5 0C                             LDA temp+1
0D1B8 99 00 03                          STA ppu_buffer,y
0D1BB C8                                INY
0D1BC 20 AD C6                          JSR sub_GetRandomNumber
0D1BF 29 07                             AND #%00000111
0D1C1 18                                CLC
0D1C2 69 68                             ADC #$68
0D1C4 99 00 03                          STA ppu_buffer,y
0D1C7 C8                                INY    
0D1C8                               +skipTile:
0D1C8                           
0D1C8                               ;; TILE 6 - If tile on bottom is solid, skip,
0D1C8                               ;; else draw random noise
0D1C8 A5 0C                         LDA temp+1
0D1CA 18                            CLC
0D1CB 69 1F                         ADC #$1F
0D1CD 85 0C                         STA temp+1
0D1CF A5 0B                         LDA temp
0D1D1 69 00                         ADC #$00
0D1D3 85 0B                         STA temp
0D1D5                           
0D1D5 8A                            TXA
0D1D6 29 F0                         AND #%11110000
0D1D8 C9 90                         CMP #$90
0D1DA F0 1F                         BEQ +skipTile
0D1DC                           
0D1DC BD 10 04                      LDA tile_type+16,x
0D1DF 29 01                         AND #%00000001
0D1E1 D0 18                         BNE +skipTile
0D1E3 A5 0B                             LDA temp
0D1E5 99 00 03                          STA ppu_buffer,y
0D1E8 C8                                INY
0D1E9 A5 0C                             LDA temp+1
0D1EB 99 00 03                          STA ppu_buffer,y
0D1EE C8                                INY
0D1EF 20 AD C6                          JSR sub_GetRandomNumber
0D1F2 29 07                             AND #%00000111
0D1F4 18                                CLC
0D1F5 69 68                             ADC #$68
0D1F7 99 00 03                          STA ppu_buffer,y
0D1FA C8                                INY    
0D1FB                               +skipTile:
0D1FB                               
0D1FB                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D1FB                               ;; else draw random noise
0D1FB E6 0C                         INC temp+1
0D1FD                           
0D1FD 8A                            TXA
0D1FE 29 F0                         AND #%11110000
0D200 C9 90                         CMP #$90
0D202 F0 26                         BEQ +skipTile
0D204                               
0D204 8A                            TXA
0D205 29 0F                         AND #%00001111
0D207 C9 0D                         CMP #$0D
0D209 F0 1F                         BEQ +skipTile
0D20B                               
0D20B BD 11 04                      LDA tile_type+17,x
0D20E 29 01                         AND #%00000001
0D210 D0 18                         BNE +skipTile
0D212 A5 0B                             LDA temp
0D214 99 00 03                          STA ppu_buffer,y
0D217 C8                                INY
0D218 A5 0C                             LDA temp+1
0D21A 99 00 03                          STA ppu_buffer,y
0D21D C8                                INY
0D21E 20 AD C6                          JSR sub_GetRandomNumber
0D221 29 07                             AND #%00000111
0D223 18                                CLC
0D224 69 68                             ADC #$68
0D226 99 00 03                          STA ppu_buffer,y
0D229 C8                                INY    
0D22A                               +skipTile:   
0D22A                           
0D22A                           
0D22A                               ;; Update attribute table accordingly through ppu buffer
0D22A 20 69 D2                      JSR sub_SetTileAttributeAddress
0D22D                               
0D22D 8A                            TXA
0D22E 29 10                         AND #%00010000
0D230 F0 05                         BEQ +
0D232 A9 F0                             LDA #%11110000
0D234 4C 39 D2                          JMP ++
0D237                               +
0D237 A9 0F                         LDA #%00001111
0D239                               ++
0D239 85 0D                         STA temp+2
0D23B                               
0D23B 8A                            TXA
0D23C 48                            PHA
0D23D 29 01                         AND #%00000001
0D23F F0 07                         BEQ +
0D241 A5 0D                             LDA temp+2
0D243 09 CC                             ORA #%11001100
0D245 4C 4C D2                          JMP ++
0D248                               +
0D248 A5 0D                         LDA temp+2
0D24A 09 33                         ORA #%00110011
0D24C                               ++
0D24C 85 0D                         STA temp+2
0D24E                               
0D24E A5 0B                         LDA temp
0D250 38                            SEC
0D251 E9 C0                         SBC #$C0
0D253 AA                            TAX
0D254 BD A0 04                      LDA tile_attributes,x
0D257 25 0D                         AND temp+2
0D259 9D A0 04                      STA tile_attributes,x
0D25C 99 00 03                      STA ppu_buffer,y
0D25F C8                            INY
0D260 68                            PLA
0D261 AA                            TAX
0D262                           
0D262                               ;; Tell PPU to update tiles and attributes next frame
0D262 84 45                         STY ppu_buffer_pointer
0D264 A9 01                         LDA #$01
0D266 85 44                         STA ppu_buffer_update
0D268                            
0D268                               ;; We're done - return
0D268 60                            RTS
0D269                           
0D269                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D269                           
0D269                           ;; Set the correct tile attribute address based on game tile (x) 
0D269                           ;; into the correct ppu buffer slot (y)
0D269                           
0D269                           sub_SetTileAttributeAddress:
0D269 A9 23                         LDA #$23
0D26B 99 00 03                      STA ppu_buffer,y
0D26E C8                            INY
0D26F                               
0D26F 8A                            TXA
0D270 29 F0                         AND #%11110000
0D272 4A                            LSR
0D273 4A                            LSR
0D274 4A                            LSR
0D275 4A                            LSR
0D276 18                            CLC
0D277 69 01                         ADC #$01
0D279 4A                            LSR
0D27A 0A                            ASL
0D27B 0A                            ASL
0D27C 0A                            ASL
0D27D 18                            CLC
0D27E 69 C8                         ADC #$C8
0D280 85 0B                         STA temp
0D282 8A                            TXA
0D283 29 0F                         AND #%00001111
0D285 18                            CLC
0D286 69 01                         ADC #$01
0D288 4A                            LSR
0D289 18                            CLC
0D28A 65 0B                         ADC temp
0D28C 85 0B                         STA temp
0D28E 99 00 03                      STA ppu_buffer,y
0D291 C8                            INY
0D292                                  
0D292 60                            RTS
0D293                           
0D293                           .include "game/subroutine/SubtractXFromBonus.asm"
0D293                           
0D293                           sub_SubtractXFromBonus:
0D293 86 14                         STX temp+9
0D295 A5 39                         LDA ball_bonus+2
0D297 38                            SEC
0D298 E5 14                         SBC temp+9
0D29A 30 05                         BMI +
0D29C 85 39                             STA ball_bonus+2
0D29E 4C B6 D2                          JMP +updateBonusOnScreen
0D2A1                               +
0D2A1                           
0D2A1 18                            CLC
0D2A2 69 0A                         ADC #$0A
0D2A4 85 39                         STA ball_bonus+2
0D2A6 C6 38                         DEC ball_bonus+1
0D2A8 10 0C                         BPL +updateBonusOnScreen
0D2AA                           
0D2AA A9 09                         LDA #$09
0D2AC 85 38                         STA ball_bonus+1
0D2AE C6 37                         DEC ball_bonus
0D2B0 10 04                         BPL +updateBonusOnScreen
0D2B2                           
0D2B2 A9 00                         LDA #$00
0D2B4 85 37                         STA ball_bonus
0D2B6                           
0D2B6                               +updateBonusOnScreen:
0D2B6 A9 20                         LDA #$20
0D2B8 85 0B                         STA temp
0D2BA A9 9C                         LDA #$9C
0D2BC 85 0C                         STA temp+1
0D2BE A2 02                         LDX #$02
0D2C0                               
0D2C0                               -updateNextDigit:
0D2C0 B5 37                             LDA ball_bonus,x
0D2C2 18                                CLC
0D2C3 69 01                             ADC #$01
0D2C5 85 0D                             STA temp+2
0D2C7 20 F8 D2                          JSR sub_WriteByteToPPUBuffer
0D2CA C6 0C                             DEC temp+1
0D2CC CA                                DEX
0D2CD 10 F1                         BPL -updateNextDigit
0D2CF                           
0D2CF 60                            RTS
0D2D0                           
0D2D0                           .include "game/subroutine/WaitXFrames.asm"
0D2D0                           
0D2D0                           sub_WaitXFrames:
0D2D0                               
0D2D0                               ;; Push X to stack
0D2D0 8A                            TXA
0D2D1 48                            PHA
0D2D2                               
0D2D2                               ;; Wait for NMI
0D2D2 20 CF C6                      JSR sub_WaitForNMI
0D2D5                           
0D2D5                               ;; Clear pointer, except for sprite-zero and ball
0D2D5 A9 08                         LDA #$08
0D2D7 85 48                         STA sprite_ram_pointer
0D2D9                           
0D2D9                               ;; Load animations (if any)
0D2D9 20 CC CB                      JSR sub_LoadAnimations
0D2DC                               
0D2DC                               ;; Restore original X
0D2DC 68                            PLA
0D2DD AA                            TAX
0D2DE                               
0D2DE                               ;; Check if all X frames have passed
0D2DE CA                            DEX
0D2DF D0 EF                         BNE sub_WaitXFrames
0D2E1                               
0D2E1                               ;; Return
0D2E1 60                            RTS
0D2E2                           
0D2E2                           .include "game/subroutine/Waste.asm"
0D2E2 20 E5 D2                  sub_Waste7: JSR sub_Waste6
0D2E5 20 E8 D2                  sub_Waste6: JSR sub_Waste5
0D2E8 20 EB D2                  sub_Waste5: JSR sub_Waste4
0D2EB 20 EE D2                  sub_Waste4: JSR sub_Waste3
0D2EE 20 F1 D2                  sub_Waste3: JSR sub_Waste2
0D2F1 20 F4 D2                  sub_Waste2: JSR sub_Waste1
0D2F4 20 F7 D2                  sub_Waste1: JSR sub_Waste0
0D2F7 60                        sub_Waste0: RTS0D2F8                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D2F8                           
0D2F8                           ;; Write the byte in temp+2 and the ppu address (temp)
0D2F8                           ;; to a buffer, so NMI can update it before the next frame
0D2F8                           
0D2F8                           sub_WriteByteToPPUBuffer:
0D2F8                           
0D2F8                               ;; Prevent updating until full 3-byte buffer is filled,
0D2F8                               ;; so that graphics won't glitch out if NMI happens during
0D2F8                               ;; updating the buffer
0D2F8 A9 00                         LDA #$00
0D2FA 85 44                         STA ppu_buffer_update
0D2FC                           
0D2FC                               ;; Check if buffer full; if so, wait a frame and force update
0D2FC A4 45                         LDY ppu_buffer_pointer
0D2FE C0 60                         CPY #$60
0D300 D0 05                         BNE +
0D302 E6 44                             INC ppu_buffer_update
0D304 20 D8 C6                          JSR sub_WaitForVBlank
0D307                               +
0D307                           
0D307                               ;; Add ppu_addr high byte to buffer
0D307 A5 0B                         LDA temp
0D309 99 00 03                      STA ppu_buffer,y
0D30C                           
0D30C                               ;; Add ppu_addr low byte to buffer
0D30C C8                            INY
0D30D A5 0C                         LDA temp+1
0D30F 99 00 03                      STA ppu_buffer,y
0D312                           
0D312                               ;; Add ppu_data to buffer
0D312 C8                            INY
0D313 A5 0D                         LDA temp+2
0D315 99 00 03                      STA ppu_buffer,y
0D318                           
0D318                               ;; Update buffer pointer
0D318 C8                            INY
0D319 84 45                         STY ppu_buffer_pointer
0D31B                           
0D31B                               ;; Tell NMI to update next round
0D31B E6 44                         INC ppu_buffer_update
0D31D                           
0D31D                               ;; Return
0D31D 60                            RTS
0D31E                           
0D31E                           
0D31E                           
0D31E                           
0D31E                           ;; LUTs
0D31E                           .include "game/include/tables.asm"
0D31E                           
0D31E                           ;; Initial screen palette
0D31E                           tbl_IntroScreenPalette:
0D31E 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D322 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D326 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D32A 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D32E                           
0D32E 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D332 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D336 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D33A 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D33E                           
0D33E                           
0D33E                           ;; Intro: mapping logo index to chr tile
0D33E                           tbl_IntroScreenLogoChr:
0D33E 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D346                           
0D346                           
0D346                           ;; Intro screen data
0D346                           tbl_IntroScreenData:
0D346                           
0D346                               ;; Set PPU address $20A3 and draw
0D346 60 A3                         .db #$60, #$A3
0D348 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D350                           
0D350                               ;; Set PPU address $20C6 and draw
0D350 60 C6                         .db #$60, #$C6
0D352 01 02                         .db #_0, #_1    
0D354                           
0D354                               ;; Set PPU address $20B4 and draw
0D354 60 B4                         .db #$60, #$B4
0D356 12 13 00 1D 0D 19 1C 0F..     .db #_H, #_I, #_SPACE, #_S, #_C, #_O, #_R, #_E, #_COLON
0D35F                           
0D35F                               ;; Set PPU address $20D6 and draw high score
0D35F 60 D6 3E                      .db #$60, #$D6, #$3E
0D362                           
0D362                               
0D362                               ;; Set PPU address $2122 and draw
0D362 61 22                         .db #$61, #$22
0D364 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D36B 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D371 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D379 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D37E                               
0D37E                               ;; Set PPU address $2147 and draw
0D37E 61 47                         .db #$61, #$47
0D380 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D387 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D38B 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D391 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D397                               
0D397                               ;; Set PPU address $218B and draw
0D397 61 8B                         .db #$61, #$8B
0D399 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D39F 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D3A4                               
0D3A4                               ;; Set PPU address $21E6 and draw
0D3A4 61 E6                         .db #$61, #$E6
0D3A6 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D3AE 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D3B2 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D3B9                               
0D3B9                               ;; Set PPU address $222D and draw
0D3B9 62 2D                         .db #$62, #$2D
0D3BB 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D3C1                               
0D3C1                               ;; Set PPU address $2281
0D3C1 62 81                         .db #$62, #$81
0D3C3                               
0D3C3                               ;; Draw the Crillion logo
0D3C3 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D3C7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D3CB C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D3CF E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D3D3                               
0D3D3 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D3D7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D3DB C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D3DF D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D3E3                               
0D3E3 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D3E7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D3EB C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D3EF D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D3F3                           
0D3F3 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D3F7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D3FB C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D3FF D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D403                               
0D403 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D407 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D40B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D40F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D413                           
0D413 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D417 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D41B C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D41F F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D422                           
0D422                               ;; End of intro
0D422 3F                            .db #$3F
0D423                           
0D423                           
0D423                           ;; Animation frames table
0D423                           .include "game/include/table/animation_frames.asm"
0D423                           
0D423                           ;; CHR tile-id's per slide of explosion
0D423                           explosion_slide0:
0D423 00 00 00                      .db #$00, #$00, #$00
0D426 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D429 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D42C                           
0D42C                           explosion_slide1:
0D42C 00 00 00                      .db #$00, #$00, #$00
0D42F 29 2A 2B                      .db #$29, #$2A, #$2B
0D432 39 3A 3B                      .db #$39, #$3A, #$3B
0D435                           
0D435                           explosion_slide2:
0D435 16 00 00                      .db #$16, #$00, #$00
0D438 26 27 28                      .db #$26, #$27, #$28
0D43B 36 37 38                      .db #$36, #$37, #$38
0D43E                           
0D43E                           explosion_slide3:
0D43E 00 14 15                      .db #$00, #$14, #$15
0D441 23 24 25                      .db #$23, #$24, #$25
0D444 33 34 35                      .db #$33, #$34, #$35
0D447                           
0D447                           explosion_slide4:
0D447 10 11 12                      .db #$10, #$11, #$12
0D44A 20 21 22                      .db #$20, #$21, #$22
0D44D 30 31 32                      .db #$30, #$31, #$32
0D450                           
0D450                           ;; High and low bytes of animation slides
0D450                           explosion_anim_hi:
0D450 D4                            .db >#explosion_slide0
0D451 D4                            .db >#explosion_slide1
0D452 D4                            .db >#explosion_slide2
0D453 D4                            .db >#explosion_slide3
0D454 D4                            .db >#explosion_slide4
0D455 D4                            .db >#explosion_slide4
0D456 D4                            .db >#explosion_slide3
0D457 D4                            .db >#explosion_slide2
0D458 D4                            .db >#explosion_slide1
0D459 D4                            .db >#explosion_slide0
0D45A                           
0D45A                           explosion_anim_lo:
0D45A 23                            .db <#explosion_slide0
0D45B 2C                            .db <#explosion_slide1
0D45C 35                            .db <#explosion_slide2
0D45D 3E                            .db <#explosion_slide3
0D45E 47                            .db <#explosion_slide4
0D45F 47                            .db <#explosion_slide4
0D460 3E                            .db <#explosion_slide3
0D461 35                            .db <#explosion_slide2
0D462 2C                            .db <#explosion_slide1
0D463 23                            .db <#explosion_slide0
0D464                           
0D464                           
0D464                           
0D464                           ;; Ball palette color table (CBRYGM)
0D464                           tbl_BallColorDark:
0D464 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D46A                            
0D46A                           tbl_BallColorLight:
0D46A 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D470                           
0D470                               
0D470                           ;; Screen mode drawing routine addresses
0D470                           tbl_LoadScreenHi:
0D470 D0 CC D0                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D473                           
0D473                           tbl_LoadScreenLo:
0D473 3A 71 E3                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D476                           
0D476                           
0D476                           ;; Level data
0D476                           .include "game/include/table/level_data.asm"
0D476                           
0D476                           ;; Level layout tables
0D476                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D476                           
0D476                           ifdef TESTING
0D476                           lvl_test:
0D476                               .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D476                               .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D476                               .db #LEVEL_END
0D476                           endif
0D476                           
0D476                           lvl_layout_01:
0D476 61 21                         .db #$61, #%00100001
0D478 52 61                         .db #$52, #%01100001
0D47A 43 65                         .db #$43, #%01100101
0D47C 83 05                         .db #$83, #%00000101
0D47E 93 15                         .db #$93, #%00010101
0D480 34 7A                         .db #$34, #%01111010
0D482 74 7A                         .db #$74, #%01111010
0D484 35 7A                         .db #$35, #%01111010
0D486 75 7A                         .db #$75, #%01111010
0D488 46 65                         .db #$46, #%01100101
0D48A 86 25                         .db #$86, #%00100101
0D48C 57 61                         .db #$57, #%01100001
0D48E 68 21                         .db #$68, #%00100001
0D490 FF                            .db #LEVEL_END
0D491                           
0D491                           lvl_layout_02:
0D491 C0 0A                         .db #$C0, #%00001010
0D493 11 15                         .db #$11, #%00010101
0D495 21 62                         .db #$21, #%01100010
0D497 61 62                         .db #$61, #%01100010
0D499 A1 42                         .db #$A1, #%01000010
0D49B 12 67                         .db #$12, #%01100111
0D49D 52 67                         .db #$52, #%01100111
0D49F 92 67                         .db #$92, #%01100111
0D4A1 C3 0D                         .db #$C3, #%00001101
0D4A3 14 11                         .db #$14, #%00010001
0D4A5 24 65                         .db #$24, #%01100101
0D4A7 64 65                         .db #$64, #%01100101
0D4A9 A4 45                         .db #$A4, #%01000101
0D4AB 15 67                         .db #$15, #%01100111
0D4AD 55 67                         .db #$55, #%01100111
0D4AF 95 67                         .db #$95, #%01100111
0D4B1 17 12                         .db #$17, #%00010010
0D4B3 27 61                         .db #$27, #%01100001
0D4B5 67 61                         .db #$67, #%01100001
0D4B7 A7 41                         .db #$A7, #%01000001
0D4B9 38 7A                         .db #$38, #%01111010
0D4BB 98 5A                         .db #$98, #%01011010
0D4BD 18 27                         .db #$18, #%00100111
0D4BF 48 27                         .db #$48, #%00100111
0D4C1 78 27                         .db #$78, #%00100111
0D4C3 C8 07                         .db #$C8, #%00000111
0D4C5 FF                            .db #LEVEL_END
0D4C6                           
0D4C6                           lvl_layout_03:
0D4C6 00 7A                         .db #$00, #%01111010
0D4C8 40 7A                         .db #$40, #%01111010
0D4CA 80 7A                         .db #$80, #%01111010
0D4CC C0 1A                         .db #$C0, #%00011010
0D4CE 10 A1                         .db #$10, #%10100001
0D4D0 13 E1                         .db #$13, #%11100001
0D4D2 17 C1                         .db #$17, #%11000001
0D4D4 30 C1                         .db #$30, #%11000001
0D4D6 34 C1                         .db #$34, #%11000001
0D4D8 38 A1                         .db #$38, #%10100001
0D4DA 50 E1                         .db #$50, #%11100001
0D4DC 55 81                         .db #$55, #%10000001
0D4DE 57 C1                         .db #$57, #%11000001
0D4E0 70 C1                         .db #$70, #%11000001
0D4E2 73 A1                         .db #$73, #%10100001
0D4E4 76 E1                         .db #$76, #%11100001
0D4E6 90 E1                         .db #$90, #%11100001
0D4E8 95 81                         .db #$95, #%10000001
0D4EA 97 C1                         .db #$97, #%11000001
0D4EC B0 C1                         .db #$B0, #%11000001
0D4EE B4 C1                         .db #$B4, #%11000001
0D4F0 B8 A1                         .db #$B8, #%10100001
0D4F2 D0 A1                         .db #$D0, #%10100001
0D4F4 D3 E1                         .db #$D3, #%11100001
0D4F6 D7 C1                         .db #$D7, #%11000001
0D4F8 FF                            .db #LEVEL_END
0D4F9                           
0D4F9                           lvl_layout_04:
0D4F9 00 4C                         .db #$00, #%01001100
0D4FB 40 6C                         .db #$40, #%01101100
0D4FD 80 4C                         .db #$80, #%01001100
0D4FF 81 AC                         .db #$81, #%10101100
0D501 C1 2C                         .db #$C1, #%00101100
0D503 02 6C                         .db #$02, #%01101100
0D505 42 CC                         .db #$42, #%11001100
0D507 62 EC                         .db #$62, #%11101100
0D509 A2 CC                         .db #$A2, #%11001100
0D50B C3 CC                         .db #$C3, #%11001100
0D50D 04 4C                         .db #$04, #%01001100
0D50F 84 2C                         .db #$84, #%00101100
0D511 25 AC                         .db #$25, #%10101100
0D513 85 AC                         .db #$85, #%10101100
0D515 06 AC                         .db #$06, #%10101100
0D517 36 CC                         .db #$36, #%11001100
0D519 56 CC                         .db #$56, #%11001100
0D51B 66 EC                         .db #$66, #%11101100
0D51D 96 6C                         .db #$96, #%01101100
0D51F C7 AC                         .db #$C7, #%10101100
0D521 08 2C                         .db #$08, #%00101100
0D523 78 6C                         .db #$78, #%01101100
0D525 D8 0C                         .db #$D8, #%00001100
0D527 30 A1                         .db #$30, #%10100001
0D529 B0 21                         .db #$B0, #%00100001
0D52B 01 41                         .db #$01, #%01000001
0D52D 41 61                         .db #$41, #%01100001
0D52F 91 A1                         .db #$91, #%10100001
0D531 A1 21                         .db #$A1, #%00100001
0D533 52 C1                         .db #$52, #%11000001
0D535 72 E1                         .db #$72, #%11100001
0D537 B2 C1                         .db #$B2, #%11000001
0D539 C2 21                         .db #$C2, #%00100001
0D53B 03 41                         .db #$03, #%01000001
0D53D 33 C1                         .db #$33, #%11000001
0D53F 83 21                         .db #$83, #%00100001
0D541 D3 E1                         .db #$D3, #%11100001
0D543 05 21                         .db #$05, #%00100001
0D545 45 E1                         .db #$45, #%11100001
0D547 A5 21                         .db #$A5, #%00100001
0D549 16 A1                         .db #$16, #%10100001
0D54B 76 A1                         .db #$76, #%10100001
0D54D 27 A1                         .db #$27, #%10100001
0D54F 57 21                         .db #$57, #%00100001
0D551 87 41                         .db #$87, #%01000001
0D553 B7 A1                         .db #$B7, #%10100001
0D555 19 21                         .db #$19, #%00100001
0D557 39 41                         .db #$39, #%01000001
0D559 89 41                         .db #$89, #%01000001
0D55B C9 21                         .db #$C9, #%00100001
0D55D D0 1A                         .db #$D0, #%00011010
0D55F 55 1A                         .db #$55, #%00011010
0D561 95 1A                         .db #$95, #%00011010
0D563 D7 1A                         .db #$D7, #%00011010
0D565 09 1A                         .db #$09, #%00011010
0D567 79 1A                         .db #$79, #%00011010
0D569 FF                            .db #LEVEL_END
0D56A                           
0D56A                           lvl_layout_05:
0D56A 40 0A                         .db #$40, #%00001010
0D56C 70 1A                         .db #$70, #%00011010
0D56E B0 42                         .db #$B0, #%01000010
0D570 41 A7                         .db #$41, #%10100111
0D572 B1 22                         .db #$B1, #%00100010
0D574 D1 15                         .db #$D1, #%00010101
0D576 22 0A                         .db #$22, #%00001010
0D578 52 05                         .db #$52, #%00000101
0D57A B2 42                         .db #$B2, #%01000010
0D57C 03 27                         .db #$03, #%00100111
0D57E 33 67                         .db #$33, #%01100111
0D580 73 67                         .db #$73, #%01100111
0D582 B3 47                         .db #$B3, #%01000111
0D584 05 E5                         .db #$05, #%11100101
0D586 25 A5                         .db #$25, #%10100101
0D588 35 25                         .db #$35, #%00100101
0D58A 65 45                         .db #$65, #%01000101
0D58C A5 45                         .db #$A5, #%01000101
0D58E 46 E5                         .db #$46, #%11100101
0D590 66 E5                         .db #$66, #%11100101
0D592 86 E5                         .db #$86, #%11100101
0D594 A6 E2                         .db #$A6, #%11100010
0D596 C6 E5                         .db #$C6, #%11100101
0D598 27 25                         .db #$27, #%00100101
0D59A 77 05                         .db #$77, #%00000101
0D59C B7 02                         .db #$B7, #%00000010
0D59E 09 05                         .db #$09, #%00000101
0D5A0 79 05                         .db #$79, #%00000101
0D5A2 B9 02                         .db #$B9, #%00000010
0D5A4 FF                            .db #LEVEL_END
0D5A5                           
0D5A5                           lvl_layout_06:
0D5A5 00 03                         .db #$00, #%00000011
0D5A7 20 03                         .db #$20, #%00000011
0D5A9 40 03                         .db #$40, #%00000011
0D5AB A0 03                         .db #$A0, #%00000011
0D5AD C0 03                         .db #$C0, #%00000011
0D5AF 11 03                         .db #$11, #%00000011
0D5B1 31 03                         .db #$31, #%00000011
0D5B3 51 03                         .db #$51, #%00000011
0D5B5 91 03                         .db #$91, #%00000011
0D5B7 B1 03                         .db #$B1, #%00000011
0D5B9 D1 03                         .db #$D1, #%00000011
0D5BB 02 03                         .db #$02, #%00000011
0D5BD 22 03                         .db #$22, #%00000011
0D5BF 42 03                         .db #$42, #%00000011
0D5C1 A2 03                         .db #$A2, #%00000011
0D5C3 C2 03                         .db #$C2, #%00000011
0D5C5 13 03                         .db #$13, #%00000011
0D5C7 33 03                         .db #$33, #%00000011
0D5C9 53 03                         .db #$53, #%00000011
0D5CB 93 03                         .db #$93, #%00000011
0D5CD B3 03                         .db #$B3, #%00000011
0D5CF D3 03                         .db #$D3, #%00000011
0D5D1 04 03                         .db #$04, #%00000011
0D5D3 24 03                         .db #$24, #%00000011
0D5D5 44 03                         .db #$44, #%00000011
0D5D7 A4 03                         .db #$A4, #%00000011
0D5D9 C4 03                         .db #$C4, #%00000011
0D5DB 15 03                         .db #$15, #%00000011
0D5DD 35 03                         .db #$35, #%00000011
0D5DF 55 03                         .db #$55, #%00000011
0D5E1 95 03                         .db #$95, #%00000011
0D5E3 B5 03                         .db #$B5, #%00000011
0D5E5 D5 03                         .db #$D5, #%00000011
0D5E7 06 03                         .db #$06, #%00000011
0D5E9 26 03                         .db #$26, #%00000011
0D5EB 46 03                         .db #$46, #%00000011
0D5ED A6 03                         .db #$A6, #%00000011
0D5EF C6 03                         .db #$C6, #%00000011
0D5F1 17 03                         .db #$17, #%00000011
0D5F3 37 03                         .db #$37, #%00000011
0D5F5 57 03                         .db #$57, #%00000011
0D5F7 97 03                         .db #$97, #%00000011
0D5F9 B7 03                         .db #$B7, #%00000011
0D5FB D7 03                         .db #$D7, #%00000011
0D5FD 08 03                         .db #$08, #%00000011
0D5FF 28 03                         .db #$28, #%00000011
0D601 48 03                         .db #$48, #%00000011
0D603 A8 03                         .db #$A8, #%00000011
0D605 C8 03                         .db #$C8, #%00000011
0D607 19 03                         .db #$19, #%00000011
0D609 39 03                         .db #$39, #%00000011
0D60B 59 03                         .db #$59, #%00000011
0D60D 99 03                         .db #$99, #%00000011
0D60F B9 03                         .db #$B9, #%00000011
0D611 D9 03                         .db #$D9, #%00000011
0D613 60 4B                         .db #$60, #%01001011
0D615 71 CB                         .db #$71, #%11001011
0D617 62 4B                         .db #$62, #%01001011
0D619 64 4B                         .db #$64, #%01001011
0D61B 75 CB                         .db #$75, #%11001011
0D61D 66 4B                         .db #$66, #%01001011
0D61F 68 4B                         .db #$68, #%01001011
0D621 79 0B                         .db #$79, #%00001011
0D623 70 03                         .db #$70, #%00000011
0D625 72 03                         .db #$72, #%00000011
0D627 74 03                         .db #$74, #%00000011
0D629 76 03                         .db #$76, #%00000011
0D62B 78 03                         .db #$78, #%00000011
0D62D FF                            .db #LEVEL_END
0D62E                           
0D62E                           lvl_layout_07:
0D62E 00 11                         .db #$00, #%00010001
0D630 01 FA                         .db #$01, #%11111010
0D632 12 BA                         .db #$12, #%10111010
0D634 23 DA                         .db #$23, #%11011010
0D636 34 FA                         .db #$34, #%11111010
0D638 05 DA                         .db #$05, #%11011010
0D63A 15 FA                         .db #$15, #%11111010
0D63C 45 BA                         .db #$45, #%10111010
0D63E 56 DA                         .db #$56, #%11011010
0D640 27 BA                         .db #$27, #%10111010
0D642 67 DA                         .db #$67, #%11011010
0D644 38 3A                         .db #$38, #%00111010
0D646 78 BA                         .db #$78, #%10111010
0D648 09 3A                         .db #$09, #%00111010
0D64A 39 3A                         .db #$39, #%00111010
0D64C 89 1A                         .db #$89, #%00011010
0D64E B0 01                         .db #$B0, #%00000001
0D650 D0 01                         .db #$D0, #%00000001
0D652 A1 01                         .db #$A1, #%00000001
0D654 C1 11                         .db #$C1, #%00010001
0D656 B2 01                         .db #$B2, #%00000001
0D658 D2 01                         .db #$D2, #%00000001
0D65A A3 01                         .db #$A3, #%00000001
0D65C C3 01                         .db #$C3, #%00000001
0D65E B4 01                         .db #$B4, #%00000001
0D660 D4 01                         .db #$D4, #%00000001
0D662 A5 01                         .db #$A5, #%00000001
0D664 C5 01                         .db #$C5, #%00000001
0D666 B6 01                         .db #$B6, #%00000001
0D668 D6 01                         .db #$D6, #%00000001
0D66A A7 01                         .db #$A7, #%00000001
0D66C C7 01                         .db #$C7, #%00000001
0D66E FF                            .db #LEVEL_END
0D66F                           
0D66F                           lvl_layout_08:
0D66F 40 B5                         .db #$40, #%10110101
0D671 31 0D                         .db #$31, #%00001101
0D673 61 10                         .db #$61, #%00010000
0D675 42 C7                         .db #$42, #%11000111
0D677 52 67                         .db #$52, #%01100111
0D679 63 C7                         .db #$63, #%11000111
0D67B 83 E7                         .db #$83, #%11100111
0D67D 05 07                         .db #$05, #%00000111
0D67F 15 3A                         .db #$15, #%00111010
0D681 07 63                         .db #$07, #%01100011
0D683 27 13                         .db #$27, #%00010011
0D685 38 A5                         .db #$38, #%10100101
0D687 09 14                         .db #$09, #%00010100
0D689 19 05                         .db #$19, #%00000101
0D68B D0 E0                         .db #$D0, #%11100000
0D68D C2 A0                         .db #$C2, #%10100000
0D68F B3 E0                         .db #$B3, #%11100000
0D691 D5 E0                         .db #$D5, #%11100000
0D693 C6 E0                         .db #$C6, #%11100000
0D695 B0 C4                         .db #$B0, #%11000100
0D697 C0 A4                         .db #$C0, #%10100100
0D699 D1 A4                         .db #$D1, #%10100100
0D69B C4 24                         .db #$C4, #%00100100
0D69D C5 04                         .db #$C5, #%00000100
0D69F B7 44                         .db #$B7, #%01000100
0D6A1 B8 A4                         .db #$B8, #%10100100
0D6A3 D9 05                         .db #$D9, #%00000101
0D6A5 FF                            .db #LEVEL_END
0D6A6                           
0D6A6                           lvl_layout_09:
0D6A6 81 04                         .db #$81, #%00000100
0D6A8 D1 04                         .db #$D1, #%00000100
0D6AA 32 C4                         .db #$32, #%11000100
0D6AC A2 C4                         .db #$A2, #%11000100
0D6AE C2 24                         .db #$C2, #%00100100
0D6B0 13 24                         .db #$13, #%00100100
0D6B2 53 04                         .db #$53, #%00000100
0D6B4 C3 27                         .db #$C3, #%00100111
0D6B6 15 6C                         .db #$15, #%01101100
0D6B8 55 6C                         .db #$55, #%01101100
0D6BA 95 6C                         .db #$95, #%01101100
0D6BC D5 0C                         .db #$D5, #%00001100
0D6BE 27 C7                         .db #$27, #%11000111
0D6C0 47 C7                         .db #$47, #%11000111
0D6C2 67 C7                         .db #$67, #%11000111
0D6C4 87 C7                         .db #$87, #%11000111
0D6C6 A7 C7                         .db #$A7, #%11000111
0D6C8 C7 C7                         .db #$C7, #%11000111
0D6CA 08 13                         .db #$08, #%00010011
0D6CC 28 15                         .db #$28, #%00010101
0D6CE 48 12                         .db #$48, #%00010010
0D6D0 68 15                         .db #$68, #%00010101
0D6D2 88 11                         .db #$88, #%00010001
0D6D4 A8 10                         .db #$A8, #%00010000
0D6D6 C8 14                         .db #$C8, #%00010100
0D6D8 09 07                         .db #$09, #%00000111
0D6DA 19 03                         .db #$19, #%00000011
0D6DC 39 05                         .db #$39, #%00000101
0D6DE 59 02                         .db #$59, #%00000010
0D6E0 79 05                         .db #$79, #%00000101
0D6E2 99 01                         .db #$99, #%00000001
0D6E4 B9 00                         .db #$B9, #%00000000
0D6E6 D9 04                         .db #$D9, #%00000100
0D6E8 FF                            .db #LEVEL_END
0D6E9                           
0D6E9                           lvl_layout_10:
0D6E9 00 02                         .db #$00, #%00000010
0D6EB 10 C9                         .db #$10, #%11001001
0D6ED 50 C9                         .db #$50, #%11001001
0D6EF 90 C9                         .db #$90, #%11001001
0D6F1 D0 C9                         .db #$D0, #%11001001
0D6F3 31 C9                         .db #$31, #%11001001
0D6F5 71 C9                         .db #$71, #%11001001
0D6F7 B1 C9                         .db #$B1, #%11001001
0D6F9 13 C9                         .db #$13, #%11001001
0D6FB 53 C9                         .db #$53, #%11001001
0D6FD 93 C9                         .db #$93, #%11001001
0D6FF D3 C9                         .db #$D3, #%11001001
0D701 34 C9                         .db #$34, #%11001001
0D703 74 C9                         .db #$74, #%11001001
0D705 B4 C9                         .db #$B4, #%11001001
0D707 16 C9                         .db #$16, #%11001001
0D709 56 C9                         .db #$56, #%11001001
0D70B 96 C9                         .db #$96, #%11001001
0D70D D6 C9                         .db #$D6, #%11001001
0D70F 37 C9                         .db #$37, #%11001001
0D711 77 C9                         .db #$77, #%11001001
0D713 B7 C9                         .db #$B7, #%11001001
0D715 D8 12                         .db #$D8, #%00010010
0D717 FF                            .db #LEVEL_END
0D718                           
0D718                           lvl_layout_11:
0D718 00 65                         .db #$00, #%01100101
0D71A 40 45                         .db #$40, #%01000101
0D71C 50 A7                         .db #$50, #%10100111
0D71E 80 05                         .db #$80, #%00000101
0D720 90 A7                         .db #$90, #%10100111
0D722 A0 65                         .db #$A0, #%01100101
0D724 01 43                         .db #$01, #%01000011
0D726 31 23                         .db #$31, #%00100011
0D728 61 A7                         .db #$61, #%10100111
0D72A 81 A7                         .db #$81, #%10100111
0D72C A1 63                         .db #$A1, #%01100011
0D72E 02 44                         .db #$02, #%01000100
0D730 32 44                         .db #$32, #%01000100
0D732 92 04                         .db #$92, #%00000100
0D734 A2 64                         .db #$A2, #%01100100
0D736 03 40                         .db #$03, #%01000000
0D738 33 40                         .db #$33, #%01000000
0D73A 64 81                         .db #$64, #%10000001
0D73C 84 82                         .db #$84, #%10000010
0D73E 93 00                         .db #$93, #%00000000
0D740 A3 60                         .db #$A3, #%01100000
0D742 04 41                         .db #$04, #%01000001
0D744 34 41                         .db #$34, #%01000001
0D746 94 02                         .db #$94, #%00000010
0D748 A4 62                         .db #$A4, #%01100010
0D74A 05 47                         .db #$05, #%01000111
0D74C 35 67                         .db #$35, #%01100111
0D74E 75 0A                         .db #$75, #%00001010
0D750 85 47                         .db #$85, #%01000111
0D752 B5 47                         .db #$B5, #%01000111
0D754 06 E7                         .db #$06, #%11100111
0D756 16 5A                         .db #$16, #%01011010
0D758 26 11                         .db #$26, #%00010001
0D75A 46 13                         .db #$46, #%00010011
0D75C 56 1A                         .db #$56, #%00011010
0D75E 66 14                         .db #$66, #%00010100
0D760 86 10                         .db #$86, #%00010000
0D762 96 5A                         .db #$96, #%01011010
0D764 A6 12                         .db #$A6, #%00010010
0D766 C6 15                         .db #$C6, #%00010101
0D768 D6 E7                         .db #$D6, #%11100111
0D76A FF                            .db #LEVEL_END
0D76B                           
0D76B                           lvl_layout_12:
0D76B 00 00                         .db #$00, #%00000000
0D76D 50 C0                         .db #$50, #%11000000
0D76F 80 00                         .db #$80, #%00000000
0D771 61 00                         .db #$61, #%00000000
0D773 22 C0                         .db #$22, #%11000000
0D775 82 E0                         .db #$82, #%11100000
0D777 C2 E0                         .db #$C2, #%11100000
0D779 A3 20                         .db #$A3, #%00100000
0D77B C3 10                         .db #$C3, #%00010000
0D77D 04 00                         .db #$04, #%00000000
0D77F 54 20                         .db #$54, #%00100000
0D781 15 0A                         .db #$15, #%00001010
0D783 25 C0                         .db #$25, #%11000000
0D785 55 E0                         .db #$55, #%11100000
0D787 86 20                         .db #$86, #%00100000
0D789 C6 E0                         .db #$C6, #%11100000
0D78B C7 A0                         .db #$C7, #%10100000
0D78D 88 00                         .db #$88, #%00000000
0D78F 59 00                         .db #$59, #%00000000
0D791 89 20                         .db #$89, #%00100000
0D793 D9 1A                         .db #$D9, #%00011010
0D795 FF                            .db #LEVEL_END
0D796                           
0D796                           lvl_layout_13:
0D796 10 E0                         .db #$10, #%11100000
0D798 20 E0                         .db #$20, #%11100000
0D79A 30 E0                         .db #$30, #%11100000
0D79C 40 40                         .db #$40, #%01000000
0D79E 80 60                         .db #$80, #%01100000
0D7A0 C0 E0                         .db #$C0, #%11100000
0D7A2 D0 E0                         .db #$D0, #%11100000
0D7A4 41 40                         .db #$41, #%01000000
0D7A6 71 60                         .db #$71, #%01100000
0D7A8 52 60                         .db #$52, #%01100000
0D7AA A2 20                         .db #$A2, #%00100000
0D7AC 43 60                         .db #$43, #%01100000
0D7AE 83 60                         .db #$83, #%01100000
0D7B0 14 74                         .db #$14, #%01110100
0D7B2 54 74                         .db #$54, #%01110100
0D7B4 94 74                         .db #$94, #%01110100
0D7B6 D4 14                         .db #$D4, #%00010100
0D7B8 15 0D                         .db #$15, #%00001101
0D7BA 55 0D                         .db #$55, #%00001101
0D7BC 95 0D                         .db #$95, #%00001101
0D7BE D5 0D                         .db #$D5, #%00001101
0D7C0 26 0D                         .db #$26, #%00001101
0D7C2 46 0D                         .db #$46, #%00001101
0D7C4 66 0D                         .db #$66, #%00001101
0D7C6 86 0D                         .db #$86, #%00001101
0D7C8 A6 0D                         .db #$A6, #%00001101
0D7CA C6 0D                         .db #$C6, #%00001101
0D7CC 07 10                         .db #$07, #%00010000
0D7CE 37 0D                         .db #$37, #%00001101
0D7D0 77 0D                         .db #$77, #%00001101
0D7D2 B7 0D                         .db #$B7, #%00001101
0D7D4 28 0D                         .db #$28, #%00001101
0D7D6 48 0D                         .db #$48, #%00001101
0D7D8 68 0D                         .db #$68, #%00001101
0D7DA 88 0D                         .db #$88, #%00001101
0D7DC A8 0D                         .db #$A8, #%00001101
0D7DE C8 0D                         .db #$C8, #%00001101
0D7E0 19 0D                         .db #$19, #%00001101
0D7E2 59 0D                         .db #$59, #%00001101
0D7E4 99 0D                         .db #$99, #%00001101
0D7E6 D9 0D                         .db #$D9, #%00001101
0D7E8 FF                            .db #LEVEL_END
0D7E9                           
0D7E9                           lvl_layout_14:
0D7E9 00 67                         .db #$00, #%01100111
0D7EB 40 67                         .db #$40, #%01100111
0D7ED 80 67                         .db #$80, #%01100111
0D7EF C0 27                         .db #$C0, #%00100111
0D7F1 01 27                         .db #$01, #%00100111
0D7F3 31 C7                         .db #$31, #%11000111
0D7F5 51 C7                         .db #$51, #%11000111
0D7F7 71 C7                         .db #$71, #%11000111
0D7F9 91 C7                         .db #$91, #%11000111
0D7FB B1 C7                         .db #$B1, #%11000111
0D7FD D1 07                         .db #$D1, #%00000111
0D7FF 02 E7                         .db #$02, #%11100111
0D801 06 E7                         .db #$06, #%11100111
0D803 13 07                         .db #$13, #%00000111
0D805 D3 07                         .db #$D3, #%00000111
0D807 15 07                         .db #$15, #%00000111
0D809 35 07                         .db #$35, #%00000111
0D80B 55 07                         .db #$55, #%00000111
0D80D 75 07                         .db #$75, #%00000111
0D80F 95 07                         .db #$95, #%00000111
0D811 B5 07                         .db #$B5, #%00000111
0D813 D5 07                         .db #$D5, #%00000111
0D815 17 07                         .db #$17, #%00000111
0D817 37 C7                         .db #$37, #%11000111
0D819 57 C7                         .db #$57, #%11000111
0D81B 77 C7                         .db #$77, #%11000111
0D81D 97 C7                         .db #$97, #%11000111
0D81F B7 C7                         .db #$B7, #%11000111
0D821 D7 07                         .db #$D7, #%00000111
0D823 19 07                         .db #$19, #%00000111
0D825 D9 07                         .db #$D9, #%00000111
0D827 22 4C                         .db #$22, #%01001100
0D829 62 4C                         .db #$62, #%01001100
0D82B A2 4C                         .db #$A2, #%01001100
0D82D 24 0C                         .db #$24, #%00001100
0D82F 44 0C                         .db #$44, #%00001100
0D831 64 0C                         .db #$64, #%00001100
0D833 84 0C                         .db #$84, #%00001100
0D835 A4 0C                         .db #$A4, #%00001100
0D837 C4 0C                         .db #$C4, #%00001100
0D839 26 0C                         .db #$26, #%00001100
0D83B 46 0C                         .db #$46, #%00001100
0D83D 66 0C                         .db #$66, #%00001100
0D83F 86 0C                         .db #$86, #%00001100
0D841 A6 0C                         .db #$A6, #%00001100
0D843 C6 0C                         .db #$C6, #%00001100
0D845 28 4C                         .db #$28, #%01001100
0D847 68 4C                         .db #$68, #%01001100
0D849 A8 4C                         .db #$A8, #%01001100
0D84B 32 04                         .db #$32, #%00000100
0D84D 52 04                         .db #$52, #%00000100
0D84F 72 04                         .db #$72, #%00000100
0D851 92 04                         .db #$92, #%00000100
0D853 B2 04                         .db #$B2, #%00000100
0D855 38 04                         .db #$38, #%00000100
0D857 58 04                         .db #$58, #%00000100
0D859 78 04                         .db #$78, #%00000100
0D85B 98 04                         .db #$98, #%00000100
0D85D B8 04                         .db #$B8, #%00000100
0D85F FF                            .db #LEVEL_END
0D860                           
0D860                           lvl_layout_15:
0D860 00 7A                         .db #$00, #%01111010
0D862 40 7A                         .db #$40, #%01111010
0D864 80 7A                         .db #$80, #%01111010
0D866 C0 3A                         .db #$C0, #%00111010
0D868 61 64                         .db #$61, #%01100100
0D86A 05 E4                         .db #$05, #%11100100
0D86C 15 64                         .db #$15, #%01100100
0D86E 55 64                         .db #$55, #%01100100
0D870 95 64                         .db #$95, #%01100100
0D872 D5 E4                         .db #$D5, #%11100100
0D874 26 04                         .db #$26, #%00000100
0D876 46 44                         .db #$46, #%01000100
0D878 76 64                         .db #$76, #%01100100
0D87A C6 04                         .db #$C6, #%00000100
0D87C 17 04                         .db #$17, #%00000100
0D87E 37 64                         .db #$37, #%01100100
0D880 77 44                         .db #$77, #%01000100
0D882 B7 04                         .db #$B7, #%00000100
0D884 18 64                         .db #$18, #%01100100
0D886 58 64                         .db #$58, #%01100100
0D888 98 64                         .db #$98, #%01100100
0D88A FF                            .db #LEVEL_END
0D88B                           
0D88B                           lvl_layout_16:
0D88B 10 E1                         .db #$10, #%11100001
0D88D 20 9A                         .db #$20, #%10011010
0D88F 30 E1                         .db #$30, #%11100001
0D891 40 E1                         .db #$40, #%11100001
0D893 50 E1                         .db #$50, #%11100001
0D895 60 C1                         .db #$60, #%11000001
0D897 70 E1                         .db #$70, #%11100001
0D899 80 E1                         .db #$80, #%11100001
0D89B 90 E1                         .db #$90, #%11100001
0D89D A0 61                         .db #$A0, #%01100001
0D89F 21 C1                         .db #$21, #%11000001
0D8A1 A1 1A                         .db #$A1, #%00011010
0D8A3 B1 41                         .db #$B1, #%01000001
0D8A5 A2 E1                         .db #$A2, #%11100001
0D8A7 B2 E1                         .db #$B2, #%11100001
0D8A9 C2 1A                         .db #$C2, #%00011010
0D8AB D2 E1                         .db #$D2, #%11100001
0D8AD 63 1A                         .db #$63, #%00011010
0D8AF C3 C1                         .db #$C3, #%11000001
0D8B1 14 61                         .db #$14, #%01100001
0D8B3 54 61                         .db #$54, #%01100001
0D8B5 94 C1                         .db #$94, #%11000001
0D8B7 15 61                         .db #$15, #%01100001
0D8B9 55 41                         .db #$55, #%01000001
0D8BB 85 1A                         .db #$85, #%00011010
0D8BD 16 41                         .db #$16, #%01000001
0D8BF 46 1A                         .db #$46, #%00011010
0D8C1 56 61                         .db #$56, #%01100001
0D8C3 A6 61                         .db #$A6, #%01100001
0D8C5 17 67                         .db #$17, #%01100111
0D8C7 57 67                         .db #$57, #%01100111
0D8C9 97 67                         .db #$97, #%01100111
0D8CB D7 07                         .db #$D7, #%00000111
0D8CD 28 41                         .db #$28, #%01000001
0D8CF 58 61                         .db #$58, #%01100001
0D8D1 A8 41                         .db #$A8, #%01000001
0D8D3 18 11                         .db #$18, #%00010001
0D8D5 38 11                         .db #$38, #%00010001
0D8D7 98 11                         .db #$98, #%00010001
0D8D9 B8 11                         .db #$B8, #%00010001
0D8DB D8 11                         .db #$D8, #%00010001
0D8DD 59 09                         .db #$59, #%00001001
0D8DF FF                            .db #LEVEL_END
0D8E0                           
0D8E0                           lvl_layout_17:
0D8E0 10 EA                         .db #$10, #%11101010
0D8E2 20 E2                         .db #$20, #%11100010
0D8E4 30 62                         .db #$30, #%01100010
0D8E6 70 02                         .db #$70, #%00000010
0D8E8 80 6A                         .db #$80, #%01101010
0D8EA 90 22                         .db #$90, #%00100010
0D8EC 01 AA                         .db #$01, #%10101010
0D8EE 31 6A                         .db #$31, #%01101010
0D8F0 81 2A                         .db #$81, #%00101010
0D8F2 A1 02                         .db #$A1, #%00000010
0D8F4 C1 02                         .db #$C1, #%00000010
0D8F6 D1 0A                         .db #$D1, #%00001010
0D8F8 32 EA                         .db #$32, #%11101010
0D8FA 42 6A                         .db #$42, #%01101010
0D8FC 62 02                         .db #$62, #%00000010
0D8FE 92 6A                         .db #$92, #%01101010
0D900 D2 E2                         .db #$D2, #%11100010
0D902 43 1A                         .db #$43, #%00011010
0D904 53 CA                         .db #$53, #%11001010
0D906 73 02                         .db #$73, #%00000010
0D908 83 4A                         .db #$83, #%01001010
0D90A B3 CA                         .db #$B3, #%11001010
0D90C C3 EA                         .db #$C3, #%11101010
0D90E 04 0A                         .db #$04, #%00001010
0D910 14 A2                         .db #$14, #%10100010
0D912 24 AA                         .db #$24, #%10101010
0D914 44 AA                         .db #$44, #%10101010
0D916 64 6A                         .db #$64, #%01101010
0D918 65 6A                         .db #$65, #%01101010
0D91A A5 AA                         .db #$A5, #%10101010
0D91C 06 EA                         .db #$06, #%11101010
0D91E 16 62                         .db #$16, #%01100010
0D920 56 42                         .db #$56, #%01000010
0D922 86 2A                         .db #$86, #%00101010
0D924 17 42                         .db #$17, #%01000010
0D926 47 12                         .db #$47, #%00010010
0D928 57 6A                         .db #$57, #%01101010
0D92A 97 4A                         .db #$97, #%01001010
0D92C A7 02                         .db #$A7, #%00000010
0D92E 18 02                         .db #$18, #%00000010
0D930 28 0A                         .db #$28, #%00001010
0D932 38 22                         .db #$38, #%00100010
0D934 68 2A                         .db #$68, #%00101010
0D936 88 62                         .db #$88, #%01100010
0D938 C8 0A                         .db #$C8, #%00001010
0D93A D8 02                         .db #$D8, #%00000010
0D93C 19 2A                         .db #$19, #%00101010
0D93E 39 2A                         .db #$39, #%00101010
0D940 69 42                         .db #$69, #%01000010
0D942 99 2A                         .db #$99, #%00101010
0D944 B9 42                         .db #$B9, #%01000010
0D946 FF                            .db #LEVEL_END
0D947                           
0D947                           lvl_layout_18:
0D947 00 12                         .db #$00, #%00010010
0D949 40 1A                         .db #$40, #%00011010
0D94B 50 11                         .db #$50, #%00010001
0D94D 70 1A                         .db #$70, #%00011010
0D94F 80 10                         .db #$80, #%00010000
0D951 D0 13                         .db #$D0, #%00010011
0D953 01 1A                         .db #$01, #%00011010
0D955 22 15                         .db #$22, #%00010101
0D957 A2 1A                         .db #$A2, #%00011010
0D959 B2 14                         .db #$B2, #%00010100
0D95B 03 67                         .db #$03, #%01100111
0D95D 43 67                         .db #$43, #%01100111
0D95F 83 67                         .db #$83, #%01100111
0D961 24 09                         .db #$24, #%00001001
0D963 74 0D                         .db #$74, #%00001101
0D965 C4 0A                         .db #$C4, #%00001010
0D967 05 A7                         .db #$05, #%10100111
0D969 45 27                         .db #$45, #%00100111
0D96B 95 27                         .db #$95, #%00100111
0D96D 16 C7                         .db #$16, #%11000111
0D96F 36 67                         .db #$36, #%01100111
0D971 86 67                         .db #$86, #%01100111
0D973 D6 07                         .db #$D6, #%00000111
0D975 07 A3                         .db #$07, #%10100011
0D977 27 23                         .db #$27, #%00100011
0D979 47 C7                         .db #$47, #%11000111
0D97B 57 A0                         .db #$57, #%10100000
0D97D 67 A7                         .db #$67, #%10100111
0D97F 77 20                         .db #$77, #%00100000
0D981 97 C7                         .db #$97, #%11000111
0D983 A7 A4                         .db #$A7, #%10100100
0D985 B7 A7                         .db #$B7, #%10100111
0D987 C7 24                         .db #$C7, #%00100100
0D989 28 0B                         .db #$28, #%00001011
0D98B 38 A3                         .db #$38, #%10100011
0D98D 78 08                         .db #$78, #%00001000
0D98F 88 A0                         .db #$88, #%10100000
0D991 C8 0C                         .db #$C8, #%00001100
0D993 D8 A4                         .db #$D8, #%10100100
0D995 09 43                         .db #$09, #%01000011
0D997 59 40                         .db #$59, #%01000000
0D999 A9 44                         .db #$A9, #%01000100
0D99B FF                            .db #LEVEL_END
0D99C                           
0D99C                           lvl_layout_19:
0D99C 11 A8                         .db #$11, #%10101000
0D99E 21 68                         .db #$21, #%01101000
0D9A0 81 28                         .db #$81, #%00101000
0D9A2 B1 48                         .db #$B1, #%01001000
0D9A4 22 48                         .db #$22, #%01001000
0D9A6 62 68                         .db #$62, #%01101000
0D9A8 B2 28                         .db #$B2, #%00101000
0D9AA 23 28                         .db #$23, #%00101000
0D9AC 83 28                         .db #$83, #%00101000
0D9AE B3 28                         .db #$B3, #%00101000
0D9B0 04 E8                         .db #$04, #%11101000
0D9B2 24 08                         .db #$24, #%00001000
0D9B4 44 08                         .db #$44, #%00001000
0D9B6 64 E8                         .db #$64, #%11101000
0D9B8 84 E8                         .db #$84, #%11101000
0D9BA C4 A8                         .db #$C4, #%10101000
0D9BC D4 E8                         .db #$D4, #%11101000
0D9BE 15 48                         .db #$15, #%01001000
0D9C0 55 C8                         .db #$55, #%11001000
0D9C2 75 C8                         .db #$75, #%11001000
0D9C4 A5 08                         .db #$A5, #%00001000
0D9C6 36 08                         .db #$36, #%00001000
0D9C8 B6 08                         .db #$B6, #%00001000
0D9CA 27 48                         .db #$27, #%01001000
0D9CC 97 28                         .db #$97, #%00101000
0D9CE C7 08                         .db #$C7, #%00001000
0D9D0 09 61                         .db #$09, #%01100001
0D9D2 19 11                         .db #$19, #%00010001
0D9D4 49 61                         .db #$49, #%01100001
0D9D6 89 31                         .db #$89, #%00110001
0D9D8 A9 61                         .db #$A9, #%01100001
0D9DA FF                            .db #LEVEL_END
0D9DB                           
0D9DB                           lvl_layout_20:
0D9DB 00 60                         .db #$00, #%01100000
0D9DD 10 1A                         .db #$10, #%00011010
0D9DF 40 A7                         .db #$40, #%10100111
0D9E1 50 20                         .db #$50, #%00100000
0D9E3 70 1A                         .db #$70, #%00011010
0D9E5 80 40                         .db #$80, #%01000000
0D9E7 B0 1A                         .db #$B0, #%00011010
0D9E9 C0 20                         .db #$C0, #%00100000
0D9EB 01 40                         .db #$01, #%01000000
0D9ED 31 1A                         .db #$31, #%00011010
0D9EF A1 40                         .db #$A1, #%01000000
0D9F1 D1 1A                         .db #$D1, #%00011010
0D9F3 43 67                         .db #$43, #%01100111
0D9F5 83 47                         .db #$83, #%01000111
0D9F7 44 A7                         .db #$44, #%10100111
0D9F9 54 25                         .db #$54, #%00100101
0D9FB 94 08                         .db #$94, #%00001000
0D9FD A4 A7                         .db #$A4, #%10100111
0D9FF 55 05                         .db #$55, #%00000101
0DA01 65 08                         .db #$65, #%00001000
0DA03 06 27                         .db #$06, #%00100111
0DA05 36 67                         .db #$36, #%01100111
0DA07 76 28                         .db #$76, #%00101000
0DA09 A6 27                         .db #$A6, #%00100111
0DA0B D6 07                         .db #$D6, #%00000111
0DA0D A7 A7                         .db #$A7, #%10100111
0DA0F 08 60                         .db #$08, #%01100000
0DA11 09 60                         .db #$09, #%01100000
0DA13 18 A7                         .db #$18, #%10100111
0DA15 48 A7                         .db #$48, #%10100111
0DA17 58 47                         .db #$58, #%01000111
0DA19 88 27                         .db #$88, #%00100111
0DA1B B8 20                         .db #$B8, #%00100000
0DA1D D8 1A                         .db #$D8, #%00011010
0DA1F 59 15                         .db #$59, #%00010101
0DA21 69 60                         .db #$69, #%01100000
0DA23 A9 60                         .db #$A9, #%01100000
0DA25 FF                            .db #LEVEL_END
0DA26                           
0DA26                           lvl_layout_21:
0DA26 00 13                         .db #$00, #%00010011
0DA28 10 11                         .db #$10, #%00010001
0DA2A 20 67                         .db #$20, #%01100111
0DA2C 60 67                         .db #$60, #%01100111
0DA2E A0 47                         .db #$A0, #%01000111
0DA30 D0 15                         .db #$D0, #%00010101
0DA32 32 63                         .db #$32, #%01100011
0DA34 72 05                         .db #$72, #%00000101
0DA36 82 43                         .db #$82, #%01000011
0DA38 B2 43                         .db #$B2, #%01000011
0DA3A 33 03                         .db #$33, #%00000011
0DA3C 43 2A                         .db #$43, #%00101010
0DA3E 63 7A                         .db #$63, #%01111010
0DA40 73 2A                         .db #$73, #%00101010
0DA42 A3 7A                         .db #$A3, #%01111010
0DA44 34 63                         .db #$34, #%01100011
0DA46 74 63                         .db #$74, #%01100011
0DA48 B4 43                         .db #$B4, #%01000011
0DA4A 06 63                         .db #$06, #%01100011
0DA4C 46 63                         .db #$46, #%01100011
0DA4E 86 63                         .db #$86, #%01100011
0DA50 C6 C3                         .db #$C6, #%11000011
0DA52 07 7A                         .db #$07, #%01111010
0DA54 47 7A                         .db #$47, #%01111010
0DA56 67 0A                         .db #$67, #%00001010
0DA58 87 7A                         .db #$87, #%01111010
0DA5A 08 13                         .db #$08, #%00010011
0DA5C 18 43                         .db #$18, #%01000011
0DA5E 48 63                         .db #$48, #%01100011
0DA60 88 63                         .db #$88, #%01100011
0DA62 FF                            .db #LEVEL_END
0DA63                           
0DA63                           lvl_layout_22:
0DA63 00 7A                         .db #$00, #%01111010
0DA65 40 7A                         .db #$40, #%01111010
0DA67 80 7A                         .db #$80, #%01111010
0DA69 C0 3A                         .db #$C0, #%00111010
0DA6B 13 67                         .db #$13, #%01100111
0DA6D 83 A7                         .db #$83, #%10100111
0DA6F B3 07                         .db #$B3, #%00000111
0DA71 14 07                         .db #$14, #%00000111
0DA73 44 07                         .db #$44, #%00000111
0DA75 A4 07                         .db #$A4, #%00000111
0DA77 15 A5                         .db #$15, #%10100101
0DA79 45 A5                         .db #$45, #%10100101
0DA7B 85 25                         .db #$85, #%00100101
0DA7D 86 05                         .db #$86, #%00000101
0DA7F A6 05                         .db #$A6, #%00000101
0DA81 17 11                         .db #$17, #%00010001
0DA83 47 A1                         .db #$47, #%10100001
0DA85 87 A1                         .db #$87, #%10100001
0DA87 B7 A1                         .db #$B7, #%10100001
0DA89 18 41                         .db #$18, #%01000001
0DA8B 68 01                         .db #$68, #%00000001
0DA8D D8 01                         .db #$D8, #%00000001
0DA8F FF                            .db #LEVEL_END
0DA90                           
0DA90                           lvl_layout_23:
0DA90 00 71                         .db #$00, #%01110001
0DA92 40 11                         .db #$40, #%00010001
0DA94 50 43                         .db #$50, #%01000011
0DA96 80 D1                         .db #$80, #%11010001
0DA98 90 E3                         .db #$90, #%11100011
0DA9A A0 63                         .db #$A0, #%01100011
0DA9C 01 63                         .db #$01, #%01100011
0DA9E 41 63                         .db #$41, #%01100011
0DAA0 A1 63                         .db #$A1, #%01100011
0DAA2 02 63                         .db #$02, #%01100011
0DAA4 42 63                         .db #$42, #%01100011
0DAA6 62 11                         .db #$62, #%00010001
0DAA8 A2 67                         .db #$A2, #%01100111
0DAAA 04 63                         .db #$04, #%01100011
0DAAC 44 23                         .db #$44, #%00100011
0DAAE 64 D1                         .db #$64, #%11010001
0DAB0 74 E3                         .db #$74, #%11100011
0DAB2 84 F1                         .db #$84, #%11110001
0DAB4 94 E3                         .db #$94, #%11100011
0DAB6 A4 C7                         .db #$A4, #%11000111
0DAB8 B4 23                         .db #$B4, #%00100011
0DABA 05 63                         .db #$05, #%01100011
0DABC 45 23                         .db #$45, #%00100011
0DABE 06 71                         .db #$06, #%01110001
0DAC0 46 11                         .db #$46, #%00010001
0DAC2 56 E3                         .db #$56, #%11100011
0DAC4 D6 07                         .db #$D6, #%00000111
0DAC6 17 D1                         .db #$17, #%11010001
0DAC8 27 43                         .db #$27, #%01000011
0DACA 67 D1                         .db #$67, #%11010001
0DACC A7 C7                         .db #$A7, #%11000111
0DACE C7 A7                         .db #$C7, #%10100111
0DAD0 D7 B3                         .db #$D7, #%10110011
0DAD2 28 43                         .db #$28, #%01000011
0DAD4 78 43                         .db #$78, #%01000011
0DAD6 29 43                         .db #$29, #%01000011
0DAD8 79 43                         .db #$79, #%01000011
0DADA FF                           .db #LEVEL_END
0DADB                           
0DADB                           lvl_layout_24:
0DADB 02 67                         .db #$02, #%01100111
0DADD 42 67                         .db #$42, #%01100111
0DADF 82 67                         .db #$82, #%01100111
0DAE1 05 67                         .db #$05, #%01100111
0DAE3 45 67                         .db #$45, #%01100111
0DAE5 85 67                         .db #$85, #%01100111
0DAE7 08 67                         .db #$08, #%01100111
0DAE9 48 67                         .db #$48, #%01100111
0DAEB 88 67                         .db #$88, #%01100111
0DAED 30 E7                         .db #$30, #%11100111
0DAEF 70 E7                         .db #$70, #%11100111
0DAF1 B0 E7                         .db #$B0, #%11100111
0DAF3 34 E7                         .db #$34, #%11100111
0DAF5 74 E7                         .db #$74, #%11100111
0DAF7 B4 E7                         .db #$B4, #%11100111
0DAF9 20 13                         .db #$20, #%00010011
0DAFB 40 10                         .db #$40, #%00010000
0DAFD 80 02                         .db #$80, #%00000010
0DAFF 41 05                         .db #$41, #%00000101
0DB01 B1 09                         .db #$B1, #%00001001
0DB03 02 09                         .db #$02, #%00001001
0DB05 52 0C                         .db #$52, #%00001100
0DB07 13 11                         .db #$13, #%00010001
0DB09 33 04                         .db #$33, #%00000100
0DB0B 74 0C                         .db #$74, #%00001100
0DB0D B4 08                         .db #$B4, #%00001000
0DB0F 15 09                         .db #$15, #%00001001
0DB11 55 0C                         .db #$55, #%00001100
0DB13 95 0C                         .db #$95, #%00001100
0DB15 47 03                         .db #$47, #%00000011
0DB17 A7 12                         .db #$A7, #%00010010
0DB19 18 15                         .db #$18, #%00010101
0DB1B 09 05                         .db #$09, #%00000101
0DB1D 19 03                         .db #$19, #%00000011
0DB1F FF                            .db #LEVEL_END
0DB20                           
0DB20                           lvl_layout_25:
0DB20 00 12                         .db #$00, #%00010010
0DB22 10 63                         .db #$10, #%01100011
0DB24 60 63                         .db #$60, #%01100011
0DB26 A0 07                         .db #$A0, #%00000111
0DB28 01 11                         .db #$01, #%00010001
0DB2A A1 02                         .db #$A1, #%00000010
0DB2C 02 67                         .db #$02, #%01100111
0DB2E 42 07                         .db #$42, #%00000111
0DB30 62 67                         .db #$62, #%01100111
0DB32 A2 C7                         .db #$A2, #%11000111
0DB34 03 61                         .db #$03, #%01100001
0DB36 43 01                         .db #$43, #%00000001
0DB38 63 61                         .db #$63, #%01100001
0DB3A A6 E7                         .db #$A6, #%11100111
0DB3C B6 47                         .db #$B6, #%01000111
0DB3E C6 01                         .db #$C6, #%00000001
0DB40 B7 42                         .db #$B7, #%01000010
0DB42 B8 42                         .db #$B8, #%01000010
0DB44 C8 0A                         .db #$C8, #%00001010
0DB46 09 7A                         .db #$09, #%01111010
0DB48 49 7A                         .db #$49, #%01111010
0DB4A 89 3A                         .db #$89, #%00111010
0DB4C B9 42                         .db #$B9, #%01000010
0DB4E FF                            .db #LEVEL_END
0DB4F                           
0DB4F                           ;; Level layout address pointers
0DB4F                           tbl_lvl_layout_hi:
0DB4F                           ifdef TESTING
0DB4F                               .db >#lvl_test
0DB4F                           endif
0DB4F D4 D4 D4 D4 D5                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0DB54 D5 D6 D6 D6 D6                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0DB59 D7 D7 D7 D7 D8                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0DB5E D8 D8 D9 D9 D9                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0DB63 DA DA DA DA DB                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0DB68                           
0DB68                           tbl_lvl_layout_lo:
0DB68                           ifdef TESTING
0DB68                               .db <#lvl_test
0DB68                           endif
0DB68 76 91 C6 F9 6A                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0DB6D A5 2E 6F A6 E9                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0DB72 18 6B 96 E9 60                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0DB77 8B E0 47 9C DB                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0DB7C 26 63 90 DB 20                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0DB81                           
0DB81                           ;; Ball start position (#$YX)
0DB81                           tbl_lvl_ball_startpos:
0DB81                           ifdef TESTING
0DB81                               .db #$29
0DB81                           endif
0DB81 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0DB86 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0DB8B 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0DB90 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0DB95 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0DB9A                           
0DB9A                               
0DB9A                           ;; Ball start direction, color and tile score
0DB9A                           ;; #% ccc v tttt
0DB9A                           ;;    ||| | ++++-- tile score
0DB9A                           ;;    ||| +------- vertical direction, up (0) or down
0DB9A                           ;;    +++--------- color (CBRYGM)
0DB9A                           tbl_lvl_ball_init:
0DB9A                           ifdef TESTING
0DB9A                               .db #%00100000
0DB9A                           endif
0DB9A 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0DB9F 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0DBA4 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0DBA9 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0DBAE 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0DBB3                           
0DBB3                           
0DBB3                           
0DBB3                           ;; Helper table to multiply values by 16
0DBB3                           tbl_Times16:
0DBB3 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0DBBB 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0DBC3                               
0DBC3                           
0DBC3                           ;; Helper table to multiply values by 64
0DBC3                           tbl_Times64:
0DBC3 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0DBC7                           
0DBC7                           
0DBC7                           ;; Metatile ID to CHR data mapper
0DBC7                           tbl_GametileTopLeft:
0DBC7 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0DBD1                           
0DBD1                           tbl_GametileTopRight:
0DBD1 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0DBDB                           
0DBDB                           tbl_GametileBottomLeft:
0DBDB 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0DBE5                           
0DBE5                           tbl_GametileBottomRight:
0DBE5 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DBEF                           
0DBEF                           ;; Metatile ID to RAM byte data mapper
0DBEF                           tbl_GameTileRamByte:
0DBEF 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DBF4                           
0DBF4                           ;; HUD text data (with opaque background tile for sprite zero)
0DBF4                           tbl_HudText:
0DBF4 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DBFC 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DC03 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DC0B 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DC12                           
0DC12                           ;; Move block top left tile based on color
0DC12                           tbl_MoveBlockTopLeftTile:
0DC12 42 4A 42 4A 42 4A 42          .db #$42, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DC19                           
0DC19                           ;; Game over data
0DC19                           tbl_GameOver:
0DC19 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DC1D 00 00                         .db #_SPACE, #_SPACE
0DC1F 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DC23                           
0DC23                           ;; Background fade pallette table
0DC23                           tbl_BackgroundFade:
0DC23 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DC2D                           
0DC2D                           ;; Sound effects
0DC2D                           .include "game/include/table/sfx.asm"
0DC2D                           ;;
0DC2D                           ;; Explosion sound effects
0DC2D                           ;;
0DC2D                           ;;   #% ffff vvvv
0DC2D                           ;;      |||| ++++---- volume (0=low, 15=high)
0DC2D                           ;;      ++++-------- frequency (0=low, 15=high)
0DC2D                           ;;
0DC2D                           ;; #$FF = end of sfx
0DC2D                           ;;
0DC2D                           
0DC2D                           tbl_ExplosionSfx:
0DC2D 00                            .db #$00 ; buffer byte
0DC2E 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DC36 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DC3E 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DC46 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DC4E 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DC56 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DC5B                           
0DC5B                           tbl_ThudSfx:
0DC5B 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DC5C 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DC64 E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DC69                           
0DC69                           tbl_BounceSfx:
0DC69 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DC6A 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DC6E                           
0DC6E 00                            .db #$00
0DC6F                           
0DC6F                           tbl_Sfx_hi:
0DC6F DC DC DC                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DC72                           
0DC72                           tbl_Sfx_lo:
0DC72 2D 5B 69                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DC75                           
0DC75                           
0DC75                           ;; Volume envelope for move sound effect (reversed)
0DC75                           tbl_MoveSfxVolume:
0DC75 70 70 72 73 7B 7C 7B 7B       .db #$70, #$70, #$72, #$73, #$7B, #$7C, #$7B, #$7B
0DC7D 79 79 78 77 76 76 75 75       .db #$79, #$79, #$78, #$77, #$76, #$76, #$75, #$75
0DC85 74 74 73 73 73 73 72 71       .db #$74, #$74, #$73, #$73, #$73, #$73, #$72, #$71
0DC8D                           
0DC8D                           ;; Volume and frequency table for paint sound effect (reversed)
0DC8D 00                        tbl_PaintSfxVolume: .db #$00
0DC8E B0 B1 B2 B3 B2 B4 B6 B3       .db #$B0, #$B1, #$B2, #$B3, #$B2, #$B4, #$B6, #$B3
0DC96 B6 B9 B5 B9 B5 B9 B5 B9       .db #$B6, #$B9, #$B5, #$B9, #$B5, #$B9, #$B5, #$B9
0DC9E 00                        tbl_PaintSfxFreqHi: .db #$00
0DC9F 08 08 08 08 08 08 08 08       .db #$08, #$08, #$08, #$08, #$08, #$08, #$08, #$08
0DCA7 08 09 08 09 09 09 09 09       .db #$08, #$09, #$08, #$09, #$09, #$09, #$09, #$09
0DCAF 00                        tbl_PaintSfxFreqLo: .db #$00
0DCB0 68 90 B8 E0 A4 CC F4 BC       .db #$68, #$90, #$B8, #$E0, #$A4, #$CC, #$F4, #$BC
0DCB8 E4 0C F6 32 1A 56 44 80       .db #$E4, #$0C, #$F6, #$32, #$1A, #$56, #$44, #$80
0DCC0                               
0DCC0                           ;; End level sweep
0DCC0                           tbl_SweepVolume:
0DCC0 00 00 00 01 02 03 03 04       .db #$00, #$00, #$00, #$01, #$02, #$03, #$03, #$04
0DCC8 05 07 08 09 09 0A 0B 0D       .db #$05, #$07, #$08, #$09, #$09, #$0A, #$0B, #$0D
0DCD0                           tbl_SweepFrequency:
0DCD0 20 48 70 98 C0                .db #$20, #$48, #$70, #$98, #$C0
0DCD5                           
0DCD5                           ;; End game sweep
0DCD5                           tbl_EndSweepLength:
0DCD5 02 02 03 03 04 04 05 05       .db #$02, #$02, #$03, #$03, #$04, #$04, #$05, #$05
0DCDD 06 07 08 0A 0D 12 19 20       .db #$06, #$07, #$08, #$0A, #$0D, #$12, #$19, #$20
0DCE5 24 26                         .db #$24, #$26
0DCE7                           
0DCE7                           tbl_EndSweepFreqDeltaLo:
0DCE7 60 60 40 40 30 30 26 26       .db #$60, #$60, #$40, #$40, #$30, #$30, #$26, #$26
0DCEF 20 1B 18 13 0E 0A 07 06       .db #$20, #$1B, #$18, #$13, #$0E, #$0A, #$07, #$06
0DCF7 05 05                         .db #$05, #$05
0DCF9                           
0DCF9                           tbl_EndSweepFreqDeltaRest:
0DCF9 00 00 00 00 00 00 66 66       .db #$00, #$00, #$00, #$00, #$00, #$00, #$66, #$66
0DD01 00 6E 00 33 C5 AB AE 00       .db #$00, #$6E, #$00, #$33, #$C5, #$AB, #$AE, #$00
0DD09 55 55                         .db #$55, #$55
0DD0B                           
0DD0B                           ;; Lookup table to convert bonus ticks to score
0DD0B                           tbl_BonusToScore:
0DD0B 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DD15                           
0DD15                           ;; Check string for sentience (warm boot)
0DD15 C0 FF EE 54 07            tbl_Sentient: .db #$C0, #$FF, #$EE, #$54, #$07
0DD1A                           
0DD1A                           tbl_EndGamePalette:
0DD1A 0F 2D 00 3D                   .db #$0F, #$2D, #$00, #$3D
0DD1E 3C 3B 38 37                   .db #$3C, #$3B, #$38, #$37
0DD22 37 38 3B 3C                   .db #$37, #$38, #$3B, #$3C
0DD26 3D 00 2D 0F                   .db #$3D, #$00, #$2D, #$0F0DD2A                           
0DD2A                           ;; NMI handler
0DD2A                           NMI:
0DD2A                               .include "interrupt/nmi.asm"
0DD2A                           
0DD2A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DD2A                           ;;
0DD2A                           ;; include/nmi.asm
0DD2A                           ;;
0DD2A                           ;; Non-maskable interrupt script. This script is being executed
0DD2A                           ;; when vBlank hits.
0DD2A                           ;;
0DD2A                           ;;
0DD2A                           
0DD2A                               ;; Preserve accumulator through stack
0DD2A 48                            PHA
0DD2B                           
0DD2B                               ;; Should NMI be skipped?
0DD2B A5 1E                         LDA skip_nmi
0DD2D F0 03                         BEQ +
0DD2F 4C 63 DF                          JMP +skip_nmi
0DD32                               +
0DD32                           
0DD32                               ;; When in NMI, skip additional NMI requests
0DD32 A9 01                         LDA #$01
0DD34 85 1E                         STA skip_nmi
0DD36                           
0DD36                               ;; Preserve X, Y, and PC through stack
0DD36 8A                            TXA
0DD37 48                            PHA
0DD38 98                            TYA
0DD39 48                            PHA
0DD3A 08                            PHP
0DD3B                               
0DD3B                               ;; Check forced NMI skip
0DD3B A5 1F                         LDA force_skip_nmi
0DD3D F0 03                         BEQ +
0DD3F 4C 52 DF                          JMP +force_skip_nmi
0DD42                               +
0DD42                           
0DD42                               ;; Update PPU mask
0DD42                               ;LDA #$00
0DD42                               ;STA PPU_CTRL
0DD42 A5 1D                         LDA soft_ppu_mask
0DD44 8D 01 20                      STA PPU_MASK
0DD47                               
0DD47                               
0DD47                               ;; Additional PPU updates go here
0DD47                               .include "game/interrupt/nmi.asm"
0DD47                           
0DD47                               ;; Check if ppu_buffer needs updating
0DD47 A5 44                         LDA ppu_buffer_update
0DD49 D0 03                         BNE +
0DD4B 4C 8D DD                          JMP +no_ppu_buffer_update
0DD4E                               +
0DD4E                           
0DD4E                               ;; Reset ppu control register and mask
0DD4E A2 00                         LDX #$00
0DD50 8E 00 20                      STX PPU_CTRL
0DD53 8E 01 20                      STX PPU_MASK
0DD56                           
0DD56                               ;; Set up loop
0DD56                               -
0DD56                                   ;; Reset hi/lo latch
0DD56 2C 02 20                          BIT PPU_STATUS
0DD59                           
0DD59                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DD59 BD 00 03                          LDA ppu_buffer,x
0DD5C 8D 06 20                          STA PPU_ADDR
0DD5F E8                                INX
0DD60 BD 00 03                          LDA ppu_buffer,x
0DD63 8D 06 20                          STA PPU_ADDR
0DD66                           
0DD66                                   ;; Write ppu_buffer data to PPU_ADDR
0DD66 E8                                INX
0DD67 BD 00 03                          LDA ppu_buffer,x
0DD6A 8D 07 20                          STA PPU_DATA
0DD6D                           
0DD6D                                   ;; Check if updating is done (eg. X is at pointer)
0DD6D E8                                INX
0DD6E E4 45                             CPX ppu_buffer_pointer
0DD70 F0 03                             BEQ +
0DD72 4C 56 DD                      JMP -
0DD75                           +
0DD75                           
0DD75                               ;; Reset ppu buffer update and pointer
0DD75 A9 00                         LDA #$00
0DD77 85 44                         STA ppu_buffer_update
0DD79 85 45                         STA ppu_buffer_pointer
0DD7B                               
0DD7B                               ;; Reset scrolling position
0DD7B 8D 05 20                      STA PPU_SCROLL
0DD7E 8D 05 20                      STA PPU_SCROLL
0DD81                           
0DD81                               ;; Restore ppu control register and mask
0DD81 A9 90                         LDA #%10010000
0DD83 8D 00 20                      STA PPU_CTRL
0DD86 A5 1D                         LDA soft_ppu_mask
0DD88 8D 01 20                      STA PPU_MASK
0DD8B A9 00                         LDA #$00
0DD8D                           
0DD8D                           ;; Continue other NMI stuff
0DD8D                           +no_ppu_buffer_update:
0DD8D                           
0DD8D                               ;; Reset sprite RAM, draw sprites
0DD8D 8D 03 20                      STA OAM_ADDR
0DD90 A9 02                         LDA #$02
0DD92 8D 14 40                      STA OAM_DMA
0DD95                           
0DD95                               ;; Decrease explosion and move block timers
0DD95 A0 04                         LDY #MAX_ANIMATIONS
0DD97 A2 00                         LDX #$00
0DD99                               -
0DD99 BD 60 03                          LDA explosion_timer,x
0DD9C F0 03                             BEQ +
0DD9E DE 60 03                              DEC explosion_timer,x
0DDA1                                   +
0DDA1                           
0DDA1 BD 80 03                          LDA move_block_timer,x
0DDA4 F0 03                             BEQ +
0DDA6 DE 80 03                              DEC move_block_timer,x
0DDA9                                   +
0DDA9                                   
0DDA9 E8                                INX
0DDAA 88                                DEY
0DDAB F0 03                             BEQ +done
0DDAD 4C 99 DD                      JMP -
0DDB0                           +done:
0DDB0                           
0DDB0                               ;; Decrease nudge timer
0DDB0 A5 49                         LDA nudge_timer
0DDB2 F0 02                         BEQ +
0DDB4 C6 49                             DEC nudge_timer
0DDB6                               +
0DDB6                           
0DDB6                               ;; Decrease bonus timer
0DDB6 A5 4A                         LDA bonus_timer
0DDB8 F0 02                         BEQ +
0DDBA C6 4A                             DEC bonus_timer
0DDBC                               +
0DDBC                           
0DDBC                               ;; Decrease kill timer
0DDBC A5 4B                         LDA kill_timer
0DDBE F0 02                         BEQ +
0DDC0 C6 4B                             DEC kill_timer
0DDC2                               +
0DDC2                               
0DDC2                               ;; Decrease and handle unfreeze timer
0DDC2 A5 4C                         LDA unfreeze_timer
0DDC4 F0 0A                         BEQ +
0DDC6 C6 4C                             DEC unfreeze_timer
0DDC8 D0 06                             BNE +
0DDCA                                   
0DDCA A5 42                             LDA ball_flags
0DDCC 29 FB                             AND #UNFREEZE_BALL
0DDCE 85 42                             STA ball_flags
0DDD0                               +
0DDD0                           
0DDD0                               ;; Play background noise
0DDD0 A5 43                         LDA screen_mode
0DDD2 29 01                         AND #IS_GAME_SCREEN
0DDD4 F0 0C                         BEQ +
0DDD6                                   .include "game/include/main/background_sound.asm"
0DDD6                           
0DDD6                               ;; If noise is muted, no noise should play
0DDD6 A5 57                         LDA noise_muted
0DDD8 F0 08                         BEQ +
0DDDA A9 30                             LDA #$30
0DDDC 8D 0C 40                          STA NOISE_VOLUME
0DDDF 4C 47 DE                          JMP +endNoise
0DDE2                               +
0DDE2                               
0DDE2                               ;; At random times, set max_noise period to $03-$0A
0DDE2 A5 51                         LDA max_noise
0DDE4 D0 1D                         BNE +
0DDE6 20 AD C6                          JSR sub_GetRandomNumber
0DDE9 29 EF                             AND #%11101111
0DDEB D0 16                             BNE +
0DDED                                   
0DDED A5 20                             LDA frame_counter
0DDEF 85 21                             STA random_seed
0DDF1 20 AD C6                          JSR sub_GetRandomNumber
0DDF4 29 07                             AND #$07
0DDF6 69 03                             ADC #$03
0DDF8 85 51                             STA max_noise
0DDFA A9 01                             LDA #$01
0DDFC 85 52                             STA sweep_noise
0DDFE A9 34                             LDA #$34
0DE00 8D 0C 40                          STA NOISE_VOLUME
0DE03                               +
0DE03                           
0DE03                               ;; if sweep noise = $00: constant noise
0DE03                               ;; else if sweep noise > $80: decrease pitch
0DE03                               ;; else: increase pitch
0DE03 A5 52                         LDA sweep_noise
0DE05 F0 18                         BEQ +constantNoise
0DE07 30 2A                         BMI +decreaseNoise
0DE09                           
0DE09                           ;; Sweep noise up to max noise pitch
0DE09                           +increaseNoise:
0DE09 C6 53                         DEC current_noise
0DE0B A5 53                         LDA current_noise
0DE0D 8D 0E 40                      STA NOISE_PERIOD
0DE10 C5 51                         CMP max_noise
0DE12 D0 08                         BNE +
0DE14 A9 00                             LDA #$00
0DE16 85 52                             STA sweep_noise
0DE18 A9 0A                             LDA #$0A
0DE1A 85 54                             STA noise_timer
0DE1C                               +
0DE1C 4C 47 DE                      JMP +endNoise
0DE1F                           
0DE1F                           ;; Keep noise at constant pitch
0DE1F                           +constantNoise:
0DE1F A5 51                         LDA max_noise
0DE21 F0 24                         BEQ +endNoise
0DE23                           
0DE23 A5 54                         LDA noise_timer
0DE25 D0 07                         BNE +
0DE27 A9 80                             LDA #$80
0DE29 85 52                             STA sweep_noise
0DE2B 4C 47 DE                          JMP +endNoise
0DE2E                               +
0DE2E C6 54                         DEC noise_timer
0DE30 4C 47 DE                      JMP +endNoise
0DE33                           
0DE33                           ;; Sweep noise down to initial pitch
0DE33                           +decreaseNoise:
0DE33 E6 53                         INC current_noise
0DE35 A5 53                         LDA current_noise
0DE37 8D 0E 40                      STA NOISE_PERIOD
0DE3A C9 0E                         CMP #$0E
0DE3C D0 09                         BNE +endNoise
0DE3E                           
0DE3E 20 3D C7                      JSR sub_BackgroundNoise
0DE41 A9 00                         LDA #$00
0DE43 85 51                         STA max_noise
0DE45 85 52                         STA sweep_noise
0DE47                           
0DE47                           +endNoise:
0DE47                           
0DE47                               +
0DE47                           
0DE47                               ;; Play bonus to score bleeps
0DE47                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DE47                           
0DE47                           ;; Random bleepy noises
0DE47                           
0DE47 A5 55                         LDA do_beeps
0DE49 F0 2E                         BEQ +continue
0DE4B                               
0DE4B C9 02                         CMP #$02
0DE4D D0 12                         BNE +beep
0DE4F                              
0DE4F                           +stopBeep:
0DE4F A9 00                         LDA #$00
0DE51 85 55                         STA do_beeps
0DE53 A9 08                         LDA #$08
0DE55 8D 15 40                      STA APU_STATUS
0DE58 8D 0F 40                      STA NOISE_LENGTH
0DE5B 20 3D C7                      JSR sub_BackgroundNoise
0DE5E 4C 79 DE                      JMP +continue
0DE61                               
0DE61                           +beep:
0DE61 A9 01                         LDA #$01
0DE63 8D 15 40                      STA APU_STATUS
0DE66 A5 56                         LDA soft_pulse1
0DE68 8D 00 40                      STA PULSE1_VOLUME
0DE6B 20 AD C6                      JSR sub_GetRandomNumber
0DE6E 8D 02 40                      STA PULSE1_TIMER_LO
0DE71 20 AD C6                      JSR sub_GetRandomNumber
0DE74 29 01                         AND #$01
0DE76 8D 03 40                      STA PULSE1_TIMER_HI
0DE79                           
0DE79                           +continue:
0DE79                           
0DE79                               
0DE79                               ;; Play sound effect
0DE79                               .include "game/include/main/nmi_sfx.asm"
0DE79                           
0DE79                               ;; Get current explosion sfx frame; if not set, skip this
0DE79 A4 5A                         LDY sfx_timer
0DE7B F0 1F                         BEQ +done
0DE7D                               
0DE7D                                   ;; Check if explosion sfx is done; if so, disable and skip
0DE7D B1 58                             LDA (sfx_address),y
0DE7F D0 07                             BNE +
0DE81 A9 00                                 LDA #$00
0DE83 85 5A                                 STA sfx_timer
0DE85 4C 9C DE                              JMP +done
0DE88                                   +
0DE88                                   
0DE88                                   ;; Set low nibble as volume
0DE88 29 0F                             AND #$0F
0DE8A 09 30                             ORA #$30
0DE8C 8D 0C 40                          STA NOISE_VOLUME
0DE8F                                   
0DE8F                                   ;; Set high nibble as frequency
0DE8F B1 58                             LDA (sfx_address),y
0DE91 4A                                LSR
0DE92 4A                                LSR
0DE93 4A                                LSR
0DE94 4A                                LSR
0DE95 49 0F                             EOR #$0F
0DE97 8D 0E 40                          STA NOISE_PERIOD
0DE9A                                   
0DE9A                                   ;; Next frame
0DE9A E6 5A                             INC sfx_timer
0DE9C                               +done:
0DE9C                           
0DE9C                           
0DE9C                               ;; Check move sfx
0DE9C A4 5B                         LDY sfx_timer+1
0DE9E F0 34                         BEQ +done
0DEA0                           
0DEA0 C6 5B                             DEC sfx_timer+1
0DEA2 C0 18                             CPY #$18
0DEA4 D0 0D                             BNE +
0DEA6                                       ;; Update APU status
0DEA6 A9 09                                 LDA #$09
0DEA8 8D 15 40                              STA APU_STATUS
0DEAB A9 8B                                 LDA #$8B
0DEAD 85 5D                                 STA sfx_frequency
0DEAF A9 0A                                 LDA #$0A
0DEB1 85 5E                                 STA sfx_frequency+1
0DEB3                                   +
0DEB3                                   
0DEB3                                   ;; Set volume
0DEB3 B9 75 DC                          LDA tbl_MoveSfxVolume,y
0DEB6 8D 00 40                          STA PULSE1_VOLUME
0DEB9                                   
0DEB9 84 0B                             STY temp
0DEBB A9 18                             LDA #$18
0DEBD 38                                SEC
0DEBE E5 0B                             SBC temp
0DEC0 4A                                LSR
0DEC1 18                                CLC
0DEC2 69 03                             ADC #$03
0DEC4 65 5D                             ADC sfx_frequency
0DEC6 85 5D                             STA sfx_frequency
0DEC8 8D 02 40                          STA PULSE1_TIMER_LO
0DECB A5 5E                             LDA sfx_frequency+1
0DECD 69 00                             ADC #$00
0DECF 85 5E                             STA sfx_frequency+1
0DED1 8D 03 40                          STA PULSE1_TIMER_HI
0DED4                               +done:
0DED4                           
0DED4                           
0DED4                               ;; Check paint sfx
0DED4 A4 5C                         LDY sfx_timer+2
0DED6 F0 1D                         BEQ +done
0DED8                           
0DED8 C6 5C                             DEC sfx_timer+2
0DEDA C0 10                             CPY #$10
0DEDC D0 05                             BNE +
0DEDE                                       ;; Update APU status
0DEDE A9 09                                 LDA #$09
0DEE0 8D 15 40                              STA APU_STATUS
0DEE3                                   +
0DEE3                                   
0DEE3                                   ;; Set volume
0DEE3 B9 8D DC                          LDA tbl_PaintSfxVolume,y
0DEE6 8D 00 40                          STA PULSE1_VOLUME
0DEE9 B9 AF DC                          LDA tbl_PaintSfxFreqLo,y
0DEEC 8D 02 40                          STA PULSE1_TIMER_LO
0DEEF B9 9E DC                          LDA tbl_PaintSfxFreqHi,y
0DEF2 8D 03 40                          STA PULSE1_TIMER_HI
0DEF5                               +done:
0DEF5                           
0DEF5                           
0DEF5                               ;; Check sweep sfx
0DEF5 A5 5F                         LDA sfx_sweep_count
0DEF7 F0 1A                         BEQ +done
0DEF9 C9 0F                             CMP #$0F
0DEFB D0 05                             BNE +
0DEFD A9 01                                 LDA #$01
0DEFF 8D 15 40                              STA APU_STATUS
0DF02                                   +
0DF02 A5 60                             LDA sfx_sweep_volume
0DF04 09 70                             ORA #$70
0DF06 8D 00 40                          STA PULSE1_VOLUME
0DF09 A5 62                             LDA sfx_sweep_frequency
0DF0B 8D 02 40                          STA PULSE1_TIMER_LO
0DF0E A9 08                             LDA #$08
0DF10 8D 03 40                          STA PULSE1_TIMER_HI
0DF13                               +done:
0DF13                               
0DF13                               
0DF13                               ;; Check end game sweep
0DF13 A5 63                         LDA sfx_endgame_enabled
0DF15 F0 3B                         BEQ +done
0DF17 C9 01                             CMP #$01
0DF19 D0 07                             BNE +
0DF1B A9 03                                 LDA #$03
0DF1D 8D 15 40                              STA APU_STATUS
0DF20 E6 63                                 INC sfx_endgame_enabled
0DF22                                   +
0DF22                                   
0DF22 C9 FF                             CMP #$FF
0DF24 D0 10                             BNE +
0DF26 A9 00                                 LDA #$00
0DF28 85 63                                 STA sfx_endgame_enabled
0DF2A 8D 15 40                              STA APU_STATUS
0DF2D 8D 00 40                              STA PULSE1_VOLUME
0DF30 8D 04 40                              STA PULSE2_VOLUME
0DF33 4C 52 DF                              JMP +done
0DF36                                   +
0DF36 A9 77                             LDA #$77
0DF38 8D 00 40                          STA PULSE1_VOLUME
0DF3B 8D 04 40                          STA PULSE2_VOLUME
0DF3E A5 65                             LDA sfx_endgame_p1_freq_hi
0DF40 8D 03 40                          STA PULSE1_TIMER_HI
0DF43 A5 66                             LDA sfx_endgame_p1_freq_lo
0DF45 8D 02 40                          STA PULSE1_TIMER_LO 
0DF48 A5 68                             LDA sfx_endgame_p2_freq_hi
0DF4A 8D 07 40                          STA PULSE2_TIMER_HI
0DF4D A5 69                             LDA sfx_endgame_p2_freq_lo
0DF4F 8D 06 40                          STA PULSE2_TIMER_LO
0DF52                               +done:
0DF52                           
0DF52                               
0DF52                           
0DF52                           ;; This is what happens when we forced nmi skip
0DF52                           +force_skip_nmi:
0DF52                           
0DF52                               ;; Increase frame timers
0DF52 E6 20                         INC frame_counter
0DF54                           
0DF54                               ;; reset sprites_update_position
0DF54 A9 00                         LDA #$00
0DF56 85 40                         STA sprites_update_position
0DF58                           
0DF58                               ;; Don't skip next NMI request
0DF58 A9 00                         LDA #$00
0DF5A 85 1E                         STA skip_nmi
0DF5C 85 6A                         STA check_nmi
0DF5E                           
0DF5E                               ;; Restore X, Y and PC from stack
0DF5E 28                            PLP
0DF5F 68                            PLA
0DF60 A8                            TAY
0DF61 68                            PLA
0DF62 AA                            TAX
0DF63                           
0DF63                           +skip_nmi:
0DF63                               ;; Restore accumulator from stack
0DF63 68                            PLA
0DF64                           
0DF64                               ;; Return
0DF64 40                            RTI
0DF65                           
0DF65                           
0DF65                           ;; IRQ handler (empty)
0DF65                           IRQ:
0DF65                               .include "interrupt/irq.asm"
0DF65                           
0DF65 40                            RTI
0DF66                           
0DF66                           
0DF66                           ;; Interrupt vectors
0DF66 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 2A DD                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 65 DF                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
