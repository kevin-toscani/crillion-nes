                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_OTHERRAM  = $0300
                                ADDR_SPRITERAM = $0200
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                ;; Sprite RAM address
                                SPRITE_RAM      = $0200
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               frame_counter_60  .dsb 1
00017                               second_counter    .dsb 2
00019                               random_seed       .dsb 1
0001A                           
0001A                               ;; Game specific variables
0001A                               .include "game/ram/zp.asm"
0001A                           ;; Ball variables
0001A                           ball_xpos           .dsb 1   ; left pixel x-position on screen
0001B                           ball_ypos           .dsb 1   ; top pixel y-position on screen
0001C                           ball_lives          .dsb 1   ; number of lives left
0001D                           ball_score          .dsb 5   ; decimal score, five bytes (0-9)
00022                           ball_bonus          .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           
00025                           ;; Ball flags
00025                           ;; #% c c c l h v n a
00025                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00025                           ;;    | | | | | | +---- ball is being nudged (1) or not (0)
00025                           ;;    | | | | | +------ ball moves up (0) or down (1)
00025                           ;;    | | | | +-------- ball is moving horizontally (1) or not (0)
00025                           ;;    | | | +---------- ball is moving left (0) or right (1)
00025                           ;;    +-+-+------------ ball color (1-6)
00025                           ball_flags          .dsb 1
00026                           
00026                           
00026                           ;; Screen mode
00026                           ;; #%00000000 = intro screen
00026                           ;; #%. . . . . . w g
00026                           ;;   | | | | | | | +--------- game mode (1) or not (0)
00026                           ;;   | | | | | | +----------- win screen (1) or not (0)
00026                           ;;   +-+-+-+-+-+------------- unused
00026                           screen_mode         .dsb 1
00027                           
00027                           
00027                           ;; Start level pointer
00027                           ;; You can start the game at level 1, 5, 9, 13 or 17.
00027                           ;; This is the pointer that tells you at which level to start.
00027                           startlevel_pointer  .dsb 1 
00028                           
00028                           
00028                           ;; PPU buffer variables
00028                           ppu_buffer_update   .dsb 1
00029                           ppu_buffer_pointer  .dsb 1
0002A                           
0002A                           ;; Pointer to keep track of the number of explosions
0002A                           explosion_pointer         .dsb 1
0002B                           
0002B                           ;; Sprite RAM pointer to keep track of sprites to update
0002B                           sprite_ram_pointer        .dsb 1
0002C                           
0002C                               0002C                           .ende
                                
                                ;; Other RAM
                                .enum ADDR_OTHERRAM
00300                               .include "ram/misc.asm"
00300                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00300                           ;;
00300                           ;; ram/misc.asm
00300                           ;;
00300                           ;; List of additional, non-zeropage RAM variables. Currently
00300                           ;; empty, but will hold data like the OAM buffer and other,
00300                           ;; less-often accessed, global variables.
00300                           ;;
00300                           ;;
00300                           
00300                           
00300                               ;; Game specific RAM variables
00300                               .include "game/ram/misc.asm"
00300                           ;; miscellaneous (non-zeropage) ram variables go here
00300                           
00300                           ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                           ppu_buffer                .dsb 48
00330                           
00330                           ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                           explosion_framecounter    .dsb 4
00334                           
00334                           ;; _currentframe, keeps track which anim frame we're at
00334                           explosion_currentframe    .dsb 4
00338                           
00338                           ;; _attributes, to distinguish between ball and wall explosion
00338                           explosion_attributes      .dsb 4
0033C                           
0033C                           ;; x- and y-coordinate of the explosion
0033C                           explosion_x               .dsb 4
00340                           explosion_y               .dsb 4
00344                           
00344                           ;; active flag to see if animation is/should be shown
00344                           explosion_active          .dsb 4
00348                           .ende
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 47 C2                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 47 C2                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Force NMI skip
0C04B A9 01                     	LDA #$01
0C04D 85 14                     	STA force_skip_nmi
0C04F                           
0C04F                               ;; Disable rendering
0C04F A5 12                         LDA soft_ppu_mask
0C051 29 E7                         AND #%11100111
0C053 85 12                         STA soft_ppu_mask
0C055 20 47 C2                      JSR sub_WaitForVBlank
0C058                           
0C058                               ;; Load intro palette
0C058 2C 02 20                      BIT PPU_STATUS
0C05B A9 3F                         LDA #$3F
0C05D 8D 06 20                      STA PPU_ADDR
0C060 A9 00                         LDA #$00
0C062 8D 06 20                      STA PPU_ADDR
0C065 A2 00                         LDX #$00
0C067                               -
0C067 BD 60 C2                          LDA tbl_IntroScreenPalette,x
0C06A 8D 07 20                          STA PPU_DATA
0C06D E8                                INX
0C06E E0 20                             CPX #$20
0C070 D0 F5                         BNE -
0C072                           
0C072                               ;; Set up intro screen draw loop
0C072 A2 00                         LDX #$00
0C074                           
0C074                           -loop_IntroScreenData:
0C074                           
0C074                               ;; Get current byte from intro screen data
0C074 BD 88 C2                      LDA tbl_IntroScreenData,x
0C077                           
0C077                               ;; If current byte is #$3F, we're done drawing.
0C077 C9 3F                         CMP #$3F
0C079 D0 03                         BNE +
0C07B 4C C8 C0                          JMP +goToEndIntroScreen
0C07E                               +
0C07E                           
0C07E                               ;; If highest bits are %11, draw a plain tile
0C07E 29 C0                         AND #%11000000
0C080 D0 03                         BNE +
0C082 4C A8 C0                          JMP +drawTile
0C085                               +
0C085                               
0C085                               ;; If highest bits are %01, set the PPU address
0C085                               ;; If not, draw two logo tiles
0C085 C9 40                         CMP #%01000000
0C087 D0 03                         BNE +drawLogo
0C089 4C B2 C0                          JMP +setPpuAddr
0C08C                           
0C08C                           +drawLogo:
0C08C                               ;; Get bits 0-2 and store in a temp variable
0C08C BD 88 C2                      LDA tbl_IntroScreenData,x
0C08F 29 07                         AND #%00000111
0C091 85 00                         STA temp
0C093                               
0C093                               ;; Get bits 3-5, shift over to get a value from 0-7
0C093 BD 88 C2                      LDA tbl_IntroScreenData,x
0C096 4A                            LSR
0C097 4A                            LSR
0C098 4A                            LSR
0C099 29 07                         AND #%00000111
0C09B                               
0C09B                               ;; Draw the tile that corresponds with that value
0C09B A8                            TAY
0C09C 20 4D C2                      JSR sub_drawIntroScreenLogoTile
0C09F                               
0C09F                               ;; Do the same for the value stored in temp
0C09F A4 00                         LDY temp
0C0A1 20 4D C2                      JSR sub_drawIntroScreenLogoTile
0C0A4                           
0C0A4                               ;; Next byte please
0C0A4 E8                            INX
0C0A5 4C 74 C0                      JMP -loop_IntroScreenData
0C0A8                           
0C0A8                           +drawTile:
0C0A8                               ;; Just draw the tile value on screen
0C0A8 BD 88 C2                      LDA tbl_IntroScreenData,x
0C0AB 8D 07 20                      STA PPU_DATA
0C0AE                               
0C0AE                               ;; Next byte please
0C0AE E8                            INX
0C0AF 4C 74 C0                      JMP -loop_IntroScreenData
0C0B2                           
0C0B2                           
0C0B2                           +setPpuAddr:
0C0B2                               ;; Reset the PPU latch
0C0B2 2C 02 20                      BIT PPU_STATUS
0C0B5                               
0C0B5                               ;; Sanitize and write the high byte of the PPU address
0C0B5 BD 88 C2                      LDA tbl_IntroScreenData,x
0C0B8 29 3F                         AND #%00111111
0C0BA 8D 06 20                      STA PPU_ADDR
0C0BD                           
0C0BD                               ;; Write the low byte of the PPU address
0C0BD E8                            INX
0C0BE BD 88 C2                      LDA tbl_IntroScreenData,x
0C0C1 8D 06 20                      STA PPU_ADDR
0C0C4                               
0C0C4                               ;; PPU has been set up to draw tiles at the correct spot now.
0C0C4                               
0C0C4                               ;; Next byte please.
0C0C4 E8                            INX
0C0C5 4C 74 C0                      JMP -loop_IntroScreenData
0C0C8                           
0C0C8                           +goToEndIntroScreen:
0C0C8                           
0C0C8                               ;; To color the 1.LEVEL: line green, we need to update two
0C0C8                               ;; values in the PPU attribute data.
0C0C8 2C 02 20                      BIT PPU_STATUS
0C0CB A9 23                         LDA #$23
0C0CD 8D 06 20                      STA PPU_ADDR
0C0D0 A9 CB                         LDA #$CB
0C0D2 8D 06 20                      STA PPU_ADDR
0C0D5 A9 0A                         LDA #%00001010
0C0D7 8D 07 20                      STA PPU_DATA
0C0DA 8D 07 20                      STA PPU_DATA
0C0DD                           
0C0DD                               ;; Enable rendering
0C0DD A5 12                         LDA soft_ppu_mask
0C0DF 09 1E                         ORA #%00011110
0C0E1 85 12                         STA soft_ppu_mask
0C0E3 A9 00                     	LDA #$00
0C0E5 8D 05 20                  	STA PPU_SCROLL
0C0E8 8D 05 20                  	STA PPU_SCROLL
0C0EB 85 14                     	STA force_skip_nmi
0C0ED 20 47 C2                      JSR sub_WaitForVBlank
0C0F0                           
0C0F0                           
0C0F0                           ;; Main game loop
0C0F0                           MainGameLoop:
0C0F0                               .include "game/main.asm"
0C0F0                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C0F0                           ;;
0C0F0                           ;; game/main.asm
0C0F0                           ;;
0C0F0                           ;; The main game loop content.
0C0F0                           ;;
0C0F0                           ;;
0C0F0                           
0C0F0                               ;; Reset sprite pointer every game loop
0C0F0 A9 00                         LDA #$00
0C0F2 85 2B                         STA sprite_ram_pointer
0C0F4                           
0C0F4                               ;; Store previous buttons
0C0F4 A5 0F                         LDA buttons_held
0C0F6 85 0E                         STA buttons_prev
0C0F8                           
0C0F8                               ;; Read controller input
0C0F8 20 33 C2                      JSR sub_ReadController
0C0FB                           
0C0FB                               ;; Get buttons released
0C0FB A5 0F                         LDA buttons_held
0C0FD 49 FF                         EOR #$FF
0C0FF 25 0E                         AND buttons_prev
0C101 85 11                         STA buttons_released
0C103                           
0C103                               ;; Set buttons pressed
0C103 A5 0E                         LDA buttons_prev
0C105 49 FF                         EOR #$FF
0C107 25 0F                         AND buttons_held
0C109 85 10                         STA buttons_pressed
0C10B                           
0C10B                           .include "game/test/tile_update.asm"
0C10B                               ;; If START button is pressed
0C10B A5 10                         LDA buttons_pressed
0C10D 29 10                         AND #BUTTON_START
0C10F D0 03                         BNE +
0C111 4C 39 C1                          JMP +end
0C114                               +
0C114                               
0C114                               ;; Prevent updating until full 3-byte buffer is filled,
0C114                               ;; so that graphics won't glitch out if NMI happens during
0C114                               ;; updating the buffer
0C114 A9 00                         LDA #$00
0C116 85 28                         STA ppu_buffer_update
0C118                           
0C118                               ;; Check if buffer full; if so, wait a frame and force update
0C118 A4 29                         LDY ppu_buffer_pointer
0C11A C0 30                         CPY #$30
0C11C D0 05                         BNE +
0C11E E6 28                             INC ppu_buffer_update
0C120 20 47 C2                          JSR sub_WaitForVBlank
0C123                               +
0C123                           
0C123                               ;; Add ppu_addr high byte to buffer
0C123 A9 21                         LDA #$21
0C125 99 00 03                      STA ppu_buffer,y
0C128                           
0C128                               ;; Add ppu_addr low byte to buffer
0C128 C8                            INY
0C129 A9 E0                         LDA #$E0
0C12B 99 00 03                      STA ppu_buffer,y
0C12E                           
0C12E                               ;; Add ppu_data (in this case, chr tile id $3C) to buffer
0C12E C8                            INY
0C12F A9 28                         LDA #$28
0C131 99 00 03                      STA ppu_buffer,y
0C134                           
0C134                               ;; Update buffer pointer
0C134 C8                            INY
0C135 84 29                         STY ppu_buffer_pointer
0C137                           
0C137                               ;; Tell NMI to update next round
0C137 E6 28                         INC ppu_buffer_update
0C139                           
0C139                              
0C139                           +end:0C139                           
0C139                           .include "game/test/show_animation.asm"
0C139                               ;; If A button is pressed, initiate explosion
0C139 A5 10                         LDA buttons_pressed
0C13B 29 80                         AND #BUTTON_A
0C13D D0 03                         BNE +
0C13F 4C 6F C1                          JMP +end
0C142                               +
0C142                           
0C142                               ;; Get most recent slot for explosion
0C142 A6 2A                         LDX explosion_pointer
0C144                           
0C144                               ;; If 0, use max pointer value
0C144 D0 02                         BNE +
0C146 A2 04                             LDX #MAX_ANIMATIONS
0C148                               +
0C148                           
0C148                               ;; Decrease pointer by one
0C148 CA                            DEX
0C149 86 2A                         STX explosion_pointer
0C14B                           
0C14B                               ;; Load explosion data into RAM
0C14B A9 00                         LDA #$00
0C14D 9D 34 03                      STA explosion_currentframe,x
0C150 A9 04                         LDA #ANIMATION_SPEED
0C152 9D 30 03                      STA explosion_framecounter,x
0C155 20 25 C2                      JSR sub_GetRandomNumber
0C158 29 F0                         AND #%11110000
0C15A 9D 3C 03                      STA explosion_x,x
0C15D 20 25 C2                      JSR sub_GetRandomNumber
0C160 29 F0                         AND #%11110000
0C162 9D 40 03                      STA explosion_y,x
0C165 A9 01                         LDA #%00000001
0C167 9D 38 03                      STA explosion_attributes,x
0C16A A9 01                         LDA #$01
0C16C 9D 44 03                      STA explosion_active,x
0C16F                           
0C16F                           +end:
0C16F                           
0C16F                               ;; Set up loop
0C16F A2 00                         LDX #$00
0C171                               -loop_load_animation:
0C171                                   ;; Check if current animation is active. If not, goto next
0C171 BD 44 03                          LDA explosion_active,x
0C174 D0 03                             BNE +
0C176 4C 10 C2                              JMP +next
0C179                                   +
0C179                           
0C179                                   ;; Check the explosion framecounter
0C179 BD 30 03                          LDA explosion_framecounter,x
0C17C D0 26                             BNE +
0C17E                                       ;; Framecounter is 0
0C17E                                       ;; Reset to animation speed
0C17E A9 04                                 LDA #ANIMATION_SPEED
0C180 9D 30 03                              STA explosion_framecounter,x
0C183                           
0C183                                       ;; Set next animation frame, and check if we're done yet
0C183 FE 34 03                              INC explosion_currentframe,x
0C186 BD 34 03                              LDA explosion_currentframe,x
0C189 C9 0A                                 CMP #ANIM_SLIDES
0C18B D0 17                                 BNE +
0C18D                           
0C18D                                       ;; If we're done, inactivate current explosion, clean
0C18D                                       ;; up sprite RAM and go to the next one
0C18D A9 00                                 LDA #$00
0C18F 9D 44 03                              STA explosion_active,x
0C192                                       
0C192 A9 09                                 LDA #SLIDE_SIZE
0C194 0A                                    ASL
0C195 0A                                    ASL
0C196 A8                                    TAY
0C197 A9 EF                                 LDA #$EF
0C199                                       -
0C199 88                                        DEY
0C19A 99 00 02                                  STA SPRITE_RAM,y
0C19D C0 00                                     CPY #00
0C19F D0 F8                                 BNE -
0C1A1                                       
0C1A1 4C 10 C2                              JMP +next
0C1A4                                   +
0C1A4                           
0C1A4                                   ;; Load (x,y) position in temp variables
0C1A4 BD 3C 03                          LDA explosion_x,x
0C1A7 85 01                             STA temp+1
0C1A9 85 03                             STA temp+3
0C1AB BD 40 03                          LDA explosion_y,x
0C1AE 85 02                             STA temp+2
0C1B0                           
0C1B0                                   ;; Load attribute in temp variable
0C1B0 BD 38 03                          LDA explosion_attributes,x
0C1B3 85 04                             STA temp+4
0C1B5                           
0C1B5                                   ;; Load current frame into Y-register
0C1B5 BC 34 03                          LDY explosion_currentframe,x
0C1B8                           
0C1B8                                   ;; Load current frame ROM address from table
0C1B8 B9 8E C3                          LDA explosion_anim_lo,y
0C1BB 85 0C                             STA pointer
0C1BD B9 84 C3                          LDA explosion_anim_hi,y
0C1C0 85 0D                             STA pointer+1
0C1C2                           
0C1C2                                   ;; Save x-register on stack
0C1C2 8A                                TXA
0C1C3 48                                PHA
0C1C4                           
0C1C4                                   ;; Load sprites into sprite RAM
0C1C4 A6 2B                             LDX sprite_ram_pointer
0C1C6 A0 00                             LDY #$00
0C1C8                           
0C1C8                                   ;; Prepare (x,y) offset for loop
0C1C8 84 00                             STY temp
0C1CA                           
0C1CA                                   -loop_load_sprite:
0C1CA                                   
0C1CA                                       ;; Do not draw empty sprites
0C1CA B1 0C                                 LDA (pointer),y
0C1CC F0 18                                 BEQ +nextSprite
0C1CE                                   
0C1CE                                           ;; Add y-position to sprite ram buffer
0C1CE A5 02                                     LDA temp+2
0C1D0 9D 00 02                                  STA SPRITE_RAM,x
0C1D3 E8                                        INX
0C1D4                           
0C1D4                                           ;; Get tile number from frame ROM address, and
0C1D4                                           ;; add it to sprite ram buffer
0C1D4 B1 0C                                     LDA (pointer),y
0C1D6 9D 00 02                                  STA SPRITE_RAM,x
0C1D9 E8                                        INX
0C1DA                           
0C1DA                                           ;; Add attribute data to sprite ram buffer
0C1DA A5 04                                     LDA temp+4
0C1DC 9D 00 02                                  STA SPRITE_RAM,x
0C1DF E8                                        INX
0C1E0                           
0C1E0                                           ;; Add x-position to sprite ram buffer
0C1E0 A5 03                                     LDA temp+3
0C1E2 9D 00 02                                  STA SPRITE_RAM,x
0C1E5 E8                                        INX
0C1E6                           
0C1E6                                       +nextSprite:
0C1E6                           
0C1E6                                       ;; Check if all sprites are done
0C1E6 C8                                    INY
0C1E7 C0 09                                 CPY #SLIDE_SIZE
0C1E9 F0 21                                 BEQ +done
0C1EB                           
0C1EB                                       ;; Update x value
0C1EB A5 03                                 LDA temp+3
0C1ED 18                                    CLC
0C1EE 69 08                                 ADC #$08
0C1F0 85 03                                 STA temp+3
0C1F2                           
0C1F2                                       ;; Update temp for x,y position
0C1F2 E6 00                                 INC temp
0C1F4 A5 00                                 LDA temp
0C1F6 C9 03                                 CMP #SLIDE_WIDTH
0C1F8 D0 0F                                 BNE +
0C1FA                                           ;; Row is done; reset x-position
0C1FA A5 01                                     LDA temp+1
0C1FC 85 03                                     STA temp+3
0C1FE                           
0C1FE                                           ;; Update y-position
0C1FE A5 02                                     LDA temp+2
0C200 18                                        CLC
0C201 69 08                                     ADC #$08
0C203 85 02                                     STA temp+2
0C205                           
0C205                                           ;; Reset row counter
0C205 A9 00                                     LDA #$00
0C207 85 00                                     STA temp
0C209                                       +
0C209                           
0C209 4C CA C1                          JMP -loop_load_sprite
0C20C                           
0C20C                               +done:
0C20C 86 2B                             STX sprite_ram_pointer
0C20E                           
0C20E                                   ;; Retrieve x-register from stack
0C20E 68                                PLA
0C20F AA                                TAX
0C210                           
0C210                               +next:
0C210                                   ;; Check if all animations have been updated
0C210 E8                                INX
0C211 E0 04                             CPX #MAX_ANIMATIONS
0C213 F0 03                             BEQ +done
0C215                           
0C215 4C 71 C1                      JMP -loop_load_animation
0C218                           +done:
0C218                           
0C218                               ;; Sprite clean-up
0C218 A6 2B                         LDX sprite_ram_pointer
0C21A A9 EF                         LDA #$EF
0C21C                               -
0C21C 9D 00 02                          STA SPRITE_RAM,x
0C21F E8                                INX
0C220 D0 FA                         BNE -
0C222 4C F0 C0                      JMP MainGameLoop
0C225                           
0C225                           ;; Subroutines
0C225                           .include "include/subroutines.asm"
0C225                           
0C225                           ;; RNG
0C225                           .include "subroutine/GetRandomNumber.asm"
0C225                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C225                           ;;
0C225                           ;; subroutine/GetRandomNumber.asm
0C225                           ;;
0C225                           ;; Simple and fast random number generator by White Flame.
0C225                           ;;
0C225                           ;; Set random_seed to an arbitrary number to randomize between
0C225                           ;; gaming sessions, for instance using the frame counter upon
0C225                           ;; pressing START on the intro screen.
0C225                           ;;
0C225                           ;;     ;; IF START PRESSED:
0C225                           ;;     LDA frame_counter
0C225                           ;;     STA random_seed
0C225                           ;;
0C225                           ;; Source:
0C225                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C225                           ;;
0C225                           ;;
0C225                           
0C225                           sub_GetRandomNumber:
0C225                               ;; Force EOR if random_seed is zero
0C225 A5 19                         LDA random_seed
0C227 F0 05                         BEQ +doEor
0C229                           
0C229                               ;; Shift left, and EOR if the high bit is set
0C229 0A                            ASL
0C22A F0 04                         BEQ +noEor
0C22C 90 02                         BCC +noEor
0C22E                           
0C22E                           +doEor:
0C22E 49 1D                         EOR #$1D
0C230                           
0C230                           +noEor:
0C230 85 19                         STA random_seed
0C232                           
0C232 60                            RTS
0C233                           
0C233                           
0C233                           ;; Read controller input
0C233                           .include "subroutine/ReadController.asm"
0C233                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C233                           ;;
0C233                           ;; subroutine/ReadController.asm
0C233                           ;;
0C233                           ;; Subroutine that polls the controller and stores the input
0C233                           ;; buttons in a variable. This version only handles controller
0C233                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C233                           ;;
0C233                           ;;
0C233                           
0C233                           sub_ReadController:
0C233                           
0C233                               ;; Set strobe bit
0C233 A9 01                         LDA #$01
0C235 8D 16 40                      STA JOYPAD_1
0C238                           
0C238                               ;; Set up ring counter
0C238 85 0F                         STA buttons_held
0C23A                           
0C23A                               ;; Clear strobe bit
0C23A 4A                            LSR
0C23B 8D 16 40                      STA JOYPAD_1
0C23E                           
0C23E                               ;; Loop through button presses
0C23E                               -
0C23E AD 16 40                          LDA JOYPAD_1
0C241 4A                                LSR
0C242 26 0F                             ROL buttons_held
0C244                           
0C244                               ;; Check if ring counter is done
0C244 90 F8                         BCC -
0C246                           
0C246                               ;; Return from subroutine
0C246 60                            RTS
0C247                           
0C247                           
0C247                           ;; vBlank wait
0C247                           .include "subroutine/WaitForVBlank.asm"
0C247                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C247                           ;;
0C247                           ;; subroutine/WaitForVBlank.asm
0C247                           ;;
0C247                           ;; Subroutine that essentially pauses script execution until
0C247                           ;; vBlank happens.
0C247                           ;;
0C247                           ;;
0C247                           
0C247                           sub_WaitForVBlank:
0C247 2C 02 20                      BIT $2002
0C24A 10 FB                         BPL sub_WaitForVBlank
0C24C 60                            RTS
0C24D                           
0C24D                           
0C24D                           ;; Game specific subroutines
0C24D                           .include "game/include/subroutines.asm"
0C24D                           ;; additional game-specific subroutines go here
0C24D                           
0C24D                           sub_drawIntroScreenLogoTile:
0C24D B9 80 C2                      LDA tbl_IntroScreenLogoChr,y
0C250 C9 60                         CMP #$60
0C252 D0 08                         BNE +
0C254 20 25 C2                          JSR sub_GetRandomNumber
0C257 29 07                             AND #$07
0C259 18                                CLC
0C25A 69 60                             ADC #$60
0C25C                               +
0C25C 8D 07 20                      STA PPU_DATA
0C25F 60                            RTS
0C260                           
0C260                           ;; LUTs
0C260                           .include "game/include/tables.asm"
0C260                           
0C260                           ;; Intro screen palette
0C260                           tbl_IntroScreenPalette:
0C260 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C264 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C268 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C26C 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C270                           
0C270 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C274 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C278 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C27C 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C280                           
0C280                           
0C280                           ;; Intro: mapping logo index to chr tile
0C280                           tbl_IntroScreenLogoChr:
0C280 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C288                           
0C288                           
0C288                           ;; Intro screen data
0C288                           tbl_IntroScreenData:
0C288                           
0C288                               ;; Set PPU address $20AC
0C288 60 AC                         .db #$60, #$AC
0C28A                               
0C28A                               ;; Draw
0C28A 02 26 16 0F 20 0F 16 27       .db #$02, #$26, #$16, #$0F, #$20, #$0F, #$16, #$27 ; 1.LEVEL:
0C292                           
0C292                               ;; Set PPU address $20CF
0C292 60 CF                         .db #$60, #$CF
0C294                               
0C294                               ;; Draw
0C294 01 02                         .db #$01, #$02                                     ; 01
0C296                               
0C296                               ;; Set PPU address $2122
0C296 61 22                         .db #$61, #$22
0C298                               
0C298                               ;; Draw
0C298 0E 0F 1D 13 11 18 25          .db #$0E, #$0F, #$1D, #$13, #$11, #$18, #$25       ; DESIGN,
0C29F 1D 19 1F 18 0E 25             .db #$1D, #$19, #$1F, #$18, #$0E, #$25             ; SOUND,
0C2A5 11 1C 0B 1A 12 13 0D 1D       .db #$11, #$1C, #$0B, #$1A, #$12, #$13, #$0D, #$1D ; GRAPHICS
0C2AD 00 0B 18 0E 00                .db #$00, #$0B, #$18, #$0E, #$00                   ; _AND_
0C2B2                               
0C2B2                               ;; Set PPU address $2147
0C2B2 61 47                         .db #$61, #$47
0C2B4                               
0C2B4                               ;; Draw
0C2B4 1A 1C 19 11 1C 0B 17          .db #$1A, #$1C, #$19, #$11, #$1C, #$0B, #$17       ; PROGRAM
0C2BB 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C2BF 19 16 13 20 0F 1C             .db #$19, #$16, #$13, #$20, #$0F, #$1C             ; OLIVER
0C2C5 00 15 13 1C 21 0B             .db #$00, #$15, #$13, #$1C, #$21, #$0B             ; _KIRWA
0C2CB                               
0C2CB                               ;; Set PPU address $218B
0C2CB 61 8B                         .db #$61, #$8B
0C2CD                               
0C2CD                               ;; Draw
0C2CD 28 00 02 0A 09 08             .db #$28, #$00, #$02, #$0A, #$09, #$08             ; C_1987
0C2D3 25 02 0A 09 09                .db #$25, #$02, #$0A, #$09, #$09                   ; ,1988
0C2D8                               
0C2D8                               ;; Set PPU address $21E6
0C2D8 61 E6                         .db #$61, #$E6
0C2DA                               
0C2DA                               ;; Draw
0C2DA 18 0F 1D 00 1A 19 1C 1E       .db #$18, #$0F, #$1D, #$00, #$1A, #$19, #$1C, #$1E ; NES_PORT
0C2E2 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C2E6 15 0F 20 13 18 09 02          .db #$15, #$0F, #$20, #$13, #$18, #$09, #$02       ; KEVIN81
0C2ED                               
0C2ED                               ;; Set PPU address $222D
0C2ED 62 2D                         .db #$62, #$2D
0C2EF                               
0C2EF                               ;; Draw
0C2EF 28 00 03 01 03 04             .db #$28, #$00, #$03, #$01, #$03, #$04             ; C_2023
0C2F5                               
0C2F5                               ;; Set PPU address $2281
0C2F5 62 81                         .db #$62, #$81
0C2F7                               
0C2F7                               ;; Draw the Crillion logo
0C2F7 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C2FB C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C2FF C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C303 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C307                               
0C307 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C30B C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C30F C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C313 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C317                               
0C317 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C31B C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C31F C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C323 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C327                           
0C327 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C32B C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C32F C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C333 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C337                               
0C337 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C33B C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C33F C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C343 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C347                           
0C347 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C34B C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C34F C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C353 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C356                           
0C356                               ;; End of intro
0C356 3F                            .db #$3F
0C357                           
0C357                           ;; test animation table
0C357                           .include "game/test/show_animation_table.asm"0C357                           ;; CHR tile-id's per slide of explosion
0C357                           explosion_slide0:
0C357 00 00 00                      .db #$00, #$00, #$00
0C35A 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C35D 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C360                           
0C360                           explosion_slide1:
0C360 00 00 00                      .db #$00, #$00, #$00
0C363 29 2A 2B                      .db #$29, #$2A, #$2B
0C366 39 3A 3B                      .db #$39, #$3A, #$3B
0C369                           
0C369                           explosion_slide2:
0C369 16 00 00                      .db #$16, #$00, #$00
0C36C 26 27 28                      .db #$26, #$27, #$28
0C36F 36 37 38                      .db #$36, #$37, #$38
0C372                           
0C372                           explosion_slide3:
0C372 00 14 15                      .db #$00, #$14, #$15
0C375 23 24 25                      .db #$23, #$24, #$25
0C378 33 34 35                      .db #$33, #$34, #$35
0C37B                           
0C37B                           explosion_slide4:
0C37B 10 11 12                      .db #$10, #$11, #$12
0C37E 20 21 22                      .db #$20, #$21, #$22
0C381 30 31 32                      .db #$30, #$31, #$32
0C384                           
0C384                           ;; High and low bytes of animation slides
0C384                           explosion_anim_hi:
0C384 C3                            .db >#explosion_slide0
0C385 C3                            .db >#explosion_slide1
0C386 C3                            .db >#explosion_slide2
0C387 C3                            .db >#explosion_slide3
0C388 C3                            .db >#explosion_slide4
0C389 C3                            .db >#explosion_slide4
0C38A C3                            .db >#explosion_slide3
0C38B C3                            .db >#explosion_slide2
0C38C C3                            .db >#explosion_slide1
0C38D C3                            .db >#explosion_slide0
0C38E                           
0C38E                           explosion_anim_lo:
0C38E 57                            .db <#explosion_slide0
0C38F 60                            .db <#explosion_slide1
0C390 69                            .db <#explosion_slide2
0C391 72                            .db <#explosion_slide3
0C392 7B                            .db <#explosion_slide4
0C393 7B                            .db <#explosion_slide4
0C394 72                            .db <#explosion_slide3
0C395 69                            .db <#explosion_slide2
0C396 60                            .db <#explosion_slide1
0C397 57                            .db <#explosion_slide0
0C398                           
0C398                           
0C398                           ;; NMI handler
0C398                           NMI:
0C398                               .include "interrupt/nmi.asm"
0C398                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C398                           ;;
0C398                           ;; include/nmi.asm
0C398                           ;;
0C398                           ;; Non-maskable interrupt script. This script is being executed
0C398                           ;; when vBlank hits.
0C398                           ;;
0C398                           ;;
0C398                           
0C398                               ;; Preserve accumulator through stack
0C398 48                            PHA
0C399                           
0C399                               ;; Should NMI be skipped?
0C399 A5 13                         LDA skip_nmi
0C39B F0 03                         BEQ +
0C39D 4C 31 C4                          JMP +skip_nmi
0C3A0                               +
0C3A0                           
0C3A0                               ;; When in NMI, skip additional NMI requests
0C3A0 A9 01                         LDA #$01
0C3A2 85 13                         STA skip_nmi
0C3A4                           
0C3A4                               ;; Preserve X, Y, and PC through stack
0C3A4 8A                            TXA
0C3A5 48                            PHA
0C3A6 98                            TYA
0C3A7 48                            PHA
0C3A8 08                            PHP
0C3A9                               
0C3A9                               ;; Check forced NMI skip
0C3A9 A5 14                         LDA force_skip_nmi
0C3AB F0 03                         BEQ +
0C3AD 4C 14 C4                          JMP +force_skip_nmi
0C3B0                               +
0C3B0                           
0C3B0                               ;; Update PPU mask
0C3B0                               ;LDA #$00
0C3B0                               ;STA PPU_CTRL
0C3B0 A5 12                         LDA soft_ppu_mask
0C3B2 8D 01 20                      STA PPU_MASK
0C3B5                               
0C3B5                               
0C3B5                               ;; Additional PPU updates go here
0C3B5                               .include "game/test/tile_update_nmi.asm"
0C3B5                           
0C3B5                               ;; Check if ppu_buffer needs updating
0C3B5 A5 28                         LDA ppu_buffer_update
0C3B7 D0 03                         BNE +
0C3B9 4C F9 C3                          JMP +no_ppu_buffer_update
0C3BC                               +
0C3BC                           
0C3BC                               ;; Reset ppu control register, mask and scrolling position
0C3BC A2 00                         LDX #$00
0C3BE 8E 00 20                      STX PPU_CTRL
0C3C1 8E 01 20                      STX PPU_MASK
0C3C4                           
0C3C4                               ;; Set up loop
0C3C4                               -
0C3C4                                   ;; Reset hi/lo latch
0C3C4 2C 02 20                          BIT PPU_STATUS
0C3C7                           
0C3C7                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0C3C7 BD 00 03                          LDA ppu_buffer,x
0C3CA 8D 06 20                          STA PPU_ADDR
0C3CD E8                                INX
0C3CE BD 00 03                          LDA ppu_buffer,x
0C3D1 8D 06 20                          STA PPU_ADDR
0C3D4                           
0C3D4                                   ;; Write ppu_buffer data to PPU_ADDR
0C3D4 E8                                INX
0C3D5 BD 00 03                          LDA ppu_buffer,x
0C3D8 8D 07 20                          STA PPU_DATA
0C3DB                           
0C3DB                                   ;; Check if updating is done (eg. X is at pointer)
0C3DB E8                                INX
0C3DC E4 29                             CPX ppu_buffer_pointer
0C3DE F0 03                             BEQ +
0C3E0 4C C4 C3                      JMP -
0C3E3                           +
0C3E3                           
0C3E3                               ;; Reset ppu buffer update and pointer
0C3E3 A9 00                         LDA #$00
0C3E5 85 28                         STA ppu_buffer_update
0C3E7 85 29                         STA ppu_buffer_pointer
0C3E9                               
0C3E9                               ;; Reset scrolling position
0C3E9 8D 05 20                      STA PPU_SCROLL
0C3EC 8D 05 20                      STA PPU_SCROLL
0C3EF                           
0C3EF                               ;; Restore ppu control register and mask
0C3EF A9 90                         LDA #%10010000
0C3F1 8D 00 20                      STA PPU_CTRL
0C3F4 A5 12                         LDA soft_ppu_mask
0C3F6 8D 01 20                      STA PPU_MASK
0C3F9                           
0C3F9                           ;; Continue other NMI stuff
0C3F9                           +no_ppu_buffer_update:
0C3F9                               .include "game/test/show_animation_nmi.asm"
0C3F9                               ;; Reset sprite RAM, draw sprites
0C3F9 8D 03 20                      STA OAM_ADDR
0C3FC A9 02                         LDA #$02
0C3FE 8D 14 40                      STA OAM_DMA
0C401                           
0C401 A0 04                         LDY #MAX_ANIMATIONS
0C403 A2 00                         LDX #$00
0C405                               -
0C405 BD 30 03                          LDA explosion_framecounter,x
0C408 F0 03                             BEQ +
0C40A DE 30 03                              DEC explosion_framecounter,x
0C40D                                   +
0C40D E8                                INX
0C40E 88                                DEY
0C40F F0 03                             BEQ +done        
0C411 4C 05 C4                      JMP -
0C414                           +done:
0C414                           
0C414                           ;; This is what happens when we forced nmi skip
0C414                           +force_skip_nmi:
0C414                           
0C414                               ;; Increase frame counters
0C414 E6 15                         INC frame_counter
0C416 E6 16                         INC frame_counter_60
0C418                               
0C418                               ;; Increase second counter (if 60 frames have passed)
0C418 A5 16                         LDA frame_counter_60
0C41A C9 3C                         CMP #60
0C41C D0 0A                         BNE +
0C41E E6 18                             INC second_counter+1
0C420 D0 02                             BNE ++
0C422 E6 17                                 INC second_counter
0C424                                   ++
0C424 A9 00                             LDA #$00
0C426 85 16                             STA frame_counter_60
0C428                               +
0C428                           
0C428                               ;; Don't skip next NMI request
0C428 A9 00                         LDA #$00
0C42A 85 13                         STA skip_nmi
0C42C                           
0C42C                               ;; Restore X, Y and PC from stack
0C42C 28                            PLP
0C42D 68                            PLA
0C42E A8                            TAY
0C42F 68                            PLA
0C430 AA                            TAX
0C431                           
0C431                           +skip_nmi:
0C431                               ;; Restore accumulator from stack
0C431 68                            PLA
0C432                           
0C432                               ;; Return
0C432 40                            RTI
0C433                           
0C433                           ;; IRQ handler (empty)
0C433                           IRQ:
0C433                               .include "interrupt/irq.asm"
0C433 40                            RTI0C434                           
0C434                           ;; Interrupt vectors
0C434 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 98 C3                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 33 C4                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
