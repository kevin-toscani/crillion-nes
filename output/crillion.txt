                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_SPRITERAM = $0200
                                ADDR_OTHERRAM  = $0300
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Starting address for screen tile RAM
                                ADDR_SCREENTILERAM  = $0400
                                
                                
                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI  = #$02        ; High byte of ball speed
                                BALL_SPEED_LO  = #$30        ; Low byte of ball speed
                                BALL_TILE_CHR  = #$01        ; CHR tile ID
                                BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
                                BALL_LEFT_WGA  = #$FA        ; Left position within game area (#$04 minus #$10)
                                BALL_TOP_WGA   = #$DA        ; Top position within game area (#$04 minus #$30)
                                BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD     = #%00000001
                                KILL_BALL        = #%00000001
                                REVIVE_BALL      = #%11111110
                                NUDGE_BALL_RIGHT = #%00000010
                                NUDGE_BALL_LEFT  = #%11111101
                                BALL_IS_FROZEN   = #%00000100
                                FREEZE_BALL      = #%00000100
                                UNFREEZE_BALL    = #%11111011
                                BALL_MOVES_DOWN  = #%00010000
                                MOVE_BALL_DOWN   = #%00010000
                                MOVE_BALL_UP     = #%11101111
                                
                                
                                ;; Tile flag helpers
                                TILE_IS_SOLID    = #%00000001
                                IS_COLOR_BLOCK   = #%10000000
                                IS_PAINT_BLOCK   = #%00010000
                                IS_DEATH_BLOCK   = #%00100000
                                IS_MOVE_BLOCK    = #%01000000
                                
                                
                                ;; Screen load helpers
                                LOAD_INTRO_SCREEN = #%10000000
                                LOAD_GAME_SCREEN  = #%10000001
                                LOAD_WIN_SCREEN   = #%10000010
                                IS_INTRO_SCREEN   = #%00000000
                                IS_GAME_SCREEN    = #%00000001
                                IS_WIN_SCREEN     = #%00000010
                                CHECK_SCREEN_MODE = #%00000011
                                
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$30
                                BOUND_BOTTOM    = #$C8
                                BOUND_LEFT      = #$10
                                BOUND_RIGHT     = #$E8
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                
                                ;; Max number of nudge frames
                                NUDGE_FRAMES    = #$03
                                
                                
                                ;; Helper constant for when a level is done loading
                                LEVEL_END       = #$FF
                                
                                
                                ;; Character map
                                _SPACE = #$00
                                _0     = #$01
                                _1     = #$02
                                _2     = #$03
                                _3     = #$04
                                _4     = #$05
                                _5     = #$06
                                _6     = #$07
                                _7     = #$08
                                _8     = #$09
                                _9     = #$0A
                                _A     = #$0B
                                _B     = #$0C
                                _C     = #$0D
                                _D     = #$0E
                                _E     = #$0F
                                _F     = #$10
                                _G     = #$11
                                _H     = #$12
                                _I     = #$13
                                _J     = #$14
                                _K     = #$15
                                _L     = #$16
                                _M     = #$17
                                _N     = #$18
                                _O     = #$19
                                _P     = #$1A
                                _Q     = #$1B
                                _R     = #$1C
                                _S     = #$1D
                                _T     = #$1E
                                _U     = #$1F
                                _V     = #$20
                                _W     = #$21
                                _X     = #$22
                                _Y     = #$23
                                _Z     = #$24
                                _COMMA = #$25
                                _DOT   = #$26
                                _COLON = #$27
                                _COPY  = #$28
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                               00036                           .ende
                                
                                ;; Other RAM (must be ENUM'd within)
                                .include "ram/misc.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; ram/misc.asm
                                ;;
                                ;; List of additional, non-zeropage RAM variables. Currently
                                ;; empty, but will hold data like the OAM buffer and other,
                                ;; less-often accessed, global variables.
                                ;;
                                ;;
                                
                                
                                    ;; Game specific RAM variables
                                    .include "game/ram/misc.asm"
                                ;; miscellaneous (non-zeropage) ram variables go here
                                
                                .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
                                
                                
                                .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
                                
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 3F C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 3F C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 2B C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 EE C9                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 EB C9                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 F8 C3                      JSR sub_DisableRendering
0C08A 20 62 C4                      JSR sub_JumpToPointer
0C08D 20 0C C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; CONCEPT SCRIPTS
0C096                               
0C096                               ;; Upon pressing A, an explosion will happen on screen
0C096                               .include "game/test/show_animation.asm"
0C096                               ;; If A button is pressed, initiate explosion
0C096 A5 10                         LDA buttons_pressed
0C098 29 80                         AND #BUTTON_A
0C09A D0 03                         BNE +
0C09C 4C CE C0                          JMP +end
0C09F                               +
0C09F                           
0C09F                               ;; Get most recent slot for explosion
0C09F A6 31                         LDX explosion_pointer
0C0A1                           
0C0A1                               ;; If 0, use max pointer value
0C0A1 D0 02                         BNE +
0C0A3 A2 04                             LDX #MAX_ANIMATIONS
0C0A5                               +
0C0A5                           
0C0A5                               ;; Decrease pointer by one
0C0A5 CA                            DEX
0C0A6 86 31                         STX explosion_pointer
0C0A8                           
0C0A8                               ;; Load explosion data into RAM
0C0A8 A9 00                         LDA #$00
0C0AA 9D 34 03                      STA explosion_currentframe,x
0C0AD A9 04                         LDA #ANIMATION_SPEED
0C0AF 9D 30 03                      STA explosion_framecounter,x
0C0B2 20 1D C3                      JSR sub_GetRandomNumber
0C0B5                               ;AND #%11110000
0C0B5 9D 3C 03                      STA explosion_x,x
0C0B8 20 1D C3                      JSR sub_GetRandomNumber
0C0BB                               ;AND #%11110000
0C0BB 9D 40 03                      STA explosion_y,x
0C0BE 20 1D C3                      JSR sub_GetRandomNumber
0C0C1 29 02                         AND #%00000010
0C0C3 18                            CLC
0C0C4 69 01                         ADC #$01
0C0C6 9D 38 03                      STA explosion_attributes,x
0C0C9 A9 01                         LDA #$01
0C0CB 9D 44 03                      STA explosion_active,x
0C0CE                           
0C0CE                           
0C0CE                           +end:
0C0CE                           
0C0CE                               ;; Set up loop
0C0CE A2 00                         LDX #$00
0C0D0                               -loop_load_animation:
0C0D0                                   ;; Check if current animation is active. If not, goto next
0C0D0 BD 44 03                          LDA explosion_active,x
0C0D3 D0 03                             BNE +
0C0D5 4C 6F C1                              JMP +next
0C0D8                                   +
0C0D8                           
0C0D8                                   ;; Check the explosion framecounter
0C0D8 BD 30 03                          LDA explosion_framecounter,x
0C0DB D0 26                             BNE +
0C0DD                                       ;; Framecounter is 0
0C0DD                                       ;; Reset to animation speed
0C0DD A9 04                                 LDA #ANIMATION_SPEED
0C0DF 9D 30 03                              STA explosion_framecounter,x
0C0E2                           
0C0E2                                       ;; Set next animation frame, and check if we're done yet
0C0E2 FE 34 03                              INC explosion_currentframe,x
0C0E5 BD 34 03                              LDA explosion_currentframe,x
0C0E8 C9 0A                                 CMP #ANIM_SLIDES
0C0EA D0 17                                 BNE +
0C0EC                           
0C0EC                                       ;; If we're done, inactivate current explosion, clean
0C0EC                                       ;; up sprite RAM and go to the next one
0C0EC A9 00                                 LDA #$00
0C0EE 9D 44 03                              STA explosion_active,x
0C0F1                                       
0C0F1 A9 09                                 LDA #SLIDE_SIZE
0C0F3 0A                                    ASL
0C0F4 0A                                    ASL
0C0F5 A8                                    TAY
0C0F6 A9 EF                                 LDA #$EF
0C0F8                                       -
0C0F8 88                                        DEY
0C0F9 99 00 02                                  STA ADDR_SPRITERAM,y
0C0FC C0 00                                     CPY #00
0C0FE D0 F8                                 BNE -
0C100                                       
0C100 4C 6F C1                              JMP +next
0C103                                   +
0C103                           
0C103                                   ;; Load (x,y) position in temp variables
0C103 BD 3C 03                          LDA explosion_x,x
0C106 85 01                             STA temp+1
0C108 85 03                             STA temp+3
0C10A BD 40 03                          LDA explosion_y,x
0C10D 85 02                             STA temp+2
0C10F                           
0C10F                                   ;; Load attribute in temp variable
0C10F BD 38 03                          LDA explosion_attributes,x
0C112 85 04                             STA temp+4
0C114                           
0C114                                   ;; Load current frame into Y-register
0C114 BC 34 03                          LDY explosion_currentframe,x
0C117                           
0C117                                   ;; Load current frame ROM address from table
0C117 B9 D5 C9                          LDA explosion_anim_lo,y
0C11A 85 0C                             STA pointer
0C11C B9 CB C9                          LDA explosion_anim_hi,y
0C11F 85 0D                             STA pointer+1
0C121                           
0C121                                   ;; Save x-register on stack
0C121 8A                                TXA
0C122 48                                PHA
0C123                           
0C123                                   ;; Load sprites into sprite RAM
0C123 A6 32                             LDX sprite_ram_pointer
0C125 A0 00                             LDY #$00
0C127                           
0C127                                   ;; Prepare (x,y) offset for loop
0C127 84 00                             STY temp
0C129                           
0C129                                   -loop_load_sprite:
0C129                                   
0C129                                       ;; Do not draw empty sprites
0C129 B1 0C                                 LDA (pointer),y
0C12B F0 18                                 BEQ +nextSprite
0C12D                                   
0C12D                                           ;; Add y-position to sprite ram buffer
0C12D A5 02                                     LDA temp+2
0C12F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C132 E8                                        INX
0C133                           
0C133                                           ;; Get tile number from frame ROM address, and
0C133                                           ;; add it to sprite ram buffer
0C133 B1 0C                                     LDA (pointer),y
0C135 9D 00 02                                  STA ADDR_SPRITERAM,x
0C138 E8                                        INX
0C139                           
0C139                                           ;; Add attribute data to sprite ram buffer
0C139 A5 04                                     LDA temp+4
0C13B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13E E8                                        INX
0C13F                           
0C13F                                           ;; Add x-position to sprite ram buffer
0C13F A5 03                                     LDA temp+3
0C141 9D 00 02                                  STA ADDR_SPRITERAM,x
0C144 E8                                        INX
0C145                           
0C145                                       +nextSprite:
0C145                           
0C145                                       ;; Check if all sprites are done
0C145 C8                                    INY
0C146 C0 09                                 CPY #SLIDE_SIZE
0C148 F0 21                                 BEQ +done
0C14A                           
0C14A                                       ;; Update x value
0C14A A5 03                                 LDA temp+3
0C14C 18                                    CLC
0C14D 69 08                                 ADC #$08
0C14F 85 03                                 STA temp+3
0C151                           
0C151                                       ;; Update temp for x,y position
0C151 E6 00                                 INC temp
0C153 A5 00                                 LDA temp
0C155 C9 03                                 CMP #SLIDE_WIDTH
0C157 D0 0F                                 BNE +
0C159                                           ;; Row is done; reset x-position
0C159 A5 01                                     LDA temp+1
0C15B 85 03                                     STA temp+3
0C15D                           
0C15D                                           ;; Update y-position
0C15D A5 02                                     LDA temp+2
0C15F 18                                        CLC
0C160 69 08                                     ADC #$08
0C162 85 02                                     STA temp+2
0C164                           
0C164                                           ;; Reset row counter
0C164 A9 00                                     LDA #$00
0C166 85 00                                     STA temp
0C168                                       +
0C168                           
0C168 4C 29 C1                          JMP -loop_load_sprite
0C16B                           
0C16B                               +done:
0C16B 86 32                             STX sprite_ram_pointer
0C16D                           
0C16D                                   ;; Retrieve x-register from stack
0C16D 68                                PLA
0C16E AA                                TAX
0C16F                           
0C16F                               +next:
0C16F                                   ;; Check if all animations have been updated
0C16F E8                                INX
0C170 E0 04                             CPX #MAX_ANIMATIONS
0C172 F0 03                             BEQ +done
0C174                           
0C174 4C D0 C0                      JMP -loop_load_animation
0C177                           +done:
0C177                           
0C177                               ;; Check if we're on the game screen
0C177 A5 2D                         LDA screen_mode
0C179 C9 01                         CMP #IS_GAME_SCREEN
0C17B F0 03                         BEQ +
0C17D 4C FA C2                          JMP ++
0C180                               +
0C180                           
0C180                               ;; We're on the game screen
0C180                               ;; Move the ball
0C180                               .include "game/test/move_ball.asm"
0C180                           
0C180                               ;; check if position should be updated (ie. has nmi happened yet)
0C180 A5 2B                         LDA ball_update_position
0C182 F0 03                         BEQ +
0C184 4C 44 C2                          JMP +skipBallMovement
0C187                               +
0C187                           
0C187                               ;; Check if ball goes up or down
0C187 A5 2C                         LDA ball_flags
0C189 29 10                         AND #BALL_MOVES_DOWN
0C18B F0 24                         BEQ +moveBallUp
0C18D                           
0C18D                           
0C18D                           +moveBallDown:
0C18D                               ;; update the low byte
0C18D A5 1A                         LDA ball_ypos_lo
0C18F 18                            CLC
0C190 69 30                         ADC #BALL_SPEED_LO
0C192 85 1A                         STA ball_ypos_lo
0C194                           
0C194                               ;; update the high byte with carry
0C194 A5 19                         LDA ball_ypos_hi
0C196 69 02                         ADC #BALL_SPEED_HI
0C198 85 19                         STA ball_ypos_hi
0C19A                               
0C19A                               ;; Check bottom bound
0C19A C9 C8                         CMP #BOUND_BOTTOM
0C19C 90 32                         BCC +checkHorizontalMovement
0C19E F0 30                         BEQ +checkHorizontalMovement
0C1A0                           
0C1A0                           
0C1A0                               ;; Change ball direction to "up"
0C1A0 A9 C8                         LDA #BOUND_BOTTOM
0C1A2 85 19                         STA ball_ypos_hi
0C1A4 A9 00                         LDA #$00
0C1A6 85 1A                         STA ball_ypos_lo
0C1A8 A5 2C                         LDA ball_flags
0C1AA 29 EF                         AND #MOVE_BALL_UP
0C1AC 85 2C                         STA ball_flags
0C1AE 4C D0 C1                      JMP +checkHorizontalMovement
0C1B1                           
0C1B1                           
0C1B1                           +moveBallUp:
0C1B1                               ;; update the low byte
0C1B1 A5 1A                         LDA ball_ypos_lo
0C1B3 38                            SEC
0C1B4 E9 30                         SBC #BALL_SPEED_LO
0C1B6 85 1A                         STA ball_ypos_lo
0C1B8                           
0C1B8                               ;; update the high byte with carry
0C1B8 A5 19                         LDA ball_ypos_hi
0C1BA E9 02                         SBC #BALL_SPEED_HI
0C1BC 85 19                         STA ball_ypos_hi
0C1BE                               
0C1BE                               ;; Check top bound
0C1BE C9 30                         CMP #BOUND_TOP
0C1C0 B0 0E                         BCS +checkHorizontalMovement
0C1C2                           
0C1C2                               ;; Change ball direction to "down"
0C1C2 A9 30                         LDA #BOUND_TOP
0C1C4 85 19                         STA ball_ypos_hi
0C1C6 A9 00                         LDA #$00
0C1C8 85 1A                         STA ball_ypos_lo
0C1CA A5 2C                         LDA ball_flags
0C1CC 09 10                         ORA #MOVE_BALL_DOWN
0C1CE 85 2C                         STA ball_flags
0C1D0                           
0C1D0                           
0C1D0                           +checkHorizontalMovement:
0C1D0                           
0C1D0                               ;; Check if ball is being nudged
0C1D0 A5 33                         LDA nudge_counter
0C1D2 D0 47                         BNE +doneBallMovement
0C1D4                           
0C1D4                               ;; Check if left button is held
0C1D4 A5 0F                         LDA buttons_held
0C1D6 29 02                         AND #BUTTON_LEFT
0C1D8 F0 1E                         BEQ +
0C1DA                                   ;; update the low byte
0C1DA A5 18                             LDA ball_xpos_lo
0C1DC 38                                SEC
0C1DD E9 30                             SBC #BALL_SPEED_LO
0C1DF 85 18                             STA ball_xpos_lo
0C1E1                           
0C1E1                                   ;; update the high byte
0C1E1 A5 17                             LDA ball_xpos_hi
0C1E3 E9 02                             SBC #BALL_SPEED_HI
0C1E5 85 17                             STA ball_xpos_hi
0C1E7                                   
0C1E7                                   ;; Check left bound
0C1E7 C9 10                             CMP #BOUND_LEFT
0C1E9 B0 30                             BCS +doneBallMovement
0C1EB                                   
0C1EB                                   ;; Set flag to nudge right
0C1EB A5 2C                             LDA ball_flags
0C1ED 09 02                             ORA #NUDGE_BALL_RIGHT
0C1EF 85 2C                             STA ball_flags
0C1F1                                   
0C1F1                                   ;; Set nudge timer
0C1F1 A9 03                             LDA #NUDGE_FRAMES
0C1F3 85 33                             STA nudge_counter
0C1F5                                   
0C1F5                           
0C1F5 4C 1B C2                          JMP +doneBallMovement        
0C1F8                               +
0C1F8                           
0C1F8                               ;; Check if right button is held
0C1F8 A5 0F                         LDA buttons_held
0C1FA 29 01                         AND #BUTTON_RIGHT
0C1FC F0 1D                         BEQ +
0C1FE                                   ;; update the low byte
0C1FE A5 18                             LDA ball_xpos_lo
0C200 18                                CLC
0C201 69 30                             ADC #BALL_SPEED_LO
0C203 85 18                             STA ball_xpos_lo
0C205                           
0C205                                   ;; update the high byte
0C205 A5 17                             LDA ball_xpos_hi
0C207 69 02                             ADC #BALL_SPEED_HI
0C209 85 17                             STA ball_xpos_hi     
0C20B                           
0C20B                                  ;; Check right bound
0C20B C9 E8                             CMP #BOUND_RIGHT
0C20D 90 0C                             BCC +doneBallMovement
0C20F F0 0A                             BEQ +doneBallMovement
0C211                                   
0C211                                   ;; Set flag to nudge right
0C211 A5 2C                             LDA ball_flags
0C213 29 FD                             AND #NUDGE_BALL_LEFT
0C215 85 2C                             STA ball_flags
0C217                                   
0C217                                   ;; Set nudge timer
0C217 A9 03                             LDA #NUDGE_FRAMES
0C219 85 33                             STA nudge_counter
0C21B                               +
0C21B                           
0C21B                           
0C21B                           +doneBallMovement:
0C21B                           
0C21B                               ;; Check nudge
0C21B A5 33                         LDA nudge_counter
0C21D F0 23                         BEQ +doneBallNudging
0C21F A5 2C                             LDA ball_flags
0C221 29 02                             AND #NUDGE_BALL_RIGHT
0C223 F0 10                             BEQ +nudgeBallLeft
0C225                                   
0C225                                       ;; update the low byte
0C225 A5 18                                 LDA ball_xpos_lo
0C227 18                                    CLC
0C228 69 30                                 ADC #BALL_SPEED_LO
0C22A 85 18                                 STA ball_xpos_lo
0C22C                           
0C22C                                       ;; update the high byte
0C22C A5 17                                 LDA ball_xpos_hi
0C22E 69 02                                 ADC #BALL_SPEED_HI
0C230 85 17                                 STA ball_xpos_hi  
0C232 4C 42 C2                              JMP +doneBallNudging
0C235                                   +nudgeBallLeft:
0C235                                   
0C235                                   ;; update the low byte
0C235 A5 18                             LDA ball_xpos_lo
0C237 38                                SEC
0C238 E9 30                             SBC #BALL_SPEED_LO
0C23A 85 18                             STA ball_xpos_lo
0C23C                           
0C23C                                   ;; update the high byte
0C23C A5 17                             LDA ball_xpos_hi
0C23E E9 02                             SBC #BALL_SPEED_HI
0C240 85 17                             STA ball_xpos_hi
0C242                               +doneBallNudging:
0C242                           
0C242                               ;; Don't update position again until next frame
0C242 E6 2B                         INC ball_update_position
0C244                           
0C244                           
0C244                           
0C244                           +skipBallMovement:
0C244                               ;; Add to sprite buffer
0C244 A6 32                         LDX sprite_ram_pointer
0C246 A5 19                         LDA ball_ypos_hi
0C248 9D 00 02                      STA ADDR_SPRITERAM,x
0C24B E8                            INX
0C24C A9 01                         LDA #BALL_TILE_CHR
0C24E 9D 00 02                      STA ADDR_SPRITERAM,x
0C251 E8                            INX
0C252 A9 00                         LDA #BALL_ATTR
0C254 9D 00 02                      STA ADDR_SPRITERAM,x
0C257 E8                            INX
0C258 A5 17                         LDA ball_xpos_hi
0C25A 9D 00 02                      STA ADDR_SPRITERAM,x
0C25D E8                            INX
0C25E 86 32                         STX sprite_ram_pointer
0C260                           
0C260                               
0C260                               ;; Test collision detection
0C260                               .include "game/test/collision_detection.asm"
0C260                           
0C260                               ;; Get ball's x-left, x-center, x-right position
0C260 A5 17                         LDA ball_xpos_hi
0C262 18                            CLC
0C263 69 FA                         ADC #BALL_LEFT_WGA
0C265 85 25                         STA ball_left
0C267 18                            CLC
0C268 69 04                         ADC #BALL_HALF_SIZE
0C26A 85 26                         STA ball_center
0C26C 18                            CLC
0C26D 69 04                         ADC #BALL_HALF_SIZE
0C26F 85 27                         STA ball_right
0C271                           
0C271                               ;; Get ball's y-top, y-middle, y-bottom position
0C271 A5 19                         LDA ball_ypos_hi
0C273 18                            CLC
0C274 69 DA                         ADC #BALL_TOP_WGA
0C276 85 28                         STA ball_top
0C278 18                            CLC
0C279 69 04                         ADC #BALL_HALF_SIZE
0C27B 85 29                         STA ball_middle
0C27D 18                            CLC
0C27E 69 04                         ADC #BALL_HALF_SIZE
0C280 85 2A                         STA ball_bottom
0C282                           
0C282                           +checkRightCollision:
0C282                               ;; Check if ball moves right
0C282                               ;; No need to check nudging here as that will never collide with a tile
0C282 A5 0F                         LDA buttons_held
0C284 29 01                         AND #BUTTON_RIGHT
0C286 F0 1B                         BEQ +checkLeftCollision
0C288                           
0C288                               ;; Check tile at right position
0C288 A5 29                         LDA ball_middle
0C28A 85 00                         STA temp
0C28C A5 27                         LDA ball_right
0C28E 85 01                         STA temp+1
0C290 20 E2 C3                      JSR sub_ConvertXYToTileType
0C293 29 01                         AND #TILE_IS_SOLID
0C295 F0 2A                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C297                           
0C297                               ;; Tile is solid; nudge ball and evaluate tile type
0C297 A5 2C                         LDA ball_flags
0C299 09 FD                         ORA #NUDGE_BALL_LEFT
0C29B 85 2C                         STA ball_flags
0C29D 20 39 C4                      JSR sub_EvaluateTileType
0C2A0 4C C1 C2                      JMP +checkTopCollision
0C2A3                           
0C2A3                           +checkLeftCollision:
0C2A3                               ;; Check if ball moves right
0C2A3                               ;; No need to check nudging here as that will never collide with a tile
0C2A3 A5 0F                         LDA buttons_held
0C2A5 29 02                         AND #BUTTON_LEFT
0C2A7 F0 18                         BEQ +checkTopCollision
0C2A9                           
0C2A9                               ;; Check tile at right position
0C2A9 A5 29                         LDA ball_middle
0C2AB 85 00                         STA temp
0C2AD A5 25                         LDA ball_left
0C2AF 85 01                         STA temp+1
0C2B1 20 E2 C3                      JSR sub_ConvertXYToTileType
0C2B4 29 01                         AND #TILE_IS_SOLID
0C2B6 F0 09                         BEQ +checkTopCollision
0C2B8                           
0C2B8                               ;; Tile is solid; nudge ball and evaluate tile type
0C2B8 A5 2C                         LDA ball_flags
0C2BA 29 FD                         AND #NUDGE_BALL_LEFT
0C2BC 85 2C                         STA ball_flags
0C2BE 20 39 C4                      JSR sub_EvaluateTileType
0C2C1                               ;JMP +checkTopCollision
0C2C1                           
0C2C1                           +checkTopCollision:
0C2C1                               ;; Check if ball moves up
0C2C1 A5 2C                         LDA ball_flags
0C2C3 29 10                         AND #BALL_MOVES_DOWN
0C2C5 D0 1B                         BNE +checkBottomCollision
0C2C7                           
0C2C7                               ;; Check tile at top position
0C2C7 A5 28                         LDA ball_top
0C2C9 85 00                         STA temp
0C2CB A5 26                         LDA ball_center
0C2CD 85 01                         STA temp+1
0C2CF 20 E2 C3                      JSR sub_ConvertXYToTileType
0C2D2 29 01                         AND #TILE_IS_SOLID
0C2D4 F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C2D6                           
0C2D6                               ;; Tile is solid; move ball down and evaluate tile type
0C2D6 A5 2C                         LDA ball_flags
0C2D8 09 10                         ORA #MOVE_BALL_DOWN
0C2DA 85 2C                         STA ball_flags
0C2DC 20 39 C4                      JSR sub_EvaluateTileType
0C2DF 4C FA C2                      JMP +doneCheckingCollision
0C2E2                           
0C2E2                           +checkBottomCollision:
0C2E2                               ;; No movement check needed: since ball is not moving up, it must move down
0C2E2                           
0C2E2                               ;; Check tile at bottom position
0C2E2 A5 2A                         LDA ball_bottom
0C2E4 85 00                         STA temp
0C2E6 A5 26                         LDA ball_center
0C2E8 85 01                         STA temp+1
0C2EA 20 E2 C3                      JSR sub_ConvertXYToTileType
0C2ED 29 01                         AND #TILE_IS_SOLID
0C2EF F0 09                         BEQ +doneCheckingCollision
0C2F1                           
0C2F1                               ;; Tile is solid; move ball up and evaluate tile type
0C2F1 A5 2C                         LDA ball_flags
0C2F3 29 EF                         AND #MOVE_BALL_UP
0C2F5 85 2C                         STA ball_flags
0C2F7 20 39 C4                      JSR sub_EvaluateTileType
0C2FA                               ;JMP +doneCheckingCollision
0C2FA                           
0C2FA                           +doneCheckingCollision:
0C2FA                           
0C2FA                           
0C2FA                           
0C2FA                               ++
0C2FA                               
0C2FA                               ;; Upon pressing START, (next level) design will be drawn
0C2FA                               .include "game/test/load_next_level.asm"
0C2FA                               ;; If START button is pressed
0C2FA A5 10                         LDA buttons_pressed
0C2FC 29 10                         AND #BUTTON_START
0C2FE F0 10                         BEQ +continue
0C300                                   ;; Load the next level
0C300 E6 34                             INC current_level
0C302 A5 34                             LDA current_level
0C304 C9 19                             CMP #25
0C306 D0 04                             BNE +
0C308 A9 00                                 LDA #$00
0C30A 85 34                                 STA current_level
0C30C                                   +
0C30C                                   
0C30C A9 81                             LDA #LOAD_GAME_SCREEN
0C30E 85 2D                             STA screen_mode
0C310                           
0C310                               +continue:
0C310                           
0C310                           
0C310                           
0C310                               ;; Sprite clean-up
0C310 A6 32                         LDX sprite_ram_pointer
0C312 A9 EF                         LDA #$EF
0C314                               -
0C314 9D 00 02                          STA ADDR_SPRITERAM,x
0C317 E8                                INX
0C318 D0 FA                         BNE -
0C31A 4C 57 C0                      JMP MainGameLoop
0C31D                           
0C31D                           ;; Subroutines
0C31D                           .include "include/subroutines.asm"
0C31D                           
0C31D                           ;; RNG
0C31D                           .include "subroutine/GetRandomNumber.asm"
0C31D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C31D                           ;;
0C31D                           ;; subroutine/GetRandomNumber.asm
0C31D                           ;;
0C31D                           ;; Simple and fast random number generator by White Flame.
0C31D                           ;;
0C31D                           ;; Set random_seed to an arbitrary number to randomize between
0C31D                           ;; gaming sessions, for instance using the frame counter upon
0C31D                           ;; pressing START on the intro screen.
0C31D                           ;;
0C31D                           ;;     ;; IF START PRESSED:
0C31D                           ;;     LDA frame_counter
0C31D                           ;;     STA random_seed
0C31D                           ;;
0C31D                           ;; Source:
0C31D                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C31D                           ;;
0C31D                           ;;
0C31D                           
0C31D                           sub_GetRandomNumber:
0C31D                               ;; Force EOR if random_seed is zero
0C31D A5 16                         LDA random_seed
0C31F F0 05                         BEQ +doEor
0C321                           
0C321                               ;; Shift left, and EOR if the high bit is set
0C321 0A                            ASL
0C322 F0 04                         BEQ +noEor
0C324 90 02                         BCC +noEor
0C326                           
0C326                           +doEor:
0C326 49 1D                         EOR #$1D
0C328                           
0C328                           +noEor:
0C328 85 16                         STA random_seed
0C32A                           
0C32A 60                            RTS
0C32B                           
0C32B                           
0C32B                           ;; Read controller input
0C32B                           .include "subroutine/ReadController.asm"
0C32B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C32B                           ;;
0C32B                           ;; subroutine/ReadController.asm
0C32B                           ;;
0C32B                           ;; Subroutine that polls the controller and stores the input
0C32B                           ;; buttons in a variable. This version only handles controller
0C32B                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C32B                           ;;
0C32B                           ;;
0C32B                           
0C32B                           sub_ReadController:
0C32B                           
0C32B                               ;; Set strobe bit
0C32B A9 01                         LDA #$01
0C32D 8D 16 40                      STA JOYPAD_1
0C330                           
0C330                               ;; Set up ring counter
0C330 85 0F                         STA buttons_held
0C332                           
0C332                               ;; Clear strobe bit
0C332 4A                            LSR
0C333 8D 16 40                      STA JOYPAD_1
0C336                           
0C336                               ;; Loop through button presses
0C336                               -
0C336 AD 16 40                          LDA JOYPAD_1
0C339 4A                                LSR
0C33A 26 0F                             ROL buttons_held
0C33C                           
0C33C                               ;; Check if ring counter is done
0C33C 90 F8                         BCC -
0C33E                           
0C33E                               ;; Return from subroutine
0C33E 60                            RTS
0C33F                           
0C33F                           
0C33F                           ;; vBlank wait
0C33F                           .include "subroutine/WaitForVBlank.asm"
0C33F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C33F                           ;;
0C33F                           ;; subroutine/WaitForVBlank.asm
0C33F                           ;;
0C33F                           ;; Subroutine that essentially pauses script execution until
0C33F                           ;; vBlank happens.
0C33F                           ;;
0C33F                           ;;
0C33F                           
0C33F                           sub_WaitForVBlank:
0C33F 2C 02 20                      BIT $2002
0C342 10 FB                         BPL sub_WaitForVBlank
0C344 60                            RTS
0C345                           
0C345                           
0C345                           ;; Game specific subroutines
0C345                           .include "game/include/subroutines.asm"
0C345                           ;; additional game-specific subroutines go here
0C345                           
0C345                           .include "game/subroutine/ClearScreen.asm"
0C345                           ;; Subroutine to clear the screen
0C345                           ;; If it's a game screen, add noise
0C345                           
0C345                           sub_ClearScreen:
0C345                               ;; Check of game screen or not
0C345 A5 2D                         LDA screen_mode
0C347 29 03                         AND #CHECK_SCREEN_MODE
0C349 C9 01                         CMP #IS_GAME_SCREEN
0C34B F0 02                         BEQ +
0C34D A9 00                             LDA #$00
0C34F                               +
0C34F 85 01                         STA temp+1
0C351                               
0C351                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C351 2C 02 20                      BIT PPU_STATUS
0C354 A9 20                         LDA #$20
0C356 8D 06 20                      STA PPU_ADDR
0C359 A9 00                         LDA #$00
0C35B 8D 06 20                      STA PPU_ADDR
0C35E                               
0C35E                               ;; Set up tile to draw and loop
0C35E 85 00                         STA temp
0C360 AA                            TAX
0C361 A8                            TAY
0C362                           
0C362                               -     
0C362                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C362 A5 00                             LDA temp
0C364 8D 07 20                          STA PPU_DATA
0C367                           
0C367                                   ;; Check if we should draw noise next. Noise is drawn if:
0C367                                   ;; - Screen mode is game screen
0C367                                   ;; - Y between #$06 and #$19 (inclusive)
0C367                                   ;; - X between #$02 and #$1D (inclusive)
0C367                                   
0C367                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C367 A5 01                             LDA temp+1
0C369 F0 1C                             BEQ +nextTileInRow
0C36B                                   
0C36B                                   ;; If Y < $6, skip the check
0C36B C0 06                             CPY #$06
0C36D 90 18                             BCC +nextTileInRow
0C36F                                   
0C36F                                   ;; If X < $1, skip the check
0C36F E0 01                             CPX #$01
0C371 90 14                             BCC +nextTileInRow
0C373                                   
0C373                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C373 E0 1D                             CPX #$1D
0C375 D0 04                             BNE +
0C377 A9 00                                 LDA #$00
0C379 85 00                                 STA temp
0C37B                                   +
0C37B B0 0A                             BCS +nextTileInRow
0C37D                                   
0C37D                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C37D 20 1D C3                          JSR sub_GetRandomNumber
0C380 29 07                             AND #%00000111
0C382 18                                CLC
0C383 69 68                             ADC #$68
0C385 85 00                             STA temp
0C387                           
0C387                           +nextTileInRow:
0C387                                   
0C387                                   ;; Check if a row has been done. If not, draw the next
0C387 E8                                INX
0C388 E0 20                             CPX #$20
0C38A D0 D6                             BNE -
0C38C                                   
0C38C                                   ;; Go to the next row (if any left)
0C38C A2 00                             LDX #00
0C38E C8                                INY
0C38F                                   
0C38F                                   ;; If Y is 1A, skip noise tile check until done drawing
0C38F C0 1A                             CPY #$1A
0C391 D0 04                             BNE +
0C393 A9 00                                 LDA #$00
0C395 85 01                                 STA temp+1
0C397                                   +
0C397                                   
0C397 C0 1E                             CPY #$1E
0C399 D0 C7                         BNE -
0C39B                           
0C39B                               ;; Clear attribute table
0C39B A9 23                         LDA #$23
0C39D 8D 06 20                      STA PPU_ADDR
0C3A0 A9 C0                         LDA #$C0
0C3A2 8D 06 20                      STA PPU_ADDR
0C3A5 A9 00                         LDA #$00
0C3A7 A2 40                         LDX #$40
0C3A9                               -
0C3A9 8D 07 20                          STA PPU_DATA
0C3AC CA                                DEX
0C3AD D0 FA                         BNE -
0C3AF                               
0C3AF 60                            RTS0C3B0                           .include "game/subroutine/ColorizeBall.asm"
0C3B0                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3B0                           ;;
0C3B0                           ;;  Subroutine: ColorizeBall
0C3B0                           ;;
0C3B0                           ;;  Applies the color set through ball_flags to the ball sprite.
0C3B0                           ;;
0C3B0                           ;;
0C3B0                           
0C3B0                           
0C3B0                           sub_ColorizeBall:
0C3B0                           
0C3B0                               ;; Get color from ball_flags
0C3B0 4A                            LSR
0C3B1 4A                            LSR
0C3B2 4A                            LSR
0C3B3 4A                            LSR
0C3B4 4A                            LSR
0C3B5 AA                            TAX
0C3B6                           
0C3B6                               ;; Add new light color of ball to PPU palette
0C3B6 A9 3F                         LDA #$3F
0C3B8 85 00                         STA temp
0C3BA A9 11                         LDA #$11
0C3BC 85 01                         STA temp+1
0C3BE BD E5 C9                      LDA tbl_BallColorLight,x
0C3C1 85 02                         STA temp+2
0C3C3 20 81 C8                      JSR sub_WriteByteToPPUBuffer
0C3C6                               
0C3C6                               ;; Add new dark color of ball to PPU palette
0C3C6 E6 01                         INC temp+1
0C3C8 BD DF C9                      LDA tbl_BallColorDark,x
0C3CB 85 02                         STA temp+2
0C3CD 20 81 C8                      JSR sub_WriteByteToPPUBuffer
0C3D0                               
0C3D0 60                            RTS
0C3D1                           
0C3D1                           .include "game/subroutine/ColorsMatch.asm"
0C3D1                           
0C3D1                           ;; Subroutine to check if ball color matches colliding tile color
0C3D1                           
0C3D1                           sub_ColorsMatch:
0C3D1                               ;; Save tile color in temp variable
0C3D1 A5 35                         LDA colliding_tile
0C3D3 29 0E                         AND #%00001110
0C3D5 85 00                         STA temp
0C3D7                           
0C3D7                               ;; Get ball color
0C3D7 A5 2C                         LDA ball_flags
0C3D9 29 E0                         AND #%11100000
0C3DB 4A                            LSR
0C3DC 4A                            LSR
0C3DD 4A                            LSR
0C3DE 4A                            LSR
0C3DF                           
0C3DF                               ;; Compare with tile color
0C3DF C5 00                         CMP temp
0C3E1 60                            RTS
0C3E2                           
0C3E2                           .include "game/subroutine/ConvertXYToTileType.asm"
0C3E2                           
0C3E2                           ;; Subroutine to convert the ball's position to a tile type
0C3E2                           ;; - Expects temp to be y-position of ball within game area
0C3E2                           ;; - Expects temp+1 to be x-position of ball within game area
0C3E2                           ;; - Puts result in accumulator and zp variable
0C3E2                           ;; - Corrupts X-register
0C3E2                           
0C3E2                           sub_ConvertXYToTileType:
0C3E2 A5 00                         LDA temp
0C3E4 4A                            LSR
0C3E5 4A                            LSR
0C3E6 4A                            LSR
0C3E7 4A                            LSR
0C3E8 85 00                         STA temp
0C3EA A5 01                         LDA temp+1
0C3EC 29 F0                         AND #%11110000
0C3EE 18                            CLC
0C3EF 65 00                         ADC temp
0C3F1 AA                            TAX
0C3F2 BD 00 04                      LDA ADDR_SCREENTILERAM, x
0C3F5 85 35                         STA colliding_tile
0C3F7 60                            RTS
0C3F8                           
0C3F8                           .include "game/subroutine/DisableEnableRendering.asm"
0C3F8                           sub_DisableRendering:
0C3F8                               ;; Force NMI skip, disable rendering
0C3F8 A9 01                     	LDA #$01
0C3FA 85 14                     	STA force_skip_nmi
0C3FC 20 3F C3                      JSR sub_WaitForVBlank
0C3FF A5 12                         LDA soft_ppu_mask
0C401 29 E7                         AND #%11100111
0C403 8D 01 20                      STA PPU_MASK
0C406 85 12                         STA soft_ppu_mask
0C408 20 3F C3                      JSR sub_WaitForVBlank
0C40B 60                            RTS
0C40C                           
0C40C                           sub_EnableRendering:
0C40C                               ;; Enable rendering
0C40C A9 00                     	LDA #$00
0C40E 8D 05 20                  	STA PPU_SCROLL
0C411 8D 05 20                  	STA PPU_SCROLL
0C414 20 3F C3                      JSR sub_WaitForVBlank
0C417 85 14                     	STA force_skip_nmi
0C419 A5 12                         LDA soft_ppu_mask
0C41B 09 18                         ORA #%00011000
0C41D 85 12                         STA soft_ppu_mask
0C41F 8D 01 20                      STA PPU_MASK
0C422 20 3F C3                      JSR sub_WaitForVBlank
0C425 60                            RTS
0C426                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C426                           sub_drawIntroScreenLogoTile:
0C426 B9 C7 C8                      LDA tbl_IntroScreenLogoChr,y
0C429 C9 60                         CMP #$60
0C42B D0 08                         BNE +
0C42D 20 1D C3                          JSR sub_GetRandomNumber
0C430 29 07                             AND #$07
0C432 18                                CLC
0C433 69 60                             ADC #$60
0C435                               +
0C435 8D 07 20                      STA PPU_DATA
0C438 60                            RTS
0C439                           .include "game/subroutine/EvaluateTileType.asm"
0C439                           
0C439                           ;; Subroutine to evaluate the colliding tile type and take its
0C439                           ;; corresponding action (move block, kill player, ...)
0C439                           ;; - Expects X-register to be the ADDR_SCREENTILERAM offset
0C439                           ;; - Uses zp variable colliding_tile
0C439                           
0C439                           sub_EvaluateTileType:
0C439                           
0C439                               ;; Check if collided tile is a color block
0C439 A5 35                         LDA colliding_tile
0C43B 29 80                         AND #IS_COLOR_BLOCK
0C43D F0 07                         BEQ +checkIfPaintBlock
0C43F                                   ;; It's a color block. Check if the colors match
0C43F 20 D1 C3                          JSR sub_ColorsMatch
0C442 F0 01                             BEQ +
0C444                                       ;; Colors don't match - return
0C444 60                                    RTS
0C445                                   +
0C445                           
0C445                                   ;; Colors match. Destroy color block
0C445                                   ;; - Add the tiles that need updating to ppu buffer
0C445                                   ;; - Load destruction animation on tile
0C445                                   ;; - Write #$00 in tile type ram (makes not-solid)
0C445                                   ;; - Update attribute table accordingly through ppu buffer
0C445                                   ;; - If there are no color blocks left:
0C445                                   ;;   - Freeze ball
0C445                                   ;;   - Initiate level-win state
0C445                                   ;; (@TODO)
0C445 60                                RTS
0C446                               +checkIfPaintBlock:
0C446                               
0C446                               ;; Check if collided tile is a paint block
0C446 A5 35                         LDA colliding_tile
0C448 29 10                         AND #IS_PAINT_BLOCK
0C44A F0 01                         BEQ +checkIfDeathBlock
0C44C                                   ;; It's a paint block. Update ball color (@TODO)
0C44C                           
0C44C                           ;        ;; Save x-register
0C44C                           ;        TXA
0C44C                           ;        PHA
0C44C                           ;
0C44C                           ;        ;; Get tile color
0C44C                           ;        LDA colliding_tile
0C44C                           ;        AND #%00001110
0C44C                           ;        ASL
0C44C                           ;        ASL
0C44C                           ;        ASL
0C44C                           ;        ASL
0C44C                           ;        STA temp
0C44C                           ;
0C44C                           ;        ;; Apply tile color to ball
0C44C                           ;        LDA ball_flags
0C44C                           ;        AND #%00011111
0C44C                           ;        ORA temp
0C44C                           ;        STA ball_flags
0C44C                           ;        JSR sub_ColorizeBall
0C44C                           ;
0C44C                           ;        ;; Restore x-register
0C44C                           ;        PLA
0C44C                           ;        TAX
0C44C                           
0C44C                                   ;; Return
0C44C 60                                RTS
0C44D                               +checkIfDeathBlock:
0C44D                           
0C44D                               ;; Check if collided tile is a death block
0C44D A5 35                         LDA colliding_tile
0C44F 29 20                         AND #IS_DEATH_BLOCK
0C451 F0 01                         BEQ +checkIfMoveBlock
0C453                                   ;; It is a death block. Kill player and return (@TODO)
0C453                           ;        LDA ball_flags
0C453                           ;        ORA #%00000101
0C453                           ;        STA ball_flags
0C453 60                                RTS
0C454                               +checkIfMoveBlock:
0C454                           
0C454                               ;; Check if collided tile is a move block
0C454 A5 35                         LDA colliding_tile
0C456 29 40                         AND #IS_MOVE_BLOCK
0C458 F0 07                         BEQ +done
0C45A                                   ;; It is a move block. Check if colors match
0C45A 20 D1 C3                          JSR sub_ColorsMatch
0C45D F0 01                             BEQ +
0C45F                                       ;; Colors don't match - return
0C45F 60                                    RTS
0C460                                   +
0C460                           
0C460                                   ;; Colors match.
0C460                                   ;; - Check if next tile is a solid
0C460                                   ;; - If not, move the tile:
0C460                                   ;;   - Add the tiles that need updating to ppu buffer
0C460                                   ;;   - Add move tile sprite over the original tile
0C460                                   ;;   - Initiate moving the sprite that way for 16px
0C460                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C460                                   ;;   - Update attribute table accordingly through ppu buffer
0C460                                   ;; - After moving the sprite, in a different routine:
0C460                                   ;;   - Add move tile data on the new tile location
0C460                                   ;;   - Write the original tile type data on new position in ram
0C460                                   ;;   - Destroy sprite
0C460                                   ;;   - Update attribute table accordingly through ppu buffer
0C460                                   ;; (@TODO)
0C460 60                                RTS
0C461                               +done:
0C461                           
0C461                               ;; Return
0C461 60                            RTS
0C462                           
0C462                           .include "game/subroutine/JumpToPointer.asm"
0C462                           sub_JumpToPointer:
0C462 6C 0C 00                      JMP (pointer)
0C465                               ;RTS must be handled by the routine (pointer) jumps to
0C465                           .include "game/subroutine/LoadGameScreen.asm"
0C465                           sub_LoadGameScreen:
0C465                           
0C465                               ;; Clear the screen
0C465 20 45 C3                      JSR sub_ClearScreen
0C468                               
0C468                               ;; Clear collision and attribute data
0C468 A2 00                         LDX #$00
0C46A 8A                            TXA
0C46B                               -
0C46B 9D 00 04                          STA tile_type,x
0C46E E8                                INX
0C46F D0 FA                         BNE -
0C471                               
0C471                               ;; Get pointer from current level
0C471 A6 34                         LDX current_level
0C473 BD E9 D0                      LDA tbl_lvl_layout_lo,x
0C476 85 0C                         STA pointer
0C478 BD D0 D0                      LDA tbl_lvl_layout_hi,x
0C47B 85 0D                         STA pointer+1
0C47D                           
0C47D                               ;; Set up the loop
0C47D A0 00                         LDY #$00
0C47F                           -drawRowColumnLoop:
0C47F                           
0C47F                               ;; Load (x,y) of current set of tiles
0C47F B1 0C                         LDA (pointer),y
0C481                           
0C481                               ;; Check if level is done; if so, skip the loop
0C481 C9 FF                         CMP #LEVEL_END
0C483 D0 03                         BNE +
0C485 4C CE C5                          JMP +doneLevelLoad
0C488                               +
0C488                           
0C488                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C488 85 00                         STA temp
0C48A C8                            INY
0C48B B1 0C                         LDA (pointer),y
0C48D 85 01                         STA temp+1
0C48F                               
0C48F                               ;; Convert (x,y) to PPU address
0C48F                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C48F A5 00                         LDA temp
0C491 29 0F                         AND #%00001111
0C493 4A                            LSR
0C494 4A                            LSR
0C495 09 20                         ORA #$20
0C497 85 02                         STA temp+2
0C499                               
0C499                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C499 A5 00                         LDA temp
0C49B 29 F0                         AND #%11110000
0C49D 4A                            LSR
0C49E 4A                            LSR
0C49F 4A                            LSR
0C4A0 85 03                         STA temp+3
0C4A2                               
0C4A2 A5 00                         LDA temp
0C4A4 29 03                         AND #%00000011
0C4A6 AA                            TAX
0C4A7 BD 34 D1                      LDA tbl_Times64,x
0C4AA 18                            CLC
0C4AB 65 03                         ADC temp+3
0C4AD 18                            CLC
0C4AE 69 C2                         ADC #$C2
0C4B0 85 03                         STA temp+3
0C4B2                               
0C4B2                               ;; Add carry to temp+2
0C4B2 A5 02                         LDA temp+2
0C4B4 69 00                         ADC #$00
0C4B6 85 02                         STA temp+2
0C4B8                           
0C4B8                               ;; Convert tile data to loop count and tile type
0C4B8                               ;; temp+4 = color
0C4B8 A5 01                         LDA temp+1
0C4BA 29 07                         AND #%00000111
0C4BC 85 04                         STA temp+4
0C4BE                               
0C4BE                               ;; If color = 7, this is a wall
0C4BE C9 07                         CMP #%00000111
0C4C0 F0 12                         BEQ +wallHack
0C4C2                                   
0C4C2                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C4C2 29 01                             AND #%00000001
0C4C4 F0 02                             BEQ +
0C4C6 A9 05                                 LDA #$05
0C4C8                                   +
0C4C8 85 07                             STA temp+7
0C4CA                                
0C4CA                                   ;; temp+5 = tile type
0C4CA A5 01                             LDA temp+1
0C4CC 4A                                LSR
0C4CD 4A                                LSR
0C4CE 4A                                LSR
0C4CF 29 03                             AND #%00000011
0C4D1 4C DA C4                          JMP +setTileType
0C4D4                               +wallHack:
0C4D4                               
0C4D4                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C4D4 A9 00                         LDA #$00
0C4D6 85 07                         STA temp+7
0C4D8 A9 04                         LDA #$04
0C4DA                           
0C4DA                           +setTileType:    
0C4DA 85 05                         STA temp+5
0C4DC                               
0C4DC                               ;; X = tile offset
0C4DC 18                            CLC
0C4DD 65 07                         ADC temp+7
0C4DF AA                            TAX
0C4E0                               
0C4E0                               ;; temp+6 = number of tiles
0C4E0 A5 01                         LDA temp+1
0C4E2 29 60                         AND #%01100000
0C4E4 4A                            LSR
0C4E5 4A                            LSR
0C4E6 4A                            LSR
0C4E7 4A                            LSR
0C4E8 4A                            LSR
0C4E9 85 06                         STA temp+6
0C4EB                               
0C4EB                               ;; Translate (x,y) to (y,x) for tile RAM
0C4EB A5 00                         LDA temp
0C4ED 0A                            ASL
0C4EE 0A                            ASL
0C4EF 0A                            ASL
0C4F0 0A                            ASL
0C4F1 85 08                         STA temp+8
0C4F3 A5 00                         LDA temp
0C4F5 4A                            LSR
0C4F6 4A                            LSR
0C4F7 4A                            LSR
0C4F8 4A                            LSR
0C4F9 05 08                         ORA temp+8
0C4FB 85 00                         STA temp
0C4FD                               
0C4FD                               ;; Set up loop
0C4FD 98                            TYA
0C4FE 48                            PHA
0C4FF A4 06                         LDY temp+6
0C501                           
0C501                               -drawTileLoop:
0C501                                   ;; Write PPU address
0C501 2C 02 20                          BIT PPU_STATUS
0C504 A5 02                             LDA temp+2
0C506 8D 06 20                          STA PPU_ADDR
0C509 A5 03                             LDA temp+3
0C50B 8D 06 20                          STA PPU_ADDR
0C50E                                   
0C50E                                   ;; Write first and second tile
0C50E BD 38 D1                          LDA tbl_GametileTopLeft,x
0C511 8D 07 20                          STA PPU_DATA
0C514 BD 42 D1                          LDA tbl_GametileTopRight,x
0C517 8D 07 20                          STA PPU_DATA
0C51A                                   
0C51A                                   ;; Update PPU address
0C51A 2C 02 20                          BIT PPU_STATUS
0C51D A5 02                             LDA temp+2
0C51F 8D 06 20                          STA PPU_ADDR
0C522 A5 03                             LDA temp+3
0C524 18                                CLC
0C525 69 20                             ADC #$20
0C527 8D 06 20                          STA PPU_ADDR
0C52A                                   
0C52A                                   ;; Write third and fourth tile
0C52A BD 4C D1                          LDA tbl_GametileBottomLeft,x
0C52D 8D 07 20                          STA PPU_DATA
0C530 BD 56 D1                          LDA tbl_GametileBottomRight,x
0C533 8D 07 20                          STA PPU_DATA
0C536                           
0C536                                   ;; Push x-register to stack
0C536 8A                                TXA
0C537 48                                PHA
0C538                                   
0C538                                   ;; Update tile RAM (aka collision table)
0C538 A6 05                             LDX temp+5
0C53A BD 60 D1                          LDA tbl_GameTileRamByte,x
0C53D 05 04                             ORA temp+4
0C53F 0A                                ASL
0C540 09 01                             ORA #%00000001
0C542 A6 00                             LDX temp
0C544 9D 00 04                          STA tile_type,x
0C547                           
0C547                                   ;; Check if shade 1 should be drawn
0C547 E8                                INX
0C548 BD 00 04                          LDA tile_type,x
0C54B D0 05                             BNE +
0C54D A9 00                                 LDA #$00
0C54F 8D 07 20                              STA PPU_DATA
0C552                                   +
0C552                                   
0C552                                   ;; Check if shade 2 should be drawn
0C552 A5 03                             LDA temp+3
0C554 18                                CLC
0C555 69 41                             ADC #$41
0C557 85 03                             STA temp+3
0C559 A5 02                             LDA temp+2
0C55B 69 00                             ADC #$00
0C55D 85 02                             STA temp+2
0C55F                                   
0C55F 8A                                TXA
0C560 18                                CLC
0C561 69 0F                             ADC #$0F
0C563 AA                                TAX
0C564                                   
0C564 BD 00 04                          LDA tile_type,x
0C567 D0 0F                             BNE +
0C569 A5 02                                 LDA temp+2
0C56B 8D 06 20                              STA PPU_ADDR
0C56E A5 03                                 LDA temp+3
0C570 8D 06 20                              STA PPU_ADDR
0C573 A9 00                                 LDA #$00
0C575 8D 07 20                              STA PPU_DATA
0C578                                   +
0C578                           
0C578                                   ;; Check if shade 3 should be drawn
0C578 E8                                INX
0C579 E6 03                             INC temp+3
0C57B BD 00 04                          LDA tile_type,x
0C57E D0 0F                             BNE +
0C580 A5 02                                 LDA temp+2
0C582 8D 06 20                              STA PPU_ADDR
0C585 A5 03                                 LDA temp+3
0C587 8D 06 20                              STA PPU_ADDR
0C58A A9 00                                 LDA #$00
0C58C 8D 07 20                              STA PPU_DATA
0C58F                                   +
0C58F                                   
0C58F                                   ;; Restore x-register from stack
0C58F 68                                PLA
0C590 AA                                TAX
0C591                                   
0C591                                   ;; Reset pointer for next tile
0C591 A5 03                             LDA temp+3
0C593 38                                SEC
0C594 E9 42                             SBC #$42
0C596 85 03                             STA temp+3
0C598 A5 02                             LDA temp+2
0C59A E9 00                             SBC #$00
0C59C 85 02                             STA temp+2
0C59E                                   
0C59E                                   ;; Draw next metatile in this loop (if any left)
0C59E 88                                DEY
0C59F 30 27                             BMI +doneDrawingRowColumn
0C5A1                                   
0C5A1                                   ;; Is it a row or a column?
0C5A1 A5 01                             LDA temp+1
0C5A3 10 17                             BPL +
0C5A5                                       ;; It is a column: move pointer down (+$40)
0C5A5 A5 03                                 LDA temp+3
0C5A7 18                                    CLC
0C5A8 69 40                                 ADC #$40
0C5AA 85 03                                 STA temp+3
0C5AC A5 02                                 LDA temp+2
0C5AE 69 00                                 ADC #$00
0C5B0 85 02                                 STA temp+2
0C5B2                                       
0C5B2                                       ;; Add 16 to temp (as a tile RAM pointer)
0C5B2 A5 00                                 LDA temp
0C5B4 18                                    CLC
0C5B5 69 10                                 ADC #$10
0C5B7 85 00                                 STA temp
0C5B9 4C C5 C5                              JMP +drawNextTile
0C5BC                                   +
0C5BC                                   
0C5BC                                   ;; It is a row: move pointer right (+$02)
0C5BC A5 03                             LDA temp+3
0C5BE 18                                CLC
0C5BF 69 02                             ADC #$02
0C5C1 85 03                             STA temp+3
0C5C3                                   
0C5C3                                   ;; Add 1 to temp (as a tile RAM pointer)
0C5C3 E6 00                             INC temp
0C5C5                           
0C5C5                               
0C5C5                               ;; Next tile in the row/column
0C5C5                                   +drawNextTile:
0C5C5 4C 01 C5                      JMP -drawTileLoop
0C5C8                           
0C5C8                               ;; Go to the next set of tiles
0C5C8                           +doneDrawingRowColumn:
0C5C8 68                            PLA
0C5C9 A8                            TAY
0C5CA C8                            INY
0C5CB 4C 7F C4                      JMP -drawRowColumnLoop
0C5CE                           
0C5CE                           ;; Level loading is done
0C5CE                           +doneLevelLoad:
0C5CE                           
0C5CE                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C5CE A9 20                         LDA #$20
0C5D0 8D 06 20                      STA PPU_ADDR
0C5D3 A9 A2                         LDA #$A2
0C5D5 8D 06 20                      STA PPU_ADDR
0C5D8 A9 35                         LDA #$35
0C5DA 20 E8 C7                      JSR sub_Draw28HorizontalTiles
0C5DD                           
0C5DD                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C5DD A9 23                         LDA #$23
0C5DF 8D 06 20                      STA PPU_ADDR
0C5E2 A9 42                         LDA #$42
0C5E4 8D 06 20                      STA PPU_ADDR
0C5E7 A9 31                         LDA #$31
0C5E9 20 E8 C7                      JSR sub_Draw28HorizontalTiles
0C5EC                           
0C5EC                               ;; Left & right game bounds
0C5EC                               ;; Set PPU_ADDR and store in temp variables
0C5EC A9 20                         LDA #$20
0C5EE 85 00                         STA temp
0C5F0 8D 06 20                      STA PPU_ADDR
0C5F3 A9 C1                         LDA #$C1
0C5F5 85 01                         STA temp+1
0C5F7 8D 06 20                      STA PPU_ADDR
0C5FA                               
0C5FA                               ;; Set vertical bound tile and set up loop
0C5FA A0 33                         LDY #$33
0C5FC A2 14                         LDX #20
0C5FE                               -
0C5FE                                   ;; Show left tile
0C5FE 8C 07 20                          STY PPU_DATA
0C601                                   
0C601                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C601 A5 00                             LDA temp
0C603 8D 06 20                          STA PPU_ADDR
0C606 A5 01                             LDA temp+1
0C608 18                                CLC
0C609 69 1D                             ADC #29
0C60B 85 01                             STA temp+1
0C60D 8D 06 20                          STA PPU_ADDR
0C610                           
0C610                                   ;; Show right tile
0C610 8C 07 20                          STY PPU_DATA
0C613                           
0C613                                   ;; Check if we're done yet
0C613 CA                                DEX
0C614 F0 18                             BEQ +drawCorners
0C616                                   
0C616                                   ;; Not done yet: add 3 to low byte for next left bound
0C616 A5 01                             LDA temp+1
0C618 18                                CLC
0C619 69 03                             ADC #3
0C61B 85 01                             STA temp+1
0C61D                                   
0C61D                                   ;; Apply carry to high byte
0C61D A5 00                             LDA temp
0C61F 69 00                             ADC #$00
0C621 85 00                             STA temp
0C623                                   
0C623                                   ;; Store next PPU_ADDR to draw at
0C623 8D 06 20                          STA PPU_ADDR
0C626 A5 01                             LDA temp+1
0C628 8D 06 20                          STA PPU_ADDR
0C62B 4C FE C5                      JMP -
0C62E                               
0C62E                               
0C62E                           
0C62E                           +drawCorners:
0C62E                               ;; Draw the corners of the playing field
0C62E A9 20                         LDA #$20
0C630 8D 06 20                      STA PPU_ADDR
0C633 A9 A1                         LDA #$A1
0C635 8D 06 20                      STA PPU_ADDR
0C638 A9 39                         LDA #$39
0C63A 8D 07 20                      STA PPU_DATA
0C63D                           
0C63D A9 20                         LDA #$20
0C63F 8D 06 20                      STA PPU_ADDR
0C642 A9 BE                         LDA #$BE
0C644 8D 06 20                      STA PPU_ADDR
0C647 A9 3A                         LDA #$3A
0C649 8D 07 20                      STA PPU_DATA
0C64C                           
0C64C A9 23                         LDA #$23
0C64E 8D 06 20                      STA PPU_ADDR
0C651 A9 41                         LDA #$41
0C653 8D 06 20                      STA PPU_ADDR
0C656 A9 36                         LDA #$36
0C658 8D 07 20                      STA PPU_DATA
0C65B                           
0C65B A9 23                         LDA #$23
0C65D 8D 06 20                      STA PPU_ADDR
0C660 A9 5E                         LDA #$5E
0C662 8D 06 20                      STA PPU_ADDR
0C665 A9 34                         LDA #$34
0C667 8D 07 20                      STA PPU_DATA
0C66A                           
0C66A                           
0C66A                               ;; Draw the hud labels
0C66A A9 20                         LDA #$20
0C66C 8D 06 20                      STA PPU_ADDR
0C66F A9 62                         LDA #$62
0C671 8D 06 20                      STA PPU_ADDR
0C674 A2 00                         LDX #$00
0C676                               -
0C676 BD 65 D1                          LDA tbl_HudText,x
0C679 8D 07 20                          STA PPU_DATA
0C67C E8                                INX
0C67D E0 1C                             CPX #28
0C67F D0 F5                         BNE -
0C681                           
0C681                           
0C681                               ;; Draw the current score
0C681 A9 20                         LDA #$20
0C683 8D 06 20                      STA PPU_ADDR
0C686 A9 83                         LDA #$83
0C688 8D 06 20                      STA PPU_ADDR
0C68B A2 00                         LDX #$00
0C68D                               -
0C68D B5 1C                             LDA ball_score,x
0C68F 18                                CLC
0C690 69 01                             ADC #$01
0C692 8D 07 20                          STA PPU_DATA
0C695 E8                                INX
0C696 E0 06                             CPX #$06
0C698 D0 F3                         BNE -
0C69A                           
0C69A                           
0C69A                               ;; Draw the level number
0C69A                               ;; (with primitive HEX>DEC)
0C69A A5 34                         LDA current_level
0C69C 18                            CLC
0C69D 69 01                         ADC #$01
0C69F 85 01                         STA temp+1
0C6A1                               
0C6A1 C9 14                         CMP #20
0C6A3 B0 13                         BCS +tempIsTwo
0C6A5                               
0C6A5 C9 0A                         CMP #10
0C6A7 B0 05                         BCS +tempIsOne
0C6A9                               
0C6A9 A9 00                         LDA #$00
0C6AB 4C BF C6                      JMP +setTemp
0C6AE                               
0C6AE                           +tempIsOne:
0C6AE 38                            SEC
0C6AF E9 0A                         SBC #10
0C6B1 85 01                         STA temp+1
0C6B3 A9 01                         LDA #$01
0C6B5 4C BF C6                      JMP +setTemp
0C6B8                               
0C6B8                           +tempIsTwo:
0C6B8 38                            SEC
0C6B9 E9 14                         SBC #20
0C6BB 85 01                         STA temp+1
0C6BD A9 02                         LDA #$02
0C6BF                           
0C6BF                           +setTemp:
0C6BF 85 00                         STA temp
0C6C1                               
0C6C1 E6 00                         INC temp
0C6C3 E6 01                         INC temp+1
0C6C5                               
0C6C5 A9 20                         LDA #$20
0C6C7 8D 06 20                      STA PPU_ADDR
0C6CA A9 8B                         LDA #$8B
0C6CC 8D 06 20                      STA PPU_ADDR
0C6CF A5 00                         LDA temp
0C6D1 8D 07 20                      STA PPU_DATA
0C6D4 A5 01                         LDA temp+1
0C6D6 8D 07 20                      STA PPU_DATA
0C6D9                           
0C6D9                           
0C6D9                               ;; Draw lives (presumes lives to be capped at 9)
0C6D9 A9 20                         LDA #$20
0C6DB 8D 06 20                      STA PPU_ADDR
0C6DE A9 92                         LDA #$92
0C6E0 8D 06 20                      STA PPU_ADDR
0C6E3 A6 1B                         LDX ball_lives
0C6E5 E8                            INX
0C6E6 8E 07 20                      STX PPU_DATA
0C6E9                           
0C6E9                           
0C6E9                               ;; Set and draw bonus
0C6E9 A9 07                         LDA #$07
0C6EB 85 22                         STA ball_bonus
0C6ED A9 09                         LDA #$09
0C6EF 85 23                         STA ball_bonus+1
0C6F1 85 24                         STA ball_bonus+2
0C6F3                               
0C6F3 A9 20                         LDA #$20
0C6F5 8D 06 20                      STA PPU_ADDR
0C6F8 A9 9A                         LDA #$9A
0C6FA 8D 06 20                      STA PPU_ADDR
0C6FD A2 00                         LDX #$00
0C6FF                               -
0C6FF B5 22                             LDA ball_bonus,x
0C701 18                                CLC
0C702 69 01                             ADC #$01
0C704 8D 07 20                          STA PPU_DATA
0C707 E8                                INX
0C708 E0 03                             CPX #$03
0C70A D0 F3                         BNE -
0C70C                           
0C70C                           
0C70C                               ;; Set attribute data to RAM
0C70C                               
0C70C                               ;; Byte 0-7 of attribute ram should be #%10100000
0C70C A2 00                         LDX #$00
0C70E A9 A0                         LDA #$A0
0C710                               -
0C710 9D A0 04                          STA tile_attributes,x
0C713 E8                                INX
0C714 E0 08                             CPX #$08
0C716 D0 F8                         BNE -
0C718                           
0C718                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C718                           
0C718                           -attributeLoop:
0C718                               ;; Reset current attribute value
0C718 A9 00                         LDA #$00
0C71A 85 02                         STA temp+2
0C71C                           
0C71C                               ;; Get first metatile in tile ram based on attribute index
0C71C                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C71C 8A                            TXA
0C71D                           
0C71D 38                            SEC
0C71E E9 08                         SBC #$08
0C720 85 01                         STA temp+1      ; attr - 8 (temp1)
0C722 0A                            ASL             ; * 2
0C723 85 00                         STA temp        ; temp = temp1 * 2
0C725                           
0C725 A5 01                         LDA temp+1      ; temp1
0C727 29 F8                         AND #%11111000  ; rounded down to 8's
0C729 0A                            ASL             ; * 2
0C72A 18                            CLC
0C72B 65 00                         ADC temp        ; + temp1 * 2
0C72D 85 00                         STA temp        ; first metatile
0C72F                           
0C72F                               ;; Store first metatile in y-register
0C72F A8                            TAY
0C730                           
0C730                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C730 8A                            TXA
0C731 29 07                         AND #%00000111
0C733 C9 07                         CMP #%00000111
0C735 F0 0B                         BEQ +
0C737                           
0C737                               ;; If X >= $30, don't apply bottom right metatile
0C737 E0 30                         CPX #$30
0C739 B0 07                         BCS +
0C73B                               
0C73B                               ;; Add metatile1 subpalette to attribute value
0C73B B9 00 04                      LDA tile_type,y
0C73E 29 0C                         AND #%00001100
0C740 85 02                         STA temp+2
0C742                               +
0C742                           
0C742                           
0C742                               ;; Apply second metatile
0C742 88                            DEY
0C743                           
0C743                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C743 8A                            TXA
0C744 29 07                         AND #%00000111
0C746 F0 10                         BEQ +
0C748                           
0C748                               ;; If X >= $30, don't apply bottom left metatile
0C748 E0 30                         CPX #$30
0C74A B0 0C                         BCS +
0C74C                           
0C74C                           
0C74C                           
0C74C                               ;; Add metatile2 subpalette to attribute value
0C74C B9 00 04                      LDA tile_type,y
0C74F 29 0C                         AND #%00001100
0C751 4A                            LSR
0C752 4A                            LSR
0C753 05 02                         ORA temp+2
0C755 4C 5A C7                      JMP ++
0C758                               +
0C758 A5 02                         LDA temp+2
0C75A                               ++
0C75A 0A                            ASL
0C75B 0A                            ASL
0C75C 85 02                         STA temp+2
0C75E                           
0C75E                           
0C75E                               ;; Apply third metatile
0C75E 98                            TYA
0C75F 38                            SEC
0C760 E9 0F                         SBC #$0F
0C762 A8                            TAY
0C763                           
0C763                               ;; If X MOD 8 == 7, don't apply top right metatile
0C763 8A                            TXA
0C764 29 07                         AND #%00000111
0C766 C9 07                         CMP #%00000111
0C768 F0 11                         BEQ +
0C76A                           
0C76A                               ;; If X < $10, don't apply top right metatile
0C76A 8A                            TXA
0C76B 29 F0                         AND #%11110000
0C76D F0 0C                         BEQ +
0C76F                           
0C76F                               ;; Add metatile3 subpalette to attribute value
0C76F B9 00 04                      LDA tile_type,y
0C772 29 0C                         AND #%00001100
0C774 4A                            LSR
0C775 4A                            LSR
0C776 05 02                         ORA temp+2
0C778 4C 7D C7                      JMP ++
0C77B                               +
0C77B A5 02                         LDA temp+2
0C77D                               ++
0C77D 0A                            ASL
0C77E 0A                            ASL
0C77F 85 02                         STA temp+2
0C781                           
0C781                           
0C781                               ;; Apply fourth metatile
0C781 88                            DEY
0C782                           
0C782                               ;; If X MOD 8 == 0, don't apply top left metatile
0C782 8A                            TXA
0C783 29 07                         AND #%00000111
0C785 F0 11                         BEQ +
0C787                           
0C787                               ;; If X < $10, don't apply top left metatile
0C787 8A                            TXA
0C788 29 F0                         AND #%11110000
0C78A F0 0C                         BEQ +
0C78C                           
0C78C                               ;; Add metatile4 subpalette to attribute value
0C78C B9 00 04                      LDA tile_type,y
0C78F 29 0C                         AND #%00001100
0C791 4A                            LSR
0C792 4A                            LSR
0C793 05 02                         ORA temp+2
0C795 4C 9A C7                      JMP ++
0C798                               +
0C798 A5 02                         LDA temp+2
0C79A                               ++
0C79A 9D A0 04                      STA tile_attributes,x
0C79D                           
0C79D                               ;; Check the next attribute, if any left
0C79D E8                            INX
0C79E E0 38                         CPX #$38
0C7A0 F0 03                         BEQ +
0C7A2 4C 18 C7                          JMP -attributeLoop
0C7A5                               +
0C7A5                           
0C7A5                               ;; Stream attribute RAM to PPU
0C7A5 2C 02 20                      BIT PPU_STATUS
0C7A8 A9 23                         LDA #$23
0C7AA 8D 06 20                      STA PPU_ADDR
0C7AD A9 C0                         LDA #$C0
0C7AF 8D 06 20                      STA PPU_ADDR
0C7B2 A2 00                         LDX #$00
0C7B4                               -
0C7B4 BD A0 04                          LDA tile_attributes,x
0C7B7 8D 07 20                          STA PPU_DATA
0C7BA E8                                INX
0C7BB E0 40                             CPX #$40
0C7BD D0 F5                         BNE -
0C7BF                           
0C7BF                               ;; Set initial ball position
0C7BF A6 34                         LDX current_level
0C7C1 BD 02 D1                      LDA tbl_lvl_ball_startpos,x
0C7C4 29 F0                         AND #%11110000
0C7C6 18                            CLC
0C7C7 69 34                         ADC #$34
0C7C9 85 19                         STA ball_ypos_hi
0C7CB BD 02 D1                      LDA tbl_lvl_ball_startpos,x
0C7CE 0A                            ASL
0C7CF 0A                            ASL
0C7D0 0A                            ASL
0C7D1 0A                            ASL
0C7D2 18                            CLC
0C7D3 69 14                         ADC #$14
0C7D5 85 17                         STA ball_xpos_hi
0C7D7 A9 00                         LDA #$00
0C7D9 85 18                         STA ball_xpos_lo
0C7DB 85 1A                         STA ball_ypos_lo
0C7DD                               
0C7DD                               ;; Set initial ball color and direction
0C7DD BD 1B D1                      LDA tbl_lvl_ball_init,x
0C7E0 29 F0                         AND #%11110000
0C7E2 85 2C                         STA ball_flags
0C7E4 20 B0 C3                      JSR sub_ColorizeBall
0C7E7                               
0C7E7                               ;; Return
0C7E7 60                            RTS
0C7E8                           
0C7E8                           
0C7E8                           ;; Subroutine: draw 28 tiles in a row
0C7E8                           sub_Draw28HorizontalTiles:
0C7E8 A2 1C                         LDX #28
0C7EA                               -
0C7EA 8D 07 20                          STA PPU_DATA
0C7ED CA                                DEX
0C7EE D0 FA                         BNE -
0C7F0 60                            RTS0C7F1                           .include "game/subroutine/LoadIntroScreen.asm"
0C7F1                           sub_LoadIntroScreen:
0C7F1                           
0C7F1                               ;; Load intro palette
0C7F1 2C 02 20                      BIT PPU_STATUS
0C7F4 A9 3F                         LDA #$3F
0C7F6 8D 06 20                      STA PPU_ADDR
0C7F9 A9 00                         LDA #$00
0C7FB 8D 06 20                      STA PPU_ADDR
0C7FE A2 00                         LDX #$00
0C800                               -
0C800 BD A7 C8                          LDA tbl_IntroScreenPalette,x
0C803 8D 07 20                          STA PPU_DATA
0C806 E8                                INX
0C807 E0 20                             CPX #$20
0C809 D0 F5                         BNE -
0C80B                               
0C80B                               ;; Put ball in the middle
0C80B A9 7C                         LDA #$7C
0C80D 85 17                         STA ball_xpos_hi
0C80F 85 19                         STA ball_ypos_hi
0C811                           
0C811                               ;; Clear the screen
0C811 20 45 C3                      JSR sub_ClearScreen
0C814                           
0C814                               ;; Set up intro screen draw loop
0C814 A2 00                         LDX #$00
0C816                           
0C816                           -loop_IntroScreenData:
0C816                           
0C816                               ;; Get current byte from intro screen data
0C816 BD CF C8                      LDA tbl_IntroScreenData,x
0C819                           
0C819                               ;; If current byte is #$3F, we're done drawing.
0C819 C9 3F                         CMP #$3F
0C81B D0 03                         BNE +
0C81D 4C 6A C8                          JMP +goToEndIntroScreen
0C820                               +
0C820                           
0C820                               ;; If highest bits are %11, draw a plain tile
0C820 29 C0                         AND #%11000000
0C822 D0 03                         BNE +
0C824 4C 4A C8                          JMP +drawTile
0C827                               +
0C827                               
0C827                               ;; If highest bits are %01, set the PPU address
0C827                               ;; If not, draw two logo tiles
0C827 C9 40                         CMP #%01000000
0C829 D0 03                         BNE +drawLogo
0C82B 4C 54 C8                          JMP +setPpuAddr
0C82E                           
0C82E                           +drawLogo:
0C82E                               ;; Get bits 0-2 and store in a temp variable
0C82E BD CF C8                      LDA tbl_IntroScreenData,x
0C831 29 07                         AND #%00000111
0C833 85 00                         STA temp
0C835                               
0C835                               ;; Get bits 3-5, shift over to get a value from 0-7
0C835 BD CF C8                      LDA tbl_IntroScreenData,x
0C838 4A                            LSR
0C839 4A                            LSR
0C83A 4A                            LSR
0C83B 29 07                         AND #%00000111
0C83D                               
0C83D                               ;; Draw the tile that corresponds with that value
0C83D A8                            TAY
0C83E 20 26 C4                      JSR sub_drawIntroScreenLogoTile
0C841                               
0C841                               ;; Do the same for the value stored in temp
0C841 A4 00                         LDY temp
0C843 20 26 C4                      JSR sub_drawIntroScreenLogoTile
0C846                           
0C846                               ;; Next byte please
0C846 E8                            INX
0C847 4C 16 C8                      JMP -loop_IntroScreenData
0C84A                           
0C84A                           +drawTile:
0C84A                               ;; Just draw the tile value on screen
0C84A BD CF C8                      LDA tbl_IntroScreenData,x
0C84D 8D 07 20                      STA PPU_DATA
0C850                               
0C850                               ;; Next byte please
0C850 E8                            INX
0C851 4C 16 C8                      JMP -loop_IntroScreenData
0C854                           
0C854                           
0C854                           +setPpuAddr:
0C854                               ;; Reset the PPU latch
0C854 2C 02 20                      BIT PPU_STATUS
0C857                               
0C857                               ;; Sanitize and write the high byte of the PPU address
0C857 BD CF C8                      LDA tbl_IntroScreenData,x
0C85A 29 3F                         AND #%00111111
0C85C 8D 06 20                      STA PPU_ADDR
0C85F                           
0C85F                               ;; Write the low byte of the PPU address
0C85F E8                            INX
0C860 BD CF C8                      LDA tbl_IntroScreenData,x
0C863 8D 06 20                      STA PPU_ADDR
0C866                               
0C866                               ;; PPU has been set up to draw tiles at the correct spot now.
0C866                               
0C866                               ;; Next byte please.
0C866 E8                            INX
0C867 4C 16 C8                      JMP -loop_IntroScreenData
0C86A                           
0C86A                           +goToEndIntroScreen:
0C86A                           
0C86A                               ;; To color the 1.LEVEL: line green, we need to update two
0C86A                               ;; values in the PPU attribute data.
0C86A 2C 02 20                      BIT PPU_STATUS
0C86D A9 23                         LDA #$23
0C86F 8D 06 20                      STA PPU_ADDR
0C872 A9 CB                         LDA #$CB
0C874 8D 06 20                      STA PPU_ADDR
0C877 A9 0A                         LDA #%00001010
0C879 8D 07 20                      STA PPU_DATA
0C87C 8D 07 20                      STA PPU_DATA
0C87F                           
0C87F 60                            RTS
0C880                           
0C880                           .include "game/subroutine/LoadWinScreen.asm"
0C880                           sub_LoadWinScreen:
0C880 60                            RTS
0C881                           
0C881                           .include "game/subroutine/WriteByteToPPU.asm"
0C881                           sub_WriteByteToPPUBuffer:
0C881                           
0C881                               ;; Prevent updating until full 3-byte buffer is filled,
0C881                               ;; so that graphics won't glitch out if NMI happens during
0C881                               ;; updating the buffer
0C881 A9 00                         LDA #$00
0C883 85 2F                         STA ppu_buffer_update
0C885                           
0C885                               ;; Check if buffer full; if so, wait a frame and force update
0C885 A4 30                         LDY ppu_buffer_pointer
0C887 C0 30                         CPY #$30
0C889 D0 05                         BNE +
0C88B E6 2F                             INC ppu_buffer_update
0C88D 20 3F C3                          JSR sub_WaitForVBlank
0C890                               +
0C890                           
0C890                               ;; Add ppu_addr high byte to buffer
0C890 A5 00                         LDA temp
0C892 99 00 03                      STA ppu_buffer,y
0C895                           
0C895                               ;; Add ppu_addr low byte to buffer
0C895 C8                            INY
0C896 A5 01                         LDA temp+1
0C898 99 00 03                      STA ppu_buffer,y
0C89B                           
0C89B                               ;; Add ppu_data to buffer
0C89B C8                            INY
0C89C A5 02                         LDA temp+2
0C89E 99 00 03                      STA ppu_buffer,y
0C8A1                           
0C8A1                               ;; Update buffer pointer
0C8A1 C8                            INY
0C8A2 84 30                         STY ppu_buffer_pointer
0C8A4                           
0C8A4                               ;; Tell NMI to update next round
0C8A4 E6 2F                         INC ppu_buffer_update
0C8A6                           
0C8A6                               ;; Return
0C8A6 60                            RTS0C8A7                           
0C8A7                           
0C8A7                           ;; LUTs
0C8A7                           .include "game/include/tables.asm"
0C8A7                           
0C8A7                           ;; Intro screen palette
0C8A7                           tbl_IntroScreenPalette:
0C8A7 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C8AB 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C8AF 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C8B3 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C8B7                           
0C8B7 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C8BB 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C8BF 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C8C3 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C8C7                           
0C8C7                           
0C8C7                           ;; Intro: mapping logo index to chr tile
0C8C7                           tbl_IntroScreenLogoChr:
0C8C7 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C8CF                           
0C8CF                           
0C8CF                           ;; Intro screen data
0C8CF                           tbl_IntroScreenData:
0C8CF                           
0C8CF                               ;; Set PPU address $20AC and draw
0C8CF 60 AC                         .db #$60, #$AC
0C8D1 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C8D9                           
0C8D9                               ;; Set PPU address $20CF and draw
0C8D9 60 CF                         .db #$60, #$CF
0C8DB 01 02                         .db #_0, #_1
0C8DD                               
0C8DD                               ;; Set PPU address $2122 and draw
0C8DD 61 22                         .db #$61, #$22
0C8DF 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C8E6 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C8EC 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C8F4 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C8F9                               
0C8F9                               ;; Set PPU address $2147 and draw
0C8F9 61 47                         .db #$61, #$47
0C8FB 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C902 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C906 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C90C 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C912                               
0C912                               ;; Set PPU address $218B and draw
0C912 61 8B                         .db #$61, #$8B
0C914 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C91A 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C91F                               
0C91F                               ;; Set PPU address $21E6 and draw
0C91F 61 E6                         .db #$61, #$E6
0C921 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C929 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C92D 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C934                               
0C934                               ;; Set PPU address $222D and draw
0C934 62 2D                         .db #$62, #$2D
0C936 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C93C                               
0C93C                               ;; Set PPU address $2281
0C93C 62 81                         .db #$62, #$81
0C93E                               
0C93E                               ;; Draw the Crillion logo
0C93E E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C942 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C946 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C94A E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C94E                               
0C94E D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C952 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C956 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C95A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C95E                               
0C95E D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C962 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C966 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C96A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C96E                           
0C96E D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C972 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C976 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C97A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C97E                               
0C97E D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C982 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C986 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C98A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C98E                           
0C98E F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C992 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C996 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C99A F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C99D                           
0C99D                               ;; End of intro
0C99D 3F                            .db #$3F
0C99E                           
0C99E                           
0C99E                           ;; test animation table
0C99E                           .include "game/test/show_animation_table.asm"
0C99E                           ;; CHR tile-id's per slide of explosion
0C99E                           explosion_slide0:
0C99E 00 00 00                      .db #$00, #$00, #$00
0C9A1 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C9A4 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C9A7                           
0C9A7                           explosion_slide1:
0C9A7 00 00 00                      .db #$00, #$00, #$00
0C9AA 29 2A 2B                      .db #$29, #$2A, #$2B
0C9AD 39 3A 3B                      .db #$39, #$3A, #$3B
0C9B0                           
0C9B0                           explosion_slide2:
0C9B0 16 00 00                      .db #$16, #$00, #$00
0C9B3 26 27 28                      .db #$26, #$27, #$28
0C9B6 36 37 38                      .db #$36, #$37, #$38
0C9B9                           
0C9B9                           explosion_slide3:
0C9B9 00 14 15                      .db #$00, #$14, #$15
0C9BC 23 24 25                      .db #$23, #$24, #$25
0C9BF 33 34 35                      .db #$33, #$34, #$35
0C9C2                           
0C9C2                           explosion_slide4:
0C9C2 10 11 12                      .db #$10, #$11, #$12
0C9C5 20 21 22                      .db #$20, #$21, #$22
0C9C8 30 31 32                      .db #$30, #$31, #$32
0C9CB                           
0C9CB                           ;; High and low bytes of animation slides
0C9CB                           explosion_anim_hi:
0C9CB C9                            .db >#explosion_slide0
0C9CC C9                            .db >#explosion_slide1
0C9CD C9                            .db >#explosion_slide2
0C9CE C9                            .db >#explosion_slide3
0C9CF C9                            .db >#explosion_slide4
0C9D0 C9                            .db >#explosion_slide4
0C9D1 C9                            .db >#explosion_slide3
0C9D2 C9                            .db >#explosion_slide2
0C9D3 C9                            .db >#explosion_slide1
0C9D4 C9                            .db >#explosion_slide0
0C9D5                           
0C9D5                           explosion_anim_lo:
0C9D5 9E                            .db <#explosion_slide0
0C9D6 A7                            .db <#explosion_slide1
0C9D7 B0                            .db <#explosion_slide2
0C9D8 B9                            .db <#explosion_slide3
0C9D9 C2                            .db <#explosion_slide4
0C9DA C2                            .db <#explosion_slide4
0C9DB B9                            .db <#explosion_slide3
0C9DC B0                            .db <#explosion_slide2
0C9DD A7                            .db <#explosion_slide1
0C9DE 9E                            .db <#explosion_slide0
0C9DF                           
0C9DF                           
0C9DF                           
0C9DF                           ;; Ball palette color table (CBRYGM)
0C9DF                           tbl_BallColorDark:
0C9DF 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0C9E5                            
0C9E5                           tbl_BallColorLight:
0C9E5 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0C9EB                           
0C9EB                               
0C9EB                           ;; Screen mode drawing routine addresses
0C9EB                           tbl_LoadScreenHi:
0C9EB C7 C4 C8                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C9EE                           
0C9EE                           tbl_LoadScreenLo:
0C9EE F1 65 80                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C9F1                           
0C9F1                           
0C9F1                           ;; Test level data
0C9F1                           .include "game/test/level_data.asm"
0C9F1                           lvl_layout_01:
0C9F1 61 21                         .db #$61, #%00100001
0C9F3 52 61                         .db #$52, #%01100001
0C9F5 43 65                         .db #$43, #%01100101
0C9F7 83 05                         .db #$83, #%00000101
0C9F9 93 15                         .db #$93, #%00010101
0C9FB 34 7A                         .db #$34, #%01111010
0C9FD 74 7A                         .db #$74, #%01111010
0C9FF 35 7A                         .db #$35, #%01111010
0CA01 75 7A                         .db #$75, #%01111010
0CA03 46 65                         .db #$46, #%01100101
0CA05 86 25                         .db #$86, #%00100101
0CA07 57 61                         .db #$57, #%01100001
0CA09 68 21                         .db #$68, #%00100001
0CA0B FF                            .db #LEVEL_END
0CA0C                           
0CA0C                           lvl_layout_02:
0CA0C C0 0A                         .db #$C0, #%00001010
0CA0E 11 15                         .db #$11, #%00010101
0CA10 21 62                         .db #$21, #%01100010
0CA12 61 62                         .db #$61, #%01100010
0CA14 A1 42                         .db #$A1, #%01000010
0CA16 12 67                         .db #$12, #%01100111
0CA18 52 67                         .db #$52, #%01100111
0CA1A 92 67                         .db #$92, #%01100111
0CA1C C3 0D                         .db #$C3, #%00001101
0CA1E 14 11                         .db #$14, #%00010001
0CA20 24 65                         .db #$24, #%01100101
0CA22 64 65                         .db #$64, #%01100101
0CA24 A4 45                         .db #$A4, #%01000101
0CA26 15 67                         .db #$15, #%01100111
0CA28 55 67                         .db #$55, #%01100111
0CA2A 95 67                         .db #$95, #%01100111
0CA2C 17 12                         .db #$17, #%00010010
0CA2E 27 61                         .db #$27, #%01100001
0CA30 67 61                         .db #$67, #%01100001
0CA32 A7 41                         .db #$A7, #%01000001
0CA34 38 7A                         .db #$38, #%01111010
0CA36 98 5A                         .db #$98, #%01011010
0CA38 18 27                         .db #$18, #%00100111
0CA3A 48 27                         .db #$48, #%00100111
0CA3C 78 27                         .db #$78, #%00100111
0CA3E C8 07                         .db #$C8, #%00000111
0CA40 FF                            .db #LEVEL_END
0CA41                           
0CA41                           lvl_layout_03:
0CA41 00 7A                         .db #$00, #%01111010
0CA43 40 7A                         .db #$40, #%01111010
0CA45 80 7A                         .db #$80, #%01111010
0CA47 C0 1A                         .db #$C0, #%00011010
0CA49 10 A1                         .db #$10, #%10100001
0CA4B 13 E1                         .db #$13, #%11100001
0CA4D 17 C1                         .db #$17, #%11000001
0CA4F 30 C1                         .db #$30, #%11000001
0CA51 34 C1                         .db #$34, #%11000001
0CA53 38 A1                         .db #$38, #%10100001
0CA55 50 E1                         .db #$50, #%11100001
0CA57 55 81                         .db #$55, #%10000001
0CA59 57 C1                         .db #$57, #%11000001
0CA5B 70 C1                         .db #$70, #%11000001
0CA5D 73 A1                         .db #$73, #%10100001
0CA5F 76 E1                         .db #$76, #%11100001
0CA61 90 E1                         .db #$90, #%11100001
0CA63 95 81                         .db #$95, #%10000001
0CA65 97 C1                         .db #$97, #%11000001
0CA67 B0 C1                         .db #$B0, #%11000001
0CA69 B4 C1                         .db #$B4, #%11000001
0CA6B B8 A1                         .db #$B8, #%10100001
0CA6D D0 A1                         .db #$D0, #%10100001
0CA6F D3 E1                         .db #$D3, #%11100001
0CA71 D7 C1                         .db #$D7, #%11000001
0CA73 FF                            .db #LEVEL_END
0CA74                           
0CA74                           lvl_layout_04:
0CA74 00 4C                         .db #$00, #%01001100
0CA76 40 6C                         .db #$40, #%01101100
0CA78 80 4C                         .db #$80, #%01001100
0CA7A 81 AC                         .db #$81, #%10101100
0CA7C C1 2C                         .db #$C1, #%00101100
0CA7E 02 6C                         .db #$02, #%01101100
0CA80 42 CC                         .db #$42, #%11001100
0CA82 62 EC                         .db #$62, #%11101100
0CA84 A2 CC                         .db #$A2, #%11001100
0CA86 C3 CC                         .db #$C3, #%11001100
0CA88 04 4C                         .db #$04, #%01001100
0CA8A 84 2C                         .db #$84, #%00101100
0CA8C 25 AC                         .db #$25, #%10101100
0CA8E 85 AC                         .db #$85, #%10101100
0CA90 06 AC                         .db #$06, #%10101100
0CA92 36 CC                         .db #$36, #%11001100
0CA94 56 CC                         .db #$56, #%11001100
0CA96 66 EC                         .db #$66, #%11101100
0CA98 96 6C                         .db #$96, #%01101100
0CA9A C7 AC                         .db #$C7, #%10101100
0CA9C 08 2C                         .db #$08, #%00101100
0CA9E 78 6C                         .db #$78, #%01101100
0CAA0 D8 0C                         .db #$D8, #%00001100
0CAA2 30 A1                         .db #$30, #%10100001
0CAA4 B0 21                         .db #$B0, #%00100001
0CAA6 01 41                         .db #$01, #%01000001
0CAA8 41 61                         .db #$41, #%01100001
0CAAA 91 A1                         .db #$91, #%10100001
0CAAC A1 21                         .db #$A1, #%00100001
0CAAE 52 C1                         .db #$52, #%11000001
0CAB0 72 E1                         .db #$72, #%11100001
0CAB2 B2 C1                         .db #$B2, #%11000001
0CAB4 C2 21                         .db #$C2, #%00100001
0CAB6 03 41                         .db #$03, #%01000001
0CAB8 33 C1                         .db #$33, #%11000001
0CABA 83 21                         .db #$83, #%00100001
0CABC D3 E1                         .db #$D3, #%11100001
0CABE 05 21                         .db #$05, #%00100001
0CAC0 45 E1                         .db #$45, #%11100001
0CAC2 A5 21                         .db #$A5, #%00100001
0CAC4 16 A1                         .db #$16, #%10100001
0CAC6 76 A1                         .db #$76, #%10100001
0CAC8 27 A1                         .db #$27, #%10100001
0CACA 57 01                         .db #$57, #%00000001
0CACC 87 41                         .db #$87, #%01000001
0CACE B7 A1                         .db #$B7, #%10100001
0CAD0 19 21                         .db #$19, #%00100001
0CAD2 39 41                         .db #$39, #%01000001
0CAD4 89 41                         .db #$89, #%01000001
0CAD6 C9 21                         .db #$C9, #%00100001
0CAD8 D0 1A                         .db #$D0, #%00011010
0CADA 55 1A                         .db #$55, #%00011010
0CADC 95 1A                         .db #$95, #%00011010
0CADE D7 1A                         .db #$D7, #%00011010
0CAE0 09 1A                         .db #$09, #%00011010
0CAE2 79 1A                         .db #$79, #%00011010
0CAE4 FF                            .db #LEVEL_END
0CAE5                           
0CAE5                           lvl_layout_05:
0CAE5 40 0A                         .db #$40, #%00001010
0CAE7 70 1A                         .db #$70, #%00011010
0CAE9 B0 42                         .db #$B0, #%01000010
0CAEB 41 A7                         .db #$41, #%10100111
0CAED B1 22                         .db #$B1, #%00100010
0CAEF D1 15                         .db #$D1, #%00010101
0CAF1 22 0A                         .db #$22, #%00001010
0CAF3 52 05                         .db #$52, #%00000101
0CAF5 B2 42                         .db #$B2, #%01000010
0CAF7 03 27                         .db #$03, #%00100111
0CAF9 33 67                         .db #$33, #%01100111
0CAFB 73 67                         .db #$73, #%01100111
0CAFD B3 47                         .db #$B3, #%01000111
0CAFF 05 E5                         .db #$05, #%11100101
0CB01 25 A5                         .db #$25, #%10100101
0CB03 35 25                         .db #$35, #%00100101
0CB05 65 45                         .db #$65, #%01000101
0CB07 A5 45                         .db #$A5, #%01000101
0CB09 46 E5                         .db #$46, #%11100101
0CB0B 66 E5                         .db #$66, #%11100101
0CB0D 86 E5                         .db #$86, #%11100101
0CB0F A6 E2                         .db #$A6, #%11100010
0CB11 C6 E5                         .db #$C6, #%11100101
0CB13 27 25                         .db #$27, #%00100101
0CB15 77 05                         .db #$77, #%00000101
0CB17 B7 02                         .db #$B7, #%00000010
0CB19 09 05                         .db #$09, #%00000101
0CB1B 79 05                         .db #$79, #%00000101
0CB1D B9 02                         .db #$B9, #%00000010
0CB1F FF                            .db #LEVEL_END
0CB20                           
0CB20                           lvl_layout_06:
0CB20 00 03                         .db #$00, #%00000011
0CB22 20 03                         .db #$20, #%00000011
0CB24 40 03                         .db #$40, #%00000011
0CB26 A0 03                         .db #$A0, #%00000011
0CB28 C0 03                         .db #$C0, #%00000011
0CB2A 11 03                         .db #$11, #%00000011
0CB2C 31 03                         .db #$31, #%00000011
0CB2E 51 03                         .db #$51, #%00000011
0CB30 91 03                         .db #$91, #%00000011
0CB32 B1 03                         .db #$B1, #%00000011
0CB34 D1 03                         .db #$D1, #%00000011
0CB36 02 03                         .db #$02, #%00000011
0CB38 22 03                         .db #$22, #%00000011
0CB3A 42 03                         .db #$42, #%00000011
0CB3C A2 03                         .db #$A2, #%00000011
0CB3E C2 03                         .db #$C2, #%00000011
0CB40 13 03                         .db #$13, #%00000011
0CB42 33 03                         .db #$33, #%00000011
0CB44 53 03                         .db #$53, #%00000011
0CB46 93 03                         .db #$93, #%00000011
0CB48 B3 03                         .db #$B3, #%00000011
0CB4A D3 03                         .db #$D3, #%00000011
0CB4C 04 03                         .db #$04, #%00000011
0CB4E 24 03                         .db #$24, #%00000011
0CB50 44 03                         .db #$44, #%00000011
0CB52 A4 03                         .db #$A4, #%00000011
0CB54 C4 03                         .db #$C4, #%00000011
0CB56 15 03                         .db #$15, #%00000011
0CB58 35 03                         .db #$35, #%00000011
0CB5A 55 03                         .db #$55, #%00000011
0CB5C 95 03                         .db #$95, #%00000011
0CB5E B5 03                         .db #$B5, #%00000011
0CB60 D5 03                         .db #$D5, #%00000011
0CB62 06 03                         .db #$06, #%00000011
0CB64 26 03                         .db #$26, #%00000011
0CB66 46 03                         .db #$46, #%00000011
0CB68 A6 03                         .db #$A6, #%00000011
0CB6A C6 03                         .db #$C6, #%00000011
0CB6C 17 03                         .db #$17, #%00000011
0CB6E 37 03                         .db #$37, #%00000011
0CB70 57 03                         .db #$57, #%00000011
0CB72 97 03                         .db #$97, #%00000011
0CB74 B7 03                         .db #$B7, #%00000011
0CB76 D7 03                         .db #$D7, #%00000011
0CB78 08 03                         .db #$08, #%00000011
0CB7A 28 03                         .db #$28, #%00000011
0CB7C 48 03                         .db #$48, #%00000011
0CB7E A8 03                         .db #$A8, #%00000011
0CB80 C8 03                         .db #$C8, #%00000011
0CB82 19 03                         .db #$19, #%00000011
0CB84 39 03                         .db #$39, #%00000011
0CB86 59 03                         .db #$59, #%00000011
0CB88 99 03                         .db #$99, #%00000011
0CB8A B9 03                         .db #$B9, #%00000011
0CB8C D9 03                         .db #$D9, #%00000011
0CB8E 60 4B                         .db #$60, #%01001011
0CB90 71 CB                         .db #$71, #%11001011
0CB92 62 4B                         .db #$62, #%01001011
0CB94 64 4B                         .db #$64, #%01001011
0CB96 75 CB                         .db #$75, #%11001011
0CB98 66 4B                         .db #$66, #%01001011
0CB9A 68 4B                         .db #$68, #%01001011
0CB9C 79 0B                         .db #$79, #%00001011
0CB9E 70 03                         .db #$70, #%00000011
0CBA0 72 03                         .db #$72, #%00000011
0CBA2 74 03                         .db #$74, #%00000011
0CBA4 76 03                         .db #$76, #%00000011
0CBA6 78 03                         .db #$78, #%00000011
0CBA8 FF                            .db #LEVEL_END
0CBA9                           
0CBA9                           lvl_layout_07:
0CBA9 00 11                         .db #$00, #%00010001
0CBAB 01 FA                         .db #$01, #%11111010
0CBAD 12 BA                         .db #$12, #%10111010
0CBAF 23 DA                         .db #$23, #%11011010
0CBB1 34 FA                         .db #$34, #%11111010
0CBB3 05 DA                         .db #$05, #%11011010
0CBB5 15 FA                         .db #$15, #%11111010
0CBB7 45 BA                         .db #$45, #%10111010
0CBB9 56 DA                         .db #$56, #%11011010
0CBBB 27 BA                         .db #$27, #%10111010
0CBBD 67 DA                         .db #$67, #%11011010
0CBBF 38 3A                         .db #$38, #%00111010
0CBC1 78 BA                         .db #$78, #%10111010
0CBC3 09 3A                         .db #$09, #%00111010
0CBC5 39 3A                         .db #$39, #%00111010
0CBC7 89 1A                         .db #$89, #%00011010
0CBC9 B0 01                         .db #$B0, #%00000001
0CBCB D0 01                         .db #$D0, #%00000001
0CBCD A1 01                         .db #$A1, #%00000001
0CBCF C1 11                         .db #$C1, #%00010001
0CBD1 B2 01                         .db #$B2, #%00000001
0CBD3 D2 01                         .db #$D2, #%00000001
0CBD5 A3 01                         .db #$A3, #%00000001
0CBD7 C3 01                         .db #$C3, #%00000001
0CBD9 B4 01                         .db #$B4, #%00000001
0CBDB D4 01                         .db #$D4, #%00000001
0CBDD A5 01                         .db #$A5, #%00000001
0CBDF C5 01                         .db #$C5, #%00000001
0CBE1 B6 01                         .db #$B6, #%00000001
0CBE3 D6 01                         .db #$D6, #%00000001
0CBE5 A7 01                         .db #$A7, #%00000001
0CBE7 C7 01                         .db #$C7, #%00000001
0CBE9 FF                            .db #LEVEL_END
0CBEA                           
0CBEA                           lvl_layout_08:
0CBEA 40 B5                         .db #$40, #%10110101
0CBEC 31 0D                         .db #$31, #%00001101
0CBEE 61 10                         .db #$61, #%00010000
0CBF0 42 C7                         .db #$42, #%11000111
0CBF2 52 67                         .db #$52, #%01100111
0CBF4 63 C7                         .db #$63, #%11000111
0CBF6 83 E7                         .db #$83, #%11100111
0CBF8 05 07                         .db #$05, #%00000111
0CBFA 15 3A                         .db #$15, #%00111010
0CBFC 07 63                         .db #$07, #%01100011
0CBFE 27 13                         .db #$27, #%00010011
0CC00 38 A5                         .db #$38, #%10100101
0CC02 09 14                         .db #$09, #%00010100
0CC04 19 05                         .db #$19, #%00000101
0CC06 D0 E0                         .db #$D0, #%11100000
0CC08 C2 A0                         .db #$C2, #%10100000
0CC0A B3 E0                         .db #$B3, #%11100000
0CC0C D5 E0                         .db #$D5, #%11100000
0CC0E C6 E0                         .db #$C6, #%11100000
0CC10 B0 C4                         .db #$B0, #%11000100
0CC12 C0 A4                         .db #$C0, #%10100100
0CC14 D1 A4                         .db #$D1, #%10100100
0CC16 C4 24                         .db #$C4, #%00100100
0CC18 C5 04                         .db #$C5, #%00000100
0CC1A B7 44                         .db #$B7, #%01000100
0CC1C B8 A4                         .db #$B8, #%10100100
0CC1E D9 05                         .db #$D9, #%00000101
0CC20 FF                            .db #LEVEL_END
0CC21                           
0CC21                           lvl_layout_09:
0CC21 81 04                         .db #$81, #%00000100
0CC23 D1 04                         .db #$D1, #%00000100
0CC25 32 C4                         .db #$32, #%11000100
0CC27 A2 C4                         .db #$A2, #%11000100
0CC29 C2 24                         .db #$C2, #%00100100
0CC2B 13 24                         .db #$13, #%00100100
0CC2D 53 04                         .db #$53, #%00000100
0CC2F C3 27                         .db #$C3, #%00100111
0CC31 15 6C                         .db #$15, #%01101100
0CC33 55 6C                         .db #$55, #%01101100
0CC35 95 6C                         .db #$95, #%01101100
0CC37 D5 0C                         .db #$D5, #%00001100
0CC39 27 C7                         .db #$27, #%11000111
0CC3B 47 C7                         .db #$47, #%11000111
0CC3D 67 C7                         .db #$67, #%11000111
0CC3F 87 C7                         .db #$87, #%11000111
0CC41 A7 C7                         .db #$A7, #%11000111
0CC43 C7 C7                         .db #$C7, #%11000111
0CC45 08 13                         .db #$08, #%00010011
0CC47 28 15                         .db #$28, #%00010101
0CC49 48 12                         .db #$48, #%00010010
0CC4B 68 15                         .db #$68, #%00010101
0CC4D 88 11                         .db #$88, #%00010001
0CC4F A8 10                         .db #$A8, #%00010000
0CC51 C8 14                         .db #$C8, #%00010100
0CC53 09 07                         .db #$09, #%00000111
0CC55 19 03                         .db #$19, #%00000011
0CC57 39 05                         .db #$39, #%00000101
0CC59 59 02                         .db #$59, #%00000010
0CC5B 79 05                         .db #$79, #%00000101
0CC5D 99 01                         .db #$99, #%00000001
0CC5F B9 00                         .db #$B9, #%00000000
0CC61 D9 04                         .db #$D9, #%00000100
0CC63 FF                            .db #LEVEL_END
0CC64                           
0CC64                           lvl_layout_10:
0CC64 00 02                         .db #$00, #%00000010
0CC66 10 C9                         .db #$10, #%11001001
0CC68 50 C9                         .db #$50, #%11001001
0CC6A 90 C9                         .db #$90, #%11001001
0CC6C D0 C9                         .db #$D0, #%11001001
0CC6E 31 C9                         .db #$31, #%11001001
0CC70 71 C9                         .db #$71, #%11001001
0CC72 B1 C9                         .db #$B1, #%11001001
0CC74 13 C9                         .db #$13, #%11001001
0CC76 53 C9                         .db #$53, #%11001001
0CC78 93 C9                         .db #$93, #%11001001
0CC7A D3 C9                         .db #$D3, #%11001001
0CC7C 34 C9                         .db #$34, #%11001001
0CC7E 74 C9                         .db #$74, #%11001001
0CC80 B4 C9                         .db #$B4, #%11001001
0CC82 16 C9                         .db #$16, #%11001001
0CC84 56 C9                         .db #$56, #%11001001
0CC86 96 C9                         .db #$96, #%11001001
0CC88 D6 C9                         .db #$D6, #%11001001
0CC8A 37 C9                         .db #$37, #%11001001
0CC8C 77 C9                         .db #$77, #%11001001
0CC8E B7 C9                         .db #$B7, #%11001001
0CC90 D8 12                         .db #$D8, #%00010010
0CC92 FF                            .db #LEVEL_END
0CC93                           
0CC93                           lvl_layout_11:
0CC93 00 65                         .db #$00, #%01100101
0CC95 40 45                         .db #$40, #%01000101
0CC97 50 A7                         .db #$50, #%10100111
0CC99 80 05                         .db #$80, #%00000101
0CC9B 90 A7                         .db #$90, #%10100111
0CC9D A0 65                         .db #$A0, #%01100101
0CC9F 01 43                         .db #$01, #%01000011
0CCA1 31 23                         .db #$31, #%00100011
0CCA3 61 A7                         .db #$61, #%10100111
0CCA5 81 A7                         .db #$81, #%10100111
0CCA7 A1 63                         .db #$A1, #%01100011
0CCA9 02 44                         .db #$02, #%01000100
0CCAB 32 44                         .db #$32, #%01000100
0CCAD 92 04                         .db #$92, #%00000100
0CCAF A2 64                         .db #$A2, #%01100100
0CCB1 03 40                         .db #$03, #%01000000
0CCB3 33 40                         .db #$33, #%01000000
0CCB5 63 A1                         .db #$63, #%10100001
0CCB7 83 A2                         .db #$83, #%10100010
0CCB9 93 00                         .db #$93, #%00000000
0CCBB A3 60                         .db #$A3, #%01100000
0CCBD 04 41                         .db #$04, #%01000001
0CCBF 34 41                         .db #$34, #%01000001
0CCC1 94 02                         .db #$94, #%00000010
0CCC3 A4 62                         .db #$A4, #%01100010
0CCC5 05 47                         .db #$05, #%01000111
0CCC7 35 67                         .db #$35, #%01100111
0CCC9 75 0A                         .db #$75, #%00001010
0CCCB 85 47                         .db #$85, #%01000111
0CCCD B5 47                         .db #$B5, #%01000111
0CCCF 06 E7                         .db #$06, #%11100111
0CCD1 16 5A                         .db #$16, #%01011010
0CCD3 26 11                         .db #$26, #%00010001
0CCD5 46 13                         .db #$46, #%00010011
0CCD7 56 1A                         .db #$56, #%00011010
0CCD9 66 14                         .db #$66, #%00010100
0CCDB 86 10                         .db #$86, #%00010000
0CCDD 96 5C                         .db #$96, #%01011100
0CCDF A6 12                         .db #$A6, #%00010010
0CCE1 C6 15                         .db #$C6, #%00010101
0CCE3 D6 E7                         .db #$D6, #%11100111
0CCE5 FF                            .db #LEVEL_END
0CCE6                           
0CCE6                           lvl_layout_12:
0CCE6 00 00                         .db #$00, #%00000000
0CCE8 50 C0                         .db #$50, #%11000000
0CCEA 80 00                         .db #$80, #%00000000
0CCEC 61 00                         .db #$61, #%00000000
0CCEE 22 C0                         .db #$22, #%11000000
0CCF0 82 E0                         .db #$82, #%11100000
0CCF2 C2 E0                         .db #$C2, #%11100000
0CCF4 A3 20                         .db #$A3, #%00100000
0CCF6 C3 10                         .db #$C3, #%00010000
0CCF8 04 00                         .db #$04, #%00000000
0CCFA 54 20                         .db #$54, #%00100000
0CCFC 15 0A                         .db #$15, #%00001010
0CCFE 25 C0                         .db #$25, #%11000000
0CD00 55 E0                         .db #$55, #%11100000
0CD02 86 20                         .db #$86, #%00100000
0CD04 C6 E0                         .db #$C6, #%11100000
0CD06 C7 A0                         .db #$C7, #%10100000
0CD08 88 00                         .db #$88, #%00000000
0CD0A 59 00                         .db #$59, #%00000000
0CD0C 89 20                         .db #$89, #%00100000
0CD0E D9 1A                         .db #$D9, #%00011010
0CD10 FF                            .db #LEVEL_END
0CD11                           
0CD11                           lvl_layout_13:
0CD11 10 E0                         .db #$10, #%11100000
0CD13 20 E0                         .db #$20, #%11100000
0CD15 30 E0                         .db #$30, #%11100000
0CD17 40 40                         .db #$40, #%01000000
0CD19 80 60                         .db #$80, #%01100000
0CD1B C0 E0                         .db #$C0, #%11100000
0CD1D D0 E0                         .db #$D0, #%11100000
0CD1F 41 40                         .db #$41, #%01000000
0CD21 71 60                         .db #$71, #%01100000
0CD23 52 60                         .db #$52, #%01100000
0CD25 A2 20                         .db #$A2, #%00100000
0CD27 43 60                         .db #$43, #%01100000
0CD29 83 60                         .db #$83, #%01100000
0CD2B 14 74                         .db #$14, #%01110100
0CD2D 54 74                         .db #$54, #%01110100
0CD2F 94 74                         .db #$94, #%01110100
0CD31 D4 14                         .db #$D4, #%00010100
0CD33 15 0D                         .db #$15, #%00001101
0CD35 55 0D                         .db #$55, #%00001101
0CD37 95 0D                         .db #$95, #%00001101
0CD39 D5 0D                         .db #$D5, #%00001101
0CD3B 26 0D                         .db #$26, #%00001101
0CD3D 46 0D                         .db #$46, #%00001101
0CD3F 66 0D                         .db #$66, #%00001101
0CD41 86 0D                         .db #$86, #%00001101
0CD43 A6 0D                         .db #$A6, #%00001101
0CD45 C6 0D                         .db #$C6, #%00001101
0CD47 07 10                         .db #$07, #%00010000
0CD49 37 0D                         .db #$37, #%00001101
0CD4B 77 0D                         .db #$77, #%00001101
0CD4D B7 0D                         .db #$B7, #%00001101
0CD4F 28 0D                         .db #$28, #%00001101
0CD51 48 0D                         .db #$48, #%00001101
0CD53 68 0D                         .db #$68, #%00001101
0CD55 88 0D                         .db #$88, #%00001101
0CD57 A8 0D                         .db #$A8, #%00001101
0CD59 C8 0D                         .db #$C8, #%00001101
0CD5B 19 0D                         .db #$19, #%00001101
0CD5D 59 0D                         .db #$59, #%00001101
0CD5F 99 0D                         .db #$99, #%00001101
0CD61 D9 0D                         .db #$D9, #%00001101
0CD63 FF                            .db #LEVEL_END
0CD64                           
0CD64                           lvl_layout_14:
0CD64 00 67                         .db #$00, #%01100111
0CD66 40 67                         .db #$40, #%01100111
0CD68 80 67                         .db #$80, #%01100111
0CD6A C0 27                         .db #$C0, #%00100111
0CD6C 01 27                         .db #$01, #%00100111
0CD6E 31 C7                         .db #$31, #%11000111
0CD70 51 C7                         .db #$51, #%11000111
0CD72 71 C7                         .db #$71, #%11000111
0CD74 91 C7                         .db #$91, #%11000111
0CD76 B1 C7                         .db #$B1, #%11000111
0CD78 D1 07                         .db #$D1, #%00000111
0CD7A 02 E7                         .db #$02, #%11100111
0CD7C 06 E7                         .db #$06, #%11100111
0CD7E 13 07                         .db #$13, #%00000111
0CD80 D3 07                         .db #$D3, #%00000111
0CD82 15 07                         .db #$15, #%00000111
0CD84 35 07                         .db #$35, #%00000111
0CD86 55 07                         .db #$55, #%00000111
0CD88 75 07                         .db #$75, #%00000111
0CD8A 95 07                         .db #$95, #%00000111
0CD8C B5 07                         .db #$B5, #%00000111
0CD8E D5 07                         .db #$D5, #%00000111
0CD90 17 07                         .db #$17, #%00000111
0CD92 37 C7                         .db #$37, #%11000111
0CD94 57 C7                         .db #$57, #%11000111
0CD96 77 C7                         .db #$77, #%11000111
0CD98 97 C7                         .db #$97, #%11000111
0CD9A B7 C7                         .db #$B7, #%11000111
0CD9C D7 07                         .db #$D7, #%00000111
0CD9E 19 07                         .db #$19, #%00000111
0CDA0 D9 07                         .db #$D9, #%00000111
0CDA2 22 4C                         .db #$22, #%01001100
0CDA4 62 4C                         .db #$62, #%01001100
0CDA6 A2 4C                         .db #$A2, #%01001100
0CDA8 24 0C                         .db #$24, #%00001100
0CDAA 44 0C                         .db #$44, #%00001100
0CDAC 64 0C                         .db #$64, #%00001100
0CDAE 84 0C                         .db #$84, #%00001100
0CDB0 A4 0C                         .db #$A4, #%00001100
0CDB2 C4 0C                         .db #$C4, #%00001100
0CDB4 26 0C                         .db #$26, #%00001100
0CDB6 46 0C                         .db #$46, #%00001100
0CDB8 66 0C                         .db #$66, #%00001100
0CDBA 86 0C                         .db #$86, #%00001100
0CDBC A6 0C                         .db #$A6, #%00001100
0CDBE C6 0C                         .db #$C6, #%00001100
0CDC0 28 4C                         .db #$28, #%01001100
0CDC2 68 4C                         .db #$68, #%01001100
0CDC4 A8 4C                         .db #$A8, #%01001100
0CDC6 32 04                         .db #$32, #%00000100
0CDC8 52 04                         .db #$52, #%00000100
0CDCA 72 04                         .db #$72, #%00000100
0CDCC 92 04                         .db #$92, #%00000100
0CDCE B2 04                         .db #$B2, #%00000100
0CDD0 38 04                         .db #$38, #%00000100
0CDD2 58 04                         .db #$58, #%00000100
0CDD4 78 04                         .db #$78, #%00000100
0CDD6 98 04                         .db #$98, #%00000100
0CDD8 B8 04                         .db #$B8, #%00000100
0CDDA FF                            .db #LEVEL_END
0CDDB                           
0CDDB                           lvl_layout_15:
0CDDB 00 7A                         .db #$00, #%01111010
0CDDD 40 7A                         .db #$40, #%01111010
0CDDF 80 7A                         .db #$80, #%01111010
0CDE1 C0 3A                         .db #$C0, #%00111010
0CDE3 31 04                         .db #$31, #%00000100
0CDE5 51 04                         .db #$51, #%00000100
0CDE7 81 04                         .db #$81, #%00000100
0CDE9 A1 04                         .db #$A1, #%00000100
0CDEB 05 E4                         .db #$05, #%11100100
0CDED 15 64                         .db #$15, #%01100100
0CDEF 55 64                         .db #$55, #%01100100
0CDF1 95 64                         .db #$95, #%01100100
0CDF3 D5 E4                         .db #$D5, #%11100100
0CDF5 26 04                         .db #$26, #%00000100
0CDF7 46 44                         .db #$46, #%01000100
0CDF9 76 64                         .db #$76, #%01100100
0CDFB C6 04                         .db #$C6, #%00000100
0CDFD 17 04                         .db #$17, #%00000100
0CDFF 37 64                         .db #$37, #%01100100
0CE01 77 44                         .db #$77, #%01000100
0CE03 B7 04                         .db #$B7, #%00000100
0CE05 18 64                         .db #$18, #%01100100
0CE07 58 64                         .db #$58, #%01100100
0CE09 98 64                         .db #$98, #%01100100
0CE0B FF                            .db #LEVEL_END
0CE0C                           
0CE0C                           lvl_layout_16:
0CE0C 10 E1                         .db #$10, #%11100001
0CE0E 20 9A                         .db #$20, #%10011010
0CE10 30 E1                         .db #$30, #%11100001
0CE12 40 E1                         .db #$40, #%11100001
0CE14 50 E1                         .db #$50, #%11100001
0CE16 60 C1                         .db #$60, #%11000001
0CE18 70 E1                         .db #$70, #%11100001
0CE1A 80 E1                         .db #$80, #%11100001
0CE1C 90 E1                         .db #$90, #%11100001
0CE1E A0 61                         .db #$A0, #%01100001
0CE20 21 C1                         .db #$21, #%11000001
0CE22 A1 1A                         .db #$A1, #%00011010
0CE24 B1 41                         .db #$B1, #%01000001
0CE26 A2 E1                         .db #$A2, #%11100001
0CE28 B2 E1                         .db #$B2, #%11100001
0CE2A C2 1A                         .db #$C2, #%00011010
0CE2C D2 E1                         .db #$D2, #%11100001
0CE2E 63 1A                         .db #$63, #%00011010
0CE30 C3 C1                         .db #$C3, #%11000001
0CE32 14 61                         .db #$14, #%01100001
0CE34 54 61                         .db #$54, #%01100001
0CE36 94 C1                         .db #$94, #%11000001
0CE38 15 61                         .db #$15, #%01100001
0CE3A 55 41                         .db #$55, #%01000001
0CE3C 85 1A                         .db #$85, #%00011010
0CE3E 16 41                         .db #$16, #%01000001
0CE40 46 1A                         .db #$46, #%00011010
0CE42 56 61                         .db #$56, #%01100001
0CE44 A6 61                         .db #$A6, #%01100001
0CE46 17 67                         .db #$17, #%01100111
0CE48 57 67                         .db #$57, #%01100111
0CE4A 97 67                         .db #$97, #%01100111
0CE4C D7 07                         .db #$D7, #%00000111
0CE4E 28 41                         .db #$28, #%01000001
0CE50 58 61                         .db #$58, #%01100001
0CE52 A8 41                         .db #$A8, #%01000001
0CE54 18 11                         .db #$18, #%00010001
0CE56 38 11                         .db #$38, #%00010001
0CE58 98 11                         .db #$98, #%00010001
0CE5A B8 11                         .db #$B8, #%00010001
0CE5C D8 11                         .db #$D8, #%00010001
0CE5E 59 09                         .db #$59, #%00001001
0CE60 FF                            .db #LEVEL_END
0CE61                           
0CE61                           lvl_layout_17:
0CE61 10 EA                         .db #$10, #%11101010
0CE63 20 E2                         .db #$20, #%11100010
0CE65 30 62                         .db #$30, #%01100010
0CE67 70 02                         .db #$70, #%00000010
0CE69 80 6A                         .db #$80, #%01101010
0CE6B 90 22                         .db #$90, #%00100010
0CE6D 01 AA                         .db #$01, #%10101010
0CE6F 31 6A                         .db #$31, #%01101010
0CE71 81 2A                         .db #$81, #%00101010
0CE73 A1 02                         .db #$A1, #%00000010
0CE75 C1 02                         .db #$C1, #%00000010
0CE77 D1 0A                         .db #$D1, #%00001010
0CE79 32 EA                         .db #$32, #%11101010
0CE7B 42 6A                         .db #$42, #%01101010
0CE7D 62 02                         .db #$62, #%00000010
0CE7F 92 6A                         .db #$92, #%01101010
0CE81 D2 E2                         .db #$D2, #%11100010
0CE83 43 1A                         .db #$43, #%00011010
0CE85 53 CA                         .db #$53, #%11001010
0CE87 73 02                         .db #$73, #%00000010
0CE89 83 4A                         .db #$83, #%01001010
0CE8B B3 CA                         .db #$B3, #%11001010
0CE8D C3 EA                         .db #$C3, #%11101010
0CE8F 04 0A                         .db #$04, #%00001010
0CE91 14 A2                         .db #$14, #%10100010
0CE93 24 AA                         .db #$24, #%10101010
0CE95 44 AA                         .db #$44, #%10101010
0CE97 64 6A                         .db #$64, #%01101010
0CE99 65 6A                         .db #$65, #%01101010
0CE9B A5 AA                         .db #$A5, #%10101010
0CE9D 06 EA                         .db #$06, #%11101010
0CE9F 16 62                         .db #$16, #%01100010
0CEA1 66 22                         .db #$66, #%00100010
0CEA3 86 2A                         .db #$86, #%00101010
0CEA5 17 42                         .db #$17, #%01000010
0CEA7 47 12                         .db #$47, #%00010010
0CEA9 57 6A                         .db #$57, #%01101010
0CEAB 97 4A                         .db #$97, #%01001010
0CEAD A7 02                         .db #$A7, #%00000010
0CEAF 18 02                         .db #$18, #%00000010
0CEB1 28 0A                         .db #$28, #%00001010
0CEB3 38 22                         .db #$38, #%00100010
0CEB5 68 2A                         .db #$68, #%00101010
0CEB7 88 62                         .db #$88, #%01100010
0CEB9 C8 0A                         .db #$C8, #%00001010
0CEBB D8 02                         .db #$D8, #%00000010
0CEBD 19 2A                         .db #$19, #%00101010
0CEBF 39 2A                         .db #$39, #%00101010
0CEC1 69 42                         .db #$69, #%01000010
0CEC3 99 2A                         .db #$99, #%00101010
0CEC5 B9 42                         .db #$B9, #%01000010
0CEC7 FF                            .db #LEVEL_END
0CEC8                           
0CEC8                           lvl_layout_18:
0CEC8 00 12                         .db #$00, #%00010010
0CECA 40 1A                         .db #$40, #%00011010
0CECC 50 11                         .db #$50, #%00010001
0CECE 70 1A                         .db #$70, #%00011010
0CED0 80 10                         .db #$80, #%00010000
0CED2 D0 13                         .db #$D0, #%00010011
0CED4 01 1A                         .db #$01, #%00011010
0CED6 22 15                         .db #$22, #%00010101
0CED8 A2 1A                         .db #$A2, #%00011010
0CEDA B2 14                         .db #$B2, #%00010100
0CEDC 03 67                         .db #$03, #%01100111
0CEDE 43 67                         .db #$43, #%01100111
0CEE0 83 67                         .db #$83, #%01100111
0CEE2 24 09                         .db #$24, #%00001001
0CEE4 74 0D                         .db #$74, #%00001101
0CEE6 C4 0A                         .db #$C4, #%00001010
0CEE8 05 A7                         .db #$05, #%10100111
0CEEA 45 27                         .db #$45, #%00100111
0CEEC 95 27                         .db #$95, #%00100111
0CEEE 16 C7                         .db #$16, #%11000111
0CEF0 36 67                         .db #$36, #%01100111
0CEF2 86 67                         .db #$86, #%01100111
0CEF4 D6 07                         .db #$D6, #%00000111
0CEF6 07 A3                         .db #$07, #%10100011
0CEF8 27 23                         .db #$27, #%00100011
0CEFA 47 C7                         .db #$47, #%11000111
0CEFC 57 A0                         .db #$57, #%10100000
0CEFE 67 A7                         .db #$67, #%10100111
0CF00 77 20                         .db #$77, #%00100000
0CF02 97 C7                         .db #$97, #%11000111
0CF04 A7 A4                         .db #$A7, #%10100100
0CF06 B7 A7                         .db #$B7, #%10100111
0CF08 C7 24                         .db #$C7, #%00100100
0CF0A 28 0B                         .db #$28, #%00001011
0CF0C 38 A3                         .db #$38, #%10100011
0CF0E 78 08                         .db #$78, #%00001000
0CF10 88 A3                         .db #$88, #%10100011
0CF12 C8 0C                         .db #$C8, #%00001100
0CF14 D8 A4                         .db #$D8, #%10100100
0CF16 09 43                         .db #$09, #%01000011
0CF18 59 40                         .db #$59, #%01000000
0CF1A A9 44                         .db #$A9, #%01000100
0CF1C FF                            .db #LEVEL_END
0CF1D                           
0CF1D                           lvl_layout_19:
0CF1D 11 A8                         .db #$11, #%10101000
0CF1F 21 68                         .db #$21, #%01101000
0CF21 81 28                         .db #$81, #%00101000
0CF23 B1 48                         .db #$B1, #%01001000
0CF25 22 48                         .db #$22, #%01001000
0CF27 62 68                         .db #$62, #%01101000
0CF29 B2 28                         .db #$B2, #%00101000
0CF2B 23 28                         .db #$23, #%00101000
0CF2D 83 28                         .db #$83, #%00101000
0CF2F B3 28                         .db #$B3, #%00101000
0CF31 04 E8                         .db #$04, #%11101000
0CF33 24 08                         .db #$24, #%00001000
0CF35 44 08                         .db #$44, #%00001000
0CF37 64 E8                         .db #$64, #%11101000
0CF39 84 E8                         .db #$84, #%11101000
0CF3B C4 A8                         .db #$C4, #%10101000
0CF3D D4 E8                         .db #$D4, #%11101000
0CF3F 15 48                         .db #$15, #%01001000
0CF41 55 C8                         .db #$55, #%11001000
0CF43 75 C8                         .db #$75, #%11001000
0CF45 A5 08                         .db #$A5, #%00001000
0CF47 36 08                         .db #$36, #%00001000
0CF49 B6 08                         .db #$B6, #%00001000
0CF4B 27 48                         .db #$27, #%01001000
0CF4D 97 28                         .db #$97, #%00101000
0CF4F C7 08                         .db #$C7, #%00001000
0CF51 09 61                         .db #$09, #%01100001
0CF53 19 11                         .db #$19, #%00010001
0CF55 49 61                         .db #$49, #%01100001
0CF57 89 31                         .db #$89, #%00110001
0CF59 A9 61                         .db #$A9, #%01100001
0CF5B FF                            .db #LEVEL_END
0CF5C                           
0CF5C                           lvl_layout_20:
0CF5C 00 60                         .db #$00, #%01100000
0CF5E 10 1A                         .db #$10, #%00011010
0CF60 40 A7                         .db #$40, #%10100111
0CF62 50 20                         .db #$50, #%00100000
0CF64 70 1A                         .db #$70, #%00011010
0CF66 80 40                         .db #$80, #%01000000
0CF68 B0 1A                         .db #$B0, #%00011010
0CF6A C0 20                         .db #$C0, #%00100000
0CF6C 01 40                         .db #$01, #%01000000
0CF6E 31 1A                         .db #$31, #%00011010
0CF70 A1 40                         .db #$A1, #%01000000
0CF72 D1 1A                         .db #$D1, #%00011010
0CF74 43 67                         .db #$43, #%01100111
0CF76 83 47                         .db #$83, #%01000111
0CF78 44 A7                         .db #$44, #%10100111
0CF7A 54 25                         .db #$54, #%00100101
0CF7C 94 08                         .db #$94, #%00001000
0CF7E A4 A7                         .db #$A4, #%10100111
0CF80 55 05                         .db #$55, #%00000101
0CF82 65 08                         .db #$65, #%00001000
0CF84 06 27                         .db #$06, #%00100111
0CF86 36 67                         .db #$36, #%01100111
0CF88 76 28                         .db #$76, #%00101000
0CF8A A6 27                         .db #$A6, #%00100111
0CF8C D6 07                         .db #$D6, #%00000111
0CF8E A7 A7                         .db #$A7, #%10100111
0CF90 08 60                         .db #$08, #%01100000
0CF92 09 60                         .db #$09, #%01100000
0CF94 18 A7                         .db #$18, #%10100111
0CF96 48 A7                         .db #$48, #%10100111
0CF98 58 47                         .db #$58, #%01000111
0CF9A 88 27                         .db #$88, #%00100111
0CF9C B8 20                         .db #$B8, #%00100000
0CF9E D8 1A                         .db #$D8, #%00011010
0CFA0 59 15                         .db #$59, #%00010101
0CFA2 69 60                         .db #$69, #%01100000
0CFA4 A9 60                         .db #$A9, #%01100000
0CFA6 FF                            .db #LEVEL_END
0CFA7                           
0CFA7                           lvl_layout_21:
0CFA7 00 13                         .db #$00, #%00010011
0CFA9 10 11                         .db #$10, #%00010001
0CFAB 20 67                         .db #$20, #%01100111
0CFAD 60 67                         .db #$60, #%01100111
0CFAF A0 47                         .db #$A0, #%01000111
0CFB1 D0 15                         .db #$D0, #%00010101
0CFB3 32 63                         .db #$32, #%01100011
0CFB5 72 05                         .db #$72, #%00000101
0CFB7 82 43                         .db #$82, #%01000011
0CFB9 B2 43                         .db #$B2, #%01000011
0CFBB 33 03                         .db #$33, #%00000011
0CFBD 43 2A                         .db #$43, #%00101010
0CFBF 63 7A                         .db #$63, #%01111010
0CFC1 73 2A                         .db #$73, #%00101010
0CFC3 A3 7A                         .db #$A3, #%01111010
0CFC5 34 63                         .db #$34, #%01100011
0CFC7 74 63                         .db #$74, #%01100011
0CFC9 B4 43                         .db #$B4, #%01000011
0CFCB 06 63                         .db #$06, #%01100011
0CFCD 46 63                         .db #$46, #%01100011
0CFCF 86 63                         .db #$86, #%01100011
0CFD1 C6 C3                         .db #$C6, #%11000011
0CFD3 07 7A                         .db #$07, #%01111010
0CFD5 47 7A                         .db #$47, #%01111010
0CFD7 67 0A                         .db #$67, #%00001010
0CFD9 87 7A                         .db #$87, #%01111010
0CFDB 08 13                         .db #$08, #%00010011
0CFDD 18 43                         .db #$18, #%01000011
0CFDF 48 63                         .db #$48, #%01100011
0CFE1 88 63                         .db #$88, #%01100011
0CFE3 FF                            .db #LEVEL_END
0CFE4                           
0CFE4                           lvl_layout_22:
0CFE4 00 7A                         .db #$00, #%01111010
0CFE6 40 7A                         .db #$40, #%01111010
0CFE8 80 7A                         .db #$80, #%01111010
0CFEA C0 3A                         .db #$C0, #%00111010
0CFEC 13 67                         .db #$13, #%01100111
0CFEE 83 A7                         .db #$83, #%10100111
0CFF0 B3 07                         .db #$B3, #%00000111
0CFF2 14 07                         .db #$14, #%00000111
0CFF4 44 07                         .db #$44, #%00000111
0CFF6 A4 07                         .db #$A4, #%00000111
0CFF8 15 A5                         .db #$15, #%10100101
0CFFA 45 A5                         .db #$45, #%10100101
0CFFC 85 25                         .db #$85, #%00100101
0CFFE 86 05                         .db #$86, #%00000101
0D000 A6 05                         .db #$A6, #%00000101
0D002 17 11                         .db #$17, #%00010001
0D004 47 A1                         .db #$47, #%10100001
0D006 87 A1                         .db #$87, #%10100001
0D008 B7 A1                         .db #$B7, #%10100001
0D00A 18 41                         .db #$18, #%01000001
0D00C 68 01                         .db #$68, #%00000001
0D00E D8 01                         .db #$D8, #%00000001
0D010 FF                            .db #LEVEL_END
0D011                           
0D011                           lvl_layout_23:
0D011 00 71                         .db #$00, #%01110001
0D013 40 11                         .db #$40, #%00010001
0D015 50 43                         .db #$50, #%01000011
0D017 80 D1                         .db #$80, #%11010001
0D019 90 E3                         .db #$90, #%11100011
0D01B A0 63                         .db #$A0, #%01100011
0D01D 01 63                         .db #$01, #%01100011
0D01F 41 63                         .db #$41, #%01100011
0D021 A1 63                         .db #$A1, #%01100011
0D023 02 63                         .db #$02, #%01100011
0D025 42 63                         .db #$42, #%01100011
0D027 62 11                         .db #$62, #%00010001
0D029 A2 67                         .db #$A2, #%01100111
0D02B 04 63                         .db #$04, #%01100011
0D02D 44 23                         .db #$44, #%00100011
0D02F 64 D1                         .db #$64, #%11010001
0D031 74 E3                         .db #$74, #%11100011
0D033 84 F1                         .db #$84, #%11110001
0D035 94 E3                         .db #$94, #%11100011
0D037 A4 C7                         .db #$A4, #%11000111
0D039 B4 23                         .db #$B4, #%00100011
0D03B 05 63                         .db #$05, #%01100011
0D03D 45 23                         .db #$45, #%00100011
0D03F 06 71                         .db #$06, #%01110001
0D041 46 11                         .db #$46, #%00010001
0D043 56 E3                         .db #$56, #%11100011
0D045 D6 07                         .db #$D6, #%00000111
0D047 17 D1                         .db #$17, #%11010001
0D049 27 43                         .db #$27, #%01000011
0D04B 67 D1                         .db #$67, #%11010001
0D04D A7 C7                         .db #$A7, #%11000111
0D04F C7 A7                         .db #$C7, #%10100111
0D051 D7 B3                         .db #$D7, #%10110011
0D053 28 43                         .db #$28, #%01000011
0D055 78 43                         .db #$78, #%01000011
0D057 29 43                         .db #$29, #%01000011
0D059 79 43                         .db #$79, #%01000011
0D05B FF                           .db #LEVEL_END
0D05C                           
0D05C                           lvl_layout_24:
0D05C 02 67                         .db #$02, #%01100111
0D05E 42 67                         .db #$42, #%01100111
0D060 82 67                         .db #$82, #%01100111
0D062 05 67                         .db #$05, #%01100111
0D064 45 67                         .db #$45, #%01100111
0D066 85 67                         .db #$85, #%01100111
0D068 08 67                         .db #$08, #%01100111
0D06A 48 67                         .db #$48, #%01100111
0D06C 88 67                         .db #$88, #%01100111
0D06E 30 E7                         .db #$30, #%11100111
0D070 70 E7                         .db #$70, #%11100111
0D072 B0 E7                         .db #$B0, #%11100111
0D074 34 E7                         .db #$34, #%11100111
0D076 74 E7                         .db #$74, #%11100111
0D078 B4 E7                         .db #$B4, #%11100111
0D07A 20 13                         .db #$20, #%00010011
0D07C 40 10                         .db #$40, #%00010000
0D07E 80 02                         .db #$80, #%00000010
0D080 41 05                         .db #$41, #%00000101
0D082 B1 09                         .db #$B1, #%00001001
0D084 02 09                         .db #$02, #%00001001
0D086 52 0C                         .db #$52, #%00001100
0D088 13 11                         .db #$13, #%00010001
0D08A 33 04                         .db #$33, #%00000100
0D08C 74 0C                         .db #$74, #%00001100
0D08E B4 08                         .db #$B4, #%00001000
0D090 15 09                         .db #$15, #%00001001
0D092 55 0C                         .db #$55, #%00001100
0D094 95 0C                         .db #$95, #%00001100
0D096 47 03                         .db #$47, #%00000011
0D098 A7 12                         .db #$A7, #%00010010
0D09A 18 15                         .db #$18, #%00010101
0D09C 09 05                         .db #$09, #%00000101
0D09E 19 03                         .db #$19, #%00000011
0D0A0 FF                            .db #LEVEL_END
0D0A1                           
0D0A1                           lvl_layout_25:
0D0A1 00 12                         .db #$00, #%00010010
0D0A3 10 63                         .db #$10, #%01100011
0D0A5 60 63                         .db #$60, #%01100011
0D0A7 A0 07                         .db #$A0, #%00000111
0D0A9 01 11                         .db #$01, #%00010001
0D0AB A1 02                         .db #$A1, #%00000010
0D0AD 02 67                         .db #$02, #%01100111
0D0AF 42 07                         .db #$42, #%00000111
0D0B1 62 67                         .db #$62, #%01100111
0D0B3 A2 C7                         .db #$A2, #%11000111
0D0B5 03 61                         .db #$03, #%01100001
0D0B7 43 01                         .db #$43, #%00000001
0D0B9 63 61                         .db #$63, #%01100001
0D0BB A6 E7                         .db #$A6, #%11100111
0D0BD B6 47                         .db #$B6, #%01000111
0D0BF C6 01                         .db #$C6, #%00000001
0D0C1 B7 42                         .db #$B7, #%01000010
0D0C3 B8 42                         .db #$B8, #%01000010
0D0C5 C8 0A                         .db #$C8, #%00001010
0D0C7 09 7A                         .db #$09, #%01111010
0D0C9 49 7A                         .db #$49, #%01111010
0D0CB 89 3A                         .db #$89, #%00111010
0D0CD B9 42                         .db #$B9, #%01000010
0D0CF FF                            .db #LEVEL_END
0D0D0                           
0D0D0                           ;; Level layout address pointers
0D0D0                           tbl_lvl_layout_hi:
0D0D0 C9 CA CA CA CA                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D0D5 CB CB CB CC CC                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D0DA CC CC CD CD CD                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D0DF CE CE CE CF CF                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D0E4 CF CF D0 D0 D0                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D0E9                           
0D0E9                           tbl_lvl_layout_lo:
0D0E9 F1 0C 41 74 E5                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D0EE 20 A9 EA 21 64                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D0F3 93 E6 11 64 DB                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D0F8 0C 61 C8 1D 5C                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D0FD A7 E4 11 5C A1                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D102                           
0D102                           ;; Ball start position (#$YX)
0D102                           tbl_lvl_ball_startpos:
0D102 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D107 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D10C 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D111 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D116 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D11B                               
0D11B                           ;; Ball start direction, color and tile score
0D11B                           ;; #% ccc v tttt
0D11B                           ;;    ||| | ++++-- tile score
0D11B                           ;;    ||| +------- vertical direction, up (0) or down
0D11B                           ;;    +++--------- color (CBRYGM)
0D11B                           tbl_lvl_ball_init:
0D11B 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D120 70 50 B0 80 50                .db #%01110000, #%01010000, #%10110000, #%10000000, #%01010000
0D125 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D12A 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D12F 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D134                           
0D134                           
0D134                           
0D134                           ;; Helper table to multiply values by 64
0D134                           tbl_Times64:
0D134 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D138                           
0D138                           
0D138                           ;; Metatile ID to CHR data mapper
0D138                           tbl_GametileTopLeft:
0D138 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D142                           
0D142                           tbl_GametileTopRight:
0D142 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D14C                           
0D14C                           tbl_GametileBottomLeft:
0D14C 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D156                           
0D156                           tbl_GametileBottomRight:
0D156 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D160                           
0D160                           ;; Metatile ID to RAM byte data mapper
0D160                           tbl_GameTileRamByte:
0D160 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D165                           
0D165                           ;; HUD text data
0D165                           tbl_HudText:
0D165 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D16D 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D174 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D17C 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D181                           
0D181                           ;; NMI handler
0D181                           NMI:
0D181                               .include "interrupt/nmi.asm"
0D181                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D181                           ;;
0D181                           ;; include/nmi.asm
0D181                           ;;
0D181                           ;; Non-maskable interrupt script. This script is being executed
0D181                           ;; when vBlank hits.
0D181                           ;;
0D181                           ;;
0D181                           
0D181                               ;; Preserve accumulator through stack
0D181 48                            PHA
0D182                           
0D182                               ;; Should NMI be skipped?
0D182 A5 13                         LDA skip_nmi
0D184 F0 03                         BEQ +
0D186 4C 14 D2                          JMP +skip_nmi
0D189                               +
0D189                           
0D189                               ;; When in NMI, skip additional NMI requests
0D189 A9 01                         LDA #$01
0D18B 85 13                         STA skip_nmi
0D18D                           
0D18D                               ;; Preserve X, Y, and PC through stack
0D18D 8A                            TXA
0D18E 48                            PHA
0D18F 98                            TYA
0D190 48                            PHA
0D191 08                            PHP
0D192                               
0D192                               ;; Check forced NMI skip
0D192 A5 14                         LDA force_skip_nmi
0D194 F0 03                         BEQ +
0D196 4C 05 D2                          JMP +force_skip_nmi
0D199                               +
0D199                           
0D199                               ;; Update PPU mask
0D199                               ;LDA #$00
0D199                               ;STA PPU_CTRL
0D199 A5 12                         LDA soft_ppu_mask
0D19B 8D 01 20                      STA PPU_MASK
0D19E                               
0D19E                               
0D19E                               ;; Additional PPU updates go here
0D19E                               .include "game/test/tile_update_nmi.asm"
0D19E                           
0D19E                               ;; Check if ppu_buffer needs updating
0D19E A5 2F                         LDA ppu_buffer_update
0D1A0 D0 03                         BNE +
0D1A2 4C E4 D1                          JMP +no_ppu_buffer_update
0D1A5                               +
0D1A5                           
0D1A5                               ;; Reset ppu control register and mask
0D1A5 A2 00                         LDX #$00
0D1A7 8E 00 20                      STX PPU_CTRL
0D1AA 8E 01 20                      STX PPU_MASK
0D1AD                           
0D1AD                               ;; Set up loop
0D1AD                               -
0D1AD                                   ;; Reset hi/lo latch
0D1AD 2C 02 20                          BIT PPU_STATUS
0D1B0                           
0D1B0                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D1B0 BD 00 03                          LDA ppu_buffer,x
0D1B3 8D 06 20                          STA PPU_ADDR
0D1B6 E8                                INX
0D1B7 BD 00 03                          LDA ppu_buffer,x
0D1BA 8D 06 20                          STA PPU_ADDR
0D1BD                           
0D1BD                                   ;; Write ppu_buffer data to PPU_ADDR
0D1BD E8                                INX
0D1BE BD 00 03                          LDA ppu_buffer,x
0D1C1 8D 07 20                          STA PPU_DATA
0D1C4                           
0D1C4                                   ;; Check if updating is done (eg. X is at pointer)
0D1C4 E8                                INX
0D1C5 E4 30                             CPX ppu_buffer_pointer
0D1C7 F0 03                             BEQ +
0D1C9 4C AD D1                      JMP -
0D1CC                           +
0D1CC                           
0D1CC                               ;; Reset ppu buffer update and pointer
0D1CC A9 00                         LDA #$00
0D1CE 85 2F                         STA ppu_buffer_update
0D1D0 85 30                         STA ppu_buffer_pointer
0D1D2                               
0D1D2                               ;; Reset scrolling position
0D1D2 8D 05 20                      STA PPU_SCROLL
0D1D5 8D 05 20                      STA PPU_SCROLL
0D1D8                           
0D1D8                               ;; Restore ppu control register and mask
0D1D8 A9 90                         LDA #%10010000
0D1DA 8D 00 20                      STA PPU_CTRL
0D1DD A5 12                         LDA soft_ppu_mask
0D1DF 8D 01 20                      STA PPU_MASK
0D1E2 A9 00                         LDA #$00
0D1E4                           
0D1E4                           ;; Continue other NMI stuff
0D1E4                           +no_ppu_buffer_update:
0D1E4                               .include "game/test/show_animation_nmi.asm"
0D1E4                               ;; Reset sprite RAM, draw sprites
0D1E4 8D 03 20                      STA OAM_ADDR
0D1E7 A9 02                         LDA #$02
0D1E9 8D 14 40                      STA OAM_DMA
0D1EC                           
0D1EC A0 04                         LDY #MAX_ANIMATIONS
0D1EE A2 00                         LDX #$00
0D1F0                               -
0D1F0 BD 30 03                          LDA explosion_framecounter,x
0D1F3 F0 03                             BEQ +
0D1F5 DE 30 03                              DEC explosion_framecounter,x
0D1F8                                   +
0D1F8 E8                                INX
0D1F9 88                                DEY
0D1FA F0 03                             BEQ +done        
0D1FC 4C F0 D1                      JMP -
0D1FF                           +done:
0D1FF                               
0D1FF A5 33                         LDA nudge_counter
0D201 F0 02                         BEQ +
0D203 C6 33                             DEC nudge_counter
0D205                               +
0D205                           
0D205                           ;; This is what happens when we forced nmi skip
0D205                           +force_skip_nmi:
0D205                           
0D205                               ;; Increase frame counters
0D205 E6 15                         INC frame_counter
0D207                           
0D207                               ;; reset ball_update_position
0D207 A9 00                         LDA #$00
0D209 85 2B                         STA ball_update_position
0D20B                           
0D20B                               ;; Don't skip next NMI request
0D20B A9 00                         LDA #$00
0D20D 85 13                         STA skip_nmi
0D20F                           
0D20F                               ;; Restore X, Y and PC from stack
0D20F 28                            PLP
0D210 68                            PLA
0D211 A8                            TAY
0D212 68                            PLA
0D213 AA                            TAX
0D214                           
0D214                           +skip_nmi:
0D214                               ;; Restore accumulator from stack
0D214 68                            PLA
0D215                           
0D215                               ;; Return
0D215 40                            RTI
0D216                           
0D216                           ;; IRQ handler (empty)
0D216                           IRQ:
0D216                               .include "interrupt/irq.asm"
0D216 40                            RTI0D217                           
0D217                           ;; Interrupt vectors
0D217 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 81 D1                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 16 D2                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
