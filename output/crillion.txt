	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$06
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Counters 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           
00041                           ;; Current level (doubles as level select variable)
00041                           current_level          .dsb 1
00042                           
00042                           ;; Tile type the ball is currently colliding with
00042                           colliding_tile         .dsb 1
00043                           
00043                           ;; Number of blocks left on screen
00043                           blocks_left            .dsb 1
00044                           
00044                           ;; Sound control variables
00044                           max_noise              .dsb 1
00045                           sweep_noise            .dsb 1
00046                           current_noise          .dsb 1
00047                           noise_timer            .dsb 1
00048                           do_beeps               .dsb 1
00049                           
00049                           ;; Additional NMI check for timed PPU fade
00049                           check_nmi              .dsb 1
0004A                               0004A                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                           
00384                               ;; move block flags
00384                               ;; #% ccc .. h d
00384                               ;;    ||| || | +-- direction: up/left (1) or right/down (0) 
00384                               ;;    ||| || +---- direction: horizontal (1) or vertical (0)
00384                               ;;    ||| ++------ (unused)
00384                               ;;    +++--------- color (1-6)
00384                               move_block_flags          .dsb 4
00388                               
00388                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 1B C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 1B C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 41                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3D                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 FE C4                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 38                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 38                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 5D CF                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 5A CF                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 42 C6                      JSR sub_DisableRendering
0C08A 20 05 C8                      JSR sub_JumpToPointer
0C08D 20 56 C6                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 38                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 38                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 38                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C EE C3                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3D                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA sprites_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C C9 C2                          JMP +skipSpriteMovement
0C0BE                               +
0C0BE                           
0C0BE                               ;; Check if ball is frozen
0C0BE A5 37                         LDA ball_flags
0C0C0 29 04                         AND #BALL_IS_FROZEN
0C0C2 F0 03                         BEQ +
0C0C4 4C 97 C2                          JMP +skipBallMovement
0C0C7                               +
0C0C7                           
0C0C7                               ;; Move the ball
0C0C7                               .include "game/include/main/move_ball.asm"
0C0C7                           
0C0C7                               ;; Check if ball goes up or down
0C0C7 A5 37                         LDA ball_flags
0C0C9 29 10                         AND #BALL_MOVES_DOWN
0C0CB F0 2B                         BEQ +moveBallUp
0C0CD                           
0C0CD                           
0C0CD                           +moveBallDown:
0C0CD                               ;; update the low byte
0C0CD A5 1A                         LDA ball_ypos_lo
0C0CF 85 1C                         STA ball_ypos_lo_prev
0C0D1 18                            CLC
0C0D2 69 F0                         ADC #BALL_SPEED_LO
0C0D4 85 1A                         STA ball_ypos_lo
0C0D6                           
0C0D6                               ;; update the high byte with carry
0C0D6 A5 19                         LDA ball_ypos_hi
0C0D8 85 1B                         STA ball_ypos_hi_prev
0C0DA 69 01                         ADC #BALL_SPEED_HI
0C0DC 85 19                         STA ball_ypos_hi
0C0DE                               
0C0DE                               ;; Check bottom bound
0C0DE C9 C8                         CMP #BOUND_BOTTOM
0C0E0 90 3C                         BCC +checkHorizontalMovement
0C0E2 F0 3A                         BEQ +checkHorizontalMovement
0C0E4                           
0C0E4                           
0C0E4                               ;; Change ball direction to "up"
0C0E4 A9 C8                         LDA #BOUND_BOTTOM
0C0E6 38                            SEC
0C0E7 E9 01                         SBC #$01
0C0E9 85 19                         STA ball_ypos_hi
0C0EB A9 00                         LDA #$00
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF A5 37                         LDA ball_flags
0C0F1 29 EF                         AND #MOVE_BALL_UP
0C0F3 85 37                         STA ball_flags
0C0F5 4C 1E C1                      JMP +checkHorizontalMovement
0C0F8                           
0C0F8                           
0C0F8                           +moveBallUp:
0C0F8                               ;; update the low byte
0C0F8 A5 1A                         LDA ball_ypos_lo
0C0FA 85 1C                         STA ball_ypos_lo_prev
0C0FC 38                            SEC
0C0FD E9 F0                         SBC #BALL_SPEED_LO
0C0FF 85 1A                         STA ball_ypos_lo
0C101                           
0C101                               ;; update the high byte with carry
0C101 A5 19                         LDA ball_ypos_hi
0C103 85 1B                         STA ball_ypos_hi_prev
0C105 E9 01                         SBC #BALL_SPEED_HI
0C107 85 19                         STA ball_ypos_hi
0C109                               
0C109                               ;; Check top bound
0C109 C9 30                         CMP #BOUND_TOP
0C10B B0 11                         BCS +checkHorizontalMovement
0C10D                           
0C10D                               ;; Change ball direction to "down"
0C10D A9 30                         LDA #BOUND_TOP
0C10F 18                            CLC
0C110 69 01                         ADC #$01
0C112 85 19                         STA ball_ypos_hi
0C114 A9 00                         LDA #$00
0C116 85 1A                         STA ball_ypos_lo
0C118 A5 37                         LDA ball_flags
0C11A 09 10                         ORA #MOVE_BALL_DOWN
0C11C 85 37                         STA ball_flags
0C11E                           
0C11E                           
0C11E                           +checkHorizontalMovement:
0C11E                           
0C11E                               ;; Check if ball is being nudged
0C11E A5 3E                         LDA nudge_timer
0C120 D0 41                         BNE +doneBallMovement
0C122                           
0C122                               ;; Check if left button is held
0C122 A5 0F                         LDA buttons_held
0C124 29 02                         AND #BUTTON_LEFT
0C126 F0 1B                         BEQ +
0C128                                   ;; update the low byte
0C128 A5 18                             LDA ball_xpos_lo
0C12A 38                                SEC
0C12B E9 F0                             SBC #BALL_SPEED_LO
0C12D 85 18                             STA ball_xpos_lo
0C12F                           
0C12F                                   ;; update the high byte
0C12F A5 17                             LDA ball_xpos_hi
0C131 E9 01                             SBC #BALL_SPEED_HI
0C133 85 17                             STA ball_xpos_hi
0C135                                   
0C135                                   ;; Check left bound
0C135 C9 10                             CMP #BOUND_LEFT
0C137 B0 2A                             BCS +doneBallMovement
0C139                                   
0C139                                   ;; Set flag to nudge right and set nudge timer
0C139 A5 37                             LDA ball_flags
0C13B 09 02                             ORA #NUDGE_BALL_RIGHT
0C13D 20 FE C7                          JSR sub_InitiateNudge
0C140                           
0C140 4C 63 C1                          JMP +doneBallMovement        
0C143                               +
0C143                           
0C143                               ;; Check if right button is held
0C143 A5 0F                         LDA buttons_held
0C145 29 01                         AND #BUTTON_RIGHT
0C147 F0 1A                         BEQ +
0C149                                   ;; update the low byte
0C149 A5 18                             LDA ball_xpos_lo
0C14B 18                                CLC
0C14C 69 F0                             ADC #BALL_SPEED_LO
0C14E 85 18                             STA ball_xpos_lo
0C150                           
0C150                                   ;; update the high byte
0C150 A5 17                             LDA ball_xpos_hi
0C152 69 01                             ADC #BALL_SPEED_HI
0C154 85 17                             STA ball_xpos_hi     
0C156                           
0C156                                  ;; Check right bound
0C156 C9 E8                             CMP #BOUND_RIGHT
0C158 90 09                             BCC +doneBallMovement
0C15A F0 07                             BEQ +doneBallMovement
0C15C                                   
0C15C                                   ;; Set flag to nudge left and set nudge timer
0C15C A5 37                             LDA ball_flags
0C15E 29 FD                             AND #NUDGE_BALL_LEFT
0C160 20 FE C7                          JSR sub_InitiateNudge
0C163                               +
0C163                           
0C163                           
0C163                           +doneBallMovement:
0C163                           
0C163                               ;; Check nudge
0C163 A5 3E                         LDA nudge_timer
0C165 F0 23                         BEQ +doneBallNudging
0C167 A5 37                             LDA ball_flags
0C169 29 02                             AND #NUDGE_BALL_RIGHT
0C16B F0 10                             BEQ +nudgeBallLeft
0C16D                                   
0C16D                                       ;; update the low byte
0C16D A5 18                                 LDA ball_xpos_lo
0C16F 18                                    CLC
0C170 69 F0                                 ADC #BALL_SPEED_LO
0C172 85 18                                 STA ball_xpos_lo
0C174                           
0C174                                       ;; update the high byte
0C174 A5 17                                 LDA ball_xpos_hi
0C176 69 01                                 ADC #BALL_SPEED_HI
0C178 85 17                                 STA ball_xpos_hi  
0C17A 4C 8A C1                              JMP +doneBallNudging
0C17D                                   +nudgeBallLeft:
0C17D                                   
0C17D                                   ;; update the low byte
0C17D A5 18                             LDA ball_xpos_lo
0C17F 38                                SEC
0C180 E9 F0                             SBC #BALL_SPEED_LO
0C182 85 18                             STA ball_xpos_lo
0C184                           
0C184                                   ;; update the high byte
0C184 A5 17                             LDA ball_xpos_hi
0C186 E9 01                             SBC #BALL_SPEED_HI
0C188 85 17                             STA ball_xpos_hi
0C18A                               +doneBallNudging:
0C18A                           
0C18A                               ;; Don't update position again until next frame
0C18A                               ;; (moved to after move block routine)
0C18A                           
0C18A                           +doneBallHandling:0C18A                               
0C18A                               ;; Do collision detection
0C18A                               .include "game/include/main/collision_detection.asm"
0C18A                           
0C18A                               ;; Get ball's x-left, x-center, x-right position
0C18A A5 17                         LDA ball_xpos_hi
0C18C 18                            CLC
0C18D 69 F0                         ADC #BALL_LEFT_WGA
0C18F 85 2F                         STA ball_left
0C191 18                            CLC
0C192 69 04                         ADC #BALL_HALF_SIZE
0C194 85 30                         STA ball_center
0C196 18                            CLC
0C197 69 04                         ADC #BALL_HALF_SIZE
0C199 85 31                         STA ball_right
0C19B                           
0C19B                               ;; Get ball's y-top, y-middle, y-bottom position
0C19B A5 19                         LDA ball_ypos_hi
0C19D 18                            CLC
0C19E 69 D0                         ADC #BALL_TOP_WGA
0C1A0 85 32                         STA ball_top
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 33                         STA ball_middle
0C1A7 18                            CLC
0C1A8 69 04                         ADC #BALL_HALF_SIZE
0C1AA 85 34                         STA ball_bottom
0C1AC                           
0C1AC                           +checkRightCollision:
0C1AC                               ;; Check if ball moves right
0C1AC                               ;; No need to check nudging here as that will never collide with a tile
0C1AC A5 0F                         LDA buttons_held
0C1AE 29 01                         AND #BUTTON_RIGHT
0C1B0 F0 20                         BEQ +checkLeftCollision
0C1B2                           
0C1B2                               ;; Check tile at right position
0C1B2 A5 33                         LDA ball_middle
0C1B4 85 00                         STA temp
0C1B6 A5 31                         LDA ball_right
0C1B8 85 01                         STA temp+1
0C1BA 20 2A C6                      JSR sub_ConvertXYToTileType
0C1BD 29 01                         AND #TILE_IS_SOLID
0C1BF F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1C1                           
0C1C1                               ;; Nudge ball and evaluate tile type
0C1C1 A9 01                         LDA #$01
0C1C3 85 36                         STA move_block_space_to_check
0C1C5 A5 37                         LDA ball_flags
0C1C7 29 FD                         AND #NUDGE_BALL_LEFT
0C1C9 20 FE C7                      JSR sub_InitiateNudge
0C1CC 20 83 C6                      JSR sub_EvaluateTileType
0C1CF 4C F5 C1                      JMP +checkTopCollision
0C1D2                           
0C1D2                           +checkLeftCollision:
0C1D2                               ;; Check if ball moves right
0C1D2                               ;; No need to check nudging here as that will never collide with a tile
0C1D2 A5 0F                         LDA buttons_held
0C1D4 29 02                         AND #BUTTON_LEFT
0C1D6 F0 1D                         BEQ +checkTopCollision
0C1D8                           
0C1D8                               ;; Check tile at right position
0C1D8 A5 33                         LDA ball_middle
0C1DA 85 00                         STA temp
0C1DC A5 2F                         LDA ball_left
0C1DE 85 01                         STA temp+1
0C1E0 20 2A C6                      JSR sub_ConvertXYToTileType
0C1E3 29 01                         AND #TILE_IS_SOLID
0C1E5 F0 0E                         BEQ +checkTopCollision
0C1E7                           
0C1E7                               ;; Tile is solid; nudge ball and evaluate tile type
0C1E7 A9 FF                         LDA #$FF
0C1E9 85 36                         STA move_block_space_to_check
0C1EB A5 37                         LDA ball_flags
0C1ED 09 02                         ORA #NUDGE_BALL_RIGHT
0C1EF 20 FE C7                      JSR sub_InitiateNudge
0C1F2 20 83 C6                      JSR sub_EvaluateTileType
0C1F5                               
0C1F5                               
0C1F5                           +checkTopCollision:
0C1F5                               ;; Check if ball moves up
0C1F5 A5 37                         LDA ball_flags
0C1F7 29 10                         AND #BALL_MOVES_DOWN
0C1F9 D0 27                         BNE +checkBottomCollision
0C1FB                           
0C1FB                               ;; Check tile at top position
0C1FB A5 32                         LDA ball_top
0C1FD 85 00                         STA temp
0C1FF A5 30                         LDA ball_center
0C201 85 01                         STA temp+1
0C203 20 2A C6                      JSR sub_ConvertXYToTileType
0C206 29 01                         AND #TILE_IS_SOLID
0C208 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C20A                           
0C20A                               ;; Tile is solid; move ball down and evaluate tile type
0C20A A5 1C                         LDA ball_ypos_lo_prev
0C20C 85 1A                         STA ball_ypos_lo
0C20E A5 1B                         LDA ball_ypos_hi_prev
0C210 85 19                         STA ball_ypos_hi
0C212 A5 37                         LDA ball_flags
0C214 09 10                         ORA #MOVE_BALL_DOWN
0C216 85 37                         STA ball_flags
0C218                           
0C218 A9 F0                         LDA #$F0 ; which is -16
0C21A 85 36                         STA move_block_space_to_check
0C21C 20 83 C6                      JSR sub_EvaluateTileType
0C21F 4C 46 C2                      JMP +doneCheckingCollision
0C222                           
0C222                           +checkBottomCollision:
0C222                               ;; No movement check needed: since ball is not moving up, it must move down
0C222                           
0C222                               ;; Check tile at bottom position
0C222 A5 34                         LDA ball_bottom
0C224 85 00                         STA temp
0C226 A5 30                         LDA ball_center
0C228 85 01                         STA temp+1
0C22A 20 2A C6                      JSR sub_ConvertXYToTileType
0C22D 29 01                         AND #TILE_IS_SOLID
0C22F F0 15                         BEQ +doneCheckingCollision
0C231                           
0C231                               ;; Tile is solid; move ball up and evaluate tile type
0C231 A5 1C                         LDA ball_ypos_lo_prev
0C233 85 1A                         STA ball_ypos_lo
0C235 A5 1B                         LDA ball_ypos_hi_prev
0C237 85 19                         STA ball_ypos_hi
0C239 A5 37                         LDA ball_flags
0C23B 29 EF                         AND #MOVE_BALL_UP
0C23D 85 37                         STA ball_flags
0C23F                           
0C23F A9 10                         LDA #$10
0C241 85 36                         STA move_block_space_to_check
0C243 20 83 C6                      JSR sub_EvaluateTileType
0C246                           
0C246                           +doneCheckingCollision:
0C246                           
0C246                               
0C246                               ;; Update bonus
0C246                               .include "game/include/main/update_bonus.asm"
0C246                           ;; update_bonus.asm
0C246                           
0C246                               ;; If bonus = 000, skip decreasing
0C246 A5 2C                         LDA ball_bonus
0C248 18                            CLC
0C249 65 2D                         ADC ball_bonus+1
0C24B 18                            CLC
0C24C 65 2E                         ADC ball_bonus+2
0C24E F0 33                         BEQ +done
0C250                           
0C250                               ;; Check if bonus timer is done yet
0C250 A5 3F                         LDA bonus_timer
0C252 D0 2F                         BNE +done
0C254                           
0C254                               ;; Bonus timer is done
0C254                               ;; Reset bonus timer
0C254 A9 06                         LDA #BONUS_FRAMES
0C256 85 3F                         STA bonus_timer
0C258                               
0C258                               ;; Subtract one from ball bonus ones
0C258 C6 2E                         DEC ball_bonus+2
0C25A                               
0C25A                               ;; Check if underflow
0C25A 10 0E                         BPL +updateBonusOnScreen
0C25C                           
0C25C                               ;; If underflow, set 9 and subtract one from bonus tens
0C25C A9 09                         LDA #$09
0C25E 85 2E                         STA ball_bonus+2
0C260 C6 2D                         DEC ball_bonus+1
0C262                               
0C262                               ;; Check if underflow
0C262 10 06                         BPL +updateBonusOnScreen
0C264                           
0C264                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C264 A9 09                         LDA #$09
0C266 85 2D                         STA ball_bonus+1
0C268 C6 2C                         DEC ball_bonus
0C26A                           
0C26A                               ;;209A 209B 209C
0C26A                           +updateBonusOnScreen:
0C26A A9 20                         LDA #$20
0C26C 85 00                         STA temp
0C26E A9 9C                         LDA #$9C
0C270 85 01                         STA temp+1
0C272 A2 02                         LDX #$02
0C274                               
0C274                               -updateNextDigit:
0C274 B5 2C                             LDA ball_bonus,x
0C276 18                                CLC
0C277 69 01                             ADC #$01
0C279 85 02                             STA temp+2
0C27B 20 F0 CD                          JSR sub_WriteByteToPPUBuffer
0C27E C6 01                             DEC temp+1
0C280 CA                                DEX
0C281 10 F1                         BPL -updateNextDigit
0C283                                   
0C283                           +done:0C283                               
0C283                               ;; Input test for beeps
0C283                               .include "game/test/input_beeps.asm"
0C283 A5 10                         LDA buttons_pressed
0C285 29 20                         AND #BUTTON_SELECT
0C287 F0 04                         BEQ +
0C289 A9 01                             LDA #$01
0C28B 85 48                             STA do_beeps
0C28D                               +
0C28D                               
0C28D A5 11                         LDA buttons_released
0C28F 29 20                         AND #BUTTON_SELECT
0C291 F0 04                         BEQ +
0C293 A9 02                             LDA #$02
0C295 85 48                             STA do_beeps
0C297                               +0C297                           
0C297                           
0C297                           +skipBallMovement:
0C297                               ;; Move blocks a pixel up/down/left/right
0C297                               .include "game/include/main/move_blocks.asm"
0C297                           
0C297                               ;; Set up block loop
0C297 A2 04                         LDX #MAX_ANIMATIONS
0C299                           -moveBlocksLoop:
0C299 CA                            DEX
0C29A                           
0C29A                               ;; Check if block is still moving
0C29A BD 80 03                      LDA move_block_timer,x
0C29D F0 24                         BEQ +checkNext
0C29F                               
0C29F                               ;; Check in which direction the block is moving
0C29F                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C29F BD 84 03                      LDA move_block_flags,x
0C2A2 29 03                         AND #%00000011
0C2A4 F0 14                         BEQ +movingDown
0C2A6 C9 01                         CMP #$01
0C2A8 F0 0A                         BEQ +movingUp
0C2AA C9 02                         CMP #$02
0C2AC F0 12                         BEQ +movingRight
0C2AE                               
0C2AE                               ;; Move block in correct direction
0C2AE                               +movingLeft:
0C2AE DE 78 03                      DEC move_block_x,x
0C2B1 4C C3 C2                      JMP +checkNext
0C2B4                           
0C2B4                               +movingUp:
0C2B4 DE 7C 03                      DEC move_block_y,x
0C2B7 4C C3 C2                      JMP +checkNext
0C2BA                           
0C2BA                               +movingDown:
0C2BA FE 7C 03                      INC move_block_y,x
0C2BD 4C C3 C2                      JMP +checkNext
0C2C0                           
0C2C0                               +movingRight:
0C2C0 FE 78 03                      INC move_block_x,x
0C2C3                           
0C2C3                               ;; Check next block (if any left)
0C2C3                               +checkNext:
0C2C3 E0 00                         CPX #$00
0C2C5 D0 D2                         BNE -moveBlocksLoop
0C2C7                               
0C2C7                               ;; Don't update sprites
0C2C7 E6 35                         INC sprites_update_position
0C2C9                           
0C2C9                           +skipSpriteMovement:
0C2C9                               ;; Testing timed PPU scroll concept
0C2C9                               .include "game/test/timed_ppuscroll_test.asm"
0C2C9                           ;; Timed updates (test)
0C2C9                           
0C2C9                               ;; If B button is pressed
0C2C9 A5 10                         LDA buttons_pressed
0C2CB 29 10                         AND #BUTTON_START
0C2CD D0 03                         BNE +
0C2CF 4C 54 C3                          JMP +end
0C2D2                               +
0C2D2                           
0C2D2                           lbl_initiate_level_load:
0C2D2                               ;; Disable noise channel
0C2D2 A9 00                         LDA #$00
0C2D4 8D 15 40                      STA APU_STATUS
0C2D7 8D 0C 40                      STA NOISE_VOLUME
0C2DA                               
0C2DA                               ;; Set up loop fading
0C2DA A9 00                         LDA #$00
0C2DC 85 07                         STA temp+7
0C2DE A0 08                         LDY #$08
0C2E0                               -fadeLoop:
0C2E0 84 08                             STY temp+8
0C2E2                           
0C2E2                                   ;; Wait for NMI to pass
0C2E2 20 12 C5                          JSR sub_WaitForNMI
0C2E5                                   
0C2E5                                   ;; Now wait for No-sprite 0
0C2E5                                   -
0C2E5 AD 02 20                              LDA PPU_STATUS
0C2E8 29 40                                 AND #SPRITE_0_HIT
0C2EA D0 F9                             BNE -
0C2EC                               
0C2EC                                   ;; Now wait for Sprite 0
0C2EC                                   -
0C2EC AD 02 20                              LDA PPU_STATUS
0C2EF 29 40                                 AND #SPRITE_0_HIT
0C2F1 F0 F9                             BEQ -
0C2F3                                       
0C2F3                                   ;; Setup tile row loop
0C2F3 A0 16                             LDY #22
0C2F5                                   -tileLoop:
0C2F5                                   
0C2F5                                       ;; Disable drawing
0C2F5 A5 12                                 LDA soft_ppu_mask
0C2F7 29 F7                                 AND #%11110111
0C2F9 8D 01 20                              STA PPU_MASK
0C2FC                                       
0C2FC                                       ;; Set up scanline loop
0C2FC A2 08                                 LDX #$08
0C2FE                                       -scanlineLoop:
0C2FE E4 08                                     CPX temp+8
0C300 D0 0A                                     BNE +wasteTime
0C302                                           
0C302                                           ;; Restore drawing
0C302 A5 12                                     LDA soft_ppu_mask
0C304 09 08                                     ORA #%00001000
0C306 8D 01 20                                  STA PPU_MASK
0C309 4C 12 C3                                  JMP +wasteMoreTime
0C30C                           
0C30C                                           ;; Waste 12 frames
0C30C                                           +wasteTime:
0C30C E6 09                                     INC temp+9   ;+5
0C30E C6 09                                     DEC temp+9   ;+5
0C310 49 00                                     EOR #$00     ;+2
0C312                                           
0C312                                           ;; Waste about 100 frames
0C312                                           +wasteMoreTime:
0C312                                           
0C312 86 01                                     STX temp+1     ;  3 down, 97 to go
0C314 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C316                                           -wasteLoop:
0C316 EA                                            NOP
0C317 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C319 CA                                            DEX        ;  5+5L down,  95-5L to go
0C31A D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C31C                           
0C31C A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C31E CA                                        DEX            ;  9+8L down, 91-8L to go
0C31F D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C321                           
0C321 88                                    DEY
0C322 D0 D1                             BNE -tileLoop
0C324                           
0C324 A4 08                             LDY temp+8
0C326                                   
0C326 E6 07                             INC temp+7
0C328 A5 07                             LDA temp+7
0C32A C9 02                             CMP #$02
0C32C D0 B2                             BNE -fadeLoop
0C32E                           
0C32E A9 00                             LDA #$00
0C330 85 07                             STA temp+7
0C332 88                                DEY
0C333 D0 AB                         BNE -fadeLoop
0C335                               
0C335                               ;; Load the next level if ball not dead
0C335 A5 37                         LDA ball_flags
0C337 29 01                         AND #BALL_IS_DEAD
0C339 D0 05                         BNE +
0C33B E6 41                             INC current_level
0C33D 4C 46 C3                          JMP +loadLevel
0C340                               +
0C340                               
0C340                               ;; Revive ball
0C340 A5 37                         LDA ball_flags
0C342 29 FE                         AND #REVIVE_BALL
0C344 85 37                         STA ball_flags
0C346                           
0C346                           +loadLevel:
0C346 A5 41                         LDA current_level
0C348 C9 19                         CMP #25
0C34A D0 04                         BNE +
0C34C A9 00                             LDA #$00
0C34E 85 41                             STA current_level
0C350                               +
0C350                               
0C350 A9 81                         LDA #LOAD_GAME_SCREEN
0C352 85 38                         STA screen_mode
0C354                           
0C354                           
0C354                           +end:
0C354                           
0C354                               ;; Check if ball is dead
0C354 A5 37                         LDA ball_flags
0C356 29 01                         AND #BALL_IS_DEAD
0C358 F0 03                         BEQ +
0C35A 4C 7C C3                          JMP +ballIsDead
0C35D                               +
0C35D                               
0C35D                               ;; Add ball to sprite buffer
0C35D A6 3D                         LDX sprite_ram_pointer
0C35F A5 19                         LDA ball_ypos_hi
0C361 9D 00 02                      STA ADDR_SPRITERAM,x
0C364 E8                            INX
0C365 A9 01                         LDA #BALL_TILE_CHR
0C367 9D 00 02                      STA ADDR_SPRITERAM,x
0C36A E8                            INX
0C36B A9 00                         LDA #BALL_ATTR
0C36D 9D 00 02                      STA ADDR_SPRITERAM,x
0C370 E8                            INX
0C371 A5 17                         LDA ball_xpos_hi
0C373 9D 00 02                      STA ADDR_SPRITERAM,x
0C376 E8                            INX
0C377 86 3D                         STX sprite_ram_pointer
0C379 4C 8D C3                      JMP +drawBlocks
0C37C                           
0C37C                           +ballIsDead:
0C37C                               ;; Check if kill timer has reset
0C37C A5 40                         LDA kill_timer
0C37E F0 03                         BEQ +
0C380 4C 8D C3                          JMP +drawBlocks
0C383                               +
0C383                               
0C383                               ;; Take a live
0C383 C6 1F                         DEC ball_lives
0C385 D0 03                         BNE +
0C387                                   ;; If no lives left, reset game
0C387 4C 00 C0                          JMP RESET
0C38A                                   ;; Replace reset with game over sequence initiation [@TODO]
0C38A                               +
0C38A                               
0C38A                               ;; Reload current level
0C38A 4C D2 C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C38D                           
0C38D                           
0C38D                           +drawBlocks:
0C38D                               ;; Draw moving block(s, if any)
0C38D                               .include "game/include/main/draw_blocks.asm"
0C38D                           ;; Handle movement of move blocks
0C38D                           
0C38D                               ;; Set up a loop
0C38D A0 04                         LDY #MAX_ANIMATIONS
0C38F                           -drawBlocksLoop:
0C38F 88                            DEY
0C390                           
0C390                               ;; If timer is zero, check the next move block
0C390 B9 80 03                      LDA move_block_timer,y
0C393 F0 52                         BEQ +nextMoveBlock
0C395                               
0C395                               ;; Get current sprite pointer
0C395 A6 3D                         LDX sprite_ram_pointer
0C397                           
0C397                               ;; Draw the sprites on screen
0C397 B9 7C 03                      LDA move_block_y,y
0C39A 9D 00 02                      STA ADDR_SPRITERAM,x
0C39D 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3A0 18                            CLC
0C3A1 69 08                         ADC #$08
0C3A3 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C3A6 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3A9 E8                            INX
0C3AA                           
0C3AA A9 52                         LDA #$52 ; Top left chr id
0C3AC 9D 00 02                      STA ADDR_SPRITERAM,x
0C3AF A9 53                         LDA #$53 ; Top right chr id
0C3B1 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3B4 A9 62                         LDA #$62 ; Bottom left chr id
0C3B6 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C3B9 A9 63                         LDA #$63 ; Bottom right chr id
0C3BB 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3BE E8                            INX
0C3BF                           
0C3BF A9 00                         LDA #BALL_ATTR
0C3C1 9D 00 02                      STA ADDR_SPRITERAM,x
0C3C4 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3C7 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C3CA 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3CD E8                            INX
0C3CE                           
0C3CE B9 78 03                      LDA move_block_x,y
0C3D1 9D 00 02                      STA ADDR_SPRITERAM,x
0C3D4 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C3D7 18                            CLC
0C3D8 69 08                         ADC #$08
0C3DA 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3DD 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3E0                           
0C3E0                               ;; Update sprite RAM pointer
0C3E0 A5 3D                         LDA sprite_ram_pointer
0C3E2 18                            CLC
0C3E3 69 10                         ADC #$10
0C3E5 85 3D                         STA sprite_ram_pointer
0C3E7                           
0C3E7                           
0C3E7                           
0C3E7                           +nextMoveBlock:
0C3E7                               ;; Check the next move block
0C3E7 C0 00                         CPY #$00
0C3E9 D0 A4                         BNE -drawBlocksLoop
0C3EB                           
0C3EB 4C 3A C4                      JMP +doneScreenLoad
0C3EE                           
0C3EE                           
0C3EE                           
0C3EE                           +checkNextScreen:
0C3EE                           
0C3EE                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C3EE                               ;; Upon pressing START, the selected level will start
0C3EE                               .include "game/include/main/select_level.asm"
0C3EE A5 10                         LDA buttons_pressed
0C3F0 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3F2 F0 3C                         BEQ +checkStartPress
0C3F4                           
0C3F4                                   ;; Select next level (1, 5, 9, 13, 17)
0C3F4 A5 41                             LDA current_level
0C3F6 18                                CLC
0C3F7 69 04                             ADC #$04
0C3F9 C9 14                             CMP #$14
0C3FB D0 02                             BNE +
0C3FD A9 00                                 LDA #$00
0C3FF                                   +
0C3FF 85 41                             STA current_level
0C401                                   
0C401                                   ;; Convert level number to two-byte value
0C401 A9 00                             LDA #$00
0C403 85 03                             STA temp+3
0C405 A5 41                             LDA current_level
0C407 18                                CLC
0C408 69 01                             ADC #$01
0C40A                           
0C40A                               -
0C40A C9 0A                             CMP #$0A
0C40C 90 08                             BCC +
0C40E E6 03                                 INC temp+3
0C410 38                                    SEC
0C411 E9 0A                                 SBC #$0A
0C413 4C 0A C4                              JMP -
0C416                                   +
0C416                           
0C416                                   ;; Add level number to PPU buffer
0C416 18                                CLC
0C417 69 01                             ADC #$01
0C419 85 02                             STA temp+2
0C41B A9 20                             LDA #$20
0C41D 85 00                             STA temp
0C41F A9 D0                             LDA #$D0
0C421 85 01                             STA temp+1
0C423 20 F0 CD                          JSR sub_WriteByteToPPUBuffer
0C426                                   
0C426 C6 01                             DEC temp+1
0C428 A4 03                             LDY temp+3
0C42A C8                                INY
0C42B 84 02                             STY temp+2
0C42D 20 F0 CD                          JSR sub_WriteByteToPPUBuffer
0C430                                   
0C430                               +checkStartPress:
0C430                           
0C430                           
0C430                           
0C430                               ;; If START button is pressed
0C430 A5 10                         LDA buttons_pressed
0C432 29 10                         AND #BUTTON_START
0C434 F0 04                         BEQ +
0C436                                   ;; Start the level
0C436 A9 81                             LDA #LOAD_GAME_SCREEN
0C438 85 38                             STA screen_mode
0C43A                               +
0C43A                           
0C43A                           
0C43A                           
0C43A                           +doneScreenLoad:
0C43A                           
0C43A                               ;; Load animations (if any)
0C43A                               .include "game/include/main/load_animations.asm"
0C43A                               ;; Set up loop
0C43A A2 00                         LDX #$00
0C43C                               -loop_load_animation:
0C43C                                   ;; Check if current animation is active. If not, goto next
0C43C BD 74 03                          LDA explosion_active,x
0C43F D0 03                             BNE +
0C441 4C DB C4                              JMP +next
0C444                                   +
0C444                           
0C444                                   ;; Check the explosion framecounter
0C444 BD 60 03                          LDA explosion_timer,x
0C447 D0 26                             BNE +
0C449                                       ;; Frametimer is 0
0C449                                       ;; Reset to animation speed
0C449 A9 04                                 LDA #ANIMATION_SPEED
0C44B 9D 60 03                              STA explosion_timer,x
0C44E                           
0C44E                                       ;; Set next animation frame, and check if we're done yet
0C44E FE 64 03                              INC explosion_currentframe,x
0C451 BD 64 03                              LDA explosion_currentframe,x
0C454 C9 0A                                 CMP #ANIM_SLIDES
0C456 D0 17                                 BNE +
0C458                           
0C458                                       ;; If we're done, inactivate current explosion, clean
0C458                                       ;; up sprite RAM and go to the next one
0C458 A9 00                                 LDA #$00
0C45A 9D 74 03                              STA explosion_active,x
0C45D                                       
0C45D A9 09                                 LDA #SLIDE_SIZE
0C45F 0A                                    ASL
0C460 0A                                    ASL
0C461 A8                                    TAY
0C462 A9 EF                                 LDA #$EF
0C464                                       -
0C464 88                                        DEY
0C465 99 00 02                                  STA ADDR_SPRITERAM,y
0C468 C0 00                                     CPY #00
0C46A D0 F8                                 BNE -
0C46C                                       
0C46C 4C DB C4                              JMP +next
0C46F                                   +
0C46F                           
0C46F                                   ;; Load (x,y) position in temp variables
0C46F BD 6C 03                          LDA explosion_x,x
0C472 85 01                             STA temp+1
0C474 85 03                             STA temp+3
0C476 BD 70 03                          LDA explosion_y,x
0C479 85 02                             STA temp+2
0C47B                           
0C47B                                   ;; Load attribute in temp variable
0C47B BD 68 03                          LDA explosion_attributes,x
0C47E 85 04                             STA temp+4
0C480                           
0C480                                   ;; Load current frame into Y-register
0C480 BC 64 03                          LDY explosion_currentframe,x
0C483                           
0C483                                   ;; Load current frame ROM address from table
0C483 B9 44 CF                          LDA explosion_anim_lo,y
0C486 85 0C                             STA pointer
0C488 B9 3A CF                          LDA explosion_anim_hi,y
0C48B 85 0D                             STA pointer+1
0C48D                           
0C48D                                   ;; Save x-register on stack
0C48D 8A                                TXA
0C48E 48                                PHA
0C48F                           
0C48F                                   ;; Load sprites into sprite RAM
0C48F A6 3D                             LDX sprite_ram_pointer
0C491 A0 00                             LDY #$00
0C493                           
0C493                                   ;; Prepare (x,y) offset for loop
0C493 84 00                             STY temp
0C495                           
0C495                                   -loop_load_sprite:
0C495                                   
0C495                                       ;; Do not draw empty sprites
0C495 B1 0C                                 LDA (pointer),y
0C497 F0 18                                 BEQ +nextSprite
0C499                                   
0C499                                           ;; Add y-position to sprite ram buffer
0C499 A5 02                                     LDA temp+2
0C49B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C49E E8                                        INX
0C49F                           
0C49F                                           ;; Get tile number from frame ROM address, and
0C49F                                           ;; add it to sprite ram buffer
0C49F B1 0C                                     LDA (pointer),y
0C4A1 9D 00 02                                  STA ADDR_SPRITERAM,x
0C4A4 E8                                        INX
0C4A5                           
0C4A5                                           ;; Add attribute data to sprite ram buffer
0C4A5 A5 04                                     LDA temp+4
0C4A7 9D 00 02                                  STA ADDR_SPRITERAM,x
0C4AA E8                                        INX
0C4AB                           
0C4AB                                           ;; Add x-position to sprite ram buffer
0C4AB A5 03                                     LDA temp+3
0C4AD 9D 00 02                                  STA ADDR_SPRITERAM,x
0C4B0 E8                                        INX
0C4B1                           
0C4B1                                       +nextSprite:
0C4B1                           
0C4B1                                       ;; Check if all sprites are done
0C4B1 C8                                    INY
0C4B2 C0 09                                 CPY #SLIDE_SIZE
0C4B4 F0 21                                 BEQ +done
0C4B6                           
0C4B6                                       ;; Update x value
0C4B6 A5 03                                 LDA temp+3
0C4B8 18                                    CLC
0C4B9 69 08                                 ADC #$08
0C4BB 85 03                                 STA temp+3
0C4BD                           
0C4BD                                       ;; Update temp for x,y position
0C4BD E6 00                                 INC temp
0C4BF A5 00                                 LDA temp
0C4C1 C9 03                                 CMP #SLIDE_WIDTH
0C4C3 D0 0F                                 BNE +
0C4C5                                           ;; Row is done; reset x-position
0C4C5 A5 01                                     LDA temp+1
0C4C7 85 03                                     STA temp+3
0C4C9                           
0C4C9                                           ;; Update y-position
0C4C9 A5 02                                     LDA temp+2
0C4CB 18                                        CLC
0C4CC 69 08                                     ADC #$08
0C4CE 85 02                                     STA temp+2
0C4D0                           
0C4D0                                           ;; Reset row timer
0C4D0 A9 00                                     LDA #$00
0C4D2 85 00                                     STA temp
0C4D4                                       +
0C4D4                           
0C4D4 4C 95 C4                          JMP -loop_load_sprite
0C4D7                           
0C4D7                               +done:
0C4D7 86 3D                             STX sprite_ram_pointer
0C4D9                           
0C4D9                                   ;; Retrieve x-register from stack
0C4D9 68                                PLA
0C4DA AA                                TAX
0C4DB                           
0C4DB                               +next:
0C4DB                                   ;; Check if all animations have been updated
0C4DB E8                                INX
0C4DC E0 04                             CPX #MAX_ANIMATIONS
0C4DE F0 03                             BEQ +done
0C4E0                           
0C4E0 4C 3C C4                      JMP -loop_load_animation
0C4E3                           +done:
0C4E3                           
0C4E3                               ;; Sprite clean-up
0C4E3 A6 3D                         LDX sprite_ram_pointer
0C4E5 A9 EF                         LDA #$EF
0C4E7                               -
0C4E7 9D 00 02                          STA ADDR_SPRITERAM,x
0C4EA E8                                INX
0C4EB D0 FA                         BNE -
0C4ED 4C 57 C0                      JMP MainGameLoop
0C4F0                           
0C4F0                           ;; Subroutines
0C4F0                           .include "include/subroutines.asm"
0C4F0                           
0C4F0                           ;; RNG
0C4F0                           .include "subroutine/GetRandomNumber.asm"
0C4F0                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4F0                           ;;
0C4F0                           ;; subroutine/GetRandomNumber.asm
0C4F0                           ;;
0C4F0                           ;; Simple and fast random number generator by White Flame.
0C4F0                           ;;
0C4F0                           ;; Set random_seed to an arbitrary number to randomize between
0C4F0                           ;; gaming sessions, for instance using the frame timer upon
0C4F0                           ;; pressing START on the intro screen.
0C4F0                           ;;
0C4F0                           ;;     ;; IF START PRESSED:
0C4F0                           ;;     LDA frame_counter
0C4F0                           ;;     STA random_seed
0C4F0                           ;;
0C4F0                           ;; Source:
0C4F0                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C4F0                           ;;
0C4F0                           ;;
0C4F0                           
0C4F0                           sub_GetRandomNumber:
0C4F0                               ;; Force EOR if random_seed is zero
0C4F0 A5 16                         LDA random_seed
0C4F2 F0 05                         BEQ +doEor
0C4F4                           
0C4F4                               ;; Shift left, and EOR if the high bit is set
0C4F4 0A                            ASL
0C4F5 F0 04                         BEQ +noEor
0C4F7 90 02                         BCC +noEor
0C4F9                           
0C4F9                           +doEor:
0C4F9 49 1D                         EOR #$1D
0C4FB                           
0C4FB                           +noEor:
0C4FB 85 16                         STA random_seed
0C4FD                           
0C4FD 60                            RTS
0C4FE                           
0C4FE                           
0C4FE                           ;; Read controller input
0C4FE                           .include "subroutine/ReadController.asm"
0C4FE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4FE                           ;;
0C4FE                           ;; subroutine/ReadController.asm
0C4FE                           ;;
0C4FE                           ;; Subroutine that polls the controller and stores the input
0C4FE                           ;; buttons in a variable. This version only handles controller
0C4FE                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C4FE                           ;;
0C4FE                           ;;
0C4FE                           
0C4FE                           sub_ReadController:
0C4FE                           
0C4FE                               ;; Set strobe bit
0C4FE A9 01                         LDA #$01
0C500 8D 16 40                      STA JOYPAD_1
0C503                           
0C503                               ;; Set up ring timer
0C503 85 0F                         STA buttons_held
0C505                           
0C505                               ;; Clear strobe bit
0C505 4A                            LSR
0C506 8D 16 40                      STA JOYPAD_1
0C509                           
0C509                               ;; Loop through button presses
0C509                               -
0C509 AD 16 40                          LDA JOYPAD_1
0C50C 4A                                LSR
0C50D 26 0F                             ROL buttons_held
0C50F                           
0C50F                               ;; Check if ring timer is done
0C50F 90 F8                         BCC -
0C511                           
0C511                               ;; Return from subroutine
0C511 60                            RTS
0C512                           
0C512                           
0C512                           ;; vBlank/NMI wait
0C512                           .include "subroutine/WaitForNMI.asm"
0C512                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C512                           ;;
0C512                           ;; subroutine/WaitForVBlank.asm
0C512                           ;;
0C512                           ;; Subroutine that essentially pauses script execution until
0C512                           ;; vBlank happens.
0C512                           ;;
0C512                           ;;
0C512                           
0C512                           sub_WaitForNMI:
0C512 A9 01                         LDA #$01
0C514 85 49                         STA check_nmi
0C516                               -
0C516 A5 49                             LDA check_nmi
0C518 D0 FC                         BNE -
0C51A 60                            RTS
0C51B                           
0C51B                           .include "subroutine/WaitForVBlank.asm"
0C51B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C51B                           ;;
0C51B                           ;; subroutine/WaitForVBlank.asm
0C51B                           ;;
0C51B                           ;; Subroutine that essentially pauses script execution until
0C51B                           ;; vBlank happens.
0C51B                           ;;
0C51B                           ;;
0C51B                           
0C51B                           sub_WaitForVBlank:
0C51B 2C 02 20                      BIT $2002
0C51E 10 FB                         BPL sub_WaitForVBlank
0C520 60                            RTS
0C521                           
0C521                           
0C521                           ;; Game specific subroutines
0C521                           .include "game/include/subroutines.asm"
0C521                           ;; additional game-specific subroutines go here
0C521                           
0C521                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C521                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C521                           ;;
0C521                           ;;  sub_AddAccumulatorToScore.asm
0C521                           ;;
0C521                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C521                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C521                           ;;  actual score.
0C521                           ;;
0C521                           ;;
0C521                           
0C521                           
0C521                           sub_AddAccumulatorToScore:
0C521                           
0C521                               ;; Clear old add_to_score
0C521 A2 05                         LDX #$05
0C523 A0 00                         LDY #$00
0C525                               -
0C525 94 26                             STY add_to_score,x
0C527 CA                                DEX
0C528 10 FB                         BPL -
0C52A                           
0C52A                               ;; Set accumulator to add_to_score variables
0C52A                               ;; Check and update 100s
0C52A                               -checkHundreds:
0C52A C9 64                             CMP #100
0C52C 90 08                             BCC +checkTens
0C52E 38                                    SEC
0C52F E9 64                                 SBC #100
0C531 E6 29                                 INC add_to_score+3
0C533 4C 2A C5                              JMP -checkHundreds
0C536                                   +checkTens:
0C536                           
0C536                               ;; Check and update 10s
0C536                               -checkTens:
0C536 C9 0A                             CMP #10
0C538 90 08                             BCC +setOnes
0C53A 38                                    SEC
0C53B E9 0A                                 SBC #10
0C53D E6 2A                                 INC add_to_score+4
0C53F 4C 36 C5                              JMP -checkTens
0C542                                   +setOnes:
0C542                           
0C542                               ;; We're left with 1s
0C542 85 2B                         STA add_to_score+5
0C544                           
0C544                               ;; Byte for byte, add add_to_score to ball_score
0C544 A9 00                         LDA #$00
0C546 85 39                         STA ppu_buffer_update
0C548 A4 3A                         LDY ppu_buffer_pointer
0C54A A2 05                         LDX #$05
0C54C                               -
0C54C B5 26                             LDA add_to_score,x
0C54E 18                                CLC
0C54F 75 20                             ADC ball_score,x
0C551 C9 0A                             CMP #10
0C553 90 05                             BCC +
0C555 38                                    SEC
0C556 E9 0A                                 SBC #10
0C558 F6 1F                                 INC ball_score-1,x
0C55A                                   +
0C55A                                   
0C55A                                   ;; Update new score digit
0C55A 95 20                             STA ball_score,x
0C55C                           
0C55C                                   ;; Update score tile in PPU
0C55C A9 20                             LDA #$20
0C55E 99 00 03                          STA ppu_buffer,y
0C561 C8                                INY
0C562 8A                                TXA
0C563 18                                CLC
0C564 69 83                             ADC #$83
0C566 99 00 03                          STA ppu_buffer,y
0C569 C8                                INY
0C56A B5 20                             LDA ball_score,x
0C56C 18                                CLC
0C56D 69 01                             ADC #$01
0C56F 99 00 03                          STA ppu_buffer,y
0C572 C8                                INY
0C573                           
0C573                                   ;; Check next digit (if any left)
0C573 CA                                DEX
0C574 30 03                             BMI +done
0C576 4C 4C C5                      JMP -
0C579                           
0C579                           +done:
0C579                               ;; Update PPU buffer pointer and status
0C579 84 3A                         STY ppu_buffer_pointer
0C57B A9 01                         LDA #$01
0C57D 85 39                         STA ppu_buffer_update
0C57F                           
0C57F                               ;; Done: return 
0C57F 60                            RTS
0C580                           
0C580                           .include "game/subroutine/BackgroundNoise.asm"
0C580                           
0C580                           sub_BackgroundNoise:
0C580 A9 32                         LDA #$32
0C582 8D 0C 40                      STA NOISE_VOLUME
0C585 A9 0E                         LDA #$0E
0C587 8D 0E 40                      STA NOISE_PERIOD
0C58A 85 46                         STA current_noise
0C58C 60                            RTS0C58D                           .include "game/subroutine/ClearScreen.asm"
0C58D                           ;; Subroutine to clear the screen
0C58D                           ;; If it's a game screen, add noise
0C58D                           
0C58D                           sub_ClearScreen:
0C58D                               ;; Check of game screen or not
0C58D A5 38                         LDA screen_mode
0C58F 29 03                         AND #CHECK_SCREEN_MODE
0C591 C9 01                         CMP #IS_GAME_SCREEN
0C593 F0 02                         BEQ +
0C595 A9 00                             LDA #$00
0C597                               +
0C597 85 01                         STA temp+1
0C599                               
0C599                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C599 2C 02 20                      BIT PPU_STATUS
0C59C A9 20                         LDA #$20
0C59E 8D 06 20                      STA PPU_ADDR
0C5A1 A9 00                         LDA #$00
0C5A3 8D 06 20                      STA PPU_ADDR
0C5A6                               
0C5A6                               ;; Set up tile to draw and loop
0C5A6 85 00                         STA temp
0C5A8 AA                            TAX
0C5A9 A8                            TAY
0C5AA                           
0C5AA                               -     
0C5AA                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C5AA A5 00                             LDA temp
0C5AC 8D 07 20                          STA PPU_DATA
0C5AF                           
0C5AF                                   ;; Check if we should draw noise next. Noise is drawn if:
0C5AF                                   ;; - Screen mode is game screen
0C5AF                                   ;; - Y between #$06 and #$19 (inclusive)
0C5AF                                   ;; - X between #$02 and #$1D (inclusive)
0C5AF                                   
0C5AF                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C5AF A5 01                             LDA temp+1
0C5B1 F0 1C                             BEQ +nextTileInRow
0C5B3                                   
0C5B3                                   ;; If Y < $6, skip the check
0C5B3 C0 06                             CPY #$06
0C5B5 90 18                             BCC +nextTileInRow
0C5B7                                   
0C5B7                                   ;; If X < $1, skip the check
0C5B7 E0 01                             CPX #$01
0C5B9 90 14                             BCC +nextTileInRow
0C5BB                                   
0C5BB                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C5BB E0 1D                             CPX #$1D
0C5BD D0 04                             BNE +
0C5BF A9 00                                 LDA #$00
0C5C1 85 00                                 STA temp
0C5C3                                   +
0C5C3 B0 0A                             BCS +nextTileInRow
0C5C5                                   
0C5C5                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C5C5 20 F0 C4                          JSR sub_GetRandomNumber
0C5C8 29 07                             AND #%00000111
0C5CA 18                                CLC
0C5CB 69 68                             ADC #$68
0C5CD 85 00                             STA temp
0C5CF                           
0C5CF                           +nextTileInRow:
0C5CF                                   
0C5CF                                   ;; Check if a row has been done. If not, draw the next
0C5CF E8                                INX
0C5D0 E0 20                             CPX #$20
0C5D2 D0 D6                             BNE -
0C5D4                                   
0C5D4                                   ;; Go to the next row (if any left)
0C5D4 A2 00                             LDX #00
0C5D6 C8                                INY
0C5D7                                   
0C5D7                                   ;; If Y is 1A, skip noise tile check until done drawing
0C5D7 C0 1A                             CPY #$1A
0C5D9 D0 04                             BNE +
0C5DB A9 00                                 LDA #$00
0C5DD 85 01                                 STA temp+1
0C5DF                                   +
0C5DF                                   
0C5DF C0 1E                             CPY #$1E
0C5E1 D0 C7                         BNE -
0C5E3                           
0C5E3                               ;; Clear attribute table
0C5E3 A9 23                         LDA #$23
0C5E5 8D 06 20                      STA PPU_ADDR
0C5E8 A9 C0                         LDA #$C0
0C5EA 8D 06 20                      STA PPU_ADDR
0C5ED A9 00                         LDA #$00
0C5EF A2 40                         LDX #$40
0C5F1                               -
0C5F1 8D 07 20                          STA PPU_DATA
0C5F4 CA                                DEX
0C5F5 D0 FA                         BNE -
0C5F7                               
0C5F7 60                            RTS0C5F8                           .include "game/subroutine/ColorizeBall.asm"
0C5F8                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5F8                           ;;
0C5F8                           ;;  Subroutine: ColorizeBall
0C5F8                           ;;
0C5F8                           ;;  Applies the color set through ball_flags to the ball sprite.
0C5F8                           ;;
0C5F8                           ;;
0C5F8                           
0C5F8                           
0C5F8                           sub_ColorizeBall:
0C5F8                           
0C5F8                               ;; Get color from ball_flags
0C5F8 4A                            LSR
0C5F9 4A                            LSR
0C5FA 4A                            LSR
0C5FB 4A                            LSR
0C5FC 4A                            LSR
0C5FD AA                            TAX
0C5FE                           
0C5FE                               ;; Add new light color of ball to PPU palette
0C5FE A9 3F                         LDA #$3F
0C600 85 00                         STA temp
0C602 A9 11                         LDA #$11
0C604 85 01                         STA temp+1
0C606 BD 54 CF                      LDA tbl_BallColorLight,x
0C609 85 02                         STA temp+2
0C60B 20 F0 CD                      JSR sub_WriteByteToPPUBuffer
0C60E                               
0C60E                               ;; Add new dark color of ball to PPU palette
0C60E E6 01                         INC temp+1
0C610 BD 4E CF                      LDA tbl_BallColorDark,x
0C613 85 02                         STA temp+2
0C615 20 F0 CD                      JSR sub_WriteByteToPPUBuffer
0C618                               
0C618 60                            RTS
0C619                           
0C619                           .include "game/subroutine/ColorsMatch.asm"
0C619                           
0C619                           ;; Subroutine to check if ball color matches colliding tile color
0C619                           
0C619                           sub_ColorsMatch:
0C619                               ;; Save tile color in temp variable
0C619 A5 42                         LDA colliding_tile
0C61B 29 0E                         AND #%00001110
0C61D 85 00                         STA temp
0C61F                           
0C61F                               ;; Get ball color
0C61F A5 37                         LDA ball_flags
0C621 29 E0                         AND #%11100000
0C623 4A                            LSR
0C624 4A                            LSR
0C625 4A                            LSR
0C626 4A                            LSR
0C627                           
0C627                               ;; Compare with tile color
0C627 C5 00                         CMP temp
0C629 60                            RTS
0C62A                           
0C62A                           .include "game/subroutine/ConvertXYToTileType.asm"
0C62A                           
0C62A                           ;; Subroutine to convert the ball's position to a tile type
0C62A                           ;; - Expects temp to be y-position of ball within game area
0C62A                           ;; - Expects temp+1 to be x-position of ball within game area
0C62A                           ;; - Puts result in accumulator and zp variable
0C62A                           ;; - Corrupts X-register
0C62A                           
0C62A                           sub_ConvertXYToTileType:
0C62A A5 01                         LDA temp+1
0C62C 4A                            LSR
0C62D 4A                            LSR
0C62E 4A                            LSR
0C62F 4A                            LSR
0C630 85 09                         STA temp+9
0C632 A5 00                         LDA temp
0C634 29 F0                         AND #%11110000
0C636 18                            CLC
0C637 65 09                         ADC temp+9
0C639 85 09                         STA temp+9
0C63B AA                            TAX
0C63C BD 00 04                      LDA tile_type, x
0C63F 85 42                         STA colliding_tile
0C641 60                            RTS
0C642                           
0C642                           .include "game/subroutine/DisableEnableRendering.asm"
0C642                           sub_DisableRendering:
0C642                               ;; Force NMI skip, disable rendering
0C642 A9 01                     	LDA #$01
0C644 85 14                     	STA force_skip_nmi
0C646 20 1B C5                      JSR sub_WaitForVBlank
0C649 A5 12                         LDA soft_ppu_mask
0C64B 29 E7                         AND #%11100111
0C64D 8D 01 20                      STA PPU_MASK
0C650 85 12                         STA soft_ppu_mask
0C652 20 1B C5                      JSR sub_WaitForVBlank
0C655 60                            RTS
0C656                           
0C656                           sub_EnableRendering:
0C656                               ;; Enable rendering
0C656 A9 00                     	LDA #$00
0C658 8D 05 20                  	STA PPU_SCROLL
0C65B 8D 05 20                  	STA PPU_SCROLL
0C65E 20 1B C5                      JSR sub_WaitForVBlank
0C661 85 14                     	STA force_skip_nmi
0C663 A5 12                         LDA soft_ppu_mask
0C665 09 18                         ORA #%00011000
0C667 85 12                         STA soft_ppu_mask
0C669 8D 01 20                      STA PPU_MASK
0C66C 20 1B C5                      JSR sub_WaitForVBlank
0C66F 60                            RTS
0C670                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C670                           sub_drawIntroScreenLogoTile:
0C670 B9 36 CE                      LDA tbl_IntroScreenLogoChr,y
0C673 C9 60                         CMP #$60
0C675 D0 08                         BNE +
0C677 20 F0 C4                          JSR sub_GetRandomNumber
0C67A 29 07                             AND #$07
0C67C 18                                CLC
0C67D 69 60                             ADC #$60
0C67F                               +
0C67F 8D 07 20                      STA PPU_DATA
0C682 60                            RTS
0C683                           .include "game/subroutine/EvaluateTileType.asm"
0C683                           ;; Subroutine to evaluate the colliding tile type and take its
0C683                           ;; corresponding action (move block, kill player, ...)
0C683                           ;; - Expects X-register to be the tile_type offset
0C683                           ;; - Uses zp variable colliding_tile
0C683                           
0C683                           sub_EvaluateTileType:
0C683                           
0C683                               ;; Check if collided tile is a color block
0C683 A5 42                         LDA colliding_tile
0C685 29 80                         AND #IS_COLOR_BLOCK
0C687 D0 03                         BNE +
0C689 4C EB C6                          JMP +checkIfPaintBlock
0C68C                               +
0C68C                               
0C68C                               ;; It's a color block. Check if the colors match
0C68C 20 19 C6                      JSR sub_ColorsMatch
0C68F F0 01                         BEQ +
0C691                                   ;; Colors don't match - return
0C691 60                                RTS
0C692                               +
0C692                           
0C692                               ;; Colors match; destroy color block
0C692                               
0C692                               ;; Convert the metatile offset value (which is in the X register)
0C692                               ;; to its corresponding address in PPU
0C692 20 CF C7                      JSR sub_GetPPUAddrFromYXIndex
0C695                           
0C695                               ;; Remove color block from screen by drawing a total
0C695                               ;; of 7 tiles over it (shade included)
0C695 20 54 CC                      JSR sub_RemoveBlockFromScreen
0C698                               
0C698                               ;; - Load destruction animation on tile
0C698                               ;; Get most recent slot for explosion    
0C698 8A                            TXA
0C699 85 02                         STA temp+2
0C69B A6 3B                         LDX explosion_pointer
0C69D                           
0C69D                               ;; If 0, use max pointer value
0C69D D0 02                         BNE +
0C69F A2 04                             LDX #MAX_ANIMATIONS
0C6A1                               +
0C6A1                           
0C6A1                               ;; Decrease pointer by one
0C6A1 CA                            DEX
0C6A2 86 3B                         STX explosion_pointer
0C6A4                           
0C6A4                               ;; Load explosion data into RAM
0C6A4 A9 00                         LDA #$00
0C6A6 9D 64 03                      STA explosion_currentframe,x
0C6A9                           
0C6A9 A9 04                         LDA #ANIMATION_SPEED
0C6AB 9D 60 03                      STA explosion_timer,x
0C6AE                           
0C6AE A5 02                         LDA temp+2
0C6B0 29 0F                         AND #%00001111
0C6B2 A8                            TAY
0C6B3 B9 A3 D6                      LDA tbl_Times16,y
0C6B6 18                            CLC
0C6B7 69 0E                         ADC #$0E
0C6B9 9D 6C 03                      STA explosion_x,x
0C6BC                           
0C6BC A5 02                         LDA temp+2
0C6BE 29 F0                         AND #%11110000
0C6C0 18                            CLC
0C6C1 69 29                         ADC #$29
0C6C3 9D 70 03                      STA explosion_y,x
0C6C6                           
0C6C6 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C6C8 9D 68 03                      STA explosion_attributes,x
0C6CB A9 01                         LDA #$01
0C6CD 9D 74 03                      STA explosion_active,x
0C6D0                           
0C6D0 A5 02                         LDA temp+2
0C6D2 AA                            TAX
0C6D3                               
0C6D3                               
0C6D3                               ;; - Write #$00 in tile type ram (makes not-solid)
0C6D3 A9 00                         LDA #$00
0C6D5 9D 00 04                      STA tile_type, x
0C6D8                           
0C6D8                           
0C6D8                               ;; Add (80 + level number) to score
0C6D8 A5 41                         LDA current_level
0C6DA 18                            CLC
0C6DB 69 51                         ADC #81
0C6DD 20 21 C5                      JSR sub_AddAccumulatorToScore
0C6E0                           
0C6E0                           
0C6E0                               ;; - If there are no color blocks left:
0C6E0                               ;;   - Freeze ball
0C6E0                               ;;   - Initiate level-win state [@TODO]
0C6E0 C6 43                         DEC blocks_left
0C6E2 D0 06                         BNE +
0C6E4 A5 37                             LDA ball_flags
0C6E6 09 04                             ORA #FREEZE_BALL
0C6E8 85 37                             STA ball_flags
0C6EA                               +
0C6EA                               
0C6EA 60                            RTS
0C6EB                           
0C6EB                           +checkIfPaintBlock:
0C6EB                           
0C6EB                           
0C6EB                               ;; Check if collided tile is a paint block
0C6EB A5 42                         LDA colliding_tile
0C6ED 29 20                         AND #IS_PAINT_BLOCK
0C6EF F0 1A                         BEQ +checkIfDeathBlock
0C6F1                                   ;; It's a paint block. Update ball color
0C6F1                                   ;; Save x-register
0C6F1 8A                                TXA
0C6F2 48                                PHA
0C6F3                           
0C6F3                                   ;; Get tile color
0C6F3 A5 42                             LDA colliding_tile
0C6F5 29 0E                             AND #%00001110
0C6F7 0A                                ASL
0C6F8 0A                                ASL
0C6F9 0A                                ASL
0C6FA 0A                                ASL
0C6FB 85 00                             STA temp
0C6FD                           
0C6FD                                   ;; Apply tile color to ball
0C6FD A5 37                             LDA ball_flags
0C6FF 29 1F                             AND #%00011111
0C701 05 00                             ORA temp
0C703 85 37                             STA ball_flags
0C705 20 F8 C5                          JSR sub_ColorizeBall
0C708                           
0C708                                   ;; Restore x-register
0C708 68                                PLA
0C709 AA                                TAX
0C70A                           
0C70A                                   ;; Return
0C70A 60                                RTS
0C70B                               +checkIfDeathBlock:
0C70B                           
0C70B                               ;; Check if collided tile is a death block
0C70B A5 42                         LDA colliding_tile
0C70D 29 10                         AND #IS_DEATH_BLOCK
0C70F F0 38                         BEQ +checkIfMoveBlock
0C711                           
0C711                                   ;; It is a death block
0C711                                   ;; Freeze and kill player
0C711 A5 37                             LDA ball_flags
0C713 09 05                             ORA #%00000101
0C715 85 37                             STA ball_flags
0C717                                   
0C717                                   ;; Get free explosion slot
0C717 A6 3B                             LDX explosion_pointer
0C719 D0 02                             BNE +
0C71B A2 04                                 LDX #MAX_ANIMATIONS
0C71D                                   +
0C71D CA                                DEX
0C71E 86 3B                             STX explosion_pointer
0C720                           
0C720                                   ;; Load explosion data into RAM
0C720 A9 00                             LDA #$00
0C722 9D 64 03                          STA explosion_currentframe,x
0C725                           
0C725 A9 04                             LDA #ANIMATION_SPEED
0C727 9D 60 03                          STA explosion_timer,x
0C72A                           
0C72A A5 17                             LDA ball_xpos_hi
0C72C 38                                SEC
0C72D E9 08                             SBC #$08
0C72F 9D 6C 03                          STA explosion_x,x
0C732                           
0C732 A5 19                             LDA ball_ypos_hi
0C734 38                                SEC
0C735 E9 06                             SBC #$06
0C737 9D 70 03                          STA explosion_y,x
0C73A                           
0C73A A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C73C 9D 68 03                          STA explosion_attributes,x
0C73F                           
0C73F A9 01                             LDA #$01
0C741 9D 74 03                          STA explosion_active,x
0C744                           
0C744                                   ;; Set kill timer
0C744 A9 60                             LDA #$60
0C746 85 40                             STA kill_timer
0C748                           
0C748                                   ;; Return
0C748 60                                RTS
0C749                           
0C749                           
0C749                           +checkIfMoveBlock:
0C749                           
0C749                               ;; Check if collided tile is a move block
0C749 A5 42                         LDA colliding_tile
0C74B 29 40                         AND #IS_MOVE_BLOCK
0C74D D0 01                         BNE +
0C74F 60                                RTS
0C750                               +
0C750                           
0C750                               ;; It is a move block. Check if colors match
0C750 20 19 C6                      JSR sub_ColorsMatch
0C753 F0 01                         BEQ +
0C755 60                                RTS
0C756                               +
0C756                           
0C756                               ;; Colors match
0C756                               ;; - Check if next tile is within the playground
0C756                               ;; (push X onto stack as well)
0C756 8A                            TXA
0C757 48                            PHA
0C758 18                            CLC
0C759 65 36                         ADC move_block_space_to_check
0C75B AA                            TAX
0C75C                               
0C75C 29 0F                         AND #%00001111
0C75E C9 0E                         CMP #$0E
0C760 90 03                         BCC +
0C762 4C CC C7                          JMP +restoreX
0C765                               +
0C765 8A                            TXA
0C766 29 F0                         AND #%11110000
0C768 C9 A0                         CMP #$A0
0C76A D0 03                         BNE +
0C76C 4C CC C7                          JMP +restoreX
0C76F                               +
0C76F C9 F0                         CMP #$F0
0C771 D0 03                         BNE +
0C773 4C CC C7                          JMP +restoreX
0C776                               +
0C776                               
0C776                               ;; Check if the next tile is solid
0C776 BD 00 04                      LDA tile_type,x
0C779 29 01                         AND #TILE_IS_SOLID
0C77B F0 03                         BEQ +
0C77D 4C CC C7                          JMP +restoreX
0C780                               +
0C780                               
0C780                               ;; Move block has room to move
0C780                               ;; Pull original X from stack
0C780 68                            PLA
0C781 AA                            TAX        
0C782                               
0C782                               ;; Add the tiles that need updating to ppu buffer, and
0C782                               ;; update attribute table accordingly through ppu buffer
0C782 20 CF C7                      JSR sub_GetPPUAddrFromYXIndex
0C785 20 54 CC                      JSR sub_RemoveBlockFromScreen
0C788                           
0C788                               ;; Write #$00 in tile type ram (makes not-solid)
0C788 A9 00                         LDA #$00
0C78A 9D 00 04                      STA tile_type, x
0C78D                           
0C78D                               ;; Add move tile sprite over the original tile
0C78D                               ;; - Store x in temp variable
0C78D 86 03                         STX temp+3
0C78F                               
0C78F                               ;; - Update move block pointer
0C78F A6 3C                         LDX move_block_pointer
0C791 D0 02                         BNE +
0C793 A2 04                             LDX #MAX_ANIMATIONS
0C795                               +
0C795 CA                            DEX
0C796 86 3C                         STX move_block_pointer
0C798                               
0C798                               ;; - Set move block X position
0C798 A5 03                         LDA temp+3
0C79A 29 0F                         AND #%00001111
0C79C A8                            TAY
0C79D C8                            INY
0C79E B9 A3 D6                      LDA tbl_Times16,y
0C7A1 9D 78 03                      STA move_block_x,x
0C7A4                               
0C7A4                               ;; - Set move block Y position
0C7A4 A5 03                         LDA temp+3
0C7A6 29 F0                         AND #%11110000
0C7A8 18                            CLC
0C7A9 69 30                         ADC #$30
0C7AB 9D 7C 03                      STA move_block_y,x
0C7AE DE 7C 03                      DEC move_block_y,x
0C7B1                               
0C7B1                               ;; - Set timer to 16 frames
0C7B1 A9 10                         LDA #$10
0C7B3 9D 80 03                      STA move_block_timer,x
0C7B6                               
0C7B6                               ;; - Set move direction
0C7B6 A5 36                         LDA move_block_space_to_check
0C7B8 29 81                         AND #%10000001
0C7BA 18                            CLC
0C7BB 2A                            ROL
0C7BC 69 00                         ADC #$00
0C7BE 85 04                         STA temp+4
0C7C0                               
0C7C0                               ;; - Set block color as ball color and add direction
0C7C0 A5 37                         LDA ball_flags
0C7C2 29 E0                         AND #BALL_COLOR
0C7C4 05 04                         ORA temp+4
0C7C6 9D 84 03                      STA move_block_flags,x
0C7C9                               
0C7C9                               ;; - Restore original X
0C7C9 A6 03                         LDX temp+3
0C7CB                               
0C7CB                           
0C7CB                               ;; - In a different routine:
0C7CB                               ;;   - Add move tile data on the new tile location
0C7CB                               ;;   - Write the original tile type data on new position in ram
0C7CB                               ;;   - Destroy sprite
0C7CB                               ;;   - Update attribute table accordingly through ppu buffer
0C7CB                               ;; [@TODO]
0C7CB                                   
0C7CB                                   
0C7CB                               ;; Return
0C7CB 60                            RTS
0C7CC                           
0C7CC                           
0C7CC                           ;; Pull X register from stack before returning
0C7CC                           +restoreX:
0C7CC 68                            PLA
0C7CD AA                            TAX
0C7CE 60                            RTS
0C7CF                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C7CF                           sub_GetPPUAddrFromYXIndex:
0C7CF                           
0C7CF                               ;; Get the PPU address from YX index
0C7CF                               ;; - Expects YX index (aka tile offset) to be in the X register
0C7CF                               ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C7CF                               
0C7CF                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C7CF                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C7CF                               
0C7CF 8A                            TXA
0C7D0 29 C0                         AND #%11000000
0C7D2 18                            CLC
0C7D3 2A                            ROL
0C7D4 2A                            ROL
0C7D5 2A                            ROL
0C7D6 69 20                         ADC #$20
0C7D8 85 00                         STA temp
0C7DA                               
0C7DA 8A                            TXA
0C7DB 29 0F                         AND #%00001111
0C7DD 0A                            ASL
0C7DE 85 01                         STA temp+1
0C7E0                               
0C7E0 8A                            TXA
0C7E1 29 30                         AND #%00110000
0C7E3 0A                            ASL
0C7E4 0A                            ASL
0C7E5 18                            CLC
0C7E6 65 01                         ADC temp+1
0C7E8 85 01                         STA temp+1
0C7EA                               
0C7EA A5 00                         LDA temp
0C7EC 69 00                         ADC #$00
0C7EE 85 00                         STA temp
0C7F0                               
0C7F0 A5 01                         LDA temp+1
0C7F2 18                            CLC
0C7F3 69 C2                         ADC #$C2
0C7F5 85 01                         STA temp+1
0C7F7                               
0C7F7 A5 00                         LDA temp
0C7F9 69 00                         ADC #$00
0C7FB 85 00                         STA temp
0C7FD                           
0C7FD 60                            RTS0C7FE                           .include "game/subroutine/InitiateNudge.asm"
0C7FE                           
0C7FE                           sub_InitiateNudge:
0C7FE 85 37                         STA ball_flags
0C800 A9 05                         LDA #NUDGE_FRAMES
0C802 85 3E                         STA nudge_timer
0C804 60                            RTS
0C805                           
0C805                           .include "game/subroutine/JumpToPointer.asm"
0C805                           sub_JumpToPointer:
0C805 6C 0C 00                      JMP (pointer)
0C808                               ;RTS must be handled by the routine (pointer) jumps to
0C808                           .include "game/subroutine/LoadGameScreen.asm"
0C808                           sub_LoadGameScreen:
0C808                           
0C808                               ;; Clear the screen
0C808 20 8D C5                      JSR sub_ClearScreen
0C80B                               
0C80B                               ;; Clear collision and attribute data; reset blocks left in the process
0C80B A2 00                         LDX #$00
0C80D 8A                            TXA
0C80E 85 43                         STA blocks_left
0C810                               -
0C810 9D 00 04                          STA tile_type,x
0C813 E8                                INX
0C814 D0 FA                         BNE -
0C816                               
0C816                               ;; Get pointer from current level
0C816 A6 41                         LDX current_level
0C818 BD 58 D6                      LDA tbl_lvl_layout_lo,x
0C81B 85 0C                         STA pointer
0C81D BD 3F D6                      LDA tbl_lvl_layout_hi,x
0C820 85 0D                         STA pointer+1
0C822                           
0C822                               ;; Set up the loop
0C822 A0 00                         LDY #$00
0C824                           -drawRowColumnLoop:
0C824                           
0C824                               ;; Load (x,y) of current set of tiles
0C824 B1 0C                         LDA (pointer),y
0C826                           
0C826                               ;; Check if level is done; if so, skip the loop
0C826 C9 FF                         CMP #LEVEL_END
0C828 D0 03                         BNE +
0C82A 4C 73 C9                          JMP +doneLevelLoad
0C82D                               +
0C82D                           
0C82D                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C82D 85 00                         STA temp
0C82F C8                            INY
0C830 B1 0C                         LDA (pointer),y
0C832 85 01                         STA temp+1
0C834                               
0C834                               ;; Convert (x,y) to PPU address
0C834                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C834 A5 00                         LDA temp
0C836 29 0F                         AND #%00001111
0C838 4A                            LSR
0C839 4A                            LSR
0C83A 09 20                         ORA #$20
0C83C 85 02                         STA temp+2
0C83E                               
0C83E                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C83E A5 00                         LDA temp
0C840 29 F0                         AND #%11110000
0C842 4A                            LSR
0C843 4A                            LSR
0C844 4A                            LSR
0C845 85 03                         STA temp+3
0C847                               
0C847 A5 00                         LDA temp
0C849 29 03                         AND #%00000011
0C84B AA                            TAX
0C84C BD B3 D6                      LDA tbl_Times64,x
0C84F 18                            CLC
0C850 65 03                         ADC temp+3
0C852 18                            CLC
0C853 69 C2                         ADC #$C2
0C855 85 03                         STA temp+3
0C857                               
0C857                               ;; Add carry to temp+2
0C857 A5 02                         LDA temp+2
0C859 69 00                         ADC #$00
0C85B 85 02                         STA temp+2
0C85D                           
0C85D                               ;; Convert tile data to loop count and tile type
0C85D                               ;; temp+4 = color
0C85D A5 01                         LDA temp+1
0C85F 29 07                         AND #%00000111
0C861 85 04                         STA temp+4
0C863                               
0C863                               ;; If color = 7, this is a wall
0C863 C9 07                         CMP #%00000111
0C865 F0 12                         BEQ +wallHack
0C867                                   
0C867                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C867 29 01                             AND #%00000001
0C869 F0 02                             BEQ +
0C86B A9 05                                 LDA #$05
0C86D                                   +
0C86D 85 07                             STA temp+7
0C86F                                
0C86F                                   ;; temp+5 = tile type
0C86F A5 01                             LDA temp+1
0C871 4A                                LSR
0C872 4A                                LSR
0C873 4A                                LSR
0C874 29 03                             AND #%00000011
0C876 4C 7F C8                          JMP +setTileType
0C879                               +wallHack:
0C879                               
0C879                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C879 A9 00                         LDA #$00
0C87B 85 07                         STA temp+7
0C87D A9 04                         LDA #$04
0C87F                           
0C87F                           +setTileType:    
0C87F 85 05                         STA temp+5
0C881                               
0C881                               ;; X = tile offset
0C881 18                            CLC
0C882 65 07                         ADC temp+7
0C884 AA                            TAX
0C885                               
0C885                               ;; temp+6 = number of tiles
0C885 A5 01                         LDA temp+1
0C887 29 60                         AND #%01100000
0C889 4A                            LSR
0C88A 4A                            LSR
0C88B 4A                            LSR
0C88C 4A                            LSR
0C88D 4A                            LSR
0C88E 85 06                         STA temp+6
0C890                               
0C890                               ;; Translate (x,y) to (y,x) for tile RAM
0C890 A5 00                         LDA temp
0C892 0A                            ASL
0C893 0A                            ASL
0C894 0A                            ASL
0C895 0A                            ASL
0C896 85 08                         STA temp+8
0C898 A5 00                         LDA temp
0C89A 4A                            LSR
0C89B 4A                            LSR
0C89C 4A                            LSR
0C89D 4A                            LSR
0C89E 05 08                         ORA temp+8
0C8A0 85 00                         STA temp
0C8A2                               
0C8A2                               ;; Set up loop
0C8A2 98                            TYA
0C8A3 48                            PHA
0C8A4 A4 06                         LDY temp+6
0C8A6                           
0C8A6                               -drawTileLoop:
0C8A6                                   ;; Write PPU address
0C8A6 2C 02 20                          BIT PPU_STATUS
0C8A9 A5 02                             LDA temp+2
0C8AB 8D 06 20                          STA PPU_ADDR
0C8AE A5 03                             LDA temp+3
0C8B0 8D 06 20                          STA PPU_ADDR
0C8B3                                   
0C8B3                                   ;; Write first and second tile
0C8B3 BD B7 D6                          LDA tbl_GametileTopLeft,x
0C8B6 8D 07 20                          STA PPU_DATA
0C8B9 BD C1 D6                          LDA tbl_GametileTopRight,x
0C8BC 8D 07 20                          STA PPU_DATA
0C8BF                                   
0C8BF                                   ;; Update PPU address
0C8BF 2C 02 20                          BIT PPU_STATUS
0C8C2 A5 02                             LDA temp+2
0C8C4 8D 06 20                          STA PPU_ADDR
0C8C7 A5 03                             LDA temp+3
0C8C9 18                                CLC
0C8CA 69 20                             ADC #$20
0C8CC 8D 06 20                          STA PPU_ADDR
0C8CF                                   
0C8CF                                   ;; Write third and fourth tile
0C8CF BD CB D6                          LDA tbl_GametileBottomLeft,x
0C8D2 8D 07 20                          STA PPU_DATA
0C8D5 BD D5 D6                          LDA tbl_GametileBottomRight,x
0C8D8 8D 07 20                          STA PPU_DATA
0C8DB                           
0C8DB                                   ;; Push x-register to stack
0C8DB 8A                                TXA
0C8DC 48                                PHA
0C8DD                           
0C8DD                                   ;; Update tile RAM (aka collision table)
0C8DD A6 05                             LDX temp+5
0C8DF BD DF D6                          LDA tbl_GameTileRamByte,x
0C8E2 05 04                             ORA temp+4
0C8E4 0A                                ASL
0C8E5 09 01                             ORA #%00000001
0C8E7 A6 00                             LDX temp
0C8E9 9D 00 04                          STA tile_type,x
0C8EC                           
0C8EC                                   ;; Check if shade 1 should be drawn
0C8EC E8                                INX
0C8ED BD 00 04                          LDA tile_type,x
0C8F0 D0 05                             BNE +
0C8F2 A9 00                                 LDA #$00
0C8F4 8D 07 20                              STA PPU_DATA
0C8F7                                   +
0C8F7                                   
0C8F7                                   ;; Check if shade 2 should be drawn
0C8F7 A5 03                             LDA temp+3
0C8F9 18                                CLC
0C8FA 69 41                             ADC #$41
0C8FC 85 03                             STA temp+3
0C8FE A5 02                             LDA temp+2
0C900 69 00                             ADC #$00
0C902 85 02                             STA temp+2
0C904                                   
0C904 8A                                TXA
0C905 18                                CLC
0C906 69 0F                             ADC #$0F
0C908 AA                                TAX
0C909                                   
0C909 BD 00 04                          LDA tile_type,x
0C90C D0 0F                             BNE +
0C90E A5 02                                 LDA temp+2
0C910 8D 06 20                              STA PPU_ADDR
0C913 A5 03                                 LDA temp+3
0C915 8D 06 20                              STA PPU_ADDR
0C918 A9 00                                 LDA #$00
0C91A 8D 07 20                              STA PPU_DATA
0C91D                                   +
0C91D                           
0C91D                                   ;; Check if shade 3 should be drawn
0C91D E8                                INX
0C91E E6 03                             INC temp+3
0C920 BD 00 04                          LDA tile_type,x
0C923 D0 0F                             BNE +
0C925 A5 02                                 LDA temp+2
0C927 8D 06 20                              STA PPU_ADDR
0C92A A5 03                                 LDA temp+3
0C92C 8D 06 20                              STA PPU_ADDR
0C92F A9 00                                 LDA #$00
0C931 8D 07 20                              STA PPU_DATA
0C934                                   +
0C934                                   
0C934                                   ;; Restore x-register from stack
0C934 68                                PLA
0C935 AA                                TAX
0C936                                   
0C936                                   ;; Reset pointer for next tile
0C936 A5 03                             LDA temp+3
0C938 38                                SEC
0C939 E9 42                             SBC #$42
0C93B 85 03                             STA temp+3
0C93D A5 02                             LDA temp+2
0C93F E9 00                             SBC #$00
0C941 85 02                             STA temp+2
0C943                                   
0C943                                   ;; Draw next metatile in this loop (if any left)
0C943 88                                DEY
0C944 30 27                             BMI +doneDrawingRowColumn
0C946                                   
0C946                                   ;; Is it a row or a column?
0C946 A5 01                             LDA temp+1
0C948 10 17                             BPL +
0C94A                                       ;; It is a column: move pointer down (+$40)
0C94A A5 03                                 LDA temp+3
0C94C 18                                    CLC
0C94D 69 40                                 ADC #$40
0C94F 85 03                                 STA temp+3
0C951 A5 02                                 LDA temp+2
0C953 69 00                                 ADC #$00
0C955 85 02                                 STA temp+2
0C957                                       
0C957                                       ;; Add 16 to temp (as a tile RAM pointer)
0C957 A5 00                                 LDA temp
0C959 18                                    CLC
0C95A 69 10                                 ADC #$10
0C95C 85 00                                 STA temp
0C95E 4C 6A C9                              JMP +drawNextTile
0C961                                   +
0C961                                   
0C961                                   ;; It is a row: move pointer right (+$02)
0C961 A5 03                             LDA temp+3
0C963 18                                CLC
0C964 69 02                             ADC #$02
0C966 85 03                             STA temp+3
0C968                                   
0C968                                   ;; Add 1 to temp (as a tile RAM pointer)
0C968 E6 00                             INC temp
0C96A                           
0C96A                               
0C96A                               ;; Next tile in the row/column
0C96A                                   +drawNextTile:
0C96A 4C A6 C8                      JMP -drawTileLoop
0C96D                           
0C96D                               ;; Go to the next set of tiles
0C96D                           +doneDrawingRowColumn:
0C96D 68                            PLA
0C96E A8                            TAY
0C96F C8                            INY
0C970 4C 24 C8                      JMP -drawRowColumnLoop
0C973                           
0C973                           ;; Level loading is done
0C973                           +doneLevelLoad:
0C973                           
0C973                               ;; Count number of color blocks
0C973 A2 A0                         LDX #160
0C975                               -
0C975 BD FF 03                          LDA tile_type-1,x
0C978 29 80                             AND #%10000000
0C97A F0 02                             BEQ +
0C97C E6 43                                 INC blocks_left
0C97E                                   +
0C97E CA                                DEX
0C97F D0 F4                         BNE -
0C981                           
0C981                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C981 A9 20                         LDA #$20
0C983 8D 06 20                      STA PPU_ADDR
0C986 A9 A2                         LDA #$A2
0C988 8D 06 20                      STA PPU_ADDR
0C98B A9 35                         LDA #$35
0C98D 20 BB CB                      JSR sub_Draw28HorizontalTiles
0C990                           
0C990                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C990 A9 23                         LDA #$23
0C992 8D 06 20                      STA PPU_ADDR
0C995 A9 42                         LDA #$42
0C997 8D 06 20                      STA PPU_ADDR
0C99A A9 31                         LDA #$31
0C99C 20 BB CB                      JSR sub_Draw28HorizontalTiles
0C99F                           
0C99F                               ;; Left & right game bounds
0C99F                               ;; Set PPU_ADDR and store in temp variables
0C99F A9 20                         LDA #$20
0C9A1 85 00                         STA temp
0C9A3 8D 06 20                      STA PPU_ADDR
0C9A6 A9 C1                         LDA #$C1
0C9A8 85 01                         STA temp+1
0C9AA 8D 06 20                      STA PPU_ADDR
0C9AD                               
0C9AD                               ;; Set vertical bound tile and set up loop
0C9AD A0 33                         LDY #$33
0C9AF A2 14                         LDX #20
0C9B1                               -
0C9B1                                   ;; Show left tile
0C9B1 8C 07 20                          STY PPU_DATA
0C9B4                                   
0C9B4                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C9B4 A5 00                             LDA temp
0C9B6 8D 06 20                          STA PPU_ADDR
0C9B9 A5 01                             LDA temp+1
0C9BB 18                                CLC
0C9BC 69 1D                             ADC #29
0C9BE 85 01                             STA temp+1
0C9C0 8D 06 20                          STA PPU_ADDR
0C9C3                           
0C9C3                                   ;; Show right tile
0C9C3 8C 07 20                          STY PPU_DATA
0C9C6                           
0C9C6                                   ;; Check if we're done yet
0C9C6 CA                                DEX
0C9C7 F0 18                             BEQ +drawCorners
0C9C9                                   
0C9C9                                   ;; Not done yet: add 3 to low byte for next left bound
0C9C9 A5 01                             LDA temp+1
0C9CB 18                                CLC
0C9CC 69 03                             ADC #3
0C9CE 85 01                             STA temp+1
0C9D0                                   
0C9D0                                   ;; Apply carry to high byte
0C9D0 A5 00                             LDA temp
0C9D2 69 00                             ADC #$00
0C9D4 85 00                             STA temp
0C9D6                                   
0C9D6                                   ;; Store next PPU_ADDR to draw at
0C9D6 8D 06 20                          STA PPU_ADDR
0C9D9 A5 01                             LDA temp+1
0C9DB 8D 06 20                          STA PPU_ADDR
0C9DE 4C B1 C9                      JMP -
0C9E1                               
0C9E1                               
0C9E1                           
0C9E1                           +drawCorners:
0C9E1                               ;; Draw the corners of the playing field
0C9E1 A9 20                         LDA #$20
0C9E3 8D 06 20                      STA PPU_ADDR
0C9E6 A9 A1                         LDA #$A1
0C9E8 8D 06 20                      STA PPU_ADDR
0C9EB A9 39                         LDA #$39
0C9ED 8D 07 20                      STA PPU_DATA
0C9F0                           
0C9F0 A9 20                         LDA #$20
0C9F2 8D 06 20                      STA PPU_ADDR
0C9F5 A9 BE                         LDA #$BE
0C9F7 8D 06 20                      STA PPU_ADDR
0C9FA A9 3A                         LDA #$3A
0C9FC 8D 07 20                      STA PPU_DATA
0C9FF                               ;; (added background tile for Sprite-0 hit)
0C9FF A9 3F                         LDA #$3F
0CA01 8D 07 20                      STA PPU_DATA
0CA04                           
0CA04 A9 23                         LDA #$23
0CA06 8D 06 20                      STA PPU_ADDR
0CA09 A9 41                         LDA #$41
0CA0B 8D 06 20                      STA PPU_ADDR
0CA0E A9 36                         LDA #$36
0CA10 8D 07 20                      STA PPU_DATA
0CA13                           
0CA13 A9 23                         LDA #$23
0CA15 8D 06 20                      STA PPU_ADDR
0CA18 A9 5E                         LDA #$5E
0CA1A 8D 06 20                      STA PPU_ADDR
0CA1D A9 34                         LDA #$34
0CA1F 8D 07 20                      STA PPU_DATA
0CA22                           
0CA22                           
0CA22                               ;; Draw the hud labels
0CA22 A9 20                         LDA #$20
0CA24 8D 06 20                      STA PPU_ADDR
0CA27 A9 62                         LDA #$62
0CA29 8D 06 20                      STA PPU_ADDR
0CA2C A2 00                         LDX #$00
0CA2E                               -
0CA2E BD E4 D6                          LDA tbl_HudText,x
0CA31 8D 07 20                          STA PPU_DATA
0CA34 E8                                INX
0CA35 E0 1C                             CPX #28
0CA37 D0 F5                         BNE -
0CA39                           
0CA39                           
0CA39                               ;; Draw the current score
0CA39 A9 20                         LDA #$20
0CA3B 8D 06 20                      STA PPU_ADDR
0CA3E A9 83                         LDA #$83
0CA40 8D 06 20                      STA PPU_ADDR
0CA43 A2 00                         LDX #$00
0CA45                               -
0CA45 B5 20                             LDA ball_score,x
0CA47 18                                CLC
0CA48 69 01                             ADC #$01
0CA4A 8D 07 20                          STA PPU_DATA
0CA4D E8                                INX
0CA4E E0 06                             CPX #$06
0CA50 D0 F3                         BNE -
0CA52                           
0CA52                           
0CA52                               ;; Draw the level number
0CA52                               ;; (with primitive HEX>DEC)
0CA52 A5 41                         LDA current_level
0CA54 18                            CLC
0CA55 69 01                         ADC #$01
0CA57 85 01                         STA temp+1
0CA59                               
0CA59 C9 14                         CMP #20
0CA5B B0 13                         BCS +tempIsTwo
0CA5D                               
0CA5D C9 0A                         CMP #10
0CA5F B0 05                         BCS +tempIsOne
0CA61                               
0CA61 A9 00                         LDA #$00
0CA63 4C 77 CA                      JMP +setTemp
0CA66                               
0CA66                           +tempIsOne:
0CA66 38                            SEC
0CA67 E9 0A                         SBC #10
0CA69 85 01                         STA temp+1
0CA6B A9 01                         LDA #$01
0CA6D 4C 77 CA                      JMP +setTemp
0CA70                               
0CA70                           +tempIsTwo:
0CA70 38                            SEC
0CA71 E9 14                         SBC #20
0CA73 85 01                         STA temp+1
0CA75 A9 02                         LDA #$02
0CA77                           
0CA77                           +setTemp:
0CA77 85 00                         STA temp
0CA79                               
0CA79 E6 00                         INC temp
0CA7B E6 01                         INC temp+1
0CA7D                               
0CA7D A9 20                         LDA #$20
0CA7F 8D 06 20                      STA PPU_ADDR
0CA82 A9 8B                         LDA #$8B
0CA84 8D 06 20                      STA PPU_ADDR
0CA87 A5 00                         LDA temp
0CA89 8D 07 20                      STA PPU_DATA
0CA8C A5 01                         LDA temp+1
0CA8E 8D 07 20                      STA PPU_DATA
0CA91                           
0CA91                           
0CA91                               ;; Draw lives (presumes lives to be capped at 9)
0CA91 A9 20                         LDA #$20
0CA93 8D 06 20                      STA PPU_ADDR
0CA96 A9 92                         LDA #$92
0CA98 8D 06 20                      STA PPU_ADDR
0CA9B A6 1F                         LDX ball_lives
0CA9D E8                            INX
0CA9E 8E 07 20                      STX PPU_DATA
0CAA1                           
0CAA1                           
0CAA1                               ;; Set and draw bonus
0CAA1 A9 07                         LDA #$07
0CAA3 85 2C                         STA ball_bonus
0CAA5 A9 09                         LDA #$09
0CAA7 85 2D                         STA ball_bonus+1
0CAA9 85 2E                         STA ball_bonus+2
0CAAB                               
0CAAB A9 20                         LDA #$20
0CAAD 8D 06 20                      STA PPU_ADDR
0CAB0 A9 9A                         LDA #$9A
0CAB2 8D 06 20                      STA PPU_ADDR
0CAB5 A2 00                         LDX #$00
0CAB7                               -
0CAB7 B5 2C                             LDA ball_bonus,x
0CAB9 18                                CLC
0CABA 69 01                             ADC #$01
0CABC 8D 07 20                          STA PPU_DATA
0CABF E8                                INX
0CAC0 E0 03                             CPX #$03
0CAC2 D0 F3                         BNE -
0CAC4                           
0CAC4                           
0CAC4                               ;; Set attribute data to RAM
0CAC4                               
0CAC4                               ;; Byte 0-7 of attribute ram should be #%10100000
0CAC4 A2 00                         LDX #$00
0CAC6 A9 A0                         LDA #$A0
0CAC8                               -
0CAC8 9D A0 04                          STA tile_attributes,x
0CACB E8                                INX
0CACC E0 08                             CPX #$08
0CACE D0 F8                         BNE -
0CAD0                           
0CAD0                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CAD0                           
0CAD0                           -attributeLoop:
0CAD0                               ;; Reset current attribute value
0CAD0 A9 00                         LDA #$00
0CAD2 85 02                         STA temp+2
0CAD4                           
0CAD4                               ;; Get first metatile in tile ram based on attribute index
0CAD4                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CAD4 8A                            TXA
0CAD5                           
0CAD5 38                            SEC
0CAD6 E9 08                         SBC #$08
0CAD8 85 01                         STA temp+1      ; attr - 8 (temp1)
0CADA 0A                            ASL             ; * 2
0CADB 85 00                         STA temp        ; temp = temp1 * 2
0CADD                           
0CADD A5 01                         LDA temp+1      ; temp1
0CADF 29 F8                         AND #%11111000  ; rounded down to 8's
0CAE1 0A                            ASL             ; * 2
0CAE2 18                            CLC
0CAE3 65 00                         ADC temp        ; + temp1 * 2
0CAE5 85 00                         STA temp        ; first metatile
0CAE7                           
0CAE7                               ;; Store first metatile in y-register
0CAE7 A8                            TAY
0CAE8                           
0CAE8                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CAE8 8A                            TXA
0CAE9 29 07                         AND #%00000111
0CAEB C9 07                         CMP #%00000111
0CAED F0 0B                         BEQ +
0CAEF                           
0CAEF                               ;; If X >= $30, don't apply bottom right metatile
0CAEF E0 30                         CPX #$30
0CAF1 B0 07                         BCS +
0CAF3                               
0CAF3                               ;; Add metatile1 subpalette to attribute value
0CAF3 B9 00 04                      LDA tile_type,y
0CAF6 29 0C                         AND #%00001100
0CAF8 85 02                         STA temp+2
0CAFA                               +
0CAFA                           
0CAFA                           
0CAFA                               ;; Apply second metatile
0CAFA 88                            DEY
0CAFB                           
0CAFB                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CAFB 8A                            TXA
0CAFC 29 07                         AND #%00000111
0CAFE F0 10                         BEQ +
0CB00                           
0CB00                               ;; If X >= $30, don't apply bottom left metatile
0CB00 E0 30                         CPX #$30
0CB02 B0 0C                         BCS +
0CB04                           
0CB04                           
0CB04                           
0CB04                               ;; Add metatile2 subpalette to attribute value
0CB04 B9 00 04                      LDA tile_type,y
0CB07 29 0C                         AND #%00001100
0CB09 4A                            LSR
0CB0A 4A                            LSR
0CB0B 05 02                         ORA temp+2
0CB0D 4C 12 CB                      JMP ++
0CB10                               +
0CB10 A5 02                         LDA temp+2
0CB12                               ++
0CB12 0A                            ASL
0CB13 0A                            ASL
0CB14 85 02                         STA temp+2
0CB16                           
0CB16                           
0CB16                               ;; Apply third metatile
0CB16 98                            TYA
0CB17 38                            SEC
0CB18 E9 0F                         SBC #$0F
0CB1A A8                            TAY
0CB1B                           
0CB1B                               ;; If X MOD 8 == 7, don't apply top right metatile
0CB1B 8A                            TXA
0CB1C 29 07                         AND #%00000111
0CB1E C9 07                         CMP #%00000111
0CB20 F0 11                         BEQ +
0CB22                           
0CB22                               ;; If X < $10, don't apply top right metatile
0CB22 8A                            TXA
0CB23 29 F0                         AND #%11110000
0CB25 F0 0C                         BEQ +
0CB27                           
0CB27                               ;; Add metatile3 subpalette to attribute value
0CB27 B9 00 04                      LDA tile_type,y
0CB2A 29 0C                         AND #%00001100
0CB2C 4A                            LSR
0CB2D 4A                            LSR
0CB2E 05 02                         ORA temp+2
0CB30 4C 35 CB                      JMP ++
0CB33                               +
0CB33 A5 02                         LDA temp+2
0CB35                               ++
0CB35 0A                            ASL
0CB36 0A                            ASL
0CB37 85 02                         STA temp+2
0CB39                           
0CB39                           
0CB39                               ;; Apply fourth metatile
0CB39 88                            DEY
0CB3A                           
0CB3A                               ;; If X MOD 8 == 0, don't apply top left metatile
0CB3A 8A                            TXA
0CB3B 29 07                         AND #%00000111
0CB3D F0 11                         BEQ +
0CB3F                           
0CB3F                               ;; If X < $10, don't apply top left metatile
0CB3F 8A                            TXA
0CB40 29 F0                         AND #%11110000
0CB42 F0 0C                         BEQ +
0CB44                           
0CB44                               ;; Add metatile4 subpalette to attribute value
0CB44 B9 00 04                      LDA tile_type,y
0CB47 29 0C                         AND #%00001100
0CB49 4A                            LSR
0CB4A 4A                            LSR
0CB4B 05 02                         ORA temp+2
0CB4D 4C 52 CB                      JMP ++
0CB50                               +
0CB50 A5 02                         LDA temp+2
0CB52                               ++
0CB52 9D A0 04                      STA tile_attributes,x
0CB55                           
0CB55                               ;; Check the next attribute, if any left
0CB55 E8                            INX
0CB56 E0 38                         CPX #$38
0CB58 F0 03                         BEQ +
0CB5A 4C D0 CA                          JMP -attributeLoop
0CB5D                               +
0CB5D                           
0CB5D                               ;; Stream attribute RAM to PPU
0CB5D 2C 02 20                      BIT PPU_STATUS
0CB60 A9 23                         LDA #$23
0CB62 8D 06 20                      STA PPU_ADDR
0CB65 A9 C0                         LDA #$C0
0CB67 8D 06 20                      STA PPU_ADDR
0CB6A A2 00                         LDX #$00
0CB6C                               -
0CB6C BD A0 04                          LDA tile_attributes,x
0CB6F 8D 07 20                          STA PPU_DATA
0CB72 E8                                INX
0CB73 E0 40                             CPX #$40
0CB75 D0 F5                         BNE -
0CB77                           
0CB77                               ;; Set initial ball position
0CB77 A6 41                         LDX current_level
0CB79 BD 71 D6                      LDA tbl_lvl_ball_startpos,x
0CB7C 29 F0                         AND #%11110000
0CB7E 18                            CLC
0CB7F 69 34                         ADC #$34
0CB81 85 19                         STA ball_ypos_hi
0CB83 BD 71 D6                      LDA tbl_lvl_ball_startpos,x
0CB86 0A                            ASL
0CB87 0A                            ASL
0CB88 0A                            ASL
0CB89 0A                            ASL
0CB8A 18                            CLC
0CB8B 69 14                         ADC #$14
0CB8D 85 17                         STA ball_xpos_hi
0CB8F A9 00                         LDA #$00
0CB91 85 18                         STA ball_xpos_lo
0CB93 85 1A                         STA ball_ypos_lo
0CB95                               
0CB95                               ;; Set initial ball color and direction
0CB95 BD 8A D6                      LDA tbl_lvl_ball_init,x
0CB98 29 F0                         AND #%11110000
0CB9A 85 37                         STA ball_flags
0CB9C 20 F8 C5                      JSR sub_ColorizeBall
0CB9F                               
0CB9F                               ;; Reset bonus timer
0CB9F A9 06                         LDA #BONUS_FRAMES
0CBA1 85 3F                         STA bonus_timer
0CBA3                               
0CBA3                               ;; Play background noise
0CBA3 A9 08                         LDA #$08
0CBA5 8D 15 40                      STA APU_STATUS
0CBA8 8D 0F 40                      STA NOISE_LENGTH
0CBAB A9 0E                         LDA #$0E
0CBAD 85 46                         STA current_noise
0CBAF A9 00                         LDA #$00
0CBB1 85 44                         STA max_noise
0CBB3 85 47                         STA noise_timer
0CBB5 85 45                         STA sweep_noise
0CBB7 20 80 C5                      JSR sub_BackgroundNoise
0CBBA                           
0CBBA                               ;; Return
0CBBA 60                            RTS
0CBBB                           
0CBBB                           
0CBBB                           ;; Subroutine: draw 28 tiles in a row
0CBBB                           sub_Draw28HorizontalTiles:
0CBBB A2 1C                         LDX #28
0CBBD                               -
0CBBD 8D 07 20                          STA PPU_DATA
0CBC0 CA                                DEX
0CBC1 D0 FA                         BNE -
0CBC3 60                            RTS0CBC4                           .include "game/subroutine/LoadIntroScreen.asm"
0CBC4                           sub_LoadIntroScreen:
0CBC4                           
0CBC4                               ;; Load intro palette
0CBC4 2C 02 20                      BIT PPU_STATUS
0CBC7 A9 3F                         LDA #$3F
0CBC9 8D 06 20                      STA PPU_ADDR
0CBCC A9 00                         LDA #$00
0CBCE 8D 06 20                      STA PPU_ADDR
0CBD1 A2 00                         LDX #$00
0CBD3                               -
0CBD3 BD 16 CE                          LDA tbl_IntroScreenPalette,x
0CBD6 8D 07 20                          STA PPU_DATA
0CBD9 E8                                INX
0CBDA E0 20                             CPX #$20
0CBDC D0 F5                         BNE -
0CBDE                               
0CBDE                               ;; Put ball in the middle
0CBDE A9 7C                         LDA #$7C
0CBE0 85 17                         STA ball_xpos_hi
0CBE2 85 19                         STA ball_ypos_hi
0CBE4                           
0CBE4                               ;; Clear the screen
0CBE4 20 8D C5                      JSR sub_ClearScreen
0CBE7                           
0CBE7                               ;; Set up intro screen draw loop
0CBE7 A2 00                         LDX #$00
0CBE9                           
0CBE9                           -loop_IntroScreenData:
0CBE9                           
0CBE9                               ;; Get current byte from intro screen data
0CBE9 BD 3E CE                      LDA tbl_IntroScreenData,x
0CBEC                           
0CBEC                               ;; If current byte is #$3F, we're done drawing.
0CBEC C9 3F                         CMP #$3F
0CBEE D0 03                         BNE +
0CBF0 4C 3D CC                          JMP +goToEndIntroScreen
0CBF3                               +
0CBF3                           
0CBF3                               ;; If highest bits are %11, draw a plain tile
0CBF3 29 C0                         AND #%11000000
0CBF5 D0 03                         BNE +
0CBF7 4C 1D CC                          JMP +drawTile
0CBFA                               +
0CBFA                               
0CBFA                               ;; If highest bits are %01, set the PPU address
0CBFA                               ;; If not, draw two logo tiles
0CBFA C9 40                         CMP #%01000000
0CBFC D0 03                         BNE +drawLogo
0CBFE 4C 27 CC                          JMP +setPpuAddr
0CC01                           
0CC01                           +drawLogo:
0CC01                               ;; Get bits 0-2 and store in a temp variable
0CC01 BD 3E CE                      LDA tbl_IntroScreenData,x
0CC04 29 07                         AND #%00000111
0CC06 85 00                         STA temp
0CC08                               
0CC08                               ;; Get bits 3-5, shift over to get a value from 0-7
0CC08 BD 3E CE                      LDA tbl_IntroScreenData,x
0CC0B 4A                            LSR
0CC0C 4A                            LSR
0CC0D 4A                            LSR
0CC0E 29 07                         AND #%00000111
0CC10                               
0CC10                               ;; Draw the tile that corresponds with that value
0CC10 A8                            TAY
0CC11 20 70 C6                      JSR sub_drawIntroScreenLogoTile
0CC14                               
0CC14                               ;; Do the same for the value stored in temp
0CC14 A4 00                         LDY temp
0CC16 20 70 C6                      JSR sub_drawIntroScreenLogoTile
0CC19                           
0CC19                               ;; Next byte please
0CC19 E8                            INX
0CC1A 4C E9 CB                      JMP -loop_IntroScreenData
0CC1D                           
0CC1D                           +drawTile:
0CC1D                               ;; Just draw the tile value on screen
0CC1D BD 3E CE                      LDA tbl_IntroScreenData,x
0CC20 8D 07 20                      STA PPU_DATA
0CC23                               
0CC23                               ;; Next byte please
0CC23 E8                            INX
0CC24 4C E9 CB                      JMP -loop_IntroScreenData
0CC27                           
0CC27                           
0CC27                           +setPpuAddr:
0CC27                               ;; Reset the PPU latch
0CC27 2C 02 20                      BIT PPU_STATUS
0CC2A                               
0CC2A                               ;; Sanitize and write the high byte of the PPU address
0CC2A BD 3E CE                      LDA tbl_IntroScreenData,x
0CC2D 29 3F                         AND #%00111111
0CC2F 8D 06 20                      STA PPU_ADDR
0CC32                           
0CC32                               ;; Write the low byte of the PPU address
0CC32 E8                            INX
0CC33 BD 3E CE                      LDA tbl_IntroScreenData,x
0CC36 8D 06 20                      STA PPU_ADDR
0CC39                               
0CC39                               ;; PPU has been set up to draw tiles at the correct spot now.
0CC39                               
0CC39                               ;; Next byte please.
0CC39 E8                            INX
0CC3A 4C E9 CB                      JMP -loop_IntroScreenData
0CC3D                           
0CC3D                           +goToEndIntroScreen:
0CC3D                           
0CC3D                               ;; To color the 1.LEVEL: line green, we need to update two
0CC3D                               ;; values in the PPU attribute data.
0CC3D 2C 02 20                      BIT PPU_STATUS
0CC40 A9 23                         LDA #$23
0CC42 8D 06 20                      STA PPU_ADDR
0CC45 A9 CB                         LDA #$CB
0CC47 8D 06 20                      STA PPU_ADDR
0CC4A A9 0A                         LDA #%00001010
0CC4C 8D 07 20                      STA PPU_DATA
0CC4F 8D 07 20                      STA PPU_DATA
0CC52                           
0CC52 60                            RTS
0CC53                           
0CC53                           .include "game/subroutine/LoadWinScreen.asm"
0CC53                           sub_LoadWinScreen:
0CC53 60                            RTS
0CC54                           
0CC54                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CC54                           sub_RemoveBlockFromScreen:
0CC54                           
0CC54                               ;; Get current buffer location
0CC54 A4 3A                         LDY ppu_buffer_pointer
0CC56                               
0CC56                               ;; TILE 1: if metatile on top left is solid, draw
0CC56                               ;; null tile, else draw random noise tile
0CC56 A9 00                         LDA #$00
0CC58 85 39                         STA ppu_buffer_update
0CC5A                               
0CC5A A5 00                         LDA temp
0CC5C 99 00 03                      STA ppu_buffer,y
0CC5F C8                            INY
0CC60 A5 01                         LDA temp+1
0CC62 99 00 03                      STA ppu_buffer,y
0CC65 C8                            INY
0CC66                               
0CC66 8A                            TXA
0CC67 29 0F                         AND #%00001111
0CC69 F0 11                         BEQ +drawRandomTile
0CC6B                           
0CC6B 8A                            TXA
0CC6C 29 F0                         AND #%11110000
0CC6E F0 0C                         BEQ +drawRandomTile
0CC70                           
0CC70 BD EF 03                      LDA tile_type-17,x
0CC73 29 01                         AND #%00000001
0CC75 F0 05                         BEQ +drawRandomTile  
0CC77                           
0CC77                               ;; Draw a null tile
0CC77 A9 00                         LDA #$00
0CC79 4C 84 CC                      JMP +addToPPUBuffer
0CC7C                               
0CC7C                           +drawRandomTile:
0CC7C                               ;; Draw a random tile
0CC7C 20 F0 C4                      JSR sub_GetRandomNumber
0CC7F 29 07                         AND #%00000111
0CC81 18                            CLC
0CC82 69 68                         ADC #$68
0CC84                               
0CC84                               ;; Add tile to ppu buffer
0CC84                           +addToPPUBuffer:
0CC84 99 00 03                      STA ppu_buffer,y
0CC87 C8                            INY
0CC88                           
0CC88                               ;; TILE 2: If metatile above is solid, draw null,
0CC88                               ;; else draw random noise.
0CC88 E6 01                         INC temp+1
0CC8A A5 00                         LDA temp
0CC8C 99 00 03                      STA ppu_buffer,y
0CC8F C8                            INY
0CC90 A5 01                         LDA temp+1
0CC92 99 00 03                      STA ppu_buffer,y
0CC95 C8                            INY
0CC96                               
0CC96 8A                            TXA
0CC97 29 F0                         AND #%11110000
0CC99 F0 0C                         BEQ +drawRandomTile
0CC9B                               
0CC9B BD F0 03                      LDA tile_type-16,x
0CC9E 29 01                         AND #%00000001
0CCA0 F0 05                         BEQ +drawRandomTile
0CCA2                               
0CCA2 A9 00                         LDA #%00
0CCA4 4C AF CC                      JMP +addToPPUBuffer
0CCA7                           
0CCA7                           +drawRandomTile:
0CCA7 20 F0 C4                      JSR sub_GetRandomNumber
0CCAA 29 07                         AND #%00000111
0CCAC 18                            CLC
0CCAD 69 68                         ADC #$68
0CCAF                           
0CCAF                           +addToPPUBuffer:
0CCAF 99 00 03                      STA ppu_buffer,y
0CCB2 C8                            INY
0CCB3                               
0CCB3                               ;; TILE 3 - If metatile left is solid, draw null,
0CCB3                               ;; else draw random noise.
0CCB3 A5 01                         LDA temp+1
0CCB5 18                            CLC
0CCB6 69 1F                         ADC #$1F
0CCB8 85 01                         STA temp+1
0CCBA A5 00                         LDA temp
0CCBC 69 00                         ADC #$00
0CCBE 85 00                         STA temp
0CCC0 99 00 03                      STA ppu_buffer,y
0CCC3 C8                            INY
0CCC4 A5 01                         LDA temp+1
0CCC6 99 00 03                      STA ppu_buffer,y
0CCC9 C8                            INY
0CCCA                               
0CCCA 8A                            TXA
0CCCB 29 0F                         AND #%00001111
0CCCD F0 0C                         BEQ +drawRandomTile
0CCCF                               
0CCCF BD FF 03                      LDA tile_type-1,x
0CCD2 29 01                         AND #%00000001
0CCD4 F0 05                         BEQ +drawRandomTile
0CCD6                               
0CCD6 A9 00                         LDA #%00
0CCD8 4C E3 CC                      JMP +addToPPUBuffer
0CCDB                           
0CCDB                           +drawRandomTile:
0CCDB 20 F0 C4                      JSR sub_GetRandomNumber
0CCDE 29 07                         AND #%00000111
0CCE0 18                            CLC
0CCE1 69 68                         ADC #$68
0CCE3                               
0CCE3                           +addToPPUBuffer:
0CCE3 99 00 03                      STA ppu_buffer,y
0CCE6 C8                            INY
0CCE7                               
0CCE7                               ;; TILE 4 - Always random noise
0CCE7 E6 01                         INC temp+1
0CCE9 A5 00                         LDA temp
0CCEB 99 00 03                      STA ppu_buffer,y
0CCEE C8                            INY
0CCEF A5 01                         LDA temp+1
0CCF1 99 00 03                      STA ppu_buffer,y
0CCF4 C8                            INY
0CCF5 20 F0 C4                      JSR sub_GetRandomNumber
0CCF8 29 07                         AND #%00000111
0CCFA 18                            CLC
0CCFB 69 68                         ADC #$68
0CCFD 99 00 03                      STA ppu_buffer,y
0CD00 C8                            INY
0CD01                           
0CD01                               ;; TILE 5 - If tile on the right is solid, skip,
0CD01                               ;; else draw random noise tile
0CD01 E6 01                         INC temp+1
0CD03                               
0CD03 8A                            TXA
0CD04 29 0F                         AND #%00001111
0CD06 C9 0D                         CMP #$0D
0CD08 F0 1F                         BEQ +skipTile
0CD0A                               
0CD0A BD 01 04                      LDA tile_type+1,x
0CD0D 29 01                         AND #%00000001
0CD0F D0 18                         BNE +skipTile
0CD11 A5 00                             LDA temp
0CD13 99 00 03                          STA ppu_buffer,y
0CD16 C8                                INY
0CD17 A5 01                             LDA temp+1
0CD19 99 00 03                          STA ppu_buffer,y
0CD1C C8                                INY
0CD1D 20 F0 C4                          JSR sub_GetRandomNumber
0CD20 29 07                             AND #%00000111
0CD22 18                                CLC
0CD23 69 68                             ADC #$68
0CD25 99 00 03                          STA ppu_buffer,y
0CD28 C8                                INY    
0CD29                               +skipTile:
0CD29                           
0CD29                               ;; TILE 6 - If tile on bottom is solid, skip,
0CD29                               ;; else draw random noise
0CD29 A5 01                         LDA temp+1
0CD2B 18                            CLC
0CD2C 69 1F                         ADC #$1F
0CD2E 85 01                         STA temp+1
0CD30 A5 00                         LDA temp
0CD32 69 00                         ADC #$00
0CD34 85 00                         STA temp
0CD36                           
0CD36 8A                            TXA
0CD37 29 F0                         AND #%11110000
0CD39 C9 90                         CMP #$90
0CD3B F0 1F                         BEQ +skipTile
0CD3D                           
0CD3D BD 10 04                      LDA tile_type+16,x
0CD40 29 01                         AND #%00000001
0CD42 D0 18                         BNE +skipTile
0CD44 A5 00                             LDA temp
0CD46 99 00 03                          STA ppu_buffer,y
0CD49 C8                                INY
0CD4A A5 01                             LDA temp+1
0CD4C 99 00 03                          STA ppu_buffer,y
0CD4F C8                                INY
0CD50 20 F0 C4                          JSR sub_GetRandomNumber
0CD53 29 07                             AND #%00000111
0CD55 18                                CLC
0CD56 69 68                             ADC #$68
0CD58 99 00 03                          STA ppu_buffer,y
0CD5B C8                                INY    
0CD5C                               +skipTile:
0CD5C                               
0CD5C                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CD5C                               ;; else draw random noise
0CD5C E6 01                         INC temp+1
0CD5E                           
0CD5E 8A                            TXA
0CD5F 29 F0                         AND #%11110000
0CD61 C9 90                         CMP #$90
0CD63 F0 26                         BEQ +skipTile
0CD65                               
0CD65 8A                            TXA
0CD66 29 0F                         AND #%00001111
0CD68 C9 0D                         CMP #$0D
0CD6A F0 1F                         BEQ +skipTile
0CD6C                               
0CD6C BD 11 04                      LDA tile_type+17,x
0CD6F 29 01                         AND #%00000001
0CD71 D0 18                         BNE +skipTile
0CD73 A5 00                             LDA temp
0CD75 99 00 03                          STA ppu_buffer,y
0CD78 C8                                INY
0CD79 A5 01                             LDA temp+1
0CD7B 99 00 03                          STA ppu_buffer,y
0CD7E C8                                INY
0CD7F 20 F0 C4                          JSR sub_GetRandomNumber
0CD82 29 07                             AND #%00000111
0CD84 18                                CLC
0CD85 69 68                             ADC #$68
0CD87 99 00 03                          STA ppu_buffer,y
0CD8A C8                                INY    
0CD8B                               +skipTile:   
0CD8B                           
0CD8B                           
0CD8B                               ;; Update attribute table accordingly through ppu buffer
0CD8B A9 23                         LDA #$23
0CD8D 99 00 03                      STA ppu_buffer,y
0CD90 C8                            INY
0CD91                               
0CD91 8A                            TXA
0CD92 29 F0                         AND #%11110000
0CD94 4A                            LSR
0CD95 4A                            LSR
0CD96 4A                            LSR
0CD97 4A                            LSR
0CD98 18                            CLC
0CD99 69 01                         ADC #1
0CD9B 4A                            LSR
0CD9C 0A                            ASL
0CD9D 0A                            ASL
0CD9E 0A                            ASL
0CD9F 18                            CLC
0CDA0 69 C8                         ADC #$C8
0CDA2 85 00                         STA temp
0CDA4 8A                            TXA
0CDA5 29 0F                         AND #%00001111
0CDA7 18                            CLC
0CDA8 69 01                         ADC #$01
0CDAA 4A                            LSR
0CDAB 18                            CLC
0CDAC 65 00                         ADC temp
0CDAE 85 00                         STA temp
0CDB0 99 00 03                      STA ppu_buffer,y
0CDB3 C8                            INY
0CDB4                                  
0CDB4 8A                            TXA
0CDB5 29 10                         AND #%00010000
0CDB7 F0 05                         BEQ +
0CDB9 A9 F0                             LDA #%11110000
0CDBB 4C C0 CD                          JMP ++
0CDBE                               +
0CDBE A9 0F                         LDA #%00001111
0CDC0                               ++
0CDC0 85 02                         STA temp+2
0CDC2                               
0CDC2 8A                            TXA
0CDC3 48                            PHA
0CDC4 29 01                         AND #%00000001
0CDC6 F0 07                         BEQ +
0CDC8 A5 02                             LDA temp+2
0CDCA 09 CC                             ORA #%11001100
0CDCC 4C D3 CD                          JMP ++
0CDCF                               +
0CDCF A5 02                         LDA temp+2
0CDD1 09 33                         ORA #%00110011
0CDD3                               ++
0CDD3 85 02                         STA temp+2
0CDD5                               
0CDD5 A5 00                         LDA temp
0CDD7 38                            SEC
0CDD8 E9 C0                         SBC #$C0
0CDDA AA                            TAX
0CDDB BD A0 04                      LDA tile_attributes,x
0CDDE 25 02                         AND temp+2
0CDE0 9D A0 04                      STA tile_attributes,x
0CDE3 99 00 03                      STA ppu_buffer,y
0CDE6 C8                            INY
0CDE7 68                            PLA
0CDE8 AA                            TAX
0CDE9                           
0CDE9                           
0CDE9                               ;; Tell PPU to update tiles and attributes next frame
0CDE9 84 3A                         STY ppu_buffer_pointer
0CDEB A9 01                         LDA #$01
0CDED 85 39                         STA ppu_buffer_update
0CDEF                            
0CDEF                               ;; We're done - return
0CDEF 60                            RTS0CDF0                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CDF0                           sub_WriteByteToPPUBuffer:
0CDF0                           
0CDF0                               ;; Prevent updating until full 3-byte buffer is filled,
0CDF0                               ;; so that graphics won't glitch out if NMI happens during
0CDF0                               ;; updating the buffer
0CDF0 A9 00                         LDA #$00
0CDF2 85 39                         STA ppu_buffer_update
0CDF4                           
0CDF4                               ;; Check if buffer full; if so, wait a frame and force update
0CDF4 A4 3A                         LDY ppu_buffer_pointer
0CDF6 C0 30                         CPY #$30
0CDF8 D0 05                         BNE +
0CDFA E6 39                             INC ppu_buffer_update
0CDFC 20 1B C5                          JSR sub_WaitForVBlank
0CDFF                               +
0CDFF                           
0CDFF                               ;; Add ppu_addr high byte to buffer
0CDFF A5 00                         LDA temp
0CE01 99 00 03                      STA ppu_buffer,y
0CE04                           
0CE04                               ;; Add ppu_addr low byte to buffer
0CE04 C8                            INY
0CE05 A5 01                         LDA temp+1
0CE07 99 00 03                      STA ppu_buffer,y
0CE0A                           
0CE0A                               ;; Add ppu_data to buffer
0CE0A C8                            INY
0CE0B A5 02                         LDA temp+2
0CE0D 99 00 03                      STA ppu_buffer,y
0CE10                           
0CE10                               ;; Update buffer pointer
0CE10 C8                            INY
0CE11 84 3A                         STY ppu_buffer_pointer
0CE13                           
0CE13                               ;; Tell NMI to update next round
0CE13 E6 39                         INC ppu_buffer_update
0CE15                           
0CE15                               ;; Return
0CE15 60                            RTS0CE16                           
0CE16                           ;; LUTs
0CE16                           .include "game/include/tables.asm"
0CE16                           
0CE16                           ;; Initial screen palette
0CE16                           tbl_IntroScreenPalette:
0CE16 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CE1A 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CE1E 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CE22 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CE26                           
0CE26 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CE2A 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CE2E 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CE32 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CE36                           
0CE36                           
0CE36                           ;; Intro: mapping logo index to chr tile
0CE36                           tbl_IntroScreenLogoChr:
0CE36 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CE3E                           
0CE3E                           
0CE3E                           ;; Intro screen data
0CE3E                           tbl_IntroScreenData:
0CE3E                           
0CE3E                               ;; Set PPU address $20AC and draw
0CE3E 60 AC                         .db #$60, #$AC
0CE40 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CE48                           
0CE48                               ;; Set PPU address $20CF and draw
0CE48 60 CF                         .db #$60, #$CF
0CE4A 01 02                         .db #_0, #_1
0CE4C                               
0CE4C                               ;; Set PPU address $2122 and draw
0CE4C 61 22                         .db #$61, #$22
0CE4E 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CE55 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CE5B 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CE63 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CE68                               
0CE68                               ;; Set PPU address $2147 and draw
0CE68 61 47                         .db #$61, #$47
0CE6A 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CE71 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CE75 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CE7B 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CE81                               
0CE81                               ;; Set PPU address $218B and draw
0CE81 61 8B                         .db #$61, #$8B
0CE83 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CE89 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CE8E                               
0CE8E                               ;; Set PPU address $21E6 and draw
0CE8E 61 E6                         .db #$61, #$E6
0CE90 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CE98 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CE9C 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CEA3                               
0CEA3                               ;; Set PPU address $222D and draw
0CEA3 62 2D                         .db #$62, #$2D
0CEA5 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CEAB                               
0CEAB                               ;; Set PPU address $2281
0CEAB 62 81                         .db #$62, #$81
0CEAD                               
0CEAD                               ;; Draw the Crillion logo
0CEAD E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CEB1 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CEB5 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CEB9 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CEBD                               
0CEBD D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CEC1 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CEC5 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CEC9 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CECD                               
0CECD D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CED1 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CED5 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CED9 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CEDD                           
0CEDD D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CEE1 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CEE5 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CEE9 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CEED                               
0CEED D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CEF1 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CEF5 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CEF9 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CEFD                           
0CEFD F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CF01 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CF05 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CF09 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CF0C                           
0CF0C                               ;; End of intro
0CF0C 3F                            .db #$3F
0CF0D                           
0CF0D                           
0CF0D                           ;; Animation frames table
0CF0D                           .include "game/include/table/animation_frames.asm"
0CF0D                           ;; CHR tile-id's per slide of explosion
0CF0D                           explosion_slide0:
0CF0D 00 00 00                      .db #$00, #$00, #$00
0CF10 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CF13 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CF16                           
0CF16                           explosion_slide1:
0CF16 00 00 00                      .db #$00, #$00, #$00
0CF19 29 2A 2B                      .db #$29, #$2A, #$2B
0CF1C 39 3A 3B                      .db #$39, #$3A, #$3B
0CF1F                           
0CF1F                           explosion_slide2:
0CF1F 16 00 00                      .db #$16, #$00, #$00
0CF22 26 27 28                      .db #$26, #$27, #$28
0CF25 36 37 38                      .db #$36, #$37, #$38
0CF28                           
0CF28                           explosion_slide3:
0CF28 00 14 15                      .db #$00, #$14, #$15
0CF2B 23 24 25                      .db #$23, #$24, #$25
0CF2E 33 34 35                      .db #$33, #$34, #$35
0CF31                           
0CF31                           explosion_slide4:
0CF31 10 11 12                      .db #$10, #$11, #$12
0CF34 20 21 22                      .db #$20, #$21, #$22
0CF37 30 31 32                      .db #$30, #$31, #$32
0CF3A                           
0CF3A                           ;; High and low bytes of animation slides
0CF3A                           explosion_anim_hi:
0CF3A CF                            .db >#explosion_slide0
0CF3B CF                            .db >#explosion_slide1
0CF3C CF                            .db >#explosion_slide2
0CF3D CF                            .db >#explosion_slide3
0CF3E CF                            .db >#explosion_slide4
0CF3F CF                            .db >#explosion_slide4
0CF40 CF                            .db >#explosion_slide3
0CF41 CF                            .db >#explosion_slide2
0CF42 CF                            .db >#explosion_slide1
0CF43 CF                            .db >#explosion_slide0
0CF44                           
0CF44                           explosion_anim_lo:
0CF44 0D                            .db <#explosion_slide0
0CF45 16                            .db <#explosion_slide1
0CF46 1F                            .db <#explosion_slide2
0CF47 28                            .db <#explosion_slide3
0CF48 31                            .db <#explosion_slide4
0CF49 31                            .db <#explosion_slide4
0CF4A 28                            .db <#explosion_slide3
0CF4B 1F                            .db <#explosion_slide2
0CF4C 16                            .db <#explosion_slide1
0CF4D 0D                            .db <#explosion_slide0
0CF4E                           
0CF4E                           
0CF4E                           
0CF4E                           ;; Ball palette color table (CBRYGM)
0CF4E                           tbl_BallColorDark:
0CF4E 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CF54                            
0CF54                           tbl_BallColorLight:
0CF54 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CF5A                           
0CF5A                               
0CF5A                           ;; Screen mode drawing routine addresses
0CF5A                           tbl_LoadScreenHi:
0CF5A CB C8 CC                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CF5D                           
0CF5D                           tbl_LoadScreenLo:
0CF5D C4 08 53                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CF60                           
0CF60                           
0CF60                           ;; Level data
0CF60                           .include "game/include/table/level_data.asm"
0CF60                           lvl_layout_01:
0CF60 61 21                         .db #$61, #%00100001
0CF62 52 61                         .db #$52, #%01100001
0CF64 43 65                         .db #$43, #%01100101
0CF66 83 05                         .db #$83, #%00000101
0CF68 93 15                         .db #$93, #%00010101
0CF6A 34 7A                         .db #$34, #%01111010
0CF6C 74 7A                         .db #$74, #%01111010
0CF6E 35 7A                         .db #$35, #%01111010
0CF70 75 7A                         .db #$75, #%01111010
0CF72 46 65                         .db #$46, #%01100101
0CF74 86 25                         .db #$86, #%00100101
0CF76 57 61                         .db #$57, #%01100001
0CF78 68 21                         .db #$68, #%00100001
0CF7A FF                            .db #LEVEL_END
0CF7B                           
0CF7B                           lvl_layout_02:
0CF7B C0 0A                         .db #$C0, #%00001010
0CF7D 11 15                         .db #$11, #%00010101
0CF7F 21 62                         .db #$21, #%01100010
0CF81 61 62                         .db #$61, #%01100010
0CF83 A1 42                         .db #$A1, #%01000010
0CF85 12 67                         .db #$12, #%01100111
0CF87 52 67                         .db #$52, #%01100111
0CF89 92 67                         .db #$92, #%01100111
0CF8B C3 0D                         .db #$C3, #%00001101
0CF8D 14 11                         .db #$14, #%00010001
0CF8F 24 65                         .db #$24, #%01100101
0CF91 64 65                         .db #$64, #%01100101
0CF93 A4 45                         .db #$A4, #%01000101
0CF95 15 67                         .db #$15, #%01100111
0CF97 55 67                         .db #$55, #%01100111
0CF99 95 67                         .db #$95, #%01100111
0CF9B 17 12                         .db #$17, #%00010010
0CF9D 27 61                         .db #$27, #%01100001
0CF9F 67 61                         .db #$67, #%01100001
0CFA1 A7 41                         .db #$A7, #%01000001
0CFA3 38 7A                         .db #$38, #%01111010
0CFA5 98 5A                         .db #$98, #%01011010
0CFA7 18 27                         .db #$18, #%00100111
0CFA9 48 27                         .db #$48, #%00100111
0CFAB 78 27                         .db #$78, #%00100111
0CFAD C8 07                         .db #$C8, #%00000111
0CFAF FF                            .db #LEVEL_END
0CFB0                           
0CFB0                           lvl_layout_03:
0CFB0 00 7A                         .db #$00, #%01111010
0CFB2 40 7A                         .db #$40, #%01111010
0CFB4 80 7A                         .db #$80, #%01111010
0CFB6 C0 1A                         .db #$C0, #%00011010
0CFB8 10 A1                         .db #$10, #%10100001
0CFBA 13 E1                         .db #$13, #%11100001
0CFBC 17 C1                         .db #$17, #%11000001
0CFBE 30 C1                         .db #$30, #%11000001
0CFC0 34 C1                         .db #$34, #%11000001
0CFC2 38 A1                         .db #$38, #%10100001
0CFC4 50 E1                         .db #$50, #%11100001
0CFC6 55 81                         .db #$55, #%10000001
0CFC8 57 C1                         .db #$57, #%11000001
0CFCA 70 C1                         .db #$70, #%11000001
0CFCC 73 A1                         .db #$73, #%10100001
0CFCE 76 E1                         .db #$76, #%11100001
0CFD0 90 E1                         .db #$90, #%11100001
0CFD2 95 81                         .db #$95, #%10000001
0CFD4 97 C1                         .db #$97, #%11000001
0CFD6 B0 C1                         .db #$B0, #%11000001
0CFD8 B4 C1                         .db #$B4, #%11000001
0CFDA B8 A1                         .db #$B8, #%10100001
0CFDC D0 A1                         .db #$D0, #%10100001
0CFDE D3 E1                         .db #$D3, #%11100001
0CFE0 D7 C1                         .db #$D7, #%11000001
0CFE2 FF                            .db #LEVEL_END
0CFE3                           
0CFE3                           lvl_layout_04:
0CFE3 00 4C                         .db #$00, #%01001100
0CFE5 40 6C                         .db #$40, #%01101100
0CFE7 80 4C                         .db #$80, #%01001100
0CFE9 81 AC                         .db #$81, #%10101100
0CFEB C1 2C                         .db #$C1, #%00101100
0CFED 02 6C                         .db #$02, #%01101100
0CFEF 42 CC                         .db #$42, #%11001100
0CFF1 62 EC                         .db #$62, #%11101100
0CFF3 A2 CC                         .db #$A2, #%11001100
0CFF5 C3 CC                         .db #$C3, #%11001100
0CFF7 04 4C                         .db #$04, #%01001100
0CFF9 84 2C                         .db #$84, #%00101100
0CFFB 25 AC                         .db #$25, #%10101100
0CFFD 85 AC                         .db #$85, #%10101100
0CFFF 06 AC                         .db #$06, #%10101100
0D001 36 CC                         .db #$36, #%11001100
0D003 56 CC                         .db #$56, #%11001100
0D005 66 EC                         .db #$66, #%11101100
0D007 96 6C                         .db #$96, #%01101100
0D009 C7 AC                         .db #$C7, #%10101100
0D00B 08 2C                         .db #$08, #%00101100
0D00D 78 6C                         .db #$78, #%01101100
0D00F D8 0C                         .db #$D8, #%00001100
0D011 30 A1                         .db #$30, #%10100001
0D013 B0 21                         .db #$B0, #%00100001
0D015 01 41                         .db #$01, #%01000001
0D017 41 61                         .db #$41, #%01100001
0D019 91 A1                         .db #$91, #%10100001
0D01B A1 21                         .db #$A1, #%00100001
0D01D 52 C1                         .db #$52, #%11000001
0D01F 72 E1                         .db #$72, #%11100001
0D021 B2 C1                         .db #$B2, #%11000001
0D023 C2 21                         .db #$C2, #%00100001
0D025 03 41                         .db #$03, #%01000001
0D027 33 C1                         .db #$33, #%11000001
0D029 83 21                         .db #$83, #%00100001
0D02B D3 E1                         .db #$D3, #%11100001
0D02D 05 21                         .db #$05, #%00100001
0D02F 45 E1                         .db #$45, #%11100001
0D031 A5 21                         .db #$A5, #%00100001
0D033 16 A1                         .db #$16, #%10100001
0D035 76 A1                         .db #$76, #%10100001
0D037 27 A1                         .db #$27, #%10100001
0D039 57 21                         .db #$57, #%00100001
0D03B 87 41                         .db #$87, #%01000001
0D03D B7 A1                         .db #$B7, #%10100001
0D03F 19 21                         .db #$19, #%00100001
0D041 39 41                         .db #$39, #%01000001
0D043 89 41                         .db #$89, #%01000001
0D045 C9 21                         .db #$C9, #%00100001
0D047 D0 1A                         .db #$D0, #%00011010
0D049 55 1A                         .db #$55, #%00011010
0D04B 95 1A                         .db #$95, #%00011010
0D04D D7 1A                         .db #$D7, #%00011010
0D04F 09 1A                         .db #$09, #%00011010
0D051 79 1A                         .db #$79, #%00011010
0D053 FF                            .db #LEVEL_END
0D054                           
0D054                           lvl_layout_05:
0D054 40 0A                         .db #$40, #%00001010
0D056 70 1A                         .db #$70, #%00011010
0D058 B0 42                         .db #$B0, #%01000010
0D05A 41 A7                         .db #$41, #%10100111
0D05C B1 22                         .db #$B1, #%00100010
0D05E D1 15                         .db #$D1, #%00010101
0D060 22 0A                         .db #$22, #%00001010
0D062 52 05                         .db #$52, #%00000101
0D064 B2 42                         .db #$B2, #%01000010
0D066 03 27                         .db #$03, #%00100111
0D068 33 67                         .db #$33, #%01100111
0D06A 73 67                         .db #$73, #%01100111
0D06C B3 47                         .db #$B3, #%01000111
0D06E 05 E5                         .db #$05, #%11100101
0D070 25 A5                         .db #$25, #%10100101
0D072 35 25                         .db #$35, #%00100101
0D074 65 45                         .db #$65, #%01000101
0D076 A5 45                         .db #$A5, #%01000101
0D078 46 E5                         .db #$46, #%11100101
0D07A 66 E5                         .db #$66, #%11100101
0D07C 86 E5                         .db #$86, #%11100101
0D07E A6 E2                         .db #$A6, #%11100010
0D080 C6 E5                         .db #$C6, #%11100101
0D082 27 25                         .db #$27, #%00100101
0D084 77 05                         .db #$77, #%00000101
0D086 B7 02                         .db #$B7, #%00000010
0D088 09 05                         .db #$09, #%00000101
0D08A 79 05                         .db #$79, #%00000101
0D08C B9 02                         .db #$B9, #%00000010
0D08E FF                            .db #LEVEL_END
0D08F                           
0D08F                           lvl_layout_06:
0D08F 00 03                         .db #$00, #%00000011
0D091 20 03                         .db #$20, #%00000011
0D093 40 03                         .db #$40, #%00000011
0D095 A0 03                         .db #$A0, #%00000011
0D097 C0 03                         .db #$C0, #%00000011
0D099 11 03                         .db #$11, #%00000011
0D09B 31 03                         .db #$31, #%00000011
0D09D 51 03                         .db #$51, #%00000011
0D09F 91 03                         .db #$91, #%00000011
0D0A1 B1 03                         .db #$B1, #%00000011
0D0A3 D1 03                         .db #$D1, #%00000011
0D0A5 02 03                         .db #$02, #%00000011
0D0A7 22 03                         .db #$22, #%00000011
0D0A9 42 03                         .db #$42, #%00000011
0D0AB A2 03                         .db #$A2, #%00000011
0D0AD C2 03                         .db #$C2, #%00000011
0D0AF 13 03                         .db #$13, #%00000011
0D0B1 33 03                         .db #$33, #%00000011
0D0B3 53 03                         .db #$53, #%00000011
0D0B5 93 03                         .db #$93, #%00000011
0D0B7 B3 03                         .db #$B3, #%00000011
0D0B9 D3 03                         .db #$D3, #%00000011
0D0BB 04 03                         .db #$04, #%00000011
0D0BD 24 03                         .db #$24, #%00000011
0D0BF 44 03                         .db #$44, #%00000011
0D0C1 A4 03                         .db #$A4, #%00000011
0D0C3 C4 03                         .db #$C4, #%00000011
0D0C5 15 03                         .db #$15, #%00000011
0D0C7 35 03                         .db #$35, #%00000011
0D0C9 55 03                         .db #$55, #%00000011
0D0CB 95 03                         .db #$95, #%00000011
0D0CD B5 03                         .db #$B5, #%00000011
0D0CF D5 03                         .db #$D5, #%00000011
0D0D1 06 03                         .db #$06, #%00000011
0D0D3 26 03                         .db #$26, #%00000011
0D0D5 46 03                         .db #$46, #%00000011
0D0D7 A6 03                         .db #$A6, #%00000011
0D0D9 C6 03                         .db #$C6, #%00000011
0D0DB 17 03                         .db #$17, #%00000011
0D0DD 37 03                         .db #$37, #%00000011
0D0DF 57 03                         .db #$57, #%00000011
0D0E1 97 03                         .db #$97, #%00000011
0D0E3 B7 03                         .db #$B7, #%00000011
0D0E5 D7 03                         .db #$D7, #%00000011
0D0E7 08 03                         .db #$08, #%00000011
0D0E9 28 03                         .db #$28, #%00000011
0D0EB 48 03                         .db #$48, #%00000011
0D0ED A8 03                         .db #$A8, #%00000011
0D0EF C8 03                         .db #$C8, #%00000011
0D0F1 19 03                         .db #$19, #%00000011
0D0F3 39 03                         .db #$39, #%00000011
0D0F5 59 03                         .db #$59, #%00000011
0D0F7 99 03                         .db #$99, #%00000011
0D0F9 B9 03                         .db #$B9, #%00000011
0D0FB D9 03                         .db #$D9, #%00000011
0D0FD 60 4B                         .db #$60, #%01001011
0D0FF 71 CB                         .db #$71, #%11001011
0D101 62 4B                         .db #$62, #%01001011
0D103 64 4B                         .db #$64, #%01001011
0D105 75 CB                         .db #$75, #%11001011
0D107 66 4B                         .db #$66, #%01001011
0D109 68 4B                         .db #$68, #%01001011
0D10B 79 0B                         .db #$79, #%00001011
0D10D 70 03                         .db #$70, #%00000011
0D10F 72 03                         .db #$72, #%00000011
0D111 74 03                         .db #$74, #%00000011
0D113 76 03                         .db #$76, #%00000011
0D115 78 03                         .db #$78, #%00000011
0D117 FF                            .db #LEVEL_END
0D118                           
0D118                           lvl_layout_07:
0D118 00 11                         .db #$00, #%00010001
0D11A 01 FA                         .db #$01, #%11111010
0D11C 12 BA                         .db #$12, #%10111010
0D11E 23 DA                         .db #$23, #%11011010
0D120 34 FA                         .db #$34, #%11111010
0D122 05 DA                         .db #$05, #%11011010
0D124 15 FA                         .db #$15, #%11111010
0D126 45 BA                         .db #$45, #%10111010
0D128 56 DA                         .db #$56, #%11011010
0D12A 27 BA                         .db #$27, #%10111010
0D12C 67 DA                         .db #$67, #%11011010
0D12E 38 3A                         .db #$38, #%00111010
0D130 78 BA                         .db #$78, #%10111010
0D132 09 3A                         .db #$09, #%00111010
0D134 39 3A                         .db #$39, #%00111010
0D136 89 1A                         .db #$89, #%00011010
0D138 B0 01                         .db #$B0, #%00000001
0D13A D0 01                         .db #$D0, #%00000001
0D13C A1 01                         .db #$A1, #%00000001
0D13E C1 11                         .db #$C1, #%00010001
0D140 B2 01                         .db #$B2, #%00000001
0D142 D2 01                         .db #$D2, #%00000001
0D144 A3 01                         .db #$A3, #%00000001
0D146 C3 01                         .db #$C3, #%00000001
0D148 B4 01                         .db #$B4, #%00000001
0D14A D4 01                         .db #$D4, #%00000001
0D14C A5 01                         .db #$A5, #%00000001
0D14E C5 01                         .db #$C5, #%00000001
0D150 B6 01                         .db #$B6, #%00000001
0D152 D6 01                         .db #$D6, #%00000001
0D154 A7 01                         .db #$A7, #%00000001
0D156 C7 01                         .db #$C7, #%00000001
0D158 FF                            .db #LEVEL_END
0D159                           
0D159                           lvl_layout_08:
0D159 40 B5                         .db #$40, #%10110101
0D15B 31 0D                         .db #$31, #%00001101
0D15D 61 10                         .db #$61, #%00010000
0D15F 42 C7                         .db #$42, #%11000111
0D161 52 67                         .db #$52, #%01100111
0D163 63 C7                         .db #$63, #%11000111
0D165 83 E7                         .db #$83, #%11100111
0D167 05 07                         .db #$05, #%00000111
0D169 15 3A                         .db #$15, #%00111010
0D16B 07 63                         .db #$07, #%01100011
0D16D 27 13                         .db #$27, #%00010011
0D16F 38 A5                         .db #$38, #%10100101
0D171 09 14                         .db #$09, #%00010100
0D173 19 05                         .db #$19, #%00000101
0D175 D0 E0                         .db #$D0, #%11100000
0D177 C2 A0                         .db #$C2, #%10100000
0D179 B3 E0                         .db #$B3, #%11100000
0D17B D5 E0                         .db #$D5, #%11100000
0D17D C6 E0                         .db #$C6, #%11100000
0D17F B0 C4                         .db #$B0, #%11000100
0D181 C0 A4                         .db #$C0, #%10100100
0D183 D1 A4                         .db #$D1, #%10100100
0D185 C4 24                         .db #$C4, #%00100100
0D187 C5 04                         .db #$C5, #%00000100
0D189 B7 44                         .db #$B7, #%01000100
0D18B B8 A4                         .db #$B8, #%10100100
0D18D D9 05                         .db #$D9, #%00000101
0D18F FF                            .db #LEVEL_END
0D190                           
0D190                           lvl_layout_09:
0D190 81 04                         .db #$81, #%00000100
0D192 D1 04                         .db #$D1, #%00000100
0D194 32 C4                         .db #$32, #%11000100
0D196 A2 C4                         .db #$A2, #%11000100
0D198 C2 24                         .db #$C2, #%00100100
0D19A 13 24                         .db #$13, #%00100100
0D19C 53 04                         .db #$53, #%00000100
0D19E C3 27                         .db #$C3, #%00100111
0D1A0 15 6C                         .db #$15, #%01101100
0D1A2 55 6C                         .db #$55, #%01101100
0D1A4 95 6C                         .db #$95, #%01101100
0D1A6 D5 0C                         .db #$D5, #%00001100
0D1A8 27 C7                         .db #$27, #%11000111
0D1AA 47 C7                         .db #$47, #%11000111
0D1AC 67 C7                         .db #$67, #%11000111
0D1AE 87 C7                         .db #$87, #%11000111
0D1B0 A7 C7                         .db #$A7, #%11000111
0D1B2 C7 C7                         .db #$C7, #%11000111
0D1B4 08 13                         .db #$08, #%00010011
0D1B6 28 15                         .db #$28, #%00010101
0D1B8 48 12                         .db #$48, #%00010010
0D1BA 68 15                         .db #$68, #%00010101
0D1BC 88 11                         .db #$88, #%00010001
0D1BE A8 10                         .db #$A8, #%00010000
0D1C0 C8 14                         .db #$C8, #%00010100
0D1C2 09 07                         .db #$09, #%00000111
0D1C4 19 03                         .db #$19, #%00000011
0D1C6 39 05                         .db #$39, #%00000101
0D1C8 59 02                         .db #$59, #%00000010
0D1CA 79 05                         .db #$79, #%00000101
0D1CC 99 01                         .db #$99, #%00000001
0D1CE B9 00                         .db #$B9, #%00000000
0D1D0 D9 04                         .db #$D9, #%00000100
0D1D2 FF                            .db #LEVEL_END
0D1D3                           
0D1D3                           lvl_layout_10:
0D1D3 00 02                         .db #$00, #%00000010
0D1D5 10 C9                         .db #$10, #%11001001
0D1D7 50 C9                         .db #$50, #%11001001
0D1D9 90 C9                         .db #$90, #%11001001
0D1DB D0 C9                         .db #$D0, #%11001001
0D1DD 31 C9                         .db #$31, #%11001001
0D1DF 71 C9                         .db #$71, #%11001001
0D1E1 B1 C9                         .db #$B1, #%11001001
0D1E3 13 C9                         .db #$13, #%11001001
0D1E5 53 C9                         .db #$53, #%11001001
0D1E7 93 C9                         .db #$93, #%11001001
0D1E9 D3 C9                         .db #$D3, #%11001001
0D1EB 34 C9                         .db #$34, #%11001001
0D1ED 74 C9                         .db #$74, #%11001001
0D1EF B4 C9                         .db #$B4, #%11001001
0D1F1 16 C9                         .db #$16, #%11001001
0D1F3 56 C9                         .db #$56, #%11001001
0D1F5 96 C9                         .db #$96, #%11001001
0D1F7 D6 C9                         .db #$D6, #%11001001
0D1F9 37 C9                         .db #$37, #%11001001
0D1FB 77 C9                         .db #$77, #%11001001
0D1FD B7 C9                         .db #$B7, #%11001001
0D1FF D8 12                         .db #$D8, #%00010010
0D201 FF                            .db #LEVEL_END
0D202                           
0D202                           lvl_layout_11:
0D202 00 65                         .db #$00, #%01100101
0D204 40 45                         .db #$40, #%01000101
0D206 50 A7                         .db #$50, #%10100111
0D208 80 05                         .db #$80, #%00000101
0D20A 90 A7                         .db #$90, #%10100111
0D20C A0 65                         .db #$A0, #%01100101
0D20E 01 43                         .db #$01, #%01000011
0D210 31 23                         .db #$31, #%00100011
0D212 61 A7                         .db #$61, #%10100111
0D214 81 A7                         .db #$81, #%10100111
0D216 A1 63                         .db #$A1, #%01100011
0D218 02 44                         .db #$02, #%01000100
0D21A 32 44                         .db #$32, #%01000100
0D21C 92 04                         .db #$92, #%00000100
0D21E A2 64                         .db #$A2, #%01100100
0D220 03 40                         .db #$03, #%01000000
0D222 33 40                         .db #$33, #%01000000
0D224 63 A1                         .db #$63, #%10100001
0D226 83 A2                         .db #$83, #%10100010
0D228 93 00                         .db #$93, #%00000000
0D22A A3 60                         .db #$A3, #%01100000
0D22C 04 41                         .db #$04, #%01000001
0D22E 34 41                         .db #$34, #%01000001
0D230 94 02                         .db #$94, #%00000010
0D232 A4 62                         .db #$A4, #%01100010
0D234 05 47                         .db #$05, #%01000111
0D236 35 67                         .db #$35, #%01100111
0D238 75 0A                         .db #$75, #%00001010
0D23A 85 47                         .db #$85, #%01000111
0D23C B5 47                         .db #$B5, #%01000111
0D23E 06 E7                         .db #$06, #%11100111
0D240 16 5A                         .db #$16, #%01011010
0D242 26 11                         .db #$26, #%00010001
0D244 46 13                         .db #$46, #%00010011
0D246 56 1A                         .db #$56, #%00011010
0D248 66 14                         .db #$66, #%00010100
0D24A 86 10                         .db #$86, #%00010000
0D24C 96 5A                         .db #$96, #%01011010
0D24E A6 12                         .db #$A6, #%00010010
0D250 C6 15                         .db #$C6, #%00010101
0D252 D6 E7                         .db #$D6, #%11100111
0D254 FF                            .db #LEVEL_END
0D255                           
0D255                           lvl_layout_12:
0D255 00 00                         .db #$00, #%00000000
0D257 50 C0                         .db #$50, #%11000000
0D259 80 00                         .db #$80, #%00000000
0D25B 61 00                         .db #$61, #%00000000
0D25D 22 C0                         .db #$22, #%11000000
0D25F 82 E0                         .db #$82, #%11100000
0D261 C2 E0                         .db #$C2, #%11100000
0D263 A3 20                         .db #$A3, #%00100000
0D265 C3 10                         .db #$C3, #%00010000
0D267 04 00                         .db #$04, #%00000000
0D269 54 20                         .db #$54, #%00100000
0D26B 15 0A                         .db #$15, #%00001010
0D26D 25 C0                         .db #$25, #%11000000
0D26F 55 E0                         .db #$55, #%11100000
0D271 86 20                         .db #$86, #%00100000
0D273 C6 E0                         .db #$C6, #%11100000
0D275 C7 A0                         .db #$C7, #%10100000
0D277 88 00                         .db #$88, #%00000000
0D279 59 00                         .db #$59, #%00000000
0D27B 89 20                         .db #$89, #%00100000
0D27D D9 1A                         .db #$D9, #%00011010
0D27F FF                            .db #LEVEL_END
0D280                           
0D280                           lvl_layout_13:
0D280 10 E0                         .db #$10, #%11100000
0D282 20 E0                         .db #$20, #%11100000
0D284 30 E0                         .db #$30, #%11100000
0D286 40 40                         .db #$40, #%01000000
0D288 80 60                         .db #$80, #%01100000
0D28A C0 E0                         .db #$C0, #%11100000
0D28C D0 E0                         .db #$D0, #%11100000
0D28E 41 40                         .db #$41, #%01000000
0D290 71 60                         .db #$71, #%01100000
0D292 52 60                         .db #$52, #%01100000
0D294 A2 20                         .db #$A2, #%00100000
0D296 43 60                         .db #$43, #%01100000
0D298 83 60                         .db #$83, #%01100000
0D29A 14 74                         .db #$14, #%01110100
0D29C 54 74                         .db #$54, #%01110100
0D29E 94 74                         .db #$94, #%01110100
0D2A0 D4 14                         .db #$D4, #%00010100
0D2A2 15 0D                         .db #$15, #%00001101
0D2A4 55 0D                         .db #$55, #%00001101
0D2A6 95 0D                         .db #$95, #%00001101
0D2A8 D5 0D                         .db #$D5, #%00001101
0D2AA 26 0D                         .db #$26, #%00001101
0D2AC 46 0D                         .db #$46, #%00001101
0D2AE 66 0D                         .db #$66, #%00001101
0D2B0 86 0D                         .db #$86, #%00001101
0D2B2 A6 0D                         .db #$A6, #%00001101
0D2B4 C6 0D                         .db #$C6, #%00001101
0D2B6 07 10                         .db #$07, #%00010000
0D2B8 37 0D                         .db #$37, #%00001101
0D2BA 77 0D                         .db #$77, #%00001101
0D2BC B7 0D                         .db #$B7, #%00001101
0D2BE 28 0D                         .db #$28, #%00001101
0D2C0 48 0D                         .db #$48, #%00001101
0D2C2 68 0D                         .db #$68, #%00001101
0D2C4 88 0D                         .db #$88, #%00001101
0D2C6 A8 0D                         .db #$A8, #%00001101
0D2C8 C8 0D                         .db #$C8, #%00001101
0D2CA 19 0D                         .db #$19, #%00001101
0D2CC 59 0D                         .db #$59, #%00001101
0D2CE 99 0D                         .db #$99, #%00001101
0D2D0 D9 0D                         .db #$D9, #%00001101
0D2D2 FF                            .db #LEVEL_END
0D2D3                           
0D2D3                           lvl_layout_14:
0D2D3 00 67                         .db #$00, #%01100111
0D2D5 40 67                         .db #$40, #%01100111
0D2D7 80 67                         .db #$80, #%01100111
0D2D9 C0 27                         .db #$C0, #%00100111
0D2DB 01 27                         .db #$01, #%00100111
0D2DD 31 C7                         .db #$31, #%11000111
0D2DF 51 C7                         .db #$51, #%11000111
0D2E1 71 C7                         .db #$71, #%11000111
0D2E3 91 C7                         .db #$91, #%11000111
0D2E5 B1 C7                         .db #$B1, #%11000111
0D2E7 D1 07                         .db #$D1, #%00000111
0D2E9 02 E7                         .db #$02, #%11100111
0D2EB 06 E7                         .db #$06, #%11100111
0D2ED 13 07                         .db #$13, #%00000111
0D2EF D3 07                         .db #$D3, #%00000111
0D2F1 15 07                         .db #$15, #%00000111
0D2F3 35 07                         .db #$35, #%00000111
0D2F5 55 07                         .db #$55, #%00000111
0D2F7 75 07                         .db #$75, #%00000111
0D2F9 95 07                         .db #$95, #%00000111
0D2FB B5 07                         .db #$B5, #%00000111
0D2FD D5 07                         .db #$D5, #%00000111
0D2FF 17 07                         .db #$17, #%00000111
0D301 37 C7                         .db #$37, #%11000111
0D303 57 C7                         .db #$57, #%11000111
0D305 77 C7                         .db #$77, #%11000111
0D307 97 C7                         .db #$97, #%11000111
0D309 B7 C7                         .db #$B7, #%11000111
0D30B D7 07                         .db #$D7, #%00000111
0D30D 19 07                         .db #$19, #%00000111
0D30F D9 07                         .db #$D9, #%00000111
0D311 22 4C                         .db #$22, #%01001100
0D313 62 4C                         .db #$62, #%01001100
0D315 A2 4C                         .db #$A2, #%01001100
0D317 24 0C                         .db #$24, #%00001100
0D319 44 0C                         .db #$44, #%00001100
0D31B 64 0C                         .db #$64, #%00001100
0D31D 84 0C                         .db #$84, #%00001100
0D31F A4 0C                         .db #$A4, #%00001100
0D321 C4 0C                         .db #$C4, #%00001100
0D323 26 0C                         .db #$26, #%00001100
0D325 46 0C                         .db #$46, #%00001100
0D327 66 0C                         .db #$66, #%00001100
0D329 86 0C                         .db #$86, #%00001100
0D32B A6 0C                         .db #$A6, #%00001100
0D32D C6 0C                         .db #$C6, #%00001100
0D32F 28 4C                         .db #$28, #%01001100
0D331 68 4C                         .db #$68, #%01001100
0D333 A8 4C                         .db #$A8, #%01001100
0D335 32 04                         .db #$32, #%00000100
0D337 52 04                         .db #$52, #%00000100
0D339 72 04                         .db #$72, #%00000100
0D33B 92 04                         .db #$92, #%00000100
0D33D B2 04                         .db #$B2, #%00000100
0D33F 38 04                         .db #$38, #%00000100
0D341 58 04                         .db #$58, #%00000100
0D343 78 04                         .db #$78, #%00000100
0D345 98 04                         .db #$98, #%00000100
0D347 B8 04                         .db #$B8, #%00000100
0D349 FF                            .db #LEVEL_END
0D34A                           
0D34A                           lvl_layout_15:
0D34A 00 7A                         .db #$00, #%01111010
0D34C 40 7A                         .db #$40, #%01111010
0D34E 80 7A                         .db #$80, #%01111010
0D350 C0 3A                         .db #$C0, #%00111010
0D352 41 04                         .db #$41, #%00000100
0D354 61 04                         .db #$61, #%00000100
0D356 81 04                         .db #$81, #%00000100
0D358 A1 04                         .db #$A1, #%00000100
0D35A 05 E4                         .db #$05, #%11100100
0D35C 15 64                         .db #$15, #%01100100
0D35E 55 64                         .db #$55, #%01100100
0D360 95 64                         .db #$95, #%01100100
0D362 D5 E4                         .db #$D5, #%11100100
0D364 26 04                         .db #$26, #%00000100
0D366 46 44                         .db #$46, #%01000100
0D368 76 64                         .db #$76, #%01100100
0D36A C6 04                         .db #$C6, #%00000100
0D36C 17 04                         .db #$17, #%00000100
0D36E 37 64                         .db #$37, #%01100100
0D370 77 44                         .db #$77, #%01000100
0D372 B7 04                         .db #$B7, #%00000100
0D374 18 64                         .db #$18, #%01100100
0D376 58 64                         .db #$58, #%01100100
0D378 98 64                         .db #$98, #%01100100
0D37A FF                            .db #LEVEL_END
0D37B                           
0D37B                           lvl_layout_16:
0D37B 10 E1                         .db #$10, #%11100001
0D37D 20 9A                         .db #$20, #%10011010
0D37F 30 E1                         .db #$30, #%11100001
0D381 40 E1                         .db #$40, #%11100001
0D383 50 E1                         .db #$50, #%11100001
0D385 60 C1                         .db #$60, #%11000001
0D387 70 E1                         .db #$70, #%11100001
0D389 80 E1                         .db #$80, #%11100001
0D38B 90 E1                         .db #$90, #%11100001
0D38D A0 61                         .db #$A0, #%01100001
0D38F 21 C1                         .db #$21, #%11000001
0D391 A1 1A                         .db #$A1, #%00011010
0D393 B1 41                         .db #$B1, #%01000001
0D395 A2 E1                         .db #$A2, #%11100001
0D397 B2 E1                         .db #$B2, #%11100001
0D399 C2 1A                         .db #$C2, #%00011010
0D39B D2 E1                         .db #$D2, #%11100001
0D39D 63 1A                         .db #$63, #%00011010
0D39F C3 C1                         .db #$C3, #%11000001
0D3A1 14 61                         .db #$14, #%01100001
0D3A3 54 61                         .db #$54, #%01100001
0D3A5 94 C1                         .db #$94, #%11000001
0D3A7 15 61                         .db #$15, #%01100001
0D3A9 55 41                         .db #$55, #%01000001
0D3AB 85 1A                         .db #$85, #%00011010
0D3AD 16 41                         .db #$16, #%01000001
0D3AF 46 1A                         .db #$46, #%00011010
0D3B1 56 61                         .db #$56, #%01100001
0D3B3 A6 61                         .db #$A6, #%01100001
0D3B5 17 67                         .db #$17, #%01100111
0D3B7 57 67                         .db #$57, #%01100111
0D3B9 97 67                         .db #$97, #%01100111
0D3BB D7 07                         .db #$D7, #%00000111
0D3BD 28 41                         .db #$28, #%01000001
0D3BF 58 61                         .db #$58, #%01100001
0D3C1 A8 41                         .db #$A8, #%01000001
0D3C3 18 11                         .db #$18, #%00010001
0D3C5 38 11                         .db #$38, #%00010001
0D3C7 98 11                         .db #$98, #%00010001
0D3C9 B8 11                         .db #$B8, #%00010001
0D3CB D8 11                         .db #$D8, #%00010001
0D3CD 59 09                         .db #$59, #%00001001
0D3CF FF                            .db #LEVEL_END
0D3D0                           
0D3D0                           lvl_layout_17:
0D3D0 10 EA                         .db #$10, #%11101010
0D3D2 20 E2                         .db #$20, #%11100010
0D3D4 30 62                         .db #$30, #%01100010
0D3D6 70 02                         .db #$70, #%00000010
0D3D8 80 6A                         .db #$80, #%01101010
0D3DA 90 22                         .db #$90, #%00100010
0D3DC 01 AA                         .db #$01, #%10101010
0D3DE 31 6A                         .db #$31, #%01101010
0D3E0 81 2A                         .db #$81, #%00101010
0D3E2 A1 02                         .db #$A1, #%00000010
0D3E4 C1 02                         .db #$C1, #%00000010
0D3E6 D1 0A                         .db #$D1, #%00001010
0D3E8 32 EA                         .db #$32, #%11101010
0D3EA 42 6A                         .db #$42, #%01101010
0D3EC 62 02                         .db #$62, #%00000010
0D3EE 92 6A                         .db #$92, #%01101010
0D3F0 D2 E2                         .db #$D2, #%11100010
0D3F2 43 1A                         .db #$43, #%00011010
0D3F4 53 CA                         .db #$53, #%11001010
0D3F6 73 02                         .db #$73, #%00000010
0D3F8 83 4A                         .db #$83, #%01001010
0D3FA B3 CA                         .db #$B3, #%11001010
0D3FC C3 EA                         .db #$C3, #%11101010
0D3FE 04 0A                         .db #$04, #%00001010
0D400 14 A2                         .db #$14, #%10100010
0D402 24 AA                         .db #$24, #%10101010
0D404 44 AA                         .db #$44, #%10101010
0D406 64 6A                         .db #$64, #%01101010
0D408 65 6A                         .db #$65, #%01101010
0D40A A5 AA                         .db #$A5, #%10101010
0D40C 06 EA                         .db #$06, #%11101010
0D40E 16 62                         .db #$16, #%01100010
0D410 66 22                         .db #$66, #%00100010
0D412 86 2A                         .db #$86, #%00101010
0D414 17 42                         .db #$17, #%01000010
0D416 47 12                         .db #$47, #%00010010
0D418 57 6A                         .db #$57, #%01101010
0D41A 97 4A                         .db #$97, #%01001010
0D41C A7 02                         .db #$A7, #%00000010
0D41E 18 02                         .db #$18, #%00000010
0D420 28 0A                         .db #$28, #%00001010
0D422 38 22                         .db #$38, #%00100010
0D424 68 2A                         .db #$68, #%00101010
0D426 88 62                         .db #$88, #%01100010
0D428 C8 0A                         .db #$C8, #%00001010
0D42A D8 02                         .db #$D8, #%00000010
0D42C 19 2A                         .db #$19, #%00101010
0D42E 39 2A                         .db #$39, #%00101010
0D430 69 42                         .db #$69, #%01000010
0D432 99 2A                         .db #$99, #%00101010
0D434 B9 42                         .db #$B9, #%01000010
0D436 FF                            .db #LEVEL_END
0D437                           
0D437                           lvl_layout_18:
0D437 00 12                         .db #$00, #%00010010
0D439 40 1A                         .db #$40, #%00011010
0D43B 50 11                         .db #$50, #%00010001
0D43D 70 1A                         .db #$70, #%00011010
0D43F 80 10                         .db #$80, #%00010000
0D441 D0 13                         .db #$D0, #%00010011
0D443 01 1A                         .db #$01, #%00011010
0D445 22 15                         .db #$22, #%00010101
0D447 A2 1A                         .db #$A2, #%00011010
0D449 B2 14                         .db #$B2, #%00010100
0D44B 03 67                         .db #$03, #%01100111
0D44D 43 67                         .db #$43, #%01100111
0D44F 83 67                         .db #$83, #%01100111
0D451 24 09                         .db #$24, #%00001001
0D453 74 0D                         .db #$74, #%00001101
0D455 C4 0A                         .db #$C4, #%00001010
0D457 05 A7                         .db #$05, #%10100111
0D459 45 27                         .db #$45, #%00100111
0D45B 95 27                         .db #$95, #%00100111
0D45D 16 C7                         .db #$16, #%11000111
0D45F 36 67                         .db #$36, #%01100111
0D461 86 67                         .db #$86, #%01100111
0D463 D6 07                         .db #$D6, #%00000111
0D465 07 A3                         .db #$07, #%10100011
0D467 27 23                         .db #$27, #%00100011
0D469 47 C7                         .db #$47, #%11000111
0D46B 57 A0                         .db #$57, #%10100000
0D46D 67 A7                         .db #$67, #%10100111
0D46F 77 20                         .db #$77, #%00100000
0D471 97 C7                         .db #$97, #%11000111
0D473 A7 A4                         .db #$A7, #%10100100
0D475 B7 A7                         .db #$B7, #%10100111
0D477 C7 24                         .db #$C7, #%00100100
0D479 28 0B                         .db #$28, #%00001011
0D47B 38 A3                         .db #$38, #%10100011
0D47D 78 08                         .db #$78, #%00001000
0D47F 88 A3                         .db #$88, #%10100011
0D481 C8 0C                         .db #$C8, #%00001100
0D483 D8 A4                         .db #$D8, #%10100100
0D485 09 43                         .db #$09, #%01000011
0D487 59 40                         .db #$59, #%01000000
0D489 A9 44                         .db #$A9, #%01000100
0D48B FF                            .db #LEVEL_END
0D48C                           
0D48C                           lvl_layout_19:
0D48C 11 A8                         .db #$11, #%10101000
0D48E 21 68                         .db #$21, #%01101000
0D490 81 28                         .db #$81, #%00101000
0D492 B1 48                         .db #$B1, #%01001000
0D494 22 48                         .db #$22, #%01001000
0D496 62 68                         .db #$62, #%01101000
0D498 B2 28                         .db #$B2, #%00101000
0D49A 23 28                         .db #$23, #%00101000
0D49C 83 28                         .db #$83, #%00101000
0D49E B3 28                         .db #$B3, #%00101000
0D4A0 04 E8                         .db #$04, #%11101000
0D4A2 24 08                         .db #$24, #%00001000
0D4A4 44 08                         .db #$44, #%00001000
0D4A6 64 E8                         .db #$64, #%11101000
0D4A8 84 E8                         .db #$84, #%11101000
0D4AA C4 A8                         .db #$C4, #%10101000
0D4AC D4 E8                         .db #$D4, #%11101000
0D4AE 15 48                         .db #$15, #%01001000
0D4B0 55 C8                         .db #$55, #%11001000
0D4B2 75 C8                         .db #$75, #%11001000
0D4B4 A5 08                         .db #$A5, #%00001000
0D4B6 36 08                         .db #$36, #%00001000
0D4B8 B6 08                         .db #$B6, #%00001000
0D4BA 27 48                         .db #$27, #%01001000
0D4BC 97 28                         .db #$97, #%00101000
0D4BE C7 08                         .db #$C7, #%00001000
0D4C0 09 61                         .db #$09, #%01100001
0D4C2 19 11                         .db #$19, #%00010001
0D4C4 49 61                         .db #$49, #%01100001
0D4C6 89 31                         .db #$89, #%00110001
0D4C8 A9 61                         .db #$A9, #%01100001
0D4CA FF                            .db #LEVEL_END
0D4CB                           
0D4CB                           lvl_layout_20:
0D4CB 00 60                         .db #$00, #%01100000
0D4CD 10 1A                         .db #$10, #%00011010
0D4CF 40 A7                         .db #$40, #%10100111
0D4D1 50 20                         .db #$50, #%00100000
0D4D3 70 1A                         .db #$70, #%00011010
0D4D5 80 40                         .db #$80, #%01000000
0D4D7 B0 1A                         .db #$B0, #%00011010
0D4D9 C0 20                         .db #$C0, #%00100000
0D4DB 01 40                         .db #$01, #%01000000
0D4DD 31 1A                         .db #$31, #%00011010
0D4DF A1 40                         .db #$A1, #%01000000
0D4E1 D1 1A                         .db #$D1, #%00011010
0D4E3 43 67                         .db #$43, #%01100111
0D4E5 83 47                         .db #$83, #%01000111
0D4E7 44 A7                         .db #$44, #%10100111
0D4E9 54 25                         .db #$54, #%00100101
0D4EB 94 08                         .db #$94, #%00001000
0D4ED A4 A7                         .db #$A4, #%10100111
0D4EF 55 05                         .db #$55, #%00000101
0D4F1 65 08                         .db #$65, #%00001000
0D4F3 06 27                         .db #$06, #%00100111
0D4F5 36 67                         .db #$36, #%01100111
0D4F7 76 28                         .db #$76, #%00101000
0D4F9 A6 27                         .db #$A6, #%00100111
0D4FB D6 07                         .db #$D6, #%00000111
0D4FD A7 A7                         .db #$A7, #%10100111
0D4FF 08 60                         .db #$08, #%01100000
0D501 09 60                         .db #$09, #%01100000
0D503 18 A7                         .db #$18, #%10100111
0D505 48 A7                         .db #$48, #%10100111
0D507 58 47                         .db #$58, #%01000111
0D509 88 27                         .db #$88, #%00100111
0D50B B8 20                         .db #$B8, #%00100000
0D50D D8 1A                         .db #$D8, #%00011010
0D50F 59 15                         .db #$59, #%00010101
0D511 69 60                         .db #$69, #%01100000
0D513 A9 60                         .db #$A9, #%01100000
0D515 FF                            .db #LEVEL_END
0D516                           
0D516                           lvl_layout_21:
0D516 00 13                         .db #$00, #%00010011
0D518 10 11                         .db #$10, #%00010001
0D51A 20 67                         .db #$20, #%01100111
0D51C 60 67                         .db #$60, #%01100111
0D51E A0 47                         .db #$A0, #%01000111
0D520 D0 15                         .db #$D0, #%00010101
0D522 32 63                         .db #$32, #%01100011
0D524 72 05                         .db #$72, #%00000101
0D526 82 43                         .db #$82, #%01000011
0D528 B2 43                         .db #$B2, #%01000011
0D52A 33 03                         .db #$33, #%00000011
0D52C 43 2A                         .db #$43, #%00101010
0D52E 63 7A                         .db #$63, #%01111010
0D530 73 2A                         .db #$73, #%00101010
0D532 A3 7A                         .db #$A3, #%01111010
0D534 34 63                         .db #$34, #%01100011
0D536 74 63                         .db #$74, #%01100011
0D538 B4 43                         .db #$B4, #%01000011
0D53A 06 63                         .db #$06, #%01100011
0D53C 46 63                         .db #$46, #%01100011
0D53E 86 63                         .db #$86, #%01100011
0D540 C6 C3                         .db #$C6, #%11000011
0D542 07 7A                         .db #$07, #%01111010
0D544 47 7A                         .db #$47, #%01111010
0D546 67 0A                         .db #$67, #%00001010
0D548 87 7A                         .db #$87, #%01111010
0D54A 08 13                         .db #$08, #%00010011
0D54C 18 43                         .db #$18, #%01000011
0D54E 48 63                         .db #$48, #%01100011
0D550 88 63                         .db #$88, #%01100011
0D552 FF                            .db #LEVEL_END
0D553                           
0D553                           lvl_layout_22:
0D553 00 7A                         .db #$00, #%01111010
0D555 40 7A                         .db #$40, #%01111010
0D557 80 7A                         .db #$80, #%01111010
0D559 C0 3A                         .db #$C0, #%00111010
0D55B 13 67                         .db #$13, #%01100111
0D55D 83 A7                         .db #$83, #%10100111
0D55F B3 07                         .db #$B3, #%00000111
0D561 14 07                         .db #$14, #%00000111
0D563 44 07                         .db #$44, #%00000111
0D565 A4 07                         .db #$A4, #%00000111
0D567 15 A5                         .db #$15, #%10100101
0D569 45 A5                         .db #$45, #%10100101
0D56B 85 25                         .db #$85, #%00100101
0D56D 86 05                         .db #$86, #%00000101
0D56F A6 05                         .db #$A6, #%00000101
0D571 17 11                         .db #$17, #%00010001
0D573 47 A1                         .db #$47, #%10100001
0D575 87 A1                         .db #$87, #%10100001
0D577 B7 A1                         .db #$B7, #%10100001
0D579 18 41                         .db #$18, #%01000001
0D57B 68 01                         .db #$68, #%00000001
0D57D D8 01                         .db #$D8, #%00000001
0D57F FF                            .db #LEVEL_END
0D580                           
0D580                           lvl_layout_23:
0D580 00 71                         .db #$00, #%01110001
0D582 40 11                         .db #$40, #%00010001
0D584 50 43                         .db #$50, #%01000011
0D586 80 D1                         .db #$80, #%11010001
0D588 90 E3                         .db #$90, #%11100011
0D58A A0 63                         .db #$A0, #%01100011
0D58C 01 63                         .db #$01, #%01100011
0D58E 41 63                         .db #$41, #%01100011
0D590 A1 63                         .db #$A1, #%01100011
0D592 02 63                         .db #$02, #%01100011
0D594 42 63                         .db #$42, #%01100011
0D596 62 11                         .db #$62, #%00010001
0D598 A2 67                         .db #$A2, #%01100111
0D59A 04 63                         .db #$04, #%01100011
0D59C 44 23                         .db #$44, #%00100011
0D59E 64 D1                         .db #$64, #%11010001
0D5A0 74 E3                         .db #$74, #%11100011
0D5A2 84 F1                         .db #$84, #%11110001
0D5A4 94 E3                         .db #$94, #%11100011
0D5A6 A4 C7                         .db #$A4, #%11000111
0D5A8 B4 23                         .db #$B4, #%00100011
0D5AA 05 63                         .db #$05, #%01100011
0D5AC 45 23                         .db #$45, #%00100011
0D5AE 06 71                         .db #$06, #%01110001
0D5B0 46 11                         .db #$46, #%00010001
0D5B2 56 E3                         .db #$56, #%11100011
0D5B4 D6 07                         .db #$D6, #%00000111
0D5B6 17 D1                         .db #$17, #%11010001
0D5B8 27 43                         .db #$27, #%01000011
0D5BA 67 D1                         .db #$67, #%11010001
0D5BC A7 C7                         .db #$A7, #%11000111
0D5BE C7 A7                         .db #$C7, #%10100111
0D5C0 D7 B3                         .db #$D7, #%10110011
0D5C2 28 43                         .db #$28, #%01000011
0D5C4 78 43                         .db #$78, #%01000011
0D5C6 29 43                         .db #$29, #%01000011
0D5C8 79 43                         .db #$79, #%01000011
0D5CA FF                           .db #LEVEL_END
0D5CB                           
0D5CB                           lvl_layout_24:
0D5CB 02 67                         .db #$02, #%01100111
0D5CD 42 67                         .db #$42, #%01100111
0D5CF 82 67                         .db #$82, #%01100111
0D5D1 05 67                         .db #$05, #%01100111
0D5D3 45 67                         .db #$45, #%01100111
0D5D5 85 67                         .db #$85, #%01100111
0D5D7 08 67                         .db #$08, #%01100111
0D5D9 48 67                         .db #$48, #%01100111
0D5DB 88 67                         .db #$88, #%01100111
0D5DD 30 E7                         .db #$30, #%11100111
0D5DF 70 E7                         .db #$70, #%11100111
0D5E1 B0 E7                         .db #$B0, #%11100111
0D5E3 34 E7                         .db #$34, #%11100111
0D5E5 74 E7                         .db #$74, #%11100111
0D5E7 B4 E7                         .db #$B4, #%11100111
0D5E9 20 13                         .db #$20, #%00010011
0D5EB 40 10                         .db #$40, #%00010000
0D5ED 80 02                         .db #$80, #%00000010
0D5EF 41 05                         .db #$41, #%00000101
0D5F1 B1 09                         .db #$B1, #%00001001
0D5F3 02 09                         .db #$02, #%00001001
0D5F5 52 0C                         .db #$52, #%00001100
0D5F7 13 11                         .db #$13, #%00010001
0D5F9 33 04                         .db #$33, #%00000100
0D5FB 74 0C                         .db #$74, #%00001100
0D5FD B4 08                         .db #$B4, #%00001000
0D5FF 15 09                         .db #$15, #%00001001
0D601 55 0C                         .db #$55, #%00001100
0D603 95 0C                         .db #$95, #%00001100
0D605 47 03                         .db #$47, #%00000011
0D607 A7 12                         .db #$A7, #%00010010
0D609 18 15                         .db #$18, #%00010101
0D60B 09 05                         .db #$09, #%00000101
0D60D 19 03                         .db #$19, #%00000011
0D60F FF                            .db #LEVEL_END
0D610                           
0D610                           lvl_layout_25:
0D610 00 12                         .db #$00, #%00010010
0D612 10 63                         .db #$10, #%01100011
0D614 60 63                         .db #$60, #%01100011
0D616 A0 07                         .db #$A0, #%00000111
0D618 01 11                         .db #$01, #%00010001
0D61A A1 02                         .db #$A1, #%00000010
0D61C 02 67                         .db #$02, #%01100111
0D61E 42 07                         .db #$42, #%00000111
0D620 62 67                         .db #$62, #%01100111
0D622 A2 C7                         .db #$A2, #%11000111
0D624 03 61                         .db #$03, #%01100001
0D626 43 01                         .db #$43, #%00000001
0D628 63 61                         .db #$63, #%01100001
0D62A A6 E7                         .db #$A6, #%11100111
0D62C B6 47                         .db #$B6, #%01000111
0D62E C6 01                         .db #$C6, #%00000001
0D630 B7 42                         .db #$B7, #%01000010
0D632 B8 42                         .db #$B8, #%01000010
0D634 C8 0A                         .db #$C8, #%00001010
0D636 09 7A                         .db #$09, #%01111010
0D638 49 7A                         .db #$49, #%01111010
0D63A 89 3A                         .db #$89, #%00111010
0D63C B9 42                         .db #$B9, #%01000010
0D63E FF                            .db #LEVEL_END
0D63F                           
0D63F                           ;; Level layout address pointers
0D63F                           tbl_lvl_layout_hi:
0D63F CF CF CF CF D0                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D644 D0 D1 D1 D1 D1                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D649 D2 D2 D2 D2 D3                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D64E D3 D3 D4 D4 D4                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D653 D5 D5 D5 D5 D6                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D658                           
0D658                           tbl_lvl_layout_lo:
0D658 60 7B B0 E3 54                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D65D 8F 18 59 90 D3                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D662 02 55 80 D3 4A                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D667 7B D0 37 8C CB                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D66C 16 53 80 CB 10                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D671                           
0D671                           ;; Ball start position (#$YX)
0D671                           tbl_lvl_ball_startpos:
0D671 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D676 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D67B 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D680 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D685 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D68A                               
0D68A                           ;; Ball start direction, color and tile score
0D68A                           ;; #% ccc v tttt
0D68A                           ;;    ||| | ++++-- tile score
0D68A                           ;;    ||| +------- vertical direction, up (0) or down
0D68A                           ;;    +++--------- color (CBRYGM)
0D68A                           tbl_lvl_ball_init:
0D68A 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D68F 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D694 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D699 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D69E 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D6A3                           
0D6A3                           
0D6A3                           
0D6A3                           ;; Helper table to multiply values by 16
0D6A3                           tbl_Times16:
0D6A3 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D6AB 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D6B3                               
0D6B3                           
0D6B3                           ;; Helper table to multiply values by 64
0D6B3                           tbl_Times64:
0D6B3 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D6B7                           
0D6B7                           
0D6B7                           ;; Metatile ID to CHR data mapper
0D6B7                           tbl_GametileTopLeft:
0D6B7 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D6C1                           
0D6C1                           tbl_GametileTopRight:
0D6C1 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D6CB                           
0D6CB                           tbl_GametileBottomLeft:
0D6CB 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D6D5                           
0D6D5                           tbl_GametileBottomRight:
0D6D5 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D6DF                           
0D6DF                           ;; Metatile ID to RAM byte data mapper
0D6DF                           tbl_GameTileRamByte:
0D6DF 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D6E4                           
0D6E4                           ;; HUD text data
0D6E4                           tbl_HudText:
0D6E4 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D6EC 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D6F3 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D6FB 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D700                           
0D700                           
0D700                           ;; NMI handler
0D700                           NMI:
0D700                               .include "interrupt/nmi.asm"
0D700                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D700                           ;;
0D700                           ;; include/nmi.asm
0D700                           ;;
0D700                           ;; Non-maskable interrupt script. This script is being executed
0D700                           ;; when vBlank hits.
0D700                           ;;
0D700                           ;;
0D700                           
0D700                               ;; Preserve accumulator through stack
0D700 48                            PHA
0D701                           
0D701                               ;; Should NMI be skipped?
0D701 A5 13                         LDA skip_nmi
0D703 F0 03                         BEQ +
0D705 4C 46 D8                          JMP +skip_nmi
0D708                               +
0D708                           
0D708                               ;; When in NMI, skip additional NMI requests
0D708 A9 01                         LDA #$01
0D70A 85 13                         STA skip_nmi
0D70C                           
0D70C                               ;; Preserve X, Y, and PC through stack
0D70C 8A                            TXA
0D70D 48                            PHA
0D70E 98                            TYA
0D70F 48                            PHA
0D710 08                            PHP
0D711                               
0D711                               ;; Check forced NMI skip
0D711 A5 14                         LDA force_skip_nmi
0D713 F0 03                         BEQ +
0D715 4C 35 D8                          JMP +force_skip_nmi
0D718                               +
0D718                           
0D718                               ;; Update PPU mask
0D718                               ;LDA #$00
0D718                               ;STA PPU_CTRL
0D718 A5 12                         LDA soft_ppu_mask
0D71A 8D 01 20                      STA PPU_MASK
0D71D                               
0D71D                               
0D71D                               ;; Additional PPU updates go here
0D71D                               .include "game/interrupt/nmi.asm"
0D71D                           
0D71D                               ;; Check if ppu_buffer needs updating
0D71D A5 39                         LDA ppu_buffer_update
0D71F D0 03                         BNE +
0D721 4C 63 D7                          JMP +no_ppu_buffer_update
0D724                               +
0D724                           
0D724                               ;; Reset ppu control register and mask
0D724 A2 00                         LDX #$00
0D726 8E 00 20                      STX PPU_CTRL
0D729 8E 01 20                      STX PPU_MASK
0D72C                           
0D72C                               ;; Set up loop
0D72C                               -
0D72C                                   ;; Reset hi/lo latch
0D72C 2C 02 20                          BIT PPU_STATUS
0D72F                           
0D72F                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D72F BD 00 03                          LDA ppu_buffer,x
0D732 8D 06 20                          STA PPU_ADDR
0D735 E8                                INX
0D736 BD 00 03                          LDA ppu_buffer,x
0D739 8D 06 20                          STA PPU_ADDR
0D73C                           
0D73C                                   ;; Write ppu_buffer data to PPU_ADDR
0D73C E8                                INX
0D73D BD 00 03                          LDA ppu_buffer,x
0D740 8D 07 20                          STA PPU_DATA
0D743                           
0D743                                   ;; Check if updating is done (eg. X is at pointer)
0D743 E8                                INX
0D744 E4 3A                             CPX ppu_buffer_pointer
0D746 F0 03                             BEQ +
0D748 4C 2C D7                      JMP -
0D74B                           +
0D74B                           
0D74B                               ;; Reset ppu buffer update and pointer
0D74B A9 00                         LDA #$00
0D74D 85 39                         STA ppu_buffer_update
0D74F 85 3A                         STA ppu_buffer_pointer
0D751                               
0D751                               ;; Reset scrolling position
0D751 8D 05 20                      STA PPU_SCROLL
0D754 8D 05 20                      STA PPU_SCROLL
0D757                           
0D757                               ;; Restore ppu control register and mask
0D757 A9 90                         LDA #%10010000
0D759 8D 00 20                      STA PPU_CTRL
0D75C A5 12                         LDA soft_ppu_mask
0D75E 8D 01 20                      STA PPU_MASK
0D761 A9 00                         LDA #$00
0D763                           
0D763                           ;; Continue other NMI stuff
0D763                           +no_ppu_buffer_update:
0D763                           
0D763                               ;; Reset sprite RAM, draw sprites
0D763 8D 03 20                      STA OAM_ADDR
0D766 A9 02                         LDA #$02
0D768 8D 14 40                      STA OAM_DMA
0D76B                           
0D76B                               ;; Decrease explosion and move block timers
0D76B A0 04                         LDY #MAX_ANIMATIONS
0D76D A2 00                         LDX #$00
0D76F                               -
0D76F BD 60 03                          LDA explosion_timer,x
0D772 F0 03                             BEQ +
0D774 DE 60 03                              DEC explosion_timer,x
0D777                                   +
0D777                           
0D777 BD 80 03                          LDA move_block_timer,x
0D77A F0 03                             BEQ +
0D77C DE 80 03                              DEC move_block_timer,x
0D77F                                   +
0D77F                                   
0D77F E8                                INX
0D780 88                                DEY
0D781 F0 03                             BEQ +done
0D783 4C 6F D7                      JMP -
0D786                           +done:
0D786                           
0D786                               ;; Decrease nudge timer
0D786 A5 3E                         LDA nudge_timer
0D788 F0 02                         BEQ +
0D78A C6 3E                             DEC nudge_timer
0D78C                               +
0D78C                           
0D78C                               ;; Decrease bonus timer
0D78C A5 3F                         LDA bonus_timer
0D78E F0 02                         BEQ +
0D790 C6 3F                             DEC bonus_timer
0D792                               +
0D792                           
0D792                               ;; Decrease kill timer
0D792 A5 40                         LDA kill_timer
0D794 F0 02                         BEQ +
0D796 C6 40                             DEC kill_timer
0D798                               +
0D798                           
0D798                               ;; Play background noise
0D798 A5 38                         LDA screen_mode
0D79A 29 01                         AND #IS_GAME_SCREEN
0D79C F0 21                         BEQ +
0D79E                                   .include "game/include/main/background_sound.asm"
0D79E                               ;; At random times, set max_noise period to $03-$0A
0D79E A5 44                         LDA max_noise
0D7A0 D0 1D                         BNE +
0D7A2 20 F0 C4                          JSR sub_GetRandomNumber
0D7A5 29 EF                             AND #%11101111
0D7A7 D0 16                             BNE +
0D7A9                                   
0D7A9 A5 15                             LDA frame_counter
0D7AB 85 16                             STA random_seed
0D7AD 20 F0 C4                          JSR sub_GetRandomNumber
0D7B0 29 07                             AND #$07
0D7B2 69 03                             ADC #$03
0D7B4 85 44                             STA max_noise
0D7B6 A9 01                             LDA #$01
0D7B8 85 45                             STA sweep_noise
0D7BA A9 34                             LDA #$34
0D7BC 8D 0C 40                          STA NOISE_VOLUME
0D7BF                           
0D7BF                               +
0D7BF                           
0D7BF                               ;; if sweep noise = $00: constant noise
0D7BF                               ;; else if sweep noise > $80: decrease pitch
0D7BF                               ;; else: increase pitch
0D7BF A5 45                         LDA sweep_noise
0D7C1 F0 18                         BEQ +constantNoise
0D7C3 30 2A                         BMI +decreaseNoise
0D7C5                           
0D7C5                           ;; Sweep noise up to max noise pitch
0D7C5                           +increaseNoise:
0D7C5 C6 46                         DEC current_noise
0D7C7 A5 46                         LDA current_noise
0D7C9 8D 0E 40                      STA NOISE_PERIOD
0D7CC C5 44                         CMP max_noise
0D7CE D0 08                         BNE +
0D7D0 A9 00                             LDA #$00
0D7D2 85 45                             STA sweep_noise
0D7D4 A9 0A                             LDA #$0A
0D7D6 85 47                             STA noise_timer
0D7D8                               +
0D7D8 4C 03 D8                      JMP +endNoise
0D7DB                           
0D7DB                           ;; Keep noise at constant pitch
0D7DB                           +constantNoise:
0D7DB A5 44                         LDA max_noise
0D7DD F0 24                         BEQ +endNoise
0D7DF                           
0D7DF A5 47                         LDA noise_timer
0D7E1 D0 07                         BNE +
0D7E3 A9 80                             LDA #$80
0D7E5 85 45                             STA sweep_noise
0D7E7 4C 03 D8                          JMP +endNoise
0D7EA                               +
0D7EA C6 47                         DEC noise_timer
0D7EC 4C 03 D8                      JMP +endNoise
0D7EF                           
0D7EF                           ;; Sweep noise down to initial pitch
0D7EF                           +decreaseNoise:
0D7EF E6 46                         INC current_noise
0D7F1 A5 46                         LDA current_noise
0D7F3 8D 0E 40                      STA NOISE_PERIOD
0D7F6 C9 0E                         CMP #$0E
0D7F8 D0 09                         BNE +endNoise
0D7FA                           
0D7FA 20 80 C5                      JSR sub_BackgroundNoise
0D7FD A9 00                         LDA #$00
0D7FF 85 44                         STA max_noise
0D801 85 45                         STA sweep_noise
0D803                           
0D803                           +endNoise:
0D803                           
0D803                               +
0D803                           
0D803                               ;; Test: random bleeps
0D803                               .include "game/test/random_descending_bleeps.asm"
0D803                           ;; Random bleepy noises
0D803 A5 48                         LDA do_beeps
0D805 F0 2E                         BEQ +continue
0D807                               
0D807 C9 02                         CMP #$02
0D809 D0 12                         BNE +beep
0D80B                              
0D80B                           +stopBeep:
0D80B A9 00                         LDA #$00
0D80D 85 48                         STA do_beeps
0D80F A9 08                         LDA #$08
0D811 8D 15 40                      STA APU_STATUS
0D814 8D 0F 40                      STA NOISE_LENGTH
0D817 20 80 C5                      JSR sub_BackgroundNoise
0D81A 4C 35 D8                      JMP +continue
0D81D                               
0D81D                           +beep:
0D81D A9 01                         LDA #$01
0D81F 8D 15 40                      STA APU_STATUS
0D822 A9 B8                         LDA #$B8
0D824 8D 00 40                      STA PULSE1_VOLUME
0D827 20 F0 C4                      JSR sub_GetRandomNumber
0D82A 8D 02 40                      STA PULSE1_TIMER_LO
0D82D 20 F0 C4                      JSR sub_GetRandomNumber
0D830 29 01                         AND #$01
0D832 8D 03 40                      STA PULSE1_TIMER_HI
0D835                           
0D835                           +continue:0D835                               
0D835                           
0D835                           
0D835                           ;; This is what happens when we forced nmi skip
0D835                           +force_skip_nmi:
0D835                           
0D835                               ;; Increase frame timers
0D835 E6 15                         INC frame_counter
0D837                           
0D837                               ;; reset sprites_update_position
0D837 A9 00                         LDA #$00
0D839 85 35                         STA sprites_update_position
0D83B                           
0D83B                               ;; Don't skip next NMI request
0D83B A9 00                         LDA #$00
0D83D 85 13                         STA skip_nmi
0D83F 85 49                         STA check_nmi
0D841                           
0D841                               ;; Restore X, Y and PC from stack
0D841 28                            PLP
0D842 68                            PLA
0D843 A8                            TAY
0D844 68                            PLA
0D845 AA                            TAX
0D846                           
0D846                           +skip_nmi:
0D846                               ;; Restore accumulator from stack
0D846 68                            PLA
0D847                           
0D847                               ;; Return
0D847 40                            RTI
0D848                           
0D848                           ;; IRQ handler (empty)
0D848                           IRQ:
0D848                               .include "interrupt/irq.asm"
0D848 40                            RTI0D849                           
0D849                           ;; Interrupt vectors
0D849 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 00 D7                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 48 D8                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
