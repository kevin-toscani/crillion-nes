	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$06
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU Noise registers
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           ball_update_position   .dsb 1
00036                           
00036                           
00036                           ;; Ball flags
00036                           ;; #% c c c v . f n a
00036                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00036                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00036                           ;;    | | | | | +------ ball is frozen (not moving)
00036                           ;;    | | | | +-------- (unused for now)
00036                           ;;    | | | +---------- ball moves up (0) or down (1)
00036                           ;;    +-+-+------------ ball color (1-6)
00036                           ball_flags             .dsb 1
00037                           
00037                           
00037                           ;; Screen mode
00037                           ;; #% u . . . . . t t
00037                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00037                           ;;    | +-+-+-+-+------------- unused
00037                           ;;    +----------------------- should the screen update
00037                           screen_mode            .dsb 1
00038                           
00038                           
00038                           
00038                           ;; PPU buffer variables
00038                           ppu_buffer_update      .dsb 1
00039                           ppu_buffer_pointer     .dsb 1
0003A                           
0003A                           ;; Pointer to keep track of the number of explosions
0003A                           explosion_pointer      .dsb 1
0003B                           
0003B                           ;; Sprite RAM pointer to keep track of sprites to update
0003B                           sprite_ram_pointer     .dsb 1
0003C                           
0003C                           ;; Counters
0003C                           nudge_counter          .dsb 1
0003D                           bonus_counter          .dsb 1
0003E                           kill_counter           .dsb 1
0003F                           
0003F                           ;; Current level (doubles as level select variable)
0003F                           current_level          .dsb 1
00040                           
00040                           ;; Tile type the ball is currently colliding with
00040                           colliding_tile         .dsb 1
00041                           
00041                           ;; Background noise variables
00041                           max_noise              .dsb 1
00042                           sweep_noise            .dsb 1
00043                           current_noise          .dsb 1
00044                           noise_counter          .dsb 1
00045                           
00045                           ;; Additional NMI check for timed PPU fade
00045                           check_nmi              .dsb 1
00046                               00046                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_framecounter    .dsb 4
00364                           
00364                               ;; _currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; _attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 66 C4                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 66 C4                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 37                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 3F                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3B                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 49 C4                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 37                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 37                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 0E CE                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 0B CE                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 8D C5                      JSR sub_DisableRendering
0C08A 20 62 C8                      JSR sub_JumpToPointer
0C08D 20 A1 C5                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 37                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 37                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 37                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C 39 C3                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3B                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 75 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                           
0C0BE                               ;; Check if ball is frozen
0C0BE A5 36                         LDA ball_flags
0C0C0 29 04                         AND #BALL_IS_FROZEN
0C0C2 F0 03                         BEQ +
0C0C4 4C 75 C2                          JMP +skipBallMovement
0C0C7                               +
0C0C7                           
0C0C7                               ;; Move the ball
0C0C7                               .include "game/include/main/move_ball.asm"
0C0C7                           
0C0C7                               ;; Check if ball goes up or down
0C0C7 A5 36                         LDA ball_flags
0C0C9 29 10                         AND #BALL_MOVES_DOWN
0C0CB F0 2B                         BEQ +moveBallUp
0C0CD                           
0C0CD                           
0C0CD                           +moveBallDown:
0C0CD                               ;; update the low byte
0C0CD A5 1A                         LDA ball_ypos_lo
0C0CF 85 1C                         STA ball_ypos_lo_prev
0C0D1 18                            CLC
0C0D2 69 F0                         ADC #BALL_SPEED_LO
0C0D4 85 1A                         STA ball_ypos_lo
0C0D6                           
0C0D6                               ;; update the high byte with carry
0C0D6 A5 19                         LDA ball_ypos_hi
0C0D8 85 1B                         STA ball_ypos_hi_prev
0C0DA 69 01                         ADC #BALL_SPEED_HI
0C0DC 85 19                         STA ball_ypos_hi
0C0DE                               
0C0DE                               ;; Check bottom bound
0C0DE C9 C8                         CMP #BOUND_BOTTOM
0C0E0 90 3C                         BCC +checkHorizontalMovement
0C0E2 F0 3A                         BEQ +checkHorizontalMovement
0C0E4                           
0C0E4                           
0C0E4                               ;; Change ball direction to "up"
0C0E4 A9 C8                         LDA #BOUND_BOTTOM
0C0E6 38                            SEC
0C0E7 E9 01                         SBC #$01
0C0E9 85 19                         STA ball_ypos_hi
0C0EB A9 00                         LDA #$00
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF A5 36                         LDA ball_flags
0C0F1 29 EF                         AND #MOVE_BALL_UP
0C0F3 85 36                         STA ball_flags
0C0F5 4C 1E C1                      JMP +checkHorizontalMovement
0C0F8                           
0C0F8                           
0C0F8                           +moveBallUp:
0C0F8                               ;; update the low byte
0C0F8 A5 1A                         LDA ball_ypos_lo
0C0FA 85 1C                         STA ball_ypos_lo_prev
0C0FC 38                            SEC
0C0FD E9 F0                         SBC #BALL_SPEED_LO
0C0FF 85 1A                         STA ball_ypos_lo
0C101                           
0C101                               ;; update the high byte with carry
0C101 A5 19                         LDA ball_ypos_hi
0C103 85 1B                         STA ball_ypos_hi_prev
0C105 E9 01                         SBC #BALL_SPEED_HI
0C107 85 19                         STA ball_ypos_hi
0C109                               
0C109                               ;; Check top bound
0C109 C9 30                         CMP #BOUND_TOP
0C10B B0 11                         BCS +checkHorizontalMovement
0C10D                           
0C10D                               ;; Change ball direction to "down"
0C10D A9 30                         LDA #BOUND_TOP
0C10F 18                            CLC
0C110 69 01                         ADC #$01
0C112 85 19                         STA ball_ypos_hi
0C114 A9 00                         LDA #$00
0C116 85 1A                         STA ball_ypos_lo
0C118 A5 36                         LDA ball_flags
0C11A 09 10                         ORA #MOVE_BALL_DOWN
0C11C 85 36                         STA ball_flags
0C11E                           
0C11E                           
0C11E                           +checkHorizontalMovement:
0C11E                           
0C11E                               ;; Check if ball is being nudged
0C11E A5 3C                         LDA nudge_counter
0C120 D0 41                         BNE +doneBallMovement
0C122                           
0C122                               ;; Check if left button is held
0C122 A5 0F                         LDA buttons_held
0C124 29 02                         AND #BUTTON_LEFT
0C126 F0 1B                         BEQ +
0C128                                   ;; update the low byte
0C128 A5 18                             LDA ball_xpos_lo
0C12A 38                                SEC
0C12B E9 F0                             SBC #BALL_SPEED_LO
0C12D 85 18                             STA ball_xpos_lo
0C12F                           
0C12F                                   ;; update the high byte
0C12F A5 17                             LDA ball_xpos_hi
0C131 E9 01                             SBC #BALL_SPEED_HI
0C133 85 17                             STA ball_xpos_hi
0C135                                   
0C135                                   ;; Check left bound
0C135 C9 10                             CMP #BOUND_LEFT
0C137 B0 2A                             BCS +doneBallMovement
0C139                                   
0C139                                   ;; Set flag to nudge right and set nudge counter
0C139 A5 36                             LDA ball_flags
0C13B 09 02                             ORA #NUDGE_BALL_RIGHT
0C13D 20 5B C8                          JSR sub_InitiateNudge
0C140                           
0C140 4C 63 C1                          JMP +doneBallMovement        
0C143                               +
0C143                           
0C143                               ;; Check if right button is held
0C143 A5 0F                         LDA buttons_held
0C145 29 01                         AND #BUTTON_RIGHT
0C147 F0 1A                         BEQ +
0C149                                   ;; update the low byte
0C149 A5 18                             LDA ball_xpos_lo
0C14B 18                                CLC
0C14C 69 F0                             ADC #BALL_SPEED_LO
0C14E 85 18                             STA ball_xpos_lo
0C150                           
0C150                                   ;; update the high byte
0C150 A5 17                             LDA ball_xpos_hi
0C152 69 01                             ADC #BALL_SPEED_HI
0C154 85 17                             STA ball_xpos_hi     
0C156                           
0C156                                  ;; Check right bound
0C156 C9 E8                             CMP #BOUND_RIGHT
0C158 90 09                             BCC +doneBallMovement
0C15A F0 07                             BEQ +doneBallMovement
0C15C                                   
0C15C                                   ;; Set flag to nudge left and set nudge timer
0C15C A5 36                             LDA ball_flags
0C15E 29 FD                             AND #NUDGE_BALL_LEFT
0C160 20 5B C8                          JSR sub_InitiateNudge
0C163                               +
0C163                           
0C163                           
0C163                           +doneBallMovement:
0C163                           
0C163                               ;; Check nudge
0C163 A5 3C                         LDA nudge_counter
0C165 F0 23                         BEQ +doneBallNudging
0C167 A5 36                             LDA ball_flags
0C169 29 02                             AND #NUDGE_BALL_RIGHT
0C16B F0 10                             BEQ +nudgeBallLeft
0C16D                                   
0C16D                                       ;; update the low byte
0C16D A5 18                                 LDA ball_xpos_lo
0C16F 18                                    CLC
0C170 69 F0                                 ADC #BALL_SPEED_LO
0C172 85 18                                 STA ball_xpos_lo
0C174                           
0C174                                       ;; update the high byte
0C174 A5 17                                 LDA ball_xpos_hi
0C176 69 01                                 ADC #BALL_SPEED_HI
0C178 85 17                                 STA ball_xpos_hi  
0C17A 4C 8A C1                              JMP +doneBallNudging
0C17D                                   +nudgeBallLeft:
0C17D                                   
0C17D                                   ;; update the low byte
0C17D A5 18                             LDA ball_xpos_lo
0C17F 38                                SEC
0C180 E9 F0                             SBC #BALL_SPEED_LO
0C182 85 18                             STA ball_xpos_lo
0C184                           
0C184                                   ;; update the high byte
0C184 A5 17                             LDA ball_xpos_hi
0C186 E9 01                             SBC #BALL_SPEED_HI
0C188 85 17                             STA ball_xpos_hi
0C18A                               +doneBallNudging:
0C18A                           
0C18A                               ;; Don't update position again until next frame
0C18A E6 35                         INC ball_update_position
0C18C                           
0C18C                           +doneBallHandling:0C18C                               
0C18C                               ;; Do collision detection
0C18C                               .include "game/include/main/collision_detection.asm"
0C18C                           
0C18C                               ;; Get ball's x-left, x-center, x-right position
0C18C A5 17                         LDA ball_xpos_hi
0C18E 18                            CLC
0C18F 69 F0                         ADC #BALL_LEFT_WGA
0C191 85 2F                         STA ball_left
0C193 18                            CLC
0C194 69 04                         ADC #BALL_HALF_SIZE
0C196 85 30                         STA ball_center
0C198 18                            CLC
0C199 69 04                         ADC #BALL_HALF_SIZE
0C19B 85 31                         STA ball_right
0C19D                           
0C19D                               ;; Get ball's y-top, y-middle, y-bottom position
0C19D A5 19                         LDA ball_ypos_hi
0C19F 18                            CLC
0C1A0 69 D0                         ADC #BALL_TOP_WGA
0C1A2 85 32                         STA ball_top
0C1A4 18                            CLC
0C1A5 69 04                         ADC #BALL_HALF_SIZE
0C1A7 85 33                         STA ball_middle
0C1A9 18                            CLC
0C1AA 69 04                         ADC #BALL_HALF_SIZE
0C1AC 85 34                         STA ball_bottom
0C1AE                           
0C1AE                           +checkRightCollision:
0C1AE                               ;; Check if ball moves right
0C1AE                               ;; No need to check nudging here as that will never collide with a tile
0C1AE A5 0F                         LDA buttons_held
0C1B0 29 01                         AND #BUTTON_RIGHT
0C1B2 F0 1C                         BEQ +checkLeftCollision
0C1B4                           
0C1B4                               ;; Check tile at right position
0C1B4 A5 33                         LDA ball_middle
0C1B6 85 00                         STA temp
0C1B8 A5 31                         LDA ball_right
0C1BA 85 01                         STA temp+1
0C1BC 20 75 C5                      JSR sub_ConvertXYToTileType
0C1BF 29 01                         AND #TILE_IS_SOLID
0C1C1 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1C3                           
0C1C3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1C3 A5 36                         LDA ball_flags
0C1C5 29 FD                         AND #NUDGE_BALL_LEFT
0C1C7 20 5B C8                      JSR sub_InitiateNudge
0C1CA 20 CE C5                      JSR sub_EvaluateTileType
0C1CD 4C EF C1                      JMP +checkTopCollision
0C1D0                           
0C1D0                           +checkLeftCollision:
0C1D0                               ;; Check if ball moves right
0C1D0                               ;; No need to check nudging here as that will never collide with a tile
0C1D0 A5 0F                         LDA buttons_held
0C1D2 29 02                         AND #BUTTON_LEFT
0C1D4 F0 19                         BEQ +checkTopCollision
0C1D6                           
0C1D6                               ;; Check tile at right position
0C1D6 A5 33                         LDA ball_middle
0C1D8 85 00                         STA temp
0C1DA A5 2F                         LDA ball_left
0C1DC 85 01                         STA temp+1
0C1DE 20 75 C5                      JSR sub_ConvertXYToTileType
0C1E1 29 01                         AND #TILE_IS_SOLID
0C1E3 F0 0A                         BEQ +checkTopCollision
0C1E5                           
0C1E5                               ;; Tile is solid; nudge ball and evaluate tile type
0C1E5 A5 36                         LDA ball_flags
0C1E7 09 02                         ORA #NUDGE_BALL_RIGHT
0C1E9 20 5B C8                      JSR sub_InitiateNudge
0C1EC 20 CE C5                      JSR sub_EvaluateTileType
0C1EF                               
0C1EF                               
0C1EF                           +checkTopCollision:
0C1EF                               ;; Check if ball moves up
0C1EF A5 36                         LDA ball_flags
0C1F1 29 10                         AND #BALL_MOVES_DOWN
0C1F3 D0 23                         BNE +checkBottomCollision
0C1F5                           
0C1F5                               ;; Check tile at top position
0C1F5 A5 32                         LDA ball_top
0C1F7 85 00                         STA temp
0C1F9 A5 30                         LDA ball_center
0C1FB 85 01                         STA temp+1
0C1FD 20 75 C5                      JSR sub_ConvertXYToTileType
0C200 29 01                         AND #TILE_IS_SOLID
0C202 F0 34                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C204                           
0C204                               ;; Tile is solid; move ball down and evaluate tile type
0C204 A5 1C                         LDA ball_ypos_lo_prev
0C206 85 1A                         STA ball_ypos_lo
0C208 A5 1B                         LDA ball_ypos_hi_prev
0C20A 85 19                         STA ball_ypos_hi
0C20C A5 36                         LDA ball_flags
0C20E 09 10                         ORA #MOVE_BALL_DOWN
0C210 85 36                         STA ball_flags
0C212 20 CE C5                      JSR sub_EvaluateTileType
0C215 4C 38 C2                      JMP +doneCheckingCollision
0C218                           
0C218                           +checkBottomCollision:
0C218                               ;; No movement check needed: since ball is not moving up, it must move down
0C218                           
0C218                               ;; Check tile at bottom position
0C218 A5 34                         LDA ball_bottom
0C21A 85 00                         STA temp
0C21C A5 30                         LDA ball_center
0C21E 85 01                         STA temp+1
0C220 20 75 C5                      JSR sub_ConvertXYToTileType
0C223 29 01                         AND #TILE_IS_SOLID
0C225 F0 11                         BEQ +doneCheckingCollision
0C227                           
0C227                               ;; Tile is solid; move ball up and evaluate tile type
0C227 A5 1C                         LDA ball_ypos_lo_prev
0C229 85 1A                         STA ball_ypos_lo
0C22B A5 1B                         LDA ball_ypos_hi_prev
0C22D 85 19                         STA ball_ypos_hi
0C22F A5 36                         LDA ball_flags
0C231 29 EF                         AND #MOVE_BALL_UP
0C233 85 36                         STA ball_flags
0C235 20 CE C5                      JSR sub_EvaluateTileType
0C238                           
0C238                           +doneCheckingCollision:
0C238                           
0C238                               
0C238                               ;; Update bonus
0C238                               .include "game/include/main/update_bonus.asm"
0C238                           ;; update_bonus.asm
0C238                           
0C238                               ;; If bonus = 000, skip decreasing
0C238 A5 2C                         LDA ball_bonus
0C23A 18                            CLC
0C23B 65 2D                         ADC ball_bonus+1
0C23D 18                            CLC
0C23E 65 2E                         ADC ball_bonus+2
0C240 F0 33                         BEQ +done
0C242                           
0C242                               ;; Check if bonus counter is done yet
0C242 A5 3D                         LDA bonus_counter
0C244 D0 2F                         BNE +done
0C246                           
0C246                               ;; Bonus counter is done
0C246                               ;; Reset bonus counter
0C246 A9 06                         LDA #BONUS_FRAMES
0C248 85 3D                         STA bonus_counter
0C24A                               
0C24A                               ;; Subtract one from ball bonus ones
0C24A C6 2E                         DEC ball_bonus+2
0C24C                               
0C24C                               ;; Check if underflow
0C24C 10 0E                         BPL +updateBonusOnScreen
0C24E                           
0C24E                               ;; If underflow, set 9 and subtract one from bonus tens
0C24E A9 09                         LDA #$09
0C250 85 2E                         STA ball_bonus+2
0C252 C6 2D                         DEC ball_bonus+1
0C254                               
0C254                               ;; Check if underflow
0C254 10 06                         BPL +updateBonusOnScreen
0C256                           
0C256                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C256 A9 09                         LDA #$09
0C258 85 2D                         STA ball_bonus+1
0C25A C6 2C                         DEC ball_bonus
0C25C                           
0C25C                               ;;209A 209B 209C
0C25C                           +updateBonusOnScreen:
0C25C A9 20                         LDA #$20
0C25E 85 00                         STA temp
0C260 A9 9C                         LDA #$9C
0C262 85 01                         STA temp+1
0C264 A2 02                         LDX #$02
0C266                               
0C266                               -updateNextDigit:
0C266 B5 2C                             LDA ball_bonus,x
0C268 18                                CLC
0C269 69 01                             ADC #$01
0C26B 85 02                             STA temp+2
0C26D 20 A1 CC                          JSR sub_WriteByteToPPUBuffer
0C270 C6 01                             DEC temp+1
0C272 CA                                DEX
0C273 10 F1                         BPL -updateNextDigit
0C275                                   
0C275                           +done:0C275                           
0C275                           
0C275                           +skipBallMovement:
0C275                               ;; Testing timed PPU scroll concept
0C275                               .include "game/test/timed_ppuscroll_test.asm"
0C275                           ;; Timed updates (test)
0C275                           
0C275                               ;; If B button is pressed
0C275 A5 10                         LDA buttons_pressed
0C277 29 10                         AND #BUTTON_START
0C279 D0 03                         BNE +
0C27B 4C 00 C3                          JMP +end
0C27E                               +
0C27E                           
0C27E                           lbl_initiate_level_load:
0C27E                               ;; Disable noise channel
0C27E A9 00                         LDA #$00
0C280 8D 15 40                      STA APU_STATUS
0C283 8D 0C 40                      STA NOISE_VOLUME
0C286                               
0C286                               ;; Set up loop fading
0C286 A9 00                         LDA #$00
0C288 85 07                         STA temp+7
0C28A A0 08                         LDY #$08
0C28C                               -fadeLoop:
0C28C 84 08                             STY temp+8
0C28E                           
0C28E                                   ;; Wait for NMI to pass
0C28E 20 5D C4                          JSR sub_WaitForNMI
0C291                                   
0C291                                   ;; Now wait for No-sprite 0
0C291                                   -
0C291 AD 02 20                              LDA PPU_STATUS
0C294 29 40                                 AND #SPRITE_0_HIT
0C296 D0 F9                             BNE -
0C298                               
0C298                                   ;; Now wait for Sprite 0
0C298                                   -
0C298 AD 02 20                              LDA PPU_STATUS
0C29B 29 40                                 AND #SPRITE_0_HIT
0C29D F0 F9                             BEQ -
0C29F                                       
0C29F                                   ;; Setup tile row loop
0C29F A0 16                             LDY #22
0C2A1                                   -tileLoop:
0C2A1                                   
0C2A1                                       ;; Disable drawing
0C2A1 A5 12                                 LDA soft_ppu_mask
0C2A3 29 F7                                 AND #%11110111
0C2A5 8D 01 20                              STA PPU_MASK
0C2A8                                       
0C2A8                                       ;; Set up scanline loop
0C2A8 A2 08                                 LDX #$08
0C2AA                                       -scanlineLoop:
0C2AA E4 08                                     CPX temp+8
0C2AC D0 0A                                     BNE +wasteTime
0C2AE                                           
0C2AE                                           ;; Restore drawing
0C2AE A5 12                                     LDA soft_ppu_mask
0C2B0 09 08                                     ORA #%00001000
0C2B2 8D 01 20                                  STA PPU_MASK
0C2B5 4C BE C2                                  JMP +wasteMoreTime
0C2B8                           
0C2B8                                           ;; Waste 12 frames
0C2B8                                           +wasteTime:
0C2B8 E6 09                                     INC temp+9   ;+5
0C2BA C6 09                                     DEC temp+9   ;+5
0C2BC 49 00                                     EOR #$00     ;+2
0C2BE                                           
0C2BE                                           ;; Waste about 100 frames
0C2BE                                           +wasteMoreTime:
0C2BE                                           
0C2BE 86 01                                     STX temp+1     ;  3 down, 97 to go
0C2C0 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C2C2                                           -wasteLoop:
0C2C2 EA                                            NOP
0C2C3 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C2C5 CA                                            DEX        ;  5+5L down,  95-5L to go
0C2C6 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C2C8                           
0C2C8 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C2CA CA                                        DEX            ;  9+8L down, 91-8L to go
0C2CB D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C2CD                           
0C2CD 88                                    DEY
0C2CE D0 D1                             BNE -tileLoop
0C2D0                           
0C2D0 A4 08                             LDY temp+8
0C2D2                                   
0C2D2 E6 07                             INC temp+7
0C2D4 A5 07                             LDA temp+7
0C2D6 C9 02                             CMP #$02
0C2D8 D0 B2                             BNE -fadeLoop
0C2DA                           
0C2DA A9 00                             LDA #$00
0C2DC 85 07                             STA temp+7
0C2DE 88                                DEY
0C2DF D0 AB                         BNE -fadeLoop
0C2E1                               
0C2E1                               ;; Load the next level if ball not dead
0C2E1 A5 36                         LDA ball_flags
0C2E3 29 01                         AND #BALL_IS_DEAD
0C2E5 D0 05                         BNE +
0C2E7 E6 3F                             INC current_level
0C2E9 4C F2 C2                          JMP +loadLevel
0C2EC                               +
0C2EC                               
0C2EC                               ;; Revive ball
0C2EC A5 36                         LDA ball_flags
0C2EE 29 FE                         AND #REVIVE_BALL
0C2F0 85 36                         STA ball_flags
0C2F2                           
0C2F2                           +loadLevel:
0C2F2 A5 3F                         LDA current_level
0C2F4 C9 19                         CMP #25
0C2F6 D0 04                         BNE +
0C2F8 A9 00                             LDA #$00
0C2FA 85 3F                             STA current_level
0C2FC                               +
0C2FC                               
0C2FC A9 81                         LDA #LOAD_GAME_SCREEN
0C2FE 85 37                         STA screen_mode
0C300                           
0C300                           
0C300                           +end:
0C300                           
0C300                               ;; Check if ball is dead
0C300 A5 36                         LDA ball_flags
0C302 29 01                         AND #BALL_IS_DEAD
0C304 F0 03                         BEQ +
0C306 4C 28 C3                          JMP +ballIsDead
0C309                               +
0C309                               
0C309                               ;; Add to sprite buffer
0C309 A6 3B                         LDX sprite_ram_pointer
0C30B A5 19                         LDA ball_ypos_hi
0C30D 9D 00 02                      STA ADDR_SPRITERAM,x
0C310 E8                            INX
0C311 A9 01                         LDA #BALL_TILE_CHR
0C313 9D 00 02                      STA ADDR_SPRITERAM,x
0C316 E8                            INX
0C317 A9 00                         LDA #BALL_ATTR
0C319 9D 00 02                      STA ADDR_SPRITERAM,x
0C31C E8                            INX
0C31D A5 17                         LDA ball_xpos_hi
0C31F 9D 00 02                      STA ADDR_SPRITERAM,x
0C322 E8                            INX
0C323 86 3B                         STX sprite_ram_pointer
0C325 4C 85 C3                      JMP +doneScreenLoad
0C328                           
0C328                           
0C328                           +ballIsDead:
0C328                               ;; Check if kill counter has reset
0C328 A5 3E                         LDA kill_counter
0C32A F0 03                         BEQ +
0C32C 4C 85 C3                          JMP +doneScreenLoad
0C32F                               +
0C32F                               
0C32F                               ;; Take a live
0C32F C6 1F                         DEC ball_lives
0C331 D0 03                         BNE +
0C333                                   ;; If no lives left, reset game
0C333 4C 00 C0                          JMP RESET
0C336                                   ;; Replace reset with game over sequence initiation [@TODO]
0C336                               +
0C336                               
0C336                               ;; Reload current level
0C336 4C 7E C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C339                           
0C339                           
0C339                           +checkNextScreen:
0C339                           
0C339                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C339                               ;; Upon pressing START, the selected level will start
0C339                               .include "game/include/main/select_level.asm"
0C339 A5 10                         LDA buttons_pressed
0C33B 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C33D F0 3C                         BEQ +checkStartPress
0C33F                           
0C33F                                   ;; Select next level (1, 5, 9, 13, 17)
0C33F A5 3F                             LDA current_level
0C341 18                                CLC
0C342 69 04                             ADC #$04
0C344 C9 14                             CMP #$14
0C346 D0 02                             BNE +
0C348 A9 00                                 LDA #$00
0C34A                                   +
0C34A 85 3F                             STA current_level
0C34C                                   
0C34C                                   ;; Convert level number to two-byte value
0C34C A9 00                             LDA #$00
0C34E 85 03                             STA temp+3
0C350 A5 3F                             LDA current_level
0C352 18                                CLC
0C353 69 01                             ADC #$01
0C355                           
0C355                               -
0C355 C9 0A                             CMP #$0A
0C357 90 08                             BCC +
0C359 E6 03                                 INC temp+3
0C35B 38                                    SEC
0C35C E9 0A                                 SBC #$0A
0C35E 4C 55 C3                              JMP -
0C361                                   +
0C361                           
0C361                                   ;; Add level number to PPU buffer
0C361 18                                CLC
0C362 69 01                             ADC #$01
0C364 85 02                             STA temp+2
0C366 A9 20                             LDA #$20
0C368 85 00                             STA temp
0C36A A9 D0                             LDA #$D0
0C36C 85 01                             STA temp+1
0C36E 20 A1 CC                          JSR sub_WriteByteToPPUBuffer
0C371                                   
0C371 C6 01                             DEC temp+1
0C373 A4 03                             LDY temp+3
0C375 C8                                INY
0C376 84 02                             STY temp+2
0C378 20 A1 CC                          JSR sub_WriteByteToPPUBuffer
0C37B                                   
0C37B                               +checkStartPress:
0C37B                           
0C37B                           
0C37B                           
0C37B                               ;; If START button is pressed
0C37B A5 10                         LDA buttons_pressed
0C37D 29 10                         AND #BUTTON_START
0C37F F0 04                         BEQ +
0C381                                   ;; Start the level
0C381 A9 81                             LDA #LOAD_GAME_SCREEN
0C383 85 37                             STA screen_mode
0C385                               +
0C385                           
0C385                           
0C385                           
0C385                           +doneScreenLoad:
0C385                           
0C385                               ;; Load animations (if any)
0C385                               .include "game/include/main/load_animations.asm"
0C385                               ;; Set up loop
0C385 A2 00                         LDX #$00
0C387                               -loop_load_animation:
0C387                                   ;; Check if current animation is active. If not, goto next
0C387 BD 74 03                          LDA explosion_active,x
0C38A D0 03                             BNE +
0C38C 4C 26 C4                              JMP +next
0C38F                                   +
0C38F                           
0C38F                                   ;; Check the explosion framecounter
0C38F BD 60 03                          LDA explosion_framecounter,x
0C392 D0 26                             BNE +
0C394                                       ;; Framecounter is 0
0C394                                       ;; Reset to animation speed
0C394 A9 04                                 LDA #ANIMATION_SPEED
0C396 9D 60 03                              STA explosion_framecounter,x
0C399                           
0C399                                       ;; Set next animation frame, and check if we're done yet
0C399 FE 64 03                              INC explosion_currentframe,x
0C39C BD 64 03                              LDA explosion_currentframe,x
0C39F C9 0A                                 CMP #ANIM_SLIDES
0C3A1 D0 17                                 BNE +
0C3A3                           
0C3A3                                       ;; If we're done, inactivate current explosion, clean
0C3A3                                       ;; up sprite RAM and go to the next one
0C3A3 A9 00                                 LDA #$00
0C3A5 9D 74 03                              STA explosion_active,x
0C3A8                                       
0C3A8 A9 09                                 LDA #SLIDE_SIZE
0C3AA 0A                                    ASL
0C3AB 0A                                    ASL
0C3AC A8                                    TAY
0C3AD A9 EF                                 LDA #$EF
0C3AF                                       -
0C3AF 88                                        DEY
0C3B0 99 00 02                                  STA ADDR_SPRITERAM,y
0C3B3 C0 00                                     CPY #00
0C3B5 D0 F8                                 BNE -
0C3B7                                       
0C3B7 4C 26 C4                              JMP +next
0C3BA                                   +
0C3BA                           
0C3BA                                   ;; Load (x,y) position in temp variables
0C3BA BD 6C 03                          LDA explosion_x,x
0C3BD 85 01                             STA temp+1
0C3BF 85 03                             STA temp+3
0C3C1 BD 70 03                          LDA explosion_y,x
0C3C4 85 02                             STA temp+2
0C3C6                           
0C3C6                                   ;; Load attribute in temp variable
0C3C6 BD 68 03                          LDA explosion_attributes,x
0C3C9 85 04                             STA temp+4
0C3CB                           
0C3CB                                   ;; Load current frame into Y-register
0C3CB BC 64 03                          LDY explosion_currentframe,x
0C3CE                           
0C3CE                                   ;; Load current frame ROM address from table
0C3CE B9 F5 CD                          LDA explosion_anim_lo,y
0C3D1 85 0C                             STA pointer
0C3D3 B9 EB CD                          LDA explosion_anim_hi,y
0C3D6 85 0D                             STA pointer+1
0C3D8                           
0C3D8                                   ;; Save x-register on stack
0C3D8 8A                                TXA
0C3D9 48                                PHA
0C3DA                           
0C3DA                                   ;; Load sprites into sprite RAM
0C3DA A6 3B                             LDX sprite_ram_pointer
0C3DC A0 00                             LDY #$00
0C3DE                           
0C3DE                                   ;; Prepare (x,y) offset for loop
0C3DE 84 00                             STY temp
0C3E0                           
0C3E0                                   -loop_load_sprite:
0C3E0                                   
0C3E0                                       ;; Do not draw empty sprites
0C3E0 B1 0C                                 LDA (pointer),y
0C3E2 F0 18                                 BEQ +nextSprite
0C3E4                                   
0C3E4                                           ;; Add y-position to sprite ram buffer
0C3E4 A5 02                                     LDA temp+2
0C3E6 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3E9 E8                                        INX
0C3EA                           
0C3EA                                           ;; Get tile number from frame ROM address, and
0C3EA                                           ;; add it to sprite ram buffer
0C3EA B1 0C                                     LDA (pointer),y
0C3EC 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3EF E8                                        INX
0C3F0                           
0C3F0                                           ;; Add attribute data to sprite ram buffer
0C3F0 A5 04                                     LDA temp+4
0C3F2 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3F5 E8                                        INX
0C3F6                           
0C3F6                                           ;; Add x-position to sprite ram buffer
0C3F6 A5 03                                     LDA temp+3
0C3F8 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3FB E8                                        INX
0C3FC                           
0C3FC                                       +nextSprite:
0C3FC                           
0C3FC                                       ;; Check if all sprites are done
0C3FC C8                                    INY
0C3FD C0 09                                 CPY #SLIDE_SIZE
0C3FF F0 21                                 BEQ +done
0C401                           
0C401                                       ;; Update x value
0C401 A5 03                                 LDA temp+3
0C403 18                                    CLC
0C404 69 08                                 ADC #$08
0C406 85 03                                 STA temp+3
0C408                           
0C408                                       ;; Update temp for x,y position
0C408 E6 00                                 INC temp
0C40A A5 00                                 LDA temp
0C40C C9 03                                 CMP #SLIDE_WIDTH
0C40E D0 0F                                 BNE +
0C410                                           ;; Row is done; reset x-position
0C410 A5 01                                     LDA temp+1
0C412 85 03                                     STA temp+3
0C414                           
0C414                                           ;; Update y-position
0C414 A5 02                                     LDA temp+2
0C416 18                                        CLC
0C417 69 08                                     ADC #$08
0C419 85 02                                     STA temp+2
0C41B                           
0C41B                                           ;; Reset row counter
0C41B A9 00                                     LDA #$00
0C41D 85 00                                     STA temp
0C41F                                       +
0C41F                           
0C41F 4C E0 C3                          JMP -loop_load_sprite
0C422                           
0C422                               +done:
0C422 86 3B                             STX sprite_ram_pointer
0C424                           
0C424                                   ;; Retrieve x-register from stack
0C424 68                                PLA
0C425 AA                                TAX
0C426                           
0C426                               +next:
0C426                                   ;; Check if all animations have been updated
0C426 E8                                INX
0C427 E0 04                             CPX #MAX_ANIMATIONS
0C429 F0 03                             BEQ +done
0C42B                           
0C42B 4C 87 C3                      JMP -loop_load_animation
0C42E                           +done:
0C42E                           
0C42E                               ;; Sprite clean-up
0C42E A6 3B                         LDX sprite_ram_pointer
0C430 A9 EF                         LDA #$EF
0C432                               -
0C432 9D 00 02                          STA ADDR_SPRITERAM,x
0C435 E8                                INX
0C436 D0 FA                         BNE -
0C438 4C 57 C0                      JMP MainGameLoop
0C43B                           
0C43B                           ;; Subroutines
0C43B                           .include "include/subroutines.asm"
0C43B                           
0C43B                           ;; RNG
0C43B                           .include "subroutine/GetRandomNumber.asm"
0C43B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C43B                           ;;
0C43B                           ;; subroutine/GetRandomNumber.asm
0C43B                           ;;
0C43B                           ;; Simple and fast random number generator by White Flame.
0C43B                           ;;
0C43B                           ;; Set random_seed to an arbitrary number to randomize between
0C43B                           ;; gaming sessions, for instance using the frame counter upon
0C43B                           ;; pressing START on the intro screen.
0C43B                           ;;
0C43B                           ;;     ;; IF START PRESSED:
0C43B                           ;;     LDA frame_counter
0C43B                           ;;     STA random_seed
0C43B                           ;;
0C43B                           ;; Source:
0C43B                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C43B                           ;;
0C43B                           ;;
0C43B                           
0C43B                           sub_GetRandomNumber:
0C43B                               ;; Force EOR if random_seed is zero
0C43B A5 16                         LDA random_seed
0C43D F0 05                         BEQ +doEor
0C43F                           
0C43F                               ;; Shift left, and EOR if the high bit is set
0C43F 0A                            ASL
0C440 F0 04                         BEQ +noEor
0C442 90 02                         BCC +noEor
0C444                           
0C444                           +doEor:
0C444 49 1D                         EOR #$1D
0C446                           
0C446                           +noEor:
0C446 85 16                         STA random_seed
0C448                           
0C448 60                            RTS
0C449                           
0C449                           
0C449                           ;; Read controller input
0C449                           .include "subroutine/ReadController.asm"
0C449                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C449                           ;;
0C449                           ;; subroutine/ReadController.asm
0C449                           ;;
0C449                           ;; Subroutine that polls the controller and stores the input
0C449                           ;; buttons in a variable. This version only handles controller
0C449                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C449                           ;;
0C449                           ;;
0C449                           
0C449                           sub_ReadController:
0C449                           
0C449                               ;; Set strobe bit
0C449 A9 01                         LDA #$01
0C44B 8D 16 40                      STA JOYPAD_1
0C44E                           
0C44E                               ;; Set up ring counter
0C44E 85 0F                         STA buttons_held
0C450                           
0C450                               ;; Clear strobe bit
0C450 4A                            LSR
0C451 8D 16 40                      STA JOYPAD_1
0C454                           
0C454                               ;; Loop through button presses
0C454                               -
0C454 AD 16 40                          LDA JOYPAD_1
0C457 4A                                LSR
0C458 26 0F                             ROL buttons_held
0C45A                           
0C45A                               ;; Check if ring counter is done
0C45A 90 F8                         BCC -
0C45C                           
0C45C                               ;; Return from subroutine
0C45C 60                            RTS
0C45D                           
0C45D                           
0C45D                           ;; vBlank/NMI wait
0C45D                           .include "subroutine/WaitForNMI.asm"
0C45D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C45D                           ;;
0C45D                           ;; subroutine/WaitForVBlank.asm
0C45D                           ;;
0C45D                           ;; Subroutine that essentially pauses script execution until
0C45D                           ;; vBlank happens.
0C45D                           ;;
0C45D                           ;;
0C45D                           
0C45D                           sub_WaitForNMI:
0C45D A9 01                         LDA #$01
0C45F 85 45                         STA check_nmi
0C461                               -
0C461 A5 45                             LDA check_nmi
0C463 D0 FC                         BNE -
0C465 60                            RTS
0C466                           
0C466                           .include "subroutine/WaitForVBlank.asm"
0C466                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C466                           ;;
0C466                           ;; subroutine/WaitForVBlank.asm
0C466                           ;;
0C466                           ;; Subroutine that essentially pauses script execution until
0C466                           ;; vBlank happens.
0C466                           ;;
0C466                           ;;
0C466                           
0C466                           sub_WaitForVBlank:
0C466 2C 02 20                      BIT $2002
0C469 10 FB                         BPL sub_WaitForVBlank
0C46B 60                            RTS
0C46C                           
0C46C                           
0C46C                           ;; Game specific subroutines
0C46C                           .include "game/include/subroutines.asm"
0C46C                           ;; additional game-specific subroutines go here
0C46C                           
0C46C                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C46C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C46C                           ;;
0C46C                           ;;  sub_AddAccumulatorToScore.asm
0C46C                           ;;
0C46C                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C46C                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C46C                           ;;  actual score.
0C46C                           ;;
0C46C                           ;;
0C46C                           
0C46C                           
0C46C                           sub_AddAccumulatorToScore:
0C46C                           
0C46C                               ;; Clear old add_to_score
0C46C A2 05                         LDX #$05
0C46E A0 00                         LDY #$00
0C470                               -
0C470 94 26                             STY add_to_score,x
0C472 CA                                DEX
0C473 10 FB                         BPL -
0C475                           
0C475                               ;; Set accumulator to add_to_score variables
0C475                               ;; Check and update 100s
0C475                               -checkHundreds:
0C475 C9 64                             CMP #100
0C477 90 08                             BCC +checkTens
0C479 38                                    SEC
0C47A E9 64                                 SBC #100
0C47C E6 29                                 INC add_to_score+3
0C47E 4C 75 C4                              JMP -checkHundreds
0C481                                   +checkTens:
0C481                           
0C481                               ;; Check and update 10s
0C481                               -checkTens:
0C481 C9 0A                             CMP #10
0C483 90 08                             BCC +setOnes
0C485 38                                    SEC
0C486 E9 0A                                 SBC #10
0C488 E6 2A                                 INC add_to_score+4
0C48A 4C 81 C4                              JMP -checkTens
0C48D                                   +setOnes:
0C48D                           
0C48D                               ;; We're left with 1s
0C48D 85 2B                         STA add_to_score+5
0C48F                           
0C48F                               ;; Byte for byte, add add_to_score to ball_score
0C48F A9 00                         LDA #$00
0C491 85 38                         STA ppu_buffer_update
0C493 A4 39                         LDY ppu_buffer_pointer
0C495 A2 05                         LDX #$05
0C497                               -
0C497 B5 26                             LDA add_to_score,x
0C499 18                                CLC
0C49A 75 20                             ADC ball_score,x
0C49C C9 0A                             CMP #10
0C49E 90 05                             BCC +
0C4A0 38                                    SEC
0C4A1 E9 0A                                 SBC #10
0C4A3 F6 1F                                 INC ball_score-1,x
0C4A5                                   +
0C4A5                                   
0C4A5                                   ;; Update new score digit
0C4A5 95 20                             STA ball_score,x
0C4A7                           
0C4A7                                   ;; Update score tile in PPU
0C4A7 A9 20                             LDA #$20
0C4A9 99 00 03                          STA ppu_buffer,y
0C4AC C8                                INY
0C4AD 8A                                TXA
0C4AE 18                                CLC
0C4AF 69 83                             ADC #$83
0C4B1 99 00 03                          STA ppu_buffer,y
0C4B4 C8                                INY
0C4B5 B5 20                             LDA ball_score,x
0C4B7 18                                CLC
0C4B8 69 01                             ADC #$01
0C4BA 99 00 03                          STA ppu_buffer,y
0C4BD C8                                INY
0C4BE                           
0C4BE                                   ;; Check next digit (if any left)
0C4BE CA                                DEX
0C4BF 30 03                             BMI +done
0C4C1 4C 97 C4                      JMP -
0C4C4                           
0C4C4                           +done:
0C4C4                               ;; Update PPU buffer pointer and status
0C4C4 84 39                         STY ppu_buffer_pointer
0C4C6 A9 01                         LDA #$01
0C4C8 85 38                         STA ppu_buffer_update
0C4CA                           
0C4CA                               ;; Done: return 
0C4CA 60                            RTS
0C4CB                           
0C4CB                           .include "game/subroutine/BackgroundNoise.asm"
0C4CB                           
0C4CB                           sub_BackgroundNoise:
0C4CB A9 32                         LDA #$32
0C4CD 8D 0C 40                      STA NOISE_VOLUME
0C4D0 A9 0E                         LDA #$0E
0C4D2 8D 0E 40                      STA NOISE_PERIOD
0C4D5 85 43                         STA current_noise
0C4D7 60                            RTS0C4D8                           .include "game/subroutine/ClearScreen.asm"
0C4D8                           ;; Subroutine to clear the screen
0C4D8                           ;; If it's a game screen, add noise
0C4D8                           
0C4D8                           sub_ClearScreen:
0C4D8                               ;; Check of game screen or not
0C4D8 A5 37                         LDA screen_mode
0C4DA 29 03                         AND #CHECK_SCREEN_MODE
0C4DC C9 01                         CMP #IS_GAME_SCREEN
0C4DE F0 02                         BEQ +
0C4E0 A9 00                             LDA #$00
0C4E2                               +
0C4E2 85 01                         STA temp+1
0C4E4                               
0C4E4                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C4E4 2C 02 20                      BIT PPU_STATUS
0C4E7 A9 20                         LDA #$20
0C4E9 8D 06 20                      STA PPU_ADDR
0C4EC A9 00                         LDA #$00
0C4EE 8D 06 20                      STA PPU_ADDR
0C4F1                               
0C4F1                               ;; Set up tile to draw and loop
0C4F1 85 00                         STA temp
0C4F3 AA                            TAX
0C4F4 A8                            TAY
0C4F5                           
0C4F5                               -     
0C4F5                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C4F5 A5 00                             LDA temp
0C4F7 8D 07 20                          STA PPU_DATA
0C4FA                           
0C4FA                                   ;; Check if we should draw noise next. Noise is drawn if:
0C4FA                                   ;; - Screen mode is game screen
0C4FA                                   ;; - Y between #$06 and #$19 (inclusive)
0C4FA                                   ;; - X between #$02 and #$1D (inclusive)
0C4FA                                   
0C4FA                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C4FA A5 01                             LDA temp+1
0C4FC F0 1C                             BEQ +nextTileInRow
0C4FE                                   
0C4FE                                   ;; If Y < $6, skip the check
0C4FE C0 06                             CPY #$06
0C500 90 18                             BCC +nextTileInRow
0C502                                   
0C502                                   ;; If X < $1, skip the check
0C502 E0 01                             CPX #$01
0C504 90 14                             BCC +nextTileInRow
0C506                                   
0C506                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C506 E0 1D                             CPX #$1D
0C508 D0 04                             BNE +
0C50A A9 00                                 LDA #$00
0C50C 85 00                                 STA temp
0C50E                                   +
0C50E B0 0A                             BCS +nextTileInRow
0C510                                   
0C510                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C510 20 3B C4                          JSR sub_GetRandomNumber
0C513 29 07                             AND #%00000111
0C515 18                                CLC
0C516 69 68                             ADC #$68
0C518 85 00                             STA temp
0C51A                           
0C51A                           +nextTileInRow:
0C51A                                   
0C51A                                   ;; Check if a row has been done. If not, draw the next
0C51A E8                                INX
0C51B E0 20                             CPX #$20
0C51D D0 D6                             BNE -
0C51F                                   
0C51F                                   ;; Go to the next row (if any left)
0C51F A2 00                             LDX #00
0C521 C8                                INY
0C522                                   
0C522                                   ;; If Y is 1A, skip noise tile check until done drawing
0C522 C0 1A                             CPY #$1A
0C524 D0 04                             BNE +
0C526 A9 00                                 LDA #$00
0C528 85 01                                 STA temp+1
0C52A                                   +
0C52A                                   
0C52A C0 1E                             CPY #$1E
0C52C D0 C7                         BNE -
0C52E                           
0C52E                               ;; Clear attribute table
0C52E A9 23                         LDA #$23
0C530 8D 06 20                      STA PPU_ADDR
0C533 A9 C0                         LDA #$C0
0C535 8D 06 20                      STA PPU_ADDR
0C538 A9 00                         LDA #$00
0C53A A2 40                         LDX #$40
0C53C                               -
0C53C 8D 07 20                          STA PPU_DATA
0C53F CA                                DEX
0C540 D0 FA                         BNE -
0C542                               
0C542 60                            RTS0C543                           .include "game/subroutine/ColorizeBall.asm"
0C543                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C543                           ;;
0C543                           ;;  Subroutine: ColorizeBall
0C543                           ;;
0C543                           ;;  Applies the color set through ball_flags to the ball sprite.
0C543                           ;;
0C543                           ;;
0C543                           
0C543                           
0C543                           sub_ColorizeBall:
0C543                           
0C543                               ;; Get color from ball_flags
0C543 4A                            LSR
0C544 4A                            LSR
0C545 4A                            LSR
0C546 4A                            LSR
0C547 4A                            LSR
0C548 AA                            TAX
0C549                           
0C549                               ;; Add new light color of ball to PPU palette
0C549 A9 3F                         LDA #$3F
0C54B 85 00                         STA temp
0C54D A9 11                         LDA #$11
0C54F 85 01                         STA temp+1
0C551 BD 05 CE                      LDA tbl_BallColorLight,x
0C554 85 02                         STA temp+2
0C556 20 A1 CC                      JSR sub_WriteByteToPPUBuffer
0C559                               
0C559                               ;; Add new dark color of ball to PPU palette
0C559 E6 01                         INC temp+1
0C55B BD FF CD                      LDA tbl_BallColorDark,x
0C55E 85 02                         STA temp+2
0C560 20 A1 CC                      JSR sub_WriteByteToPPUBuffer
0C563                               
0C563 60                            RTS
0C564                           
0C564                           .include "game/subroutine/ColorsMatch.asm"
0C564                           
0C564                           ;; Subroutine to check if ball color matches colliding tile color
0C564                           
0C564                           sub_ColorsMatch:
0C564                               ;; Save tile color in temp variable
0C564 A5 40                         LDA colliding_tile
0C566 29 0E                         AND #%00001110
0C568 85 00                         STA temp
0C56A                           
0C56A                               ;; Get ball color
0C56A A5 36                         LDA ball_flags
0C56C 29 E0                         AND #%11100000
0C56E 4A                            LSR
0C56F 4A                            LSR
0C570 4A                            LSR
0C571 4A                            LSR
0C572                           
0C572                               ;; Compare with tile color
0C572 C5 00                         CMP temp
0C574 60                            RTS
0C575                           
0C575                           .include "game/subroutine/ConvertXYToTileType.asm"
0C575                           
0C575                           ;; Subroutine to convert the ball's position to a tile type
0C575                           ;; - Expects temp to be y-position of ball within game area
0C575                           ;; - Expects temp+1 to be x-position of ball within game area
0C575                           ;; - Puts result in accumulator and zp variable
0C575                           ;; - Corrupts X-register
0C575                           
0C575                           sub_ConvertXYToTileType:
0C575 A5 01                         LDA temp+1
0C577 4A                            LSR
0C578 4A                            LSR
0C579 4A                            LSR
0C57A 4A                            LSR
0C57B 85 09                         STA temp+9
0C57D A5 00                         LDA temp
0C57F 29 F0                         AND #%11110000
0C581 18                            CLC
0C582 65 09                         ADC temp+9
0C584 85 09                         STA temp+9
0C586 AA                            TAX
0C587 BD 00 04                      LDA tile_type, x
0C58A 85 40                         STA colliding_tile
0C58C 60                            RTS
0C58D                           
0C58D                           .include "game/subroutine/DisableEnableRendering.asm"
0C58D                           sub_DisableRendering:
0C58D                               ;; Force NMI skip, disable rendering
0C58D A9 01                     	LDA #$01
0C58F 85 14                     	STA force_skip_nmi
0C591 20 66 C4                      JSR sub_WaitForVBlank
0C594 A5 12                         LDA soft_ppu_mask
0C596 29 E7                         AND #%11100111
0C598 8D 01 20                      STA PPU_MASK
0C59B 85 12                         STA soft_ppu_mask
0C59D 20 66 C4                      JSR sub_WaitForVBlank
0C5A0 60                            RTS
0C5A1                           
0C5A1                           sub_EnableRendering:
0C5A1                               ;; Enable rendering
0C5A1 A9 00                     	LDA #$00
0C5A3 8D 05 20                  	STA PPU_SCROLL
0C5A6 8D 05 20                  	STA PPU_SCROLL
0C5A9 20 66 C4                      JSR sub_WaitForVBlank
0C5AC 85 14                     	STA force_skip_nmi
0C5AE A5 12                         LDA soft_ppu_mask
0C5B0 09 18                         ORA #%00011000
0C5B2 85 12                         STA soft_ppu_mask
0C5B4 8D 01 20                      STA PPU_MASK
0C5B7 20 66 C4                      JSR sub_WaitForVBlank
0C5BA 60                            RTS
0C5BB                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C5BB                           sub_drawIntroScreenLogoTile:
0C5BB B9 E7 CC                      LDA tbl_IntroScreenLogoChr,y
0C5BE C9 60                         CMP #$60
0C5C0 D0 08                         BNE +
0C5C2 20 3B C4                          JSR sub_GetRandomNumber
0C5C5 29 07                             AND #$07
0C5C7 18                                CLC
0C5C8 69 60                             ADC #$60
0C5CA                               +
0C5CA 8D 07 20                      STA PPU_DATA
0C5CD 60                            RTS
0C5CE                           .include "game/subroutine/EvaluateTileType.asm"
0C5CE                           
0C5CE                           ;; Subroutine to evaluate the colliding tile type and take its
0C5CE                           ;; corresponding action (move block, kill player, ...)
0C5CE                           ;; - Expects X-register to be the tile_type offset
0C5CE                           ;; - Uses zp variable colliding_tile
0C5CE                           
0C5CE                           sub_EvaluateTileType:
0C5CE                           
0C5CE                               ;; Check if collided tile is a color block
0C5CE A5 40                         LDA colliding_tile
0C5D0 29 80                         AND #IS_COLOR_BLOCK
0C5D2 D0 03                         BNE +
0C5D4 4C EF C7                          JMP +checkIfPaintBlock
0C5D7                               +
0C5D7                               
0C5D7                               ;; It's a color block. Check if the colors match
0C5D7 20 64 C5                      JSR sub_ColorsMatch
0C5DA F0 01                         BEQ +
0C5DC                                   ;; Colors don't match - return
0C5DC 60                                RTS
0C5DD                               +
0C5DD                           
0C5DD                               ;; Colors match. Destroy color block
0C5DD A4 39                         LDY ppu_buffer_pointer
0C5DF                               
0C5DF                               ;; (this will be a subroutine)
0C5DF                               ;; Get PPU address from YX index
0C5DF                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C5DF                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C5DF 8A                            TXA
0C5E0 29 C0                         AND #%11000000
0C5E2 18                            CLC
0C5E3 2A                            ROL
0C5E4 2A                            ROL
0C5E5 2A                            ROL
0C5E6 69 20                         ADC #$20
0C5E8 85 00                         STA temp
0C5EA 8A                            TXA
0C5EB 29 0F                         AND #%00001111
0C5ED 0A                            ASL
0C5EE 85 01                         STA temp+1
0C5F0 8A                            TXA
0C5F1 29 30                         AND #%00110000
0C5F3 0A                            ASL
0C5F4 0A                            ASL
0C5F5 18                            CLC
0C5F6 65 01                         ADC temp+1
0C5F8 85 01                         STA temp+1
0C5FA A5 00                         LDA temp
0C5FC 69 00                         ADC #$00
0C5FE 85 00                         STA temp
0C600 A5 01                         LDA temp+1
0C602 18                            CLC
0C603 69 C2                         ADC #$C2
0C605 85 01                         STA temp+1
0C607 A5 00                         LDA temp
0C609 69 00                         ADC #$00
0C60B 85 00                         STA temp
0C60D                           
0C60D                               
0C60D                               ;; (this will also be a subroutine eventually)
0C60D                               ;; TILE 1: if metatile on top left is solid, draw
0C60D                               ;; null tile, else draw random noise tile
0C60D A9 00                         LDA #$00
0C60F 85 38                         STA ppu_buffer_update
0C611                               
0C611 A5 00                         LDA temp
0C613 99 00 03                      STA ppu_buffer,y
0C616 C8                            INY
0C617 A5 01                         LDA temp+1
0C619 99 00 03                      STA ppu_buffer,y
0C61C C8                            INY
0C61D                               
0C61D 8A                            TXA
0C61E 29 0F                         AND #%00001111
0C620 F0 11                         BEQ +drawRandomTile
0C622                           
0C622 8A                            TXA
0C623 29 F0                         AND #%11110000
0C625 F0 0C                         BEQ +drawRandomTile
0C627                           
0C627 BD EF 03                      LDA tile_type-17,x
0C62A 29 01                         AND #%00000001
0C62C F0 05                         BEQ +drawRandomTile  
0C62E                           
0C62E                               ;; Draw a null tile
0C62E A9 00                         LDA #$00
0C630 4C 3B C6                      JMP +addToPPUBuffer
0C633                               
0C633                           +drawRandomTile:
0C633                               ;; Draw a random tile
0C633 20 3B C4                      JSR sub_GetRandomNumber
0C636 29 07                         AND #%00000111
0C638 18                            CLC
0C639 69 68                         ADC #$68
0C63B                               
0C63B                               ;; Add tile to ppu buffer
0C63B                           +addToPPUBuffer:
0C63B 99 00 03                      STA ppu_buffer,y
0C63E C8                            INY
0C63F                           
0C63F                               ;; TILE 2: If metatile above is solid, draw null,
0C63F                               ;; else draw random noise.
0C63F E6 01                         INC temp+1
0C641 A5 00                         LDA temp
0C643 99 00 03                      STA ppu_buffer,y
0C646 C8                            INY
0C647 A5 01                         LDA temp+1
0C649 99 00 03                      STA ppu_buffer,y
0C64C C8                            INY
0C64D                               
0C64D 8A                            TXA
0C64E 29 F0                         AND #%11110000
0C650 F0 0C                         BEQ +drawRandomTile
0C652                               
0C652 BD F0 03                      LDA tile_type-16,x
0C655 29 01                         AND #%00000001
0C657 F0 05                         BEQ +drawRandomTile
0C659                               
0C659 A9 00                         LDA #%00
0C65B 4C 66 C6                      JMP +addToPPUBuffer
0C65E                           
0C65E                           +drawRandomTile:
0C65E 20 3B C4                      JSR sub_GetRandomNumber
0C661 29 07                         AND #%00000111
0C663 18                            CLC
0C664 69 68                         ADC #$68
0C666                           
0C666                           +addToPPUBuffer:
0C666 99 00 03                      STA ppu_buffer,y
0C669 C8                            INY
0C66A                               
0C66A                               ;; TILE 3 - If metatile left is solid, draw null,
0C66A                               ;; else draw random noise.
0C66A A5 01                         LDA temp+1
0C66C 18                            CLC
0C66D 69 1F                         ADC #$1F
0C66F 85 01                         STA temp+1
0C671 A5 00                         LDA temp
0C673 69 00                         ADC #$00
0C675 85 00                         STA temp
0C677 99 00 03                      STA ppu_buffer,y
0C67A C8                            INY
0C67B A5 01                         LDA temp+1
0C67D 99 00 03                      STA ppu_buffer,y
0C680 C8                            INY
0C681                               
0C681 8A                            TXA
0C682 29 0F                         AND #%00001111
0C684 F0 0C                         BEQ +drawRandomTile
0C686                               
0C686 BD FF 03                      LDA tile_type-1,x
0C689 29 01                         AND #%00000001
0C68B F0 05                         BEQ +drawRandomTile
0C68D                               
0C68D A9 00                         LDA #%00
0C68F 4C 9A C6                      JMP +addToPPUBuffer
0C692                           
0C692                           +drawRandomTile:
0C692 20 3B C4                      JSR sub_GetRandomNumber
0C695 29 07                         AND #%00000111
0C697 18                            CLC
0C698 69 68                         ADC #$68
0C69A                               
0C69A                           +addToPPUBuffer:
0C69A 99 00 03                      STA ppu_buffer,y
0C69D C8                            INY
0C69E                               
0C69E                               ;; TILE 4 - Always random noise
0C69E E6 01                         INC temp+1
0C6A0 A5 00                         LDA temp
0C6A2 99 00 03                      STA ppu_buffer,y
0C6A5 C8                            INY
0C6A6 A5 01                         LDA temp+1
0C6A8 99 00 03                      STA ppu_buffer,y
0C6AB C8                            INY
0C6AC 20 3B C4                      JSR sub_GetRandomNumber
0C6AF 29 07                         AND #%00000111
0C6B1 18                            CLC
0C6B2 69 68                         ADC #$68
0C6B4 99 00 03                      STA ppu_buffer,y
0C6B7 C8                            INY
0C6B8                           
0C6B8                               ;; TILE 5 - If tile on the right is solid, skip,
0C6B8                               ;; else draw random noise tile
0C6B8 E6 01                         INC temp+1
0C6BA                               
0C6BA 8A                            TXA
0C6BB 29 0F                         AND #%00001111
0C6BD C9 0D                         CMP #$0D
0C6BF F0 1F                         BEQ +skipTile
0C6C1                               
0C6C1 BD 01 04                      LDA tile_type+1,x
0C6C4 29 01                         AND #%00000001
0C6C6 D0 18                         BNE +skipTile
0C6C8 A5 00                             LDA temp
0C6CA 99 00 03                          STA ppu_buffer,y
0C6CD C8                                INY
0C6CE A5 01                             LDA temp+1
0C6D0 99 00 03                          STA ppu_buffer,y
0C6D3 C8                                INY
0C6D4 20 3B C4                          JSR sub_GetRandomNumber
0C6D7 29 07                             AND #%00000111
0C6D9 18                                CLC
0C6DA 69 68                             ADC #$68
0C6DC 99 00 03                          STA ppu_buffer,y
0C6DF C8                                INY    
0C6E0                               +skipTile:
0C6E0                           
0C6E0                               ;; TILE 6 - If tile on bottom is solid, skip,
0C6E0                               ;; else draw random noise
0C6E0 A5 01                         LDA temp+1
0C6E2 18                            CLC
0C6E3 69 1F                         ADC #$1F
0C6E5 85 01                         STA temp+1
0C6E7 A5 00                         LDA temp
0C6E9 69 00                         ADC #$00
0C6EB 85 00                         STA temp
0C6ED                           
0C6ED 8A                            TXA
0C6EE 29 F0                         AND #%11110000
0C6F0 C9 90                         CMP #$90
0C6F2 F0 1F                         BEQ +skipTile
0C6F4                           
0C6F4 BD 10 04                      LDA tile_type+16,x
0C6F7 29 01                         AND #%00000001
0C6F9 D0 18                         BNE +skipTile
0C6FB A5 00                             LDA temp
0C6FD 99 00 03                          STA ppu_buffer,y
0C700 C8                                INY
0C701 A5 01                             LDA temp+1
0C703 99 00 03                          STA ppu_buffer,y
0C706 C8                                INY
0C707 20 3B C4                          JSR sub_GetRandomNumber
0C70A 29 07                             AND #%00000111
0C70C 18                                CLC
0C70D 69 68                             ADC #$68
0C70F 99 00 03                          STA ppu_buffer,y
0C712 C8                                INY    
0C713                               +skipTile:
0C713                               
0C713                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C713                               ;; else draw random noise
0C713 E6 01                         INC temp+1
0C715                           
0C715 8A                            TXA
0C716 29 F0                         AND #%11110000
0C718 C9 90                         CMP #$90
0C71A F0 26                         BEQ +skipTile
0C71C                               
0C71C 8A                            TXA
0C71D 29 0F                         AND #%00001111
0C71F C9 0D                         CMP #$0D
0C721 F0 1F                         BEQ +skipTile
0C723                               
0C723 BD 11 04                      LDA tile_type+17,x
0C726 29 01                         AND #%00000001
0C728 D0 18                         BNE +skipTile
0C72A A5 00                             LDA temp
0C72C 99 00 03                          STA ppu_buffer,y
0C72F C8                                INY
0C730 A5 01                             LDA temp+1
0C732 99 00 03                          STA ppu_buffer,y
0C735 C8                                INY
0C736 20 3B C4                          JSR sub_GetRandomNumber
0C739 29 07                             AND #%00000111
0C73B 18                                CLC
0C73C 69 68                             ADC #$68
0C73E 99 00 03                          STA ppu_buffer,y
0C741 C8                                INY    
0C742                               +skipTile:   
0C742                           
0C742                           
0C742                               ;; - Update attribute table accordingly through ppu buffer
0C742 A9 23                         LDA #$23
0C744 99 00 03                      STA ppu_buffer,y
0C747 C8                            INY
0C748                               
0C748 8A                            TXA
0C749 29 F0                         AND #%11110000
0C74B 4A                            LSR
0C74C 4A                            LSR
0C74D 4A                            LSR
0C74E 4A                            LSR
0C74F 18                            CLC
0C750 69 01                         ADC #1
0C752 4A                            LSR
0C753 0A                            ASL
0C754 0A                            ASL
0C755 0A                            ASL
0C756 18                            CLC
0C757 69 C8                         ADC #$C8
0C759 85 00                         STA temp
0C75B 8A                            TXA
0C75C 29 0F                         AND #%00001111
0C75E 18                            CLC
0C75F 69 01                         ADC #$01
0C761 4A                            LSR
0C762 18                            CLC
0C763 65 00                         ADC temp
0C765 85 00                         STA temp
0C767 99 00 03                      STA ppu_buffer,y
0C76A C8                            INY
0C76B                                  
0C76B 8A                            TXA
0C76C 29 10                         AND #%00010000
0C76E F0 05                         BEQ +
0C770 A9 F0                             LDA #%11110000
0C772 4C 77 C7                          JMP ++
0C775                               +
0C775 A9 0F                         LDA #%00001111
0C777                               ++
0C777 85 02                         STA temp+2
0C779                               
0C779 8A                            TXA
0C77A 48                            PHA
0C77B 29 01                         AND #%00000001
0C77D F0 07                         BEQ +
0C77F A5 02                             LDA temp+2
0C781 09 CC                             ORA #%11001100
0C783 4C 8A C7                          JMP ++
0C786                               +
0C786 A5 02                         LDA temp+2
0C788 09 33                         ORA #%00110011
0C78A                               ++
0C78A 85 02                         STA temp+2
0C78C                               
0C78C A5 00                         LDA temp
0C78E 38                            SEC
0C78F E9 C0                         SBC #$C0
0C791 AA                            TAX
0C792 BD A0 04                      LDA tile_attributes,x
0C795 25 02                         AND temp+2
0C797 9D A0 04                      STA tile_attributes,x
0C79A 99 00 03                      STA ppu_buffer,y
0C79D C8                            INY
0C79E 68                            PLA
0C79F AA                            TAX
0C7A0                           
0C7A0                               ;; Tell PPU to update tiles and attributes next frame
0C7A0 84 39                         STY ppu_buffer_pointer
0C7A2 A9 01                         LDA #$01
0C7A4 85 38                         STA ppu_buffer_update
0C7A6                            
0C7A6                               
0C7A6                               ;; - Load destruction animation on tile
0C7A6                               ;; Get most recent slot for explosion    
0C7A6 8A                            TXA
0C7A7 85 02                         STA temp+2
0C7A9 A6 3A                         LDX explosion_pointer
0C7AB                           
0C7AB                               ;; If 0, use max pointer value
0C7AB D0 02                         BNE +
0C7AD A2 04                             LDX #MAX_ANIMATIONS
0C7AF                               +
0C7AF                           
0C7AF                               ;; Decrease pointer by one
0C7AF CA                            DEX
0C7B0 86 3A                         STX explosion_pointer
0C7B2                           
0C7B2                               ;; Load explosion data into RAM
0C7B2 A9 00                         LDA #$00
0C7B4 9D 64 03                      STA explosion_currentframe,x
0C7B7                           
0C7B7 A9 04                         LDA #ANIMATION_SPEED
0C7B9 9D 60 03                      STA explosion_framecounter,x
0C7BC                           
0C7BC A5 02                         LDA temp+2
0C7BE 29 0F                         AND #%00001111
0C7C0 A8                            TAY
0C7C1 B9 54 D5                      LDA tbl_Times16,y
0C7C4 18                            CLC
0C7C5 69 0E                         ADC #$0E
0C7C7 9D 6C 03                      STA explosion_x,x
0C7CA                           
0C7CA A5 02                         LDA temp+2
0C7CC 29 F0                         AND #%11110000
0C7CE 18                            CLC
0C7CF 69 29                         ADC #$29
0C7D1 9D 70 03                      STA explosion_y,x
0C7D4                           
0C7D4 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C7D6 9D 68 03                      STA explosion_attributes,x
0C7D9 A9 01                         LDA #$01
0C7DB 9D 74 03                      STA explosion_active,x
0C7DE                           
0C7DE A5 02                         LDA temp+2
0C7E0 AA                            TAX
0C7E1                               
0C7E1                               
0C7E1                               ;; - Write #$00 in tile type ram (makes not-solid)
0C7E1 A9 00                         LDA #$00
0C7E3 9D 00 04                      STA tile_type, x
0C7E6                           
0C7E6                           
0C7E6                               ;; Add (80 + level number) to score
0C7E6 A5 3F                         LDA current_level
0C7E8 18                            CLC
0C7E9 69 51                         ADC #81
0C7EB 20 6C C4                      JSR sub_AddAccumulatorToScore
0C7EE                           
0C7EE                           
0C7EE                               ;; - If there are no color blocks left:
0C7EE                               ;;   - Freeze ball
0C7EE                               ;;   - Initiate level-win state
0C7EE                               ;; [@TODO]
0C7EE                               
0C7EE 60                            RTS
0C7EF                           
0C7EF                           +checkIfPaintBlock:
0C7EF                           
0C7EF                           
0C7EF                               ;; Check if collided tile is a paint block
0C7EF A5 40                         LDA colliding_tile
0C7F1 29 20                         AND #IS_PAINT_BLOCK
0C7F3 F0 1A                         BEQ +checkIfDeathBlock
0C7F5                                   ;; It's a paint block. Update ball color
0C7F5                                   ;; Save x-register
0C7F5 8A                                TXA
0C7F6 48                                PHA
0C7F7                           
0C7F7                                   ;; Get tile color
0C7F7 A5 40                             LDA colliding_tile
0C7F9 29 0E                             AND #%00001110
0C7FB 0A                                ASL
0C7FC 0A                                ASL
0C7FD 0A                                ASL
0C7FE 0A                                ASL
0C7FF 85 00                             STA temp
0C801                           
0C801                                   ;; Apply tile color to ball
0C801 A5 36                             LDA ball_flags
0C803 29 1F                             AND #%00011111
0C805 05 00                             ORA temp
0C807 85 36                             STA ball_flags
0C809 20 43 C5                          JSR sub_ColorizeBall
0C80C                           
0C80C                                   ;; Restore x-register
0C80C 68                                PLA
0C80D AA                                TAX
0C80E                           
0C80E                                   ;; Return
0C80E 60                                RTS
0C80F                               +checkIfDeathBlock:
0C80F                           
0C80F                               ;; Check if collided tile is a death block
0C80F A5 40                         LDA colliding_tile
0C811 29 10                         AND #IS_DEATH_BLOCK
0C813 F0 38                         BEQ +checkIfMoveBlock
0C815                           
0C815                                   ;; It is a death block
0C815                                   ;; Freeze and kill player
0C815 A5 36                             LDA ball_flags
0C817 09 05                             ORA #%00000101
0C819 85 36                             STA ball_flags
0C81B                                   
0C81B                                   ;; Get free explosion slot
0C81B A6 3A                             LDX explosion_pointer
0C81D D0 02                             BNE +
0C81F A2 04                                 LDX #MAX_ANIMATIONS
0C821                                   +
0C821 CA                                DEX
0C822 86 3A                             STX explosion_pointer
0C824                           
0C824                                   ;; Load explosion data into RAM
0C824 A9 00                             LDA #$00
0C826 9D 64 03                          STA explosion_currentframe,x
0C829                           
0C829 A9 04                             LDA #ANIMATION_SPEED
0C82B 9D 60 03                          STA explosion_framecounter,x
0C82E                           
0C82E A5 17                             LDA ball_xpos_hi
0C830 38                                SEC
0C831 E9 08                             SBC #$08
0C833 9D 6C 03                          STA explosion_x,x
0C836                           
0C836 A5 19                             LDA ball_ypos_hi
0C838 38                                SEC
0C839 E9 06                             SBC #$06
0C83B 9D 70 03                          STA explosion_y,x
0C83E                           
0C83E A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C840 9D 68 03                          STA explosion_attributes,x
0C843                           
0C843 A9 01                             LDA #$01
0C845 9D 74 03                          STA explosion_active,x
0C848                           
0C848                                   ;; Set kill counter
0C848 A9 60                             LDA #$60
0C84A 85 3E                             STA kill_counter
0C84C                           
0C84C                                   ;; Return
0C84C 60                                RTS
0C84D                           
0C84D                           
0C84D                           +checkIfMoveBlock:
0C84D                           
0C84D                               ;; Check if collided tile is a move block
0C84D A5 40                         LDA colliding_tile
0C84F 29 40                         AND #IS_MOVE_BLOCK
0C851 F0 07                         BEQ +done
0C853                                   ;; It is a move block. Check if colors match
0C853 20 64 C5                          JSR sub_ColorsMatch
0C856 F0 01                             BEQ +
0C858                                       ;; Colors don't match - return
0C858 60                                    RTS
0C859                                   +
0C859                           
0C859                                   ;; Colors match.
0C859                                   ;; - Check if next tile is a solid
0C859                                   ;; - If not, move the tile:
0C859                                   ;;   - Add the tiles that need updating to ppu buffer
0C859                                   ;;   - Add move tile sprite over the original tile
0C859                                   ;;   - Initiate moving the sprite that way for 16px
0C859                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C859                                   ;;   - Update attribute table accordingly through ppu buffer
0C859                                   ;; - After moving the sprite, in a different routine:
0C859                                   ;;   - Add move tile data on the new tile location
0C859                                   ;;   - Write the original tile type data on new position in ram
0C859                                   ;;   - Destroy sprite
0C859                                   ;;   - Update attribute table accordingly through ppu buffer
0C859                                   ;; [@TODO]
0C859 60                                RTS
0C85A                               +done:
0C85A                           
0C85A                               ;; Return
0C85A 60                            RTS
0C85B                           
0C85B                           .include "game/subroutine/InitiateNudge.asm"
0C85B                           
0C85B                           sub_InitiateNudge:
0C85B 85 36                         STA ball_flags
0C85D A9 05                         LDA #NUDGE_FRAMES
0C85F 85 3C                         STA nudge_counter
0C861 60                            RTS
0C862                           
0C862                           .include "game/subroutine/JumpToPointer.asm"
0C862                           sub_JumpToPointer:
0C862 6C 0C 00                      JMP (pointer)
0C865                               ;RTS must be handled by the routine (pointer) jumps to
0C865                           .include "game/subroutine/LoadGameScreen.asm"
0C865                           sub_LoadGameScreen:
0C865                           
0C865                               ;; Clear the screen
0C865 20 D8 C4                      JSR sub_ClearScreen
0C868                               
0C868                               ;; Clear collision and attribute data
0C868 A2 00                         LDX #$00
0C86A 8A                            TXA
0C86B                               -
0C86B 9D 00 04                          STA tile_type,x
0C86E E8                                INX
0C86F D0 FA                         BNE -
0C871                               
0C871                               ;; Get pointer from current level
0C871 A6 3F                         LDX current_level
0C873 BD 09 D5                      LDA tbl_lvl_layout_lo,x
0C876 85 0C                         STA pointer
0C878 BD F0 D4                      LDA tbl_lvl_layout_hi,x
0C87B 85 0D                         STA pointer+1
0C87D                           
0C87D                               ;; Set up the loop
0C87D A0 00                         LDY #$00
0C87F                           -drawRowColumnLoop:
0C87F                           
0C87F                               ;; Load (x,y) of current set of tiles
0C87F B1 0C                         LDA (pointer),y
0C881                           
0C881                               ;; Check if level is done; if so, skip the loop
0C881 C9 FF                         CMP #LEVEL_END
0C883 D0 03                         BNE +
0C885 4C CE C9                          JMP +doneLevelLoad
0C888                               +
0C888                           
0C888                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C888 85 00                         STA temp
0C88A C8                            INY
0C88B B1 0C                         LDA (pointer),y
0C88D 85 01                         STA temp+1
0C88F                               
0C88F                               ;; Convert (x,y) to PPU address
0C88F                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C88F A5 00                         LDA temp
0C891 29 0F                         AND #%00001111
0C893 4A                            LSR
0C894 4A                            LSR
0C895 09 20                         ORA #$20
0C897 85 02                         STA temp+2
0C899                               
0C899                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C899 A5 00                         LDA temp
0C89B 29 F0                         AND #%11110000
0C89D 4A                            LSR
0C89E 4A                            LSR
0C89F 4A                            LSR
0C8A0 85 03                         STA temp+3
0C8A2                               
0C8A2 A5 00                         LDA temp
0C8A4 29 03                         AND #%00000011
0C8A6 AA                            TAX
0C8A7 BD 64 D5                      LDA tbl_Times64,x
0C8AA 18                            CLC
0C8AB 65 03                         ADC temp+3
0C8AD 18                            CLC
0C8AE 69 C2                         ADC #$C2
0C8B0 85 03                         STA temp+3
0C8B2                               
0C8B2                               ;; Add carry to temp+2
0C8B2 A5 02                         LDA temp+2
0C8B4 69 00                         ADC #$00
0C8B6 85 02                         STA temp+2
0C8B8                           
0C8B8                               ;; Convert tile data to loop count and tile type
0C8B8                               ;; temp+4 = color
0C8B8 A5 01                         LDA temp+1
0C8BA 29 07                         AND #%00000111
0C8BC 85 04                         STA temp+4
0C8BE                               
0C8BE                               ;; If color = 7, this is a wall
0C8BE C9 07                         CMP #%00000111
0C8C0 F0 12                         BEQ +wallHack
0C8C2                                   
0C8C2                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C8C2 29 01                             AND #%00000001
0C8C4 F0 02                             BEQ +
0C8C6 A9 05                                 LDA #$05
0C8C8                                   +
0C8C8 85 07                             STA temp+7
0C8CA                                
0C8CA                                   ;; temp+5 = tile type
0C8CA A5 01                             LDA temp+1
0C8CC 4A                                LSR
0C8CD 4A                                LSR
0C8CE 4A                                LSR
0C8CF 29 03                             AND #%00000011
0C8D1 4C DA C8                          JMP +setTileType
0C8D4                               +wallHack:
0C8D4                               
0C8D4                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C8D4 A9 00                         LDA #$00
0C8D6 85 07                         STA temp+7
0C8D8 A9 04                         LDA #$04
0C8DA                           
0C8DA                           +setTileType:    
0C8DA 85 05                         STA temp+5
0C8DC                               
0C8DC                               ;; X = tile offset
0C8DC 18                            CLC
0C8DD 65 07                         ADC temp+7
0C8DF AA                            TAX
0C8E0                               
0C8E0                               ;; temp+6 = number of tiles
0C8E0 A5 01                         LDA temp+1
0C8E2 29 60                         AND #%01100000
0C8E4 4A                            LSR
0C8E5 4A                            LSR
0C8E6 4A                            LSR
0C8E7 4A                            LSR
0C8E8 4A                            LSR
0C8E9 85 06                         STA temp+6
0C8EB                               
0C8EB                               ;; Translate (x,y) to (y,x) for tile RAM
0C8EB A5 00                         LDA temp
0C8ED 0A                            ASL
0C8EE 0A                            ASL
0C8EF 0A                            ASL
0C8F0 0A                            ASL
0C8F1 85 08                         STA temp+8
0C8F3 A5 00                         LDA temp
0C8F5 4A                            LSR
0C8F6 4A                            LSR
0C8F7 4A                            LSR
0C8F8 4A                            LSR
0C8F9 05 08                         ORA temp+8
0C8FB 85 00                         STA temp
0C8FD                               
0C8FD                               ;; Set up loop
0C8FD 98                            TYA
0C8FE 48                            PHA
0C8FF A4 06                         LDY temp+6
0C901                           
0C901                               -drawTileLoop:
0C901                                   ;; Write PPU address
0C901 2C 02 20                          BIT PPU_STATUS
0C904 A5 02                             LDA temp+2
0C906 8D 06 20                          STA PPU_ADDR
0C909 A5 03                             LDA temp+3
0C90B 8D 06 20                          STA PPU_ADDR
0C90E                                   
0C90E                                   ;; Write first and second tile
0C90E BD 68 D5                          LDA tbl_GametileTopLeft,x
0C911 8D 07 20                          STA PPU_DATA
0C914 BD 72 D5                          LDA tbl_GametileTopRight,x
0C917 8D 07 20                          STA PPU_DATA
0C91A                                   
0C91A                                   ;; Update PPU address
0C91A 2C 02 20                          BIT PPU_STATUS
0C91D A5 02                             LDA temp+2
0C91F 8D 06 20                          STA PPU_ADDR
0C922 A5 03                             LDA temp+3
0C924 18                                CLC
0C925 69 20                             ADC #$20
0C927 8D 06 20                          STA PPU_ADDR
0C92A                                   
0C92A                                   ;; Write third and fourth tile
0C92A BD 7C D5                          LDA tbl_GametileBottomLeft,x
0C92D 8D 07 20                          STA PPU_DATA
0C930 BD 86 D5                          LDA tbl_GametileBottomRight,x
0C933 8D 07 20                          STA PPU_DATA
0C936                           
0C936                                   ;; Push x-register to stack
0C936 8A                                TXA
0C937 48                                PHA
0C938                                   
0C938                                   ;; Update tile RAM (aka collision table)
0C938 A6 05                             LDX temp+5
0C93A BD 90 D5                          LDA tbl_GameTileRamByte,x
0C93D 05 04                             ORA temp+4
0C93F 0A                                ASL
0C940 09 01                             ORA #%00000001
0C942 A6 00                             LDX temp
0C944 9D 00 04                          STA tile_type,x
0C947                           
0C947                                   ;; Check if shade 1 should be drawn
0C947 E8                                INX
0C948 BD 00 04                          LDA tile_type,x
0C94B D0 05                             BNE +
0C94D A9 00                                 LDA #$00
0C94F 8D 07 20                              STA PPU_DATA
0C952                                   +
0C952                                   
0C952                                   ;; Check if shade 2 should be drawn
0C952 A5 03                             LDA temp+3
0C954 18                                CLC
0C955 69 41                             ADC #$41
0C957 85 03                             STA temp+3
0C959 A5 02                             LDA temp+2
0C95B 69 00                             ADC #$00
0C95D 85 02                             STA temp+2
0C95F                                   
0C95F 8A                                TXA
0C960 18                                CLC
0C961 69 0F                             ADC #$0F
0C963 AA                                TAX
0C964                                   
0C964 BD 00 04                          LDA tile_type,x
0C967 D0 0F                             BNE +
0C969 A5 02                                 LDA temp+2
0C96B 8D 06 20                              STA PPU_ADDR
0C96E A5 03                                 LDA temp+3
0C970 8D 06 20                              STA PPU_ADDR
0C973 A9 00                                 LDA #$00
0C975 8D 07 20                              STA PPU_DATA
0C978                                   +
0C978                           
0C978                                   ;; Check if shade 3 should be drawn
0C978 E8                                INX
0C979 E6 03                             INC temp+3
0C97B BD 00 04                          LDA tile_type,x
0C97E D0 0F                             BNE +
0C980 A5 02                                 LDA temp+2
0C982 8D 06 20                              STA PPU_ADDR
0C985 A5 03                                 LDA temp+3
0C987 8D 06 20                              STA PPU_ADDR
0C98A A9 00                                 LDA #$00
0C98C 8D 07 20                              STA PPU_DATA
0C98F                                   +
0C98F                                   
0C98F                                   ;; Restore x-register from stack
0C98F 68                                PLA
0C990 AA                                TAX
0C991                                   
0C991                                   ;; Reset pointer for next tile
0C991 A5 03                             LDA temp+3
0C993 38                                SEC
0C994 E9 42                             SBC #$42
0C996 85 03                             STA temp+3
0C998 A5 02                             LDA temp+2
0C99A E9 00                             SBC #$00
0C99C 85 02                             STA temp+2
0C99E                                   
0C99E                                   ;; Draw next metatile in this loop (if any left)
0C99E 88                                DEY
0C99F 30 27                             BMI +doneDrawingRowColumn
0C9A1                                   
0C9A1                                   ;; Is it a row or a column?
0C9A1 A5 01                             LDA temp+1
0C9A3 10 17                             BPL +
0C9A5                                       ;; It is a column: move pointer down (+$40)
0C9A5 A5 03                                 LDA temp+3
0C9A7 18                                    CLC
0C9A8 69 40                                 ADC #$40
0C9AA 85 03                                 STA temp+3
0C9AC A5 02                                 LDA temp+2
0C9AE 69 00                                 ADC #$00
0C9B0 85 02                                 STA temp+2
0C9B2                                       
0C9B2                                       ;; Add 16 to temp (as a tile RAM pointer)
0C9B2 A5 00                                 LDA temp
0C9B4 18                                    CLC
0C9B5 69 10                                 ADC #$10
0C9B7 85 00                                 STA temp
0C9B9 4C C5 C9                              JMP +drawNextTile
0C9BC                                   +
0C9BC                                   
0C9BC                                   ;; It is a row: move pointer right (+$02)
0C9BC A5 03                             LDA temp+3
0C9BE 18                                CLC
0C9BF 69 02                             ADC #$02
0C9C1 85 03                             STA temp+3
0C9C3                                   
0C9C3                                   ;; Add 1 to temp (as a tile RAM pointer)
0C9C3 E6 00                             INC temp
0C9C5                           
0C9C5                               
0C9C5                               ;; Next tile in the row/column
0C9C5                                   +drawNextTile:
0C9C5 4C 01 C9                      JMP -drawTileLoop
0C9C8                           
0C9C8                               ;; Go to the next set of tiles
0C9C8                           +doneDrawingRowColumn:
0C9C8 68                            PLA
0C9C9 A8                            TAY
0C9CA C8                            INY
0C9CB 4C 7F C8                      JMP -drawRowColumnLoop
0C9CE                           
0C9CE                           ;; Level loading is done
0C9CE                           +doneLevelLoad:
0C9CE                           
0C9CE                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C9CE A9 20                         LDA #$20
0C9D0 8D 06 20                      STA PPU_ADDR
0C9D3 A9 A2                         LDA #$A2
0C9D5 8D 06 20                      STA PPU_ADDR
0C9D8 A9 35                         LDA #$35
0C9DA 20 08 CC                      JSR sub_Draw28HorizontalTiles
0C9DD                           
0C9DD                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C9DD A9 23                         LDA #$23
0C9DF 8D 06 20                      STA PPU_ADDR
0C9E2 A9 42                         LDA #$42
0C9E4 8D 06 20                      STA PPU_ADDR
0C9E7 A9 31                         LDA #$31
0C9E9 20 08 CC                      JSR sub_Draw28HorizontalTiles
0C9EC                           
0C9EC                               ;; Left & right game bounds
0C9EC                               ;; Set PPU_ADDR and store in temp variables
0C9EC A9 20                         LDA #$20
0C9EE 85 00                         STA temp
0C9F0 8D 06 20                      STA PPU_ADDR
0C9F3 A9 C1                         LDA #$C1
0C9F5 85 01                         STA temp+1
0C9F7 8D 06 20                      STA PPU_ADDR
0C9FA                               
0C9FA                               ;; Set vertical bound tile and set up loop
0C9FA A0 33                         LDY #$33
0C9FC A2 14                         LDX #20
0C9FE                               -
0C9FE                                   ;; Show left tile
0C9FE 8C 07 20                          STY PPU_DATA
0CA01                                   
0CA01                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CA01 A5 00                             LDA temp
0CA03 8D 06 20                          STA PPU_ADDR
0CA06 A5 01                             LDA temp+1
0CA08 18                                CLC
0CA09 69 1D                             ADC #29
0CA0B 85 01                             STA temp+1
0CA0D 8D 06 20                          STA PPU_ADDR
0CA10                           
0CA10                                   ;; Show right tile
0CA10 8C 07 20                          STY PPU_DATA
0CA13                           
0CA13                                   ;; Check if we're done yet
0CA13 CA                                DEX
0CA14 F0 18                             BEQ +drawCorners
0CA16                                   
0CA16                                   ;; Not done yet: add 3 to low byte for next left bound
0CA16 A5 01                             LDA temp+1
0CA18 18                                CLC
0CA19 69 03                             ADC #3
0CA1B 85 01                             STA temp+1
0CA1D                                   
0CA1D                                   ;; Apply carry to high byte
0CA1D A5 00                             LDA temp
0CA1F 69 00                             ADC #$00
0CA21 85 00                             STA temp
0CA23                                   
0CA23                                   ;; Store next PPU_ADDR to draw at
0CA23 8D 06 20                          STA PPU_ADDR
0CA26 A5 01                             LDA temp+1
0CA28 8D 06 20                          STA PPU_ADDR
0CA2B 4C FE C9                      JMP -
0CA2E                               
0CA2E                               
0CA2E                           
0CA2E                           +drawCorners:
0CA2E                               ;; Draw the corners of the playing field
0CA2E A9 20                         LDA #$20
0CA30 8D 06 20                      STA PPU_ADDR
0CA33 A9 A1                         LDA #$A1
0CA35 8D 06 20                      STA PPU_ADDR
0CA38 A9 39                         LDA #$39
0CA3A 8D 07 20                      STA PPU_DATA
0CA3D                           
0CA3D A9 20                         LDA #$20
0CA3F 8D 06 20                      STA PPU_ADDR
0CA42 A9 BE                         LDA #$BE
0CA44 8D 06 20                      STA PPU_ADDR
0CA47 A9 3A                         LDA #$3A
0CA49 8D 07 20                      STA PPU_DATA
0CA4C                               ;; (added background tile for Sprite-0 hit)
0CA4C A9 3F                         LDA #$3F
0CA4E 8D 07 20                      STA PPU_DATA
0CA51                           
0CA51 A9 23                         LDA #$23
0CA53 8D 06 20                      STA PPU_ADDR
0CA56 A9 41                         LDA #$41
0CA58 8D 06 20                      STA PPU_ADDR
0CA5B A9 36                         LDA #$36
0CA5D 8D 07 20                      STA PPU_DATA
0CA60                           
0CA60 A9 23                         LDA #$23
0CA62 8D 06 20                      STA PPU_ADDR
0CA65 A9 5E                         LDA #$5E
0CA67 8D 06 20                      STA PPU_ADDR
0CA6A A9 34                         LDA #$34
0CA6C 8D 07 20                      STA PPU_DATA
0CA6F                           
0CA6F                           
0CA6F                               ;; Draw the hud labels
0CA6F A9 20                         LDA #$20
0CA71 8D 06 20                      STA PPU_ADDR
0CA74 A9 62                         LDA #$62
0CA76 8D 06 20                      STA PPU_ADDR
0CA79 A2 00                         LDX #$00
0CA7B                               -
0CA7B BD 95 D5                          LDA tbl_HudText,x
0CA7E 8D 07 20                          STA PPU_DATA
0CA81 E8                                INX
0CA82 E0 1C                             CPX #28
0CA84 D0 F5                         BNE -
0CA86                           
0CA86                           
0CA86                               ;; Draw the current score
0CA86 A9 20                         LDA #$20
0CA88 8D 06 20                      STA PPU_ADDR
0CA8B A9 83                         LDA #$83
0CA8D 8D 06 20                      STA PPU_ADDR
0CA90 A2 00                         LDX #$00
0CA92                               -
0CA92 B5 20                             LDA ball_score,x
0CA94 18                                CLC
0CA95 69 01                             ADC #$01
0CA97 8D 07 20                          STA PPU_DATA
0CA9A E8                                INX
0CA9B E0 06                             CPX #$06
0CA9D D0 F3                         BNE -
0CA9F                           
0CA9F                           
0CA9F                               ;; Draw the level number
0CA9F                               ;; (with primitive HEX>DEC)
0CA9F A5 3F                         LDA current_level
0CAA1 18                            CLC
0CAA2 69 01                         ADC #$01
0CAA4 85 01                         STA temp+1
0CAA6                               
0CAA6 C9 14                         CMP #20
0CAA8 B0 13                         BCS +tempIsTwo
0CAAA                               
0CAAA C9 0A                         CMP #10
0CAAC B0 05                         BCS +tempIsOne
0CAAE                               
0CAAE A9 00                         LDA #$00
0CAB0 4C C4 CA                      JMP +setTemp
0CAB3                               
0CAB3                           +tempIsOne:
0CAB3 38                            SEC
0CAB4 E9 0A                         SBC #10
0CAB6 85 01                         STA temp+1
0CAB8 A9 01                         LDA #$01
0CABA 4C C4 CA                      JMP +setTemp
0CABD                               
0CABD                           +tempIsTwo:
0CABD 38                            SEC
0CABE E9 14                         SBC #20
0CAC0 85 01                         STA temp+1
0CAC2 A9 02                         LDA #$02
0CAC4                           
0CAC4                           +setTemp:
0CAC4 85 00                         STA temp
0CAC6                               
0CAC6 E6 00                         INC temp
0CAC8 E6 01                         INC temp+1
0CACA                               
0CACA A9 20                         LDA #$20
0CACC 8D 06 20                      STA PPU_ADDR
0CACF A9 8B                         LDA #$8B
0CAD1 8D 06 20                      STA PPU_ADDR
0CAD4 A5 00                         LDA temp
0CAD6 8D 07 20                      STA PPU_DATA
0CAD9 A5 01                         LDA temp+1
0CADB 8D 07 20                      STA PPU_DATA
0CADE                           
0CADE                           
0CADE                               ;; Draw lives (presumes lives to be capped at 9)
0CADE A9 20                         LDA #$20
0CAE0 8D 06 20                      STA PPU_ADDR
0CAE3 A9 92                         LDA #$92
0CAE5 8D 06 20                      STA PPU_ADDR
0CAE8 A6 1F                         LDX ball_lives
0CAEA E8                            INX
0CAEB 8E 07 20                      STX PPU_DATA
0CAEE                           
0CAEE                           
0CAEE                               ;; Set and draw bonus
0CAEE A9 07                         LDA #$07
0CAF0 85 2C                         STA ball_bonus
0CAF2 A9 09                         LDA #$09
0CAF4 85 2D                         STA ball_bonus+1
0CAF6 85 2E                         STA ball_bonus+2
0CAF8                               
0CAF8 A9 20                         LDA #$20
0CAFA 8D 06 20                      STA PPU_ADDR
0CAFD A9 9A                         LDA #$9A
0CAFF 8D 06 20                      STA PPU_ADDR
0CB02 A2 00                         LDX #$00
0CB04                               -
0CB04 B5 2C                             LDA ball_bonus,x
0CB06 18                                CLC
0CB07 69 01                             ADC #$01
0CB09 8D 07 20                          STA PPU_DATA
0CB0C E8                                INX
0CB0D E0 03                             CPX #$03
0CB0F D0 F3                         BNE -
0CB11                           
0CB11                           
0CB11                               ;; Set attribute data to RAM
0CB11                               
0CB11                               ;; Byte 0-7 of attribute ram should be #%10100000
0CB11 A2 00                         LDX #$00
0CB13 A9 A0                         LDA #$A0
0CB15                               -
0CB15 9D A0 04                          STA tile_attributes,x
0CB18 E8                                INX
0CB19 E0 08                             CPX #$08
0CB1B D0 F8                         BNE -
0CB1D                           
0CB1D                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CB1D                           
0CB1D                           -attributeLoop:
0CB1D                               ;; Reset current attribute value
0CB1D A9 00                         LDA #$00
0CB1F 85 02                         STA temp+2
0CB21                           
0CB21                               ;; Get first metatile in tile ram based on attribute index
0CB21                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CB21 8A                            TXA
0CB22                           
0CB22 38                            SEC
0CB23 E9 08                         SBC #$08
0CB25 85 01                         STA temp+1      ; attr - 8 (temp1)
0CB27 0A                            ASL             ; * 2
0CB28 85 00                         STA temp        ; temp = temp1 * 2
0CB2A                           
0CB2A A5 01                         LDA temp+1      ; temp1
0CB2C 29 F8                         AND #%11111000  ; rounded down to 8's
0CB2E 0A                            ASL             ; * 2
0CB2F 18                            CLC
0CB30 65 00                         ADC temp        ; + temp1 * 2
0CB32 85 00                         STA temp        ; first metatile
0CB34                           
0CB34                               ;; Store first metatile in y-register
0CB34 A8                            TAY
0CB35                           
0CB35                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CB35 8A                            TXA
0CB36 29 07                         AND #%00000111
0CB38 C9 07                         CMP #%00000111
0CB3A F0 0B                         BEQ +
0CB3C                           
0CB3C                               ;; If X >= $30, don't apply bottom right metatile
0CB3C E0 30                         CPX #$30
0CB3E B0 07                         BCS +
0CB40                               
0CB40                               ;; Add metatile1 subpalette to attribute value
0CB40 B9 00 04                      LDA tile_type,y
0CB43 29 0C                         AND #%00001100
0CB45 85 02                         STA temp+2
0CB47                               +
0CB47                           
0CB47                           
0CB47                               ;; Apply second metatile
0CB47 88                            DEY
0CB48                           
0CB48                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CB48 8A                            TXA
0CB49 29 07                         AND #%00000111
0CB4B F0 10                         BEQ +
0CB4D                           
0CB4D                               ;; If X >= $30, don't apply bottom left metatile
0CB4D E0 30                         CPX #$30
0CB4F B0 0C                         BCS +
0CB51                           
0CB51                           
0CB51                           
0CB51                               ;; Add metatile2 subpalette to attribute value
0CB51 B9 00 04                      LDA tile_type,y
0CB54 29 0C                         AND #%00001100
0CB56 4A                            LSR
0CB57 4A                            LSR
0CB58 05 02                         ORA temp+2
0CB5A 4C 5F CB                      JMP ++
0CB5D                               +
0CB5D A5 02                         LDA temp+2
0CB5F                               ++
0CB5F 0A                            ASL
0CB60 0A                            ASL
0CB61 85 02                         STA temp+2
0CB63                           
0CB63                           
0CB63                               ;; Apply third metatile
0CB63 98                            TYA
0CB64 38                            SEC
0CB65 E9 0F                         SBC #$0F
0CB67 A8                            TAY
0CB68                           
0CB68                               ;; If X MOD 8 == 7, don't apply top right metatile
0CB68 8A                            TXA
0CB69 29 07                         AND #%00000111
0CB6B C9 07                         CMP #%00000111
0CB6D F0 11                         BEQ +
0CB6F                           
0CB6F                               ;; If X < $10, don't apply top right metatile
0CB6F 8A                            TXA
0CB70 29 F0                         AND #%11110000
0CB72 F0 0C                         BEQ +
0CB74                           
0CB74                               ;; Add metatile3 subpalette to attribute value
0CB74 B9 00 04                      LDA tile_type,y
0CB77 29 0C                         AND #%00001100
0CB79 4A                            LSR
0CB7A 4A                            LSR
0CB7B 05 02                         ORA temp+2
0CB7D 4C 82 CB                      JMP ++
0CB80                               +
0CB80 A5 02                         LDA temp+2
0CB82                               ++
0CB82 0A                            ASL
0CB83 0A                            ASL
0CB84 85 02                         STA temp+2
0CB86                           
0CB86                           
0CB86                               ;; Apply fourth metatile
0CB86 88                            DEY
0CB87                           
0CB87                               ;; If X MOD 8 == 0, don't apply top left metatile
0CB87 8A                            TXA
0CB88 29 07                         AND #%00000111
0CB8A F0 11                         BEQ +
0CB8C                           
0CB8C                               ;; If X < $10, don't apply top left metatile
0CB8C 8A                            TXA
0CB8D 29 F0                         AND #%11110000
0CB8F F0 0C                         BEQ +
0CB91                           
0CB91                               ;; Add metatile4 subpalette to attribute value
0CB91 B9 00 04                      LDA tile_type,y
0CB94 29 0C                         AND #%00001100
0CB96 4A                            LSR
0CB97 4A                            LSR
0CB98 05 02                         ORA temp+2
0CB9A 4C 9F CB                      JMP ++
0CB9D                               +
0CB9D A5 02                         LDA temp+2
0CB9F                               ++
0CB9F 9D A0 04                      STA tile_attributes,x
0CBA2                           
0CBA2                               ;; Check the next attribute, if any left
0CBA2 E8                            INX
0CBA3 E0 38                         CPX #$38
0CBA5 F0 03                         BEQ +
0CBA7 4C 1D CB                          JMP -attributeLoop
0CBAA                               +
0CBAA                           
0CBAA                               ;; Stream attribute RAM to PPU
0CBAA 2C 02 20                      BIT PPU_STATUS
0CBAD A9 23                         LDA #$23
0CBAF 8D 06 20                      STA PPU_ADDR
0CBB2 A9 C0                         LDA #$C0
0CBB4 8D 06 20                      STA PPU_ADDR
0CBB7 A2 00                         LDX #$00
0CBB9                               -
0CBB9 BD A0 04                          LDA tile_attributes,x
0CBBC 8D 07 20                          STA PPU_DATA
0CBBF E8                                INX
0CBC0 E0 40                             CPX #$40
0CBC2 D0 F5                         BNE -
0CBC4                           
0CBC4                               ;; Set initial ball position
0CBC4 A6 3F                         LDX current_level
0CBC6 BD 22 D5                      LDA tbl_lvl_ball_startpos,x
0CBC9 29 F0                         AND #%11110000
0CBCB 18                            CLC
0CBCC 69 34                         ADC #$34
0CBCE 85 19                         STA ball_ypos_hi
0CBD0 BD 22 D5                      LDA tbl_lvl_ball_startpos,x
0CBD3 0A                            ASL
0CBD4 0A                            ASL
0CBD5 0A                            ASL
0CBD6 0A                            ASL
0CBD7 18                            CLC
0CBD8 69 14                         ADC #$14
0CBDA 85 17                         STA ball_xpos_hi
0CBDC A9 00                         LDA #$00
0CBDE 85 18                         STA ball_xpos_lo
0CBE0 85 1A                         STA ball_ypos_lo
0CBE2                               
0CBE2                               ;; Set initial ball color and direction
0CBE2 BD 3B D5                      LDA tbl_lvl_ball_init,x
0CBE5 29 F0                         AND #%11110000
0CBE7 85 36                         STA ball_flags
0CBE9 20 43 C5                      JSR sub_ColorizeBall
0CBEC                               
0CBEC                               ;; Reset bonus counter
0CBEC A9 06                         LDA #BONUS_FRAMES
0CBEE 85 3D                         STA bonus_counter
0CBF0                               
0CBF0                               ;; Play background noise
0CBF0 A9 08                         LDA #$08
0CBF2 8D 15 40                      STA APU_STATUS
0CBF5 8D 0F 40                      STA NOISE_LENGTH
0CBF8 A9 0E                         LDA #$0E
0CBFA 85 43                         STA current_noise
0CBFC A9 00                         LDA #$00
0CBFE 85 41                         STA max_noise
0CC00 85 44                         STA noise_counter
0CC02 85 42                         STA sweep_noise
0CC04 20 CB C4                      JSR sub_BackgroundNoise
0CC07                           
0CC07                               ;; Return
0CC07 60                            RTS
0CC08                           
0CC08                           
0CC08                           ;; Subroutine: draw 28 tiles in a row
0CC08                           sub_Draw28HorizontalTiles:
0CC08 A2 1C                         LDX #28
0CC0A                               -
0CC0A 8D 07 20                          STA PPU_DATA
0CC0D CA                                DEX
0CC0E D0 FA                         BNE -
0CC10 60                            RTS0CC11                           .include "game/subroutine/LoadIntroScreen.asm"
0CC11                           sub_LoadIntroScreen:
0CC11                           
0CC11                               ;; Load intro palette
0CC11 2C 02 20                      BIT PPU_STATUS
0CC14 A9 3F                         LDA #$3F
0CC16 8D 06 20                      STA PPU_ADDR
0CC19 A9 00                         LDA #$00
0CC1B 8D 06 20                      STA PPU_ADDR
0CC1E A2 00                         LDX #$00
0CC20                               -
0CC20 BD C7 CC                          LDA tbl_IntroScreenPalette,x
0CC23 8D 07 20                          STA PPU_DATA
0CC26 E8                                INX
0CC27 E0 20                             CPX #$20
0CC29 D0 F5                         BNE -
0CC2B                               
0CC2B                               ;; Put ball in the middle
0CC2B A9 7C                         LDA #$7C
0CC2D 85 17                         STA ball_xpos_hi
0CC2F 85 19                         STA ball_ypos_hi
0CC31                           
0CC31                               ;; Clear the screen
0CC31 20 D8 C4                      JSR sub_ClearScreen
0CC34                           
0CC34                               ;; Set up intro screen draw loop
0CC34 A2 00                         LDX #$00
0CC36                           
0CC36                           -loop_IntroScreenData:
0CC36                           
0CC36                               ;; Get current byte from intro screen data
0CC36 BD EF CC                      LDA tbl_IntroScreenData,x
0CC39                           
0CC39                               ;; If current byte is #$3F, we're done drawing.
0CC39 C9 3F                         CMP #$3F
0CC3B D0 03                         BNE +
0CC3D 4C 8A CC                          JMP +goToEndIntroScreen
0CC40                               +
0CC40                           
0CC40                               ;; If highest bits are %11, draw a plain tile
0CC40 29 C0                         AND #%11000000
0CC42 D0 03                         BNE +
0CC44 4C 6A CC                          JMP +drawTile
0CC47                               +
0CC47                               
0CC47                               ;; If highest bits are %01, set the PPU address
0CC47                               ;; If not, draw two logo tiles
0CC47 C9 40                         CMP #%01000000
0CC49 D0 03                         BNE +drawLogo
0CC4B 4C 74 CC                          JMP +setPpuAddr
0CC4E                           
0CC4E                           +drawLogo:
0CC4E                               ;; Get bits 0-2 and store in a temp variable
0CC4E BD EF CC                      LDA tbl_IntroScreenData,x
0CC51 29 07                         AND #%00000111
0CC53 85 00                         STA temp
0CC55                               
0CC55                               ;; Get bits 3-5, shift over to get a value from 0-7
0CC55 BD EF CC                      LDA tbl_IntroScreenData,x
0CC58 4A                            LSR
0CC59 4A                            LSR
0CC5A 4A                            LSR
0CC5B 29 07                         AND #%00000111
0CC5D                               
0CC5D                               ;; Draw the tile that corresponds with that value
0CC5D A8                            TAY
0CC5E 20 BB C5                      JSR sub_drawIntroScreenLogoTile
0CC61                               
0CC61                               ;; Do the same for the value stored in temp
0CC61 A4 00                         LDY temp
0CC63 20 BB C5                      JSR sub_drawIntroScreenLogoTile
0CC66                           
0CC66                               ;; Next byte please
0CC66 E8                            INX
0CC67 4C 36 CC                      JMP -loop_IntroScreenData
0CC6A                           
0CC6A                           +drawTile:
0CC6A                               ;; Just draw the tile value on screen
0CC6A BD EF CC                      LDA tbl_IntroScreenData,x
0CC6D 8D 07 20                      STA PPU_DATA
0CC70                               
0CC70                               ;; Next byte please
0CC70 E8                            INX
0CC71 4C 36 CC                      JMP -loop_IntroScreenData
0CC74                           
0CC74                           
0CC74                           +setPpuAddr:
0CC74                               ;; Reset the PPU latch
0CC74 2C 02 20                      BIT PPU_STATUS
0CC77                               
0CC77                               ;; Sanitize and write the high byte of the PPU address
0CC77 BD EF CC                      LDA tbl_IntroScreenData,x
0CC7A 29 3F                         AND #%00111111
0CC7C 8D 06 20                      STA PPU_ADDR
0CC7F                           
0CC7F                               ;; Write the low byte of the PPU address
0CC7F E8                            INX
0CC80 BD EF CC                      LDA tbl_IntroScreenData,x
0CC83 8D 06 20                      STA PPU_ADDR
0CC86                               
0CC86                               ;; PPU has been set up to draw tiles at the correct spot now.
0CC86                               
0CC86                               ;; Next byte please.
0CC86 E8                            INX
0CC87 4C 36 CC                      JMP -loop_IntroScreenData
0CC8A                           
0CC8A                           +goToEndIntroScreen:
0CC8A                           
0CC8A                               ;; To color the 1.LEVEL: line green, we need to update two
0CC8A                               ;; values in the PPU attribute data.
0CC8A 2C 02 20                      BIT PPU_STATUS
0CC8D A9 23                         LDA #$23
0CC8F 8D 06 20                      STA PPU_ADDR
0CC92 A9 CB                         LDA #$CB
0CC94 8D 06 20                      STA PPU_ADDR
0CC97 A9 0A                         LDA #%00001010
0CC99 8D 07 20                      STA PPU_DATA
0CC9C 8D 07 20                      STA PPU_DATA
0CC9F                           
0CC9F 60                            RTS
0CCA0                           
0CCA0                           .include "game/subroutine/LoadWinScreen.asm"
0CCA0                           sub_LoadWinScreen:
0CCA0 60                            RTS
0CCA1                           
0CCA1                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CCA1                           sub_WriteByteToPPUBuffer:
0CCA1                           
0CCA1                               ;; Prevent updating until full 3-byte buffer is filled,
0CCA1                               ;; so that graphics won't glitch out if NMI happens during
0CCA1                               ;; updating the buffer
0CCA1 A9 00                         LDA #$00
0CCA3 85 38                         STA ppu_buffer_update
0CCA5                           
0CCA5                               ;; Check if buffer full; if so, wait a frame and force update
0CCA5 A4 39                         LDY ppu_buffer_pointer
0CCA7 C0 30                         CPY #$30
0CCA9 D0 05                         BNE +
0CCAB E6 38                             INC ppu_buffer_update
0CCAD 20 66 C4                          JSR sub_WaitForVBlank
0CCB0                               +
0CCB0                           
0CCB0                               ;; Add ppu_addr high byte to buffer
0CCB0 A5 00                         LDA temp
0CCB2 99 00 03                      STA ppu_buffer,y
0CCB5                           
0CCB5                               ;; Add ppu_addr low byte to buffer
0CCB5 C8                            INY
0CCB6 A5 01                         LDA temp+1
0CCB8 99 00 03                      STA ppu_buffer,y
0CCBB                           
0CCBB                               ;; Add ppu_data to buffer
0CCBB C8                            INY
0CCBC A5 02                         LDA temp+2
0CCBE 99 00 03                      STA ppu_buffer,y
0CCC1                           
0CCC1                               ;; Update buffer pointer
0CCC1 C8                            INY
0CCC2 84 39                         STY ppu_buffer_pointer
0CCC4                           
0CCC4                               ;; Tell NMI to update next round
0CCC4 E6 38                         INC ppu_buffer_update
0CCC6                           
0CCC6                               ;; Return
0CCC6 60                            RTS0CCC7                           
0CCC7                           
0CCC7                           ;; LUTs
0CCC7                           .include "game/include/tables.asm"
0CCC7                           
0CCC7                           ;; Initial screen palette
0CCC7                           tbl_IntroScreenPalette:
0CCC7 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CCCB 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CCCF 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CCD3 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CCD7                           
0CCD7 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CCDB 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CCDF 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CCE3 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CCE7                           
0CCE7                           
0CCE7                           ;; Intro: mapping logo index to chr tile
0CCE7                           tbl_IntroScreenLogoChr:
0CCE7 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CCEF                           
0CCEF                           
0CCEF                           ;; Intro screen data
0CCEF                           tbl_IntroScreenData:
0CCEF                           
0CCEF                               ;; Set PPU address $20AC and draw
0CCEF 60 AC                         .db #$60, #$AC
0CCF1 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CCF9                           
0CCF9                               ;; Set PPU address $20CF and draw
0CCF9 60 CF                         .db #$60, #$CF
0CCFB 01 02                         .db #_0, #_1
0CCFD                               
0CCFD                               ;; Set PPU address $2122 and draw
0CCFD 61 22                         .db #$61, #$22
0CCFF 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CD06 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CD0C 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CD14 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CD19                               
0CD19                               ;; Set PPU address $2147 and draw
0CD19 61 47                         .db #$61, #$47
0CD1B 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CD22 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CD26 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CD2C 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CD32                               
0CD32                               ;; Set PPU address $218B and draw
0CD32 61 8B                         .db #$61, #$8B
0CD34 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CD3A 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CD3F                               
0CD3F                               ;; Set PPU address $21E6 and draw
0CD3F 61 E6                         .db #$61, #$E6
0CD41 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CD49 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CD4D 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CD54                               
0CD54                               ;; Set PPU address $222D and draw
0CD54 62 2D                         .db #$62, #$2D
0CD56 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CD5C                               
0CD5C                               ;; Set PPU address $2281
0CD5C 62 81                         .db #$62, #$81
0CD5E                               
0CD5E                               ;; Draw the Crillion logo
0CD5E E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CD62 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD66 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CD6A E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CD6E                               
0CD6E D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CD72 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD76 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CD7A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CD7E                               
0CD7E D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CD82 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD86 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CD8A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CD8E                           
0CD8E D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CD92 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD96 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CD9A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CD9E                               
0CD9E D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CDA2 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDA6 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDAA D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDAE                           
0CDAE F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CDB2 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CDB6 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CDBA F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CDBD                           
0CDBD                               ;; End of intro
0CDBD 3F                            .db #$3F
0CDBE                           
0CDBE                           
0CDBE                           ;; Animation frames table
0CDBE                           .include "game/include/table/animation_frames.asm"
0CDBE                           ;; CHR tile-id's per slide of explosion
0CDBE                           explosion_slide0:
0CDBE 00 00 00                      .db #$00, #$00, #$00
0CDC1 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CDC4 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CDC7                           
0CDC7                           explosion_slide1:
0CDC7 00 00 00                      .db #$00, #$00, #$00
0CDCA 29 2A 2B                      .db #$29, #$2A, #$2B
0CDCD 39 3A 3B                      .db #$39, #$3A, #$3B
0CDD0                           
0CDD0                           explosion_slide2:
0CDD0 16 00 00                      .db #$16, #$00, #$00
0CDD3 26 27 28                      .db #$26, #$27, #$28
0CDD6 36 37 38                      .db #$36, #$37, #$38
0CDD9                           
0CDD9                           explosion_slide3:
0CDD9 00 14 15                      .db #$00, #$14, #$15
0CDDC 23 24 25                      .db #$23, #$24, #$25
0CDDF 33 34 35                      .db #$33, #$34, #$35
0CDE2                           
0CDE2                           explosion_slide4:
0CDE2 10 11 12                      .db #$10, #$11, #$12
0CDE5 20 21 22                      .db #$20, #$21, #$22
0CDE8 30 31 32                      .db #$30, #$31, #$32
0CDEB                           
0CDEB                           ;; High and low bytes of animation slides
0CDEB                           explosion_anim_hi:
0CDEB CD                            .db >#explosion_slide0
0CDEC CD                            .db >#explosion_slide1
0CDED CD                            .db >#explosion_slide2
0CDEE CD                            .db >#explosion_slide3
0CDEF CD                            .db >#explosion_slide4
0CDF0 CD                            .db >#explosion_slide4
0CDF1 CD                            .db >#explosion_slide3
0CDF2 CD                            .db >#explosion_slide2
0CDF3 CD                            .db >#explosion_slide1
0CDF4 CD                            .db >#explosion_slide0
0CDF5                           
0CDF5                           explosion_anim_lo:
0CDF5 BE                            .db <#explosion_slide0
0CDF6 C7                            .db <#explosion_slide1
0CDF7 D0                            .db <#explosion_slide2
0CDF8 D9                            .db <#explosion_slide3
0CDF9 E2                            .db <#explosion_slide4
0CDFA E2                            .db <#explosion_slide4
0CDFB D9                            .db <#explosion_slide3
0CDFC D0                            .db <#explosion_slide2
0CDFD C7                            .db <#explosion_slide1
0CDFE BE                            .db <#explosion_slide0
0CDFF                           
0CDFF                           
0CDFF                           
0CDFF                           ;; Ball palette color table (CBRYGM)
0CDFF                           tbl_BallColorDark:
0CDFF 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CE05                            
0CE05                           tbl_BallColorLight:
0CE05 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CE0B                           
0CE0B                               
0CE0B                           ;; Screen mode drawing routine addresses
0CE0B                           tbl_LoadScreenHi:
0CE0B CC C8 CC                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CE0E                           
0CE0E                           tbl_LoadScreenLo:
0CE0E 11 65 A0                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CE11                           
0CE11                           
0CE11                           ;; Level data
0CE11                           .include "game/include/table/level_data.asm"
0CE11                           lvl_layout_01:
0CE11 61 21                         .db #$61, #%00100001
0CE13 52 61                         .db #$52, #%01100001
0CE15 43 65                         .db #$43, #%01100101
0CE17 83 05                         .db #$83, #%00000101
0CE19 93 15                         .db #$93, #%00010101
0CE1B 34 7A                         .db #$34, #%01111010
0CE1D 74 7A                         .db #$74, #%01111010
0CE1F 35 7A                         .db #$35, #%01111010
0CE21 75 7A                         .db #$75, #%01111010
0CE23 46 65                         .db #$46, #%01100101
0CE25 86 25                         .db #$86, #%00100101
0CE27 57 61                         .db #$57, #%01100001
0CE29 68 21                         .db #$68, #%00100001
0CE2B FF                            .db #LEVEL_END
0CE2C                           
0CE2C                           lvl_layout_02:
0CE2C C0 0A                         .db #$C0, #%00001010
0CE2E 11 15                         .db #$11, #%00010101
0CE30 21 62                         .db #$21, #%01100010
0CE32 61 62                         .db #$61, #%01100010
0CE34 A1 42                         .db #$A1, #%01000010
0CE36 12 67                         .db #$12, #%01100111
0CE38 52 67                         .db #$52, #%01100111
0CE3A 92 67                         .db #$92, #%01100111
0CE3C C3 0D                         .db #$C3, #%00001101
0CE3E 14 11                         .db #$14, #%00010001
0CE40 24 65                         .db #$24, #%01100101
0CE42 64 65                         .db #$64, #%01100101
0CE44 A4 45                         .db #$A4, #%01000101
0CE46 15 67                         .db #$15, #%01100111
0CE48 55 67                         .db #$55, #%01100111
0CE4A 95 67                         .db #$95, #%01100111
0CE4C 17 12                         .db #$17, #%00010010
0CE4E 27 61                         .db #$27, #%01100001
0CE50 67 61                         .db #$67, #%01100001
0CE52 A7 41                         .db #$A7, #%01000001
0CE54 38 7A                         .db #$38, #%01111010
0CE56 98 5A                         .db #$98, #%01011010
0CE58 18 27                         .db #$18, #%00100111
0CE5A 48 27                         .db #$48, #%00100111
0CE5C 78 27                         .db #$78, #%00100111
0CE5E C8 07                         .db #$C8, #%00000111
0CE60 FF                            .db #LEVEL_END
0CE61                           
0CE61                           lvl_layout_03:
0CE61 00 7A                         .db #$00, #%01111010
0CE63 40 7A                         .db #$40, #%01111010
0CE65 80 7A                         .db #$80, #%01111010
0CE67 C0 1A                         .db #$C0, #%00011010
0CE69 10 A1                         .db #$10, #%10100001
0CE6B 13 E1                         .db #$13, #%11100001
0CE6D 17 C1                         .db #$17, #%11000001
0CE6F 30 C1                         .db #$30, #%11000001
0CE71 34 C1                         .db #$34, #%11000001
0CE73 38 A1                         .db #$38, #%10100001
0CE75 50 E1                         .db #$50, #%11100001
0CE77 55 81                         .db #$55, #%10000001
0CE79 57 C1                         .db #$57, #%11000001
0CE7B 70 C1                         .db #$70, #%11000001
0CE7D 73 A1                         .db #$73, #%10100001
0CE7F 76 E1                         .db #$76, #%11100001
0CE81 90 E1                         .db #$90, #%11100001
0CE83 95 81                         .db #$95, #%10000001
0CE85 97 C1                         .db #$97, #%11000001
0CE87 B0 C1                         .db #$B0, #%11000001
0CE89 B4 C1                         .db #$B4, #%11000001
0CE8B B8 A1                         .db #$B8, #%10100001
0CE8D D0 A1                         .db #$D0, #%10100001
0CE8F D3 E1                         .db #$D3, #%11100001
0CE91 D7 C1                         .db #$D7, #%11000001
0CE93 FF                            .db #LEVEL_END
0CE94                           
0CE94                           lvl_layout_04:
0CE94 00 4C                         .db #$00, #%01001100
0CE96 40 6C                         .db #$40, #%01101100
0CE98 80 4C                         .db #$80, #%01001100
0CE9A 81 AC                         .db #$81, #%10101100
0CE9C C1 2C                         .db #$C1, #%00101100
0CE9E 02 6C                         .db #$02, #%01101100
0CEA0 42 CC                         .db #$42, #%11001100
0CEA2 62 EC                         .db #$62, #%11101100
0CEA4 A2 CC                         .db #$A2, #%11001100
0CEA6 C3 CC                         .db #$C3, #%11001100
0CEA8 04 4C                         .db #$04, #%01001100
0CEAA 84 2C                         .db #$84, #%00101100
0CEAC 25 AC                         .db #$25, #%10101100
0CEAE 85 AC                         .db #$85, #%10101100
0CEB0 06 AC                         .db #$06, #%10101100
0CEB2 36 CC                         .db #$36, #%11001100
0CEB4 56 CC                         .db #$56, #%11001100
0CEB6 66 EC                         .db #$66, #%11101100
0CEB8 96 6C                         .db #$96, #%01101100
0CEBA C7 AC                         .db #$C7, #%10101100
0CEBC 08 2C                         .db #$08, #%00101100
0CEBE 78 6C                         .db #$78, #%01101100
0CEC0 D8 0C                         .db #$D8, #%00001100
0CEC2 30 A1                         .db #$30, #%10100001
0CEC4 B0 21                         .db #$B0, #%00100001
0CEC6 01 41                         .db #$01, #%01000001
0CEC8 41 61                         .db #$41, #%01100001
0CECA 91 A1                         .db #$91, #%10100001
0CECC A1 21                         .db #$A1, #%00100001
0CECE 52 C1                         .db #$52, #%11000001
0CED0 72 E1                         .db #$72, #%11100001
0CED2 B2 C1                         .db #$B2, #%11000001
0CED4 C2 21                         .db #$C2, #%00100001
0CED6 03 41                         .db #$03, #%01000001
0CED8 33 C1                         .db #$33, #%11000001
0CEDA 83 21                         .db #$83, #%00100001
0CEDC D3 E1                         .db #$D3, #%11100001
0CEDE 05 21                         .db #$05, #%00100001
0CEE0 45 E1                         .db #$45, #%11100001
0CEE2 A5 21                         .db #$A5, #%00100001
0CEE4 16 A1                         .db #$16, #%10100001
0CEE6 76 A1                         .db #$76, #%10100001
0CEE8 27 A1                         .db #$27, #%10100001
0CEEA 57 01                         .db #$57, #%00000001
0CEEC 87 41                         .db #$87, #%01000001
0CEEE B7 A1                         .db #$B7, #%10100001
0CEF0 19 21                         .db #$19, #%00100001
0CEF2 39 41                         .db #$39, #%01000001
0CEF4 89 41                         .db #$89, #%01000001
0CEF6 C9 21                         .db #$C9, #%00100001
0CEF8 D0 1A                         .db #$D0, #%00011010
0CEFA 55 1A                         .db #$55, #%00011010
0CEFC 95 1A                         .db #$95, #%00011010
0CEFE D7 1A                         .db #$D7, #%00011010
0CF00 09 1A                         .db #$09, #%00011010
0CF02 79 1A                         .db #$79, #%00011010
0CF04 FF                            .db #LEVEL_END
0CF05                           
0CF05                           lvl_layout_05:
0CF05 40 0A                         .db #$40, #%00001010
0CF07 70 1A                         .db #$70, #%00011010
0CF09 B0 42                         .db #$B0, #%01000010
0CF0B 41 A7                         .db #$41, #%10100111
0CF0D B1 22                         .db #$B1, #%00100010
0CF0F D1 15                         .db #$D1, #%00010101
0CF11 22 0A                         .db #$22, #%00001010
0CF13 52 05                         .db #$52, #%00000101
0CF15 B2 42                         .db #$B2, #%01000010
0CF17 03 27                         .db #$03, #%00100111
0CF19 33 67                         .db #$33, #%01100111
0CF1B 73 67                         .db #$73, #%01100111
0CF1D B3 47                         .db #$B3, #%01000111
0CF1F 05 E5                         .db #$05, #%11100101
0CF21 25 A5                         .db #$25, #%10100101
0CF23 35 25                         .db #$35, #%00100101
0CF25 65 45                         .db #$65, #%01000101
0CF27 A5 45                         .db #$A5, #%01000101
0CF29 46 E5                         .db #$46, #%11100101
0CF2B 66 E5                         .db #$66, #%11100101
0CF2D 86 E5                         .db #$86, #%11100101
0CF2F A6 E2                         .db #$A6, #%11100010
0CF31 C6 E5                         .db #$C6, #%11100101
0CF33 27 25                         .db #$27, #%00100101
0CF35 77 05                         .db #$77, #%00000101
0CF37 B7 02                         .db #$B7, #%00000010
0CF39 09 05                         .db #$09, #%00000101
0CF3B 79 05                         .db #$79, #%00000101
0CF3D B9 02                         .db #$B9, #%00000010
0CF3F FF                            .db #LEVEL_END
0CF40                           
0CF40                           lvl_layout_06:
0CF40 00 03                         .db #$00, #%00000011
0CF42 20 03                         .db #$20, #%00000011
0CF44 40 03                         .db #$40, #%00000011
0CF46 A0 03                         .db #$A0, #%00000011
0CF48 C0 03                         .db #$C0, #%00000011
0CF4A 11 03                         .db #$11, #%00000011
0CF4C 31 03                         .db #$31, #%00000011
0CF4E 51 03                         .db #$51, #%00000011
0CF50 91 03                         .db #$91, #%00000011
0CF52 B1 03                         .db #$B1, #%00000011
0CF54 D1 03                         .db #$D1, #%00000011
0CF56 02 03                         .db #$02, #%00000011
0CF58 22 03                         .db #$22, #%00000011
0CF5A 42 03                         .db #$42, #%00000011
0CF5C A2 03                         .db #$A2, #%00000011
0CF5E C2 03                         .db #$C2, #%00000011
0CF60 13 03                         .db #$13, #%00000011
0CF62 33 03                         .db #$33, #%00000011
0CF64 53 03                         .db #$53, #%00000011
0CF66 93 03                         .db #$93, #%00000011
0CF68 B3 03                         .db #$B3, #%00000011
0CF6A D3 03                         .db #$D3, #%00000011
0CF6C 04 03                         .db #$04, #%00000011
0CF6E 24 03                         .db #$24, #%00000011
0CF70 44 03                         .db #$44, #%00000011
0CF72 A4 03                         .db #$A4, #%00000011
0CF74 C4 03                         .db #$C4, #%00000011
0CF76 15 03                         .db #$15, #%00000011
0CF78 35 03                         .db #$35, #%00000011
0CF7A 55 03                         .db #$55, #%00000011
0CF7C 95 03                         .db #$95, #%00000011
0CF7E B5 03                         .db #$B5, #%00000011
0CF80 D5 03                         .db #$D5, #%00000011
0CF82 06 03                         .db #$06, #%00000011
0CF84 26 03                         .db #$26, #%00000011
0CF86 46 03                         .db #$46, #%00000011
0CF88 A6 03                         .db #$A6, #%00000011
0CF8A C6 03                         .db #$C6, #%00000011
0CF8C 17 03                         .db #$17, #%00000011
0CF8E 37 03                         .db #$37, #%00000011
0CF90 57 03                         .db #$57, #%00000011
0CF92 97 03                         .db #$97, #%00000011
0CF94 B7 03                         .db #$B7, #%00000011
0CF96 D7 03                         .db #$D7, #%00000011
0CF98 08 03                         .db #$08, #%00000011
0CF9A 28 03                         .db #$28, #%00000011
0CF9C 48 03                         .db #$48, #%00000011
0CF9E A8 03                         .db #$A8, #%00000011
0CFA0 C8 03                         .db #$C8, #%00000011
0CFA2 19 03                         .db #$19, #%00000011
0CFA4 39 03                         .db #$39, #%00000011
0CFA6 59 03                         .db #$59, #%00000011
0CFA8 99 03                         .db #$99, #%00000011
0CFAA B9 03                         .db #$B9, #%00000011
0CFAC D9 03                         .db #$D9, #%00000011
0CFAE 60 4B                         .db #$60, #%01001011
0CFB0 71 CB                         .db #$71, #%11001011
0CFB2 62 4B                         .db #$62, #%01001011
0CFB4 64 4B                         .db #$64, #%01001011
0CFB6 75 CB                         .db #$75, #%11001011
0CFB8 66 4B                         .db #$66, #%01001011
0CFBA 68 4B                         .db #$68, #%01001011
0CFBC 79 0B                         .db #$79, #%00001011
0CFBE 70 03                         .db #$70, #%00000011
0CFC0 72 03                         .db #$72, #%00000011
0CFC2 74 03                         .db #$74, #%00000011
0CFC4 76 03                         .db #$76, #%00000011
0CFC6 78 03                         .db #$78, #%00000011
0CFC8 FF                            .db #LEVEL_END
0CFC9                           
0CFC9                           lvl_layout_07:
0CFC9 00 11                         .db #$00, #%00010001
0CFCB 01 FA                         .db #$01, #%11111010
0CFCD 12 BA                         .db #$12, #%10111010
0CFCF 23 DA                         .db #$23, #%11011010
0CFD1 34 FA                         .db #$34, #%11111010
0CFD3 05 DA                         .db #$05, #%11011010
0CFD5 15 FA                         .db #$15, #%11111010
0CFD7 45 BA                         .db #$45, #%10111010
0CFD9 56 DA                         .db #$56, #%11011010
0CFDB 27 BA                         .db #$27, #%10111010
0CFDD 67 DA                         .db #$67, #%11011010
0CFDF 38 3A                         .db #$38, #%00111010
0CFE1 78 BA                         .db #$78, #%10111010
0CFE3 09 3A                         .db #$09, #%00111010
0CFE5 39 3A                         .db #$39, #%00111010
0CFE7 89 1A                         .db #$89, #%00011010
0CFE9 B0 01                         .db #$B0, #%00000001
0CFEB D0 01                         .db #$D0, #%00000001
0CFED A1 01                         .db #$A1, #%00000001
0CFEF C1 11                         .db #$C1, #%00010001
0CFF1 B2 01                         .db #$B2, #%00000001
0CFF3 D2 01                         .db #$D2, #%00000001
0CFF5 A3 01                         .db #$A3, #%00000001
0CFF7 C3 01                         .db #$C3, #%00000001
0CFF9 B4 01                         .db #$B4, #%00000001
0CFFB D4 01                         .db #$D4, #%00000001
0CFFD A5 01                         .db #$A5, #%00000001
0CFFF C5 01                         .db #$C5, #%00000001
0D001 B6 01                         .db #$B6, #%00000001
0D003 D6 01                         .db #$D6, #%00000001
0D005 A7 01                         .db #$A7, #%00000001
0D007 C7 01                         .db #$C7, #%00000001
0D009 FF                            .db #LEVEL_END
0D00A                           
0D00A                           lvl_layout_08:
0D00A 40 B5                         .db #$40, #%10110101
0D00C 31 0D                         .db #$31, #%00001101
0D00E 61 10                         .db #$61, #%00010000
0D010 42 C7                         .db #$42, #%11000111
0D012 52 67                         .db #$52, #%01100111
0D014 63 C7                         .db #$63, #%11000111
0D016 83 E7                         .db #$83, #%11100111
0D018 05 07                         .db #$05, #%00000111
0D01A 15 3A                         .db #$15, #%00111010
0D01C 07 63                         .db #$07, #%01100011
0D01E 27 13                         .db #$27, #%00010011
0D020 38 A5                         .db #$38, #%10100101
0D022 09 14                         .db #$09, #%00010100
0D024 19 05                         .db #$19, #%00000101
0D026 D0 E0                         .db #$D0, #%11100000
0D028 C2 A0                         .db #$C2, #%10100000
0D02A B3 E0                         .db #$B3, #%11100000
0D02C D5 E0                         .db #$D5, #%11100000
0D02E C6 E0                         .db #$C6, #%11100000
0D030 B0 C4                         .db #$B0, #%11000100
0D032 C0 A4                         .db #$C0, #%10100100
0D034 D1 A4                         .db #$D1, #%10100100
0D036 C4 24                         .db #$C4, #%00100100
0D038 C5 04                         .db #$C5, #%00000100
0D03A B7 44                         .db #$B7, #%01000100
0D03C B8 A4                         .db #$B8, #%10100100
0D03E D9 05                         .db #$D9, #%00000101
0D040 FF                            .db #LEVEL_END
0D041                           
0D041                           lvl_layout_09:
0D041 81 04                         .db #$81, #%00000100
0D043 D1 04                         .db #$D1, #%00000100
0D045 32 C4                         .db #$32, #%11000100
0D047 A2 C4                         .db #$A2, #%11000100
0D049 C2 24                         .db #$C2, #%00100100
0D04B 13 24                         .db #$13, #%00100100
0D04D 53 04                         .db #$53, #%00000100
0D04F C3 27                         .db #$C3, #%00100111
0D051 15 6C                         .db #$15, #%01101100
0D053 55 6C                         .db #$55, #%01101100
0D055 95 6C                         .db #$95, #%01101100
0D057 D5 0C                         .db #$D5, #%00001100
0D059 27 C7                         .db #$27, #%11000111
0D05B 47 C7                         .db #$47, #%11000111
0D05D 67 C7                         .db #$67, #%11000111
0D05F 87 C7                         .db #$87, #%11000111
0D061 A7 C7                         .db #$A7, #%11000111
0D063 C7 C7                         .db #$C7, #%11000111
0D065 08 13                         .db #$08, #%00010011
0D067 28 15                         .db #$28, #%00010101
0D069 48 12                         .db #$48, #%00010010
0D06B 68 15                         .db #$68, #%00010101
0D06D 88 11                         .db #$88, #%00010001
0D06F A8 10                         .db #$A8, #%00010000
0D071 C8 14                         .db #$C8, #%00010100
0D073 09 07                         .db #$09, #%00000111
0D075 19 03                         .db #$19, #%00000011
0D077 39 05                         .db #$39, #%00000101
0D079 59 02                         .db #$59, #%00000010
0D07B 79 05                         .db #$79, #%00000101
0D07D 99 01                         .db #$99, #%00000001
0D07F B9 00                         .db #$B9, #%00000000
0D081 D9 04                         .db #$D9, #%00000100
0D083 FF                            .db #LEVEL_END
0D084                           
0D084                           lvl_layout_10:
0D084 00 02                         .db #$00, #%00000010
0D086 10 C9                         .db #$10, #%11001001
0D088 50 C9                         .db #$50, #%11001001
0D08A 90 C9                         .db #$90, #%11001001
0D08C D0 C9                         .db #$D0, #%11001001
0D08E 31 C9                         .db #$31, #%11001001
0D090 71 C9                         .db #$71, #%11001001
0D092 B1 C9                         .db #$B1, #%11001001
0D094 13 C9                         .db #$13, #%11001001
0D096 53 C9                         .db #$53, #%11001001
0D098 93 C9                         .db #$93, #%11001001
0D09A D3 C9                         .db #$D3, #%11001001
0D09C 34 C9                         .db #$34, #%11001001
0D09E 74 C9                         .db #$74, #%11001001
0D0A0 B4 C9                         .db #$B4, #%11001001
0D0A2 16 C9                         .db #$16, #%11001001
0D0A4 56 C9                         .db #$56, #%11001001
0D0A6 96 C9                         .db #$96, #%11001001
0D0A8 D6 C9                         .db #$D6, #%11001001
0D0AA 37 C9                         .db #$37, #%11001001
0D0AC 77 C9                         .db #$77, #%11001001
0D0AE B7 C9                         .db #$B7, #%11001001
0D0B0 D8 12                         .db #$D8, #%00010010
0D0B2 FF                            .db #LEVEL_END
0D0B3                           
0D0B3                           lvl_layout_11:
0D0B3 00 65                         .db #$00, #%01100101
0D0B5 40 45                         .db #$40, #%01000101
0D0B7 50 A7                         .db #$50, #%10100111
0D0B9 80 05                         .db #$80, #%00000101
0D0BB 90 A7                         .db #$90, #%10100111
0D0BD A0 65                         .db #$A0, #%01100101
0D0BF 01 43                         .db #$01, #%01000011
0D0C1 31 23                         .db #$31, #%00100011
0D0C3 61 A7                         .db #$61, #%10100111
0D0C5 81 A7                         .db #$81, #%10100111
0D0C7 A1 63                         .db #$A1, #%01100011
0D0C9 02 44                         .db #$02, #%01000100
0D0CB 32 44                         .db #$32, #%01000100
0D0CD 92 04                         .db #$92, #%00000100
0D0CF A2 64                         .db #$A2, #%01100100
0D0D1 03 40                         .db #$03, #%01000000
0D0D3 33 40                         .db #$33, #%01000000
0D0D5 63 A1                         .db #$63, #%10100001
0D0D7 83 A2                         .db #$83, #%10100010
0D0D9 93 00                         .db #$93, #%00000000
0D0DB A3 60                         .db #$A3, #%01100000
0D0DD 04 41                         .db #$04, #%01000001
0D0DF 34 41                         .db #$34, #%01000001
0D0E1 94 02                         .db #$94, #%00000010
0D0E3 A4 62                         .db #$A4, #%01100010
0D0E5 05 47                         .db #$05, #%01000111
0D0E7 35 67                         .db #$35, #%01100111
0D0E9 75 0A                         .db #$75, #%00001010
0D0EB 85 47                         .db #$85, #%01000111
0D0ED B5 47                         .db #$B5, #%01000111
0D0EF 06 E7                         .db #$06, #%11100111
0D0F1 16 5A                         .db #$16, #%01011010
0D0F3 26 11                         .db #$26, #%00010001
0D0F5 46 13                         .db #$46, #%00010011
0D0F7 56 1A                         .db #$56, #%00011010
0D0F9 66 14                         .db #$66, #%00010100
0D0FB 86 10                         .db #$86, #%00010000
0D0FD 96 5A                         .db #$96, #%01011010
0D0FF A6 12                         .db #$A6, #%00010010
0D101 C6 15                         .db #$C6, #%00010101
0D103 D6 E7                         .db #$D6, #%11100111
0D105 FF                            .db #LEVEL_END
0D106                           
0D106                           lvl_layout_12:
0D106 00 00                         .db #$00, #%00000000
0D108 50 C0                         .db #$50, #%11000000
0D10A 80 00                         .db #$80, #%00000000
0D10C 61 00                         .db #$61, #%00000000
0D10E 22 C0                         .db #$22, #%11000000
0D110 82 E0                         .db #$82, #%11100000
0D112 C2 E0                         .db #$C2, #%11100000
0D114 A3 20                         .db #$A3, #%00100000
0D116 C3 10                         .db #$C3, #%00010000
0D118 04 00                         .db #$04, #%00000000
0D11A 54 20                         .db #$54, #%00100000
0D11C 15 0A                         .db #$15, #%00001010
0D11E 25 C0                         .db #$25, #%11000000
0D120 55 E0                         .db #$55, #%11100000
0D122 86 20                         .db #$86, #%00100000
0D124 C6 E0                         .db #$C6, #%11100000
0D126 C7 A0                         .db #$C7, #%10100000
0D128 88 00                         .db #$88, #%00000000
0D12A 59 00                         .db #$59, #%00000000
0D12C 89 20                         .db #$89, #%00100000
0D12E D9 1A                         .db #$D9, #%00011010
0D130 FF                            .db #LEVEL_END
0D131                           
0D131                           lvl_layout_13:
0D131 10 E0                         .db #$10, #%11100000
0D133 20 E0                         .db #$20, #%11100000
0D135 30 E0                         .db #$30, #%11100000
0D137 40 40                         .db #$40, #%01000000
0D139 80 60                         .db #$80, #%01100000
0D13B C0 E0                         .db #$C0, #%11100000
0D13D D0 E0                         .db #$D0, #%11100000
0D13F 41 40                         .db #$41, #%01000000
0D141 71 60                         .db #$71, #%01100000
0D143 52 60                         .db #$52, #%01100000
0D145 A2 20                         .db #$A2, #%00100000
0D147 43 60                         .db #$43, #%01100000
0D149 83 60                         .db #$83, #%01100000
0D14B 14 74                         .db #$14, #%01110100
0D14D 54 74                         .db #$54, #%01110100
0D14F 94 74                         .db #$94, #%01110100
0D151 D4 14                         .db #$D4, #%00010100
0D153 15 0D                         .db #$15, #%00001101
0D155 55 0D                         .db #$55, #%00001101
0D157 95 0D                         .db #$95, #%00001101
0D159 D5 0D                         .db #$D5, #%00001101
0D15B 26 0D                         .db #$26, #%00001101
0D15D 46 0D                         .db #$46, #%00001101
0D15F 66 0D                         .db #$66, #%00001101
0D161 86 0D                         .db #$86, #%00001101
0D163 A6 0D                         .db #$A6, #%00001101
0D165 C6 0D                         .db #$C6, #%00001101
0D167 07 10                         .db #$07, #%00010000
0D169 37 0D                         .db #$37, #%00001101
0D16B 77 0D                         .db #$77, #%00001101
0D16D B7 0D                         .db #$B7, #%00001101
0D16F 28 0D                         .db #$28, #%00001101
0D171 48 0D                         .db #$48, #%00001101
0D173 68 0D                         .db #$68, #%00001101
0D175 88 0D                         .db #$88, #%00001101
0D177 A8 0D                         .db #$A8, #%00001101
0D179 C8 0D                         .db #$C8, #%00001101
0D17B 19 0D                         .db #$19, #%00001101
0D17D 59 0D                         .db #$59, #%00001101
0D17F 99 0D                         .db #$99, #%00001101
0D181 D9 0D                         .db #$D9, #%00001101
0D183 FF                            .db #LEVEL_END
0D184                           
0D184                           lvl_layout_14:
0D184 00 67                         .db #$00, #%01100111
0D186 40 67                         .db #$40, #%01100111
0D188 80 67                         .db #$80, #%01100111
0D18A C0 27                         .db #$C0, #%00100111
0D18C 01 27                         .db #$01, #%00100111
0D18E 31 C7                         .db #$31, #%11000111
0D190 51 C7                         .db #$51, #%11000111
0D192 71 C7                         .db #$71, #%11000111
0D194 91 C7                         .db #$91, #%11000111
0D196 B1 C7                         .db #$B1, #%11000111
0D198 D1 07                         .db #$D1, #%00000111
0D19A 02 E7                         .db #$02, #%11100111
0D19C 06 E7                         .db #$06, #%11100111
0D19E 13 07                         .db #$13, #%00000111
0D1A0 D3 07                         .db #$D3, #%00000111
0D1A2 15 07                         .db #$15, #%00000111
0D1A4 35 07                         .db #$35, #%00000111
0D1A6 55 07                         .db #$55, #%00000111
0D1A8 75 07                         .db #$75, #%00000111
0D1AA 95 07                         .db #$95, #%00000111
0D1AC B5 07                         .db #$B5, #%00000111
0D1AE D5 07                         .db #$D5, #%00000111
0D1B0 17 07                         .db #$17, #%00000111
0D1B2 37 C7                         .db #$37, #%11000111
0D1B4 57 C7                         .db #$57, #%11000111
0D1B6 77 C7                         .db #$77, #%11000111
0D1B8 97 C7                         .db #$97, #%11000111
0D1BA B7 C7                         .db #$B7, #%11000111
0D1BC D7 07                         .db #$D7, #%00000111
0D1BE 19 07                         .db #$19, #%00000111
0D1C0 D9 07                         .db #$D9, #%00000111
0D1C2 22 4C                         .db #$22, #%01001100
0D1C4 62 4C                         .db #$62, #%01001100
0D1C6 A2 4C                         .db #$A2, #%01001100
0D1C8 24 0C                         .db #$24, #%00001100
0D1CA 44 0C                         .db #$44, #%00001100
0D1CC 64 0C                         .db #$64, #%00001100
0D1CE 84 0C                         .db #$84, #%00001100
0D1D0 A4 0C                         .db #$A4, #%00001100
0D1D2 C4 0C                         .db #$C4, #%00001100
0D1D4 26 0C                         .db #$26, #%00001100
0D1D6 46 0C                         .db #$46, #%00001100
0D1D8 66 0C                         .db #$66, #%00001100
0D1DA 86 0C                         .db #$86, #%00001100
0D1DC A6 0C                         .db #$A6, #%00001100
0D1DE C6 0C                         .db #$C6, #%00001100
0D1E0 28 4C                         .db #$28, #%01001100
0D1E2 68 4C                         .db #$68, #%01001100
0D1E4 A8 4C                         .db #$A8, #%01001100
0D1E6 32 04                         .db #$32, #%00000100
0D1E8 52 04                         .db #$52, #%00000100
0D1EA 72 04                         .db #$72, #%00000100
0D1EC 92 04                         .db #$92, #%00000100
0D1EE B2 04                         .db #$B2, #%00000100
0D1F0 38 04                         .db #$38, #%00000100
0D1F2 58 04                         .db #$58, #%00000100
0D1F4 78 04                         .db #$78, #%00000100
0D1F6 98 04                         .db #$98, #%00000100
0D1F8 B8 04                         .db #$B8, #%00000100
0D1FA FF                            .db #LEVEL_END
0D1FB                           
0D1FB                           lvl_layout_15:
0D1FB 00 7A                         .db #$00, #%01111010
0D1FD 40 7A                         .db #$40, #%01111010
0D1FF 80 7A                         .db #$80, #%01111010
0D201 C0 3A                         .db #$C0, #%00111010
0D203 31 04                         .db #$31, #%00000100
0D205 51 04                         .db #$51, #%00000100
0D207 81 04                         .db #$81, #%00000100
0D209 A1 04                         .db #$A1, #%00000100
0D20B 05 E4                         .db #$05, #%11100100
0D20D 15 64                         .db #$15, #%01100100
0D20F 55 64                         .db #$55, #%01100100
0D211 95 64                         .db #$95, #%01100100
0D213 D5 E4                         .db #$D5, #%11100100
0D215 26 04                         .db #$26, #%00000100
0D217 46 44                         .db #$46, #%01000100
0D219 76 64                         .db #$76, #%01100100
0D21B C6 04                         .db #$C6, #%00000100
0D21D 17 04                         .db #$17, #%00000100
0D21F 37 64                         .db #$37, #%01100100
0D221 77 44                         .db #$77, #%01000100
0D223 B7 04                         .db #$B7, #%00000100
0D225 18 64                         .db #$18, #%01100100
0D227 58 64                         .db #$58, #%01100100
0D229 98 64                         .db #$98, #%01100100
0D22B FF                            .db #LEVEL_END
0D22C                           
0D22C                           lvl_layout_16:
0D22C 10 E1                         .db #$10, #%11100001
0D22E 20 9A                         .db #$20, #%10011010
0D230 30 E1                         .db #$30, #%11100001
0D232 40 E1                         .db #$40, #%11100001
0D234 50 E1                         .db #$50, #%11100001
0D236 60 C1                         .db #$60, #%11000001
0D238 70 E1                         .db #$70, #%11100001
0D23A 80 E1                         .db #$80, #%11100001
0D23C 90 E1                         .db #$90, #%11100001
0D23E A0 61                         .db #$A0, #%01100001
0D240 21 C1                         .db #$21, #%11000001
0D242 A1 1A                         .db #$A1, #%00011010
0D244 B1 41                         .db #$B1, #%01000001
0D246 A2 E1                         .db #$A2, #%11100001
0D248 B2 E1                         .db #$B2, #%11100001
0D24A C2 1A                         .db #$C2, #%00011010
0D24C D2 E1                         .db #$D2, #%11100001
0D24E 63 1A                         .db #$63, #%00011010
0D250 C3 C1                         .db #$C3, #%11000001
0D252 14 61                         .db #$14, #%01100001
0D254 54 61                         .db #$54, #%01100001
0D256 94 C1                         .db #$94, #%11000001
0D258 15 61                         .db #$15, #%01100001
0D25A 55 41                         .db #$55, #%01000001
0D25C 85 1A                         .db #$85, #%00011010
0D25E 16 41                         .db #$16, #%01000001
0D260 46 1A                         .db #$46, #%00011010
0D262 56 61                         .db #$56, #%01100001
0D264 A6 61                         .db #$A6, #%01100001
0D266 17 67                         .db #$17, #%01100111
0D268 57 67                         .db #$57, #%01100111
0D26A 97 67                         .db #$97, #%01100111
0D26C D7 07                         .db #$D7, #%00000111
0D26E 28 41                         .db #$28, #%01000001
0D270 58 61                         .db #$58, #%01100001
0D272 A8 41                         .db #$A8, #%01000001
0D274 18 11                         .db #$18, #%00010001
0D276 38 11                         .db #$38, #%00010001
0D278 98 11                         .db #$98, #%00010001
0D27A B8 11                         .db #$B8, #%00010001
0D27C D8 11                         .db #$D8, #%00010001
0D27E 59 09                         .db #$59, #%00001001
0D280 FF                            .db #LEVEL_END
0D281                           
0D281                           lvl_layout_17:
0D281 10 EA                         .db #$10, #%11101010
0D283 20 E2                         .db #$20, #%11100010
0D285 30 62                         .db #$30, #%01100010
0D287 70 02                         .db #$70, #%00000010
0D289 80 6A                         .db #$80, #%01101010
0D28B 90 22                         .db #$90, #%00100010
0D28D 01 AA                         .db #$01, #%10101010
0D28F 31 6A                         .db #$31, #%01101010
0D291 81 2A                         .db #$81, #%00101010
0D293 A1 02                         .db #$A1, #%00000010
0D295 C1 02                         .db #$C1, #%00000010
0D297 D1 0A                         .db #$D1, #%00001010
0D299 32 EA                         .db #$32, #%11101010
0D29B 42 6A                         .db #$42, #%01101010
0D29D 62 02                         .db #$62, #%00000010
0D29F 92 6A                         .db #$92, #%01101010
0D2A1 D2 E2                         .db #$D2, #%11100010
0D2A3 43 1A                         .db #$43, #%00011010
0D2A5 53 CA                         .db #$53, #%11001010
0D2A7 73 02                         .db #$73, #%00000010
0D2A9 83 4A                         .db #$83, #%01001010
0D2AB B3 CA                         .db #$B3, #%11001010
0D2AD C3 EA                         .db #$C3, #%11101010
0D2AF 04 0A                         .db #$04, #%00001010
0D2B1 14 A2                         .db #$14, #%10100010
0D2B3 24 AA                         .db #$24, #%10101010
0D2B5 44 AA                         .db #$44, #%10101010
0D2B7 64 6A                         .db #$64, #%01101010
0D2B9 65 6A                         .db #$65, #%01101010
0D2BB A5 AA                         .db #$A5, #%10101010
0D2BD 06 EA                         .db #$06, #%11101010
0D2BF 16 62                         .db #$16, #%01100010
0D2C1 66 22                         .db #$66, #%00100010
0D2C3 86 2A                         .db #$86, #%00101010
0D2C5 17 42                         .db #$17, #%01000010
0D2C7 47 12                         .db #$47, #%00010010
0D2C9 57 6A                         .db #$57, #%01101010
0D2CB 97 4A                         .db #$97, #%01001010
0D2CD A7 02                         .db #$A7, #%00000010
0D2CF 18 02                         .db #$18, #%00000010
0D2D1 28 0A                         .db #$28, #%00001010
0D2D3 38 22                         .db #$38, #%00100010
0D2D5 68 2A                         .db #$68, #%00101010
0D2D7 88 62                         .db #$88, #%01100010
0D2D9 C8 0A                         .db #$C8, #%00001010
0D2DB D8 02                         .db #$D8, #%00000010
0D2DD 19 2A                         .db #$19, #%00101010
0D2DF 39 2A                         .db #$39, #%00101010
0D2E1 69 42                         .db #$69, #%01000010
0D2E3 99 2A                         .db #$99, #%00101010
0D2E5 B9 42                         .db #$B9, #%01000010
0D2E7 FF                            .db #LEVEL_END
0D2E8                           
0D2E8                           lvl_layout_18:
0D2E8 00 12                         .db #$00, #%00010010
0D2EA 40 1A                         .db #$40, #%00011010
0D2EC 50 11                         .db #$50, #%00010001
0D2EE 70 1A                         .db #$70, #%00011010
0D2F0 80 10                         .db #$80, #%00010000
0D2F2 D0 13                         .db #$D0, #%00010011
0D2F4 01 1A                         .db #$01, #%00011010
0D2F6 22 15                         .db #$22, #%00010101
0D2F8 A2 1A                         .db #$A2, #%00011010
0D2FA B2 14                         .db #$B2, #%00010100
0D2FC 03 67                         .db #$03, #%01100111
0D2FE 43 67                         .db #$43, #%01100111
0D300 83 67                         .db #$83, #%01100111
0D302 24 09                         .db #$24, #%00001001
0D304 74 0D                         .db #$74, #%00001101
0D306 C4 0A                         .db #$C4, #%00001010
0D308 05 A7                         .db #$05, #%10100111
0D30A 45 27                         .db #$45, #%00100111
0D30C 95 27                         .db #$95, #%00100111
0D30E 16 C7                         .db #$16, #%11000111
0D310 36 67                         .db #$36, #%01100111
0D312 86 67                         .db #$86, #%01100111
0D314 D6 07                         .db #$D6, #%00000111
0D316 07 A3                         .db #$07, #%10100011
0D318 27 23                         .db #$27, #%00100011
0D31A 47 C7                         .db #$47, #%11000111
0D31C 57 A0                         .db #$57, #%10100000
0D31E 67 A7                         .db #$67, #%10100111
0D320 77 20                         .db #$77, #%00100000
0D322 97 C7                         .db #$97, #%11000111
0D324 A7 A4                         .db #$A7, #%10100100
0D326 B7 A7                         .db #$B7, #%10100111
0D328 C7 24                         .db #$C7, #%00100100
0D32A 28 0B                         .db #$28, #%00001011
0D32C 38 A3                         .db #$38, #%10100011
0D32E 78 08                         .db #$78, #%00001000
0D330 88 A3                         .db #$88, #%10100011
0D332 C8 0C                         .db #$C8, #%00001100
0D334 D8 A4                         .db #$D8, #%10100100
0D336 09 43                         .db #$09, #%01000011
0D338 59 40                         .db #$59, #%01000000
0D33A A9 44                         .db #$A9, #%01000100
0D33C FF                            .db #LEVEL_END
0D33D                           
0D33D                           lvl_layout_19:
0D33D 11 A8                         .db #$11, #%10101000
0D33F 21 68                         .db #$21, #%01101000
0D341 81 28                         .db #$81, #%00101000
0D343 B1 48                         .db #$B1, #%01001000
0D345 22 48                         .db #$22, #%01001000
0D347 62 68                         .db #$62, #%01101000
0D349 B2 28                         .db #$B2, #%00101000
0D34B 23 28                         .db #$23, #%00101000
0D34D 83 28                         .db #$83, #%00101000
0D34F B3 28                         .db #$B3, #%00101000
0D351 04 E8                         .db #$04, #%11101000
0D353 24 08                         .db #$24, #%00001000
0D355 44 08                         .db #$44, #%00001000
0D357 64 E8                         .db #$64, #%11101000
0D359 84 E8                         .db #$84, #%11101000
0D35B C4 A8                         .db #$C4, #%10101000
0D35D D4 E8                         .db #$D4, #%11101000
0D35F 15 48                         .db #$15, #%01001000
0D361 55 C8                         .db #$55, #%11001000
0D363 75 C8                         .db #$75, #%11001000
0D365 A5 08                         .db #$A5, #%00001000
0D367 36 08                         .db #$36, #%00001000
0D369 B6 08                         .db #$B6, #%00001000
0D36B 27 48                         .db #$27, #%01001000
0D36D 97 28                         .db #$97, #%00101000
0D36F C7 08                         .db #$C7, #%00001000
0D371 09 61                         .db #$09, #%01100001
0D373 19 11                         .db #$19, #%00010001
0D375 49 61                         .db #$49, #%01100001
0D377 89 31                         .db #$89, #%00110001
0D379 A9 61                         .db #$A9, #%01100001
0D37B FF                            .db #LEVEL_END
0D37C                           
0D37C                           lvl_layout_20:
0D37C 00 60                         .db #$00, #%01100000
0D37E 10 1A                         .db #$10, #%00011010
0D380 40 A7                         .db #$40, #%10100111
0D382 50 20                         .db #$50, #%00100000
0D384 70 1A                         .db #$70, #%00011010
0D386 80 40                         .db #$80, #%01000000
0D388 B0 1A                         .db #$B0, #%00011010
0D38A C0 20                         .db #$C0, #%00100000
0D38C 01 40                         .db #$01, #%01000000
0D38E 31 1A                         .db #$31, #%00011010
0D390 A1 40                         .db #$A1, #%01000000
0D392 D1 1A                         .db #$D1, #%00011010
0D394 43 67                         .db #$43, #%01100111
0D396 83 47                         .db #$83, #%01000111
0D398 44 A7                         .db #$44, #%10100111
0D39A 54 25                         .db #$54, #%00100101
0D39C 94 08                         .db #$94, #%00001000
0D39E A4 A7                         .db #$A4, #%10100111
0D3A0 55 05                         .db #$55, #%00000101
0D3A2 65 08                         .db #$65, #%00001000
0D3A4 06 27                         .db #$06, #%00100111
0D3A6 36 67                         .db #$36, #%01100111
0D3A8 76 28                         .db #$76, #%00101000
0D3AA A6 27                         .db #$A6, #%00100111
0D3AC D6 07                         .db #$D6, #%00000111
0D3AE A7 A7                         .db #$A7, #%10100111
0D3B0 08 60                         .db #$08, #%01100000
0D3B2 09 60                         .db #$09, #%01100000
0D3B4 18 A7                         .db #$18, #%10100111
0D3B6 48 A7                         .db #$48, #%10100111
0D3B8 58 47                         .db #$58, #%01000111
0D3BA 88 27                         .db #$88, #%00100111
0D3BC B8 20                         .db #$B8, #%00100000
0D3BE D8 1A                         .db #$D8, #%00011010
0D3C0 59 15                         .db #$59, #%00010101
0D3C2 69 60                         .db #$69, #%01100000
0D3C4 A9 60                         .db #$A9, #%01100000
0D3C6 FF                            .db #LEVEL_END
0D3C7                           
0D3C7                           lvl_layout_21:
0D3C7 00 13                         .db #$00, #%00010011
0D3C9 10 11                         .db #$10, #%00010001
0D3CB 20 67                         .db #$20, #%01100111
0D3CD 60 67                         .db #$60, #%01100111
0D3CF A0 47                         .db #$A0, #%01000111
0D3D1 D0 15                         .db #$D0, #%00010101
0D3D3 32 63                         .db #$32, #%01100011
0D3D5 72 05                         .db #$72, #%00000101
0D3D7 82 43                         .db #$82, #%01000011
0D3D9 B2 43                         .db #$B2, #%01000011
0D3DB 33 03                         .db #$33, #%00000011
0D3DD 43 2A                         .db #$43, #%00101010
0D3DF 63 7A                         .db #$63, #%01111010
0D3E1 73 2A                         .db #$73, #%00101010
0D3E3 A3 7A                         .db #$A3, #%01111010
0D3E5 34 63                         .db #$34, #%01100011
0D3E7 74 63                         .db #$74, #%01100011
0D3E9 B4 43                         .db #$B4, #%01000011
0D3EB 06 63                         .db #$06, #%01100011
0D3ED 46 63                         .db #$46, #%01100011
0D3EF 86 63                         .db #$86, #%01100011
0D3F1 C6 C3                         .db #$C6, #%11000011
0D3F3 07 7A                         .db #$07, #%01111010
0D3F5 47 7A                         .db #$47, #%01111010
0D3F7 67 0A                         .db #$67, #%00001010
0D3F9 87 7A                         .db #$87, #%01111010
0D3FB 08 13                         .db #$08, #%00010011
0D3FD 18 43                         .db #$18, #%01000011
0D3FF 48 63                         .db #$48, #%01100011
0D401 88 63                         .db #$88, #%01100011
0D403 FF                            .db #LEVEL_END
0D404                           
0D404                           lvl_layout_22:
0D404 00 7A                         .db #$00, #%01111010
0D406 40 7A                         .db #$40, #%01111010
0D408 80 7A                         .db #$80, #%01111010
0D40A C0 3A                         .db #$C0, #%00111010
0D40C 13 67                         .db #$13, #%01100111
0D40E 83 A7                         .db #$83, #%10100111
0D410 B3 07                         .db #$B3, #%00000111
0D412 14 07                         .db #$14, #%00000111
0D414 44 07                         .db #$44, #%00000111
0D416 A4 07                         .db #$A4, #%00000111
0D418 15 A5                         .db #$15, #%10100101
0D41A 45 A5                         .db #$45, #%10100101
0D41C 85 25                         .db #$85, #%00100101
0D41E 86 05                         .db #$86, #%00000101
0D420 A6 05                         .db #$A6, #%00000101
0D422 17 11                         .db #$17, #%00010001
0D424 47 A1                         .db #$47, #%10100001
0D426 87 A1                         .db #$87, #%10100001
0D428 B7 A1                         .db #$B7, #%10100001
0D42A 18 41                         .db #$18, #%01000001
0D42C 68 01                         .db #$68, #%00000001
0D42E D8 01                         .db #$D8, #%00000001
0D430 FF                            .db #LEVEL_END
0D431                           
0D431                           lvl_layout_23:
0D431 00 71                         .db #$00, #%01110001
0D433 40 11                         .db #$40, #%00010001
0D435 50 43                         .db #$50, #%01000011
0D437 80 D1                         .db #$80, #%11010001
0D439 90 E3                         .db #$90, #%11100011
0D43B A0 63                         .db #$A0, #%01100011
0D43D 01 63                         .db #$01, #%01100011
0D43F 41 63                         .db #$41, #%01100011
0D441 A1 63                         .db #$A1, #%01100011
0D443 02 63                         .db #$02, #%01100011
0D445 42 63                         .db #$42, #%01100011
0D447 62 11                         .db #$62, #%00010001
0D449 A2 67                         .db #$A2, #%01100111
0D44B 04 63                         .db #$04, #%01100011
0D44D 44 23                         .db #$44, #%00100011
0D44F 64 D1                         .db #$64, #%11010001
0D451 74 E3                         .db #$74, #%11100011
0D453 84 F1                         .db #$84, #%11110001
0D455 94 E3                         .db #$94, #%11100011
0D457 A4 C7                         .db #$A4, #%11000111
0D459 B4 23                         .db #$B4, #%00100011
0D45B 05 63                         .db #$05, #%01100011
0D45D 45 23                         .db #$45, #%00100011
0D45F 06 71                         .db #$06, #%01110001
0D461 46 11                         .db #$46, #%00010001
0D463 56 E3                         .db #$56, #%11100011
0D465 D6 07                         .db #$D6, #%00000111
0D467 17 D1                         .db #$17, #%11010001
0D469 27 43                         .db #$27, #%01000011
0D46B 67 D1                         .db #$67, #%11010001
0D46D A7 C7                         .db #$A7, #%11000111
0D46F C7 A7                         .db #$C7, #%10100111
0D471 D7 B3                         .db #$D7, #%10110011
0D473 28 43                         .db #$28, #%01000011
0D475 78 43                         .db #$78, #%01000011
0D477 29 43                         .db #$29, #%01000011
0D479 79 43                         .db #$79, #%01000011
0D47B FF                           .db #LEVEL_END
0D47C                           
0D47C                           lvl_layout_24:
0D47C 02 67                         .db #$02, #%01100111
0D47E 42 67                         .db #$42, #%01100111
0D480 82 67                         .db #$82, #%01100111
0D482 05 67                         .db #$05, #%01100111
0D484 45 67                         .db #$45, #%01100111
0D486 85 67                         .db #$85, #%01100111
0D488 08 67                         .db #$08, #%01100111
0D48A 48 67                         .db #$48, #%01100111
0D48C 88 67                         .db #$88, #%01100111
0D48E 30 E7                         .db #$30, #%11100111
0D490 70 E7                         .db #$70, #%11100111
0D492 B0 E7                         .db #$B0, #%11100111
0D494 34 E7                         .db #$34, #%11100111
0D496 74 E7                         .db #$74, #%11100111
0D498 B4 E7                         .db #$B4, #%11100111
0D49A 20 13                         .db #$20, #%00010011
0D49C 40 10                         .db #$40, #%00010000
0D49E 80 02                         .db #$80, #%00000010
0D4A0 41 05                         .db #$41, #%00000101
0D4A2 B1 09                         .db #$B1, #%00001001
0D4A4 02 09                         .db #$02, #%00001001
0D4A6 52 0C                         .db #$52, #%00001100
0D4A8 13 11                         .db #$13, #%00010001
0D4AA 33 04                         .db #$33, #%00000100
0D4AC 74 0C                         .db #$74, #%00001100
0D4AE B4 08                         .db #$B4, #%00001000
0D4B0 15 09                         .db #$15, #%00001001
0D4B2 55 0C                         .db #$55, #%00001100
0D4B4 95 0C                         .db #$95, #%00001100
0D4B6 47 03                         .db #$47, #%00000011
0D4B8 A7 12                         .db #$A7, #%00010010
0D4BA 18 15                         .db #$18, #%00010101
0D4BC 09 05                         .db #$09, #%00000101
0D4BE 19 03                         .db #$19, #%00000011
0D4C0 FF                            .db #LEVEL_END
0D4C1                           
0D4C1                           lvl_layout_25:
0D4C1 00 12                         .db #$00, #%00010010
0D4C3 10 63                         .db #$10, #%01100011
0D4C5 60 63                         .db #$60, #%01100011
0D4C7 A0 07                         .db #$A0, #%00000111
0D4C9 01 11                         .db #$01, #%00010001
0D4CB A1 02                         .db #$A1, #%00000010
0D4CD 02 67                         .db #$02, #%01100111
0D4CF 42 07                         .db #$42, #%00000111
0D4D1 62 67                         .db #$62, #%01100111
0D4D3 A2 C7                         .db #$A2, #%11000111
0D4D5 03 61                         .db #$03, #%01100001
0D4D7 43 01                         .db #$43, #%00000001
0D4D9 63 61                         .db #$63, #%01100001
0D4DB A6 E7                         .db #$A6, #%11100111
0D4DD B6 47                         .db #$B6, #%01000111
0D4DF C6 01                         .db #$C6, #%00000001
0D4E1 B7 42                         .db #$B7, #%01000010
0D4E3 B8 42                         .db #$B8, #%01000010
0D4E5 C8 0A                         .db #$C8, #%00001010
0D4E7 09 7A                         .db #$09, #%01111010
0D4E9 49 7A                         .db #$49, #%01111010
0D4EB 89 3A                         .db #$89, #%00111010
0D4ED B9 42                         .db #$B9, #%01000010
0D4EF FF                            .db #LEVEL_END
0D4F0                           
0D4F0                           ;; Level layout address pointers
0D4F0                           tbl_lvl_layout_hi:
0D4F0 CE CE CE CE CF                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D4F5 CF CF D0 D0 D0                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D4FA D0 D1 D1 D1 D1                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D4FF D2 D2 D2 D3 D3                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D504 D3 D4 D4 D4 D4                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D509                           
0D509                           tbl_lvl_layout_lo:
0D509 11 2C 61 94 05                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D50E 40 C9 0A 41 84                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D513 B3 06 31 84 FB                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D518 2C 81 E8 3D 7C                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D51D C7 04 31 7C C1                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D522                           
0D522                           ;; Ball start position (#$YX)
0D522                           tbl_lvl_ball_startpos:
0D522 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D527 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D52C 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D531 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D536 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D53B                               
0D53B                           ;; Ball start direction, color and tile score
0D53B                           ;; #% ccc v tttt
0D53B                           ;;    ||| | ++++-- tile score
0D53B                           ;;    ||| +------- vertical direction, up (0) or down
0D53B                           ;;    +++--------- color (CBRYGM)
0D53B                           tbl_lvl_ball_init:
0D53B 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D540 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D545 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D54A 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D54F 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D554                           
0D554                           
0D554                           
0D554                           ;; Helper table to multiply values by 16
0D554                           tbl_Times16:
0D554 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D55C 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D564                               
0D564                           
0D564                           ;; Helper table to multiply values by 64
0D564                           tbl_Times64:
0D564 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D568                           
0D568                           
0D568                           ;; Metatile ID to CHR data mapper
0D568                           tbl_GametileTopLeft:
0D568 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D572                           
0D572                           tbl_GametileTopRight:
0D572 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D57C                           
0D57C                           tbl_GametileBottomLeft:
0D57C 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D586                           
0D586                           tbl_GametileBottomRight:
0D586 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D590                           
0D590                           ;; Metatile ID to RAM byte data mapper
0D590                           tbl_GameTileRamByte:
0D590 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D595                           
0D595                           ;; HUD text data
0D595                           tbl_HudText:
0D595 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D59D 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D5A4 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D5AC 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D5B1                           
0D5B1                           ;; NMI handler
0D5B1                           NMI:
0D5B1                               .include "interrupt/nmi.asm"
0D5B1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D5B1                           ;;
0D5B1                           ;; include/nmi.asm
0D5B1                           ;;
0D5B1                           ;; Non-maskable interrupt script. This script is being executed
0D5B1                           ;; when vBlank hits.
0D5B1                           ;;
0D5B1                           ;;
0D5B1                           
0D5B1                               ;; Preserve accumulator through stack
0D5B1 48                            PHA
0D5B2                           
0D5B2                               ;; Should NMI be skipped?
0D5B2 A5 13                         LDA skip_nmi
0D5B4 F0 03                         BEQ +
0D5B6 4C BD D6                          JMP +skip_nmi
0D5B9                               +
0D5B9                           
0D5B9                               ;; When in NMI, skip additional NMI requests
0D5B9 A9 01                         LDA #$01
0D5BB 85 13                         STA skip_nmi
0D5BD                           
0D5BD                               ;; Preserve X, Y, and PC through stack
0D5BD 8A                            TXA
0D5BE 48                            PHA
0D5BF 98                            TYA
0D5C0 48                            PHA
0D5C1 08                            PHP
0D5C2                               
0D5C2                               ;; Check forced NMI skip
0D5C2 A5 14                         LDA force_skip_nmi
0D5C4 F0 03                         BEQ +
0D5C6 4C AC D6                          JMP +force_skip_nmi
0D5C9                               +
0D5C9                           
0D5C9                               ;; Update PPU mask
0D5C9                               ;LDA #$00
0D5C9                               ;STA PPU_CTRL
0D5C9 A5 12                         LDA soft_ppu_mask
0D5CB 8D 01 20                      STA PPU_MASK
0D5CE                               
0D5CE                               
0D5CE                               ;; Additional PPU updates go here
0D5CE                               .include "game/interrupt/nmi.asm"
0D5CE                           
0D5CE                               ;; Check if ppu_buffer needs updating
0D5CE A5 38                         LDA ppu_buffer_update
0D5D0 D0 03                         BNE +
0D5D2 4C 14 D6                          JMP +no_ppu_buffer_update
0D5D5                               +
0D5D5                           
0D5D5                               ;; Reset ppu control register and mask
0D5D5 A2 00                         LDX #$00
0D5D7 8E 00 20                      STX PPU_CTRL
0D5DA 8E 01 20                      STX PPU_MASK
0D5DD                           
0D5DD                               ;; Set up loop
0D5DD                               -
0D5DD                                   ;; Reset hi/lo latch
0D5DD 2C 02 20                          BIT PPU_STATUS
0D5E0                           
0D5E0                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D5E0 BD 00 03                          LDA ppu_buffer,x
0D5E3 8D 06 20                          STA PPU_ADDR
0D5E6 E8                                INX
0D5E7 BD 00 03                          LDA ppu_buffer,x
0D5EA 8D 06 20                          STA PPU_ADDR
0D5ED                           
0D5ED                                   ;; Write ppu_buffer data to PPU_ADDR
0D5ED E8                                INX
0D5EE BD 00 03                          LDA ppu_buffer,x
0D5F1 8D 07 20                          STA PPU_DATA
0D5F4                           
0D5F4                                   ;; Check if updating is done (eg. X is at pointer)
0D5F4 E8                                INX
0D5F5 E4 39                             CPX ppu_buffer_pointer
0D5F7 F0 03                             BEQ +
0D5F9 4C DD D5                      JMP -
0D5FC                           +
0D5FC                           
0D5FC                               ;; Reset ppu buffer update and pointer
0D5FC A9 00                         LDA #$00
0D5FE 85 38                         STA ppu_buffer_update
0D600 85 39                         STA ppu_buffer_pointer
0D602                               
0D602                               ;; Reset scrolling position
0D602 8D 05 20                      STA PPU_SCROLL
0D605 8D 05 20                      STA PPU_SCROLL
0D608                           
0D608                               ;; Restore ppu control register and mask
0D608 A9 90                         LDA #%10010000
0D60A 8D 00 20                      STA PPU_CTRL
0D60D A5 12                         LDA soft_ppu_mask
0D60F 8D 01 20                      STA PPU_MASK
0D612 A9 00                         LDA #$00
0D614                           
0D614                           ;; Continue other NMI stuff
0D614                           +no_ppu_buffer_update:
0D614                           
0D614                               ;; Reset sprite RAM, draw sprites
0D614 8D 03 20                      STA OAM_ADDR
0D617 A9 02                         LDA #$02
0D619 8D 14 40                      STA OAM_DMA
0D61C                           
0D61C                               ;; Decrease explosion frame counters
0D61C A0 04                         LDY #MAX_ANIMATIONS
0D61E A2 00                         LDX #$00
0D620                               -
0D620 BD 60 03                          LDA explosion_framecounter,x
0D623 F0 03                             BEQ +
0D625 DE 60 03                              DEC explosion_framecounter,x
0D628                                   +
0D628 E8                                INX
0D629 88                                DEY
0D62A F0 03                             BEQ +done        
0D62C 4C 20 D6                      JMP -
0D62F                           +done:
0D62F                           
0D62F                               ;; Decrease nudge counter
0D62F A5 3C                         LDA nudge_counter
0D631 F0 02                         BEQ +
0D633 C6 3C                             DEC nudge_counter
0D635                               +
0D635                           
0D635                               ;; Decrease bonus counter
0D635 A5 3D                         LDA bonus_counter
0D637 F0 02                         BEQ +
0D639 C6 3D                             DEC bonus_counter
0D63B                               +
0D63B                           
0D63B                               ;; Decrease kill counter
0D63B A5 3E                         LDA kill_counter
0D63D F0 02                         BEQ +
0D63F C6 3E                             DEC kill_counter
0D641                               +
0D641                           
0D641                               ;; Play background noise
0D641 A5 37                         LDA screen_mode
0D643 29 01                         AND #IS_GAME_SCREEN
0D645 F0 21                         BEQ +
0D647                                   .include "game/include/main/background_sound.asm"
0D647                               ;; At random times, set max_noise period to $03-$0A
0D647 A5 41                         LDA max_noise
0D649 D0 1D                         BNE +
0D64B 20 3B C4                          JSR sub_GetRandomNumber
0D64E 29 EF                             AND #%11101111
0D650 D0 16                             BNE +
0D652                                   
0D652 A5 15                             LDA frame_counter
0D654 85 16                             STA random_seed
0D656 20 3B C4                          JSR sub_GetRandomNumber
0D659 29 07                             AND #$07
0D65B 69 03                             ADC #$03
0D65D 85 41                             STA max_noise
0D65F A9 01                             LDA #$01
0D661 85 42                             STA sweep_noise
0D663 A9 34                             LDA #$34
0D665 8D 0C 40                          STA NOISE_VOLUME
0D668                           
0D668                               +
0D668                           
0D668                               ;; if sweep noise = $00: constant noise
0D668                               ;; else if sweep noise > $80: decrease pitch
0D668                               ;; else: inrease pitch
0D668 A5 42                         LDA sweep_noise
0D66A F0 18                         BEQ +constantNoise
0D66C 30 2A                         BMI +decreaseNoise
0D66E                           
0D66E                           ;; Sweep noise up to max noise pitch
0D66E                           +increaseNoise:
0D66E C6 43                         DEC current_noise
0D670 A5 43                         LDA current_noise
0D672 8D 0E 40                      STA NOISE_PERIOD
0D675 C5 41                         CMP max_noise
0D677 D0 08                         BNE +
0D679 A9 00                             LDA #$00
0D67B 85 42                             STA sweep_noise
0D67D A9 0A                             LDA #$0A
0D67F 85 44                             STA noise_counter
0D681                               +
0D681 4C AC D6                      JMP +endNoise
0D684                           
0D684                           ;; Keep noise at constant pitch
0D684                           +constantNoise:
0D684 A5 41                         LDA max_noise
0D686 F0 24                         BEQ +endNoise
0D688                           
0D688 A5 44                         LDA noise_counter
0D68A D0 07                         BNE +
0D68C A9 80                             LDA #$80
0D68E 85 42                             STA sweep_noise
0D690 4C AC D6                          JMP +endNoise
0D693                               +
0D693 C6 44                         DEC noise_counter
0D695 4C AC D6                      JMP +endNoise
0D698                           
0D698                           ;; Sweep noise down to initial pitch
0D698                           +decreaseNoise:
0D698 E6 43                         INC current_noise
0D69A A5 43                         LDA current_noise
0D69C 8D 0E 40                      STA NOISE_PERIOD
0D69F C9 0E                         CMP #$0E
0D6A1 D0 09                         BNE +endNoise
0D6A3                           
0D6A3 20 CB C4                      JSR sub_BackgroundNoise
0D6A6 A9 00                         LDA #$00
0D6A8 85 41                         STA max_noise
0D6AA 85 42                         STA sweep_noise
0D6AC                           
0D6AC                           +endNoise:
0D6AC                           
0D6AC                               +
0D6AC                           
0D6AC                           
0D6AC                           
0D6AC                           ;; This is what happens when we forced nmi skip
0D6AC                           +force_skip_nmi:
0D6AC                           
0D6AC                               ;; Increase frame counters
0D6AC E6 15                         INC frame_counter
0D6AE                           
0D6AE                               ;; reset ball_update_position
0D6AE A9 00                         LDA #$00
0D6B0 85 35                         STA ball_update_position
0D6B2                           
0D6B2                               ;; Don't skip next NMI request
0D6B2 A9 00                         LDA #$00
0D6B4 85 13                         STA skip_nmi
0D6B6 85 45                         STA check_nmi
0D6B8                           
0D6B8                               ;; Restore X, Y and PC from stack
0D6B8 28                            PLP
0D6B9 68                            PLA
0D6BA A8                            TAY
0D6BB 68                            PLA
0D6BC AA                            TAX
0D6BD                           
0D6BD                           +skip_nmi:
0D6BD                               ;; Restore accumulator from stack
0D6BD 68                            PLA
0D6BE                           
0D6BE                               ;; Return
0D6BE 40                            RTI
0D6BF                           
0D6BF                           ;; IRQ handler (empty)
0D6BF                           IRQ:
0D6BF                               .include "interrupt/irq.asm"
0D6BF 40                            RTI0D6C0                           
0D6C0                           ;; Interrupt vectors
0D6C0 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA B1 D5                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE BF D6                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
