	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; TEST MODE (comment to disable, or set to level number)
	                            TESTING = #0 ; start at level 1 with 255 lives
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Timers 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           unfreeze_timer         .dsb 1
00042                           
00042                           ;; Current level (doubles as level select variable)
00042                           current_level          .dsb 1
00043                           
00043                           ;; Tile type the ball is currently colliding with
00043                           colliding_tile         .dsb 1
00044                           
00044                           ;; Number of blocks left on screen
00044                           blocks_left            .dsb 1
00045                           
00045                           ;; Sound control variables
00045                           max_noise              .dsb 1
00046                           sweep_noise            .dsb 1
00047                           current_noise          .dsb 1
00048                           noise_timer            .dsb 1
00049                           do_beeps               .dsb 1
0004A                           soft_pulse1            .dsb 1
0004B                           noise_muted            .dsb 1
0004C                           
0004C                           ;; Sound effect variables
0004C                           sfx_address            .dsb 2
0004E                           sfx_timer              .dsb 3
00051                           sfx_frequency          .dsb 2
00053                           
00053                           
00053                           ;; Additional NMI check for timed PPU fade
00053                           check_nmi              .dsb 1
00054                           
00054                           ;; The TV system this game is running on (0=ntsc, 1=pal, 2=dendy, 3=unknown)
00054                           tv_system              .dsb 1
00055                           
00055                           ;; This variable should be used for absolutely nothing
00055                           void                   .dsb 1
00056                           
00056                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 31 C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 31 C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                           
0C04B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C04B                           ;;
0C04B                           ;;  NES TV system detection code
0C04B                           ;;  Copyright 2011 Damian Yerrick
0C04B                           ;;  https://www.nesdev.org/wiki/Detect_TV_system
0C04B                           ;;
0C04B A2 00                         LDX #$00
0C04D A0 00                         LDY #$00
0C04F A9 01                         LDA #$01
0C051 85 53                         STA check_nmi
0C053                               -
0C053 C5 53                             CMP check_nmi
0C055 F0 FC                         BEQ -
0C057 A9 01                         LDA #$01
0C059 85 53                         STA check_nmi
0C05B                               -
0C05B E8                                INX
0C05C D0 01                             BNE +
0C05E C8                                    INY
0C05F C5 53                             + CMP check_nmi
0C061 F0 F8                         BEQ -
0C063 98                            TYA
0C064 38                            SEC
0C065 E9 0A                         SBC #$0A
0C067 C9 03                         CMP #$03
0C069 90 02                         BCC +
0C06B A9 03                             LDA #$03
0C06D 85 54                         + STA tv_system ; 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C06F                           ;;
0C06F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C06F                           
0C06F                           
0C06F                               ;; Tell game to load the intro screen
0C06F A9 80                         LDA #LOAD_INTRO_SCREEN
0C071 85 38                         STA screen_mode
0C073                           
0C073                               ;; Set number of lives (5)
0C073 A9 05                         LDA #$05
0C075 85 1F                         STA ball_lives
0C077                           
0C077                               ;; Start at level 1
0C077 A9 00                         LDA #$00
0C079 85 20                         STA ball_score
0C07B 85 21                         STA ball_score+1
0C07D 85 22                         STA ball_score+2
0C07F 85 23                         STA ball_score+3
0C081 85 24                         STA ball_score+4
0C083 85 25                         STA ball_score+5
0C085                           
0C085                           ifdef TESTING
0C085 A9 FF                         LDA #$FF
0C087 85 1F                         STA ball_lives
0C089 A9 00                         LDA #TESTING
0C08B                           endif
0C08B                           
0C08B 85 42                         STA current_level
0C08D                           
0C08D                           
0C08D                           
0C08D                           ;; Main game loop
0C08D                           lbl_MainGameLoop:
0C08D 20 28 C5                      JSR sub_WaitForNMI ; align main loop
0C090                               .include "game/main.asm"
0C090                           
0C090                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C090                           ;;
0C090                           ;; game/main.asm
0C090                           ;;
0C090                           ;; The main game loop content.
0C090                           ;;
0C090                           ;;
0C090                           
0C090                               ;; Reset sprite pointer every game loop
0C090 A9 00                         LDA #$00
0C092 85 3D                         STA sprite_ram_pointer
0C094                           
0C094                               ;; Store previous buttons
0C094 A5 0F                         LDA buttons_held
0C096 85 0E                         STA buttons_prev
0C098                           
0C098                               ;; Read controller input
0C098 20 14 C5                      JSR sub_ReadController
0C09B                           
0C09B                               ;; Get buttons released
0C09B A5 0F                         LDA buttons_held
0C09D 49 FF                         EOR #$FF
0C09F 25 0E                         AND buttons_prev
0C0A1 85 11                         STA buttons_released
0C0A3                           
0C0A3                               ;; Set buttons pressed
0C0A3 A5 0E                         LDA buttons_prev
0C0A5 49 FF                         EOR #$FF
0C0A7 25 0F                         AND buttons_held
0C0A9 85 10                         STA buttons_pressed
0C0AB                           
0C0AB                               ;; Load screen?
0C0AB A5 38                         LDA screen_mode
0C0AD 29 80                         AND #%10000000
0C0AF F0 1E                         BEQ +screenLoaded
0C0B1                           
0C0B1                               ;; Get screen type to load
0C0B1 A5 38                         LDA screen_mode
0C0B3 29 03                         AND #%00000011
0C0B5 A8                            TAY
0C0B6                               
0C0B6                               ;; Get address to load screen type from
0C0B6 B9 92 D2                      LDA tbl_LoadScreenLo,y
0C0B9 85 0C                         STA pointer
0C0BB B9 8F D2                      LDA tbl_LoadScreenHi,y
0C0BE 85 0D                         STA pointer+1
0C0C0                           
0C0C0                               ;; Load screen
0C0C0 20 CD C6                      JSR sub_DisableRendering
0C0C3 20 10 CA                      JSR sub_JumpToPointer
0C0C6 20 E1 C6                      JSR sub_EnableRendering
0C0C9                               
0C0C9                               ;; Don't load screen anymore next loop
0C0C9 A5 38                         LDA screen_mode
0C0CB 29 7F                         AND #%01111111
0C0CD 85 38                         STA screen_mode
0C0CF                               
0C0CF                           
0C0CF                           +screenLoaded:
0C0CF                               ;; Check if we're on the game screen
0C0CF A5 38                         LDA screen_mode
0C0D1 C9 01                         CMP #IS_GAME_SCREEN
0C0D3 F0 03                         BEQ +
0C0D5 4C 78 C3                          JMP +checkNextScreen
0C0D8                               +
0C0D8                           
0C0D8                               ;; Load sprite 0 in place
0C0D8 A9 18                         LDA #$18
0C0DA 8D 00 02                      STA ADDR_SPRITERAM
0C0DD A9 0F                         LDA #$0F
0C0DF 8D 01 02                      STA ADDR_SPRITERAM+1
0C0E2 A9 22                         LDA #$22
0C0E4 8D 02 02                      STA ADDR_SPRITERAM+2
0C0E7 A9 F8                         LDA #$F8
0C0E9 8D 03 02                      STA ADDR_SPRITERAM+3
0C0EC A9 04                         LDA #$04
0C0EE 85 3D                         STA sprite_ram_pointer
0C0F0                           
0C0F0                               ;; We're on the game screen
0C0F0                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0F0 A5 35                         LDA sprites_update_position
0C0F2 F0 03                         BEQ +
0C0F4 4C DE C2                          JMP +skipSpriteMovement
0C0F7                               +
0C0F7                           
0C0F7                               ;; Check if ball is frozen
0C0F7 A5 37                         LDA ball_flags
0C0F9 29 04                         AND #BALL_IS_FROZEN
0C0FB F0 03                         BEQ +
0C0FD 4C 9D C2                          JMP +skipBallMovement
0C100                               +
0C100                           
0C100                               ;; Move the ball
0C100                               .include "game/include/main/move_ball.asm"
0C100                           
0C100                               ;; Check if ball goes up or down
0C100 A5 37                         LDA ball_flags
0C102 29 10                         AND #BALL_MOVES_DOWN
0C104 F0 2B                         BEQ +moveBallUp
0C106                           
0C106                           
0C106                           +moveBallDown:
0C106                               ;; update the low byte
0C106 A5 1A                         LDA ball_ypos_lo
0C108 85 1C                         STA ball_ypos_lo_prev
0C10A 18                            CLC
0C10B 69 88                         ADC #BALL_SPEED_LO
0C10D 85 1A                         STA ball_ypos_lo
0C10F                           
0C10F                               ;; update the high byte with carry
0C10F A5 19                         LDA ball_ypos_hi
0C111 85 1B                         STA ball_ypos_hi_prev
0C113 69 01                         ADC #BALL_SPEED_HI
0C115 85 19                         STA ball_ypos_hi
0C117                               
0C117                               ;; Check bottom bound
0C117 C9 C8                         CMP #BOUND_BOTTOM
0C119 90 3C                         BCC +checkHorizontalMovement
0C11B F0 3A                         BEQ +checkHorizontalMovement
0C11D                           
0C11D                           
0C11D                               ;; Change ball direction to "up"
0C11D A9 C8                         LDA #BOUND_BOTTOM
0C11F 38                            SEC
0C120 E9 01                         SBC #$01
0C122 85 19                         STA ball_ypos_hi
0C124 A9 00                         LDA #$00
0C126 85 1A                         STA ball_ypos_lo
0C128 A5 37                         LDA ball_flags
0C12A 29 EF                         AND #MOVE_BALL_UP
0C12C 85 37                         STA ball_flags
0C12E 4C 57 C1                      JMP +checkHorizontalMovement
0C131                           
0C131                           
0C131                           +moveBallUp:
0C131                               ;; update the low byte
0C131 A5 1A                         LDA ball_ypos_lo
0C133 85 1C                         STA ball_ypos_lo_prev
0C135 38                            SEC
0C136 E9 88                         SBC #BALL_SPEED_LO
0C138 85 1A                         STA ball_ypos_lo
0C13A                           
0C13A                               ;; update the high byte with carry
0C13A A5 19                         LDA ball_ypos_hi
0C13C 85 1B                         STA ball_ypos_hi_prev
0C13E E9 01                         SBC #BALL_SPEED_HI
0C140 85 19                         STA ball_ypos_hi
0C142                               
0C142                               ;; Check top bound
0C142 C9 30                         CMP #BOUND_TOP
0C144 B0 11                         BCS +checkHorizontalMovement
0C146                           
0C146                               ;; Change ball direction to "down"
0C146 A9 30                         LDA #BOUND_TOP
0C148 18                            CLC
0C149 69 01                         ADC #$01
0C14B 85 19                         STA ball_ypos_hi
0C14D A9 00                         LDA #$00
0C14F 85 1A                         STA ball_ypos_lo
0C151 A5 37                         LDA ball_flags
0C153 09 10                         ORA #MOVE_BALL_DOWN
0C155 85 37                         STA ball_flags
0C157                           
0C157                           
0C157                           +checkHorizontalMovement:
0C157                           
0C157                               ;; Check if ball is being nudged
0C157 A5 3E                         LDA nudge_timer
0C159 D0 41                         BNE +doneBallMovement
0C15B                           
0C15B                               ;; Check if left button is held
0C15B A5 0F                         LDA buttons_held
0C15D 29 02                         AND #BUTTON_LEFT
0C15F F0 1B                         BEQ +
0C161                                   ;; update the low byte
0C161 A5 18                             LDA ball_xpos_lo
0C163 38                                SEC
0C164 E9 88                             SBC #BALL_SPEED_LO
0C166 85 18                             STA ball_xpos_lo
0C168                           
0C168                                   ;; update the high byte
0C168 A5 17                             LDA ball_xpos_hi
0C16A E9 01                             SBC #BALL_SPEED_HI
0C16C 85 17                             STA ball_xpos_hi
0C16E                                   
0C16E                                   ;; Check left bound
0C16E C9 10                             CMP #BOUND_LEFT
0C170 B0 2A                             BCS +doneBallMovement
0C172                                   
0C172                                   ;; Set flag to nudge right and set nudge timer
0C172 A5 37                             LDA ball_flags
0C174 09 02                             ORA #NUDGE_BALL_RIGHT
0C176 20 09 CA                          JSR sub_InitiateNudge
0C179                           
0C179 4C 9C C1                          JMP +doneBallMovement        
0C17C                               +
0C17C                           
0C17C                               ;; Check if right button is held
0C17C A5 0F                         LDA buttons_held
0C17E 29 01                         AND #BUTTON_RIGHT
0C180 F0 1A                         BEQ +
0C182                                   ;; update the low byte
0C182 A5 18                             LDA ball_xpos_lo
0C184 18                                CLC
0C185 69 88                             ADC #BALL_SPEED_LO
0C187 85 18                             STA ball_xpos_lo
0C189                           
0C189                                   ;; update the high byte
0C189 A5 17                             LDA ball_xpos_hi
0C18B 69 01                             ADC #BALL_SPEED_HI
0C18D 85 17                             STA ball_xpos_hi     
0C18F                           
0C18F                                  ;; Check right bound
0C18F C9 E8                             CMP #BOUND_RIGHT
0C191 90 09                             BCC +doneBallMovement
0C193 F0 07                             BEQ +doneBallMovement
0C195                                   
0C195                                   ;; Set flag to nudge left and set nudge timer
0C195 A5 37                             LDA ball_flags
0C197 29 FD                             AND #NUDGE_BALL_LEFT
0C199 20 09 CA                          JSR sub_InitiateNudge
0C19C                               +
0C19C                           
0C19C                           
0C19C                           +doneBallMovement:
0C19C                           
0C19C                               ;; Check nudge
0C19C A5 3E                         LDA nudge_timer
0C19E F0 23                         BEQ +doneBallNudging
0C1A0 A5 37                             LDA ball_flags
0C1A2 29 02                             AND #NUDGE_BALL_RIGHT
0C1A4 F0 10                             BEQ +nudgeBallLeft
0C1A6                                   
0C1A6                                       ;; update the low byte
0C1A6 A5 18                                 LDA ball_xpos_lo
0C1A8 18                                    CLC
0C1A9 69 88                                 ADC #BALL_SPEED_LO
0C1AB 85 18                                 STA ball_xpos_lo
0C1AD                           
0C1AD                                       ;; update the high byte
0C1AD A5 17                                 LDA ball_xpos_hi
0C1AF 69 01                                 ADC #BALL_SPEED_HI
0C1B1 85 17                                 STA ball_xpos_hi  
0C1B3 4C C3 C1                              JMP +doneBallNudging
0C1B6                                   +nudgeBallLeft:
0C1B6                                   
0C1B6                                   ;; update the low byte
0C1B6 A5 18                             LDA ball_xpos_lo
0C1B8 38                                SEC
0C1B9 E9 88                             SBC #BALL_SPEED_LO
0C1BB 85 18                             STA ball_xpos_lo
0C1BD                           
0C1BD                                   ;; update the high byte
0C1BD A5 17                             LDA ball_xpos_hi
0C1BF E9 01                             SBC #BALL_SPEED_HI
0C1C1 85 17                             STA ball_xpos_hi
0C1C3                               +doneBallNudging:
0C1C3                           
0C1C3                               ;; Don't update position again until next frame
0C1C3                               ;; (moved to after move block routine)
0C1C3                           
0C1C3                           +doneBallHandling:
0C1C3                           
0C1C3                               
0C1C3                               ;; Do collision detection
0C1C3                               .include "game/include/main/collision_detection.asm"
0C1C3                           
0C1C3                               ;; Get ball's x-left, x-center, x-right position
0C1C3 A5 17                         LDA ball_xpos_hi
0C1C5 18                            CLC
0C1C6 69 F0                         ADC #BALL_LEFT_WGA
0C1C8 85 2F                         STA ball_left
0C1CA 18                            CLC
0C1CB 69 04                         ADC #BALL_HALF_SIZE
0C1CD 85 30                         STA ball_center
0C1CF 18                            CLC
0C1D0 69 04                         ADC #BALL_HALF_SIZE
0C1D2 85 31                         STA ball_right
0C1D4                           
0C1D4                               ;; Get ball's y-top, y-middle, y-bottom position
0C1D4 A5 19                         LDA ball_ypos_hi
0C1D6 18                            CLC
0C1D7 69 D0                         ADC #BALL_TOP_WGA
0C1D9 85 32                         STA ball_top
0C1DB 18                            CLC
0C1DC 69 04                         ADC #BALL_HALF_SIZE
0C1DE 85 33                         STA ball_middle
0C1E0 18                            CLC
0C1E1 69 04                         ADC #BALL_HALF_SIZE
0C1E3 85 34                         STA ball_bottom
0C1E5                           
0C1E5                           +checkRightCollision:
0C1E5                               ;; Check if ball moves right
0C1E5                               ;; No need to check nudging here as that will never collide with a tile
0C1E5 A5 0F                         LDA buttons_held
0C1E7 29 01                         AND #BUTTON_RIGHT
0C1E9 F0 20                         BEQ +checkLeftCollision
0C1EB                           
0C1EB                               ;; Check tile at right position
0C1EB A5 33                         LDA ball_middle
0C1ED 85 00                         STA temp
0C1EF A5 31                         LDA ball_right
0C1F1 85 01                         STA temp+1
0C1F3 20 B5 C6                      JSR sub_ConvertXYToTileType
0C1F6 29 01                         AND #TILE_IS_SOLID
0C1F8 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1FA                           
0C1FA                               ;; Nudge ball and evaluate tile type
0C1FA A9 01                         LDA #$01
0C1FC 85 36                         STA move_block_space_to_check
0C1FE A5 37                         LDA ball_flags
0C200 29 FD                         AND #NUDGE_BALL_LEFT
0C202 20 09 CA                      JSR sub_InitiateNudge
0C205 20 43 C8                      JSR sub_EvaluateTileType
0C208 4C 2E C2                      JMP +checkTopCollision
0C20B                           
0C20B                           +checkLeftCollision:
0C20B                               ;; Check if ball moves right
0C20B                               ;; No need to check nudging here as that will never collide with a tile
0C20B A5 0F                         LDA buttons_held
0C20D 29 02                         AND #BUTTON_LEFT
0C20F F0 1D                         BEQ +checkTopCollision
0C211                           
0C211                               ;; Check tile at right position
0C211 A5 33                         LDA ball_middle
0C213 85 00                         STA temp
0C215 A5 2F                         LDA ball_left
0C217 85 01                         STA temp+1
0C219 20 B5 C6                      JSR sub_ConvertXYToTileType
0C21C 29 01                         AND #TILE_IS_SOLID
0C21E F0 0E                         BEQ +checkTopCollision
0C220                           
0C220                               ;; Tile is solid; nudge ball and evaluate tile type
0C220 A9 FF                         LDA #$FF
0C222 85 36                         STA move_block_space_to_check
0C224 A5 37                         LDA ball_flags
0C226 09 02                         ORA #NUDGE_BALL_RIGHT
0C228 20 09 CA                      JSR sub_InitiateNudge
0C22B 20 43 C8                      JSR sub_EvaluateTileType
0C22E                               
0C22E                               
0C22E                           +checkTopCollision:
0C22E                               ;; Check if ball moves up
0C22E A5 37                         LDA ball_flags
0C230 29 10                         AND #BALL_MOVES_DOWN
0C232 D0 27                         BNE +checkBottomCollision
0C234                           
0C234                               ;; Check tile at top position
0C234 A5 32                         LDA ball_top
0C236 85 00                         STA temp
0C238 A5 30                         LDA ball_center
0C23A 85 01                         STA temp+1
0C23C 20 B5 C6                      JSR sub_ConvertXYToTileType
0C23F 29 01                         AND #TILE_IS_SOLID
0C241 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C243                           
0C243                               ;; Tile is solid; move ball down and evaluate tile type
0C243 A5 1C                         LDA ball_ypos_lo_prev
0C245 85 1A                         STA ball_ypos_lo
0C247 A5 1B                         LDA ball_ypos_hi_prev
0C249 85 19                         STA ball_ypos_hi
0C24B A5 37                         LDA ball_flags
0C24D 09 10                         ORA #MOVE_BALL_DOWN
0C24F 85 37                         STA ball_flags
0C251                           
0C251 A9 F0                         LDA #$F0 ; which is -16
0C253 85 36                         STA move_block_space_to_check
0C255 20 43 C8                      JSR sub_EvaluateTileType
0C258 4C 7F C2                      JMP +doneCheckingCollision
0C25B                           
0C25B                           +checkBottomCollision:
0C25B                               ;; No movement check needed: since ball is not moving up, it must move down
0C25B                           
0C25B                               ;; Check tile at bottom position
0C25B A5 34                         LDA ball_bottom
0C25D 85 00                         STA temp
0C25F A5 30                         LDA ball_center
0C261 85 01                         STA temp+1
0C263 20 B5 C6                      JSR sub_ConvertXYToTileType
0C266 29 01                         AND #TILE_IS_SOLID
0C268 F0 15                         BEQ +doneCheckingCollision
0C26A                           
0C26A                               ;; Tile is solid; move ball up and evaluate tile type
0C26A A5 1C                         LDA ball_ypos_lo_prev
0C26C 85 1A                         STA ball_ypos_lo
0C26E A5 1B                         LDA ball_ypos_hi_prev
0C270 85 19                         STA ball_ypos_hi
0C272 A5 37                         LDA ball_flags
0C274 29 EF                         AND #MOVE_BALL_UP
0C276 85 37                         STA ball_flags
0C278                           
0C278 A9 10                         LDA #$10
0C27A 85 36                         STA move_block_space_to_check
0C27C 20 43 C8                      JSR sub_EvaluateTileType
0C27F                           
0C27F                           +doneCheckingCollision:
0C27F                           
0C27F                               
0C27F                               ;; Update bonus
0C27F                               .include "game/include/main/update_bonus.asm"
0C27F                           
0C27F                           ;; Update the bonus counter on screen
0C27F                           
0C27F                               ;; If bonus = 000, skip decreasing
0C27F A5 2C                         LDA ball_bonus
0C281 05 2D                         ORA ball_bonus+1
0C283 05 2E                         ORA ball_bonus+2
0C285 F0 0D                         BEQ +done
0C287                           
0C287                               ;; Check if bonus timer is done yet
0C287 A5 3F                         LDA bonus_timer
0C289 D0 09                         BNE +done
0C28B                           
0C28B                               ;; Bonus timer is done
0C28B                               ;; Reset bonus timer
0C28B A9 08                         LDA #BONUS_FRAMES
0C28D 85 3F                         STA bonus_timer
0C28F                               
0C28F                               ;; Subtract one from ball bonus ones
0C28F A2 01                         LDX #$01
0C291 20 C0 D0                      JSR sub_SubtractXFromBonus
0C294                           
0C294                           +done:
0C294                           
0C294                           
0C294                               ;; Check if self-destruct
0C294 A5 10                         LDA buttons_pressed
0C296 29 20                         AND #BUTTON_SELECT
0C298 F0 03                         BEQ +
0C29A 20 DC C8                          JSR sub_Selfdestruct
0C29D                               +
0C29D                           
0C29D                           
0C29D                           +skipBallMovement:
0C29D                               ;; Move blocks a pixel up/down/left/right
0C29D                               .include "game/include/main/move_blocks.asm"
0C29D                           
0C29D                               ;; Set up block loop
0C29D A2 04                         LDX #MAX_ANIMATIONS
0C29F                           -moveBlocksLoop:
0C29F CA                            DEX
0C2A0                           
0C2A0                               ;; Check if block is still moving
0C2A0 BD 80 03                      LDA move_block_timer,x
0C2A3 F0 33                         BEQ +checkNext
0C2A5                               
0C2A5                               ;; Check if block is done moving
0C2A5 C9 01                         CMP #$01
0C2A7 D0 0B                         BNE +
0C2A9                                   ;; If so, draw a tile and remove the sprite
0C2A9 20 0E C7                          JSR sub_DrawMoveTile
0C2AC A9 00                             LDA #$00
0C2AE 9D 80 03                          STA move_block_timer,x
0C2B1 4C D8 C2                          JMP +checkNext
0C2B4                               +
0C2B4                               
0C2B4                               ;; Check in which direction the block is moving
0C2B4                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2B4 BD 88 03                      LDA move_block_flags,x
0C2B7 29 03                         AND #%00000011
0C2B9 F0 14                         BEQ +movingDown
0C2BB C9 01                         CMP #$01
0C2BD F0 0A                         BEQ +movingUp
0C2BF C9 02                         CMP #$02
0C2C1 F0 12                         BEQ +movingRight
0C2C3                               
0C2C3                               ;; Move block in correct direction
0C2C3                               +movingLeft:
0C2C3 DE 78 03                      DEC move_block_x,x
0C2C6 4C D8 C2                      JMP +checkNext
0C2C9                           
0C2C9                               +movingUp:
0C2C9 DE 7C 03                      DEC move_block_y,x
0C2CC 4C D8 C2                      JMP +checkNext
0C2CF                           
0C2CF                               +movingDown:
0C2CF FE 7C 03                      INC move_block_y,x
0C2D2 4C D8 C2                      JMP +checkNext
0C2D5                           
0C2D5                               +movingRight:
0C2D5 FE 78 03                      INC move_block_x,x
0C2D8                           
0C2D8                               ;; Check next block (if any left)
0C2D8                               +checkNext:
0C2D8 E0 00                         CPX #$00
0C2DA D0 C3                         BNE -moveBlocksLoop
0C2DC                               
0C2DC                               ;; Don't update sprites
0C2DC E6 35                         INC sprites_update_position
0C2DE                           
0C2DE                           
0C2DE                           +skipSpriteMovement:
0C2DE                               ;; Testing timed PPU scroll concept (disabled)
0C2DE                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2DE                           
0C2DE                               ;; Check if ball is dead
0C2DE A5 37                         LDA ball_flags
0C2E0 29 01                         AND #BALL_IS_DEAD
0C2E2 F0 03                         BEQ +
0C2E4 4C 06 C3                          JMP +ballIsDead
0C2E7                               +
0C2E7                               
0C2E7                               ;; Add ball to sprite buffer
0C2E7 A6 3D                         LDX sprite_ram_pointer
0C2E9 A5 19                         LDA ball_ypos_hi
0C2EB 9D 00 02                      STA ADDR_SPRITERAM,x
0C2EE E8                            INX
0C2EF A9 01                         LDA #BALL_TILE_CHR
0C2F1 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F4 E8                            INX
0C2F5 A9 00                         LDA #BALL_ATTR
0C2F7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2FA E8                            INX
0C2FB A5 17                         LDA ball_xpos_hi
0C2FD 9D 00 02                      STA ADDR_SPRITERAM,x
0C300 E8                            INX
0C301 86 3D                         STX sprite_ram_pointer
0C303 4C 17 C3                      JMP +drawBlocks
0C306                           
0C306                           +ballIsDead:
0C306                               ;; Check if kill timer has reset
0C306 A5 40                         LDA kill_timer
0C308 F0 03                         BEQ +
0C30A 4C 17 C3                          JMP +drawBlocks
0C30D                               +
0C30D                               
0C30D                               ;; Take a live
0C30D C6 1F                         DEC ball_lives
0C30F D0 03                         BNE +
0C311                                   ;; If no lives left, initiate game over sequence
0C311 4C CA C3                          JMP lbl_GameOver
0C314                               +
0C314                               
0C314                               ;; Reload current level
0C314 4C E1 C4                      JMP lbl_InitiateLevelLoad
0C317                           
0C317                           
0C317                           +drawBlocks:
0C317                               ;; Draw moving block(s, if any)
0C317                               .include "game/include/main/draw_blocks.asm"
0C317                           
0C317                           ;; Handle movement of move blocks
0C317                           
0C317                               ;; Set up a loop
0C317 A0 04                         LDY #MAX_ANIMATIONS
0C319                           -drawBlocksLoop:
0C319 88                            DEY
0C31A                           
0C31A                               ;; If timer is zero, check the next move block
0C31A B9 80 03                      LDA move_block_timer,y
0C31D F0 52                         BEQ +nextMoveBlock
0C31F                               
0C31F                               ;; Get current sprite pointer
0C31F A6 3D                         LDX sprite_ram_pointer
0C321                           
0C321                               ;; Draw the sprites on screen
0C321 B9 7C 03                      LDA move_block_y,y
0C324 9D 00 02                      STA ADDR_SPRITERAM,x
0C327 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C32A 18                            CLC
0C32B 69 08                         ADC #$08
0C32D 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C330 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C333 E8                            INX
0C334                           
0C334 A9 52                         LDA #$52 ; Top left chr id
0C336 9D 00 02                      STA ADDR_SPRITERAM,x
0C339 A9 53                         LDA #$53 ; Top right chr id
0C33B 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C33E A9 62                         LDA #$62 ; Bottom left chr id
0C340 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C343 A9 63                         LDA #$63 ; Bottom right chr id
0C345 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C348 E8                            INX
0C349                           
0C349 A9 00                         LDA #BALL_ATTR
0C34B 9D 00 02                      STA ADDR_SPRITERAM,x
0C34E 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C351 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C354 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C357 E8                            INX
0C358                           
0C358 B9 78 03                      LDA move_block_x,y
0C35B 9D 00 02                      STA ADDR_SPRITERAM,x
0C35E 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C361 18                            CLC
0C362 69 08                         ADC #$08
0C364 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C367 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C36A                           
0C36A                               ;; Update sprite RAM pointer
0C36A A5 3D                         LDA sprite_ram_pointer
0C36C 18                            CLC
0C36D 69 10                         ADC #$10
0C36F 85 3D                         STA sprite_ram_pointer
0C371                           
0C371                           
0C371                           
0C371                           +nextMoveBlock:
0C371                               ;; Check the next move block
0C371 C0 00                         CPY #$00
0C373 D0 A4                         BNE -drawBlocksLoop
0C375                           
0C375 4C C4 C3                      JMP +doneScreenLoad
0C378                           
0C378                           
0C378                           
0C378                           +checkNextScreen:
0C378                           
0C378                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C378                               ;; Upon pressing START, the selected level will start
0C378                               .include "game/include/main/select_level.asm"
0C378                           
0C378                               ;; Change level number on start screen
0C378 A5 10                         LDA buttons_pressed
0C37A 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C37C F0 3C                         BEQ +checkStartPress
0C37E                           
0C37E                                   ;; Select next level (1, 5, 9, 13, 17)
0C37E A5 42                             LDA current_level
0C380 18                                CLC
0C381 69 04                             ADC #$04
0C383 C9 14                             CMP #$14
0C385 D0 02                             BNE +
0C387 A9 00                                 LDA #$00
0C389                                   +
0C389 85 42                             STA current_level
0C38B                                   
0C38B                                   ;; Convert level number to two-byte value
0C38B A9 00                             LDA #$00
0C38D 85 03                             STA temp+3
0C38F A5 42                             LDA current_level
0C391 18                                CLC
0C392 69 01                             ADC #$01
0C394                           
0C394                               -
0C394 C9 0A                             CMP #$0A
0C396 90 08                             BCC +
0C398 E6 03                                 INC temp+3
0C39A 38                                    SEC
0C39B E9 0A                                 SBC #$0A
0C39D 4C 94 C3                              JMP -
0C3A0                                   +
0C3A0                           
0C3A0                                   ;; Add level number to PPU buffer
0C3A0 18                                CLC
0C3A1 69 01                             ADC #$01
0C3A3 85 02                             STA temp+2
0C3A5 A9 20                             LDA #$20
0C3A7 85 00                             STA temp
0C3A9 A9 D0                             LDA #$D0
0C3AB 85 01                             STA temp+1
0C3AD 20 25 D1                          JSR sub_WriteByteToPPUBuffer
0C3B0                                   
0C3B0 C6 01                             DEC temp+1
0C3B2 A4 03                             LDY temp+3
0C3B4 C8                                INY
0C3B5 84 02                             STY temp+2
0C3B7 20 25 D1                          JSR sub_WriteByteToPPUBuffer
0C3BA                                   
0C3BA                               +checkStartPress:
0C3BA                           
0C3BA                           
0C3BA                           
0C3BA                               ;; If START button is pressed
0C3BA A5 10                         LDA buttons_pressed
0C3BC 29 10                         AND #BUTTON_START
0C3BE F0 04                         BEQ +
0C3C0                                   ;; Start the level
0C3C0 A9 81                             LDA #LOAD_GAME_SCREEN
0C3C2 85 38                             STA screen_mode
0C3C4                               +
0C3C4                           
0C3C4                           
0C3C4                           
0C3C4                           +doneScreenLoad:
0C3C4                           
0C3C4                               ;; Load animations (if any)
0C3C4                               ;; and sprite clean-up
0C3C4 20 13 CA                      JSR sub_LoadAnimations
0C3C7                           
0C3C7 4C 8D C0                      JMP lbl_MainGameLoop
0C3CA                           
0C3CA                           ;; Following sequences are outside main game loop
0C3CA                           .include "game/include/main/game_over.asm"
0C3CA                           
0C3CA                           ;; Game over sequence
0C3CA                           lbl_GameOver:
0C3CA                           
0C3CA                               ;; Disable noise channel
0C3CA A9 00                         LDA #$00
0C3CC 8D 15 40                      STA APU_STATUS
0C3CF 8D 0C 40                      STA NOISE_VOLUME
0C3D2                               
0C3D2                               ;; Do blinds effect
0C3D2 20 A3 C5                      JSR sub_BlindsEffect
0C3D5                           
0C3D5                               ;; Disable draw after HUD to disable screen
0C3D5 20 28 C5                      JSR sub_WaitForNMI
0C3D8                               -
0C3D8 AD 02 20                          LDA PPU_STATUS
0C3DB 29 40                             AND #SPRITE_0_HIT
0C3DD D0 F9                         BNE -
0C3DF                               -
0C3DF AD 02 20                          LDA PPU_STATUS
0C3E2 29 40                             AND #SPRITE_0_HIT
0C3E4 F0 F9                         BEQ -
0C3E6 A9 00                         LDA #$00
0C3E8 8D 01 20                      STA PPU_MASK
0C3EB                           
0C3EB                               ;; Remove game area from view
0C3EB 2C 02 20                      BIT PPU_STATUS
0C3EE A9 20                         LDA #$20
0C3F0 8D 06 20                      STA PPU_ADDR
0C3F3 A9 A0                         LDA #$A0
0C3F5 8D 06 20                      STA PPU_ADDR
0C3F8 A9 00                         LDA #$00
0C3FA A2 16                         LDX #$16
0C3FC                               -xLoop:
0C3FC A0 20                             LDY #$20
0C3FE                                   -yLoop:
0C3FE 8D 07 20                              STA PPU_DATA
0C401 88                                    DEY
0C402 D0 FA                             BNE -yLoop
0C404 CA                                DEX
0C405 D0 F5                         BNE -xLoop
0C407                               
0C407                               ;; Pause for a little while
0C407 A2 18                         LDX #$18
0C409                               -
0C409 20 28 C5                          JSR sub_WaitForNMI
0C40C CA                                DEX
0C40D D0 FA                         BNE -
0C40F                                       
0C40F                               ;; Do flash effect
0C40F 20 BC C9                      JSR sub_FlashEffect
0C412                           
0C412                               ;; Draw GAME OVER tiles over game screen
0C412 A9 21                         LDA #$21
0C414 85 00                         STA temp
0C416 A9 EB                         LDA #$EB
0C418 85 01                         STA temp+1
0C41A                           
0C41A A2 00                         LDX #$00
0C41C                               -gameOverTileLoop:
0C41C BD 4D DA                          LDA tbl_GameOver,x
0C41F 85 02                             STA temp+2
0C421 20 25 D1                          JSR sub_WriteByteToPPUBuffer
0C424 E6 01                             INC temp+1
0C426 E8                                INX
0C427 E0 0A                             CPX #$0A
0C429 D0 F1                         BNE -gameOverTileLoop
0C42B                               
0C42B                               ;; Update GAME OVER attributes on game screen
0C42B A9 23                         LDA #$23
0C42D 85 00                         STA temp
0C42F A9 DA                         LDA #$DA
0C431 85 01                         STA temp+1
0C433 A9 AA                         LDA #$AA
0C435 85 02                         STA temp+2
0C437 A2 04                         LDX #$04
0C439                               -
0C439 20 25 D1                          JSR sub_WriteByteToPPUBuffer
0C43C E6 01                             INC temp+1
0C43E CA                                DEX
0C43F D0 F8                         BNE -
0C441 20 28 C5                      JSR sub_WaitForNMI
0C444                               
0C444                              
0C444                               ;; If player score is larger than high score
0C444                               ;; Overwrite high score with player score
0C444                               ;; [@TODO]
0C444                               
0C444                               
0C444                               ;; If player presses either A or START, (soft) reset the game
0C444                               -checkController:
0C444 20 14 C5                          JSR sub_ReadController
0C447 A5 0F                             LDA buttons_held
0C449 29 90                             AND #%10010000
0C44B F0 F7                         BEQ -checkController
0C44D 4C 4B C0                      JMP lbl_SoftReset
0C450                           
0C450                           .include "game/include/main/level_win.asm"
0C450                           
0C450                           ;; Handling of level win state
0C450                           lbl_LevelWin:
0C450                           
0C450                               ;; Freeze the ball
0C450 A5 37                         LDA ball_flags
0C452 09 04                         ORA #FREEZE_BALL
0C454 85 37                         STA ball_flags
0C456                           
0C456                               ;; Disable noise channel
0C456 A9 01                         LDA #$01
0C458 85 4B                         STA noise_muted
0C45A                               
0C45A                               ;; Wait a few frames
0C45A A2 18                         LDX #$18
0C45C 20 FD D0                      JSR sub_WaitXFrames
0C45F                           
0C45F                               ;; Set null tile color to yellow
0C45F A9 3F                         LDA #$3F
0C461 85 00                         STA temp
0C463 A9 02                         LDA #$02
0C465 85 01                         STA temp+1
0C467 A9 38                         LDA #$38
0C469 85 02                         STA temp+2
0C46B 20 25 D1                      JSR sub_WriteByteToPPUBuffer
0C46E                               
0C46E                               ;; Quick and dirty way to remove ball from screen
0C46E A9 EF                         LDA #$EF
0C470 8D 04 02                      STA ADDR_SPRITERAM+4
0C473 8D 05 02                      STA ADDR_SPRITERAM+5
0C476 8D 06 02                      STA ADDR_SPRITERAM+6
0C479 8D 07 02                      STA ADDR_SPRITERAM+7
0C47C                               
0C47C                               ;; Initiate frequency beeps (@TODO)
0C47C                               
0C47C                               ;; Wait a few frames
0C47C A2 10                         LDX #$10
0C47E 20 FD D0                      JSR sub_WaitXFrames
0C481                               
0C481                               ;; Restore null tile color to dark blue
0C481 A9 3F                         LDA #$3F
0C483 85 00                         STA temp
0C485 A9 02                         LDA #$02
0C487 85 01                         STA temp+1
0C489 A9 12                         LDA #$12
0C48B 85 02                         STA temp+2
0C48D 20 25 D1                      JSR sub_WriteByteToPPUBuffer
0C490                           
0C490                               ;; Wait a few frames
0C490 A2 2D                         LDX #$2D
0C492 20 FD D0                      JSR sub_WaitXFrames
0C495                               
0C495                           
0C495                               ;; Play the end level sweep sound effect, and
0C495                               ;; initiate bonus score routine
0C495 A9 B8                         LDA #$B8
0C497 85 4A                         STA soft_pulse1
0C499                           
0C499 A9 01                         LDA #$01
0C49B 8D 15 40                      STA APU_STATUS
0C49E 85 49                         STA do_beeps
0C4A0                           
0C4A0                               -bonusPointsLoop:
0C4A0                                   ;; Check how many bonus points to subtract
0C4A0                                   ;; (either the max, or what's left)
0C4A0 A5 2C                             LDA ball_bonus
0C4A2 05 2D                             ORA ball_bonus+1
0C4A4 D0 06                             BNE +fullBonus
0C4A6 A5 2E                             LDA ball_bonus+2
0C4A8 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C4AA 90 02                             BCC +partBonus
0C4AC                           
0C4AC                                   +fullBonus:
0C4AC A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C4AE                                   +partBonus:
0C4AE                           
0C4AE                                   ;; Put value that's added to score on the stack
0C4AE AA                                TAX
0C4AF BD F4 DA                          LDA tbl_BonusToScore,x
0C4B2 48                                PHA
0C4B3                           
0C4B3                                   ;; Subtract X-register from bonus
0C4B3 20 C0 D0                          JSR sub_SubtractXFromBonus
0C4B6                           
0C4B6                                   ;; Get value from stack and add it to the score
0C4B6 68                                PLA
0C4B7 20 37 C5                          JSR sub_AddAccumulatorToScore
0C4BA                           
0C4BA                                   ;; Wait for NMI twice
0C4BA 20 28 C5                          JSR sub_WaitForNMI
0C4BD 20 28 C5                          JSR sub_WaitForNMI
0C4C0                           
0C4C0                                   ;; Check if bonus countdown is done
0C4C0 A5 2C                             LDA ball_bonus
0C4C2 05 2D                             ORA ball_bonus+1
0C4C4 05 2E                             ORA ball_bonus+2
0C4C6 D0 D8                         BNE -bonusPointsLoop
0C4C8                           
0C4C8                               ;; fade out the beeping
0C4C8 A2 08                         LDX #$08
0C4CA                               -fadeOutLoop:
0C4CA 20 28 C5                          JSR sub_WaitForNMI
0C4CD 20 28 C5                          JSR sub_WaitForNMI
0C4D0 C6 4A                             DEC soft_pulse1
0C4D2 CA                                DEX
0C4D3 D0 F5                         BNE -fadeOutLoop
0C4D5                           
0C4D5                               ;; Stop random beeping
0C4D5 A9 02                         LDA #$02
0C4D7 85 49                         STA do_beeps
0C4D9                               
0C4D9                               ;; Wait a few frames
0C4D9 A2 30                         LDX #$30
0C4DB 20 FD D0                      JSR sub_WaitXFrames
0C4DE                           
0C4DE                               ;; Load next level
0C4DE 4C E1 C4                      JMP lbl_InitiateLevelLoad
0C4E1                               
0C4E1                           .include "game/include/main/initiate_level_load.asm"
0C4E1                           
0C4E1                           ;; Load level
0C4E1                           lbl_InitiateLevelLoad:
0C4E1                               
0C4E1                               ;; Blind out the screen
0C4E1 20 A3 C5                      JSR sub_BlindsEffect
0C4E4                               
0C4E4                               ;; If ball is dead, (re)load current level
0C4E4                               ;; If ball is alive, load next level
0C4E4 A5 37                         LDA ball_flags
0C4E6 29 01                         AND #BALL_IS_DEAD
0C4E8 D0 05                         BNE +
0C4EA E6 42                             INC current_level
0C4EC 4C F5 C4                          JMP +loadLevel
0C4EF                               +
0C4EF                               
0C4EF                               ;; Revive ball
0C4EF A5 37                         LDA ball_flags
0C4F1 29 FE                         AND #REVIVE_BALL
0C4F3 85 37                         STA ball_flags
0C4F5                           
0C4F5                           +loadLevel:
0C4F5                               ;; This loops back to level 1 after level 25 for now,
0C4F5                               ;; as a proper game ending is yet to be introduced.
0C4F5 A5 42                         LDA current_level
0C4F7 C9 19                         CMP #25
0C4F9 D0 04                         BNE +
0C4FB A9 00                             LDA #$00
0C4FD 85 42                             STA current_level
0C4FF                               +
0C4FF                               
0C4FF                               ;; Tell the game to load the level screen on the next loop.
0C4FF A9 81                         LDA #LOAD_GAME_SCREEN
0C501 85 38                         STA screen_mode
0C503                           
0C503                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C503 4C 8D C0                      JMP lbl_MainGameLoop0C506                           
0C506                           
0C506                           ;; Subroutines
0C506                           .include "include/subroutines.asm"
0C506                           
0C506                           ;; RNG
0C506                           .include "subroutine/GetRandomNumber.asm"
0C506                           
0C506                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C506                           ;;
0C506                           ;; subroutine/GetRandomNumber.asm
0C506                           ;;
0C506                           ;; Simple and fast random number generator by White Flame.
0C506                           ;;
0C506                           ;; Set random_seed to an arbitrary number to randomize between
0C506                           ;; gaming sessions, for instance using the frame timer upon
0C506                           ;; pressing START on the intro screen.
0C506                           ;;
0C506                           ;;     ;; IF START PRESSED:
0C506                           ;;     LDA frame_counter
0C506                           ;;     STA random_seed
0C506                           ;;
0C506                           ;; Source:
0C506                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C506                           ;;
0C506                           ;;
0C506                           
0C506                           sub_GetRandomNumber:
0C506                               ;; Force EOR if random_seed is zero
0C506 A5 16                         LDA random_seed
0C508 F0 05                         BEQ +doEor
0C50A                           
0C50A                               ;; Shift left, and EOR if the high bit is set
0C50A 0A                            ASL
0C50B F0 04                         BEQ +noEor
0C50D 90 02                         BCC +noEor
0C50F                           
0C50F                           +doEor:
0C50F 49 1D                         EOR #$1D
0C511                           
0C511                           +noEor:
0C511 85 16                         STA random_seed
0C513                           
0C513 60                            RTS
0C514                           
0C514                           
0C514                           ;; Read controller input
0C514                           .include "subroutine/ReadController.asm"
0C514                           
0C514                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C514                           ;;
0C514                           ;; subroutine/ReadController.asm
0C514                           ;;
0C514                           ;; Subroutine that polls the controller and stores the input
0C514                           ;; buttons in a variable. This version only handles controller
0C514                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C514                           ;;
0C514                           ;;
0C514                           
0C514                           sub_ReadController:
0C514                           
0C514                               ;; Set strobe bit
0C514 A9 01                         LDA #$01
0C516 8D 16 40                      STA JOYPAD_1
0C519                           
0C519                               ;; Set up ring timer
0C519 85 0F                         STA buttons_held
0C51B                           
0C51B                               ;; Clear strobe bit
0C51B 4A                            LSR
0C51C 8D 16 40                      STA JOYPAD_1
0C51F                           
0C51F                               ;; Loop through button presses
0C51F                               -
0C51F AD 16 40                          LDA JOYPAD_1
0C522 4A                                LSR
0C523 26 0F                             ROL buttons_held
0C525                           
0C525                               ;; Check if ring timer is done
0C525 90 F8                         BCC -
0C527                           
0C527                               ;; Return from subroutine
0C527 60                            RTS
0C528                           
0C528                           
0C528                           ;; vBlank/NMI wait
0C528                           .include "subroutine/WaitForNMI.asm"
0C528                           
0C528                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C528                           ;;
0C528                           ;; subroutine/WaitForVBlank.asm
0C528                           ;;
0C528                           ;; Subroutine that essentially pauses script execution until
0C528                           ;; vBlank happens.
0C528                           ;;
0C528                           ;;
0C528                           
0C528                           sub_WaitForNMI:
0C528 A9 01                         LDA #$01
0C52A 85 53                         STA check_nmi
0C52C                               -
0C52C A5 53                             LDA check_nmi
0C52E D0 FC                         BNE -
0C530 60                            RTS
0C531                           
0C531                           .include "subroutine/WaitForVBlank.asm"
0C531                           
0C531                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C531                           ;;
0C531                           ;; subroutine/WaitForVBlank.asm
0C531                           ;;
0C531                           ;; Subroutine that essentially pauses script execution until
0C531                           ;; vBlank happens.
0C531                           ;;
0C531                           ;;
0C531                           
0C531                           sub_WaitForVBlank:
0C531 2C 02 20                      BIT $2002
0C534 10 FB                         BPL sub_WaitForVBlank
0C536 60                            RTS
0C537                           
0C537                           
0C537                           ;; Game specific subroutines
0C537                           .include "game/include/subroutines.asm"
0C537                           
0C537                           ;; additional game-specific subroutines go here
0C537                           
0C537                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C537                           
0C537                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C537                           ;;
0C537                           ;;  sub_AddAccumulatorToScore.asm
0C537                           ;;
0C537                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C537                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C537                           ;;  actual score.
0C537                           ;;
0C537                           ;;
0C537                           
0C537                           
0C537                           sub_AddAccumulatorToScore:
0C537                           
0C537                               ;; Clear old add_to_score
0C537 A2 05                         LDX #$05
0C539 A0 00                         LDY #$00
0C53B                               -
0C53B 94 26                             STY add_to_score,x
0C53D CA                                DEX
0C53E 10 FB                         BPL -
0C540                           
0C540                               ;; Set accumulator to add_to_score variables
0C540                               ;; Check and update 100s
0C540                               -checkHundreds:
0C540 C9 64                             CMP #100
0C542 90 08                             BCC +checkTens
0C544 38                                    SEC
0C545 E9 64                                 SBC #100
0C547 E6 29                                 INC add_to_score+3
0C549 4C 40 C5                              JMP -checkHundreds
0C54C                                   +checkTens:
0C54C                           
0C54C                               ;; Check and update 10s
0C54C                               -checkTens:
0C54C C9 0A                             CMP #10
0C54E 90 08                             BCC +setOnes
0C550 38                                    SEC
0C551 E9 0A                                 SBC #10
0C553 E6 2A                                 INC add_to_score+4
0C555 4C 4C C5                              JMP -checkTens
0C558                                   +setOnes:
0C558                           
0C558                               ;; We're left with 1s
0C558 85 2B                         STA add_to_score+5
0C55A                           
0C55A                               ;; Byte for byte, add add_to_score to ball_score
0C55A A9 00                         LDA #$00
0C55C 85 39                         STA ppu_buffer_update
0C55E A4 3A                         LDY ppu_buffer_pointer
0C560 A2 05                         LDX #$05
0C562                               -
0C562 B5 26                             LDA add_to_score,x
0C564 18                                CLC
0C565 75 20                             ADC ball_score,x
0C567 C9 0A                             CMP #10
0C569 90 05                             BCC +
0C56B 38                                    SEC
0C56C E9 0A                                 SBC #10
0C56E F6 1F                                 INC ball_score-1,x
0C570                                   +
0C570                                   
0C570                                   ;; Update new score digit
0C570 95 20                             STA ball_score,x
0C572                           
0C572                                   ;; Update score tile in PPU
0C572 A9 20                             LDA #$20
0C574 99 00 03                          STA ppu_buffer,y
0C577 C8                                INY
0C578 8A                                TXA
0C579 18                                CLC
0C57A 69 83                             ADC #$83
0C57C 99 00 03                          STA ppu_buffer,y
0C57F C8                                INY
0C580 B5 20                             LDA ball_score,x
0C582 18                                CLC
0C583 69 01                             ADC #$01
0C585 99 00 03                          STA ppu_buffer,y
0C588 C8                                INY
0C589                           
0C589                                   ;; Check next digit (if any left)
0C589 CA                                DEX
0C58A 30 03                             BMI +done
0C58C 4C 62 C5                      JMP -
0C58F                           
0C58F                           +done:
0C58F                               ;; Update PPU buffer pointer and status
0C58F 84 3A                         STY ppu_buffer_pointer
0C591 A9 01                         LDA #$01
0C593 85 39                         STA ppu_buffer_update
0C595                           
0C595                               ;; Done: return 
0C595 60                            RTS
0C596                           
0C596                           .include "game/subroutine/BackgroundNoise.asm"
0C596                           
0C596                           ;; Play background noise
0C596                           sub_BackgroundNoise:
0C596 A9 32                         LDA #$32
0C598 8D 0C 40                      STA NOISE_VOLUME
0C59B A9 0E                         LDA #$0E
0C59D 8D 0E 40                      STA NOISE_PERIOD
0C5A0 85 47                         STA current_noise
0C5A2 60                            RTS
0C5A3                           
0C5A3                           .include "game/subroutine/BlindsEffect.asm"
0C5A3                           
0C5A3                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C5A3                           sub_BlindsEffect:
0C5A3                           
0C5A3                               ;; Set up loop fading
0C5A3 A9 00                         LDA #$00
0C5A5 85 07                         STA temp+7
0C5A7 A0 08                         LDY #$08
0C5A9                               -fadeLoop:
0C5A9 84 08                             STY temp+8
0C5AB                           
0C5AB                                   ;; Wait for NMI to pass
0C5AB 20 28 C5                          JSR sub_WaitForNMI
0C5AE                                   
0C5AE                                   ;; Now wait for No-sprite 0
0C5AE                                   -
0C5AE AD 02 20                              LDA PPU_STATUS
0C5B1 29 40                                 AND #SPRITE_0_HIT
0C5B3 D0 F9                             BNE -
0C5B5                               
0C5B5                                   ;; Now wait for Sprite 0
0C5B5                                   -
0C5B5 AD 02 20                              LDA PPU_STATUS
0C5B8 29 40                                 AND #SPRITE_0_HIT
0C5BA F0 F9                             BEQ -
0C5BC                                   
0C5BC                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C5BC 20 12 D1                          JSR sub_Waste6
0C5BF 20 15 D1                          JSR sub_Waste5
0C5C2 20 18 D1                          JSR sub_Waste4
0C5C5 20 1B D1                          JSR sub_Waste3
0C5C8 20 21 D1                          JSR sub_Waste1
0C5CB 20 24 D1                          JSR sub_Waste0
0C5CE                                   
0C5CE                                   
0C5CE                                   ;; Setup tile row loop
0C5CE A0 16                             LDY #22
0C5D0                                   -tileLoop:
0C5D0                                   
0C5D0                                       ;; Disable drawing
0C5D0 A5 12                                 LDA soft_ppu_mask
0C5D2 29 F7                                 AND #%11110111
0C5D4 8D 01 20                              STA PPU_MASK
0C5D7                                       
0C5D7                                       ;; Set up scanline loop
0C5D7 A2 08                                 LDX #$08
0C5D9                                       -scanlineLoop:
0C5D9 E4 08                                     CPX temp+8
0C5DB D0 0A                                     BNE +wasteTime
0C5DD                                           
0C5DD                                           ;; Restore drawing
0C5DD A5 12                                     LDA soft_ppu_mask
0C5DF 09 08                                     ORA #%00001000
0C5E1 8D 01 20                                  STA PPU_MASK
0C5E4 4C ED C5                                  JMP +wasteMoreTime
0C5E7                           
0C5E7                                           ;; Waste 12 frames
0C5E7                                           +wasteTime:
0C5E7 E6 55                                     INC void     ;+5
0C5E9 C6 55                                     DEC void     ;+5
0C5EB 49 00                                     EOR #$00     ;+2
0C5ED                                           
0C5ED                                           ;; Waste about a scanline worth of frames
0C5ED                                           +wasteMoreTime:
0C5ED 20 1E D1                                  JSR sub_Waste2
0C5F0 20 24 D1                                  JSR sub_Waste0
0C5F3 20 24 D1                                  JSR sub_Waste0
0C5F6 E6 55                                     INC void
0C5F8 49 00                                     EOR #$00
0C5FA 49 00                                     EOR #$00
0C5FC CA                                        DEX
0C5FD D0 DA                                 BNE -scanlineLoop
0C5FF C6 55                                 DEC void
0C601 49 00                                 EOR #$00
0C603 88                                    DEY
0C604 D0 CA                             BNE -tileLoop
0C606                           
0C606 A4 08                             LDY temp+8
0C608                                   
0C608 E6 07                             INC temp+7
0C60A A5 07                             LDA temp+7
0C60C C9 02                             CMP #$02
0C60E D0 99                             BNE -fadeLoop
0C610                           
0C610 A9 00                             LDA #$00
0C612 85 07                             STA temp+7
0C614 88                                DEY
0C615 D0 92                         BNE -fadeLoop
0C617                               
0C617 60                            RTS
0C618                           
0C618                           .include "game/subroutine/ClearScreen.asm"
0C618                           
0C618                           ;; Subroutine to clear the screen
0C618                           ;; If it's a game screen, add noise
0C618                           
0C618                           sub_ClearScreen:
0C618                               ;; Check of game screen or not
0C618 A5 38                         LDA screen_mode
0C61A 29 03                         AND #CHECK_SCREEN_MODE
0C61C C9 01                         CMP #IS_GAME_SCREEN
0C61E F0 02                         BEQ +
0C620 A9 00                             LDA #$00
0C622                               +
0C622 85 01                         STA temp+1
0C624                               
0C624                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C624 2C 02 20                      BIT PPU_STATUS
0C627 A9 20                         LDA #$20
0C629 8D 06 20                      STA PPU_ADDR
0C62C A9 00                         LDA #$00
0C62E 8D 06 20                      STA PPU_ADDR
0C631                               
0C631                               ;; Set up tile to draw and loop
0C631 85 00                         STA temp
0C633 AA                            TAX
0C634 A8                            TAY
0C635                           
0C635                               -     
0C635                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C635 A5 00                             LDA temp
0C637 8D 07 20                          STA PPU_DATA
0C63A                           
0C63A                                   ;; Check if we should draw noise next. Noise is drawn if:
0C63A                                   ;; - Screen mode is game screen
0C63A                                   ;; - Y between #$06 and #$19 (inclusive)
0C63A                                   ;; - X between #$02 and #$1D (inclusive)
0C63A                                   
0C63A                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C63A A5 01                             LDA temp+1
0C63C F0 1C                             BEQ +nextTileInRow
0C63E                                   
0C63E                                   ;; If Y < $6, skip the check
0C63E C0 06                             CPY #$06
0C640 90 18                             BCC +nextTileInRow
0C642                                   
0C642                                   ;; If X < $1, skip the check
0C642 E0 01                             CPX #$01
0C644 90 14                             BCC +nextTileInRow
0C646                                   
0C646                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C646 E0 1D                             CPX #$1D
0C648 D0 04                             BNE +
0C64A A9 00                                 LDA #$00
0C64C 85 00                                 STA temp
0C64E                                   +
0C64E B0 0A                             BCS +nextTileInRow
0C650                                   
0C650                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C650 20 06 C5                          JSR sub_GetRandomNumber
0C653 29 07                             AND #%00000111
0C655 18                                CLC
0C656 69 68                             ADC #$68
0C658 85 00                             STA temp
0C65A                           
0C65A                           +nextTileInRow:
0C65A                                   
0C65A                                   ;; Check if a row has been done. If not, draw the next
0C65A E8                                INX
0C65B E0 20                             CPX #$20
0C65D D0 D6                             BNE -
0C65F                                   
0C65F                                   ;; Go to the next row (if any left)
0C65F A2 00                             LDX #00
0C661 C8                                INY
0C662                                   
0C662                                   ;; If Y is 1A, skip noise tile check until done drawing
0C662 C0 1A                             CPY #$1A
0C664 D0 04                             BNE +
0C666 A9 00                                 LDA #$00
0C668 85 01                                 STA temp+1
0C66A                                   +
0C66A                                   
0C66A C0 1E                             CPY #$1E
0C66C D0 C7                         BNE -
0C66E                           
0C66E                               ;; Clear attribute table
0C66E A9 23                         LDA #$23
0C670 8D 06 20                      STA PPU_ADDR
0C673 A9 C0                         LDA #$C0
0C675 8D 06 20                      STA PPU_ADDR
0C678 A9 00                         LDA #$00
0C67A A2 40                         LDX #$40
0C67C                               -
0C67C 8D 07 20                          STA PPU_DATA
0C67F CA                                DEX
0C680 D0 FA                         BNE -
0C682                               
0C682 60                            RTS
0C683                           
0C683                           .include "game/subroutine/ColorizeBall.asm"
0C683                           
0C683                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C683                           ;;
0C683                           ;;  Subroutine: ColorizeBall
0C683                           ;;
0C683                           ;;  Applies the color set through ball_flags to the ball sprite.
0C683                           ;;  Expects ball_flags to be in the accumulator
0C683                           ;;
0C683                           
0C683                           
0C683                           sub_ColorizeBall:
0C683                           
0C683                               ;; Get color from ball_flags
0C683 4A                            LSR
0C684 4A                            LSR
0C685 4A                            LSR
0C686 4A                            LSR
0C687 4A                            LSR
0C688 AA                            TAX
0C689                           
0C689                               ;; Add new light color of ball to PPU palette
0C689 A9 3F                         LDA #$3F
0C68B 85 00                         STA temp
0C68D A9 11                         LDA #$11
0C68F 85 01                         STA temp+1
0C691 BD 89 D2                      LDA tbl_BallColorLight,x
0C694 85 02                         STA temp+2
0C696 20 25 D1                      JSR sub_WriteByteToPPUBuffer
0C699                               
0C699                               ;; Add new dark color of ball to PPU palette
0C699 E6 01                         INC temp+1
0C69B BD 83 D2                      LDA tbl_BallColorDark,x
0C69E 85 02                         STA temp+2
0C6A0 20 25 D1                      JSR sub_WriteByteToPPUBuffer
0C6A3                               
0C6A3 60                            RTS
0C6A4                           
0C6A4                           .include "game/subroutine/ColorsMatch.asm"
0C6A4                           
0C6A4                           ;; Subroutine to check if ball color matches colliding tile color
0C6A4                           
0C6A4                           sub_ColorsMatch:
0C6A4                               ;; Save tile color in temp variable
0C6A4 A5 43                         LDA colliding_tile
0C6A6 29 0E                         AND #%00001110
0C6A8 85 00                         STA temp
0C6AA                           
0C6AA                               ;; Get ball color
0C6AA A5 37                         LDA ball_flags
0C6AC 29 E0                         AND #%11100000
0C6AE 4A                            LSR
0C6AF 4A                            LSR
0C6B0 4A                            LSR
0C6B1 4A                            LSR
0C6B2                           
0C6B2                               ;; Compare with tile color
0C6B2 C5 00                         CMP temp
0C6B4 60                            RTS
0C6B5                           
0C6B5                           .include "game/subroutine/ConvertXYToTileType.asm"
0C6B5                           
0C6B5                           ;; Subroutine to convert the ball's position to a tile type
0C6B5                           ;; - Expects temp to be y-position of ball within game area
0C6B5                           ;; - Expects temp+1 to be x-position of ball within game area
0C6B5                           ;; - Puts result in accumulator and zp variable
0C6B5                           ;; - Corrupts X-register
0C6B5                           
0C6B5                           sub_ConvertXYToTileType:
0C6B5 A5 01                         LDA temp+1
0C6B7 4A                            LSR
0C6B8 4A                            LSR
0C6B9 4A                            LSR
0C6BA 4A                            LSR
0C6BB 85 09                         STA temp+9
0C6BD A5 00                         LDA temp
0C6BF 29 F0                         AND #%11110000
0C6C1 18                            CLC
0C6C2 65 09                         ADC temp+9
0C6C4 85 09                         STA temp+9
0C6C6 AA                            TAX
0C6C7 BD 00 04                      LDA tile_type, x
0C6CA 85 43                         STA colliding_tile
0C6CC 60                            RTS
0C6CD                           
0C6CD                           .include "game/subroutine/DisableEnableRendering.asm"
0C6CD                           
0C6CD                           ;; Subroutines to disable or enable screen rendering
0C6CD                           
0C6CD                           sub_DisableRendering:
0C6CD                               ;; Force NMI skip, disable rendering
0C6CD A9 01                     	LDA #$01
0C6CF 85 14                     	STA force_skip_nmi
0C6D1 20 31 C5                      JSR sub_WaitForVBlank
0C6D4 A5 12                         LDA soft_ppu_mask
0C6D6 29 E7                         AND #%11100111
0C6D8 8D 01 20                      STA PPU_MASK
0C6DB 85 12                         STA soft_ppu_mask
0C6DD 20 31 C5                      JSR sub_WaitForVBlank
0C6E0 60                            RTS
0C6E1                           
0C6E1                           sub_EnableRendering:
0C6E1                               ;; Enable rendering
0C6E1 A9 00                     	LDA #$00
0C6E3 8D 05 20                  	STA PPU_SCROLL
0C6E6 8D 05 20                  	STA PPU_SCROLL
0C6E9 20 31 C5                      JSR sub_WaitForVBlank
0C6EC 85 14                     	STA force_skip_nmi
0C6EE A5 12                         LDA soft_ppu_mask
0C6F0 09 18                         ORA #%00011000
0C6F2 85 12                         STA soft_ppu_mask
0C6F4 8D 01 20                      STA PPU_MASK
0C6F7 20 31 C5                      JSR sub_WaitForVBlank
0C6FA 60                            RTS
0C6FB                           
0C6FB                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C6FB                           
0C6FB                           ;; Draw a tile from the logo on the intro screen
0C6FB                           sub_drawIntroScreenLogoTile:
0C6FB B9 6B D1                      LDA tbl_IntroScreenLogoChr,y
0C6FE C9 60                         CMP #$60
0C700 D0 08                         BNE +
0C702 20 06 C5                          JSR sub_GetRandomNumber
0C705 29 07                             AND #$07
0C707 18                                CLC
0C708 69 60                             ADC #$60
0C70A                               +
0C70A 8D 07 20                      STA PPU_DATA
0C70D 60                            RTS
0C70E                           
0C70E                           .include "game/subroutine/DrawMoveTile.asm"
0C70E                           
0C70E                           ;; Draw the move tile as follows:
0C70E                           ;;
0C70E                           ;;  1 2
0C70E                           ;;  3 4 5
0C70E                           ;;    6 7
0C70E                           ;;
0C70E                           ;; (1,2,3,4) is the move block itself
0C70E                           ;; (5,6,7) are shades unless that tile is solid
0C70E                           
0C70E                           ;; X holds the move block sprite slot
0C70E                           
0C70E                           sub_DrawMoveTile:
0C70E                           
0C70E                               ;; Get tile type index from sprite x and y values
0C70E                               ;; and store it in a temp variable
0C70E BD 78 03                      LDA move_block_x,x
0C711 18                            CLC
0C712 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C714 4A                            LSR
0C715 4A                            LSR
0C716 4A                            LSR
0C717 4A                            LSR
0C718 85 09                         STA temp+9
0C71A BD 7C 03                      LDA move_block_y,x
0C71D 18                            CLC
0C71E 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C720 29 F0                         AND #%11110000
0C722 18                            CLC
0C723 65 09                         ADC temp+9
0C725 85 09                         STA temp+9
0C727 A8                            TAY
0C728                               
0C728                               ;; Add move tile data on the new tile location
0C728 BD 84 03                      LDA move_block_tile_type,x
0C72B 99 00 04                      STA tile_type,y
0C72E                           
0C72E                               ;; Draw the original tile type in the ppu buffer
0C72E                               ;; - get PPU address to write to (temp, temp+1)
0C72E 8A                            TXA
0C72F 48                            PHA
0C730 A6 09                         LDX temp+9
0C732 20 DA C9                      JSR sub_GetPPUAddrFromYXIndex
0C735 68                            PLA
0C736 AA                            TAX
0C737                               
0C737                               ;; - based on color, select tile 42 or 4A for top left
0C737 BD 88 03                      LDA move_block_flags,x
0C73A 4A                            LSR
0C73B 4A                            LSR
0C73C 4A                            LSR
0C73D 4A                            LSR
0C73E 4A                            LSR
0C73F A8                            TAY
0C740 B9 46 DA                      LDA tbl_MoveBlockTopLeftTile,y
0C743 85 08                         STA temp+8
0C745                               
0C745                               ;; - save palette ID in temp+6
0C745 98                            TYA
0C746 4A                            LSR
0C747 85 06                         STA temp+6
0C749                               
0C749                               ;; Prepare PPU buffer
0C749 A4 3A                         LDY ppu_buffer_pointer
0C74B A9 00                         LDA #$00
0C74D 85 39                         STA ppu_buffer_update
0C74F                               
0C74F                               ;; Draw tile 1 (top left tile of move block)
0C74F 20 30 C8                      JSR sub_DrawTileTemp018
0C752                           
0C752                               
0C752                               ;; Draw tile 2 (top right tile of move block)
0C752 E6 01                         INC temp+1
0C754 E6 08                         INC temp+8
0C756 20 30 C8                      JSR sub_DrawTileTemp018
0C759                           
0C759                               ;; Draw tile 3 (bottom left tile of move block)
0C759 A5 01                         LDA temp+1
0C75B 18                            CLC
0C75C 69 1F                         ADC #$1F
0C75E 85 01                         STA temp+1
0C760 A5 00                         LDA temp
0C762 69 00                         ADC #$00
0C764 85 00                         STA temp
0C766 A5 08                         LDA temp+8
0C768 18                            CLC
0C769 69 0F                         ADC #$0F
0C76B 85 08                         STA temp+8
0C76D 20 30 C8                      JSR sub_DrawTileTemp018
0C770                           
0C770                               ;; Draw tile 4 (bottom right tile of move block)
0C770 E6 01                         INC temp+1
0C772 E6 08                         INC temp+8
0C774 20 30 C8                      JSR sub_DrawTileTemp018
0C777                           
0C777                               ;; Load tile type offset in X register
0C777 8A                            TXA
0C778 48                            PHA
0C779 A6 09                         LDX temp+9
0C77B                               
0C77B                               ;; Load shade tile in temp+8
0C77B A9 00                         LDA #$00
0C77D 85 08                         STA temp+8
0C77F                           
0C77F                               ;; Draw tile 5 (right shade) unless tile is solid
0C77F E6 01                         INC temp+1
0C781                               
0C781 8A                            TXA
0C782 29 0F                         AND #%00001111
0C784 C9 0D                         CMP #$0D
0C786 F0 0A                         BEQ +nextTile
0C788                           
0C788 BD 01 04                      LDA tile_type+1,x
0C78B 29 01                         AND #%00000001
0C78D D0 03                         BNE +nextTile
0C78F                               
0C78F 20 30 C8                      JSR sub_DrawTileTemp018
0C792                               
0C792                           
0C792                           +nextTile:
0C792                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C792 A5 01                         LDA temp+1
0C794 18                            CLC
0C795 69 1F                         ADC #$1F
0C797 85 01                         STA temp+1
0C799 A5 00                         LDA temp
0C79B 69 00                         ADC #$00
0C79D 85 00                         STA temp
0C79F                           
0C79F 8A                            TXA
0C7A0 29 F0                         AND #%11110000
0C7A2 C9 90                         CMP #$90
0C7A4 F0 0A                         BEQ +nextTile
0C7A6                           
0C7A6 BD 10 04                      LDA tile_type+16,x
0C7A9 29 01                         AND #%00000001
0C7AB D0 03                         BNE +nextTile
0C7AD                               
0C7AD 20 30 C8                      JSR sub_DrawTileTemp018
0C7B0                           
0C7B0                               
0C7B0                           +nextTile:
0C7B0                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C7B0 E6 01                         INC temp+1
0C7B2                           
0C7B2 8A                            TXA
0C7B3 29 F0                         AND #%11110000
0C7B5 C9 90                         CMP #$90
0C7B7 F0 11                         BEQ +setTileAttributes
0C7B9                               
0C7B9 8A                            TXA
0C7BA 29 0F                         AND #%00001111
0C7BC C9 0D                         CMP #$0D
0C7BE F0 0A                         BEQ +setTileAttributes
0C7C0                               
0C7C0 BD 11 04                      LDA tile_type+17,x
0C7C3 29 01                         AND #%00000001
0C7C5 D0 03                         BNE +setTileAttributes
0C7C7                               
0C7C7 20 30 C8                      JSR sub_DrawTileTemp018
0C7CA                               
0C7CA                           
0C7CA                           +setTileAttributes:
0C7CA                               ;; Update attribute table accordingly through ppu buffer
0C7CA                               ;; - PPU buffer high byte
0C7CA 20 96 D0                      JSR sub_SetTileAttributeAddress
0C7CD                           
0C7CD 8A                            TXA
0C7CE 29 10                         AND #%00010000
0C7D0 F0 05                         BEQ +        
0C7D2 A9 F0                             LDA #%11110000
0C7D4 4C D9 C7                          JMP ++
0C7D7                               +
0C7D7 A9 0F                         LDA #%00001111
0C7D9                               ++
0C7D9 85 02                         STA temp+2
0C7DB                               
0C7DB 8A                            TXA
0C7DC 29 01                         AND #%00000001
0C7DE F0 07                         BEQ +
0C7E0 A5 02                             LDA temp+2
0C7E2 09 CC                             ORA #%11001100
0C7E4 4C EB C7                          JMP ++
0C7E7                               +
0C7E7 A5 02                         LDA temp+2
0C7E9 09 33                         ORA #%00110011
0C7EB                               ++
0C7EB 85 02                         STA temp+2
0C7ED                               
0C7ED C9 FC                         CMP #%11111100
0C7EF F0 22                         BEQ +continue
0C7F1                               
0C7F1 C9 F3                         CMP #%11110011
0C7F3 D0 09                         BNE +
0C7F5 A5 06                             LDA temp+6
0C7F7 0A                                ASL
0C7F8 0A                                ASL
0C7F9 85 06                             STA temp+6
0C7FB 4C 13 C8                          JMP +continue
0C7FE                               +
0C7FE                               
0C7FE C9 CF                         CMP #%11001111
0C800 D0 0A                         BNE +
0C802 A6 06                             LDX temp+6
0C804 BD E7 D9                          LDA tbl_Times16,x
0C807 85 06                             STA temp+6
0C809 4C 13 C8                          JMP +continue
0C80C                               +
0C80C                               
0C80C A6 06                         LDX temp+6
0C80E BD F7 D9                      LDA tbl_Times64,x
0C811 85 06                         STA temp+6
0C813                                   
0C813                           +continue:
0C813 A5 00                         LDA temp
0C815 38                            SEC
0C816 E9 C0                         SBC #$C0
0C818 AA                            TAX
0C819 BD A0 04                      LDA tile_attributes,x
0C81C 25 02                         AND temp+2
0C81E 05 06                         ORA temp+6
0C820 9D A0 04                      STA tile_attributes,x
0C823 99 00 03                      STA ppu_buffer,y
0C826 C8                            INY
0C827                           
0C827                               ;; Restore original X
0C827 68                            PLA
0C828 AA                            TAX
0C829                               
0C829                               ;; Update PPU buffer
0C829 84 3A                         STY ppu_buffer_pointer
0C82B A9 01                         LDA #$01
0C82D 85 39                         STA ppu_buffer_update
0C82F                           
0C82F                               ;; Return
0C82F 60                            RTS
0C830                           
0C830                           .include "game/subroutine/DrawTileTemp018.asm"
0C830                           
0C830                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C830                           
0C830                           sub_DrawTileTemp018:
0C830 A5 00                         LDA temp
0C832 99 00 03                      STA ppu_buffer,y
0C835 C8                            INY
0C836 A5 01                         LDA temp+1
0C838 99 00 03                      STA ppu_buffer,y
0C83B C8                            INY
0C83C A5 08                         LDA temp+8
0C83E 99 00 03                      STA ppu_buffer,y
0C841 C8                            INY
0C842 60                            RTS
0C843                           
0C843                           .include "game/subroutine/EvaluateTileType.asm"
0C843                           
0C843                           ;; Subroutine to evaluate the colliding tile type and take its
0C843                           ;; corresponding action (move block, kill player, ...)
0C843                           ;; - Expects X-register to be the tile_type offset
0C843                           ;; - Uses zp variable colliding_tile
0C843                           
0C843                           sub_EvaluateTileType:
0C843                           
0C843                               ;; Check if collided tile is a color block
0C843 A5 43                         LDA colliding_tile
0C845 29 80                         AND #IS_COLOR_BLOCK
0C847 D0 03                         BNE +
0C849 4C B2 C8                          JMP +checkIfPaintBlock
0C84C                               +
0C84C                               
0C84C                               ;; It's a color block. Check if the colors match
0C84C 20 A4 C6                      JSR sub_ColorsMatch
0C84F F0 06                         BEQ +
0C851                                   ;; Colors don't match
0C851                                   ;; Play bounce sound effect
0C851 A2 02                             LDX #SFX_BOUNCE
0C853 20 11 CF                          JSR sub_PreloadSfxFromX
0C856                                   
0C856                                   ;; Return
0C856 60                                RTS
0C857                               +
0C857                           
0C857                               ;; Colors match; destroy color block
0C857                               
0C857                               ;; Convert the metatile offset value (which is in the X register)
0C857                               ;; to its corresponding address in PPU
0C857 20 DA C9                      JSR sub_GetPPUAddrFromYXIndex
0C85A                           
0C85A                               ;; Remove color block from screen by drawing a total
0C85A                               ;; of 7 tiles over it (shade included)
0C85A 20 20 CF                      JSR sub_RemoveBlockFromScreen
0C85D                               
0C85D                               ;; - Load destruction animation on tile
0C85D                               ;; Get most recent slot for explosion    
0C85D 8A                            TXA
0C85E 85 02                         STA temp+2
0C860 A6 3B                         LDX explosion_pointer
0C862                           
0C862                               ;; If 0, use max pointer value
0C862 D0 02                         BNE +
0C864 A2 04                             LDX #MAX_ANIMATIONS
0C866                               +
0C866                           
0C866                               ;; Decrease pointer by one
0C866 CA                            DEX
0C867 86 3B                         STX explosion_pointer
0C869                           
0C869                               ;; Load explosion data into RAM
0C869 A9 00                         LDA #$00
0C86B 9D 64 03                      STA explosion_currentframe,x
0C86E                           
0C86E A9 04                         LDA #ANIMATION_SPEED
0C870 9D 60 03                      STA explosion_timer,x
0C873                           
0C873 A5 02                         LDA temp+2
0C875 29 0F                         AND #%00001111
0C877 A8                            TAY
0C878 B9 E7 D9                      LDA tbl_Times16,y
0C87B 18                            CLC
0C87C 69 0E                         ADC #$0E
0C87E 9D 6C 03                      STA explosion_x,x
0C881                           
0C881 A5 02                         LDA temp+2
0C883 29 F0                         AND #%11110000
0C885 18                            CLC
0C886 69 29                         ADC #$29
0C888 9D 70 03                      STA explosion_y,x
0C88B                           
0C88B A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C88D 9D 68 03                      STA explosion_attributes,x
0C890 A9 01                         LDA #$01
0C892 9D 74 03                      STA explosion_active,x
0C895                           
0C895 A5 02                         LDA temp+2
0C897 AA                            TAX
0C898                               
0C898                               
0C898                               ;; - Write #$00 in tile type ram (makes not-solid)
0C898 A9 00                         LDA #$00
0C89A 9D 00 04                      STA tile_type, x
0C89D                           
0C89D                           
0C89D                               ;; Add (80 + level number) to score
0C89D A5 42                         LDA current_level
0C89F 18                            CLC
0C8A0 69 51                         ADC #81
0C8A2 20 37 C5                      JSR sub_AddAccumulatorToScore
0C8A5                           
0C8A5                           
0C8A5                               ;; Play thud sound effect
0C8A5 A2 01                         LDX #SFX_THUD
0C8A7 20 11 CF                      JSR sub_PreloadSfxFromX
0C8AA                           
0C8AA                           
0C8AA                               ;; - If there are no color blocks left:
0C8AA                               ;;   - Initiate level-win state
0C8AA C6 44                         DEC blocks_left
0C8AC D0 03                         BNE +
0C8AE 4C 50 C4                          JMP lbl_LevelWin
0C8B1                               +
0C8B1                               
0C8B1 60                            RTS
0C8B2                           
0C8B2                           
0C8B2                           
0C8B2                           +checkIfPaintBlock:
0C8B2                           
0C8B2                               ;; Check if collided tile is a paint block
0C8B2 A5 43                         LDA colliding_tile
0C8B4 29 20                         AND #IS_PAINT_BLOCK
0C8B6 F0 1E                         BEQ +checkIfDeathBlock
0C8B8                                   ;; It's a paint block. Update ball color
0C8B8                                   ;; Save x-register
0C8B8 8A                                TXA
0C8B9 48                                PHA
0C8BA                           
0C8BA                                   ;; Get tile color
0C8BA A5 43                             LDA colliding_tile
0C8BC 29 0E                             AND #%00001110
0C8BE 0A                                ASL
0C8BF 0A                                ASL
0C8C0 0A                                ASL
0C8C1 0A                                ASL
0C8C2 85 00                             STA temp
0C8C4                           
0C8C4                                   ;; Apply tile color to ball
0C8C4 A5 37                             LDA ball_flags
0C8C6 29 1F                             AND #%00011111
0C8C8 05 00                             ORA temp
0C8CA 85 37                             STA ball_flags
0C8CC 20 83 C6                          JSR sub_ColorizeBall
0C8CF                           
0C8CF                                   ;; Play paint sound effect
0C8CF A9 10                             LDA #$10
0C8D1 85 50                             STA sfx_timer+2
0C8D3                           
0C8D3                                   ;; Restore x-register
0C8D3 68                                PLA
0C8D4 AA                                TAX
0C8D5                           
0C8D5                                   ;; Return
0C8D5 60                                RTS
0C8D6                                   
0C8D6                                   
0C8D6                                   
0C8D6                           +checkIfDeathBlock:
0C8D6                           
0C8D6                               ;; Check if collided tile is a death block
0C8D6 A5 43                         LDA colliding_tile
0C8D8 29 10                         AND #IS_DEATH_BLOCK
0C8DA F0 3D                         BEQ +checkIfMoveBlock
0C8DC                           
0C8DC                           ;; Also, when the player presses select during gameplay,
0C8DC                           ;; insta-selfdestruct the ball.
0C8DC                           sub_Selfdestruct:
0C8DC                           
0C8DC                                   ;; It is a death block
0C8DC                                   ;; Freeze and kill player
0C8DC A5 37                             LDA ball_flags
0C8DE 09 05                             ORA #%00000101
0C8E0 85 37                             STA ball_flags
0C8E2                                   
0C8E2                                   ;; Get free explosion slot
0C8E2 A6 3B                             LDX explosion_pointer
0C8E4 D0 02                             BNE +
0C8E6 A2 04                                 LDX #MAX_ANIMATIONS
0C8E8                                   +
0C8E8 CA                                DEX
0C8E9 86 3B                             STX explosion_pointer
0C8EB                           
0C8EB                                   ;; Load explosion data into RAM
0C8EB A9 00                             LDA #$00
0C8ED 9D 64 03                          STA explosion_currentframe,x
0C8F0                           
0C8F0 A9 04                             LDA #ANIMATION_SPEED
0C8F2 9D 60 03                          STA explosion_timer,x
0C8F5                           
0C8F5 A5 17                             LDA ball_xpos_hi
0C8F7 38                                SEC
0C8F8 E9 08                             SBC #$08
0C8FA 9D 6C 03                          STA explosion_x,x
0C8FD                           
0C8FD A5 19                             LDA ball_ypos_hi
0C8FF 38                                SEC
0C900 E9 06                             SBC #$06
0C902 9D 70 03                          STA explosion_y,x
0C905                           
0C905 A9 01                             LDA #$01
0C907 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C90A 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C90D 85 4B                             STA noise_muted             ; mute background noise
0C90F                                   
0C90F                                   ;; Play explosion sound effect
0C90F A2 00                             LDX #SFX_EXPLOSION
0C911 20 11 CF                          JSR sub_PreloadSfxFromX
0C914                           
0C914                                   ;; Set kill timer
0C914 A9 60                             LDA #$60
0C916 85 40                             STA kill_timer
0C918                           
0C918                                   ;; Return
0C918 60                                RTS
0C919                           
0C919                           
0C919                           
0C919                           +checkIfMoveBlock:
0C919                           
0C919                               ;; Check if collided tile is a move block
0C919 A5 43                         LDA colliding_tile
0C91B 29 40                         AND #IS_MOVE_BLOCK
0C91D D0 06                         BNE +
0C91F                                   ;; Tile is not a move block
0C91F                                   ;; Therefore, it is a solid wall
0C91F                                   
0C91F                                   ;; Play bounce sound effect
0C91F A2 02                             LDX #SFX_BOUNCE
0C921 20 11 CF                          JSR sub_PreloadSfxFromX
0C924                           
0C924                                   ;; Return
0C924 60                                RTS
0C925                               +
0C925                           
0C925                               ;; It is a move block. Check if colors match
0C925 20 A4 C6                      JSR sub_ColorsMatch
0C928 F0 06                         BEQ +
0C92A                                   ;; Colors do not match
0C92A                                   ;; Play bounce sound effect
0C92A A2 02                             LDX #SFX_BOUNCE
0C92C 20 11 CF                          JSR sub_PreloadSfxFromX
0C92F                           
0C92F                                   ;; Return
0C92F 60                                RTS
0C930                               +
0C930                           
0C930                               ;; Colors match
0C930                               ;; - Check if next tile is within the playground
0C930                               ;; (push X onto stack as well)
0C930 8A                            TXA
0C931 48                            PHA
0C932 18                            CLC
0C933 65 36                         ADC move_block_space_to_check
0C935 AA                            TAX
0C936                               
0C936 29 0F                         AND #%00001111
0C938 C9 0E                         CMP #$0E
0C93A 90 03                         BCC +
0C93C 4C B4 C9                          JMP +dontMoveBlock
0C93F                               +
0C93F 8A                            TXA
0C940 29 F0                         AND #%11110000
0C942 C9 A0                         CMP #$A0
0C944 D0 03                         BNE +
0C946 4C B4 C9                          JMP +dontMoveBlock
0C949                               +
0C949 C9 F0                         CMP #$F0
0C94B D0 03                         BNE +
0C94D 4C B4 C9                          JMP +dontMoveBlock
0C950                               +
0C950                               
0C950                               ;; Check if the next tile is solid
0C950 BD 00 04                      LDA tile_type,x
0C953 29 01                         AND #TILE_IS_SOLID
0C955 F0 03                         BEQ +
0C957 4C B4 C9                          JMP +dontMoveBlock
0C95A                               +
0C95A                               
0C95A                               ;; Move block has room to move
0C95A                               ;; Pull original X from stack
0C95A 68                            PLA
0C95B AA                            TAX        
0C95C                               
0C95C                               ;; Add the tiles that need updating to ppu buffer, and
0C95C                               ;; update attribute table accordingly through ppu buffer
0C95C 20 DA C9                      JSR sub_GetPPUAddrFromYXIndex
0C95F 20 20 CF                      JSR sub_RemoveBlockFromScreen
0C962                           
0C962                               ;; Store original tile type in temp variable
0C962 BD 00 04                      LDA tile_type,x
0C965 85 08                         STA temp+8
0C967                           
0C967                               ;; Write #$00 in tile type ram (makes not-solid)
0C967 A9 00                         LDA #$00
0C969 9D 00 04                      STA tile_type,x
0C96C                           
0C96C                               ;; Add move tile sprite over the original tile
0C96C                               ;; - Store x in temp variable
0C96C 86 03                         STX temp+3
0C96E                               
0C96E                               ;; - Update move block pointer
0C96E A6 3C                         LDX move_block_pointer
0C970 D0 02                         BNE +
0C972 A2 04                             LDX #MAX_ANIMATIONS
0C974                               +
0C974 CA                            DEX
0C975 86 3C                         STX move_block_pointer
0C977                           
0C977                               ;; = Set move block tile type
0C977 A5 08                         LDA temp+8
0C979 9D 84 03                      STA move_block_tile_type,x
0C97C                           
0C97C                               ;; - Set move block X position
0C97C A5 03                         LDA temp+3
0C97E 29 0F                         AND #%00001111
0C980 A8                            TAY
0C981 C8                            INY
0C982 B9 E7 D9                      LDA tbl_Times16,y
0C985 9D 78 03                      STA move_block_x,x
0C988                               
0C988                               ;; - Set move block Y position
0C988 A5 03                         LDA temp+3
0C98A 29 F0                         AND #%11110000
0C98C 18                            CLC
0C98D 69 30                         ADC #$30
0C98F 9D 7C 03                      STA move_block_y,x
0C992 DE 7C 03                      DEC move_block_y,x
0C995                               
0C995                               ;; - Set timer to 16 (+1) frames
0C995 A9 11                         LDA #$11
0C997 9D 80 03                      STA move_block_timer,x
0C99A                               
0C99A                               ;; - Set move direction
0C99A A5 36                         LDA move_block_space_to_check
0C99C 29 81                         AND #%10000001
0C99E 18                            CLC
0C99F 2A                            ROL
0C9A0 69 00                         ADC #$00
0C9A2 85 04                         STA temp+4
0C9A4                               
0C9A4                               ;; - Set block color as ball color and add direction
0C9A4 A5 37                         LDA ball_flags
0C9A6 29 E0                         AND #BALL_COLOR
0C9A8 05 04                         ORA temp+4
0C9AA 9D 88 03                      STA move_block_flags,x
0C9AD                               
0C9AD                               ;; - Restore original X
0C9AD A6 03                         LDX temp+3
0C9AF                               
0C9AF                               ;; - Initiate move sound effect
0C9AF A9 18                         LDA #$18
0C9B1 85 4F                         STA sfx_timer+1
0C9B3                           
0C9B3                               ;; Return
0C9B3 60                            RTS
0C9B4                           
0C9B4                           
0C9B4                           ;; Do not move the move block
0C9B4                           +dontMoveBlock:
0C9B4                           
0C9B4                               ;; Play bounce sound effect
0C9B4 A2 02                         LDX #SFX_BOUNCE
0C9B6 20 11 CF                      JSR sub_PreloadSfxFromX
0C9B9                           
0C9B9                               ;; Restore X from stack
0C9B9 68                            PLA
0C9BA AA                            TAX
0C9BB                               
0C9BB                               ;; Return
0C9BB 60                            RTS
0C9BC                           
0C9BC                           .include "game/subroutine/FlashEffect.asm"
0C9BC                           
0C9BC                           ;; Apply flashing light effect to background color
0C9BC                           sub_FlashEffect:
0C9BC A2 00                         LDX #$00
0C9BE 86 01                         STX temp+1
0C9C0 A9 3F                         LDA #$3F
0C9C2 85 00                         STA temp
0C9C4                           
0C9C4                               -flashLoop:
0C9C4 BD 57 DA                          LDA tbl_BackgroundFade,x
0C9C7 85 02                             STA temp+2
0C9C9 20 25 D1                          JSR sub_WriteByteToPPUBuffer
0C9CC A0 03                             LDY #$03
0C9CE                                   -
0C9CE 20 28 C5                              JSR sub_WaitForNMI
0C9D1 88                                    DEY
0C9D2 D0 FA                             BNE -
0C9D4 E8                                INX
0C9D5 E0 0A                             CPX #$0A
0C9D7 D0 EB                         BNE -flashLoop
0C9D9                               
0C9D9 60                            RTS
0C9DA                           
0C9DA                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C9DA                           
0C9DA                           ;; Get the PPU address from YX index
0C9DA                           ;; - Expects YX index (aka tile offset) to be in the X register
0C9DA                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C9DA                           
0C9DA                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C9DA                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C9DA                           
0C9DA                           sub_GetPPUAddrFromYXIndex:
0C9DA 8A                            TXA
0C9DB 29 C0                         AND #%11000000
0C9DD 18                            CLC
0C9DE 2A                            ROL
0C9DF 2A                            ROL
0C9E0 2A                            ROL
0C9E1 69 20                         ADC #$20
0C9E3 85 00                         STA temp
0C9E5                               
0C9E5 8A                            TXA
0C9E6 29 0F                         AND #%00001111
0C9E8 0A                            ASL
0C9E9 85 01                         STA temp+1
0C9EB                               
0C9EB 8A                            TXA
0C9EC 29 30                         AND #%00110000
0C9EE 0A                            ASL
0C9EF 0A                            ASL
0C9F0 18                            CLC
0C9F1 65 01                         ADC temp+1
0C9F3 85 01                         STA temp+1
0C9F5                               
0C9F5 A5 00                         LDA temp
0C9F7 69 00                         ADC #$00
0C9F9 85 00                         STA temp
0C9FB                               
0C9FB A5 01                         LDA temp+1
0C9FD 18                            CLC
0C9FE 69 C2                         ADC #$C2
0CA00 85 01                         STA temp+1
0CA02                               
0CA02 A5 00                         LDA temp
0CA04 69 00                         ADC #$00
0CA06 85 00                         STA temp
0CA08                           
0CA08 60                            RTS
0CA09                           
0CA09                           .include "game/subroutine/InitiateNudge.asm"
0CA09                           
0CA09                           ;; Tell ball to nudge
0CA09                           sub_InitiateNudge:
0CA09 85 37                         STA ball_flags
0CA0B A9 06                         LDA #NUDGE_FRAMES
0CA0D 85 3E                         STA nudge_timer
0CA0F 60                            RTS
0CA10                           
0CA10                           .include "game/subroutine/JumpToPointer.asm"
0CA10                           
0CA10                           ;; Helper subroutine to JSR to a variable pointer address
0CA10                           sub_JumpToPointer:
0CA10 6C 0C 00                      JMP (pointer)
0CA13                               ;RTS must be handled by the routine (pointer) jumps to
0CA13                           
0CA13                           .include "game/subroutine/LoadAnimations.asm"
0CA13                           
0CA13                           sub_LoadAnimations:
0CA13                           
0CA13                               ;; Set up loop
0CA13 A2 00                         LDX #$00
0CA15                               -loop_load_animation:
0CA15                                   ;; Check if current animation is active. If not, goto next
0CA15 BD 74 03                          LDA explosion_active,x
0CA18 D0 03                             BNE +
0CA1A 4C A5 CA                              JMP +next
0CA1D                                   +
0CA1D                           
0CA1D                                   ;; Check the explosion framecounter
0CA1D BD 60 03                          LDA explosion_timer,x
0CA20 D0 17                             BNE +
0CA22                                       ;; Frametimer is 0
0CA22                                       ;; Reset to animation speed
0CA22 A9 04                                 LDA #ANIMATION_SPEED
0CA24 9D 60 03                              STA explosion_timer,x
0CA27                           
0CA27                                       ;; Set next animation frame, and check if we're done yet
0CA27 FE 64 03                              INC explosion_currentframe,x
0CA2A BD 64 03                              LDA explosion_currentframe,x
0CA2D C9 0A                                 CMP #ANIM_SLIDES
0CA2F D0 08                                 BNE +
0CA31                           
0CA31                                       ;; If we're done, inactivate current explosion, go to the next one
0CA31 A9 00                                 LDA #$00
0CA33 9D 74 03                              STA explosion_active,x
0CA36 4C A5 CA                              JMP +next
0CA39                                   +
0CA39                           
0CA39                                   ;; Load (x,y) position in temp variables
0CA39 BD 6C 03                          LDA explosion_x,x
0CA3C 85 01                             STA temp+1
0CA3E 85 03                             STA temp+3
0CA40 BD 70 03                          LDA explosion_y,x
0CA43 85 02                             STA temp+2
0CA45                           
0CA45                                   ;; Load attribute in temp variable
0CA45 BD 68 03                          LDA explosion_attributes,x
0CA48 85 04                             STA temp+4
0CA4A                           
0CA4A                                   ;; Load current frame into Y-register
0CA4A BC 64 03                          LDY explosion_currentframe,x
0CA4D                           
0CA4D                                   ;; Load current frame ROM address from table
0CA4D B9 79 D2                          LDA explosion_anim_lo,y
0CA50 85 0C                             STA pointer
0CA52 B9 6F D2                          LDA explosion_anim_hi,y
0CA55 85 0D                             STA pointer+1
0CA57                           
0CA57                                   ;; Save x-register on stack
0CA57 8A                                TXA
0CA58 48                                PHA
0CA59                           
0CA59                                   ;; Load sprites into sprite RAM
0CA59 A6 3D                             LDX sprite_ram_pointer
0CA5B A0 00                             LDY #$00
0CA5D                           
0CA5D                                   ;; Prepare (x,y) offset for loop
0CA5D 84 00                             STY temp
0CA5F                           
0CA5F                                   -loop_load_sprite:
0CA5F                                   
0CA5F                                       ;; Do not draw empty sprites
0CA5F B1 0C                                 LDA (pointer),y
0CA61 F0 18                                 BEQ +nextSprite
0CA63                                   
0CA63                                           ;; Add y-position to sprite ram buffer
0CA63 A5 02                                     LDA temp+2
0CA65 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA68 E8                                        INX
0CA69                           
0CA69                                           ;; Get tile number from frame ROM address, and
0CA69                                           ;; add it to sprite ram buffer
0CA69 B1 0C                                     LDA (pointer),y
0CA6B 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA6E E8                                        INX
0CA6F                           
0CA6F                                           ;; Add attribute data to sprite ram buffer
0CA6F A5 04                                     LDA temp+4
0CA71 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA74 E8                                        INX
0CA75                           
0CA75                                           ;; Add x-position to sprite ram buffer
0CA75 A5 03                                     LDA temp+3
0CA77 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA7A E8                                        INX
0CA7B                           
0CA7B                                       +nextSprite:
0CA7B                           
0CA7B                                       ;; Check if all sprites are done
0CA7B C8                                    INY
0CA7C C0 09                                 CPY #SLIDE_SIZE
0CA7E F0 21                                 BEQ +updateSpriteRamPointer
0CA80                           
0CA80                                       ;; Update x value
0CA80 A5 03                                 LDA temp+3
0CA82 18                                    CLC
0CA83 69 08                                 ADC #$08
0CA85 85 03                                 STA temp+3
0CA87                           
0CA87                                       ;; Update temp for x,y position
0CA87 E6 00                                 INC temp
0CA89 A5 00                                 LDA temp
0CA8B C9 03                                 CMP #SLIDE_WIDTH
0CA8D D0 0F                                 BNE +
0CA8F                                           ;; Row is done; reset x-position
0CA8F A5 01                                     LDA temp+1
0CA91 85 03                                     STA temp+3
0CA93                           
0CA93                                           ;; Update y-position
0CA93 A5 02                                     LDA temp+2
0CA95 18                                        CLC
0CA96 69 08                                     ADC #$08
0CA98 85 02                                     STA temp+2
0CA9A                           
0CA9A                                           ;; Reset row timer
0CA9A A9 00                                     LDA #$00
0CA9C 85 00                                     STA temp
0CA9E                                       +
0CA9E                           
0CA9E 4C 5F CA                          JMP -loop_load_sprite
0CAA1                           
0CAA1                               +updateSpriteRamPointer:
0CAA1 86 3D                             STX sprite_ram_pointer
0CAA3                           
0CAA3                                   ;; Retrieve x-register from stack
0CAA3 68                                PLA
0CAA4 AA                                TAX
0CAA5                           
0CAA5                               +next:
0CAA5                                   ;; Check if all animations have been updated
0CAA5 E8                                INX
0CAA6 E0 04                             CPX #MAX_ANIMATIONS
0CAA8 F0 03                             BEQ +cleanUpSpriteRam
0CAAA                           
0CAAA 4C 15 CA                      JMP -loop_load_animation
0CAAD                           
0CAAD                           +cleanUpSpriteRam:
0CAAD A6 3D                         LDX sprite_ram_pointer
0CAAF A9 EF                         LDA #$EF
0CAB1                               -
0CAB1 9D 00 02                          STA ADDR_SPRITERAM,x
0CAB4 E8                                INX
0CAB5 D0 FA                         BNE -
0CAB7                               
0CAB7 60                            RTS
0CAB8                               
0CAB8                           .include "game/subroutine/LoadGameScreen.asm"
0CAB8                           
0CAB8                           ;; Load the game screen, based on level number
0CAB8                           sub_LoadGameScreen:
0CAB8                           
0CAB8                               ;; Clear the screen
0CAB8 20 18 C6                      JSR sub_ClearScreen
0CABB                               
0CABB                               ;; Clear collision and attribute data; reset blocks left in the process
0CABB A2 00                         LDX #$00
0CABD 8A                            TXA
0CABE 85 44                         STA blocks_left
0CAC0                               -
0CAC0 9D 00 04                          STA tile_type,x
0CAC3 E8                                INX
0CAC4 D0 FA                         BNE -
0CAC6                               
0CAC6                               ;; Get pointer from current level
0CAC6 A6 42                         LDX current_level
0CAC8 BD 99 D9                      LDA tbl_lvl_layout_lo,x
0CACB 85 0C                         STA pointer
0CACD BD 7F D9                      LDA tbl_lvl_layout_hi,x
0CAD0 85 0D                         STA pointer+1
0CAD2                           
0CAD2                               ;; Set up the loop
0CAD2 A0 00                         LDY #$00
0CAD4                           -drawRowColumnLoop:
0CAD4                           
0CAD4                               ;; Load (x,y) of current set of tiles
0CAD4 B1 0C                         LDA (pointer),y
0CAD6                           
0CAD6                               ;; Check if level is done; if so, skip the loop
0CAD6 C9 FF                         CMP #LEVEL_END
0CAD8 D0 03                         BNE +
0CADA 4C 23 CC                          JMP +doneLevelLoad
0CADD                               +
0CADD                           
0CADD                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CADD 85 00                         STA temp
0CADF C8                            INY
0CAE0 B1 0C                         LDA (pointer),y
0CAE2 85 01                         STA temp+1
0CAE4                               
0CAE4                               ;; Convert (x,y) to PPU address
0CAE4                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CAE4 A5 00                         LDA temp
0CAE6 29 0F                         AND #%00001111
0CAE8 4A                            LSR
0CAE9 4A                            LSR
0CAEA 09 20                         ORA #$20
0CAEC 85 02                         STA temp+2
0CAEE                               
0CAEE                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CAEE A5 00                         LDA temp
0CAF0 29 F0                         AND #%11110000
0CAF2 4A                            LSR
0CAF3 4A                            LSR
0CAF4 4A                            LSR
0CAF5 85 03                         STA temp+3
0CAF7                               
0CAF7 A5 00                         LDA temp
0CAF9 29 03                         AND #%00000011
0CAFB AA                            TAX
0CAFC BD F7 D9                      LDA tbl_Times64,x
0CAFF 18                            CLC
0CB00 65 03                         ADC temp+3
0CB02 18                            CLC
0CB03 69 C2                         ADC #$C2
0CB05 85 03                         STA temp+3
0CB07                               
0CB07                               ;; Add carry to temp+2
0CB07 A5 02                         LDA temp+2
0CB09 69 00                         ADC #$00
0CB0B 85 02                         STA temp+2
0CB0D                           
0CB0D                               ;; Convert tile data to loop count and tile type
0CB0D                               ;; temp+4 = color
0CB0D A5 01                         LDA temp+1
0CB0F 29 07                         AND #%00000111
0CB11 85 04                         STA temp+4
0CB13                               
0CB13                               ;; If color = 7, this is a wall
0CB13 C9 07                         CMP #%00000111
0CB15 F0 12                         BEQ +wallHack
0CB17                                   
0CB17                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CB17 29 01                             AND #%00000001
0CB19 F0 02                             BEQ +
0CB1B A9 05                                 LDA #$05
0CB1D                                   +
0CB1D 85 07                             STA temp+7
0CB1F                                
0CB1F                                   ;; temp+5 = tile type
0CB1F A5 01                             LDA temp+1
0CB21 4A                                LSR
0CB22 4A                                LSR
0CB23 4A                                LSR
0CB24 29 03                             AND #%00000011
0CB26 4C 2F CB                          JMP +setTileType
0CB29                               +wallHack:
0CB29                               
0CB29                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CB29 A9 00                         LDA #$00
0CB2B 85 07                         STA temp+7
0CB2D A9 04                         LDA #$04
0CB2F                           
0CB2F                           +setTileType:    
0CB2F 85 05                         STA temp+5
0CB31                               
0CB31                               ;; X = tile offset
0CB31 18                            CLC
0CB32 65 07                         ADC temp+7
0CB34 AA                            TAX
0CB35                               
0CB35                               ;; temp+6 = number of tiles
0CB35 A5 01                         LDA temp+1
0CB37 29 60                         AND #%01100000
0CB39 4A                            LSR
0CB3A 4A                            LSR
0CB3B 4A                            LSR
0CB3C 4A                            LSR
0CB3D 4A                            LSR
0CB3E 85 06                         STA temp+6
0CB40                               
0CB40                               ;; Translate (x,y) to (y,x) for tile RAM
0CB40 A5 00                         LDA temp
0CB42 0A                            ASL
0CB43 0A                            ASL
0CB44 0A                            ASL
0CB45 0A                            ASL
0CB46 85 08                         STA temp+8
0CB48 A5 00                         LDA temp
0CB4A 4A                            LSR
0CB4B 4A                            LSR
0CB4C 4A                            LSR
0CB4D 4A                            LSR
0CB4E 05 08                         ORA temp+8
0CB50 85 00                         STA temp
0CB52                               
0CB52                               ;; Set up loop
0CB52 98                            TYA
0CB53 48                            PHA
0CB54 A4 06                         LDY temp+6
0CB56                           
0CB56                               -drawTileLoop:
0CB56                                   ;; Write PPU address
0CB56 2C 02 20                          BIT PPU_STATUS
0CB59 A5 02                             LDA temp+2
0CB5B 8D 06 20                          STA PPU_ADDR
0CB5E A5 03                             LDA temp+3
0CB60 8D 06 20                          STA PPU_ADDR
0CB63                                   
0CB63                                   ;; Write first and second tile
0CB63 BD FB D9                          LDA tbl_GametileTopLeft,x
0CB66 8D 07 20                          STA PPU_DATA
0CB69 BD 05 DA                          LDA tbl_GametileTopRight,x
0CB6C 8D 07 20                          STA PPU_DATA
0CB6F                                   
0CB6F                                   ;; Update PPU address
0CB6F 2C 02 20                          BIT PPU_STATUS
0CB72 A5 02                             LDA temp+2
0CB74 8D 06 20                          STA PPU_ADDR
0CB77 A5 03                             LDA temp+3
0CB79 18                                CLC
0CB7A 69 20                             ADC #$20
0CB7C 8D 06 20                          STA PPU_ADDR
0CB7F                                   
0CB7F                                   ;; Write third and fourth tile
0CB7F BD 0F DA                          LDA tbl_GametileBottomLeft,x
0CB82 8D 07 20                          STA PPU_DATA
0CB85 BD 19 DA                          LDA tbl_GametileBottomRight,x
0CB88 8D 07 20                          STA PPU_DATA
0CB8B                           
0CB8B                                   ;; Push x-register to stack
0CB8B 8A                                TXA
0CB8C 48                                PHA
0CB8D                           
0CB8D                                   ;; Update tile RAM (aka collision table)
0CB8D A6 05                             LDX temp+5
0CB8F BD 23 DA                          LDA tbl_GameTileRamByte,x
0CB92 05 04                             ORA temp+4
0CB94 0A                                ASL
0CB95 09 01                             ORA #%00000001
0CB97 A6 00                             LDX temp
0CB99 9D 00 04                          STA tile_type,x
0CB9C                           
0CB9C                                   ;; Check if shade 1 should be drawn
0CB9C E8                                INX
0CB9D BD 00 04                          LDA tile_type,x
0CBA0 D0 05                             BNE +
0CBA2 A9 00                                 LDA #$00
0CBA4 8D 07 20                              STA PPU_DATA
0CBA7                                   +
0CBA7                                   
0CBA7                                   ;; Check if shade 2 should be drawn
0CBA7 A5 03                             LDA temp+3
0CBA9 18                                CLC
0CBAA 69 41                             ADC #$41
0CBAC 85 03                             STA temp+3
0CBAE A5 02                             LDA temp+2
0CBB0 69 00                             ADC #$00
0CBB2 85 02                             STA temp+2
0CBB4                                   
0CBB4 8A                                TXA
0CBB5 18                                CLC
0CBB6 69 0F                             ADC #$0F
0CBB8 AA                                TAX
0CBB9                                   
0CBB9 BD 00 04                          LDA tile_type,x
0CBBC D0 0F                             BNE +
0CBBE A5 02                                 LDA temp+2
0CBC0 8D 06 20                              STA PPU_ADDR
0CBC3 A5 03                                 LDA temp+3
0CBC5 8D 06 20                              STA PPU_ADDR
0CBC8 A9 00                                 LDA #$00
0CBCA 8D 07 20                              STA PPU_DATA
0CBCD                                   +
0CBCD                           
0CBCD                                   ;; Check if shade 3 should be drawn
0CBCD E8                                INX
0CBCE E6 03                             INC temp+3
0CBD0 BD 00 04                          LDA tile_type,x
0CBD3 D0 0F                             BNE +
0CBD5 A5 02                                 LDA temp+2
0CBD7 8D 06 20                              STA PPU_ADDR
0CBDA A5 03                                 LDA temp+3
0CBDC 8D 06 20                              STA PPU_ADDR
0CBDF A9 00                                 LDA #$00
0CBE1 8D 07 20                              STA PPU_DATA
0CBE4                                   +
0CBE4                                   
0CBE4                                   ;; Restore x-register from stack
0CBE4 68                                PLA
0CBE5 AA                                TAX
0CBE6                                   
0CBE6                                   ;; Reset pointer for next tile
0CBE6 A5 03                             LDA temp+3
0CBE8 38                                SEC
0CBE9 E9 42                             SBC #$42
0CBEB 85 03                             STA temp+3
0CBED A5 02                             LDA temp+2
0CBEF E9 00                             SBC #$00
0CBF1 85 02                             STA temp+2
0CBF3                                   
0CBF3                                   ;; Draw next metatile in this loop (if any left)
0CBF3 88                                DEY
0CBF4 30 27                             BMI +doneDrawingRowColumn
0CBF6                                   
0CBF6                                   ;; Is it a row or a column?
0CBF6 A5 01                             LDA temp+1
0CBF8 10 17                             BPL +
0CBFA                                       ;; It is a column: move pointer down (+$40)
0CBFA A5 03                                 LDA temp+3
0CBFC 18                                    CLC
0CBFD 69 40                                 ADC #$40
0CBFF 85 03                                 STA temp+3
0CC01 A5 02                                 LDA temp+2
0CC03 69 00                                 ADC #$00
0CC05 85 02                                 STA temp+2
0CC07                                       
0CC07                                       ;; Add 16 to temp (as a tile RAM pointer)
0CC07 A5 00                                 LDA temp
0CC09 18                                    CLC
0CC0A 69 10                                 ADC #$10
0CC0C 85 00                                 STA temp
0CC0E 4C 1A CC                              JMP +drawNextTile
0CC11                                   +
0CC11                                   
0CC11                                   ;; It is a row: move pointer right (+$02)
0CC11 A5 03                             LDA temp+3
0CC13 18                                CLC
0CC14 69 02                             ADC #$02
0CC16 85 03                             STA temp+3
0CC18                                   
0CC18                                   ;; Add 1 to temp (as a tile RAM pointer)
0CC18 E6 00                             INC temp
0CC1A                           
0CC1A                               
0CC1A                               ;; Next tile in the row/column
0CC1A                                   +drawNextTile:
0CC1A 4C 56 CB                      JMP -drawTileLoop
0CC1D                           
0CC1D                               ;; Go to the next set of tiles
0CC1D                           +doneDrawingRowColumn:
0CC1D 68                            PLA
0CC1E A8                            TAY
0CC1F C8                            INY
0CC20 4C D4 CA                      JMP -drawRowColumnLoop
0CC23                           
0CC23                           ;; Level loading is done
0CC23                           +doneLevelLoad:
0CC23                           
0CC23                               ;; Count number of color blocks
0CC23 A2 A0                         LDX #160
0CC25                               -
0CC25 BD FF 03                          LDA tile_type-1,x
0CC28 29 80                             AND #%10000000
0CC2A F0 02                             BEQ +
0CC2C E6 44                                 INC blocks_left
0CC2E                                   +
0CC2E CA                                DEX
0CC2F D0 F4                         BNE -
0CC31                           
0CC31                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CC31 A9 20                         LDA #$20
0CC33 8D 06 20                      STA PPU_ADDR
0CC36 A9 A2                         LDA #$A2
0CC38 8D 06 20                      STA PPU_ADDR
0CC3B A9 35                         LDA #$35
0CC3D 20 78 CE                      JSR sub_Draw28HorizontalTiles
0CC40                           
0CC40                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CC40 A9 23                         LDA #$23
0CC42 8D 06 20                      STA PPU_ADDR
0CC45 A9 42                         LDA #$42
0CC47 8D 06 20                      STA PPU_ADDR
0CC4A A9 31                         LDA #$31
0CC4C 20 78 CE                      JSR sub_Draw28HorizontalTiles
0CC4F                           
0CC4F                               ;; Left & right game bounds
0CC4F                               ;; Set PPU_ADDR and store in temp variables
0CC4F A9 20                         LDA #$20
0CC51 85 00                         STA temp
0CC53 8D 06 20                      STA PPU_ADDR
0CC56 A9 C1                         LDA #$C1
0CC58 85 01                         STA temp+1
0CC5A 8D 06 20                      STA PPU_ADDR
0CC5D                               
0CC5D                               ;; Set vertical bound tile and set up loop
0CC5D A0 33                         LDY #$33
0CC5F A2 14                         LDX #20
0CC61                               -
0CC61                                   ;; Show left tile
0CC61 8C 07 20                          STY PPU_DATA
0CC64                                   
0CC64                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CC64 A5 00                             LDA temp
0CC66 8D 06 20                          STA PPU_ADDR
0CC69 A5 01                             LDA temp+1
0CC6B 18                                CLC
0CC6C 69 1D                             ADC #29
0CC6E 85 01                             STA temp+1
0CC70 8D 06 20                          STA PPU_ADDR
0CC73                           
0CC73                                   ;; Show right tile
0CC73 8C 07 20                          STY PPU_DATA
0CC76                           
0CC76                                   ;; Check if we're done yet
0CC76 CA                                DEX
0CC77 F0 18                             BEQ +drawCorners
0CC79                                   
0CC79                                   ;; Not done yet: add 3 to low byte for next left bound
0CC79 A5 01                             LDA temp+1
0CC7B 18                                CLC
0CC7C 69 03                             ADC #3
0CC7E 85 01                             STA temp+1
0CC80                                   
0CC80                                   ;; Apply carry to high byte
0CC80 A5 00                             LDA temp
0CC82 69 00                             ADC #$00
0CC84 85 00                             STA temp
0CC86                                   
0CC86                                   ;; Store next PPU_ADDR to draw at
0CC86 8D 06 20                          STA PPU_ADDR
0CC89 A5 01                             LDA temp+1
0CC8B 8D 06 20                          STA PPU_ADDR
0CC8E 4C 61 CC                      JMP -
0CC91                               
0CC91                               
0CC91                           
0CC91                           +drawCorners:
0CC91                               ;; Draw the corners of the playing field
0CC91 A9 20                         LDA #$20
0CC93 8D 06 20                      STA PPU_ADDR
0CC96 A9 A1                         LDA #$A1
0CC98 8D 06 20                      STA PPU_ADDR
0CC9B A9 39                         LDA #$39
0CC9D 8D 07 20                      STA PPU_DATA
0CCA0                           
0CCA0 A9 20                         LDA #$20
0CCA2 8D 06 20                      STA PPU_ADDR
0CCA5 A9 BE                         LDA #$BE
0CCA7 8D 06 20                      STA PPU_ADDR
0CCAA A9 3A                         LDA #$3A
0CCAC 8D 07 20                      STA PPU_DATA
0CCAF                           
0CCAF A9 23                         LDA #$23
0CCB1 8D 06 20                      STA PPU_ADDR
0CCB4 A9 41                         LDA #$41
0CCB6 8D 06 20                      STA PPU_ADDR
0CCB9 A9 36                         LDA #$36
0CCBB 8D 07 20                      STA PPU_DATA
0CCBE                           
0CCBE A9 23                         LDA #$23
0CCC0 8D 06 20                      STA PPU_ADDR
0CCC3 A9 5E                         LDA #$5E
0CCC5 8D 06 20                      STA PPU_ADDR
0CCC8 A9 34                         LDA #$34
0CCCA 8D 07 20                      STA PPU_DATA
0CCCD                               
0CCCD                           
0CCCD                               ;; Draw the hud labels
0CCCD A9 20                         LDA #$20
0CCCF 8D 06 20                      STA PPU_ADDR
0CCD2 A9 62                         LDA #$62
0CCD4 8D 06 20                      STA PPU_ADDR
0CCD7 A2 00                         LDX #$00
0CCD9                               -
0CCD9 BD 28 DA                          LDA tbl_HudText,x
0CCDC 8D 07 20                          STA PPU_DATA
0CCDF E8                                INX
0CCE0 E0 1E                             CPX #$1E
0CCE2 D0 F5                         BNE -
0CCE4                           
0CCE4                           
0CCE4                               ;; Draw the current score
0CCE4 A9 20                         LDA #$20
0CCE6 8D 06 20                      STA PPU_ADDR
0CCE9 A9 83                         LDA #$83
0CCEB 8D 06 20                      STA PPU_ADDR
0CCEE A2 00                         LDX #$00
0CCF0                               -
0CCF0 B5 20                             LDA ball_score,x
0CCF2 18                                CLC
0CCF3 69 01                             ADC #$01
0CCF5 8D 07 20                          STA PPU_DATA
0CCF8 E8                                INX
0CCF9 E0 06                             CPX #$06
0CCFB D0 F3                         BNE -
0CCFD                           
0CCFD                           
0CCFD                               ;; Draw the level number
0CCFD                               ;; (with primitive HEX>DEC)
0CCFD A5 42                         LDA current_level
0CCFF 18                            CLC
0CD00 69 01                         ADC #$01
0CD02 85 01                         STA temp+1
0CD04                               
0CD04 C9 14                         CMP #20
0CD06 B0 13                         BCS +tempIsTwo
0CD08                               
0CD08 C9 0A                         CMP #10
0CD0A B0 05                         BCS +tempIsOne
0CD0C                               
0CD0C A9 00                         LDA #$00
0CD0E 4C 22 CD                      JMP +setTemp
0CD11                               
0CD11                           +tempIsOne:
0CD11 38                            SEC
0CD12 E9 0A                         SBC #10
0CD14 85 01                         STA temp+1
0CD16 A9 01                         LDA #$01
0CD18 4C 22 CD                      JMP +setTemp
0CD1B                               
0CD1B                           +tempIsTwo:
0CD1B 38                            SEC
0CD1C E9 14                         SBC #20
0CD1E 85 01                         STA temp+1
0CD20 A9 02                         LDA #$02
0CD22                           
0CD22                           +setTemp:
0CD22 85 00                         STA temp
0CD24                               
0CD24 E6 00                         INC temp
0CD26 E6 01                         INC temp+1
0CD28                               
0CD28 A9 20                         LDA #$20
0CD2A 8D 06 20                      STA PPU_ADDR
0CD2D A9 8B                         LDA #$8B
0CD2F 8D 06 20                      STA PPU_ADDR
0CD32 A5 00                         LDA temp
0CD34 8D 07 20                      STA PPU_DATA
0CD37 A5 01                         LDA temp+1
0CD39 8D 07 20                      STA PPU_DATA
0CD3C                           
0CD3C                           
0CD3C                               ;; Draw lives (presumes lives to be capped at 9)
0CD3C A9 20                         LDA #$20
0CD3E 8D 06 20                      STA PPU_ADDR
0CD41 A9 92                         LDA #$92
0CD43 8D 06 20                      STA PPU_ADDR
0CD46 A6 1F                         LDX ball_lives
0CD48 E8                            INX
0CD49 8E 07 20                      STX PPU_DATA
0CD4C                           
0CD4C                           
0CD4C                               ;; Set and draw bonus
0CD4C A9 07                         LDA #$07
0CD4E 85 2C                         STA ball_bonus
0CD50 A9 09                         LDA #$09
0CD52 85 2D                         STA ball_bonus+1
0CD54 85 2E                         STA ball_bonus+2
0CD56                               
0CD56 A9 20                         LDA #$20
0CD58 8D 06 20                      STA PPU_ADDR
0CD5B A9 9A                         LDA #$9A
0CD5D 8D 06 20                      STA PPU_ADDR
0CD60 A2 00                         LDX #$00
0CD62                               -
0CD62 B5 2C                             LDA ball_bonus,x
0CD64 18                                CLC
0CD65 69 01                             ADC #$01
0CD67 8D 07 20                          STA PPU_DATA
0CD6A E8                                INX
0CD6B E0 03                             CPX #$03
0CD6D D0 F3                         BNE -
0CD6F                           
0CD6F                           
0CD6F                               ;; Set attribute data to RAM
0CD6F                               
0CD6F                               ;; Byte 0-6 of attribute ram should be #%10100000
0CD6F A2 00                         LDX #$00
0CD71 A9 A0                         LDA #$A0
0CD73                               -
0CD73 9D A0 04                          STA tile_attributes,x
0CD76 E8                                INX
0CD77 E0 07                             CPX #$07
0CD79 D0 F8                         BNE -
0CD7B                               
0CD7B                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CD7B A9 E0                         LDA #$E0
0CD7D 9D A0 04                      STA tile_attributes,x
0CD80 E8                            INX
0CD81                           
0CD81                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CD81                           
0CD81                           -attributeLoop:
0CD81                               ;; Reset current attribute value
0CD81 A9 00                         LDA #$00
0CD83 85 02                         STA temp+2
0CD85                           
0CD85                               ;; Get first metatile in tile ram based on attribute index
0CD85                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CD85 8A                            TXA
0CD86                           
0CD86 38                            SEC
0CD87 E9 08                         SBC #$08
0CD89 85 01                         STA temp+1      ; attr - 8 (temp1)
0CD8B 0A                            ASL             ; * 2
0CD8C 85 00                         STA temp        ; temp = temp1 * 2
0CD8E                           
0CD8E A5 01                         LDA temp+1      ; temp1
0CD90 29 F8                         AND #%11111000  ; rounded down to 8's
0CD92 0A                            ASL             ; * 2
0CD93 18                            CLC
0CD94 65 00                         ADC temp        ; + temp1 * 2
0CD96 85 00                         STA temp        ; first metatile
0CD98                           
0CD98                               ;; Store first metatile in y-register
0CD98 A8                            TAY
0CD99                           
0CD99                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CD99 8A                            TXA
0CD9A 29 07                         AND #%00000111
0CD9C C9 07                         CMP #%00000111
0CD9E F0 0B                         BEQ +
0CDA0                           
0CDA0                               ;; If X >= $30, don't apply bottom right metatile
0CDA0 E0 30                         CPX #$30
0CDA2 B0 07                         BCS +
0CDA4                               
0CDA4                               ;; Add metatile1 subpalette to attribute value
0CDA4 B9 00 04                      LDA tile_type,y
0CDA7 29 0C                         AND #%00001100
0CDA9 85 02                         STA temp+2
0CDAB                               +
0CDAB                           
0CDAB                           
0CDAB                               ;; Apply second metatile
0CDAB 88                            DEY
0CDAC                           
0CDAC                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CDAC 8A                            TXA
0CDAD 29 07                         AND #%00000111
0CDAF F0 10                         BEQ +
0CDB1                           
0CDB1                               ;; If X >= $30, don't apply bottom left metatile
0CDB1 E0 30                         CPX #$30
0CDB3 B0 0C                         BCS +
0CDB5                           
0CDB5                           
0CDB5                           
0CDB5                               ;; Add metatile2 subpalette to attribute value
0CDB5 B9 00 04                      LDA tile_type,y
0CDB8 29 0C                         AND #%00001100
0CDBA 4A                            LSR
0CDBB 4A                            LSR
0CDBC 05 02                         ORA temp+2
0CDBE 4C C3 CD                      JMP ++
0CDC1                               +
0CDC1 A5 02                         LDA temp+2
0CDC3                               ++
0CDC3 0A                            ASL
0CDC4 0A                            ASL
0CDC5 85 02                         STA temp+2
0CDC7                           
0CDC7                           
0CDC7                               ;; Apply third metatile
0CDC7 98                            TYA
0CDC8 38                            SEC
0CDC9 E9 0F                         SBC #$0F
0CDCB A8                            TAY
0CDCC                           
0CDCC                               ;; If X MOD 8 == 7, don't apply top right metatile
0CDCC 8A                            TXA
0CDCD 29 07                         AND #%00000111
0CDCF C9 07                         CMP #%00000111
0CDD1 F0 11                         BEQ +
0CDD3                           
0CDD3                               ;; If X < $10, don't apply top right metatile
0CDD3 8A                            TXA
0CDD4 29 F0                         AND #%11110000
0CDD6 F0 0C                         BEQ +
0CDD8                           
0CDD8                               ;; Add metatile3 subpalette to attribute value
0CDD8 B9 00 04                      LDA tile_type,y
0CDDB 29 0C                         AND #%00001100
0CDDD 4A                            LSR
0CDDE 4A                            LSR
0CDDF 05 02                         ORA temp+2
0CDE1 4C E6 CD                      JMP ++
0CDE4                               +
0CDE4 A5 02                         LDA temp+2
0CDE6                               ++
0CDE6 0A                            ASL
0CDE7 0A                            ASL
0CDE8 85 02                         STA temp+2
0CDEA                           
0CDEA                           
0CDEA                               ;; Apply fourth metatile
0CDEA 88                            DEY
0CDEB                           
0CDEB                               ;; If X MOD 8 == 0, don't apply top left metatile
0CDEB 8A                            TXA
0CDEC 29 07                         AND #%00000111
0CDEE F0 11                         BEQ +
0CDF0                           
0CDF0                               ;; If X < $10, don't apply top left metatile
0CDF0 8A                            TXA
0CDF1 29 F0                         AND #%11110000
0CDF3 F0 0C                         BEQ +
0CDF5                           
0CDF5                               ;; Add metatile4 subpalette to attribute value
0CDF5 B9 00 04                      LDA tile_type,y
0CDF8 29 0C                         AND #%00001100
0CDFA 4A                            LSR
0CDFB 4A                            LSR
0CDFC 05 02                         ORA temp+2
0CDFE 4C 03 CE                      JMP ++
0CE01                               +
0CE01 A5 02                         LDA temp+2
0CE03                               ++
0CE03 9D A0 04                      STA tile_attributes,x
0CE06                           
0CE06                               ;; Check the next attribute, if any left
0CE06 E8                            INX
0CE07 E0 38                         CPX #$38
0CE09 F0 03                         BEQ +
0CE0B 4C 81 CD                          JMP -attributeLoop
0CE0E                               +
0CE0E                           
0CE0E                               ;; Stream attribute RAM to PPU
0CE0E 2C 02 20                      BIT PPU_STATUS
0CE11 A9 23                         LDA #$23
0CE13 8D 06 20                      STA PPU_ADDR
0CE16 A9 C0                         LDA #$C0
0CE18 8D 06 20                      STA PPU_ADDR
0CE1B A2 00                         LDX #$00
0CE1D                               -
0CE1D BD A0 04                          LDA tile_attributes,x
0CE20 8D 07 20                          STA PPU_DATA
0CE23 E8                                INX
0CE24 E0 40                             CPX #$40
0CE26 D0 F5                         BNE -
0CE28                           
0CE28                               ;; Set initial ball position
0CE28 A6 42                         LDX current_level
0CE2A BD B3 D9                      LDA tbl_lvl_ball_startpos,x
0CE2D 29 F0                         AND #%11110000
0CE2F 18                            CLC
0CE30 69 34                         ADC #$34
0CE32 85 19                         STA ball_ypos_hi
0CE34 BD B3 D9                      LDA tbl_lvl_ball_startpos,x
0CE37 0A                            ASL
0CE38 0A                            ASL
0CE39 0A                            ASL
0CE3A 0A                            ASL
0CE3B 18                            CLC
0CE3C 69 14                         ADC #$14
0CE3E 85 17                         STA ball_xpos_hi
0CE40 A9 00                         LDA #$00
0CE42 85 18                         STA ball_xpos_lo
0CE44 85 1A                         STA ball_ypos_lo
0CE46                               
0CE46                               ;; Set initial ball color and direction
0CE46 BD CD D9                      LDA tbl_lvl_ball_init,x
0CE49 29 F0                         AND #%11110000
0CE4B 85 37                         STA ball_flags
0CE4D 20 83 C6                      JSR sub_ColorizeBall
0CE50                               
0CE50                               ;; Reset bonus timer
0CE50 A9 08                         LDA #BONUS_FRAMES
0CE52 85 3F                         STA bonus_timer
0CE54                               
0CE54                               ;; Play background noise
0CE54 A9 08                         LDA #$08
0CE56 8D 15 40                      STA APU_STATUS
0CE59 8D 0F 40                      STA NOISE_LENGTH
0CE5C A9 0E                         LDA #$0E
0CE5E 85 47                         STA current_noise
0CE60 A9 00                         LDA #$00
0CE62 85 45                         STA max_noise
0CE64 85 48                         STA noise_timer
0CE66 85 46                         STA sweep_noise
0CE68 85 4B                         STA noise_muted
0CE6A 20 96 C5                      JSR sub_BackgroundNoise
0CE6D                           
0CE6D                               ;; Freeze the ball
0CE6D A5 37                         LDA ball_flags
0CE6F 09 04                         ORA #FREEZE_BALL
0CE71 85 37                         STA ball_flags
0CE73                               
0CE73                               ;; Start unfreeze timer
0CE73 A9 30                         LDA #$30
0CE75 85 41                         STA unfreeze_timer
0CE77                           
0CE77                               ;; Return
0CE77 60                            RTS
0CE78                           
0CE78                           
0CE78                           ;; Subroutine: draw 28 tiles in a row
0CE78                           sub_Draw28HorizontalTiles:
0CE78 A2 1C                         LDX #28
0CE7A                               -
0CE7A 8D 07 20                          STA PPU_DATA
0CE7D CA                                DEX
0CE7E D0 FA                         BNE -
0CE80 60                            RTS
0CE81                           
0CE81                           .include "game/subroutine/LoadIntroScreen.asm"
0CE81                           
0CE81                           ;; Load the intro screen
0CE81                           sub_LoadIntroScreen:
0CE81                           
0CE81                               ;; Load intro palette
0CE81 2C 02 20                      BIT PPU_STATUS
0CE84 A9 3F                         LDA #$3F
0CE86 8D 06 20                      STA PPU_ADDR
0CE89 A9 00                         LDA #$00
0CE8B 8D 06 20                      STA PPU_ADDR
0CE8E A2 00                         LDX #$00
0CE90                               -
0CE90 BD 4B D1                          LDA tbl_IntroScreenPalette,x
0CE93 8D 07 20                          STA PPU_DATA
0CE96 E8                                INX
0CE97 E0 20                             CPX #$20
0CE99 D0 F5                         BNE -
0CE9B                               
0CE9B                               ;; Put ball in the middle
0CE9B A9 7C                         LDA #$7C
0CE9D 85 17                         STA ball_xpos_hi
0CE9F 85 19                         STA ball_ypos_hi
0CEA1                           
0CEA1                               ;; Clear the screen
0CEA1 20 18 C6                      JSR sub_ClearScreen
0CEA4                           
0CEA4                               ;; Set up intro screen draw loop
0CEA4 A2 00                         LDX #$00
0CEA6                           
0CEA6                           -loop_IntroScreenData:
0CEA6                           
0CEA6                               ;; Get current byte from intro screen data
0CEA6 BD 73 D1                      LDA tbl_IntroScreenData,x
0CEA9                           
0CEA9                               ;; If current byte is #$3F, we're done drawing.
0CEA9 C9 3F                         CMP #$3F
0CEAB D0 03                         BNE +
0CEAD 4C FA CE                          JMP +goToEndIntroScreen
0CEB0                               +
0CEB0                           
0CEB0                               ;; If highest bits are %11, draw a plain tile
0CEB0 29 C0                         AND #%11000000
0CEB2 D0 03                         BNE +
0CEB4 4C DA CE                          JMP +drawTile
0CEB7                               +
0CEB7                               
0CEB7                               ;; If highest bits are %01, set the PPU address
0CEB7                               ;; If not, draw two logo tiles
0CEB7 C9 40                         CMP #%01000000
0CEB9 D0 03                         BNE +drawLogo
0CEBB 4C E4 CE                          JMP +setPpuAddr
0CEBE                           
0CEBE                           +drawLogo:
0CEBE                               ;; Get bits 0-2 and store in a temp variable
0CEBE BD 73 D1                      LDA tbl_IntroScreenData,x
0CEC1 29 07                         AND #%00000111
0CEC3 85 00                         STA temp
0CEC5                               
0CEC5                               ;; Get bits 3-5, shift over to get a value from 0-7
0CEC5 BD 73 D1                      LDA tbl_IntroScreenData,x
0CEC8 4A                            LSR
0CEC9 4A                            LSR
0CECA 4A                            LSR
0CECB 29 07                         AND #%00000111
0CECD                               
0CECD                               ;; Draw the tile that corresponds with that value
0CECD A8                            TAY
0CECE 20 FB C6                      JSR sub_drawIntroScreenLogoTile
0CED1                               
0CED1                               ;; Do the same for the value stored in temp
0CED1 A4 00                         LDY temp
0CED3 20 FB C6                      JSR sub_drawIntroScreenLogoTile
0CED6                           
0CED6                               ;; Next byte please
0CED6 E8                            INX
0CED7 4C A6 CE                      JMP -loop_IntroScreenData
0CEDA                           
0CEDA                           +drawTile:
0CEDA                               ;; Just draw the tile value on screen
0CEDA BD 73 D1                      LDA tbl_IntroScreenData,x
0CEDD 8D 07 20                      STA PPU_DATA
0CEE0                               
0CEE0                               ;; Next byte please
0CEE0 E8                            INX
0CEE1 4C A6 CE                      JMP -loop_IntroScreenData
0CEE4                           
0CEE4                           
0CEE4                           +setPpuAddr:
0CEE4                               ;; Reset the PPU latch
0CEE4 2C 02 20                      BIT PPU_STATUS
0CEE7                               
0CEE7                               ;; Sanitize and write the high byte of the PPU address
0CEE7 BD 73 D1                      LDA tbl_IntroScreenData,x
0CEEA 29 3F                         AND #%00111111
0CEEC 8D 06 20                      STA PPU_ADDR
0CEEF                           
0CEEF                               ;; Write the low byte of the PPU address
0CEEF E8                            INX
0CEF0 BD 73 D1                      LDA tbl_IntroScreenData,x
0CEF3 8D 06 20                      STA PPU_ADDR
0CEF6                               
0CEF6                               ;; PPU has been set up to draw tiles at the correct spot now.
0CEF6                               
0CEF6                               ;; Next byte please.
0CEF6 E8                            INX
0CEF7 4C A6 CE                      JMP -loop_IntroScreenData
0CEFA                           
0CEFA                           +goToEndIntroScreen:
0CEFA                           
0CEFA                               ;; To color the 1.LEVEL: line green, we need to update two
0CEFA                               ;; values in the PPU attribute data.
0CEFA 2C 02 20                      BIT PPU_STATUS
0CEFD A9 23                         LDA #$23
0CEFF 8D 06 20                      STA PPU_ADDR
0CF02 A9 CB                         LDA #$CB
0CF04 8D 06 20                      STA PPU_ADDR
0CF07 A9 0A                         LDA #%00001010
0CF09 8D 07 20                      STA PPU_DATA
0CF0C 8D 07 20                      STA PPU_DATA
0CF0F                           
0CF0F 60                            RTS
0CF10                           
0CF10                           .include "game/subroutine/LoadWinScreen.asm"
0CF10                           
0CF10                           ;; Load the win screen (in progress)
0CF10                           sub_LoadWinScreen:
0CF10 60                            RTS
0CF11                           
0CF11                           .include "game/subroutine/PreloadSfxFromX.asm"
0CF11                           
0CF11                           sub_PreloadSfxFromX:
0CF11                               
0CF11                               ;; Load sample X into sfx address (low byte)
0CF11 BD A6 DA                      LDA tbl_Sfx_lo,x
0CF14 85 4C                         STA sfx_address
0CF16                               
0CF16                               ;; Load sample X into sfx address (high byte)
0CF16 BD A3 DA                      LDA tbl_Sfx_hi,x
0CF19 85 4D                         STA sfx_address+1
0CF1B                               
0CF1B                               ;; Start SFX timer
0CF1B A9 01                         LDA #$01
0CF1D 85 4E                         STA sfx_timer
0CF1F                               
0CF1F 60                            RTS
0CF20                               
0CF20                               0CF20                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CF20                           
0CF20                           ;; Remove a block from screen
0CF20                           sub_RemoveBlockFromScreen:
0CF20                           
0CF20                               ;; Get current buffer location
0CF20 A4 3A                         LDY ppu_buffer_pointer
0CF22                               
0CF22                               ;; TILE 1: if metatile on top left is solid, draw
0CF22                               ;; null tile, else draw random noise tile
0CF22 A9 00                         LDA #$00
0CF24 85 39                         STA ppu_buffer_update
0CF26                               
0CF26 A5 00                         LDA temp
0CF28 99 00 03                      STA ppu_buffer,y
0CF2B C8                            INY
0CF2C A5 01                         LDA temp+1
0CF2E 99 00 03                      STA ppu_buffer,y
0CF31 C8                            INY
0CF32                               
0CF32 8A                            TXA
0CF33 29 0F                         AND #%00001111
0CF35 F0 11                         BEQ +drawRandomTile
0CF37                           
0CF37 8A                            TXA
0CF38 29 F0                         AND #%11110000
0CF3A F0 0C                         BEQ +drawRandomTile
0CF3C                           
0CF3C BD EF 03                      LDA tile_type-17,x
0CF3F 29 01                         AND #%00000001
0CF41 F0 05                         BEQ +drawRandomTile  
0CF43                           
0CF43                               ;; Draw a null tile
0CF43 A9 00                         LDA #$00
0CF45 4C 50 CF                      JMP +addToPPUBuffer
0CF48                               
0CF48                           +drawRandomTile:
0CF48                               ;; Draw a random tile
0CF48 20 06 C5                      JSR sub_GetRandomNumber
0CF4B 29 07                         AND #%00000111
0CF4D 18                            CLC
0CF4E 69 68                         ADC #$68
0CF50                               
0CF50                               ;; Add tile to ppu buffer
0CF50                           +addToPPUBuffer:
0CF50 99 00 03                      STA ppu_buffer,y
0CF53 C8                            INY
0CF54                           
0CF54                               ;; TILE 2: If metatile above is solid, draw null,
0CF54                               ;; else draw random noise.
0CF54 E6 01                         INC temp+1
0CF56 A5 00                         LDA temp
0CF58 99 00 03                      STA ppu_buffer,y
0CF5B C8                            INY
0CF5C A5 01                         LDA temp+1
0CF5E 99 00 03                      STA ppu_buffer,y
0CF61 C8                            INY
0CF62                               
0CF62 8A                            TXA
0CF63 29 F0                         AND #%11110000
0CF65 F0 0C                         BEQ +drawRandomTile
0CF67                               
0CF67 BD F0 03                      LDA tile_type-16,x
0CF6A 29 01                         AND #%00000001
0CF6C F0 05                         BEQ +drawRandomTile
0CF6E                               
0CF6E A9 00                         LDA #%00
0CF70 4C 7B CF                      JMP +addToPPUBuffer
0CF73                           
0CF73                           +drawRandomTile:
0CF73 20 06 C5                      JSR sub_GetRandomNumber
0CF76 29 07                         AND #%00000111
0CF78 18                            CLC
0CF79 69 68                         ADC #$68
0CF7B                           
0CF7B                           +addToPPUBuffer:
0CF7B 99 00 03                      STA ppu_buffer,y
0CF7E C8                            INY
0CF7F                               
0CF7F                               ;; TILE 3 - If metatile left is solid, draw null,
0CF7F                               ;; else draw random noise.
0CF7F A5 01                         LDA temp+1
0CF81 18                            CLC
0CF82 69 1F                         ADC #$1F
0CF84 85 01                         STA temp+1
0CF86 A5 00                         LDA temp
0CF88 69 00                         ADC #$00
0CF8A 85 00                         STA temp
0CF8C 99 00 03                      STA ppu_buffer,y
0CF8F C8                            INY
0CF90 A5 01                         LDA temp+1
0CF92 99 00 03                      STA ppu_buffer,y
0CF95 C8                            INY
0CF96                               
0CF96 8A                            TXA
0CF97 29 0F                         AND #%00001111
0CF99 F0 0C                         BEQ +drawRandomTile
0CF9B                               
0CF9B BD FF 03                      LDA tile_type-1,x
0CF9E 29 01                         AND #%00000001
0CFA0 F0 05                         BEQ +drawRandomTile
0CFA2                               
0CFA2 A9 00                         LDA #%00
0CFA4 4C AF CF                      JMP +addToPPUBuffer
0CFA7                           
0CFA7                           +drawRandomTile:
0CFA7 20 06 C5                      JSR sub_GetRandomNumber
0CFAA 29 07                         AND #%00000111
0CFAC 18                            CLC
0CFAD 69 68                         ADC #$68
0CFAF                               
0CFAF                           +addToPPUBuffer:
0CFAF 99 00 03                      STA ppu_buffer,y
0CFB2 C8                            INY
0CFB3                               
0CFB3                               ;; TILE 4 - Always random noise
0CFB3 E6 01                         INC temp+1
0CFB5 A5 00                         LDA temp
0CFB7 99 00 03                      STA ppu_buffer,y
0CFBA C8                            INY
0CFBB A5 01                         LDA temp+1
0CFBD 99 00 03                      STA ppu_buffer,y
0CFC0 C8                            INY
0CFC1 20 06 C5                      JSR sub_GetRandomNumber
0CFC4 29 07                         AND #%00000111
0CFC6 18                            CLC
0CFC7 69 68                         ADC #$68
0CFC9 99 00 03                      STA ppu_buffer,y
0CFCC C8                            INY
0CFCD                           
0CFCD                               ;; TILE 5 - If tile on the right is solid, skip,
0CFCD                               ;; else draw random noise tile
0CFCD E6 01                         INC temp+1
0CFCF                               
0CFCF 8A                            TXA
0CFD0 29 0F                         AND #%00001111
0CFD2 C9 0D                         CMP #$0D
0CFD4 F0 1F                         BEQ +skipTile
0CFD6                               
0CFD6 BD 01 04                      LDA tile_type+1,x
0CFD9 29 01                         AND #%00000001
0CFDB D0 18                         BNE +skipTile
0CFDD A5 00                             LDA temp
0CFDF 99 00 03                          STA ppu_buffer,y
0CFE2 C8                                INY
0CFE3 A5 01                             LDA temp+1
0CFE5 99 00 03                          STA ppu_buffer,y
0CFE8 C8                                INY
0CFE9 20 06 C5                          JSR sub_GetRandomNumber
0CFEC 29 07                             AND #%00000111
0CFEE 18                                CLC
0CFEF 69 68                             ADC #$68
0CFF1 99 00 03                          STA ppu_buffer,y
0CFF4 C8                                INY    
0CFF5                               +skipTile:
0CFF5                           
0CFF5                               ;; TILE 6 - If tile on bottom is solid, skip,
0CFF5                               ;; else draw random noise
0CFF5 A5 01                         LDA temp+1
0CFF7 18                            CLC
0CFF8 69 1F                         ADC #$1F
0CFFA 85 01                         STA temp+1
0CFFC A5 00                         LDA temp
0CFFE 69 00                         ADC #$00
0D000 85 00                         STA temp
0D002                           
0D002 8A                            TXA
0D003 29 F0                         AND #%11110000
0D005 C9 90                         CMP #$90
0D007 F0 1F                         BEQ +skipTile
0D009                           
0D009 BD 10 04                      LDA tile_type+16,x
0D00C 29 01                         AND #%00000001
0D00E D0 18                         BNE +skipTile
0D010 A5 00                             LDA temp
0D012 99 00 03                          STA ppu_buffer,y
0D015 C8                                INY
0D016 A5 01                             LDA temp+1
0D018 99 00 03                          STA ppu_buffer,y
0D01B C8                                INY
0D01C 20 06 C5                          JSR sub_GetRandomNumber
0D01F 29 07                             AND #%00000111
0D021 18                                CLC
0D022 69 68                             ADC #$68
0D024 99 00 03                          STA ppu_buffer,y
0D027 C8                                INY    
0D028                               +skipTile:
0D028                               
0D028                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D028                               ;; else draw random noise
0D028 E6 01                         INC temp+1
0D02A                           
0D02A 8A                            TXA
0D02B 29 F0                         AND #%11110000
0D02D C9 90                         CMP #$90
0D02F F0 26                         BEQ +skipTile
0D031                               
0D031 8A                            TXA
0D032 29 0F                         AND #%00001111
0D034 C9 0D                         CMP #$0D
0D036 F0 1F                         BEQ +skipTile
0D038                               
0D038 BD 11 04                      LDA tile_type+17,x
0D03B 29 01                         AND #%00000001
0D03D D0 18                         BNE +skipTile
0D03F A5 00                             LDA temp
0D041 99 00 03                          STA ppu_buffer,y
0D044 C8                                INY
0D045 A5 01                             LDA temp+1
0D047 99 00 03                          STA ppu_buffer,y
0D04A C8                                INY
0D04B 20 06 C5                          JSR sub_GetRandomNumber
0D04E 29 07                             AND #%00000111
0D050 18                                CLC
0D051 69 68                             ADC #$68
0D053 99 00 03                          STA ppu_buffer,y
0D056 C8                                INY    
0D057                               +skipTile:   
0D057                           
0D057                           
0D057                               ;; Update attribute table accordingly through ppu buffer
0D057 20 96 D0                      JSR sub_SetTileAttributeAddress
0D05A                               
0D05A 8A                            TXA
0D05B 29 10                         AND #%00010000
0D05D F0 05                         BEQ +
0D05F A9 F0                             LDA #%11110000
0D061 4C 66 D0                          JMP ++
0D064                               +
0D064 A9 0F                         LDA #%00001111
0D066                               ++
0D066 85 02                         STA temp+2
0D068                               
0D068 8A                            TXA
0D069 48                            PHA
0D06A 29 01                         AND #%00000001
0D06C F0 07                         BEQ +
0D06E A5 02                             LDA temp+2
0D070 09 CC                             ORA #%11001100
0D072 4C 79 D0                          JMP ++
0D075                               +
0D075 A5 02                         LDA temp+2
0D077 09 33                         ORA #%00110011
0D079                               ++
0D079 85 02                         STA temp+2
0D07B                               
0D07B A5 00                         LDA temp
0D07D 38                            SEC
0D07E E9 C0                         SBC #$C0
0D080 AA                            TAX
0D081 BD A0 04                      LDA tile_attributes,x
0D084 25 02                         AND temp+2
0D086 9D A0 04                      STA tile_attributes,x
0D089 99 00 03                      STA ppu_buffer,y
0D08C C8                            INY
0D08D 68                            PLA
0D08E AA                            TAX
0D08F                           
0D08F                               ;; Tell PPU to update tiles and attributes next frame
0D08F 84 3A                         STY ppu_buffer_pointer
0D091 A9 01                         LDA #$01
0D093 85 39                         STA ppu_buffer_update
0D095                            
0D095                               ;; We're done - return
0D095 60                            RTS
0D096                           
0D096                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D096                           
0D096                           ;; Set the correct tile attribute address based on game tile (x) 
0D096                           ;; into the correct ppu buffer slot (y)
0D096                           
0D096                           sub_SetTileAttributeAddress:
0D096 A9 23                         LDA #$23
0D098 99 00 03                      STA ppu_buffer,y
0D09B C8                            INY
0D09C                               
0D09C 8A                            TXA
0D09D 29 F0                         AND #%11110000
0D09F 4A                            LSR
0D0A0 4A                            LSR
0D0A1 4A                            LSR
0D0A2 4A                            LSR
0D0A3 18                            CLC
0D0A4 69 01                         ADC #$01
0D0A6 4A                            LSR
0D0A7 0A                            ASL
0D0A8 0A                            ASL
0D0A9 0A                            ASL
0D0AA 18                            CLC
0D0AB 69 C8                         ADC #$C8
0D0AD 85 00                         STA temp
0D0AF 8A                            TXA
0D0B0 29 0F                         AND #%00001111
0D0B2 18                            CLC
0D0B3 69 01                         ADC #$01
0D0B5 4A                            LSR
0D0B6 18                            CLC
0D0B7 65 00                         ADC temp
0D0B9 85 00                         STA temp
0D0BB 99 00 03                      STA ppu_buffer,y
0D0BE C8                            INY
0D0BF                                  
0D0BF 60                            RTS
0D0C0                           
0D0C0                           .include "game/subroutine/SubtractXFromBonus.asm"
0D0C0                           
0D0C0                           sub_SubtractXFromBonus:
0D0C0 86 09                         STX temp+9
0D0C2 A5 2E                         LDA ball_bonus+2
0D0C4 38                            SEC
0D0C5 E5 09                         SBC temp+9
0D0C7 30 05                         BMI +
0D0C9 85 2E                             STA ball_bonus+2
0D0CB 4C E3 D0                          JMP +updateBonusOnScreen
0D0CE                               +
0D0CE                           
0D0CE 18                            CLC
0D0CF 69 0A                         ADC #$0A
0D0D1 85 2E                         STA ball_bonus+2
0D0D3 C6 2D                         DEC ball_bonus+1
0D0D5 10 0C                         BPL +updateBonusOnScreen
0D0D7                           
0D0D7 A9 09                         LDA #$09
0D0D9 85 2D                         STA ball_bonus+1
0D0DB C6 2C                         DEC ball_bonus
0D0DD 10 04                         BPL +updateBonusOnScreen
0D0DF                           
0D0DF A9 00                         LDA #$00
0D0E1 85 2C                         STA ball_bonus
0D0E3                           
0D0E3                               +updateBonusOnScreen:
0D0E3 A9 20                         LDA #$20
0D0E5 85 00                         STA temp
0D0E7 A9 9C                         LDA #$9C
0D0E9 85 01                         STA temp+1
0D0EB A2 02                         LDX #$02
0D0ED                               
0D0ED                               -updateNextDigit:
0D0ED B5 2C                             LDA ball_bonus,x
0D0EF 18                                CLC
0D0F0 69 01                             ADC #$01
0D0F2 85 02                             STA temp+2
0D0F4 20 25 D1                          JSR sub_WriteByteToPPUBuffer
0D0F7 C6 01                             DEC temp+1
0D0F9 CA                                DEX
0D0FA 10 F1                         BPL -updateNextDigit
0D0FC                           
0D0FC 60                            RTS
0D0FD                           
0D0FD                           .include "game/subroutine/WaitXFrames.asm"
0D0FD                           
0D0FD                           sub_WaitXFrames:
0D0FD                               
0D0FD                               ;; Push X to stack
0D0FD 8A                            TXA
0D0FE 48                            PHA
0D0FF                               
0D0FF                               ;; Wait for NMI
0D0FF 20 28 C5                      JSR sub_WaitForNMI
0D102                           
0D102                               ;; Clear pointer, except for sprite-zero and ball
0D102 A9 08                         LDA #$08
0D104 85 3D                         STA sprite_ram_pointer
0D106                           
0D106                               ;; Load animations (if any)
0D106 20 13 CA                      JSR sub_LoadAnimations
0D109                               
0D109                               ;; Restore original X
0D109 68                            PLA
0D10A AA                            TAX
0D10B                               
0D10B                               ;; Check if all X frames have passed
0D10B CA                            DEX
0D10C D0 EF                         BNE sub_WaitXFrames
0D10E                               
0D10E                               ;; Return
0D10E 60                            RTS
0D10F                           
0D10F                           .include "game/subroutine/Waste.asm"
0D10F 20 12 D1                  sub_Waste7: JSR sub_Waste6
0D112 20 15 D1                  sub_Waste6: JSR sub_Waste5
0D115 20 18 D1                  sub_Waste5: JSR sub_Waste4
0D118 20 1B D1                  sub_Waste4: JSR sub_Waste3
0D11B 20 1E D1                  sub_Waste3: JSR sub_Waste2
0D11E 20 21 D1                  sub_Waste2: JSR sub_Waste1
0D121 20 24 D1                  sub_Waste1: JSR sub_Waste0
0D124 60                        sub_Waste0: RTS0D125                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D125                           
0D125                           ;; Write the byte in temp+2 and the ppu address (temp)
0D125                           ;; to a buffer, so NMI can update it before the next frame
0D125                           
0D125                           sub_WriteByteToPPUBuffer:
0D125                           
0D125                               ;; Prevent updating until full 3-byte buffer is filled,
0D125                               ;; so that graphics won't glitch out if NMI happens during
0D125                               ;; updating the buffer
0D125 A9 00                         LDA #$00
0D127 85 39                         STA ppu_buffer_update
0D129                           
0D129                               ;; Check if buffer full; if so, wait a frame and force update
0D129 A4 3A                         LDY ppu_buffer_pointer
0D12B C0 60                         CPY #$60
0D12D D0 05                         BNE +
0D12F E6 39                             INC ppu_buffer_update
0D131 20 31 C5                          JSR sub_WaitForVBlank
0D134                               +
0D134                           
0D134                               ;; Add ppu_addr high byte to buffer
0D134 A5 00                         LDA temp
0D136 99 00 03                      STA ppu_buffer,y
0D139                           
0D139                               ;; Add ppu_addr low byte to buffer
0D139 C8                            INY
0D13A A5 01                         LDA temp+1
0D13C 99 00 03                      STA ppu_buffer,y
0D13F                           
0D13F                               ;; Add ppu_data to buffer
0D13F C8                            INY
0D140 A5 02                         LDA temp+2
0D142 99 00 03                      STA ppu_buffer,y
0D145                           
0D145                               ;; Update buffer pointer
0D145 C8                            INY
0D146 84 3A                         STY ppu_buffer_pointer
0D148                           
0D148                               ;; Tell NMI to update next round
0D148 E6 39                         INC ppu_buffer_update
0D14A                           
0D14A                               ;; Return
0D14A 60                            RTS
0D14B                           
0D14B                           
0D14B                           
0D14B                           
0D14B                           ;; LUTs
0D14B                           .include "game/include/tables.asm"
0D14B                           
0D14B                           ;; Initial screen palette
0D14B                           tbl_IntroScreenPalette:
0D14B 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D14F 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D153 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D157 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D15B                           
0D15B 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D15F 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D163 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D167 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D16B                           
0D16B                           
0D16B                           ;; Intro: mapping logo index to chr tile
0D16B                           tbl_IntroScreenLogoChr:
0D16B 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D173                           
0D173                           
0D173                           ;; Intro screen data
0D173                           tbl_IntroScreenData:
0D173                           
0D173                               ;; Set PPU address $20AC and draw
0D173 60 AC                         .db #$60, #$AC
0D175 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D17D                           
0D17D                               ;; Set PPU address $20CF and draw
0D17D 60 CF                         .db #$60, #$CF
0D17F 01 02                         .db #_0, #_1
0D181                               
0D181                               ;; Set PPU address $2122 and draw
0D181 61 22                         .db #$61, #$22
0D183 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D18A 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D190 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D198 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D19D                               
0D19D                               ;; Set PPU address $2147 and draw
0D19D 61 47                         .db #$61, #$47
0D19F 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D1A6 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D1AA 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D1B0 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D1B6                               
0D1B6                               ;; Set PPU address $218B and draw
0D1B6 61 8B                         .db #$61, #$8B
0D1B8 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D1BE 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D1C3                               
0D1C3                               ;; Set PPU address $21E6 and draw
0D1C3 61 E6                         .db #$61, #$E6
0D1C5 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D1CD 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D1D1 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D1D8                               
0D1D8                               ;; Set PPU address $222D and draw
0D1D8 62 2D                         .db #$62, #$2D
0D1DA 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D1E0                               
0D1E0                               ;; Set PPU address $2281
0D1E0 62 81                         .db #$62, #$81
0D1E2                               
0D1E2                               ;; Draw the Crillion logo
0D1E2 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D1E6 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1EA C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D1EE E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D1F2                               
0D1F2 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D1F6 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1FA C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1FE D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D202                               
0D202 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D206 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D20A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D20E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D212                           
0D212 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D216 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D21A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D21E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D222                               
0D222 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D226 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D22A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D22E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D232                           
0D232 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D236 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D23A C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D23E F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D241                           
0D241                               ;; End of intro
0D241 3F                            .db #$3F
0D242                           
0D242                           
0D242                           ;; Animation frames table
0D242                           .include "game/include/table/animation_frames.asm"
0D242                           
0D242                           ;; CHR tile-id's per slide of explosion
0D242                           explosion_slide0:
0D242 00 00 00                      .db #$00, #$00, #$00
0D245 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D248 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D24B                           
0D24B                           explosion_slide1:
0D24B 00 00 00                      .db #$00, #$00, #$00
0D24E 29 2A 2B                      .db #$29, #$2A, #$2B
0D251 39 3A 3B                      .db #$39, #$3A, #$3B
0D254                           
0D254                           explosion_slide2:
0D254 16 00 00                      .db #$16, #$00, #$00
0D257 26 27 28                      .db #$26, #$27, #$28
0D25A 36 37 38                      .db #$36, #$37, #$38
0D25D                           
0D25D                           explosion_slide3:
0D25D 00 14 15                      .db #$00, #$14, #$15
0D260 23 24 25                      .db #$23, #$24, #$25
0D263 33 34 35                      .db #$33, #$34, #$35
0D266                           
0D266                           explosion_slide4:
0D266 10 11 12                      .db #$10, #$11, #$12
0D269 20 21 22                      .db #$20, #$21, #$22
0D26C 30 31 32                      .db #$30, #$31, #$32
0D26F                           
0D26F                           ;; High and low bytes of animation slides
0D26F                           explosion_anim_hi:
0D26F D2                            .db >#explosion_slide0
0D270 D2                            .db >#explosion_slide1
0D271 D2                            .db >#explosion_slide2
0D272 D2                            .db >#explosion_slide3
0D273 D2                            .db >#explosion_slide4
0D274 D2                            .db >#explosion_slide4
0D275 D2                            .db >#explosion_slide3
0D276 D2                            .db >#explosion_slide2
0D277 D2                            .db >#explosion_slide1
0D278 D2                            .db >#explosion_slide0
0D279                           
0D279                           explosion_anim_lo:
0D279 42                            .db <#explosion_slide0
0D27A 4B                            .db <#explosion_slide1
0D27B 54                            .db <#explosion_slide2
0D27C 5D                            .db <#explosion_slide3
0D27D 66                            .db <#explosion_slide4
0D27E 66                            .db <#explosion_slide4
0D27F 5D                            .db <#explosion_slide3
0D280 54                            .db <#explosion_slide2
0D281 4B                            .db <#explosion_slide1
0D282 42                            .db <#explosion_slide0
0D283                           
0D283                           
0D283                           
0D283                           ;; Ball palette color table (CBRYGM)
0D283                           tbl_BallColorDark:
0D283 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D289                            
0D289                           tbl_BallColorLight:
0D289 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D28F                           
0D28F                               
0D28F                           ;; Screen mode drawing routine addresses
0D28F                           tbl_LoadScreenHi:
0D28F CE CA CF                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D292                           
0D292                           tbl_LoadScreenLo:
0D292 81 B8 10                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D295                           
0D295                           
0D295                           ;; Level data
0D295                           .include "game/include/table/level_data.asm"
0D295                           
0D295                           ;; Level layout tables
0D295                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D295                           
0D295                           ifdef TESTING
0D295                           lvl_test:
0D295 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D29D 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D2A5 FF                            .db #LEVEL_END
0D2A6                           endif
0D2A6                           
0D2A6                           lvl_layout_01:
0D2A6 61 21                         .db #$61, #%00100001
0D2A8 52 61                         .db #$52, #%01100001
0D2AA 43 65                         .db #$43, #%01100101
0D2AC 83 05                         .db #$83, #%00000101
0D2AE 93 15                         .db #$93, #%00010101
0D2B0 34 7A                         .db #$34, #%01111010
0D2B2 74 7A                         .db #$74, #%01111010
0D2B4 35 7A                         .db #$35, #%01111010
0D2B6 75 7A                         .db #$75, #%01111010
0D2B8 46 65                         .db #$46, #%01100101
0D2BA 86 25                         .db #$86, #%00100101
0D2BC 57 61                         .db #$57, #%01100001
0D2BE 68 21                         .db #$68, #%00100001
0D2C0 FF                            .db #LEVEL_END
0D2C1                           
0D2C1                           lvl_layout_02:
0D2C1 C0 0A                         .db #$C0, #%00001010
0D2C3 11 15                         .db #$11, #%00010101
0D2C5 21 62                         .db #$21, #%01100010
0D2C7 61 62                         .db #$61, #%01100010
0D2C9 A1 42                         .db #$A1, #%01000010
0D2CB 12 67                         .db #$12, #%01100111
0D2CD 52 67                         .db #$52, #%01100111
0D2CF 92 67                         .db #$92, #%01100111
0D2D1 C3 0D                         .db #$C3, #%00001101
0D2D3 14 11                         .db #$14, #%00010001
0D2D5 24 65                         .db #$24, #%01100101
0D2D7 64 65                         .db #$64, #%01100101
0D2D9 A4 45                         .db #$A4, #%01000101
0D2DB 15 67                         .db #$15, #%01100111
0D2DD 55 67                         .db #$55, #%01100111
0D2DF 95 67                         .db #$95, #%01100111
0D2E1 17 12                         .db #$17, #%00010010
0D2E3 27 61                         .db #$27, #%01100001
0D2E5 67 61                         .db #$67, #%01100001
0D2E7 A7 41                         .db #$A7, #%01000001
0D2E9 38 7A                         .db #$38, #%01111010
0D2EB 98 5A                         .db #$98, #%01011010
0D2ED 18 27                         .db #$18, #%00100111
0D2EF 48 27                         .db #$48, #%00100111
0D2F1 78 27                         .db #$78, #%00100111
0D2F3 C8 07                         .db #$C8, #%00000111
0D2F5 FF                            .db #LEVEL_END
0D2F6                           
0D2F6                           lvl_layout_03:
0D2F6 00 7A                         .db #$00, #%01111010
0D2F8 40 7A                         .db #$40, #%01111010
0D2FA 80 7A                         .db #$80, #%01111010
0D2FC C0 1A                         .db #$C0, #%00011010
0D2FE 10 A1                         .db #$10, #%10100001
0D300 13 E1                         .db #$13, #%11100001
0D302 17 C1                         .db #$17, #%11000001
0D304 30 C1                         .db #$30, #%11000001
0D306 34 C1                         .db #$34, #%11000001
0D308 38 A1                         .db #$38, #%10100001
0D30A 50 E1                         .db #$50, #%11100001
0D30C 55 81                         .db #$55, #%10000001
0D30E 57 C1                         .db #$57, #%11000001
0D310 70 C1                         .db #$70, #%11000001
0D312 73 A1                         .db #$73, #%10100001
0D314 76 E1                         .db #$76, #%11100001
0D316 90 E1                         .db #$90, #%11100001
0D318 95 81                         .db #$95, #%10000001
0D31A 97 C1                         .db #$97, #%11000001
0D31C B0 C1                         .db #$B0, #%11000001
0D31E B4 C1                         .db #$B4, #%11000001
0D320 B8 A1                         .db #$B8, #%10100001
0D322 D0 A1                         .db #$D0, #%10100001
0D324 D3 E1                         .db #$D3, #%11100001
0D326 D7 C1                         .db #$D7, #%11000001
0D328 FF                            .db #LEVEL_END
0D329                           
0D329                           lvl_layout_04:
0D329 00 4C                         .db #$00, #%01001100
0D32B 40 6C                         .db #$40, #%01101100
0D32D 80 4C                         .db #$80, #%01001100
0D32F 81 AC                         .db #$81, #%10101100
0D331 C1 2C                         .db #$C1, #%00101100
0D333 02 6C                         .db #$02, #%01101100
0D335 42 CC                         .db #$42, #%11001100
0D337 62 EC                         .db #$62, #%11101100
0D339 A2 CC                         .db #$A2, #%11001100
0D33B C3 CC                         .db #$C3, #%11001100
0D33D 04 4C                         .db #$04, #%01001100
0D33F 84 2C                         .db #$84, #%00101100
0D341 25 AC                         .db #$25, #%10101100
0D343 85 AC                         .db #$85, #%10101100
0D345 06 AC                         .db #$06, #%10101100
0D347 36 CC                         .db #$36, #%11001100
0D349 56 CC                         .db #$56, #%11001100
0D34B 66 EC                         .db #$66, #%11101100
0D34D 96 6C                         .db #$96, #%01101100
0D34F C7 AC                         .db #$C7, #%10101100
0D351 08 2C                         .db #$08, #%00101100
0D353 78 6C                         .db #$78, #%01101100
0D355 D8 0C                         .db #$D8, #%00001100
0D357 30 A1                         .db #$30, #%10100001
0D359 B0 21                         .db #$B0, #%00100001
0D35B 01 41                         .db #$01, #%01000001
0D35D 41 61                         .db #$41, #%01100001
0D35F 91 A1                         .db #$91, #%10100001
0D361 A1 21                         .db #$A1, #%00100001
0D363 52 C1                         .db #$52, #%11000001
0D365 72 E1                         .db #$72, #%11100001
0D367 B2 C1                         .db #$B2, #%11000001
0D369 C2 21                         .db #$C2, #%00100001
0D36B 03 41                         .db #$03, #%01000001
0D36D 33 C1                         .db #$33, #%11000001
0D36F 83 21                         .db #$83, #%00100001
0D371 D3 E1                         .db #$D3, #%11100001
0D373 05 21                         .db #$05, #%00100001
0D375 45 E1                         .db #$45, #%11100001
0D377 A5 21                         .db #$A5, #%00100001
0D379 16 A1                         .db #$16, #%10100001
0D37B 76 A1                         .db #$76, #%10100001
0D37D 27 A1                         .db #$27, #%10100001
0D37F 57 21                         .db #$57, #%00100001
0D381 87 41                         .db #$87, #%01000001
0D383 B7 A1                         .db #$B7, #%10100001
0D385 19 21                         .db #$19, #%00100001
0D387 39 41                         .db #$39, #%01000001
0D389 89 41                         .db #$89, #%01000001
0D38B C9 21                         .db #$C9, #%00100001
0D38D D0 1A                         .db #$D0, #%00011010
0D38F 55 1A                         .db #$55, #%00011010
0D391 95 1A                         .db #$95, #%00011010
0D393 D7 1A                         .db #$D7, #%00011010
0D395 09 1A                         .db #$09, #%00011010
0D397 79 1A                         .db #$79, #%00011010
0D399 FF                            .db #LEVEL_END
0D39A                           
0D39A                           lvl_layout_05:
0D39A 40 0A                         .db #$40, #%00001010
0D39C 70 1A                         .db #$70, #%00011010
0D39E B0 42                         .db #$B0, #%01000010
0D3A0 41 A7                         .db #$41, #%10100111
0D3A2 B1 22                         .db #$B1, #%00100010
0D3A4 D1 15                         .db #$D1, #%00010101
0D3A6 22 0A                         .db #$22, #%00001010
0D3A8 52 05                         .db #$52, #%00000101
0D3AA B2 42                         .db #$B2, #%01000010
0D3AC 03 27                         .db #$03, #%00100111
0D3AE 33 67                         .db #$33, #%01100111
0D3B0 73 67                         .db #$73, #%01100111
0D3B2 B3 47                         .db #$B3, #%01000111
0D3B4 05 E5                         .db #$05, #%11100101
0D3B6 25 A5                         .db #$25, #%10100101
0D3B8 35 25                         .db #$35, #%00100101
0D3BA 65 45                         .db #$65, #%01000101
0D3BC A5 45                         .db #$A5, #%01000101
0D3BE 46 E5                         .db #$46, #%11100101
0D3C0 66 E5                         .db #$66, #%11100101
0D3C2 86 E5                         .db #$86, #%11100101
0D3C4 A6 E2                         .db #$A6, #%11100010
0D3C6 C6 E5                         .db #$C6, #%11100101
0D3C8 27 25                         .db #$27, #%00100101
0D3CA 77 05                         .db #$77, #%00000101
0D3CC B7 02                         .db #$B7, #%00000010
0D3CE 09 05                         .db #$09, #%00000101
0D3D0 79 05                         .db #$79, #%00000101
0D3D2 B9 02                         .db #$B9, #%00000010
0D3D4 FF                            .db #LEVEL_END
0D3D5                           
0D3D5                           lvl_layout_06:
0D3D5 00 03                         .db #$00, #%00000011
0D3D7 20 03                         .db #$20, #%00000011
0D3D9 40 03                         .db #$40, #%00000011
0D3DB A0 03                         .db #$A0, #%00000011
0D3DD C0 03                         .db #$C0, #%00000011
0D3DF 11 03                         .db #$11, #%00000011
0D3E1 31 03                         .db #$31, #%00000011
0D3E3 51 03                         .db #$51, #%00000011
0D3E5 91 03                         .db #$91, #%00000011
0D3E7 B1 03                         .db #$B1, #%00000011
0D3E9 D1 03                         .db #$D1, #%00000011
0D3EB 02 03                         .db #$02, #%00000011
0D3ED 22 03                         .db #$22, #%00000011
0D3EF 42 03                         .db #$42, #%00000011
0D3F1 A2 03                         .db #$A2, #%00000011
0D3F3 C2 03                         .db #$C2, #%00000011
0D3F5 13 03                         .db #$13, #%00000011
0D3F7 33 03                         .db #$33, #%00000011
0D3F9 53 03                         .db #$53, #%00000011
0D3FB 93 03                         .db #$93, #%00000011
0D3FD B3 03                         .db #$B3, #%00000011
0D3FF D3 03                         .db #$D3, #%00000011
0D401 04 03                         .db #$04, #%00000011
0D403 24 03                         .db #$24, #%00000011
0D405 44 03                         .db #$44, #%00000011
0D407 A4 03                         .db #$A4, #%00000011
0D409 C4 03                         .db #$C4, #%00000011
0D40B 15 03                         .db #$15, #%00000011
0D40D 35 03                         .db #$35, #%00000011
0D40F 55 03                         .db #$55, #%00000011
0D411 95 03                         .db #$95, #%00000011
0D413 B5 03                         .db #$B5, #%00000011
0D415 D5 03                         .db #$D5, #%00000011
0D417 06 03                         .db #$06, #%00000011
0D419 26 03                         .db #$26, #%00000011
0D41B 46 03                         .db #$46, #%00000011
0D41D A6 03                         .db #$A6, #%00000011
0D41F C6 03                         .db #$C6, #%00000011
0D421 17 03                         .db #$17, #%00000011
0D423 37 03                         .db #$37, #%00000011
0D425 57 03                         .db #$57, #%00000011
0D427 97 03                         .db #$97, #%00000011
0D429 B7 03                         .db #$B7, #%00000011
0D42B D7 03                         .db #$D7, #%00000011
0D42D 08 03                         .db #$08, #%00000011
0D42F 28 03                         .db #$28, #%00000011
0D431 48 03                         .db #$48, #%00000011
0D433 A8 03                         .db #$A8, #%00000011
0D435 C8 03                         .db #$C8, #%00000011
0D437 19 03                         .db #$19, #%00000011
0D439 39 03                         .db #$39, #%00000011
0D43B 59 03                         .db #$59, #%00000011
0D43D 99 03                         .db #$99, #%00000011
0D43F B9 03                         .db #$B9, #%00000011
0D441 D9 03                         .db #$D9, #%00000011
0D443 60 4B                         .db #$60, #%01001011
0D445 71 CB                         .db #$71, #%11001011
0D447 62 4B                         .db #$62, #%01001011
0D449 64 4B                         .db #$64, #%01001011
0D44B 75 CB                         .db #$75, #%11001011
0D44D 66 4B                         .db #$66, #%01001011
0D44F 68 4B                         .db #$68, #%01001011
0D451 79 0B                         .db #$79, #%00001011
0D453 70 03                         .db #$70, #%00000011
0D455 72 03                         .db #$72, #%00000011
0D457 74 03                         .db #$74, #%00000011
0D459 76 03                         .db #$76, #%00000011
0D45B 78 03                         .db #$78, #%00000011
0D45D FF                            .db #LEVEL_END
0D45E                           
0D45E                           lvl_layout_07:
0D45E 00 11                         .db #$00, #%00010001
0D460 01 FA                         .db #$01, #%11111010
0D462 12 BA                         .db #$12, #%10111010
0D464 23 DA                         .db #$23, #%11011010
0D466 34 FA                         .db #$34, #%11111010
0D468 05 DA                         .db #$05, #%11011010
0D46A 15 FA                         .db #$15, #%11111010
0D46C 45 BA                         .db #$45, #%10111010
0D46E 56 DA                         .db #$56, #%11011010
0D470 27 BA                         .db #$27, #%10111010
0D472 67 DA                         .db #$67, #%11011010
0D474 38 3A                         .db #$38, #%00111010
0D476 78 BA                         .db #$78, #%10111010
0D478 09 3A                         .db #$09, #%00111010
0D47A 39 3A                         .db #$39, #%00111010
0D47C 89 1A                         .db #$89, #%00011010
0D47E B0 01                         .db #$B0, #%00000001
0D480 D0 01                         .db #$D0, #%00000001
0D482 A1 01                         .db #$A1, #%00000001
0D484 C1 11                         .db #$C1, #%00010001
0D486 B2 01                         .db #$B2, #%00000001
0D488 D2 01                         .db #$D2, #%00000001
0D48A A3 01                         .db #$A3, #%00000001
0D48C C3 01                         .db #$C3, #%00000001
0D48E B4 01                         .db #$B4, #%00000001
0D490 D4 01                         .db #$D4, #%00000001
0D492 A5 01                         .db #$A5, #%00000001
0D494 C5 01                         .db #$C5, #%00000001
0D496 B6 01                         .db #$B6, #%00000001
0D498 D6 01                         .db #$D6, #%00000001
0D49A A7 01                         .db #$A7, #%00000001
0D49C C7 01                         .db #$C7, #%00000001
0D49E FF                            .db #LEVEL_END
0D49F                           
0D49F                           lvl_layout_08:
0D49F 40 B5                         .db #$40, #%10110101
0D4A1 31 0D                         .db #$31, #%00001101
0D4A3 61 10                         .db #$61, #%00010000
0D4A5 42 C7                         .db #$42, #%11000111
0D4A7 52 67                         .db #$52, #%01100111
0D4A9 63 C7                         .db #$63, #%11000111
0D4AB 83 E7                         .db #$83, #%11100111
0D4AD 05 07                         .db #$05, #%00000111
0D4AF 15 3A                         .db #$15, #%00111010
0D4B1 07 63                         .db #$07, #%01100011
0D4B3 27 13                         .db #$27, #%00010011
0D4B5 38 A5                         .db #$38, #%10100101
0D4B7 09 14                         .db #$09, #%00010100
0D4B9 19 05                         .db #$19, #%00000101
0D4BB D0 E0                         .db #$D0, #%11100000
0D4BD C2 A0                         .db #$C2, #%10100000
0D4BF B3 E0                         .db #$B3, #%11100000
0D4C1 D5 E0                         .db #$D5, #%11100000
0D4C3 C6 E0                         .db #$C6, #%11100000
0D4C5 B0 C4                         .db #$B0, #%11000100
0D4C7 C0 A4                         .db #$C0, #%10100100
0D4C9 D1 A4                         .db #$D1, #%10100100
0D4CB C4 24                         .db #$C4, #%00100100
0D4CD C5 04                         .db #$C5, #%00000100
0D4CF B7 44                         .db #$B7, #%01000100
0D4D1 B8 A4                         .db #$B8, #%10100100
0D4D3 D9 05                         .db #$D9, #%00000101
0D4D5 FF                            .db #LEVEL_END
0D4D6                           
0D4D6                           lvl_layout_09:
0D4D6 81 04                         .db #$81, #%00000100
0D4D8 D1 04                         .db #$D1, #%00000100
0D4DA 32 C4                         .db #$32, #%11000100
0D4DC A2 C4                         .db #$A2, #%11000100
0D4DE C2 24                         .db #$C2, #%00100100
0D4E0 13 24                         .db #$13, #%00100100
0D4E2 53 04                         .db #$53, #%00000100
0D4E4 C3 27                         .db #$C3, #%00100111
0D4E6 15 6C                         .db #$15, #%01101100
0D4E8 55 6C                         .db #$55, #%01101100
0D4EA 95 6C                         .db #$95, #%01101100
0D4EC D5 0C                         .db #$D5, #%00001100
0D4EE 27 C7                         .db #$27, #%11000111
0D4F0 47 C7                         .db #$47, #%11000111
0D4F2 67 C7                         .db #$67, #%11000111
0D4F4 87 C7                         .db #$87, #%11000111
0D4F6 A7 C7                         .db #$A7, #%11000111
0D4F8 C7 C7                         .db #$C7, #%11000111
0D4FA 08 13                         .db #$08, #%00010011
0D4FC 28 15                         .db #$28, #%00010101
0D4FE 48 12                         .db #$48, #%00010010
0D500 68 15                         .db #$68, #%00010101
0D502 88 11                         .db #$88, #%00010001
0D504 A8 10                         .db #$A8, #%00010000
0D506 C8 14                         .db #$C8, #%00010100
0D508 09 07                         .db #$09, #%00000111
0D50A 19 03                         .db #$19, #%00000011
0D50C 39 05                         .db #$39, #%00000101
0D50E 59 02                         .db #$59, #%00000010
0D510 79 05                         .db #$79, #%00000101
0D512 99 01                         .db #$99, #%00000001
0D514 B9 00                         .db #$B9, #%00000000
0D516 D9 04                         .db #$D9, #%00000100
0D518 FF                            .db #LEVEL_END
0D519                           
0D519                           lvl_layout_10:
0D519 00 02                         .db #$00, #%00000010
0D51B 10 C9                         .db #$10, #%11001001
0D51D 50 C9                         .db #$50, #%11001001
0D51F 90 C9                         .db #$90, #%11001001
0D521 D0 C9                         .db #$D0, #%11001001
0D523 31 C9                         .db #$31, #%11001001
0D525 71 C9                         .db #$71, #%11001001
0D527 B1 C9                         .db #$B1, #%11001001
0D529 13 C9                         .db #$13, #%11001001
0D52B 53 C9                         .db #$53, #%11001001
0D52D 93 C9                         .db #$93, #%11001001
0D52F D3 C9                         .db #$D3, #%11001001
0D531 34 C9                         .db #$34, #%11001001
0D533 74 C9                         .db #$74, #%11001001
0D535 B4 C9                         .db #$B4, #%11001001
0D537 16 C9                         .db #$16, #%11001001
0D539 56 C9                         .db #$56, #%11001001
0D53B 96 C9                         .db #$96, #%11001001
0D53D D6 C9                         .db #$D6, #%11001001
0D53F 37 C9                         .db #$37, #%11001001
0D541 77 C9                         .db #$77, #%11001001
0D543 B7 C9                         .db #$B7, #%11001001
0D545 D8 12                         .db #$D8, #%00010010
0D547 FF                            .db #LEVEL_END
0D548                           
0D548                           lvl_layout_11:
0D548 00 65                         .db #$00, #%01100101
0D54A 40 45                         .db #$40, #%01000101
0D54C 50 A7                         .db #$50, #%10100111
0D54E 80 05                         .db #$80, #%00000101
0D550 90 A7                         .db #$90, #%10100111
0D552 A0 65                         .db #$A0, #%01100101
0D554 01 43                         .db #$01, #%01000011
0D556 31 23                         .db #$31, #%00100011
0D558 61 A7                         .db #$61, #%10100111
0D55A 81 A7                         .db #$81, #%10100111
0D55C A1 63                         .db #$A1, #%01100011
0D55E 02 44                         .db #$02, #%01000100
0D560 32 44                         .db #$32, #%01000100
0D562 92 04                         .db #$92, #%00000100
0D564 A2 64                         .db #$A2, #%01100100
0D566 03 40                         .db #$03, #%01000000
0D568 33 40                         .db #$33, #%01000000
0D56A 64 81                         .db #$64, #%10000001
0D56C 84 82                         .db #$84, #%10000010
0D56E 93 00                         .db #$93, #%00000000
0D570 A3 60                         .db #$A3, #%01100000
0D572 04 41                         .db #$04, #%01000001
0D574 34 41                         .db #$34, #%01000001
0D576 94 02                         .db #$94, #%00000010
0D578 A4 62                         .db #$A4, #%01100010
0D57A 05 47                         .db #$05, #%01000111
0D57C 35 67                         .db #$35, #%01100111
0D57E 75 0A                         .db #$75, #%00001010
0D580 85 47                         .db #$85, #%01000111
0D582 B5 47                         .db #$B5, #%01000111
0D584 06 E7                         .db #$06, #%11100111
0D586 16 5A                         .db #$16, #%01011010
0D588 26 11                         .db #$26, #%00010001
0D58A 46 13                         .db #$46, #%00010011
0D58C 56 1A                         .db #$56, #%00011010
0D58E 66 14                         .db #$66, #%00010100
0D590 86 10                         .db #$86, #%00010000
0D592 96 5A                         .db #$96, #%01011010
0D594 A6 12                         .db #$A6, #%00010010
0D596 C6 15                         .db #$C6, #%00010101
0D598 D6 E7                         .db #$D6, #%11100111
0D59A FF                            .db #LEVEL_END
0D59B                           
0D59B                           lvl_layout_12:
0D59B 00 00                         .db #$00, #%00000000
0D59D 50 C0                         .db #$50, #%11000000
0D59F 80 00                         .db #$80, #%00000000
0D5A1 61 00                         .db #$61, #%00000000
0D5A3 22 C0                         .db #$22, #%11000000
0D5A5 82 E0                         .db #$82, #%11100000
0D5A7 C2 E0                         .db #$C2, #%11100000
0D5A9 A3 20                         .db #$A3, #%00100000
0D5AB C3 10                         .db #$C3, #%00010000
0D5AD 04 00                         .db #$04, #%00000000
0D5AF 54 20                         .db #$54, #%00100000
0D5B1 15 0A                         .db #$15, #%00001010
0D5B3 25 C0                         .db #$25, #%11000000
0D5B5 55 E0                         .db #$55, #%11100000
0D5B7 86 20                         .db #$86, #%00100000
0D5B9 C6 E0                         .db #$C6, #%11100000
0D5BB C7 A0                         .db #$C7, #%10100000
0D5BD 88 00                         .db #$88, #%00000000
0D5BF 59 00                         .db #$59, #%00000000
0D5C1 89 20                         .db #$89, #%00100000
0D5C3 D9 1A                         .db #$D9, #%00011010
0D5C5 FF                            .db #LEVEL_END
0D5C6                           
0D5C6                           lvl_layout_13:
0D5C6 10 E0                         .db #$10, #%11100000
0D5C8 20 E0                         .db #$20, #%11100000
0D5CA 30 E0                         .db #$30, #%11100000
0D5CC 40 40                         .db #$40, #%01000000
0D5CE 80 60                         .db #$80, #%01100000
0D5D0 C0 E0                         .db #$C0, #%11100000
0D5D2 D0 E0                         .db #$D0, #%11100000
0D5D4 41 40                         .db #$41, #%01000000
0D5D6 71 60                         .db #$71, #%01100000
0D5D8 52 60                         .db #$52, #%01100000
0D5DA A2 20                         .db #$A2, #%00100000
0D5DC 43 60                         .db #$43, #%01100000
0D5DE 83 60                         .db #$83, #%01100000
0D5E0 14 74                         .db #$14, #%01110100
0D5E2 54 74                         .db #$54, #%01110100
0D5E4 94 74                         .db #$94, #%01110100
0D5E6 D4 14                         .db #$D4, #%00010100
0D5E8 15 0D                         .db #$15, #%00001101
0D5EA 55 0D                         .db #$55, #%00001101
0D5EC 95 0D                         .db #$95, #%00001101
0D5EE D5 0D                         .db #$D5, #%00001101
0D5F0 26 0D                         .db #$26, #%00001101
0D5F2 46 0D                         .db #$46, #%00001101
0D5F4 66 0D                         .db #$66, #%00001101
0D5F6 86 0D                         .db #$86, #%00001101
0D5F8 A6 0D                         .db #$A6, #%00001101
0D5FA C6 0D                         .db #$C6, #%00001101
0D5FC 07 10                         .db #$07, #%00010000
0D5FE 37 0D                         .db #$37, #%00001101
0D600 77 0D                         .db #$77, #%00001101
0D602 B7 0D                         .db #$B7, #%00001101
0D604 28 0D                         .db #$28, #%00001101
0D606 48 0D                         .db #$48, #%00001101
0D608 68 0D                         .db #$68, #%00001101
0D60A 88 0D                         .db #$88, #%00001101
0D60C A8 0D                         .db #$A8, #%00001101
0D60E C8 0D                         .db #$C8, #%00001101
0D610 19 0D                         .db #$19, #%00001101
0D612 59 0D                         .db #$59, #%00001101
0D614 99 0D                         .db #$99, #%00001101
0D616 D9 0D                         .db #$D9, #%00001101
0D618 FF                            .db #LEVEL_END
0D619                           
0D619                           lvl_layout_14:
0D619 00 67                         .db #$00, #%01100111
0D61B 40 67                         .db #$40, #%01100111
0D61D 80 67                         .db #$80, #%01100111
0D61F C0 27                         .db #$C0, #%00100111
0D621 01 27                         .db #$01, #%00100111
0D623 31 C7                         .db #$31, #%11000111
0D625 51 C7                         .db #$51, #%11000111
0D627 71 C7                         .db #$71, #%11000111
0D629 91 C7                         .db #$91, #%11000111
0D62B B1 C7                         .db #$B1, #%11000111
0D62D D1 07                         .db #$D1, #%00000111
0D62F 02 E7                         .db #$02, #%11100111
0D631 06 E7                         .db #$06, #%11100111
0D633 13 07                         .db #$13, #%00000111
0D635 D3 07                         .db #$D3, #%00000111
0D637 15 07                         .db #$15, #%00000111
0D639 35 07                         .db #$35, #%00000111
0D63B 55 07                         .db #$55, #%00000111
0D63D 75 07                         .db #$75, #%00000111
0D63F 95 07                         .db #$95, #%00000111
0D641 B5 07                         .db #$B5, #%00000111
0D643 D5 07                         .db #$D5, #%00000111
0D645 17 07                         .db #$17, #%00000111
0D647 37 C7                         .db #$37, #%11000111
0D649 57 C7                         .db #$57, #%11000111
0D64B 77 C7                         .db #$77, #%11000111
0D64D 97 C7                         .db #$97, #%11000111
0D64F B7 C7                         .db #$B7, #%11000111
0D651 D7 07                         .db #$D7, #%00000111
0D653 19 07                         .db #$19, #%00000111
0D655 D9 07                         .db #$D9, #%00000111
0D657 22 4C                         .db #$22, #%01001100
0D659 62 4C                         .db #$62, #%01001100
0D65B A2 4C                         .db #$A2, #%01001100
0D65D 24 0C                         .db #$24, #%00001100
0D65F 44 0C                         .db #$44, #%00001100
0D661 64 0C                         .db #$64, #%00001100
0D663 84 0C                         .db #$84, #%00001100
0D665 A4 0C                         .db #$A4, #%00001100
0D667 C4 0C                         .db #$C4, #%00001100
0D669 26 0C                         .db #$26, #%00001100
0D66B 46 0C                         .db #$46, #%00001100
0D66D 66 0C                         .db #$66, #%00001100
0D66F 86 0C                         .db #$86, #%00001100
0D671 A6 0C                         .db #$A6, #%00001100
0D673 C6 0C                         .db #$C6, #%00001100
0D675 28 4C                         .db #$28, #%01001100
0D677 68 4C                         .db #$68, #%01001100
0D679 A8 4C                         .db #$A8, #%01001100
0D67B 32 04                         .db #$32, #%00000100
0D67D 52 04                         .db #$52, #%00000100
0D67F 72 04                         .db #$72, #%00000100
0D681 92 04                         .db #$92, #%00000100
0D683 B2 04                         .db #$B2, #%00000100
0D685 38 04                         .db #$38, #%00000100
0D687 58 04                         .db #$58, #%00000100
0D689 78 04                         .db #$78, #%00000100
0D68B 98 04                         .db #$98, #%00000100
0D68D B8 04                         .db #$B8, #%00000100
0D68F FF                            .db #LEVEL_END
0D690                           
0D690                           lvl_layout_15:
0D690 00 7A                         .db #$00, #%01111010
0D692 40 7A                         .db #$40, #%01111010
0D694 80 7A                         .db #$80, #%01111010
0D696 C0 3A                         .db #$C0, #%00111010
0D698 61 64                         .db #$61, #%01100100
0D69A 05 E4                         .db #$05, #%11100100
0D69C 15 64                         .db #$15, #%01100100
0D69E 55 64                         .db #$55, #%01100100
0D6A0 95 64                         .db #$95, #%01100100
0D6A2 D5 E4                         .db #$D5, #%11100100
0D6A4 26 04                         .db #$26, #%00000100
0D6A6 46 44                         .db #$46, #%01000100
0D6A8 76 64                         .db #$76, #%01100100
0D6AA C6 04                         .db #$C6, #%00000100
0D6AC 17 04                         .db #$17, #%00000100
0D6AE 37 64                         .db #$37, #%01100100
0D6B0 77 44                         .db #$77, #%01000100
0D6B2 B7 04                         .db #$B7, #%00000100
0D6B4 18 64                         .db #$18, #%01100100
0D6B6 58 64                         .db #$58, #%01100100
0D6B8 98 64                         .db #$98, #%01100100
0D6BA FF                            .db #LEVEL_END
0D6BB                           
0D6BB                           lvl_layout_16:
0D6BB 10 E1                         .db #$10, #%11100001
0D6BD 20 9A                         .db #$20, #%10011010
0D6BF 30 E1                         .db #$30, #%11100001
0D6C1 40 E1                         .db #$40, #%11100001
0D6C3 50 E1                         .db #$50, #%11100001
0D6C5 60 C1                         .db #$60, #%11000001
0D6C7 70 E1                         .db #$70, #%11100001
0D6C9 80 E1                         .db #$80, #%11100001
0D6CB 90 E1                         .db #$90, #%11100001
0D6CD A0 61                         .db #$A0, #%01100001
0D6CF 21 C1                         .db #$21, #%11000001
0D6D1 A1 1A                         .db #$A1, #%00011010
0D6D3 B1 41                         .db #$B1, #%01000001
0D6D5 A2 E1                         .db #$A2, #%11100001
0D6D7 B2 E1                         .db #$B2, #%11100001
0D6D9 C2 1A                         .db #$C2, #%00011010
0D6DB D2 E1                         .db #$D2, #%11100001
0D6DD 63 1A                         .db #$63, #%00011010
0D6DF C3 C1                         .db #$C3, #%11000001
0D6E1 14 61                         .db #$14, #%01100001
0D6E3 54 61                         .db #$54, #%01100001
0D6E5 94 C1                         .db #$94, #%11000001
0D6E7 15 61                         .db #$15, #%01100001
0D6E9 55 41                         .db #$55, #%01000001
0D6EB 85 1A                         .db #$85, #%00011010
0D6ED 16 41                         .db #$16, #%01000001
0D6EF 46 1A                         .db #$46, #%00011010
0D6F1 56 61                         .db #$56, #%01100001
0D6F3 A6 61                         .db #$A6, #%01100001
0D6F5 17 67                         .db #$17, #%01100111
0D6F7 57 67                         .db #$57, #%01100111
0D6F9 97 67                         .db #$97, #%01100111
0D6FB D7 07                         .db #$D7, #%00000111
0D6FD 28 41                         .db #$28, #%01000001
0D6FF 58 61                         .db #$58, #%01100001
0D701 A8 41                         .db #$A8, #%01000001
0D703 18 11                         .db #$18, #%00010001
0D705 38 11                         .db #$38, #%00010001
0D707 98 11                         .db #$98, #%00010001
0D709 B8 11                         .db #$B8, #%00010001
0D70B D8 11                         .db #$D8, #%00010001
0D70D 59 09                         .db #$59, #%00001001
0D70F FF                            .db #LEVEL_END
0D710                           
0D710                           lvl_layout_17:
0D710 10 EA                         .db #$10, #%11101010
0D712 20 E2                         .db #$20, #%11100010
0D714 30 62                         .db #$30, #%01100010
0D716 70 02                         .db #$70, #%00000010
0D718 80 6A                         .db #$80, #%01101010
0D71A 90 22                         .db #$90, #%00100010
0D71C 01 AA                         .db #$01, #%10101010
0D71E 31 6A                         .db #$31, #%01101010
0D720 81 2A                         .db #$81, #%00101010
0D722 A1 02                         .db #$A1, #%00000010
0D724 C1 02                         .db #$C1, #%00000010
0D726 D1 0A                         .db #$D1, #%00001010
0D728 32 EA                         .db #$32, #%11101010
0D72A 42 6A                         .db #$42, #%01101010
0D72C 62 02                         .db #$62, #%00000010
0D72E 92 6A                         .db #$92, #%01101010
0D730 D2 E2                         .db #$D2, #%11100010
0D732 43 1A                         .db #$43, #%00011010
0D734 53 CA                         .db #$53, #%11001010
0D736 73 02                         .db #$73, #%00000010
0D738 83 4A                         .db #$83, #%01001010
0D73A B3 CA                         .db #$B3, #%11001010
0D73C C3 EA                         .db #$C3, #%11101010
0D73E 04 0A                         .db #$04, #%00001010
0D740 14 A2                         .db #$14, #%10100010
0D742 24 AA                         .db #$24, #%10101010
0D744 44 AA                         .db #$44, #%10101010
0D746 64 6A                         .db #$64, #%01101010
0D748 65 6A                         .db #$65, #%01101010
0D74A A5 AA                         .db #$A5, #%10101010
0D74C 06 EA                         .db #$06, #%11101010
0D74E 16 62                         .db #$16, #%01100010
0D750 66 22                         .db #$66, #%00100010
0D752 86 2A                         .db #$86, #%00101010
0D754 17 42                         .db #$17, #%01000010
0D756 47 12                         .db #$47, #%00010010
0D758 57 6A                         .db #$57, #%01101010
0D75A 97 4A                         .db #$97, #%01001010
0D75C A7 02                         .db #$A7, #%00000010
0D75E 18 02                         .db #$18, #%00000010
0D760 28 0A                         .db #$28, #%00001010
0D762 38 22                         .db #$38, #%00100010
0D764 68 2A                         .db #$68, #%00101010
0D766 88 62                         .db #$88, #%01100010
0D768 C8 0A                         .db #$C8, #%00001010
0D76A D8 02                         .db #$D8, #%00000010
0D76C 19 2A                         .db #$19, #%00101010
0D76E 39 2A                         .db #$39, #%00101010
0D770 69 42                         .db #$69, #%01000010
0D772 99 2A                         .db #$99, #%00101010
0D774 B9 42                         .db #$B9, #%01000010
0D776 FF                            .db #LEVEL_END
0D777                           
0D777                           lvl_layout_18:
0D777 00 12                         .db #$00, #%00010010
0D779 40 1A                         .db #$40, #%00011010
0D77B 50 11                         .db #$50, #%00010001
0D77D 70 1A                         .db #$70, #%00011010
0D77F 80 10                         .db #$80, #%00010000
0D781 D0 13                         .db #$D0, #%00010011
0D783 01 1A                         .db #$01, #%00011010
0D785 22 15                         .db #$22, #%00010101
0D787 A2 1A                         .db #$A2, #%00011010
0D789 B2 14                         .db #$B2, #%00010100
0D78B 03 67                         .db #$03, #%01100111
0D78D 43 67                         .db #$43, #%01100111
0D78F 83 67                         .db #$83, #%01100111
0D791 24 09                         .db #$24, #%00001001
0D793 74 0D                         .db #$74, #%00001101
0D795 C4 0A                         .db #$C4, #%00001010
0D797 05 A7                         .db #$05, #%10100111
0D799 45 27                         .db #$45, #%00100111
0D79B 95 27                         .db #$95, #%00100111
0D79D 16 C7                         .db #$16, #%11000111
0D79F 36 67                         .db #$36, #%01100111
0D7A1 86 67                         .db #$86, #%01100111
0D7A3 D6 07                         .db #$D6, #%00000111
0D7A5 07 A3                         .db #$07, #%10100011
0D7A7 27 23                         .db #$27, #%00100011
0D7A9 47 C7                         .db #$47, #%11000111
0D7AB 57 A0                         .db #$57, #%10100000
0D7AD 67 A7                         .db #$67, #%10100111
0D7AF 77 20                         .db #$77, #%00100000
0D7B1 97 C7                         .db #$97, #%11000111
0D7B3 A7 A4                         .db #$A7, #%10100100
0D7B5 B7 A7                         .db #$B7, #%10100111
0D7B7 C7 24                         .db #$C7, #%00100100
0D7B9 28 0B                         .db #$28, #%00001011
0D7BB 38 A3                         .db #$38, #%10100011
0D7BD 78 08                         .db #$78, #%00001000
0D7BF 88 A0                         .db #$88, #%10100000
0D7C1 C8 0C                         .db #$C8, #%00001100
0D7C3 D8 A4                         .db #$D8, #%10100100
0D7C5 09 43                         .db #$09, #%01000011
0D7C7 59 40                         .db #$59, #%01000000
0D7C9 A9 44                         .db #$A9, #%01000100
0D7CB FF                            .db #LEVEL_END
0D7CC                           
0D7CC                           lvl_layout_19:
0D7CC 11 A8                         .db #$11, #%10101000
0D7CE 21 68                         .db #$21, #%01101000
0D7D0 81 28                         .db #$81, #%00101000
0D7D2 B1 48                         .db #$B1, #%01001000
0D7D4 22 48                         .db #$22, #%01001000
0D7D6 62 68                         .db #$62, #%01101000
0D7D8 B2 28                         .db #$B2, #%00101000
0D7DA 23 28                         .db #$23, #%00101000
0D7DC 83 28                         .db #$83, #%00101000
0D7DE B3 28                         .db #$B3, #%00101000
0D7E0 04 E8                         .db #$04, #%11101000
0D7E2 24 08                         .db #$24, #%00001000
0D7E4 44 08                         .db #$44, #%00001000
0D7E6 64 E8                         .db #$64, #%11101000
0D7E8 84 E8                         .db #$84, #%11101000
0D7EA C4 A8                         .db #$C4, #%10101000
0D7EC D4 E8                         .db #$D4, #%11101000
0D7EE 15 48                         .db #$15, #%01001000
0D7F0 55 C8                         .db #$55, #%11001000
0D7F2 75 C8                         .db #$75, #%11001000
0D7F4 A5 08                         .db #$A5, #%00001000
0D7F6 36 08                         .db #$36, #%00001000
0D7F8 B6 08                         .db #$B6, #%00001000
0D7FA 27 48                         .db #$27, #%01001000
0D7FC 97 28                         .db #$97, #%00101000
0D7FE C7 08                         .db #$C7, #%00001000
0D800 09 61                         .db #$09, #%01100001
0D802 19 11                         .db #$19, #%00010001
0D804 49 61                         .db #$49, #%01100001
0D806 89 31                         .db #$89, #%00110001
0D808 A9 61                         .db #$A9, #%01100001
0D80A FF                            .db #LEVEL_END
0D80B                           
0D80B                           lvl_layout_20:
0D80B 00 60                         .db #$00, #%01100000
0D80D 10 1A                         .db #$10, #%00011010
0D80F 40 A7                         .db #$40, #%10100111
0D811 50 20                         .db #$50, #%00100000
0D813 70 1A                         .db #$70, #%00011010
0D815 80 40                         .db #$80, #%01000000
0D817 B0 1A                         .db #$B0, #%00011010
0D819 C0 20                         .db #$C0, #%00100000
0D81B 01 40                         .db #$01, #%01000000
0D81D 31 1A                         .db #$31, #%00011010
0D81F A1 40                         .db #$A1, #%01000000
0D821 D1 1A                         .db #$D1, #%00011010
0D823 43 67                         .db #$43, #%01100111
0D825 83 47                         .db #$83, #%01000111
0D827 44 A7                         .db #$44, #%10100111
0D829 54 25                         .db #$54, #%00100101
0D82B 94 08                         .db #$94, #%00001000
0D82D A4 A7                         .db #$A4, #%10100111
0D82F 55 05                         .db #$55, #%00000101
0D831 65 08                         .db #$65, #%00001000
0D833 06 27                         .db #$06, #%00100111
0D835 36 67                         .db #$36, #%01100111
0D837 76 28                         .db #$76, #%00101000
0D839 A6 27                         .db #$A6, #%00100111
0D83B D6 07                         .db #$D6, #%00000111
0D83D A7 A7                         .db #$A7, #%10100111
0D83F 08 60                         .db #$08, #%01100000
0D841 09 60                         .db #$09, #%01100000
0D843 18 A7                         .db #$18, #%10100111
0D845 48 A7                         .db #$48, #%10100111
0D847 58 47                         .db #$58, #%01000111
0D849 88 27                         .db #$88, #%00100111
0D84B B8 20                         .db #$B8, #%00100000
0D84D D8 1A                         .db #$D8, #%00011010
0D84F 59 15                         .db #$59, #%00010101
0D851 69 60                         .db #$69, #%01100000
0D853 A9 60                         .db #$A9, #%01100000
0D855 FF                            .db #LEVEL_END
0D856                           
0D856                           lvl_layout_21:
0D856 00 13                         .db #$00, #%00010011
0D858 10 11                         .db #$10, #%00010001
0D85A 20 67                         .db #$20, #%01100111
0D85C 60 67                         .db #$60, #%01100111
0D85E A0 47                         .db #$A0, #%01000111
0D860 D0 15                         .db #$D0, #%00010101
0D862 32 63                         .db #$32, #%01100011
0D864 72 05                         .db #$72, #%00000101
0D866 82 43                         .db #$82, #%01000011
0D868 B2 43                         .db #$B2, #%01000011
0D86A 33 03                         .db #$33, #%00000011
0D86C 43 2A                         .db #$43, #%00101010
0D86E 63 7A                         .db #$63, #%01111010
0D870 73 2A                         .db #$73, #%00101010
0D872 A3 7A                         .db #$A3, #%01111010
0D874 34 63                         .db #$34, #%01100011
0D876 74 63                         .db #$74, #%01100011
0D878 B4 43                         .db #$B4, #%01000011
0D87A 06 63                         .db #$06, #%01100011
0D87C 46 63                         .db #$46, #%01100011
0D87E 86 63                         .db #$86, #%01100011
0D880 C6 C3                         .db #$C6, #%11000011
0D882 07 7A                         .db #$07, #%01111010
0D884 47 7A                         .db #$47, #%01111010
0D886 67 0A                         .db #$67, #%00001010
0D888 87 7A                         .db #$87, #%01111010
0D88A 08 13                         .db #$08, #%00010011
0D88C 18 43                         .db #$18, #%01000011
0D88E 48 63                         .db #$48, #%01100011
0D890 88 63                         .db #$88, #%01100011
0D892 FF                            .db #LEVEL_END
0D893                           
0D893                           lvl_layout_22:
0D893 00 7A                         .db #$00, #%01111010
0D895 40 7A                         .db #$40, #%01111010
0D897 80 7A                         .db #$80, #%01111010
0D899 C0 3A                         .db #$C0, #%00111010
0D89B 13 67                         .db #$13, #%01100111
0D89D 83 A7                         .db #$83, #%10100111
0D89F B3 07                         .db #$B3, #%00000111
0D8A1 14 07                         .db #$14, #%00000111
0D8A3 44 07                         .db #$44, #%00000111
0D8A5 A4 07                         .db #$A4, #%00000111
0D8A7 15 A5                         .db #$15, #%10100101
0D8A9 45 A5                         .db #$45, #%10100101
0D8AB 85 25                         .db #$85, #%00100101
0D8AD 86 05                         .db #$86, #%00000101
0D8AF A6 05                         .db #$A6, #%00000101
0D8B1 17 11                         .db #$17, #%00010001
0D8B3 47 A1                         .db #$47, #%10100001
0D8B5 87 A1                         .db #$87, #%10100001
0D8B7 B7 A1                         .db #$B7, #%10100001
0D8B9 18 41                         .db #$18, #%01000001
0D8BB 68 01                         .db #$68, #%00000001
0D8BD D8 01                         .db #$D8, #%00000001
0D8BF FF                            .db #LEVEL_END
0D8C0                           
0D8C0                           lvl_layout_23:
0D8C0 00 71                         .db #$00, #%01110001
0D8C2 40 11                         .db #$40, #%00010001
0D8C4 50 43                         .db #$50, #%01000011
0D8C6 80 D1                         .db #$80, #%11010001
0D8C8 90 E3                         .db #$90, #%11100011
0D8CA A0 63                         .db #$A0, #%01100011
0D8CC 01 63                         .db #$01, #%01100011
0D8CE 41 63                         .db #$41, #%01100011
0D8D0 A1 63                         .db #$A1, #%01100011
0D8D2 02 63                         .db #$02, #%01100011
0D8D4 42 63                         .db #$42, #%01100011
0D8D6 62 11                         .db #$62, #%00010001
0D8D8 A2 67                         .db #$A2, #%01100111
0D8DA 04 63                         .db #$04, #%01100011
0D8DC 44 23                         .db #$44, #%00100011
0D8DE 64 D1                         .db #$64, #%11010001
0D8E0 74 E3                         .db #$74, #%11100011
0D8E2 84 F1                         .db #$84, #%11110001
0D8E4 94 E3                         .db #$94, #%11100011
0D8E6 A4 C7                         .db #$A4, #%11000111
0D8E8 B4 23                         .db #$B4, #%00100011
0D8EA 05 63                         .db #$05, #%01100011
0D8EC 45 23                         .db #$45, #%00100011
0D8EE 06 71                         .db #$06, #%01110001
0D8F0 46 11                         .db #$46, #%00010001
0D8F2 56 E3                         .db #$56, #%11100011
0D8F4 D6 07                         .db #$D6, #%00000111
0D8F6 17 D1                         .db #$17, #%11010001
0D8F8 27 43                         .db #$27, #%01000011
0D8FA 67 D1                         .db #$67, #%11010001
0D8FC A7 C7                         .db #$A7, #%11000111
0D8FE C7 A7                         .db #$C7, #%10100111
0D900 D7 B3                         .db #$D7, #%10110011
0D902 28 43                         .db #$28, #%01000011
0D904 78 43                         .db #$78, #%01000011
0D906 29 43                         .db #$29, #%01000011
0D908 79 43                         .db #$79, #%01000011
0D90A FF                           .db #LEVEL_END
0D90B                           
0D90B                           lvl_layout_24:
0D90B 02 67                         .db #$02, #%01100111
0D90D 42 67                         .db #$42, #%01100111
0D90F 82 67                         .db #$82, #%01100111
0D911 05 67                         .db #$05, #%01100111
0D913 45 67                         .db #$45, #%01100111
0D915 85 67                         .db #$85, #%01100111
0D917 08 67                         .db #$08, #%01100111
0D919 48 67                         .db #$48, #%01100111
0D91B 88 67                         .db #$88, #%01100111
0D91D 30 E7                         .db #$30, #%11100111
0D91F 70 E7                         .db #$70, #%11100111
0D921 B0 E7                         .db #$B0, #%11100111
0D923 34 E7                         .db #$34, #%11100111
0D925 74 E7                         .db #$74, #%11100111
0D927 B4 E7                         .db #$B4, #%11100111
0D929 20 13                         .db #$20, #%00010011
0D92B 40 10                         .db #$40, #%00010000
0D92D 80 02                         .db #$80, #%00000010
0D92F 41 05                         .db #$41, #%00000101
0D931 B1 09                         .db #$B1, #%00001001
0D933 02 09                         .db #$02, #%00001001
0D935 52 0C                         .db #$52, #%00001100
0D937 13 11                         .db #$13, #%00010001
0D939 33 04                         .db #$33, #%00000100
0D93B 74 0C                         .db #$74, #%00001100
0D93D B4 08                         .db #$B4, #%00001000
0D93F 15 09                         .db #$15, #%00001001
0D941 55 0C                         .db #$55, #%00001100
0D943 95 0C                         .db #$95, #%00001100
0D945 47 03                         .db #$47, #%00000011
0D947 A7 12                         .db #$A7, #%00010010
0D949 18 15                         .db #$18, #%00010101
0D94B 09 05                         .db #$09, #%00000101
0D94D 19 03                         .db #$19, #%00000011
0D94F FF                            .db #LEVEL_END
0D950                           
0D950                           lvl_layout_25:
0D950 00 12                         .db #$00, #%00010010
0D952 10 63                         .db #$10, #%01100011
0D954 60 63                         .db #$60, #%01100011
0D956 A0 07                         .db #$A0, #%00000111
0D958 01 11                         .db #$01, #%00010001
0D95A A1 02                         .db #$A1, #%00000010
0D95C 02 67                         .db #$02, #%01100111
0D95E 42 07                         .db #$42, #%00000111
0D960 62 67                         .db #$62, #%01100111
0D962 A2 C7                         .db #$A2, #%11000111
0D964 03 61                         .db #$03, #%01100001
0D966 43 01                         .db #$43, #%00000001
0D968 63 61                         .db #$63, #%01100001
0D96A A6 E7                         .db #$A6, #%11100111
0D96C B6 47                         .db #$B6, #%01000111
0D96E C6 01                         .db #$C6, #%00000001
0D970 B7 42                         .db #$B7, #%01000010
0D972 B8 42                         .db #$B8, #%01000010
0D974 C8 0A                         .db #$C8, #%00001010
0D976 09 7A                         .db #$09, #%01111010
0D978 49 7A                         .db #$49, #%01111010
0D97A 89 3A                         .db #$89, #%00111010
0D97C B9 42                         .db #$B9, #%01000010
0D97E FF                            .db #LEVEL_END
0D97F                           
0D97F                           ;; Level layout address pointers
0D97F                           tbl_lvl_layout_hi:
0D97F                           ifdef TESTING
0D97F D2                            .db >#lvl_test
0D980                           endif
0D980 D2 D2 D2 D3 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D985 D3 D4 D4 D4 D5                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D98A D5 D5 D5 D6 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D98F D6 D7 D7 D7 D8                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D994 D8 D8 D8 D9 D9                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D999                           
0D999                           tbl_lvl_layout_lo:
0D999                           ifdef TESTING
0D999 95                            .db <#lvl_test
0D99A                           endif
0D99A A6 C1 F6 29 9A                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D99F D5 5E 9F D6 19                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D9A4 48 9B C6 19 90                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D9A9 BB 10 77 CC 0B                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D9AE 56 93 C0 0B 50                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D9B3                           
0D9B3                           ;; Ball start position (#$YX)
0D9B3                           tbl_lvl_ball_startpos:
0D9B3                           ifdef TESTING
0D9B3 29                            .db #$29
0D9B4                           endif
0D9B4 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D9B9 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D9BE 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D9C3 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D9C8 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D9CD                           
0D9CD                               
0D9CD                           ;; Ball start direction, color and tile score
0D9CD                           ;; #% ccc v tttt
0D9CD                           ;;    ||| | ++++-- tile score
0D9CD                           ;;    ||| +------- vertical direction, up (0) or down
0D9CD                           ;;    +++--------- color (CBRYGM)
0D9CD                           tbl_lvl_ball_init:
0D9CD                           ifdef TESTING
0D9CD 20                            .db #%00100000
0D9CE                           endif
0D9CE 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D9D3 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D9D8 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D9DD 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D9E2 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D9E7                           
0D9E7                           
0D9E7                           
0D9E7                           ;; Helper table to multiply values by 16
0D9E7                           tbl_Times16:
0D9E7 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D9EF 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D9F7                               
0D9F7                           
0D9F7                           ;; Helper table to multiply values by 64
0D9F7                           tbl_Times64:
0D9F7 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D9FB                           
0D9FB                           
0D9FB                           ;; Metatile ID to CHR data mapper
0D9FB                           tbl_GametileTopLeft:
0D9FB 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0DA05                           
0DA05                           tbl_GametileTopRight:
0DA05 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0DA0F                           
0DA0F                           tbl_GametileBottomLeft:
0DA0F 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0DA19                           
0DA19                           tbl_GametileBottomRight:
0DA19 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DA23                           
0DA23                           ;; Metatile ID to RAM byte data mapper
0DA23                           tbl_GameTileRamByte:
0DA23 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DA28                           
0DA28                           ;; HUD text data (with opaque background tile for sprite zero)
0DA28                           tbl_HudText:
0DA28 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DA30 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DA37 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DA3F 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DA46                           
0DA46                           ;; Move block top left tile based on color
0DA46                           tbl_MoveBlockTopLeftTile:
0DA46 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DA4D                           
0DA4D                           ;; Game over data
0DA4D                           tbl_GameOver:
0DA4D 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DA51 00 00                         .db #_SPACE, #_SPACE
0DA53 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DA57                           
0DA57                           ;; Background fade pallette table
0DA57                           tbl_BackgroundFade:
0DA57 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DA61                           
0DA61                           ;; Sound effects
0DA61                           .include "game/include/table/sfx.asm"
0DA61                           ;;
0DA61                           ;; Explosion sound effects
0DA61                           ;;
0DA61                           ;;   #% ffff vvvv
0DA61                           ;;      |||| ++++---- volume (0=low, 15=high)
0DA61                           ;;      ++++-------- frequency (0=low, 15=high)
0DA61                           ;;
0DA61                           ;; #$FF = end of sfx
0DA61                           ;;
0DA61                           
0DA61                           tbl_ExplosionSfx:
0DA61 00                            .db #$00 ; buffer byte
0DA62 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DA6A 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DA72 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DA7A 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DA82 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DA8A 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DA8F                           
0DA8F                           tbl_ThudSfx:
0DA8F 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA90 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DA98 E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DA9D                           
0DA9D                           tbl_BounceSfx:
0DA9D 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA9E 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DAA2                           
0DAA2 00                            .db #$00
0DAA3                           
0DAA3                           tbl_Sfx_hi:
0DAA3 DA DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DAA6                           
0DAA6                           tbl_Sfx_lo:
0DAA6 61 8F 9D                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DAA9                           
0DAA9                           
0DAA9                           ;; Volume envelope for move sound effect (reversed)
0DAA9                           tbl_MoveSfxVolume:
0DAA9 70 70 72 73 7B 7C 7B 7B       .db #$70, #$70, #$72, #$73, #$7B, #$7C, #$7B, #$7B
0DAB1 79 79 78 77 76 76 75 75       .db #$79, #$79, #$78, #$77, #$76, #$76, #$75, #$75
0DAB9 74 74 73 73 73 73 72 71       .db #$74, #$74, #$73, #$73, #$73, #$73, #$72, #$71
0DAC1                           
0DAC1                           ;; Volume and frequency table for paint sound effect (reversed)
0DAC1 00                        tbl_PaintSfxVolume: .db #$00
0DAC2 B0 B1 B2 B3 B2 B4 B6 B3       .db #$B0, #$B1, #$B2, #$B3, #$B2, #$B4, #$B6, #$B3
0DACA B6 B9 B5 B9 B5 B9 B5 B9       .db #$B6, #$B9, #$B5, #$B9, #$B5, #$B9, #$B5, #$B9
0DAD2 00                        tbl_PaintSfxFreqHi: .db #$00
0DAD3 08 08 08 08 08 08 08 08       .db #$08, #$08, #$08, #$08, #$08, #$08, #$08, #$08
0DADB 08 09 08 09 09 09 09 09       .db #$08, #$09, #$08, #$09, #$09, #$09, #$09, #$09
0DAE3 00                        tbl_PaintSfxFreqLo: .db #$00
0DAE4 68 90 B8 E0 A4 CC F4 BC       .db #$68, #$90, #$B8, #$E0, #$A4, #$CC, #$F4, #$BC
0DAEC E4 0C F6 32 1A 56 44 80       .db #$E4, #$0C, #$F6, #$32, #$1A, #$56, #$44, #$800DAF4                           
0DAF4                           ;; Lookup table to convert bonus ticks to score
0DAF4                           tbl_BonusToScore:
0DAF4 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DAFE                           
0DAFE                           
0DAFE                           ;; NMI handler
0DAFE                           NMI:
0DAFE                               .include "interrupt/nmi.asm"
0DAFE                           
0DAFE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DAFE                           ;;
0DAFE                           ;; include/nmi.asm
0DAFE                           ;;
0DAFE                           ;; Non-maskable interrupt script. This script is being executed
0DAFE                           ;; when vBlank hits.
0DAFE                           ;;
0DAFE                           ;;
0DAFE                           
0DAFE                               ;; Preserve accumulator through stack
0DAFE 48                            PHA
0DAFF                           
0DAFF                               ;; Should NMI be skipped?
0DAFF A5 13                         LDA skip_nmi
0DB01 F0 03                         BEQ +
0DB03 4C DA DC                          JMP +skip_nmi
0DB06                               +
0DB06                           
0DB06                               ;; When in NMI, skip additional NMI requests
0DB06 A9 01                         LDA #$01
0DB08 85 13                         STA skip_nmi
0DB0A                           
0DB0A                               ;; Preserve X, Y, and PC through stack
0DB0A 8A                            TXA
0DB0B 48                            PHA
0DB0C 98                            TYA
0DB0D 48                            PHA
0DB0E 08                            PHP
0DB0F                               
0DB0F                               ;; Check forced NMI skip
0DB0F A5 14                         LDA force_skip_nmi
0DB11 F0 03                         BEQ +
0DB13 4C C9 DC                          JMP +force_skip_nmi
0DB16                               +
0DB16                           
0DB16                               ;; Update PPU mask
0DB16                               ;LDA #$00
0DB16                               ;STA PPU_CTRL
0DB16 A5 12                         LDA soft_ppu_mask
0DB18 8D 01 20                      STA PPU_MASK
0DB1B                               
0DB1B                               
0DB1B                               ;; Additional PPU updates go here
0DB1B                               .include "game/interrupt/nmi.asm"
0DB1B                           
0DB1B                               ;; Check if ppu_buffer needs updating
0DB1B A5 39                         LDA ppu_buffer_update
0DB1D D0 03                         BNE +
0DB1F 4C 61 DB                          JMP +no_ppu_buffer_update
0DB22                               +
0DB22                           
0DB22                               ;; Reset ppu control register and mask
0DB22 A2 00                         LDX #$00
0DB24 8E 00 20                      STX PPU_CTRL
0DB27 8E 01 20                      STX PPU_MASK
0DB2A                           
0DB2A                               ;; Set up loop
0DB2A                               -
0DB2A                                   ;; Reset hi/lo latch
0DB2A 2C 02 20                          BIT PPU_STATUS
0DB2D                           
0DB2D                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DB2D BD 00 03                          LDA ppu_buffer,x
0DB30 8D 06 20                          STA PPU_ADDR
0DB33 E8                                INX
0DB34 BD 00 03                          LDA ppu_buffer,x
0DB37 8D 06 20                          STA PPU_ADDR
0DB3A                           
0DB3A                                   ;; Write ppu_buffer data to PPU_ADDR
0DB3A E8                                INX
0DB3B BD 00 03                          LDA ppu_buffer,x
0DB3E 8D 07 20                          STA PPU_DATA
0DB41                           
0DB41                                   ;; Check if updating is done (eg. X is at pointer)
0DB41 E8                                INX
0DB42 E4 3A                             CPX ppu_buffer_pointer
0DB44 F0 03                             BEQ +
0DB46 4C 2A DB                      JMP -
0DB49                           +
0DB49                           
0DB49                               ;; Reset ppu buffer update and pointer
0DB49 A9 00                         LDA #$00
0DB4B 85 39                         STA ppu_buffer_update
0DB4D 85 3A                         STA ppu_buffer_pointer
0DB4F                               
0DB4F                               ;; Reset scrolling position
0DB4F 8D 05 20                      STA PPU_SCROLL
0DB52 8D 05 20                      STA PPU_SCROLL
0DB55                           
0DB55                               ;; Restore ppu control register and mask
0DB55 A9 90                         LDA #%10010000
0DB57 8D 00 20                      STA PPU_CTRL
0DB5A A5 12                         LDA soft_ppu_mask
0DB5C 8D 01 20                      STA PPU_MASK
0DB5F A9 00                         LDA #$00
0DB61                           
0DB61                           ;; Continue other NMI stuff
0DB61                           +no_ppu_buffer_update:
0DB61                           
0DB61                               ;; Reset sprite RAM, draw sprites
0DB61 8D 03 20                      STA OAM_ADDR
0DB64 A9 02                         LDA #$02
0DB66 8D 14 40                      STA OAM_DMA
0DB69                           
0DB69                               ;; Decrease explosion and move block timers
0DB69 A0 04                         LDY #MAX_ANIMATIONS
0DB6B A2 00                         LDX #$00
0DB6D                               -
0DB6D BD 60 03                          LDA explosion_timer,x
0DB70 F0 03                             BEQ +
0DB72 DE 60 03                              DEC explosion_timer,x
0DB75                                   +
0DB75                           
0DB75 BD 80 03                          LDA move_block_timer,x
0DB78 F0 03                             BEQ +
0DB7A DE 80 03                              DEC move_block_timer,x
0DB7D                                   +
0DB7D                                   
0DB7D E8                                INX
0DB7E 88                                DEY
0DB7F F0 03                             BEQ +done
0DB81 4C 6D DB                      JMP -
0DB84                           +done:
0DB84                           
0DB84                               ;; Decrease nudge timer
0DB84 A5 3E                         LDA nudge_timer
0DB86 F0 02                         BEQ +
0DB88 C6 3E                             DEC nudge_timer
0DB8A                               +
0DB8A                           
0DB8A                               ;; Decrease bonus timer
0DB8A A5 3F                         LDA bonus_timer
0DB8C F0 02                         BEQ +
0DB8E C6 3F                             DEC bonus_timer
0DB90                               +
0DB90                           
0DB90                               ;; Decrease kill timer
0DB90 A5 40                         LDA kill_timer
0DB92 F0 02                         BEQ +
0DB94 C6 40                             DEC kill_timer
0DB96                               +
0DB96                               
0DB96                               ;; Decrease and handle unfreeze timer
0DB96 A5 41                         LDA unfreeze_timer
0DB98 F0 0A                         BEQ +
0DB9A C6 41                             DEC unfreeze_timer
0DB9C D0 06                             BNE +
0DB9E                                   
0DB9E A5 37                             LDA ball_flags
0DBA0 29 FB                             AND #UNFREEZE_BALL
0DBA2 85 37                             STA ball_flags
0DBA4                               +
0DBA4                           
0DBA4                               ;; Play background noise
0DBA4 A5 38                         LDA screen_mode
0DBA6 29 01                         AND #IS_GAME_SCREEN
0DBA8 F0 0C                         BEQ +
0DBAA                                   .include "game/include/main/background_sound.asm"
0DBAA                           
0DBAA                               ;; If noise is muted, no noise should play
0DBAA A5 4B                         LDA noise_muted
0DBAC F0 08                         BEQ +
0DBAE A9 30                             LDA #$30
0DBB0 8D 0C 40                          STA NOISE_VOLUME
0DBB3 4C 1B DC                          JMP +endNoise
0DBB6                               +
0DBB6                               
0DBB6                               ;; At random times, set max_noise period to $03-$0A
0DBB6 A5 45                         LDA max_noise
0DBB8 D0 1D                         BNE +
0DBBA 20 06 C5                          JSR sub_GetRandomNumber
0DBBD 29 EF                             AND #%11101111
0DBBF D0 16                             BNE +
0DBC1                                   
0DBC1 A5 15                             LDA frame_counter
0DBC3 85 16                             STA random_seed
0DBC5 20 06 C5                          JSR sub_GetRandomNumber
0DBC8 29 07                             AND #$07
0DBCA 69 03                             ADC #$03
0DBCC 85 45                             STA max_noise
0DBCE A9 01                             LDA #$01
0DBD0 85 46                             STA sweep_noise
0DBD2 A9 34                             LDA #$34
0DBD4 8D 0C 40                          STA NOISE_VOLUME
0DBD7                               +
0DBD7                           
0DBD7                               ;; if sweep noise = $00: constant noise
0DBD7                               ;; else if sweep noise > $80: decrease pitch
0DBD7                               ;; else: increase pitch
0DBD7 A5 46                         LDA sweep_noise
0DBD9 F0 18                         BEQ +constantNoise
0DBDB 30 2A                         BMI +decreaseNoise
0DBDD                           
0DBDD                           ;; Sweep noise up to max noise pitch
0DBDD                           +increaseNoise:
0DBDD C6 47                         DEC current_noise
0DBDF A5 47                         LDA current_noise
0DBE1 8D 0E 40                      STA NOISE_PERIOD
0DBE4 C5 45                         CMP max_noise
0DBE6 D0 08                         BNE +
0DBE8 A9 00                             LDA #$00
0DBEA 85 46                             STA sweep_noise
0DBEC A9 0A                             LDA #$0A
0DBEE 85 48                             STA noise_timer
0DBF0                               +
0DBF0 4C 1B DC                      JMP +endNoise
0DBF3                           
0DBF3                           ;; Keep noise at constant pitch
0DBF3                           +constantNoise:
0DBF3 A5 45                         LDA max_noise
0DBF5 F0 24                         BEQ +endNoise
0DBF7                           
0DBF7 A5 48                         LDA noise_timer
0DBF9 D0 07                         BNE +
0DBFB A9 80                             LDA #$80
0DBFD 85 46                             STA sweep_noise
0DBFF 4C 1B DC                          JMP +endNoise
0DC02                               +
0DC02 C6 48                         DEC noise_timer
0DC04 4C 1B DC                      JMP +endNoise
0DC07                           
0DC07                           ;; Sweep noise down to initial pitch
0DC07                           +decreaseNoise:
0DC07 E6 47                         INC current_noise
0DC09 A5 47                         LDA current_noise
0DC0B 8D 0E 40                      STA NOISE_PERIOD
0DC0E C9 0E                         CMP #$0E
0DC10 D0 09                         BNE +endNoise
0DC12                           
0DC12 20 96 C5                      JSR sub_BackgroundNoise
0DC15 A9 00                         LDA #$00
0DC17 85 45                         STA max_noise
0DC19 85 46                         STA sweep_noise
0DC1B                           
0DC1B                           +endNoise:
0DC1B                           
0DC1B                               +
0DC1B                           
0DC1B                               ;; Play bonus to score bleeps
0DC1B                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DC1B                           
0DC1B                           ;; Random bleepy noises
0DC1B                           
0DC1B A5 49                         LDA do_beeps
0DC1D F0 2E                         BEQ +continue
0DC1F                               
0DC1F C9 02                         CMP #$02
0DC21 D0 12                         BNE +beep
0DC23                              
0DC23                           +stopBeep:
0DC23 A9 00                         LDA #$00
0DC25 85 49                         STA do_beeps
0DC27 A9 08                         LDA #$08
0DC29 8D 15 40                      STA APU_STATUS
0DC2C 8D 0F 40                      STA NOISE_LENGTH
0DC2F 20 96 C5                      JSR sub_BackgroundNoise
0DC32 4C 4D DC                      JMP +continue
0DC35                               
0DC35                           +beep:
0DC35 A9 01                         LDA #$01
0DC37 8D 15 40                      STA APU_STATUS
0DC3A A5 4A                         LDA soft_pulse1
0DC3C 8D 00 40                      STA PULSE1_VOLUME
0DC3F 20 06 C5                      JSR sub_GetRandomNumber
0DC42 8D 02 40                      STA PULSE1_TIMER_LO
0DC45 20 06 C5                      JSR sub_GetRandomNumber
0DC48 29 01                         AND #$01
0DC4A 8D 03 40                      STA PULSE1_TIMER_HI
0DC4D                           
0DC4D                           +continue:
0DC4D                           
0DC4D                               
0DC4D                               ;; Play sound effect
0DC4D                               .include "game/include/main/nmi_sfx.asm"
0DC4D                           
0DC4D                               ;; Get current explosion sfx frame; if not set, skip this
0DC4D A4 4E                         LDY sfx_timer
0DC4F F0 1F                         BEQ +done
0DC51                               
0DC51                                   ;; Check if explosion sfx is done; if so, disable and skip
0DC51 B1 4C                             LDA (sfx_address),y
0DC53 D0 07                             BNE +
0DC55 A9 00                                 LDA #$00
0DC57 85 4E                                 STA sfx_timer
0DC59 4C 70 DC                              JMP +done
0DC5C                                   +
0DC5C                                   
0DC5C                                   ;; Set low nibble as volume
0DC5C 29 0F                             AND #$0F
0DC5E 09 30                             ORA #$30
0DC60 8D 0C 40                          STA NOISE_VOLUME
0DC63                                   
0DC63                                   ;; Set high nibble as frequency
0DC63 B1 4C                             LDA (sfx_address),y
0DC65 4A                                LSR
0DC66 4A                                LSR
0DC67 4A                                LSR
0DC68 4A                                LSR
0DC69 49 0F                             EOR #$0F
0DC6B 8D 0E 40                          STA NOISE_PERIOD
0DC6E                                   
0DC6E                                   ;; Next frame
0DC6E E6 4E                             INC sfx_timer
0DC70                               +done:
0DC70                           
0DC70                           
0DC70                               ;; Check move sfx
0DC70 A4 4F                         LDY sfx_timer+1
0DC72 F0 34                         BEQ +done
0DC74                           
0DC74 C6 4F                             DEC sfx_timer+1
0DC76 C0 18                             CPY #$18
0DC78 D0 0D                             BNE +
0DC7A                                       ;; Update APU status
0DC7A A9 09                                 LDA #$09
0DC7C 8D 15 40                              STA APU_STATUS
0DC7F A9 8B                                 LDA #$8B
0DC81 85 51                                 STA sfx_frequency
0DC83 A9 0A                                 LDA #$0A
0DC85 85 52                                 STA sfx_frequency+1
0DC87                                   +
0DC87                                   
0DC87                                   ;; Set volume
0DC87 B9 A9 DA                          LDA tbl_MoveSfxVolume,y
0DC8A 8D 00 40                          STA PULSE1_VOLUME
0DC8D                                   
0DC8D 84 00                             STY temp
0DC8F A9 18                             LDA #$18
0DC91 38                                SEC
0DC92 E5 00                             SBC temp
0DC94 4A                                LSR
0DC95 18                                CLC
0DC96 69 03                             ADC #$03
0DC98 65 51                             ADC sfx_frequency
0DC9A 85 51                             STA sfx_frequency
0DC9C 8D 02 40                          STA PULSE1_TIMER_LO
0DC9F A5 52                             LDA sfx_frequency+1
0DCA1 69 00                             ADC #$00
0DCA3 85 52                             STA sfx_frequency+1
0DCA5 8D 03 40                          STA PULSE1_TIMER_HI
0DCA8                               +done:
0DCA8                           
0DCA8                           
0DCA8                               ;; Check paint sfx
0DCA8 A4 50                         LDY sfx_timer+2
0DCAA F0 1D                         BEQ +done
0DCAC                           
0DCAC C6 50                             DEC sfx_timer+2
0DCAE C0 10                             CPY #$10
0DCB0 D0 05                             BNE +
0DCB2                                       ;; Update APU status
0DCB2 A9 09                                 LDA #$09
0DCB4 8D 15 40                              STA APU_STATUS
0DCB7                                   +
0DCB7                                   
0DCB7                                   ;; Set volume
0DCB7 B9 C1 DA                          LDA tbl_PaintSfxVolume,y
0DCBA 8D 00 40                          STA PULSE1_VOLUME
0DCBD B9 E3 DA                          LDA tbl_PaintSfxFreqLo,y
0DCC0 8D 02 40                          STA PULSE1_TIMER_LO
0DCC3 B9 D2 DA                          LDA tbl_PaintSfxFreqHi,y
0DCC6 8D 03 40                          STA PULSE1_TIMER_HI
0DCC9                               +done:
0DCC9                               
0DCC9                           
0DCC9                           ;; This is what happens when we forced nmi skip
0DCC9                           +force_skip_nmi:
0DCC9                           
0DCC9                               ;; Increase frame timers
0DCC9 E6 15                         INC frame_counter
0DCCB                           
0DCCB                               ;; reset sprites_update_position
0DCCB A9 00                         LDA #$00
0DCCD 85 35                         STA sprites_update_position
0DCCF                           
0DCCF                               ;; Don't skip next NMI request
0DCCF A9 00                         LDA #$00
0DCD1 85 13                         STA skip_nmi
0DCD3 85 53                         STA check_nmi
0DCD5                           
0DCD5                               ;; Restore X, Y and PC from stack
0DCD5 28                            PLP
0DCD6 68                            PLA
0DCD7 A8                            TAY
0DCD8 68                            PLA
0DCD9 AA                            TAX
0DCDA                           
0DCDA                           +skip_nmi:
0DCDA                               ;; Restore accumulator from stack
0DCDA 68                            PLA
0DCDB                           
0DCDB                               ;; Return
0DCDB 40                            RTI
0DCDC                           
0DCDC                           
0DCDC                           ;; IRQ handler (empty)
0DCDC                           IRQ:
0DCDC                               .include "interrupt/irq.asm"
0DCDC                           
0DCDC 40                            RTI
0DCDD                           
0DCDD                           
0DCDD                           ;; Interrupt vectors
0DCDD 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA FE DA                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE DC DC                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
