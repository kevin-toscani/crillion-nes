	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; TEST MODE (comment to disable)
	                            TESTING = #1
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$74        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Counters 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           
00041                           ;; Current level (doubles as level select variable)
00041                           current_level          .dsb 1
00042                           
00042                           ;; Tile type the ball is currently colliding with
00042                           colliding_tile         .dsb 1
00043                           
00043                           ;; Number of blocks left on screen
00043                           blocks_left            .dsb 1
00044                           
00044                           ;; Sound control variables
00044                           max_noise              .dsb 1
00045                           sweep_noise            .dsb 1
00046                           current_noise          .dsb 1
00047                           noise_timer            .dsb 1
00048                           do_beeps               .dsb 1
00049                           
00049                           ;; Sound effect variables
00049                           sfx_address            .dsb 2
0004B                           sfx_timer              .dsb 1
0004C                           
0004C                           ;; Additional NMI check for timed PPU fade
0004C                           check_nmi              .dsb 1
0004D                           
0004D                           
0004D                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 7E C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 7E C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 41                         STA current_level
0C057 85 20                         STA ball_score
0C059 85 21                         STA ball_score+1
0C05B 85 22                         STA ball_score+2
0C05D 85 23                         STA ball_score+3
0C05F 85 24                         STA ball_score+4
0C061 85 25                         STA ball_score+5
0C063                           
0C063                           
0C063                           
0C063                           ;; Main game loop
0C063                           lbl_MainGameLoop:
0C063                               .include "game/main.asm"
0C063                           
0C063                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C063                           ;;
0C063                           ;; game/main.asm
0C063                           ;;
0C063                           ;; The main game loop content.
0C063                           ;;
0C063                           ;;
0C063                           
0C063                               ;; Reset sprite pointer every game loop
0C063 A9 00                         LDA #$00
0C065 85 3D                         STA sprite_ram_pointer
0C067                           
0C067                               ;; Store previous buttons
0C067 A5 0F                         LDA buttons_held
0C069 85 0E                         STA buttons_prev
0C06B                           
0C06B                               ;; Read controller input
0C06B 20 61 C5                      JSR sub_ReadController
0C06E                           
0C06E                               ;; Get buttons released
0C06E A5 0F                         LDA buttons_held
0C070 49 FF                         EOR #$FF
0C072 25 0E                         AND buttons_prev
0C074 85 11                         STA buttons_released
0C076                           
0C076                               ;; Set buttons pressed
0C076 A5 0E                         LDA buttons_prev
0C078 49 FF                         EOR #$FF
0C07A 25 0F                         AND buttons_held
0C07C 85 10                         STA buttons_pressed
0C07E                           
0C07E                               ;; Load screen?
0C07E A5 38                         LDA screen_mode
0C080 29 80                         AND #%10000000
0C082 F0 1E                         BEQ +screenLoaded
0C084                           
0C084                               ;; Get screen type to load
0C084 A5 38                         LDA screen_mode
0C086 29 03                         AND #%00000011
0C088 A8                            TAY
0C089                               
0C089                               ;; Get address to load screen type from
0C089 B9 9F D1                      LDA tbl_LoadScreenLo,y
0C08C 85 0C                         STA pointer
0C08E B9 9C D1                      LDA tbl_LoadScreenHi,y
0C091 85 0D                         STA pointer+1
0C093                           
0C093                               ;; Load screen
0C093 20 01 C7                      JSR sub_DisableRendering
0C096 20 2D CA                      JSR sub_JumpToPointer
0C099 20 15 C7                      JSR sub_EnableRendering
0C09C                               
0C09C                               ;; Don't load screen anymore next loop
0C09C A5 38                         LDA screen_mode
0C09E 29 7F                         AND #%01111111
0C0A0 85 38                         STA screen_mode
0C0A2                               
0C0A2                           
0C0A2                           +screenLoaded:
0C0A2                               ;; Check if we're on the game screen
0C0A2 A5 38                         LDA screen_mode
0C0A4 C9 01                         CMP #IS_GAME_SCREEN
0C0A6 F0 03                         BEQ +
0C0A8 4C 68 C3                          JMP +checkNextScreen
0C0AB                               +
0C0AB                           
0C0AB                               ;; Load sprite 0 in place
0C0AB A9 28                         LDA #$28
0C0AD 8D 00 02                      STA ADDR_SPRITERAM
0C0B0 A9 0F                         LDA #$0F
0C0B2 8D 01 02                      STA ADDR_SPRITERAM+1
0C0B5 A9 22                         LDA #$22
0C0B7 8D 02 02                      STA ADDR_SPRITERAM+2
0C0BA A9 F8                         LDA #$F8
0C0BC 8D 03 02                      STA ADDR_SPRITERAM+3
0C0BF A9 04                         LDA #$04
0C0C1 85 3D                         STA sprite_ram_pointer
0C0C3                           
0C0C3                               ;; We're on the game screen
0C0C3                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0C3 A5 35                         LDA sprites_update_position
0C0C5 F0 03                         BEQ +
0C0C7 4C CE C2                          JMP +skipSpriteMovement
0C0CA                               +
0C0CA                           
0C0CA                               ;; Check if ball is frozen
0C0CA A5 37                         LDA ball_flags
0C0CC 29 04                         AND #BALL_IS_FROZEN
0C0CE F0 03                         BEQ +
0C0D0 4C 8D C2                          JMP +skipBallMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Move the ball
0C0D3                               .include "game/include/main/move_ball.asm"
0C0D3                           
0C0D3                               ;; Check if ball goes up or down
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 10                         AND #BALL_MOVES_DOWN
0C0D7 F0 2B                         BEQ +moveBallUp
0C0D9                           
0C0D9                           
0C0D9                           +moveBallDown:
0C0D9                               ;; update the low byte
0C0D9 A5 1A                         LDA ball_ypos_lo
0C0DB 85 1C                         STA ball_ypos_lo_prev
0C0DD 18                            CLC
0C0DE 69 74                         ADC #BALL_SPEED_LO
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2                           
0C0E2                               ;; update the high byte with carry
0C0E2 A5 19                         LDA ball_ypos_hi
0C0E4 85 1B                         STA ball_ypos_hi_prev
0C0E6 69 01                         ADC #BALL_SPEED_HI
0C0E8 85 19                         STA ball_ypos_hi
0C0EA                               
0C0EA                               ;; Check bottom bound
0C0EA C9 C8                         CMP #BOUND_BOTTOM
0C0EC 90 3C                         BCC +checkHorizontalMovement
0C0EE F0 3A                         BEQ +checkHorizontalMovement
0C0F0                           
0C0F0                           
0C0F0                               ;; Change ball direction to "up"
0C0F0 A9 C8                         LDA #BOUND_BOTTOM
0C0F2 38                            SEC
0C0F3 E9 01                         SBC #$01
0C0F5 85 19                         STA ball_ypos_hi
0C0F7 A9 00                         LDA #$00
0C0F9 85 1A                         STA ball_ypos_lo
0C0FB A5 37                         LDA ball_flags
0C0FD 29 EF                         AND #MOVE_BALL_UP
0C0FF 85 37                         STA ball_flags
0C101 4C 2A C1                      JMP +checkHorizontalMovement
0C104                           
0C104                           
0C104                           +moveBallUp:
0C104                               ;; update the low byte
0C104 A5 1A                         LDA ball_ypos_lo
0C106 85 1C                         STA ball_ypos_lo_prev
0C108 38                            SEC
0C109 E9 74                         SBC #BALL_SPEED_LO
0C10B 85 1A                         STA ball_ypos_lo
0C10D                           
0C10D                               ;; update the high byte with carry
0C10D A5 19                         LDA ball_ypos_hi
0C10F 85 1B                         STA ball_ypos_hi_prev
0C111 E9 01                         SBC #BALL_SPEED_HI
0C113 85 19                         STA ball_ypos_hi
0C115                               
0C115                               ;; Check top bound
0C115 C9 30                         CMP #BOUND_TOP
0C117 B0 11                         BCS +checkHorizontalMovement
0C119                           
0C119                               ;; Change ball direction to "down"
0C119 A9 30                         LDA #BOUND_TOP
0C11B 18                            CLC
0C11C 69 01                         ADC #$01
0C11E 85 19                         STA ball_ypos_hi
0C120 A9 00                         LDA #$00
0C122 85 1A                         STA ball_ypos_lo
0C124 A5 37                         LDA ball_flags
0C126 09 10                         ORA #MOVE_BALL_DOWN
0C128 85 37                         STA ball_flags
0C12A                           
0C12A                           
0C12A                           +checkHorizontalMovement:
0C12A                           
0C12A                               ;; Check if ball is being nudged
0C12A A5 3E                         LDA nudge_timer
0C12C D0 41                         BNE +doneBallMovement
0C12E                           
0C12E                               ;; Check if left button is held
0C12E A5 0F                         LDA buttons_held
0C130 29 02                         AND #BUTTON_LEFT
0C132 F0 1B                         BEQ +
0C134                                   ;; update the low byte
0C134 A5 18                             LDA ball_xpos_lo
0C136 38                                SEC
0C137 E9 74                             SBC #BALL_SPEED_LO
0C139 85 18                             STA ball_xpos_lo
0C13B                           
0C13B                                   ;; update the high byte
0C13B A5 17                             LDA ball_xpos_hi
0C13D E9 01                             SBC #BALL_SPEED_HI
0C13F 85 17                             STA ball_xpos_hi
0C141                                   
0C141                                   ;; Check left bound
0C141 C9 10                             CMP #BOUND_LEFT
0C143 B0 2A                             BCS +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge right and set nudge timer
0C145 A5 37                             LDA ball_flags
0C147 09 02                             ORA #NUDGE_BALL_RIGHT
0C149 20 26 CA                          JSR sub_InitiateNudge
0C14C                           
0C14C 4C 6F C1                          JMP +doneBallMovement        
0C14F                               +
0C14F                           
0C14F                               ;; Check if right button is held
0C14F A5 0F                         LDA buttons_held
0C151 29 01                         AND #BUTTON_RIGHT
0C153 F0 1A                         BEQ +
0C155                                   ;; update the low byte
0C155 A5 18                             LDA ball_xpos_lo
0C157 18                                CLC
0C158 69 74                             ADC #BALL_SPEED_LO
0C15A 85 18                             STA ball_xpos_lo
0C15C                           
0C15C                                   ;; update the high byte
0C15C A5 17                             LDA ball_xpos_hi
0C15E 69 01                             ADC #BALL_SPEED_HI
0C160 85 17                             STA ball_xpos_hi     
0C162                           
0C162                                  ;; Check right bound
0C162 C9 E8                             CMP #BOUND_RIGHT
0C164 90 09                             BCC +doneBallMovement
0C166 F0 07                             BEQ +doneBallMovement
0C168                                   
0C168                                   ;; Set flag to nudge left and set nudge timer
0C168 A5 37                             LDA ball_flags
0C16A 29 FD                             AND #NUDGE_BALL_LEFT
0C16C 20 26 CA                          JSR sub_InitiateNudge
0C16F                               +
0C16F                           
0C16F                           
0C16F                           +doneBallMovement:
0C16F                           
0C16F                               ;; Check nudge
0C16F A5 3E                         LDA nudge_timer
0C171 F0 23                         BEQ +doneBallNudging
0C173 A5 37                             LDA ball_flags
0C175 29 02                             AND #NUDGE_BALL_RIGHT
0C177 F0 10                             BEQ +nudgeBallLeft
0C179                                   
0C179                                       ;; update the low byte
0C179 A5 18                                 LDA ball_xpos_lo
0C17B 18                                    CLC
0C17C 69 74                                 ADC #BALL_SPEED_LO
0C17E 85 18                                 STA ball_xpos_lo
0C180                           
0C180                                       ;; update the high byte
0C180 A5 17                                 LDA ball_xpos_hi
0C182 69 01                                 ADC #BALL_SPEED_HI
0C184 85 17                                 STA ball_xpos_hi  
0C186 4C 96 C1                              JMP +doneBallNudging
0C189                                   +nudgeBallLeft:
0C189                                   
0C189                                   ;; update the low byte
0C189 A5 18                             LDA ball_xpos_lo
0C18B 38                                SEC
0C18C E9 74                             SBC #BALL_SPEED_LO
0C18E 85 18                             STA ball_xpos_lo
0C190                           
0C190                                   ;; update the high byte
0C190 A5 17                             LDA ball_xpos_hi
0C192 E9 01                             SBC #BALL_SPEED_HI
0C194 85 17                             STA ball_xpos_hi
0C196                               +doneBallNudging:
0C196                           
0C196                               ;; Don't update position again until next frame
0C196                               ;; (moved to after move block routine)
0C196                           
0C196                           +doneBallHandling:
0C196                           
0C196                               
0C196                               ;; Do collision detection
0C196                               .include "game/include/main/collision_detection.asm"
0C196                           
0C196                               ;; Get ball's x-left, x-center, x-right position
0C196 A5 17                         LDA ball_xpos_hi
0C198 18                            CLC
0C199 69 F0                         ADC #BALL_LEFT_WGA
0C19B 85 2F                         STA ball_left
0C19D 18                            CLC
0C19E 69 04                         ADC #BALL_HALF_SIZE
0C1A0 85 30                         STA ball_center
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 31                         STA ball_right
0C1A7                           
0C1A7                               ;; Get ball's y-top, y-middle, y-bottom position
0C1A7 A5 19                         LDA ball_ypos_hi
0C1A9 18                            CLC
0C1AA 69 D0                         ADC #BALL_TOP_WGA
0C1AC 85 32                         STA ball_top
0C1AE 18                            CLC
0C1AF 69 04                         ADC #BALL_HALF_SIZE
0C1B1 85 33                         STA ball_middle
0C1B3 18                            CLC
0C1B4 69 04                         ADC #BALL_HALF_SIZE
0C1B6 85 34                         STA ball_bottom
0C1B8                           
0C1B8                           +checkRightCollision:
0C1B8                               ;; Check if ball moves right
0C1B8                               ;; No need to check nudging here as that will never collide with a tile
0C1B8 A5 0F                         LDA buttons_held
0C1BA 29 01                         AND #BUTTON_RIGHT
0C1BC F0 20                         BEQ +checkLeftCollision
0C1BE                           
0C1BE                               ;; Check tile at right position
0C1BE A5 33                         LDA ball_middle
0C1C0 85 00                         STA temp
0C1C2 A5 31                         LDA ball_right
0C1C4 85 01                         STA temp+1
0C1C6 20 E9 C6                      JSR sub_ConvertXYToTileType
0C1C9 29 01                         AND #TILE_IS_SOLID
0C1CB F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1CD                           
0C1CD                               ;; Nudge ball and evaluate tile type
0C1CD A9 01                         LDA #$01
0C1CF 85 36                         STA move_block_space_to_check
0C1D1 A5 37                         LDA ball_flags
0C1D3 29 FD                         AND #NUDGE_BALL_LEFT
0C1D5 20 26 CA                      JSR sub_InitiateNudge
0C1D8 20 77 C8                      JSR sub_EvaluateTileType
0C1DB 4C 01 C2                      JMP +checkTopCollision
0C1DE                           
0C1DE                           +checkLeftCollision:
0C1DE                               ;; Check if ball moves right
0C1DE                               ;; No need to check nudging here as that will never collide with a tile
0C1DE A5 0F                         LDA buttons_held
0C1E0 29 02                         AND #BUTTON_LEFT
0C1E2 F0 1D                         BEQ +checkTopCollision
0C1E4                           
0C1E4                               ;; Check tile at right position
0C1E4 A5 33                         LDA ball_middle
0C1E6 85 00                         STA temp
0C1E8 A5 2F                         LDA ball_left
0C1EA 85 01                         STA temp+1
0C1EC 20 E9 C6                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 0E                         BEQ +checkTopCollision
0C1F3                           
0C1F3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1F3 A9 FF                         LDA #$FF
0C1F5 85 36                         STA move_block_space_to_check
0C1F7 A5 37                         LDA ball_flags
0C1F9 09 02                         ORA #NUDGE_BALL_RIGHT
0C1FB 20 26 CA                      JSR sub_InitiateNudge
0C1FE 20 77 C8                      JSR sub_EvaluateTileType
0C201                               
0C201                               
0C201                           +checkTopCollision:
0C201                               ;; Check if ball moves up
0C201 A5 37                         LDA ball_flags
0C203 29 10                         AND #BALL_MOVES_DOWN
0C205 D0 27                         BNE +checkBottomCollision
0C207                           
0C207                               ;; Check tile at top position
0C207 A5 32                         LDA ball_top
0C209 85 00                         STA temp
0C20B A5 30                         LDA ball_center
0C20D 85 01                         STA temp+1
0C20F 20 E9 C6                      JSR sub_ConvertXYToTileType
0C212 29 01                         AND #TILE_IS_SOLID
0C214 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C216                           
0C216                               ;; Tile is solid; move ball down and evaluate tile type
0C216 A5 1C                         LDA ball_ypos_lo_prev
0C218 85 1A                         STA ball_ypos_lo
0C21A A5 1B                         LDA ball_ypos_hi_prev
0C21C 85 19                         STA ball_ypos_hi
0C21E A5 37                         LDA ball_flags
0C220 09 10                         ORA #MOVE_BALL_DOWN
0C222 85 37                         STA ball_flags
0C224                           
0C224 A9 F0                         LDA #$F0 ; which is -16
0C226 85 36                         STA move_block_space_to_check
0C228 20 77 C8                      JSR sub_EvaluateTileType
0C22B 4C 52 C2                      JMP +doneCheckingCollision
0C22E                           
0C22E                           +checkBottomCollision:
0C22E                               ;; No movement check needed: since ball is not moving up, it must move down
0C22E                           
0C22E                               ;; Check tile at bottom position
0C22E A5 34                         LDA ball_bottom
0C230 85 00                         STA temp
0C232 A5 30                         LDA ball_center
0C234 85 01                         STA temp+1
0C236 20 E9 C6                      JSR sub_ConvertXYToTileType
0C239 29 01                         AND #TILE_IS_SOLID
0C23B F0 15                         BEQ +doneCheckingCollision
0C23D                           
0C23D                               ;; Tile is solid; move ball up and evaluate tile type
0C23D A5 1C                         LDA ball_ypos_lo_prev
0C23F 85 1A                         STA ball_ypos_lo
0C241 A5 1B                         LDA ball_ypos_hi_prev
0C243 85 19                         STA ball_ypos_hi
0C245 A5 37                         LDA ball_flags
0C247 29 EF                         AND #MOVE_BALL_UP
0C249 85 37                         STA ball_flags
0C24B                           
0C24B A9 10                         LDA #$10
0C24D 85 36                         STA move_block_space_to_check
0C24F 20 77 C8                      JSR sub_EvaluateTileType
0C252                           
0C252                           +doneCheckingCollision:
0C252                           
0C252                               
0C252                               ;; Update bonus
0C252                               .include "game/include/main/update_bonus.asm"
0C252                           
0C252                           ;; Update the bonus counter on screen
0C252                           
0C252                               ;; If bonus = 000, skip decreasing
0C252 A5 2C                         LDA ball_bonus
0C254 05 2D                         ORA ball_bonus+1
0C256 05 2E                         ORA ball_bonus+2
0C258 F0 33                         BEQ +done
0C25A                           
0C25A                               ;; Check if bonus timer is done yet
0C25A A5 3F                         LDA bonus_timer
0C25C D0 2F                         BNE +done
0C25E                           
0C25E                               ;; Bonus timer is done
0C25E                               ;; Reset bonus timer
0C25E A9 08                         LDA #BONUS_FRAMES
0C260 85 3F                         STA bonus_timer
0C262                               
0C262                               ;; Subtract one from ball bonus ones
0C262 C6 2E                         DEC ball_bonus+2
0C264                               
0C264                               ;; Check if underflow
0C264 10 0E                         BPL +updateBonusOnScreen
0C266                           
0C266                               ;; If underflow, set 9 and subtract one from bonus tens
0C266 A9 09                         LDA #$09
0C268 85 2E                         STA ball_bonus+2
0C26A C6 2D                         DEC ball_bonus+1
0C26C                               
0C26C                               ;; Check if underflow
0C26C 10 06                         BPL +updateBonusOnScreen
0C26E                           
0C26E                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C26E A9 09                         LDA #$09
0C270 85 2D                         STA ball_bonus+1
0C272 C6 2C                         DEC ball_bonus
0C274                           
0C274                               ;;209A 209B 209C
0C274                           +updateBonusOnScreen:
0C274 A9 20                         LDA #$20
0C276 85 00                         STA temp
0C278 A9 9C                         LDA #$9C
0C27A 85 01                         STA temp+1
0C27C A2 02                         LDX #$02
0C27E                               
0C27E                               -updateNextDigit:
0C27E B5 2C                             LDA ball_bonus,x
0C280 18                                CLC
0C281 69 01                             ADC #$01
0C283 85 02                             STA temp+2
0C285 20 32 D0                          JSR sub_WriteByteToPPUBuffer
0C288 C6 01                             DEC temp+1
0C28A CA                                DEX
0C28B 10 F1                         BPL -updateNextDigit
0C28D                                   
0C28D                           +done:
0C28D                           
0C28D                               
0C28D                               ;; Input test for beeps (disabled)
0C28D                               ;; .include "game/test/input_beeps.asm"
0C28D                           
0C28D                               ;; Input test for explosion sound effect (disabled)
0C28D                               ;; .include "game/test/input_explosion.asm"
0C28D                           
0C28D                           
0C28D                           +skipBallMovement:
0C28D                               ;; Move blocks a pixel up/down/left/right
0C28D                               .include "game/include/main/move_blocks.asm"
0C28D                           
0C28D                               ;; Set up block loop
0C28D A2 04                         LDX #MAX_ANIMATIONS
0C28F                           -moveBlocksLoop:
0C28F CA                            DEX
0C290                           
0C290                               ;; Check if block is still moving
0C290 BD 80 03                      LDA move_block_timer,x
0C293 F0 33                         BEQ +checkNext
0C295                               
0C295                               ;; Check if block is done moving
0C295 C9 01                         CMP #$01
0C297 D0 0B                         BNE +
0C299                                   ;; If so, draw a tile and remove the sprite
0C299 20 42 C7                          JSR sub_DrawMoveTile
0C29C A9 00                             LDA #$00
0C29E 9D 80 03                          STA move_block_timer,x
0C2A1 4C C8 C2                          JMP +checkNext
0C2A4                               +
0C2A4                               
0C2A4                               ;; Check in which direction the block is moving
0C2A4                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2A4 BD 88 03                      LDA move_block_flags,x
0C2A7 29 03                         AND #%00000011
0C2A9 F0 14                         BEQ +movingDown
0C2AB C9 01                         CMP #$01
0C2AD F0 0A                         BEQ +movingUp
0C2AF C9 02                         CMP #$02
0C2B1 F0 12                         BEQ +movingRight
0C2B3                               
0C2B3                               ;; Move block in correct direction
0C2B3                               +movingLeft:
0C2B3 DE 78 03                      DEC move_block_x,x
0C2B6 4C C8 C2                      JMP +checkNext
0C2B9                           
0C2B9                               +movingUp:
0C2B9 DE 7C 03                      DEC move_block_y,x
0C2BC 4C C8 C2                      JMP +checkNext
0C2BF                           
0C2BF                               +movingDown:
0C2BF FE 7C 03                      INC move_block_y,x
0C2C2 4C C8 C2                      JMP +checkNext
0C2C5                           
0C2C5                               +movingRight:
0C2C5 FE 78 03                      INC move_block_x,x
0C2C8                           
0C2C8                               ;; Check next block (if any left)
0C2C8                               +checkNext:
0C2C8 E0 00                         CPX #$00
0C2CA D0 C3                         BNE -moveBlocksLoop
0C2CC                               
0C2CC                               ;; Don't update sprites
0C2CC E6 35                         INC sprites_update_position
0C2CE                           
0C2CE                           
0C2CE                           +skipSpriteMovement:
0C2CE                               ;; Testing timed PPU scroll concept (disabled)
0C2CE                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2CE                           
0C2CE                               ;; Check if ball is dead
0C2CE A5 37                         LDA ball_flags
0C2D0 29 01                         AND #BALL_IS_DEAD
0C2D2 F0 03                         BEQ +
0C2D4 4C F6 C2                          JMP +ballIsDead
0C2D7                               +
0C2D7                               
0C2D7                               ;; Add ball to sprite buffer
0C2D7 A6 3D                         LDX sprite_ram_pointer
0C2D9 A5 19                         LDA ball_ypos_hi
0C2DB 9D 00 02                      STA ADDR_SPRITERAM,x
0C2DE E8                            INX
0C2DF A9 01                         LDA #BALL_TILE_CHR
0C2E1 9D 00 02                      STA ADDR_SPRITERAM,x
0C2E4 E8                            INX
0C2E5 A9 00                         LDA #BALL_ATTR
0C2E7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2EA E8                            INX
0C2EB A5 17                         LDA ball_xpos_hi
0C2ED 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F0 E8                            INX
0C2F1 86 3D                         STX sprite_ram_pointer
0C2F3 4C 07 C3                      JMP +drawBlocks
0C2F6                           
0C2F6                           +ballIsDead:
0C2F6                               ;; Check if kill timer has reset
0C2F6 A5 40                         LDA kill_timer
0C2F8 F0 03                         BEQ +
0C2FA 4C 07 C3                          JMP +drawBlocks
0C2FD                               +
0C2FD                               
0C2FD                               ;; Take a live
0C2FD C6 1F                         DEC ball_lives
0C2FF D0 03                         BNE +
0C301                                   ;; If no lives left, initiate game over sequence
0C301 4C 6A C4                          JMP lbl_GameOver
0C304                               +
0C304                               
0C304                               ;; Reload current level
0C304 4C 2E C5                      JMP lbl_InitiateLevelLoad
0C307                           
0C307                           
0C307                           +drawBlocks:
0C307                               ;; Draw moving block(s, if any)
0C307                               .include "game/include/main/draw_blocks.asm"
0C307                           
0C307                           ;; Handle movement of move blocks
0C307                           
0C307                               ;; Set up a loop
0C307 A0 04                         LDY #MAX_ANIMATIONS
0C309                           -drawBlocksLoop:
0C309 88                            DEY
0C30A                           
0C30A                               ;; If timer is zero, check the next move block
0C30A B9 80 03                      LDA move_block_timer,y
0C30D F0 52                         BEQ +nextMoveBlock
0C30F                               
0C30F                               ;; Get current sprite pointer
0C30F A6 3D                         LDX sprite_ram_pointer
0C311                           
0C311                               ;; Draw the sprites on screen
0C311 B9 7C 03                      LDA move_block_y,y
0C314 9D 00 02                      STA ADDR_SPRITERAM,x
0C317 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C31A 18                            CLC
0C31B 69 08                         ADC #$08
0C31D 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C320 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C323 E8                            INX
0C324                           
0C324 A9 52                         LDA #$52 ; Top left chr id
0C326 9D 00 02                      STA ADDR_SPRITERAM,x
0C329 A9 53                         LDA #$53 ; Top right chr id
0C32B 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C32E A9 62                         LDA #$62 ; Bottom left chr id
0C330 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C333 A9 63                         LDA #$63 ; Bottom right chr id
0C335 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C338 E8                            INX
0C339                           
0C339 A9 00                         LDA #BALL_ATTR
0C33B 9D 00 02                      STA ADDR_SPRITERAM,x
0C33E 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C341 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C344 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C347 E8                            INX
0C348                           
0C348 B9 78 03                      LDA move_block_x,y
0C34B 9D 00 02                      STA ADDR_SPRITERAM,x
0C34E 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C351 18                            CLC
0C352 69 08                         ADC #$08
0C354 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C357 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C35A                           
0C35A                               ;; Update sprite RAM pointer
0C35A A5 3D                         LDA sprite_ram_pointer
0C35C 18                            CLC
0C35D 69 10                         ADC #$10
0C35F 85 3D                         STA sprite_ram_pointer
0C361                           
0C361                           
0C361                           
0C361                           +nextMoveBlock:
0C361                               ;; Check the next move block
0C361 C0 00                         CPY #$00
0C363 D0 A4                         BNE -drawBlocksLoop
0C365                           
0C365 4C B4 C3                      JMP +doneScreenLoad
0C368                           
0C368                           
0C368                           
0C368                           +checkNextScreen:
0C368                           
0C368                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C368                               ;; Upon pressing START, the selected level will start
0C368                               .include "game/include/main/select_level.asm"
0C368                           
0C368                               ;; Change level number on start screen
0C368 A5 10                         LDA buttons_pressed
0C36A 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C36C F0 3C                         BEQ +checkStartPress
0C36E                           
0C36E                                   ;; Select next level (1, 5, 9, 13, 17)
0C36E A5 41                             LDA current_level
0C370 18                                CLC
0C371 69 04                             ADC #$04
0C373 C9 14                             CMP #$14
0C375 D0 02                             BNE +
0C377 A9 00                                 LDA #$00
0C379                                   +
0C379 85 41                             STA current_level
0C37B                                   
0C37B                                   ;; Convert level number to two-byte value
0C37B A9 00                             LDA #$00
0C37D 85 03                             STA temp+3
0C37F A5 41                             LDA current_level
0C381 18                                CLC
0C382 69 01                             ADC #$01
0C384                           
0C384                               -
0C384 C9 0A                             CMP #$0A
0C386 90 08                             BCC +
0C388 E6 03                                 INC temp+3
0C38A 38                                    SEC
0C38B E9 0A                                 SBC #$0A
0C38D 4C 84 C3                              JMP -
0C390                                   +
0C390                           
0C390                                   ;; Add level number to PPU buffer
0C390 18                                CLC
0C391 69 01                             ADC #$01
0C393 85 02                             STA temp+2
0C395 A9 20                             LDA #$20
0C397 85 00                             STA temp
0C399 A9 D0                             LDA #$D0
0C39B 85 01                             STA temp+1
0C39D 20 32 D0                          JSR sub_WriteByteToPPUBuffer
0C3A0                                   
0C3A0 C6 01                             DEC temp+1
0C3A2 A4 03                             LDY temp+3
0C3A4 C8                                INY
0C3A5 84 02                             STY temp+2
0C3A7 20 32 D0                          JSR sub_WriteByteToPPUBuffer
0C3AA                                   
0C3AA                               +checkStartPress:
0C3AA                           
0C3AA                           
0C3AA                           
0C3AA                               ;; If START button is pressed
0C3AA A5 10                         LDA buttons_pressed
0C3AC 29 10                         AND #BUTTON_START
0C3AE F0 04                         BEQ +
0C3B0                                   ;; Start the level
0C3B0 A9 81                             LDA #LOAD_GAME_SCREEN
0C3B2 85 38                             STA screen_mode
0C3B4                               +
0C3B4                           
0C3B4                           
0C3B4                           
0C3B4                           +doneScreenLoad:
0C3B4                           
0C3B4                               ;; Load animations (if any)
0C3B4                               .include "game/include/main/load_animations.asm"
0C3B4                           
0C3B4                               ;; Set up loop
0C3B4 A2 00                         LDX #$00
0C3B6                               -loop_load_animation:
0C3B6                                   ;; Check if current animation is active. If not, goto next
0C3B6 BD 74 03                          LDA explosion_active,x
0C3B9 D0 03                             BNE +
0C3BB 4C 55 C4                              JMP +next
0C3BE                                   +
0C3BE                           
0C3BE                                   ;; Check the explosion framecounter
0C3BE BD 60 03                          LDA explosion_timer,x
0C3C1 D0 26                             BNE +
0C3C3                                       ;; Frametimer is 0
0C3C3                                       ;; Reset to animation speed
0C3C3 A9 04                                 LDA #ANIMATION_SPEED
0C3C5 9D 60 03                              STA explosion_timer,x
0C3C8                           
0C3C8                                       ;; Set next animation frame, and check if we're done yet
0C3C8 FE 64 03                              INC explosion_currentframe,x
0C3CB BD 64 03                              LDA explosion_currentframe,x
0C3CE C9 0A                                 CMP #ANIM_SLIDES
0C3D0 D0 17                                 BNE +
0C3D2                           
0C3D2                                       ;; If we're done, inactivate current explosion, clean
0C3D2                                       ;; up sprite RAM and go to the next one
0C3D2 A9 00                                 LDA #$00
0C3D4 9D 74 03                              STA explosion_active,x
0C3D7                                       
0C3D7 A9 09                                 LDA #SLIDE_SIZE
0C3D9 0A                                    ASL
0C3DA 0A                                    ASL
0C3DB A8                                    TAY
0C3DC A9 EF                                 LDA #$EF
0C3DE                                       -
0C3DE 88                                        DEY
0C3DF 99 00 02                                  STA ADDR_SPRITERAM,y
0C3E2 C0 00                                     CPY #00
0C3E4 D0 F8                                 BNE -
0C3E6                                       
0C3E6 4C 55 C4                              JMP +next
0C3E9                                   +
0C3E9                           
0C3E9                                   ;; Load (x,y) position in temp variables
0C3E9 BD 6C 03                          LDA explosion_x,x
0C3EC 85 01                             STA temp+1
0C3EE 85 03                             STA temp+3
0C3F0 BD 70 03                          LDA explosion_y,x
0C3F3 85 02                             STA temp+2
0C3F5                           
0C3F5                                   ;; Load attribute in temp variable
0C3F5 BD 68 03                          LDA explosion_attributes,x
0C3F8 85 04                             STA temp+4
0C3FA                           
0C3FA                                   ;; Load current frame into Y-register
0C3FA BC 64 03                          LDY explosion_currentframe,x
0C3FD                           
0C3FD                                   ;; Load current frame ROM address from table
0C3FD B9 86 D1                          LDA explosion_anim_lo,y
0C400 85 0C                             STA pointer
0C402 B9 7C D1                          LDA explosion_anim_hi,y
0C405 85 0D                             STA pointer+1
0C407                           
0C407                                   ;; Save x-register on stack
0C407 8A                                TXA
0C408 48                                PHA
0C409                           
0C409                                   ;; Load sprites into sprite RAM
0C409 A6 3D                             LDX sprite_ram_pointer
0C40B A0 00                             LDY #$00
0C40D                           
0C40D                                   ;; Prepare (x,y) offset for loop
0C40D 84 00                             STY temp
0C40F                           
0C40F                                   -loop_load_sprite:
0C40F                                   
0C40F                                       ;; Do not draw empty sprites
0C40F B1 0C                                 LDA (pointer),y
0C411 F0 18                                 BEQ +nextSprite
0C413                                   
0C413                                           ;; Add y-position to sprite ram buffer
0C413 A5 02                                     LDA temp+2
0C415 9D 00 02                                  STA ADDR_SPRITERAM,x
0C418 E8                                        INX
0C419                           
0C419                                           ;; Get tile number from frame ROM address, and
0C419                                           ;; add it to sprite ram buffer
0C419 B1 0C                                     LDA (pointer),y
0C41B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C41E E8                                        INX
0C41F                           
0C41F                                           ;; Add attribute data to sprite ram buffer
0C41F A5 04                                     LDA temp+4
0C421 9D 00 02                                  STA ADDR_SPRITERAM,x
0C424 E8                                        INX
0C425                           
0C425                                           ;; Add x-position to sprite ram buffer
0C425 A5 03                                     LDA temp+3
0C427 9D 00 02                                  STA ADDR_SPRITERAM,x
0C42A E8                                        INX
0C42B                           
0C42B                                       +nextSprite:
0C42B                           
0C42B                                       ;; Check if all sprites are done
0C42B C8                                    INY
0C42C C0 09                                 CPY #SLIDE_SIZE
0C42E F0 21                                 BEQ +done
0C430                           
0C430                                       ;; Update x value
0C430 A5 03                                 LDA temp+3
0C432 18                                    CLC
0C433 69 08                                 ADC #$08
0C435 85 03                                 STA temp+3
0C437                           
0C437                                       ;; Update temp for x,y position
0C437 E6 00                                 INC temp
0C439 A5 00                                 LDA temp
0C43B C9 03                                 CMP #SLIDE_WIDTH
0C43D D0 0F                                 BNE +
0C43F                                           ;; Row is done; reset x-position
0C43F A5 01                                     LDA temp+1
0C441 85 03                                     STA temp+3
0C443                           
0C443                                           ;; Update y-position
0C443 A5 02                                     LDA temp+2
0C445 18                                        CLC
0C446 69 08                                     ADC #$08
0C448 85 02                                     STA temp+2
0C44A                           
0C44A                                           ;; Reset row timer
0C44A A9 00                                     LDA #$00
0C44C 85 00                                     STA temp
0C44E                                       +
0C44E                           
0C44E 4C 0F C4                          JMP -loop_load_sprite
0C451                           
0C451                               +done:
0C451 86 3D                             STX sprite_ram_pointer
0C453                           
0C453                                   ;; Retrieve x-register from stack
0C453 68                                PLA
0C454 AA                                TAX
0C455                           
0C455                               +next:
0C455                                   ;; Check if all animations have been updated
0C455 E8                                INX
0C456 E0 04                             CPX #MAX_ANIMATIONS
0C458 F0 03                             BEQ +done
0C45A                           
0C45A 4C B6 C3                      JMP -loop_load_animation
0C45D                           +done:
0C45D                           
0C45D                           
0C45D                               ;; Sprite clean-up
0C45D A6 3D                         LDX sprite_ram_pointer
0C45F A9 EF                         LDA #$EF
0C461                               -
0C461 9D 00 02                          STA ADDR_SPRITERAM,x
0C464 E8                                INX
0C465 D0 FA                         BNE -
0C467                           
0C467 4C 63 C0                      JMP lbl_MainGameLoop
0C46A                           
0C46A                           ;; Following sequences are outside main game loop
0C46A                           .include "game/include/main/game_over.asm"
0C46A                           
0C46A                           ;; Game over sequence
0C46A                           lbl_GameOver:
0C46A                           
0C46A                               ;; Disable noise channel
0C46A A9 00                         LDA #$00
0C46C 8D 15 40                      STA APU_STATUS
0C46F 8D 0C 40                      STA NOISE_VOLUME
0C472                               
0C472                               ;; Do blinds effect
0C472 20 F0 C5                      JSR sub_BlindsEffect
0C475                           
0C475                               ;; Disable draw after HUD to disable screen
0C475 20 75 C5                      JSR sub_WaitForNMI
0C478                               -
0C478 AD 02 20                          LDA PPU_STATUS
0C47B 29 40                             AND #SPRITE_0_HIT
0C47D D0 F9                         BNE -
0C47F                               -
0C47F AD 02 20                          LDA PPU_STATUS
0C482 29 40                             AND #SPRITE_0_HIT
0C484 F0 F9                         BEQ -
0C486 A9 00                         LDA #$00
0C488 8D 01 20                      STA PPU_MASK
0C48B                           
0C48B                               ;; Remove game area from view
0C48B 2C 02 20                      BIT PPU_STATUS
0C48E A9 20                         LDA #$20
0C490 8D 06 20                      STA PPU_ADDR
0C493 A9 A0                         LDA #$A0
0C495 8D 06 20                      STA PPU_ADDR
0C498 A9 00                         LDA #$00
0C49A A2 16                         LDX #$16
0C49C                               -xLoop:
0C49C A0 20                             LDY #$20
0C49E                                   -yLoop:
0C49E 8D 07 20                              STA PPU_DATA
0C4A1 88                                    DEY
0C4A2 D0 FA                             BNE -yLoop
0C4A4 CA                                DEX
0C4A5 D0 F5                         BNE -xLoop
0C4A7                               
0C4A7                               ;; Pause for a little while
0C4A7 A2 18                         LDX #$18
0C4A9                               -
0C4A9 20 75 C5                          JSR sub_WaitForNMI
0C4AC CA                                DEX
0C4AD D0 FA                         BNE -
0C4AF                                       
0C4AF                               ;; Do flash effect
0C4AF 20 D9 C9                      JSR sub_FlashEffect
0C4B2                           
0C4B2                               ;; Draw GAME OVER tiles over game screen
0C4B2 A9 21                         LDA #$21
0C4B4 85 00                         STA temp
0C4B6 A9 EB                         LDA #$EB
0C4B8 85 01                         STA temp+1
0C4BA                           
0C4BA A2 00                         LDX #$00
0C4BC                               -gameOverTileLoop:
0C4BC BD 50 D9                          LDA tbl_GameOver,x
0C4BF 85 02                             STA temp+2
0C4C1 20 32 D0                          JSR sub_WriteByteToPPUBuffer
0C4C4 E6 01                             INC temp+1
0C4C6 E8                                INX
0C4C7 E0 0A                             CPX #$0A
0C4C9 D0 F1                         BNE -gameOverTileLoop
0C4CB                               
0C4CB                               ;; Update GAME OVER attributes on game screen
0C4CB A9 23                         LDA #$23
0C4CD 85 00                         STA temp
0C4CF A9 DA                         LDA #$DA
0C4D1 85 01                         STA temp+1
0C4D3 A9 AA                         LDA #$AA
0C4D5 85 02                         STA temp+2
0C4D7 A2 04                         LDX #$04
0C4D9                               -
0C4D9 20 32 D0                          JSR sub_WriteByteToPPUBuffer
0C4DC E6 01                             INC temp+1
0C4DE CA                                DEX
0C4DF D0 F8                         BNE -
0C4E1 20 75 C5                      JSR sub_WaitForNMI
0C4E4                               
0C4E4                              
0C4E4                               ;; If player score is larger than high score
0C4E4                               ;; Overwrite high score with player score
0C4E4                               ;; [@TODO]
0C4E4                               
0C4E4                               
0C4E4                               ;; If player presses either A or START, (soft) reset the game
0C4E4                               -checkController:
0C4E4 20 61 C5                          JSR sub_ReadController
0C4E7 A5 0F                             LDA buttons_held
0C4E9 29 90                             AND #%10010000
0C4EB F0 F7                         BEQ -checkController
0C4ED 4C 4B C0                      JMP lbl_SoftReset
0C4F0                           
0C4F0                           .include "game/include/main/level_win.asm"
0C4F0                           
0C4F0                           ;; Handling of level win state
0C4F0                           lbl_LevelWin:
0C4F0                           
0C4F0                               ;; Freeze the ball
0C4F0 A5 37                         LDA ball_flags
0C4F2 09 04                         ORA #FREEZE_BALL
0C4F4 85 37                         STA ball_flags
0C4F6                           
0C4F6                               ;; Disable noise channel
0C4F6 A9 00                         LDA #$00
0C4F8 8D 15 40                      STA APU_STATUS
0C4FB 8D 0C 40                      STA NOISE_VOLUME
0C4FE                               
0C4FE                               ;; Wait a few frames
0C4FE A2 18                         LDX #$18
0C500 20 2B D0                      JSR sub_WaitXFrames
0C503                           
0C503                               ;; Set null tile color to yellow
0C503 A9 3F                         LDA #$3F
0C505 85 00                         STA temp
0C507 A9 02                         LDA #$02
0C509 85 01                         STA temp+1
0C50B A9 38                         LDA #$38
0C50D 85 02                         STA temp+2
0C50F 20 32 D0                      JSR sub_WriteByteToPPUBuffer
0C512                               
0C512                               ;; Wait a few frames
0C512 A2 10                         LDX #$10
0C514 20 2B D0                      JSR sub_WaitXFrames
0C517                               
0C517                               ;; Restore null tile color to dark blue
0C517 A9 3F                         LDA #$3F
0C519 85 00                         STA temp
0C51B A9 02                         LDA #$02
0C51D 85 01                         STA temp+1
0C51F A9 12                         LDA #$12
0C521 85 02                         STA temp+2
0C523 20 32 D0                      JSR sub_WriteByteToPPUBuffer
0C526                               
0C526                               ;; Play the end level sweep sound effect (@TODO)
0C526                           
0C526                               ;; Initiate bonus score routine (@TODO)
0C526                           
0C526                               ;; Wait a few frames
0C526 A2 18                         LDX #$18
0C528 20 2B D0                      JSR sub_WaitXFrames
0C52B                           
0C52B                               ;; Load next level
0C52B 4C 2E C5                      JMP lbl_InitiateLevelLoad
0C52E                               
0C52E                           .include "game/include/main/initiate_level_load.asm"
0C52E                           
0C52E                           ;; Load level
0C52E                           lbl_InitiateLevelLoad:
0C52E                               
0C52E                               ;; Blind out the screen
0C52E 20 F0 C5                      JSR sub_BlindsEffect
0C531                               
0C531                               ;; If ball is dead, (re)load current level
0C531                               ;; If ball is alive, load next level
0C531 A5 37                         LDA ball_flags
0C533 29 01                         AND #BALL_IS_DEAD
0C535 D0 05                         BNE +
0C537 E6 41                             INC current_level
0C539 4C 42 C5                          JMP +loadLevel
0C53C                               +
0C53C                               
0C53C                               ;; Revive ball
0C53C A5 37                         LDA ball_flags
0C53E 29 FE                         AND #REVIVE_BALL
0C540 85 37                         STA ball_flags
0C542                           
0C542                           +loadLevel:
0C542                               ;; This loops back to level 1 after level 25 for now,
0C542                               ;; as a proper game ending is yet to be introduced.
0C542 A5 41                         LDA current_level
0C544 C9 19                         CMP #25
0C546 D0 04                         BNE +
0C548 A9 00                             LDA #$00
0C54A 85 41                             STA current_level
0C54C                               +
0C54C                               
0C54C                               ;; Tell the game to load the level screen on the next loop.
0C54C A9 81                         LDA #LOAD_GAME_SCREEN
0C54E 85 38                         STA screen_mode
0C550                           
0C550                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C550 4C 63 C0                      JMP lbl_MainGameLoop0C553                           
0C553                           
0C553                           ;; Subroutines
0C553                           .include "include/subroutines.asm"
0C553                           
0C553                           ;; RNG
0C553                           .include "subroutine/GetRandomNumber.asm"
0C553                           
0C553                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C553                           ;;
0C553                           ;; subroutine/GetRandomNumber.asm
0C553                           ;;
0C553                           ;; Simple and fast random number generator by White Flame.
0C553                           ;;
0C553                           ;; Set random_seed to an arbitrary number to randomize between
0C553                           ;; gaming sessions, for instance using the frame timer upon
0C553                           ;; pressing START on the intro screen.
0C553                           ;;
0C553                           ;;     ;; IF START PRESSED:
0C553                           ;;     LDA frame_counter
0C553                           ;;     STA random_seed
0C553                           ;;
0C553                           ;; Source:
0C553                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C553                           ;;
0C553                           ;;
0C553                           
0C553                           sub_GetRandomNumber:
0C553                               ;; Force EOR if random_seed is zero
0C553 A5 16                         LDA random_seed
0C555 F0 05                         BEQ +doEor
0C557                           
0C557                               ;; Shift left, and EOR if the high bit is set
0C557 0A                            ASL
0C558 F0 04                         BEQ +noEor
0C55A 90 02                         BCC +noEor
0C55C                           
0C55C                           +doEor:
0C55C 49 1D                         EOR #$1D
0C55E                           
0C55E                           +noEor:
0C55E 85 16                         STA random_seed
0C560                           
0C560 60                            RTS
0C561                           
0C561                           
0C561                           ;; Read controller input
0C561                           .include "subroutine/ReadController.asm"
0C561                           
0C561                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C561                           ;;
0C561                           ;; subroutine/ReadController.asm
0C561                           ;;
0C561                           ;; Subroutine that polls the controller and stores the input
0C561                           ;; buttons in a variable. This version only handles controller
0C561                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C561                           ;;
0C561                           ;;
0C561                           
0C561                           sub_ReadController:
0C561                           
0C561                               ;; Set strobe bit
0C561 A9 01                         LDA #$01
0C563 8D 16 40                      STA JOYPAD_1
0C566                           
0C566                               ;; Set up ring timer
0C566 85 0F                         STA buttons_held
0C568                           
0C568                               ;; Clear strobe bit
0C568 4A                            LSR
0C569 8D 16 40                      STA JOYPAD_1
0C56C                           
0C56C                               ;; Loop through button presses
0C56C                               -
0C56C AD 16 40                          LDA JOYPAD_1
0C56F 4A                                LSR
0C570 26 0F                             ROL buttons_held
0C572                           
0C572                               ;; Check if ring timer is done
0C572 90 F8                         BCC -
0C574                           
0C574                               ;; Return from subroutine
0C574 60                            RTS
0C575                           
0C575                           
0C575                           ;; vBlank/NMI wait
0C575                           .include "subroutine/WaitForNMI.asm"
0C575                           
0C575                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C575                           ;;
0C575                           ;; subroutine/WaitForVBlank.asm
0C575                           ;;
0C575                           ;; Subroutine that essentially pauses script execution until
0C575                           ;; vBlank happens.
0C575                           ;;
0C575                           ;;
0C575                           
0C575                           sub_WaitForNMI:
0C575 A9 01                         LDA #$01
0C577 85 4C                         STA check_nmi
0C579                               -
0C579 A5 4C                             LDA check_nmi
0C57B D0 FC                         BNE -
0C57D 60                            RTS
0C57E                           
0C57E                           .include "subroutine/WaitForVBlank.asm"
0C57E                           
0C57E                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C57E                           ;;
0C57E                           ;; subroutine/WaitForVBlank.asm
0C57E                           ;;
0C57E                           ;; Subroutine that essentially pauses script execution until
0C57E                           ;; vBlank happens.
0C57E                           ;;
0C57E                           ;;
0C57E                           
0C57E                           sub_WaitForVBlank:
0C57E 2C 02 20                      BIT $2002
0C581 10 FB                         BPL sub_WaitForVBlank
0C583 60                            RTS
0C584                           
0C584                           
0C584                           ;; Game specific subroutines
0C584                           .include "game/include/subroutines.asm"
0C584                           
0C584                           ;; additional game-specific subroutines go here
0C584                           
0C584                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C584                           
0C584                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C584                           ;;
0C584                           ;;  sub_AddAccumulatorToScore.asm
0C584                           ;;
0C584                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C584                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C584                           ;;  actual score.
0C584                           ;;
0C584                           ;;
0C584                           
0C584                           
0C584                           sub_AddAccumulatorToScore:
0C584                           
0C584                               ;; Clear old add_to_score
0C584 A2 05                         LDX #$05
0C586 A0 00                         LDY #$00
0C588                               -
0C588 94 26                             STY add_to_score,x
0C58A CA                                DEX
0C58B 10 FB                         BPL -
0C58D                           
0C58D                               ;; Set accumulator to add_to_score variables
0C58D                               ;; Check and update 100s
0C58D                               -checkHundreds:
0C58D C9 64                             CMP #100
0C58F 90 08                             BCC +checkTens
0C591 38                                    SEC
0C592 E9 64                                 SBC #100
0C594 E6 29                                 INC add_to_score+3
0C596 4C 8D C5                              JMP -checkHundreds
0C599                                   +checkTens:
0C599                           
0C599                               ;; Check and update 10s
0C599                               -checkTens:
0C599 C9 0A                             CMP #10
0C59B 90 08                             BCC +setOnes
0C59D 38                                    SEC
0C59E E9 0A                                 SBC #10
0C5A0 E6 2A                                 INC add_to_score+4
0C5A2 4C 99 C5                              JMP -checkTens
0C5A5                                   +setOnes:
0C5A5                           
0C5A5                               ;; We're left with 1s
0C5A5 85 2B                         STA add_to_score+5
0C5A7                           
0C5A7                               ;; Byte for byte, add add_to_score to ball_score
0C5A7 A9 00                         LDA #$00
0C5A9 85 39                         STA ppu_buffer_update
0C5AB A4 3A                         LDY ppu_buffer_pointer
0C5AD A2 05                         LDX #$05
0C5AF                               -
0C5AF B5 26                             LDA add_to_score,x
0C5B1 18                                CLC
0C5B2 75 20                             ADC ball_score,x
0C5B4 C9 0A                             CMP #10
0C5B6 90 05                             BCC +
0C5B8 38                                    SEC
0C5B9 E9 0A                                 SBC #10
0C5BB F6 1F                                 INC ball_score-1,x
0C5BD                                   +
0C5BD                                   
0C5BD                                   ;; Update new score digit
0C5BD 95 20                             STA ball_score,x
0C5BF                           
0C5BF                                   ;; Update score tile in PPU
0C5BF A9 20                             LDA #$20
0C5C1 99 00 03                          STA ppu_buffer,y
0C5C4 C8                                INY
0C5C5 8A                                TXA
0C5C6 18                                CLC
0C5C7 69 83                             ADC #$83
0C5C9 99 00 03                          STA ppu_buffer,y
0C5CC C8                                INY
0C5CD B5 20                             LDA ball_score,x
0C5CF 18                                CLC
0C5D0 69 01                             ADC #$01
0C5D2 99 00 03                          STA ppu_buffer,y
0C5D5 C8                                INY
0C5D6                           
0C5D6                                   ;; Check next digit (if any left)
0C5D6 CA                                DEX
0C5D7 30 03                             BMI +done
0C5D9 4C AF C5                      JMP -
0C5DC                           
0C5DC                           +done:
0C5DC                               ;; Update PPU buffer pointer and status
0C5DC 84 3A                         STY ppu_buffer_pointer
0C5DE A9 01                         LDA #$01
0C5E0 85 39                         STA ppu_buffer_update
0C5E2                           
0C5E2                               ;; Done: return 
0C5E2 60                            RTS
0C5E3                           
0C5E3                           .include "game/subroutine/BackgroundNoise.asm"
0C5E3                           
0C5E3                           ;; Play background noise
0C5E3                           sub_BackgroundNoise:
0C5E3 A9 32                         LDA #$32
0C5E5 8D 0C 40                      STA NOISE_VOLUME
0C5E8 A9 0E                         LDA #$0E
0C5EA 8D 0E 40                      STA NOISE_PERIOD
0C5ED 85 46                         STA current_noise
0C5EF 60                            RTS
0C5F0                           
0C5F0                           .include "game/subroutine/BlindsEffect.asm"
0C5F0                           
0C5F0                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C5F0                           sub_BlindsEffect:
0C5F0                           
0C5F0                               ;; Set up loop fading
0C5F0 A9 00                         LDA #$00
0C5F2 85 07                         STA temp+7
0C5F4 A0 08                         LDY #$08
0C5F6                               -fadeLoop:
0C5F6 84 08                             STY temp+8
0C5F8                           
0C5F8                                   ;; Wait for NMI to pass
0C5F8 20 75 C5                          JSR sub_WaitForNMI
0C5FB                                   
0C5FB                                   ;; Now wait for No-sprite 0
0C5FB                                   -
0C5FB AD 02 20                              LDA PPU_STATUS
0C5FE 29 40                                 AND #SPRITE_0_HIT
0C600 D0 F9                             BNE -
0C602                               
0C602                                   ;; Now wait for Sprite 0
0C602                                   -
0C602 AD 02 20                              LDA PPU_STATUS
0C605 29 40                                 AND #SPRITE_0_HIT
0C607 F0 F9                             BEQ -
0C609                                       
0C609                                   ;; Setup tile row loop
0C609 A0 16                             LDY #22
0C60B                                   -tileLoop:
0C60B                                   
0C60B                                       ;; Disable drawing
0C60B A5 12                                 LDA soft_ppu_mask
0C60D 29 F7                                 AND #%11110111
0C60F 8D 01 20                              STA PPU_MASK
0C612                                       
0C612                                       ;; Set up scanline loop
0C612 A2 08                                 LDX #$08
0C614                                       -scanlineLoop:
0C614 E4 08                                     CPX temp+8
0C616 D0 0A                                     BNE +wasteTime
0C618                                           
0C618                                           ;; Restore drawing
0C618 A5 12                                     LDA soft_ppu_mask
0C61A 09 08                                     ORA #%00001000
0C61C 8D 01 20                                  STA PPU_MASK
0C61F 4C 28 C6                                  JMP +wasteMoreTime
0C622                           
0C622                                           ;; Waste 12 frames
0C622                                           +wasteTime:
0C622 E6 09                                     INC temp+9   ;+5
0C624 C6 09                                     DEC temp+9   ;+5
0C626 49 00                                     EOR #$00     ;+2
0C628                                           
0C628                                           ;; Waste about 100 frames
0C628                                           +wasteMoreTime:
0C628                                           
0C628 86 01                                     STX temp+1     ;  3 down, 97 to go
0C62A A2 09                                     LDX #$09       ;  5 down, 95 to go
0C62C                                           -wasteLoop:
0C62C EA                                            NOP
0C62D 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C62F CA                                            DEX        ;  5+5L down,  95-5L to go
0C630 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C632                           
0C632 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C634 CA                                        DEX            ;  9+8L down, 91-8L to go
0C635 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C637                           
0C637 88                                    DEY
0C638 D0 D1                             BNE -tileLoop
0C63A                           
0C63A A4 08                             LDY temp+8
0C63C                                   
0C63C E6 07                             INC temp+7
0C63E A5 07                             LDA temp+7
0C640 C9 02                             CMP #$02
0C642 D0 B2                             BNE -fadeLoop
0C644                           
0C644 A9 00                             LDA #$00
0C646 85 07                             STA temp+7
0C648 88                                DEY
0C649 D0 AB                         BNE -fadeLoop
0C64B                               
0C64B 60                            RTS
0C64C                           
0C64C                           .include "game/subroutine/ClearScreen.asm"
0C64C                           
0C64C                           ;; Subroutine to clear the screen
0C64C                           ;; If it's a game screen, add noise
0C64C                           
0C64C                           sub_ClearScreen:
0C64C                               ;; Check of game screen or not
0C64C A5 38                         LDA screen_mode
0C64E 29 03                         AND #CHECK_SCREEN_MODE
0C650 C9 01                         CMP #IS_GAME_SCREEN
0C652 F0 02                         BEQ +
0C654 A9 00                             LDA #$00
0C656                               +
0C656 85 01                         STA temp+1
0C658                               
0C658                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C658 2C 02 20                      BIT PPU_STATUS
0C65B A9 20                         LDA #$20
0C65D 8D 06 20                      STA PPU_ADDR
0C660 A9 00                         LDA #$00
0C662 8D 06 20                      STA PPU_ADDR
0C665                               
0C665                               ;; Set up tile to draw and loop
0C665 85 00                         STA temp
0C667 AA                            TAX
0C668 A8                            TAY
0C669                           
0C669                               -     
0C669                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C669 A5 00                             LDA temp
0C66B 8D 07 20                          STA PPU_DATA
0C66E                           
0C66E                                   ;; Check if we should draw noise next. Noise is drawn if:
0C66E                                   ;; - Screen mode is game screen
0C66E                                   ;; - Y between #$06 and #$19 (inclusive)
0C66E                                   ;; - X between #$02 and #$1D (inclusive)
0C66E                                   
0C66E                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C66E A5 01                             LDA temp+1
0C670 F0 1C                             BEQ +nextTileInRow
0C672                                   
0C672                                   ;; If Y < $6, skip the check
0C672 C0 06                             CPY #$06
0C674 90 18                             BCC +nextTileInRow
0C676                                   
0C676                                   ;; If X < $1, skip the check
0C676 E0 01                             CPX #$01
0C678 90 14                             BCC +nextTileInRow
0C67A                                   
0C67A                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C67A E0 1D                             CPX #$1D
0C67C D0 04                             BNE +
0C67E A9 00                                 LDA #$00
0C680 85 00                                 STA temp
0C682                                   +
0C682 B0 0A                             BCS +nextTileInRow
0C684                                   
0C684                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C684 20 53 C5                          JSR sub_GetRandomNumber
0C687 29 07                             AND #%00000111
0C689 18                                CLC
0C68A 69 68                             ADC #$68
0C68C 85 00                             STA temp
0C68E                           
0C68E                           +nextTileInRow:
0C68E                                   
0C68E                                   ;; Check if a row has been done. If not, draw the next
0C68E E8                                INX
0C68F E0 20                             CPX #$20
0C691 D0 D6                             BNE -
0C693                                   
0C693                                   ;; Go to the next row (if any left)
0C693 A2 00                             LDX #00
0C695 C8                                INY
0C696                                   
0C696                                   ;; If Y is 1A, skip noise tile check until done drawing
0C696 C0 1A                             CPY #$1A
0C698 D0 04                             BNE +
0C69A A9 00                                 LDA #$00
0C69C 85 01                                 STA temp+1
0C69E                                   +
0C69E                                   
0C69E C0 1E                             CPY #$1E
0C6A0 D0 C7                         BNE -
0C6A2                           
0C6A2                               ;; Clear attribute table
0C6A2 A9 23                         LDA #$23
0C6A4 8D 06 20                      STA PPU_ADDR
0C6A7 A9 C0                         LDA #$C0
0C6A9 8D 06 20                      STA PPU_ADDR
0C6AC A9 00                         LDA #$00
0C6AE A2 40                         LDX #$40
0C6B0                               -
0C6B0 8D 07 20                          STA PPU_DATA
0C6B3 CA                                DEX
0C6B4 D0 FA                         BNE -
0C6B6                               
0C6B6 60                            RTS
0C6B7                           
0C6B7                           .include "game/subroutine/ColorizeBall.asm"
0C6B7                           
0C6B7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6B7                           ;;
0C6B7                           ;;  Subroutine: ColorizeBall
0C6B7                           ;;
0C6B7                           ;;  Applies the color set through ball_flags to the ball sprite.
0C6B7                           ;;  Expects ball_flags to be in the accumulator
0C6B7                           ;;
0C6B7                           
0C6B7                           
0C6B7                           sub_ColorizeBall:
0C6B7                           
0C6B7                               ;; Get color from ball_flags
0C6B7 4A                            LSR
0C6B8 4A                            LSR
0C6B9 4A                            LSR
0C6BA 4A                            LSR
0C6BB 4A                            LSR
0C6BC AA                            TAX
0C6BD                           
0C6BD                               ;; Add new light color of ball to PPU palette
0C6BD A9 3F                         LDA #$3F
0C6BF 85 00                         STA temp
0C6C1 A9 11                         LDA #$11
0C6C3 85 01                         STA temp+1
0C6C5 BD 96 D1                      LDA tbl_BallColorLight,x
0C6C8 85 02                         STA temp+2
0C6CA 20 32 D0                      JSR sub_WriteByteToPPUBuffer
0C6CD                               
0C6CD                               ;; Add new dark color of ball to PPU palette
0C6CD E6 01                         INC temp+1
0C6CF BD 90 D1                      LDA tbl_BallColorDark,x
0C6D2 85 02                         STA temp+2
0C6D4 20 32 D0                      JSR sub_WriteByteToPPUBuffer
0C6D7                               
0C6D7 60                            RTS
0C6D8                           
0C6D8                           .include "game/subroutine/ColorsMatch.asm"
0C6D8                           
0C6D8                           ;; Subroutine to check if ball color matches colliding tile color
0C6D8                           
0C6D8                           sub_ColorsMatch:
0C6D8                               ;; Save tile color in temp variable
0C6D8 A5 42                         LDA colliding_tile
0C6DA 29 0E                         AND #%00001110
0C6DC 85 00                         STA temp
0C6DE                           
0C6DE                               ;; Get ball color
0C6DE A5 37                         LDA ball_flags
0C6E0 29 E0                         AND #%11100000
0C6E2 4A                            LSR
0C6E3 4A                            LSR
0C6E4 4A                            LSR
0C6E5 4A                            LSR
0C6E6                           
0C6E6                               ;; Compare with tile color
0C6E6 C5 00                         CMP temp
0C6E8 60                            RTS
0C6E9                           
0C6E9                           .include "game/subroutine/ConvertXYToTileType.asm"
0C6E9                           
0C6E9                           ;; Subroutine to convert the ball's position to a tile type
0C6E9                           ;; - Expects temp to be y-position of ball within game area
0C6E9                           ;; - Expects temp+1 to be x-position of ball within game area
0C6E9                           ;; - Puts result in accumulator and zp variable
0C6E9                           ;; - Corrupts X-register
0C6E9                           
0C6E9                           sub_ConvertXYToTileType:
0C6E9 A5 01                         LDA temp+1
0C6EB 4A                            LSR
0C6EC 4A                            LSR
0C6ED 4A                            LSR
0C6EE 4A                            LSR
0C6EF 85 09                         STA temp+9
0C6F1 A5 00                         LDA temp
0C6F3 29 F0                         AND #%11110000
0C6F5 18                            CLC
0C6F6 65 09                         ADC temp+9
0C6F8 85 09                         STA temp+9
0C6FA AA                            TAX
0C6FB BD 00 04                      LDA tile_type, x
0C6FE 85 42                         STA colliding_tile
0C700 60                            RTS
0C701                           
0C701                           .include "game/subroutine/DisableEnableRendering.asm"
0C701                           
0C701                           ;; Subroutines to disable or enable screen rendering
0C701                           
0C701                           sub_DisableRendering:
0C701                               ;; Force NMI skip, disable rendering
0C701 A9 01                     	LDA #$01
0C703 85 14                     	STA force_skip_nmi
0C705 20 7E C5                      JSR sub_WaitForVBlank
0C708 A5 12                         LDA soft_ppu_mask
0C70A 29 E7                         AND #%11100111
0C70C 8D 01 20                      STA PPU_MASK
0C70F 85 12                         STA soft_ppu_mask
0C711 20 7E C5                      JSR sub_WaitForVBlank
0C714 60                            RTS
0C715                           
0C715                           sub_EnableRendering:
0C715                               ;; Enable rendering
0C715 A9 00                     	LDA #$00
0C717 8D 05 20                  	STA PPU_SCROLL
0C71A 8D 05 20                  	STA PPU_SCROLL
0C71D 20 7E C5                      JSR sub_WaitForVBlank
0C720 85 14                     	STA force_skip_nmi
0C722 A5 12                         LDA soft_ppu_mask
0C724 09 18                         ORA #%00011000
0C726 85 12                         STA soft_ppu_mask
0C728 8D 01 20                      STA PPU_MASK
0C72B 20 7E C5                      JSR sub_WaitForVBlank
0C72E 60                            RTS
0C72F                           
0C72F                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C72F                           
0C72F                           ;; Draw a tile from the logo on the intro screen
0C72F                           sub_drawIntroScreenLogoTile:
0C72F B9 78 D0                      LDA tbl_IntroScreenLogoChr,y
0C732 C9 60                         CMP #$60
0C734 D0 08                         BNE +
0C736 20 53 C5                          JSR sub_GetRandomNumber
0C739 29 07                             AND #$07
0C73B 18                                CLC
0C73C 69 60                             ADC #$60
0C73E                               +
0C73E 8D 07 20                      STA PPU_DATA
0C741 60                            RTS
0C742                           
0C742                           .include "game/subroutine/DrawMoveTile.asm"
0C742                           
0C742                           ;; Draw the move tile as follows:
0C742                           ;;
0C742                           ;;  1 2
0C742                           ;;  3 4 5
0C742                           ;;    6 7
0C742                           ;;
0C742                           ;; (1,2,3,4) is the move block itself
0C742                           ;; (5,6,7) are shades unless that tile is solid
0C742                           
0C742                           ;; X holds the move block sprite slot
0C742                           
0C742                           sub_DrawMoveTile:
0C742                           
0C742                               ;; Get tile type index from sprite x and y values
0C742                               ;; and store it in a temp variable
0C742 BD 78 03                      LDA move_block_x,x
0C745 18                            CLC
0C746 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C748 4A                            LSR
0C749 4A                            LSR
0C74A 4A                            LSR
0C74B 4A                            LSR
0C74C 85 09                         STA temp+9
0C74E BD 7C 03                      LDA move_block_y,x
0C751 18                            CLC
0C752 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C754 29 F0                         AND #%11110000
0C756 18                            CLC
0C757 65 09                         ADC temp+9
0C759 85 09                         STA temp+9
0C75B A8                            TAY
0C75C                               
0C75C                               ;; Add move tile data on the new tile location
0C75C BD 84 03                      LDA move_block_tile_type,x
0C75F 99 00 04                      STA tile_type,y
0C762                           
0C762                               ;; Draw the original tile type in the ppu buffer
0C762                               ;; - get PPU address to write to (temp, temp+1)
0C762 8A                            TXA
0C763 48                            PHA
0C764 A6 09                         LDX temp+9
0C766 20 F7 C9                      JSR sub_GetPPUAddrFromYXIndex
0C769 68                            PLA
0C76A AA                            TAX
0C76B                               
0C76B                               ;; - based on color, select tile 42 or 4A for top left
0C76B BD 88 03                      LDA move_block_flags,x
0C76E 4A                            LSR
0C76F 4A                            LSR
0C770 4A                            LSR
0C771 4A                            LSR
0C772 4A                            LSR
0C773 A8                            TAY
0C774 B9 49 D9                      LDA tbl_MoveBlockTopLeftTile,y
0C777 85 08                         STA temp+8
0C779                               
0C779                               ;; - save palette ID in temp+6
0C779 98                            TYA
0C77A 4A                            LSR
0C77B 85 06                         STA temp+6
0C77D                               
0C77D                               ;; Prepare PPU buffer
0C77D A4 3A                         LDY ppu_buffer_pointer
0C77F A9 00                         LDA #$00
0C781 85 39                         STA ppu_buffer_update
0C783                               
0C783                               ;; Draw tile 1 (top left tile of move block)
0C783 20 64 C8                      JSR sub_DrawTileTemp018
0C786                           
0C786                               
0C786                               ;; Draw tile 2 (top right tile of move block)
0C786 E6 01                         INC temp+1
0C788 E6 08                         INC temp+8
0C78A 20 64 C8                      JSR sub_DrawTileTemp018
0C78D                           
0C78D                               ;; Draw tile 3 (bottom left tile of move block)
0C78D A5 01                         LDA temp+1
0C78F 18                            CLC
0C790 69 1F                         ADC #$1F
0C792 85 01                         STA temp+1
0C794 A5 00                         LDA temp
0C796 69 00                         ADC #$00
0C798 85 00                         STA temp
0C79A A5 08                         LDA temp+8
0C79C 18                            CLC
0C79D 69 0F                         ADC #$0F
0C79F 85 08                         STA temp+8
0C7A1 20 64 C8                      JSR sub_DrawTileTemp018
0C7A4                           
0C7A4                               ;; Draw tile 4 (bottom right tile of move block)
0C7A4 E6 01                         INC temp+1
0C7A6 E6 08                         INC temp+8
0C7A8 20 64 C8                      JSR sub_DrawTileTemp018
0C7AB                           
0C7AB                               ;; Load tile type offset in X register
0C7AB 8A                            TXA
0C7AC 48                            PHA
0C7AD A6 09                         LDX temp+9
0C7AF                               
0C7AF                               ;; Load shade tile in temp+8
0C7AF A9 00                         LDA #$00
0C7B1 85 08                         STA temp+8
0C7B3                           
0C7B3                               ;; Draw tile 5 (right shade) unless tile is solid
0C7B3 E6 01                         INC temp+1
0C7B5                               
0C7B5 8A                            TXA
0C7B6 29 0F                         AND #%00001111
0C7B8 C9 0D                         CMP #$0D
0C7BA F0 0A                         BEQ +nextTile
0C7BC                           
0C7BC BD 01 04                      LDA tile_type+1,x
0C7BF 29 01                         AND #%00000001
0C7C1 D0 03                         BNE +nextTile
0C7C3                               
0C7C3 20 64 C8                      JSR sub_DrawTileTemp018
0C7C6                               
0C7C6                           
0C7C6                           +nextTile:
0C7C6                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C7C6 A5 01                         LDA temp+1
0C7C8 18                            CLC
0C7C9 69 1F                         ADC #$1F
0C7CB 85 01                         STA temp+1
0C7CD A5 00                         LDA temp
0C7CF 69 00                         ADC #$00
0C7D1 85 00                         STA temp
0C7D3                           
0C7D3 8A                            TXA
0C7D4 29 F0                         AND #%11110000
0C7D6 C9 90                         CMP #$90
0C7D8 F0 0A                         BEQ +nextTile
0C7DA                           
0C7DA BD 10 04                      LDA tile_type+16,x
0C7DD 29 01                         AND #%00000001
0C7DF D0 03                         BNE +nextTile
0C7E1                               
0C7E1 20 64 C8                      JSR sub_DrawTileTemp018
0C7E4                           
0C7E4                               
0C7E4                           +nextTile:
0C7E4                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C7E4 E6 01                         INC temp+1
0C7E6                           
0C7E6 8A                            TXA
0C7E7 29 F0                         AND #%11110000
0C7E9 C9 90                         CMP #$90
0C7EB F0 11                         BEQ +setTileAttributes
0C7ED                               
0C7ED 8A                            TXA
0C7EE 29 0F                         AND #%00001111
0C7F0 C9 0D                         CMP #$0D
0C7F2 F0 0A                         BEQ +setTileAttributes
0C7F4                               
0C7F4 BD 11 04                      LDA tile_type+17,x
0C7F7 29 01                         AND #%00000001
0C7F9 D0 03                         BNE +setTileAttributes
0C7FB                               
0C7FB 20 64 C8                      JSR sub_DrawTileTemp018
0C7FE                               
0C7FE                           
0C7FE                           +setTileAttributes:
0C7FE                               ;; Update attribute table accordingly through ppu buffer
0C7FE                               ;; - PPU buffer high byte
0C7FE 20 01 D0                      JSR sub_SetTileAttributeAddress
0C801                           
0C801 8A                            TXA
0C802 29 10                         AND #%00010000
0C804 F0 05                         BEQ +        
0C806 A9 F0                             LDA #%11110000
0C808 4C 0D C8                          JMP ++
0C80B                               +
0C80B A9 0F                         LDA #%00001111
0C80D                               ++
0C80D 85 02                         STA temp+2
0C80F                               
0C80F 8A                            TXA
0C810 29 01                         AND #%00000001
0C812 F0 07                         BEQ +
0C814 A5 02                             LDA temp+2
0C816 09 CC                             ORA #%11001100
0C818 4C 1F C8                          JMP ++
0C81B                               +
0C81B A5 02                         LDA temp+2
0C81D 09 33                         ORA #%00110011
0C81F                               ++
0C81F 85 02                         STA temp+2
0C821                               
0C821 C9 FC                         CMP #%11111100
0C823 F0 22                         BEQ +continue
0C825                               
0C825 C9 F3                         CMP #%11110011
0C827 D0 09                         BNE +
0C829 A5 06                             LDA temp+6
0C82B 0A                                ASL
0C82C 0A                                ASL
0C82D 85 06                             STA temp+6
0C82F 4C 47 C8                          JMP +continue
0C832                               +
0C832                               
0C832 C9 CF                         CMP #%11001111
0C834 D0 0A                         BNE +
0C836 A6 06                             LDX temp+6
0C838 BD EC D8                          LDA tbl_Times16,x
0C83B 85 06                             STA temp+6
0C83D 4C 47 C8                          JMP +continue
0C840                               +
0C840                               
0C840 A6 06                         LDX temp+6
0C842 BD FC D8                      LDA tbl_Times64,x
0C845 85 06                         STA temp+6
0C847                                   
0C847                           +continue:
0C847 A5 00                         LDA temp
0C849 38                            SEC
0C84A E9 C0                         SBC #$C0
0C84C AA                            TAX
0C84D BD A0 04                      LDA tile_attributes,x
0C850 25 02                         AND temp+2
0C852 05 06                         ORA temp+6
0C854 9D A0 04                      STA tile_attributes,x
0C857 99 00 03                      STA ppu_buffer,y
0C85A C8                            INY
0C85B                           
0C85B                               ;; Restore original X
0C85B 68                            PLA
0C85C AA                            TAX
0C85D                               
0C85D                               ;; Update PPU buffer
0C85D 84 3A                         STY ppu_buffer_pointer
0C85F A9 01                         LDA #$01
0C861 85 39                         STA ppu_buffer_update
0C863                           
0C863                               ;; Return
0C863 60                            RTS
0C864                           
0C864                           .include "game/subroutine/DrawTileTemp018.asm"
0C864                           
0C864                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C864                           
0C864                           sub_DrawTileTemp018:
0C864 A5 00                         LDA temp
0C866 99 00 03                      STA ppu_buffer,y
0C869 C8                            INY
0C86A A5 01                         LDA temp+1
0C86C 99 00 03                      STA ppu_buffer,y
0C86F C8                            INY
0C870 A5 08                         LDA temp+8
0C872 99 00 03                      STA ppu_buffer,y
0C875 C8                            INY
0C876 60                            RTS
0C877                           
0C877                           .include "game/subroutine/EvaluateTileType.asm"
0C877                           
0C877                           ;; Subroutine to evaluate the colliding tile type and take its
0C877                           ;; corresponding action (move block, kill player, ...)
0C877                           ;; - Expects X-register to be the tile_type offset
0C877                           ;; - Uses zp variable colliding_tile
0C877                           
0C877                           sub_EvaluateTileType:
0C877                           
0C877                               ;; Check if collided tile is a color block
0C877 A5 42                         LDA colliding_tile
0C879 29 80                         AND #IS_COLOR_BLOCK
0C87B D0 03                         BNE +
0C87D 4C E6 C8                          JMP +checkIfPaintBlock
0C880                               +
0C880                               
0C880                               ;; It's a color block. Check if the colors match
0C880 20 D8 C6                      JSR sub_ColorsMatch
0C883 F0 06                         BEQ +
0C885                                   ;; Colors don't match
0C885                                   ;; Play bounce sound effect
0C885 A2 02                             LDX #SFX_BOUNCE
0C887 20 7C CE                          JSR sub_PreloadSfxFromX
0C88A                                   
0C88A                                   ;; Return
0C88A 60                                RTS
0C88B                               +
0C88B                           
0C88B                               ;; Colors match; destroy color block
0C88B                               
0C88B                               ;; Convert the metatile offset value (which is in the X register)
0C88B                               ;; to its corresponding address in PPU
0C88B 20 F7 C9                      JSR sub_GetPPUAddrFromYXIndex
0C88E                           
0C88E                               ;; Remove color block from screen by drawing a total
0C88E                               ;; of 7 tiles over it (shade included)
0C88E 20 8B CE                      JSR sub_RemoveBlockFromScreen
0C891                               
0C891                               ;; - Load destruction animation on tile
0C891                               ;; Get most recent slot for explosion    
0C891 8A                            TXA
0C892 85 02                         STA temp+2
0C894 A6 3B                         LDX explosion_pointer
0C896                           
0C896                               ;; If 0, use max pointer value
0C896 D0 02                         BNE +
0C898 A2 04                             LDX #MAX_ANIMATIONS
0C89A                               +
0C89A                           
0C89A                               ;; Decrease pointer by one
0C89A CA                            DEX
0C89B 86 3B                         STX explosion_pointer
0C89D                           
0C89D                               ;; Load explosion data into RAM
0C89D A9 00                         LDA #$00
0C89F 9D 64 03                      STA explosion_currentframe,x
0C8A2                           
0C8A2 A9 04                         LDA #ANIMATION_SPEED
0C8A4 9D 60 03                      STA explosion_timer,x
0C8A7                           
0C8A7 A5 02                         LDA temp+2
0C8A9 29 0F                         AND #%00001111
0C8AB A8                            TAY
0C8AC B9 EC D8                      LDA tbl_Times16,y
0C8AF 18                            CLC
0C8B0 69 0E                         ADC #$0E
0C8B2 9D 6C 03                      STA explosion_x,x
0C8B5                           
0C8B5 A5 02                         LDA temp+2
0C8B7 29 F0                         AND #%11110000
0C8B9 18                            CLC
0C8BA 69 29                         ADC #$29
0C8BC 9D 70 03                      STA explosion_y,x
0C8BF                           
0C8BF A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C8C1 9D 68 03                      STA explosion_attributes,x
0C8C4 A9 01                         LDA #$01
0C8C6 9D 74 03                      STA explosion_active,x
0C8C9                           
0C8C9 A5 02                         LDA temp+2
0C8CB AA                            TAX
0C8CC                               
0C8CC                               
0C8CC                               ;; - Write #$00 in tile type ram (makes not-solid)
0C8CC A9 00                         LDA #$00
0C8CE 9D 00 04                      STA tile_type, x
0C8D1                           
0C8D1                           
0C8D1                               ;; Add (80 + level number) to score
0C8D1 A5 41                         LDA current_level
0C8D3 18                            CLC
0C8D4 69 51                         ADC #81
0C8D6 20 84 C5                      JSR sub_AddAccumulatorToScore
0C8D9                           
0C8D9                           
0C8D9                               ;; Play thud sound effect
0C8D9 A2 01                         LDX #SFX_THUD
0C8DB 20 7C CE                      JSR sub_PreloadSfxFromX
0C8DE                           
0C8DE                           
0C8DE                               ;; - If there are no color blocks left:
0C8DE                               ;;   - Initiate level-win state
0C8DE C6 43                         DEC blocks_left
0C8E0 D0 03                         BNE +
0C8E2 4C F0 C4                          JMP lbl_LevelWin
0C8E5                               +
0C8E5                               
0C8E5 60                            RTS
0C8E6                           
0C8E6                           +checkIfPaintBlock:
0C8E6                           
0C8E6                           
0C8E6                               ;; Check if collided tile is a paint block
0C8E6 A5 42                         LDA colliding_tile
0C8E8 29 20                         AND #IS_PAINT_BLOCK
0C8EA F0 1A                         BEQ +checkIfDeathBlock
0C8EC                                   ;; It's a paint block. Update ball color
0C8EC                                   ;; Save x-register
0C8EC 8A                                TXA
0C8ED 48                                PHA
0C8EE                           
0C8EE                                   ;; Get tile color
0C8EE A5 42                             LDA colliding_tile
0C8F0 29 0E                             AND #%00001110
0C8F2 0A                                ASL
0C8F3 0A                                ASL
0C8F4 0A                                ASL
0C8F5 0A                                ASL
0C8F6 85 00                             STA temp
0C8F8                           
0C8F8                                   ;; Apply tile color to ball
0C8F8 A5 37                             LDA ball_flags
0C8FA 29 1F                             AND #%00011111
0C8FC 05 00                             ORA temp
0C8FE 85 37                             STA ball_flags
0C900 20 B7 C6                          JSR sub_ColorizeBall
0C903                           
0C903                                   ;; Restore x-register
0C903 68                                PLA
0C904 AA                                TAX
0C905                           
0C905                                   ;; Return
0C905 60                                RTS
0C906                               +checkIfDeathBlock:
0C906                           
0C906                               ;; Check if collided tile is a death block
0C906 A5 42                         LDA colliding_tile
0C908 29 10                         AND #IS_DEATH_BLOCK
0C90A F0 3D                         BEQ +checkIfMoveBlock
0C90C                           
0C90C                                   ;; It is a death block
0C90C                                   ;; Freeze and kill player
0C90C A5 37                             LDA ball_flags
0C90E 09 05                             ORA #%00000101
0C910 85 37                             STA ball_flags
0C912                                   
0C912                                   ;; Get free explosion slot
0C912 A6 3B                             LDX explosion_pointer
0C914 D0 02                             BNE +
0C916 A2 04                                 LDX #MAX_ANIMATIONS
0C918                                   +
0C918 CA                                DEX
0C919 86 3B                             STX explosion_pointer
0C91B                           
0C91B                                   ;; Load explosion data into RAM
0C91B A9 00                             LDA #$00
0C91D 9D 64 03                          STA explosion_currentframe,x
0C920                           
0C920 A9 04                             LDA #ANIMATION_SPEED
0C922 9D 60 03                          STA explosion_timer,x
0C925                           
0C925 A5 17                             LDA ball_xpos_hi
0C927 38                                SEC
0C928 E9 08                             SBC #$08
0C92A 9D 6C 03                          STA explosion_x,x
0C92D                           
0C92D A5 19                             LDA ball_ypos_hi
0C92F 38                                SEC
0C930 E9 06                             SBC #$06
0C932 9D 70 03                          STA explosion_y,x
0C935                           
0C935 A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C937 9D 68 03                          STA explosion_attributes,x
0C93A                           
0C93A A9 01                             LDA #$01
0C93C 9D 74 03                          STA explosion_active,x
0C93F                                   
0C93F                                   ;; Play explosion sound effect
0C93F A2 00                             LDX #SFX_EXPLOSION
0C941 20 7C CE                          JSR sub_PreloadSfxFromX
0C944                           
0C944                                   ;; Set kill timer
0C944 A9 60                             LDA #$60
0C946 85 40                             STA kill_timer
0C948                           
0C948                                   ;; Return
0C948 60                                RTS
0C949                           
0C949                           
0C949                           +checkIfMoveBlock:
0C949                           
0C949                               ;; Check if collided tile is a move block
0C949 A5 42                         LDA colliding_tile
0C94B 29 40                         AND #IS_MOVE_BLOCK
0C94D D0 01                         BNE +
0C94F 60                                RTS
0C950                               +
0C950                           
0C950                               ;; It is a move block. Check if colors match
0C950 20 D8 C6                      JSR sub_ColorsMatch
0C953 F0 01                         BEQ +
0C955 60                                RTS
0C956                               +
0C956                           
0C956                               ;; Colors match
0C956                               ;; - Check if next tile is within the playground
0C956                               ;; (push X onto stack as well)
0C956 8A                            TXA
0C957 48                            PHA
0C958 18                            CLC
0C959 65 36                         ADC move_block_space_to_check
0C95B AA                            TAX
0C95C                               
0C95C 29 0F                         AND #%00001111
0C95E C9 0E                         CMP #$0E
0C960 90 03                         BCC +
0C962 4C D6 C9                          JMP +restoreX
0C965                               +
0C965 8A                            TXA
0C966 29 F0                         AND #%11110000
0C968 C9 A0                         CMP #$A0
0C96A D0 03                         BNE +
0C96C 4C D6 C9                          JMP +restoreX
0C96F                               +
0C96F C9 F0                         CMP #$F0
0C971 D0 03                         BNE +
0C973 4C D6 C9                          JMP +restoreX
0C976                               +
0C976                               
0C976                               ;; Check if the next tile is solid
0C976 BD 00 04                      LDA tile_type,x
0C979 29 01                         AND #TILE_IS_SOLID
0C97B F0 03                         BEQ +
0C97D 4C D6 C9                          JMP +restoreX
0C980                               +
0C980                               
0C980                               ;; Move block has room to move
0C980                               ;; Pull original X from stack
0C980 68                            PLA
0C981 AA                            TAX        
0C982                               
0C982                               ;; Add the tiles that need updating to ppu buffer, and
0C982                               ;; update attribute table accordingly through ppu buffer
0C982 20 F7 C9                      JSR sub_GetPPUAddrFromYXIndex
0C985 20 8B CE                      JSR sub_RemoveBlockFromScreen
0C988                           
0C988                               ;; Store original tile type in temp variable
0C988 BD 00 04                      LDA tile_type,x
0C98B 85 08                         STA temp+8
0C98D                           
0C98D                               ;; Write #$00 in tile type ram (makes not-solid)
0C98D A9 00                         LDA #$00
0C98F 9D 00 04                      STA tile_type,x
0C992                           
0C992                               ;; Add move tile sprite over the original tile
0C992                               ;; - Store x in temp variable
0C992 86 03                         STX temp+3
0C994                               
0C994                               ;; - Update move block pointer
0C994 A6 3C                         LDX move_block_pointer
0C996 D0 02                         BNE +
0C998 A2 04                             LDX #MAX_ANIMATIONS
0C99A                               +
0C99A CA                            DEX
0C99B 86 3C                         STX move_block_pointer
0C99D                           
0C99D                               ;; = Set move block tile type
0C99D A5 08                         LDA temp+8
0C99F 9D 84 03                      STA move_block_tile_type,x
0C9A2                           
0C9A2                               ;; - Set move block X position
0C9A2 A5 03                         LDA temp+3
0C9A4 29 0F                         AND #%00001111
0C9A6 A8                            TAY
0C9A7 C8                            INY
0C9A8 B9 EC D8                      LDA tbl_Times16,y
0C9AB 9D 78 03                      STA move_block_x,x
0C9AE                               
0C9AE                               ;; - Set move block Y position
0C9AE A5 03                         LDA temp+3
0C9B0 29 F0                         AND #%11110000
0C9B2 18                            CLC
0C9B3 69 30                         ADC #$30
0C9B5 9D 7C 03                      STA move_block_y,x
0C9B8 DE 7C 03                      DEC move_block_y,x
0C9BB                               
0C9BB                               ;; - Set timer to 16 (+1) frames
0C9BB A9 11                         LDA #$11
0C9BD 9D 80 03                      STA move_block_timer,x
0C9C0                               
0C9C0                               ;; - Set move direction
0C9C0 A5 36                         LDA move_block_space_to_check
0C9C2 29 81                         AND #%10000001
0C9C4 18                            CLC
0C9C5 2A                            ROL
0C9C6 69 00                         ADC #$00
0C9C8 85 04                         STA temp+4
0C9CA                               
0C9CA                               ;; - Set block color as ball color and add direction
0C9CA A5 37                         LDA ball_flags
0C9CC 29 E0                         AND #BALL_COLOR
0C9CE 05 04                         ORA temp+4
0C9D0 9D 88 03                      STA move_block_flags,x
0C9D3                               
0C9D3                               ;; - Restore original X
0C9D3 A6 03                         LDX temp+3
0C9D5                           
0C9D5                               ;; Return
0C9D5 60                            RTS
0C9D6                           
0C9D6                           
0C9D6                           ;; Pull X register from stack before returning
0C9D6                           +restoreX:
0C9D6 68                            PLA
0C9D7 AA                            TAX
0C9D8 60                            RTS
0C9D9                           
0C9D9                           .include "game/subroutine/FlashEffect.asm"
0C9D9                           
0C9D9                           ;; Apply flashing light effect to background color
0C9D9                           sub_FlashEffect:
0C9D9 A2 00                         LDX #$00
0C9DB 86 01                         STX temp+1
0C9DD A9 3F                         LDA #$3F
0C9DF 85 00                         STA temp
0C9E1                           
0C9E1                               -flashLoop:
0C9E1 BD 5A D9                          LDA tbl_BackgroundFade,x
0C9E4 85 02                             STA temp+2
0C9E6 20 32 D0                          JSR sub_WriteByteToPPUBuffer
0C9E9 A0 03                             LDY #$03
0C9EB                                   -
0C9EB 20 75 C5                              JSR sub_WaitForNMI
0C9EE 88                                    DEY
0C9EF D0 FA                             BNE -
0C9F1 E8                                INX
0C9F2 E0 0A                             CPX #$0A
0C9F4 D0 EB                         BNE -flashLoop
0C9F6                               
0C9F6 60                            RTS
0C9F7                           
0C9F7                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C9F7                           
0C9F7                           ;; Get the PPU address from YX index
0C9F7                           ;; - Expects YX index (aka tile offset) to be in the X register
0C9F7                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C9F7                           
0C9F7                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C9F7                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C9F7                           
0C9F7                           sub_GetPPUAddrFromYXIndex:
0C9F7 8A                            TXA
0C9F8 29 C0                         AND #%11000000
0C9FA 18                            CLC
0C9FB 2A                            ROL
0C9FC 2A                            ROL
0C9FD 2A                            ROL
0C9FE 69 20                         ADC #$20
0CA00 85 00                         STA temp
0CA02                               
0CA02 8A                            TXA
0CA03 29 0F                         AND #%00001111
0CA05 0A                            ASL
0CA06 85 01                         STA temp+1
0CA08                               
0CA08 8A                            TXA
0CA09 29 30                         AND #%00110000
0CA0B 0A                            ASL
0CA0C 0A                            ASL
0CA0D 18                            CLC
0CA0E 65 01                         ADC temp+1
0CA10 85 01                         STA temp+1
0CA12                               
0CA12 A5 00                         LDA temp
0CA14 69 00                         ADC #$00
0CA16 85 00                         STA temp
0CA18                               
0CA18 A5 01                         LDA temp+1
0CA1A 18                            CLC
0CA1B 69 C2                         ADC #$C2
0CA1D 85 01                         STA temp+1
0CA1F                               
0CA1F A5 00                         LDA temp
0CA21 69 00                         ADC #$00
0CA23 85 00                         STA temp
0CA25                           
0CA25 60                            RTS
0CA26                           
0CA26                           .include "game/subroutine/InitiateNudge.asm"
0CA26                           
0CA26                           ;; Tell ball to nudge
0CA26                           sub_InitiateNudge:
0CA26 85 37                         STA ball_flags
0CA28 A9 05                         LDA #NUDGE_FRAMES
0CA2A 85 3E                         STA nudge_timer
0CA2C 60                            RTS
0CA2D                           
0CA2D                           .include "game/subroutine/JumpToPointer.asm"
0CA2D                           
0CA2D                           ;; Helper subroutine to JSR to a variable pointer address
0CA2D                           sub_JumpToPointer:
0CA2D 6C 0C 00                      JMP (pointer)
0CA30                               ;RTS must be handled by the routine (pointer) jumps to
0CA30                           
0CA30                           .include "game/subroutine/LoadGameScreen.asm"
0CA30                           
0CA30                           ;; Load the game screen, based on level number
0CA30                           sub_LoadGameScreen:
0CA30                           
0CA30                               ;; Clear the screen
0CA30 20 4C C6                      JSR sub_ClearScreen
0CA33                               
0CA33                               ;; Clear collision and attribute data; reset blocks left in the process
0CA33 A2 00                         LDX #$00
0CA35 8A                            TXA
0CA36 85 43                         STA blocks_left
0CA38                               -
0CA38 9D 00 04                          STA tile_type,x
0CA3B E8                                INX
0CA3C D0 FA                         BNE -
0CA3E                               
0CA3E                               ;; Get pointer from current level
0CA3E A6 41                         LDX current_level
0CA40 BD 9E D8                      LDA tbl_lvl_layout_lo,x
0CA43 85 0C                         STA pointer
0CA45 BD 84 D8                      LDA tbl_lvl_layout_hi,x
0CA48 85 0D                         STA pointer+1
0CA4A                           
0CA4A                               ;; Set up the loop
0CA4A A0 00                         LDY #$00
0CA4C                           -drawRowColumnLoop:
0CA4C                           
0CA4C                               ;; Load (x,y) of current set of tiles
0CA4C B1 0C                         LDA (pointer),y
0CA4E                           
0CA4E                               ;; Check if level is done; if so, skip the loop
0CA4E C9 FF                         CMP #LEVEL_END
0CA50 D0 03                         BNE +
0CA52 4C 9B CB                          JMP +doneLevelLoad
0CA55                               +
0CA55                           
0CA55                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CA55 85 00                         STA temp
0CA57 C8                            INY
0CA58 B1 0C                         LDA (pointer),y
0CA5A 85 01                         STA temp+1
0CA5C                               
0CA5C                               ;; Convert (x,y) to PPU address
0CA5C                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CA5C A5 00                         LDA temp
0CA5E 29 0F                         AND #%00001111
0CA60 4A                            LSR
0CA61 4A                            LSR
0CA62 09 20                         ORA #$20
0CA64 85 02                         STA temp+2
0CA66                               
0CA66                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CA66 A5 00                         LDA temp
0CA68 29 F0                         AND #%11110000
0CA6A 4A                            LSR
0CA6B 4A                            LSR
0CA6C 4A                            LSR
0CA6D 85 03                         STA temp+3
0CA6F                               
0CA6F A5 00                         LDA temp
0CA71 29 03                         AND #%00000011
0CA73 AA                            TAX
0CA74 BD FC D8                      LDA tbl_Times64,x
0CA77 18                            CLC
0CA78 65 03                         ADC temp+3
0CA7A 18                            CLC
0CA7B 69 C2                         ADC #$C2
0CA7D 85 03                         STA temp+3
0CA7F                               
0CA7F                               ;; Add carry to temp+2
0CA7F A5 02                         LDA temp+2
0CA81 69 00                         ADC #$00
0CA83 85 02                         STA temp+2
0CA85                           
0CA85                               ;; Convert tile data to loop count and tile type
0CA85                               ;; temp+4 = color
0CA85 A5 01                         LDA temp+1
0CA87 29 07                         AND #%00000111
0CA89 85 04                         STA temp+4
0CA8B                               
0CA8B                               ;; If color = 7, this is a wall
0CA8B C9 07                         CMP #%00000111
0CA8D F0 12                         BEQ +wallHack
0CA8F                                   
0CA8F                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CA8F 29 01                             AND #%00000001
0CA91 F0 02                             BEQ +
0CA93 A9 05                                 LDA #$05
0CA95                                   +
0CA95 85 07                             STA temp+7
0CA97                                
0CA97                                   ;; temp+5 = tile type
0CA97 A5 01                             LDA temp+1
0CA99 4A                                LSR
0CA9A 4A                                LSR
0CA9B 4A                                LSR
0CA9C 29 03                             AND #%00000011
0CA9E 4C A7 CA                          JMP +setTileType
0CAA1                               +wallHack:
0CAA1                               
0CAA1                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CAA1 A9 00                         LDA #$00
0CAA3 85 07                         STA temp+7
0CAA5 A9 04                         LDA #$04
0CAA7                           
0CAA7                           +setTileType:    
0CAA7 85 05                         STA temp+5
0CAA9                               
0CAA9                               ;; X = tile offset
0CAA9 18                            CLC
0CAAA 65 07                         ADC temp+7
0CAAC AA                            TAX
0CAAD                               
0CAAD                               ;; temp+6 = number of tiles
0CAAD A5 01                         LDA temp+1
0CAAF 29 60                         AND #%01100000
0CAB1 4A                            LSR
0CAB2 4A                            LSR
0CAB3 4A                            LSR
0CAB4 4A                            LSR
0CAB5 4A                            LSR
0CAB6 85 06                         STA temp+6
0CAB8                               
0CAB8                               ;; Translate (x,y) to (y,x) for tile RAM
0CAB8 A5 00                         LDA temp
0CABA 0A                            ASL
0CABB 0A                            ASL
0CABC 0A                            ASL
0CABD 0A                            ASL
0CABE 85 08                         STA temp+8
0CAC0 A5 00                         LDA temp
0CAC2 4A                            LSR
0CAC3 4A                            LSR
0CAC4 4A                            LSR
0CAC5 4A                            LSR
0CAC6 05 08                         ORA temp+8
0CAC8 85 00                         STA temp
0CACA                               
0CACA                               ;; Set up loop
0CACA 98                            TYA
0CACB 48                            PHA
0CACC A4 06                         LDY temp+6
0CACE                           
0CACE                               -drawTileLoop:
0CACE                                   ;; Write PPU address
0CACE 2C 02 20                          BIT PPU_STATUS
0CAD1 A5 02                             LDA temp+2
0CAD3 8D 06 20                          STA PPU_ADDR
0CAD6 A5 03                             LDA temp+3
0CAD8 8D 06 20                          STA PPU_ADDR
0CADB                                   
0CADB                                   ;; Write first and second tile
0CADB BD 00 D9                          LDA tbl_GametileTopLeft,x
0CADE 8D 07 20                          STA PPU_DATA
0CAE1 BD 0A D9                          LDA tbl_GametileTopRight,x
0CAE4 8D 07 20                          STA PPU_DATA
0CAE7                                   
0CAE7                                   ;; Update PPU address
0CAE7 2C 02 20                          BIT PPU_STATUS
0CAEA A5 02                             LDA temp+2
0CAEC 8D 06 20                          STA PPU_ADDR
0CAEF A5 03                             LDA temp+3
0CAF1 18                                CLC
0CAF2 69 20                             ADC #$20
0CAF4 8D 06 20                          STA PPU_ADDR
0CAF7                                   
0CAF7                                   ;; Write third and fourth tile
0CAF7 BD 14 D9                          LDA tbl_GametileBottomLeft,x
0CAFA 8D 07 20                          STA PPU_DATA
0CAFD BD 1E D9                          LDA tbl_GametileBottomRight,x
0CB00 8D 07 20                          STA PPU_DATA
0CB03                           
0CB03                                   ;; Push x-register to stack
0CB03 8A                                TXA
0CB04 48                                PHA
0CB05                           
0CB05                                   ;; Update tile RAM (aka collision table)
0CB05 A6 05                             LDX temp+5
0CB07 BD 28 D9                          LDA tbl_GameTileRamByte,x
0CB0A 05 04                             ORA temp+4
0CB0C 0A                                ASL
0CB0D 09 01                             ORA #%00000001
0CB0F A6 00                             LDX temp
0CB11 9D 00 04                          STA tile_type,x
0CB14                           
0CB14                                   ;; Check if shade 1 should be drawn
0CB14 E8                                INX
0CB15 BD 00 04                          LDA tile_type,x
0CB18 D0 05                             BNE +
0CB1A A9 00                                 LDA #$00
0CB1C 8D 07 20                              STA PPU_DATA
0CB1F                                   +
0CB1F                                   
0CB1F                                   ;; Check if shade 2 should be drawn
0CB1F A5 03                             LDA temp+3
0CB21 18                                CLC
0CB22 69 41                             ADC #$41
0CB24 85 03                             STA temp+3
0CB26 A5 02                             LDA temp+2
0CB28 69 00                             ADC #$00
0CB2A 85 02                             STA temp+2
0CB2C                                   
0CB2C 8A                                TXA
0CB2D 18                                CLC
0CB2E 69 0F                             ADC #$0F
0CB30 AA                                TAX
0CB31                                   
0CB31 BD 00 04                          LDA tile_type,x
0CB34 D0 0F                             BNE +
0CB36 A5 02                                 LDA temp+2
0CB38 8D 06 20                              STA PPU_ADDR
0CB3B A5 03                                 LDA temp+3
0CB3D 8D 06 20                              STA PPU_ADDR
0CB40 A9 00                                 LDA #$00
0CB42 8D 07 20                              STA PPU_DATA
0CB45                                   +
0CB45                           
0CB45                                   ;; Check if shade 3 should be drawn
0CB45 E8                                INX
0CB46 E6 03                             INC temp+3
0CB48 BD 00 04                          LDA tile_type,x
0CB4B D0 0F                             BNE +
0CB4D A5 02                                 LDA temp+2
0CB4F 8D 06 20                              STA PPU_ADDR
0CB52 A5 03                                 LDA temp+3
0CB54 8D 06 20                              STA PPU_ADDR
0CB57 A9 00                                 LDA #$00
0CB59 8D 07 20                              STA PPU_DATA
0CB5C                                   +
0CB5C                                   
0CB5C                                   ;; Restore x-register from stack
0CB5C 68                                PLA
0CB5D AA                                TAX
0CB5E                                   
0CB5E                                   ;; Reset pointer for next tile
0CB5E A5 03                             LDA temp+3
0CB60 38                                SEC
0CB61 E9 42                             SBC #$42
0CB63 85 03                             STA temp+3
0CB65 A5 02                             LDA temp+2
0CB67 E9 00                             SBC #$00
0CB69 85 02                             STA temp+2
0CB6B                                   
0CB6B                                   ;; Draw next metatile in this loop (if any left)
0CB6B 88                                DEY
0CB6C 30 27                             BMI +doneDrawingRowColumn
0CB6E                                   
0CB6E                                   ;; Is it a row or a column?
0CB6E A5 01                             LDA temp+1
0CB70 10 17                             BPL +
0CB72                                       ;; It is a column: move pointer down (+$40)
0CB72 A5 03                                 LDA temp+3
0CB74 18                                    CLC
0CB75 69 40                                 ADC #$40
0CB77 85 03                                 STA temp+3
0CB79 A5 02                                 LDA temp+2
0CB7B 69 00                                 ADC #$00
0CB7D 85 02                                 STA temp+2
0CB7F                                       
0CB7F                                       ;; Add 16 to temp (as a tile RAM pointer)
0CB7F A5 00                                 LDA temp
0CB81 18                                    CLC
0CB82 69 10                                 ADC #$10
0CB84 85 00                                 STA temp
0CB86 4C 92 CB                              JMP +drawNextTile
0CB89                                   +
0CB89                                   
0CB89                                   ;; It is a row: move pointer right (+$02)
0CB89 A5 03                             LDA temp+3
0CB8B 18                                CLC
0CB8C 69 02                             ADC #$02
0CB8E 85 03                             STA temp+3
0CB90                                   
0CB90                                   ;; Add 1 to temp (as a tile RAM pointer)
0CB90 E6 00                             INC temp
0CB92                           
0CB92                               
0CB92                               ;; Next tile in the row/column
0CB92                                   +drawNextTile:
0CB92 4C CE CA                      JMP -drawTileLoop
0CB95                           
0CB95                               ;; Go to the next set of tiles
0CB95                           +doneDrawingRowColumn:
0CB95 68                            PLA
0CB96 A8                            TAY
0CB97 C8                            INY
0CB98 4C 4C CA                      JMP -drawRowColumnLoop
0CB9B                           
0CB9B                           ;; Level loading is done
0CB9B                           +doneLevelLoad:
0CB9B                           
0CB9B                               ;; Count number of color blocks
0CB9B A2 A0                         LDX #160
0CB9D                               -
0CB9D BD FF 03                          LDA tile_type-1,x
0CBA0 29 80                             AND #%10000000
0CBA2 F0 02                             BEQ +
0CBA4 E6 43                                 INC blocks_left
0CBA6                                   +
0CBA6 CA                                DEX
0CBA7 D0 F4                         BNE -
0CBA9                           
0CBA9                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CBA9 A9 20                         LDA #$20
0CBAB 8D 06 20                      STA PPU_ADDR
0CBAE A9 A2                         LDA #$A2
0CBB0 8D 06 20                      STA PPU_ADDR
0CBB3 A9 35                         LDA #$35
0CBB5 20 E3 CD                      JSR sub_Draw28HorizontalTiles
0CBB8                           
0CBB8                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CBB8 A9 23                         LDA #$23
0CBBA 8D 06 20                      STA PPU_ADDR
0CBBD A9 42                         LDA #$42
0CBBF 8D 06 20                      STA PPU_ADDR
0CBC2 A9 31                         LDA #$31
0CBC4 20 E3 CD                      JSR sub_Draw28HorizontalTiles
0CBC7                           
0CBC7                               ;; Left & right game bounds
0CBC7                               ;; Set PPU_ADDR and store in temp variables
0CBC7 A9 20                         LDA #$20
0CBC9 85 00                         STA temp
0CBCB 8D 06 20                      STA PPU_ADDR
0CBCE A9 C1                         LDA #$C1
0CBD0 85 01                         STA temp+1
0CBD2 8D 06 20                      STA PPU_ADDR
0CBD5                               
0CBD5                               ;; Set vertical bound tile and set up loop
0CBD5 A0 33                         LDY #$33
0CBD7 A2 14                         LDX #20
0CBD9                               -
0CBD9                                   ;; Show left tile
0CBD9 8C 07 20                          STY PPU_DATA
0CBDC                                   
0CBDC                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CBDC A5 00                             LDA temp
0CBDE 8D 06 20                          STA PPU_ADDR
0CBE1 A5 01                             LDA temp+1
0CBE3 18                                CLC
0CBE4 69 1D                             ADC #29
0CBE6 85 01                             STA temp+1
0CBE8 8D 06 20                          STA PPU_ADDR
0CBEB                           
0CBEB                                   ;; Show right tile
0CBEB 8C 07 20                          STY PPU_DATA
0CBEE                           
0CBEE                                   ;; Check if we're done yet
0CBEE CA                                DEX
0CBEF F0 18                             BEQ +drawCorners
0CBF1                                   
0CBF1                                   ;; Not done yet: add 3 to low byte for next left bound
0CBF1 A5 01                             LDA temp+1
0CBF3 18                                CLC
0CBF4 69 03                             ADC #3
0CBF6 85 01                             STA temp+1
0CBF8                                   
0CBF8                                   ;; Apply carry to high byte
0CBF8 A5 00                             LDA temp
0CBFA 69 00                             ADC #$00
0CBFC 85 00                             STA temp
0CBFE                                   
0CBFE                                   ;; Store next PPU_ADDR to draw at
0CBFE 8D 06 20                          STA PPU_ADDR
0CC01 A5 01                             LDA temp+1
0CC03 8D 06 20                          STA PPU_ADDR
0CC06 4C D9 CB                      JMP -
0CC09                               
0CC09                               
0CC09                           
0CC09                           +drawCorners:
0CC09                               ;; Draw the corners of the playing field
0CC09 A9 20                         LDA #$20
0CC0B 8D 06 20                      STA PPU_ADDR
0CC0E A9 A1                         LDA #$A1
0CC10 8D 06 20                      STA PPU_ADDR
0CC13 A9 39                         LDA #$39
0CC15 8D 07 20                      STA PPU_DATA
0CC18                           
0CC18 A9 20                         LDA #$20
0CC1A 8D 06 20                      STA PPU_ADDR
0CC1D A9 BE                         LDA #$BE
0CC1F 8D 06 20                      STA PPU_ADDR
0CC22 A9 3A                         LDA #$3A
0CC24 8D 07 20                      STA PPU_DATA
0CC27                               ;; (added background tile for Sprite-0 hit)
0CC27 A9 3F                         LDA #$3F
0CC29 8D 07 20                      STA PPU_DATA
0CC2C                           
0CC2C A9 23                         LDA #$23
0CC2E 8D 06 20                      STA PPU_ADDR
0CC31 A9 41                         LDA #$41
0CC33 8D 06 20                      STA PPU_ADDR
0CC36 A9 36                         LDA #$36
0CC38 8D 07 20                      STA PPU_DATA
0CC3B                           
0CC3B A9 23                         LDA #$23
0CC3D 8D 06 20                      STA PPU_ADDR
0CC40 A9 5E                         LDA #$5E
0CC42 8D 06 20                      STA PPU_ADDR
0CC45 A9 34                         LDA #$34
0CC47 8D 07 20                      STA PPU_DATA
0CC4A                           
0CC4A                           
0CC4A                               ;; Draw the hud labels
0CC4A A9 20                         LDA #$20
0CC4C 8D 06 20                      STA PPU_ADDR
0CC4F A9 62                         LDA #$62
0CC51 8D 06 20                      STA PPU_ADDR
0CC54 A2 00                         LDX #$00
0CC56                               -
0CC56 BD 2D D9                          LDA tbl_HudText,x
0CC59 8D 07 20                          STA PPU_DATA
0CC5C E8                                INX
0CC5D E0 1C                             CPX #28
0CC5F D0 F5                         BNE -
0CC61                           
0CC61                           
0CC61                               ;; Draw the current score
0CC61 A9 20                         LDA #$20
0CC63 8D 06 20                      STA PPU_ADDR
0CC66 A9 83                         LDA #$83
0CC68 8D 06 20                      STA PPU_ADDR
0CC6B A2 00                         LDX #$00
0CC6D                               -
0CC6D B5 20                             LDA ball_score,x
0CC6F 18                                CLC
0CC70 69 01                             ADC #$01
0CC72 8D 07 20                          STA PPU_DATA
0CC75 E8                                INX
0CC76 E0 06                             CPX #$06
0CC78 D0 F3                         BNE -
0CC7A                           
0CC7A                           
0CC7A                               ;; Draw the level number
0CC7A                               ;; (with primitive HEX>DEC)
0CC7A A5 41                         LDA current_level
0CC7C 18                            CLC
0CC7D 69 01                         ADC #$01
0CC7F 85 01                         STA temp+1
0CC81                               
0CC81 C9 14                         CMP #20
0CC83 B0 13                         BCS +tempIsTwo
0CC85                               
0CC85 C9 0A                         CMP #10
0CC87 B0 05                         BCS +tempIsOne
0CC89                               
0CC89 A9 00                         LDA #$00
0CC8B 4C 9F CC                      JMP +setTemp
0CC8E                               
0CC8E                           +tempIsOne:
0CC8E 38                            SEC
0CC8F E9 0A                         SBC #10
0CC91 85 01                         STA temp+1
0CC93 A9 01                         LDA #$01
0CC95 4C 9F CC                      JMP +setTemp
0CC98                               
0CC98                           +tempIsTwo:
0CC98 38                            SEC
0CC99 E9 14                         SBC #20
0CC9B 85 01                         STA temp+1
0CC9D A9 02                         LDA #$02
0CC9F                           
0CC9F                           +setTemp:
0CC9F 85 00                         STA temp
0CCA1                               
0CCA1 E6 00                         INC temp
0CCA3 E6 01                         INC temp+1
0CCA5                               
0CCA5 A9 20                         LDA #$20
0CCA7 8D 06 20                      STA PPU_ADDR
0CCAA A9 8B                         LDA #$8B
0CCAC 8D 06 20                      STA PPU_ADDR
0CCAF A5 00                         LDA temp
0CCB1 8D 07 20                      STA PPU_DATA
0CCB4 A5 01                         LDA temp+1
0CCB6 8D 07 20                      STA PPU_DATA
0CCB9                           
0CCB9                           
0CCB9                               ;; Draw lives (presumes lives to be capped at 9)
0CCB9 A9 20                         LDA #$20
0CCBB 8D 06 20                      STA PPU_ADDR
0CCBE A9 92                         LDA #$92
0CCC0 8D 06 20                      STA PPU_ADDR
0CCC3 A6 1F                         LDX ball_lives
0CCC5 E8                            INX
0CCC6 8E 07 20                      STX PPU_DATA
0CCC9                           
0CCC9                           
0CCC9                               ;; Set and draw bonus
0CCC9 A9 07                         LDA #$07
0CCCB 85 2C                         STA ball_bonus
0CCCD A9 09                         LDA #$09
0CCCF 85 2D                         STA ball_bonus+1
0CCD1 85 2E                         STA ball_bonus+2
0CCD3                               
0CCD3 A9 20                         LDA #$20
0CCD5 8D 06 20                      STA PPU_ADDR
0CCD8 A9 9A                         LDA #$9A
0CCDA 8D 06 20                      STA PPU_ADDR
0CCDD A2 00                         LDX #$00
0CCDF                               -
0CCDF B5 2C                             LDA ball_bonus,x
0CCE1 18                                CLC
0CCE2 69 01                             ADC #$01
0CCE4 8D 07 20                          STA PPU_DATA
0CCE7 E8                                INX
0CCE8 E0 03                             CPX #$03
0CCEA D0 F3                         BNE -
0CCEC                           
0CCEC                           
0CCEC                               ;; Set attribute data to RAM
0CCEC                               
0CCEC                               ;; Byte 0-7 of attribute ram should be #%10100000
0CCEC A2 00                         LDX #$00
0CCEE A9 A0                         LDA #$A0
0CCF0                               -
0CCF0 9D A0 04                          STA tile_attributes,x
0CCF3 E8                                INX
0CCF4 E0 08                             CPX #$08
0CCF6 D0 F8                         BNE -
0CCF8                           
0CCF8                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CCF8                           
0CCF8                           -attributeLoop:
0CCF8                               ;; Reset current attribute value
0CCF8 A9 00                         LDA #$00
0CCFA 85 02                         STA temp+2
0CCFC                           
0CCFC                               ;; Get first metatile in tile ram based on attribute index
0CCFC                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CCFC 8A                            TXA
0CCFD                           
0CCFD 38                            SEC
0CCFE E9 08                         SBC #$08
0CD00 85 01                         STA temp+1      ; attr - 8 (temp1)
0CD02 0A                            ASL             ; * 2
0CD03 85 00                         STA temp        ; temp = temp1 * 2
0CD05                           
0CD05 A5 01                         LDA temp+1      ; temp1
0CD07 29 F8                         AND #%11111000  ; rounded down to 8's
0CD09 0A                            ASL             ; * 2
0CD0A 18                            CLC
0CD0B 65 00                         ADC temp        ; + temp1 * 2
0CD0D 85 00                         STA temp        ; first metatile
0CD0F                           
0CD0F                               ;; Store first metatile in y-register
0CD0F A8                            TAY
0CD10                           
0CD10                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CD10 8A                            TXA
0CD11 29 07                         AND #%00000111
0CD13 C9 07                         CMP #%00000111
0CD15 F0 0B                         BEQ +
0CD17                           
0CD17                               ;; If X >= $30, don't apply bottom right metatile
0CD17 E0 30                         CPX #$30
0CD19 B0 07                         BCS +
0CD1B                               
0CD1B                               ;; Add metatile1 subpalette to attribute value
0CD1B B9 00 04                      LDA tile_type,y
0CD1E 29 0C                         AND #%00001100
0CD20 85 02                         STA temp+2
0CD22                               +
0CD22                           
0CD22                           
0CD22                               ;; Apply second metatile
0CD22 88                            DEY
0CD23                           
0CD23                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CD23 8A                            TXA
0CD24 29 07                         AND #%00000111
0CD26 F0 10                         BEQ +
0CD28                           
0CD28                               ;; If X >= $30, don't apply bottom left metatile
0CD28 E0 30                         CPX #$30
0CD2A B0 0C                         BCS +
0CD2C                           
0CD2C                           
0CD2C                           
0CD2C                               ;; Add metatile2 subpalette to attribute value
0CD2C B9 00 04                      LDA tile_type,y
0CD2F 29 0C                         AND #%00001100
0CD31 4A                            LSR
0CD32 4A                            LSR
0CD33 05 02                         ORA temp+2
0CD35 4C 3A CD                      JMP ++
0CD38                               +
0CD38 A5 02                         LDA temp+2
0CD3A                               ++
0CD3A 0A                            ASL
0CD3B 0A                            ASL
0CD3C 85 02                         STA temp+2
0CD3E                           
0CD3E                           
0CD3E                               ;; Apply third metatile
0CD3E 98                            TYA
0CD3F 38                            SEC
0CD40 E9 0F                         SBC #$0F
0CD42 A8                            TAY
0CD43                           
0CD43                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD43 8A                            TXA
0CD44 29 07                         AND #%00000111
0CD46 C9 07                         CMP #%00000111
0CD48 F0 11                         BEQ +
0CD4A                           
0CD4A                               ;; If X < $10, don't apply top right metatile
0CD4A 8A                            TXA
0CD4B 29 F0                         AND #%11110000
0CD4D F0 0C                         BEQ +
0CD4F                           
0CD4F                               ;; Add metatile3 subpalette to attribute value
0CD4F B9 00 04                      LDA tile_type,y
0CD52 29 0C                         AND #%00001100
0CD54 4A                            LSR
0CD55 4A                            LSR
0CD56 05 02                         ORA temp+2
0CD58 4C 5D CD                      JMP ++
0CD5B                               +
0CD5B A5 02                         LDA temp+2
0CD5D                               ++
0CD5D 0A                            ASL
0CD5E 0A                            ASL
0CD5F 85 02                         STA temp+2
0CD61                           
0CD61                           
0CD61                               ;; Apply fourth metatile
0CD61 88                            DEY
0CD62                           
0CD62                               ;; If X MOD 8 == 0, don't apply top left metatile
0CD62 8A                            TXA
0CD63 29 07                         AND #%00000111
0CD65 F0 11                         BEQ +
0CD67                           
0CD67                               ;; If X < $10, don't apply top left metatile
0CD67 8A                            TXA
0CD68 29 F0                         AND #%11110000
0CD6A F0 0C                         BEQ +
0CD6C                           
0CD6C                               ;; Add metatile4 subpalette to attribute value
0CD6C B9 00 04                      LDA tile_type,y
0CD6F 29 0C                         AND #%00001100
0CD71 4A                            LSR
0CD72 4A                            LSR
0CD73 05 02                         ORA temp+2
0CD75 4C 7A CD                      JMP ++
0CD78                               +
0CD78 A5 02                         LDA temp+2
0CD7A                               ++
0CD7A 9D A0 04                      STA tile_attributes,x
0CD7D                           
0CD7D                               ;; Check the next attribute, if any left
0CD7D E8                            INX
0CD7E E0 38                         CPX #$38
0CD80 F0 03                         BEQ +
0CD82 4C F8 CC                          JMP -attributeLoop
0CD85                               +
0CD85                           
0CD85                               ;; Stream attribute RAM to PPU
0CD85 2C 02 20                      BIT PPU_STATUS
0CD88 A9 23                         LDA #$23
0CD8A 8D 06 20                      STA PPU_ADDR
0CD8D A9 C0                         LDA #$C0
0CD8F 8D 06 20                      STA PPU_ADDR
0CD92 A2 00                         LDX #$00
0CD94                               -
0CD94 BD A0 04                          LDA tile_attributes,x
0CD97 8D 07 20                          STA PPU_DATA
0CD9A E8                                INX
0CD9B E0 40                             CPX #$40
0CD9D D0 F5                         BNE -
0CD9F                           
0CD9F                               ;; Set initial ball position
0CD9F A6 41                         LDX current_level
0CDA1 BD B8 D8                      LDA tbl_lvl_ball_startpos,x
0CDA4 29 F0                         AND #%11110000
0CDA6 18                            CLC
0CDA7 69 34                         ADC #$34
0CDA9 85 19                         STA ball_ypos_hi
0CDAB BD B8 D8                      LDA tbl_lvl_ball_startpos,x
0CDAE 0A                            ASL
0CDAF 0A                            ASL
0CDB0 0A                            ASL
0CDB1 0A                            ASL
0CDB2 18                            CLC
0CDB3 69 14                         ADC #$14
0CDB5 85 17                         STA ball_xpos_hi
0CDB7 A9 00                         LDA #$00
0CDB9 85 18                         STA ball_xpos_lo
0CDBB 85 1A                         STA ball_ypos_lo
0CDBD                               
0CDBD                               ;; Set initial ball color and direction
0CDBD BD D2 D8                      LDA tbl_lvl_ball_init,x
0CDC0 29 F0                         AND #%11110000
0CDC2 85 37                         STA ball_flags
0CDC4 20 B7 C6                      JSR sub_ColorizeBall
0CDC7                               
0CDC7                               ;; Reset bonus timer
0CDC7 A9 08                         LDA #BONUS_FRAMES
0CDC9 85 3F                         STA bonus_timer
0CDCB                               
0CDCB                               ;; Play background noise
0CDCB A9 08                         LDA #$08
0CDCD 8D 15 40                      STA APU_STATUS
0CDD0 8D 0F 40                      STA NOISE_LENGTH
0CDD3 A9 0E                         LDA #$0E
0CDD5 85 46                         STA current_noise
0CDD7 A9 00                         LDA #$00
0CDD9 85 44                         STA max_noise
0CDDB 85 47                         STA noise_timer
0CDDD 85 45                         STA sweep_noise
0CDDF 20 E3 C5                      JSR sub_BackgroundNoise
0CDE2                           
0CDE2                               ;; Return
0CDE2 60                            RTS
0CDE3                           
0CDE3                           
0CDE3                           ;; Subroutine: draw 28 tiles in a row
0CDE3                           sub_Draw28HorizontalTiles:
0CDE3 A2 1C                         LDX #28
0CDE5                               -
0CDE5 8D 07 20                          STA PPU_DATA
0CDE8 CA                                DEX
0CDE9 D0 FA                         BNE -
0CDEB 60                            RTS
0CDEC                           
0CDEC                           .include "game/subroutine/LoadIntroScreen.asm"
0CDEC                           
0CDEC                           ;; Load the intro screen
0CDEC                           sub_LoadIntroScreen:
0CDEC                           
0CDEC                               ;; Load intro palette
0CDEC 2C 02 20                      BIT PPU_STATUS
0CDEF A9 3F                         LDA #$3F
0CDF1 8D 06 20                      STA PPU_ADDR
0CDF4 A9 00                         LDA #$00
0CDF6 8D 06 20                      STA PPU_ADDR
0CDF9 A2 00                         LDX #$00
0CDFB                               -
0CDFB BD 58 D0                          LDA tbl_IntroScreenPalette,x
0CDFE 8D 07 20                          STA PPU_DATA
0CE01 E8                                INX
0CE02 E0 20                             CPX #$20
0CE04 D0 F5                         BNE -
0CE06                               
0CE06                               ;; Put ball in the middle
0CE06 A9 7C                         LDA #$7C
0CE08 85 17                         STA ball_xpos_hi
0CE0A 85 19                         STA ball_ypos_hi
0CE0C                           
0CE0C                               ;; Clear the screen
0CE0C 20 4C C6                      JSR sub_ClearScreen
0CE0F                           
0CE0F                               ;; Set up intro screen draw loop
0CE0F A2 00                         LDX #$00
0CE11                           
0CE11                           -loop_IntroScreenData:
0CE11                           
0CE11                               ;; Get current byte from intro screen data
0CE11 BD 80 D0                      LDA tbl_IntroScreenData,x
0CE14                           
0CE14                               ;; If current byte is #$3F, we're done drawing.
0CE14 C9 3F                         CMP #$3F
0CE16 D0 03                         BNE +
0CE18 4C 65 CE                          JMP +goToEndIntroScreen
0CE1B                               +
0CE1B                           
0CE1B                               ;; If highest bits are %11, draw a plain tile
0CE1B 29 C0                         AND #%11000000
0CE1D D0 03                         BNE +
0CE1F 4C 45 CE                          JMP +drawTile
0CE22                               +
0CE22                               
0CE22                               ;; If highest bits are %01, set the PPU address
0CE22                               ;; If not, draw two logo tiles
0CE22 C9 40                         CMP #%01000000
0CE24 D0 03                         BNE +drawLogo
0CE26 4C 4F CE                          JMP +setPpuAddr
0CE29                           
0CE29                           +drawLogo:
0CE29                               ;; Get bits 0-2 and store in a temp variable
0CE29 BD 80 D0                      LDA tbl_IntroScreenData,x
0CE2C 29 07                         AND #%00000111
0CE2E 85 00                         STA temp
0CE30                               
0CE30                               ;; Get bits 3-5, shift over to get a value from 0-7
0CE30 BD 80 D0                      LDA tbl_IntroScreenData,x
0CE33 4A                            LSR
0CE34 4A                            LSR
0CE35 4A                            LSR
0CE36 29 07                         AND #%00000111
0CE38                               
0CE38                               ;; Draw the tile that corresponds with that value
0CE38 A8                            TAY
0CE39 20 2F C7                      JSR sub_drawIntroScreenLogoTile
0CE3C                               
0CE3C                               ;; Do the same for the value stored in temp
0CE3C A4 00                         LDY temp
0CE3E 20 2F C7                      JSR sub_drawIntroScreenLogoTile
0CE41                           
0CE41                               ;; Next byte please
0CE41 E8                            INX
0CE42 4C 11 CE                      JMP -loop_IntroScreenData
0CE45                           
0CE45                           +drawTile:
0CE45                               ;; Just draw the tile value on screen
0CE45 BD 80 D0                      LDA tbl_IntroScreenData,x
0CE48 8D 07 20                      STA PPU_DATA
0CE4B                               
0CE4B                               ;; Next byte please
0CE4B E8                            INX
0CE4C 4C 11 CE                      JMP -loop_IntroScreenData
0CE4F                           
0CE4F                           
0CE4F                           +setPpuAddr:
0CE4F                               ;; Reset the PPU latch
0CE4F 2C 02 20                      BIT PPU_STATUS
0CE52                               
0CE52                               ;; Sanitize and write the high byte of the PPU address
0CE52 BD 80 D0                      LDA tbl_IntroScreenData,x
0CE55 29 3F                         AND #%00111111
0CE57 8D 06 20                      STA PPU_ADDR
0CE5A                           
0CE5A                               ;; Write the low byte of the PPU address
0CE5A E8                            INX
0CE5B BD 80 D0                      LDA tbl_IntroScreenData,x
0CE5E 8D 06 20                      STA PPU_ADDR
0CE61                               
0CE61                               ;; PPU has been set up to draw tiles at the correct spot now.
0CE61                               
0CE61                               ;; Next byte please.
0CE61 E8                            INX
0CE62 4C 11 CE                      JMP -loop_IntroScreenData
0CE65                           
0CE65                           +goToEndIntroScreen:
0CE65                           
0CE65                               ;; To color the 1.LEVEL: line green, we need to update two
0CE65                               ;; values in the PPU attribute data.
0CE65 2C 02 20                      BIT PPU_STATUS
0CE68 A9 23                         LDA #$23
0CE6A 8D 06 20                      STA PPU_ADDR
0CE6D A9 CB                         LDA #$CB
0CE6F 8D 06 20                      STA PPU_ADDR
0CE72 A9 0A                         LDA #%00001010
0CE74 8D 07 20                      STA PPU_DATA
0CE77 8D 07 20                      STA PPU_DATA
0CE7A                           
0CE7A 60                            RTS
0CE7B                           
0CE7B                           .include "game/subroutine/LoadWinScreen.asm"
0CE7B                           
0CE7B                           ;; Load the win screen (in progress)
0CE7B                           sub_LoadWinScreen:
0CE7B 60                            RTS
0CE7C                           
0CE7C                           .include "game/subroutine/PreloadSfxFromX.asm"
0CE7C                           
0CE7C                           sub_PreloadSfxFromX:
0CE7C                               
0CE7C                               ;; Load sample X into sfx address (low byte)
0CE7C BD A9 D9                      LDA tbl_Sfx_lo,x
0CE7F 85 49                         STA sfx_address
0CE81                               
0CE81                               ;; Load sample X into sfx address (high byte)
0CE81 BD A6 D9                      LDA tbl_Sfx_hi,x
0CE84 85 4A                         STA sfx_address+1
0CE86                               
0CE86                               ;; Start SFX timer
0CE86 A9 01                         LDA #$01
0CE88 85 4B                         STA sfx_timer
0CE8A                               
0CE8A 60                            RTS
0CE8B                               
0CE8B                               0CE8B                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CE8B                           
0CE8B                           ;; Remove a block from screen
0CE8B                           sub_RemoveBlockFromScreen:
0CE8B                           
0CE8B                               ;; Get current buffer location
0CE8B A4 3A                         LDY ppu_buffer_pointer
0CE8D                               
0CE8D                               ;; TILE 1: if metatile on top left is solid, draw
0CE8D                               ;; null tile, else draw random noise tile
0CE8D A9 00                         LDA #$00
0CE8F 85 39                         STA ppu_buffer_update
0CE91                               
0CE91 A5 00                         LDA temp
0CE93 99 00 03                      STA ppu_buffer,y
0CE96 C8                            INY
0CE97 A5 01                         LDA temp+1
0CE99 99 00 03                      STA ppu_buffer,y
0CE9C C8                            INY
0CE9D                               
0CE9D 8A                            TXA
0CE9E 29 0F                         AND #%00001111
0CEA0 F0 11                         BEQ +drawRandomTile
0CEA2                           
0CEA2 8A                            TXA
0CEA3 29 F0                         AND #%11110000
0CEA5 F0 0C                         BEQ +drawRandomTile
0CEA7                           
0CEA7 BD EF 03                      LDA tile_type-17,x
0CEAA 29 01                         AND #%00000001
0CEAC F0 05                         BEQ +drawRandomTile  
0CEAE                           
0CEAE                               ;; Draw a null tile
0CEAE A9 00                         LDA #$00
0CEB0 4C BB CE                      JMP +addToPPUBuffer
0CEB3                               
0CEB3                           +drawRandomTile:
0CEB3                               ;; Draw a random tile
0CEB3 20 53 C5                      JSR sub_GetRandomNumber
0CEB6 29 07                         AND #%00000111
0CEB8 18                            CLC
0CEB9 69 68                         ADC #$68
0CEBB                               
0CEBB                               ;; Add tile to ppu buffer
0CEBB                           +addToPPUBuffer:
0CEBB 99 00 03                      STA ppu_buffer,y
0CEBE C8                            INY
0CEBF                           
0CEBF                               ;; TILE 2: If metatile above is solid, draw null,
0CEBF                               ;; else draw random noise.
0CEBF E6 01                         INC temp+1
0CEC1 A5 00                         LDA temp
0CEC3 99 00 03                      STA ppu_buffer,y
0CEC6 C8                            INY
0CEC7 A5 01                         LDA temp+1
0CEC9 99 00 03                      STA ppu_buffer,y
0CECC C8                            INY
0CECD                               
0CECD 8A                            TXA
0CECE 29 F0                         AND #%11110000
0CED0 F0 0C                         BEQ +drawRandomTile
0CED2                               
0CED2 BD F0 03                      LDA tile_type-16,x
0CED5 29 01                         AND #%00000001
0CED7 F0 05                         BEQ +drawRandomTile
0CED9                               
0CED9 A9 00                         LDA #%00
0CEDB 4C E6 CE                      JMP +addToPPUBuffer
0CEDE                           
0CEDE                           +drawRandomTile:
0CEDE 20 53 C5                      JSR sub_GetRandomNumber
0CEE1 29 07                         AND #%00000111
0CEE3 18                            CLC
0CEE4 69 68                         ADC #$68
0CEE6                           
0CEE6                           +addToPPUBuffer:
0CEE6 99 00 03                      STA ppu_buffer,y
0CEE9 C8                            INY
0CEEA                               
0CEEA                               ;; TILE 3 - If metatile left is solid, draw null,
0CEEA                               ;; else draw random noise.
0CEEA A5 01                         LDA temp+1
0CEEC 18                            CLC
0CEED 69 1F                         ADC #$1F
0CEEF 85 01                         STA temp+1
0CEF1 A5 00                         LDA temp
0CEF3 69 00                         ADC #$00
0CEF5 85 00                         STA temp
0CEF7 99 00 03                      STA ppu_buffer,y
0CEFA C8                            INY
0CEFB A5 01                         LDA temp+1
0CEFD 99 00 03                      STA ppu_buffer,y
0CF00 C8                            INY
0CF01                               
0CF01 8A                            TXA
0CF02 29 0F                         AND #%00001111
0CF04 F0 0C                         BEQ +drawRandomTile
0CF06                               
0CF06 BD FF 03                      LDA tile_type-1,x
0CF09 29 01                         AND #%00000001
0CF0B F0 05                         BEQ +drawRandomTile
0CF0D                               
0CF0D A9 00                         LDA #%00
0CF0F 4C 1A CF                      JMP +addToPPUBuffer
0CF12                           
0CF12                           +drawRandomTile:
0CF12 20 53 C5                      JSR sub_GetRandomNumber
0CF15 29 07                         AND #%00000111
0CF17 18                            CLC
0CF18 69 68                         ADC #$68
0CF1A                               
0CF1A                           +addToPPUBuffer:
0CF1A 99 00 03                      STA ppu_buffer,y
0CF1D C8                            INY
0CF1E                               
0CF1E                               ;; TILE 4 - Always random noise
0CF1E E6 01                         INC temp+1
0CF20 A5 00                         LDA temp
0CF22 99 00 03                      STA ppu_buffer,y
0CF25 C8                            INY
0CF26 A5 01                         LDA temp+1
0CF28 99 00 03                      STA ppu_buffer,y
0CF2B C8                            INY
0CF2C 20 53 C5                      JSR sub_GetRandomNumber
0CF2F 29 07                         AND #%00000111
0CF31 18                            CLC
0CF32 69 68                         ADC #$68
0CF34 99 00 03                      STA ppu_buffer,y
0CF37 C8                            INY
0CF38                           
0CF38                               ;; TILE 5 - If tile on the right is solid, skip,
0CF38                               ;; else draw random noise tile
0CF38 E6 01                         INC temp+1
0CF3A                               
0CF3A 8A                            TXA
0CF3B 29 0F                         AND #%00001111
0CF3D C9 0D                         CMP #$0D
0CF3F F0 1F                         BEQ +skipTile
0CF41                               
0CF41 BD 01 04                      LDA tile_type+1,x
0CF44 29 01                         AND #%00000001
0CF46 D0 18                         BNE +skipTile
0CF48 A5 00                             LDA temp
0CF4A 99 00 03                          STA ppu_buffer,y
0CF4D C8                                INY
0CF4E A5 01                             LDA temp+1
0CF50 99 00 03                          STA ppu_buffer,y
0CF53 C8                                INY
0CF54 20 53 C5                          JSR sub_GetRandomNumber
0CF57 29 07                             AND #%00000111
0CF59 18                                CLC
0CF5A 69 68                             ADC #$68
0CF5C 99 00 03                          STA ppu_buffer,y
0CF5F C8                                INY    
0CF60                               +skipTile:
0CF60                           
0CF60                               ;; TILE 6 - If tile on bottom is solid, skip,
0CF60                               ;; else draw random noise
0CF60 A5 01                         LDA temp+1
0CF62 18                            CLC
0CF63 69 1F                         ADC #$1F
0CF65 85 01                         STA temp+1
0CF67 A5 00                         LDA temp
0CF69 69 00                         ADC #$00
0CF6B 85 00                         STA temp
0CF6D                           
0CF6D 8A                            TXA
0CF6E 29 F0                         AND #%11110000
0CF70 C9 90                         CMP #$90
0CF72 F0 1F                         BEQ +skipTile
0CF74                           
0CF74 BD 10 04                      LDA tile_type+16,x
0CF77 29 01                         AND #%00000001
0CF79 D0 18                         BNE +skipTile
0CF7B A5 00                             LDA temp
0CF7D 99 00 03                          STA ppu_buffer,y
0CF80 C8                                INY
0CF81 A5 01                             LDA temp+1
0CF83 99 00 03                          STA ppu_buffer,y
0CF86 C8                                INY
0CF87 20 53 C5                          JSR sub_GetRandomNumber
0CF8A 29 07                             AND #%00000111
0CF8C 18                                CLC
0CF8D 69 68                             ADC #$68
0CF8F 99 00 03                          STA ppu_buffer,y
0CF92 C8                                INY    
0CF93                               +skipTile:
0CF93                               
0CF93                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CF93                               ;; else draw random noise
0CF93 E6 01                         INC temp+1
0CF95                           
0CF95 8A                            TXA
0CF96 29 F0                         AND #%11110000
0CF98 C9 90                         CMP #$90
0CF9A F0 26                         BEQ +skipTile
0CF9C                               
0CF9C 8A                            TXA
0CF9D 29 0F                         AND #%00001111
0CF9F C9 0D                         CMP #$0D
0CFA1 F0 1F                         BEQ +skipTile
0CFA3                               
0CFA3 BD 11 04                      LDA tile_type+17,x
0CFA6 29 01                         AND #%00000001
0CFA8 D0 18                         BNE +skipTile
0CFAA A5 00                             LDA temp
0CFAC 99 00 03                          STA ppu_buffer,y
0CFAF C8                                INY
0CFB0 A5 01                             LDA temp+1
0CFB2 99 00 03                          STA ppu_buffer,y
0CFB5 C8                                INY
0CFB6 20 53 C5                          JSR sub_GetRandomNumber
0CFB9 29 07                             AND #%00000111
0CFBB 18                                CLC
0CFBC 69 68                             ADC #$68
0CFBE 99 00 03                          STA ppu_buffer,y
0CFC1 C8                                INY    
0CFC2                               +skipTile:   
0CFC2                           
0CFC2                           
0CFC2                               ;; Update attribute table accordingly through ppu buffer
0CFC2 20 01 D0                      JSR sub_SetTileAttributeAddress
0CFC5                               
0CFC5 8A                            TXA
0CFC6 29 10                         AND #%00010000
0CFC8 F0 05                         BEQ +
0CFCA A9 F0                             LDA #%11110000
0CFCC 4C D1 CF                          JMP ++
0CFCF                               +
0CFCF A9 0F                         LDA #%00001111
0CFD1                               ++
0CFD1 85 02                         STA temp+2
0CFD3                               
0CFD3 8A                            TXA
0CFD4 48                            PHA
0CFD5 29 01                         AND #%00000001
0CFD7 F0 07                         BEQ +
0CFD9 A5 02                             LDA temp+2
0CFDB 09 CC                             ORA #%11001100
0CFDD 4C E4 CF                          JMP ++
0CFE0                               +
0CFE0 A5 02                         LDA temp+2
0CFE2 09 33                         ORA #%00110011
0CFE4                               ++
0CFE4 85 02                         STA temp+2
0CFE6                               
0CFE6 A5 00                         LDA temp
0CFE8 38                            SEC
0CFE9 E9 C0                         SBC #$C0
0CFEB AA                            TAX
0CFEC BD A0 04                      LDA tile_attributes,x
0CFEF 25 02                         AND temp+2
0CFF1 9D A0 04                      STA tile_attributes,x
0CFF4 99 00 03                      STA ppu_buffer,y
0CFF7 C8                            INY
0CFF8 68                            PLA
0CFF9 AA                            TAX
0CFFA                           
0CFFA                               ;; Tell PPU to update tiles and attributes next frame
0CFFA 84 3A                         STY ppu_buffer_pointer
0CFFC A9 01                         LDA #$01
0CFFE 85 39                         STA ppu_buffer_update
0D000                            
0D000                               ;; We're done - return
0D000 60                            RTS
0D001                           
0D001                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D001                           
0D001                           ;; Set the correct tile attribute address based on game tile (x) 
0D001                           ;; into the correct ppu buffer slot (y)
0D001                           
0D001                           sub_SetTileAttributeAddress:
0D001 A9 23                         LDA #$23
0D003 99 00 03                      STA ppu_buffer,y
0D006 C8                            INY
0D007                               
0D007 8A                            TXA
0D008 29 F0                         AND #%11110000
0D00A 4A                            LSR
0D00B 4A                            LSR
0D00C 4A                            LSR
0D00D 4A                            LSR
0D00E 18                            CLC
0D00F 69 01                         ADC #$01
0D011 4A                            LSR
0D012 0A                            ASL
0D013 0A                            ASL
0D014 0A                            ASL
0D015 18                            CLC
0D016 69 C8                         ADC #$C8
0D018 85 00                         STA temp
0D01A 8A                            TXA
0D01B 29 0F                         AND #%00001111
0D01D 18                            CLC
0D01E 69 01                         ADC #$01
0D020 4A                            LSR
0D021 18                            CLC
0D022 65 00                         ADC temp
0D024 85 00                         STA temp
0D026 99 00 03                      STA ppu_buffer,y
0D029 C8                            INY
0D02A                                  
0D02A 60                            RTS
0D02B                           
0D02B                           .include "game/subroutine/WaitXFrames.asm"
0D02B                           
0D02B                           sub_WaitXFrames:
0D02B 20 75 C5                      JSR sub_WaitForNMI
0D02E CA                            DEX
0D02F D0 FA                         BNE sub_WaitXFrames
0D031                           
0D031 60                            RTS
0D032                           
0D032                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D032                           
0D032                           ;; Write the byte in temp+2 and the ppu address (temp)
0D032                           ;; to a buffer, so NMI can update it before the next frame
0D032                           
0D032                           sub_WriteByteToPPUBuffer:
0D032                           
0D032                               ;; Prevent updating until full 3-byte buffer is filled,
0D032                               ;; so that graphics won't glitch out if NMI happens during
0D032                               ;; updating the buffer
0D032 A9 00                         LDA #$00
0D034 85 39                         STA ppu_buffer_update
0D036                           
0D036                               ;; Check if buffer full; if so, wait a frame and force update
0D036 A4 3A                         LDY ppu_buffer_pointer
0D038 C0 60                         CPY #$60
0D03A D0 05                         BNE +
0D03C E6 39                             INC ppu_buffer_update
0D03E 20 7E C5                          JSR sub_WaitForVBlank
0D041                               +
0D041                           
0D041                               ;; Add ppu_addr high byte to buffer
0D041 A5 00                         LDA temp
0D043 99 00 03                      STA ppu_buffer,y
0D046                           
0D046                               ;; Add ppu_addr low byte to buffer
0D046 C8                            INY
0D047 A5 01                         LDA temp+1
0D049 99 00 03                      STA ppu_buffer,y
0D04C                           
0D04C                               ;; Add ppu_data to buffer
0D04C C8                            INY
0D04D A5 02                         LDA temp+2
0D04F 99 00 03                      STA ppu_buffer,y
0D052                           
0D052                               ;; Update buffer pointer
0D052 C8                            INY
0D053 84 3A                         STY ppu_buffer_pointer
0D055                           
0D055                               ;; Tell NMI to update next round
0D055 E6 39                         INC ppu_buffer_update
0D057                           
0D057                               ;; Return
0D057 60                            RTS
0D058                           
0D058                           
0D058                           
0D058                           
0D058                           ;; LUTs
0D058                           .include "game/include/tables.asm"
0D058                           
0D058                           ;; Initial screen palette
0D058                           tbl_IntroScreenPalette:
0D058 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D05C 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D060 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D064 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D068                           
0D068 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D06C 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D070 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D074 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D078                           
0D078                           
0D078                           ;; Intro: mapping logo index to chr tile
0D078                           tbl_IntroScreenLogoChr:
0D078 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D080                           
0D080                           
0D080                           ;; Intro screen data
0D080                           tbl_IntroScreenData:
0D080                           
0D080                               ;; Set PPU address $20AC and draw
0D080 60 AC                         .db #$60, #$AC
0D082 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D08A                           
0D08A                               ;; Set PPU address $20CF and draw
0D08A 60 CF                         .db #$60, #$CF
0D08C 01 02                         .db #_0, #_1
0D08E                               
0D08E                               ;; Set PPU address $2122 and draw
0D08E 61 22                         .db #$61, #$22
0D090 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D097 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D09D 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D0A5 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D0AA                               
0D0AA                               ;; Set PPU address $2147 and draw
0D0AA 61 47                         .db #$61, #$47
0D0AC 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D0B3 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D0B7 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D0BD 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D0C3                               
0D0C3                               ;; Set PPU address $218B and draw
0D0C3 61 8B                         .db #$61, #$8B
0D0C5 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D0CB 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D0D0                               
0D0D0                               ;; Set PPU address $21E6 and draw
0D0D0 61 E6                         .db #$61, #$E6
0D0D2 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D0DA 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D0DE 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D0E5                               
0D0E5                               ;; Set PPU address $222D and draw
0D0E5 62 2D                         .db #$62, #$2D
0D0E7 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D0ED                               
0D0ED                               ;; Set PPU address $2281
0D0ED 62 81                         .db #$62, #$81
0D0EF                               
0D0EF                               ;; Draw the Crillion logo
0D0EF E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D0F3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0F7 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D0FB E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D0FF                               
0D0FF D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D103 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D107 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D10B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D10F                               
0D10F D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D113 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D117 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D11B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D11F                           
0D11F D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D123 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D127 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D12B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D12F                               
0D12F D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D133 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D137 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D13B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D13F                           
0D13F F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D143 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D147 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D14B F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D14E                           
0D14E                               ;; End of intro
0D14E 3F                            .db #$3F
0D14F                           
0D14F                           
0D14F                           ;; Animation frames table
0D14F                           .include "game/include/table/animation_frames.asm"
0D14F                           
0D14F                           ;; CHR tile-id's per slide of explosion
0D14F                           explosion_slide0:
0D14F 00 00 00                      .db #$00, #$00, #$00
0D152 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D155 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D158                           
0D158                           explosion_slide1:
0D158 00 00 00                      .db #$00, #$00, #$00
0D15B 29 2A 2B                      .db #$29, #$2A, #$2B
0D15E 39 3A 3B                      .db #$39, #$3A, #$3B
0D161                           
0D161                           explosion_slide2:
0D161 16 00 00                      .db #$16, #$00, #$00
0D164 26 27 28                      .db #$26, #$27, #$28
0D167 36 37 38                      .db #$36, #$37, #$38
0D16A                           
0D16A                           explosion_slide3:
0D16A 00 14 15                      .db #$00, #$14, #$15
0D16D 23 24 25                      .db #$23, #$24, #$25
0D170 33 34 35                      .db #$33, #$34, #$35
0D173                           
0D173                           explosion_slide4:
0D173 10 11 12                      .db #$10, #$11, #$12
0D176 20 21 22                      .db #$20, #$21, #$22
0D179 30 31 32                      .db #$30, #$31, #$32
0D17C                           
0D17C                           ;; High and low bytes of animation slides
0D17C                           explosion_anim_hi:
0D17C D1                            .db >#explosion_slide0
0D17D D1                            .db >#explosion_slide1
0D17E D1                            .db >#explosion_slide2
0D17F D1                            .db >#explosion_slide3
0D180 D1                            .db >#explosion_slide4
0D181 D1                            .db >#explosion_slide4
0D182 D1                            .db >#explosion_slide3
0D183 D1                            .db >#explosion_slide2
0D184 D1                            .db >#explosion_slide1
0D185 D1                            .db >#explosion_slide0
0D186                           
0D186                           explosion_anim_lo:
0D186 4F                            .db <#explosion_slide0
0D187 58                            .db <#explosion_slide1
0D188 61                            .db <#explosion_slide2
0D189 6A                            .db <#explosion_slide3
0D18A 73                            .db <#explosion_slide4
0D18B 73                            .db <#explosion_slide4
0D18C 6A                            .db <#explosion_slide3
0D18D 61                            .db <#explosion_slide2
0D18E 58                            .db <#explosion_slide1
0D18F 4F                            .db <#explosion_slide0
0D190                           
0D190                           
0D190                           
0D190                           ;; Ball palette color table (CBRYGM)
0D190                           tbl_BallColorDark:
0D190 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D196                            
0D196                           tbl_BallColorLight:
0D196 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D19C                           
0D19C                               
0D19C                           ;; Screen mode drawing routine addresses
0D19C                           tbl_LoadScreenHi:
0D19C CD CA CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D19F                           
0D19F                           tbl_LoadScreenLo:
0D19F EC 30 7B                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D1A2                           
0D1A2                           
0D1A2                           ;; Level data
0D1A2                           .include "game/include/table/level_data.asm"
0D1A2                           
0D1A2                           ;; Level layout tables
0D1A2                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D1A2                           
0D1A2                           ifdef TESTING
0D1A2                           lvl_test:
0D1A2 64 01                         .db #$64, #%00000001
0D1A4 FF                            .db #LEVEL_END
0D1A5                           endif
0D1A5                           
0D1A5                           lvl_layout_01:
0D1A5 61 21                         .db #$61, #%00100001
0D1A7 52 61                         .db #$52, #%01100001
0D1A9 43 65                         .db #$43, #%01100101
0D1AB 83 05                         .db #$83, #%00000101
0D1AD 93 15                         .db #$93, #%00010101
0D1AF 34 7A                         .db #$34, #%01111010
0D1B1 74 7A                         .db #$74, #%01111010
0D1B3 35 7A                         .db #$35, #%01111010
0D1B5 75 7A                         .db #$75, #%01111010
0D1B7 46 65                         .db #$46, #%01100101
0D1B9 86 25                         .db #$86, #%00100101
0D1BB 57 61                         .db #$57, #%01100001
0D1BD 68 21                         .db #$68, #%00100001
0D1BF FF                            .db #LEVEL_END
0D1C0                           
0D1C0                           lvl_layout_02:
0D1C0 C0 0A                         .db #$C0, #%00001010
0D1C2 11 15                         .db #$11, #%00010101
0D1C4 21 62                         .db #$21, #%01100010
0D1C6 61 62                         .db #$61, #%01100010
0D1C8 A1 42                         .db #$A1, #%01000010
0D1CA 12 67                         .db #$12, #%01100111
0D1CC 52 67                         .db #$52, #%01100111
0D1CE 92 67                         .db #$92, #%01100111
0D1D0 C3 0D                         .db #$C3, #%00001101
0D1D2 14 11                         .db #$14, #%00010001
0D1D4 24 65                         .db #$24, #%01100101
0D1D6 64 65                         .db #$64, #%01100101
0D1D8 A4 45                         .db #$A4, #%01000101
0D1DA 15 67                         .db #$15, #%01100111
0D1DC 55 67                         .db #$55, #%01100111
0D1DE 95 67                         .db #$95, #%01100111
0D1E0 17 12                         .db #$17, #%00010010
0D1E2 27 61                         .db #$27, #%01100001
0D1E4 67 61                         .db #$67, #%01100001
0D1E6 A7 41                         .db #$A7, #%01000001
0D1E8 38 7A                         .db #$38, #%01111010
0D1EA 98 5A                         .db #$98, #%01011010
0D1EC 18 27                         .db #$18, #%00100111
0D1EE 48 27                         .db #$48, #%00100111
0D1F0 78 27                         .db #$78, #%00100111
0D1F2 C8 07                         .db #$C8, #%00000111
0D1F4 FF                            .db #LEVEL_END
0D1F5                           
0D1F5                           lvl_layout_03:
0D1F5 00 7A                         .db #$00, #%01111010
0D1F7 40 7A                         .db #$40, #%01111010
0D1F9 80 7A                         .db #$80, #%01111010
0D1FB C0 1A                         .db #$C0, #%00011010
0D1FD 10 A1                         .db #$10, #%10100001
0D1FF 13 E1                         .db #$13, #%11100001
0D201 17 C1                         .db #$17, #%11000001
0D203 30 C1                         .db #$30, #%11000001
0D205 34 C1                         .db #$34, #%11000001
0D207 38 A1                         .db #$38, #%10100001
0D209 50 E1                         .db #$50, #%11100001
0D20B 55 81                         .db #$55, #%10000001
0D20D 57 C1                         .db #$57, #%11000001
0D20F 70 C1                         .db #$70, #%11000001
0D211 73 A1                         .db #$73, #%10100001
0D213 76 E1                         .db #$76, #%11100001
0D215 90 E1                         .db #$90, #%11100001
0D217 95 81                         .db #$95, #%10000001
0D219 97 C1                         .db #$97, #%11000001
0D21B B0 C1                         .db #$B0, #%11000001
0D21D B4 C1                         .db #$B4, #%11000001
0D21F B8 A1                         .db #$B8, #%10100001
0D221 D0 A1                         .db #$D0, #%10100001
0D223 D3 E1                         .db #$D3, #%11100001
0D225 D7 C1                         .db #$D7, #%11000001
0D227 FF                            .db #LEVEL_END
0D228                           
0D228                           lvl_layout_04:
0D228 00 4C                         .db #$00, #%01001100
0D22A 40 6C                         .db #$40, #%01101100
0D22C 80 4C                         .db #$80, #%01001100
0D22E 81 AC                         .db #$81, #%10101100
0D230 C1 2C                         .db #$C1, #%00101100
0D232 02 6C                         .db #$02, #%01101100
0D234 42 CC                         .db #$42, #%11001100
0D236 62 EC                         .db #$62, #%11101100
0D238 A2 CC                         .db #$A2, #%11001100
0D23A C3 CC                         .db #$C3, #%11001100
0D23C 04 4C                         .db #$04, #%01001100
0D23E 84 2C                         .db #$84, #%00101100
0D240 25 AC                         .db #$25, #%10101100
0D242 85 AC                         .db #$85, #%10101100
0D244 06 AC                         .db #$06, #%10101100
0D246 36 CC                         .db #$36, #%11001100
0D248 56 CC                         .db #$56, #%11001100
0D24A 66 EC                         .db #$66, #%11101100
0D24C 96 6C                         .db #$96, #%01101100
0D24E C7 AC                         .db #$C7, #%10101100
0D250 08 2C                         .db #$08, #%00101100
0D252 78 6C                         .db #$78, #%01101100
0D254 D8 0C                         .db #$D8, #%00001100
0D256 30 A1                         .db #$30, #%10100001
0D258 B0 21                         .db #$B0, #%00100001
0D25A 01 41                         .db #$01, #%01000001
0D25C 41 61                         .db #$41, #%01100001
0D25E 91 A1                         .db #$91, #%10100001
0D260 A1 21                         .db #$A1, #%00100001
0D262 52 C1                         .db #$52, #%11000001
0D264 72 E1                         .db #$72, #%11100001
0D266 B2 C1                         .db #$B2, #%11000001
0D268 C2 21                         .db #$C2, #%00100001
0D26A 03 41                         .db #$03, #%01000001
0D26C 33 C1                         .db #$33, #%11000001
0D26E 83 21                         .db #$83, #%00100001
0D270 D3 E1                         .db #$D3, #%11100001
0D272 05 21                         .db #$05, #%00100001
0D274 45 E1                         .db #$45, #%11100001
0D276 A5 21                         .db #$A5, #%00100001
0D278 16 A1                         .db #$16, #%10100001
0D27A 76 A1                         .db #$76, #%10100001
0D27C 27 A1                         .db #$27, #%10100001
0D27E 57 21                         .db #$57, #%00100001
0D280 87 41                         .db #$87, #%01000001
0D282 B7 A1                         .db #$B7, #%10100001
0D284 19 21                         .db #$19, #%00100001
0D286 39 41                         .db #$39, #%01000001
0D288 89 41                         .db #$89, #%01000001
0D28A C9 21                         .db #$C9, #%00100001
0D28C D0 1A                         .db #$D0, #%00011010
0D28E 55 1A                         .db #$55, #%00011010
0D290 95 1A                         .db #$95, #%00011010
0D292 D7 1A                         .db #$D7, #%00011010
0D294 09 1A                         .db #$09, #%00011010
0D296 79 1A                         .db #$79, #%00011010
0D298 FF                            .db #LEVEL_END
0D299                           
0D299                           lvl_layout_05:
0D299 40 0A                         .db #$40, #%00001010
0D29B 70 1A                         .db #$70, #%00011010
0D29D B0 42                         .db #$B0, #%01000010
0D29F 41 A7                         .db #$41, #%10100111
0D2A1 B1 22                         .db #$B1, #%00100010
0D2A3 D1 15                         .db #$D1, #%00010101
0D2A5 22 0A                         .db #$22, #%00001010
0D2A7 52 05                         .db #$52, #%00000101
0D2A9 B2 42                         .db #$B2, #%01000010
0D2AB 03 27                         .db #$03, #%00100111
0D2AD 33 67                         .db #$33, #%01100111
0D2AF 73 67                         .db #$73, #%01100111
0D2B1 B3 47                         .db #$B3, #%01000111
0D2B3 05 E5                         .db #$05, #%11100101
0D2B5 25 A5                         .db #$25, #%10100101
0D2B7 35 25                         .db #$35, #%00100101
0D2B9 65 45                         .db #$65, #%01000101
0D2BB A5 45                         .db #$A5, #%01000101
0D2BD 46 E5                         .db #$46, #%11100101
0D2BF 66 E5                         .db #$66, #%11100101
0D2C1 86 E5                         .db #$86, #%11100101
0D2C3 A6 E2                         .db #$A6, #%11100010
0D2C5 C6 E5                         .db #$C6, #%11100101
0D2C7 27 25                         .db #$27, #%00100101
0D2C9 77 05                         .db #$77, #%00000101
0D2CB B7 02                         .db #$B7, #%00000010
0D2CD 09 05                         .db #$09, #%00000101
0D2CF 79 05                         .db #$79, #%00000101
0D2D1 B9 02                         .db #$B9, #%00000010
0D2D3 FF                            .db #LEVEL_END
0D2D4                           
0D2D4                           lvl_layout_06:
0D2D4 00 03                         .db #$00, #%00000011
0D2D6 20 03                         .db #$20, #%00000011
0D2D8 40 03                         .db #$40, #%00000011
0D2DA A0 03                         .db #$A0, #%00000011
0D2DC C0 03                         .db #$C0, #%00000011
0D2DE 11 03                         .db #$11, #%00000011
0D2E0 31 03                         .db #$31, #%00000011
0D2E2 51 03                         .db #$51, #%00000011
0D2E4 91 03                         .db #$91, #%00000011
0D2E6 B1 03                         .db #$B1, #%00000011
0D2E8 D1 03                         .db #$D1, #%00000011
0D2EA 02 03                         .db #$02, #%00000011
0D2EC 22 03                         .db #$22, #%00000011
0D2EE 42 03                         .db #$42, #%00000011
0D2F0 A2 03                         .db #$A2, #%00000011
0D2F2 C2 03                         .db #$C2, #%00000011
0D2F4 13 03                         .db #$13, #%00000011
0D2F6 33 03                         .db #$33, #%00000011
0D2F8 53 03                         .db #$53, #%00000011
0D2FA 93 03                         .db #$93, #%00000011
0D2FC B3 03                         .db #$B3, #%00000011
0D2FE D3 03                         .db #$D3, #%00000011
0D300 04 03                         .db #$04, #%00000011
0D302 24 03                         .db #$24, #%00000011
0D304 44 03                         .db #$44, #%00000011
0D306 A4 03                         .db #$A4, #%00000011
0D308 C4 03                         .db #$C4, #%00000011
0D30A 15 03                         .db #$15, #%00000011
0D30C 35 03                         .db #$35, #%00000011
0D30E 55 03                         .db #$55, #%00000011
0D310 95 03                         .db #$95, #%00000011
0D312 B5 03                         .db #$B5, #%00000011
0D314 D5 03                         .db #$D5, #%00000011
0D316 06 03                         .db #$06, #%00000011
0D318 26 03                         .db #$26, #%00000011
0D31A 46 03                         .db #$46, #%00000011
0D31C A6 03                         .db #$A6, #%00000011
0D31E C6 03                         .db #$C6, #%00000011
0D320 17 03                         .db #$17, #%00000011
0D322 37 03                         .db #$37, #%00000011
0D324 57 03                         .db #$57, #%00000011
0D326 97 03                         .db #$97, #%00000011
0D328 B7 03                         .db #$B7, #%00000011
0D32A D7 03                         .db #$D7, #%00000011
0D32C 08 03                         .db #$08, #%00000011
0D32E 28 03                         .db #$28, #%00000011
0D330 48 03                         .db #$48, #%00000011
0D332 A8 03                         .db #$A8, #%00000011
0D334 C8 03                         .db #$C8, #%00000011
0D336 19 03                         .db #$19, #%00000011
0D338 39 03                         .db #$39, #%00000011
0D33A 59 03                         .db #$59, #%00000011
0D33C 99 03                         .db #$99, #%00000011
0D33E B9 03                         .db #$B9, #%00000011
0D340 D9 03                         .db #$D9, #%00000011
0D342 60 4B                         .db #$60, #%01001011
0D344 71 CB                         .db #$71, #%11001011
0D346 62 4B                         .db #$62, #%01001011
0D348 64 4B                         .db #$64, #%01001011
0D34A 75 CB                         .db #$75, #%11001011
0D34C 66 4B                         .db #$66, #%01001011
0D34E 68 4B                         .db #$68, #%01001011
0D350 79 0B                         .db #$79, #%00001011
0D352 70 03                         .db #$70, #%00000011
0D354 72 03                         .db #$72, #%00000011
0D356 74 03                         .db #$74, #%00000011
0D358 76 03                         .db #$76, #%00000011
0D35A 78 03                         .db #$78, #%00000011
0D35C FF                            .db #LEVEL_END
0D35D                           
0D35D                           lvl_layout_07:
0D35D 00 11                         .db #$00, #%00010001
0D35F 01 FA                         .db #$01, #%11111010
0D361 12 BA                         .db #$12, #%10111010
0D363 23 DA                         .db #$23, #%11011010
0D365 34 FA                         .db #$34, #%11111010
0D367 05 DA                         .db #$05, #%11011010
0D369 15 FA                         .db #$15, #%11111010
0D36B 45 BA                         .db #$45, #%10111010
0D36D 56 DA                         .db #$56, #%11011010
0D36F 27 BA                         .db #$27, #%10111010
0D371 67 DA                         .db #$67, #%11011010
0D373 38 3A                         .db #$38, #%00111010
0D375 78 BA                         .db #$78, #%10111010
0D377 09 3A                         .db #$09, #%00111010
0D379 39 3A                         .db #$39, #%00111010
0D37B 89 1A                         .db #$89, #%00011010
0D37D B0 01                         .db #$B0, #%00000001
0D37F D0 01                         .db #$D0, #%00000001
0D381 A1 01                         .db #$A1, #%00000001
0D383 C1 11                         .db #$C1, #%00010001
0D385 B2 01                         .db #$B2, #%00000001
0D387 D2 01                         .db #$D2, #%00000001
0D389 A3 01                         .db #$A3, #%00000001
0D38B C3 01                         .db #$C3, #%00000001
0D38D B4 01                         .db #$B4, #%00000001
0D38F D4 01                         .db #$D4, #%00000001
0D391 A5 01                         .db #$A5, #%00000001
0D393 C5 01                         .db #$C5, #%00000001
0D395 B6 01                         .db #$B6, #%00000001
0D397 D6 01                         .db #$D6, #%00000001
0D399 A7 01                         .db #$A7, #%00000001
0D39B C7 01                         .db #$C7, #%00000001
0D39D FF                            .db #LEVEL_END
0D39E                           
0D39E                           lvl_layout_08:
0D39E 40 B5                         .db #$40, #%10110101
0D3A0 31 0D                         .db #$31, #%00001101
0D3A2 61 10                         .db #$61, #%00010000
0D3A4 42 C7                         .db #$42, #%11000111
0D3A6 52 67                         .db #$52, #%01100111
0D3A8 63 C7                         .db #$63, #%11000111
0D3AA 83 E7                         .db #$83, #%11100111
0D3AC 05 07                         .db #$05, #%00000111
0D3AE 15 3A                         .db #$15, #%00111010
0D3B0 07 63                         .db #$07, #%01100011
0D3B2 27 13                         .db #$27, #%00010011
0D3B4 38 A5                         .db #$38, #%10100101
0D3B6 09 14                         .db #$09, #%00010100
0D3B8 19 05                         .db #$19, #%00000101
0D3BA D0 E0                         .db #$D0, #%11100000
0D3BC C2 A0                         .db #$C2, #%10100000
0D3BE B3 E0                         .db #$B3, #%11100000
0D3C0 D5 E0                         .db #$D5, #%11100000
0D3C2 C6 E0                         .db #$C6, #%11100000
0D3C4 B0 C4                         .db #$B0, #%11000100
0D3C6 C0 A4                         .db #$C0, #%10100100
0D3C8 D1 A4                         .db #$D1, #%10100100
0D3CA C4 24                         .db #$C4, #%00100100
0D3CC C5 04                         .db #$C5, #%00000100
0D3CE B7 44                         .db #$B7, #%01000100
0D3D0 B8 A4                         .db #$B8, #%10100100
0D3D2 D9 05                         .db #$D9, #%00000101
0D3D4 FF                            .db #LEVEL_END
0D3D5                           
0D3D5                           lvl_layout_09:
0D3D5 81 04                         .db #$81, #%00000100
0D3D7 D1 04                         .db #$D1, #%00000100
0D3D9 32 C4                         .db #$32, #%11000100
0D3DB A2 C4                         .db #$A2, #%11000100
0D3DD C2 24                         .db #$C2, #%00100100
0D3DF 13 24                         .db #$13, #%00100100
0D3E1 53 04                         .db #$53, #%00000100
0D3E3 C3 27                         .db #$C3, #%00100111
0D3E5 15 6C                         .db #$15, #%01101100
0D3E7 55 6C                         .db #$55, #%01101100
0D3E9 95 6C                         .db #$95, #%01101100
0D3EB D5 0C                         .db #$D5, #%00001100
0D3ED 27 C7                         .db #$27, #%11000111
0D3EF 47 C7                         .db #$47, #%11000111
0D3F1 67 C7                         .db #$67, #%11000111
0D3F3 87 C7                         .db #$87, #%11000111
0D3F5 A7 C7                         .db #$A7, #%11000111
0D3F7 C7 C7                         .db #$C7, #%11000111
0D3F9 08 13                         .db #$08, #%00010011
0D3FB 28 15                         .db #$28, #%00010101
0D3FD 48 12                         .db #$48, #%00010010
0D3FF 68 15                         .db #$68, #%00010101
0D401 88 11                         .db #$88, #%00010001
0D403 A8 10                         .db #$A8, #%00010000
0D405 C8 14                         .db #$C8, #%00010100
0D407 09 07                         .db #$09, #%00000111
0D409 19 03                         .db #$19, #%00000011
0D40B 39 05                         .db #$39, #%00000101
0D40D 59 02                         .db #$59, #%00000010
0D40F 79 05                         .db #$79, #%00000101
0D411 99 01                         .db #$99, #%00000001
0D413 B9 00                         .db #$B9, #%00000000
0D415 D9 04                         .db #$D9, #%00000100
0D417 FF                            .db #LEVEL_END
0D418                           
0D418                           lvl_layout_10:
0D418 00 02                         .db #$00, #%00000010
0D41A 10 C9                         .db #$10, #%11001001
0D41C 50 C9                         .db #$50, #%11001001
0D41E 90 C9                         .db #$90, #%11001001
0D420 D0 C9                         .db #$D0, #%11001001
0D422 31 C9                         .db #$31, #%11001001
0D424 71 C9                         .db #$71, #%11001001
0D426 B1 C9                         .db #$B1, #%11001001
0D428 13 C9                         .db #$13, #%11001001
0D42A 53 C9                         .db #$53, #%11001001
0D42C 93 C9                         .db #$93, #%11001001
0D42E D3 C9                         .db #$D3, #%11001001
0D430 34 C9                         .db #$34, #%11001001
0D432 74 C9                         .db #$74, #%11001001
0D434 B4 C9                         .db #$B4, #%11001001
0D436 16 C9                         .db #$16, #%11001001
0D438 56 C9                         .db #$56, #%11001001
0D43A 96 C9                         .db #$96, #%11001001
0D43C D6 C9                         .db #$D6, #%11001001
0D43E 37 C9                         .db #$37, #%11001001
0D440 77 C9                         .db #$77, #%11001001
0D442 B7 C9                         .db #$B7, #%11001001
0D444 D8 12                         .db #$D8, #%00010010
0D446 FF                            .db #LEVEL_END
0D447                           
0D447                           lvl_layout_11:
0D447 00 65                         .db #$00, #%01100101
0D449 40 45                         .db #$40, #%01000101
0D44B 50 A7                         .db #$50, #%10100111
0D44D 80 05                         .db #$80, #%00000101
0D44F 90 A7                         .db #$90, #%10100111
0D451 A0 65                         .db #$A0, #%01100101
0D453 01 43                         .db #$01, #%01000011
0D455 31 23                         .db #$31, #%00100011
0D457 61 A7                         .db #$61, #%10100111
0D459 81 A7                         .db #$81, #%10100111
0D45B A1 63                         .db #$A1, #%01100011
0D45D 02 44                         .db #$02, #%01000100
0D45F 32 44                         .db #$32, #%01000100
0D461 92 04                         .db #$92, #%00000100
0D463 A2 64                         .db #$A2, #%01100100
0D465 03 40                         .db #$03, #%01000000
0D467 33 40                         .db #$33, #%01000000
0D469 63 A1                         .db #$63, #%10100001
0D46B 83 A2                         .db #$83, #%10100010
0D46D 93 00                         .db #$93, #%00000000
0D46F A3 60                         .db #$A3, #%01100000
0D471 04 41                         .db #$04, #%01000001
0D473 34 41                         .db #$34, #%01000001
0D475 94 02                         .db #$94, #%00000010
0D477 A4 62                         .db #$A4, #%01100010
0D479 05 47                         .db #$05, #%01000111
0D47B 35 67                         .db #$35, #%01100111
0D47D 75 0A                         .db #$75, #%00001010
0D47F 85 47                         .db #$85, #%01000111
0D481 B5 47                         .db #$B5, #%01000111
0D483 06 E7                         .db #$06, #%11100111
0D485 16 5A                         .db #$16, #%01011010
0D487 26 11                         .db #$26, #%00010001
0D489 46 13                         .db #$46, #%00010011
0D48B 56 1A                         .db #$56, #%00011010
0D48D 66 14                         .db #$66, #%00010100
0D48F 86 10                         .db #$86, #%00010000
0D491 96 5A                         .db #$96, #%01011010
0D493 A6 12                         .db #$A6, #%00010010
0D495 C6 15                         .db #$C6, #%00010101
0D497 D6 E7                         .db #$D6, #%11100111
0D499 FF                            .db #LEVEL_END
0D49A                           
0D49A                           lvl_layout_12:
0D49A 00 00                         .db #$00, #%00000000
0D49C 50 C0                         .db #$50, #%11000000
0D49E 80 00                         .db #$80, #%00000000
0D4A0 61 00                         .db #$61, #%00000000
0D4A2 22 C0                         .db #$22, #%11000000
0D4A4 82 E0                         .db #$82, #%11100000
0D4A6 C2 E0                         .db #$C2, #%11100000
0D4A8 A3 20                         .db #$A3, #%00100000
0D4AA C3 10                         .db #$C3, #%00010000
0D4AC 04 00                         .db #$04, #%00000000
0D4AE 54 20                         .db #$54, #%00100000
0D4B0 15 0A                         .db #$15, #%00001010
0D4B2 25 C0                         .db #$25, #%11000000
0D4B4 55 E0                         .db #$55, #%11100000
0D4B6 86 20                         .db #$86, #%00100000
0D4B8 C6 E0                         .db #$C6, #%11100000
0D4BA C7 A0                         .db #$C7, #%10100000
0D4BC 88 00                         .db #$88, #%00000000
0D4BE 59 00                         .db #$59, #%00000000
0D4C0 89 20                         .db #$89, #%00100000
0D4C2 D9 1A                         .db #$D9, #%00011010
0D4C4 FF                            .db #LEVEL_END
0D4C5                           
0D4C5                           lvl_layout_13:
0D4C5 10 E0                         .db #$10, #%11100000
0D4C7 20 E0                         .db #$20, #%11100000
0D4C9 30 E0                         .db #$30, #%11100000
0D4CB 40 40                         .db #$40, #%01000000
0D4CD 80 60                         .db #$80, #%01100000
0D4CF C0 E0                         .db #$C0, #%11100000
0D4D1 D0 E0                         .db #$D0, #%11100000
0D4D3 41 40                         .db #$41, #%01000000
0D4D5 71 60                         .db #$71, #%01100000
0D4D7 52 60                         .db #$52, #%01100000
0D4D9 A2 20                         .db #$A2, #%00100000
0D4DB 43 60                         .db #$43, #%01100000
0D4DD 83 60                         .db #$83, #%01100000
0D4DF 14 74                         .db #$14, #%01110100
0D4E1 54 74                         .db #$54, #%01110100
0D4E3 94 74                         .db #$94, #%01110100
0D4E5 D4 14                         .db #$D4, #%00010100
0D4E7 15 0D                         .db #$15, #%00001101
0D4E9 55 0D                         .db #$55, #%00001101
0D4EB 95 0D                         .db #$95, #%00001101
0D4ED D5 0D                         .db #$D5, #%00001101
0D4EF 26 0D                         .db #$26, #%00001101
0D4F1 46 0D                         .db #$46, #%00001101
0D4F3 66 0D                         .db #$66, #%00001101
0D4F5 86 0D                         .db #$86, #%00001101
0D4F7 A6 0D                         .db #$A6, #%00001101
0D4F9 C6 0D                         .db #$C6, #%00001101
0D4FB 07 10                         .db #$07, #%00010000
0D4FD 37 0D                         .db #$37, #%00001101
0D4FF 77 0D                         .db #$77, #%00001101
0D501 B7 0D                         .db #$B7, #%00001101
0D503 28 0D                         .db #$28, #%00001101
0D505 48 0D                         .db #$48, #%00001101
0D507 68 0D                         .db #$68, #%00001101
0D509 88 0D                         .db #$88, #%00001101
0D50B A8 0D                         .db #$A8, #%00001101
0D50D C8 0D                         .db #$C8, #%00001101
0D50F 19 0D                         .db #$19, #%00001101
0D511 59 0D                         .db #$59, #%00001101
0D513 99 0D                         .db #$99, #%00001101
0D515 D9 0D                         .db #$D9, #%00001101
0D517 FF                            .db #LEVEL_END
0D518                           
0D518                           lvl_layout_14:
0D518 00 67                         .db #$00, #%01100111
0D51A 40 67                         .db #$40, #%01100111
0D51C 80 67                         .db #$80, #%01100111
0D51E C0 27                         .db #$C0, #%00100111
0D520 01 27                         .db #$01, #%00100111
0D522 31 C7                         .db #$31, #%11000111
0D524 51 C7                         .db #$51, #%11000111
0D526 71 C7                         .db #$71, #%11000111
0D528 91 C7                         .db #$91, #%11000111
0D52A B1 C7                         .db #$B1, #%11000111
0D52C D1 07                         .db #$D1, #%00000111
0D52E 02 E7                         .db #$02, #%11100111
0D530 06 E7                         .db #$06, #%11100111
0D532 13 07                         .db #$13, #%00000111
0D534 D3 07                         .db #$D3, #%00000111
0D536 15 07                         .db #$15, #%00000111
0D538 35 07                         .db #$35, #%00000111
0D53A 55 07                         .db #$55, #%00000111
0D53C 75 07                         .db #$75, #%00000111
0D53E 95 07                         .db #$95, #%00000111
0D540 B5 07                         .db #$B5, #%00000111
0D542 D5 07                         .db #$D5, #%00000111
0D544 17 07                         .db #$17, #%00000111
0D546 37 C7                         .db #$37, #%11000111
0D548 57 C7                         .db #$57, #%11000111
0D54A 77 C7                         .db #$77, #%11000111
0D54C 97 C7                         .db #$97, #%11000111
0D54E B7 C7                         .db #$B7, #%11000111
0D550 D7 07                         .db #$D7, #%00000111
0D552 19 07                         .db #$19, #%00000111
0D554 D9 07                         .db #$D9, #%00000111
0D556 22 4C                         .db #$22, #%01001100
0D558 62 4C                         .db #$62, #%01001100
0D55A A2 4C                         .db #$A2, #%01001100
0D55C 24 0C                         .db #$24, #%00001100
0D55E 44 0C                         .db #$44, #%00001100
0D560 64 0C                         .db #$64, #%00001100
0D562 84 0C                         .db #$84, #%00001100
0D564 A4 0C                         .db #$A4, #%00001100
0D566 C4 0C                         .db #$C4, #%00001100
0D568 26 0C                         .db #$26, #%00001100
0D56A 46 0C                         .db #$46, #%00001100
0D56C 66 0C                         .db #$66, #%00001100
0D56E 86 0C                         .db #$86, #%00001100
0D570 A6 0C                         .db #$A6, #%00001100
0D572 C6 0C                         .db #$C6, #%00001100
0D574 28 4C                         .db #$28, #%01001100
0D576 68 4C                         .db #$68, #%01001100
0D578 A8 4C                         .db #$A8, #%01001100
0D57A 32 04                         .db #$32, #%00000100
0D57C 52 04                         .db #$52, #%00000100
0D57E 72 04                         .db #$72, #%00000100
0D580 92 04                         .db #$92, #%00000100
0D582 B2 04                         .db #$B2, #%00000100
0D584 38 04                         .db #$38, #%00000100
0D586 58 04                         .db #$58, #%00000100
0D588 78 04                         .db #$78, #%00000100
0D58A 98 04                         .db #$98, #%00000100
0D58C B8 04                         .db #$B8, #%00000100
0D58E FF                            .db #LEVEL_END
0D58F                           
0D58F                           lvl_layout_15:
0D58F 00 7A                         .db #$00, #%01111010
0D591 40 7A                         .db #$40, #%01111010
0D593 80 7A                         .db #$80, #%01111010
0D595 C0 3A                         .db #$C0, #%00111010
0D597 41 04                         .db #$41, #%00000100
0D599 61 04                         .db #$61, #%00000100
0D59B 81 04                         .db #$81, #%00000100
0D59D A1 04                         .db #$A1, #%00000100
0D59F 05 E4                         .db #$05, #%11100100
0D5A1 15 64                         .db #$15, #%01100100
0D5A3 55 64                         .db #$55, #%01100100
0D5A5 95 64                         .db #$95, #%01100100
0D5A7 D5 E4                         .db #$D5, #%11100100
0D5A9 26 04                         .db #$26, #%00000100
0D5AB 46 44                         .db #$46, #%01000100
0D5AD 76 64                         .db #$76, #%01100100
0D5AF C6 04                         .db #$C6, #%00000100
0D5B1 17 04                         .db #$17, #%00000100
0D5B3 37 64                         .db #$37, #%01100100
0D5B5 77 44                         .db #$77, #%01000100
0D5B7 B7 04                         .db #$B7, #%00000100
0D5B9 18 64                         .db #$18, #%01100100
0D5BB 58 64                         .db #$58, #%01100100
0D5BD 98 64                         .db #$98, #%01100100
0D5BF FF                            .db #LEVEL_END
0D5C0                           
0D5C0                           lvl_layout_16:
0D5C0 10 E1                         .db #$10, #%11100001
0D5C2 20 9A                         .db #$20, #%10011010
0D5C4 30 E1                         .db #$30, #%11100001
0D5C6 40 E1                         .db #$40, #%11100001
0D5C8 50 E1                         .db #$50, #%11100001
0D5CA 60 C1                         .db #$60, #%11000001
0D5CC 70 E1                         .db #$70, #%11100001
0D5CE 80 E1                         .db #$80, #%11100001
0D5D0 90 E1                         .db #$90, #%11100001
0D5D2 A0 61                         .db #$A0, #%01100001
0D5D4 21 C1                         .db #$21, #%11000001
0D5D6 A1 1A                         .db #$A1, #%00011010
0D5D8 B1 41                         .db #$B1, #%01000001
0D5DA A2 E1                         .db #$A2, #%11100001
0D5DC B2 E1                         .db #$B2, #%11100001
0D5DE C2 1A                         .db #$C2, #%00011010
0D5E0 D2 E1                         .db #$D2, #%11100001
0D5E2 63 1A                         .db #$63, #%00011010
0D5E4 C3 C1                         .db #$C3, #%11000001
0D5E6 14 61                         .db #$14, #%01100001
0D5E8 54 61                         .db #$54, #%01100001
0D5EA 94 C1                         .db #$94, #%11000001
0D5EC 15 61                         .db #$15, #%01100001
0D5EE 55 41                         .db #$55, #%01000001
0D5F0 85 1A                         .db #$85, #%00011010
0D5F2 16 41                         .db #$16, #%01000001
0D5F4 46 1A                         .db #$46, #%00011010
0D5F6 56 61                         .db #$56, #%01100001
0D5F8 A6 61                         .db #$A6, #%01100001
0D5FA 17 67                         .db #$17, #%01100111
0D5FC 57 67                         .db #$57, #%01100111
0D5FE 97 67                         .db #$97, #%01100111
0D600 D7 07                         .db #$D7, #%00000111
0D602 28 41                         .db #$28, #%01000001
0D604 58 61                         .db #$58, #%01100001
0D606 A8 41                         .db #$A8, #%01000001
0D608 18 11                         .db #$18, #%00010001
0D60A 38 11                         .db #$38, #%00010001
0D60C 98 11                         .db #$98, #%00010001
0D60E B8 11                         .db #$B8, #%00010001
0D610 D8 11                         .db #$D8, #%00010001
0D612 59 09                         .db #$59, #%00001001
0D614 FF                            .db #LEVEL_END
0D615                           
0D615                           lvl_layout_17:
0D615 10 EA                         .db #$10, #%11101010
0D617 20 E2                         .db #$20, #%11100010
0D619 30 62                         .db #$30, #%01100010
0D61B 70 02                         .db #$70, #%00000010
0D61D 80 6A                         .db #$80, #%01101010
0D61F 90 22                         .db #$90, #%00100010
0D621 01 AA                         .db #$01, #%10101010
0D623 31 6A                         .db #$31, #%01101010
0D625 81 2A                         .db #$81, #%00101010
0D627 A1 02                         .db #$A1, #%00000010
0D629 C1 02                         .db #$C1, #%00000010
0D62B D1 0A                         .db #$D1, #%00001010
0D62D 32 EA                         .db #$32, #%11101010
0D62F 42 6A                         .db #$42, #%01101010
0D631 62 02                         .db #$62, #%00000010
0D633 92 6A                         .db #$92, #%01101010
0D635 D2 E2                         .db #$D2, #%11100010
0D637 43 1A                         .db #$43, #%00011010
0D639 53 CA                         .db #$53, #%11001010
0D63B 73 02                         .db #$73, #%00000010
0D63D 83 4A                         .db #$83, #%01001010
0D63F B3 CA                         .db #$B3, #%11001010
0D641 C3 EA                         .db #$C3, #%11101010
0D643 04 0A                         .db #$04, #%00001010
0D645 14 A2                         .db #$14, #%10100010
0D647 24 AA                         .db #$24, #%10101010
0D649 44 AA                         .db #$44, #%10101010
0D64B 64 6A                         .db #$64, #%01101010
0D64D 65 6A                         .db #$65, #%01101010
0D64F A5 AA                         .db #$A5, #%10101010
0D651 06 EA                         .db #$06, #%11101010
0D653 16 62                         .db #$16, #%01100010
0D655 66 22                         .db #$66, #%00100010
0D657 86 2A                         .db #$86, #%00101010
0D659 17 42                         .db #$17, #%01000010
0D65B 47 12                         .db #$47, #%00010010
0D65D 57 6A                         .db #$57, #%01101010
0D65F 97 4A                         .db #$97, #%01001010
0D661 A7 02                         .db #$A7, #%00000010
0D663 18 02                         .db #$18, #%00000010
0D665 28 0A                         .db #$28, #%00001010
0D667 38 22                         .db #$38, #%00100010
0D669 68 2A                         .db #$68, #%00101010
0D66B 88 62                         .db #$88, #%01100010
0D66D C8 0A                         .db #$C8, #%00001010
0D66F D8 02                         .db #$D8, #%00000010
0D671 19 2A                         .db #$19, #%00101010
0D673 39 2A                         .db #$39, #%00101010
0D675 69 42                         .db #$69, #%01000010
0D677 99 2A                         .db #$99, #%00101010
0D679 B9 42                         .db #$B9, #%01000010
0D67B FF                            .db #LEVEL_END
0D67C                           
0D67C                           lvl_layout_18:
0D67C 00 12                         .db #$00, #%00010010
0D67E 40 1A                         .db #$40, #%00011010
0D680 50 11                         .db #$50, #%00010001
0D682 70 1A                         .db #$70, #%00011010
0D684 80 10                         .db #$80, #%00010000
0D686 D0 13                         .db #$D0, #%00010011
0D688 01 1A                         .db #$01, #%00011010
0D68A 22 15                         .db #$22, #%00010101
0D68C A2 1A                         .db #$A2, #%00011010
0D68E B2 14                         .db #$B2, #%00010100
0D690 03 67                         .db #$03, #%01100111
0D692 43 67                         .db #$43, #%01100111
0D694 83 67                         .db #$83, #%01100111
0D696 24 09                         .db #$24, #%00001001
0D698 74 0D                         .db #$74, #%00001101
0D69A C4 0A                         .db #$C4, #%00001010
0D69C 05 A7                         .db #$05, #%10100111
0D69E 45 27                         .db #$45, #%00100111
0D6A0 95 27                         .db #$95, #%00100111
0D6A2 16 C7                         .db #$16, #%11000111
0D6A4 36 67                         .db #$36, #%01100111
0D6A6 86 67                         .db #$86, #%01100111
0D6A8 D6 07                         .db #$D6, #%00000111
0D6AA 07 A3                         .db #$07, #%10100011
0D6AC 27 23                         .db #$27, #%00100011
0D6AE 47 C7                         .db #$47, #%11000111
0D6B0 57 A0                         .db #$57, #%10100000
0D6B2 67 A7                         .db #$67, #%10100111
0D6B4 77 20                         .db #$77, #%00100000
0D6B6 97 C7                         .db #$97, #%11000111
0D6B8 A7 A4                         .db #$A7, #%10100100
0D6BA B7 A7                         .db #$B7, #%10100111
0D6BC C7 24                         .db #$C7, #%00100100
0D6BE 28 0B                         .db #$28, #%00001011
0D6C0 38 A3                         .db #$38, #%10100011
0D6C2 78 08                         .db #$78, #%00001000
0D6C4 88 A0                         .db #$88, #%10100000
0D6C6 C8 0C                         .db #$C8, #%00001100
0D6C8 D8 A4                         .db #$D8, #%10100100
0D6CA 09 43                         .db #$09, #%01000011
0D6CC 59 40                         .db #$59, #%01000000
0D6CE A9 44                         .db #$A9, #%01000100
0D6D0 FF                            .db #LEVEL_END
0D6D1                           
0D6D1                           lvl_layout_19:
0D6D1 11 A8                         .db #$11, #%10101000
0D6D3 21 68                         .db #$21, #%01101000
0D6D5 81 28                         .db #$81, #%00101000
0D6D7 B1 48                         .db #$B1, #%01001000
0D6D9 22 48                         .db #$22, #%01001000
0D6DB 62 68                         .db #$62, #%01101000
0D6DD B2 28                         .db #$B2, #%00101000
0D6DF 23 28                         .db #$23, #%00101000
0D6E1 83 28                         .db #$83, #%00101000
0D6E3 B3 28                         .db #$B3, #%00101000
0D6E5 04 E8                         .db #$04, #%11101000
0D6E7 24 08                         .db #$24, #%00001000
0D6E9 44 08                         .db #$44, #%00001000
0D6EB 64 E8                         .db #$64, #%11101000
0D6ED 84 E8                         .db #$84, #%11101000
0D6EF C4 A8                         .db #$C4, #%10101000
0D6F1 D4 E8                         .db #$D4, #%11101000
0D6F3 15 48                         .db #$15, #%01001000
0D6F5 55 C8                         .db #$55, #%11001000
0D6F7 75 C8                         .db #$75, #%11001000
0D6F9 A5 08                         .db #$A5, #%00001000
0D6FB 36 08                         .db #$36, #%00001000
0D6FD B6 08                         .db #$B6, #%00001000
0D6FF 27 48                         .db #$27, #%01001000
0D701 97 28                         .db #$97, #%00101000
0D703 C7 08                         .db #$C7, #%00001000
0D705 09 61                         .db #$09, #%01100001
0D707 19 11                         .db #$19, #%00010001
0D709 49 61                         .db #$49, #%01100001
0D70B 89 31                         .db #$89, #%00110001
0D70D A9 61                         .db #$A9, #%01100001
0D70F FF                            .db #LEVEL_END
0D710                           
0D710                           lvl_layout_20:
0D710 00 60                         .db #$00, #%01100000
0D712 10 1A                         .db #$10, #%00011010
0D714 40 A7                         .db #$40, #%10100111
0D716 50 20                         .db #$50, #%00100000
0D718 70 1A                         .db #$70, #%00011010
0D71A 80 40                         .db #$80, #%01000000
0D71C B0 1A                         .db #$B0, #%00011010
0D71E C0 20                         .db #$C0, #%00100000
0D720 01 40                         .db #$01, #%01000000
0D722 31 1A                         .db #$31, #%00011010
0D724 A1 40                         .db #$A1, #%01000000
0D726 D1 1A                         .db #$D1, #%00011010
0D728 43 67                         .db #$43, #%01100111
0D72A 83 47                         .db #$83, #%01000111
0D72C 44 A7                         .db #$44, #%10100111
0D72E 54 25                         .db #$54, #%00100101
0D730 94 08                         .db #$94, #%00001000
0D732 A4 A7                         .db #$A4, #%10100111
0D734 55 05                         .db #$55, #%00000101
0D736 65 08                         .db #$65, #%00001000
0D738 06 27                         .db #$06, #%00100111
0D73A 36 67                         .db #$36, #%01100111
0D73C 76 28                         .db #$76, #%00101000
0D73E A6 27                         .db #$A6, #%00100111
0D740 D6 07                         .db #$D6, #%00000111
0D742 A7 A7                         .db #$A7, #%10100111
0D744 08 60                         .db #$08, #%01100000
0D746 09 60                         .db #$09, #%01100000
0D748 18 A7                         .db #$18, #%10100111
0D74A 48 A7                         .db #$48, #%10100111
0D74C 58 47                         .db #$58, #%01000111
0D74E 88 27                         .db #$88, #%00100111
0D750 B8 20                         .db #$B8, #%00100000
0D752 D8 1A                         .db #$D8, #%00011010
0D754 59 15                         .db #$59, #%00010101
0D756 69 60                         .db #$69, #%01100000
0D758 A9 60                         .db #$A9, #%01100000
0D75A FF                            .db #LEVEL_END
0D75B                           
0D75B                           lvl_layout_21:
0D75B 00 13                         .db #$00, #%00010011
0D75D 10 11                         .db #$10, #%00010001
0D75F 20 67                         .db #$20, #%01100111
0D761 60 67                         .db #$60, #%01100111
0D763 A0 47                         .db #$A0, #%01000111
0D765 D0 15                         .db #$D0, #%00010101
0D767 32 63                         .db #$32, #%01100011
0D769 72 05                         .db #$72, #%00000101
0D76B 82 43                         .db #$82, #%01000011
0D76D B2 43                         .db #$B2, #%01000011
0D76F 33 03                         .db #$33, #%00000011
0D771 43 2A                         .db #$43, #%00101010
0D773 63 7A                         .db #$63, #%01111010
0D775 73 2A                         .db #$73, #%00101010
0D777 A3 7A                         .db #$A3, #%01111010
0D779 34 63                         .db #$34, #%01100011
0D77B 74 63                         .db #$74, #%01100011
0D77D B4 43                         .db #$B4, #%01000011
0D77F 06 63                         .db #$06, #%01100011
0D781 46 63                         .db #$46, #%01100011
0D783 86 63                         .db #$86, #%01100011
0D785 C6 C3                         .db #$C6, #%11000011
0D787 07 7A                         .db #$07, #%01111010
0D789 47 7A                         .db #$47, #%01111010
0D78B 67 0A                         .db #$67, #%00001010
0D78D 87 7A                         .db #$87, #%01111010
0D78F 08 13                         .db #$08, #%00010011
0D791 18 43                         .db #$18, #%01000011
0D793 48 63                         .db #$48, #%01100011
0D795 88 63                         .db #$88, #%01100011
0D797 FF                            .db #LEVEL_END
0D798                           
0D798                           lvl_layout_22:
0D798 00 7A                         .db #$00, #%01111010
0D79A 40 7A                         .db #$40, #%01111010
0D79C 80 7A                         .db #$80, #%01111010
0D79E C0 3A                         .db #$C0, #%00111010
0D7A0 13 67                         .db #$13, #%01100111
0D7A2 83 A7                         .db #$83, #%10100111
0D7A4 B3 07                         .db #$B3, #%00000111
0D7A6 14 07                         .db #$14, #%00000111
0D7A8 44 07                         .db #$44, #%00000111
0D7AA A4 07                         .db #$A4, #%00000111
0D7AC 15 A5                         .db #$15, #%10100101
0D7AE 45 A5                         .db #$45, #%10100101
0D7B0 85 25                         .db #$85, #%00100101
0D7B2 86 05                         .db #$86, #%00000101
0D7B4 A6 05                         .db #$A6, #%00000101
0D7B6 17 11                         .db #$17, #%00010001
0D7B8 47 A1                         .db #$47, #%10100001
0D7BA 87 A1                         .db #$87, #%10100001
0D7BC B7 A1                         .db #$B7, #%10100001
0D7BE 18 41                         .db #$18, #%01000001
0D7C0 68 01                         .db #$68, #%00000001
0D7C2 D8 01                         .db #$D8, #%00000001
0D7C4 FF                            .db #LEVEL_END
0D7C5                           
0D7C5                           lvl_layout_23:
0D7C5 00 71                         .db #$00, #%01110001
0D7C7 40 11                         .db #$40, #%00010001
0D7C9 50 43                         .db #$50, #%01000011
0D7CB 80 D1                         .db #$80, #%11010001
0D7CD 90 E3                         .db #$90, #%11100011
0D7CF A0 63                         .db #$A0, #%01100011
0D7D1 01 63                         .db #$01, #%01100011
0D7D3 41 63                         .db #$41, #%01100011
0D7D5 A1 63                         .db #$A1, #%01100011
0D7D7 02 63                         .db #$02, #%01100011
0D7D9 42 63                         .db #$42, #%01100011
0D7DB 62 11                         .db #$62, #%00010001
0D7DD A2 67                         .db #$A2, #%01100111
0D7DF 04 63                         .db #$04, #%01100011
0D7E1 44 23                         .db #$44, #%00100011
0D7E3 64 D1                         .db #$64, #%11010001
0D7E5 74 E3                         .db #$74, #%11100011
0D7E7 84 F1                         .db #$84, #%11110001
0D7E9 94 E3                         .db #$94, #%11100011
0D7EB A4 C7                         .db #$A4, #%11000111
0D7ED B4 23                         .db #$B4, #%00100011
0D7EF 05 63                         .db #$05, #%01100011
0D7F1 45 23                         .db #$45, #%00100011
0D7F3 06 71                         .db #$06, #%01110001
0D7F5 46 11                         .db #$46, #%00010001
0D7F7 56 E3                         .db #$56, #%11100011
0D7F9 D6 07                         .db #$D6, #%00000111
0D7FB 17 D1                         .db #$17, #%11010001
0D7FD 27 43                         .db #$27, #%01000011
0D7FF 67 D1                         .db #$67, #%11010001
0D801 A7 C7                         .db #$A7, #%11000111
0D803 C7 A7                         .db #$C7, #%10100111
0D805 D7 B3                         .db #$D7, #%10110011
0D807 28 43                         .db #$28, #%01000011
0D809 78 43                         .db #$78, #%01000011
0D80B 29 43                         .db #$29, #%01000011
0D80D 79 43                         .db #$79, #%01000011
0D80F FF                           .db #LEVEL_END
0D810                           
0D810                           lvl_layout_24:
0D810 02 67                         .db #$02, #%01100111
0D812 42 67                         .db #$42, #%01100111
0D814 82 67                         .db #$82, #%01100111
0D816 05 67                         .db #$05, #%01100111
0D818 45 67                         .db #$45, #%01100111
0D81A 85 67                         .db #$85, #%01100111
0D81C 08 67                         .db #$08, #%01100111
0D81E 48 67                         .db #$48, #%01100111
0D820 88 67                         .db #$88, #%01100111
0D822 30 E7                         .db #$30, #%11100111
0D824 70 E7                         .db #$70, #%11100111
0D826 B0 E7                         .db #$B0, #%11100111
0D828 34 E7                         .db #$34, #%11100111
0D82A 74 E7                         .db #$74, #%11100111
0D82C B4 E7                         .db #$B4, #%11100111
0D82E 20 13                         .db #$20, #%00010011
0D830 40 10                         .db #$40, #%00010000
0D832 80 02                         .db #$80, #%00000010
0D834 41 05                         .db #$41, #%00000101
0D836 B1 09                         .db #$B1, #%00001001
0D838 02 09                         .db #$02, #%00001001
0D83A 52 0C                         .db #$52, #%00001100
0D83C 13 11                         .db #$13, #%00010001
0D83E 33 04                         .db #$33, #%00000100
0D840 74 0C                         .db #$74, #%00001100
0D842 B4 08                         .db #$B4, #%00001000
0D844 15 09                         .db #$15, #%00001001
0D846 55 0C                         .db #$55, #%00001100
0D848 95 0C                         .db #$95, #%00001100
0D84A 47 03                         .db #$47, #%00000011
0D84C A7 12                         .db #$A7, #%00010010
0D84E 18 15                         .db #$18, #%00010101
0D850 09 05                         .db #$09, #%00000101
0D852 19 03                         .db #$19, #%00000011
0D854 FF                            .db #LEVEL_END
0D855                           
0D855                           lvl_layout_25:
0D855 00 12                         .db #$00, #%00010010
0D857 10 63                         .db #$10, #%01100011
0D859 60 63                         .db #$60, #%01100011
0D85B A0 07                         .db #$A0, #%00000111
0D85D 01 11                         .db #$01, #%00010001
0D85F A1 02                         .db #$A1, #%00000010
0D861 02 67                         .db #$02, #%01100111
0D863 42 07                         .db #$42, #%00000111
0D865 62 67                         .db #$62, #%01100111
0D867 A2 C7                         .db #$A2, #%11000111
0D869 03 61                         .db #$03, #%01100001
0D86B 43 01                         .db #$43, #%00000001
0D86D 63 61                         .db #$63, #%01100001
0D86F A6 E7                         .db #$A6, #%11100111
0D871 B6 47                         .db #$B6, #%01000111
0D873 C6 01                         .db #$C6, #%00000001
0D875 B7 42                         .db #$B7, #%01000010
0D877 B8 42                         .db #$B8, #%01000010
0D879 C8 0A                         .db #$C8, #%00001010
0D87B 09 7A                         .db #$09, #%01111010
0D87D 49 7A                         .db #$49, #%01111010
0D87F 89 3A                         .db #$89, #%00111010
0D881 B9 42                         .db #$B9, #%01000010
0D883 FF                            .db #LEVEL_END
0D884                           
0D884                           ;; Level layout address pointers
0D884                           tbl_lvl_layout_hi:
0D884                           ifdef TESTING
0D884 D1                            .db >#lvl_test
0D885                           endif
0D885 D1 D1 D1 D2 D2                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D88A D2 D3 D3 D3 D4                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D88F D4 D4 D4 D5 D5                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D894 D5 D6 D6 D6 D7                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D899 D7 D7 D7 D8 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D89E                           
0D89E                           tbl_lvl_layout_lo:
0D89E                           ifdef TESTING
0D89E A2                            .db <#lvl_test
0D89F                           endif
0D89F A5 C0 F5 28 99                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D8A4 D4 5D 9E D5 18                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D8A9 47 9A C5 18 8F                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D8AE C0 15 7C D1 10                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D8B3 5B 98 C5 10 55                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D8B8                           
0D8B8                           ;; Ball start position (#$YX)
0D8B8                           tbl_lvl_ball_startpos:
0D8B8                           ifdef TESTING
0D8B8 29                            .db #$29
0D8B9                           endif
0D8B9 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D8BE 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D8C3 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D8C8 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D8CD 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D8D2                           
0D8D2                               
0D8D2                           ;; Ball start direction, color and tile score
0D8D2                           ;; #% ccc v tttt
0D8D2                           ;;    ||| | ++++-- tile score
0D8D2                           ;;    ||| +------- vertical direction, up (0) or down
0D8D2                           ;;    +++--------- color (CBRYGM)
0D8D2                           tbl_lvl_ball_init:
0D8D2                           ifdef TESTING
0D8D2 20                            .db #%00100000
0D8D3                           endif
0D8D3 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D8D8 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D8DD 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D8E2 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D8E7 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D8EC                           
0D8EC                           
0D8EC                           
0D8EC                           ;; Helper table to multiply values by 16
0D8EC                           tbl_Times16:
0D8EC 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D8F4 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D8FC                               
0D8FC                           
0D8FC                           ;; Helper table to multiply values by 64
0D8FC                           tbl_Times64:
0D8FC 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D900                           
0D900                           
0D900                           ;; Metatile ID to CHR data mapper
0D900                           tbl_GametileTopLeft:
0D900 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D90A                           
0D90A                           tbl_GametileTopRight:
0D90A 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D914                           
0D914                           tbl_GametileBottomLeft:
0D914 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D91E                           
0D91E                           tbl_GametileBottomRight:
0D91E 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D928                           
0D928                           ;; Metatile ID to RAM byte data mapper
0D928                           tbl_GameTileRamByte:
0D928 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D92D                           
0D92D                           ;; HUD text data
0D92D                           tbl_HudText:
0D92D 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D935 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D93C 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D944 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D949                           
0D949                           ;; Move block top left tile based on color
0D949                           tbl_MoveBlockTopLeftTile:
0D949 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D950                           
0D950                           ;; Game over data
0D950                           tbl_GameOver:
0D950 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D954 00 00                         .db #_SPACE, #_SPACE
0D956 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0D95A                           
0D95A                           tbl_BackgroundFade:
0D95A 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0D964                           
0D964                           ;; Sound effects
0D964                           .include "game/include/table/sfx.asm"
0D964                           ;;
0D964                           ;; Explosion sound effects
0D964                           ;;
0D964                           ;;   #% ffff vvvv
0D964                           ;;      |||| ++++---- volume (0=low, 15=high)
0D964                           ;;      ++++-------- frequency (0=low, 15=high)
0D964                           ;;
0D964                           ;; #$FF = end of sfx
0D964                           ;;
0D964                           
0D964                           tbl_ExplosionSfx:
0D964 00                            .db #$00 ; buffer byte
0D965 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0D96D 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0D975 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0D97D 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0D985 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0D98D 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0D992                           
0D992                           tbl_ThudSfx:
0D992 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0D993 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0D99B E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0D9A0                           
0D9A0                           tbl_BounceSfx:
0D9A0 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0D9A1 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0D9A5                           
0D9A5 00                            .db #$00
0D9A6                           tbl_Sfx_hi:
0D9A6 D9 D9 D9                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0D9A9                           
0D9A9                           tbl_Sfx_lo:
0D9A9 64 92 A0                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0D9AC                           
0D9AC                           
0D9AC                           ;; NMI handler
0D9AC                           NMI:
0D9AC                               .include "interrupt/nmi.asm"
0D9AC                           
0D9AC                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D9AC                           ;;
0D9AC                           ;; include/nmi.asm
0D9AC                           ;;
0D9AC                           ;; Non-maskable interrupt script. This script is being executed
0D9AC                           ;; when vBlank hits.
0D9AC                           ;;
0D9AC                           ;;
0D9AC                           
0D9AC                               ;; Preserve accumulator through stack
0D9AC 48                            PHA
0D9AD                           
0D9AD                               ;; Should NMI be skipped?
0D9AD A5 13                         LDA skip_nmi
0D9AF F0 03                         BEQ +
0D9B1 4C F1 DA                          JMP +skip_nmi
0D9B4                               +
0D9B4                           
0D9B4                               ;; When in NMI, skip additional NMI requests
0D9B4 A9 01                         LDA #$01
0D9B6 85 13                         STA skip_nmi
0D9B8                           
0D9B8                               ;; Preserve X, Y, and PC through stack
0D9B8 8A                            TXA
0D9B9 48                            PHA
0D9BA 98                            TYA
0D9BB 48                            PHA
0D9BC 08                            PHP
0D9BD                               
0D9BD                               ;; Check forced NMI skip
0D9BD A5 14                         LDA force_skip_nmi
0D9BF F0 03                         BEQ +
0D9C1 4C E0 DA                          JMP +force_skip_nmi
0D9C4                               +
0D9C4                           
0D9C4                               ;; Update PPU mask
0D9C4                               ;LDA #$00
0D9C4                               ;STA PPU_CTRL
0D9C4 A5 12                         LDA soft_ppu_mask
0D9C6 8D 01 20                      STA PPU_MASK
0D9C9                               
0D9C9                               
0D9C9                               ;; Additional PPU updates go here
0D9C9                               .include "game/interrupt/nmi.asm"
0D9C9                           
0D9C9                               ;; Check if ppu_buffer needs updating
0D9C9 A5 39                         LDA ppu_buffer_update
0D9CB D0 03                         BNE +
0D9CD 4C 0F DA                          JMP +no_ppu_buffer_update
0D9D0                               +
0D9D0                           
0D9D0                               ;; Reset ppu control register and mask
0D9D0 A2 00                         LDX #$00
0D9D2 8E 00 20                      STX PPU_CTRL
0D9D5 8E 01 20                      STX PPU_MASK
0D9D8                           
0D9D8                               ;; Set up loop
0D9D8                               -
0D9D8                                   ;; Reset hi/lo latch
0D9D8 2C 02 20                          BIT PPU_STATUS
0D9DB                           
0D9DB                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D9DB BD 00 03                          LDA ppu_buffer,x
0D9DE 8D 06 20                          STA PPU_ADDR
0D9E1 E8                                INX
0D9E2 BD 00 03                          LDA ppu_buffer,x
0D9E5 8D 06 20                          STA PPU_ADDR
0D9E8                           
0D9E8                                   ;; Write ppu_buffer data to PPU_ADDR
0D9E8 E8                                INX
0D9E9 BD 00 03                          LDA ppu_buffer,x
0D9EC 8D 07 20                          STA PPU_DATA
0D9EF                           
0D9EF                                   ;; Check if updating is done (eg. X is at pointer)
0D9EF E8                                INX
0D9F0 E4 3A                             CPX ppu_buffer_pointer
0D9F2 F0 03                             BEQ +
0D9F4 4C D8 D9                      JMP -
0D9F7                           +
0D9F7                           
0D9F7                               ;; Reset ppu buffer update and pointer
0D9F7 A9 00                         LDA #$00
0D9F9 85 39                         STA ppu_buffer_update
0D9FB 85 3A                         STA ppu_buffer_pointer
0D9FD                               
0D9FD                               ;; Reset scrolling position
0D9FD 8D 05 20                      STA PPU_SCROLL
0DA00 8D 05 20                      STA PPU_SCROLL
0DA03                           
0DA03                               ;; Restore ppu control register and mask
0DA03 A9 90                         LDA #%10010000
0DA05 8D 00 20                      STA PPU_CTRL
0DA08 A5 12                         LDA soft_ppu_mask
0DA0A 8D 01 20                      STA PPU_MASK
0DA0D A9 00                         LDA #$00
0DA0F                           
0DA0F                           ;; Continue other NMI stuff
0DA0F                           +no_ppu_buffer_update:
0DA0F                           
0DA0F                               ;; Reset sprite RAM, draw sprites
0DA0F 8D 03 20                      STA OAM_ADDR
0DA12 A9 02                         LDA #$02
0DA14 8D 14 40                      STA OAM_DMA
0DA17                           
0DA17                               ;; Decrease explosion and move block timers
0DA17 A0 04                         LDY #MAX_ANIMATIONS
0DA19 A2 00                         LDX #$00
0DA1B                               -
0DA1B BD 60 03                          LDA explosion_timer,x
0DA1E F0 03                             BEQ +
0DA20 DE 60 03                              DEC explosion_timer,x
0DA23                                   +
0DA23                           
0DA23 BD 80 03                          LDA move_block_timer,x
0DA26 F0 03                             BEQ +
0DA28 DE 80 03                              DEC move_block_timer,x
0DA2B                                   +
0DA2B                                   
0DA2B E8                                INX
0DA2C 88                                DEY
0DA2D F0 03                             BEQ +done
0DA2F 4C 1B DA                      JMP -
0DA32                           +done:
0DA32                           
0DA32                               ;; Decrease nudge timer
0DA32 A5 3E                         LDA nudge_timer
0DA34 F0 02                         BEQ +
0DA36 C6 3E                             DEC nudge_timer
0DA38                               +
0DA38                           
0DA38                               ;; Decrease bonus timer
0DA38 A5 3F                         LDA bonus_timer
0DA3A F0 02                         BEQ +
0DA3C C6 3F                             DEC bonus_timer
0DA3E                               +
0DA3E                           
0DA3E                               ;; Decrease kill timer
0DA3E A5 40                         LDA kill_timer
0DA40 F0 02                         BEQ +
0DA42 C6 40                             DEC kill_timer
0DA44                               +
0DA44                           
0DA44                               ;; Play background noise
0DA44 A5 38                         LDA screen_mode
0DA46 29 01                         AND #IS_GAME_SCREEN
0DA48 F0 0E                         BEQ +
0DA4A                                   .include "game/include/main/background_sound.asm"
0DA4A                           
0DA4A                               ;; If ball is frozen, no background sound should play
0DA4A A5 37                         LDA ball_flags
0DA4C 29 04                         AND #BALL_IS_FROZEN
0DA4E F0 08                         BEQ +
0DA50 A9 30                             LDA #$30
0DA52 8D 0C 40                          STA NOISE_VOLUME
0DA55 4C BD DA                          JMP +endNoise
0DA58                               +
0DA58                               
0DA58                               ;; At random times, set max_noise period to $03-$0A
0DA58 A5 44                         LDA max_noise
0DA5A D0 1D                         BNE +
0DA5C 20 53 C5                          JSR sub_GetRandomNumber
0DA5F 29 EF                             AND #%11101111
0DA61 D0 16                             BNE +
0DA63                                   
0DA63 A5 15                             LDA frame_counter
0DA65 85 16                             STA random_seed
0DA67 20 53 C5                          JSR sub_GetRandomNumber
0DA6A 29 07                             AND #$07
0DA6C 69 03                             ADC #$03
0DA6E 85 44                             STA max_noise
0DA70 A9 01                             LDA #$01
0DA72 85 45                             STA sweep_noise
0DA74 A9 34                             LDA #$34
0DA76 8D 0C 40                          STA NOISE_VOLUME
0DA79                           
0DA79                               +
0DA79                           
0DA79                               ;; if sweep noise = $00: constant noise
0DA79                               ;; else if sweep noise > $80: decrease pitch
0DA79                               ;; else: increase pitch
0DA79 A5 45                         LDA sweep_noise
0DA7B F0 18                         BEQ +constantNoise
0DA7D 30 2A                         BMI +decreaseNoise
0DA7F                           
0DA7F                           ;; Sweep noise up to max noise pitch
0DA7F                           +increaseNoise:
0DA7F C6 46                         DEC current_noise
0DA81 A5 46                         LDA current_noise
0DA83 8D 0E 40                      STA NOISE_PERIOD
0DA86 C5 44                         CMP max_noise
0DA88 D0 08                         BNE +
0DA8A A9 00                             LDA #$00
0DA8C 85 45                             STA sweep_noise
0DA8E A9 0A                             LDA #$0A
0DA90 85 47                             STA noise_timer
0DA92                               +
0DA92 4C BD DA                      JMP +endNoise
0DA95                           
0DA95                           ;; Keep noise at constant pitch
0DA95                           +constantNoise:
0DA95 A5 44                         LDA max_noise
0DA97 F0 24                         BEQ +endNoise
0DA99                           
0DA99 A5 47                         LDA noise_timer
0DA9B D0 07                         BNE +
0DA9D A9 80                             LDA #$80
0DA9F 85 45                             STA sweep_noise
0DAA1 4C BD DA                          JMP +endNoise
0DAA4                               +
0DAA4 C6 47                         DEC noise_timer
0DAA6 4C BD DA                      JMP +endNoise
0DAA9                           
0DAA9                           ;; Sweep noise down to initial pitch
0DAA9                           +decreaseNoise:
0DAA9 E6 46                         INC current_noise
0DAAB A5 46                         LDA current_noise
0DAAD 8D 0E 40                      STA NOISE_PERIOD
0DAB0 C9 0E                         CMP #$0E
0DAB2 D0 09                         BNE +endNoise
0DAB4                           
0DAB4 20 E3 C5                      JSR sub_BackgroundNoise
0DAB7 A9 00                         LDA #$00
0DAB9 85 44                         STA max_noise
0DABB 85 45                         STA sweep_noise
0DABD                           
0DABD                           +endNoise:
0DABD                           
0DABD                               +
0DABD                           
0DABD                               ;; Test: random bleeps (disabled)
0DABD                               ;.include "game/test/random_descending_bleeps.asm"
0DABD                               
0DABD                               ;; Play sound effect
0DABD                               .include "game/include/main/nmi_sfx.asm"
0DABD                           
0DABD                               ;; Get current explosion sfx frame; if not set, skip this
0DABD A4 4B                         LDY sfx_timer
0DABF F0 1F                         BEQ +done
0DAC1                               
0DAC1                                   ;; Check if explosion sfx is done; if so, disable and skip
0DAC1 B1 49                             LDA (sfx_address),y
0DAC3 D0 07                             BNE +
0DAC5 A9 00                                 LDA #$00
0DAC7 85 4B                                 STA sfx_timer
0DAC9 4C E0 DA                              JMP +done
0DACC                                   +
0DACC                                   
0DACC                                   ;; Set low nibble as volume
0DACC 29 0F                             AND #$0F
0DACE 09 30                             ORA #$30
0DAD0 8D 0C 40                          STA NOISE_VOLUME
0DAD3                                   
0DAD3                                   ;; Set high nibble as frequency
0DAD3 B1 49                             LDA (sfx_address),y
0DAD5 4A                                LSR
0DAD6 4A                                LSR
0DAD7 4A                                LSR
0DAD8 4A                                LSR
0DAD9 49 0F                             EOR #$0F
0DADB 8D 0E 40                          STA NOISE_PERIOD
0DADE                                   
0DADE                                   ;; Next frame
0DADE E6 4B                             INC sfx_timer
0DAE0                               +done
0DAE0                           
0DAE0                               
0DAE0                           
0DAE0                           ;; This is what happens when we forced nmi skip
0DAE0                           +force_skip_nmi:
0DAE0                           
0DAE0                               ;; Increase frame timers
0DAE0 E6 15                         INC frame_counter
0DAE2                           
0DAE2                               ;; reset sprites_update_position
0DAE2 A9 00                         LDA #$00
0DAE4 85 35                         STA sprites_update_position
0DAE6                           
0DAE6                               ;; Don't skip next NMI request
0DAE6 A9 00                         LDA #$00
0DAE8 85 13                         STA skip_nmi
0DAEA 85 4C                         STA check_nmi
0DAEC                           
0DAEC                               ;; Restore X, Y and PC from stack
0DAEC 28                            PLP
0DAED 68                            PLA
0DAEE A8                            TAY
0DAEF 68                            PLA
0DAF0 AA                            TAX
0DAF1                           
0DAF1                           +skip_nmi:
0DAF1                               ;; Restore accumulator from stack
0DAF1 68                            PLA
0DAF2                           
0DAF2                               ;; Return
0DAF2 40                            RTI
0DAF3                           
0DAF3                           
0DAF3                           ;; IRQ handler (empty)
0DAF3                           IRQ:
0DAF3                               .include "interrupt/irq.asm"
0DAF3                           
0DAF3 40                            RTI
0DAF4                           
0DAF4                           
0DAF4                           ;; Interrupt vectors
0DAF4 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA AC D9                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE F3 DA                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
