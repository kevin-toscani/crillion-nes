	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$C0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$05
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU Noise registers
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           
0002E                           ;; PPU buffer variables
0002E                           ppu_buffer_update      .dsb 1
0002F                           ppu_buffer_pointer     .dsb 1
00030                           
00030                           ;; Pointer to keep track of the number of explosions
00030                           explosion_pointer      .dsb 1
00031                           
00031                           ;; Sprite RAM pointer to keep track of sprites to update
00031                           sprite_ram_pointer     .dsb 1
00032                           
00032                           ;; Nudge counter
00032                           nudge_counter          .dsb 1
00033                           
00033                           ;; Current level (doubles as level select variable)
00033                           current_level          .dsb 1
00034                           
00034                           ;; Tile type the ball is currently colliding with
00034                           colliding_tile         .dsb 1
00035                           
00035                           ;; Background noise variables
00035                           max_noise              .dsb 1
00036                           sweep_noise            .dsb 1
00037                           current_noise          .dsb 1
00038                           noise_counter          .dsb 1
00039                               00039                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 D3 C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 D3 C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 33                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 31                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 BF C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 D9 CC                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 D6 CC                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 9B C4                      JSR sub_DisableRendering
0C08A 20 31 C7                      JSR sub_JumpToPointer
0C08D 20 AF C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 2D                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C AF C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 31                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 2B                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 90 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 2C                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 27                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 18                            CLC
0C0C7 69 C0                         ADC #BALL_SPEED_LO
0C0C9 85 1A                         STA ball_ypos_lo
0C0CB                           
0C0CB                               ;; update the high byte with carry
0C0CB A5 19                         LDA ball_ypos_hi
0C0CD 69 01                         ADC #BALL_SPEED_HI
0C0CF 85 19                         STA ball_ypos_hi
0C0D1                               
0C0D1                               ;; Check bottom bound
0C0D1 C9 C8                         CMP #BOUND_BOTTOM
0C0D3 90 38                         BCC +checkHorizontalMovement
0C0D5 F0 36                         BEQ +checkHorizontalMovement
0C0D7                           
0C0D7                           
0C0D7                               ;; Change ball direction to "up"
0C0D7 A9 C8                         LDA #BOUND_BOTTOM
0C0D9 38                            SEC
0C0DA E9 01                         SBC #$01
0C0DC 85 19                         STA ball_ypos_hi
0C0DE A9 00                         LDA #$00
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2 A5 2C                         LDA ball_flags
0C0E4 29 EF                         AND #MOVE_BALL_UP
0C0E6 85 2C                         STA ball_flags
0C0E8 4C 0D C1                      JMP +checkHorizontalMovement
0C0EB                           
0C0EB                           
0C0EB                           +moveBallUp:
0C0EB                               ;; update the low byte
0C0EB A5 1A                         LDA ball_ypos_lo
0C0ED 38                            SEC
0C0EE E9 C0                         SBC #BALL_SPEED_LO
0C0F0 85 1A                         STA ball_ypos_lo
0C0F2                           
0C0F2                               ;; update the high byte with carry
0C0F2 A5 19                         LDA ball_ypos_hi
0C0F4 E9 01                         SBC #BALL_SPEED_HI
0C0F6 85 19                         STA ball_ypos_hi
0C0F8                               
0C0F8                               ;; Check top bound
0C0F8 C9 30                         CMP #BOUND_TOP
0C0FA B0 11                         BCS +checkHorizontalMovement
0C0FC                           
0C0FC                               ;; Change ball direction to "down"
0C0FC A9 30                         LDA #BOUND_TOP
0C0FE 18                            CLC
0C0FF 69 01                         ADC #$01
0C101 85 19                         STA ball_ypos_hi
0C103 A9 00                         LDA #$00
0C105 85 1A                         STA ball_ypos_lo
0C107 A5 2C                         LDA ball_flags
0C109 09 10                         ORA #MOVE_BALL_DOWN
0C10B 85 2C                         STA ball_flags
0C10D                           
0C10D                           
0C10D                           +checkHorizontalMovement:
0C10D                           
0C10D                               ;; Check if ball is being nudged
0C10D A5 32                         LDA nudge_counter
0C10F D0 41                         BNE +doneBallMovement
0C111                           
0C111                               ;; Check if left button is held
0C111 A5 0F                         LDA buttons_held
0C113 29 02                         AND #BUTTON_LEFT
0C115 F0 1B                         BEQ +
0C117                                   ;; update the low byte
0C117 A5 18                             LDA ball_xpos_lo
0C119 38                                SEC
0C11A E9 C0                             SBC #BALL_SPEED_LO
0C11C 85 18                             STA ball_xpos_lo
0C11E                           
0C11E                                   ;; update the high byte
0C11E A5 17                             LDA ball_xpos_hi
0C120 E9 01                             SBC #BALL_SPEED_HI
0C122 85 17                             STA ball_xpos_hi
0C124                                   
0C124                                   ;; Check left bound
0C124 C9 10                             CMP #BOUND_LEFT
0C126 B0 2A                             BCS +doneBallMovement
0C128                                   
0C128                                   ;; Set flag to nudge right and set nudge counter
0C128 A5 2C                             LDA ball_flags
0C12A 09 02                             ORA #NUDGE_BALL_RIGHT
0C12C 20 2A C7                          JSR sub_InitiateNudge
0C12F                           
0C12F 4C 52 C1                          JMP +doneBallMovement        
0C132                               +
0C132                           
0C132                               ;; Check if right button is held
0C132 A5 0F                         LDA buttons_held
0C134 29 01                         AND #BUTTON_RIGHT
0C136 F0 1A                         BEQ +
0C138                                   ;; update the low byte
0C138 A5 18                             LDA ball_xpos_lo
0C13A 18                                CLC
0C13B 69 C0                             ADC #BALL_SPEED_LO
0C13D 85 18                             STA ball_xpos_lo
0C13F                           
0C13F                                   ;; update the high byte
0C13F A5 17                             LDA ball_xpos_hi
0C141 69 01                             ADC #BALL_SPEED_HI
0C143 85 17                             STA ball_xpos_hi     
0C145                           
0C145                                  ;; Check right bound
0C145 C9 E8                             CMP #BOUND_RIGHT
0C147 90 09                             BCC +doneBallMovement
0C149 F0 07                             BEQ +doneBallMovement
0C14B                                   
0C14B                                   ;; Set flag to nudge left and set nudge timer
0C14B A5 2C                             LDA ball_flags
0C14D 29 FD                             AND #NUDGE_BALL_LEFT
0C14F 20 2A C7                          JSR sub_InitiateNudge
0C152                               +
0C152                           
0C152                           
0C152                           +doneBallMovement:
0C152                           
0C152                               ;; Check nudge
0C152 A5 32                         LDA nudge_counter
0C154 F0 23                         BEQ +doneBallNudging
0C156 A5 2C                             LDA ball_flags
0C158 29 02                             AND #NUDGE_BALL_RIGHT
0C15A F0 10                             BEQ +nudgeBallLeft
0C15C                                   
0C15C                                       ;; update the low byte
0C15C A5 18                                 LDA ball_xpos_lo
0C15E 18                                    CLC
0C15F 69 C0                                 ADC #BALL_SPEED_LO
0C161 85 18                                 STA ball_xpos_lo
0C163                           
0C163                                       ;; update the high byte
0C163 A5 17                                 LDA ball_xpos_hi
0C165 69 01                                 ADC #BALL_SPEED_HI
0C167 85 17                                 STA ball_xpos_hi  
0C169 4C 79 C1                              JMP +doneBallNudging
0C16C                                   +nudgeBallLeft:
0C16C                                   
0C16C                                   ;; update the low byte
0C16C A5 18                             LDA ball_xpos_lo
0C16E 38                                SEC
0C16F E9 C0                             SBC #BALL_SPEED_LO
0C171 85 18                             STA ball_xpos_lo
0C173                           
0C173                                   ;; update the high byte
0C173 A5 17                             LDA ball_xpos_hi
0C175 E9 01                             SBC #BALL_SPEED_HI
0C177 85 17                             STA ball_xpos_hi
0C179                               +doneBallNudging:
0C179                           
0C179                               ;; Don't update position again until next frame
0C179 E6 2B                         INC ball_update_position
0C17B                           
0C17B                               
0C17B                               ;; Do collision detection
0C17B                               .include "game/include/main/collision_detection.asm"
0C17B                           
0C17B                               ;; Get ball's x-left, x-center, x-right position
0C17B A5 17                         LDA ball_xpos_hi
0C17D 18                            CLC
0C17E 69 F0                         ADC #BALL_LEFT_WGA
0C180 85 25                         STA ball_left
0C182 18                            CLC
0C183 69 04                         ADC #BALL_HALF_SIZE
0C185 85 26                         STA ball_center
0C187 18                            CLC
0C188 69 04                         ADC #BALL_HALF_SIZE
0C18A 85 27                         STA ball_right
0C18C                           
0C18C                               ;; Get ball's y-top, y-middle, y-bottom position
0C18C A5 19                         LDA ball_ypos_hi
0C18E 18                            CLC
0C18F 69 D0                         ADC #BALL_TOP_WGA
0C191 85 28                         STA ball_top
0C193 18                            CLC
0C194 69 04                         ADC #BALL_HALF_SIZE
0C196 85 29                         STA ball_middle
0C198 18                            CLC
0C199 69 04                         ADC #BALL_HALF_SIZE
0C19B 85 2A                         STA ball_bottom
0C19D                           
0C19D                           +checkRightCollision:
0C19D                               ;; Check if ball moves right
0C19D                               ;; No need to check nudging here as that will never collide with a tile
0C19D A5 0F                         LDA buttons_held
0C19F 29 01                         AND #BUTTON_RIGHT
0C1A1 F0 1C                         BEQ +checkLeftCollision
0C1A3                           
0C1A3                               ;; Check tile at right position
0C1A3 A5 29                         LDA ball_middle
0C1A5 85 00                         STA temp
0C1A7 A5 27                         LDA ball_right
0C1A9 85 01                         STA temp+1
0C1AB 20 83 C4                      JSR sub_ConvertXYToTileType
0C1AE 29 01                         AND #TILE_IS_SOLID
0C1B0 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1B2                           
0C1B2                               ;; Tile is solid; nudge ball and evaluate tile type
0C1B2 A5 2C                         LDA ball_flags
0C1B4 29 FD                         AND #NUDGE_BALL_LEFT
0C1B6 20 2A C7                      JSR sub_InitiateNudge
0C1B9 20 DC C4                      JSR sub_EvaluateTileType
0C1BC 4C DE C1                      JMP +checkTopCollision
0C1BF                           
0C1BF                           +checkLeftCollision:
0C1BF                               ;; Check if ball moves right
0C1BF                               ;; No need to check nudging here as that will never collide with a tile
0C1BF A5 0F                         LDA buttons_held
0C1C1 29 02                         AND #BUTTON_LEFT
0C1C3 F0 19                         BEQ +checkTopCollision
0C1C5                           
0C1C5                               ;; Check tile at right position
0C1C5 A5 29                         LDA ball_middle
0C1C7 85 00                         STA temp
0C1C9 A5 25                         LDA ball_left
0C1CB 85 01                         STA temp+1
0C1CD 20 83 C4                      JSR sub_ConvertXYToTileType
0C1D0 29 01                         AND #TILE_IS_SOLID
0C1D2 F0 0A                         BEQ +checkTopCollision
0C1D4                           
0C1D4                               ;; Tile is solid; nudge ball and evaluate tile type
0C1D4 A5 2C                         LDA ball_flags
0C1D6 09 02                         ORA #NUDGE_BALL_RIGHT
0C1D8 20 2A C7                      JSR sub_InitiateNudge
0C1DB 20 DC C4                      JSR sub_EvaluateTileType
0C1DE                               
0C1DE                               
0C1DE                           +checkTopCollision:
0C1DE                               ;; Check if ball moves up
0C1DE A5 2C                         LDA ball_flags
0C1E0 29 10                         AND #BALL_MOVES_DOWN
0C1E2 D0 1B                         BNE +checkBottomCollision
0C1E4                           
0C1E4                               ;; Check tile at top position
0C1E4 A5 28                         LDA ball_top
0C1E6 85 00                         STA temp
0C1E8 A5 26                         LDA ball_center
0C1EA 85 01                         STA temp+1
0C1EC 20 83 C4                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1F3                           
0C1F3                               ;; Tile is solid; move ball down and evaluate tile type
0C1F3 A5 2C                         LDA ball_flags
0C1F5 09 10                         ORA #MOVE_BALL_DOWN
0C1F7 85 2C                         STA ball_flags
0C1F9 20 DC C4                      JSR sub_EvaluateTileType
0C1FC 4C 17 C2                      JMP +doneCheckingCollision
0C1FF                           
0C1FF                           +checkBottomCollision:
0C1FF                               ;; No movement check needed: since ball is not moving up, it must move down
0C1FF                           
0C1FF                               ;; Check tile at bottom position
0C1FF A5 2A                         LDA ball_bottom
0C201 85 00                         STA temp
0C203 A5 26                         LDA ball_center
0C205 85 01                         STA temp+1
0C207 20 83 C4                      JSR sub_ConvertXYToTileType
0C20A 29 01                         AND #TILE_IS_SOLID
0C20C F0 09                         BEQ +doneCheckingCollision
0C20E                           
0C20E                               ;; Tile is solid; move ball up and evaluate tile type
0C20E A5 2C                         LDA ball_flags
0C210 29 EF                         AND #MOVE_BALL_UP
0C212 85 2C                         STA ball_flags
0C214 20 DC C4                      JSR sub_EvaluateTileType
0C217                           
0C217                           +doneCheckingCollision:
0C217                           
0C217                           
0C217                               ;; Testinging timed PPU scroll concept
0C217                               .include "game/test/timed_ppuscroll_test.asm"
0C217                           ;; Timed updates (test)
0C217                           
0C217                               ;; If B button is pressed
0C217 A5 10                         LDA buttons_pressed
0C219 29 10                         AND #BUTTON_START
0C21B F0 73                         BEQ +end
0C21D                           
0C21D                               ;; Disable noise channel
0C21D A9 00                         LDA #$00
0C21F 8D 15 40                      STA APU_STATUS
0C222 8D 0C 40                      STA NOISE_VOLUME
0C225                               
0C225                               ;; Set up loop fading
0C225 A9 00                         LDA #$00
0C227 85 07                         STA temp+7
0C229 A0 08                         LDY #$08
0C22B                               -fadeLoop:
0C22B 84 08                             STY temp+8
0C22D                           
0C22D                                   ;; Wait for NMI to pass
0C22D 20 D3 C3                          JSR sub_WaitForVBlank
0C230                                   
0C230                                   ;; Now wait for No-sprite 0
0C230                                   -
0C230 AD 02 20                              LDA PPU_STATUS
0C233 29 40                                 AND #SPRITE_0_HIT
0C235 D0 F9                             BNE -
0C237                               
0C237                                   ;; Now wait for Sprite 0
0C237                                   -
0C237 AD 02 20                              LDA PPU_STATUS
0C23A 29 40                                 AND #SPRITE_0_HIT
0C23C F0 F9                             BEQ -
0C23E                                       
0C23E                                   ;; Setup tile row loop
0C23E A0 16                             LDY #22
0C240                                   -tileLoop:
0C240                                   
0C240                                       ;; Disable drawing
0C240 A5 12                                 LDA soft_ppu_mask
0C242 29 F7                                 AND #%11110111
0C244 8D 01 20                              STA PPU_MASK
0C247                                       
0C247                                       ;; Set up scanline loop
0C247 A2 08                                 LDX #$08
0C249                                       -scanlineLoop:
0C249 E4 08                                     CPX temp+8
0C24B D0 0A                                     BNE +wasteTime
0C24D                                           
0C24D                                           ;; Restore drawing
0C24D A5 12                                     LDA soft_ppu_mask
0C24F 09 08                                     ORA #%00001000
0C251 8D 01 20                                  STA PPU_MASK
0C254 4C 5D C2                                  JMP +wasteMoreTime
0C257                           
0C257                                           ;; Waste 12 frames
0C257                                           +wasteTime:
0C257 E6 09                                     INC temp+9   ;+5
0C259 C6 09                                     DEC temp+9   ;+5
0C25B 49 00                                     EOR #$00     ;+2
0C25D                                           
0C25D                                           ;; Waste about 100 frames
0C25D                                           +wasteMoreTime:
0C25D                                           
0C25D 86 01                                     STX temp+1     ;  3 down, 97 to go
0C25F A2 09                                     LDX #$09       ;  5 down, 95 to go
0C261                                           -wasteLoop:
0C261 EA                                            NOP
0C262 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C264 CA                                            DEX        ;  5+5L down,  95-5L to go
0C265 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C267                           
0C267 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C269 CA                                        DEX            ;  9+8L down, 91-8L to go
0C26A D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C26C                           
0C26C 88                                    DEY
0C26D D0 D1                             BNE -tileLoop
0C26F                           
0C26F A4 08                             LDY temp+8
0C271                                   
0C271 E6 07                             INC temp+7
0C273 A5 07                             LDA temp+7
0C275 C9 02                             CMP #$02
0C277 D0 B2                             BNE -fadeLoop
0C279                           
0C279 A9 00                             LDA #$00
0C27B 85 07                             STA temp+7
0C27D 88                                DEY
0C27E D0 AB                         BNE -fadeLoop
0C280                               
0C280                               ;; Load the next level
0C280 E6 33                         INC current_level
0C282 A5 33                         LDA current_level
0C284 C9 19                         CMP #25
0C286 D0 04                         BNE +
0C288 A9 00                             LDA #$00
0C28A 85 33                             STA current_level
0C28C                               +
0C28C                               
0C28C A9 81                         LDA #LOAD_GAME_SCREEN
0C28E 85 2D                         STA screen_mode
0C290                           
0C290                           
0C290                           +end:
0C290                           
0C290                           
0C290                           +skipBallMovement:
0C290                               ;; Add to sprite buffer
0C290 A6 31                         LDX sprite_ram_pointer
0C292 A5 19                         LDA ball_ypos_hi
0C294 9D 00 02                      STA ADDR_SPRITERAM,x
0C297 E8                            INX
0C298 A9 01                         LDA #BALL_TILE_CHR
0C29A 9D 00 02                      STA ADDR_SPRITERAM,x
0C29D E8                            INX
0C29E A9 00                         LDA #BALL_ATTR
0C2A0 9D 00 02                      STA ADDR_SPRITERAM,x
0C2A3 E8                            INX
0C2A4 A5 17                         LDA ball_xpos_hi
0C2A6 9D 00 02                      STA ADDR_SPRITERAM,x
0C2A9 E8                            INX
0C2AA 86 31                         STX sprite_ram_pointer
0C2AC 4C FB C2                      JMP +doneScreenLoad
0C2AF                           
0C2AF                           
0C2AF                           +checkNextScreen:
0C2AF                           
0C2AF                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C2AF                               ;; Upon pressing START, the selected level will start
0C2AF                               .include "game/include/main/select_level.asm"
0C2AF A5 10                         LDA buttons_pressed
0C2B1 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C2B3 F0 3C                         BEQ +checkStartPress
0C2B5                           
0C2B5                                   ;; Select next level (1, 5, 9, 13, 17)
0C2B5 A5 33                             LDA current_level
0C2B7 18                                CLC
0C2B8 69 04                             ADC #$04
0C2BA C9 14                             CMP #$14
0C2BC D0 02                             BNE +
0C2BE A9 00                                 LDA #$00
0C2C0                                   +
0C2C0 85 33                             STA current_level
0C2C2                                   
0C2C2                                   ;; Convert level number to two-byte value
0C2C2 A9 00                             LDA #$00
0C2C4 85 03                             STA temp+3
0C2C6 A5 33                             LDA current_level
0C2C8 18                                CLC
0C2C9 69 01                             ADC #$01
0C2CB                           
0C2CB                               -
0C2CB C9 0A                             CMP #$0A
0C2CD 90 08                             BCC +
0C2CF E6 03                                 INC temp+3
0C2D1 38                                    SEC
0C2D2 E9 0A                                 SBC #$0A
0C2D4 4C CB C2                              JMP -
0C2D7                                   +
0C2D7                           
0C2D7                                   ;; Add level number to PPU buffer
0C2D7 18                                CLC
0C2D8 69 01                             ADC #$01
0C2DA 85 02                             STA temp+2
0C2DC A9 20                             LDA #$20
0C2DE 85 00                             STA temp
0C2E0 A9 D0                             LDA #$D0
0C2E2 85 01                             STA temp+1
0C2E4 20 6C CB                          JSR sub_WriteByteToPPUBuffer
0C2E7                                   
0C2E7 C6 01                             DEC temp+1
0C2E9 A4 03                             LDY temp+3
0C2EB C8                                INY
0C2EC 84 02                             STY temp+2
0C2EE 20 6C CB                          JSR sub_WriteByteToPPUBuffer
0C2F1                                   
0C2F1                               +checkStartPress:
0C2F1                           
0C2F1                           
0C2F1                           
0C2F1                               ;; If START button is pressed
0C2F1 A5 10                         LDA buttons_pressed
0C2F3 29 10                         AND #BUTTON_START
0C2F5 F0 04                         BEQ +
0C2F7                                   ;; Start the level
0C2F7 A9 81                             LDA #LOAD_GAME_SCREEN
0C2F9 85 2D                             STA screen_mode
0C2FB                               +
0C2FB                           
0C2FB                           
0C2FB                           
0C2FB                           +doneScreenLoad:
0C2FB                           
0C2FB                               ;; Load animations (if any)
0C2FB                               .include "game/include/main/load_animations.asm"
0C2FB                               ;; Set up loop
0C2FB A2 00                         LDX #$00
0C2FD                               -loop_load_animation:
0C2FD                                   ;; Check if current animation is active. If not, goto next
0C2FD BD 44 03                          LDA explosion_active,x
0C300 D0 03                             BNE +
0C302 4C 9C C3                              JMP +next
0C305                                   +
0C305                           
0C305                                   ;; Check the explosion framecounter
0C305 BD 30 03                          LDA explosion_framecounter,x
0C308 D0 26                             BNE +
0C30A                                       ;; Framecounter is 0
0C30A                                       ;; Reset to animation speed
0C30A A9 04                                 LDA #ANIMATION_SPEED
0C30C 9D 30 03                              STA explosion_framecounter,x
0C30F                           
0C30F                                       ;; Set next animation frame, and check if we're done yet
0C30F FE 34 03                              INC explosion_currentframe,x
0C312 BD 34 03                              LDA explosion_currentframe,x
0C315 C9 0A                                 CMP #ANIM_SLIDES
0C317 D0 17                                 BNE +
0C319                           
0C319                                       ;; If we're done, inactivate current explosion, clean
0C319                                       ;; up sprite RAM and go to the next one
0C319 A9 00                                 LDA #$00
0C31B 9D 44 03                              STA explosion_active,x
0C31E                                       
0C31E A9 09                                 LDA #SLIDE_SIZE
0C320 0A                                    ASL
0C321 0A                                    ASL
0C322 A8                                    TAY
0C323 A9 EF                                 LDA #$EF
0C325                                       -
0C325 88                                        DEY
0C326 99 00 02                                  STA ADDR_SPRITERAM,y
0C329 C0 00                                     CPY #00
0C32B D0 F8                                 BNE -
0C32D                                       
0C32D 4C 9C C3                              JMP +next
0C330                                   +
0C330                           
0C330                                   ;; Load (x,y) position in temp variables
0C330 BD 3C 03                          LDA explosion_x,x
0C333 85 01                             STA temp+1
0C335 85 03                             STA temp+3
0C337 BD 40 03                          LDA explosion_y,x
0C33A 85 02                             STA temp+2
0C33C                           
0C33C                                   ;; Load attribute in temp variable
0C33C BD 38 03                          LDA explosion_attributes,x
0C33F 85 04                             STA temp+4
0C341                           
0C341                                   ;; Load current frame into Y-register
0C341 BC 34 03                          LDY explosion_currentframe,x
0C344                           
0C344                                   ;; Load current frame ROM address from table
0C344 B9 C0 CC                          LDA explosion_anim_lo,y
0C347 85 0C                             STA pointer
0C349 B9 B6 CC                          LDA explosion_anim_hi,y
0C34C 85 0D                             STA pointer+1
0C34E                           
0C34E                                   ;; Save x-register on stack
0C34E 8A                                TXA
0C34F 48                                PHA
0C350                           
0C350                                   ;; Load sprites into sprite RAM
0C350 A6 31                             LDX sprite_ram_pointer
0C352 A0 00                             LDY #$00
0C354                           
0C354                                   ;; Prepare (x,y) offset for loop
0C354 84 00                             STY temp
0C356                           
0C356                                   -loop_load_sprite:
0C356                                   
0C356                                       ;; Do not draw empty sprites
0C356 B1 0C                                 LDA (pointer),y
0C358 F0 18                                 BEQ +nextSprite
0C35A                                   
0C35A                                           ;; Add y-position to sprite ram buffer
0C35A A5 02                                     LDA temp+2
0C35C 9D 00 02                                  STA ADDR_SPRITERAM,x
0C35F E8                                        INX
0C360                           
0C360                                           ;; Get tile number from frame ROM address, and
0C360                                           ;; add it to sprite ram buffer
0C360 B1 0C                                     LDA (pointer),y
0C362 9D 00 02                                  STA ADDR_SPRITERAM,x
0C365 E8                                        INX
0C366                           
0C366                                           ;; Add attribute data to sprite ram buffer
0C366 A5 04                                     LDA temp+4
0C368 9D 00 02                                  STA ADDR_SPRITERAM,x
0C36B E8                                        INX
0C36C                           
0C36C                                           ;; Add x-position to sprite ram buffer
0C36C A5 03                                     LDA temp+3
0C36E 9D 00 02                                  STA ADDR_SPRITERAM,x
0C371 E8                                        INX
0C372                           
0C372                                       +nextSprite:
0C372                           
0C372                                       ;; Check if all sprites are done
0C372 C8                                    INY
0C373 C0 09                                 CPY #SLIDE_SIZE
0C375 F0 21                                 BEQ +done
0C377                           
0C377                                       ;; Update x value
0C377 A5 03                                 LDA temp+3
0C379 18                                    CLC
0C37A 69 08                                 ADC #$08
0C37C 85 03                                 STA temp+3
0C37E                           
0C37E                                       ;; Update temp for x,y position
0C37E E6 00                                 INC temp
0C380 A5 00                                 LDA temp
0C382 C9 03                                 CMP #SLIDE_WIDTH
0C384 D0 0F                                 BNE +
0C386                                           ;; Row is done; reset x-position
0C386 A5 01                                     LDA temp+1
0C388 85 03                                     STA temp+3
0C38A                           
0C38A                                           ;; Update y-position
0C38A A5 02                                     LDA temp+2
0C38C 18                                        CLC
0C38D 69 08                                     ADC #$08
0C38F 85 02                                     STA temp+2
0C391                           
0C391                                           ;; Reset row counter
0C391 A9 00                                     LDA #$00
0C393 85 00                                     STA temp
0C395                                       +
0C395                           
0C395 4C 56 C3                          JMP -loop_load_sprite
0C398                           
0C398                               +done:
0C398 86 31                             STX sprite_ram_pointer
0C39A                           
0C39A                                   ;; Retrieve x-register from stack
0C39A 68                                PLA
0C39B AA                                TAX
0C39C                           
0C39C                               +next:
0C39C                                   ;; Check if all animations have been updated
0C39C E8                                INX
0C39D E0 04                             CPX #MAX_ANIMATIONS
0C39F F0 03                             BEQ +done
0C3A1                           
0C3A1 4C FD C2                      JMP -loop_load_animation
0C3A4                           +done:
0C3A4                           
0C3A4                               ;; Sprite clean-up
0C3A4 A6 31                         LDX sprite_ram_pointer
0C3A6 A9 EF                         LDA #$EF
0C3A8                               -
0C3A8 9D 00 02                          STA ADDR_SPRITERAM,x
0C3AB E8                                INX
0C3AC D0 FA                         BNE -
0C3AE 4C 57 C0                      JMP MainGameLoop
0C3B1                           
0C3B1                           ;; Subroutines
0C3B1                           .include "include/subroutines.asm"
0C3B1                           
0C3B1                           ;; RNG
0C3B1                           .include "subroutine/GetRandomNumber.asm"
0C3B1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3B1                           ;;
0C3B1                           ;; subroutine/GetRandomNumber.asm
0C3B1                           ;;
0C3B1                           ;; Simple and fast random number generator by White Flame.
0C3B1                           ;;
0C3B1                           ;; Set random_seed to an arbitrary number to randomize between
0C3B1                           ;; gaming sessions, for instance using the frame counter upon
0C3B1                           ;; pressing START on the intro screen.
0C3B1                           ;;
0C3B1                           ;;     ;; IF START PRESSED:
0C3B1                           ;;     LDA frame_counter
0C3B1                           ;;     STA random_seed
0C3B1                           ;;
0C3B1                           ;; Source:
0C3B1                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C3B1                           ;;
0C3B1                           ;;
0C3B1                           
0C3B1                           sub_GetRandomNumber:
0C3B1                               ;; Force EOR if random_seed is zero
0C3B1 A5 16                         LDA random_seed
0C3B3 F0 05                         BEQ +doEor
0C3B5                           
0C3B5                               ;; Shift left, and EOR if the high bit is set
0C3B5 0A                            ASL
0C3B6 F0 04                         BEQ +noEor
0C3B8 90 02                         BCC +noEor
0C3BA                           
0C3BA                           +doEor:
0C3BA 49 1D                         EOR #$1D
0C3BC                           
0C3BC                           +noEor:
0C3BC 85 16                         STA random_seed
0C3BE                           
0C3BE 60                            RTS
0C3BF                           
0C3BF                           
0C3BF                           ;; Read controller input
0C3BF                           .include "subroutine/ReadController.asm"
0C3BF                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3BF                           ;;
0C3BF                           ;; subroutine/ReadController.asm
0C3BF                           ;;
0C3BF                           ;; Subroutine that polls the controller and stores the input
0C3BF                           ;; buttons in a variable. This version only handles controller
0C3BF                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C3BF                           ;;
0C3BF                           ;;
0C3BF                           
0C3BF                           sub_ReadController:
0C3BF                           
0C3BF                               ;; Set strobe bit
0C3BF A9 01                         LDA #$01
0C3C1 8D 16 40                      STA JOYPAD_1
0C3C4                           
0C3C4                               ;; Set up ring counter
0C3C4 85 0F                         STA buttons_held
0C3C6                           
0C3C6                               ;; Clear strobe bit
0C3C6 4A                            LSR
0C3C7 8D 16 40                      STA JOYPAD_1
0C3CA                           
0C3CA                               ;; Loop through button presses
0C3CA                               -
0C3CA AD 16 40                          LDA JOYPAD_1
0C3CD 4A                                LSR
0C3CE 26 0F                             ROL buttons_held
0C3D0                           
0C3D0                               ;; Check if ring counter is done
0C3D0 90 F8                         BCC -
0C3D2                           
0C3D2                               ;; Return from subroutine
0C3D2 60                            RTS
0C3D3                           
0C3D3                           
0C3D3                           ;; vBlank wait
0C3D3                           .include "subroutine/WaitForVBlank.asm"
0C3D3                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3D3                           ;;
0C3D3                           ;; subroutine/WaitForVBlank.asm
0C3D3                           ;;
0C3D3                           ;; Subroutine that essentially pauses script execution until
0C3D3                           ;; vBlank happens.
0C3D3                           ;;
0C3D3                           ;;
0C3D3                           
0C3D3                           sub_WaitForVBlank:
0C3D3 2C 02 20                      BIT $2002
0C3D6 10 FB                         BPL sub_WaitForVBlank
0C3D8 60                            RTS
0C3D9                           
0C3D9                           
0C3D9                           ;; Game specific subroutines
0C3D9                           .include "game/include/subroutines.asm"
0C3D9                           ;; additional game-specific subroutines go here
0C3D9                           
0C3D9                           .include "game/subroutine/BackgroundNoise.asm"
0C3D9                           
0C3D9                           sub_BackgroundNoise:
0C3D9 A9 32                         LDA #$32
0C3DB 8D 0C 40                      STA NOISE_VOLUME
0C3DE A9 0E                         LDA #$0E
0C3E0 8D 0E 40                      STA NOISE_PERIOD
0C3E3 85 37                         STA current_noise
0C3E5 60                            RTS0C3E6                           .include "game/subroutine/ClearScreen.asm"
0C3E6                           ;; Subroutine to clear the screen
0C3E6                           ;; If it's a game screen, add noise
0C3E6                           
0C3E6                           sub_ClearScreen:
0C3E6                               ;; Check of game screen or not
0C3E6 A5 2D                         LDA screen_mode
0C3E8 29 03                         AND #CHECK_SCREEN_MODE
0C3EA C9 01                         CMP #IS_GAME_SCREEN
0C3EC F0 02                         BEQ +
0C3EE A9 00                             LDA #$00
0C3F0                               +
0C3F0 85 01                         STA temp+1
0C3F2                               
0C3F2                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C3F2 2C 02 20                      BIT PPU_STATUS
0C3F5 A9 20                         LDA #$20
0C3F7 8D 06 20                      STA PPU_ADDR
0C3FA A9 00                         LDA #$00
0C3FC 8D 06 20                      STA PPU_ADDR
0C3FF                               
0C3FF                               ;; Set up tile to draw and loop
0C3FF 85 00                         STA temp
0C401 AA                            TAX
0C402 A8                            TAY
0C403                           
0C403                               -     
0C403                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C403 A5 00                             LDA temp
0C405 8D 07 20                          STA PPU_DATA
0C408                           
0C408                                   ;; Check if we should draw noise next. Noise is drawn if:
0C408                                   ;; - Screen mode is game screen
0C408                                   ;; - Y between #$06 and #$19 (inclusive)
0C408                                   ;; - X between #$02 and #$1D (inclusive)
0C408                                   
0C408                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C408 A5 01                             LDA temp+1
0C40A F0 1C                             BEQ +nextTileInRow
0C40C                                   
0C40C                                   ;; If Y < $6, skip the check
0C40C C0 06                             CPY #$06
0C40E 90 18                             BCC +nextTileInRow
0C410                                   
0C410                                   ;; If X < $1, skip the check
0C410 E0 01                             CPX #$01
0C412 90 14                             BCC +nextTileInRow
0C414                                   
0C414                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C414 E0 1D                             CPX #$1D
0C416 D0 04                             BNE +
0C418 A9 00                                 LDA #$00
0C41A 85 00                                 STA temp
0C41C                                   +
0C41C B0 0A                             BCS +nextTileInRow
0C41E                                   
0C41E                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C41E 20 B1 C3                          JSR sub_GetRandomNumber
0C421 29 07                             AND #%00000111
0C423 18                                CLC
0C424 69 68                             ADC #$68
0C426 85 00                             STA temp
0C428                           
0C428                           +nextTileInRow:
0C428                                   
0C428                                   ;; Check if a row has been done. If not, draw the next
0C428 E8                                INX
0C429 E0 20                             CPX #$20
0C42B D0 D6                             BNE -
0C42D                                   
0C42D                                   ;; Go to the next row (if any left)
0C42D A2 00                             LDX #00
0C42F C8                                INY
0C430                                   
0C430                                   ;; If Y is 1A, skip noise tile check until done drawing
0C430 C0 1A                             CPY #$1A
0C432 D0 04                             BNE +
0C434 A9 00                                 LDA #$00
0C436 85 01                                 STA temp+1
0C438                                   +
0C438                                   
0C438 C0 1E                             CPY #$1E
0C43A D0 C7                         BNE -
0C43C                           
0C43C                               ;; Clear attribute table
0C43C A9 23                         LDA #$23
0C43E 8D 06 20                      STA PPU_ADDR
0C441 A9 C0                         LDA #$C0
0C443 8D 06 20                      STA PPU_ADDR
0C446 A9 00                         LDA #$00
0C448 A2 40                         LDX #$40
0C44A                               -
0C44A 8D 07 20                          STA PPU_DATA
0C44D CA                                DEX
0C44E D0 FA                         BNE -
0C450                               
0C450 60                            RTS0C451                           .include "game/subroutine/ColorizeBall.asm"
0C451                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C451                           ;;
0C451                           ;;  Subroutine: ColorizeBall
0C451                           ;;
0C451                           ;;  Applies the color set through ball_flags to the ball sprite.
0C451                           ;;
0C451                           ;;
0C451                           
0C451                           
0C451                           sub_ColorizeBall:
0C451                           
0C451                               ;; Get color from ball_flags
0C451 4A                            LSR
0C452 4A                            LSR
0C453 4A                            LSR
0C454 4A                            LSR
0C455 4A                            LSR
0C456 AA                            TAX
0C457                           
0C457                               ;; Add new light color of ball to PPU palette
0C457 A9 3F                         LDA #$3F
0C459 85 00                         STA temp
0C45B A9 11                         LDA #$11
0C45D 85 01                         STA temp+1
0C45F BD D0 CC                      LDA tbl_BallColorLight,x
0C462 85 02                         STA temp+2
0C464 20 6C CB                      JSR sub_WriteByteToPPUBuffer
0C467                               
0C467                               ;; Add new dark color of ball to PPU palette
0C467 E6 01                         INC temp+1
0C469 BD CA CC                      LDA tbl_BallColorDark,x
0C46C 85 02                         STA temp+2
0C46E 20 6C CB                      JSR sub_WriteByteToPPUBuffer
0C471                               
0C471 60                            RTS
0C472                           
0C472                           .include "game/subroutine/ColorsMatch.asm"
0C472                           
0C472                           ;; Subroutine to check if ball color matches colliding tile color
0C472                           
0C472                           sub_ColorsMatch:
0C472                               ;; Save tile color in temp variable
0C472 A5 34                         LDA colliding_tile
0C474 29 0E                         AND #%00001110
0C476 85 00                         STA temp
0C478                           
0C478                               ;; Get ball color
0C478 A5 2C                         LDA ball_flags
0C47A 29 E0                         AND #%11100000
0C47C 4A                            LSR
0C47D 4A                            LSR
0C47E 4A                            LSR
0C47F 4A                            LSR
0C480                           
0C480                               ;; Compare with tile color
0C480 C5 00                         CMP temp
0C482 60                            RTS
0C483                           
0C483                           .include "game/subroutine/ConvertXYToTileType.asm"
0C483                           
0C483                           ;; Subroutine to convert the ball's position to a tile type
0C483                           ;; - Expects temp to be y-position of ball within game area
0C483                           ;; - Expects temp+1 to be x-position of ball within game area
0C483                           ;; - Puts result in accumulator and zp variable
0C483                           ;; - Corrupts X-register
0C483                           
0C483                           sub_ConvertXYToTileType:
0C483 A5 01                         LDA temp+1
0C485 4A                            LSR
0C486 4A                            LSR
0C487 4A                            LSR
0C488 4A                            LSR
0C489 85 09                         STA temp+9
0C48B A5 00                         LDA temp
0C48D 29 F0                         AND #%11110000
0C48F 18                            CLC
0C490 65 09                         ADC temp+9
0C492 85 09                         STA temp+9
0C494 AA                            TAX
0C495 BD 00 04                      LDA tile_type, x
0C498 85 34                         STA colliding_tile
0C49A 60                            RTS
0C49B                           
0C49B                           .include "game/subroutine/DisableEnableRendering.asm"
0C49B                           sub_DisableRendering:
0C49B                               ;; Force NMI skip, disable rendering
0C49B A9 01                     	LDA #$01
0C49D 85 14                     	STA force_skip_nmi
0C49F 20 D3 C3                      JSR sub_WaitForVBlank
0C4A2 A5 12                         LDA soft_ppu_mask
0C4A4 29 E7                         AND #%11100111
0C4A6 8D 01 20                      STA PPU_MASK
0C4A9 85 12                         STA soft_ppu_mask
0C4AB 20 D3 C3                      JSR sub_WaitForVBlank
0C4AE 60                            RTS
0C4AF                           
0C4AF                           sub_EnableRendering:
0C4AF                               ;; Enable rendering
0C4AF A9 00                     	LDA #$00
0C4B1 8D 05 20                  	STA PPU_SCROLL
0C4B4 8D 05 20                  	STA PPU_SCROLL
0C4B7 20 D3 C3                      JSR sub_WaitForVBlank
0C4BA 85 14                     	STA force_skip_nmi
0C4BC A5 12                         LDA soft_ppu_mask
0C4BE 09 18                         ORA #%00011000
0C4C0 85 12                         STA soft_ppu_mask
0C4C2 8D 01 20                      STA PPU_MASK
0C4C5 20 D3 C3                      JSR sub_WaitForVBlank
0C4C8 60                            RTS
0C4C9                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C4C9                           sub_drawIntroScreenLogoTile:
0C4C9 B9 B2 CB                      LDA tbl_IntroScreenLogoChr,y
0C4CC C9 60                         CMP #$60
0C4CE D0 08                         BNE +
0C4D0 20 B1 C3                          JSR sub_GetRandomNumber
0C4D3 29 07                             AND #$07
0C4D5 18                                CLC
0C4D6 69 60                             ADC #$60
0C4D8                               +
0C4D8 8D 07 20                      STA PPU_DATA
0C4DB 60                            RTS
0C4DC                           .include "game/subroutine/EvaluateTileType.asm"
0C4DC                           
0C4DC                           ;; Subroutine to evaluate the colliding tile type and take its
0C4DC                           ;; corresponding action (move block, kill player, ...)
0C4DC                           ;; - Expects X-register to be the tile_type offset
0C4DC                           ;; - Uses zp variable colliding_tile
0C4DC                           
0C4DC                           sub_EvaluateTileType:
0C4DC                           
0C4DC                               ;; Check if collided tile is a color block
0C4DC A5 34                         LDA colliding_tile
0C4DE 29 80                         AND #IS_COLOR_BLOCK
0C4E0 D0 03                         BNE +
0C4E2 4C F5 C6                          JMP +checkIfPaintBlock
0C4E5                               +
0C4E5                               
0C4E5                               ;; It's a color block. Check if the colors match
0C4E5 20 72 C4                      JSR sub_ColorsMatch
0C4E8 F0 01                         BEQ +
0C4EA                                   ;; Colors don't match - return
0C4EA 60                                RTS
0C4EB                               +
0C4EB                           
0C4EB                               ;; Colors match. Destroy color block
0C4EB A4 2F                         LDY ppu_buffer_pointer
0C4ED                               
0C4ED                               ;; (this will be a subroutine)
0C4ED                               ;; Get PPU address from YX index
0C4ED                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C4ED                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C4ED 8A                            TXA
0C4EE 29 C0                         AND #%11000000
0C4F0 18                            CLC
0C4F1 2A                            ROL
0C4F2 2A                            ROL
0C4F3 2A                            ROL
0C4F4 69 20                         ADC #$20
0C4F6 85 00                         STA temp
0C4F8 8A                            TXA
0C4F9 29 0F                         AND #%00001111
0C4FB 0A                            ASL
0C4FC 85 01                         STA temp+1
0C4FE 8A                            TXA
0C4FF 29 30                         AND #%00110000
0C501 0A                            ASL
0C502 0A                            ASL
0C503 18                            CLC
0C504 65 01                         ADC temp+1
0C506 85 01                         STA temp+1
0C508 A5 00                         LDA temp
0C50A 69 00                         ADC #$00
0C50C 85 00                         STA temp
0C50E A5 01                         LDA temp+1
0C510 18                            CLC
0C511 69 C2                         ADC #$C2
0C513 85 01                         STA temp+1
0C515 A5 00                         LDA temp
0C517 69 00                         ADC #$00
0C519 85 00                         STA temp
0C51B                           
0C51B                               
0C51B                               ;; (this will also be a subroutine eventually)
0C51B                               ;; TILE 1: if metatile on top left is solid, draw
0C51B                               ;; null tile, else draw random noise tile
0C51B A9 00                         LDA #%00
0C51D 85 2E                         STA ppu_buffer_update
0C51F                               
0C51F A5 00                         LDA temp
0C521 99 00 03                      STA ppu_buffer,y
0C524 C8                            INY
0C525 A5 01                         LDA temp+1
0C527 99 00 03                      STA ppu_buffer,y
0C52A C8                            INY
0C52B                               
0C52B 8A                            TXA
0C52C 29 0F                         AND #%00001111
0C52E F0 11                         BEQ +drawRandomTile
0C530                           
0C530 8A                            TXA
0C531 29 F0                         AND #%11110000
0C533 F0 0C                         BEQ +drawRandomTile
0C535                           
0C535 BD EF 03                      LDA tile_type-17,x
0C538 29 01                         AND #%00000001
0C53A F0 05                         BEQ +drawRandomTile  
0C53C                           
0C53C                               ;; Draw a null tile
0C53C A9 00                         LDA #$00
0C53E 4C 49 C5                      JMP +addToPPUBuffer
0C541                               
0C541                           +drawRandomTile:
0C541                               ;; Draw a random tile
0C541 20 B1 C3                      JSR sub_GetRandomNumber
0C544 29 07                         AND #%00000111
0C546 18                            CLC
0C547 69 68                         ADC #$68
0C549                               
0C549                               ;; Add tile to ppu buffer
0C549                           +addToPPUBuffer:
0C549 99 00 03                      STA ppu_buffer,y
0C54C C8                            INY
0C54D                           
0C54D                               ;; TILE 2: If metatile above is solid, draw null,
0C54D                               ;; else draw random noise.
0C54D E6 01                         INC temp+1
0C54F A5 00                         LDA temp
0C551 99 00 03                      STA ppu_buffer,y
0C554 C8                            INY
0C555 A5 01                         LDA temp+1
0C557 99 00 03                      STA ppu_buffer,y
0C55A C8                            INY
0C55B                               
0C55B 8A                            TXA
0C55C 29 F0                         AND #%11110000
0C55E F0 0C                         BEQ +drawRandomTile
0C560                               
0C560 BD F0 03                      LDA tile_type-16,x
0C563 29 01                         AND #%00000001
0C565 F0 05                         BEQ +drawRandomTile
0C567                               
0C567 A9 00                         LDA #%00
0C569 4C 74 C5                      JMP +addToPPUBuffer
0C56C                           
0C56C                           +drawRandomTile:
0C56C 20 B1 C3                      JSR sub_GetRandomNumber
0C56F 29 07                         AND #%00000111
0C571 18                            CLC
0C572 69 68                         ADC #$68
0C574                           
0C574                           +addToPPUBuffer:
0C574 99 00 03                      STA ppu_buffer,y
0C577 C8                            INY
0C578                               
0C578                               ;; TILE 3 - If metatile left is solid, draw null,
0C578                               ;; else draw random noise.
0C578 A5 01                         LDA temp+1
0C57A 18                            CLC
0C57B 69 1F                         ADC #$1F
0C57D 85 01                         STA temp+1
0C57F A5 00                         LDA temp
0C581 69 00                         ADC #$00
0C583 85 00                         STA temp
0C585 99 00 03                      STA ppu_buffer,y
0C588 C8                            INY
0C589 A5 01                         LDA temp+1
0C58B 99 00 03                      STA ppu_buffer,y
0C58E C8                            INY
0C58F                               
0C58F 8A                            TXA
0C590 29 0F                         AND #%00001111
0C592 F0 0C                         BEQ +drawRandomTile
0C594                               
0C594 BD FF 03                      LDA tile_type-1,x
0C597 29 01                         AND #%00000001
0C599 F0 05                         BEQ +drawRandomTile
0C59B                               
0C59B A9 00                         LDA #%00
0C59D 4C A8 C5                      JMP +addToPPUBuffer
0C5A0                           
0C5A0                           +drawRandomTile:
0C5A0 20 B1 C3                      JSR sub_GetRandomNumber
0C5A3 29 07                         AND #%00000111
0C5A5 18                            CLC
0C5A6 69 68                         ADC #$68
0C5A8                               
0C5A8                           +addToPPUBuffer:
0C5A8 99 00 03                      STA ppu_buffer,y
0C5AB C8                            INY
0C5AC                               
0C5AC                               ;; TILE 4 - Always random noise
0C5AC E6 01                         INC temp+1
0C5AE A5 00                         LDA temp
0C5B0 99 00 03                      STA ppu_buffer,y
0C5B3 C8                            INY
0C5B4 A5 01                         LDA temp+1
0C5B6 99 00 03                      STA ppu_buffer,y
0C5B9 C8                            INY
0C5BA 20 B1 C3                      JSR sub_GetRandomNumber
0C5BD 29 07                         AND #%00000111
0C5BF 18                            CLC
0C5C0 69 68                         ADC #$68
0C5C2 99 00 03                      STA ppu_buffer,y
0C5C5 C8                            INY
0C5C6                           
0C5C6                               ;; TILE 5 - If tile on the right is solid, skip,
0C5C6                               ;; else draw random noise tile
0C5C6 E6 01                         INC temp+1
0C5C8                               
0C5C8 8A                            TXA
0C5C9 29 0F                         AND #%00001111
0C5CB C9 0D                         CMP #$0D
0C5CD F0 1F                         BEQ +skipTile
0C5CF                               
0C5CF BD 01 04                      LDA tile_type+1,x
0C5D2 29 01                         AND #%00000001
0C5D4 D0 18                         BNE +skipTile
0C5D6 A5 00                             LDA temp
0C5D8 99 00 03                          STA ppu_buffer,y
0C5DB C8                                INY
0C5DC A5 01                             LDA temp+1
0C5DE 99 00 03                          STA ppu_buffer,y
0C5E1 C8                                INY
0C5E2 20 B1 C3                          JSR sub_GetRandomNumber
0C5E5 29 07                             AND #%00000111
0C5E7 18                                CLC
0C5E8 69 68                             ADC #$68
0C5EA 99 00 03                          STA ppu_buffer,y
0C5ED C8                                INY    
0C5EE                               +skipTile:
0C5EE                           
0C5EE                               ;; TILE 6 - If tile on bottom is solid, skip,
0C5EE                               ;; else draw random noise
0C5EE A5 01                         LDA temp+1
0C5F0 18                            CLC
0C5F1 69 1F                         ADC #$1F
0C5F3 85 01                         STA temp+1
0C5F5 A5 00                         LDA temp
0C5F7 69 00                         ADC #$00
0C5F9 85 00                         STA temp
0C5FB                           
0C5FB 8A                            TXA
0C5FC 29 F0                         AND #%11110000
0C5FE C9 90                         CMP #$90
0C600 F0 1F                         BEQ +skipTile
0C602                           
0C602 BD 10 04                      LDA tile_type+16,x
0C605 29 01                         AND #%00000001
0C607 D0 18                         BNE +skipTile
0C609 A5 00                             LDA temp
0C60B 99 00 03                          STA ppu_buffer,y
0C60E C8                                INY
0C60F A5 01                             LDA temp+1
0C611 99 00 03                          STA ppu_buffer,y
0C614 C8                                INY
0C615 20 B1 C3                          JSR sub_GetRandomNumber
0C618 29 07                             AND #%00000111
0C61A 18                                CLC
0C61B 69 68                             ADC #$68
0C61D 99 00 03                          STA ppu_buffer,y
0C620 C8                                INY    
0C621                               +skipTile:
0C621                               
0C621                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C621                               ;; else draw random noise
0C621 E6 01                         INC temp+1
0C623                           
0C623 8A                            TXA
0C624 29 F0                         AND #%11110000
0C626 C9 90                         CMP #$90
0C628 F0 26                         BEQ +skipTile
0C62A                               
0C62A 8A                            TXA
0C62B 29 0F                         AND #%00001111
0C62D C9 0D                         CMP #$0D
0C62F F0 1F                         BEQ +skipTile
0C631                               
0C631 BD 11 04                      LDA tile_type+17,x
0C634 29 01                         AND #%00000001
0C636 D0 18                         BNE +skipTile
0C638 A5 00                             LDA temp
0C63A 99 00 03                          STA ppu_buffer,y
0C63D C8                                INY
0C63E A5 01                             LDA temp+1
0C640 99 00 03                          STA ppu_buffer,y
0C643 C8                                INY
0C644 20 B1 C3                          JSR sub_GetRandomNumber
0C647 29 07                             AND #%00000111
0C649 18                                CLC
0C64A 69 68                             ADC #$68
0C64C 99 00 03                          STA ppu_buffer,y
0C64F C8                                INY    
0C650                               +skipTile:   
0C650                           
0C650                           
0C650                               ;; - Update attribute table accordingly through ppu buffer
0C650 A9 23                         LDA #$23
0C652 99 00 03                      STA ppu_buffer,y
0C655 C8                            INY
0C656                               
0C656 8A                            TXA
0C657 29 F0                         AND #%11110000
0C659 4A                            LSR
0C65A 4A                            LSR
0C65B 4A                            LSR
0C65C 4A                            LSR
0C65D 18                            CLC
0C65E 69 01                         ADC #1
0C660 4A                            LSR
0C661 0A                            ASL
0C662 0A                            ASL
0C663 0A                            ASL
0C664 18                            CLC
0C665 69 C8                         ADC #$C8
0C667 85 00                         STA temp
0C669 8A                            TXA
0C66A 29 0F                         AND #%00001111
0C66C 18                            CLC
0C66D 69 01                         ADC #$01
0C66F 4A                            LSR
0C670 18                            CLC
0C671 65 00                         ADC temp
0C673 85 00                         STA temp
0C675 99 00 03                      STA ppu_buffer,y
0C678 C8                            INY
0C679                                  
0C679 8A                            TXA
0C67A 29 10                         AND #%00010000
0C67C F0 05                         BEQ +
0C67E A9 F0                             LDA #%11110000
0C680 4C 85 C6                          JMP ++
0C683                               +
0C683 A9 0F                         LDA #%00001111
0C685                               ++
0C685 85 02                         STA temp+2
0C687                               
0C687 8A                            TXA
0C688 48                            PHA
0C689 29 01                         AND #%00000001
0C68B F0 07                         BEQ +
0C68D A5 02                             LDA temp+2
0C68F 09 CC                             ORA #%11001100
0C691 4C 98 C6                          JMP ++
0C694                               +
0C694 A5 02                         LDA temp+2
0C696 09 33                         ORA #%00110011
0C698                               ++
0C698 85 02                         STA temp+2
0C69A                               
0C69A A5 00                         LDA temp
0C69C 38                            SEC
0C69D E9 C0                         SBC #$C0
0C69F AA                            TAX
0C6A0 BD A0 04                      LDA tile_attributes,x
0C6A3 25 02                         AND temp+2
0C6A5 9D A0 04                      STA tile_attributes,x
0C6A8 99 00 03                      STA ppu_buffer,y
0C6AB C8                            INY
0C6AC 68                            PLA
0C6AD AA                            TAX
0C6AE                           
0C6AE                               ;; Tell PPU to update tiles and attributes next frame
0C6AE 84 2F                         STY ppu_buffer_pointer
0C6B0 A9 01                         LDA #$01
0C6B2 85 2E                         STA ppu_buffer_update
0C6B4                            
0C6B4                               
0C6B4                               ;; - Load destruction animation on tile
0C6B4                               ;; Get most recent slot for explosion    
0C6B4 8A                            TXA
0C6B5 85 02                         STA temp+2
0C6B7 A6 30                         LDX explosion_pointer
0C6B9                           
0C6B9                               ;; If 0, use max pointer value
0C6B9 D0 02                         BNE +
0C6BB A2 04                             LDX #MAX_ANIMATIONS
0C6BD                               +
0C6BD                           
0C6BD                               ;; Decrease pointer by one
0C6BD CA                            DEX
0C6BE 86 30                         STX explosion_pointer
0C6C0                           
0C6C0                               ;; Load explosion data into RAM
0C6C0 A9 00                         LDA #$00
0C6C2 9D 34 03                      STA explosion_currentframe,x
0C6C5                           
0C6C5 A9 04                         LDA #ANIMATION_SPEED
0C6C7 9D 30 03                      STA explosion_framecounter,x
0C6CA                           
0C6CA A5 02                         LDA temp+2
0C6CC 29 0F                         AND #%00001111
0C6CE A8                            TAY
0C6CF B9 1F D4                      LDA tbl_Times16,y
0C6D2 18                            CLC
0C6D3 69 0E                         ADC #$0E
0C6D5 9D 3C 03                      STA explosion_x,x
0C6D8                           
0C6D8 A5 02                         LDA temp+2
0C6DA 29 F0                         AND #%11110000
0C6DC 18                            CLC
0C6DD 69 29                         ADC #$29
0C6DF 9D 40 03                      STA explosion_y,x
0C6E2                           
0C6E2 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C6E4 9D 38 03                      STA explosion_attributes,x
0C6E7 A9 01                         LDA #$01
0C6E9 9D 44 03                      STA explosion_active,x
0C6EC                           
0C6EC A5 02                         LDA temp+2
0C6EE AA                            TAX
0C6EF                               
0C6EF                               
0C6EF                               ;; - Write #$00 in tile type ram (makes not-solid)
0C6EF A9 00                         LDA #$00
0C6F1 9D 00 04                      STA tile_type, x
0C6F4                              
0C6F4                               
0C6F4                               ;; - If there are no color blocks left:
0C6F4                               ;;   - Freeze ball
0C6F4                               ;;   - Initiate level-win state
0C6F4                               ;; [@TODO]
0C6F4                               
0C6F4 60                            RTS
0C6F5                           
0C6F5                           +checkIfPaintBlock:
0C6F5                           
0C6F5                           
0C6F5                               ;; Check if collided tile is a paint block
0C6F5 A5 34                         LDA colliding_tile
0C6F7 29 20                         AND #IS_PAINT_BLOCK
0C6F9 F0 1A                         BEQ +checkIfDeathBlock
0C6FB                                   ;; It's a paint block. Update ball color
0C6FB                                   ;; Save x-register
0C6FB 8A                                TXA
0C6FC 48                                PHA
0C6FD                           
0C6FD                                   ;; Get tile color
0C6FD A5 34                             LDA colliding_tile
0C6FF 29 0E                             AND #%00001110
0C701 0A                                ASL
0C702 0A                                ASL
0C703 0A                                ASL
0C704 0A                                ASL
0C705 85 00                             STA temp
0C707                           
0C707                                   ;; Apply tile color to ball
0C707 A5 2C                             LDA ball_flags
0C709 29 1F                             AND #%00011111
0C70B 05 00                             ORA temp
0C70D 85 2C                             STA ball_flags
0C70F 20 51 C4                          JSR sub_ColorizeBall
0C712                           
0C712                                   ;; Restore x-register
0C712 68                                PLA
0C713 AA                                TAX
0C714                           
0C714                                   ;; Return
0C714 60                                RTS
0C715                               +checkIfDeathBlock:
0C715                           
0C715                               ;; Check if collided tile is a death block
0C715 A5 34                         LDA colliding_tile
0C717 29 10                         AND #IS_DEATH_BLOCK
0C719 F0 01                         BEQ +checkIfMoveBlock
0C71B                                   ;; It is a death block. Kill player and return (@TODO)
0C71B                           ;        LDA ball_flags
0C71B                           ;        ORA #%00000101
0C71B                           ;        STA ball_flags
0C71B 60                                RTS
0C71C                               +checkIfMoveBlock:
0C71C                           
0C71C                               ;; Check if collided tile is a move block
0C71C A5 34                         LDA colliding_tile
0C71E 29 40                         AND #IS_MOVE_BLOCK
0C720 F0 07                         BEQ +done
0C722                                   ;; It is a move block. Check if colors match
0C722 20 72 C4                          JSR sub_ColorsMatch
0C725 F0 01                             BEQ +
0C727                                       ;; Colors don't match - return
0C727 60                                    RTS
0C728                                   +
0C728                           
0C728                                   ;; Colors match.
0C728                                   ;; - Check if next tile is a solid
0C728                                   ;; - If not, move the tile:
0C728                                   ;;   - Add the tiles that need updating to ppu buffer
0C728                                   ;;   - Add move tile sprite over the original tile
0C728                                   ;;   - Initiate moving the sprite that way for 16px
0C728                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C728                                   ;;   - Update attribute table accordingly through ppu buffer
0C728                                   ;; - After moving the sprite, in a different routine:
0C728                                   ;;   - Add move tile data on the new tile location
0C728                                   ;;   - Write the original tile type data on new position in ram
0C728                                   ;;   - Destroy sprite
0C728                                   ;;   - Update attribute table accordingly through ppu buffer
0C728                                   ;; (@TODO)
0C728 60                                RTS
0C729                               +done:
0C729                           
0C729                               ;; Return
0C729 60                            RTS
0C72A                           
0C72A                           .include "game/subroutine/InitiateNudge.asm"
0C72A                           
0C72A                           sub_InitiateNudge:
0C72A 85 2C                         STA ball_flags
0C72C A9 05                         LDA #NUDGE_FRAMES
0C72E 85 32                         STA nudge_counter
0C730 60                            RTS
0C731                           
0C731                           .include "game/subroutine/JumpToPointer.asm"
0C731                           sub_JumpToPointer:
0C731 6C 0C 00                      JMP (pointer)
0C734                               ;RTS must be handled by the routine (pointer) jumps to
0C734                           .include "game/subroutine/LoadGameScreen.asm"
0C734                           sub_LoadGameScreen:
0C734                           
0C734                               ;; Clear the screen
0C734 20 E6 C3                      JSR sub_ClearScreen
0C737                               
0C737                               ;; Clear collision and attribute data
0C737 A2 00                         LDX #$00
0C739 8A                            TXA
0C73A                               -
0C73A 9D 00 04                          STA tile_type,x
0C73D E8                                INX
0C73E D0 FA                         BNE -
0C740                               
0C740                               ;; Get pointer from current level
0C740 A6 33                         LDX current_level
0C742 BD D4 D3                      LDA tbl_lvl_layout_lo,x
0C745 85 0C                         STA pointer
0C747 BD BB D3                      LDA tbl_lvl_layout_hi,x
0C74A 85 0D                         STA pointer+1
0C74C                           
0C74C                               ;; Set up the loop
0C74C A0 00                         LDY #$00
0C74E                           -drawRowColumnLoop:
0C74E                           
0C74E                               ;; Load (x,y) of current set of tiles
0C74E B1 0C                         LDA (pointer),y
0C750                           
0C750                               ;; Check if level is done; if so, skip the loop
0C750 C9 FF                         CMP #LEVEL_END
0C752 D0 03                         BNE +
0C754 4C 9D C8                          JMP +doneLevelLoad
0C757                               +
0C757                           
0C757                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C757 85 00                         STA temp
0C759 C8                            INY
0C75A B1 0C                         LDA (pointer),y
0C75C 85 01                         STA temp+1
0C75E                               
0C75E                               ;; Convert (x,y) to PPU address
0C75E                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C75E A5 00                         LDA temp
0C760 29 0F                         AND #%00001111
0C762 4A                            LSR
0C763 4A                            LSR
0C764 09 20                         ORA #$20
0C766 85 02                         STA temp+2
0C768                               
0C768                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C768 A5 00                         LDA temp
0C76A 29 F0                         AND #%11110000
0C76C 4A                            LSR
0C76D 4A                            LSR
0C76E 4A                            LSR
0C76F 85 03                         STA temp+3
0C771                               
0C771 A5 00                         LDA temp
0C773 29 03                         AND #%00000011
0C775 AA                            TAX
0C776 BD 2F D4                      LDA tbl_Times64,x
0C779 18                            CLC
0C77A 65 03                         ADC temp+3
0C77C 18                            CLC
0C77D 69 C2                         ADC #$C2
0C77F 85 03                         STA temp+3
0C781                               
0C781                               ;; Add carry to temp+2
0C781 A5 02                         LDA temp+2
0C783 69 00                         ADC #$00
0C785 85 02                         STA temp+2
0C787                           
0C787                               ;; Convert tile data to loop count and tile type
0C787                               ;; temp+4 = color
0C787 A5 01                         LDA temp+1
0C789 29 07                         AND #%00000111
0C78B 85 04                         STA temp+4
0C78D                               
0C78D                               ;; If color = 7, this is a wall
0C78D C9 07                         CMP #%00000111
0C78F F0 12                         BEQ +wallHack
0C791                                   
0C791                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C791 29 01                             AND #%00000001
0C793 F0 02                             BEQ +
0C795 A9 05                                 LDA #$05
0C797                                   +
0C797 85 07                             STA temp+7
0C799                                
0C799                                   ;; temp+5 = tile type
0C799 A5 01                             LDA temp+1
0C79B 4A                                LSR
0C79C 4A                                LSR
0C79D 4A                                LSR
0C79E 29 03                             AND #%00000011
0C7A0 4C A9 C7                          JMP +setTileType
0C7A3                               +wallHack:
0C7A3                               
0C7A3                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C7A3 A9 00                         LDA #$00
0C7A5 85 07                         STA temp+7
0C7A7 A9 04                         LDA #$04
0C7A9                           
0C7A9                           +setTileType:    
0C7A9 85 05                         STA temp+5
0C7AB                               
0C7AB                               ;; X = tile offset
0C7AB 18                            CLC
0C7AC 65 07                         ADC temp+7
0C7AE AA                            TAX
0C7AF                               
0C7AF                               ;; temp+6 = number of tiles
0C7AF A5 01                         LDA temp+1
0C7B1 29 60                         AND #%01100000
0C7B3 4A                            LSR
0C7B4 4A                            LSR
0C7B5 4A                            LSR
0C7B6 4A                            LSR
0C7B7 4A                            LSR
0C7B8 85 06                         STA temp+6
0C7BA                               
0C7BA                               ;; Translate (x,y) to (y,x) for tile RAM
0C7BA A5 00                         LDA temp
0C7BC 0A                            ASL
0C7BD 0A                            ASL
0C7BE 0A                            ASL
0C7BF 0A                            ASL
0C7C0 85 08                         STA temp+8
0C7C2 A5 00                         LDA temp
0C7C4 4A                            LSR
0C7C5 4A                            LSR
0C7C6 4A                            LSR
0C7C7 4A                            LSR
0C7C8 05 08                         ORA temp+8
0C7CA 85 00                         STA temp
0C7CC                               
0C7CC                               ;; Set up loop
0C7CC 98                            TYA
0C7CD 48                            PHA
0C7CE A4 06                         LDY temp+6
0C7D0                           
0C7D0                               -drawTileLoop:
0C7D0                                   ;; Write PPU address
0C7D0 2C 02 20                          BIT PPU_STATUS
0C7D3 A5 02                             LDA temp+2
0C7D5 8D 06 20                          STA PPU_ADDR
0C7D8 A5 03                             LDA temp+3
0C7DA 8D 06 20                          STA PPU_ADDR
0C7DD                                   
0C7DD                                   ;; Write first and second tile
0C7DD BD 33 D4                          LDA tbl_GametileTopLeft,x
0C7E0 8D 07 20                          STA PPU_DATA
0C7E3 BD 3D D4                          LDA tbl_GametileTopRight,x
0C7E6 8D 07 20                          STA PPU_DATA
0C7E9                                   
0C7E9                                   ;; Update PPU address
0C7E9 2C 02 20                          BIT PPU_STATUS
0C7EC A5 02                             LDA temp+2
0C7EE 8D 06 20                          STA PPU_ADDR
0C7F1 A5 03                             LDA temp+3
0C7F3 18                                CLC
0C7F4 69 20                             ADC #$20
0C7F6 8D 06 20                          STA PPU_ADDR
0C7F9                                   
0C7F9                                   ;; Write third and fourth tile
0C7F9 BD 47 D4                          LDA tbl_GametileBottomLeft,x
0C7FC 8D 07 20                          STA PPU_DATA
0C7FF BD 51 D4                          LDA tbl_GametileBottomRight,x
0C802 8D 07 20                          STA PPU_DATA
0C805                           
0C805                                   ;; Push x-register to stack
0C805 8A                                TXA
0C806 48                                PHA
0C807                                   
0C807                                   ;; Update tile RAM (aka collision table)
0C807 A6 05                             LDX temp+5
0C809 BD 5B D4                          LDA tbl_GameTileRamByte,x
0C80C 05 04                             ORA temp+4
0C80E 0A                                ASL
0C80F 09 01                             ORA #%00000001
0C811 A6 00                             LDX temp
0C813 9D 00 04                          STA tile_type,x
0C816                           
0C816                                   ;; Check if shade 1 should be drawn
0C816 E8                                INX
0C817 BD 00 04                          LDA tile_type,x
0C81A D0 05                             BNE +
0C81C A9 00                                 LDA #$00
0C81E 8D 07 20                              STA PPU_DATA
0C821                                   +
0C821                                   
0C821                                   ;; Check if shade 2 should be drawn
0C821 A5 03                             LDA temp+3
0C823 18                                CLC
0C824 69 41                             ADC #$41
0C826 85 03                             STA temp+3
0C828 A5 02                             LDA temp+2
0C82A 69 00                             ADC #$00
0C82C 85 02                             STA temp+2
0C82E                                   
0C82E 8A                                TXA
0C82F 18                                CLC
0C830 69 0F                             ADC #$0F
0C832 AA                                TAX
0C833                                   
0C833 BD 00 04                          LDA tile_type,x
0C836 D0 0F                             BNE +
0C838 A5 02                                 LDA temp+2
0C83A 8D 06 20                              STA PPU_ADDR
0C83D A5 03                                 LDA temp+3
0C83F 8D 06 20                              STA PPU_ADDR
0C842 A9 00                                 LDA #$00
0C844 8D 07 20                              STA PPU_DATA
0C847                                   +
0C847                           
0C847                                   ;; Check if shade 3 should be drawn
0C847 E8                                INX
0C848 E6 03                             INC temp+3
0C84A BD 00 04                          LDA tile_type,x
0C84D D0 0F                             BNE +
0C84F A5 02                                 LDA temp+2
0C851 8D 06 20                              STA PPU_ADDR
0C854 A5 03                                 LDA temp+3
0C856 8D 06 20                              STA PPU_ADDR
0C859 A9 00                                 LDA #$00
0C85B 8D 07 20                              STA PPU_DATA
0C85E                                   +
0C85E                                   
0C85E                                   ;; Restore x-register from stack
0C85E 68                                PLA
0C85F AA                                TAX
0C860                                   
0C860                                   ;; Reset pointer for next tile
0C860 A5 03                             LDA temp+3
0C862 38                                SEC
0C863 E9 42                             SBC #$42
0C865 85 03                             STA temp+3
0C867 A5 02                             LDA temp+2
0C869 E9 00                             SBC #$00
0C86B 85 02                             STA temp+2
0C86D                                   
0C86D                                   ;; Draw next metatile in this loop (if any left)
0C86D 88                                DEY
0C86E 30 27                             BMI +doneDrawingRowColumn
0C870                                   
0C870                                   ;; Is it a row or a column?
0C870 A5 01                             LDA temp+1
0C872 10 17                             BPL +
0C874                                       ;; It is a column: move pointer down (+$40)
0C874 A5 03                                 LDA temp+3
0C876 18                                    CLC
0C877 69 40                                 ADC #$40
0C879 85 03                                 STA temp+3
0C87B A5 02                                 LDA temp+2
0C87D 69 00                                 ADC #$00
0C87F 85 02                                 STA temp+2
0C881                                       
0C881                                       ;; Add 16 to temp (as a tile RAM pointer)
0C881 A5 00                                 LDA temp
0C883 18                                    CLC
0C884 69 10                                 ADC #$10
0C886 85 00                                 STA temp
0C888 4C 94 C8                              JMP +drawNextTile
0C88B                                   +
0C88B                                   
0C88B                                   ;; It is a row: move pointer right (+$02)
0C88B A5 03                             LDA temp+3
0C88D 18                                CLC
0C88E 69 02                             ADC #$02
0C890 85 03                             STA temp+3
0C892                                   
0C892                                   ;; Add 1 to temp (as a tile RAM pointer)
0C892 E6 00                             INC temp
0C894                           
0C894                               
0C894                               ;; Next tile in the row/column
0C894                                   +drawNextTile:
0C894 4C D0 C7                      JMP -drawTileLoop
0C897                           
0C897                               ;; Go to the next set of tiles
0C897                           +doneDrawingRowColumn:
0C897 68                            PLA
0C898 A8                            TAY
0C899 C8                            INY
0C89A 4C 4E C7                      JMP -drawRowColumnLoop
0C89D                           
0C89D                           ;; Level loading is done
0C89D                           +doneLevelLoad:
0C89D                           
0C89D                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C89D A9 20                         LDA #$20
0C89F 8D 06 20                      STA PPU_ADDR
0C8A2 A9 A2                         LDA #$A2
0C8A4 8D 06 20                      STA PPU_ADDR
0C8A7 A9 35                         LDA #$35
0C8A9 20 D3 CA                      JSR sub_Draw28HorizontalTiles
0C8AC                           
0C8AC                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C8AC A9 23                         LDA #$23
0C8AE 8D 06 20                      STA PPU_ADDR
0C8B1 A9 42                         LDA #$42
0C8B3 8D 06 20                      STA PPU_ADDR
0C8B6 A9 31                         LDA #$31
0C8B8 20 D3 CA                      JSR sub_Draw28HorizontalTiles
0C8BB                           
0C8BB                               ;; Left & right game bounds
0C8BB                               ;; Set PPU_ADDR and store in temp variables
0C8BB A9 20                         LDA #$20
0C8BD 85 00                         STA temp
0C8BF 8D 06 20                      STA PPU_ADDR
0C8C2 A9 C1                         LDA #$C1
0C8C4 85 01                         STA temp+1
0C8C6 8D 06 20                      STA PPU_ADDR
0C8C9                               
0C8C9                               ;; Set vertical bound tile and set up loop
0C8C9 A0 33                         LDY #$33
0C8CB A2 14                         LDX #20
0C8CD                               -
0C8CD                                   ;; Show left tile
0C8CD 8C 07 20                          STY PPU_DATA
0C8D0                                   
0C8D0                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C8D0 A5 00                             LDA temp
0C8D2 8D 06 20                          STA PPU_ADDR
0C8D5 A5 01                             LDA temp+1
0C8D7 18                                CLC
0C8D8 69 1D                             ADC #29
0C8DA 85 01                             STA temp+1
0C8DC 8D 06 20                          STA PPU_ADDR
0C8DF                           
0C8DF                                   ;; Show right tile
0C8DF 8C 07 20                          STY PPU_DATA
0C8E2                           
0C8E2                                   ;; Check if we're done yet
0C8E2 CA                                DEX
0C8E3 F0 18                             BEQ +drawCorners
0C8E5                                   
0C8E5                                   ;; Not done yet: add 3 to low byte for next left bound
0C8E5 A5 01                             LDA temp+1
0C8E7 18                                CLC
0C8E8 69 03                             ADC #3
0C8EA 85 01                             STA temp+1
0C8EC                                   
0C8EC                                   ;; Apply carry to high byte
0C8EC A5 00                             LDA temp
0C8EE 69 00                             ADC #$00
0C8F0 85 00                             STA temp
0C8F2                                   
0C8F2                                   ;; Store next PPU_ADDR to draw at
0C8F2 8D 06 20                          STA PPU_ADDR
0C8F5 A5 01                             LDA temp+1
0C8F7 8D 06 20                          STA PPU_ADDR
0C8FA 4C CD C8                      JMP -
0C8FD                               
0C8FD                               
0C8FD                           
0C8FD                           +drawCorners:
0C8FD                               ;; Draw the corners of the playing field
0C8FD A9 20                         LDA #$20
0C8FF 8D 06 20                      STA PPU_ADDR
0C902 A9 A1                         LDA #$A1
0C904 8D 06 20                      STA PPU_ADDR
0C907 A9 39                         LDA #$39
0C909 8D 07 20                      STA PPU_DATA
0C90C                           
0C90C A9 20                         LDA #$20
0C90E 8D 06 20                      STA PPU_ADDR
0C911 A9 BE                         LDA #$BE
0C913 8D 06 20                      STA PPU_ADDR
0C916 A9 3A                         LDA #$3A
0C918 8D 07 20                      STA PPU_DATA
0C91B                               ;; (added background tile for Sprite-0 hit)
0C91B A9 3F                         LDA #$3F
0C91D 8D 07 20                      STA PPU_DATA
0C920                           
0C920 A9 23                         LDA #$23
0C922 8D 06 20                      STA PPU_ADDR
0C925 A9 41                         LDA #$41
0C927 8D 06 20                      STA PPU_ADDR
0C92A A9 36                         LDA #$36
0C92C 8D 07 20                      STA PPU_DATA
0C92F                           
0C92F A9 23                         LDA #$23
0C931 8D 06 20                      STA PPU_ADDR
0C934 A9 5E                         LDA #$5E
0C936 8D 06 20                      STA PPU_ADDR
0C939 A9 34                         LDA #$34
0C93B 8D 07 20                      STA PPU_DATA
0C93E                           
0C93E                           
0C93E                               ;; Draw the hud labels
0C93E A9 20                         LDA #$20
0C940 8D 06 20                      STA PPU_ADDR
0C943 A9 62                         LDA #$62
0C945 8D 06 20                      STA PPU_ADDR
0C948 A2 00                         LDX #$00
0C94A                               -
0C94A BD 60 D4                          LDA tbl_HudText,x
0C94D 8D 07 20                          STA PPU_DATA
0C950 E8                                INX
0C951 E0 1C                             CPX #28
0C953 D0 F5                         BNE -
0C955                           
0C955                           
0C955                               ;; Draw the current score
0C955 A9 20                         LDA #$20
0C957 8D 06 20                      STA PPU_ADDR
0C95A A9 83                         LDA #$83
0C95C 8D 06 20                      STA PPU_ADDR
0C95F A2 00                         LDX #$00
0C961                               -
0C961 B5 1C                             LDA ball_score,x
0C963 18                                CLC
0C964 69 01                             ADC #$01
0C966 8D 07 20                          STA PPU_DATA
0C969 E8                                INX
0C96A E0 06                             CPX #$06
0C96C D0 F3                         BNE -
0C96E                           
0C96E                           
0C96E                               ;; Draw the level number
0C96E                               ;; (with primitive HEX>DEC)
0C96E A5 33                         LDA current_level
0C970 18                            CLC
0C971 69 01                         ADC #$01
0C973 85 01                         STA temp+1
0C975                               
0C975 C9 14                         CMP #20
0C977 B0 13                         BCS +tempIsTwo
0C979                               
0C979 C9 0A                         CMP #10
0C97B B0 05                         BCS +tempIsOne
0C97D                               
0C97D A9 00                         LDA #$00
0C97F 4C 93 C9                      JMP +setTemp
0C982                               
0C982                           +tempIsOne:
0C982 38                            SEC
0C983 E9 0A                         SBC #10
0C985 85 01                         STA temp+1
0C987 A9 01                         LDA #$01
0C989 4C 93 C9                      JMP +setTemp
0C98C                               
0C98C                           +tempIsTwo:
0C98C 38                            SEC
0C98D E9 14                         SBC #20
0C98F 85 01                         STA temp+1
0C991 A9 02                         LDA #$02
0C993                           
0C993                           +setTemp:
0C993 85 00                         STA temp
0C995                               
0C995 E6 00                         INC temp
0C997 E6 01                         INC temp+1
0C999                               
0C999 A9 20                         LDA #$20
0C99B 8D 06 20                      STA PPU_ADDR
0C99E A9 8B                         LDA #$8B
0C9A0 8D 06 20                      STA PPU_ADDR
0C9A3 A5 00                         LDA temp
0C9A5 8D 07 20                      STA PPU_DATA
0C9A8 A5 01                         LDA temp+1
0C9AA 8D 07 20                      STA PPU_DATA
0C9AD                           
0C9AD                           
0C9AD                               ;; Draw lives (presumes lives to be capped at 9)
0C9AD A9 20                         LDA #$20
0C9AF 8D 06 20                      STA PPU_ADDR
0C9B2 A9 92                         LDA #$92
0C9B4 8D 06 20                      STA PPU_ADDR
0C9B7 A6 1B                         LDX ball_lives
0C9B9 E8                            INX
0C9BA 8E 07 20                      STX PPU_DATA
0C9BD                           
0C9BD                           
0C9BD                               ;; Set and draw bonus
0C9BD A9 07                         LDA #$07
0C9BF 85 22                         STA ball_bonus
0C9C1 A9 09                         LDA #$09
0C9C3 85 23                         STA ball_bonus+1
0C9C5 85 24                         STA ball_bonus+2
0C9C7                               
0C9C7 A9 20                         LDA #$20
0C9C9 8D 06 20                      STA PPU_ADDR
0C9CC A9 9A                         LDA #$9A
0C9CE 8D 06 20                      STA PPU_ADDR
0C9D1 A2 00                         LDX #$00
0C9D3                               -
0C9D3 B5 22                             LDA ball_bonus,x
0C9D5 18                                CLC
0C9D6 69 01                             ADC #$01
0C9D8 8D 07 20                          STA PPU_DATA
0C9DB E8                                INX
0C9DC E0 03                             CPX #$03
0C9DE D0 F3                         BNE -
0C9E0                           
0C9E0                           
0C9E0                               ;; Set attribute data to RAM
0C9E0                               
0C9E0                               ;; Byte 0-7 of attribute ram should be #%10100000
0C9E0 A2 00                         LDX #$00
0C9E2 A9 A0                         LDA #$A0
0C9E4                               -
0C9E4 9D A0 04                          STA tile_attributes,x
0C9E7 E8                                INX
0C9E8 E0 08                             CPX #$08
0C9EA D0 F8                         BNE -
0C9EC                           
0C9EC                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C9EC                           
0C9EC                           -attributeLoop:
0C9EC                               ;; Reset current attribute value
0C9EC A9 00                         LDA #$00
0C9EE 85 02                         STA temp+2
0C9F0                           
0C9F0                               ;; Get first metatile in tile ram based on attribute index
0C9F0                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C9F0 8A                            TXA
0C9F1                           
0C9F1 38                            SEC
0C9F2 E9 08                         SBC #$08
0C9F4 85 01                         STA temp+1      ; attr - 8 (temp1)
0C9F6 0A                            ASL             ; * 2
0C9F7 85 00                         STA temp        ; temp = temp1 * 2
0C9F9                           
0C9F9 A5 01                         LDA temp+1      ; temp1
0C9FB 29 F8                         AND #%11111000  ; rounded down to 8's
0C9FD 0A                            ASL             ; * 2
0C9FE 18                            CLC
0C9FF 65 00                         ADC temp        ; + temp1 * 2
0CA01 85 00                         STA temp        ; first metatile
0CA03                           
0CA03                               ;; Store first metatile in y-register
0CA03 A8                            TAY
0CA04                           
0CA04                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CA04 8A                            TXA
0CA05 29 07                         AND #%00000111
0CA07 C9 07                         CMP #%00000111
0CA09 F0 0B                         BEQ +
0CA0B                           
0CA0B                               ;; If X >= $30, don't apply bottom right metatile
0CA0B E0 30                         CPX #$30
0CA0D B0 07                         BCS +
0CA0F                               
0CA0F                               ;; Add metatile1 subpalette to attribute value
0CA0F B9 00 04                      LDA tile_type,y
0CA12 29 0C                         AND #%00001100
0CA14 85 02                         STA temp+2
0CA16                               +
0CA16                           
0CA16                           
0CA16                               ;; Apply second metatile
0CA16 88                            DEY
0CA17                           
0CA17                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CA17 8A                            TXA
0CA18 29 07                         AND #%00000111
0CA1A F0 10                         BEQ +
0CA1C                           
0CA1C                               ;; If X >= $30, don't apply bottom left metatile
0CA1C E0 30                         CPX #$30
0CA1E B0 0C                         BCS +
0CA20                           
0CA20                           
0CA20                           
0CA20                               ;; Add metatile2 subpalette to attribute value
0CA20 B9 00 04                      LDA tile_type,y
0CA23 29 0C                         AND #%00001100
0CA25 4A                            LSR
0CA26 4A                            LSR
0CA27 05 02                         ORA temp+2
0CA29 4C 2E CA                      JMP ++
0CA2C                               +
0CA2C A5 02                         LDA temp+2
0CA2E                               ++
0CA2E 0A                            ASL
0CA2F 0A                            ASL
0CA30 85 02                         STA temp+2
0CA32                           
0CA32                           
0CA32                               ;; Apply third metatile
0CA32 98                            TYA
0CA33 38                            SEC
0CA34 E9 0F                         SBC #$0F
0CA36 A8                            TAY
0CA37                           
0CA37                               ;; If X MOD 8 == 7, don't apply top right metatile
0CA37 8A                            TXA
0CA38 29 07                         AND #%00000111
0CA3A C9 07                         CMP #%00000111
0CA3C F0 11                         BEQ +
0CA3E                           
0CA3E                               ;; If X < $10, don't apply top right metatile
0CA3E 8A                            TXA
0CA3F 29 F0                         AND #%11110000
0CA41 F0 0C                         BEQ +
0CA43                           
0CA43                               ;; Add metatile3 subpalette to attribute value
0CA43 B9 00 04                      LDA tile_type,y
0CA46 29 0C                         AND #%00001100
0CA48 4A                            LSR
0CA49 4A                            LSR
0CA4A 05 02                         ORA temp+2
0CA4C 4C 51 CA                      JMP ++
0CA4F                               +
0CA4F A5 02                         LDA temp+2
0CA51                               ++
0CA51 0A                            ASL
0CA52 0A                            ASL
0CA53 85 02                         STA temp+2
0CA55                           
0CA55                           
0CA55                               ;; Apply fourth metatile
0CA55 88                            DEY
0CA56                           
0CA56                               ;; If X MOD 8 == 0, don't apply top left metatile
0CA56 8A                            TXA
0CA57 29 07                         AND #%00000111
0CA59 F0 11                         BEQ +
0CA5B                           
0CA5B                               ;; If X < $10, don't apply top left metatile
0CA5B 8A                            TXA
0CA5C 29 F0                         AND #%11110000
0CA5E F0 0C                         BEQ +
0CA60                           
0CA60                               ;; Add metatile4 subpalette to attribute value
0CA60 B9 00 04                      LDA tile_type,y
0CA63 29 0C                         AND #%00001100
0CA65 4A                            LSR
0CA66 4A                            LSR
0CA67 05 02                         ORA temp+2
0CA69 4C 6E CA                      JMP ++
0CA6C                               +
0CA6C A5 02                         LDA temp+2
0CA6E                               ++
0CA6E 9D A0 04                      STA tile_attributes,x
0CA71                           
0CA71                               ;; Check the next attribute, if any left
0CA71 E8                            INX
0CA72 E0 38                         CPX #$38
0CA74 F0 03                         BEQ +
0CA76 4C EC C9                          JMP -attributeLoop
0CA79                               +
0CA79                           
0CA79                               ;; Stream attribute RAM to PPU
0CA79 2C 02 20                      BIT PPU_STATUS
0CA7C A9 23                         LDA #$23
0CA7E 8D 06 20                      STA PPU_ADDR
0CA81 A9 C0                         LDA #$C0
0CA83 8D 06 20                      STA PPU_ADDR
0CA86 A2 00                         LDX #$00
0CA88                               -
0CA88 BD A0 04                          LDA tile_attributes,x
0CA8B 8D 07 20                          STA PPU_DATA
0CA8E E8                                INX
0CA8F E0 40                             CPX #$40
0CA91 D0 F5                         BNE -
0CA93                           
0CA93                               ;; Set initial ball position
0CA93 A6 33                         LDX current_level
0CA95 BD ED D3                      LDA tbl_lvl_ball_startpos,x
0CA98 29 F0                         AND #%11110000
0CA9A 18                            CLC
0CA9B 69 34                         ADC #$34
0CA9D 85 19                         STA ball_ypos_hi
0CA9F BD ED D3                      LDA tbl_lvl_ball_startpos,x
0CAA2 0A                            ASL
0CAA3 0A                            ASL
0CAA4 0A                            ASL
0CAA5 0A                            ASL
0CAA6 18                            CLC
0CAA7 69 14                         ADC #$14
0CAA9 85 17                         STA ball_xpos_hi
0CAAB A9 00                         LDA #$00
0CAAD 85 18                         STA ball_xpos_lo
0CAAF 85 1A                         STA ball_ypos_lo
0CAB1                               
0CAB1                               ;; Set initial ball color and direction
0CAB1 BD 06 D4                      LDA tbl_lvl_ball_init,x
0CAB4 29 F0                         AND #%11110000
0CAB6 85 2C                         STA ball_flags
0CAB8 20 51 C4                      JSR sub_ColorizeBall
0CABB                               
0CABB                               ;; Play background noise
0CABB A9 08                         LDA #$08
0CABD 8D 15 40                      STA APU_STATUS
0CAC0 8D 0F 40                      STA NOISE_LENGTH
0CAC3 A9 0E                         LDA #$0E
0CAC5 85 37                         STA current_noise
0CAC7 A9 00                         LDA #$00
0CAC9 85 35                         STA max_noise
0CACB 85 38                         STA noise_counter
0CACD 85 36                         STA sweep_noise
0CACF 20 D9 C3                      JSR sub_BackgroundNoise
0CAD2                           
0CAD2                               ;; Return
0CAD2 60                            RTS
0CAD3                           
0CAD3                           
0CAD3                           ;; Subroutine: draw 28 tiles in a row
0CAD3                           sub_Draw28HorizontalTiles:
0CAD3 A2 1C                         LDX #28
0CAD5                               -
0CAD5 8D 07 20                          STA PPU_DATA
0CAD8 CA                                DEX
0CAD9 D0 FA                         BNE -
0CADB 60                            RTS0CADC                           .include "game/subroutine/LoadIntroScreen.asm"
0CADC                           sub_LoadIntroScreen:
0CADC                           
0CADC                               ;; Load intro palette
0CADC 2C 02 20                      BIT PPU_STATUS
0CADF A9 3F                         LDA #$3F
0CAE1 8D 06 20                      STA PPU_ADDR
0CAE4 A9 00                         LDA #$00
0CAE6 8D 06 20                      STA PPU_ADDR
0CAE9 A2 00                         LDX #$00
0CAEB                               -
0CAEB BD 92 CB                          LDA tbl_IntroScreenPalette,x
0CAEE 8D 07 20                          STA PPU_DATA
0CAF1 E8                                INX
0CAF2 E0 20                             CPX #$20
0CAF4 D0 F5                         BNE -
0CAF6                               
0CAF6                               ;; Put ball in the middle
0CAF6 A9 7C                         LDA #$7C
0CAF8 85 17                         STA ball_xpos_hi
0CAFA 85 19                         STA ball_ypos_hi
0CAFC                           
0CAFC                               ;; Clear the screen
0CAFC 20 E6 C3                      JSR sub_ClearScreen
0CAFF                           
0CAFF                               ;; Set up intro screen draw loop
0CAFF A2 00                         LDX #$00
0CB01                           
0CB01                           -loop_IntroScreenData:
0CB01                           
0CB01                               ;; Get current byte from intro screen data
0CB01 BD BA CB                      LDA tbl_IntroScreenData,x
0CB04                           
0CB04                               ;; If current byte is #$3F, we're done drawing.
0CB04 C9 3F                         CMP #$3F
0CB06 D0 03                         BNE +
0CB08 4C 55 CB                          JMP +goToEndIntroScreen
0CB0B                               +
0CB0B                           
0CB0B                               ;; If highest bits are %11, draw a plain tile
0CB0B 29 C0                         AND #%11000000
0CB0D D0 03                         BNE +
0CB0F 4C 35 CB                          JMP +drawTile
0CB12                               +
0CB12                               
0CB12                               ;; If highest bits are %01, set the PPU address
0CB12                               ;; If not, draw two logo tiles
0CB12 C9 40                         CMP #%01000000
0CB14 D0 03                         BNE +drawLogo
0CB16 4C 3F CB                          JMP +setPpuAddr
0CB19                           
0CB19                           +drawLogo:
0CB19                               ;; Get bits 0-2 and store in a temp variable
0CB19 BD BA CB                      LDA tbl_IntroScreenData,x
0CB1C 29 07                         AND #%00000111
0CB1E 85 00                         STA temp
0CB20                               
0CB20                               ;; Get bits 3-5, shift over to get a value from 0-7
0CB20 BD BA CB                      LDA tbl_IntroScreenData,x
0CB23 4A                            LSR
0CB24 4A                            LSR
0CB25 4A                            LSR
0CB26 29 07                         AND #%00000111
0CB28                               
0CB28                               ;; Draw the tile that corresponds with that value
0CB28 A8                            TAY
0CB29 20 C9 C4                      JSR sub_drawIntroScreenLogoTile
0CB2C                               
0CB2C                               ;; Do the same for the value stored in temp
0CB2C A4 00                         LDY temp
0CB2E 20 C9 C4                      JSR sub_drawIntroScreenLogoTile
0CB31                           
0CB31                               ;; Next byte please
0CB31 E8                            INX
0CB32 4C 01 CB                      JMP -loop_IntroScreenData
0CB35                           
0CB35                           +drawTile:
0CB35                               ;; Just draw the tile value on screen
0CB35 BD BA CB                      LDA tbl_IntroScreenData,x
0CB38 8D 07 20                      STA PPU_DATA
0CB3B                               
0CB3B                               ;; Next byte please
0CB3B E8                            INX
0CB3C 4C 01 CB                      JMP -loop_IntroScreenData
0CB3F                           
0CB3F                           
0CB3F                           +setPpuAddr:
0CB3F                               ;; Reset the PPU latch
0CB3F 2C 02 20                      BIT PPU_STATUS
0CB42                               
0CB42                               ;; Sanitize and write the high byte of the PPU address
0CB42 BD BA CB                      LDA tbl_IntroScreenData,x
0CB45 29 3F                         AND #%00111111
0CB47 8D 06 20                      STA PPU_ADDR
0CB4A                           
0CB4A                               ;; Write the low byte of the PPU address
0CB4A E8                            INX
0CB4B BD BA CB                      LDA tbl_IntroScreenData,x
0CB4E 8D 06 20                      STA PPU_ADDR
0CB51                               
0CB51                               ;; PPU has been set up to draw tiles at the correct spot now.
0CB51                               
0CB51                               ;; Next byte please.
0CB51 E8                            INX
0CB52 4C 01 CB                      JMP -loop_IntroScreenData
0CB55                           
0CB55                           +goToEndIntroScreen:
0CB55                           
0CB55                               ;; To color the 1.LEVEL: line green, we need to update two
0CB55                               ;; values in the PPU attribute data.
0CB55 2C 02 20                      BIT PPU_STATUS
0CB58 A9 23                         LDA #$23
0CB5A 8D 06 20                      STA PPU_ADDR
0CB5D A9 CB                         LDA #$CB
0CB5F 8D 06 20                      STA PPU_ADDR
0CB62 A9 0A                         LDA #%00001010
0CB64 8D 07 20                      STA PPU_DATA
0CB67 8D 07 20                      STA PPU_DATA
0CB6A                           
0CB6A 60                            RTS
0CB6B                           
0CB6B                           .include "game/subroutine/LoadWinScreen.asm"
0CB6B                           sub_LoadWinScreen:
0CB6B 60                            RTS
0CB6C                           
0CB6C                           .include "game/subroutine/WriteByteToPPU.asm"
0CB6C                           sub_WriteByteToPPUBuffer:
0CB6C                           
0CB6C                               ;; Prevent updating until full 3-byte buffer is filled,
0CB6C                               ;; so that graphics won't glitch out if NMI happens during
0CB6C                               ;; updating the buffer
0CB6C A9 00                         LDA #$00
0CB6E 85 2E                         STA ppu_buffer_update
0CB70                           
0CB70                               ;; Check if buffer full; if so, wait a frame and force update
0CB70 A4 2F                         LDY ppu_buffer_pointer
0CB72 C0 30                         CPY #$30
0CB74 D0 05                         BNE +
0CB76 E6 2E                             INC ppu_buffer_update
0CB78 20 D3 C3                          JSR sub_WaitForVBlank
0CB7B                               +
0CB7B                           
0CB7B                               ;; Add ppu_addr high byte to buffer
0CB7B A5 00                         LDA temp
0CB7D 99 00 03                      STA ppu_buffer,y
0CB80                           
0CB80                               ;; Add ppu_addr low byte to buffer
0CB80 C8                            INY
0CB81 A5 01                         LDA temp+1
0CB83 99 00 03                      STA ppu_buffer,y
0CB86                           
0CB86                               ;; Add ppu_data to buffer
0CB86 C8                            INY
0CB87 A5 02                         LDA temp+2
0CB89 99 00 03                      STA ppu_buffer,y
0CB8C                           
0CB8C                               ;; Update buffer pointer
0CB8C C8                            INY
0CB8D 84 2F                         STY ppu_buffer_pointer
0CB8F                           
0CB8F                               ;; Tell NMI to update next round
0CB8F E6 2E                         INC ppu_buffer_update
0CB91                           
0CB91                               ;; Return
0CB91 60                            RTS0CB92                           
0CB92                           
0CB92                           ;; LUTs
0CB92                           .include "game/include/tables.asm"
0CB92                           
0CB92                           ;; Initial screen palette
0CB92                           tbl_IntroScreenPalette:
0CB92 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CB96 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CB9A 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CB9E 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CBA2                           
0CBA2 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CBA6 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CBAA 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CBAE 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CBB2                           
0CBB2                           
0CBB2                           ;; Intro: mapping logo index to chr tile
0CBB2                           tbl_IntroScreenLogoChr:
0CBB2 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CBBA                           
0CBBA                           
0CBBA                           ;; Intro screen data
0CBBA                           tbl_IntroScreenData:
0CBBA                           
0CBBA                               ;; Set PPU address $20AC and draw
0CBBA 60 AC                         .db #$60, #$AC
0CBBC 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CBC4                           
0CBC4                               ;; Set PPU address $20CF and draw
0CBC4 60 CF                         .db #$60, #$CF
0CBC6 01 02                         .db #_0, #_1
0CBC8                               
0CBC8                               ;; Set PPU address $2122 and draw
0CBC8 61 22                         .db #$61, #$22
0CBCA 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CBD1 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CBD7 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CBDF 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CBE4                               
0CBE4                               ;; Set PPU address $2147 and draw
0CBE4 61 47                         .db #$61, #$47
0CBE6 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CBED 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CBF1 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CBF7 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CBFD                               
0CBFD                               ;; Set PPU address $218B and draw
0CBFD 61 8B                         .db #$61, #$8B
0CBFF 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CC05 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CC0A                               
0CC0A                               ;; Set PPU address $21E6 and draw
0CC0A 61 E6                         .db #$61, #$E6
0CC0C 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CC14 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CC18 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CC1F                               
0CC1F                               ;; Set PPU address $222D and draw
0CC1F 62 2D                         .db #$62, #$2D
0CC21 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CC27                               
0CC27                               ;; Set PPU address $2281
0CC27 62 81                         .db #$62, #$81
0CC29                               
0CC29                               ;; Draw the Crillion logo
0CC29 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CC2D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC31 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CC35 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CC39                               
0CC39 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CC3D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC41 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC45 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC49                               
0CC49 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CC4D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC51 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC55 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC59                           
0CC59 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CC5D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC61 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC65 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC69                               
0CC69 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CC6D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC71 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC75 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC79                           
0CC79 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CC7D C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CC81 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CC85 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CC88                           
0CC88                               ;; End of intro
0CC88 3F                            .db #$3F
0CC89                           
0CC89                           
0CC89                           ;; Animation frames table
0CC89                           .include "game/include/table/animation_frames.asm"
0CC89                           ;; CHR tile-id's per slide of explosion
0CC89                           explosion_slide0:
0CC89 00 00 00                      .db #$00, #$00, #$00
0CC8C 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CC8F 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CC92                           
0CC92                           explosion_slide1:
0CC92 00 00 00                      .db #$00, #$00, #$00
0CC95 29 2A 2B                      .db #$29, #$2A, #$2B
0CC98 39 3A 3B                      .db #$39, #$3A, #$3B
0CC9B                           
0CC9B                           explosion_slide2:
0CC9B 16 00 00                      .db #$16, #$00, #$00
0CC9E 26 27 28                      .db #$26, #$27, #$28
0CCA1 36 37 38                      .db #$36, #$37, #$38
0CCA4                           
0CCA4                           explosion_slide3:
0CCA4 00 14 15                      .db #$00, #$14, #$15
0CCA7 23 24 25                      .db #$23, #$24, #$25
0CCAA 33 34 35                      .db #$33, #$34, #$35
0CCAD                           
0CCAD                           explosion_slide4:
0CCAD 10 11 12                      .db #$10, #$11, #$12
0CCB0 20 21 22                      .db #$20, #$21, #$22
0CCB3 30 31 32                      .db #$30, #$31, #$32
0CCB6                           
0CCB6                           ;; High and low bytes of animation slides
0CCB6                           explosion_anim_hi:
0CCB6 CC                            .db >#explosion_slide0
0CCB7 CC                            .db >#explosion_slide1
0CCB8 CC                            .db >#explosion_slide2
0CCB9 CC                            .db >#explosion_slide3
0CCBA CC                            .db >#explosion_slide4
0CCBB CC                            .db >#explosion_slide4
0CCBC CC                            .db >#explosion_slide3
0CCBD CC                            .db >#explosion_slide2
0CCBE CC                            .db >#explosion_slide1
0CCBF CC                            .db >#explosion_slide0
0CCC0                           
0CCC0                           explosion_anim_lo:
0CCC0 89                            .db <#explosion_slide0
0CCC1 92                            .db <#explosion_slide1
0CCC2 9B                            .db <#explosion_slide2
0CCC3 A4                            .db <#explosion_slide3
0CCC4 AD                            .db <#explosion_slide4
0CCC5 AD                            .db <#explosion_slide4
0CCC6 A4                            .db <#explosion_slide3
0CCC7 9B                            .db <#explosion_slide2
0CCC8 92                            .db <#explosion_slide1
0CCC9 89                            .db <#explosion_slide0
0CCCA                           
0CCCA                           
0CCCA                           
0CCCA                           ;; Ball palette color table (CBRYGM)
0CCCA                           tbl_BallColorDark:
0CCCA 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CCD0                            
0CCD0                           tbl_BallColorLight:
0CCD0 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CCD6                           
0CCD6                               
0CCD6                           ;; Screen mode drawing routine addresses
0CCD6                           tbl_LoadScreenHi:
0CCD6 CA C7 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CCD9                           
0CCD9                           tbl_LoadScreenLo:
0CCD9 DC 34 6B                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CCDC                           
0CCDC                           
0CCDC                           ;; Level data
0CCDC                           .include "game/include/table/level_data.asm"
0CCDC                           lvl_layout_01:
0CCDC 61 21                         .db #$61, #%00100001
0CCDE 52 61                         .db #$52, #%01100001
0CCE0 43 65                         .db #$43, #%01100101
0CCE2 83 05                         .db #$83, #%00000101
0CCE4 93 15                         .db #$93, #%00010101
0CCE6 34 7A                         .db #$34, #%01111010
0CCE8 74 7A                         .db #$74, #%01111010
0CCEA 35 7A                         .db #$35, #%01111010
0CCEC 75 7A                         .db #$75, #%01111010
0CCEE 46 65                         .db #$46, #%01100101
0CCF0 86 25                         .db #$86, #%00100101
0CCF2 57 61                         .db #$57, #%01100001
0CCF4 68 21                         .db #$68, #%00100001
0CCF6 FF                            .db #LEVEL_END
0CCF7                           
0CCF7                           lvl_layout_02:
0CCF7 C0 0A                         .db #$C0, #%00001010
0CCF9 11 15                         .db #$11, #%00010101
0CCFB 21 62                         .db #$21, #%01100010
0CCFD 61 62                         .db #$61, #%01100010
0CCFF A1 42                         .db #$A1, #%01000010
0CD01 12 67                         .db #$12, #%01100111
0CD03 52 67                         .db #$52, #%01100111
0CD05 92 67                         .db #$92, #%01100111
0CD07 C3 0D                         .db #$C3, #%00001101
0CD09 14 11                         .db #$14, #%00010001
0CD0B 24 65                         .db #$24, #%01100101
0CD0D 64 65                         .db #$64, #%01100101
0CD0F A4 45                         .db #$A4, #%01000101
0CD11 15 67                         .db #$15, #%01100111
0CD13 55 67                         .db #$55, #%01100111
0CD15 95 67                         .db #$95, #%01100111
0CD17 17 12                         .db #$17, #%00010010
0CD19 27 61                         .db #$27, #%01100001
0CD1B 67 61                         .db #$67, #%01100001
0CD1D A7 41                         .db #$A7, #%01000001
0CD1F 38 7A                         .db #$38, #%01111010
0CD21 98 5A                         .db #$98, #%01011010
0CD23 18 27                         .db #$18, #%00100111
0CD25 48 27                         .db #$48, #%00100111
0CD27 78 27                         .db #$78, #%00100111
0CD29 C8 07                         .db #$C8, #%00000111
0CD2B FF                            .db #LEVEL_END
0CD2C                           
0CD2C                           lvl_layout_03:
0CD2C 00 7A                         .db #$00, #%01111010
0CD2E 40 7A                         .db #$40, #%01111010
0CD30 80 7A                         .db #$80, #%01111010
0CD32 C0 1A                         .db #$C0, #%00011010
0CD34 10 A1                         .db #$10, #%10100001
0CD36 13 E1                         .db #$13, #%11100001
0CD38 17 C1                         .db #$17, #%11000001
0CD3A 30 C1                         .db #$30, #%11000001
0CD3C 34 C1                         .db #$34, #%11000001
0CD3E 38 A1                         .db #$38, #%10100001
0CD40 50 E1                         .db #$50, #%11100001
0CD42 55 81                         .db #$55, #%10000001
0CD44 57 C1                         .db #$57, #%11000001
0CD46 70 C1                         .db #$70, #%11000001
0CD48 73 A1                         .db #$73, #%10100001
0CD4A 76 E1                         .db #$76, #%11100001
0CD4C 90 E1                         .db #$90, #%11100001
0CD4E 95 81                         .db #$95, #%10000001
0CD50 97 C1                         .db #$97, #%11000001
0CD52 B0 C1                         .db #$B0, #%11000001
0CD54 B4 C1                         .db #$B4, #%11000001
0CD56 B8 A1                         .db #$B8, #%10100001
0CD58 D0 A1                         .db #$D0, #%10100001
0CD5A D3 E1                         .db #$D3, #%11100001
0CD5C D7 C1                         .db #$D7, #%11000001
0CD5E FF                            .db #LEVEL_END
0CD5F                           
0CD5F                           lvl_layout_04:
0CD5F 00 4C                         .db #$00, #%01001100
0CD61 40 6C                         .db #$40, #%01101100
0CD63 80 4C                         .db #$80, #%01001100
0CD65 81 AC                         .db #$81, #%10101100
0CD67 C1 2C                         .db #$C1, #%00101100
0CD69 02 6C                         .db #$02, #%01101100
0CD6B 42 CC                         .db #$42, #%11001100
0CD6D 62 EC                         .db #$62, #%11101100
0CD6F A2 CC                         .db #$A2, #%11001100
0CD71 C3 CC                         .db #$C3, #%11001100
0CD73 04 4C                         .db #$04, #%01001100
0CD75 84 2C                         .db #$84, #%00101100
0CD77 25 AC                         .db #$25, #%10101100
0CD79 85 AC                         .db #$85, #%10101100
0CD7B 06 AC                         .db #$06, #%10101100
0CD7D 36 CC                         .db #$36, #%11001100
0CD7F 56 CC                         .db #$56, #%11001100
0CD81 66 EC                         .db #$66, #%11101100
0CD83 96 6C                         .db #$96, #%01101100
0CD85 C7 AC                         .db #$C7, #%10101100
0CD87 08 2C                         .db #$08, #%00101100
0CD89 78 6C                         .db #$78, #%01101100
0CD8B D8 0C                         .db #$D8, #%00001100
0CD8D 30 A1                         .db #$30, #%10100001
0CD8F B0 21                         .db #$B0, #%00100001
0CD91 01 41                         .db #$01, #%01000001
0CD93 41 61                         .db #$41, #%01100001
0CD95 91 A1                         .db #$91, #%10100001
0CD97 A1 21                         .db #$A1, #%00100001
0CD99 52 C1                         .db #$52, #%11000001
0CD9B 72 E1                         .db #$72, #%11100001
0CD9D B2 C1                         .db #$B2, #%11000001
0CD9F C2 21                         .db #$C2, #%00100001
0CDA1 03 41                         .db #$03, #%01000001
0CDA3 33 C1                         .db #$33, #%11000001
0CDA5 83 21                         .db #$83, #%00100001
0CDA7 D3 E1                         .db #$D3, #%11100001
0CDA9 05 21                         .db #$05, #%00100001
0CDAB 45 E1                         .db #$45, #%11100001
0CDAD A5 21                         .db #$A5, #%00100001
0CDAF 16 A1                         .db #$16, #%10100001
0CDB1 76 A1                         .db #$76, #%10100001
0CDB3 27 A1                         .db #$27, #%10100001
0CDB5 57 01                         .db #$57, #%00000001
0CDB7 87 41                         .db #$87, #%01000001
0CDB9 B7 A1                         .db #$B7, #%10100001
0CDBB 19 21                         .db #$19, #%00100001
0CDBD 39 41                         .db #$39, #%01000001
0CDBF 89 41                         .db #$89, #%01000001
0CDC1 C9 21                         .db #$C9, #%00100001
0CDC3 D0 1A                         .db #$D0, #%00011010
0CDC5 55 1A                         .db #$55, #%00011010
0CDC7 95 1A                         .db #$95, #%00011010
0CDC9 D7 1A                         .db #$D7, #%00011010
0CDCB 09 1A                         .db #$09, #%00011010
0CDCD 79 1A                         .db #$79, #%00011010
0CDCF FF                            .db #LEVEL_END
0CDD0                           
0CDD0                           lvl_layout_05:
0CDD0 40 0A                         .db #$40, #%00001010
0CDD2 70 1A                         .db #$70, #%00011010
0CDD4 B0 42                         .db #$B0, #%01000010
0CDD6 41 A7                         .db #$41, #%10100111
0CDD8 B1 22                         .db #$B1, #%00100010
0CDDA D1 15                         .db #$D1, #%00010101
0CDDC 22 0A                         .db #$22, #%00001010
0CDDE 52 05                         .db #$52, #%00000101
0CDE0 B2 42                         .db #$B2, #%01000010
0CDE2 03 27                         .db #$03, #%00100111
0CDE4 33 67                         .db #$33, #%01100111
0CDE6 73 67                         .db #$73, #%01100111
0CDE8 B3 47                         .db #$B3, #%01000111
0CDEA 05 E5                         .db #$05, #%11100101
0CDEC 25 A5                         .db #$25, #%10100101
0CDEE 35 25                         .db #$35, #%00100101
0CDF0 65 45                         .db #$65, #%01000101
0CDF2 A5 45                         .db #$A5, #%01000101
0CDF4 46 E5                         .db #$46, #%11100101
0CDF6 66 E5                         .db #$66, #%11100101
0CDF8 86 E5                         .db #$86, #%11100101
0CDFA A6 E2                         .db #$A6, #%11100010
0CDFC C6 E5                         .db #$C6, #%11100101
0CDFE 27 25                         .db #$27, #%00100101
0CE00 77 05                         .db #$77, #%00000101
0CE02 B7 02                         .db #$B7, #%00000010
0CE04 09 05                         .db #$09, #%00000101
0CE06 79 05                         .db #$79, #%00000101
0CE08 B9 02                         .db #$B9, #%00000010
0CE0A FF                            .db #LEVEL_END
0CE0B                           
0CE0B                           lvl_layout_06:
0CE0B 00 03                         .db #$00, #%00000011
0CE0D 20 03                         .db #$20, #%00000011
0CE0F 40 03                         .db #$40, #%00000011
0CE11 A0 03                         .db #$A0, #%00000011
0CE13 C0 03                         .db #$C0, #%00000011
0CE15 11 03                         .db #$11, #%00000011
0CE17 31 03                         .db #$31, #%00000011
0CE19 51 03                         .db #$51, #%00000011
0CE1B 91 03                         .db #$91, #%00000011
0CE1D B1 03                         .db #$B1, #%00000011
0CE1F D1 03                         .db #$D1, #%00000011
0CE21 02 03                         .db #$02, #%00000011
0CE23 22 03                         .db #$22, #%00000011
0CE25 42 03                         .db #$42, #%00000011
0CE27 A2 03                         .db #$A2, #%00000011
0CE29 C2 03                         .db #$C2, #%00000011
0CE2B 13 03                         .db #$13, #%00000011
0CE2D 33 03                         .db #$33, #%00000011
0CE2F 53 03                         .db #$53, #%00000011
0CE31 93 03                         .db #$93, #%00000011
0CE33 B3 03                         .db #$B3, #%00000011
0CE35 D3 03                         .db #$D3, #%00000011
0CE37 04 03                         .db #$04, #%00000011
0CE39 24 03                         .db #$24, #%00000011
0CE3B 44 03                         .db #$44, #%00000011
0CE3D A4 03                         .db #$A4, #%00000011
0CE3F C4 03                         .db #$C4, #%00000011
0CE41 15 03                         .db #$15, #%00000011
0CE43 35 03                         .db #$35, #%00000011
0CE45 55 03                         .db #$55, #%00000011
0CE47 95 03                         .db #$95, #%00000011
0CE49 B5 03                         .db #$B5, #%00000011
0CE4B D5 03                         .db #$D5, #%00000011
0CE4D 06 03                         .db #$06, #%00000011
0CE4F 26 03                         .db #$26, #%00000011
0CE51 46 03                         .db #$46, #%00000011
0CE53 A6 03                         .db #$A6, #%00000011
0CE55 C6 03                         .db #$C6, #%00000011
0CE57 17 03                         .db #$17, #%00000011
0CE59 37 03                         .db #$37, #%00000011
0CE5B 57 03                         .db #$57, #%00000011
0CE5D 97 03                         .db #$97, #%00000011
0CE5F B7 03                         .db #$B7, #%00000011
0CE61 D7 03                         .db #$D7, #%00000011
0CE63 08 03                         .db #$08, #%00000011
0CE65 28 03                         .db #$28, #%00000011
0CE67 48 03                         .db #$48, #%00000011
0CE69 A8 03                         .db #$A8, #%00000011
0CE6B C8 03                         .db #$C8, #%00000011
0CE6D 19 03                         .db #$19, #%00000011
0CE6F 39 03                         .db #$39, #%00000011
0CE71 59 03                         .db #$59, #%00000011
0CE73 99 03                         .db #$99, #%00000011
0CE75 B9 03                         .db #$B9, #%00000011
0CE77 D9 03                         .db #$D9, #%00000011
0CE79 60 4B                         .db #$60, #%01001011
0CE7B 71 CB                         .db #$71, #%11001011
0CE7D 62 4B                         .db #$62, #%01001011
0CE7F 64 4B                         .db #$64, #%01001011
0CE81 75 CB                         .db #$75, #%11001011
0CE83 66 4B                         .db #$66, #%01001011
0CE85 68 4B                         .db #$68, #%01001011
0CE87 79 0B                         .db #$79, #%00001011
0CE89 70 03                         .db #$70, #%00000011
0CE8B 72 03                         .db #$72, #%00000011
0CE8D 74 03                         .db #$74, #%00000011
0CE8F 76 03                         .db #$76, #%00000011
0CE91 78 03                         .db #$78, #%00000011
0CE93 FF                            .db #LEVEL_END
0CE94                           
0CE94                           lvl_layout_07:
0CE94 00 11                         .db #$00, #%00010001
0CE96 01 FA                         .db #$01, #%11111010
0CE98 12 BA                         .db #$12, #%10111010
0CE9A 23 DA                         .db #$23, #%11011010
0CE9C 34 FA                         .db #$34, #%11111010
0CE9E 05 DA                         .db #$05, #%11011010
0CEA0 15 FA                         .db #$15, #%11111010
0CEA2 45 BA                         .db #$45, #%10111010
0CEA4 56 DA                         .db #$56, #%11011010
0CEA6 27 BA                         .db #$27, #%10111010
0CEA8 67 DA                         .db #$67, #%11011010
0CEAA 38 3A                         .db #$38, #%00111010
0CEAC 78 BA                         .db #$78, #%10111010
0CEAE 09 3A                         .db #$09, #%00111010
0CEB0 39 3A                         .db #$39, #%00111010
0CEB2 89 1A                         .db #$89, #%00011010
0CEB4 B0 01                         .db #$B0, #%00000001
0CEB6 D0 01                         .db #$D0, #%00000001
0CEB8 A1 01                         .db #$A1, #%00000001
0CEBA C1 11                         .db #$C1, #%00010001
0CEBC B2 01                         .db #$B2, #%00000001
0CEBE D2 01                         .db #$D2, #%00000001
0CEC0 A3 01                         .db #$A3, #%00000001
0CEC2 C3 01                         .db #$C3, #%00000001
0CEC4 B4 01                         .db #$B4, #%00000001
0CEC6 D4 01                         .db #$D4, #%00000001
0CEC8 A5 01                         .db #$A5, #%00000001
0CECA C5 01                         .db #$C5, #%00000001
0CECC B6 01                         .db #$B6, #%00000001
0CECE D6 01                         .db #$D6, #%00000001
0CED0 A7 01                         .db #$A7, #%00000001
0CED2 C7 01                         .db #$C7, #%00000001
0CED4 FF                            .db #LEVEL_END
0CED5                           
0CED5                           lvl_layout_08:
0CED5 40 B5                         .db #$40, #%10110101
0CED7 31 0D                         .db #$31, #%00001101
0CED9 61 10                         .db #$61, #%00010000
0CEDB 42 C7                         .db #$42, #%11000111
0CEDD 52 67                         .db #$52, #%01100111
0CEDF 63 C7                         .db #$63, #%11000111
0CEE1 83 E7                         .db #$83, #%11100111
0CEE3 05 07                         .db #$05, #%00000111
0CEE5 15 3A                         .db #$15, #%00111010
0CEE7 07 63                         .db #$07, #%01100011
0CEE9 27 13                         .db #$27, #%00010011
0CEEB 38 A5                         .db #$38, #%10100101
0CEED 09 14                         .db #$09, #%00010100
0CEEF 19 05                         .db #$19, #%00000101
0CEF1 D0 E0                         .db #$D0, #%11100000
0CEF3 C2 A0                         .db #$C2, #%10100000
0CEF5 B3 E0                         .db #$B3, #%11100000
0CEF7 D5 E0                         .db #$D5, #%11100000
0CEF9 C6 E0                         .db #$C6, #%11100000
0CEFB B0 C4                         .db #$B0, #%11000100
0CEFD C0 A4                         .db #$C0, #%10100100
0CEFF D1 A4                         .db #$D1, #%10100100
0CF01 C4 24                         .db #$C4, #%00100100
0CF03 C5 04                         .db #$C5, #%00000100
0CF05 B7 44                         .db #$B7, #%01000100
0CF07 B8 A4                         .db #$B8, #%10100100
0CF09 D9 05                         .db #$D9, #%00000101
0CF0B FF                            .db #LEVEL_END
0CF0C                           
0CF0C                           lvl_layout_09:
0CF0C 81 04                         .db #$81, #%00000100
0CF0E D1 04                         .db #$D1, #%00000100
0CF10 32 C4                         .db #$32, #%11000100
0CF12 A2 C4                         .db #$A2, #%11000100
0CF14 C2 24                         .db #$C2, #%00100100
0CF16 13 24                         .db #$13, #%00100100
0CF18 53 04                         .db #$53, #%00000100
0CF1A C3 27                         .db #$C3, #%00100111
0CF1C 15 6C                         .db #$15, #%01101100
0CF1E 55 6C                         .db #$55, #%01101100
0CF20 95 6C                         .db #$95, #%01101100
0CF22 D5 0C                         .db #$D5, #%00001100
0CF24 27 C7                         .db #$27, #%11000111
0CF26 47 C7                         .db #$47, #%11000111
0CF28 67 C7                         .db #$67, #%11000111
0CF2A 87 C7                         .db #$87, #%11000111
0CF2C A7 C7                         .db #$A7, #%11000111
0CF2E C7 C7                         .db #$C7, #%11000111
0CF30 08 13                         .db #$08, #%00010011
0CF32 28 15                         .db #$28, #%00010101
0CF34 48 12                         .db #$48, #%00010010
0CF36 68 15                         .db #$68, #%00010101
0CF38 88 11                         .db #$88, #%00010001
0CF3A A8 10                         .db #$A8, #%00010000
0CF3C C8 14                         .db #$C8, #%00010100
0CF3E 09 07                         .db #$09, #%00000111
0CF40 19 03                         .db #$19, #%00000011
0CF42 39 05                         .db #$39, #%00000101
0CF44 59 02                         .db #$59, #%00000010
0CF46 79 05                         .db #$79, #%00000101
0CF48 99 01                         .db #$99, #%00000001
0CF4A B9 00                         .db #$B9, #%00000000
0CF4C D9 04                         .db #$D9, #%00000100
0CF4E FF                            .db #LEVEL_END
0CF4F                           
0CF4F                           lvl_layout_10:
0CF4F 00 02                         .db #$00, #%00000010
0CF51 10 C9                         .db #$10, #%11001001
0CF53 50 C9                         .db #$50, #%11001001
0CF55 90 C9                         .db #$90, #%11001001
0CF57 D0 C9                         .db #$D0, #%11001001
0CF59 31 C9                         .db #$31, #%11001001
0CF5B 71 C9                         .db #$71, #%11001001
0CF5D B1 C9                         .db #$B1, #%11001001
0CF5F 13 C9                         .db #$13, #%11001001
0CF61 53 C9                         .db #$53, #%11001001
0CF63 93 C9                         .db #$93, #%11001001
0CF65 D3 C9                         .db #$D3, #%11001001
0CF67 34 C9                         .db #$34, #%11001001
0CF69 74 C9                         .db #$74, #%11001001
0CF6B B4 C9                         .db #$B4, #%11001001
0CF6D 16 C9                         .db #$16, #%11001001
0CF6F 56 C9                         .db #$56, #%11001001
0CF71 96 C9                         .db #$96, #%11001001
0CF73 D6 C9                         .db #$D6, #%11001001
0CF75 37 C9                         .db #$37, #%11001001
0CF77 77 C9                         .db #$77, #%11001001
0CF79 B7 C9                         .db #$B7, #%11001001
0CF7B D8 12                         .db #$D8, #%00010010
0CF7D FF                            .db #LEVEL_END
0CF7E                           
0CF7E                           lvl_layout_11:
0CF7E 00 65                         .db #$00, #%01100101
0CF80 40 45                         .db #$40, #%01000101
0CF82 50 A7                         .db #$50, #%10100111
0CF84 80 05                         .db #$80, #%00000101
0CF86 90 A7                         .db #$90, #%10100111
0CF88 A0 65                         .db #$A0, #%01100101
0CF8A 01 43                         .db #$01, #%01000011
0CF8C 31 23                         .db #$31, #%00100011
0CF8E 61 A7                         .db #$61, #%10100111
0CF90 81 A7                         .db #$81, #%10100111
0CF92 A1 63                         .db #$A1, #%01100011
0CF94 02 44                         .db #$02, #%01000100
0CF96 32 44                         .db #$32, #%01000100
0CF98 92 04                         .db #$92, #%00000100
0CF9A A2 64                         .db #$A2, #%01100100
0CF9C 03 40                         .db #$03, #%01000000
0CF9E 33 40                         .db #$33, #%01000000
0CFA0 63 A1                         .db #$63, #%10100001
0CFA2 83 A2                         .db #$83, #%10100010
0CFA4 93 00                         .db #$93, #%00000000
0CFA6 A3 60                         .db #$A3, #%01100000
0CFA8 04 41                         .db #$04, #%01000001
0CFAA 34 41                         .db #$34, #%01000001
0CFAC 94 02                         .db #$94, #%00000010
0CFAE A4 62                         .db #$A4, #%01100010
0CFB0 05 47                         .db #$05, #%01000111
0CFB2 35 67                         .db #$35, #%01100111
0CFB4 75 0A                         .db #$75, #%00001010
0CFB6 85 47                         .db #$85, #%01000111
0CFB8 B5 47                         .db #$B5, #%01000111
0CFBA 06 E7                         .db #$06, #%11100111
0CFBC 16 5A                         .db #$16, #%01011010
0CFBE 26 11                         .db #$26, #%00010001
0CFC0 46 13                         .db #$46, #%00010011
0CFC2 56 1A                         .db #$56, #%00011010
0CFC4 66 14                         .db #$66, #%00010100
0CFC6 86 10                         .db #$86, #%00010000
0CFC8 96 5A                         .db #$96, #%01011010
0CFCA A6 12                         .db #$A6, #%00010010
0CFCC C6 15                         .db #$C6, #%00010101
0CFCE D6 E7                         .db #$D6, #%11100111
0CFD0 FF                            .db #LEVEL_END
0CFD1                           
0CFD1                           lvl_layout_12:
0CFD1 00 00                         .db #$00, #%00000000
0CFD3 50 C0                         .db #$50, #%11000000
0CFD5 80 00                         .db #$80, #%00000000
0CFD7 61 00                         .db #$61, #%00000000
0CFD9 22 C0                         .db #$22, #%11000000
0CFDB 82 E0                         .db #$82, #%11100000
0CFDD C2 E0                         .db #$C2, #%11100000
0CFDF A3 20                         .db #$A3, #%00100000
0CFE1 C3 10                         .db #$C3, #%00010000
0CFE3 04 00                         .db #$04, #%00000000
0CFE5 54 20                         .db #$54, #%00100000
0CFE7 15 0A                         .db #$15, #%00001010
0CFE9 25 C0                         .db #$25, #%11000000
0CFEB 55 E0                         .db #$55, #%11100000
0CFED 86 20                         .db #$86, #%00100000
0CFEF C6 E0                         .db #$C6, #%11100000
0CFF1 C7 A0                         .db #$C7, #%10100000
0CFF3 88 00                         .db #$88, #%00000000
0CFF5 59 00                         .db #$59, #%00000000
0CFF7 89 20                         .db #$89, #%00100000
0CFF9 D9 1A                         .db #$D9, #%00011010
0CFFB FF                            .db #LEVEL_END
0CFFC                           
0CFFC                           lvl_layout_13:
0CFFC 10 E0                         .db #$10, #%11100000
0CFFE 20 E0                         .db #$20, #%11100000
0D000 30 E0                         .db #$30, #%11100000
0D002 40 40                         .db #$40, #%01000000
0D004 80 60                         .db #$80, #%01100000
0D006 C0 E0                         .db #$C0, #%11100000
0D008 D0 E0                         .db #$D0, #%11100000
0D00A 41 40                         .db #$41, #%01000000
0D00C 71 60                         .db #$71, #%01100000
0D00E 52 60                         .db #$52, #%01100000
0D010 A2 20                         .db #$A2, #%00100000
0D012 43 60                         .db #$43, #%01100000
0D014 83 60                         .db #$83, #%01100000
0D016 14 74                         .db #$14, #%01110100
0D018 54 74                         .db #$54, #%01110100
0D01A 94 74                         .db #$94, #%01110100
0D01C D4 14                         .db #$D4, #%00010100
0D01E 15 0D                         .db #$15, #%00001101
0D020 55 0D                         .db #$55, #%00001101
0D022 95 0D                         .db #$95, #%00001101
0D024 D5 0D                         .db #$D5, #%00001101
0D026 26 0D                         .db #$26, #%00001101
0D028 46 0D                         .db #$46, #%00001101
0D02A 66 0D                         .db #$66, #%00001101
0D02C 86 0D                         .db #$86, #%00001101
0D02E A6 0D                         .db #$A6, #%00001101
0D030 C6 0D                         .db #$C6, #%00001101
0D032 07 10                         .db #$07, #%00010000
0D034 37 0D                         .db #$37, #%00001101
0D036 77 0D                         .db #$77, #%00001101
0D038 B7 0D                         .db #$B7, #%00001101
0D03A 28 0D                         .db #$28, #%00001101
0D03C 48 0D                         .db #$48, #%00001101
0D03E 68 0D                         .db #$68, #%00001101
0D040 88 0D                         .db #$88, #%00001101
0D042 A8 0D                         .db #$A8, #%00001101
0D044 C8 0D                         .db #$C8, #%00001101
0D046 19 0D                         .db #$19, #%00001101
0D048 59 0D                         .db #$59, #%00001101
0D04A 99 0D                         .db #$99, #%00001101
0D04C D9 0D                         .db #$D9, #%00001101
0D04E FF                            .db #LEVEL_END
0D04F                           
0D04F                           lvl_layout_14:
0D04F 00 67                         .db #$00, #%01100111
0D051 40 67                         .db #$40, #%01100111
0D053 80 67                         .db #$80, #%01100111
0D055 C0 27                         .db #$C0, #%00100111
0D057 01 27                         .db #$01, #%00100111
0D059 31 C7                         .db #$31, #%11000111
0D05B 51 C7                         .db #$51, #%11000111
0D05D 71 C7                         .db #$71, #%11000111
0D05F 91 C7                         .db #$91, #%11000111
0D061 B1 C7                         .db #$B1, #%11000111
0D063 D1 07                         .db #$D1, #%00000111
0D065 02 E7                         .db #$02, #%11100111
0D067 06 E7                         .db #$06, #%11100111
0D069 13 07                         .db #$13, #%00000111
0D06B D3 07                         .db #$D3, #%00000111
0D06D 15 07                         .db #$15, #%00000111
0D06F 35 07                         .db #$35, #%00000111
0D071 55 07                         .db #$55, #%00000111
0D073 75 07                         .db #$75, #%00000111
0D075 95 07                         .db #$95, #%00000111
0D077 B5 07                         .db #$B5, #%00000111
0D079 D5 07                         .db #$D5, #%00000111
0D07B 17 07                         .db #$17, #%00000111
0D07D 37 C7                         .db #$37, #%11000111
0D07F 57 C7                         .db #$57, #%11000111
0D081 77 C7                         .db #$77, #%11000111
0D083 97 C7                         .db #$97, #%11000111
0D085 B7 C7                         .db #$B7, #%11000111
0D087 D7 07                         .db #$D7, #%00000111
0D089 19 07                         .db #$19, #%00000111
0D08B D9 07                         .db #$D9, #%00000111
0D08D 22 4C                         .db #$22, #%01001100
0D08F 62 4C                         .db #$62, #%01001100
0D091 A2 4C                         .db #$A2, #%01001100
0D093 24 0C                         .db #$24, #%00001100
0D095 44 0C                         .db #$44, #%00001100
0D097 64 0C                         .db #$64, #%00001100
0D099 84 0C                         .db #$84, #%00001100
0D09B A4 0C                         .db #$A4, #%00001100
0D09D C4 0C                         .db #$C4, #%00001100
0D09F 26 0C                         .db #$26, #%00001100
0D0A1 46 0C                         .db #$46, #%00001100
0D0A3 66 0C                         .db #$66, #%00001100
0D0A5 86 0C                         .db #$86, #%00001100
0D0A7 A6 0C                         .db #$A6, #%00001100
0D0A9 C6 0C                         .db #$C6, #%00001100
0D0AB 28 4C                         .db #$28, #%01001100
0D0AD 68 4C                         .db #$68, #%01001100
0D0AF A8 4C                         .db #$A8, #%01001100
0D0B1 32 04                         .db #$32, #%00000100
0D0B3 52 04                         .db #$52, #%00000100
0D0B5 72 04                         .db #$72, #%00000100
0D0B7 92 04                         .db #$92, #%00000100
0D0B9 B2 04                         .db #$B2, #%00000100
0D0BB 38 04                         .db #$38, #%00000100
0D0BD 58 04                         .db #$58, #%00000100
0D0BF 78 04                         .db #$78, #%00000100
0D0C1 98 04                         .db #$98, #%00000100
0D0C3 B8 04                         .db #$B8, #%00000100
0D0C5 FF                            .db #LEVEL_END
0D0C6                           
0D0C6                           lvl_layout_15:
0D0C6 00 7A                         .db #$00, #%01111010
0D0C8 40 7A                         .db #$40, #%01111010
0D0CA 80 7A                         .db #$80, #%01111010
0D0CC C0 3A                         .db #$C0, #%00111010
0D0CE 31 04                         .db #$31, #%00000100
0D0D0 51 04                         .db #$51, #%00000100
0D0D2 81 04                         .db #$81, #%00000100
0D0D4 A1 04                         .db #$A1, #%00000100
0D0D6 05 E4                         .db #$05, #%11100100
0D0D8 15 64                         .db #$15, #%01100100
0D0DA 55 64                         .db #$55, #%01100100
0D0DC 95 64                         .db #$95, #%01100100
0D0DE D5 E4                         .db #$D5, #%11100100
0D0E0 26 04                         .db #$26, #%00000100
0D0E2 46 44                         .db #$46, #%01000100
0D0E4 76 64                         .db #$76, #%01100100
0D0E6 C6 04                         .db #$C6, #%00000100
0D0E8 17 04                         .db #$17, #%00000100
0D0EA 37 64                         .db #$37, #%01100100
0D0EC 77 44                         .db #$77, #%01000100
0D0EE B7 04                         .db #$B7, #%00000100
0D0F0 18 64                         .db #$18, #%01100100
0D0F2 58 64                         .db #$58, #%01100100
0D0F4 98 64                         .db #$98, #%01100100
0D0F6 FF                            .db #LEVEL_END
0D0F7                           
0D0F7                           lvl_layout_16:
0D0F7 10 E1                         .db #$10, #%11100001
0D0F9 20 9A                         .db #$20, #%10011010
0D0FB 30 E1                         .db #$30, #%11100001
0D0FD 40 E1                         .db #$40, #%11100001
0D0FF 50 E1                         .db #$50, #%11100001
0D101 60 C1                         .db #$60, #%11000001
0D103 70 E1                         .db #$70, #%11100001
0D105 80 E1                         .db #$80, #%11100001
0D107 90 E1                         .db #$90, #%11100001
0D109 A0 61                         .db #$A0, #%01100001
0D10B 21 C1                         .db #$21, #%11000001
0D10D A1 1A                         .db #$A1, #%00011010
0D10F B1 41                         .db #$B1, #%01000001
0D111 A2 E1                         .db #$A2, #%11100001
0D113 B2 E1                         .db #$B2, #%11100001
0D115 C2 1A                         .db #$C2, #%00011010
0D117 D2 E1                         .db #$D2, #%11100001
0D119 63 1A                         .db #$63, #%00011010
0D11B C3 C1                         .db #$C3, #%11000001
0D11D 14 61                         .db #$14, #%01100001
0D11F 54 61                         .db #$54, #%01100001
0D121 94 C1                         .db #$94, #%11000001
0D123 15 61                         .db #$15, #%01100001
0D125 55 41                         .db #$55, #%01000001
0D127 85 1A                         .db #$85, #%00011010
0D129 16 41                         .db #$16, #%01000001
0D12B 46 1A                         .db #$46, #%00011010
0D12D 56 61                         .db #$56, #%01100001
0D12F A6 61                         .db #$A6, #%01100001
0D131 17 67                         .db #$17, #%01100111
0D133 57 67                         .db #$57, #%01100111
0D135 97 67                         .db #$97, #%01100111
0D137 D7 07                         .db #$D7, #%00000111
0D139 28 41                         .db #$28, #%01000001
0D13B 58 61                         .db #$58, #%01100001
0D13D A8 41                         .db #$A8, #%01000001
0D13F 18 11                         .db #$18, #%00010001
0D141 38 11                         .db #$38, #%00010001
0D143 98 11                         .db #$98, #%00010001
0D145 B8 11                         .db #$B8, #%00010001
0D147 D8 11                         .db #$D8, #%00010001
0D149 59 09                         .db #$59, #%00001001
0D14B FF                            .db #LEVEL_END
0D14C                           
0D14C                           lvl_layout_17:
0D14C 10 EA                         .db #$10, #%11101010
0D14E 20 E2                         .db #$20, #%11100010
0D150 30 62                         .db #$30, #%01100010
0D152 70 02                         .db #$70, #%00000010
0D154 80 6A                         .db #$80, #%01101010
0D156 90 22                         .db #$90, #%00100010
0D158 01 AA                         .db #$01, #%10101010
0D15A 31 6A                         .db #$31, #%01101010
0D15C 81 2A                         .db #$81, #%00101010
0D15E A1 02                         .db #$A1, #%00000010
0D160 C1 02                         .db #$C1, #%00000010
0D162 D1 0A                         .db #$D1, #%00001010
0D164 32 EA                         .db #$32, #%11101010
0D166 42 6A                         .db #$42, #%01101010
0D168 62 02                         .db #$62, #%00000010
0D16A 92 6A                         .db #$92, #%01101010
0D16C D2 E2                         .db #$D2, #%11100010
0D16E 43 1A                         .db #$43, #%00011010
0D170 53 CA                         .db #$53, #%11001010
0D172 73 02                         .db #$73, #%00000010
0D174 83 4A                         .db #$83, #%01001010
0D176 B3 CA                         .db #$B3, #%11001010
0D178 C3 EA                         .db #$C3, #%11101010
0D17A 04 0A                         .db #$04, #%00001010
0D17C 14 A2                         .db #$14, #%10100010
0D17E 24 AA                         .db #$24, #%10101010
0D180 44 AA                         .db #$44, #%10101010
0D182 64 6A                         .db #$64, #%01101010
0D184 65 6A                         .db #$65, #%01101010
0D186 A5 AA                         .db #$A5, #%10101010
0D188 06 EA                         .db #$06, #%11101010
0D18A 16 62                         .db #$16, #%01100010
0D18C 66 22                         .db #$66, #%00100010
0D18E 86 2A                         .db #$86, #%00101010
0D190 17 42                         .db #$17, #%01000010
0D192 47 12                         .db #$47, #%00010010
0D194 57 6A                         .db #$57, #%01101010
0D196 97 4A                         .db #$97, #%01001010
0D198 A7 02                         .db #$A7, #%00000010
0D19A 18 02                         .db #$18, #%00000010
0D19C 28 0A                         .db #$28, #%00001010
0D19E 38 22                         .db #$38, #%00100010
0D1A0 68 2A                         .db #$68, #%00101010
0D1A2 88 62                         .db #$88, #%01100010
0D1A4 C8 0A                         .db #$C8, #%00001010
0D1A6 D8 02                         .db #$D8, #%00000010
0D1A8 19 2A                         .db #$19, #%00101010
0D1AA 39 2A                         .db #$39, #%00101010
0D1AC 69 42                         .db #$69, #%01000010
0D1AE 99 2A                         .db #$99, #%00101010
0D1B0 B9 42                         .db #$B9, #%01000010
0D1B2 FF                            .db #LEVEL_END
0D1B3                           
0D1B3                           lvl_layout_18:
0D1B3 00 12                         .db #$00, #%00010010
0D1B5 40 1A                         .db #$40, #%00011010
0D1B7 50 11                         .db #$50, #%00010001
0D1B9 70 1A                         .db #$70, #%00011010
0D1BB 80 10                         .db #$80, #%00010000
0D1BD D0 13                         .db #$D0, #%00010011
0D1BF 01 1A                         .db #$01, #%00011010
0D1C1 22 15                         .db #$22, #%00010101
0D1C3 A2 1A                         .db #$A2, #%00011010
0D1C5 B2 14                         .db #$B2, #%00010100
0D1C7 03 67                         .db #$03, #%01100111
0D1C9 43 67                         .db #$43, #%01100111
0D1CB 83 67                         .db #$83, #%01100111
0D1CD 24 09                         .db #$24, #%00001001
0D1CF 74 0D                         .db #$74, #%00001101
0D1D1 C4 0A                         .db #$C4, #%00001010
0D1D3 05 A7                         .db #$05, #%10100111
0D1D5 45 27                         .db #$45, #%00100111
0D1D7 95 27                         .db #$95, #%00100111
0D1D9 16 C7                         .db #$16, #%11000111
0D1DB 36 67                         .db #$36, #%01100111
0D1DD 86 67                         .db #$86, #%01100111
0D1DF D6 07                         .db #$D6, #%00000111
0D1E1 07 A3                         .db #$07, #%10100011
0D1E3 27 23                         .db #$27, #%00100011
0D1E5 47 C7                         .db #$47, #%11000111
0D1E7 57 A0                         .db #$57, #%10100000
0D1E9 67 A7                         .db #$67, #%10100111
0D1EB 77 20                         .db #$77, #%00100000
0D1ED 97 C7                         .db #$97, #%11000111
0D1EF A7 A4                         .db #$A7, #%10100100
0D1F1 B7 A7                         .db #$B7, #%10100111
0D1F3 C7 24                         .db #$C7, #%00100100
0D1F5 28 0B                         .db #$28, #%00001011
0D1F7 38 A3                         .db #$38, #%10100011
0D1F9 78 08                         .db #$78, #%00001000
0D1FB 88 A3                         .db #$88, #%10100011
0D1FD C8 0C                         .db #$C8, #%00001100
0D1FF D8 A4                         .db #$D8, #%10100100
0D201 09 43                         .db #$09, #%01000011
0D203 59 40                         .db #$59, #%01000000
0D205 A9 44                         .db #$A9, #%01000100
0D207 FF                            .db #LEVEL_END
0D208                           
0D208                           lvl_layout_19:
0D208 11 A8                         .db #$11, #%10101000
0D20A 21 68                         .db #$21, #%01101000
0D20C 81 28                         .db #$81, #%00101000
0D20E B1 48                         .db #$B1, #%01001000
0D210 22 48                         .db #$22, #%01001000
0D212 62 68                         .db #$62, #%01101000
0D214 B2 28                         .db #$B2, #%00101000
0D216 23 28                         .db #$23, #%00101000
0D218 83 28                         .db #$83, #%00101000
0D21A B3 28                         .db #$B3, #%00101000
0D21C 04 E8                         .db #$04, #%11101000
0D21E 24 08                         .db #$24, #%00001000
0D220 44 08                         .db #$44, #%00001000
0D222 64 E8                         .db #$64, #%11101000
0D224 84 E8                         .db #$84, #%11101000
0D226 C4 A8                         .db #$C4, #%10101000
0D228 D4 E8                         .db #$D4, #%11101000
0D22A 15 48                         .db #$15, #%01001000
0D22C 55 C8                         .db #$55, #%11001000
0D22E 75 C8                         .db #$75, #%11001000
0D230 A5 08                         .db #$A5, #%00001000
0D232 36 08                         .db #$36, #%00001000
0D234 B6 08                         .db #$B6, #%00001000
0D236 27 48                         .db #$27, #%01001000
0D238 97 28                         .db #$97, #%00101000
0D23A C7 08                         .db #$C7, #%00001000
0D23C 09 61                         .db #$09, #%01100001
0D23E 19 11                         .db #$19, #%00010001
0D240 49 61                         .db #$49, #%01100001
0D242 89 31                         .db #$89, #%00110001
0D244 A9 61                         .db #$A9, #%01100001
0D246 FF                            .db #LEVEL_END
0D247                           
0D247                           lvl_layout_20:
0D247 00 60                         .db #$00, #%01100000
0D249 10 1A                         .db #$10, #%00011010
0D24B 40 A7                         .db #$40, #%10100111
0D24D 50 20                         .db #$50, #%00100000
0D24F 70 1A                         .db #$70, #%00011010
0D251 80 40                         .db #$80, #%01000000
0D253 B0 1A                         .db #$B0, #%00011010
0D255 C0 20                         .db #$C0, #%00100000
0D257 01 40                         .db #$01, #%01000000
0D259 31 1A                         .db #$31, #%00011010
0D25B A1 40                         .db #$A1, #%01000000
0D25D D1 1A                         .db #$D1, #%00011010
0D25F 43 67                         .db #$43, #%01100111
0D261 83 47                         .db #$83, #%01000111
0D263 44 A7                         .db #$44, #%10100111
0D265 54 25                         .db #$54, #%00100101
0D267 94 08                         .db #$94, #%00001000
0D269 A4 A7                         .db #$A4, #%10100111
0D26B 55 05                         .db #$55, #%00000101
0D26D 65 08                         .db #$65, #%00001000
0D26F 06 27                         .db #$06, #%00100111
0D271 36 67                         .db #$36, #%01100111
0D273 76 28                         .db #$76, #%00101000
0D275 A6 27                         .db #$A6, #%00100111
0D277 D6 07                         .db #$D6, #%00000111
0D279 A7 A7                         .db #$A7, #%10100111
0D27B 08 60                         .db #$08, #%01100000
0D27D 09 60                         .db #$09, #%01100000
0D27F 18 A7                         .db #$18, #%10100111
0D281 48 A7                         .db #$48, #%10100111
0D283 58 47                         .db #$58, #%01000111
0D285 88 27                         .db #$88, #%00100111
0D287 B8 20                         .db #$B8, #%00100000
0D289 D8 1A                         .db #$D8, #%00011010
0D28B 59 15                         .db #$59, #%00010101
0D28D 69 60                         .db #$69, #%01100000
0D28F A9 60                         .db #$A9, #%01100000
0D291 FF                            .db #LEVEL_END
0D292                           
0D292                           lvl_layout_21:
0D292 00 13                         .db #$00, #%00010011
0D294 10 11                         .db #$10, #%00010001
0D296 20 67                         .db #$20, #%01100111
0D298 60 67                         .db #$60, #%01100111
0D29A A0 47                         .db #$A0, #%01000111
0D29C D0 15                         .db #$D0, #%00010101
0D29E 32 63                         .db #$32, #%01100011
0D2A0 72 05                         .db #$72, #%00000101
0D2A2 82 43                         .db #$82, #%01000011
0D2A4 B2 43                         .db #$B2, #%01000011
0D2A6 33 03                         .db #$33, #%00000011
0D2A8 43 2A                         .db #$43, #%00101010
0D2AA 63 7A                         .db #$63, #%01111010
0D2AC 73 2A                         .db #$73, #%00101010
0D2AE A3 7A                         .db #$A3, #%01111010
0D2B0 34 63                         .db #$34, #%01100011
0D2B2 74 63                         .db #$74, #%01100011
0D2B4 B4 43                         .db #$B4, #%01000011
0D2B6 06 63                         .db #$06, #%01100011
0D2B8 46 63                         .db #$46, #%01100011
0D2BA 86 63                         .db #$86, #%01100011
0D2BC C6 C3                         .db #$C6, #%11000011
0D2BE 07 7A                         .db #$07, #%01111010
0D2C0 47 7A                         .db #$47, #%01111010
0D2C2 67 0A                         .db #$67, #%00001010
0D2C4 87 7A                         .db #$87, #%01111010
0D2C6 08 13                         .db #$08, #%00010011
0D2C8 18 43                         .db #$18, #%01000011
0D2CA 48 63                         .db #$48, #%01100011
0D2CC 88 63                         .db #$88, #%01100011
0D2CE FF                            .db #LEVEL_END
0D2CF                           
0D2CF                           lvl_layout_22:
0D2CF 00 7A                         .db #$00, #%01111010
0D2D1 40 7A                         .db #$40, #%01111010
0D2D3 80 7A                         .db #$80, #%01111010
0D2D5 C0 3A                         .db #$C0, #%00111010
0D2D7 13 67                         .db #$13, #%01100111
0D2D9 83 A7                         .db #$83, #%10100111
0D2DB B3 07                         .db #$B3, #%00000111
0D2DD 14 07                         .db #$14, #%00000111
0D2DF 44 07                         .db #$44, #%00000111
0D2E1 A4 07                         .db #$A4, #%00000111
0D2E3 15 A5                         .db #$15, #%10100101
0D2E5 45 A5                         .db #$45, #%10100101
0D2E7 85 25                         .db #$85, #%00100101
0D2E9 86 05                         .db #$86, #%00000101
0D2EB A6 05                         .db #$A6, #%00000101
0D2ED 17 11                         .db #$17, #%00010001
0D2EF 47 A1                         .db #$47, #%10100001
0D2F1 87 A1                         .db #$87, #%10100001
0D2F3 B7 A1                         .db #$B7, #%10100001
0D2F5 18 41                         .db #$18, #%01000001
0D2F7 68 01                         .db #$68, #%00000001
0D2F9 D8 01                         .db #$D8, #%00000001
0D2FB FF                            .db #LEVEL_END
0D2FC                           
0D2FC                           lvl_layout_23:
0D2FC 00 71                         .db #$00, #%01110001
0D2FE 40 11                         .db #$40, #%00010001
0D300 50 43                         .db #$50, #%01000011
0D302 80 D1                         .db #$80, #%11010001
0D304 90 E3                         .db #$90, #%11100011
0D306 A0 63                         .db #$A0, #%01100011
0D308 01 63                         .db #$01, #%01100011
0D30A 41 63                         .db #$41, #%01100011
0D30C A1 63                         .db #$A1, #%01100011
0D30E 02 63                         .db #$02, #%01100011
0D310 42 63                         .db #$42, #%01100011
0D312 62 11                         .db #$62, #%00010001
0D314 A2 67                         .db #$A2, #%01100111
0D316 04 63                         .db #$04, #%01100011
0D318 44 23                         .db #$44, #%00100011
0D31A 64 D1                         .db #$64, #%11010001
0D31C 74 E3                         .db #$74, #%11100011
0D31E 84 F1                         .db #$84, #%11110001
0D320 94 E3                         .db #$94, #%11100011
0D322 A4 C7                         .db #$A4, #%11000111
0D324 B4 23                         .db #$B4, #%00100011
0D326 05 63                         .db #$05, #%01100011
0D328 45 23                         .db #$45, #%00100011
0D32A 06 71                         .db #$06, #%01110001
0D32C 46 11                         .db #$46, #%00010001
0D32E 56 E3                         .db #$56, #%11100011
0D330 D6 07                         .db #$D6, #%00000111
0D332 17 D1                         .db #$17, #%11010001
0D334 27 43                         .db #$27, #%01000011
0D336 67 D1                         .db #$67, #%11010001
0D338 A7 C7                         .db #$A7, #%11000111
0D33A C7 A7                         .db #$C7, #%10100111
0D33C D7 B3                         .db #$D7, #%10110011
0D33E 28 43                         .db #$28, #%01000011
0D340 78 43                         .db #$78, #%01000011
0D342 29 43                         .db #$29, #%01000011
0D344 79 43                         .db #$79, #%01000011
0D346 FF                           .db #LEVEL_END
0D347                           
0D347                           lvl_layout_24:
0D347 02 67                         .db #$02, #%01100111
0D349 42 67                         .db #$42, #%01100111
0D34B 82 67                         .db #$82, #%01100111
0D34D 05 67                         .db #$05, #%01100111
0D34F 45 67                         .db #$45, #%01100111
0D351 85 67                         .db #$85, #%01100111
0D353 08 67                         .db #$08, #%01100111
0D355 48 67                         .db #$48, #%01100111
0D357 88 67                         .db #$88, #%01100111
0D359 30 E7                         .db #$30, #%11100111
0D35B 70 E7                         .db #$70, #%11100111
0D35D B0 E7                         .db #$B0, #%11100111
0D35F 34 E7                         .db #$34, #%11100111
0D361 74 E7                         .db #$74, #%11100111
0D363 B4 E7                         .db #$B4, #%11100111
0D365 20 13                         .db #$20, #%00010011
0D367 40 10                         .db #$40, #%00010000
0D369 80 02                         .db #$80, #%00000010
0D36B 41 05                         .db #$41, #%00000101
0D36D B1 09                         .db #$B1, #%00001001
0D36F 02 09                         .db #$02, #%00001001
0D371 52 0C                         .db #$52, #%00001100
0D373 13 11                         .db #$13, #%00010001
0D375 33 04                         .db #$33, #%00000100
0D377 74 0C                         .db #$74, #%00001100
0D379 B4 08                         .db #$B4, #%00001000
0D37B 15 09                         .db #$15, #%00001001
0D37D 55 0C                         .db #$55, #%00001100
0D37F 95 0C                         .db #$95, #%00001100
0D381 47 03                         .db #$47, #%00000011
0D383 A7 12                         .db #$A7, #%00010010
0D385 18 15                         .db #$18, #%00010101
0D387 09 05                         .db #$09, #%00000101
0D389 19 03                         .db #$19, #%00000011
0D38B FF                            .db #LEVEL_END
0D38C                           
0D38C                           lvl_layout_25:
0D38C 00 12                         .db #$00, #%00010010
0D38E 10 63                         .db #$10, #%01100011
0D390 60 63                         .db #$60, #%01100011
0D392 A0 07                         .db #$A0, #%00000111
0D394 01 11                         .db #$01, #%00010001
0D396 A1 02                         .db #$A1, #%00000010
0D398 02 67                         .db #$02, #%01100111
0D39A 42 07                         .db #$42, #%00000111
0D39C 62 67                         .db #$62, #%01100111
0D39E A2 C7                         .db #$A2, #%11000111
0D3A0 03 61                         .db #$03, #%01100001
0D3A2 43 01                         .db #$43, #%00000001
0D3A4 63 61                         .db #$63, #%01100001
0D3A6 A6 E7                         .db #$A6, #%11100111
0D3A8 B6 47                         .db #$B6, #%01000111
0D3AA C6 01                         .db #$C6, #%00000001
0D3AC B7 42                         .db #$B7, #%01000010
0D3AE B8 42                         .db #$B8, #%01000010
0D3B0 C8 0A                         .db #$C8, #%00001010
0D3B2 09 7A                         .db #$09, #%01111010
0D3B4 49 7A                         .db #$49, #%01111010
0D3B6 89 3A                         .db #$89, #%00111010
0D3B8 B9 42                         .db #$B9, #%01000010
0D3BA FF                            .db #LEVEL_END
0D3BB                           
0D3BB                           ;; Level layout address pointers
0D3BB                           tbl_lvl_layout_hi:
0D3BB CC CC CD CD CD                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D3C0 CE CE CE CF CF                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D3C5 CF CF CF D0 D0                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D3CA D0 D1 D1 D2 D2                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D3CF D2 D2 D2 D3 D3                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D3D4                           
0D3D4                           tbl_lvl_layout_lo:
0D3D4 DC F7 2C 5F D0                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D3D9 0B 94 D5 0C 4F                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D3DE 7E D1 FC 4F C6                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D3E3 F7 4C B3 08 47                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D3E8 92 CF FC 47 8C                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D3ED                           
0D3ED                           ;; Ball start position (#$YX)
0D3ED                           tbl_lvl_ball_startpos:
0D3ED 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D3F2 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D3F7 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D3FC 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D401 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D406                               
0D406                           ;; Ball start direction, color and tile score
0D406                           ;; #% ccc v tttt
0D406                           ;;    ||| | ++++-- tile score
0D406                           ;;    ||| +------- vertical direction, up (0) or down
0D406                           ;;    +++--------- color (CBRYGM)
0D406                           tbl_lvl_ball_init:
0D406 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D40B 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D410 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D415 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D41A 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D41F                           
0D41F                           
0D41F                           
0D41F                           ;; Helper table to multiply values by 16
0D41F                           tbl_Times16:
0D41F 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D427 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D42F                               
0D42F                           
0D42F                           ;; Helper table to multiply values by 64
0D42F                           tbl_Times64:
0D42F 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D433                           
0D433                           
0D433                           ;; Metatile ID to CHR data mapper
0D433                           tbl_GametileTopLeft:
0D433 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D43D                           
0D43D                           tbl_GametileTopRight:
0D43D 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D447                           
0D447                           tbl_GametileBottomLeft:
0D447 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D451                           
0D451                           tbl_GametileBottomRight:
0D451 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D45B                           
0D45B                           ;; Metatile ID to RAM byte data mapper
0D45B                           tbl_GameTileRamByte:
0D45B 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D460                           
0D460                           ;; HUD text data
0D460                           tbl_HudText:
0D460 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D468 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D46F 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D477 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D47C                           
0D47C                           ;; NMI handler
0D47C                           NMI:
0D47C                               .include "interrupt/nmi.asm"
0D47C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D47C                           ;;
0D47C                           ;; include/nmi.asm
0D47C                           ;;
0D47C                           ;; Non-maskable interrupt script. This script is being executed
0D47C                           ;; when vBlank hits.
0D47C                           ;;
0D47C                           ;;
0D47C                           
0D47C                               ;; Preserve accumulator through stack
0D47C 48                            PHA
0D47D                           
0D47D                               ;; Should NMI be skipped?
0D47D A5 13                         LDA skip_nmi
0D47F F0 03                         BEQ +
0D481 4C 7A D5                          JMP +skip_nmi
0D484                               +
0D484                           
0D484                               ;; When in NMI, skip additional NMI requests
0D484 A9 01                         LDA #$01
0D486 85 13                         STA skip_nmi
0D488                           
0D488                               ;; Preserve X, Y, and PC through stack
0D488 8A                            TXA
0D489 48                            PHA
0D48A 98                            TYA
0D48B 48                            PHA
0D48C 08                            PHP
0D48D                               
0D48D                               ;; Check forced NMI skip
0D48D A5 14                         LDA force_skip_nmi
0D48F F0 03                         BEQ +
0D491 4C 6B D5                          JMP +force_skip_nmi
0D494                               +
0D494                           
0D494                               ;; Update PPU mask
0D494                               ;LDA #$00
0D494                               ;STA PPU_CTRL
0D494 A5 12                         LDA soft_ppu_mask
0D496 8D 01 20                      STA PPU_MASK
0D499                               
0D499                               
0D499                               ;; Additional PPU updates go here
0D499                               .include "game/interrupt/nmi.asm"
0D499                           
0D499                               ;; Check if ppu_buffer needs updating
0D499 A5 2E                         LDA ppu_buffer_update
0D49B D0 03                         BNE +
0D49D 4C DF D4                          JMP +no_ppu_buffer_update
0D4A0                               +
0D4A0                           
0D4A0                               ;; Reset ppu control register and mask
0D4A0 A2 00                         LDX #$00
0D4A2 8E 00 20                      STX PPU_CTRL
0D4A5 8E 01 20                      STX PPU_MASK
0D4A8                           
0D4A8                               ;; Set up loop
0D4A8                               -
0D4A8                                   ;; Reset hi/lo latch
0D4A8 2C 02 20                          BIT PPU_STATUS
0D4AB                           
0D4AB                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D4AB BD 00 03                          LDA ppu_buffer,x
0D4AE 8D 06 20                          STA PPU_ADDR
0D4B1 E8                                INX
0D4B2 BD 00 03                          LDA ppu_buffer,x
0D4B5 8D 06 20                          STA PPU_ADDR
0D4B8                           
0D4B8                                   ;; Write ppu_buffer data to PPU_ADDR
0D4B8 E8                                INX
0D4B9 BD 00 03                          LDA ppu_buffer,x
0D4BC 8D 07 20                          STA PPU_DATA
0D4BF                           
0D4BF                                   ;; Check if updating is done (eg. X is at pointer)
0D4BF E8                                INX
0D4C0 E4 2F                             CPX ppu_buffer_pointer
0D4C2 F0 03                             BEQ +
0D4C4 4C A8 D4                      JMP -
0D4C7                           +
0D4C7                           
0D4C7                               ;; Reset ppu buffer update and pointer
0D4C7 A9 00                         LDA #$00
0D4C9 85 2E                         STA ppu_buffer_update
0D4CB 85 2F                         STA ppu_buffer_pointer
0D4CD                               
0D4CD                               ;; Reset scrolling position
0D4CD 8D 05 20                      STA PPU_SCROLL
0D4D0 8D 05 20                      STA PPU_SCROLL
0D4D3                           
0D4D3                               ;; Restore ppu control register and mask
0D4D3 A9 90                         LDA #%10010000
0D4D5 8D 00 20                      STA PPU_CTRL
0D4D8 A5 12                         LDA soft_ppu_mask
0D4DA 8D 01 20                      STA PPU_MASK
0D4DD A9 00                         LDA #$00
0D4DF                           
0D4DF                           ;; Continue other NMI stuff
0D4DF                           +no_ppu_buffer_update:
0D4DF                           
0D4DF                               ;; Reset sprite RAM, draw sprites
0D4DF 8D 03 20                      STA OAM_ADDR
0D4E2 A9 02                         LDA #$02
0D4E4 8D 14 40                      STA OAM_DMA
0D4E7                           
0D4E7                               ;; Decrease explosion frame counters
0D4E7 A0 04                         LDY #MAX_ANIMATIONS
0D4E9 A2 00                         LDX #$00
0D4EB                               -
0D4EB BD 30 03                          LDA explosion_framecounter,x
0D4EE F0 03                             BEQ +
0D4F0 DE 30 03                              DEC explosion_framecounter,x
0D4F3                                   +
0D4F3 E8                                INX
0D4F4 88                                DEY
0D4F5 F0 03                             BEQ +done        
0D4F7 4C EB D4                      JMP -
0D4FA                           +done:
0D4FA                               
0D4FA                               ;; Decrease nudge counter
0D4FA A5 32                         LDA nudge_counter
0D4FC F0 02                         BEQ +
0D4FE C6 32                             DEC nudge_counter
0D500                               +
0D500                               
0D500                               ;; Test background noise
0D500 A5 2D                         LDA screen_mode
0D502 29 01                         AND #IS_GAME_SCREEN
0D504 F0 21                         BEQ +
0D506                                   .include "game/test/background_noise.asm"
0D506                               ;; At random times, set max_noise period to $03-$0A
0D506 A5 35                         LDA max_noise
0D508 D0 1D                         BNE +
0D50A 20 B1 C3                          JSR sub_GetRandomNumber
0D50D 29 EF                             AND #%11101111
0D50F D0 16                             BNE +
0D511                                   
0D511 A5 15                             LDA frame_counter
0D513 85 16                             STA random_seed
0D515 20 B1 C3                          JSR sub_GetRandomNumber
0D518 29 07                             AND #$07
0D51A 69 03                             ADC #$03
0D51C 85 35                             STA max_noise
0D51E A9 01                             LDA #$01
0D520 85 36                             STA sweep_noise
0D522 A9 34                             LDA #$34
0D524 8D 0C 40                          STA NOISE_VOLUME
0D527                           
0D527                               +
0D527                           
0D527                               ;; if sweep noise = $00: constant noise
0D527                               ;; else if sweep noise > $80: decrease pitch
0D527                               ;; else: inrease pitch
0D527 A5 36                         LDA sweep_noise
0D529 F0 18                         BEQ +constantNoise
0D52B 30 2A                         BMI +decreaseNoise
0D52D                           
0D52D                           ;; Sweep noise up to max noise pitch
0D52D                           +increaseNoise:
0D52D C6 37                         DEC current_noise
0D52F A5 37                         LDA current_noise
0D531 8D 0E 40                      STA NOISE_PERIOD
0D534 C5 35                         CMP max_noise
0D536 D0 08                         BNE +
0D538 A9 00                             LDA #$00
0D53A 85 36                             STA sweep_noise
0D53C A9 0A                             LDA #$0A
0D53E 85 38                             STA noise_counter
0D540                               +
0D540 4C 6B D5                      JMP +endNoise
0D543                           
0D543                           ;; Keep noise at constant pitch
0D543                           +constantNoise:
0D543 A5 35                         LDA max_noise
0D545 F0 24                         BEQ +endNoise
0D547                           
0D547 A5 38                         LDA noise_counter
0D549 D0 07                         BNE +
0D54B A9 80                             LDA #$80
0D54D 85 36                             STA sweep_noise
0D54F 4C 6B D5                          JMP +endNoise
0D552                               +
0D552 C6 38                         DEC noise_counter
0D554 4C 6B D5                      JMP +endNoise
0D557                           
0D557                           ;; Sweep noise down to initial pitch
0D557                           +decreaseNoise:
0D557 E6 37                         INC current_noise
0D559 A5 37                         LDA current_noise
0D55B 8D 0E 40                      STA NOISE_PERIOD
0D55E C9 0E                         CMP #$0E
0D560 D0 09                         BNE +endNoise
0D562                           
0D562 20 D9 C3                      JSR sub_BackgroundNoise
0D565 A9 00                         LDA #$00
0D567 85 35                         STA max_noise
0D569 85 36                         STA sweep_noise
0D56B                           
0D56B                           +endNoise:0D56B                               +
0D56B                           
0D56B                           ;; This is what happens when we forced nmi skip
0D56B                           +force_skip_nmi:
0D56B                           
0D56B                               ;; Increase frame counters
0D56B E6 15                         INC frame_counter
0D56D                           
0D56D                               ;; reset ball_update_position
0D56D A9 00                         LDA #$00
0D56F 85 2B                         STA ball_update_position
0D571                           
0D571                               ;; Don't skip next NMI request
0D571 A9 00                         LDA #$00
0D573 85 13                         STA skip_nmi
0D575                           
0D575                               ;; Restore X, Y and PC from stack
0D575 28                            PLP
0D576 68                            PLA
0D577 A8                            TAY
0D578 68                            PLA
0D579 AA                            TAX
0D57A                           
0D57A                           +skip_nmi:
0D57A                               ;; Restore accumulator from stack
0D57A 68                            PLA
0D57B                           
0D57B                               ;; Return
0D57B 40                            RTI
0D57C                           
0D57C                           ;; IRQ handler (empty)
0D57C                           IRQ:
0D57C                               .include "interrupt/irq.asm"
0D57C 40                            RTI0D57D                           
0D57D                           ;; Interrupt vectors
0D57D 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 7C D4                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 7C D5                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
