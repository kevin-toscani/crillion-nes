	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; Enable test mode
	                            ;; - Test mode adds a test level and allows the developer to start
	                            ;;   at any given level with any number of lives. Remove the line
	                            ;;   that starts with TESTING (or add a semicolon in front) to
	                            ;;   disable test mode.
	                            ;TESTING    =   1
	                            START_LEVEL =  19
	                            START_LIVES = 255
	                            
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Timers 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           unfreeze_timer         .dsb 1
00042                           
00042                           ;; Current level (doubles as level select variable)
00042                           current_level          .dsb 1
00043                           
00043                           ;; Tile type the ball is currently colliding with
00043                           colliding_tile         .dsb 1
00044                           
00044                           ;; Number of blocks left on screen
00044                           blocks_left            .dsb 1
00045                           
00045                           ;; Sound control variables
00045                           max_noise              .dsb 1
00046                           sweep_noise            .dsb 1
00047                           current_noise          .dsb 1
00048                           noise_timer            .dsb 1
00049                           do_beeps               .dsb 1
0004A                           soft_pulse1            .dsb 1
0004B                           noise_muted            .dsb 1
0004C                           
0004C                           ;; Sound effect variables
0004C                           sfx_address            .dsb 2
0004E                           sfx_timer              .dsb 3
00051                           sfx_frequency          .dsb 2
00053                           
00053                           
00053                           ;; Additional NMI check for timed PPU fade
00053                           check_nmi              .dsb 1
00054                           
00054                           ;; The TV system this game is running on (0=ntsc, 1=pal, 2=dendy, 3=unknown)
00054                           tv_system              .dsb 1
00055                           
00055                           ;; This variable should be used for absolutely nothing
00055                           void                   .dsb 1
00056                           
00056                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 5A C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 5A C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                           
0C04B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C04B                           ;;
0C04B                           ;;  NES TV system detection code
0C04B                           ;;  Copyright 2011 Damian Yerrick
0C04B                           ;;  https://www.nesdev.org/wiki/Detect_TV_system
0C04B                           ;;
0C04B A2 00                         LDX #$00
0C04D A0 00                         LDY #$00
0C04F A9 01                         LDA #$01
0C051 85 53                         STA check_nmi
0C053                               -
0C053 C5 53                             CMP check_nmi
0C055 F0 FC                         BEQ -
0C057 A9 01                         LDA #$01
0C059 85 53                         STA check_nmi
0C05B                               -
0C05B E8                                INX
0C05C D0 01                             BNE +
0C05E C8                                    INY
0C05F C5 53                             + CMP check_nmi
0C061 F0 F8                         BEQ -
0C063 98                            TYA
0C064 38                            SEC
0C065 E9 0A                         SBC #$0A
0C067 C9 03                         CMP #$03
0C069 90 02                         BCC +
0C06B A9 03                             LDA #$03
0C06D 85 54                         + STA tv_system ; 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C06F                           ;;
0C06F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C06F                           
0C06F                           
0C06F                               ;; Tell game to load the intro screen
0C06F A9 80                         LDA #LOAD_INTRO_SCREEN
0C071 85 38                         STA screen_mode
0C073                           
0C073                               ;; Set number of lives (5)
0C073 A9 05                         LDA #$05
0C075 85 1F                         STA ball_lives
0C077                           
0C077                               ;; Start at level 1
0C077 A9 00                         LDA #$00
0C079 85 20                         STA ball_score
0C07B 85 21                         STA ball_score+1
0C07D 85 22                         STA ball_score+2
0C07F 85 23                         STA ball_score+3
0C081 85 24                         STA ball_score+4
0C083 85 25                         STA ball_score+5
0C085                           
0C085                           ifdef TESTING
0C085                               LDA #START_LIVES
0C085                               STA ball_lives
0C085                               LDA #START_LEVEL
0C085                           endif
0C085                           
0C085 85 42                         STA current_level
0C087                           
0C087                           
0C087                           
0C087                           ;; Main game loop
0C087                           lbl_MainGameLoop:
0C087 20 51 C5                      JSR sub_WaitForNMI ; align main loop
0C08A                               .include "game/main.asm"
0C08A                           
0C08A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C08A                           ;;
0C08A                           ;; game/main.asm
0C08A                           ;;
0C08A                           ;; The main game loop content.
0C08A                           ;;
0C08A                           ;;
0C08A                           
0C08A                               ;; Reset sprite pointer every game loop
0C08A A9 00                         LDA #$00
0C08C 85 3D                         STA sprite_ram_pointer
0C08E                           
0C08E                               ;; Store previous buttons
0C08E A5 0F                         LDA buttons_held
0C090 85 0E                         STA buttons_prev
0C092                           
0C092                               ;; Read controller input
0C092 20 3D C5                      JSR sub_ReadController
0C095                           
0C095                               ;; Get buttons released
0C095 A5 0F                         LDA buttons_held
0C097 49 FF                         EOR #$FF
0C099 25 0E                         AND buttons_prev
0C09B 85 11                         STA buttons_released
0C09D                           
0C09D                               ;; Set buttons pressed
0C09D A5 0E                         LDA buttons_prev
0C09F 49 FF                         EOR #$FF
0C0A1 25 0F                         AND buttons_held
0C0A3 85 10                         STA buttons_pressed
0C0A5                           
0C0A5                               ;; Load screen?
0C0A5 A5 38                         LDA screen_mode
0C0A7 29 80                         AND #%10000000
0C0A9 F0 1E                         BEQ +screenLoaded
0C0AB                           
0C0AB                               ;; Get screen type to load
0C0AB A5 38                         LDA screen_mode
0C0AD 29 03                         AND #%00000011
0C0AF A8                            TAY
0C0B0                               
0C0B0                               ;; Get address to load screen type from
0C0B0 B9 CD D2                      LDA tbl_LoadScreenLo,y
0C0B3 85 0C                         STA pointer
0C0B5 B9 CA D2                      LDA tbl_LoadScreenHi,y
0C0B8 85 0D                         STA pointer+1
0C0BA                           
0C0BA                               ;; Load screen
0C0BA 20 F6 C6                      JSR sub_DisableRendering
0C0BD 20 4B CA                      JSR sub_JumpToPointer
0C0C0 20 0A C7                      JSR sub_EnableRendering
0C0C3                               
0C0C3                               ;; Don't load screen anymore next loop
0C0C3 A5 38                         LDA screen_mode
0C0C5 29 7F                         AND #%01111111
0C0C7 85 38                         STA screen_mode
0C0C9                               
0C0C9                           
0C0C9                           +screenLoaded:
0C0C9                               ;; Check if we're on the game screen
0C0C9 A5 38                         LDA screen_mode
0C0CB C9 01                         CMP #IS_GAME_SCREEN
0C0CD F0 03                         BEQ +
0C0CF 4C 72 C3                          JMP +checkNextScreen
0C0D2                               +
0C0D2                           
0C0D2                               ;; Load sprite 0 in place
0C0D2 A9 18                         LDA #$18
0C0D4 8D 00 02                      STA ADDR_SPRITERAM
0C0D7 A9 0F                         LDA #$0F
0C0D9 8D 01 02                      STA ADDR_SPRITERAM+1
0C0DC A9 22                         LDA #$22
0C0DE 8D 02 02                      STA ADDR_SPRITERAM+2
0C0E1 A9 F8                         LDA #$F8
0C0E3 8D 03 02                      STA ADDR_SPRITERAM+3
0C0E6 A9 04                         LDA #$04
0C0E8 85 3D                         STA sprite_ram_pointer
0C0EA                           
0C0EA                               ;; We're on the game screen
0C0EA                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0EA A5 35                         LDA sprites_update_position
0C0EC F0 03                         BEQ +
0C0EE 4C D8 C2                          JMP +skipSpriteMovement
0C0F1                               +
0C0F1                           
0C0F1                               ;; Check if ball is frozen
0C0F1 A5 37                         LDA ball_flags
0C0F3 29 04                         AND #BALL_IS_FROZEN
0C0F5 F0 03                         BEQ +
0C0F7 4C 97 C2                          JMP +skipBallMovement
0C0FA                               +
0C0FA                           
0C0FA                               ;; Move the ball
0C0FA                               .include "game/include/main/move_ball.asm"
0C0FA                           
0C0FA                               ;; Check if ball goes up or down
0C0FA A5 37                         LDA ball_flags
0C0FC 29 10                         AND #BALL_MOVES_DOWN
0C0FE F0 2B                         BEQ +moveBallUp
0C100                           
0C100                           
0C100                           +moveBallDown:
0C100                               ;; update the low byte
0C100 A5 1A                         LDA ball_ypos_lo
0C102 85 1C                         STA ball_ypos_lo_prev
0C104 18                            CLC
0C105 69 88                         ADC #BALL_SPEED_LO
0C107 85 1A                         STA ball_ypos_lo
0C109                           
0C109                               ;; update the high byte with carry
0C109 A5 19                         LDA ball_ypos_hi
0C10B 85 1B                         STA ball_ypos_hi_prev
0C10D 69 01                         ADC #BALL_SPEED_HI
0C10F 85 19                         STA ball_ypos_hi
0C111                               
0C111                               ;; Check bottom bound
0C111 C9 C8                         CMP #BOUND_BOTTOM
0C113 90 3C                         BCC +checkHorizontalMovement
0C115 F0 3A                         BEQ +checkHorizontalMovement
0C117                           
0C117                           
0C117                               ;; Change ball direction to "up"
0C117 A9 C8                         LDA #BOUND_BOTTOM
0C119 38                            SEC
0C11A E9 01                         SBC #$01
0C11C 85 19                         STA ball_ypos_hi
0C11E A9 00                         LDA #$00
0C120 85 1A                         STA ball_ypos_lo
0C122 A5 37                         LDA ball_flags
0C124 29 EF                         AND #MOVE_BALL_UP
0C126 85 37                         STA ball_flags
0C128 4C 51 C1                      JMP +checkHorizontalMovement
0C12B                           
0C12B                           
0C12B                           +moveBallUp:
0C12B                               ;; update the low byte
0C12B A5 1A                         LDA ball_ypos_lo
0C12D 85 1C                         STA ball_ypos_lo_prev
0C12F 38                            SEC
0C130 E9 88                         SBC #BALL_SPEED_LO
0C132 85 1A                         STA ball_ypos_lo
0C134                           
0C134                               ;; update the high byte with carry
0C134 A5 19                         LDA ball_ypos_hi
0C136 85 1B                         STA ball_ypos_hi_prev
0C138 E9 01                         SBC #BALL_SPEED_HI
0C13A 85 19                         STA ball_ypos_hi
0C13C                               
0C13C                               ;; Check top bound
0C13C C9 30                         CMP #BOUND_TOP
0C13E B0 11                         BCS +checkHorizontalMovement
0C140                           
0C140                               ;; Change ball direction to "down"
0C140 A9 30                         LDA #BOUND_TOP
0C142 18                            CLC
0C143 69 01                         ADC #$01
0C145 85 19                         STA ball_ypos_hi
0C147 A9 00                         LDA #$00
0C149 85 1A                         STA ball_ypos_lo
0C14B A5 37                         LDA ball_flags
0C14D 09 10                         ORA #MOVE_BALL_DOWN
0C14F 85 37                         STA ball_flags
0C151                           
0C151                           
0C151                           +checkHorizontalMovement:
0C151                           
0C151                               ;; Check if ball is being nudged
0C151 A5 3E                         LDA nudge_timer
0C153 D0 41                         BNE +doneBallMovement
0C155                           
0C155                               ;; Check if left button is held
0C155 A5 0F                         LDA buttons_held
0C157 29 02                         AND #BUTTON_LEFT
0C159 F0 1B                         BEQ +
0C15B                                   ;; update the low byte
0C15B A5 18                             LDA ball_xpos_lo
0C15D 38                                SEC
0C15E E9 88                             SBC #BALL_SPEED_LO
0C160 85 18                             STA ball_xpos_lo
0C162                           
0C162                                   ;; update the high byte
0C162 A5 17                             LDA ball_xpos_hi
0C164 E9 01                             SBC #BALL_SPEED_HI
0C166 85 17                             STA ball_xpos_hi
0C168                                   
0C168                                   ;; Check left bound
0C168 C9 10                             CMP #BOUND_LEFT
0C16A B0 2A                             BCS +doneBallMovement
0C16C                                   
0C16C                                   ;; Set flag to nudge right and set nudge timer
0C16C A5 37                             LDA ball_flags
0C16E 09 02                             ORA #NUDGE_BALL_RIGHT
0C170 20 44 CA                          JSR sub_InitiateNudge
0C173                           
0C173 4C 96 C1                          JMP +doneBallMovement        
0C176                               +
0C176                           
0C176                               ;; Check if right button is held
0C176 A5 0F                         LDA buttons_held
0C178 29 01                         AND #BUTTON_RIGHT
0C17A F0 1A                         BEQ +
0C17C                                   ;; update the low byte
0C17C A5 18                             LDA ball_xpos_lo
0C17E 18                                CLC
0C17F 69 88                             ADC #BALL_SPEED_LO
0C181 85 18                             STA ball_xpos_lo
0C183                           
0C183                                   ;; update the high byte
0C183 A5 17                             LDA ball_xpos_hi
0C185 69 01                             ADC #BALL_SPEED_HI
0C187 85 17                             STA ball_xpos_hi     
0C189                           
0C189                                  ;; Check right bound
0C189 C9 E8                             CMP #BOUND_RIGHT
0C18B 90 09                             BCC +doneBallMovement
0C18D F0 07                             BEQ +doneBallMovement
0C18F                                   
0C18F                                   ;; Set flag to nudge left and set nudge timer
0C18F A5 37                             LDA ball_flags
0C191 29 FD                             AND #NUDGE_BALL_LEFT
0C193 20 44 CA                          JSR sub_InitiateNudge
0C196                               +
0C196                           
0C196                           
0C196                           +doneBallMovement:
0C196                           
0C196                               ;; Check nudge
0C196 A5 3E                         LDA nudge_timer
0C198 F0 23                         BEQ +doneBallNudging
0C19A A5 37                             LDA ball_flags
0C19C 29 02                             AND #NUDGE_BALL_RIGHT
0C19E F0 10                             BEQ +nudgeBallLeft
0C1A0                                   
0C1A0                                       ;; update the low byte
0C1A0 A5 18                                 LDA ball_xpos_lo
0C1A2 18                                    CLC
0C1A3 69 88                                 ADC #BALL_SPEED_LO
0C1A5 85 18                                 STA ball_xpos_lo
0C1A7                           
0C1A7                                       ;; update the high byte
0C1A7 A5 17                                 LDA ball_xpos_hi
0C1A9 69 01                                 ADC #BALL_SPEED_HI
0C1AB 85 17                                 STA ball_xpos_hi  
0C1AD 4C BD C1                              JMP +doneBallNudging
0C1B0                                   +nudgeBallLeft:
0C1B0                                   
0C1B0                                   ;; update the low byte
0C1B0 A5 18                             LDA ball_xpos_lo
0C1B2 38                                SEC
0C1B3 E9 88                             SBC #BALL_SPEED_LO
0C1B5 85 18                             STA ball_xpos_lo
0C1B7                           
0C1B7                                   ;; update the high byte
0C1B7 A5 17                             LDA ball_xpos_hi
0C1B9 E9 01                             SBC #BALL_SPEED_HI
0C1BB 85 17                             STA ball_xpos_hi
0C1BD                               +doneBallNudging:
0C1BD                           
0C1BD                               ;; Don't update position again until next frame
0C1BD                               ;; (moved to after move block routine)
0C1BD                           
0C1BD                           +doneBallHandling:
0C1BD                           
0C1BD                               
0C1BD                               ;; Do collision detection
0C1BD                               .include "game/include/main/collision_detection.asm"
0C1BD                           
0C1BD                               ;; Get ball's x-left, x-center, x-right position
0C1BD A5 17                         LDA ball_xpos_hi
0C1BF 18                            CLC
0C1C0 69 F0                         ADC #BALL_LEFT_WGA
0C1C2 85 2F                         STA ball_left
0C1C4 18                            CLC
0C1C5 69 04                         ADC #BALL_HALF_SIZE
0C1C7 85 30                         STA ball_center
0C1C9 18                            CLC
0C1CA 69 04                         ADC #BALL_HALF_SIZE
0C1CC 85 31                         STA ball_right
0C1CE                           
0C1CE                               ;; Get ball's y-top, y-middle, y-bottom position
0C1CE A5 19                         LDA ball_ypos_hi
0C1D0 18                            CLC
0C1D1 69 D0                         ADC #BALL_TOP_WGA
0C1D3 85 32                         STA ball_top
0C1D5 18                            CLC
0C1D6 69 04                         ADC #BALL_HALF_SIZE
0C1D8 85 33                         STA ball_middle
0C1DA 18                            CLC
0C1DB 69 04                         ADC #BALL_HALF_SIZE
0C1DD 85 34                         STA ball_bottom
0C1DF                           
0C1DF                           +checkRightCollision:
0C1DF                               ;; Check if ball moves right
0C1DF                               ;; No need to check nudging here as that will never collide with a tile
0C1DF A5 0F                         LDA buttons_held
0C1E1 29 01                         AND #BUTTON_RIGHT
0C1E3 F0 20                         BEQ +checkLeftCollision
0C1E5                           
0C1E5                               ;; Check tile at right position
0C1E5 A5 33                         LDA ball_middle
0C1E7 85 00                         STA temp
0C1E9 A5 31                         LDA ball_right
0C1EB 85 01                         STA temp+1
0C1ED 20 DE C6                      JSR sub_ConvertXYToTileType
0C1F0 29 01                         AND #TILE_IS_SOLID
0C1F2 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1F4                           
0C1F4                               ;; Nudge ball and evaluate tile type
0C1F4 A9 01                         LDA #$01
0C1F6 85 36                         STA move_block_space_to_check
0C1F8 A5 37                         LDA ball_flags
0C1FA 29 FD                         AND #NUDGE_BALL_LEFT
0C1FC 20 44 CA                      JSR sub_InitiateNudge
0C1FF 20 6C C8                      JSR sub_EvaluateTileType
0C202 4C 28 C2                      JMP +checkTopCollision
0C205                           
0C205                           +checkLeftCollision:
0C205                               ;; Check if ball moves right
0C205                               ;; No need to check nudging here as that will never collide with a tile
0C205 A5 0F                         LDA buttons_held
0C207 29 02                         AND #BUTTON_LEFT
0C209 F0 1D                         BEQ +checkTopCollision
0C20B                           
0C20B                               ;; Check tile at right position
0C20B A5 33                         LDA ball_middle
0C20D 85 00                         STA temp
0C20F A5 2F                         LDA ball_left
0C211 85 01                         STA temp+1
0C213 20 DE C6                      JSR sub_ConvertXYToTileType
0C216 29 01                         AND #TILE_IS_SOLID
0C218 F0 0E                         BEQ +checkTopCollision
0C21A                           
0C21A                               ;; Tile is solid; nudge ball and evaluate tile type
0C21A A9 FF                         LDA #$FF
0C21C 85 36                         STA move_block_space_to_check
0C21E A5 37                         LDA ball_flags
0C220 09 02                         ORA #NUDGE_BALL_RIGHT
0C222 20 44 CA                      JSR sub_InitiateNudge
0C225 20 6C C8                      JSR sub_EvaluateTileType
0C228                               
0C228                               
0C228                           +checkTopCollision:
0C228                               ;; Check if ball moves up
0C228 A5 37                         LDA ball_flags
0C22A 29 10                         AND #BALL_MOVES_DOWN
0C22C D0 27                         BNE +checkBottomCollision
0C22E                           
0C22E                               ;; Check tile at top position
0C22E A5 32                         LDA ball_top
0C230 85 00                         STA temp
0C232 A5 30                         LDA ball_center
0C234 85 01                         STA temp+1
0C236 20 DE C6                      JSR sub_ConvertXYToTileType
0C239 29 01                         AND #TILE_IS_SOLID
0C23B F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C23D                           
0C23D                               ;; Tile is solid; move ball down and evaluate tile type
0C23D A5 1C                         LDA ball_ypos_lo_prev
0C23F 85 1A                         STA ball_ypos_lo
0C241 A5 1B                         LDA ball_ypos_hi_prev
0C243 85 19                         STA ball_ypos_hi
0C245 A5 37                         LDA ball_flags
0C247 09 10                         ORA #MOVE_BALL_DOWN
0C249 85 37                         STA ball_flags
0C24B                           
0C24B A9 F0                         LDA #$F0 ; which is -16
0C24D 85 36                         STA move_block_space_to_check
0C24F 20 6C C8                      JSR sub_EvaluateTileType
0C252 4C 79 C2                      JMP +doneCheckingCollision
0C255                           
0C255                           +checkBottomCollision:
0C255                               ;; No movement check needed: since ball is not moving up, it must move down
0C255                           
0C255                               ;; Check tile at bottom position
0C255 A5 34                         LDA ball_bottom
0C257 85 00                         STA temp
0C259 A5 30                         LDA ball_center
0C25B 85 01                         STA temp+1
0C25D 20 DE C6                      JSR sub_ConvertXYToTileType
0C260 29 01                         AND #TILE_IS_SOLID
0C262 F0 15                         BEQ +doneCheckingCollision
0C264                           
0C264                               ;; Tile is solid; move ball up and evaluate tile type
0C264 A5 1C                         LDA ball_ypos_lo_prev
0C266 85 1A                         STA ball_ypos_lo
0C268 A5 1B                         LDA ball_ypos_hi_prev
0C26A 85 19                         STA ball_ypos_hi
0C26C A5 37                         LDA ball_flags
0C26E 29 EF                         AND #MOVE_BALL_UP
0C270 85 37                         STA ball_flags
0C272                           
0C272 A9 10                         LDA #$10
0C274 85 36                         STA move_block_space_to_check
0C276 20 6C C8                      JSR sub_EvaluateTileType
0C279                           
0C279                           +doneCheckingCollision:
0C279                           
0C279                               
0C279                               ;; Update bonus
0C279                               .include "game/include/main/update_bonus.asm"
0C279                           
0C279                           ;; Update the bonus counter on screen
0C279                           
0C279                               ;; If bonus = 000, skip decreasing
0C279 A5 2C                         LDA ball_bonus
0C27B 05 2D                         ORA ball_bonus+1
0C27D 05 2E                         ORA ball_bonus+2
0C27F F0 0D                         BEQ +done
0C281                           
0C281                               ;; Check if bonus timer is done yet
0C281 A5 3F                         LDA bonus_timer
0C283 D0 09                         BNE +done
0C285                           
0C285                               ;; Bonus timer is done
0C285                               ;; Reset bonus timer
0C285 A9 08                         LDA #BONUS_FRAMES
0C287 85 3F                         STA bonus_timer
0C289                               
0C289                               ;; Subtract one from ball bonus ones
0C289 A2 01                         LDX #$01
0C28B 20 FB D0                      JSR sub_SubtractXFromBonus
0C28E                           
0C28E                           +done:
0C28E                           
0C28E                           
0C28E                               ;; Check if self-destruct
0C28E A5 10                         LDA buttons_pressed
0C290 29 20                         AND #BUTTON_SELECT
0C292 F0 03                         BEQ +
0C294 20 05 C9                          JSR sub_Selfdestruct
0C297                               +
0C297                           
0C297                           
0C297                           +skipBallMovement:
0C297                               ;; Move blocks a pixel up/down/left/right
0C297                               .include "game/include/main/move_blocks.asm"
0C297                           
0C297                               ;; Set up block loop
0C297 A2 04                         LDX #MAX_ANIMATIONS
0C299                           -moveBlocksLoop:
0C299 CA                            DEX
0C29A                           
0C29A                               ;; Check if block is still moving
0C29A BD 80 03                      LDA move_block_timer,x
0C29D F0 33                         BEQ +checkNext
0C29F                               
0C29F                               ;; Check if block is done moving
0C29F C9 01                         CMP #$01
0C2A1 D0 0B                         BNE +
0C2A3                                   ;; If so, draw a tile and remove the sprite
0C2A3 20 37 C7                          JSR sub_DrawMoveTile
0C2A6 A9 00                             LDA #$00
0C2A8 9D 80 03                          STA move_block_timer,x
0C2AB 4C D2 C2                          JMP +checkNext
0C2AE                               +
0C2AE                               
0C2AE                               ;; Check in which direction the block is moving
0C2AE                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2AE BD 88 03                      LDA move_block_flags,x
0C2B1 29 03                         AND #%00000011
0C2B3 F0 14                         BEQ +movingDown
0C2B5 C9 01                         CMP #$01
0C2B7 F0 0A                         BEQ +movingUp
0C2B9 C9 02                         CMP #$02
0C2BB F0 12                         BEQ +movingRight
0C2BD                               
0C2BD                               ;; Move block in correct direction
0C2BD                               +movingLeft:
0C2BD DE 78 03                      DEC move_block_x,x
0C2C0 4C D2 C2                      JMP +checkNext
0C2C3                           
0C2C3                               +movingUp:
0C2C3 DE 7C 03                      DEC move_block_y,x
0C2C6 4C D2 C2                      JMP +checkNext
0C2C9                           
0C2C9                               +movingDown:
0C2C9 FE 7C 03                      INC move_block_y,x
0C2CC 4C D2 C2                      JMP +checkNext
0C2CF                           
0C2CF                               +movingRight:
0C2CF FE 78 03                      INC move_block_x,x
0C2D2                           
0C2D2                               ;; Check next block (if any left)
0C2D2                               +checkNext:
0C2D2 E0 00                         CPX #$00
0C2D4 D0 C3                         BNE -moveBlocksLoop
0C2D6                               
0C2D6                               ;; Don't update sprites
0C2D6 E6 35                         INC sprites_update_position
0C2D8                           
0C2D8                           
0C2D8                           +skipSpriteMovement:
0C2D8                               ;; Testing timed PPU scroll concept (disabled)
0C2D8                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2D8                           
0C2D8                               ;; Check if ball is dead
0C2D8 A5 37                         LDA ball_flags
0C2DA 29 01                         AND #BALL_IS_DEAD
0C2DC F0 03                         BEQ +
0C2DE 4C 00 C3                          JMP +ballIsDead
0C2E1                               +
0C2E1                               
0C2E1                               ;; Add ball to sprite buffer
0C2E1 A6 3D                         LDX sprite_ram_pointer
0C2E3 A5 19                         LDA ball_ypos_hi
0C2E5 9D 00 02                      STA ADDR_SPRITERAM,x
0C2E8 E8                            INX
0C2E9 A9 01                         LDA #BALL_TILE_CHR
0C2EB 9D 00 02                      STA ADDR_SPRITERAM,x
0C2EE E8                            INX
0C2EF A9 00                         LDA #BALL_ATTR
0C2F1 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F4 E8                            INX
0C2F5 A5 17                         LDA ball_xpos_hi
0C2F7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2FA E8                            INX
0C2FB 86 3D                         STX sprite_ram_pointer
0C2FD 4C 11 C3                      JMP +drawBlocks
0C300                           
0C300                           +ballIsDead:
0C300                               ;; Check if kill timer has reset
0C300 A5 40                         LDA kill_timer
0C302 F0 03                         BEQ +
0C304 4C 11 C3                          JMP +drawBlocks
0C307                               +
0C307                               
0C307                               ;; Take a live
0C307 C6 1F                         DEC ball_lives
0C309 D0 03                         BNE +
0C30B                                   ;; If no lives left, initiate game over sequence
0C30B 4C C4 C3                          JMP lbl_GameOver
0C30E                               +
0C30E                               
0C30E                               ;; Reload current level
0C30E 4C 0A C5                      JMP lbl_InitiateLevelLoad
0C311                           
0C311                           
0C311                           +drawBlocks:
0C311                               ;; Draw moving block(s, if any)
0C311                               .include "game/include/main/draw_blocks.asm"
0C311                           
0C311                           ;; Handle movement of move blocks
0C311                           
0C311                               ;; Set up a loop
0C311 A0 04                         LDY #MAX_ANIMATIONS
0C313                           -drawBlocksLoop:
0C313 88                            DEY
0C314                           
0C314                               ;; If timer is zero, check the next move block
0C314 B9 80 03                      LDA move_block_timer,y
0C317 F0 52                         BEQ +nextMoveBlock
0C319                               
0C319                               ;; Get current sprite pointer
0C319 A6 3D                         LDX sprite_ram_pointer
0C31B                           
0C31B                               ;; Draw the sprites on screen
0C31B B9 7C 03                      LDA move_block_y,y
0C31E 9D 00 02                      STA ADDR_SPRITERAM,x
0C321 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C324 18                            CLC
0C325 69 08                         ADC #$08
0C327 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C32A 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C32D E8                            INX
0C32E                           
0C32E A9 52                         LDA #$52 ; Top left chr id
0C330 9D 00 02                      STA ADDR_SPRITERAM,x
0C333 A9 53                         LDA #$53 ; Top right chr id
0C335 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C338 A9 62                         LDA #$62 ; Bottom left chr id
0C33A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C33D A9 63                         LDA #$63 ; Bottom right chr id
0C33F 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C342 E8                            INX
0C343                           
0C343 A9 00                         LDA #BALL_ATTR
0C345 9D 00 02                      STA ADDR_SPRITERAM,x
0C348 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C34B 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C34E 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C351 E8                            INX
0C352                           
0C352 B9 78 03                      LDA move_block_x,y
0C355 9D 00 02                      STA ADDR_SPRITERAM,x
0C358 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C35B 18                            CLC
0C35C 69 08                         ADC #$08
0C35E 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C361 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C364                           
0C364                               ;; Update sprite RAM pointer
0C364 A5 3D                         LDA sprite_ram_pointer
0C366 18                            CLC
0C367 69 10                         ADC #$10
0C369 85 3D                         STA sprite_ram_pointer
0C36B                           
0C36B                           
0C36B                           
0C36B                           +nextMoveBlock:
0C36B                               ;; Check the next move block
0C36B C0 00                         CPY #$00
0C36D D0 A4                         BNE -drawBlocksLoop
0C36F                           
0C36F 4C BE C3                      JMP +doneScreenLoad
0C372                           
0C372                           
0C372                           
0C372                           +checkNextScreen:
0C372                           
0C372                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C372                               ;; Upon pressing START, the selected level will start
0C372                               .include "game/include/main/select_level.asm"
0C372                           
0C372                               ;; Change level number on start screen
0C372 A5 10                         LDA buttons_pressed
0C374 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C376 F0 3C                         BEQ +checkStartPress
0C378                           
0C378                                   ;; Select next level (1, 5, 9, 13, 17)
0C378 A5 42                             LDA current_level
0C37A 18                                CLC
0C37B 69 04                             ADC #$04
0C37D C9 14                             CMP #$14
0C37F D0 02                             BNE +
0C381 A9 00                                 LDA #$00
0C383                                   +
0C383 85 42                             STA current_level
0C385                                   
0C385                                   ;; Convert level number to two-byte value
0C385 A9 00                             LDA #$00
0C387 85 03                             STA temp+3
0C389 A5 42                             LDA current_level
0C38B 18                                CLC
0C38C 69 01                             ADC #$01
0C38E                           
0C38E                               -
0C38E C9 0A                             CMP #$0A
0C390 90 08                             BCC +
0C392 E6 03                                 INC temp+3
0C394 38                                    SEC
0C395 E9 0A                                 SBC #$0A
0C397 4C 8E C3                              JMP -
0C39A                                   +
0C39A                           
0C39A                                   ;; Add level number to PPU buffer
0C39A 18                                CLC
0C39B 69 01                             ADC #$01
0C39D 85 02                             STA temp+2
0C39F A9 20                             LDA #$20
0C3A1 85 00                             STA temp
0C3A3 A9 D0                             LDA #$D0
0C3A5 85 01                             STA temp+1
0C3A7 20 60 D1                          JSR sub_WriteByteToPPUBuffer
0C3AA                                   
0C3AA C6 01                             DEC temp+1
0C3AC A4 03                             LDY temp+3
0C3AE C8                                INY
0C3AF 84 02                             STY temp+2
0C3B1 20 60 D1                          JSR sub_WriteByteToPPUBuffer
0C3B4                                   
0C3B4                               +checkStartPress:
0C3B4                           
0C3B4                           
0C3B4                           
0C3B4                               ;; If START button is pressed
0C3B4 A5 10                         LDA buttons_pressed
0C3B6 29 10                         AND #BUTTON_START
0C3B8 F0 04                         BEQ +
0C3BA                                   ;; Start the level
0C3BA A9 81                             LDA #LOAD_GAME_SCREEN
0C3BC 85 38                             STA screen_mode
0C3BE                               +
0C3BE                           
0C3BE                           
0C3BE                           
0C3BE                           +doneScreenLoad:
0C3BE                           
0C3BE                               ;; Load animations (if any)
0C3BE                               ;; and sprite clean-up
0C3BE 20 4E CA                      JSR sub_LoadAnimations
0C3C1                           
0C3C1 4C 87 C0                      JMP lbl_MainGameLoop
0C3C4                           
0C3C4                           ;; Following sequences are outside main game loop
0C3C4                           .include "game/include/main/game_over.asm"
0C3C4                           
0C3C4                           ;; Game over sequence
0C3C4                           lbl_GameOver:
0C3C4                           
0C3C4                               ;; Disable noise channel
0C3C4 A9 00                         LDA #$00
0C3C6 8D 15 40                      STA APU_STATUS
0C3C9 8D 0C 40                      STA NOISE_VOLUME
0C3CC                               
0C3CC                               ;; Do blinds effect
0C3CC 20 CC C5                      JSR sub_BlindsEffect
0C3CF                           
0C3CF                               ;; Disable draw after HUD to disable screen
0C3CF 20 51 C5                      JSR sub_WaitForNMI
0C3D2                               -
0C3D2 AD 02 20                          LDA PPU_STATUS
0C3D5 29 40                             AND #SPRITE_0_HIT
0C3D7 D0 F9                         BNE -
0C3D9                               -
0C3D9 AD 02 20                          LDA PPU_STATUS
0C3DC 29 40                             AND #SPRITE_0_HIT
0C3DE F0 F9                         BEQ -
0C3E0 20 4D D1                      JSR sub_Waste6
0C3E3 20 50 D1                      JSR sub_Waste5
0C3E6 20 53 D1                      JSR sub_Waste4
0C3E9 20 56 D1                      JSR sub_Waste3
0C3EC 20 5C D1                      JSR sub_Waste1
0C3EF 20 5F D1                      JSR sub_Waste0
0C3F2 A9 00                         LDA #$00
0C3F4 8D 01 20                      STA PPU_MASK
0C3F7                               
0C3F7                               ;; Remove game area from view
0C3F7 2C 02 20                      BIT PPU_STATUS
0C3FA A9 20                         LDA #$20
0C3FC 8D 06 20                      STA PPU_ADDR
0C3FF A9 A0                         LDA #$A0
0C401 8D 06 20                      STA PPU_ADDR
0C404 A9 00                         LDA #$00
0C406 A2 16                         LDX #$16
0C408                               -xLoop:
0C408 A0 20                             LDY #$20
0C40A                                   -yLoop:
0C40A 8D 07 20                              STA PPU_DATA
0C40D 88                                    DEY
0C40E D0 FA                             BNE -yLoop
0C410 CA                                DEX
0C411 D0 F5                         BNE -xLoop
0C413                               
0C413                               ;; Set lives to 0
0C413 2C 02 20                      BIT PPU_STATUS
0C416 A9 20                         LDA #$20
0C418 8D 06 20                      STA PPU_ADDR
0C41B A9 92                         LDA #$92
0C41D 8D 06 20                      STA PPU_ADDR
0C420 A9 01                         LDA #$01
0C422 8D 07 20                      STA PPU_DATA
0C425                               
0C425                               ;; Reset scroll
0C425 A9 00                         LDA #$00
0C427 8D 05 20                      STA PPU_SCROLL
0C42A 8D 05 20                      STA PPU_SCROLL
0C42D 20 51 C5                      JSR sub_WaitForNMI
0C430                           
0C430                               ;; Pause for a little while
0C430 A2 18                         LDX #$18
0C432                               -
0C432 20 51 C5                          JSR sub_WaitForNMI
0C435 CA                                DEX
0C436 D0 FA                         BNE -
0C438                                       
0C438                               ;; Do flash effect
0C438 20 E5 C9                      JSR sub_FlashEffect
0C43B                           
0C43B                               ;; Draw GAME OVER tiles over game screen
0C43B A9 21                         LDA #$21
0C43D 85 00                         STA temp
0C43F A9 EB                         LDA #$EB
0C441 85 01                         STA temp+1
0C443                           
0C443 A2 00                         LDX #$00
0C445                               -gameOverTileLoop:
0C445 BD 73 DA                          LDA tbl_GameOver,x
0C448 85 02                             STA temp+2
0C44A 20 60 D1                          JSR sub_WriteByteToPPUBuffer
0C44D E6 01                             INC temp+1
0C44F E8                                INX
0C450 E0 0A                             CPX #$0A
0C452 D0 F1                         BNE -gameOverTileLoop
0C454                               
0C454                               ;; Update GAME OVER attributes on game screen
0C454 A9 23                         LDA #$23
0C456 85 00                         STA temp
0C458 A9 DA                         LDA #$DA
0C45A 85 01                         STA temp+1
0C45C A9 AA                         LDA #$AA
0C45E 85 02                         STA temp+2
0C460 A2 04                         LDX #$04
0C462                               -
0C462 20 60 D1                          JSR sub_WriteByteToPPUBuffer
0C465 E6 01                             INC temp+1
0C467 CA                                DEX
0C468 D0 F8                         BNE -
0C46A 20 51 C5                      JSR sub_WaitForNMI
0C46D                               
0C46D                              
0C46D                               ;; If player score is larger than high score
0C46D                               ;; Overwrite high score with player score
0C46D                               ;; [@TODO]
0C46D                               
0C46D                               
0C46D                               ;; If player presses either A or START, (soft) reset the game
0C46D                               -checkController:
0C46D 20 3D C5                          JSR sub_ReadController
0C470 A5 0F                             LDA buttons_held
0C472 29 90                             AND #%10010000
0C474 F0 F7                         BEQ -checkController
0C476 4C 4B C0                      JMP lbl_SoftReset
0C479                           
0C479                           .include "game/include/main/level_win.asm"
0C479                           
0C479                           ;; Handling of level win state
0C479                           lbl_LevelWin:
0C479                           
0C479                               ;; Freeze the ball
0C479 A5 37                         LDA ball_flags
0C47B 09 04                         ORA #FREEZE_BALL
0C47D 85 37                         STA ball_flags
0C47F                           
0C47F                               ;; Disable noise channel
0C47F A9 01                         LDA #$01
0C481 85 4B                         STA noise_muted
0C483                               
0C483                               ;; Wait a few frames
0C483 A2 18                         LDX #$18
0C485 20 38 D1                      JSR sub_WaitXFrames
0C488                           
0C488                               ;; Set null tile color to yellow
0C488 A9 3F                         LDA #$3F
0C48A 85 00                         STA temp
0C48C A9 02                         LDA #$02
0C48E 85 01                         STA temp+1
0C490 A9 38                         LDA #$38
0C492 85 02                         STA temp+2
0C494 20 60 D1                      JSR sub_WriteByteToPPUBuffer
0C497                               
0C497                               ;; Quick and dirty way to remove ball from screen
0C497 A9 EF                         LDA #$EF
0C499 8D 04 02                      STA ADDR_SPRITERAM+4
0C49C 8D 05 02                      STA ADDR_SPRITERAM+5
0C49F 8D 06 02                      STA ADDR_SPRITERAM+6
0C4A2 8D 07 02                      STA ADDR_SPRITERAM+7
0C4A5                               
0C4A5                               ;; Initiate frequency beeps (@TODO)
0C4A5                               
0C4A5                               ;; Wait a few frames
0C4A5 A2 10                         LDX #$10
0C4A7 20 38 D1                      JSR sub_WaitXFrames
0C4AA                               
0C4AA                               ;; Restore null tile color to dark blue
0C4AA A9 3F                         LDA #$3F
0C4AC 85 00                         STA temp
0C4AE A9 02                         LDA #$02
0C4B0 85 01                         STA temp+1
0C4B2 A9 12                         LDA #$12
0C4B4 85 02                         STA temp+2
0C4B6 20 60 D1                      JSR sub_WriteByteToPPUBuffer
0C4B9                           
0C4B9                               ;; Wait a few frames
0C4B9 A2 2D                         LDX #$2D
0C4BB 20 38 D1                      JSR sub_WaitXFrames
0C4BE                               
0C4BE                           
0C4BE                               ;; Play the end level sweep sound effect, and
0C4BE                               ;; initiate bonus score routine
0C4BE A9 B8                         LDA #$B8
0C4C0 85 4A                         STA soft_pulse1
0C4C2                           
0C4C2 A9 01                         LDA #$01
0C4C4 8D 15 40                      STA APU_STATUS
0C4C7 85 49                         STA do_beeps
0C4C9                           
0C4C9                               -bonusPointsLoop:
0C4C9                                   ;; Check how many bonus points to subtract
0C4C9                                   ;; (either the max, or what's left)
0C4C9 A5 2C                             LDA ball_bonus
0C4CB 05 2D                             ORA ball_bonus+1
0C4CD D0 06                             BNE +fullBonus
0C4CF A5 2E                             LDA ball_bonus+2
0C4D1 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C4D3 90 02                             BCC +partBonus
0C4D5                           
0C4D5                                   +fullBonus:
0C4D5 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C4D7                                   +partBonus:
0C4D7                           
0C4D7                                   ;; Put value that's added to score on the stack
0C4D7 AA                                TAX
0C4D8 BD 1A DB                          LDA tbl_BonusToScore,x
0C4DB 48                                PHA
0C4DC                           
0C4DC                                   ;; Subtract X-register from bonus
0C4DC 20 FB D0                          JSR sub_SubtractXFromBonus
0C4DF                           
0C4DF                                   ;; Get value from stack and add it to the score
0C4DF 68                                PLA
0C4E0 20 60 C5                          JSR sub_AddAccumulatorToScore
0C4E3                           
0C4E3                                   ;; Wait for NMI twice
0C4E3 20 51 C5                          JSR sub_WaitForNMI
0C4E6 20 51 C5                          JSR sub_WaitForNMI
0C4E9                           
0C4E9                                   ;; Check if bonus countdown is done
0C4E9 A5 2C                             LDA ball_bonus
0C4EB 05 2D                             ORA ball_bonus+1
0C4ED 05 2E                             ORA ball_bonus+2
0C4EF D0 D8                         BNE -bonusPointsLoop
0C4F1                           
0C4F1                               ;; fade out the beeping
0C4F1 A2 08                         LDX #$08
0C4F3                               -fadeOutLoop:
0C4F3 20 51 C5                          JSR sub_WaitForNMI
0C4F6 20 51 C5                          JSR sub_WaitForNMI
0C4F9 C6 4A                             DEC soft_pulse1
0C4FB CA                                DEX
0C4FC D0 F5                         BNE -fadeOutLoop
0C4FE                           
0C4FE                               ;; Stop random beeping
0C4FE A9 02                         LDA #$02
0C500 85 49                         STA do_beeps
0C502                               
0C502                               ;; Wait a few frames
0C502 A2 30                         LDX #$30
0C504 20 38 D1                      JSR sub_WaitXFrames
0C507                           
0C507                               ;; Load next level
0C507 4C 0A C5                      JMP lbl_InitiateLevelLoad
0C50A                               
0C50A                           .include "game/include/main/initiate_level_load.asm"
0C50A                           
0C50A                           ;; Load level
0C50A                           lbl_InitiateLevelLoad:
0C50A                               
0C50A                               ;; Blind out the screen
0C50A 20 CC C5                      JSR sub_BlindsEffect
0C50D                               
0C50D                               ;; If ball is dead, (re)load current level
0C50D                               ;; If ball is alive, load next level
0C50D A5 37                         LDA ball_flags
0C50F 29 01                         AND #BALL_IS_DEAD
0C511 D0 05                         BNE +
0C513 E6 42                             INC current_level
0C515 4C 1E C5                          JMP +loadLevel
0C518                               +
0C518                               
0C518                               ;; Revive ball
0C518 A5 37                         LDA ball_flags
0C51A 29 FE                         AND #REVIVE_BALL
0C51C 85 37                         STA ball_flags
0C51E                           
0C51E                           +loadLevel:
0C51E                               ;; This loops back to level 1 after level 25* for now,
0C51E                               ;; as a proper game ending is yet to be introduced.
0C51E                               ;; *26 in test mode
0C51E A5 42                         LDA current_level
0C520                               ifdef TESTING
0C520                                   CMP #26
0C520                               else
0C520 C9 19                             CMP #25
0C522                               endif
0C522 D0 04                         BNE +
0C524 A9 00                             LDA #$00
0C526 85 42                             STA current_level
0C528                               +
0C528                               
0C528                               ;; Tell the game to load the level screen on the next loop.
0C528 A9 81                         LDA #LOAD_GAME_SCREEN
0C52A 85 38                         STA screen_mode
0C52C                           
0C52C                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C52C 4C 87 C0                      JMP lbl_MainGameLoop0C52F                           
0C52F                           
0C52F                           ;; Subroutines
0C52F                           .include "include/subroutines.asm"
0C52F                           
0C52F                           ;; RNG
0C52F                           .include "subroutine/GetRandomNumber.asm"
0C52F                           
0C52F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C52F                           ;;
0C52F                           ;; subroutine/GetRandomNumber.asm
0C52F                           ;;
0C52F                           ;; Simple and fast random number generator by White Flame.
0C52F                           ;;
0C52F                           ;; Set random_seed to an arbitrary number to randomize between
0C52F                           ;; gaming sessions, for instance using the frame timer upon
0C52F                           ;; pressing START on the intro screen.
0C52F                           ;;
0C52F                           ;;     ;; IF START PRESSED:
0C52F                           ;;     LDA frame_counter
0C52F                           ;;     STA random_seed
0C52F                           ;;
0C52F                           ;; Source:
0C52F                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C52F                           ;;
0C52F                           ;;
0C52F                           
0C52F                           sub_GetRandomNumber:
0C52F                               ;; Force EOR if random_seed is zero
0C52F A5 16                         LDA random_seed
0C531 F0 05                         BEQ +doEor
0C533                           
0C533                               ;; Shift left, and EOR if the high bit is set
0C533 0A                            ASL
0C534 F0 04                         BEQ +noEor
0C536 90 02                         BCC +noEor
0C538                           
0C538                           +doEor:
0C538 49 1D                         EOR #$1D
0C53A                           
0C53A                           +noEor:
0C53A 85 16                         STA random_seed
0C53C                           
0C53C 60                            RTS
0C53D                           
0C53D                           
0C53D                           ;; Read controller input
0C53D                           .include "subroutine/ReadController.asm"
0C53D                           
0C53D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C53D                           ;;
0C53D                           ;; subroutine/ReadController.asm
0C53D                           ;;
0C53D                           ;; Subroutine that polls the controller and stores the input
0C53D                           ;; buttons in a variable. This version only handles controller
0C53D                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C53D                           ;;
0C53D                           ;;
0C53D                           
0C53D                           sub_ReadController:
0C53D                           
0C53D                               ;; Set strobe bit
0C53D A9 01                         LDA #$01
0C53F 8D 16 40                      STA JOYPAD_1
0C542                           
0C542                               ;; Set up ring timer
0C542 85 0F                         STA buttons_held
0C544                           
0C544                               ;; Clear strobe bit
0C544 4A                            LSR
0C545 8D 16 40                      STA JOYPAD_1
0C548                           
0C548                               ;; Loop through button presses
0C548                               -
0C548 AD 16 40                          LDA JOYPAD_1
0C54B 4A                                LSR
0C54C 26 0F                             ROL buttons_held
0C54E                           
0C54E                               ;; Check if ring timer is done
0C54E 90 F8                         BCC -
0C550                           
0C550                               ;; Return from subroutine
0C550 60                            RTS
0C551                           
0C551                           
0C551                           ;; vBlank/NMI wait
0C551                           .include "subroutine/WaitForNMI.asm"
0C551                           
0C551                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C551                           ;;
0C551                           ;; subroutine/WaitForVBlank.asm
0C551                           ;;
0C551                           ;; Subroutine that essentially pauses script execution until
0C551                           ;; vBlank happens.
0C551                           ;;
0C551                           ;;
0C551                           
0C551                           sub_WaitForNMI:
0C551 A9 01                         LDA #$01
0C553 85 53                         STA check_nmi
0C555                               -
0C555 A5 53                             LDA check_nmi
0C557 D0 FC                         BNE -
0C559 60                            RTS
0C55A                           
0C55A                           .include "subroutine/WaitForVBlank.asm"
0C55A                           
0C55A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C55A                           ;;
0C55A                           ;; subroutine/WaitForVBlank.asm
0C55A                           ;;
0C55A                           ;; Subroutine that essentially pauses script execution until
0C55A                           ;; vBlank happens.
0C55A                           ;;
0C55A                           ;;
0C55A                           
0C55A                           sub_WaitForVBlank:
0C55A 2C 02 20                      BIT $2002
0C55D 10 FB                         BPL sub_WaitForVBlank
0C55F 60                            RTS
0C560                           
0C560                           
0C560                           ;; Game specific subroutines
0C560                           .include "game/include/subroutines.asm"
0C560                           
0C560                           ;; additional game-specific subroutines go here
0C560                           
0C560                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C560                           
0C560                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C560                           ;;
0C560                           ;;  sub_AddAccumulatorToScore.asm
0C560                           ;;
0C560                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C560                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C560                           ;;  actual score.
0C560                           ;;
0C560                           ;;
0C560                           
0C560                           
0C560                           sub_AddAccumulatorToScore:
0C560                           
0C560                               ;; Clear old add_to_score
0C560 A2 05                         LDX #$05
0C562 A0 00                         LDY #$00
0C564                               -
0C564 94 26                             STY add_to_score,x
0C566 CA                                DEX
0C567 10 FB                         BPL -
0C569                           
0C569                               ;; Set accumulator to add_to_score variables
0C569                               ;; Check and update 100s
0C569                               -checkHundreds:
0C569 C9 64                             CMP #100
0C56B 90 08                             BCC +checkTens
0C56D 38                                    SEC
0C56E E9 64                                 SBC #100
0C570 E6 29                                 INC add_to_score+3
0C572 4C 69 C5                              JMP -checkHundreds
0C575                                   +checkTens:
0C575                           
0C575                               ;; Check and update 10s
0C575                               -checkTens:
0C575 C9 0A                             CMP #10
0C577 90 08                             BCC +setOnes
0C579 38                                    SEC
0C57A E9 0A                                 SBC #10
0C57C E6 2A                                 INC add_to_score+4
0C57E 4C 75 C5                              JMP -checkTens
0C581                                   +setOnes:
0C581                           
0C581                               ;; We're left with 1s
0C581 85 2B                         STA add_to_score+5
0C583                           
0C583                               ;; Byte for byte, add add_to_score to ball_score
0C583 A9 00                         LDA #$00
0C585 85 39                         STA ppu_buffer_update
0C587 A4 3A                         LDY ppu_buffer_pointer
0C589 A2 05                         LDX #$05
0C58B                               -
0C58B B5 26                             LDA add_to_score,x
0C58D 18                                CLC
0C58E 75 20                             ADC ball_score,x
0C590 C9 0A                             CMP #10
0C592 90 05                             BCC +
0C594 38                                    SEC
0C595 E9 0A                                 SBC #10
0C597 F6 1F                                 INC ball_score-1,x
0C599                                   +
0C599                                   
0C599                                   ;; Update new score digit
0C599 95 20                             STA ball_score,x
0C59B                           
0C59B                                   ;; Update score tile in PPU
0C59B A9 20                             LDA #$20
0C59D 99 00 03                          STA ppu_buffer,y
0C5A0 C8                                INY
0C5A1 8A                                TXA
0C5A2 18                                CLC
0C5A3 69 83                             ADC #$83
0C5A5 99 00 03                          STA ppu_buffer,y
0C5A8 C8                                INY
0C5A9 B5 20                             LDA ball_score,x
0C5AB 18                                CLC
0C5AC 69 01                             ADC #$01
0C5AE 99 00 03                          STA ppu_buffer,y
0C5B1 C8                                INY
0C5B2                           
0C5B2                                   ;; Check next digit (if any left)
0C5B2 CA                                DEX
0C5B3 30 03                             BMI +done
0C5B5 4C 8B C5                      JMP -
0C5B8                           
0C5B8                           +done:
0C5B8                               ;; Update PPU buffer pointer and status
0C5B8 84 3A                         STY ppu_buffer_pointer
0C5BA A9 01                         LDA #$01
0C5BC 85 39                         STA ppu_buffer_update
0C5BE                           
0C5BE                               ;; Done: return 
0C5BE 60                            RTS
0C5BF                           
0C5BF                           .include "game/subroutine/BackgroundNoise.asm"
0C5BF                           
0C5BF                           ;; Play background noise
0C5BF                           sub_BackgroundNoise:
0C5BF A9 32                         LDA #$32
0C5C1 8D 0C 40                      STA NOISE_VOLUME
0C5C4 A9 0E                         LDA #$0E
0C5C6 8D 0E 40                      STA NOISE_PERIOD
0C5C9 85 47                         STA current_noise
0C5CB 60                            RTS
0C5CC                           
0C5CC                           .include "game/subroutine/BlindsEffect.asm"
0C5CC                           
0C5CC                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C5CC                           sub_BlindsEffect:
0C5CC                           
0C5CC                               ;; Set up loop fading
0C5CC A9 00                         LDA #$00
0C5CE 85 07                         STA temp+7
0C5D0 A0 08                         LDY #$08
0C5D2                               -fadeLoop:
0C5D2 84 08                             STY temp+8
0C5D4                           
0C5D4                                   ;; Wait for NMI to pass
0C5D4 20 51 C5                          JSR sub_WaitForNMI
0C5D7                                   
0C5D7                                   ;; Now wait for No-sprite 0
0C5D7                                   -
0C5D7 AD 02 20                              LDA PPU_STATUS
0C5DA 29 40                                 AND #SPRITE_0_HIT
0C5DC D0 F9                             BNE -
0C5DE                               
0C5DE                                   ;; Now wait for Sprite 0
0C5DE                                   -
0C5DE AD 02 20                              LDA PPU_STATUS
0C5E1 29 40                                 AND #SPRITE_0_HIT
0C5E3 F0 F9                             BEQ -
0C5E5                                   
0C5E5                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C5E5 20 4D D1                          JSR sub_Waste6
0C5E8 20 50 D1                          JSR sub_Waste5
0C5EB 20 53 D1                          JSR sub_Waste4
0C5EE 20 56 D1                          JSR sub_Waste3
0C5F1 20 5C D1                          JSR sub_Waste1
0C5F4 20 5F D1                          JSR sub_Waste0
0C5F7                                   
0C5F7                                   
0C5F7                                   ;; Setup tile row loop
0C5F7 A0 16                             LDY #22
0C5F9                                   -tileLoop:
0C5F9                                   
0C5F9                                       ;; Disable drawing
0C5F9 A5 12                                 LDA soft_ppu_mask
0C5FB 29 F7                                 AND #%11110111
0C5FD 8D 01 20                              STA PPU_MASK
0C600                                       
0C600                                       ;; Set up scanline loop
0C600 A2 08                                 LDX #$08
0C602                                       -scanlineLoop:
0C602 E4 08                                     CPX temp+8
0C604 D0 0A                                     BNE +wasteTime
0C606                                           
0C606                                           ;; Restore drawing
0C606 A5 12                                     LDA soft_ppu_mask
0C608 09 08                                     ORA #%00001000
0C60A 8D 01 20                                  STA PPU_MASK
0C60D 4C 16 C6                                  JMP +wasteMoreTime
0C610                           
0C610                                           ;; Waste 12 frames
0C610                                           +wasteTime:
0C610 E6 55                                     INC void     ;+5
0C612 C6 55                                     DEC void     ;+5
0C614 49 00                                     EOR #$00     ;+2
0C616                                           
0C616                                           ;; Waste about a scanline worth of frames
0C616                                           +wasteMoreTime:
0C616 20 59 D1                                  JSR sub_Waste2
0C619 20 5F D1                                  JSR sub_Waste0
0C61C 20 5F D1                                  JSR sub_Waste0
0C61F E6 55                                     INC void
0C621 49 00                                     EOR #$00
0C623 49 00                                     EOR #$00
0C625 CA                                        DEX
0C626 D0 DA                                 BNE -scanlineLoop
0C628 C6 55                                 DEC void
0C62A 49 00                                 EOR #$00
0C62C 88                                    DEY
0C62D D0 CA                             BNE -tileLoop
0C62F                           
0C62F A4 08                             LDY temp+8
0C631                                   
0C631 E6 07                             INC temp+7
0C633 A5 07                             LDA temp+7
0C635 C9 02                             CMP #$02
0C637 D0 99                             BNE -fadeLoop
0C639                           
0C639 A9 00                             LDA #$00
0C63B 85 07                             STA temp+7
0C63D 88                                DEY
0C63E D0 92                         BNE -fadeLoop
0C640                               
0C640 60                            RTS
0C641                           
0C641                           .include "game/subroutine/ClearScreen.asm"
0C641                           
0C641                           ;; Subroutine to clear the screen
0C641                           ;; If it's a game screen, add noise
0C641                           
0C641                           sub_ClearScreen:
0C641                               ;; Check of game screen or not
0C641 A5 38                         LDA screen_mode
0C643 29 03                         AND #CHECK_SCREEN_MODE
0C645 C9 01                         CMP #IS_GAME_SCREEN
0C647 F0 02                         BEQ +
0C649 A9 00                             LDA #$00
0C64B                               +
0C64B 85 01                         STA temp+1
0C64D                               
0C64D                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C64D 2C 02 20                      BIT PPU_STATUS
0C650 A9 20                         LDA #$20
0C652 8D 06 20                      STA PPU_ADDR
0C655 A9 00                         LDA #$00
0C657 8D 06 20                      STA PPU_ADDR
0C65A                               
0C65A                               ;; Set up tile to draw and loop
0C65A 85 00                         STA temp
0C65C AA                            TAX
0C65D A8                            TAY
0C65E                           
0C65E                               -     
0C65E                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C65E A5 00                             LDA temp
0C660 8D 07 20                          STA PPU_DATA
0C663                           
0C663                                   ;; Check if we should draw noise next. Noise is drawn if:
0C663                                   ;; - Screen mode is game screen
0C663                                   ;; - Y between #$06 and #$19 (inclusive)
0C663                                   ;; - X between #$02 and #$1D (inclusive)
0C663                                   
0C663                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C663 A5 01                             LDA temp+1
0C665 F0 1C                             BEQ +nextTileInRow
0C667                                   
0C667                                   ;; If Y < $6, skip the check
0C667 C0 06                             CPY #$06
0C669 90 18                             BCC +nextTileInRow
0C66B                                   
0C66B                                   ;; If X < $1, skip the check
0C66B E0 01                             CPX #$01
0C66D 90 14                             BCC +nextTileInRow
0C66F                                   
0C66F                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C66F E0 1D                             CPX #$1D
0C671 D0 04                             BNE +
0C673 A9 00                                 LDA #$00
0C675 85 00                                 STA temp
0C677                                   +
0C677 B0 0A                             BCS +nextTileInRow
0C679                                   
0C679                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C679 20 2F C5                          JSR sub_GetRandomNumber
0C67C 29 07                             AND #%00000111
0C67E 18                                CLC
0C67F 69 68                             ADC #$68
0C681 85 00                             STA temp
0C683                           
0C683                           +nextTileInRow:
0C683                                   
0C683                                   ;; Check if a row has been done. If not, draw the next
0C683 E8                                INX
0C684 E0 20                             CPX #$20
0C686 D0 D6                             BNE -
0C688                                   
0C688                                   ;; Go to the next row (if any left)
0C688 A2 00                             LDX #00
0C68A C8                                INY
0C68B                                   
0C68B                                   ;; If Y is 1A, skip noise tile check until done drawing
0C68B C0 1A                             CPY #$1A
0C68D D0 04                             BNE +
0C68F A9 00                                 LDA #$00
0C691 85 01                                 STA temp+1
0C693                                   +
0C693                                   
0C693 C0 1E                             CPY #$1E
0C695 D0 C7                         BNE -
0C697                           
0C697                               ;; Clear attribute table
0C697 A9 23                         LDA #$23
0C699 8D 06 20                      STA PPU_ADDR
0C69C A9 C0                         LDA #$C0
0C69E 8D 06 20                      STA PPU_ADDR
0C6A1 A9 00                         LDA #$00
0C6A3 A2 40                         LDX #$40
0C6A5                               -
0C6A5 8D 07 20                          STA PPU_DATA
0C6A8 CA                                DEX
0C6A9 D0 FA                         BNE -
0C6AB                               
0C6AB 60                            RTS
0C6AC                           
0C6AC                           .include "game/subroutine/ColorizeBall.asm"
0C6AC                           
0C6AC                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6AC                           ;;
0C6AC                           ;;  Subroutine: ColorizeBall
0C6AC                           ;;
0C6AC                           ;;  Applies the color set through ball_flags to the ball sprite.
0C6AC                           ;;  Expects ball_flags to be in the accumulator
0C6AC                           ;;
0C6AC                           
0C6AC                           
0C6AC                           sub_ColorizeBall:
0C6AC                           
0C6AC                               ;; Get color from ball_flags
0C6AC 4A                            LSR
0C6AD 4A                            LSR
0C6AE 4A                            LSR
0C6AF 4A                            LSR
0C6B0 4A                            LSR
0C6B1 AA                            TAX
0C6B2                           
0C6B2                               ;; Add new light color of ball to PPU palette
0C6B2 A9 3F                         LDA #$3F
0C6B4 85 00                         STA temp
0C6B6 A9 11                         LDA #$11
0C6B8 85 01                         STA temp+1
0C6BA BD C4 D2                      LDA tbl_BallColorLight,x
0C6BD 85 02                         STA temp+2
0C6BF 20 60 D1                      JSR sub_WriteByteToPPUBuffer
0C6C2                               
0C6C2                               ;; Add new dark color of ball to PPU palette
0C6C2 E6 01                         INC temp+1
0C6C4 BD BE D2                      LDA tbl_BallColorDark,x
0C6C7 85 02                         STA temp+2
0C6C9 20 60 D1                      JSR sub_WriteByteToPPUBuffer
0C6CC                               
0C6CC 60                            RTS
0C6CD                           
0C6CD                           .include "game/subroutine/ColorsMatch.asm"
0C6CD                           
0C6CD                           ;; Subroutine to check if ball color matches colliding tile color
0C6CD                           
0C6CD                           sub_ColorsMatch:
0C6CD                               ;; Save tile color in temp variable
0C6CD A5 43                         LDA colliding_tile
0C6CF 29 0E                         AND #%00001110
0C6D1 85 00                         STA temp
0C6D3                           
0C6D3                               ;; Get ball color
0C6D3 A5 37                         LDA ball_flags
0C6D5 29 E0                         AND #%11100000
0C6D7 4A                            LSR
0C6D8 4A                            LSR
0C6D9 4A                            LSR
0C6DA 4A                            LSR
0C6DB                           
0C6DB                               ;; Compare with tile color
0C6DB C5 00                         CMP temp
0C6DD 60                            RTS
0C6DE                           
0C6DE                           .include "game/subroutine/ConvertXYToTileType.asm"
0C6DE                           
0C6DE                           ;; Subroutine to convert the ball's position to a tile type
0C6DE                           ;; - Expects temp to be y-position of ball within game area
0C6DE                           ;; - Expects temp+1 to be x-position of ball within game area
0C6DE                           ;; - Puts result in accumulator and zp variable
0C6DE                           ;; - Corrupts X-register
0C6DE                           
0C6DE                           sub_ConvertXYToTileType:
0C6DE A5 01                         LDA temp+1
0C6E0 4A                            LSR
0C6E1 4A                            LSR
0C6E2 4A                            LSR
0C6E3 4A                            LSR
0C6E4 85 09                         STA temp+9
0C6E6 A5 00                         LDA temp
0C6E8 29 F0                         AND #%11110000
0C6EA 18                            CLC
0C6EB 65 09                         ADC temp+9
0C6ED 85 09                         STA temp+9
0C6EF AA                            TAX
0C6F0 BD 00 04                      LDA tile_type, x
0C6F3 85 43                         STA colliding_tile
0C6F5 60                            RTS
0C6F6                           
0C6F6                           .include "game/subroutine/DisableEnableRendering.asm"
0C6F6                           
0C6F6                           ;; Subroutines to disable or enable screen rendering
0C6F6                           
0C6F6                           sub_DisableRendering:
0C6F6                               ;; Force NMI skip, disable rendering
0C6F6 A9 01                     	LDA #$01
0C6F8 85 14                     	STA force_skip_nmi
0C6FA 20 5A C5                      JSR sub_WaitForVBlank
0C6FD A5 12                         LDA soft_ppu_mask
0C6FF 29 E7                         AND #%11100111
0C701 8D 01 20                      STA PPU_MASK
0C704 85 12                         STA soft_ppu_mask
0C706 20 5A C5                      JSR sub_WaitForVBlank
0C709 60                            RTS
0C70A                           
0C70A                           sub_EnableRendering:
0C70A                               ;; Enable rendering
0C70A A9 00                     	LDA #$00
0C70C 8D 05 20                  	STA PPU_SCROLL
0C70F 8D 05 20                  	STA PPU_SCROLL
0C712 20 5A C5                      JSR sub_WaitForVBlank
0C715 85 14                     	STA force_skip_nmi
0C717 A5 12                         LDA soft_ppu_mask
0C719 09 18                         ORA #%00011000
0C71B 85 12                         STA soft_ppu_mask
0C71D 8D 01 20                      STA PPU_MASK
0C720 20 5A C5                      JSR sub_WaitForVBlank
0C723 60                            RTS
0C724                           
0C724                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C724                           
0C724                           ;; Draw a tile from the logo on the intro screen
0C724                           sub_drawIntroScreenLogoTile:
0C724 B9 A6 D1                      LDA tbl_IntroScreenLogoChr,y
0C727 C9 60                         CMP #$60
0C729 D0 08                         BNE +
0C72B 20 2F C5                          JSR sub_GetRandomNumber
0C72E 29 07                             AND #$07
0C730 18                                CLC
0C731 69 60                             ADC #$60
0C733                               +
0C733 8D 07 20                      STA PPU_DATA
0C736 60                            RTS
0C737                           
0C737                           .include "game/subroutine/DrawMoveTile.asm"
0C737                           
0C737                           ;; Draw the move tile as follows:
0C737                           ;;
0C737                           ;;  1 2
0C737                           ;;  3 4 5
0C737                           ;;    6 7
0C737                           ;;
0C737                           ;; (1,2,3,4) is the move block itself
0C737                           ;; (5,6,7) are shades unless that tile is solid
0C737                           
0C737                           ;; X holds the move block sprite slot
0C737                           
0C737                           sub_DrawMoveTile:
0C737                           
0C737                               ;; Get tile type index from sprite x and y values
0C737                               ;; and store it in a temp variable
0C737 BD 78 03                      LDA move_block_x,x
0C73A 18                            CLC
0C73B 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C73D 4A                            LSR
0C73E 4A                            LSR
0C73F 4A                            LSR
0C740 4A                            LSR
0C741 85 09                         STA temp+9
0C743 BD 7C 03                      LDA move_block_y,x
0C746 18                            CLC
0C747 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C749 29 F0                         AND #%11110000
0C74B 18                            CLC
0C74C 65 09                         ADC temp+9
0C74E 85 09                         STA temp+9
0C750 A8                            TAY
0C751                               
0C751                               ;; Add move tile data on the new tile location
0C751 BD 84 03                      LDA move_block_tile_type,x
0C754 99 00 04                      STA tile_type,y
0C757                           
0C757                               ;; Draw the original tile type in the ppu buffer
0C757                               ;; - get PPU address to write to (temp, temp+1)
0C757 8A                            TXA
0C758 48                            PHA
0C759 A6 09                         LDX temp+9
0C75B 20 15 CA                      JSR sub_GetPPUAddrFromYXIndex
0C75E 68                            PLA
0C75F AA                            TAX
0C760                               
0C760                               ;; - based on color, select tile 42 or 4A for top left
0C760 BD 88 03                      LDA move_block_flags,x
0C763 4A                            LSR
0C764 4A                            LSR
0C765 4A                            LSR
0C766 4A                            LSR
0C767 4A                            LSR
0C768 A8                            TAY
0C769 B9 6C DA                      LDA tbl_MoveBlockTopLeftTile,y
0C76C 85 08                         STA temp+8
0C76E                               
0C76E                               ;; - save palette ID in temp+6
0C76E 98                            TYA
0C76F 4A                            LSR
0C770 85 06                         STA temp+6
0C772                               
0C772                               ;; Prepare PPU buffer
0C772 A4 3A                         LDY ppu_buffer_pointer
0C774 A9 00                         LDA #$00
0C776 85 39                         STA ppu_buffer_update
0C778                               
0C778                               ;; Draw tile 1 (top left tile of move block)
0C778 20 59 C8                      JSR sub_DrawTileTemp018
0C77B                           
0C77B                               
0C77B                               ;; Draw tile 2 (top right tile of move block)
0C77B E6 01                         INC temp+1
0C77D E6 08                         INC temp+8
0C77F 20 59 C8                      JSR sub_DrawTileTemp018
0C782                           
0C782                               ;; Draw tile 3 (bottom left tile of move block)
0C782 A5 01                         LDA temp+1
0C784 18                            CLC
0C785 69 1F                         ADC #$1F
0C787 85 01                         STA temp+1
0C789 A5 00                         LDA temp
0C78B 69 00                         ADC #$00
0C78D 85 00                         STA temp
0C78F A5 08                         LDA temp+8
0C791 18                            CLC
0C792 69 0F                         ADC #$0F
0C794 85 08                         STA temp+8
0C796 20 59 C8                      JSR sub_DrawTileTemp018
0C799                           
0C799                               ;; Draw tile 4 (bottom right tile of move block)
0C799 E6 01                         INC temp+1
0C79B E6 08                         INC temp+8
0C79D 20 59 C8                      JSR sub_DrawTileTemp018
0C7A0                           
0C7A0                               ;; Load tile type offset in X register
0C7A0 8A                            TXA
0C7A1 48                            PHA
0C7A2 A6 09                         LDX temp+9
0C7A4                               
0C7A4                               ;; Load shade tile in temp+8
0C7A4 A9 00                         LDA #$00
0C7A6 85 08                         STA temp+8
0C7A8                           
0C7A8                               ;; Draw tile 5 (right shade) unless tile is solid
0C7A8 E6 01                         INC temp+1
0C7AA                               
0C7AA 8A                            TXA
0C7AB 29 0F                         AND #%00001111
0C7AD C9 0D                         CMP #$0D
0C7AF F0 0A                         BEQ +nextTile
0C7B1                           
0C7B1 BD 01 04                      LDA tile_type+1,x
0C7B4 29 01                         AND #%00000001
0C7B6 D0 03                         BNE +nextTile
0C7B8                               
0C7B8 20 59 C8                      JSR sub_DrawTileTemp018
0C7BB                               
0C7BB                           
0C7BB                           +nextTile:
0C7BB                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C7BB A5 01                         LDA temp+1
0C7BD 18                            CLC
0C7BE 69 1F                         ADC #$1F
0C7C0 85 01                         STA temp+1
0C7C2 A5 00                         LDA temp
0C7C4 69 00                         ADC #$00
0C7C6 85 00                         STA temp
0C7C8                           
0C7C8 8A                            TXA
0C7C9 29 F0                         AND #%11110000
0C7CB C9 90                         CMP #$90
0C7CD F0 0A                         BEQ +nextTile
0C7CF                           
0C7CF BD 10 04                      LDA tile_type+16,x
0C7D2 29 01                         AND #%00000001
0C7D4 D0 03                         BNE +nextTile
0C7D6                               
0C7D6 20 59 C8                      JSR sub_DrawTileTemp018
0C7D9                           
0C7D9                               
0C7D9                           +nextTile:
0C7D9                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C7D9 E6 01                         INC temp+1
0C7DB                           
0C7DB 8A                            TXA
0C7DC 29 F0                         AND #%11110000
0C7DE C9 90                         CMP #$90
0C7E0 F0 11                         BEQ +setTileAttributes
0C7E2                               
0C7E2 8A                            TXA
0C7E3 29 0F                         AND #%00001111
0C7E5 C9 0D                         CMP #$0D
0C7E7 F0 0A                         BEQ +setTileAttributes
0C7E9                               
0C7E9 BD 11 04                      LDA tile_type+17,x
0C7EC 29 01                         AND #%00000001
0C7EE D0 03                         BNE +setTileAttributes
0C7F0                               
0C7F0 20 59 C8                      JSR sub_DrawTileTemp018
0C7F3                               
0C7F3                           
0C7F3                           +setTileAttributes:
0C7F3                               ;; Update attribute table accordingly through ppu buffer
0C7F3                               ;; - PPU buffer high byte
0C7F3 20 D1 D0                      JSR sub_SetTileAttributeAddress
0C7F6                           
0C7F6 8A                            TXA
0C7F7 29 10                         AND #%00010000
0C7F9 F0 05                         BEQ +        
0C7FB A9 F0                             LDA #%11110000
0C7FD 4C 02 C8                          JMP ++
0C800                               +
0C800 A9 0F                         LDA #%00001111
0C802                               ++
0C802 85 02                         STA temp+2
0C804                               
0C804 8A                            TXA
0C805 29 01                         AND #%00000001
0C807 F0 07                         BEQ +
0C809 A5 02                             LDA temp+2
0C80B 09 CC                             ORA #%11001100
0C80D 4C 14 C8                          JMP ++
0C810                               +
0C810 A5 02                         LDA temp+2
0C812 09 33                         ORA #%00110011
0C814                               ++
0C814 85 02                         STA temp+2
0C816                               
0C816 C9 FC                         CMP #%11111100
0C818 F0 22                         BEQ +continue
0C81A                               
0C81A C9 F3                         CMP #%11110011
0C81C D0 09                         BNE +
0C81E A5 06                             LDA temp+6
0C820 0A                                ASL
0C821 0A                                ASL
0C822 85 06                             STA temp+6
0C824 4C 3C C8                          JMP +continue
0C827                               +
0C827                               
0C827 C9 CF                         CMP #%11001111
0C829 D0 0A                         BNE +
0C82B A6 06                             LDX temp+6
0C82D BD 0D DA                          LDA tbl_Times16,x
0C830 85 06                             STA temp+6
0C832 4C 3C C8                          JMP +continue
0C835                               +
0C835                               
0C835 A6 06                         LDX temp+6
0C837 BD 1D DA                      LDA tbl_Times64,x
0C83A 85 06                         STA temp+6
0C83C                                   
0C83C                           +continue:
0C83C A5 00                         LDA temp
0C83E 38                            SEC
0C83F E9 C0                         SBC #$C0
0C841 AA                            TAX
0C842 BD A0 04                      LDA tile_attributes,x
0C845 25 02                         AND temp+2
0C847 05 06                         ORA temp+6
0C849 9D A0 04                      STA tile_attributes,x
0C84C 99 00 03                      STA ppu_buffer,y
0C84F C8                            INY
0C850                           
0C850                               ;; Restore original X
0C850 68                            PLA
0C851 AA                            TAX
0C852                               
0C852                               ;; Update PPU buffer
0C852 84 3A                         STY ppu_buffer_pointer
0C854 A9 01                         LDA #$01
0C856 85 39                         STA ppu_buffer_update
0C858                           
0C858                               ;; Return
0C858 60                            RTS
0C859                           
0C859                           .include "game/subroutine/DrawTileTemp018.asm"
0C859                           
0C859                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C859                           
0C859                           sub_DrawTileTemp018:
0C859 A5 00                         LDA temp
0C85B 99 00 03                      STA ppu_buffer,y
0C85E C8                            INY
0C85F A5 01                         LDA temp+1
0C861 99 00 03                      STA ppu_buffer,y
0C864 C8                            INY
0C865 A5 08                         LDA temp+8
0C867 99 00 03                      STA ppu_buffer,y
0C86A C8                            INY
0C86B 60                            RTS
0C86C                           
0C86C                           .include "game/subroutine/EvaluateTileType.asm"
0C86C                           
0C86C                           ;; Subroutine to evaluate the colliding tile type and take its
0C86C                           ;; corresponding action (move block, kill player, ...)
0C86C                           ;; - Expects X-register to be the tile_type offset
0C86C                           ;; - Uses zp variable colliding_tile
0C86C                           
0C86C                           sub_EvaluateTileType:
0C86C                           
0C86C                               ;; Check if collided tile is a color block
0C86C A5 43                         LDA colliding_tile
0C86E 29 80                         AND #IS_COLOR_BLOCK
0C870 D0 03                         BNE +
0C872 4C DB C8                          JMP +checkIfPaintBlock
0C875                               +
0C875                               
0C875                               ;; It's a color block. Check if the colors match
0C875 20 CD C6                      JSR sub_ColorsMatch
0C878 F0 06                         BEQ +
0C87A                                   ;; Colors don't match
0C87A                                   ;; Play bounce sound effect
0C87A A2 02                             LDX #SFX_BOUNCE
0C87C 20 4C CF                          JSR sub_PreloadSfxFromX
0C87F                                   
0C87F                                   ;; Return
0C87F 60                                RTS
0C880                               +
0C880                           
0C880                               ;; Colors match; destroy color block
0C880                               
0C880                               ;; Convert the metatile offset value (which is in the X register)
0C880                               ;; to its corresponding address in PPU
0C880 20 15 CA                      JSR sub_GetPPUAddrFromYXIndex
0C883                           
0C883                               ;; Remove color block from screen by drawing a total
0C883                               ;; of 7 tiles over it (shade included)
0C883 20 5B CF                      JSR sub_RemoveBlockFromScreen
0C886                               
0C886                               ;; - Load destruction animation on tile
0C886                               ;; Get most recent slot for explosion    
0C886 8A                            TXA
0C887 85 02                         STA temp+2
0C889 A6 3B                         LDX explosion_pointer
0C88B                           
0C88B                               ;; If 0, use max pointer value
0C88B D0 02                         BNE +
0C88D A2 04                             LDX #MAX_ANIMATIONS
0C88F                               +
0C88F                           
0C88F                               ;; Decrease pointer by one
0C88F CA                            DEX
0C890 86 3B                         STX explosion_pointer
0C892                           
0C892                               ;; Load explosion data into RAM
0C892 A9 00                         LDA #$00
0C894 9D 64 03                      STA explosion_currentframe,x
0C897                           
0C897 A9 04                         LDA #ANIMATION_SPEED
0C899 9D 60 03                      STA explosion_timer,x
0C89C                           
0C89C A5 02                         LDA temp+2
0C89E 29 0F                         AND #%00001111
0C8A0 A8                            TAY
0C8A1 B9 0D DA                      LDA tbl_Times16,y
0C8A4 18                            CLC
0C8A5 69 0E                         ADC #$0E
0C8A7 9D 6C 03                      STA explosion_x,x
0C8AA                           
0C8AA A5 02                         LDA temp+2
0C8AC 29 F0                         AND #%11110000
0C8AE 18                            CLC
0C8AF 69 29                         ADC #$29
0C8B1 9D 70 03                      STA explosion_y,x
0C8B4                           
0C8B4 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C8B6 9D 68 03                      STA explosion_attributes,x
0C8B9 A9 01                         LDA #$01
0C8BB 9D 74 03                      STA explosion_active,x
0C8BE                           
0C8BE A5 02                         LDA temp+2
0C8C0 AA                            TAX
0C8C1                               
0C8C1                               
0C8C1                               ;; - Write #$00 in tile type ram (makes not-solid)
0C8C1 A9 00                         LDA #$00
0C8C3 9D 00 04                      STA tile_type, x
0C8C6                           
0C8C6                           
0C8C6                               ;; Add (80 + level number) to score
0C8C6 A5 42                         LDA current_level
0C8C8 18                            CLC
0C8C9 69 51                         ADC #81
0C8CB 20 60 C5                      JSR sub_AddAccumulatorToScore
0C8CE                           
0C8CE                           
0C8CE                               ;; Play thud sound effect
0C8CE A2 01                         LDX #SFX_THUD
0C8D0 20 4C CF                      JSR sub_PreloadSfxFromX
0C8D3                           
0C8D3                           
0C8D3                               ;; - If there are no color blocks left:
0C8D3                               ;;   - Initiate level-win state
0C8D3 C6 44                         DEC blocks_left
0C8D5 D0 03                         BNE +
0C8D7 4C 79 C4                          JMP lbl_LevelWin
0C8DA                               +
0C8DA                               
0C8DA 60                            RTS
0C8DB                           
0C8DB                           
0C8DB                           
0C8DB                           +checkIfPaintBlock:
0C8DB                           
0C8DB                               ;; Check if collided tile is a paint block
0C8DB A5 43                         LDA colliding_tile
0C8DD 29 20                         AND #IS_PAINT_BLOCK
0C8DF F0 1E                         BEQ +checkIfDeathBlock
0C8E1                                   ;; It's a paint block. Update ball color
0C8E1                                   ;; Save x-register
0C8E1 8A                                TXA
0C8E2 48                                PHA
0C8E3                           
0C8E3                                   ;; Get tile color
0C8E3 A5 43                             LDA colliding_tile
0C8E5 29 0E                             AND #%00001110
0C8E7 0A                                ASL
0C8E8 0A                                ASL
0C8E9 0A                                ASL
0C8EA 0A                                ASL
0C8EB 85 00                             STA temp
0C8ED                           
0C8ED                                   ;; Apply tile color to ball
0C8ED A5 37                             LDA ball_flags
0C8EF 29 1F                             AND #%00011111
0C8F1 05 00                             ORA temp
0C8F3 85 37                             STA ball_flags
0C8F5 20 AC C6                          JSR sub_ColorizeBall
0C8F8                           
0C8F8                                   ;; Play paint sound effect
0C8F8 A9 10                             LDA #$10
0C8FA 85 50                             STA sfx_timer+2
0C8FC                           
0C8FC                                   ;; Restore x-register
0C8FC 68                                PLA
0C8FD AA                                TAX
0C8FE                           
0C8FE                                   ;; Return
0C8FE 60                                RTS
0C8FF                                   
0C8FF                                   
0C8FF                                   
0C8FF                           +checkIfDeathBlock:
0C8FF                           
0C8FF                               ;; Check if collided tile is a death block
0C8FF A5 43                         LDA colliding_tile
0C901 29 10                         AND #IS_DEATH_BLOCK
0C903 F0 3D                         BEQ +checkIfMoveBlock
0C905                           
0C905                           ;; Also, when the player presses select during gameplay,
0C905                           ;; insta-selfdestruct the ball.
0C905                           sub_Selfdestruct:
0C905                           
0C905                                   ;; It is a death block
0C905                                   ;; Freeze and kill player
0C905 A5 37                             LDA ball_flags
0C907 09 05                             ORA #%00000101
0C909 85 37                             STA ball_flags
0C90B                                   
0C90B                                   ;; Get free explosion slot
0C90B A6 3B                             LDX explosion_pointer
0C90D D0 02                             BNE +
0C90F A2 04                                 LDX #MAX_ANIMATIONS
0C911                                   +
0C911 CA                                DEX
0C912 86 3B                             STX explosion_pointer
0C914                           
0C914                                   ;; Load explosion data into RAM
0C914 A9 00                             LDA #$00
0C916 9D 64 03                          STA explosion_currentframe,x
0C919                           
0C919 A9 04                             LDA #ANIMATION_SPEED
0C91B 9D 60 03                          STA explosion_timer,x
0C91E                           
0C91E A5 17                             LDA ball_xpos_hi
0C920 38                                SEC
0C921 E9 08                             SBC #$08
0C923 9D 6C 03                          STA explosion_x,x
0C926                           
0C926 A5 19                             LDA ball_ypos_hi
0C928 38                                SEC
0C929 E9 06                             SBC #$06
0C92B 9D 70 03                          STA explosion_y,x
0C92E                           
0C92E A9 01                             LDA #$01
0C930 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C933 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C936 85 4B                             STA noise_muted             ; mute background noise
0C938                                   
0C938                                   ;; Play explosion sound effect
0C938 A2 00                             LDX #SFX_EXPLOSION
0C93A 20 4C CF                          JSR sub_PreloadSfxFromX
0C93D                           
0C93D                                   ;; Set kill timer
0C93D A9 60                             LDA #$60
0C93F 85 40                             STA kill_timer
0C941                           
0C941                                   ;; Return
0C941 60                                RTS
0C942                           
0C942                           
0C942                           
0C942                           +checkIfMoveBlock:
0C942                           
0C942                               ;; Check if collided tile is a move block
0C942 A5 43                         LDA colliding_tile
0C944 29 40                         AND #IS_MOVE_BLOCK
0C946 D0 06                         BNE +
0C948                                   ;; Tile is not a move block
0C948                                   ;; Therefore, it is a solid wall
0C948                                   
0C948                                   ;; Play bounce sound effect
0C948 A2 02                             LDX #SFX_BOUNCE
0C94A 20 4C CF                          JSR sub_PreloadSfxFromX
0C94D                           
0C94D                                   ;; Return
0C94D 60                                RTS
0C94E                               +
0C94E                           
0C94E                               ;; It is a move block. Check if colors match
0C94E 20 CD C6                      JSR sub_ColorsMatch
0C951 F0 06                         BEQ +
0C953                                   ;; Colors do not match
0C953                                   ;; Play bounce sound effect
0C953 A2 02                             LDX #SFX_BOUNCE
0C955 20 4C CF                          JSR sub_PreloadSfxFromX
0C958                           
0C958                                   ;; Return
0C958 60                                RTS
0C959                               +
0C959                           
0C959                               ;; Colors match
0C959                               ;; - Check if next tile is within the playground
0C959                               ;; (push X onto stack as well)
0C959 8A                            TXA
0C95A 48                            PHA
0C95B 18                            CLC
0C95C 65 36                         ADC move_block_space_to_check
0C95E AA                            TAX
0C95F                               
0C95F 29 0F                         AND #%00001111
0C961 C9 0E                         CMP #$0E
0C963 90 03                         BCC +
0C965 4C DD C9                          JMP +dontMoveBlock
0C968                               +
0C968 8A                            TXA
0C969 29 F0                         AND #%11110000
0C96B C9 A0                         CMP #$A0
0C96D D0 03                         BNE +
0C96F 4C DD C9                          JMP +dontMoveBlock
0C972                               +
0C972 C9 F0                         CMP #$F0
0C974 D0 03                         BNE +
0C976 4C DD C9                          JMP +dontMoveBlock
0C979                               +
0C979                               
0C979                               ;; Check if the next tile is solid
0C979 BD 00 04                      LDA tile_type,x
0C97C 29 01                         AND #TILE_IS_SOLID
0C97E F0 03                         BEQ +
0C980 4C DD C9                          JMP +dontMoveBlock
0C983                               +
0C983                               
0C983                               ;; Move block has room to move
0C983                               ;; Pull original X from stack
0C983 68                            PLA
0C984 AA                            TAX        
0C985                               
0C985                               ;; Add the tiles that need updating to ppu buffer, and
0C985                               ;; update attribute table accordingly through ppu buffer
0C985 20 15 CA                      JSR sub_GetPPUAddrFromYXIndex
0C988 20 5B CF                      JSR sub_RemoveBlockFromScreen
0C98B                           
0C98B                               ;; Store original tile type in temp variable
0C98B BD 00 04                      LDA tile_type,x
0C98E 85 08                         STA temp+8
0C990                           
0C990                               ;; Write #$00 in tile type ram (makes not-solid)
0C990 A9 00                         LDA #$00
0C992 9D 00 04                      STA tile_type,x
0C995                           
0C995                               ;; Add move tile sprite over the original tile
0C995                               ;; - Store x in temp variable
0C995 86 03                         STX temp+3
0C997                               
0C997                               ;; - Update move block pointer
0C997 A6 3C                         LDX move_block_pointer
0C999 D0 02                         BNE +
0C99B A2 04                             LDX #MAX_ANIMATIONS
0C99D                               +
0C99D CA                            DEX
0C99E 86 3C                         STX move_block_pointer
0C9A0                           
0C9A0                               ;; = Set move block tile type
0C9A0 A5 08                         LDA temp+8
0C9A2 9D 84 03                      STA move_block_tile_type,x
0C9A5                           
0C9A5                               ;; - Set move block X position
0C9A5 A5 03                         LDA temp+3
0C9A7 29 0F                         AND #%00001111
0C9A9 A8                            TAY
0C9AA C8                            INY
0C9AB B9 0D DA                      LDA tbl_Times16,y
0C9AE 9D 78 03                      STA move_block_x,x
0C9B1                               
0C9B1                               ;; - Set move block Y position
0C9B1 A5 03                         LDA temp+3
0C9B3 29 F0                         AND #%11110000
0C9B5 18                            CLC
0C9B6 69 30                         ADC #$30
0C9B8 9D 7C 03                      STA move_block_y,x
0C9BB DE 7C 03                      DEC move_block_y,x
0C9BE                               
0C9BE                               ;; - Set timer to 16 (+1) frames
0C9BE A9 11                         LDA #$11
0C9C0 9D 80 03                      STA move_block_timer,x
0C9C3                               
0C9C3                               ;; - Set move direction
0C9C3 A5 36                         LDA move_block_space_to_check
0C9C5 29 81                         AND #%10000001
0C9C7 18                            CLC
0C9C8 2A                            ROL
0C9C9 69 00                         ADC #$00
0C9CB 85 04                         STA temp+4
0C9CD                               
0C9CD                               ;; - Set block color as ball color and add direction
0C9CD A5 37                         LDA ball_flags
0C9CF 29 E0                         AND #BALL_COLOR
0C9D1 05 04                         ORA temp+4
0C9D3 9D 88 03                      STA move_block_flags,x
0C9D6                               
0C9D6                               ;; - Restore original X
0C9D6 A6 03                         LDX temp+3
0C9D8                               
0C9D8                               ;; - Initiate move sound effect
0C9D8 A9 18                         LDA #$18
0C9DA 85 4F                         STA sfx_timer+1
0C9DC                           
0C9DC                               ;; Return
0C9DC 60                            RTS
0C9DD                           
0C9DD                           
0C9DD                           ;; Do not move the move block
0C9DD                           +dontMoveBlock:
0C9DD                           
0C9DD                               ;; Play bounce sound effect
0C9DD A2 02                         LDX #SFX_BOUNCE
0C9DF 20 4C CF                      JSR sub_PreloadSfxFromX
0C9E2                           
0C9E2                               ;; Restore X from stack
0C9E2 68                            PLA
0C9E3 AA                            TAX
0C9E4                               
0C9E4                               ;; Return
0C9E4 60                            RTS
0C9E5                           
0C9E5                           .include "game/subroutine/FlashEffect.asm"
0C9E5                           
0C9E5                           ;; Apply flashing light effect to background color
0C9E5                           sub_FlashEffect:
0C9E5 A2 00                         LDX #$00
0C9E7 86 01                         STX temp+1
0C9E9 A9 3F                         LDA #$3F
0C9EB 85 00                         STA temp
0C9ED                           
0C9ED                               -flashLoop:
0C9ED BD 7D DA                          LDA tbl_BackgroundFade,x
0C9F0 85 02                             STA temp+2
0C9F2 20 60 D1                          JSR sub_WriteByteToPPUBuffer
0C9F5 A9 0D                             LDA #$0D
0C9F7 85 01                             STA temp+1
0C9F9 20 60 D1                          JSR sub_WriteByteToPPUBuffer
0C9FC A9 19                             LDA #$19
0C9FE 85 01                             STA temp+1
0CA00 20 60 D1                          JSR sub_WriteByteToPPUBuffer
0CA03 A9 00                             LDA #$00
0CA05 85 01                             STA temp+1
0CA07 A0 03                             LDY #$03
0CA09                                   -
0CA09 20 51 C5                              JSR sub_WaitForNMI
0CA0C 88                                    DEY
0CA0D D0 FA                             BNE -
0CA0F E8                                INX
0CA10 E0 0A                             CPX #$0A
0CA12 D0 D9                         BNE -flashLoop
0CA14                               
0CA14 60                            RTS
0CA15                           
0CA15                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0CA15                           
0CA15                           ;; Get the PPU address from YX index
0CA15                           ;; - Expects YX index (aka tile offset) to be in the X register
0CA15                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0CA15                           
0CA15                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0CA15                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0CA15                           
0CA15                           sub_GetPPUAddrFromYXIndex:
0CA15 8A                            TXA
0CA16 29 C0                         AND #%11000000
0CA18 18                            CLC
0CA19 2A                            ROL
0CA1A 2A                            ROL
0CA1B 2A                            ROL
0CA1C 69 20                         ADC #$20
0CA1E 85 00                         STA temp
0CA20                               
0CA20 8A                            TXA
0CA21 29 0F                         AND #%00001111
0CA23 0A                            ASL
0CA24 85 01                         STA temp+1
0CA26                               
0CA26 8A                            TXA
0CA27 29 30                         AND #%00110000
0CA29 0A                            ASL
0CA2A 0A                            ASL
0CA2B 18                            CLC
0CA2C 65 01                         ADC temp+1
0CA2E 85 01                         STA temp+1
0CA30                               
0CA30 A5 00                         LDA temp
0CA32 69 00                         ADC #$00
0CA34 85 00                         STA temp
0CA36                               
0CA36 A5 01                         LDA temp+1
0CA38 18                            CLC
0CA39 69 C2                         ADC #$C2
0CA3B 85 01                         STA temp+1
0CA3D                               
0CA3D A5 00                         LDA temp
0CA3F 69 00                         ADC #$00
0CA41 85 00                         STA temp
0CA43                           
0CA43 60                            RTS
0CA44                           
0CA44                           .include "game/subroutine/InitiateNudge.asm"
0CA44                           
0CA44                           ;; Tell ball to nudge
0CA44                           sub_InitiateNudge:
0CA44 85 37                         STA ball_flags
0CA46 A9 06                         LDA #NUDGE_FRAMES
0CA48 85 3E                         STA nudge_timer
0CA4A 60                            RTS
0CA4B                           
0CA4B                           .include "game/subroutine/JumpToPointer.asm"
0CA4B                           
0CA4B                           ;; Helper subroutine to JSR to a variable pointer address
0CA4B                           sub_JumpToPointer:
0CA4B 6C 0C 00                      JMP (pointer)
0CA4E                               ;RTS must be handled by the routine (pointer) jumps to
0CA4E                           
0CA4E                           .include "game/subroutine/LoadAnimations.asm"
0CA4E                           
0CA4E                           sub_LoadAnimations:
0CA4E                           
0CA4E                               ;; Set up loop
0CA4E A2 00                         LDX #$00
0CA50                               -loop_load_animation:
0CA50                                   ;; Check if current animation is active. If not, goto next
0CA50 BD 74 03                          LDA explosion_active,x
0CA53 D0 03                             BNE +
0CA55 4C E0 CA                              JMP +next
0CA58                                   +
0CA58                           
0CA58                                   ;; Check the explosion framecounter
0CA58 BD 60 03                          LDA explosion_timer,x
0CA5B D0 17                             BNE +
0CA5D                                       ;; Frametimer is 0
0CA5D                                       ;; Reset to animation speed
0CA5D A9 04                                 LDA #ANIMATION_SPEED
0CA5F 9D 60 03                              STA explosion_timer,x
0CA62                           
0CA62                                       ;; Set next animation frame, and check if we're done yet
0CA62 FE 64 03                              INC explosion_currentframe,x
0CA65 BD 64 03                              LDA explosion_currentframe,x
0CA68 C9 0A                                 CMP #ANIM_SLIDES
0CA6A D0 08                                 BNE +
0CA6C                           
0CA6C                                       ;; If we're done, inactivate current explosion, go to the next one
0CA6C A9 00                                 LDA #$00
0CA6E 9D 74 03                              STA explosion_active,x
0CA71 4C E0 CA                              JMP +next
0CA74                                   +
0CA74                           
0CA74                                   ;; Load (x,y) position in temp variables
0CA74 BD 6C 03                          LDA explosion_x,x
0CA77 85 01                             STA temp+1
0CA79 85 03                             STA temp+3
0CA7B BD 70 03                          LDA explosion_y,x
0CA7E 85 02                             STA temp+2
0CA80                           
0CA80                                   ;; Load attribute in temp variable
0CA80 BD 68 03                          LDA explosion_attributes,x
0CA83 85 04                             STA temp+4
0CA85                           
0CA85                                   ;; Load current frame into Y-register
0CA85 BC 64 03                          LDY explosion_currentframe,x
0CA88                           
0CA88                                   ;; Load current frame ROM address from table
0CA88 B9 B4 D2                          LDA explosion_anim_lo,y
0CA8B 85 0C                             STA pointer
0CA8D B9 AA D2                          LDA explosion_anim_hi,y
0CA90 85 0D                             STA pointer+1
0CA92                           
0CA92                                   ;; Save x-register on stack
0CA92 8A                                TXA
0CA93 48                                PHA
0CA94                           
0CA94                                   ;; Load sprites into sprite RAM
0CA94 A6 3D                             LDX sprite_ram_pointer
0CA96 A0 00                             LDY #$00
0CA98                           
0CA98                                   ;; Prepare (x,y) offset for loop
0CA98 84 00                             STY temp
0CA9A                           
0CA9A                                   -loop_load_sprite:
0CA9A                                   
0CA9A                                       ;; Do not draw empty sprites
0CA9A B1 0C                                 LDA (pointer),y
0CA9C F0 18                                 BEQ +nextSprite
0CA9E                                   
0CA9E                                           ;; Add y-position to sprite ram buffer
0CA9E A5 02                                     LDA temp+2
0CAA0 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAA3 E8                                        INX
0CAA4                           
0CAA4                                           ;; Get tile number from frame ROM address, and
0CAA4                                           ;; add it to sprite ram buffer
0CAA4 B1 0C                                     LDA (pointer),y
0CAA6 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAA9 E8                                        INX
0CAAA                           
0CAAA                                           ;; Add attribute data to sprite ram buffer
0CAAA A5 04                                     LDA temp+4
0CAAC 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAAF E8                                        INX
0CAB0                           
0CAB0                                           ;; Add x-position to sprite ram buffer
0CAB0 A5 03                                     LDA temp+3
0CAB2 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAB5 E8                                        INX
0CAB6                           
0CAB6                                       +nextSprite:
0CAB6                           
0CAB6                                       ;; Check if all sprites are done
0CAB6 C8                                    INY
0CAB7 C0 09                                 CPY #SLIDE_SIZE
0CAB9 F0 21                                 BEQ +updateSpriteRamPointer
0CABB                           
0CABB                                       ;; Update x value
0CABB A5 03                                 LDA temp+3
0CABD 18                                    CLC
0CABE 69 08                                 ADC #$08
0CAC0 85 03                                 STA temp+3
0CAC2                           
0CAC2                                       ;; Update temp for x,y position
0CAC2 E6 00                                 INC temp
0CAC4 A5 00                                 LDA temp
0CAC6 C9 03                                 CMP #SLIDE_WIDTH
0CAC8 D0 0F                                 BNE +
0CACA                                           ;; Row is done; reset x-position
0CACA A5 01                                     LDA temp+1
0CACC 85 03                                     STA temp+3
0CACE                           
0CACE                                           ;; Update y-position
0CACE A5 02                                     LDA temp+2
0CAD0 18                                        CLC
0CAD1 69 08                                     ADC #$08
0CAD3 85 02                                     STA temp+2
0CAD5                           
0CAD5                                           ;; Reset row timer
0CAD5 A9 00                                     LDA #$00
0CAD7 85 00                                     STA temp
0CAD9                                       +
0CAD9                           
0CAD9 4C 9A CA                          JMP -loop_load_sprite
0CADC                           
0CADC                               +updateSpriteRamPointer:
0CADC 86 3D                             STX sprite_ram_pointer
0CADE                           
0CADE                                   ;; Retrieve x-register from stack
0CADE 68                                PLA
0CADF AA                                TAX
0CAE0                           
0CAE0                               +next:
0CAE0                                   ;; Check if all animations have been updated
0CAE0 E8                                INX
0CAE1 E0 04                             CPX #MAX_ANIMATIONS
0CAE3 F0 03                             BEQ +cleanUpSpriteRam
0CAE5                           
0CAE5 4C 50 CA                      JMP -loop_load_animation
0CAE8                           
0CAE8                           +cleanUpSpriteRam:
0CAE8 A6 3D                         LDX sprite_ram_pointer
0CAEA A9 EF                         LDA #$EF
0CAEC                               -
0CAEC 9D 00 02                          STA ADDR_SPRITERAM,x
0CAEF E8                                INX
0CAF0 D0 FA                         BNE -
0CAF2                               
0CAF2 60                            RTS
0CAF3                               
0CAF3                           .include "game/subroutine/LoadGameScreen.asm"
0CAF3                           
0CAF3                           ;; Load the game screen, based on level number
0CAF3                           sub_LoadGameScreen:
0CAF3                           
0CAF3                               ;; Clear the screen
0CAF3 20 41 C6                      JSR sub_ClearScreen
0CAF6                               
0CAF6                               ;; Clear collision and attribute data; reset blocks left in the process
0CAF6 A2 00                         LDX #$00
0CAF8 8A                            TXA
0CAF9 85 44                         STA blocks_left
0CAFB                               -
0CAFB 9D 00 04                          STA tile_type,x
0CAFE E8                                INX
0CAFF D0 FA                         BNE -
0CB01                               
0CB01                               ;; Get pointer from current level
0CB01 A6 42                         LDX current_level
0CB03 BD C2 D9                      LDA tbl_lvl_layout_lo,x
0CB06 85 0C                         STA pointer
0CB08 BD A9 D9                      LDA tbl_lvl_layout_hi,x
0CB0B 85 0D                         STA pointer+1
0CB0D                           
0CB0D                               ;; Set up the loop
0CB0D A0 00                         LDY #$00
0CB0F                           -drawRowColumnLoop:
0CB0F                           
0CB0F                               ;; Load (x,y) of current set of tiles
0CB0F B1 0C                         LDA (pointer),y
0CB11                           
0CB11                               ;; Check if level is done; if so, skip the loop
0CB11 C9 FF                         CMP #LEVEL_END
0CB13 D0 03                         BNE +
0CB15 4C 5E CC                          JMP +doneLevelLoad
0CB18                               +
0CB18                           
0CB18                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CB18 85 00                         STA temp
0CB1A C8                            INY
0CB1B B1 0C                         LDA (pointer),y
0CB1D 85 01                         STA temp+1
0CB1F                               
0CB1F                               ;; Convert (x,y) to PPU address
0CB1F                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CB1F A5 00                         LDA temp
0CB21 29 0F                         AND #%00001111
0CB23 4A                            LSR
0CB24 4A                            LSR
0CB25 09 20                         ORA #$20
0CB27 85 02                         STA temp+2
0CB29                               
0CB29                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CB29 A5 00                         LDA temp
0CB2B 29 F0                         AND #%11110000
0CB2D 4A                            LSR
0CB2E 4A                            LSR
0CB2F 4A                            LSR
0CB30 85 03                         STA temp+3
0CB32                               
0CB32 A5 00                         LDA temp
0CB34 29 03                         AND #%00000011
0CB36 AA                            TAX
0CB37 BD 1D DA                      LDA tbl_Times64,x
0CB3A 18                            CLC
0CB3B 65 03                         ADC temp+3
0CB3D 18                            CLC
0CB3E 69 C2                         ADC #$C2
0CB40 85 03                         STA temp+3
0CB42                               
0CB42                               ;; Add carry to temp+2
0CB42 A5 02                         LDA temp+2
0CB44 69 00                         ADC #$00
0CB46 85 02                         STA temp+2
0CB48                           
0CB48                               ;; Convert tile data to loop count and tile type
0CB48                               ;; temp+4 = color
0CB48 A5 01                         LDA temp+1
0CB4A 29 07                         AND #%00000111
0CB4C 85 04                         STA temp+4
0CB4E                               
0CB4E                               ;; If color = 7, this is a wall
0CB4E C9 07                         CMP #%00000111
0CB50 F0 12                         BEQ +wallHack
0CB52                                   
0CB52                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CB52 29 01                             AND #%00000001
0CB54 F0 02                             BEQ +
0CB56 A9 05                                 LDA #$05
0CB58                                   +
0CB58 85 07                             STA temp+7
0CB5A                                
0CB5A                                   ;; temp+5 = tile type
0CB5A A5 01                             LDA temp+1
0CB5C 4A                                LSR
0CB5D 4A                                LSR
0CB5E 4A                                LSR
0CB5F 29 03                             AND #%00000011
0CB61 4C 6A CB                          JMP +setTileType
0CB64                               +wallHack:
0CB64                               
0CB64                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CB64 A9 00                         LDA #$00
0CB66 85 07                         STA temp+7
0CB68 A9 04                         LDA #$04
0CB6A                           
0CB6A                           +setTileType:    
0CB6A 85 05                         STA temp+5
0CB6C                               
0CB6C                               ;; X = tile offset
0CB6C 18                            CLC
0CB6D 65 07                         ADC temp+7
0CB6F AA                            TAX
0CB70                               
0CB70                               ;; temp+6 = number of tiles
0CB70 A5 01                         LDA temp+1
0CB72 29 60                         AND #%01100000
0CB74 4A                            LSR
0CB75 4A                            LSR
0CB76 4A                            LSR
0CB77 4A                            LSR
0CB78 4A                            LSR
0CB79 85 06                         STA temp+6
0CB7B                               
0CB7B                               ;; Translate (x,y) to (y,x) for tile RAM
0CB7B A5 00                         LDA temp
0CB7D 0A                            ASL
0CB7E 0A                            ASL
0CB7F 0A                            ASL
0CB80 0A                            ASL
0CB81 85 08                         STA temp+8
0CB83 A5 00                         LDA temp
0CB85 4A                            LSR
0CB86 4A                            LSR
0CB87 4A                            LSR
0CB88 4A                            LSR
0CB89 05 08                         ORA temp+8
0CB8B 85 00                         STA temp
0CB8D                               
0CB8D                               ;; Set up loop
0CB8D 98                            TYA
0CB8E 48                            PHA
0CB8F A4 06                         LDY temp+6
0CB91                           
0CB91                               -drawTileLoop:
0CB91                                   ;; Write PPU address
0CB91 2C 02 20                          BIT PPU_STATUS
0CB94 A5 02                             LDA temp+2
0CB96 8D 06 20                          STA PPU_ADDR
0CB99 A5 03                             LDA temp+3
0CB9B 8D 06 20                          STA PPU_ADDR
0CB9E                                   
0CB9E                                   ;; Write first and second tile
0CB9E BD 21 DA                          LDA tbl_GametileTopLeft,x
0CBA1 8D 07 20                          STA PPU_DATA
0CBA4 BD 2B DA                          LDA tbl_GametileTopRight,x
0CBA7 8D 07 20                          STA PPU_DATA
0CBAA                                   
0CBAA                                   ;; Update PPU address
0CBAA 2C 02 20                          BIT PPU_STATUS
0CBAD A5 02                             LDA temp+2
0CBAF 8D 06 20                          STA PPU_ADDR
0CBB2 A5 03                             LDA temp+3
0CBB4 18                                CLC
0CBB5 69 20                             ADC #$20
0CBB7 8D 06 20                          STA PPU_ADDR
0CBBA                                   
0CBBA                                   ;; Write third and fourth tile
0CBBA BD 35 DA                          LDA tbl_GametileBottomLeft,x
0CBBD 8D 07 20                          STA PPU_DATA
0CBC0 BD 3F DA                          LDA tbl_GametileBottomRight,x
0CBC3 8D 07 20                          STA PPU_DATA
0CBC6                           
0CBC6                                   ;; Push x-register to stack
0CBC6 8A                                TXA
0CBC7 48                                PHA
0CBC8                           
0CBC8                                   ;; Update tile RAM (aka collision table)
0CBC8 A6 05                             LDX temp+5
0CBCA BD 49 DA                          LDA tbl_GameTileRamByte,x
0CBCD 05 04                             ORA temp+4
0CBCF 0A                                ASL
0CBD0 09 01                             ORA #%00000001
0CBD2 A6 00                             LDX temp
0CBD4 9D 00 04                          STA tile_type,x
0CBD7                           
0CBD7                                   ;; Check if shade 1 should be drawn
0CBD7 E8                                INX
0CBD8 BD 00 04                          LDA tile_type,x
0CBDB D0 05                             BNE +
0CBDD A9 00                                 LDA #$00
0CBDF 8D 07 20                              STA PPU_DATA
0CBE2                                   +
0CBE2                                   
0CBE2                                   ;; Check if shade 2 should be drawn
0CBE2 A5 03                             LDA temp+3
0CBE4 18                                CLC
0CBE5 69 41                             ADC #$41
0CBE7 85 03                             STA temp+3
0CBE9 A5 02                             LDA temp+2
0CBEB 69 00                             ADC #$00
0CBED 85 02                             STA temp+2
0CBEF                                   
0CBEF 8A                                TXA
0CBF0 18                                CLC
0CBF1 69 0F                             ADC #$0F
0CBF3 AA                                TAX
0CBF4                                   
0CBF4 BD 00 04                          LDA tile_type,x
0CBF7 D0 0F                             BNE +
0CBF9 A5 02                                 LDA temp+2
0CBFB 8D 06 20                              STA PPU_ADDR
0CBFE A5 03                                 LDA temp+3
0CC00 8D 06 20                              STA PPU_ADDR
0CC03 A9 00                                 LDA #$00
0CC05 8D 07 20                              STA PPU_DATA
0CC08                                   +
0CC08                           
0CC08                                   ;; Check if shade 3 should be drawn
0CC08 E8                                INX
0CC09 E6 03                             INC temp+3
0CC0B BD 00 04                          LDA tile_type,x
0CC0E D0 0F                             BNE +
0CC10 A5 02                                 LDA temp+2
0CC12 8D 06 20                              STA PPU_ADDR
0CC15 A5 03                                 LDA temp+3
0CC17 8D 06 20                              STA PPU_ADDR
0CC1A A9 00                                 LDA #$00
0CC1C 8D 07 20                              STA PPU_DATA
0CC1F                                   +
0CC1F                                   
0CC1F                                   ;; Restore x-register from stack
0CC1F 68                                PLA
0CC20 AA                                TAX
0CC21                                   
0CC21                                   ;; Reset pointer for next tile
0CC21 A5 03                             LDA temp+3
0CC23 38                                SEC
0CC24 E9 42                             SBC #$42
0CC26 85 03                             STA temp+3
0CC28 A5 02                             LDA temp+2
0CC2A E9 00                             SBC #$00
0CC2C 85 02                             STA temp+2
0CC2E                                   
0CC2E                                   ;; Draw next metatile in this loop (if any left)
0CC2E 88                                DEY
0CC2F 30 27                             BMI +doneDrawingRowColumn
0CC31                                   
0CC31                                   ;; Is it a row or a column?
0CC31 A5 01                             LDA temp+1
0CC33 10 17                             BPL +
0CC35                                       ;; It is a column: move pointer down (+$40)
0CC35 A5 03                                 LDA temp+3
0CC37 18                                    CLC
0CC38 69 40                                 ADC #$40
0CC3A 85 03                                 STA temp+3
0CC3C A5 02                                 LDA temp+2
0CC3E 69 00                                 ADC #$00
0CC40 85 02                                 STA temp+2
0CC42                                       
0CC42                                       ;; Add 16 to temp (as a tile RAM pointer)
0CC42 A5 00                                 LDA temp
0CC44 18                                    CLC
0CC45 69 10                                 ADC #$10
0CC47 85 00                                 STA temp
0CC49 4C 55 CC                              JMP +drawNextTile
0CC4C                                   +
0CC4C                                   
0CC4C                                   ;; It is a row: move pointer right (+$02)
0CC4C A5 03                             LDA temp+3
0CC4E 18                                CLC
0CC4F 69 02                             ADC #$02
0CC51 85 03                             STA temp+3
0CC53                                   
0CC53                                   ;; Add 1 to temp (as a tile RAM pointer)
0CC53 E6 00                             INC temp
0CC55                           
0CC55                               
0CC55                               ;; Next tile in the row/column
0CC55                                   +drawNextTile:
0CC55 4C 91 CB                      JMP -drawTileLoop
0CC58                           
0CC58                               ;; Go to the next set of tiles
0CC58                           +doneDrawingRowColumn:
0CC58 68                            PLA
0CC59 A8                            TAY
0CC5A C8                            INY
0CC5B 4C 0F CB                      JMP -drawRowColumnLoop
0CC5E                           
0CC5E                           ;; Level loading is done
0CC5E                           +doneLevelLoad:
0CC5E                           
0CC5E                               ;; Count number of color blocks
0CC5E A2 A0                         LDX #160
0CC60                               -
0CC60 BD FF 03                          LDA tile_type-1,x
0CC63 29 80                             AND #%10000000
0CC65 F0 02                             BEQ +
0CC67 E6 44                                 INC blocks_left
0CC69                                   +
0CC69 CA                                DEX
0CC6A D0 F4                         BNE -
0CC6C                           
0CC6C                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CC6C A9 20                         LDA #$20
0CC6E 8D 06 20                      STA PPU_ADDR
0CC71 A9 A2                         LDA #$A2
0CC73 8D 06 20                      STA PPU_ADDR
0CC76 A9 35                         LDA #$35
0CC78 20 B3 CE                      JSR sub_Draw28HorizontalTiles
0CC7B                           
0CC7B                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CC7B A9 23                         LDA #$23
0CC7D 8D 06 20                      STA PPU_ADDR
0CC80 A9 42                         LDA #$42
0CC82 8D 06 20                      STA PPU_ADDR
0CC85 A9 31                         LDA #$31
0CC87 20 B3 CE                      JSR sub_Draw28HorizontalTiles
0CC8A                           
0CC8A                               ;; Left & right game bounds
0CC8A                               ;; Set PPU_ADDR and store in temp variables
0CC8A A9 20                         LDA #$20
0CC8C 85 00                         STA temp
0CC8E 8D 06 20                      STA PPU_ADDR
0CC91 A9 C1                         LDA #$C1
0CC93 85 01                         STA temp+1
0CC95 8D 06 20                      STA PPU_ADDR
0CC98                               
0CC98                               ;; Set vertical bound tile and set up loop
0CC98 A0 33                         LDY #$33
0CC9A A2 14                         LDX #20
0CC9C                               -
0CC9C                                   ;; Show left tile
0CC9C 8C 07 20                          STY PPU_DATA
0CC9F                                   
0CC9F                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CC9F A5 00                             LDA temp
0CCA1 8D 06 20                          STA PPU_ADDR
0CCA4 A5 01                             LDA temp+1
0CCA6 18                                CLC
0CCA7 69 1D                             ADC #29
0CCA9 85 01                             STA temp+1
0CCAB 8D 06 20                          STA PPU_ADDR
0CCAE                           
0CCAE                                   ;; Show right tile
0CCAE 8C 07 20                          STY PPU_DATA
0CCB1                           
0CCB1                                   ;; Check if we're done yet
0CCB1 CA                                DEX
0CCB2 F0 18                             BEQ +drawCorners
0CCB4                                   
0CCB4                                   ;; Not done yet: add 3 to low byte for next left bound
0CCB4 A5 01                             LDA temp+1
0CCB6 18                                CLC
0CCB7 69 03                             ADC #3
0CCB9 85 01                             STA temp+1
0CCBB                                   
0CCBB                                   ;; Apply carry to high byte
0CCBB A5 00                             LDA temp
0CCBD 69 00                             ADC #$00
0CCBF 85 00                             STA temp
0CCC1                                   
0CCC1                                   ;; Store next PPU_ADDR to draw at
0CCC1 8D 06 20                          STA PPU_ADDR
0CCC4 A5 01                             LDA temp+1
0CCC6 8D 06 20                          STA PPU_ADDR
0CCC9 4C 9C CC                      JMP -
0CCCC                               
0CCCC                               
0CCCC                           
0CCCC                           +drawCorners:
0CCCC                               ;; Draw the corners of the playing field
0CCCC A9 20                         LDA #$20
0CCCE 8D 06 20                      STA PPU_ADDR
0CCD1 A9 A1                         LDA #$A1
0CCD3 8D 06 20                      STA PPU_ADDR
0CCD6 A9 39                         LDA #$39
0CCD8 8D 07 20                      STA PPU_DATA
0CCDB                           
0CCDB A9 20                         LDA #$20
0CCDD 8D 06 20                      STA PPU_ADDR
0CCE0 A9 BE                         LDA #$BE
0CCE2 8D 06 20                      STA PPU_ADDR
0CCE5 A9 3A                         LDA #$3A
0CCE7 8D 07 20                      STA PPU_DATA
0CCEA                           
0CCEA A9 23                         LDA #$23
0CCEC 8D 06 20                      STA PPU_ADDR
0CCEF A9 41                         LDA #$41
0CCF1 8D 06 20                      STA PPU_ADDR
0CCF4 A9 36                         LDA #$36
0CCF6 8D 07 20                      STA PPU_DATA
0CCF9                           
0CCF9 A9 23                         LDA #$23
0CCFB 8D 06 20                      STA PPU_ADDR
0CCFE A9 5E                         LDA #$5E
0CD00 8D 06 20                      STA PPU_ADDR
0CD03 A9 34                         LDA #$34
0CD05 8D 07 20                      STA PPU_DATA
0CD08                               
0CD08                           
0CD08                               ;; Draw the hud labels
0CD08 A9 20                         LDA #$20
0CD0A 8D 06 20                      STA PPU_ADDR
0CD0D A9 62                         LDA #$62
0CD0F 8D 06 20                      STA PPU_ADDR
0CD12 A2 00                         LDX #$00
0CD14                               -
0CD14 BD 4E DA                          LDA tbl_HudText,x
0CD17 8D 07 20                          STA PPU_DATA
0CD1A E8                                INX
0CD1B E0 1E                             CPX #$1E
0CD1D D0 F5                         BNE -
0CD1F                           
0CD1F                           
0CD1F                               ;; Draw the current score
0CD1F A9 20                         LDA #$20
0CD21 8D 06 20                      STA PPU_ADDR
0CD24 A9 83                         LDA #$83
0CD26 8D 06 20                      STA PPU_ADDR
0CD29 A2 00                         LDX #$00
0CD2B                               -
0CD2B B5 20                             LDA ball_score,x
0CD2D 18                                CLC
0CD2E 69 01                             ADC #$01
0CD30 8D 07 20                          STA PPU_DATA
0CD33 E8                                INX
0CD34 E0 06                             CPX #$06
0CD36 D0 F3                         BNE -
0CD38                           
0CD38                           
0CD38                               ;; Draw the level number
0CD38                               ;; (with primitive HEX>DEC)
0CD38 A5 42                         LDA current_level
0CD3A 18                            CLC
0CD3B 69 01                         ADC #$01
0CD3D 85 01                         STA temp+1
0CD3F                               
0CD3F C9 14                         CMP #20
0CD41 B0 13                         BCS +tempIsTwo
0CD43                               
0CD43 C9 0A                         CMP #10
0CD45 B0 05                         BCS +tempIsOne
0CD47                               
0CD47 A9 00                         LDA #$00
0CD49 4C 5D CD                      JMP +setTemp
0CD4C                               
0CD4C                           +tempIsOne:
0CD4C 38                            SEC
0CD4D E9 0A                         SBC #10
0CD4F 85 01                         STA temp+1
0CD51 A9 01                         LDA #$01
0CD53 4C 5D CD                      JMP +setTemp
0CD56                               
0CD56                           +tempIsTwo:
0CD56 38                            SEC
0CD57 E9 14                         SBC #20
0CD59 85 01                         STA temp+1
0CD5B A9 02                         LDA #$02
0CD5D                           
0CD5D                           +setTemp:
0CD5D 85 00                         STA temp
0CD5F                               
0CD5F E6 00                         INC temp
0CD61 E6 01                         INC temp+1
0CD63                               
0CD63 A9 20                         LDA #$20
0CD65 8D 06 20                      STA PPU_ADDR
0CD68 A9 8B                         LDA #$8B
0CD6A 8D 06 20                      STA PPU_ADDR
0CD6D A5 00                         LDA temp
0CD6F 8D 07 20                      STA PPU_DATA
0CD72 A5 01                         LDA temp+1
0CD74 8D 07 20                      STA PPU_DATA
0CD77                           
0CD77                           
0CD77                               ;; Draw lives (presumes lives to be capped at 9)
0CD77 A9 20                         LDA #$20
0CD79 8D 06 20                      STA PPU_ADDR
0CD7C A9 92                         LDA #$92
0CD7E 8D 06 20                      STA PPU_ADDR
0CD81 A6 1F                         LDX ball_lives
0CD83 E8                            INX
0CD84 8E 07 20                      STX PPU_DATA
0CD87                           
0CD87                           
0CD87                               ;; Set and draw bonus
0CD87 A9 07                         LDA #$07
0CD89 85 2C                         STA ball_bonus
0CD8B A9 09                         LDA #$09
0CD8D 85 2D                         STA ball_bonus+1
0CD8F 85 2E                         STA ball_bonus+2
0CD91                               
0CD91 A9 20                         LDA #$20
0CD93 8D 06 20                      STA PPU_ADDR
0CD96 A9 9A                         LDA #$9A
0CD98 8D 06 20                      STA PPU_ADDR
0CD9B A2 00                         LDX #$00
0CD9D                               -
0CD9D B5 2C                             LDA ball_bonus,x
0CD9F 18                                CLC
0CDA0 69 01                             ADC #$01
0CDA2 8D 07 20                          STA PPU_DATA
0CDA5 E8                                INX
0CDA6 E0 03                             CPX #$03
0CDA8 D0 F3                         BNE -
0CDAA                           
0CDAA                           
0CDAA                               ;; Set attribute data to RAM
0CDAA                               
0CDAA                               ;; Byte 0-6 of attribute ram should be #%10100000
0CDAA A2 00                         LDX #$00
0CDAC A9 A0                         LDA #$A0
0CDAE                               -
0CDAE 9D A0 04                          STA tile_attributes,x
0CDB1 E8                                INX
0CDB2 E0 07                             CPX #$07
0CDB4 D0 F8                         BNE -
0CDB6                               
0CDB6                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CDB6 A9 E0                         LDA #$E0
0CDB8 9D A0 04                      STA tile_attributes,x
0CDBB E8                            INX
0CDBC                           
0CDBC                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CDBC                           
0CDBC                           -attributeLoop:
0CDBC                               ;; Reset current attribute value
0CDBC A9 00                         LDA #$00
0CDBE 85 02                         STA temp+2
0CDC0                           
0CDC0                               ;; Get first metatile in tile ram based on attribute index
0CDC0                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CDC0 8A                            TXA
0CDC1                           
0CDC1 38                            SEC
0CDC2 E9 08                         SBC #$08
0CDC4 85 01                         STA temp+1      ; attr - 8 (temp1)
0CDC6 0A                            ASL             ; * 2
0CDC7 85 00                         STA temp        ; temp = temp1 * 2
0CDC9                           
0CDC9 A5 01                         LDA temp+1      ; temp1
0CDCB 29 F8                         AND #%11111000  ; rounded down to 8's
0CDCD 0A                            ASL             ; * 2
0CDCE 18                            CLC
0CDCF 65 00                         ADC temp        ; + temp1 * 2
0CDD1 85 00                         STA temp        ; first metatile
0CDD3                           
0CDD3                               ;; Store first metatile in y-register
0CDD3 A8                            TAY
0CDD4                           
0CDD4                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CDD4 8A                            TXA
0CDD5 29 07                         AND #%00000111
0CDD7 C9 07                         CMP #%00000111
0CDD9 F0 0B                         BEQ +
0CDDB                           
0CDDB                               ;; If X >= $30, don't apply bottom right metatile
0CDDB E0 30                         CPX #$30
0CDDD B0 07                         BCS +
0CDDF                               
0CDDF                               ;; Add metatile1 subpalette to attribute value
0CDDF B9 00 04                      LDA tile_type,y
0CDE2 29 0C                         AND #%00001100
0CDE4 85 02                         STA temp+2
0CDE6                               +
0CDE6                           
0CDE6                           
0CDE6                               ;; Apply second metatile
0CDE6 88                            DEY
0CDE7                           
0CDE7                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CDE7 8A                            TXA
0CDE8 29 07                         AND #%00000111
0CDEA F0 10                         BEQ +
0CDEC                           
0CDEC                               ;; If X >= $30, don't apply bottom left metatile
0CDEC E0 30                         CPX #$30
0CDEE B0 0C                         BCS +
0CDF0                           
0CDF0                           
0CDF0                           
0CDF0                               ;; Add metatile2 subpalette to attribute value
0CDF0 B9 00 04                      LDA tile_type,y
0CDF3 29 0C                         AND #%00001100
0CDF5 4A                            LSR
0CDF6 4A                            LSR
0CDF7 05 02                         ORA temp+2
0CDF9 4C FE CD                      JMP ++
0CDFC                               +
0CDFC A5 02                         LDA temp+2
0CDFE                               ++
0CDFE 0A                            ASL
0CDFF 0A                            ASL
0CE00 85 02                         STA temp+2
0CE02                           
0CE02                           
0CE02                               ;; Apply third metatile
0CE02 98                            TYA
0CE03 38                            SEC
0CE04 E9 0F                         SBC #$0F
0CE06 A8                            TAY
0CE07                           
0CE07                               ;; If X MOD 8 == 7, don't apply top right metatile
0CE07 8A                            TXA
0CE08 29 07                         AND #%00000111
0CE0A C9 07                         CMP #%00000111
0CE0C F0 11                         BEQ +
0CE0E                           
0CE0E                               ;; If X < $10, don't apply top right metatile
0CE0E 8A                            TXA
0CE0F 29 F0                         AND #%11110000
0CE11 F0 0C                         BEQ +
0CE13                           
0CE13                               ;; Add metatile3 subpalette to attribute value
0CE13 B9 00 04                      LDA tile_type,y
0CE16 29 0C                         AND #%00001100
0CE18 4A                            LSR
0CE19 4A                            LSR
0CE1A 05 02                         ORA temp+2
0CE1C 4C 21 CE                      JMP ++
0CE1F                               +
0CE1F A5 02                         LDA temp+2
0CE21                               ++
0CE21 0A                            ASL
0CE22 0A                            ASL
0CE23 85 02                         STA temp+2
0CE25                           
0CE25                           
0CE25                               ;; Apply fourth metatile
0CE25 88                            DEY
0CE26                           
0CE26                               ;; If X MOD 8 == 0, don't apply top left metatile
0CE26 8A                            TXA
0CE27 29 07                         AND #%00000111
0CE29 F0 11                         BEQ +
0CE2B                           
0CE2B                               ;; If X < $10, don't apply top left metatile
0CE2B 8A                            TXA
0CE2C 29 F0                         AND #%11110000
0CE2E F0 0C                         BEQ +
0CE30                           
0CE30                               ;; Add metatile4 subpalette to attribute value
0CE30 B9 00 04                      LDA tile_type,y
0CE33 29 0C                         AND #%00001100
0CE35 4A                            LSR
0CE36 4A                            LSR
0CE37 05 02                         ORA temp+2
0CE39 4C 3E CE                      JMP ++
0CE3C                               +
0CE3C A5 02                         LDA temp+2
0CE3E                               ++
0CE3E 9D A0 04                      STA tile_attributes,x
0CE41                           
0CE41                               ;; Check the next attribute, if any left
0CE41 E8                            INX
0CE42 E0 38                         CPX #$38
0CE44 F0 03                         BEQ +
0CE46 4C BC CD                          JMP -attributeLoop
0CE49                               +
0CE49                           
0CE49                               ;; Stream attribute RAM to PPU
0CE49 2C 02 20                      BIT PPU_STATUS
0CE4C A9 23                         LDA #$23
0CE4E 8D 06 20                      STA PPU_ADDR
0CE51 A9 C0                         LDA #$C0
0CE53 8D 06 20                      STA PPU_ADDR
0CE56 A2 00                         LDX #$00
0CE58                               -
0CE58 BD A0 04                          LDA tile_attributes,x
0CE5B 8D 07 20                          STA PPU_DATA
0CE5E E8                                INX
0CE5F E0 40                             CPX #$40
0CE61 D0 F5                         BNE -
0CE63                           
0CE63                               ;; Set initial ball position
0CE63 A6 42                         LDX current_level
0CE65 BD DB D9                      LDA tbl_lvl_ball_startpos,x
0CE68 29 F0                         AND #%11110000
0CE6A 18                            CLC
0CE6B 69 34                         ADC #$34
0CE6D 85 19                         STA ball_ypos_hi
0CE6F BD DB D9                      LDA tbl_lvl_ball_startpos,x
0CE72 0A                            ASL
0CE73 0A                            ASL
0CE74 0A                            ASL
0CE75 0A                            ASL
0CE76 18                            CLC
0CE77 69 14                         ADC #$14
0CE79 85 17                         STA ball_xpos_hi
0CE7B A9 00                         LDA #$00
0CE7D 85 18                         STA ball_xpos_lo
0CE7F 85 1A                         STA ball_ypos_lo
0CE81                               
0CE81                               ;; Set initial ball color and direction
0CE81 BD F4 D9                      LDA tbl_lvl_ball_init,x
0CE84 29 F0                         AND #%11110000
0CE86 85 37                         STA ball_flags
0CE88 20 AC C6                      JSR sub_ColorizeBall
0CE8B                               
0CE8B                               ;; Reset bonus timer
0CE8B A9 08                         LDA #BONUS_FRAMES
0CE8D 85 3F                         STA bonus_timer
0CE8F                               
0CE8F                               ;; Play background noise
0CE8F A9 08                         LDA #$08
0CE91 8D 15 40                      STA APU_STATUS
0CE94 8D 0F 40                      STA NOISE_LENGTH
0CE97 A9 0E                         LDA #$0E
0CE99 85 47                         STA current_noise
0CE9B A9 00                         LDA #$00
0CE9D 85 45                         STA max_noise
0CE9F 85 48                         STA noise_timer
0CEA1 85 46                         STA sweep_noise
0CEA3 85 4B                         STA noise_muted
0CEA5 20 BF C5                      JSR sub_BackgroundNoise
0CEA8                           
0CEA8                               ;; Freeze the ball
0CEA8 A5 37                         LDA ball_flags
0CEAA 09 04                         ORA #FREEZE_BALL
0CEAC 85 37                         STA ball_flags
0CEAE                               
0CEAE                               ;; Start unfreeze timer
0CEAE A9 30                         LDA #$30
0CEB0 85 41                         STA unfreeze_timer
0CEB2                           
0CEB2                               ;; Return
0CEB2 60                            RTS
0CEB3                           
0CEB3                           
0CEB3                           ;; Subroutine: draw 28 tiles in a row
0CEB3                           sub_Draw28HorizontalTiles:
0CEB3 A2 1C                         LDX #28
0CEB5                               -
0CEB5 8D 07 20                          STA PPU_DATA
0CEB8 CA                                DEX
0CEB9 D0 FA                         BNE -
0CEBB 60                            RTS
0CEBC                           
0CEBC                           .include "game/subroutine/LoadIntroScreen.asm"
0CEBC                           
0CEBC                           ;; Load the intro screen
0CEBC                           sub_LoadIntroScreen:
0CEBC                           
0CEBC                               ;; Load intro palette
0CEBC 2C 02 20                      BIT PPU_STATUS
0CEBF A9 3F                         LDA #$3F
0CEC1 8D 06 20                      STA PPU_ADDR
0CEC4 A9 00                         LDA #$00
0CEC6 8D 06 20                      STA PPU_ADDR
0CEC9 A2 00                         LDX #$00
0CECB                               -
0CECB BD 86 D1                          LDA tbl_IntroScreenPalette,x
0CECE 8D 07 20                          STA PPU_DATA
0CED1 E8                                INX
0CED2 E0 20                             CPX #$20
0CED4 D0 F5                         BNE -
0CED6                               
0CED6                               ;; Put ball in the middle
0CED6 A9 7C                         LDA #$7C
0CED8 85 17                         STA ball_xpos_hi
0CEDA 85 19                         STA ball_ypos_hi
0CEDC                           
0CEDC                               ;; Clear the screen
0CEDC 20 41 C6                      JSR sub_ClearScreen
0CEDF                           
0CEDF                               ;; Set up intro screen draw loop
0CEDF A2 00                         LDX #$00
0CEE1                           
0CEE1                           -loop_IntroScreenData:
0CEE1                           
0CEE1                               ;; Get current byte from intro screen data
0CEE1 BD AE D1                      LDA tbl_IntroScreenData,x
0CEE4                           
0CEE4                               ;; If current byte is #$3F, we're done drawing.
0CEE4 C9 3F                         CMP #$3F
0CEE6 D0 03                         BNE +
0CEE8 4C 35 CF                          JMP +goToEndIntroScreen
0CEEB                               +
0CEEB                           
0CEEB                               ;; If highest bits are %11, draw a plain tile
0CEEB 29 C0                         AND #%11000000
0CEED D0 03                         BNE +
0CEEF 4C 15 CF                          JMP +drawTile
0CEF2                               +
0CEF2                               
0CEF2                               ;; If highest bits are %01, set the PPU address
0CEF2                               ;; If not, draw two logo tiles
0CEF2 C9 40                         CMP #%01000000
0CEF4 D0 03                         BNE +drawLogo
0CEF6 4C 1F CF                          JMP +setPpuAddr
0CEF9                           
0CEF9                           +drawLogo:
0CEF9                               ;; Get bits 0-2 and store in a temp variable
0CEF9 BD AE D1                      LDA tbl_IntroScreenData,x
0CEFC 29 07                         AND #%00000111
0CEFE 85 00                         STA temp
0CF00                               
0CF00                               ;; Get bits 3-5, shift over to get a value from 0-7
0CF00 BD AE D1                      LDA tbl_IntroScreenData,x
0CF03 4A                            LSR
0CF04 4A                            LSR
0CF05 4A                            LSR
0CF06 29 07                         AND #%00000111
0CF08                               
0CF08                               ;; Draw the tile that corresponds with that value
0CF08 A8                            TAY
0CF09 20 24 C7                      JSR sub_drawIntroScreenLogoTile
0CF0C                               
0CF0C                               ;; Do the same for the value stored in temp
0CF0C A4 00                         LDY temp
0CF0E 20 24 C7                      JSR sub_drawIntroScreenLogoTile
0CF11                           
0CF11                               ;; Next byte please
0CF11 E8                            INX
0CF12 4C E1 CE                      JMP -loop_IntroScreenData
0CF15                           
0CF15                           +drawTile:
0CF15                               ;; Just draw the tile value on screen
0CF15 BD AE D1                      LDA tbl_IntroScreenData,x
0CF18 8D 07 20                      STA PPU_DATA
0CF1B                               
0CF1B                               ;; Next byte please
0CF1B E8                            INX
0CF1C 4C E1 CE                      JMP -loop_IntroScreenData
0CF1F                           
0CF1F                           
0CF1F                           +setPpuAddr:
0CF1F                               ;; Reset the PPU latch
0CF1F 2C 02 20                      BIT PPU_STATUS
0CF22                               
0CF22                               ;; Sanitize and write the high byte of the PPU address
0CF22 BD AE D1                      LDA tbl_IntroScreenData,x
0CF25 29 3F                         AND #%00111111
0CF27 8D 06 20                      STA PPU_ADDR
0CF2A                           
0CF2A                               ;; Write the low byte of the PPU address
0CF2A E8                            INX
0CF2B BD AE D1                      LDA tbl_IntroScreenData,x
0CF2E 8D 06 20                      STA PPU_ADDR
0CF31                               
0CF31                               ;; PPU has been set up to draw tiles at the correct spot now.
0CF31                               
0CF31                               ;; Next byte please.
0CF31 E8                            INX
0CF32 4C E1 CE                      JMP -loop_IntroScreenData
0CF35                           
0CF35                           +goToEndIntroScreen:
0CF35                           
0CF35                               ;; To color the 1.LEVEL: line green, we need to update two
0CF35                               ;; values in the PPU attribute data.
0CF35 2C 02 20                      BIT PPU_STATUS
0CF38 A9 23                         LDA #$23
0CF3A 8D 06 20                      STA PPU_ADDR
0CF3D A9 CB                         LDA #$CB
0CF3F 8D 06 20                      STA PPU_ADDR
0CF42 A9 0A                         LDA #%00001010
0CF44 8D 07 20                      STA PPU_DATA
0CF47 8D 07 20                      STA PPU_DATA
0CF4A                           
0CF4A 60                            RTS
0CF4B                           
0CF4B                           .include "game/subroutine/LoadWinScreen.asm"
0CF4B                           
0CF4B                           ;; Load the win screen (in progress)
0CF4B                           sub_LoadWinScreen:
0CF4B 60                            RTS
0CF4C                           
0CF4C                           .include "game/subroutine/PreloadSfxFromX.asm"
0CF4C                           
0CF4C                           sub_PreloadSfxFromX:
0CF4C                               
0CF4C                               ;; Load sample X into sfx address (low byte)
0CF4C BD CC DA                      LDA tbl_Sfx_lo,x
0CF4F 85 4C                         STA sfx_address
0CF51                               
0CF51                               ;; Load sample X into sfx address (high byte)
0CF51 BD C9 DA                      LDA tbl_Sfx_hi,x
0CF54 85 4D                         STA sfx_address+1
0CF56                               
0CF56                               ;; Start SFX timer
0CF56 A9 01                         LDA #$01
0CF58 85 4E                         STA sfx_timer
0CF5A                               
0CF5A 60                            RTS
0CF5B                               
0CF5B                               0CF5B                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CF5B                           
0CF5B                           ;; Remove a block from screen
0CF5B                           sub_RemoveBlockFromScreen:
0CF5B                           
0CF5B                               ;; Get current buffer location
0CF5B A4 3A                         LDY ppu_buffer_pointer
0CF5D                               
0CF5D                               ;; TILE 1: if metatile on top left is solid, draw
0CF5D                               ;; null tile, else draw random noise tile
0CF5D A9 00                         LDA #$00
0CF5F 85 39                         STA ppu_buffer_update
0CF61                               
0CF61 A5 00                         LDA temp
0CF63 99 00 03                      STA ppu_buffer,y
0CF66 C8                            INY
0CF67 A5 01                         LDA temp+1
0CF69 99 00 03                      STA ppu_buffer,y
0CF6C C8                            INY
0CF6D                               
0CF6D 8A                            TXA
0CF6E 29 0F                         AND #%00001111
0CF70 F0 11                         BEQ +drawRandomTile
0CF72                           
0CF72 8A                            TXA
0CF73 29 F0                         AND #%11110000
0CF75 F0 0C                         BEQ +drawRandomTile
0CF77                           
0CF77 BD EF 03                      LDA tile_type-17,x
0CF7A 29 01                         AND #%00000001
0CF7C F0 05                         BEQ +drawRandomTile  
0CF7E                           
0CF7E                               ;; Draw a null tile
0CF7E A9 00                         LDA #$00
0CF80 4C 8B CF                      JMP +addToPPUBuffer
0CF83                               
0CF83                           +drawRandomTile:
0CF83                               ;; Draw a random tile
0CF83 20 2F C5                      JSR sub_GetRandomNumber
0CF86 29 07                         AND #%00000111
0CF88 18                            CLC
0CF89 69 68                         ADC #$68
0CF8B                               
0CF8B                               ;; Add tile to ppu buffer
0CF8B                           +addToPPUBuffer:
0CF8B 99 00 03                      STA ppu_buffer,y
0CF8E C8                            INY
0CF8F                           
0CF8F                               ;; TILE 2: If metatile above is solid, draw null,
0CF8F                               ;; else draw random noise.
0CF8F E6 01                         INC temp+1
0CF91 A5 00                         LDA temp
0CF93 99 00 03                      STA ppu_buffer,y
0CF96 C8                            INY
0CF97 A5 01                         LDA temp+1
0CF99 99 00 03                      STA ppu_buffer,y
0CF9C C8                            INY
0CF9D                               
0CF9D 8A                            TXA
0CF9E 29 F0                         AND #%11110000
0CFA0 F0 0C                         BEQ +drawRandomTile
0CFA2                               
0CFA2 BD F0 03                      LDA tile_type-16,x
0CFA5 29 01                         AND #%00000001
0CFA7 F0 05                         BEQ +drawRandomTile
0CFA9                               
0CFA9 A9 00                         LDA #%00
0CFAB 4C B6 CF                      JMP +addToPPUBuffer
0CFAE                           
0CFAE                           +drawRandomTile:
0CFAE 20 2F C5                      JSR sub_GetRandomNumber
0CFB1 29 07                         AND #%00000111
0CFB3 18                            CLC
0CFB4 69 68                         ADC #$68
0CFB6                           
0CFB6                           +addToPPUBuffer:
0CFB6 99 00 03                      STA ppu_buffer,y
0CFB9 C8                            INY
0CFBA                               
0CFBA                               ;; TILE 3 - If metatile left is solid, draw null,
0CFBA                               ;; else draw random noise.
0CFBA A5 01                         LDA temp+1
0CFBC 18                            CLC
0CFBD 69 1F                         ADC #$1F
0CFBF 85 01                         STA temp+1
0CFC1 A5 00                         LDA temp
0CFC3 69 00                         ADC #$00
0CFC5 85 00                         STA temp
0CFC7 99 00 03                      STA ppu_buffer,y
0CFCA C8                            INY
0CFCB A5 01                         LDA temp+1
0CFCD 99 00 03                      STA ppu_buffer,y
0CFD0 C8                            INY
0CFD1                               
0CFD1 8A                            TXA
0CFD2 29 0F                         AND #%00001111
0CFD4 F0 0C                         BEQ +drawRandomTile
0CFD6                               
0CFD6 BD FF 03                      LDA tile_type-1,x
0CFD9 29 01                         AND #%00000001
0CFDB F0 05                         BEQ +drawRandomTile
0CFDD                               
0CFDD A9 00                         LDA #%00
0CFDF 4C EA CF                      JMP +addToPPUBuffer
0CFE2                           
0CFE2                           +drawRandomTile:
0CFE2 20 2F C5                      JSR sub_GetRandomNumber
0CFE5 29 07                         AND #%00000111
0CFE7 18                            CLC
0CFE8 69 68                         ADC #$68
0CFEA                               
0CFEA                           +addToPPUBuffer:
0CFEA 99 00 03                      STA ppu_buffer,y
0CFED C8                            INY
0CFEE                               
0CFEE                               ;; TILE 4 - Always random noise
0CFEE E6 01                         INC temp+1
0CFF0 A5 00                         LDA temp
0CFF2 99 00 03                      STA ppu_buffer,y
0CFF5 C8                            INY
0CFF6 A5 01                         LDA temp+1
0CFF8 99 00 03                      STA ppu_buffer,y
0CFFB C8                            INY
0CFFC 20 2F C5                      JSR sub_GetRandomNumber
0CFFF 29 07                         AND #%00000111
0D001 18                            CLC
0D002 69 68                         ADC #$68
0D004 99 00 03                      STA ppu_buffer,y
0D007 C8                            INY
0D008                           
0D008                               ;; TILE 5 - If tile on the right is solid, skip,
0D008                               ;; else draw random noise tile
0D008 E6 01                         INC temp+1
0D00A                               
0D00A 8A                            TXA
0D00B 29 0F                         AND #%00001111
0D00D C9 0D                         CMP #$0D
0D00F F0 1F                         BEQ +skipTile
0D011                               
0D011 BD 01 04                      LDA tile_type+1,x
0D014 29 01                         AND #%00000001
0D016 D0 18                         BNE +skipTile
0D018 A5 00                             LDA temp
0D01A 99 00 03                          STA ppu_buffer,y
0D01D C8                                INY
0D01E A5 01                             LDA temp+1
0D020 99 00 03                          STA ppu_buffer,y
0D023 C8                                INY
0D024 20 2F C5                          JSR sub_GetRandomNumber
0D027 29 07                             AND #%00000111
0D029 18                                CLC
0D02A 69 68                             ADC #$68
0D02C 99 00 03                          STA ppu_buffer,y
0D02F C8                                INY    
0D030                               +skipTile:
0D030                           
0D030                               ;; TILE 6 - If tile on bottom is solid, skip,
0D030                               ;; else draw random noise
0D030 A5 01                         LDA temp+1
0D032 18                            CLC
0D033 69 1F                         ADC #$1F
0D035 85 01                         STA temp+1
0D037 A5 00                         LDA temp
0D039 69 00                         ADC #$00
0D03B 85 00                         STA temp
0D03D                           
0D03D 8A                            TXA
0D03E 29 F0                         AND #%11110000
0D040 C9 90                         CMP #$90
0D042 F0 1F                         BEQ +skipTile
0D044                           
0D044 BD 10 04                      LDA tile_type+16,x
0D047 29 01                         AND #%00000001
0D049 D0 18                         BNE +skipTile
0D04B A5 00                             LDA temp
0D04D 99 00 03                          STA ppu_buffer,y
0D050 C8                                INY
0D051 A5 01                             LDA temp+1
0D053 99 00 03                          STA ppu_buffer,y
0D056 C8                                INY
0D057 20 2F C5                          JSR sub_GetRandomNumber
0D05A 29 07                             AND #%00000111
0D05C 18                                CLC
0D05D 69 68                             ADC #$68
0D05F 99 00 03                          STA ppu_buffer,y
0D062 C8                                INY    
0D063                               +skipTile:
0D063                               
0D063                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D063                               ;; else draw random noise
0D063 E6 01                         INC temp+1
0D065                           
0D065 8A                            TXA
0D066 29 F0                         AND #%11110000
0D068 C9 90                         CMP #$90
0D06A F0 26                         BEQ +skipTile
0D06C                               
0D06C 8A                            TXA
0D06D 29 0F                         AND #%00001111
0D06F C9 0D                         CMP #$0D
0D071 F0 1F                         BEQ +skipTile
0D073                               
0D073 BD 11 04                      LDA tile_type+17,x
0D076 29 01                         AND #%00000001
0D078 D0 18                         BNE +skipTile
0D07A A5 00                             LDA temp
0D07C 99 00 03                          STA ppu_buffer,y
0D07F C8                                INY
0D080 A5 01                             LDA temp+1
0D082 99 00 03                          STA ppu_buffer,y
0D085 C8                                INY
0D086 20 2F C5                          JSR sub_GetRandomNumber
0D089 29 07                             AND #%00000111
0D08B 18                                CLC
0D08C 69 68                             ADC #$68
0D08E 99 00 03                          STA ppu_buffer,y
0D091 C8                                INY    
0D092                               +skipTile:   
0D092                           
0D092                           
0D092                               ;; Update attribute table accordingly through ppu buffer
0D092 20 D1 D0                      JSR sub_SetTileAttributeAddress
0D095                               
0D095 8A                            TXA
0D096 29 10                         AND #%00010000
0D098 F0 05                         BEQ +
0D09A A9 F0                             LDA #%11110000
0D09C 4C A1 D0                          JMP ++
0D09F                               +
0D09F A9 0F                         LDA #%00001111
0D0A1                               ++
0D0A1 85 02                         STA temp+2
0D0A3                               
0D0A3 8A                            TXA
0D0A4 48                            PHA
0D0A5 29 01                         AND #%00000001
0D0A7 F0 07                         BEQ +
0D0A9 A5 02                             LDA temp+2
0D0AB 09 CC                             ORA #%11001100
0D0AD 4C B4 D0                          JMP ++
0D0B0                               +
0D0B0 A5 02                         LDA temp+2
0D0B2 09 33                         ORA #%00110011
0D0B4                               ++
0D0B4 85 02                         STA temp+2
0D0B6                               
0D0B6 A5 00                         LDA temp
0D0B8 38                            SEC
0D0B9 E9 C0                         SBC #$C0
0D0BB AA                            TAX
0D0BC BD A0 04                      LDA tile_attributes,x
0D0BF 25 02                         AND temp+2
0D0C1 9D A0 04                      STA tile_attributes,x
0D0C4 99 00 03                      STA ppu_buffer,y
0D0C7 C8                            INY
0D0C8 68                            PLA
0D0C9 AA                            TAX
0D0CA                           
0D0CA                               ;; Tell PPU to update tiles and attributes next frame
0D0CA 84 3A                         STY ppu_buffer_pointer
0D0CC A9 01                         LDA #$01
0D0CE 85 39                         STA ppu_buffer_update
0D0D0                            
0D0D0                               ;; We're done - return
0D0D0 60                            RTS
0D0D1                           
0D0D1                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D0D1                           
0D0D1                           ;; Set the correct tile attribute address based on game tile (x) 
0D0D1                           ;; into the correct ppu buffer slot (y)
0D0D1                           
0D0D1                           sub_SetTileAttributeAddress:
0D0D1 A9 23                         LDA #$23
0D0D3 99 00 03                      STA ppu_buffer,y
0D0D6 C8                            INY
0D0D7                               
0D0D7 8A                            TXA
0D0D8 29 F0                         AND #%11110000
0D0DA 4A                            LSR
0D0DB 4A                            LSR
0D0DC 4A                            LSR
0D0DD 4A                            LSR
0D0DE 18                            CLC
0D0DF 69 01                         ADC #$01
0D0E1 4A                            LSR
0D0E2 0A                            ASL
0D0E3 0A                            ASL
0D0E4 0A                            ASL
0D0E5 18                            CLC
0D0E6 69 C8                         ADC #$C8
0D0E8 85 00                         STA temp
0D0EA 8A                            TXA
0D0EB 29 0F                         AND #%00001111
0D0ED 18                            CLC
0D0EE 69 01                         ADC #$01
0D0F0 4A                            LSR
0D0F1 18                            CLC
0D0F2 65 00                         ADC temp
0D0F4 85 00                         STA temp
0D0F6 99 00 03                      STA ppu_buffer,y
0D0F9 C8                            INY
0D0FA                                  
0D0FA 60                            RTS
0D0FB                           
0D0FB                           .include "game/subroutine/SubtractXFromBonus.asm"
0D0FB                           
0D0FB                           sub_SubtractXFromBonus:
0D0FB 86 09                         STX temp+9
0D0FD A5 2E                         LDA ball_bonus+2
0D0FF 38                            SEC
0D100 E5 09                         SBC temp+9
0D102 30 05                         BMI +
0D104 85 2E                             STA ball_bonus+2
0D106 4C 1E D1                          JMP +updateBonusOnScreen
0D109                               +
0D109                           
0D109 18                            CLC
0D10A 69 0A                         ADC #$0A
0D10C 85 2E                         STA ball_bonus+2
0D10E C6 2D                         DEC ball_bonus+1
0D110 10 0C                         BPL +updateBonusOnScreen
0D112                           
0D112 A9 09                         LDA #$09
0D114 85 2D                         STA ball_bonus+1
0D116 C6 2C                         DEC ball_bonus
0D118 10 04                         BPL +updateBonusOnScreen
0D11A                           
0D11A A9 00                         LDA #$00
0D11C 85 2C                         STA ball_bonus
0D11E                           
0D11E                               +updateBonusOnScreen:
0D11E A9 20                         LDA #$20
0D120 85 00                         STA temp
0D122 A9 9C                         LDA #$9C
0D124 85 01                         STA temp+1
0D126 A2 02                         LDX #$02
0D128                               
0D128                               -updateNextDigit:
0D128 B5 2C                             LDA ball_bonus,x
0D12A 18                                CLC
0D12B 69 01                             ADC #$01
0D12D 85 02                             STA temp+2
0D12F 20 60 D1                          JSR sub_WriteByteToPPUBuffer
0D132 C6 01                             DEC temp+1
0D134 CA                                DEX
0D135 10 F1                         BPL -updateNextDigit
0D137                           
0D137 60                            RTS
0D138                           
0D138                           .include "game/subroutine/WaitXFrames.asm"
0D138                           
0D138                           sub_WaitXFrames:
0D138                               
0D138                               ;; Push X to stack
0D138 8A                            TXA
0D139 48                            PHA
0D13A                               
0D13A                               ;; Wait for NMI
0D13A 20 51 C5                      JSR sub_WaitForNMI
0D13D                           
0D13D                               ;; Clear pointer, except for sprite-zero and ball
0D13D A9 08                         LDA #$08
0D13F 85 3D                         STA sprite_ram_pointer
0D141                           
0D141                               ;; Load animations (if any)
0D141 20 4E CA                      JSR sub_LoadAnimations
0D144                               
0D144                               ;; Restore original X
0D144 68                            PLA
0D145 AA                            TAX
0D146                               
0D146                               ;; Check if all X frames have passed
0D146 CA                            DEX
0D147 D0 EF                         BNE sub_WaitXFrames
0D149                               
0D149                               ;; Return
0D149 60                            RTS
0D14A                           
0D14A                           .include "game/subroutine/Waste.asm"
0D14A 20 4D D1                  sub_Waste7: JSR sub_Waste6
0D14D 20 50 D1                  sub_Waste6: JSR sub_Waste5
0D150 20 53 D1                  sub_Waste5: JSR sub_Waste4
0D153 20 56 D1                  sub_Waste4: JSR sub_Waste3
0D156 20 59 D1                  sub_Waste3: JSR sub_Waste2
0D159 20 5C D1                  sub_Waste2: JSR sub_Waste1
0D15C 20 5F D1                  sub_Waste1: JSR sub_Waste0
0D15F 60                        sub_Waste0: RTS0D160                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D160                           
0D160                           ;; Write the byte in temp+2 and the ppu address (temp)
0D160                           ;; to a buffer, so NMI can update it before the next frame
0D160                           
0D160                           sub_WriteByteToPPUBuffer:
0D160                           
0D160                               ;; Prevent updating until full 3-byte buffer is filled,
0D160                               ;; so that graphics won't glitch out if NMI happens during
0D160                               ;; updating the buffer
0D160 A9 00                         LDA #$00
0D162 85 39                         STA ppu_buffer_update
0D164                           
0D164                               ;; Check if buffer full; if so, wait a frame and force update
0D164 A4 3A                         LDY ppu_buffer_pointer
0D166 C0 60                         CPY #$60
0D168 D0 05                         BNE +
0D16A E6 39                             INC ppu_buffer_update
0D16C 20 5A C5                          JSR sub_WaitForVBlank
0D16F                               +
0D16F                           
0D16F                               ;; Add ppu_addr high byte to buffer
0D16F A5 00                         LDA temp
0D171 99 00 03                      STA ppu_buffer,y
0D174                           
0D174                               ;; Add ppu_addr low byte to buffer
0D174 C8                            INY
0D175 A5 01                         LDA temp+1
0D177 99 00 03                      STA ppu_buffer,y
0D17A                           
0D17A                               ;; Add ppu_data to buffer
0D17A C8                            INY
0D17B A5 02                         LDA temp+2
0D17D 99 00 03                      STA ppu_buffer,y
0D180                           
0D180                               ;; Update buffer pointer
0D180 C8                            INY
0D181 84 3A                         STY ppu_buffer_pointer
0D183                           
0D183                               ;; Tell NMI to update next round
0D183 E6 39                         INC ppu_buffer_update
0D185                           
0D185                               ;; Return
0D185 60                            RTS
0D186                           
0D186                           
0D186                           
0D186                           
0D186                           ;; LUTs
0D186                           .include "game/include/tables.asm"
0D186                           
0D186                           ;; Initial screen palette
0D186                           tbl_IntroScreenPalette:
0D186 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D18A 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D18E 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D192 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D196                           
0D196 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D19A 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D19E 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D1A2 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D1A6                           
0D1A6                           
0D1A6                           ;; Intro: mapping logo index to chr tile
0D1A6                           tbl_IntroScreenLogoChr:
0D1A6 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D1AE                           
0D1AE                           
0D1AE                           ;; Intro screen data
0D1AE                           tbl_IntroScreenData:
0D1AE                           
0D1AE                               ;; Set PPU address $20AC and draw
0D1AE 60 AC                         .db #$60, #$AC
0D1B0 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D1B8                           
0D1B8                               ;; Set PPU address $20CF and draw
0D1B8 60 CF                         .db #$60, #$CF
0D1BA 01 02                         .db #_0, #_1
0D1BC                               
0D1BC                               ;; Set PPU address $2122 and draw
0D1BC 61 22                         .db #$61, #$22
0D1BE 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D1C5 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D1CB 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D1D3 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D1D8                               
0D1D8                               ;; Set PPU address $2147 and draw
0D1D8 61 47                         .db #$61, #$47
0D1DA 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D1E1 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D1E5 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D1EB 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D1F1                               
0D1F1                               ;; Set PPU address $218B and draw
0D1F1 61 8B                         .db #$61, #$8B
0D1F3 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D1F9 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D1FE                               
0D1FE                               ;; Set PPU address $21E6 and draw
0D1FE 61 E6                         .db #$61, #$E6
0D200 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D208 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D20C 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D213                               
0D213                               ;; Set PPU address $222D and draw
0D213 62 2D                         .db #$62, #$2D
0D215 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D21B                               
0D21B                               ;; Set PPU address $2281
0D21B 62 81                         .db #$62, #$81
0D21D                               
0D21D                               ;; Draw the Crillion logo
0D21D E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D221 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D225 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D229 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D22D                               
0D22D D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D231 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D235 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D239 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D23D                               
0D23D D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D241 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D245 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D249 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D24D                           
0D24D D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D251 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D255 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D259 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D25D                               
0D25D D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D261 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D265 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D269 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D26D                           
0D26D F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D271 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D275 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D279 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D27C                           
0D27C                               ;; End of intro
0D27C 3F                            .db #$3F
0D27D                           
0D27D                           
0D27D                           ;; Animation frames table
0D27D                           .include "game/include/table/animation_frames.asm"
0D27D                           
0D27D                           ;; CHR tile-id's per slide of explosion
0D27D                           explosion_slide0:
0D27D 00 00 00                      .db #$00, #$00, #$00
0D280 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D283 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D286                           
0D286                           explosion_slide1:
0D286 00 00 00                      .db #$00, #$00, #$00
0D289 29 2A 2B                      .db #$29, #$2A, #$2B
0D28C 39 3A 3B                      .db #$39, #$3A, #$3B
0D28F                           
0D28F                           explosion_slide2:
0D28F 16 00 00                      .db #$16, #$00, #$00
0D292 26 27 28                      .db #$26, #$27, #$28
0D295 36 37 38                      .db #$36, #$37, #$38
0D298                           
0D298                           explosion_slide3:
0D298 00 14 15                      .db #$00, #$14, #$15
0D29B 23 24 25                      .db #$23, #$24, #$25
0D29E 33 34 35                      .db #$33, #$34, #$35
0D2A1                           
0D2A1                           explosion_slide4:
0D2A1 10 11 12                      .db #$10, #$11, #$12
0D2A4 20 21 22                      .db #$20, #$21, #$22
0D2A7 30 31 32                      .db #$30, #$31, #$32
0D2AA                           
0D2AA                           ;; High and low bytes of animation slides
0D2AA                           explosion_anim_hi:
0D2AA D2                            .db >#explosion_slide0
0D2AB D2                            .db >#explosion_slide1
0D2AC D2                            .db >#explosion_slide2
0D2AD D2                            .db >#explosion_slide3
0D2AE D2                            .db >#explosion_slide4
0D2AF D2                            .db >#explosion_slide4
0D2B0 D2                            .db >#explosion_slide3
0D2B1 D2                            .db >#explosion_slide2
0D2B2 D2                            .db >#explosion_slide1
0D2B3 D2                            .db >#explosion_slide0
0D2B4                           
0D2B4                           explosion_anim_lo:
0D2B4 7D                            .db <#explosion_slide0
0D2B5 86                            .db <#explosion_slide1
0D2B6 8F                            .db <#explosion_slide2
0D2B7 98                            .db <#explosion_slide3
0D2B8 A1                            .db <#explosion_slide4
0D2B9 A1                            .db <#explosion_slide4
0D2BA 98                            .db <#explosion_slide3
0D2BB 8F                            .db <#explosion_slide2
0D2BC 86                            .db <#explosion_slide1
0D2BD 7D                            .db <#explosion_slide0
0D2BE                           
0D2BE                           
0D2BE                           
0D2BE                           ;; Ball palette color table (CBRYGM)
0D2BE                           tbl_BallColorDark:
0D2BE 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D2C4                            
0D2C4                           tbl_BallColorLight:
0D2C4 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D2CA                           
0D2CA                               
0D2CA                           ;; Screen mode drawing routine addresses
0D2CA                           tbl_LoadScreenHi:
0D2CA CE CA CF                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D2CD                           
0D2CD                           tbl_LoadScreenLo:
0D2CD BC F3 4B                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D2D0                           
0D2D0                           
0D2D0                           ;; Level data
0D2D0                           .include "game/include/table/level_data.asm"
0D2D0                           
0D2D0                           ;; Level layout tables
0D2D0                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D2D0                           
0D2D0                           ifdef TESTING
0D2D0                           lvl_test:
0D2D0                               .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D2D0                               .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D2D0                               .db #LEVEL_END
0D2D0                           endif
0D2D0                           
0D2D0                           lvl_layout_01:
0D2D0 61 21                         .db #$61, #%00100001
0D2D2 52 61                         .db #$52, #%01100001
0D2D4 43 65                         .db #$43, #%01100101
0D2D6 83 05                         .db #$83, #%00000101
0D2D8 93 15                         .db #$93, #%00010101
0D2DA 34 7A                         .db #$34, #%01111010
0D2DC 74 7A                         .db #$74, #%01111010
0D2DE 35 7A                         .db #$35, #%01111010
0D2E0 75 7A                         .db #$75, #%01111010
0D2E2 46 65                         .db #$46, #%01100101
0D2E4 86 25                         .db #$86, #%00100101
0D2E6 57 61                         .db #$57, #%01100001
0D2E8 68 21                         .db #$68, #%00100001
0D2EA FF                            .db #LEVEL_END
0D2EB                           
0D2EB                           lvl_layout_02:
0D2EB C0 0A                         .db #$C0, #%00001010
0D2ED 11 15                         .db #$11, #%00010101
0D2EF 21 62                         .db #$21, #%01100010
0D2F1 61 62                         .db #$61, #%01100010
0D2F3 A1 42                         .db #$A1, #%01000010
0D2F5 12 67                         .db #$12, #%01100111
0D2F7 52 67                         .db #$52, #%01100111
0D2F9 92 67                         .db #$92, #%01100111
0D2FB C3 0D                         .db #$C3, #%00001101
0D2FD 14 11                         .db #$14, #%00010001
0D2FF 24 65                         .db #$24, #%01100101
0D301 64 65                         .db #$64, #%01100101
0D303 A4 45                         .db #$A4, #%01000101
0D305 15 67                         .db #$15, #%01100111
0D307 55 67                         .db #$55, #%01100111
0D309 95 67                         .db #$95, #%01100111
0D30B 17 12                         .db #$17, #%00010010
0D30D 27 61                         .db #$27, #%01100001
0D30F 67 61                         .db #$67, #%01100001
0D311 A7 41                         .db #$A7, #%01000001
0D313 38 7A                         .db #$38, #%01111010
0D315 98 5A                         .db #$98, #%01011010
0D317 18 27                         .db #$18, #%00100111
0D319 48 27                         .db #$48, #%00100111
0D31B 78 27                         .db #$78, #%00100111
0D31D C8 07                         .db #$C8, #%00000111
0D31F FF                            .db #LEVEL_END
0D320                           
0D320                           lvl_layout_03:
0D320 00 7A                         .db #$00, #%01111010
0D322 40 7A                         .db #$40, #%01111010
0D324 80 7A                         .db #$80, #%01111010
0D326 C0 1A                         .db #$C0, #%00011010
0D328 10 A1                         .db #$10, #%10100001
0D32A 13 E1                         .db #$13, #%11100001
0D32C 17 C1                         .db #$17, #%11000001
0D32E 30 C1                         .db #$30, #%11000001
0D330 34 C1                         .db #$34, #%11000001
0D332 38 A1                         .db #$38, #%10100001
0D334 50 E1                         .db #$50, #%11100001
0D336 55 81                         .db #$55, #%10000001
0D338 57 C1                         .db #$57, #%11000001
0D33A 70 C1                         .db #$70, #%11000001
0D33C 73 A1                         .db #$73, #%10100001
0D33E 76 E1                         .db #$76, #%11100001
0D340 90 E1                         .db #$90, #%11100001
0D342 95 81                         .db #$95, #%10000001
0D344 97 C1                         .db #$97, #%11000001
0D346 B0 C1                         .db #$B0, #%11000001
0D348 B4 C1                         .db #$B4, #%11000001
0D34A B8 A1                         .db #$B8, #%10100001
0D34C D0 A1                         .db #$D0, #%10100001
0D34E D3 E1                         .db #$D3, #%11100001
0D350 D7 C1                         .db #$D7, #%11000001
0D352 FF                            .db #LEVEL_END
0D353                           
0D353                           lvl_layout_04:
0D353 00 4C                         .db #$00, #%01001100
0D355 40 6C                         .db #$40, #%01101100
0D357 80 4C                         .db #$80, #%01001100
0D359 81 AC                         .db #$81, #%10101100
0D35B C1 2C                         .db #$C1, #%00101100
0D35D 02 6C                         .db #$02, #%01101100
0D35F 42 CC                         .db #$42, #%11001100
0D361 62 EC                         .db #$62, #%11101100
0D363 A2 CC                         .db #$A2, #%11001100
0D365 C3 CC                         .db #$C3, #%11001100
0D367 04 4C                         .db #$04, #%01001100
0D369 84 2C                         .db #$84, #%00101100
0D36B 25 AC                         .db #$25, #%10101100
0D36D 85 AC                         .db #$85, #%10101100
0D36F 06 AC                         .db #$06, #%10101100
0D371 36 CC                         .db #$36, #%11001100
0D373 56 CC                         .db #$56, #%11001100
0D375 66 EC                         .db #$66, #%11101100
0D377 96 6C                         .db #$96, #%01101100
0D379 C7 AC                         .db #$C7, #%10101100
0D37B 08 2C                         .db #$08, #%00101100
0D37D 78 6C                         .db #$78, #%01101100
0D37F D8 0C                         .db #$D8, #%00001100
0D381 30 A1                         .db #$30, #%10100001
0D383 B0 21                         .db #$B0, #%00100001
0D385 01 41                         .db #$01, #%01000001
0D387 41 61                         .db #$41, #%01100001
0D389 91 A1                         .db #$91, #%10100001
0D38B A1 21                         .db #$A1, #%00100001
0D38D 52 C1                         .db #$52, #%11000001
0D38F 72 E1                         .db #$72, #%11100001
0D391 B2 C1                         .db #$B2, #%11000001
0D393 C2 21                         .db #$C2, #%00100001
0D395 03 41                         .db #$03, #%01000001
0D397 33 C1                         .db #$33, #%11000001
0D399 83 21                         .db #$83, #%00100001
0D39B D3 E1                         .db #$D3, #%11100001
0D39D 05 21                         .db #$05, #%00100001
0D39F 45 E1                         .db #$45, #%11100001
0D3A1 A5 21                         .db #$A5, #%00100001
0D3A3 16 A1                         .db #$16, #%10100001
0D3A5 76 A1                         .db #$76, #%10100001
0D3A7 27 A1                         .db #$27, #%10100001
0D3A9 57 21                         .db #$57, #%00100001
0D3AB 87 41                         .db #$87, #%01000001
0D3AD B7 A1                         .db #$B7, #%10100001
0D3AF 19 21                         .db #$19, #%00100001
0D3B1 39 41                         .db #$39, #%01000001
0D3B3 89 41                         .db #$89, #%01000001
0D3B5 C9 21                         .db #$C9, #%00100001
0D3B7 D0 1A                         .db #$D0, #%00011010
0D3B9 55 1A                         .db #$55, #%00011010
0D3BB 95 1A                         .db #$95, #%00011010
0D3BD D7 1A                         .db #$D7, #%00011010
0D3BF 09 1A                         .db #$09, #%00011010
0D3C1 79 1A                         .db #$79, #%00011010
0D3C3 FF                            .db #LEVEL_END
0D3C4                           
0D3C4                           lvl_layout_05:
0D3C4 40 0A                         .db #$40, #%00001010
0D3C6 70 1A                         .db #$70, #%00011010
0D3C8 B0 42                         .db #$B0, #%01000010
0D3CA 41 A7                         .db #$41, #%10100111
0D3CC B1 22                         .db #$B1, #%00100010
0D3CE D1 15                         .db #$D1, #%00010101
0D3D0 22 0A                         .db #$22, #%00001010
0D3D2 52 05                         .db #$52, #%00000101
0D3D4 B2 42                         .db #$B2, #%01000010
0D3D6 03 27                         .db #$03, #%00100111
0D3D8 33 67                         .db #$33, #%01100111
0D3DA 73 67                         .db #$73, #%01100111
0D3DC B3 47                         .db #$B3, #%01000111
0D3DE 05 E5                         .db #$05, #%11100101
0D3E0 25 A5                         .db #$25, #%10100101
0D3E2 35 25                         .db #$35, #%00100101
0D3E4 65 45                         .db #$65, #%01000101
0D3E6 A5 45                         .db #$A5, #%01000101
0D3E8 46 E5                         .db #$46, #%11100101
0D3EA 66 E5                         .db #$66, #%11100101
0D3EC 86 E5                         .db #$86, #%11100101
0D3EE A6 E2                         .db #$A6, #%11100010
0D3F0 C6 E5                         .db #$C6, #%11100101
0D3F2 27 25                         .db #$27, #%00100101
0D3F4 77 05                         .db #$77, #%00000101
0D3F6 B7 02                         .db #$B7, #%00000010
0D3F8 09 05                         .db #$09, #%00000101
0D3FA 79 05                         .db #$79, #%00000101
0D3FC B9 02                         .db #$B9, #%00000010
0D3FE FF                            .db #LEVEL_END
0D3FF                           
0D3FF                           lvl_layout_06:
0D3FF 00 03                         .db #$00, #%00000011
0D401 20 03                         .db #$20, #%00000011
0D403 40 03                         .db #$40, #%00000011
0D405 A0 03                         .db #$A0, #%00000011
0D407 C0 03                         .db #$C0, #%00000011
0D409 11 03                         .db #$11, #%00000011
0D40B 31 03                         .db #$31, #%00000011
0D40D 51 03                         .db #$51, #%00000011
0D40F 91 03                         .db #$91, #%00000011
0D411 B1 03                         .db #$B1, #%00000011
0D413 D1 03                         .db #$D1, #%00000011
0D415 02 03                         .db #$02, #%00000011
0D417 22 03                         .db #$22, #%00000011
0D419 42 03                         .db #$42, #%00000011
0D41B A2 03                         .db #$A2, #%00000011
0D41D C2 03                         .db #$C2, #%00000011
0D41F 13 03                         .db #$13, #%00000011
0D421 33 03                         .db #$33, #%00000011
0D423 53 03                         .db #$53, #%00000011
0D425 93 03                         .db #$93, #%00000011
0D427 B3 03                         .db #$B3, #%00000011
0D429 D3 03                         .db #$D3, #%00000011
0D42B 04 03                         .db #$04, #%00000011
0D42D 24 03                         .db #$24, #%00000011
0D42F 44 03                         .db #$44, #%00000011
0D431 A4 03                         .db #$A4, #%00000011
0D433 C4 03                         .db #$C4, #%00000011
0D435 15 03                         .db #$15, #%00000011
0D437 35 03                         .db #$35, #%00000011
0D439 55 03                         .db #$55, #%00000011
0D43B 95 03                         .db #$95, #%00000011
0D43D B5 03                         .db #$B5, #%00000011
0D43F D5 03                         .db #$D5, #%00000011
0D441 06 03                         .db #$06, #%00000011
0D443 26 03                         .db #$26, #%00000011
0D445 46 03                         .db #$46, #%00000011
0D447 A6 03                         .db #$A6, #%00000011
0D449 C6 03                         .db #$C6, #%00000011
0D44B 17 03                         .db #$17, #%00000011
0D44D 37 03                         .db #$37, #%00000011
0D44F 57 03                         .db #$57, #%00000011
0D451 97 03                         .db #$97, #%00000011
0D453 B7 03                         .db #$B7, #%00000011
0D455 D7 03                         .db #$D7, #%00000011
0D457 08 03                         .db #$08, #%00000011
0D459 28 03                         .db #$28, #%00000011
0D45B 48 03                         .db #$48, #%00000011
0D45D A8 03                         .db #$A8, #%00000011
0D45F C8 03                         .db #$C8, #%00000011
0D461 19 03                         .db #$19, #%00000011
0D463 39 03                         .db #$39, #%00000011
0D465 59 03                         .db #$59, #%00000011
0D467 99 03                         .db #$99, #%00000011
0D469 B9 03                         .db #$B9, #%00000011
0D46B D9 03                         .db #$D9, #%00000011
0D46D 60 4B                         .db #$60, #%01001011
0D46F 71 CB                         .db #$71, #%11001011
0D471 62 4B                         .db #$62, #%01001011
0D473 64 4B                         .db #$64, #%01001011
0D475 75 CB                         .db #$75, #%11001011
0D477 66 4B                         .db #$66, #%01001011
0D479 68 4B                         .db #$68, #%01001011
0D47B 79 0B                         .db #$79, #%00001011
0D47D 70 03                         .db #$70, #%00000011
0D47F 72 03                         .db #$72, #%00000011
0D481 74 03                         .db #$74, #%00000011
0D483 76 03                         .db #$76, #%00000011
0D485 78 03                         .db #$78, #%00000011
0D487 FF                            .db #LEVEL_END
0D488                           
0D488                           lvl_layout_07:
0D488 00 11                         .db #$00, #%00010001
0D48A 01 FA                         .db #$01, #%11111010
0D48C 12 BA                         .db #$12, #%10111010
0D48E 23 DA                         .db #$23, #%11011010
0D490 34 FA                         .db #$34, #%11111010
0D492 05 DA                         .db #$05, #%11011010
0D494 15 FA                         .db #$15, #%11111010
0D496 45 BA                         .db #$45, #%10111010
0D498 56 DA                         .db #$56, #%11011010
0D49A 27 BA                         .db #$27, #%10111010
0D49C 67 DA                         .db #$67, #%11011010
0D49E 38 3A                         .db #$38, #%00111010
0D4A0 78 BA                         .db #$78, #%10111010
0D4A2 09 3A                         .db #$09, #%00111010
0D4A4 39 3A                         .db #$39, #%00111010
0D4A6 89 1A                         .db #$89, #%00011010
0D4A8 B0 01                         .db #$B0, #%00000001
0D4AA D0 01                         .db #$D0, #%00000001
0D4AC A1 01                         .db #$A1, #%00000001
0D4AE C1 11                         .db #$C1, #%00010001
0D4B0 B2 01                         .db #$B2, #%00000001
0D4B2 D2 01                         .db #$D2, #%00000001
0D4B4 A3 01                         .db #$A3, #%00000001
0D4B6 C3 01                         .db #$C3, #%00000001
0D4B8 B4 01                         .db #$B4, #%00000001
0D4BA D4 01                         .db #$D4, #%00000001
0D4BC A5 01                         .db #$A5, #%00000001
0D4BE C5 01                         .db #$C5, #%00000001
0D4C0 B6 01                         .db #$B6, #%00000001
0D4C2 D6 01                         .db #$D6, #%00000001
0D4C4 A7 01                         .db #$A7, #%00000001
0D4C6 C7 01                         .db #$C7, #%00000001
0D4C8 FF                            .db #LEVEL_END
0D4C9                           
0D4C9                           lvl_layout_08:
0D4C9 40 B5                         .db #$40, #%10110101
0D4CB 31 0D                         .db #$31, #%00001101
0D4CD 61 10                         .db #$61, #%00010000
0D4CF 42 C7                         .db #$42, #%11000111
0D4D1 52 67                         .db #$52, #%01100111
0D4D3 63 C7                         .db #$63, #%11000111
0D4D5 83 E7                         .db #$83, #%11100111
0D4D7 05 07                         .db #$05, #%00000111
0D4D9 15 3A                         .db #$15, #%00111010
0D4DB 07 63                         .db #$07, #%01100011
0D4DD 27 13                         .db #$27, #%00010011
0D4DF 38 A5                         .db #$38, #%10100101
0D4E1 09 14                         .db #$09, #%00010100
0D4E3 19 05                         .db #$19, #%00000101
0D4E5 D0 E0                         .db #$D0, #%11100000
0D4E7 C2 A0                         .db #$C2, #%10100000
0D4E9 B3 E0                         .db #$B3, #%11100000
0D4EB D5 E0                         .db #$D5, #%11100000
0D4ED C6 E0                         .db #$C6, #%11100000
0D4EF B0 C4                         .db #$B0, #%11000100
0D4F1 C0 A4                         .db #$C0, #%10100100
0D4F3 D1 A4                         .db #$D1, #%10100100
0D4F5 C4 24                         .db #$C4, #%00100100
0D4F7 C5 04                         .db #$C5, #%00000100
0D4F9 B7 44                         .db #$B7, #%01000100
0D4FB B8 A4                         .db #$B8, #%10100100
0D4FD D9 05                         .db #$D9, #%00000101
0D4FF FF                            .db #LEVEL_END
0D500                           
0D500                           lvl_layout_09:
0D500 81 04                         .db #$81, #%00000100
0D502 D1 04                         .db #$D1, #%00000100
0D504 32 C4                         .db #$32, #%11000100
0D506 A2 C4                         .db #$A2, #%11000100
0D508 C2 24                         .db #$C2, #%00100100
0D50A 13 24                         .db #$13, #%00100100
0D50C 53 04                         .db #$53, #%00000100
0D50E C3 27                         .db #$C3, #%00100111
0D510 15 6C                         .db #$15, #%01101100
0D512 55 6C                         .db #$55, #%01101100
0D514 95 6C                         .db #$95, #%01101100
0D516 D5 0C                         .db #$D5, #%00001100
0D518 27 C7                         .db #$27, #%11000111
0D51A 47 C7                         .db #$47, #%11000111
0D51C 67 C7                         .db #$67, #%11000111
0D51E 87 C7                         .db #$87, #%11000111
0D520 A7 C7                         .db #$A7, #%11000111
0D522 C7 C7                         .db #$C7, #%11000111
0D524 08 13                         .db #$08, #%00010011
0D526 28 15                         .db #$28, #%00010101
0D528 48 12                         .db #$48, #%00010010
0D52A 68 15                         .db #$68, #%00010101
0D52C 88 11                         .db #$88, #%00010001
0D52E A8 10                         .db #$A8, #%00010000
0D530 C8 14                         .db #$C8, #%00010100
0D532 09 07                         .db #$09, #%00000111
0D534 19 03                         .db #$19, #%00000011
0D536 39 05                         .db #$39, #%00000101
0D538 59 02                         .db #$59, #%00000010
0D53A 79 05                         .db #$79, #%00000101
0D53C 99 01                         .db #$99, #%00000001
0D53E B9 00                         .db #$B9, #%00000000
0D540 D9 04                         .db #$D9, #%00000100
0D542 FF                            .db #LEVEL_END
0D543                           
0D543                           lvl_layout_10:
0D543 00 02                         .db #$00, #%00000010
0D545 10 C9                         .db #$10, #%11001001
0D547 50 C9                         .db #$50, #%11001001
0D549 90 C9                         .db #$90, #%11001001
0D54B D0 C9                         .db #$D0, #%11001001
0D54D 31 C9                         .db #$31, #%11001001
0D54F 71 C9                         .db #$71, #%11001001
0D551 B1 C9                         .db #$B1, #%11001001
0D553 13 C9                         .db #$13, #%11001001
0D555 53 C9                         .db #$53, #%11001001
0D557 93 C9                         .db #$93, #%11001001
0D559 D3 C9                         .db #$D3, #%11001001
0D55B 34 C9                         .db #$34, #%11001001
0D55D 74 C9                         .db #$74, #%11001001
0D55F B4 C9                         .db #$B4, #%11001001
0D561 16 C9                         .db #$16, #%11001001
0D563 56 C9                         .db #$56, #%11001001
0D565 96 C9                         .db #$96, #%11001001
0D567 D6 C9                         .db #$D6, #%11001001
0D569 37 C9                         .db #$37, #%11001001
0D56B 77 C9                         .db #$77, #%11001001
0D56D B7 C9                         .db #$B7, #%11001001
0D56F D8 12                         .db #$D8, #%00010010
0D571 FF                            .db #LEVEL_END
0D572                           
0D572                           lvl_layout_11:
0D572 00 65                         .db #$00, #%01100101
0D574 40 45                         .db #$40, #%01000101
0D576 50 A7                         .db #$50, #%10100111
0D578 80 05                         .db #$80, #%00000101
0D57A 90 A7                         .db #$90, #%10100111
0D57C A0 65                         .db #$A0, #%01100101
0D57E 01 43                         .db #$01, #%01000011
0D580 31 23                         .db #$31, #%00100011
0D582 61 A7                         .db #$61, #%10100111
0D584 81 A7                         .db #$81, #%10100111
0D586 A1 63                         .db #$A1, #%01100011
0D588 02 44                         .db #$02, #%01000100
0D58A 32 44                         .db #$32, #%01000100
0D58C 92 04                         .db #$92, #%00000100
0D58E A2 64                         .db #$A2, #%01100100
0D590 03 40                         .db #$03, #%01000000
0D592 33 40                         .db #$33, #%01000000
0D594 64 81                         .db #$64, #%10000001
0D596 84 82                         .db #$84, #%10000010
0D598 93 00                         .db #$93, #%00000000
0D59A A3 60                         .db #$A3, #%01100000
0D59C 04 41                         .db #$04, #%01000001
0D59E 34 41                         .db #$34, #%01000001
0D5A0 94 02                         .db #$94, #%00000010
0D5A2 A4 62                         .db #$A4, #%01100010
0D5A4 05 47                         .db #$05, #%01000111
0D5A6 35 67                         .db #$35, #%01100111
0D5A8 75 0A                         .db #$75, #%00001010
0D5AA 85 47                         .db #$85, #%01000111
0D5AC B5 47                         .db #$B5, #%01000111
0D5AE 06 E7                         .db #$06, #%11100111
0D5B0 16 5A                         .db #$16, #%01011010
0D5B2 26 11                         .db #$26, #%00010001
0D5B4 46 13                         .db #$46, #%00010011
0D5B6 56 1A                         .db #$56, #%00011010
0D5B8 66 14                         .db #$66, #%00010100
0D5BA 86 10                         .db #$86, #%00010000
0D5BC 96 5A                         .db #$96, #%01011010
0D5BE A6 12                         .db #$A6, #%00010010
0D5C0 C6 15                         .db #$C6, #%00010101
0D5C2 D6 E7                         .db #$D6, #%11100111
0D5C4 FF                            .db #LEVEL_END
0D5C5                           
0D5C5                           lvl_layout_12:
0D5C5 00 00                         .db #$00, #%00000000
0D5C7 50 C0                         .db #$50, #%11000000
0D5C9 80 00                         .db #$80, #%00000000
0D5CB 61 00                         .db #$61, #%00000000
0D5CD 22 C0                         .db #$22, #%11000000
0D5CF 82 E0                         .db #$82, #%11100000
0D5D1 C2 E0                         .db #$C2, #%11100000
0D5D3 A3 20                         .db #$A3, #%00100000
0D5D5 C3 10                         .db #$C3, #%00010000
0D5D7 04 00                         .db #$04, #%00000000
0D5D9 54 20                         .db #$54, #%00100000
0D5DB 15 0A                         .db #$15, #%00001010
0D5DD 25 C0                         .db #$25, #%11000000
0D5DF 55 E0                         .db #$55, #%11100000
0D5E1 86 20                         .db #$86, #%00100000
0D5E3 C6 E0                         .db #$C6, #%11100000
0D5E5 C7 A0                         .db #$C7, #%10100000
0D5E7 88 00                         .db #$88, #%00000000
0D5E9 59 00                         .db #$59, #%00000000
0D5EB 89 20                         .db #$89, #%00100000
0D5ED D9 1A                         .db #$D9, #%00011010
0D5EF FF                            .db #LEVEL_END
0D5F0                           
0D5F0                           lvl_layout_13:
0D5F0 10 E0                         .db #$10, #%11100000
0D5F2 20 E0                         .db #$20, #%11100000
0D5F4 30 E0                         .db #$30, #%11100000
0D5F6 40 40                         .db #$40, #%01000000
0D5F8 80 60                         .db #$80, #%01100000
0D5FA C0 E0                         .db #$C0, #%11100000
0D5FC D0 E0                         .db #$D0, #%11100000
0D5FE 41 40                         .db #$41, #%01000000
0D600 71 60                         .db #$71, #%01100000
0D602 52 60                         .db #$52, #%01100000
0D604 A2 20                         .db #$A2, #%00100000
0D606 43 60                         .db #$43, #%01100000
0D608 83 60                         .db #$83, #%01100000
0D60A 14 74                         .db #$14, #%01110100
0D60C 54 74                         .db #$54, #%01110100
0D60E 94 74                         .db #$94, #%01110100
0D610 D4 14                         .db #$D4, #%00010100
0D612 15 0D                         .db #$15, #%00001101
0D614 55 0D                         .db #$55, #%00001101
0D616 95 0D                         .db #$95, #%00001101
0D618 D5 0D                         .db #$D5, #%00001101
0D61A 26 0D                         .db #$26, #%00001101
0D61C 46 0D                         .db #$46, #%00001101
0D61E 66 0D                         .db #$66, #%00001101
0D620 86 0D                         .db #$86, #%00001101
0D622 A6 0D                         .db #$A6, #%00001101
0D624 C6 0D                         .db #$C6, #%00001101
0D626 07 10                         .db #$07, #%00010000
0D628 37 0D                         .db #$37, #%00001101
0D62A 77 0D                         .db #$77, #%00001101
0D62C B7 0D                         .db #$B7, #%00001101
0D62E 28 0D                         .db #$28, #%00001101
0D630 48 0D                         .db #$48, #%00001101
0D632 68 0D                         .db #$68, #%00001101
0D634 88 0D                         .db #$88, #%00001101
0D636 A8 0D                         .db #$A8, #%00001101
0D638 C8 0D                         .db #$C8, #%00001101
0D63A 19 0D                         .db #$19, #%00001101
0D63C 59 0D                         .db #$59, #%00001101
0D63E 99 0D                         .db #$99, #%00001101
0D640 D9 0D                         .db #$D9, #%00001101
0D642 FF                            .db #LEVEL_END
0D643                           
0D643                           lvl_layout_14:
0D643 00 67                         .db #$00, #%01100111
0D645 40 67                         .db #$40, #%01100111
0D647 80 67                         .db #$80, #%01100111
0D649 C0 27                         .db #$C0, #%00100111
0D64B 01 27                         .db #$01, #%00100111
0D64D 31 C7                         .db #$31, #%11000111
0D64F 51 C7                         .db #$51, #%11000111
0D651 71 C7                         .db #$71, #%11000111
0D653 91 C7                         .db #$91, #%11000111
0D655 B1 C7                         .db #$B1, #%11000111
0D657 D1 07                         .db #$D1, #%00000111
0D659 02 E7                         .db #$02, #%11100111
0D65B 06 E7                         .db #$06, #%11100111
0D65D 13 07                         .db #$13, #%00000111
0D65F D3 07                         .db #$D3, #%00000111
0D661 15 07                         .db #$15, #%00000111
0D663 35 07                         .db #$35, #%00000111
0D665 55 07                         .db #$55, #%00000111
0D667 75 07                         .db #$75, #%00000111
0D669 95 07                         .db #$95, #%00000111
0D66B B5 07                         .db #$B5, #%00000111
0D66D D5 07                         .db #$D5, #%00000111
0D66F 17 07                         .db #$17, #%00000111
0D671 37 C7                         .db #$37, #%11000111
0D673 57 C7                         .db #$57, #%11000111
0D675 77 C7                         .db #$77, #%11000111
0D677 97 C7                         .db #$97, #%11000111
0D679 B7 C7                         .db #$B7, #%11000111
0D67B D7 07                         .db #$D7, #%00000111
0D67D 19 07                         .db #$19, #%00000111
0D67F D9 07                         .db #$D9, #%00000111
0D681 22 4C                         .db #$22, #%01001100
0D683 62 4C                         .db #$62, #%01001100
0D685 A2 4C                         .db #$A2, #%01001100
0D687 24 0C                         .db #$24, #%00001100
0D689 44 0C                         .db #$44, #%00001100
0D68B 64 0C                         .db #$64, #%00001100
0D68D 84 0C                         .db #$84, #%00001100
0D68F A4 0C                         .db #$A4, #%00001100
0D691 C4 0C                         .db #$C4, #%00001100
0D693 26 0C                         .db #$26, #%00001100
0D695 46 0C                         .db #$46, #%00001100
0D697 66 0C                         .db #$66, #%00001100
0D699 86 0C                         .db #$86, #%00001100
0D69B A6 0C                         .db #$A6, #%00001100
0D69D C6 0C                         .db #$C6, #%00001100
0D69F 28 4C                         .db #$28, #%01001100
0D6A1 68 4C                         .db #$68, #%01001100
0D6A3 A8 4C                         .db #$A8, #%01001100
0D6A5 32 04                         .db #$32, #%00000100
0D6A7 52 04                         .db #$52, #%00000100
0D6A9 72 04                         .db #$72, #%00000100
0D6AB 92 04                         .db #$92, #%00000100
0D6AD B2 04                         .db #$B2, #%00000100
0D6AF 38 04                         .db #$38, #%00000100
0D6B1 58 04                         .db #$58, #%00000100
0D6B3 78 04                         .db #$78, #%00000100
0D6B5 98 04                         .db #$98, #%00000100
0D6B7 B8 04                         .db #$B8, #%00000100
0D6B9 FF                            .db #LEVEL_END
0D6BA                           
0D6BA                           lvl_layout_15:
0D6BA 00 7A                         .db #$00, #%01111010
0D6BC 40 7A                         .db #$40, #%01111010
0D6BE 80 7A                         .db #$80, #%01111010
0D6C0 C0 3A                         .db #$C0, #%00111010
0D6C2 61 64                         .db #$61, #%01100100
0D6C4 05 E4                         .db #$05, #%11100100
0D6C6 15 64                         .db #$15, #%01100100
0D6C8 55 64                         .db #$55, #%01100100
0D6CA 95 64                         .db #$95, #%01100100
0D6CC D5 E4                         .db #$D5, #%11100100
0D6CE 26 04                         .db #$26, #%00000100
0D6D0 46 44                         .db #$46, #%01000100
0D6D2 76 64                         .db #$76, #%01100100
0D6D4 C6 04                         .db #$C6, #%00000100
0D6D6 17 04                         .db #$17, #%00000100
0D6D8 37 64                         .db #$37, #%01100100
0D6DA 77 44                         .db #$77, #%01000100
0D6DC B7 04                         .db #$B7, #%00000100
0D6DE 18 64                         .db #$18, #%01100100
0D6E0 58 64                         .db #$58, #%01100100
0D6E2 98 64                         .db #$98, #%01100100
0D6E4 FF                            .db #LEVEL_END
0D6E5                           
0D6E5                           lvl_layout_16:
0D6E5 10 E1                         .db #$10, #%11100001
0D6E7 20 9A                         .db #$20, #%10011010
0D6E9 30 E1                         .db #$30, #%11100001
0D6EB 40 E1                         .db #$40, #%11100001
0D6ED 50 E1                         .db #$50, #%11100001
0D6EF 60 C1                         .db #$60, #%11000001
0D6F1 70 E1                         .db #$70, #%11100001
0D6F3 80 E1                         .db #$80, #%11100001
0D6F5 90 E1                         .db #$90, #%11100001
0D6F7 A0 61                         .db #$A0, #%01100001
0D6F9 21 C1                         .db #$21, #%11000001
0D6FB A1 1A                         .db #$A1, #%00011010
0D6FD B1 41                         .db #$B1, #%01000001
0D6FF A2 E1                         .db #$A2, #%11100001
0D701 B2 E1                         .db #$B2, #%11100001
0D703 C2 1A                         .db #$C2, #%00011010
0D705 D2 E1                         .db #$D2, #%11100001
0D707 63 1A                         .db #$63, #%00011010
0D709 C3 C1                         .db #$C3, #%11000001
0D70B 14 61                         .db #$14, #%01100001
0D70D 54 61                         .db #$54, #%01100001
0D70F 94 C1                         .db #$94, #%11000001
0D711 15 61                         .db #$15, #%01100001
0D713 55 41                         .db #$55, #%01000001
0D715 85 1A                         .db #$85, #%00011010
0D717 16 41                         .db #$16, #%01000001
0D719 46 1A                         .db #$46, #%00011010
0D71B 56 61                         .db #$56, #%01100001
0D71D A6 61                         .db #$A6, #%01100001
0D71F 17 67                         .db #$17, #%01100111
0D721 57 67                         .db #$57, #%01100111
0D723 97 67                         .db #$97, #%01100111
0D725 D7 07                         .db #$D7, #%00000111
0D727 28 41                         .db #$28, #%01000001
0D729 58 61                         .db #$58, #%01100001
0D72B A8 41                         .db #$A8, #%01000001
0D72D 18 11                         .db #$18, #%00010001
0D72F 38 11                         .db #$38, #%00010001
0D731 98 11                         .db #$98, #%00010001
0D733 B8 11                         .db #$B8, #%00010001
0D735 D8 11                         .db #$D8, #%00010001
0D737 59 09                         .db #$59, #%00001001
0D739 FF                            .db #LEVEL_END
0D73A                           
0D73A                           lvl_layout_17:
0D73A 10 EA                         .db #$10, #%11101010
0D73C 20 E2                         .db #$20, #%11100010
0D73E 30 62                         .db #$30, #%01100010
0D740 70 02                         .db #$70, #%00000010
0D742 80 6A                         .db #$80, #%01101010
0D744 90 22                         .db #$90, #%00100010
0D746 01 AA                         .db #$01, #%10101010
0D748 31 6A                         .db #$31, #%01101010
0D74A 81 2A                         .db #$81, #%00101010
0D74C A1 02                         .db #$A1, #%00000010
0D74E C1 02                         .db #$C1, #%00000010
0D750 D1 0A                         .db #$D1, #%00001010
0D752 32 EA                         .db #$32, #%11101010
0D754 42 6A                         .db #$42, #%01101010
0D756 62 02                         .db #$62, #%00000010
0D758 92 6A                         .db #$92, #%01101010
0D75A D2 E2                         .db #$D2, #%11100010
0D75C 43 1A                         .db #$43, #%00011010
0D75E 53 CA                         .db #$53, #%11001010
0D760 73 02                         .db #$73, #%00000010
0D762 83 4A                         .db #$83, #%01001010
0D764 B3 CA                         .db #$B3, #%11001010
0D766 C3 EA                         .db #$C3, #%11101010
0D768 04 0A                         .db #$04, #%00001010
0D76A 14 A2                         .db #$14, #%10100010
0D76C 24 AA                         .db #$24, #%10101010
0D76E 44 AA                         .db #$44, #%10101010
0D770 64 6A                         .db #$64, #%01101010
0D772 65 6A                         .db #$65, #%01101010
0D774 A5 AA                         .db #$A5, #%10101010
0D776 06 EA                         .db #$06, #%11101010
0D778 16 62                         .db #$16, #%01100010
0D77A 56 42                         .db #$56, #%01000010
0D77C 86 2A                         .db #$86, #%00101010
0D77E 17 42                         .db #$17, #%01000010
0D780 47 12                         .db #$47, #%00010010
0D782 57 6A                         .db #$57, #%01101010
0D784 97 4A                         .db #$97, #%01001010
0D786 A7 02                         .db #$A7, #%00000010
0D788 18 02                         .db #$18, #%00000010
0D78A 28 0A                         .db #$28, #%00001010
0D78C 38 22                         .db #$38, #%00100010
0D78E 68 2A                         .db #$68, #%00101010
0D790 88 62                         .db #$88, #%01100010
0D792 C8 0A                         .db #$C8, #%00001010
0D794 D8 02                         .db #$D8, #%00000010
0D796 19 2A                         .db #$19, #%00101010
0D798 39 2A                         .db #$39, #%00101010
0D79A 69 42                         .db #$69, #%01000010
0D79C 99 2A                         .db #$99, #%00101010
0D79E B9 42                         .db #$B9, #%01000010
0D7A0 FF                            .db #LEVEL_END
0D7A1                           
0D7A1                           lvl_layout_18:
0D7A1 00 12                         .db #$00, #%00010010
0D7A3 40 1A                         .db #$40, #%00011010
0D7A5 50 11                         .db #$50, #%00010001
0D7A7 70 1A                         .db #$70, #%00011010
0D7A9 80 10                         .db #$80, #%00010000
0D7AB D0 13                         .db #$D0, #%00010011
0D7AD 01 1A                         .db #$01, #%00011010
0D7AF 22 15                         .db #$22, #%00010101
0D7B1 A2 1A                         .db #$A2, #%00011010
0D7B3 B2 14                         .db #$B2, #%00010100
0D7B5 03 67                         .db #$03, #%01100111
0D7B7 43 67                         .db #$43, #%01100111
0D7B9 83 67                         .db #$83, #%01100111
0D7BB 24 09                         .db #$24, #%00001001
0D7BD 74 0D                         .db #$74, #%00001101
0D7BF C4 0A                         .db #$C4, #%00001010
0D7C1 05 A7                         .db #$05, #%10100111
0D7C3 45 27                         .db #$45, #%00100111
0D7C5 95 27                         .db #$95, #%00100111
0D7C7 16 C7                         .db #$16, #%11000111
0D7C9 36 67                         .db #$36, #%01100111
0D7CB 86 67                         .db #$86, #%01100111
0D7CD D6 07                         .db #$D6, #%00000111
0D7CF 07 A3                         .db #$07, #%10100011
0D7D1 27 23                         .db #$27, #%00100011
0D7D3 47 C7                         .db #$47, #%11000111
0D7D5 57 A0                         .db #$57, #%10100000
0D7D7 67 A7                         .db #$67, #%10100111
0D7D9 77 20                         .db #$77, #%00100000
0D7DB 97 C7                         .db #$97, #%11000111
0D7DD A7 A4                         .db #$A7, #%10100100
0D7DF B7 A7                         .db #$B7, #%10100111
0D7E1 C7 24                         .db #$C7, #%00100100
0D7E3 28 0B                         .db #$28, #%00001011
0D7E5 38 A3                         .db #$38, #%10100011
0D7E7 78 08                         .db #$78, #%00001000
0D7E9 88 A0                         .db #$88, #%10100000
0D7EB C8 0C                         .db #$C8, #%00001100
0D7ED D8 A4                         .db #$D8, #%10100100
0D7EF 09 43                         .db #$09, #%01000011
0D7F1 59 40                         .db #$59, #%01000000
0D7F3 A9 44                         .db #$A9, #%01000100
0D7F5 FF                            .db #LEVEL_END
0D7F6                           
0D7F6                           lvl_layout_19:
0D7F6 11 A8                         .db #$11, #%10101000
0D7F8 21 68                         .db #$21, #%01101000
0D7FA 81 28                         .db #$81, #%00101000
0D7FC B1 48                         .db #$B1, #%01001000
0D7FE 22 48                         .db #$22, #%01001000
0D800 62 68                         .db #$62, #%01101000
0D802 B2 28                         .db #$B2, #%00101000
0D804 23 28                         .db #$23, #%00101000
0D806 83 28                         .db #$83, #%00101000
0D808 B3 28                         .db #$B3, #%00101000
0D80A 04 E8                         .db #$04, #%11101000
0D80C 24 08                         .db #$24, #%00001000
0D80E 44 08                         .db #$44, #%00001000
0D810 64 E8                         .db #$64, #%11101000
0D812 84 E8                         .db #$84, #%11101000
0D814 C4 A8                         .db #$C4, #%10101000
0D816 D4 E8                         .db #$D4, #%11101000
0D818 15 48                         .db #$15, #%01001000
0D81A 55 C8                         .db #$55, #%11001000
0D81C 75 C8                         .db #$75, #%11001000
0D81E A5 08                         .db #$A5, #%00001000
0D820 36 08                         .db #$36, #%00001000
0D822 B6 08                         .db #$B6, #%00001000
0D824 27 48                         .db #$27, #%01001000
0D826 97 28                         .db #$97, #%00101000
0D828 C7 08                         .db #$C7, #%00001000
0D82A 09 61                         .db #$09, #%01100001
0D82C 19 11                         .db #$19, #%00010001
0D82E 49 61                         .db #$49, #%01100001
0D830 89 31                         .db #$89, #%00110001
0D832 A9 61                         .db #$A9, #%01100001
0D834 FF                            .db #LEVEL_END
0D835                           
0D835                           lvl_layout_20:
0D835 00 60                         .db #$00, #%01100000
0D837 10 1A                         .db #$10, #%00011010
0D839 40 A7                         .db #$40, #%10100111
0D83B 50 20                         .db #$50, #%00100000
0D83D 70 1A                         .db #$70, #%00011010
0D83F 80 40                         .db #$80, #%01000000
0D841 B0 1A                         .db #$B0, #%00011010
0D843 C0 20                         .db #$C0, #%00100000
0D845 01 40                         .db #$01, #%01000000
0D847 31 1A                         .db #$31, #%00011010
0D849 A1 40                         .db #$A1, #%01000000
0D84B D1 1A                         .db #$D1, #%00011010
0D84D 43 67                         .db #$43, #%01100111
0D84F 83 47                         .db #$83, #%01000111
0D851 44 A7                         .db #$44, #%10100111
0D853 54 25                         .db #$54, #%00100101
0D855 94 08                         .db #$94, #%00001000
0D857 A4 A7                         .db #$A4, #%10100111
0D859 55 05                         .db #$55, #%00000101
0D85B 65 08                         .db #$65, #%00001000
0D85D 06 27                         .db #$06, #%00100111
0D85F 36 67                         .db #$36, #%01100111
0D861 76 28                         .db #$76, #%00101000
0D863 A6 27                         .db #$A6, #%00100111
0D865 D6 07                         .db #$D6, #%00000111
0D867 A7 A7                         .db #$A7, #%10100111
0D869 08 60                         .db #$08, #%01100000
0D86B 09 60                         .db #$09, #%01100000
0D86D 18 A7                         .db #$18, #%10100111
0D86F 48 A7                         .db #$48, #%10100111
0D871 58 47                         .db #$58, #%01000111
0D873 88 27                         .db #$88, #%00100111
0D875 B8 20                         .db #$B8, #%00100000
0D877 D8 1A                         .db #$D8, #%00011010
0D879 59 15                         .db #$59, #%00010101
0D87B 69 60                         .db #$69, #%01100000
0D87D A9 60                         .db #$A9, #%01100000
0D87F FF                            .db #LEVEL_END
0D880                           
0D880                           lvl_layout_21:
0D880 00 13                         .db #$00, #%00010011
0D882 10 11                         .db #$10, #%00010001
0D884 20 67                         .db #$20, #%01100111
0D886 60 67                         .db #$60, #%01100111
0D888 A0 47                         .db #$A0, #%01000111
0D88A D0 15                         .db #$D0, #%00010101
0D88C 32 63                         .db #$32, #%01100011
0D88E 72 05                         .db #$72, #%00000101
0D890 82 43                         .db #$82, #%01000011
0D892 B2 43                         .db #$B2, #%01000011
0D894 33 03                         .db #$33, #%00000011
0D896 43 2A                         .db #$43, #%00101010
0D898 63 7A                         .db #$63, #%01111010
0D89A 73 2A                         .db #$73, #%00101010
0D89C A3 7A                         .db #$A3, #%01111010
0D89E 34 63                         .db #$34, #%01100011
0D8A0 74 63                         .db #$74, #%01100011
0D8A2 B4 43                         .db #$B4, #%01000011
0D8A4 06 63                         .db #$06, #%01100011
0D8A6 46 63                         .db #$46, #%01100011
0D8A8 86 63                         .db #$86, #%01100011
0D8AA C6 C3                         .db #$C6, #%11000011
0D8AC 07 7A                         .db #$07, #%01111010
0D8AE 47 7A                         .db #$47, #%01111010
0D8B0 67 0A                         .db #$67, #%00001010
0D8B2 87 7A                         .db #$87, #%01111010
0D8B4 08 13                         .db #$08, #%00010011
0D8B6 18 43                         .db #$18, #%01000011
0D8B8 48 63                         .db #$48, #%01100011
0D8BA 88 63                         .db #$88, #%01100011
0D8BC FF                            .db #LEVEL_END
0D8BD                           
0D8BD                           lvl_layout_22:
0D8BD 00 7A                         .db #$00, #%01111010
0D8BF 40 7A                         .db #$40, #%01111010
0D8C1 80 7A                         .db #$80, #%01111010
0D8C3 C0 3A                         .db #$C0, #%00111010
0D8C5 13 67                         .db #$13, #%01100111
0D8C7 83 A7                         .db #$83, #%10100111
0D8C9 B3 07                         .db #$B3, #%00000111
0D8CB 14 07                         .db #$14, #%00000111
0D8CD 44 07                         .db #$44, #%00000111
0D8CF A4 07                         .db #$A4, #%00000111
0D8D1 15 A5                         .db #$15, #%10100101
0D8D3 45 A5                         .db #$45, #%10100101
0D8D5 85 25                         .db #$85, #%00100101
0D8D7 86 05                         .db #$86, #%00000101
0D8D9 A6 05                         .db #$A6, #%00000101
0D8DB 17 11                         .db #$17, #%00010001
0D8DD 47 A1                         .db #$47, #%10100001
0D8DF 87 A1                         .db #$87, #%10100001
0D8E1 B7 A1                         .db #$B7, #%10100001
0D8E3 18 41                         .db #$18, #%01000001
0D8E5 68 01                         .db #$68, #%00000001
0D8E7 D8 01                         .db #$D8, #%00000001
0D8E9 FF                            .db #LEVEL_END
0D8EA                           
0D8EA                           lvl_layout_23:
0D8EA 00 71                         .db #$00, #%01110001
0D8EC 40 11                         .db #$40, #%00010001
0D8EE 50 43                         .db #$50, #%01000011
0D8F0 80 D1                         .db #$80, #%11010001
0D8F2 90 E3                         .db #$90, #%11100011
0D8F4 A0 63                         .db #$A0, #%01100011
0D8F6 01 63                         .db #$01, #%01100011
0D8F8 41 63                         .db #$41, #%01100011
0D8FA A1 63                         .db #$A1, #%01100011
0D8FC 02 63                         .db #$02, #%01100011
0D8FE 42 63                         .db #$42, #%01100011
0D900 62 11                         .db #$62, #%00010001
0D902 A2 67                         .db #$A2, #%01100111
0D904 04 63                         .db #$04, #%01100011
0D906 44 23                         .db #$44, #%00100011
0D908 64 D1                         .db #$64, #%11010001
0D90A 74 E3                         .db #$74, #%11100011
0D90C 84 F1                         .db #$84, #%11110001
0D90E 94 E3                         .db #$94, #%11100011
0D910 A4 C7                         .db #$A4, #%11000111
0D912 B4 23                         .db #$B4, #%00100011
0D914 05 63                         .db #$05, #%01100011
0D916 45 23                         .db #$45, #%00100011
0D918 06 71                         .db #$06, #%01110001
0D91A 46 11                         .db #$46, #%00010001
0D91C 56 E3                         .db #$56, #%11100011
0D91E D6 07                         .db #$D6, #%00000111
0D920 17 D1                         .db #$17, #%11010001
0D922 27 43                         .db #$27, #%01000011
0D924 67 D1                         .db #$67, #%11010001
0D926 A7 C7                         .db #$A7, #%11000111
0D928 C7 A7                         .db #$C7, #%10100111
0D92A D7 B3                         .db #$D7, #%10110011
0D92C 28 43                         .db #$28, #%01000011
0D92E 78 43                         .db #$78, #%01000011
0D930 29 43                         .db #$29, #%01000011
0D932 79 43                         .db #$79, #%01000011
0D934 FF                           .db #LEVEL_END
0D935                           
0D935                           lvl_layout_24:
0D935 02 67                         .db #$02, #%01100111
0D937 42 67                         .db #$42, #%01100111
0D939 82 67                         .db #$82, #%01100111
0D93B 05 67                         .db #$05, #%01100111
0D93D 45 67                         .db #$45, #%01100111
0D93F 85 67                         .db #$85, #%01100111
0D941 08 67                         .db #$08, #%01100111
0D943 48 67                         .db #$48, #%01100111
0D945 88 67                         .db #$88, #%01100111
0D947 30 E7                         .db #$30, #%11100111
0D949 70 E7                         .db #$70, #%11100111
0D94B B0 E7                         .db #$B0, #%11100111
0D94D 34 E7                         .db #$34, #%11100111
0D94F 74 E7                         .db #$74, #%11100111
0D951 B4 E7                         .db #$B4, #%11100111
0D953 20 13                         .db #$20, #%00010011
0D955 40 10                         .db #$40, #%00010000
0D957 80 02                         .db #$80, #%00000010
0D959 41 05                         .db #$41, #%00000101
0D95B B1 09                         .db #$B1, #%00001001
0D95D 02 09                         .db #$02, #%00001001
0D95F 52 0C                         .db #$52, #%00001100
0D961 13 11                         .db #$13, #%00010001
0D963 33 04                         .db #$33, #%00000100
0D965 74 0C                         .db #$74, #%00001100
0D967 B4 08                         .db #$B4, #%00001000
0D969 15 09                         .db #$15, #%00001001
0D96B 55 0C                         .db #$55, #%00001100
0D96D 95 0C                         .db #$95, #%00001100
0D96F 47 03                         .db #$47, #%00000011
0D971 A7 12                         .db #$A7, #%00010010
0D973 18 15                         .db #$18, #%00010101
0D975 09 05                         .db #$09, #%00000101
0D977 19 03                         .db #$19, #%00000011
0D979 FF                            .db #LEVEL_END
0D97A                           
0D97A                           lvl_layout_25:
0D97A 00 12                         .db #$00, #%00010010
0D97C 10 63                         .db #$10, #%01100011
0D97E 60 63                         .db #$60, #%01100011
0D980 A0 07                         .db #$A0, #%00000111
0D982 01 11                         .db #$01, #%00010001
0D984 A1 02                         .db #$A1, #%00000010
0D986 02 67                         .db #$02, #%01100111
0D988 42 07                         .db #$42, #%00000111
0D98A 62 67                         .db #$62, #%01100111
0D98C A2 C7                         .db #$A2, #%11000111
0D98E 03 61                         .db #$03, #%01100001
0D990 43 01                         .db #$43, #%00000001
0D992 63 61                         .db #$63, #%01100001
0D994 A6 E7                         .db #$A6, #%11100111
0D996 B6 47                         .db #$B6, #%01000111
0D998 C6 01                         .db #$C6, #%00000001
0D99A B7 42                         .db #$B7, #%01000010
0D99C B8 42                         .db #$B8, #%01000010
0D99E C8 0A                         .db #$C8, #%00001010
0D9A0 09 7A                         .db #$09, #%01111010
0D9A2 49 7A                         .db #$49, #%01111010
0D9A4 89 3A                         .db #$89, #%00111010
0D9A6 B9 42                         .db #$B9, #%01000010
0D9A8 FF                            .db #LEVEL_END
0D9A9                           
0D9A9                           ;; Level layout address pointers
0D9A9                           tbl_lvl_layout_hi:
0D9A9                           ifdef TESTING
0D9A9                               .db >#lvl_test
0D9A9                           endif
0D9A9 D2 D2 D3 D3 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D9AE D3 D4 D4 D5 D5                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D9B3 D5 D5 D5 D6 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D9B8 D6 D7 D7 D7 D8                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D9BD D8 D8 D8 D9 D9                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D9C2                           
0D9C2                           tbl_lvl_layout_lo:
0D9C2                           ifdef TESTING
0D9C2                               .db <#lvl_test
0D9C2                           endif
0D9C2 D0 EB 20 53 C4                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D9C7 FF 88 C9 00 43                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D9CC 72 C5 F0 43 BA                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D9D1 E5 3A A1 F6 35                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D9D6 80 BD EA 35 7A                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D9DB                           
0D9DB                           ;; Ball start position (#$YX)
0D9DB                           tbl_lvl_ball_startpos:
0D9DB                           ifdef TESTING
0D9DB                               .db #$29
0D9DB                           endif
0D9DB 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D9E0 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D9E5 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D9EA 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D9EF 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D9F4                           
0D9F4                               
0D9F4                           ;; Ball start direction, color and tile score
0D9F4                           ;; #% ccc v tttt
0D9F4                           ;;    ||| | ++++-- tile score
0D9F4                           ;;    ||| +------- vertical direction, up (0) or down
0D9F4                           ;;    +++--------- color (CBRYGM)
0D9F4                           tbl_lvl_ball_init:
0D9F4                           ifdef TESTING
0D9F4                               .db #%00100000
0D9F4                           endif
0D9F4 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D9F9 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D9FE 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0DA03 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0DA08 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0DA0D                           
0DA0D                           
0DA0D                           
0DA0D                           ;; Helper table to multiply values by 16
0DA0D                           tbl_Times16:
0DA0D 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0DA15 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0DA1D                               
0DA1D                           
0DA1D                           ;; Helper table to multiply values by 64
0DA1D                           tbl_Times64:
0DA1D 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0DA21                           
0DA21                           
0DA21                           ;; Metatile ID to CHR data mapper
0DA21                           tbl_GametileTopLeft:
0DA21 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0DA2B                           
0DA2B                           tbl_GametileTopRight:
0DA2B 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0DA35                           
0DA35                           tbl_GametileBottomLeft:
0DA35 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0DA3F                           
0DA3F                           tbl_GametileBottomRight:
0DA3F 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DA49                           
0DA49                           ;; Metatile ID to RAM byte data mapper
0DA49                           tbl_GameTileRamByte:
0DA49 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DA4E                           
0DA4E                           ;; HUD text data (with opaque background tile for sprite zero)
0DA4E                           tbl_HudText:
0DA4E 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DA56 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DA5D 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DA65 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DA6C                           
0DA6C                           ;; Move block top left tile based on color
0DA6C                           tbl_MoveBlockTopLeftTile:
0DA6C 42 4A 42 4A 42 4A 42          .db #$42, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DA73                           
0DA73                           ;; Game over data
0DA73                           tbl_GameOver:
0DA73 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DA77 00 00                         .db #_SPACE, #_SPACE
0DA79 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DA7D                           
0DA7D                           ;; Background fade pallette table
0DA7D                           tbl_BackgroundFade:
0DA7D 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DA87                           
0DA87                           ;; Sound effects
0DA87                           .include "game/include/table/sfx.asm"
0DA87                           ;;
0DA87                           ;; Explosion sound effects
0DA87                           ;;
0DA87                           ;;   #% ffff vvvv
0DA87                           ;;      |||| ++++---- volume (0=low, 15=high)
0DA87                           ;;      ++++-------- frequency (0=low, 15=high)
0DA87                           ;;
0DA87                           ;; #$FF = end of sfx
0DA87                           ;;
0DA87                           
0DA87                           tbl_ExplosionSfx:
0DA87 00                            .db #$00 ; buffer byte
0DA88 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DA90 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DA98 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DAA0 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DAA8 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DAB0 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DAB5                           
0DAB5                           tbl_ThudSfx:
0DAB5 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DAB6 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DABE E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DAC3                           
0DAC3                           tbl_BounceSfx:
0DAC3 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DAC4 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DAC8                           
0DAC8 00                            .db #$00
0DAC9                           
0DAC9                           tbl_Sfx_hi:
0DAC9 DA DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DACC                           
0DACC                           tbl_Sfx_lo:
0DACC 87 B5 C3                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DACF                           
0DACF                           
0DACF                           ;; Volume envelope for move sound effect (reversed)
0DACF                           tbl_MoveSfxVolume:
0DACF 70 70 72 73 7B 7C 7B 7B       .db #$70, #$70, #$72, #$73, #$7B, #$7C, #$7B, #$7B
0DAD7 79 79 78 77 76 76 75 75       .db #$79, #$79, #$78, #$77, #$76, #$76, #$75, #$75
0DADF 74 74 73 73 73 73 72 71       .db #$74, #$74, #$73, #$73, #$73, #$73, #$72, #$71
0DAE7                           
0DAE7                           ;; Volume and frequency table for paint sound effect (reversed)
0DAE7 00                        tbl_PaintSfxVolume: .db #$00
0DAE8 B0 B1 B2 B3 B2 B4 B6 B3       .db #$B0, #$B1, #$B2, #$B3, #$B2, #$B4, #$B6, #$B3
0DAF0 B6 B9 B5 B9 B5 B9 B5 B9       .db #$B6, #$B9, #$B5, #$B9, #$B5, #$B9, #$B5, #$B9
0DAF8 00                        tbl_PaintSfxFreqHi: .db #$00
0DAF9 08 08 08 08 08 08 08 08       .db #$08, #$08, #$08, #$08, #$08, #$08, #$08, #$08
0DB01 08 09 08 09 09 09 09 09       .db #$08, #$09, #$08, #$09, #$09, #$09, #$09, #$09
0DB09 00                        tbl_PaintSfxFreqLo: .db #$00
0DB0A 68 90 B8 E0 A4 CC F4 BC       .db #$68, #$90, #$B8, #$E0, #$A4, #$CC, #$F4, #$BC
0DB12 E4 0C F6 32 1A 56 44 80       .db #$E4, #$0C, #$F6, #$32, #$1A, #$56, #$44, #$800DB1A                           
0DB1A                           ;; Lookup table to convert bonus ticks to score
0DB1A                           tbl_BonusToScore:
0DB1A 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DB24                           
0DB24                           
0DB24                           ;; NMI handler
0DB24                           NMI:
0DB24                               .include "interrupt/nmi.asm"
0DB24                           
0DB24                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DB24                           ;;
0DB24                           ;; include/nmi.asm
0DB24                           ;;
0DB24                           ;; Non-maskable interrupt script. This script is being executed
0DB24                           ;; when vBlank hits.
0DB24                           ;;
0DB24                           ;;
0DB24                           
0DB24                               ;; Preserve accumulator through stack
0DB24 48                            PHA
0DB25                           
0DB25                               ;; Should NMI be skipped?
0DB25 A5 13                         LDA skip_nmi
0DB27 F0 03                         BEQ +
0DB29 4C 00 DD                          JMP +skip_nmi
0DB2C                               +
0DB2C                           
0DB2C                               ;; When in NMI, skip additional NMI requests
0DB2C A9 01                         LDA #$01
0DB2E 85 13                         STA skip_nmi
0DB30                           
0DB30                               ;; Preserve X, Y, and PC through stack
0DB30 8A                            TXA
0DB31 48                            PHA
0DB32 98                            TYA
0DB33 48                            PHA
0DB34 08                            PHP
0DB35                               
0DB35                               ;; Check forced NMI skip
0DB35 A5 14                         LDA force_skip_nmi
0DB37 F0 03                         BEQ +
0DB39 4C EF DC                          JMP +force_skip_nmi
0DB3C                               +
0DB3C                           
0DB3C                               ;; Update PPU mask
0DB3C                               ;LDA #$00
0DB3C                               ;STA PPU_CTRL
0DB3C A5 12                         LDA soft_ppu_mask
0DB3E 8D 01 20                      STA PPU_MASK
0DB41                               
0DB41                               
0DB41                               ;; Additional PPU updates go here
0DB41                               .include "game/interrupt/nmi.asm"
0DB41                           
0DB41                               ;; Check if ppu_buffer needs updating
0DB41 A5 39                         LDA ppu_buffer_update
0DB43 D0 03                         BNE +
0DB45 4C 87 DB                          JMP +no_ppu_buffer_update
0DB48                               +
0DB48                           
0DB48                               ;; Reset ppu control register and mask
0DB48 A2 00                         LDX #$00
0DB4A 8E 00 20                      STX PPU_CTRL
0DB4D 8E 01 20                      STX PPU_MASK
0DB50                           
0DB50                               ;; Set up loop
0DB50                               -
0DB50                                   ;; Reset hi/lo latch
0DB50 2C 02 20                          BIT PPU_STATUS
0DB53                           
0DB53                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DB53 BD 00 03                          LDA ppu_buffer,x
0DB56 8D 06 20                          STA PPU_ADDR
0DB59 E8                                INX
0DB5A BD 00 03                          LDA ppu_buffer,x
0DB5D 8D 06 20                          STA PPU_ADDR
0DB60                           
0DB60                                   ;; Write ppu_buffer data to PPU_ADDR
0DB60 E8                                INX
0DB61 BD 00 03                          LDA ppu_buffer,x
0DB64 8D 07 20                          STA PPU_DATA
0DB67                           
0DB67                                   ;; Check if updating is done (eg. X is at pointer)
0DB67 E8                                INX
0DB68 E4 3A                             CPX ppu_buffer_pointer
0DB6A F0 03                             BEQ +
0DB6C 4C 50 DB                      JMP -
0DB6F                           +
0DB6F                           
0DB6F                               ;; Reset ppu buffer update and pointer
0DB6F A9 00                         LDA #$00
0DB71 85 39                         STA ppu_buffer_update
0DB73 85 3A                         STA ppu_buffer_pointer
0DB75                               
0DB75                               ;; Reset scrolling position
0DB75 8D 05 20                      STA PPU_SCROLL
0DB78 8D 05 20                      STA PPU_SCROLL
0DB7B                           
0DB7B                               ;; Restore ppu control register and mask
0DB7B A9 90                         LDA #%10010000
0DB7D 8D 00 20                      STA PPU_CTRL
0DB80 A5 12                         LDA soft_ppu_mask
0DB82 8D 01 20                      STA PPU_MASK
0DB85 A9 00                         LDA #$00
0DB87                           
0DB87                           ;; Continue other NMI stuff
0DB87                           +no_ppu_buffer_update:
0DB87                           
0DB87                               ;; Reset sprite RAM, draw sprites
0DB87 8D 03 20                      STA OAM_ADDR
0DB8A A9 02                         LDA #$02
0DB8C 8D 14 40                      STA OAM_DMA
0DB8F                           
0DB8F                               ;; Decrease explosion and move block timers
0DB8F A0 04                         LDY #MAX_ANIMATIONS
0DB91 A2 00                         LDX #$00
0DB93                               -
0DB93 BD 60 03                          LDA explosion_timer,x
0DB96 F0 03                             BEQ +
0DB98 DE 60 03                              DEC explosion_timer,x
0DB9B                                   +
0DB9B                           
0DB9B BD 80 03                          LDA move_block_timer,x
0DB9E F0 03                             BEQ +
0DBA0 DE 80 03                              DEC move_block_timer,x
0DBA3                                   +
0DBA3                                   
0DBA3 E8                                INX
0DBA4 88                                DEY
0DBA5 F0 03                             BEQ +done
0DBA7 4C 93 DB                      JMP -
0DBAA                           +done:
0DBAA                           
0DBAA                               ;; Decrease nudge timer
0DBAA A5 3E                         LDA nudge_timer
0DBAC F0 02                         BEQ +
0DBAE C6 3E                             DEC nudge_timer
0DBB0                               +
0DBB0                           
0DBB0                               ;; Decrease bonus timer
0DBB0 A5 3F                         LDA bonus_timer
0DBB2 F0 02                         BEQ +
0DBB4 C6 3F                             DEC bonus_timer
0DBB6                               +
0DBB6                           
0DBB6                               ;; Decrease kill timer
0DBB6 A5 40                         LDA kill_timer
0DBB8 F0 02                         BEQ +
0DBBA C6 40                             DEC kill_timer
0DBBC                               +
0DBBC                               
0DBBC                               ;; Decrease and handle unfreeze timer
0DBBC A5 41                         LDA unfreeze_timer
0DBBE F0 0A                         BEQ +
0DBC0 C6 41                             DEC unfreeze_timer
0DBC2 D0 06                             BNE +
0DBC4                                   
0DBC4 A5 37                             LDA ball_flags
0DBC6 29 FB                             AND #UNFREEZE_BALL
0DBC8 85 37                             STA ball_flags
0DBCA                               +
0DBCA                           
0DBCA                               ;; Play background noise
0DBCA A5 38                         LDA screen_mode
0DBCC 29 01                         AND #IS_GAME_SCREEN
0DBCE F0 0C                         BEQ +
0DBD0                                   .include "game/include/main/background_sound.asm"
0DBD0                           
0DBD0                               ;; If noise is muted, no noise should play
0DBD0 A5 4B                         LDA noise_muted
0DBD2 F0 08                         BEQ +
0DBD4 A9 30                             LDA #$30
0DBD6 8D 0C 40                          STA NOISE_VOLUME
0DBD9 4C 41 DC                          JMP +endNoise
0DBDC                               +
0DBDC                               
0DBDC                               ;; At random times, set max_noise period to $03-$0A
0DBDC A5 45                         LDA max_noise
0DBDE D0 1D                         BNE +
0DBE0 20 2F C5                          JSR sub_GetRandomNumber
0DBE3 29 EF                             AND #%11101111
0DBE5 D0 16                             BNE +
0DBE7                                   
0DBE7 A5 15                             LDA frame_counter
0DBE9 85 16                             STA random_seed
0DBEB 20 2F C5                          JSR sub_GetRandomNumber
0DBEE 29 07                             AND #$07
0DBF0 69 03                             ADC #$03
0DBF2 85 45                             STA max_noise
0DBF4 A9 01                             LDA #$01
0DBF6 85 46                             STA sweep_noise
0DBF8 A9 34                             LDA #$34
0DBFA 8D 0C 40                          STA NOISE_VOLUME
0DBFD                               +
0DBFD                           
0DBFD                               ;; if sweep noise = $00: constant noise
0DBFD                               ;; else if sweep noise > $80: decrease pitch
0DBFD                               ;; else: increase pitch
0DBFD A5 46                         LDA sweep_noise
0DBFF F0 18                         BEQ +constantNoise
0DC01 30 2A                         BMI +decreaseNoise
0DC03                           
0DC03                           ;; Sweep noise up to max noise pitch
0DC03                           +increaseNoise:
0DC03 C6 47                         DEC current_noise
0DC05 A5 47                         LDA current_noise
0DC07 8D 0E 40                      STA NOISE_PERIOD
0DC0A C5 45                         CMP max_noise
0DC0C D0 08                         BNE +
0DC0E A9 00                             LDA #$00
0DC10 85 46                             STA sweep_noise
0DC12 A9 0A                             LDA #$0A
0DC14 85 48                             STA noise_timer
0DC16                               +
0DC16 4C 41 DC                      JMP +endNoise
0DC19                           
0DC19                           ;; Keep noise at constant pitch
0DC19                           +constantNoise:
0DC19 A5 45                         LDA max_noise
0DC1B F0 24                         BEQ +endNoise
0DC1D                           
0DC1D A5 48                         LDA noise_timer
0DC1F D0 07                         BNE +
0DC21 A9 80                             LDA #$80
0DC23 85 46                             STA sweep_noise
0DC25 4C 41 DC                          JMP +endNoise
0DC28                               +
0DC28 C6 48                         DEC noise_timer
0DC2A 4C 41 DC                      JMP +endNoise
0DC2D                           
0DC2D                           ;; Sweep noise down to initial pitch
0DC2D                           +decreaseNoise:
0DC2D E6 47                         INC current_noise
0DC2F A5 47                         LDA current_noise
0DC31 8D 0E 40                      STA NOISE_PERIOD
0DC34 C9 0E                         CMP #$0E
0DC36 D0 09                         BNE +endNoise
0DC38                           
0DC38 20 BF C5                      JSR sub_BackgroundNoise
0DC3B A9 00                         LDA #$00
0DC3D 85 45                         STA max_noise
0DC3F 85 46                         STA sweep_noise
0DC41                           
0DC41                           +endNoise:
0DC41                           
0DC41                               +
0DC41                           
0DC41                               ;; Play bonus to score bleeps
0DC41                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DC41                           
0DC41                           ;; Random bleepy noises
0DC41                           
0DC41 A5 49                         LDA do_beeps
0DC43 F0 2E                         BEQ +continue
0DC45                               
0DC45 C9 02                         CMP #$02
0DC47 D0 12                         BNE +beep
0DC49                              
0DC49                           +stopBeep:
0DC49 A9 00                         LDA #$00
0DC4B 85 49                         STA do_beeps
0DC4D A9 08                         LDA #$08
0DC4F 8D 15 40                      STA APU_STATUS
0DC52 8D 0F 40                      STA NOISE_LENGTH
0DC55 20 BF C5                      JSR sub_BackgroundNoise
0DC58 4C 73 DC                      JMP +continue
0DC5B                               
0DC5B                           +beep:
0DC5B A9 01                         LDA #$01
0DC5D 8D 15 40                      STA APU_STATUS
0DC60 A5 4A                         LDA soft_pulse1
0DC62 8D 00 40                      STA PULSE1_VOLUME
0DC65 20 2F C5                      JSR sub_GetRandomNumber
0DC68 8D 02 40                      STA PULSE1_TIMER_LO
0DC6B 20 2F C5                      JSR sub_GetRandomNumber
0DC6E 29 01                         AND #$01
0DC70 8D 03 40                      STA PULSE1_TIMER_HI
0DC73                           
0DC73                           +continue:
0DC73                           
0DC73                               
0DC73                               ;; Play sound effect
0DC73                               .include "game/include/main/nmi_sfx.asm"
0DC73                           
0DC73                               ;; Get current explosion sfx frame; if not set, skip this
0DC73 A4 4E                         LDY sfx_timer
0DC75 F0 1F                         BEQ +done
0DC77                               
0DC77                                   ;; Check if explosion sfx is done; if so, disable and skip
0DC77 B1 4C                             LDA (sfx_address),y
0DC79 D0 07                             BNE +
0DC7B A9 00                                 LDA #$00
0DC7D 85 4E                                 STA sfx_timer
0DC7F 4C 96 DC                              JMP +done
0DC82                                   +
0DC82                                   
0DC82                                   ;; Set low nibble as volume
0DC82 29 0F                             AND #$0F
0DC84 09 30                             ORA #$30
0DC86 8D 0C 40                          STA NOISE_VOLUME
0DC89                                   
0DC89                                   ;; Set high nibble as frequency
0DC89 B1 4C                             LDA (sfx_address),y
0DC8B 4A                                LSR
0DC8C 4A                                LSR
0DC8D 4A                                LSR
0DC8E 4A                                LSR
0DC8F 49 0F                             EOR #$0F
0DC91 8D 0E 40                          STA NOISE_PERIOD
0DC94                                   
0DC94                                   ;; Next frame
0DC94 E6 4E                             INC sfx_timer
0DC96                               +done:
0DC96                           
0DC96                           
0DC96                               ;; Check move sfx
0DC96 A4 4F                         LDY sfx_timer+1
0DC98 F0 34                         BEQ +done
0DC9A                           
0DC9A C6 4F                             DEC sfx_timer+1
0DC9C C0 18                             CPY #$18
0DC9E D0 0D                             BNE +
0DCA0                                       ;; Update APU status
0DCA0 A9 09                                 LDA #$09
0DCA2 8D 15 40                              STA APU_STATUS
0DCA5 A9 8B                                 LDA #$8B
0DCA7 85 51                                 STA sfx_frequency
0DCA9 A9 0A                                 LDA #$0A
0DCAB 85 52                                 STA sfx_frequency+1
0DCAD                                   +
0DCAD                                   
0DCAD                                   ;; Set volume
0DCAD B9 CF DA                          LDA tbl_MoveSfxVolume,y
0DCB0 8D 00 40                          STA PULSE1_VOLUME
0DCB3                                   
0DCB3 84 00                             STY temp
0DCB5 A9 18                             LDA #$18
0DCB7 38                                SEC
0DCB8 E5 00                             SBC temp
0DCBA 4A                                LSR
0DCBB 18                                CLC
0DCBC 69 03                             ADC #$03
0DCBE 65 51                             ADC sfx_frequency
0DCC0 85 51                             STA sfx_frequency
0DCC2 8D 02 40                          STA PULSE1_TIMER_LO
0DCC5 A5 52                             LDA sfx_frequency+1
0DCC7 69 00                             ADC #$00
0DCC9 85 52                             STA sfx_frequency+1
0DCCB 8D 03 40                          STA PULSE1_TIMER_HI
0DCCE                               +done:
0DCCE                           
0DCCE                           
0DCCE                               ;; Check paint sfx
0DCCE A4 50                         LDY sfx_timer+2
0DCD0 F0 1D                         BEQ +done
0DCD2                           
0DCD2 C6 50                             DEC sfx_timer+2
0DCD4 C0 10                             CPY #$10
0DCD6 D0 05                             BNE +
0DCD8                                       ;; Update APU status
0DCD8 A9 09                                 LDA #$09
0DCDA 8D 15 40                              STA APU_STATUS
0DCDD                                   +
0DCDD                                   
0DCDD                                   ;; Set volume
0DCDD B9 E7 DA                          LDA tbl_PaintSfxVolume,y
0DCE0 8D 00 40                          STA PULSE1_VOLUME
0DCE3 B9 09 DB                          LDA tbl_PaintSfxFreqLo,y
0DCE6 8D 02 40                          STA PULSE1_TIMER_LO
0DCE9 B9 F8 DA                          LDA tbl_PaintSfxFreqHi,y
0DCEC 8D 03 40                          STA PULSE1_TIMER_HI
0DCEF                               +done:
0DCEF                               
0DCEF                           
0DCEF                           ;; This is what happens when we forced nmi skip
0DCEF                           +force_skip_nmi:
0DCEF                           
0DCEF                               ;; Increase frame timers
0DCEF E6 15                         INC frame_counter
0DCF1                           
0DCF1                               ;; reset sprites_update_position
0DCF1 A9 00                         LDA #$00
0DCF3 85 35                         STA sprites_update_position
0DCF5                           
0DCF5                               ;; Don't skip next NMI request
0DCF5 A9 00                         LDA #$00
0DCF7 85 13                         STA skip_nmi
0DCF9 85 53                         STA check_nmi
0DCFB                           
0DCFB                               ;; Restore X, Y and PC from stack
0DCFB 28                            PLP
0DCFC 68                            PLA
0DCFD A8                            TAY
0DCFE 68                            PLA
0DCFF AA                            TAX
0DD00                           
0DD00                           +skip_nmi:
0DD00                               ;; Restore accumulator from stack
0DD00 68                            PLA
0DD01                           
0DD01                               ;; Return
0DD01 40                            RTI
0DD02                           
0DD02                           
0DD02                           ;; IRQ handler (empty)
0DD02                           IRQ:
0DD02                               .include "interrupt/irq.asm"
0DD02                           
0DD02 40                            RTI
0DD03                           
0DD03                           
0DD03                           ;; Interrupt vectors
0DD03 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 24 DB                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 02 DD                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
