	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; Enable test mode
	                            ;; - Test mode adds a test level and allows the developer to start
	                            ;;   at any given level with any number of lives. Remove the line
	                            ;;   that starts with TESTING (or add a semicolon in front) to
	                            ;;   disable test mode.
	                            TESTING     =   1
	                            START_LEVEL =   0
	                            START_LIVES = 255
	                            
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Sentience (warm boot) check string
00000                               sentience       .dsb 5
00005                               
00005                               ;; High score variables (declared up high, so basic reset
00005                               ;; can skip over those)
00005                               hi_score        .dsb 6
0000B                               
0000B                               ;; Reserve ten temporary variables for use in subroutines.
0000B                               temp              .dsb 10
00015                           
00015                               ;; Reserve a two-byte temporary variable for use with
00015                               ;; 16-bit operations (like addresses)
00015                               temp16            .dsb 2
00017                           
00017                               ;; Two-byte variable to store a pointer address
00017                               pointer           .dsb 2
00019                           
00019                               ;; Variable to store button presses
00019                               buttons_prev      .dsb 1
0001A                               buttons_held      .dsb 1
0001B                               buttons_pressed   .dsb 1
0001C                               buttons_released  .dsb 1
0001D                           
0001D                               ;; PPU mask buffer variable, used to store the new value of
0001D                               ;; the PPU mask outside NMI
0001D                               soft_ppu_mask     .dsb 1
0001E                           
0001E                               ;; Variables to skip NMI handling
0001E                               skip_nmi          .dsb 1
0001F                               force_skip_nmi    .dsb 1
00020                           
00020                               ;; Counters and seeds
00020                               frame_counter     .dsb 1
00021                               random_seed       .dsb 1
00022                           
00022                               ;; Game specific variables
00022                               .include "game/ram/zp.asm"
00022                           
00022                           ;; Ball variables
00022                           ball_xpos_hi           .dsb 1
00023                           ball_xpos_lo           .dsb 1
00024                           ball_ypos_hi           .dsb 1
00025                           ball_ypos_lo           .dsb 1
00026                           ball_ypos_hi_prev      .dsb 1
00027                           ball_ypos_lo_prev      .dsb 1
00028                           ball_xpos_hi_prev      .dsb 1
00029                           ball_xpos_lo_prev      .dsb 1
0002A                           ball_lives             .dsb 1   ; number of lives left
0002B                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00031                           add_to_score           .dsb 6
00037                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0003A                           
0003A                           ;; Ball bounding box, relative to the screen
0003A                           ball_left              .dsb 1
0003B                           ball_center            .dsb 1
0003C                           ball_right             .dsb 1
0003D                           ball_top               .dsb 1
0003E                           ball_middle            .dsb 1
0003F                           ball_bottom            .dsb 1
00040                           
00040                           ;; Update-position check
00040                           sprites_update_position  .dsb 1
00041                           
00041                           ;; Lock block space helper variable
00041                           ;; When the ball hits a lock block, it should only move if the space
00041                           ;; where it moves to, is not solid. This variable holds the metatile
00041                           ;; offset of the position where the lock block should move to, so
00041                           ;; we can check if it is solid or not.
00041                           ;;
00041                           ;; UP:    #%11110000 #$F0
00041                           ;; DOWN:  #%00010000 #$10
00041                           ;; LEFT:  #%11111111 #$FF
00041                           ;; RIGHT: #%00000001 #$01
00041                           ;;        #%d......h
00041                           move_block_space_to_check  .dsb 1
00042                           
00042                           
00042                           ;; Ball flags
00042                           ;; #% c c c v . f n a
00042                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00042                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00042                           ;;    | | | | | +------ ball is frozen (not moving)
00042                           ;;    | | | | +-------- (unused for now)
00042                           ;;    | | | +---------- ball moves up (0) or down (1)
00042                           ;;    +-+-+------------ ball color (1-6)
00042                           ball_flags             .dsb 1
00043                           
00043                           
00043                           ;; Screen mode
00043                           ;; #% u . . . . . t t
00043                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00043                           ;;    | +-+-+-+-+------------- unused
00043                           ;;    +----------------------- should the screen update
00043                           screen_mode            .dsb 1
00044                           
00044                           
00044                           
00044                           ;; PPU buffer variables
00044                           ppu_buffer_update      .dsb 1
00045                           ppu_buffer_pointer     .dsb 1
00046                           
00046                           ;; Pointer to keep track of the number of explosions
00046                           explosion_pointer      .dsb 1
00047                           
00047                           ;; Pointer to keep track of the number of move blocks
00047                           move_block_pointer     .dsb 1
00048                           
00048                           ;; Sprite RAM pointer to keep track of sprites to update
00048                           sprite_ram_pointer     .dsb 1
00049                           
00049                           ;; Timers 
00049                           nudge_timer            .dsb 1
0004A                           bonus_timer            .dsb 1
0004B                           kill_timer             .dsb 1
0004C                           unfreeze_timer         .dsb 1
0004D                           
0004D                           ;; Current level (doubles as level select variable)
0004D                           current_level          .dsb 1
0004E                           
0004E                           ;; Tile type the ball is currently colliding with
0004E                           colliding_tile         .dsb 1
0004F                           
0004F                           ;; Number of blocks left on screen
0004F                           blocks_left            .dsb 1
00050                           
00050                           ;; Sound control variables
00050                           max_noise              .dsb 1
00051                           sweep_noise            .dsb 1
00052                           current_noise          .dsb 1
00053                           noise_timer            .dsb 1
00054                           do_beeps               .dsb 1
00055                           soft_pulse1            .dsb 1
00056                           noise_muted            .dsb 1
00057                           
00057                           ;; Sound effect variables
00057                           sfx_address            .dsb 2
00059                           sfx_timer              .dsb 3
0005C                           sfx_frequency          .dsb 2
0005E                           sfx_sweep_count        .dsb 1
0005F                           sfx_sweep_volume       .dsb 1
00060                           sfx_sweep_next_volume  .dsb 1
00061                           sfx_sweep_frequency    .dsb 1
00062                           
00062                           ;; Additional NMI check for timed PPU fade
00062                           check_nmi              .dsb 1
00063                           
00063                           ;; The TV system this game is running on (0=ntsc, 1=pal, 2=dendy, 3=unknown)
00063                           tv_system              .dsb 1
00064                           
00064                           ;; This variable should be used for absolutely nothing
00064                           void                   .dsb 1
00065                           
00065                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 DA C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022                                   ;; Skip first eleven bytes
0C022                                   ;; (cold boot check and high score)
0C022 A9 00                             LDA #$00
0C024 E0 0B                             CPX #$0B
0C026 90 02                             BCC +
0C028 95 00                                 STA ADDR_ZEROPAGE,x
0C02A                                   +
0C02A 9D 00 01                          STA $0100,x
0C02D 9D 00 03                          STA $0300,x
0C030 9D 00 04                          STA $0400,x
0C033 9D 00 05                          STA $0500,x
0C036 9D 00 06                          STA $0600,x
0C039 9D 00 07                          STA $0700,x
0C03C                           
0C03C                                   ;; Clear next in line
0C03C E8                                INX
0C03D D0 DE                         BNE -clrMem
0C03F                           
0C03F                               ;; Wait for vBlank
0C03F 20 DA C5                      JSR sub_WaitForVBlank
0C042                           
0C042                           	;; Turn on NMI, set foreground $0000, background $1000
0C042 A9 90                         LDA #%10010000
0C044 8D 00 20                      STA PPU_CTRL
0C047                               
0C047                               ;; Reset PPU scroll pointer
0C047 A0 00                         LDY #0
0C049 8C 05 20                      STY $2005
0C04C 8C 05 20                      STY $2005
0C04F                               
0C04F                               ;; Initialize game
0C04F                               .include "game/interrupt/reset.asm"
0C04F                           
0C04F                           ;; Softer reset
0C04F                           ;; After game over, the game JMPs here to prevent
0C04F                           ;; resetting the high score
0C04F                           
0C04F                           lbl_SoftReset:
0C04F                           
0C04F                               ;; Check for cold or warm boot, by comparing
0C04F                               ;; the 6-byte RAM and ROM sentience string.
0C04F A2 00                         LDX #$00
0C051 A0 00                         LDY #$00
0C053                               -
0C053 BD F6 DB                          LDA tbl_Sentient,x
0C056 D5 00                             CMP sentience,x
0C058 F0 01                             BEQ +
0C05A C8                                    INY
0C05B                                   +
0C05B 95 00                             STA sentience,x
0C05D E8                                INX
0C05E E0 05                             CPX #$05
0C060 D0 F1                         BNE -
0C062                           
0C062                               ;; If system is sentient (warm boot), Y is zero now.
0C062 C0 00                         CPY #$00
0C064 F0 10                         BEQ +
0C066                           
0C066                                   ;; System not sentient (cold boot)
0C066                                   ;; Set default hi score to 50.000
0C066 A9 05                             LDA #$05
0C068 85 06                             STA hi_score+1
0C06A A9 00                             LDA #$00
0C06C 85 05                             STA hi_score
0C06E 85 07                             STA hi_score+2
0C070 85 08                             STA hi_score+3
0C072 85 09                             STA hi_score+4
0C074 85 0A                             STA hi_score+5
0C076                               +
0C076                           
0C076                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C076                           ;;
0C076                           ;;  NES TV system detection code
0C076                           ;;  Copyright 2011 Damian Yerrick
0C076                           ;;  https://www.nesdev.org/wiki/Detect_TV_system
0C076                           ;;
0C076 A2 00                         LDX #$00
0C078 A0 00                         LDY #$00
0C07A A9 01                         LDA #$01
0C07C 85 62                         STA check_nmi
0C07E                               -
0C07E C5 62                             CMP check_nmi
0C080 F0 FC                         BEQ -
0C082 A9 01                         LDA #$01
0C084 85 62                         STA check_nmi
0C086                               -
0C086 E8                                INX
0C087 D0 01                             BNE +
0C089 C8                                    INY
0C08A C5 62                             + CMP check_nmi
0C08C F0 F8                         BEQ -
0C08E 98                            TYA
0C08F 38                            SEC
0C090 E9 0A                         SBC #$0A
0C092 C9 03                         CMP #$03
0C094 90 02                         BCC +
0C096 A9 03                             LDA #$03
0C098 85 63                         + STA tv_system ; 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C09A                           ;;
0C09A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C09A                           
0C09A                           
0C09A                               ;; Tell game to load the intro screen
0C09A A9 80                         LDA #LOAD_INTRO_SCREEN
0C09C 85 43                         STA screen_mode
0C09E                           
0C09E                               ;; Set number of lives (5)
0C09E A9 05                         LDA #$05
0C0A0 85 2A                         STA ball_lives
0C0A2                           
0C0A2                               ;; Start at level 1
0C0A2 A9 00                         LDA #$00
0C0A4 85 2B                         STA ball_score
0C0A6 85 2C                         STA ball_score+1
0C0A8 85 2D                         STA ball_score+2
0C0AA 85 2E                         STA ball_score+3
0C0AC 85 2F                         STA ball_score+4
0C0AE 85 30                         STA ball_score+5
0C0B0                           
0C0B0                           ifdef TESTING
0C0B0 A9 FF                         LDA #START_LIVES
0C0B2 85 2A                         STA ball_lives
0C0B4 A9 00                         LDA #START_LEVEL
0C0B6                           endif
0C0B6                           
0C0B6 85 4D                         STA current_level
0C0B8                           
0C0B8                           
0C0B8                           
0C0B8                           ;; Main game loop
0C0B8                           lbl_MainGameLoop:
0C0B8 20 D1 C5                      JSR sub_WaitForNMI ; align main loop
0C0BB                               .include "game/main.asm"
0C0BB                           
0C0BB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C0BB                           ;;
0C0BB                           ;; game/main.asm
0C0BB                           ;;
0C0BB                           ;; The main game loop content.
0C0BB                           ;;
0C0BB                           ;;
0C0BB                           
0C0BB                               ;; Reset sprite pointer every game loop
0C0BB A9 00                         LDA #$00
0C0BD 85 48                         STA sprite_ram_pointer
0C0BF                           
0C0BF                               ;; Store previous buttons
0C0BF A5 1A                         LDA buttons_held
0C0C1 85 19                         STA buttons_prev
0C0C3                           
0C0C3                               ;; Read controller input
0C0C3 20 BD C5                      JSR sub_ReadController
0C0C6                           
0C0C6                               ;; Get buttons released
0C0C6 A5 1A                         LDA buttons_held
0C0C8 49 FF                         EOR #$FF
0C0CA 25 19                         AND buttons_prev
0C0CC 85 1C                         STA buttons_released
0C0CE                           
0C0CE                               ;; Set buttons pressed
0C0CE A5 19                         LDA buttons_prev
0C0D0 49 FF                         EOR #$FF
0C0D2 25 1A                         AND buttons_held
0C0D4 85 1B                         STA buttons_pressed
0C0D6                           
0C0D6                               ;; Load screen?
0C0D6 A5 43                         LDA screen_mode
0C0D8 29 80                         AND #%10000000
0C0DA F0 1E                         BEQ +screenLoaded
0C0DC                           
0C0DC                               ;; Get screen type to load
0C0DC A5 43                         LDA screen_mode
0C0DE 29 03                         AND #%00000011
0C0E0 A8                            TAY
0C0E1                               
0C0E1                               ;; Get address to load screen type from
0C0E1 B9 75 D3                      LDA tbl_LoadScreenLo,y
0C0E4 85 17                         STA pointer
0C0E6 B9 72 D3                      LDA tbl_LoadScreenHi,y
0C0E9 85 18                         STA pointer+1
0C0EB                           
0C0EB                               ;; Load screen
0C0EB 20 76 C7                      JSR sub_DisableRendering
0C0EE 20 CB CA                      JSR sub_JumpToPointer
0C0F1 20 8A C7                      JSR sub_EnableRendering
0C0F4                               
0C0F4                               ;; Don't load screen anymore next loop
0C0F4 A5 43                         LDA screen_mode
0C0F6 29 7F                         AND #%01111111
0C0F8 85 43                         STA screen_mode
0C0FA                               
0C0FA                           
0C0FA                           +screenLoaded:
0C0FA                               ;; Check if we're on the game screen
0C0FA A5 43                         LDA screen_mode
0C0FC C9 01                         CMP #IS_GAME_SCREEN
0C0FE F0 03                         BEQ +
0C100 4C A3 C3                          JMP +checkNextScreen
0C103                               +
0C103                           
0C103                               ;; Load sprite 0 in place
0C103 A9 18                         LDA #$18
0C105 8D 00 02                      STA ADDR_SPRITERAM
0C108 A9 0F                         LDA #$0F
0C10A 8D 01 02                      STA ADDR_SPRITERAM+1
0C10D A9 22                         LDA #$22
0C10F 8D 02 02                      STA ADDR_SPRITERAM+2
0C112 A9 F8                         LDA #$F8
0C114 8D 03 02                      STA ADDR_SPRITERAM+3
0C117 A9 04                         LDA #$04
0C119 85 48                         STA sprite_ram_pointer
0C11B                           
0C11B                               ;; We're on the game screen
0C11B                               ;; Check if position should be updated (ie. has nmi happened yet)
0C11B A5 40                         LDA sprites_update_position
0C11D F0 03                         BEQ +
0C11F 4C 09 C3                          JMP +skipSpriteMovement
0C122                               +
0C122                           
0C122                               ;; Check if ball is frozen
0C122 A5 42                         LDA ball_flags
0C124 29 04                         AND #BALL_IS_FROZEN
0C126 F0 03                         BEQ +
0C128 4C C8 C2                          JMP +skipBallMovement
0C12B                               +
0C12B                           
0C12B                               ;; Move the ball
0C12B                               .include "game/include/main/move_ball.asm"
0C12B                           
0C12B                               ;; Check if ball goes up or down
0C12B A5 42                         LDA ball_flags
0C12D 29 10                         AND #BALL_MOVES_DOWN
0C12F F0 2B                         BEQ +moveBallUp
0C131                           
0C131                           
0C131                           +moveBallDown:
0C131                               ;; update the low byte
0C131 A5 25                         LDA ball_ypos_lo
0C133 85 27                         STA ball_ypos_lo_prev
0C135 18                            CLC
0C136 69 88                         ADC #BALL_SPEED_LO
0C138 85 25                         STA ball_ypos_lo
0C13A                           
0C13A                               ;; update the high byte with carry
0C13A A5 24                         LDA ball_ypos_hi
0C13C 85 26                         STA ball_ypos_hi_prev
0C13E 69 01                         ADC #BALL_SPEED_HI
0C140 85 24                         STA ball_ypos_hi
0C142                               
0C142                               ;; Check bottom bound
0C142 C9 C8                         CMP #BOUND_BOTTOM
0C144 90 3C                         BCC +checkHorizontalMovement
0C146 F0 3A                         BEQ +checkHorizontalMovement
0C148                           
0C148                           
0C148                               ;; Change ball direction to "up"
0C148 A9 C8                         LDA #BOUND_BOTTOM
0C14A 38                            SEC
0C14B E9 01                         SBC #$01
0C14D 85 24                         STA ball_ypos_hi
0C14F A9 00                         LDA #$00
0C151 85 25                         STA ball_ypos_lo
0C153 A5 42                         LDA ball_flags
0C155 29 EF                         AND #MOVE_BALL_UP
0C157 85 42                         STA ball_flags
0C159 4C 82 C1                      JMP +checkHorizontalMovement
0C15C                           
0C15C                           
0C15C                           +moveBallUp:
0C15C                               ;; update the low byte
0C15C A5 25                         LDA ball_ypos_lo
0C15E 85 27                         STA ball_ypos_lo_prev
0C160 38                            SEC
0C161 E9 88                         SBC #BALL_SPEED_LO
0C163 85 25                         STA ball_ypos_lo
0C165                           
0C165                               ;; update the high byte with carry
0C165 A5 24                         LDA ball_ypos_hi
0C167 85 26                         STA ball_ypos_hi_prev
0C169 E9 01                         SBC #BALL_SPEED_HI
0C16B 85 24                         STA ball_ypos_hi
0C16D                               
0C16D                               ;; Check top bound
0C16D C9 30                         CMP #BOUND_TOP
0C16F B0 11                         BCS +checkHorizontalMovement
0C171                           
0C171                               ;; Change ball direction to "down"
0C171 A9 30                         LDA #BOUND_TOP
0C173 18                            CLC
0C174 69 01                         ADC #$01
0C176 85 24                         STA ball_ypos_hi
0C178 A9 00                         LDA #$00
0C17A 85 25                         STA ball_ypos_lo
0C17C A5 42                         LDA ball_flags
0C17E 09 10                         ORA #MOVE_BALL_DOWN
0C180 85 42                         STA ball_flags
0C182                           
0C182                           
0C182                           +checkHorizontalMovement:
0C182                           
0C182                               ;; Check if ball is being nudged
0C182 A5 49                         LDA nudge_timer
0C184 D0 41                         BNE +doneBallMovement
0C186                           
0C186                               ;; Check if left button is held
0C186 A5 1A                         LDA buttons_held
0C188 29 02                         AND #BUTTON_LEFT
0C18A F0 1B                         BEQ +
0C18C                                   ;; update the low byte
0C18C A5 23                             LDA ball_xpos_lo
0C18E 38                                SEC
0C18F E9 88                             SBC #BALL_SPEED_LO
0C191 85 23                             STA ball_xpos_lo
0C193                           
0C193                                   ;; update the high byte
0C193 A5 22                             LDA ball_xpos_hi
0C195 E9 01                             SBC #BALL_SPEED_HI
0C197 85 22                             STA ball_xpos_hi
0C199                                   
0C199                                   ;; Check left bound
0C199 C9 10                             CMP #BOUND_LEFT
0C19B B0 2A                             BCS +doneBallMovement
0C19D                                   
0C19D                                   ;; Set flag to nudge right and set nudge timer
0C19D A5 42                             LDA ball_flags
0C19F 09 02                             ORA #NUDGE_BALL_RIGHT
0C1A1 20 C4 CA                          JSR sub_InitiateNudge
0C1A4                           
0C1A4 4C C7 C1                          JMP +doneBallMovement        
0C1A7                               +
0C1A7                           
0C1A7                               ;; Check if right button is held
0C1A7 A5 1A                         LDA buttons_held
0C1A9 29 01                         AND #BUTTON_RIGHT
0C1AB F0 1A                         BEQ +
0C1AD                                   ;; update the low byte
0C1AD A5 23                             LDA ball_xpos_lo
0C1AF 18                                CLC
0C1B0 69 88                             ADC #BALL_SPEED_LO
0C1B2 85 23                             STA ball_xpos_lo
0C1B4                           
0C1B4                                   ;; update the high byte
0C1B4 A5 22                             LDA ball_xpos_hi
0C1B6 69 01                             ADC #BALL_SPEED_HI
0C1B8 85 22                             STA ball_xpos_hi     
0C1BA                           
0C1BA                                  ;; Check right bound
0C1BA C9 E8                             CMP #BOUND_RIGHT
0C1BC 90 09                             BCC +doneBallMovement
0C1BE F0 07                             BEQ +doneBallMovement
0C1C0                                   
0C1C0                                   ;; Set flag to nudge left and set nudge timer
0C1C0 A5 42                             LDA ball_flags
0C1C2 29 FD                             AND #NUDGE_BALL_LEFT
0C1C4 20 C4 CA                          JSR sub_InitiateNudge
0C1C7                               +
0C1C7                           
0C1C7                           
0C1C7                           +doneBallMovement:
0C1C7                           
0C1C7                               ;; Check nudge
0C1C7 A5 49                         LDA nudge_timer
0C1C9 F0 23                         BEQ +doneBallNudging
0C1CB A5 42                             LDA ball_flags
0C1CD 29 02                             AND #NUDGE_BALL_RIGHT
0C1CF F0 10                             BEQ +nudgeBallLeft
0C1D1                                   
0C1D1                                       ;; update the low byte
0C1D1 A5 23                                 LDA ball_xpos_lo
0C1D3 18                                    CLC
0C1D4 69 88                                 ADC #BALL_SPEED_LO
0C1D6 85 23                                 STA ball_xpos_lo
0C1D8                           
0C1D8                                       ;; update the high byte
0C1D8 A5 22                                 LDA ball_xpos_hi
0C1DA 69 01                                 ADC #BALL_SPEED_HI
0C1DC 85 22                                 STA ball_xpos_hi  
0C1DE 4C EE C1                              JMP +doneBallNudging
0C1E1                                   +nudgeBallLeft:
0C1E1                                   
0C1E1                                   ;; update the low byte
0C1E1 A5 23                             LDA ball_xpos_lo
0C1E3 38                                SEC
0C1E4 E9 88                             SBC #BALL_SPEED_LO
0C1E6 85 23                             STA ball_xpos_lo
0C1E8                           
0C1E8                                   ;; update the high byte
0C1E8 A5 22                             LDA ball_xpos_hi
0C1EA E9 01                             SBC #BALL_SPEED_HI
0C1EC 85 22                             STA ball_xpos_hi
0C1EE                               +doneBallNudging:
0C1EE                           
0C1EE                               ;; Don't update position again until next frame
0C1EE                               ;; (moved to after move block routine)
0C1EE                           
0C1EE                           +doneBallHandling:
0C1EE                           
0C1EE                               
0C1EE                               ;; Do collision detection
0C1EE                               .include "game/include/main/collision_detection.asm"
0C1EE                           
0C1EE                               ;; Get ball's x-left, x-center, x-right position
0C1EE A5 22                         LDA ball_xpos_hi
0C1F0 18                            CLC
0C1F1 69 F0                         ADC #BALL_LEFT_WGA
0C1F3 85 3A                         STA ball_left
0C1F5 18                            CLC
0C1F6 69 04                         ADC #BALL_HALF_SIZE
0C1F8 85 3B                         STA ball_center
0C1FA 18                            CLC
0C1FB 69 04                         ADC #BALL_HALF_SIZE
0C1FD 85 3C                         STA ball_right
0C1FF                           
0C1FF                               ;; Get ball's y-top, y-middle, y-bottom position
0C1FF A5 24                         LDA ball_ypos_hi
0C201 18                            CLC
0C202 69 D0                         ADC #BALL_TOP_WGA
0C204 85 3D                         STA ball_top
0C206 18                            CLC
0C207 69 04                         ADC #BALL_HALF_SIZE
0C209 85 3E                         STA ball_middle
0C20B 18                            CLC
0C20C 69 04                         ADC #BALL_HALF_SIZE
0C20E 85 3F                         STA ball_bottom
0C210                           
0C210                           +checkRightCollision:
0C210                               ;; Check if ball moves right
0C210                               ;; No need to check nudging here as that will never collide with a tile
0C210 A5 1A                         LDA buttons_held
0C212 29 01                         AND #BUTTON_RIGHT
0C214 F0 20                         BEQ +checkLeftCollision
0C216                           
0C216                               ;; Check tile at right position
0C216 A5 3E                         LDA ball_middle
0C218 85 0B                         STA temp
0C21A A5 3C                         LDA ball_right
0C21C 85 0C                         STA temp+1
0C21E 20 5E C7                      JSR sub_ConvertXYToTileType
0C221 29 01                         AND #TILE_IS_SOLID
0C223 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C225                           
0C225                               ;; Nudge ball and evaluate tile type
0C225 A9 01                         LDA #$01
0C227 85 41                         STA move_block_space_to_check
0C229 A5 42                         LDA ball_flags
0C22B 29 FD                         AND #NUDGE_BALL_LEFT
0C22D 20 C4 CA                      JSR sub_InitiateNudge
0C230 20 EC C8                      JSR sub_EvaluateTileType
0C233 4C 59 C2                      JMP +checkTopCollision
0C236                           
0C236                           +checkLeftCollision:
0C236                               ;; Check if ball moves right
0C236                               ;; No need to check nudging here as that will never collide with a tile
0C236 A5 1A                         LDA buttons_held
0C238 29 02                         AND #BUTTON_LEFT
0C23A F0 1D                         BEQ +checkTopCollision
0C23C                           
0C23C                               ;; Check tile at right position
0C23C A5 3E                         LDA ball_middle
0C23E 85 0B                         STA temp
0C240 A5 3A                         LDA ball_left
0C242 85 0C                         STA temp+1
0C244 20 5E C7                      JSR sub_ConvertXYToTileType
0C247 29 01                         AND #TILE_IS_SOLID
0C249 F0 0E                         BEQ +checkTopCollision
0C24B                           
0C24B                               ;; Tile is solid; nudge ball and evaluate tile type
0C24B A9 FF                         LDA #$FF
0C24D 85 41                         STA move_block_space_to_check
0C24F A5 42                         LDA ball_flags
0C251 09 02                         ORA #NUDGE_BALL_RIGHT
0C253 20 C4 CA                      JSR sub_InitiateNudge
0C256 20 EC C8                      JSR sub_EvaluateTileType
0C259                               
0C259                               
0C259                           +checkTopCollision:
0C259                               ;; Check if ball moves up
0C259 A5 42                         LDA ball_flags
0C25B 29 10                         AND #BALL_MOVES_DOWN
0C25D D0 27                         BNE +checkBottomCollision
0C25F                           
0C25F                               ;; Check tile at top position
0C25F A5 3D                         LDA ball_top
0C261 85 0B                         STA temp
0C263 A5 3B                         LDA ball_center
0C265 85 0C                         STA temp+1
0C267 20 5E C7                      JSR sub_ConvertXYToTileType
0C26A 29 01                         AND #TILE_IS_SOLID
0C26C F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C26E                           
0C26E                               ;; Tile is solid; move ball down and evaluate tile type
0C26E A5 27                         LDA ball_ypos_lo_prev
0C270 85 25                         STA ball_ypos_lo
0C272 A5 26                         LDA ball_ypos_hi_prev
0C274 85 24                         STA ball_ypos_hi
0C276 A5 42                         LDA ball_flags
0C278 09 10                         ORA #MOVE_BALL_DOWN
0C27A 85 42                         STA ball_flags
0C27C                           
0C27C A9 F0                         LDA #$F0 ; which is -16
0C27E 85 41                         STA move_block_space_to_check
0C280 20 EC C8                      JSR sub_EvaluateTileType
0C283 4C AA C2                      JMP +doneCheckingCollision
0C286                           
0C286                           +checkBottomCollision:
0C286                               ;; No movement check needed: since ball is not moving up, it must move down
0C286                           
0C286                               ;; Check tile at bottom position
0C286 A5 3F                         LDA ball_bottom
0C288 85 0B                         STA temp
0C28A A5 3B                         LDA ball_center
0C28C 85 0C                         STA temp+1
0C28E 20 5E C7                      JSR sub_ConvertXYToTileType
0C291 29 01                         AND #TILE_IS_SOLID
0C293 F0 15                         BEQ +doneCheckingCollision
0C295                           
0C295                               ;; Tile is solid; move ball up and evaluate tile type
0C295 A5 27                         LDA ball_ypos_lo_prev
0C297 85 25                         STA ball_ypos_lo
0C299 A5 26                         LDA ball_ypos_hi_prev
0C29B 85 24                         STA ball_ypos_hi
0C29D A5 42                         LDA ball_flags
0C29F 29 EF                         AND #MOVE_BALL_UP
0C2A1 85 42                         STA ball_flags
0C2A3                           
0C2A3 A9 10                         LDA #$10
0C2A5 85 41                         STA move_block_space_to_check
0C2A7 20 EC C8                      JSR sub_EvaluateTileType
0C2AA                           
0C2AA                           +doneCheckingCollision:
0C2AA                           
0C2AA                               
0C2AA                               ;; Update bonus
0C2AA                               .include "game/include/main/update_bonus.asm"
0C2AA                           
0C2AA                           ;; Update the bonus counter on screen
0C2AA                           
0C2AA                               ;; If bonus = 000, skip decreasing
0C2AA A5 37                         LDA ball_bonus
0C2AC 05 38                         ORA ball_bonus+1
0C2AE 05 39                         ORA ball_bonus+2
0C2B0 F0 0D                         BEQ +done
0C2B2                           
0C2B2                               ;; Check if bonus timer is done yet
0C2B2 A5 4A                         LDA bonus_timer
0C2B4 D0 09                         BNE +done
0C2B6                           
0C2B6                               ;; Bonus timer is done
0C2B6                               ;; Reset bonus timer
0C2B6 A9 08                         LDA #BONUS_FRAMES
0C2B8 85 4A                         STA bonus_timer
0C2BA                               
0C2BA                               ;; Subtract one from ball bonus ones
0C2BA A2 01                         LDX #$01
0C2BC 20 95 D1                      JSR sub_SubtractXFromBonus
0C2BF                           
0C2BF                           +done:
0C2BF                           
0C2BF                           
0C2BF                               ;; Check if self-destruct
0C2BF A5 1B                         LDA buttons_pressed
0C2C1 29 20                         AND #BUTTON_SELECT
0C2C3 F0 03                         BEQ +
0C2C5 20 85 C9                          JSR sub_Selfdestruct
0C2C8                               +
0C2C8                           
0C2C8                           
0C2C8                           +skipBallMovement:
0C2C8                               ;; Move blocks a pixel up/down/left/right
0C2C8                               .include "game/include/main/move_blocks.asm"
0C2C8                           
0C2C8                               ;; Set up block loop
0C2C8 A2 04                         LDX #MAX_ANIMATIONS
0C2CA                           -moveBlocksLoop:
0C2CA CA                            DEX
0C2CB                           
0C2CB                               ;; Check if block is still moving
0C2CB BD 80 03                      LDA move_block_timer,x
0C2CE F0 33                         BEQ +checkNext
0C2D0                               
0C2D0                               ;; Check if block is done moving
0C2D0 C9 01                         CMP #$01
0C2D2 D0 0B                         BNE +
0C2D4                                   ;; If so, draw a tile and remove the sprite
0C2D4 20 B7 C7                          JSR sub_DrawMoveTile
0C2D7 A9 00                             LDA #$00
0C2D9 9D 80 03                          STA move_block_timer,x
0C2DC 4C 03 C3                          JMP +checkNext
0C2DF                               +
0C2DF                               
0C2DF                               ;; Check in which direction the block is moving
0C2DF                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2DF BD 88 03                      LDA move_block_flags,x
0C2E2 29 03                         AND #%00000011
0C2E4 F0 14                         BEQ +movingDown
0C2E6 C9 01                         CMP #$01
0C2E8 F0 0A                         BEQ +movingUp
0C2EA C9 02                         CMP #$02
0C2EC F0 12                         BEQ +movingRight
0C2EE                               
0C2EE                               ;; Move block in correct direction
0C2EE                               +movingLeft:
0C2EE DE 78 03                      DEC move_block_x,x
0C2F1 4C 03 C3                      JMP +checkNext
0C2F4                           
0C2F4                               +movingUp:
0C2F4 DE 7C 03                      DEC move_block_y,x
0C2F7 4C 03 C3                      JMP +checkNext
0C2FA                           
0C2FA                               +movingDown:
0C2FA FE 7C 03                      INC move_block_y,x
0C2FD 4C 03 C3                      JMP +checkNext
0C300                           
0C300                               +movingRight:
0C300 FE 78 03                      INC move_block_x,x
0C303                           
0C303                               ;; Check next block (if any left)
0C303                               +checkNext:
0C303 E0 00                         CPX #$00
0C305 D0 C3                         BNE -moveBlocksLoop
0C307                               
0C307                               ;; Don't update sprites
0C307 E6 40                         INC sprites_update_position
0C309                           
0C309                           
0C309                           +skipSpriteMovement:
0C309                               ;; Testing timed PPU scroll concept (disabled)
0C309                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C309                           
0C309                               ;; Check if ball is dead
0C309 A5 42                         LDA ball_flags
0C30B 29 01                         AND #BALL_IS_DEAD
0C30D F0 03                         BEQ +
0C30F 4C 31 C3                          JMP +ballIsDead
0C312                               +
0C312                               
0C312                               ;; Add ball to sprite buffer
0C312 A6 48                         LDX sprite_ram_pointer
0C314 A5 24                         LDA ball_ypos_hi
0C316 9D 00 02                      STA ADDR_SPRITERAM,x
0C319 E8                            INX
0C31A A9 01                         LDA #BALL_TILE_CHR
0C31C 9D 00 02                      STA ADDR_SPRITERAM,x
0C31F E8                            INX
0C320 A9 00                         LDA #BALL_ATTR
0C322 9D 00 02                      STA ADDR_SPRITERAM,x
0C325 E8                            INX
0C326 A5 22                         LDA ball_xpos_hi
0C328 9D 00 02                      STA ADDR_SPRITERAM,x
0C32B E8                            INX
0C32C 86 48                         STX sprite_ram_pointer
0C32E 4C 42 C3                      JMP +drawBlocks
0C331                           
0C331                           +ballIsDead:
0C331                               ;; Check if kill timer has reset
0C331 A5 4B                         LDA kill_timer
0C333 F0 03                         BEQ +
0C335 4C 42 C3                          JMP +drawBlocks
0C338                               +
0C338                               
0C338                               ;; Take a live
0C338 C6 2A                         DEC ball_lives
0C33A D0 03                         BNE +
0C33C                                   ;; If no lives left, initiate game over sequence
0C33C 4C F5 C3                          JMP lbl_GameOver
0C33F                               +
0C33F                               
0C33F                               ;; Reload current level
0C33F 4C 8A C5                      JMP lbl_InitiateLevelLoad
0C342                           
0C342                           
0C342                           +drawBlocks:
0C342                               ;; Draw moving block(s, if any)
0C342                               .include "game/include/main/draw_blocks.asm"
0C342                           
0C342                           ;; Handle movement of move blocks
0C342                           
0C342                               ;; Set up a loop
0C342 A0 04                         LDY #MAX_ANIMATIONS
0C344                           -drawBlocksLoop:
0C344 88                            DEY
0C345                           
0C345                               ;; If timer is zero, check the next move block
0C345 B9 80 03                      LDA move_block_timer,y
0C348 F0 52                         BEQ +nextMoveBlock
0C34A                               
0C34A                               ;; Get current sprite pointer
0C34A A6 48                         LDX sprite_ram_pointer
0C34C                           
0C34C                               ;; Draw the sprites on screen
0C34C B9 7C 03                      LDA move_block_y,y
0C34F 9D 00 02                      STA ADDR_SPRITERAM,x
0C352 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C355 18                            CLC
0C356 69 08                         ADC #$08
0C358 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C35B 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C35E E8                            INX
0C35F                           
0C35F A9 52                         LDA #$52 ; Top left chr id
0C361 9D 00 02                      STA ADDR_SPRITERAM,x
0C364 A9 53                         LDA #$53 ; Top right chr id
0C366 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C369 A9 62                         LDA #$62 ; Bottom left chr id
0C36B 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C36E A9 63                         LDA #$63 ; Bottom right chr id
0C370 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C373 E8                            INX
0C374                           
0C374 A9 00                         LDA #BALL_ATTR
0C376 9D 00 02                      STA ADDR_SPRITERAM,x
0C379 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C37C 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C37F 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C382 E8                            INX
0C383                           
0C383 B9 78 03                      LDA move_block_x,y
0C386 9D 00 02                      STA ADDR_SPRITERAM,x
0C389 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C38C 18                            CLC
0C38D 69 08                         ADC #$08
0C38F 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C392 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C395                           
0C395                               ;; Update sprite RAM pointer
0C395 A5 48                         LDA sprite_ram_pointer
0C397 18                            CLC
0C398 69 10                         ADC #$10
0C39A 85 48                         STA sprite_ram_pointer
0C39C                           
0C39C                           
0C39C                           
0C39C                           +nextMoveBlock:
0C39C                               ;; Check the next move block
0C39C C0 00                         CPY #$00
0C39E D0 A4                         BNE -drawBlocksLoop
0C3A0                           
0C3A0 4C EF C3                      JMP +doneScreenLoad
0C3A3                           
0C3A3                           
0C3A3                           
0C3A3                           +checkNextScreen:
0C3A3                           
0C3A3                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C3A3                               ;; Upon pressing START, the selected level will start
0C3A3                               .include "game/include/main/select_level.asm"
0C3A3                           
0C3A3                               ;; Change level number on start screen
0C3A3 A5 1B                         LDA buttons_pressed
0C3A5 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3A7 F0 3C                         BEQ +checkStartPress
0C3A9                           
0C3A9                                   ;; Select next level (1, 5, 9, 13, 17)
0C3A9 A5 4D                             LDA current_level
0C3AB 18                                CLC
0C3AC 69 04                             ADC #$04
0C3AE C9 14                             CMP #$14
0C3B0 D0 02                             BNE +
0C3B2 A9 00                                 LDA #$00
0C3B4                                   +
0C3B4 85 4D                             STA current_level
0C3B6                                   
0C3B6                                   ;; Convert level number to two-byte value
0C3B6 A9 00                             LDA #$00
0C3B8 85 0E                             STA temp+3
0C3BA A5 4D                             LDA current_level
0C3BC 18                                CLC
0C3BD 69 01                             ADC #$01
0C3BF                           
0C3BF                               -
0C3BF C9 0A                             CMP #$0A
0C3C1 90 08                             BCC +
0C3C3 E6 0E                                 INC temp+3
0C3C5 38                                    SEC
0C3C6 E9 0A                                 SBC #$0A
0C3C8 4C BF C3                              JMP -
0C3CB                                   +
0C3CB                           
0C3CB                                   ;; Add level number to PPU buffer
0C3CB 18                                CLC
0C3CC 69 01                             ADC #$01
0C3CE 85 0D                             STA temp+2
0C3D0 A9 20                             LDA #$20
0C3D2 85 0B                             STA temp
0C3D4 A9 C7                             LDA #$C7
0C3D6 85 0C                             STA temp+1
0C3D8 20 FA D1                          JSR sub_WriteByteToPPUBuffer
0C3DB                                   
0C3DB C6 0C                             DEC temp+1
0C3DD A4 0E                             LDY temp+3
0C3DF C8                                INY
0C3E0 84 0D                             STY temp+2
0C3E2 20 FA D1                          JSR sub_WriteByteToPPUBuffer
0C3E5                                   
0C3E5                               +checkStartPress:
0C3E5                           
0C3E5                           
0C3E5                           
0C3E5                               ;; If START button is pressed
0C3E5 A5 1B                         LDA buttons_pressed
0C3E7 29 10                         AND #BUTTON_START
0C3E9 F0 04                         BEQ +
0C3EB                                   ;; Start the level
0C3EB A9 81                             LDA #LOAD_GAME_SCREEN
0C3ED 85 43                             STA screen_mode
0C3EF                               +
0C3EF                           
0C3EF                           
0C3EF                           
0C3EF                           +doneScreenLoad:
0C3EF                           
0C3EF                               ;; Load animations (if any)
0C3EF                               ;; and sprite clean-up
0C3EF 20 CE CA                      JSR sub_LoadAnimations
0C3F2                           
0C3F2 4C B8 C0                      JMP lbl_MainGameLoop
0C3F5                           
0C3F5                           ;; Following sequences are outside main game loop
0C3F5                           .include "game/include/main/game_over.asm"
0C3F5                           
0C3F5                           ;; Game over sequence
0C3F5                           lbl_GameOver:
0C3F5                           
0C3F5                               ;; Check if current score exceeds high score
0C3F5 A2 00                         LDX #$00
0C3F7                               -checkHiScoreLoop:
0C3F7                           
0C3F7                                   ;; Compare ball score digit with high score digit
0C3F7 B5 2B                             LDA ball_score,x
0C3F9 D5 05                             CMP hi_score,x
0C3FB                           
0C3FB                                   ;; If the score digit is lower, the entire score must
0C3FB                                   ;; be lower, so we can skip checking the other digits
0C3FB 90 18                             BCC +hiScoreHandlingDone
0C3FD                           
0C3FD                                   ;; If the score digit is equal, check the next digit
0C3FD F0 03                             BEQ +checkNextDigit
0C3FF                           
0C3FF                                   ;; If the score digit is higher, update the high score
0C3FF 4C 0A C4                          JMP +updateHighScore
0C402                           
0C402                                   ;; Check the next digit (if any digits are left)
0C402                                   +checkNextDigit:
0C402 E8                                INX
0C403 E0 06                             CPX #$06
0C405 D0 F0                         BNE -checkHiScoreLoop
0C407                           
0C407                               ;; All digits are equal? What are the odds!
0C407                               ;; Either way, we don't have to update the high score,
0C407                               ;; although doing so won't do any harm, so if we need
0C407                               ;; three more bytes at the cost of a couple dozen
0C407                               ;; cycles, we can skip this jump.
0C407 4C 15 C4                      JMP +hiScoreHandlingDone
0C40A                           
0C40A                               ;; Transfer the ball score values to the high score values
0C40A                               +updateHighScore:
0C40A A2 00                         LDX #$00
0C40C                               -
0C40C B5 2B                             LDA ball_score,x
0C40E 95 05                             STA hi_score,x
0C410 E8                                INX
0C411 E0 06                             CPX #$06
0C413 D0 F7                         BNE -
0C415                           
0C415                               ;; The high score has been handled now.
0C415                               +hiScoreHandlingDone:
0C415                               
0C415                               ;; Disable noise channel
0C415 A9 00                         LDA #$00
0C417 8D 15 40                      STA APU_STATUS
0C41A 8D 0C 40                      STA NOISE_VOLUME
0C41D                               
0C41D                               ;; Do blinds effect
0C41D 20 4C C6                      JSR sub_BlindsEffect
0C420                           
0C420                               ;; Disable draw after HUD to disable screen
0C420 20 D1 C5                      JSR sub_WaitForNMI
0C423                               -
0C423 AD 02 20                          LDA PPU_STATUS
0C426 29 40                             AND #SPRITE_0_HIT
0C428 D0 F9                         BNE -
0C42A                               -
0C42A AD 02 20                          LDA PPU_STATUS
0C42D 29 40                             AND #SPRITE_0_HIT
0C42F F0 F9                         BEQ -
0C431 20 E7 D1                      JSR sub_Waste6
0C434 20 EA D1                      JSR sub_Waste5
0C437 20 ED D1                      JSR sub_Waste4
0C43A 20 F0 D1                      JSR sub_Waste3
0C43D 20 F6 D1                      JSR sub_Waste1
0C440 20 F9 D1                      JSR sub_Waste0
0C443 A9 00                         LDA #$00
0C445 8D 01 20                      STA PPU_MASK
0C448                               
0C448                               ;; Remove game area from view
0C448 2C 02 20                      BIT PPU_STATUS
0C44B A9 20                         LDA #$20
0C44D 8D 06 20                      STA PPU_ADDR
0C450 A9 A0                         LDA #$A0
0C452 8D 06 20                      STA PPU_ADDR
0C455 A9 00                         LDA #$00
0C457 A2 16                         LDX #$16
0C459                               -xLoop:
0C459 A0 20                             LDY #$20
0C45B                                   -yLoop:
0C45B 8D 07 20                              STA PPU_DATA
0C45E 88                                    DEY
0C45F D0 FA                             BNE -yLoop
0C461 CA                                DEX
0C462 D0 F5                         BNE -xLoop
0C464                               
0C464                               ;; Set lives to 0
0C464 2C 02 20                      BIT PPU_STATUS
0C467 A9 20                         LDA #$20
0C469 8D 06 20                      STA PPU_ADDR
0C46C A9 92                         LDA #$92
0C46E 8D 06 20                      STA PPU_ADDR
0C471 A9 01                         LDA #$01
0C473 8D 07 20                      STA PPU_DATA
0C476                               
0C476                               ;; Reset scroll
0C476 A9 00                         LDA #$00
0C478 8D 05 20                      STA PPU_SCROLL
0C47B 8D 05 20                      STA PPU_SCROLL
0C47E 20 D1 C5                      JSR sub_WaitForNMI
0C481                           
0C481                               ;; Pause for a little while
0C481 A2 18                         LDX #$18
0C483                               -
0C483 20 D1 C5                          JSR sub_WaitForNMI
0C486 CA                                DEX
0C487 D0 FA                         BNE -
0C489                                       
0C489                               ;; Do flash effect
0C489 20 65 CA                      JSR sub_FlashEffect
0C48C                           
0C48C                               ;; Draw GAME OVER tiles over game screen
0C48C A9 21                         LDA #$21
0C48E 85 0B                         STA temp
0C490 A9 EB                         LDA #$EB
0C492 85 0C                         STA temp+1
0C494                           
0C494 A2 00                         LDX #$00
0C496                               -gameOverTileLoop:
0C496 BD 30 DB                          LDA tbl_GameOver,x
0C499 85 0D                             STA temp+2
0C49B 20 FA D1                          JSR sub_WriteByteToPPUBuffer
0C49E E6 0C                             INC temp+1
0C4A0 E8                                INX
0C4A1 E0 0A                             CPX #$0A
0C4A3 D0 F1                         BNE -gameOverTileLoop
0C4A5                               
0C4A5                               ;; Update GAME OVER attributes on game screen
0C4A5 A9 23                         LDA #$23
0C4A7 85 0B                         STA temp
0C4A9 A9 DA                         LDA #$DA
0C4AB 85 0C                         STA temp+1
0C4AD A9 AA                         LDA #$AA
0C4AF 85 0D                         STA temp+2
0C4B1 A2 04                         LDX #$04
0C4B3                               -
0C4B3 20 FA D1                          JSR sub_WriteByteToPPUBuffer
0C4B6 E6 0C                             INC temp+1
0C4B8 CA                                DEX
0C4B9 D0 F8                         BNE -
0C4BB 20 D1 C5                      JSR sub_WaitForNMI
0C4BE                               
0C4BE                              
0C4BE                               ;; If player score is larger than high score
0C4BE                               ;; Overwrite high score with player score
0C4BE                               ;; [@TODO]
0C4BE                               
0C4BE                               
0C4BE                               ;; If player presses either A or START, (soft) reset the game
0C4BE                               -checkController:
0C4BE 20 BD C5                          JSR sub_ReadController
0C4C1 A5 1A                             LDA buttons_held
0C4C3 29 90                             AND #%10010000
0C4C5 F0 F7                         BEQ -checkController
0C4C7 4C 4F C0                      JMP lbl_SoftReset
0C4CA                           
0C4CA                           .include "game/include/main/level_win.asm"
0C4CA                           
0C4CA                           ;; Handling of level win state
0C4CA                           lbl_LevelWin:
0C4CA                           
0C4CA                               ;; Freeze the ball
0C4CA A5 42                         LDA ball_flags
0C4CC 09 04                         ORA #FREEZE_BALL
0C4CE 85 42                         STA ball_flags
0C4D0                           
0C4D0                               ;; Disable noise channel
0C4D0 A9 01                         LDA #$01
0C4D2 85 56                         STA noise_muted
0C4D4                               
0C4D4                               ;; Wait a few frames
0C4D4 A2 18                         LDX #$18
0C4D6 20 D2 D1                      JSR sub_WaitXFrames
0C4D9                           
0C4D9                               ;; Set null tile color to yellow
0C4D9 A9 3F                         LDA #$3F
0C4DB 85 0B                         STA temp
0C4DD A9 02                         LDA #$02
0C4DF 85 0C                         STA temp+1
0C4E1 A9 38                         LDA #$38
0C4E3 85 0D                         STA temp+2
0C4E5 20 FA D1                      JSR sub_WriteByteToPPUBuffer
0C4E8                               
0C4E8                               ;; Quick and dirty way to remove ball from screen
0C4E8 A9 EF                         LDA #$EF
0C4EA 8D 04 02                      STA ADDR_SPRITERAM+4
0C4ED 8D 05 02                      STA ADDR_SPRITERAM+5
0C4F0 8D 06 02                      STA ADDR_SPRITERAM+6
0C4F3 8D 07 02                      STA ADDR_SPRITERAM+7
0C4F6                               
0C4F6                               ;; Wait a few frames
0C4F6 A2 10                         LDX #$10
0C4F8 20 D2 D1                      JSR sub_WaitXFrames
0C4FB                               
0C4FB                               ;; Restore null tile color to dark blue
0C4FB A9 3F                         LDA #$3F
0C4FD 85 0B                         STA temp
0C4FF A9 02                         LDA #$02
0C501 85 0C                         STA temp+1
0C503 A9 12                         LDA #$12
0C505 85 0D                         STA temp+2
0C507 20 FA D1                      JSR sub_WriteByteToPPUBuffer
0C50A                               
0C50A                               ;; Initiate frequency beeps (@TODO)
0C50A A9 0F                         LDA #$0F
0C50C 85 5E                         STA sfx_sweep_count
0C50E                               -sweepsLoop:
0C50E                               
0C50E                                   ;; Reset volume for new sweep
0C50E A5 5E                             LDA sfx_sweep_count
0C510 85 60                             STA sfx_sweep_next_volume
0C512                                   
0C512                                   ;; Set up single sweep loop
0C512 A2 00                             LDX #$00
0C514                                   -sweepLoop:
0C514                                   
0C514                                       ;; Set current low frequency
0C514 BD E7 DB                              LDA tbl_SweepFrequency,x
0C517 85 61                                 STA sfx_sweep_frequency
0C519                                       
0C519                                       ;; Set current volume
0C519 A4 60                                 LDY sfx_sweep_next_volume
0C51B 84 5F                                 STY sfx_sweep_volume
0C51D                                       
0C51D                                       ;; Wait for NMI to play sfx
0C51D 20 D1 C5                              JSR sub_WaitForNMI
0C520                           
0C520                                       ;; Prepare next volume
0C520 B9 D7 DB                              LDA tbl_SweepVolume,y
0C523 85 60                                 STA sfx_sweep_next_volume
0C525                                       
0C525                                       ;; Clear pointer, except for sprite-zero and ball
0C525 A9 08                                 LDA #$08
0C527 85 48                                 STA sprite_ram_pointer
0C529                           
0C529                                       ;; Load animations (if any)
0C529 8A                                    TXA
0C52A 48                                    PHA
0C52B 20 CE CA                              JSR sub_LoadAnimations
0C52E 68                                    PLA
0C52F AA                                    TAX
0C530                           
0C530                                       ;; Play next frequency
0C530 E8                                    INX
0C531 E0 05                                 CPX #$05
0C533 D0 DF                             BNE -sweepLoop
0C535                                   
0C535                                   ;; Play next sweep
0C535 C6 5E                             DEC sfx_sweep_count
0C537 D0 D5                         BNE -sweepsLoop
0C539                           
0C539                               ;; Wait a few frames
0C539 A2 2D                         LDX #$2D
0C53B 20 D2 D1                      JSR sub_WaitXFrames
0C53E                               
0C53E                           
0C53E                               ;; Play the end level sweep sound effect, and
0C53E                               ;; initiate bonus score routine
0C53E A9 B8                         LDA #$B8
0C540 85 55                         STA soft_pulse1
0C542                           
0C542 A9 01                         LDA #$01
0C544 8D 15 40                      STA APU_STATUS
0C547 85 54                         STA do_beeps
0C549                           
0C549                               -bonusPointsLoop:
0C549                                   ;; Check how many bonus points to subtract
0C549                                   ;; (either the max, or what's left)
0C549 A5 37                             LDA ball_bonus
0C54B 05 38                             ORA ball_bonus+1
0C54D D0 06                             BNE +fullBonus
0C54F A5 39                             LDA ball_bonus+2
0C551 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C553 90 02                             BCC +partBonus
0C555                           
0C555                                   +fullBonus:
0C555 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C557                                   +partBonus:
0C557                           
0C557                                   ;; Put value that's added to score on the stack
0C557 AA                                TAX
0C558 BD EC DB                          LDA tbl_BonusToScore,x
0C55B 48                                PHA
0C55C                           
0C55C                                   ;; Subtract X-register from bonus
0C55C 20 95 D1                          JSR sub_SubtractXFromBonus
0C55F                           
0C55F                                   ;; Get value from stack and add it to the score
0C55F 68                                PLA
0C560 20 E0 C5                          JSR sub_AddAccumulatorToScore
0C563                           
0C563                                   ;; Wait for NMI twice
0C563 20 D1 C5                          JSR sub_WaitForNMI
0C566 20 D1 C5                          JSR sub_WaitForNMI
0C569                           
0C569                                   ;; Check if bonus countdown is done
0C569 A5 37                             LDA ball_bonus
0C56B 05 38                             ORA ball_bonus+1
0C56D 05 39                             ORA ball_bonus+2
0C56F D0 D8                         BNE -bonusPointsLoop
0C571                           
0C571                               ;; fade out the beeping
0C571 A2 08                         LDX #$08
0C573                               -fadeOutLoop:
0C573 20 D1 C5                          JSR sub_WaitForNMI
0C576 20 D1 C5                          JSR sub_WaitForNMI
0C579 C6 55                             DEC soft_pulse1
0C57B CA                                DEX
0C57C D0 F5                         BNE -fadeOutLoop
0C57E                           
0C57E                               ;; Stop random beeping
0C57E A9 02                         LDA #$02
0C580 85 54                         STA do_beeps
0C582                               
0C582                               ;; Wait a few frames
0C582 A2 30                         LDX #$30
0C584 20 D2 D1                      JSR sub_WaitXFrames
0C587                           
0C587                               ;; Load next level
0C587 4C 8A C5                      JMP lbl_InitiateLevelLoad
0C58A                               
0C58A                           .include "game/include/main/initiate_level_load.asm"
0C58A                           
0C58A                           ;; Load level
0C58A                           lbl_InitiateLevelLoad:
0C58A                               
0C58A                               ;; Blind out the screen
0C58A 20 4C C6                      JSR sub_BlindsEffect
0C58D                               
0C58D                               ;; If ball is dead, (re)load current level
0C58D                               ;; If ball is alive, load next level
0C58D A5 42                         LDA ball_flags
0C58F 29 01                         AND #BALL_IS_DEAD
0C591 D0 05                         BNE +
0C593 E6 4D                             INC current_level
0C595 4C 9E C5                          JMP +loadLevel
0C598                               +
0C598                               
0C598                               ;; Revive ball
0C598 A5 42                         LDA ball_flags
0C59A 29 FE                         AND #REVIVE_BALL
0C59C 85 42                         STA ball_flags
0C59E                           
0C59E                           +loadLevel:
0C59E                               ;; This loops back to level 1 after level 25* for now,
0C59E                               ;; as a proper game ending is yet to be introduced.
0C59E                               ;; *26 in test mode
0C59E A5 4D                         LDA current_level
0C5A0                               ifdef TESTING
0C5A0 C9 1A                             CMP #26
0C5A2                               else
0C5A2                                   CMP #25
0C5A2                               endif
0C5A2 D0 04                         BNE +
0C5A4 A9 00                             LDA #$00
0C5A6 85 4D                             STA current_level
0C5A8                               +
0C5A8                               
0C5A8                               ;; Tell the game to load the level screen on the next loop.
0C5A8 A9 81                         LDA #LOAD_GAME_SCREEN
0C5AA 85 43                         STA screen_mode
0C5AC                           
0C5AC                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C5AC 4C B8 C0                      JMP lbl_MainGameLoop0C5AF                           
0C5AF                           
0C5AF                           ;; Subroutines
0C5AF                           .include "include/subroutines.asm"
0C5AF                           
0C5AF                           ;; RNG
0C5AF                           .include "subroutine/GetRandomNumber.asm"
0C5AF                           
0C5AF                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5AF                           ;;
0C5AF                           ;; subroutine/GetRandomNumber.asm
0C5AF                           ;;
0C5AF                           ;; Simple and fast random number generator by White Flame.
0C5AF                           ;;
0C5AF                           ;; Set random_seed to an arbitrary number to randomize between
0C5AF                           ;; gaming sessions, for instance using the frame timer upon
0C5AF                           ;; pressing START on the intro screen.
0C5AF                           ;;
0C5AF                           ;;     ;; IF START PRESSED:
0C5AF                           ;;     LDA frame_counter
0C5AF                           ;;     STA random_seed
0C5AF                           ;;
0C5AF                           ;; Source:
0C5AF                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C5AF                           ;;
0C5AF                           ;;
0C5AF                           
0C5AF                           sub_GetRandomNumber:
0C5AF                               ;; Force EOR if random_seed is zero
0C5AF A5 21                         LDA random_seed
0C5B1 F0 05                         BEQ +doEor
0C5B3                           
0C5B3                               ;; Shift left, and EOR if the high bit is set
0C5B3 0A                            ASL
0C5B4 F0 04                         BEQ +noEor
0C5B6 90 02                         BCC +noEor
0C5B8                           
0C5B8                           +doEor:
0C5B8 49 1D                         EOR #$1D
0C5BA                           
0C5BA                           +noEor:
0C5BA 85 21                         STA random_seed
0C5BC                           
0C5BC 60                            RTS
0C5BD                           
0C5BD                           
0C5BD                           ;; Read controller input
0C5BD                           .include "subroutine/ReadController.asm"
0C5BD                           
0C5BD                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5BD                           ;;
0C5BD                           ;; subroutine/ReadController.asm
0C5BD                           ;;
0C5BD                           ;; Subroutine that polls the controller and stores the input
0C5BD                           ;; buttons in a variable. This version only handles controller
0C5BD                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C5BD                           ;;
0C5BD                           ;;
0C5BD                           
0C5BD                           sub_ReadController:
0C5BD                           
0C5BD                               ;; Set strobe bit
0C5BD A9 01                         LDA #$01
0C5BF 8D 16 40                      STA JOYPAD_1
0C5C2                           
0C5C2                               ;; Set up ring timer
0C5C2 85 1A                         STA buttons_held
0C5C4                           
0C5C4                               ;; Clear strobe bit
0C5C4 4A                            LSR
0C5C5 8D 16 40                      STA JOYPAD_1
0C5C8                           
0C5C8                               ;; Loop through button presses
0C5C8                               -
0C5C8 AD 16 40                          LDA JOYPAD_1
0C5CB 4A                                LSR
0C5CC 26 1A                             ROL buttons_held
0C5CE                           
0C5CE                               ;; Check if ring timer is done
0C5CE 90 F8                         BCC -
0C5D0                           
0C5D0                               ;; Return from subroutine
0C5D0 60                            RTS
0C5D1                           
0C5D1                           
0C5D1                           ;; vBlank/NMI wait
0C5D1                           .include "subroutine/WaitForNMI.asm"
0C5D1                           
0C5D1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5D1                           ;;
0C5D1                           ;; subroutine/WaitForVBlank.asm
0C5D1                           ;;
0C5D1                           ;; Subroutine that essentially pauses script execution until
0C5D1                           ;; vBlank happens.
0C5D1                           ;;
0C5D1                           ;;
0C5D1                           
0C5D1                           sub_WaitForNMI:
0C5D1 A9 01                         LDA #$01
0C5D3 85 62                         STA check_nmi
0C5D5                               -
0C5D5 A5 62                             LDA check_nmi
0C5D7 D0 FC                         BNE -
0C5D9 60                            RTS
0C5DA                           
0C5DA                           .include "subroutine/WaitForVBlank.asm"
0C5DA                           
0C5DA                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5DA                           ;;
0C5DA                           ;; subroutine/WaitForVBlank.asm
0C5DA                           ;;
0C5DA                           ;; Subroutine that essentially pauses script execution until
0C5DA                           ;; vBlank happens.
0C5DA                           ;;
0C5DA                           ;;
0C5DA                           
0C5DA                           sub_WaitForVBlank:
0C5DA 2C 02 20                      BIT $2002
0C5DD 10 FB                         BPL sub_WaitForVBlank
0C5DF 60                            RTS
0C5E0                           
0C5E0                           
0C5E0                           ;; Game specific subroutines
0C5E0                           .include "game/include/subroutines.asm"
0C5E0                           
0C5E0                           ;; additional game-specific subroutines go here
0C5E0                           
0C5E0                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C5E0                           
0C5E0                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5E0                           ;;
0C5E0                           ;;  sub_AddAccumulatorToScore.asm
0C5E0                           ;;
0C5E0                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C5E0                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C5E0                           ;;  actual score.
0C5E0                           ;;
0C5E0                           ;;
0C5E0                           
0C5E0                           
0C5E0                           sub_AddAccumulatorToScore:
0C5E0                           
0C5E0                               ;; Clear old add_to_score
0C5E0 A2 05                         LDX #$05
0C5E2 A0 00                         LDY #$00
0C5E4                               -
0C5E4 94 31                             STY add_to_score,x
0C5E6 CA                                DEX
0C5E7 10 FB                         BPL -
0C5E9                           
0C5E9                               ;; Set accumulator to add_to_score variables
0C5E9                               ;; Check and update 100s
0C5E9                               -checkHundreds:
0C5E9 C9 64                             CMP #100
0C5EB 90 08                             BCC +checkTens
0C5ED 38                                    SEC
0C5EE E9 64                                 SBC #100
0C5F0 E6 34                                 INC add_to_score+3
0C5F2 4C E9 C5                              JMP -checkHundreds
0C5F5                                   +checkTens:
0C5F5                           
0C5F5                               ;; Check and update 10s
0C5F5                               -checkTens:
0C5F5 C9 0A                             CMP #10
0C5F7 90 08                             BCC +setOnes
0C5F9 38                                    SEC
0C5FA E9 0A                                 SBC #10
0C5FC E6 35                                 INC add_to_score+4
0C5FE 4C F5 C5                              JMP -checkTens
0C601                                   +setOnes:
0C601                           
0C601                               ;; We're left with 1s
0C601 85 36                         STA add_to_score+5
0C603                           
0C603                               ;; Byte for byte, add add_to_score to ball_score
0C603 A9 00                         LDA #$00
0C605 85 44                         STA ppu_buffer_update
0C607 A4 45                         LDY ppu_buffer_pointer
0C609 A2 05                         LDX #$05
0C60B                               -
0C60B B5 31                             LDA add_to_score,x
0C60D 18                                CLC
0C60E 75 2B                             ADC ball_score,x
0C610 C9 0A                             CMP #10
0C612 90 05                             BCC +
0C614 38                                    SEC
0C615 E9 0A                                 SBC #10
0C617 F6 2A                                 INC ball_score-1,x
0C619                                   +
0C619                                   
0C619                                   ;; Update new score digit
0C619 95 2B                             STA ball_score,x
0C61B                           
0C61B                                   ;; Update score tile in PPU
0C61B A9 20                             LDA #$20
0C61D 99 00 03                          STA ppu_buffer,y
0C620 C8                                INY
0C621 8A                                TXA
0C622 18                                CLC
0C623 69 83                             ADC #$83
0C625 99 00 03                          STA ppu_buffer,y
0C628 C8                                INY
0C629 B5 2B                             LDA ball_score,x
0C62B 18                                CLC
0C62C 69 01                             ADC #$01
0C62E 99 00 03                          STA ppu_buffer,y
0C631 C8                                INY
0C632                           
0C632                                   ;; Check next digit (if any left)
0C632 CA                                DEX
0C633 30 03                             BMI +done
0C635 4C 0B C6                      JMP -
0C638                           
0C638                           +done:
0C638                               ;; Update PPU buffer pointer and status
0C638 84 45                         STY ppu_buffer_pointer
0C63A A9 01                         LDA #$01
0C63C 85 44                         STA ppu_buffer_update
0C63E                           
0C63E                               ;; Done: return 
0C63E 60                            RTS
0C63F                           
0C63F                           .include "game/subroutine/BackgroundNoise.asm"
0C63F                           
0C63F                           ;; Play background noise
0C63F                           sub_BackgroundNoise:
0C63F A9 32                         LDA #$32
0C641 8D 0C 40                      STA NOISE_VOLUME
0C644 A9 0E                         LDA #$0E
0C646 8D 0E 40                      STA NOISE_PERIOD
0C649 85 52                         STA current_noise
0C64B 60                            RTS
0C64C                           
0C64C                           .include "game/subroutine/BlindsEffect.asm"
0C64C                           
0C64C                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C64C                           sub_BlindsEffect:
0C64C                           
0C64C                               ;; Set up loop fading
0C64C A9 00                         LDA #$00
0C64E 85 12                         STA temp+7
0C650 A0 08                         LDY #$08
0C652                               -fadeLoop:
0C652 84 13                             STY temp+8
0C654                           
0C654                                   ;; Wait for NMI to pass
0C654 20 D1 C5                          JSR sub_WaitForNMI
0C657                                   
0C657                                   ;; Now wait for No-sprite 0
0C657                                   -
0C657 AD 02 20                              LDA PPU_STATUS
0C65A 29 40                                 AND #SPRITE_0_HIT
0C65C D0 F9                             BNE -
0C65E                               
0C65E                                   ;; Now wait for Sprite 0
0C65E                                   -
0C65E AD 02 20                              LDA PPU_STATUS
0C661 29 40                                 AND #SPRITE_0_HIT
0C663 F0 F9                             BEQ -
0C665                                   
0C665                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C665 20 E7 D1                          JSR sub_Waste6
0C668 20 EA D1                          JSR sub_Waste5
0C66B 20 ED D1                          JSR sub_Waste4
0C66E 20 F0 D1                          JSR sub_Waste3
0C671 20 F6 D1                          JSR sub_Waste1
0C674 20 F9 D1                          JSR sub_Waste0
0C677                                   
0C677                                   
0C677                                   ;; Setup tile row loop
0C677 A0 16                             LDY #22
0C679                                   -tileLoop:
0C679                                   
0C679                                       ;; Disable drawing
0C679 A5 1D                                 LDA soft_ppu_mask
0C67B 29 F7                                 AND #%11110111
0C67D 8D 01 20                              STA PPU_MASK
0C680                                       
0C680                                       ;; Set up scanline loop
0C680 A2 08                                 LDX #$08
0C682                                       -scanlineLoop:
0C682 E4 13                                     CPX temp+8
0C684 D0 0A                                     BNE +wasteTime
0C686                                           
0C686                                           ;; Restore drawing
0C686 A5 1D                                     LDA soft_ppu_mask
0C688 09 08                                     ORA #%00001000
0C68A 8D 01 20                                  STA PPU_MASK
0C68D 4C 96 C6                                  JMP +wasteMoreTime
0C690                           
0C690                                           ;; Waste 12 frames
0C690                                           +wasteTime:
0C690 E6 64                                     INC void     ;+5
0C692 C6 64                                     DEC void     ;+5
0C694 49 00                                     EOR #$00     ;+2
0C696                                           
0C696                                           ;; Waste about a scanline worth of frames
0C696                                           +wasteMoreTime:
0C696 20 F3 D1                                  JSR sub_Waste2
0C699 20 F9 D1                                  JSR sub_Waste0
0C69C 20 F9 D1                                  JSR sub_Waste0
0C69F E6 64                                     INC void
0C6A1 49 00                                     EOR #$00
0C6A3 49 00                                     EOR #$00
0C6A5 CA                                        DEX
0C6A6 D0 DA                                 BNE -scanlineLoop
0C6A8 C6 64                                 DEC void
0C6AA 49 00                                 EOR #$00
0C6AC 88                                    DEY
0C6AD D0 CA                             BNE -tileLoop
0C6AF                           
0C6AF A4 13                             LDY temp+8
0C6B1                                   
0C6B1 E6 12                             INC temp+7
0C6B3 A5 12                             LDA temp+7
0C6B5 C9 02                             CMP #$02
0C6B7 D0 99                             BNE -fadeLoop
0C6B9                           
0C6B9 A9 00                             LDA #$00
0C6BB 85 12                             STA temp+7
0C6BD 88                                DEY
0C6BE D0 92                         BNE -fadeLoop
0C6C0                               
0C6C0 60                            RTS
0C6C1                           
0C6C1                           .include "game/subroutine/ClearScreen.asm"
0C6C1                           
0C6C1                           ;; Subroutine to clear the screen
0C6C1                           ;; If it's a game screen, add noise
0C6C1                           
0C6C1                           sub_ClearScreen:
0C6C1                               ;; Check of game screen or not
0C6C1 A5 43                         LDA screen_mode
0C6C3 29 03                         AND #CHECK_SCREEN_MODE
0C6C5 C9 01                         CMP #IS_GAME_SCREEN
0C6C7 F0 02                         BEQ +
0C6C9 A9 00                             LDA #$00
0C6CB                               +
0C6CB 85 0C                         STA temp+1
0C6CD                               
0C6CD                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C6CD 2C 02 20                      BIT PPU_STATUS
0C6D0 A9 20                         LDA #$20
0C6D2 8D 06 20                      STA PPU_ADDR
0C6D5 A9 00                         LDA #$00
0C6D7 8D 06 20                      STA PPU_ADDR
0C6DA                               
0C6DA                               ;; Set up tile to draw and loop
0C6DA 85 0B                         STA temp
0C6DC AA                            TAX
0C6DD A8                            TAY
0C6DE                           
0C6DE                               -     
0C6DE                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C6DE A5 0B                             LDA temp
0C6E0 8D 07 20                          STA PPU_DATA
0C6E3                           
0C6E3                                   ;; Check if we should draw noise next. Noise is drawn if:
0C6E3                                   ;; - Screen mode is game screen
0C6E3                                   ;; - Y between #$06 and #$19 (inclusive)
0C6E3                                   ;; - X between #$02 and #$1D (inclusive)
0C6E3                                   
0C6E3                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C6E3 A5 0C                             LDA temp+1
0C6E5 F0 1C                             BEQ +nextTileInRow
0C6E7                                   
0C6E7                                   ;; If Y < $6, skip the check
0C6E7 C0 06                             CPY #$06
0C6E9 90 18                             BCC +nextTileInRow
0C6EB                                   
0C6EB                                   ;; If X < $1, skip the check
0C6EB E0 01                             CPX #$01
0C6ED 90 14                             BCC +nextTileInRow
0C6EF                                   
0C6EF                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C6EF E0 1D                             CPX #$1D
0C6F1 D0 04                             BNE +
0C6F3 A9 00                                 LDA #$00
0C6F5 85 0B                                 STA temp
0C6F7                                   +
0C6F7 B0 0A                             BCS +nextTileInRow
0C6F9                                   
0C6F9                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C6F9 20 AF C5                          JSR sub_GetRandomNumber
0C6FC 29 07                             AND #%00000111
0C6FE 18                                CLC
0C6FF 69 68                             ADC #$68
0C701 85 0B                             STA temp
0C703                           
0C703                           +nextTileInRow:
0C703                                   
0C703                                   ;; Check if a row has been done. If not, draw the next
0C703 E8                                INX
0C704 E0 20                             CPX #$20
0C706 D0 D6                             BNE -
0C708                                   
0C708                                   ;; Go to the next row (if any left)
0C708 A2 00                             LDX #00
0C70A C8                                INY
0C70B                                   
0C70B                                   ;; If Y is 1A, skip noise tile check until done drawing
0C70B C0 1A                             CPY #$1A
0C70D D0 04                             BNE +
0C70F A9 00                                 LDA #$00
0C711 85 0C                                 STA temp+1
0C713                                   +
0C713                                   
0C713 C0 1E                             CPY #$1E
0C715 D0 C7                         BNE -
0C717                           
0C717                               ;; Clear attribute table
0C717 A9 23                         LDA #$23
0C719 8D 06 20                      STA PPU_ADDR
0C71C A9 C0                         LDA #$C0
0C71E 8D 06 20                      STA PPU_ADDR
0C721 A9 00                         LDA #$00
0C723 A2 40                         LDX #$40
0C725                               -
0C725 8D 07 20                          STA PPU_DATA
0C728 CA                                DEX
0C729 D0 FA                         BNE -
0C72B                               
0C72B 60                            RTS
0C72C                           
0C72C                           .include "game/subroutine/ColorizeBall.asm"
0C72C                           
0C72C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C72C                           ;;
0C72C                           ;;  Subroutine: ColorizeBall
0C72C                           ;;
0C72C                           ;;  Applies the color set through ball_flags to the ball sprite.
0C72C                           ;;  Expects ball_flags to be in the accumulator
0C72C                           ;;
0C72C                           
0C72C                           
0C72C                           sub_ColorizeBall:
0C72C                           
0C72C                               ;; Get color from ball_flags
0C72C 4A                            LSR
0C72D 4A                            LSR
0C72E 4A                            LSR
0C72F 4A                            LSR
0C730 4A                            LSR
0C731 AA                            TAX
0C732                           
0C732                               ;; Add new light color of ball to PPU palette
0C732 A9 3F                         LDA #$3F
0C734 85 0B                         STA temp
0C736 A9 11                         LDA #$11
0C738 85 0C                         STA temp+1
0C73A BD 6C D3                      LDA tbl_BallColorLight,x
0C73D 85 0D                         STA temp+2
0C73F 20 FA D1                      JSR sub_WriteByteToPPUBuffer
0C742                               
0C742                               ;; Add new dark color of ball to PPU palette
0C742 E6 0C                         INC temp+1
0C744 BD 66 D3                      LDA tbl_BallColorDark,x
0C747 85 0D                         STA temp+2
0C749 20 FA D1                      JSR sub_WriteByteToPPUBuffer
0C74C                               
0C74C 60                            RTS
0C74D                           
0C74D                           .include "game/subroutine/ColorsMatch.asm"
0C74D                           
0C74D                           ;; Subroutine to check if ball color matches colliding tile color
0C74D                           
0C74D                           sub_ColorsMatch:
0C74D                               ;; Save tile color in temp variable
0C74D A5 4E                         LDA colliding_tile
0C74F 29 0E                         AND #%00001110
0C751 85 0B                         STA temp
0C753                           
0C753                               ;; Get ball color
0C753 A5 42                         LDA ball_flags
0C755 29 E0                         AND #%11100000
0C757 4A                            LSR
0C758 4A                            LSR
0C759 4A                            LSR
0C75A 4A                            LSR
0C75B                           
0C75B                               ;; Compare with tile color
0C75B C5 0B                         CMP temp
0C75D 60                            RTS
0C75E                           
0C75E                           .include "game/subroutine/ConvertXYToTileType.asm"
0C75E                           
0C75E                           ;; Subroutine to convert the ball's position to a tile type
0C75E                           ;; - Expects temp to be y-position of ball within game area
0C75E                           ;; - Expects temp+1 to be x-position of ball within game area
0C75E                           ;; - Puts result in accumulator and zp variable
0C75E                           ;; - Corrupts X-register
0C75E                           
0C75E                           sub_ConvertXYToTileType:
0C75E A5 0C                         LDA temp+1
0C760 4A                            LSR
0C761 4A                            LSR
0C762 4A                            LSR
0C763 4A                            LSR
0C764 85 14                         STA temp+9
0C766 A5 0B                         LDA temp
0C768 29 F0                         AND #%11110000
0C76A 18                            CLC
0C76B 65 14                         ADC temp+9
0C76D 85 14                         STA temp+9
0C76F AA                            TAX
0C770 BD 00 04                      LDA tile_type, x
0C773 85 4E                         STA colliding_tile
0C775 60                            RTS
0C776                           
0C776                           .include "game/subroutine/DisableEnableRendering.asm"
0C776                           
0C776                           ;; Subroutines to disable or enable screen rendering
0C776                           
0C776                           sub_DisableRendering:
0C776                               ;; Force NMI skip, disable rendering
0C776 A9 01                     	LDA #$01
0C778 85 1F                     	STA force_skip_nmi
0C77A 20 DA C5                      JSR sub_WaitForVBlank
0C77D A5 1D                         LDA soft_ppu_mask
0C77F 29 E7                         AND #%11100111
0C781 8D 01 20                      STA PPU_MASK
0C784 85 1D                         STA soft_ppu_mask
0C786 20 DA C5                      JSR sub_WaitForVBlank
0C789 60                            RTS
0C78A                           
0C78A                           sub_EnableRendering:
0C78A                               ;; Enable rendering
0C78A A9 00                     	LDA #$00
0C78C 8D 05 20                  	STA PPU_SCROLL
0C78F 8D 05 20                  	STA PPU_SCROLL
0C792 20 DA C5                      JSR sub_WaitForVBlank
0C795 85 1F                     	STA force_skip_nmi
0C797 A5 1D                         LDA soft_ppu_mask
0C799 09 18                         ORA #%00011000
0C79B 85 1D                         STA soft_ppu_mask
0C79D 8D 01 20                      STA PPU_MASK
0C7A0 20 DA C5                      JSR sub_WaitForVBlank
0C7A3 60                            RTS
0C7A4                           
0C7A4                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C7A4                           
0C7A4                           ;; Draw a tile from the logo on the intro screen
0C7A4                           sub_drawIntroScreenLogoTile:
0C7A4 B9 40 D2                      LDA tbl_IntroScreenLogoChr,y
0C7A7 C9 60                         CMP #$60
0C7A9 D0 08                         BNE +
0C7AB 20 AF C5                          JSR sub_GetRandomNumber
0C7AE 29 07                             AND #$07
0C7B0 18                                CLC
0C7B1 69 60                             ADC #$60
0C7B3                               +
0C7B3 8D 07 20                      STA PPU_DATA
0C7B6 60                            RTS
0C7B7                           
0C7B7                           .include "game/subroutine/DrawMoveTile.asm"
0C7B7                           
0C7B7                           ;; Draw the move tile as follows:
0C7B7                           ;;
0C7B7                           ;;  1 2
0C7B7                           ;;  3 4 5
0C7B7                           ;;    6 7
0C7B7                           ;;
0C7B7                           ;; (1,2,3,4) is the move block itself
0C7B7                           ;; (5,6,7) are shades unless that tile is solid
0C7B7                           
0C7B7                           ;; X holds the move block sprite slot
0C7B7                           
0C7B7                           sub_DrawMoveTile:
0C7B7                           
0C7B7                               ;; Get tile type index from sprite x and y values
0C7B7                               ;; and store it in a temp variable
0C7B7 BD 78 03                      LDA move_block_x,x
0C7BA 18                            CLC
0C7BB 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C7BD 4A                            LSR
0C7BE 4A                            LSR
0C7BF 4A                            LSR
0C7C0 4A                            LSR
0C7C1 85 14                         STA temp+9
0C7C3 BD 7C 03                      LDA move_block_y,x
0C7C6 18                            CLC
0C7C7 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C7C9 29 F0                         AND #%11110000
0C7CB 18                            CLC
0C7CC 65 14                         ADC temp+9
0C7CE 85 14                         STA temp+9
0C7D0 A8                            TAY
0C7D1                               
0C7D1                               ;; Add move tile data on the new tile location
0C7D1 BD 84 03                      LDA move_block_tile_type,x
0C7D4 99 00 04                      STA tile_type,y
0C7D7                           
0C7D7                               ;; Draw the original tile type in the ppu buffer
0C7D7                               ;; - get PPU address to write to (temp, temp+1)
0C7D7 8A                            TXA
0C7D8 48                            PHA
0C7D9 A6 14                         LDX temp+9
0C7DB 20 95 CA                      JSR sub_GetPPUAddrFromYXIndex
0C7DE 68                            PLA
0C7DF AA                            TAX
0C7E0                               
0C7E0                               ;; - based on color, select tile 42 or 4A for top left
0C7E0 BD 88 03                      LDA move_block_flags,x
0C7E3 4A                            LSR
0C7E4 4A                            LSR
0C7E5 4A                            LSR
0C7E6 4A                            LSR
0C7E7 4A                            LSR
0C7E8 A8                            TAY
0C7E9 B9 29 DB                      LDA tbl_MoveBlockTopLeftTile,y
0C7EC 85 13                         STA temp+8
0C7EE                               
0C7EE                               ;; - save palette ID in temp+6
0C7EE 98                            TYA
0C7EF 4A                            LSR
0C7F0 85 11                         STA temp+6
0C7F2                               
0C7F2                               ;; Prepare PPU buffer
0C7F2 A4 45                         LDY ppu_buffer_pointer
0C7F4 A9 00                         LDA #$00
0C7F6 85 44                         STA ppu_buffer_update
0C7F8                               
0C7F8                               ;; Draw tile 1 (top left tile of move block)
0C7F8 20 D9 C8                      JSR sub_DrawTileTemp018
0C7FB                           
0C7FB                               
0C7FB                               ;; Draw tile 2 (top right tile of move block)
0C7FB E6 0C                         INC temp+1
0C7FD E6 13                         INC temp+8
0C7FF 20 D9 C8                      JSR sub_DrawTileTemp018
0C802                           
0C802                               ;; Draw tile 3 (bottom left tile of move block)
0C802 A5 0C                         LDA temp+1
0C804 18                            CLC
0C805 69 1F                         ADC #$1F
0C807 85 0C                         STA temp+1
0C809 A5 0B                         LDA temp
0C80B 69 00                         ADC #$00
0C80D 85 0B                         STA temp
0C80F A5 13                         LDA temp+8
0C811 18                            CLC
0C812 69 0F                         ADC #$0F
0C814 85 13                         STA temp+8
0C816 20 D9 C8                      JSR sub_DrawTileTemp018
0C819                           
0C819                               ;; Draw tile 4 (bottom right tile of move block)
0C819 E6 0C                         INC temp+1
0C81B E6 13                         INC temp+8
0C81D 20 D9 C8                      JSR sub_DrawTileTemp018
0C820                           
0C820                               ;; Load tile type offset in X register
0C820 8A                            TXA
0C821 48                            PHA
0C822 A6 14                         LDX temp+9
0C824                               
0C824                               ;; Load shade tile in temp+8
0C824 A9 00                         LDA #$00
0C826 85 13                         STA temp+8
0C828                           
0C828                               ;; Draw tile 5 (right shade) unless tile is solid
0C828 E6 0C                         INC temp+1
0C82A                               
0C82A 8A                            TXA
0C82B 29 0F                         AND #%00001111
0C82D C9 0D                         CMP #$0D
0C82F F0 0A                         BEQ +nextTile
0C831                           
0C831 BD 01 04                      LDA tile_type+1,x
0C834 29 01                         AND #%00000001
0C836 D0 03                         BNE +nextTile
0C838                               
0C838 20 D9 C8                      JSR sub_DrawTileTemp018
0C83B                               
0C83B                           
0C83B                           +nextTile:
0C83B                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C83B A5 0C                         LDA temp+1
0C83D 18                            CLC
0C83E 69 1F                         ADC #$1F
0C840 85 0C                         STA temp+1
0C842 A5 0B                         LDA temp
0C844 69 00                         ADC #$00
0C846 85 0B                         STA temp
0C848                           
0C848 8A                            TXA
0C849 29 F0                         AND #%11110000
0C84B C9 90                         CMP #$90
0C84D F0 0A                         BEQ +nextTile
0C84F                           
0C84F BD 10 04                      LDA tile_type+16,x
0C852 29 01                         AND #%00000001
0C854 D0 03                         BNE +nextTile
0C856                               
0C856 20 D9 C8                      JSR sub_DrawTileTemp018
0C859                           
0C859                               
0C859                           +nextTile:
0C859                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C859 E6 0C                         INC temp+1
0C85B                           
0C85B 8A                            TXA
0C85C 29 F0                         AND #%11110000
0C85E C9 90                         CMP #$90
0C860 F0 11                         BEQ +setTileAttributes
0C862                               
0C862 8A                            TXA
0C863 29 0F                         AND #%00001111
0C865 C9 0D                         CMP #$0D
0C867 F0 0A                         BEQ +setTileAttributes
0C869                               
0C869 BD 11 04                      LDA tile_type+17,x
0C86C 29 01                         AND #%00000001
0C86E D0 03                         BNE +setTileAttributes
0C870                               
0C870 20 D9 C8                      JSR sub_DrawTileTemp018
0C873                               
0C873                           
0C873                           +setTileAttributes:
0C873                               ;; Update attribute table accordingly through ppu buffer
0C873                               ;; - PPU buffer high byte
0C873 20 6B D1                      JSR sub_SetTileAttributeAddress
0C876                           
0C876 8A                            TXA
0C877 29 10                         AND #%00010000
0C879 F0 05                         BEQ +        
0C87B A9 F0                             LDA #%11110000
0C87D 4C 82 C8                          JMP ++
0C880                               +
0C880 A9 0F                         LDA #%00001111
0C882                               ++
0C882 85 0D                         STA temp+2
0C884                               
0C884 8A                            TXA
0C885 29 01                         AND #%00000001
0C887 F0 07                         BEQ +
0C889 A5 0D                             LDA temp+2
0C88B 09 CC                             ORA #%11001100
0C88D 4C 94 C8                          JMP ++
0C890                               +
0C890 A5 0D                         LDA temp+2
0C892 09 33                         ORA #%00110011
0C894                               ++
0C894 85 0D                         STA temp+2
0C896                               
0C896 C9 FC                         CMP #%11111100
0C898 F0 22                         BEQ +continue
0C89A                               
0C89A C9 F3                         CMP #%11110011
0C89C D0 09                         BNE +
0C89E A5 11                             LDA temp+6
0C8A0 0A                                ASL
0C8A1 0A                                ASL
0C8A2 85 11                             STA temp+6
0C8A4 4C BC C8                          JMP +continue
0C8A7                               +
0C8A7                               
0C8A7 C9 CF                         CMP #%11001111
0C8A9 D0 0A                         BNE +
0C8AB A6 11                             LDX temp+6
0C8AD BD CA DA                          LDA tbl_Times16,x
0C8B0 85 11                             STA temp+6
0C8B2 4C BC C8                          JMP +continue
0C8B5                               +
0C8B5                               
0C8B5 A6 11                         LDX temp+6
0C8B7 BD DA DA                      LDA tbl_Times64,x
0C8BA 85 11                         STA temp+6
0C8BC                                   
0C8BC                           +continue:
0C8BC A5 0B                         LDA temp
0C8BE 38                            SEC
0C8BF E9 C0                         SBC #$C0
0C8C1 AA                            TAX
0C8C2 BD A0 04                      LDA tile_attributes,x
0C8C5 25 0D                         AND temp+2
0C8C7 05 11                         ORA temp+6
0C8C9 9D A0 04                      STA tile_attributes,x
0C8CC 99 00 03                      STA ppu_buffer,y
0C8CF C8                            INY
0C8D0                           
0C8D0                               ;; Restore original X
0C8D0 68                            PLA
0C8D1 AA                            TAX
0C8D2                               
0C8D2                               ;; Update PPU buffer
0C8D2 84 45                         STY ppu_buffer_pointer
0C8D4 A9 01                         LDA #$01
0C8D6 85 44                         STA ppu_buffer_update
0C8D8                           
0C8D8                               ;; Return
0C8D8 60                            RTS
0C8D9                           
0C8D9                           .include "game/subroutine/DrawTileTemp018.asm"
0C8D9                           
0C8D9                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C8D9                           
0C8D9                           sub_DrawTileTemp018:
0C8D9 A5 0B                         LDA temp
0C8DB 99 00 03                      STA ppu_buffer,y
0C8DE C8                            INY
0C8DF A5 0C                         LDA temp+1
0C8E1 99 00 03                      STA ppu_buffer,y
0C8E4 C8                            INY
0C8E5 A5 13                         LDA temp+8
0C8E7 99 00 03                      STA ppu_buffer,y
0C8EA C8                            INY
0C8EB 60                            RTS
0C8EC                           
0C8EC                           .include "game/subroutine/EvaluateTileType.asm"
0C8EC                           
0C8EC                           ;; Subroutine to evaluate the colliding tile type and take its
0C8EC                           ;; corresponding action (move block, kill player, ...)
0C8EC                           ;; - Expects X-register to be the tile_type offset
0C8EC                           ;; - Uses zp variable colliding_tile
0C8EC                           
0C8EC                           sub_EvaluateTileType:
0C8EC                           
0C8EC                               ;; Check if collided tile is a color block
0C8EC A5 4E                         LDA colliding_tile
0C8EE 29 80                         AND #IS_COLOR_BLOCK
0C8F0 D0 03                         BNE +
0C8F2 4C 5B C9                          JMP +checkIfPaintBlock
0C8F5                               +
0C8F5                               
0C8F5                               ;; It's a color block. Check if the colors match
0C8F5 20 4D C7                      JSR sub_ColorsMatch
0C8F8 F0 06                         BEQ +
0C8FA                                   ;; Colors don't match
0C8FA                                   ;; Play bounce sound effect
0C8FA A2 02                             LDX #SFX_BOUNCE
0C8FC 20 E6 CF                          JSR sub_PreloadSfxFromX
0C8FF                                   
0C8FF                                   ;; Return
0C8FF 60                                RTS
0C900                               +
0C900                           
0C900                               ;; Colors match; destroy color block
0C900                               
0C900                               ;; Convert the metatile offset value (which is in the X register)
0C900                               ;; to its corresponding address in PPU
0C900 20 95 CA                      JSR sub_GetPPUAddrFromYXIndex
0C903                           
0C903                               ;; Remove color block from screen by drawing a total
0C903                               ;; of 7 tiles over it (shade included)
0C903 20 F5 CF                      JSR sub_RemoveBlockFromScreen
0C906                               
0C906                               ;; - Load destruction animation on tile
0C906                               ;; Get most recent slot for explosion    
0C906 8A                            TXA
0C907 85 0D                         STA temp+2
0C909 A6 46                         LDX explosion_pointer
0C90B                           
0C90B                               ;; If 0, use max pointer value
0C90B D0 02                         BNE +
0C90D A2 04                             LDX #MAX_ANIMATIONS
0C90F                               +
0C90F                           
0C90F                               ;; Decrease pointer by one
0C90F CA                            DEX
0C910 86 46                         STX explosion_pointer
0C912                           
0C912                               ;; Load explosion data into RAM
0C912 A9 00                         LDA #$00
0C914 9D 64 03                      STA explosion_currentframe,x
0C917                           
0C917 A9 04                         LDA #ANIMATION_SPEED
0C919 9D 60 03                      STA explosion_timer,x
0C91C                           
0C91C A5 0D                         LDA temp+2
0C91E 29 0F                         AND #%00001111
0C920 A8                            TAY
0C921 B9 CA DA                      LDA tbl_Times16,y
0C924 18                            CLC
0C925 69 0E                         ADC #$0E
0C927 9D 6C 03                      STA explosion_x,x
0C92A                           
0C92A A5 0D                         LDA temp+2
0C92C 29 F0                         AND #%11110000
0C92E 18                            CLC
0C92F 69 29                         ADC #$29
0C931 9D 70 03                      STA explosion_y,x
0C934                           
0C934 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C936 9D 68 03                      STA explosion_attributes,x
0C939 A9 01                         LDA #$01
0C93B 9D 74 03                      STA explosion_active,x
0C93E                           
0C93E A5 0D                         LDA temp+2
0C940 AA                            TAX
0C941                               
0C941                               
0C941                               ;; - Write #$00 in tile type ram (makes not-solid)
0C941 A9 00                         LDA #$00
0C943 9D 00 04                      STA tile_type, x
0C946                           
0C946                           
0C946                               ;; Add (80 + level number) to score
0C946 A5 4D                         LDA current_level
0C948 18                            CLC
0C949 69 51                         ADC #81
0C94B 20 E0 C5                      JSR sub_AddAccumulatorToScore
0C94E                           
0C94E                           
0C94E                               ;; Play thud sound effect
0C94E A2 01                         LDX #SFX_THUD
0C950 20 E6 CF                      JSR sub_PreloadSfxFromX
0C953                           
0C953                           
0C953                               ;; - If there are no color blocks left:
0C953                               ;;   - Initiate level-win state
0C953 C6 4F                         DEC blocks_left
0C955 D0 03                         BNE +
0C957 4C CA C4                          JMP lbl_LevelWin
0C95A                               +
0C95A                               
0C95A 60                            RTS
0C95B                           
0C95B                           
0C95B                           
0C95B                           +checkIfPaintBlock:
0C95B                           
0C95B                               ;; Check if collided tile is a paint block
0C95B A5 4E                         LDA colliding_tile
0C95D 29 20                         AND #IS_PAINT_BLOCK
0C95F F0 1E                         BEQ +checkIfDeathBlock
0C961                                   ;; It's a paint block. Update ball color
0C961                                   ;; Save x-register
0C961 8A                                TXA
0C962 48                                PHA
0C963                           
0C963                                   ;; Get tile color
0C963 A5 4E                             LDA colliding_tile
0C965 29 0E                             AND #%00001110
0C967 0A                                ASL
0C968 0A                                ASL
0C969 0A                                ASL
0C96A 0A                                ASL
0C96B 85 0B                             STA temp
0C96D                           
0C96D                                   ;; Apply tile color to ball
0C96D A5 42                             LDA ball_flags
0C96F 29 1F                             AND #%00011111
0C971 05 0B                             ORA temp
0C973 85 42                             STA ball_flags
0C975 20 2C C7                          JSR sub_ColorizeBall
0C978                           
0C978                                   ;; Play paint sound effect
0C978 A9 10                             LDA #$10
0C97A 85 5B                             STA sfx_timer+2
0C97C                           
0C97C                                   ;; Restore x-register
0C97C 68                                PLA
0C97D AA                                TAX
0C97E                           
0C97E                                   ;; Return
0C97E 60                                RTS
0C97F                                   
0C97F                                   
0C97F                                   
0C97F                           +checkIfDeathBlock:
0C97F                           
0C97F                               ;; Check if collided tile is a death block
0C97F A5 4E                         LDA colliding_tile
0C981 29 10                         AND #IS_DEATH_BLOCK
0C983 F0 3D                         BEQ +checkIfMoveBlock
0C985                           
0C985                           ;; Also, when the player presses select during gameplay,
0C985                           ;; insta-selfdestruct the ball.
0C985                           sub_Selfdestruct:
0C985                           
0C985                                   ;; It is a death block
0C985                                   ;; Freeze and kill player
0C985 A5 42                             LDA ball_flags
0C987 09 05                             ORA #%00000101
0C989 85 42                             STA ball_flags
0C98B                                   
0C98B                                   ;; Get free explosion slot
0C98B A6 46                             LDX explosion_pointer
0C98D D0 02                             BNE +
0C98F A2 04                                 LDX #MAX_ANIMATIONS
0C991                                   +
0C991 CA                                DEX
0C992 86 46                             STX explosion_pointer
0C994                           
0C994                                   ;; Load explosion data into RAM
0C994 A9 00                             LDA #$00
0C996 9D 64 03                          STA explosion_currentframe,x
0C999                           
0C999 A9 04                             LDA #ANIMATION_SPEED
0C99B 9D 60 03                          STA explosion_timer,x
0C99E                           
0C99E A5 22                             LDA ball_xpos_hi
0C9A0 38                                SEC
0C9A1 E9 08                             SBC #$08
0C9A3 9D 6C 03                          STA explosion_x,x
0C9A6                           
0C9A6 A5 24                             LDA ball_ypos_hi
0C9A8 38                                SEC
0C9A9 E9 06                             SBC #$06
0C9AB 9D 70 03                          STA explosion_y,x
0C9AE                           
0C9AE A9 01                             LDA #$01
0C9B0 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C9B3 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C9B6 85 56                             STA noise_muted             ; mute background noise
0C9B8                                   
0C9B8                                   ;; Play explosion sound effect
0C9B8 A2 00                             LDX #SFX_EXPLOSION
0C9BA 20 E6 CF                          JSR sub_PreloadSfxFromX
0C9BD                           
0C9BD                                   ;; Set kill timer
0C9BD A9 60                             LDA #$60
0C9BF 85 4B                             STA kill_timer
0C9C1                           
0C9C1                                   ;; Return
0C9C1 60                                RTS
0C9C2                           
0C9C2                           
0C9C2                           
0C9C2                           +checkIfMoveBlock:
0C9C2                           
0C9C2                               ;; Check if collided tile is a move block
0C9C2 A5 4E                         LDA colliding_tile
0C9C4 29 40                         AND #IS_MOVE_BLOCK
0C9C6 D0 06                         BNE +
0C9C8                                   ;; Tile is not a move block
0C9C8                                   ;; Therefore, it is a solid wall
0C9C8                                   
0C9C8                                   ;; Play bounce sound effect
0C9C8 A2 02                             LDX #SFX_BOUNCE
0C9CA 20 E6 CF                          JSR sub_PreloadSfxFromX
0C9CD                           
0C9CD                                   ;; Return
0C9CD 60                                RTS
0C9CE                               +
0C9CE                           
0C9CE                               ;; It is a move block. Check if colors match
0C9CE 20 4D C7                      JSR sub_ColorsMatch
0C9D1 F0 06                         BEQ +
0C9D3                                   ;; Colors do not match
0C9D3                                   ;; Play bounce sound effect
0C9D3 A2 02                             LDX #SFX_BOUNCE
0C9D5 20 E6 CF                          JSR sub_PreloadSfxFromX
0C9D8                           
0C9D8                                   ;; Return
0C9D8 60                                RTS
0C9D9                               +
0C9D9                           
0C9D9                               ;; Colors match
0C9D9                               ;; - Check if next tile is within the playground
0C9D9                               ;; (push X onto stack as well)
0C9D9 8A                            TXA
0C9DA 48                            PHA
0C9DB 18                            CLC
0C9DC 65 41                         ADC move_block_space_to_check
0C9DE AA                            TAX
0C9DF                               
0C9DF 29 0F                         AND #%00001111
0C9E1 C9 0E                         CMP #$0E
0C9E3 90 03                         BCC +
0C9E5 4C 5D CA                          JMP +dontMoveBlock
0C9E8                               +
0C9E8 8A                            TXA
0C9E9 29 F0                         AND #%11110000
0C9EB C9 A0                         CMP #$A0
0C9ED D0 03                         BNE +
0C9EF 4C 5D CA                          JMP +dontMoveBlock
0C9F2                               +
0C9F2 C9 F0                         CMP #$F0
0C9F4 D0 03                         BNE +
0C9F6 4C 5D CA                          JMP +dontMoveBlock
0C9F9                               +
0C9F9                               
0C9F9                               ;; Check if the next tile is solid
0C9F9 BD 00 04                      LDA tile_type,x
0C9FC 29 01                         AND #TILE_IS_SOLID
0C9FE F0 03                         BEQ +
0CA00 4C 5D CA                          JMP +dontMoveBlock
0CA03                               +
0CA03                               
0CA03                               ;; Move block has room to move
0CA03                               ;; Pull original X from stack
0CA03 68                            PLA
0CA04 AA                            TAX        
0CA05                               
0CA05                               ;; Add the tiles that need updating to ppu buffer, and
0CA05                               ;; update attribute table accordingly through ppu buffer
0CA05 20 95 CA                      JSR sub_GetPPUAddrFromYXIndex
0CA08 20 F5 CF                      JSR sub_RemoveBlockFromScreen
0CA0B                           
0CA0B                               ;; Store original tile type in temp variable
0CA0B BD 00 04                      LDA tile_type,x
0CA0E 85 13                         STA temp+8
0CA10                           
0CA10                               ;; Write #$00 in tile type ram (makes not-solid)
0CA10 A9 00                         LDA #$00
0CA12 9D 00 04                      STA tile_type,x
0CA15                           
0CA15                               ;; Add move tile sprite over the original tile
0CA15                               ;; - Store x in temp variable
0CA15 86 0E                         STX temp+3
0CA17                               
0CA17                               ;; - Update move block pointer
0CA17 A6 47                         LDX move_block_pointer
0CA19 D0 02                         BNE +
0CA1B A2 04                             LDX #MAX_ANIMATIONS
0CA1D                               +
0CA1D CA                            DEX
0CA1E 86 47                         STX move_block_pointer
0CA20                           
0CA20                               ;; = Set move block tile type
0CA20 A5 13                         LDA temp+8
0CA22 9D 84 03                      STA move_block_tile_type,x
0CA25                           
0CA25                               ;; - Set move block X position
0CA25 A5 0E                         LDA temp+3
0CA27 29 0F                         AND #%00001111
0CA29 A8                            TAY
0CA2A C8                            INY
0CA2B B9 CA DA                      LDA tbl_Times16,y
0CA2E 9D 78 03                      STA move_block_x,x
0CA31                               
0CA31                               ;; - Set move block Y position
0CA31 A5 0E                         LDA temp+3
0CA33 29 F0                         AND #%11110000
0CA35 18                            CLC
0CA36 69 30                         ADC #$30
0CA38 9D 7C 03                      STA move_block_y,x
0CA3B DE 7C 03                      DEC move_block_y,x
0CA3E                               
0CA3E                               ;; - Set timer to 16 (+1) frames
0CA3E A9 11                         LDA #$11
0CA40 9D 80 03                      STA move_block_timer,x
0CA43                               
0CA43                               ;; - Set move direction
0CA43 A5 41                         LDA move_block_space_to_check
0CA45 29 81                         AND #%10000001
0CA47 18                            CLC
0CA48 2A                            ROL
0CA49 69 00                         ADC #$00
0CA4B 85 0F                         STA temp+4
0CA4D                               
0CA4D                               ;; - Set block color as ball color and add direction
0CA4D A5 42                         LDA ball_flags
0CA4F 29 E0                         AND #BALL_COLOR
0CA51 05 0F                         ORA temp+4
0CA53 9D 88 03                      STA move_block_flags,x
0CA56                               
0CA56                               ;; - Restore original X
0CA56 A6 0E                         LDX temp+3
0CA58                               
0CA58                               ;; - Initiate move sound effect
0CA58 A9 18                         LDA #$18
0CA5A 85 5A                         STA sfx_timer+1
0CA5C                           
0CA5C                               ;; Return
0CA5C 60                            RTS
0CA5D                           
0CA5D                           
0CA5D                           ;; Do not move the move block
0CA5D                           +dontMoveBlock:
0CA5D                           
0CA5D                               ;; Play bounce sound effect
0CA5D A2 02                         LDX #SFX_BOUNCE
0CA5F 20 E6 CF                      JSR sub_PreloadSfxFromX
0CA62                           
0CA62                               ;; Restore X from stack
0CA62 68                            PLA
0CA63 AA                            TAX
0CA64                               
0CA64                               ;; Return
0CA64 60                            RTS
0CA65                           
0CA65                           .include "game/subroutine/FlashEffect.asm"
0CA65                           
0CA65                           ;; Apply flashing light effect to background color
0CA65                           sub_FlashEffect:
0CA65 A2 00                         LDX #$00
0CA67 86 0C                         STX temp+1
0CA69 A9 3F                         LDA #$3F
0CA6B 85 0B                         STA temp
0CA6D                           
0CA6D                               -flashLoop:
0CA6D BD 3A DB                          LDA tbl_BackgroundFade,x
0CA70 85 0D                             STA temp+2
0CA72 20 FA D1                          JSR sub_WriteByteToPPUBuffer
0CA75 A9 0D                             LDA #$0D
0CA77 85 0C                             STA temp+1
0CA79 20 FA D1                          JSR sub_WriteByteToPPUBuffer
0CA7C A9 19                             LDA #$19
0CA7E 85 0C                             STA temp+1
0CA80 20 FA D1                          JSR sub_WriteByteToPPUBuffer
0CA83 A9 00                             LDA #$00
0CA85 85 0C                             STA temp+1
0CA87 A0 03                             LDY #$03
0CA89                                   -
0CA89 20 D1 C5                              JSR sub_WaitForNMI
0CA8C 88                                    DEY
0CA8D D0 FA                             BNE -
0CA8F E8                                INX
0CA90 E0 0A                             CPX #$0A
0CA92 D0 D9                         BNE -flashLoop
0CA94                               
0CA94 60                            RTS
0CA95                           
0CA95                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0CA95                           
0CA95                           ;; Get the PPU address from YX index
0CA95                           ;; - Expects YX index (aka tile offset) to be in the X register
0CA95                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0CA95                           
0CA95                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0CA95                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0CA95                           
0CA95                           sub_GetPPUAddrFromYXIndex:
0CA95 8A                            TXA
0CA96 29 C0                         AND #%11000000
0CA98 18                            CLC
0CA99 2A                            ROL
0CA9A 2A                            ROL
0CA9B 2A                            ROL
0CA9C 69 20                         ADC #$20
0CA9E 85 0B                         STA temp
0CAA0                               
0CAA0 8A                            TXA
0CAA1 29 0F                         AND #%00001111
0CAA3 0A                            ASL
0CAA4 85 0C                         STA temp+1
0CAA6                               
0CAA6 8A                            TXA
0CAA7 29 30                         AND #%00110000
0CAA9 0A                            ASL
0CAAA 0A                            ASL
0CAAB 18                            CLC
0CAAC 65 0C                         ADC temp+1
0CAAE 85 0C                         STA temp+1
0CAB0                               
0CAB0 A5 0B                         LDA temp
0CAB2 69 00                         ADC #$00
0CAB4 85 0B                         STA temp
0CAB6                               
0CAB6 A5 0C                         LDA temp+1
0CAB8 18                            CLC
0CAB9 69 C2                         ADC #$C2
0CABB 85 0C                         STA temp+1
0CABD                               
0CABD A5 0B                         LDA temp
0CABF 69 00                         ADC #$00
0CAC1 85 0B                         STA temp
0CAC3                           
0CAC3 60                            RTS
0CAC4                           
0CAC4                           .include "game/subroutine/InitiateNudge.asm"
0CAC4                           
0CAC4                           ;; Tell ball to nudge
0CAC4                           sub_InitiateNudge:
0CAC4 85 42                         STA ball_flags
0CAC6 A9 06                         LDA #NUDGE_FRAMES
0CAC8 85 49                         STA nudge_timer
0CACA 60                            RTS
0CACB                           
0CACB                           .include "game/subroutine/JumpToPointer.asm"
0CACB                           
0CACB                           ;; Helper subroutine to JSR to a variable pointer address
0CACB                           sub_JumpToPointer:
0CACB 6C 17 00                      JMP (pointer)
0CACE                               ;RTS must be handled by the routine (pointer) jumps to
0CACE                           
0CACE                           .include "game/subroutine/LoadAnimations.asm"
0CACE                           
0CACE                           sub_LoadAnimations:
0CACE                           
0CACE                               ;; Set up loop
0CACE A2 00                         LDX #$00
0CAD0                               -loop_load_animation:
0CAD0                                   ;; Check if current animation is active. If not, goto next
0CAD0 BD 74 03                          LDA explosion_active,x
0CAD3 D0 03                             BNE +
0CAD5 4C 60 CB                              JMP +next
0CAD8                                   +
0CAD8                           
0CAD8                                   ;; Check the explosion framecounter
0CAD8 BD 60 03                          LDA explosion_timer,x
0CADB D0 17                             BNE +
0CADD                                       ;; Frametimer is 0
0CADD                                       ;; Reset to animation speed
0CADD A9 04                                 LDA #ANIMATION_SPEED
0CADF 9D 60 03                              STA explosion_timer,x
0CAE2                           
0CAE2                                       ;; Set next animation frame, and check if we're done yet
0CAE2 FE 64 03                              INC explosion_currentframe,x
0CAE5 BD 64 03                              LDA explosion_currentframe,x
0CAE8 C9 0A                                 CMP #ANIM_SLIDES
0CAEA D0 08                                 BNE +
0CAEC                           
0CAEC                                       ;; If we're done, inactivate current explosion, go to the next one
0CAEC A9 00                                 LDA #$00
0CAEE 9D 74 03                              STA explosion_active,x
0CAF1 4C 60 CB                              JMP +next
0CAF4                                   +
0CAF4                           
0CAF4                                   ;; Load (x,y) position in temp variables
0CAF4 BD 6C 03                          LDA explosion_x,x
0CAF7 85 0C                             STA temp+1
0CAF9 85 0E                             STA temp+3
0CAFB BD 70 03                          LDA explosion_y,x
0CAFE 85 0D                             STA temp+2
0CB00                           
0CB00                                   ;; Load attribute in temp variable
0CB00 BD 68 03                          LDA explosion_attributes,x
0CB03 85 0F                             STA temp+4
0CB05                           
0CB05                                   ;; Load current frame into Y-register
0CB05 BC 64 03                          LDY explosion_currentframe,x
0CB08                           
0CB08                                   ;; Load current frame ROM address from table
0CB08 B9 5C D3                          LDA explosion_anim_lo,y
0CB0B 85 17                             STA pointer
0CB0D B9 52 D3                          LDA explosion_anim_hi,y
0CB10 85 18                             STA pointer+1
0CB12                           
0CB12                                   ;; Save x-register on stack
0CB12 8A                                TXA
0CB13 48                                PHA
0CB14                           
0CB14                                   ;; Load sprites into sprite RAM
0CB14 A6 48                             LDX sprite_ram_pointer
0CB16 A0 00                             LDY #$00
0CB18                           
0CB18                                   ;; Prepare (x,y) offset for loop
0CB18 84 0B                             STY temp
0CB1A                           
0CB1A                                   -loop_load_sprite:
0CB1A                                   
0CB1A                                       ;; Do not draw empty sprites
0CB1A B1 17                                 LDA (pointer),y
0CB1C F0 18                                 BEQ +nextSprite
0CB1E                                   
0CB1E                                           ;; Add y-position to sprite ram buffer
0CB1E A5 0D                                     LDA temp+2
0CB20 9D 00 02                                  STA ADDR_SPRITERAM,x
0CB23 E8                                        INX
0CB24                           
0CB24                                           ;; Get tile number from frame ROM address, and
0CB24                                           ;; add it to sprite ram buffer
0CB24 B1 17                                     LDA (pointer),y
0CB26 9D 00 02                                  STA ADDR_SPRITERAM,x
0CB29 E8                                        INX
0CB2A                           
0CB2A                                           ;; Add attribute data to sprite ram buffer
0CB2A A5 0F                                     LDA temp+4
0CB2C 9D 00 02                                  STA ADDR_SPRITERAM,x
0CB2F E8                                        INX
0CB30                           
0CB30                                           ;; Add x-position to sprite ram buffer
0CB30 A5 0E                                     LDA temp+3
0CB32 9D 00 02                                  STA ADDR_SPRITERAM,x
0CB35 E8                                        INX
0CB36                           
0CB36                                       +nextSprite:
0CB36                           
0CB36                                       ;; Check if all sprites are done
0CB36 C8                                    INY
0CB37 C0 09                                 CPY #SLIDE_SIZE
0CB39 F0 21                                 BEQ +updateSpriteRamPointer
0CB3B                           
0CB3B                                       ;; Update x value
0CB3B A5 0E                                 LDA temp+3
0CB3D 18                                    CLC
0CB3E 69 08                                 ADC #$08
0CB40 85 0E                                 STA temp+3
0CB42                           
0CB42                                       ;; Update temp for x,y position
0CB42 E6 0B                                 INC temp
0CB44 A5 0B                                 LDA temp
0CB46 C9 03                                 CMP #SLIDE_WIDTH
0CB48 D0 0F                                 BNE +
0CB4A                                           ;; Row is done; reset x-position
0CB4A A5 0C                                     LDA temp+1
0CB4C 85 0E                                     STA temp+3
0CB4E                           
0CB4E                                           ;; Update y-position
0CB4E A5 0D                                     LDA temp+2
0CB50 18                                        CLC
0CB51 69 08                                     ADC #$08
0CB53 85 0D                                     STA temp+2
0CB55                           
0CB55                                           ;; Reset row timer
0CB55 A9 00                                     LDA #$00
0CB57 85 0B                                     STA temp
0CB59                                       +
0CB59                           
0CB59 4C 1A CB                          JMP -loop_load_sprite
0CB5C                           
0CB5C                               +updateSpriteRamPointer:
0CB5C 86 48                             STX sprite_ram_pointer
0CB5E                           
0CB5E                                   ;; Retrieve x-register from stack
0CB5E 68                                PLA
0CB5F AA                                TAX
0CB60                           
0CB60                               +next:
0CB60                                   ;; Check if all animations have been updated
0CB60 E8                                INX
0CB61 E0 04                             CPX #MAX_ANIMATIONS
0CB63 F0 03                             BEQ +cleanUpSpriteRam
0CB65                           
0CB65 4C D0 CA                      JMP -loop_load_animation
0CB68                           
0CB68                           +cleanUpSpriteRam:
0CB68 A6 48                         LDX sprite_ram_pointer
0CB6A A9 EF                         LDA #$EF
0CB6C                               -
0CB6C 9D 00 02                          STA ADDR_SPRITERAM,x
0CB6F E8                                INX
0CB70 D0 FA                         BNE -
0CB72                               
0CB72 60                            RTS
0CB73                               
0CB73                           .include "game/subroutine/LoadGameScreen.asm"
0CB73                           
0CB73                           ;; Load the game screen, based on level number
0CB73                           sub_LoadGameScreen:
0CB73                           
0CB73                               ;; Clear the screen
0CB73 20 C1 C6                      JSR sub_ClearScreen
0CB76                               
0CB76                               ;; Clear collision and attribute data; reset blocks left in the process
0CB76 A2 00                         LDX #$00
0CB78 8A                            TXA
0CB79 85 4F                         STA blocks_left
0CB7B                               -
0CB7B 9D 00 04                          STA tile_type,x
0CB7E E8                                INX
0CB7F D0 FA                         BNE -
0CB81                               
0CB81                               ;; Get pointer from current level
0CB81 A6 4D                         LDX current_level
0CB83 BD 7C DA                      LDA tbl_lvl_layout_lo,x
0CB86 85 17                         STA pointer
0CB88 BD 62 DA                      LDA tbl_lvl_layout_hi,x
0CB8B 85 18                         STA pointer+1
0CB8D                           
0CB8D                               ;; Set up the loop
0CB8D A0 00                         LDY #$00
0CB8F                           -drawRowColumnLoop:
0CB8F                           
0CB8F                               ;; Load (x,y) of current set of tiles
0CB8F B1 17                         LDA (pointer),y
0CB91                           
0CB91                               ;; Check if level is done; if so, skip the loop
0CB91 C9 FF                         CMP #LEVEL_END
0CB93 D0 03                         BNE +
0CB95 4C DE CC                          JMP +doneLevelLoad
0CB98                               +
0CB98                           
0CB98                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CB98 85 0B                         STA temp
0CB9A C8                            INY
0CB9B B1 17                         LDA (pointer),y
0CB9D 85 0C                         STA temp+1
0CB9F                               
0CB9F                               ;; Convert (x,y) to PPU address
0CB9F                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CB9F A5 0B                         LDA temp
0CBA1 29 0F                         AND #%00001111
0CBA3 4A                            LSR
0CBA4 4A                            LSR
0CBA5 09 20                         ORA #$20
0CBA7 85 0D                         STA temp+2
0CBA9                               
0CBA9                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CBA9 A5 0B                         LDA temp
0CBAB 29 F0                         AND #%11110000
0CBAD 4A                            LSR
0CBAE 4A                            LSR
0CBAF 4A                            LSR
0CBB0 85 0E                         STA temp+3
0CBB2                               
0CBB2 A5 0B                         LDA temp
0CBB4 29 03                         AND #%00000011
0CBB6 AA                            TAX
0CBB7 BD DA DA                      LDA tbl_Times64,x
0CBBA 18                            CLC
0CBBB 65 0E                         ADC temp+3
0CBBD 18                            CLC
0CBBE 69 C2                         ADC #$C2
0CBC0 85 0E                         STA temp+3
0CBC2                               
0CBC2                               ;; Add carry to temp+2
0CBC2 A5 0D                         LDA temp+2
0CBC4 69 00                         ADC #$00
0CBC6 85 0D                         STA temp+2
0CBC8                           
0CBC8                               ;; Convert tile data to loop count and tile type
0CBC8                               ;; temp+4 = color
0CBC8 A5 0C                         LDA temp+1
0CBCA 29 07                         AND #%00000111
0CBCC 85 0F                         STA temp+4
0CBCE                               
0CBCE                               ;; If color = 7, this is a wall
0CBCE C9 07                         CMP #%00000111
0CBD0 F0 12                         BEQ +wallHack
0CBD2                                   
0CBD2                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CBD2 29 01                             AND #%00000001
0CBD4 F0 02                             BEQ +
0CBD6 A9 05                                 LDA #$05
0CBD8                                   +
0CBD8 85 12                             STA temp+7
0CBDA                                
0CBDA                                   ;; temp+5 = tile type
0CBDA A5 0C                             LDA temp+1
0CBDC 4A                                LSR
0CBDD 4A                                LSR
0CBDE 4A                                LSR
0CBDF 29 03                             AND #%00000011
0CBE1 4C EA CB                          JMP +setTileType
0CBE4                               +wallHack:
0CBE4                               
0CBE4                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CBE4 A9 00                         LDA #$00
0CBE6 85 12                         STA temp+7
0CBE8 A9 04                         LDA #$04
0CBEA                           
0CBEA                           +setTileType:    
0CBEA 85 10                         STA temp+5
0CBEC                               
0CBEC                               ;; X = tile offset
0CBEC 18                            CLC
0CBED 65 12                         ADC temp+7
0CBEF AA                            TAX
0CBF0                               
0CBF0                               ;; temp+6 = number of tiles
0CBF0 A5 0C                         LDA temp+1
0CBF2 29 60                         AND #%01100000
0CBF4 4A                            LSR
0CBF5 4A                            LSR
0CBF6 4A                            LSR
0CBF7 4A                            LSR
0CBF8 4A                            LSR
0CBF9 85 11                         STA temp+6
0CBFB                               
0CBFB                               ;; Translate (x,y) to (y,x) for tile RAM
0CBFB A5 0B                         LDA temp
0CBFD 0A                            ASL
0CBFE 0A                            ASL
0CBFF 0A                            ASL
0CC00 0A                            ASL
0CC01 85 13                         STA temp+8
0CC03 A5 0B                         LDA temp
0CC05 4A                            LSR
0CC06 4A                            LSR
0CC07 4A                            LSR
0CC08 4A                            LSR
0CC09 05 13                         ORA temp+8
0CC0B 85 0B                         STA temp
0CC0D                               
0CC0D                               ;; Set up loop
0CC0D 98                            TYA
0CC0E 48                            PHA
0CC0F A4 11                         LDY temp+6
0CC11                           
0CC11                               -drawTileLoop:
0CC11                                   ;; Write PPU address
0CC11 2C 02 20                          BIT PPU_STATUS
0CC14 A5 0D                             LDA temp+2
0CC16 8D 06 20                          STA PPU_ADDR
0CC19 A5 0E                             LDA temp+3
0CC1B 8D 06 20                          STA PPU_ADDR
0CC1E                                   
0CC1E                                   ;; Write first and second tile
0CC1E BD DE DA                          LDA tbl_GametileTopLeft,x
0CC21 8D 07 20                          STA PPU_DATA
0CC24 BD E8 DA                          LDA tbl_GametileTopRight,x
0CC27 8D 07 20                          STA PPU_DATA
0CC2A                                   
0CC2A                                   ;; Update PPU address
0CC2A 2C 02 20                          BIT PPU_STATUS
0CC2D A5 0D                             LDA temp+2
0CC2F 8D 06 20                          STA PPU_ADDR
0CC32 A5 0E                             LDA temp+3
0CC34 18                                CLC
0CC35 69 20                             ADC #$20
0CC37 8D 06 20                          STA PPU_ADDR
0CC3A                                   
0CC3A                                   ;; Write third and fourth tile
0CC3A BD F2 DA                          LDA tbl_GametileBottomLeft,x
0CC3D 8D 07 20                          STA PPU_DATA
0CC40 BD FC DA                          LDA tbl_GametileBottomRight,x
0CC43 8D 07 20                          STA PPU_DATA
0CC46                           
0CC46                                   ;; Push x-register to stack
0CC46 8A                                TXA
0CC47 48                                PHA
0CC48                           
0CC48                                   ;; Update tile RAM (aka collision table)
0CC48 A6 10                             LDX temp+5
0CC4A BD 06 DB                          LDA tbl_GameTileRamByte,x
0CC4D 05 0F                             ORA temp+4
0CC4F 0A                                ASL
0CC50 09 01                             ORA #%00000001
0CC52 A6 0B                             LDX temp
0CC54 9D 00 04                          STA tile_type,x
0CC57                           
0CC57                                   ;; Check if shade 1 should be drawn
0CC57 E8                                INX
0CC58 BD 00 04                          LDA tile_type,x
0CC5B D0 05                             BNE +
0CC5D A9 00                                 LDA #$00
0CC5F 8D 07 20                              STA PPU_DATA
0CC62                                   +
0CC62                                   
0CC62                                   ;; Check if shade 2 should be drawn
0CC62 A5 0E                             LDA temp+3
0CC64 18                                CLC
0CC65 69 41                             ADC #$41
0CC67 85 0E                             STA temp+3
0CC69 A5 0D                             LDA temp+2
0CC6B 69 00                             ADC #$00
0CC6D 85 0D                             STA temp+2
0CC6F                                   
0CC6F 8A                                TXA
0CC70 18                                CLC
0CC71 69 0F                             ADC #$0F
0CC73 AA                                TAX
0CC74                                   
0CC74 BD 00 04                          LDA tile_type,x
0CC77 D0 0F                             BNE +
0CC79 A5 0D                                 LDA temp+2
0CC7B 8D 06 20                              STA PPU_ADDR
0CC7E A5 0E                                 LDA temp+3
0CC80 8D 06 20                              STA PPU_ADDR
0CC83 A9 00                                 LDA #$00
0CC85 8D 07 20                              STA PPU_DATA
0CC88                                   +
0CC88                           
0CC88                                   ;; Check if shade 3 should be drawn
0CC88 E8                                INX
0CC89 E6 0E                             INC temp+3
0CC8B BD 00 04                          LDA tile_type,x
0CC8E D0 0F                             BNE +
0CC90 A5 0D                                 LDA temp+2
0CC92 8D 06 20                              STA PPU_ADDR
0CC95 A5 0E                                 LDA temp+3
0CC97 8D 06 20                              STA PPU_ADDR
0CC9A A9 00                                 LDA #$00
0CC9C 8D 07 20                              STA PPU_DATA
0CC9F                                   +
0CC9F                                   
0CC9F                                   ;; Restore x-register from stack
0CC9F 68                                PLA
0CCA0 AA                                TAX
0CCA1                                   
0CCA1                                   ;; Reset pointer for next tile
0CCA1 A5 0E                             LDA temp+3
0CCA3 38                                SEC
0CCA4 E9 42                             SBC #$42
0CCA6 85 0E                             STA temp+3
0CCA8 A5 0D                             LDA temp+2
0CCAA E9 00                             SBC #$00
0CCAC 85 0D                             STA temp+2
0CCAE                                   
0CCAE                                   ;; Draw next metatile in this loop (if any left)
0CCAE 88                                DEY
0CCAF 30 27                             BMI +doneDrawingRowColumn
0CCB1                                   
0CCB1                                   ;; Is it a row or a column?
0CCB1 A5 0C                             LDA temp+1
0CCB3 10 17                             BPL +
0CCB5                                       ;; It is a column: move pointer down (+$40)
0CCB5 A5 0E                                 LDA temp+3
0CCB7 18                                    CLC
0CCB8 69 40                                 ADC #$40
0CCBA 85 0E                                 STA temp+3
0CCBC A5 0D                                 LDA temp+2
0CCBE 69 00                                 ADC #$00
0CCC0 85 0D                                 STA temp+2
0CCC2                                       
0CCC2                                       ;; Add 16 to temp (as a tile RAM pointer)
0CCC2 A5 0B                                 LDA temp
0CCC4 18                                    CLC
0CCC5 69 10                                 ADC #$10
0CCC7 85 0B                                 STA temp
0CCC9 4C D5 CC                              JMP +drawNextTile
0CCCC                                   +
0CCCC                                   
0CCCC                                   ;; It is a row: move pointer right (+$02)
0CCCC A5 0E                             LDA temp+3
0CCCE 18                                CLC
0CCCF 69 02                             ADC #$02
0CCD1 85 0E                             STA temp+3
0CCD3                                   
0CCD3                                   ;; Add 1 to temp (as a tile RAM pointer)
0CCD3 E6 0B                             INC temp
0CCD5                           
0CCD5                               
0CCD5                               ;; Next tile in the row/column
0CCD5                                   +drawNextTile:
0CCD5 4C 11 CC                      JMP -drawTileLoop
0CCD8                           
0CCD8                               ;; Go to the next set of tiles
0CCD8                           +doneDrawingRowColumn:
0CCD8 68                            PLA
0CCD9 A8                            TAY
0CCDA C8                            INY
0CCDB 4C 8F CB                      JMP -drawRowColumnLoop
0CCDE                           
0CCDE                           ;; Level loading is done
0CCDE                           +doneLevelLoad:
0CCDE                           
0CCDE                               ;; Count number of color blocks
0CCDE A2 A0                         LDX #160
0CCE0                               -
0CCE0 BD FF 03                          LDA tile_type-1,x
0CCE3 29 80                             AND #%10000000
0CCE5 F0 02                             BEQ +
0CCE7 E6 4F                                 INC blocks_left
0CCE9                                   +
0CCE9 CA                                DEX
0CCEA D0 F4                         BNE -
0CCEC                           
0CCEC                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CCEC A9 20                         LDA #$20
0CCEE 8D 06 20                      STA PPU_ADDR
0CCF1 A9 A2                         LDA #$A2
0CCF3 8D 06 20                      STA PPU_ADDR
0CCF6 A9 35                         LDA #$35
0CCF8 20 33 CF                      JSR sub_Draw28HorizontalTiles
0CCFB                           
0CCFB                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CCFB A9 23                         LDA #$23
0CCFD 8D 06 20                      STA PPU_ADDR
0CD00 A9 42                         LDA #$42
0CD02 8D 06 20                      STA PPU_ADDR
0CD05 A9 31                         LDA #$31
0CD07 20 33 CF                      JSR sub_Draw28HorizontalTiles
0CD0A                           
0CD0A                               ;; Left & right game bounds
0CD0A                               ;; Set PPU_ADDR and store in temp variables
0CD0A A9 20                         LDA #$20
0CD0C 85 0B                         STA temp
0CD0E 8D 06 20                      STA PPU_ADDR
0CD11 A9 C1                         LDA #$C1
0CD13 85 0C                         STA temp+1
0CD15 8D 06 20                      STA PPU_ADDR
0CD18                               
0CD18                               ;; Set vertical bound tile and set up loop
0CD18 A0 33                         LDY #$33
0CD1A A2 14                         LDX #20
0CD1C                               -
0CD1C                                   ;; Show left tile
0CD1C 8C 07 20                          STY PPU_DATA
0CD1F                                   
0CD1F                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CD1F A5 0B                             LDA temp
0CD21 8D 06 20                          STA PPU_ADDR
0CD24 A5 0C                             LDA temp+1
0CD26 18                                CLC
0CD27 69 1D                             ADC #29
0CD29 85 0C                             STA temp+1
0CD2B 8D 06 20                          STA PPU_ADDR
0CD2E                           
0CD2E                                   ;; Show right tile
0CD2E 8C 07 20                          STY PPU_DATA
0CD31                           
0CD31                                   ;; Check if we're done yet
0CD31 CA                                DEX
0CD32 F0 18                             BEQ +drawCorners
0CD34                                   
0CD34                                   ;; Not done yet: add 3 to low byte for next left bound
0CD34 A5 0C                             LDA temp+1
0CD36 18                                CLC
0CD37 69 03                             ADC #3
0CD39 85 0C                             STA temp+1
0CD3B                                   
0CD3B                                   ;; Apply carry to high byte
0CD3B A5 0B                             LDA temp
0CD3D 69 00                             ADC #$00
0CD3F 85 0B                             STA temp
0CD41                                   
0CD41                                   ;; Store next PPU_ADDR to draw at
0CD41 8D 06 20                          STA PPU_ADDR
0CD44 A5 0C                             LDA temp+1
0CD46 8D 06 20                          STA PPU_ADDR
0CD49 4C 1C CD                      JMP -
0CD4C                               
0CD4C                               
0CD4C                           
0CD4C                           +drawCorners:
0CD4C                               ;; Draw the corners of the playing field
0CD4C A9 20                         LDA #$20
0CD4E 8D 06 20                      STA PPU_ADDR
0CD51 A9 A1                         LDA #$A1
0CD53 8D 06 20                      STA PPU_ADDR
0CD56 A9 39                         LDA #$39
0CD58 8D 07 20                      STA PPU_DATA
0CD5B                           
0CD5B A9 20                         LDA #$20
0CD5D 8D 06 20                      STA PPU_ADDR
0CD60 A9 BE                         LDA #$BE
0CD62 8D 06 20                      STA PPU_ADDR
0CD65 A9 3A                         LDA #$3A
0CD67 8D 07 20                      STA PPU_DATA
0CD6A                           
0CD6A A9 23                         LDA #$23
0CD6C 8D 06 20                      STA PPU_ADDR
0CD6F A9 41                         LDA #$41
0CD71 8D 06 20                      STA PPU_ADDR
0CD74 A9 36                         LDA #$36
0CD76 8D 07 20                      STA PPU_DATA
0CD79                           
0CD79 A9 23                         LDA #$23
0CD7B 8D 06 20                      STA PPU_ADDR
0CD7E A9 5E                         LDA #$5E
0CD80 8D 06 20                      STA PPU_ADDR
0CD83 A9 34                         LDA #$34
0CD85 8D 07 20                      STA PPU_DATA
0CD88                               
0CD88                           
0CD88                               ;; Draw the hud labels
0CD88 A9 20                         LDA #$20
0CD8A 8D 06 20                      STA PPU_ADDR
0CD8D A9 62                         LDA #$62
0CD8F 8D 06 20                      STA PPU_ADDR
0CD92 A2 00                         LDX #$00
0CD94                               -
0CD94 BD 0B DB                          LDA tbl_HudText,x
0CD97 8D 07 20                          STA PPU_DATA
0CD9A E8                                INX
0CD9B E0 1E                             CPX #$1E
0CD9D D0 F5                         BNE -
0CD9F                           
0CD9F                           
0CD9F                               ;; Draw the current score
0CD9F A9 20                         LDA #$20
0CDA1 8D 06 20                      STA PPU_ADDR
0CDA4 A9 83                         LDA #$83
0CDA6 8D 06 20                      STA PPU_ADDR
0CDA9 A2 00                         LDX #$00
0CDAB                               -
0CDAB B5 2B                             LDA ball_score,x
0CDAD 18                                CLC
0CDAE 69 01                             ADC #$01
0CDB0 8D 07 20                          STA PPU_DATA
0CDB3 E8                                INX
0CDB4 E0 06                             CPX #$06
0CDB6 D0 F3                         BNE -
0CDB8                           
0CDB8                           
0CDB8                               ;; Draw the level number
0CDB8                               ;; (with primitive HEX>DEC)
0CDB8 A5 4D                         LDA current_level
0CDBA 18                            CLC
0CDBB 69 01                         ADC #$01
0CDBD 85 0C                         STA temp+1
0CDBF                               
0CDBF C9 14                         CMP #20
0CDC1 B0 13                         BCS +tempIsTwo
0CDC3                               
0CDC3 C9 0A                         CMP #10
0CDC5 B0 05                         BCS +tempIsOne
0CDC7                               
0CDC7 A9 00                         LDA #$00
0CDC9 4C DD CD                      JMP +setTemp
0CDCC                               
0CDCC                           +tempIsOne:
0CDCC 38                            SEC
0CDCD E9 0A                         SBC #10
0CDCF 85 0C                         STA temp+1
0CDD1 A9 01                         LDA #$01
0CDD3 4C DD CD                      JMP +setTemp
0CDD6                               
0CDD6                           +tempIsTwo:
0CDD6 38                            SEC
0CDD7 E9 14                         SBC #20
0CDD9 85 0C                         STA temp+1
0CDDB A9 02                         LDA #$02
0CDDD                           
0CDDD                           +setTemp:
0CDDD 85 0B                         STA temp
0CDDF                               
0CDDF E6 0B                         INC temp
0CDE1 E6 0C                         INC temp+1
0CDE3                               
0CDE3 A9 20                         LDA #$20
0CDE5 8D 06 20                      STA PPU_ADDR
0CDE8 A9 8B                         LDA #$8B
0CDEA 8D 06 20                      STA PPU_ADDR
0CDED A5 0B                         LDA temp
0CDEF 8D 07 20                      STA PPU_DATA
0CDF2 A5 0C                         LDA temp+1
0CDF4 8D 07 20                      STA PPU_DATA
0CDF7                           
0CDF7                           
0CDF7                               ;; Draw lives (presumes lives to be capped at 9)
0CDF7 A9 20                         LDA #$20
0CDF9 8D 06 20                      STA PPU_ADDR
0CDFC A9 92                         LDA #$92
0CDFE 8D 06 20                      STA PPU_ADDR
0CE01 A6 2A                         LDX ball_lives
0CE03 E8                            INX
0CE04 8E 07 20                      STX PPU_DATA
0CE07                           
0CE07                           
0CE07                               ;; Set and draw bonus
0CE07 A9 07                         LDA #$07
0CE09 85 37                         STA ball_bonus
0CE0B A9 09                         LDA #$09
0CE0D 85 38                         STA ball_bonus+1
0CE0F 85 39                         STA ball_bonus+2
0CE11                               
0CE11 A9 20                         LDA #$20
0CE13 8D 06 20                      STA PPU_ADDR
0CE16 A9 9A                         LDA #$9A
0CE18 8D 06 20                      STA PPU_ADDR
0CE1B A2 00                         LDX #$00
0CE1D                               -
0CE1D B5 37                             LDA ball_bonus,x
0CE1F 18                                CLC
0CE20 69 01                             ADC #$01
0CE22 8D 07 20                          STA PPU_DATA
0CE25 E8                                INX
0CE26 E0 03                             CPX #$03
0CE28 D0 F3                         BNE -
0CE2A                           
0CE2A                           
0CE2A                               ;; Set attribute data to RAM
0CE2A                               
0CE2A                               ;; Byte 0-6 of attribute ram should be #%10100000
0CE2A A2 00                         LDX #$00
0CE2C A9 A0                         LDA #$A0
0CE2E                               -
0CE2E 9D A0 04                          STA tile_attributes,x
0CE31 E8                                INX
0CE32 E0 07                             CPX #$07
0CE34 D0 F8                         BNE -
0CE36                               
0CE36                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CE36 A9 E0                         LDA #$E0
0CE38 9D A0 04                      STA tile_attributes,x
0CE3B E8                            INX
0CE3C                           
0CE3C                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CE3C                           
0CE3C                           -attributeLoop:
0CE3C                               ;; Reset current attribute value
0CE3C A9 00                         LDA #$00
0CE3E 85 0D                         STA temp+2
0CE40                           
0CE40                               ;; Get first metatile in tile ram based on attribute index
0CE40                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CE40 8A                            TXA
0CE41                           
0CE41 38                            SEC
0CE42 E9 08                         SBC #$08
0CE44 85 0C                         STA temp+1      ; attr - 8 (temp1)
0CE46 0A                            ASL             ; * 2
0CE47 85 0B                         STA temp        ; temp = temp1 * 2
0CE49                           
0CE49 A5 0C                         LDA temp+1      ; temp1
0CE4B 29 F8                         AND #%11111000  ; rounded down to 8's
0CE4D 0A                            ASL             ; * 2
0CE4E 18                            CLC
0CE4F 65 0B                         ADC temp        ; + temp1 * 2
0CE51 85 0B                         STA temp        ; first metatile
0CE53                           
0CE53                               ;; Store first metatile in y-register
0CE53 A8                            TAY
0CE54                           
0CE54                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CE54 8A                            TXA
0CE55 29 07                         AND #%00000111
0CE57 C9 07                         CMP #%00000111
0CE59 F0 0B                         BEQ +
0CE5B                           
0CE5B                               ;; If X >= $30, don't apply bottom right metatile
0CE5B E0 30                         CPX #$30
0CE5D B0 07                         BCS +
0CE5F                               
0CE5F                               ;; Add metatile1 subpalette to attribute value
0CE5F B9 00 04                      LDA tile_type,y
0CE62 29 0C                         AND #%00001100
0CE64 85 0D                         STA temp+2
0CE66                               +
0CE66                           
0CE66                           
0CE66                               ;; Apply second metatile
0CE66 88                            DEY
0CE67                           
0CE67                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CE67 8A                            TXA
0CE68 29 07                         AND #%00000111
0CE6A F0 10                         BEQ +
0CE6C                           
0CE6C                               ;; If X >= $30, don't apply bottom left metatile
0CE6C E0 30                         CPX #$30
0CE6E B0 0C                         BCS +
0CE70                           
0CE70                           
0CE70                           
0CE70                               ;; Add metatile2 subpalette to attribute value
0CE70 B9 00 04                      LDA tile_type,y
0CE73 29 0C                         AND #%00001100
0CE75 4A                            LSR
0CE76 4A                            LSR
0CE77 05 0D                         ORA temp+2
0CE79 4C 7E CE                      JMP ++
0CE7C                               +
0CE7C A5 0D                         LDA temp+2
0CE7E                               ++
0CE7E 0A                            ASL
0CE7F 0A                            ASL
0CE80 85 0D                         STA temp+2
0CE82                           
0CE82                           
0CE82                               ;; Apply third metatile
0CE82 98                            TYA
0CE83 38                            SEC
0CE84 E9 0F                         SBC #$0F
0CE86 A8                            TAY
0CE87                           
0CE87                               ;; If X MOD 8 == 7, don't apply top right metatile
0CE87 8A                            TXA
0CE88 29 07                         AND #%00000111
0CE8A C9 07                         CMP #%00000111
0CE8C F0 11                         BEQ +
0CE8E                           
0CE8E                               ;; If X < $10, don't apply top right metatile
0CE8E 8A                            TXA
0CE8F 29 F0                         AND #%11110000
0CE91 F0 0C                         BEQ +
0CE93                           
0CE93                               ;; Add metatile3 subpalette to attribute value
0CE93 B9 00 04                      LDA tile_type,y
0CE96 29 0C                         AND #%00001100
0CE98 4A                            LSR
0CE99 4A                            LSR
0CE9A 05 0D                         ORA temp+2
0CE9C 4C A1 CE                      JMP ++
0CE9F                               +
0CE9F A5 0D                         LDA temp+2
0CEA1                               ++
0CEA1 0A                            ASL
0CEA2 0A                            ASL
0CEA3 85 0D                         STA temp+2
0CEA5                           
0CEA5                           
0CEA5                               ;; Apply fourth metatile
0CEA5 88                            DEY
0CEA6                           
0CEA6                               ;; If X MOD 8 == 0, don't apply top left metatile
0CEA6 8A                            TXA
0CEA7 29 07                         AND #%00000111
0CEA9 F0 11                         BEQ +
0CEAB                           
0CEAB                               ;; If X < $10, don't apply top left metatile
0CEAB 8A                            TXA
0CEAC 29 F0                         AND #%11110000
0CEAE F0 0C                         BEQ +
0CEB0                           
0CEB0                               ;; Add metatile4 subpalette to attribute value
0CEB0 B9 00 04                      LDA tile_type,y
0CEB3 29 0C                         AND #%00001100
0CEB5 4A                            LSR
0CEB6 4A                            LSR
0CEB7 05 0D                         ORA temp+2
0CEB9 4C BE CE                      JMP ++
0CEBC                               +
0CEBC A5 0D                         LDA temp+2
0CEBE                               ++
0CEBE 9D A0 04                      STA tile_attributes,x
0CEC1                           
0CEC1                               ;; Check the next attribute, if any left
0CEC1 E8                            INX
0CEC2 E0 38                         CPX #$38
0CEC4 F0 03                         BEQ +
0CEC6 4C 3C CE                          JMP -attributeLoop
0CEC9                               +
0CEC9                           
0CEC9                               ;; Stream attribute RAM to PPU
0CEC9 2C 02 20                      BIT PPU_STATUS
0CECC A9 23                         LDA #$23
0CECE 8D 06 20                      STA PPU_ADDR
0CED1 A9 C0                         LDA #$C0
0CED3 8D 06 20                      STA PPU_ADDR
0CED6 A2 00                         LDX #$00
0CED8                               -
0CED8 BD A0 04                          LDA tile_attributes,x
0CEDB 8D 07 20                          STA PPU_DATA
0CEDE E8                                INX
0CEDF E0 40                             CPX #$40
0CEE1 D0 F5                         BNE -
0CEE3                           
0CEE3                               ;; Set initial ball position
0CEE3 A6 4D                         LDX current_level
0CEE5 BD 96 DA                      LDA tbl_lvl_ball_startpos,x
0CEE8 29 F0                         AND #%11110000
0CEEA 18                            CLC
0CEEB 69 34                         ADC #$34
0CEED 85 24                         STA ball_ypos_hi
0CEEF BD 96 DA                      LDA tbl_lvl_ball_startpos,x
0CEF2 0A                            ASL
0CEF3 0A                            ASL
0CEF4 0A                            ASL
0CEF5 0A                            ASL
0CEF6 18                            CLC
0CEF7 69 14                         ADC #$14
0CEF9 85 22                         STA ball_xpos_hi
0CEFB A9 00                         LDA #$00
0CEFD 85 23                         STA ball_xpos_lo
0CEFF 85 25                         STA ball_ypos_lo
0CF01                               
0CF01                               ;; Set initial ball color and direction
0CF01 BD B0 DA                      LDA tbl_lvl_ball_init,x
0CF04 29 F0                         AND #%11110000
0CF06 85 42                         STA ball_flags
0CF08 20 2C C7                      JSR sub_ColorizeBall
0CF0B                               
0CF0B                               ;; Reset bonus timer
0CF0B A9 08                         LDA #BONUS_FRAMES
0CF0D 85 4A                         STA bonus_timer
0CF0F                               
0CF0F                               ;; Play background noise
0CF0F A9 08                         LDA #$08
0CF11 8D 15 40                      STA APU_STATUS
0CF14 8D 0F 40                      STA NOISE_LENGTH
0CF17 A9 0E                         LDA #$0E
0CF19 85 52                         STA current_noise
0CF1B A9 00                         LDA #$00
0CF1D 85 50                         STA max_noise
0CF1F 85 53                         STA noise_timer
0CF21 85 51                         STA sweep_noise
0CF23 85 56                         STA noise_muted
0CF25 20 3F C6                      JSR sub_BackgroundNoise
0CF28                           
0CF28                               ;; Freeze the ball
0CF28 A5 42                         LDA ball_flags
0CF2A 09 04                         ORA #FREEZE_BALL
0CF2C 85 42                         STA ball_flags
0CF2E                               
0CF2E                               ;; Start unfreeze timer
0CF2E A9 30                         LDA #$30
0CF30 85 4C                         STA unfreeze_timer
0CF32                           
0CF32                               ;; Return
0CF32 60                            RTS
0CF33                           
0CF33                           
0CF33                           ;; Subroutine: draw 28 tiles in a row
0CF33                           sub_Draw28HorizontalTiles:
0CF33 A2 1C                         LDX #28
0CF35                               -
0CF35 8D 07 20                          STA PPU_DATA
0CF38 CA                                DEX
0CF39 D0 FA                         BNE -
0CF3B 60                            RTS
0CF3C                           
0CF3C                           .include "game/subroutine/LoadIntroScreen.asm"
0CF3C                           
0CF3C                           ;; Load the intro screen
0CF3C                           sub_LoadIntroScreen:
0CF3C                           
0CF3C                               ;; Load intro palette
0CF3C 2C 02 20                      BIT PPU_STATUS
0CF3F A9 3F                         LDA #$3F
0CF41 8D 06 20                      STA PPU_ADDR
0CF44 A9 00                         LDA #$00
0CF46 8D 06 20                      STA PPU_ADDR
0CF49 A2 00                         LDX #$00
0CF4B                               -
0CF4B BD 20 D2                          LDA tbl_IntroScreenPalette,x
0CF4E 8D 07 20                          STA PPU_DATA
0CF51 E8                                INX
0CF52 E0 20                             CPX #$20
0CF54 D0 F5                         BNE -
0CF56                               
0CF56                               ;; Put ball in the middle
0CF56 A9 7C                         LDA #$7C
0CF58 85 22                         STA ball_xpos_hi
0CF5A 85 24                         STA ball_ypos_hi
0CF5C                           
0CF5C                               ;; Clear the screen
0CF5C 20 C1 C6                      JSR sub_ClearScreen
0CF5F                           
0CF5F                               ;; Set up intro screen draw loop
0CF5F A2 00                         LDX #$00
0CF61                           
0CF61                           -loop_IntroScreenData:
0CF61                           
0CF61                               ;; Get current byte from intro screen data
0CF61 BD 48 D2                      LDA tbl_IntroScreenData,x
0CF64                           
0CF64                               ;; If current byte is #$3E, draw high score
0CF64 C9 3E                         CMP #$3E
0CF66 D0 14                         BNE +
0CF68 A0 00                             LDY #$00
0CF6A                                   -
0CF6A B9 05 00                              LDA hi_score,y
0CF6D 18                                    CLC
0CF6E 69 01                                 ADC #1
0CF70 8D 07 20                              STA PPU_DATA
0CF73 C8                                    INY
0CF74 C0 06                                 CPY #$06
0CF76 D0 F2                             BNE -
0CF78 E8                                INX
0CF79 4C 61 CF                          JMP -loop_IntroScreenData
0CF7C                               +
0CF7C                           
0CF7C                               ;; If current byte is #$3F, we're done drawing.
0CF7C C9 3F                         CMP #$3F
0CF7E D0 03                         BNE +
0CF80 4C CD CF                          JMP +goToEndIntroScreen
0CF83                               +
0CF83                           
0CF83                               ;; If highest bits are %11, draw a plain tile
0CF83 29 C0                         AND #%11000000
0CF85 D0 03                         BNE +
0CF87 4C AD CF                          JMP +drawTile
0CF8A                               +
0CF8A                               
0CF8A                               ;; If highest bits are %01, set the PPU address
0CF8A                               ;; If not, draw two logo tiles
0CF8A C9 40                         CMP #%01000000
0CF8C D0 03                         BNE +drawLogo
0CF8E 4C B7 CF                          JMP +setPpuAddr
0CF91                           
0CF91                           +drawLogo:
0CF91                               ;; Get bits 0-2 and store in a temp variable
0CF91 BD 48 D2                      LDA tbl_IntroScreenData,x
0CF94 29 07                         AND #%00000111
0CF96 85 0B                         STA temp
0CF98                               
0CF98                               ;; Get bits 3-5, shift over to get a value from 0-7
0CF98 BD 48 D2                      LDA tbl_IntroScreenData,x
0CF9B 4A                            LSR
0CF9C 4A                            LSR
0CF9D 4A                            LSR
0CF9E 29 07                         AND #%00000111
0CFA0                               
0CFA0                               ;; Draw the tile that corresponds with that value
0CFA0 A8                            TAY
0CFA1 20 A4 C7                      JSR sub_drawIntroScreenLogoTile
0CFA4                               
0CFA4                               ;; Do the same for the value stored in temp
0CFA4 A4 0B                         LDY temp
0CFA6 20 A4 C7                      JSR sub_drawIntroScreenLogoTile
0CFA9                           
0CFA9                               ;; Next byte please
0CFA9 E8                            INX
0CFAA 4C 61 CF                      JMP -loop_IntroScreenData
0CFAD                           
0CFAD                           +drawTile:
0CFAD                               ;; Just draw the tile value on screen
0CFAD BD 48 D2                      LDA tbl_IntroScreenData,x
0CFB0 8D 07 20                      STA PPU_DATA
0CFB3                               
0CFB3                               ;; Next byte please
0CFB3 E8                            INX
0CFB4 4C 61 CF                      JMP -loop_IntroScreenData
0CFB7                           
0CFB7                           
0CFB7                           +setPpuAddr:
0CFB7                               ;; Reset the PPU latch
0CFB7 2C 02 20                      BIT PPU_STATUS
0CFBA                               
0CFBA                               ;; Sanitize and write the high byte of the PPU address
0CFBA BD 48 D2                      LDA tbl_IntroScreenData,x
0CFBD 29 3F                         AND #%00111111
0CFBF 8D 06 20                      STA PPU_ADDR
0CFC2                           
0CFC2                               ;; Write the low byte of the PPU address
0CFC2 E8                            INX
0CFC3 BD 48 D2                      LDA tbl_IntroScreenData,x
0CFC6 8D 06 20                      STA PPU_ADDR
0CFC9                               
0CFC9                               ;; PPU has been set up to draw tiles at the correct spot now.
0CFC9                               
0CFC9                               ;; Next byte please.
0CFC9 E8                            INX
0CFCA 4C 61 CF                      JMP -loop_IntroScreenData
0CFCD                           
0CFCD                           +goToEndIntroScreen:
0CFCD                           
0CFCD                               ;; To color the 1.LEVEL: line green, we need to update two
0CFCD                               ;; values in the PPU attribute data.
0CFCD A0 08                         LDY #$08
0CFCF 2C 02 20                      BIT PPU_STATUS
0CFD2 A9 23                         LDA #$23
0CFD4 8D 06 20                      STA PPU_ADDR
0CFD7 A9 C8                         LDA #$C8
0CFD9 8D 06 20                      STA PPU_ADDR
0CFDC A9 0A                         LDA #%00001010
0CFDE                               -
0CFDE 8D 07 20                          STA PPU_DATA
0CFE1 88                                DEY
0CFE2 D0 FA                         BNE -
0CFE4                           
0CFE4 60                            RTS
0CFE5                           
0CFE5                           .include "game/subroutine/LoadWinScreen.asm"
0CFE5                           
0CFE5                           ;; Load the win screen (in progress)
0CFE5                           sub_LoadWinScreen:
0CFE5 60                            RTS
0CFE6                           
0CFE6                           .include "game/subroutine/PreloadSfxFromX.asm"
0CFE6                           
0CFE6                           sub_PreloadSfxFromX:
0CFE6                               
0CFE6                               ;; Load sample X into sfx address (low byte)
0CFE6 BD 89 DB                      LDA tbl_Sfx_lo,x
0CFE9 85 57                         STA sfx_address
0CFEB                               
0CFEB                               ;; Load sample X into sfx address (high byte)
0CFEB BD 86 DB                      LDA tbl_Sfx_hi,x
0CFEE 85 58                         STA sfx_address+1
0CFF0                               
0CFF0                               ;; Start SFX timer
0CFF0 A9 01                         LDA #$01
0CFF2 85 59                         STA sfx_timer
0CFF4                               
0CFF4 60                            RTS
0CFF5                               
0CFF5                               0CFF5                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CFF5                           
0CFF5                           ;; Remove a block from screen
0CFF5                           sub_RemoveBlockFromScreen:
0CFF5                           
0CFF5                               ;; Get current buffer location
0CFF5 A4 45                         LDY ppu_buffer_pointer
0CFF7                               
0CFF7                               ;; TILE 1: if metatile on top left is solid, draw
0CFF7                               ;; null tile, else draw random noise tile
0CFF7 A9 00                         LDA #$00
0CFF9 85 44                         STA ppu_buffer_update
0CFFB                               
0CFFB A5 0B                         LDA temp
0CFFD 99 00 03                      STA ppu_buffer,y
0D000 C8                            INY
0D001 A5 0C                         LDA temp+1
0D003 99 00 03                      STA ppu_buffer,y
0D006 C8                            INY
0D007                               
0D007 8A                            TXA
0D008 29 0F                         AND #%00001111
0D00A F0 11                         BEQ +drawRandomTile
0D00C                           
0D00C 8A                            TXA
0D00D 29 F0                         AND #%11110000
0D00F F0 0C                         BEQ +drawRandomTile
0D011                           
0D011 BD EF 03                      LDA tile_type-17,x
0D014 29 01                         AND #%00000001
0D016 F0 05                         BEQ +drawRandomTile  
0D018                           
0D018                               ;; Draw a null tile
0D018 A9 00                         LDA #$00
0D01A 4C 25 D0                      JMP +addToPPUBuffer
0D01D                               
0D01D                           +drawRandomTile:
0D01D                               ;; Draw a random tile
0D01D 20 AF C5                      JSR sub_GetRandomNumber
0D020 29 07                         AND #%00000111
0D022 18                            CLC
0D023 69 68                         ADC #$68
0D025                               
0D025                               ;; Add tile to ppu buffer
0D025                           +addToPPUBuffer:
0D025 99 00 03                      STA ppu_buffer,y
0D028 C8                            INY
0D029                           
0D029                               ;; TILE 2: If metatile above is solid, draw null,
0D029                               ;; else draw random noise.
0D029 E6 0C                         INC temp+1
0D02B A5 0B                         LDA temp
0D02D 99 00 03                      STA ppu_buffer,y
0D030 C8                            INY
0D031 A5 0C                         LDA temp+1
0D033 99 00 03                      STA ppu_buffer,y
0D036 C8                            INY
0D037                               
0D037 8A                            TXA
0D038 29 F0                         AND #%11110000
0D03A F0 0C                         BEQ +drawRandomTile
0D03C                               
0D03C BD F0 03                      LDA tile_type-16,x
0D03F 29 01                         AND #%00000001
0D041 F0 05                         BEQ +drawRandomTile
0D043                               
0D043 A9 00                         LDA #%00
0D045 4C 50 D0                      JMP +addToPPUBuffer
0D048                           
0D048                           +drawRandomTile:
0D048 20 AF C5                      JSR sub_GetRandomNumber
0D04B 29 07                         AND #%00000111
0D04D 18                            CLC
0D04E 69 68                         ADC #$68
0D050                           
0D050                           +addToPPUBuffer:
0D050 99 00 03                      STA ppu_buffer,y
0D053 C8                            INY
0D054                               
0D054                               ;; TILE 3 - If metatile left is solid, draw null,
0D054                               ;; else draw random noise.
0D054 A5 0C                         LDA temp+1
0D056 18                            CLC
0D057 69 1F                         ADC #$1F
0D059 85 0C                         STA temp+1
0D05B A5 0B                         LDA temp
0D05D 69 00                         ADC #$00
0D05F 85 0B                         STA temp
0D061 99 00 03                      STA ppu_buffer,y
0D064 C8                            INY
0D065 A5 0C                         LDA temp+1
0D067 99 00 03                      STA ppu_buffer,y
0D06A C8                            INY
0D06B                               
0D06B 8A                            TXA
0D06C 29 0F                         AND #%00001111
0D06E F0 0C                         BEQ +drawRandomTile
0D070                               
0D070 BD FF 03                      LDA tile_type-1,x
0D073 29 01                         AND #%00000001
0D075 F0 05                         BEQ +drawRandomTile
0D077                               
0D077 A9 00                         LDA #%00
0D079 4C 84 D0                      JMP +addToPPUBuffer
0D07C                           
0D07C                           +drawRandomTile:
0D07C 20 AF C5                      JSR sub_GetRandomNumber
0D07F 29 07                         AND #%00000111
0D081 18                            CLC
0D082 69 68                         ADC #$68
0D084                               
0D084                           +addToPPUBuffer:
0D084 99 00 03                      STA ppu_buffer,y
0D087 C8                            INY
0D088                               
0D088                               ;; TILE 4 - Always random noise
0D088 E6 0C                         INC temp+1
0D08A A5 0B                         LDA temp
0D08C 99 00 03                      STA ppu_buffer,y
0D08F C8                            INY
0D090 A5 0C                         LDA temp+1
0D092 99 00 03                      STA ppu_buffer,y
0D095 C8                            INY
0D096 20 AF C5                      JSR sub_GetRandomNumber
0D099 29 07                         AND #%00000111
0D09B 18                            CLC
0D09C 69 68                         ADC #$68
0D09E 99 00 03                      STA ppu_buffer,y
0D0A1 C8                            INY
0D0A2                           
0D0A2                               ;; TILE 5 - If tile on the right is solid, skip,
0D0A2                               ;; else draw random noise tile
0D0A2 E6 0C                         INC temp+1
0D0A4                               
0D0A4 8A                            TXA
0D0A5 29 0F                         AND #%00001111
0D0A7 C9 0D                         CMP #$0D
0D0A9 F0 1F                         BEQ +skipTile
0D0AB                               
0D0AB BD 01 04                      LDA tile_type+1,x
0D0AE 29 01                         AND #%00000001
0D0B0 D0 18                         BNE +skipTile
0D0B2 A5 0B                             LDA temp
0D0B4 99 00 03                          STA ppu_buffer,y
0D0B7 C8                                INY
0D0B8 A5 0C                             LDA temp+1
0D0BA 99 00 03                          STA ppu_buffer,y
0D0BD C8                                INY
0D0BE 20 AF C5                          JSR sub_GetRandomNumber
0D0C1 29 07                             AND #%00000111
0D0C3 18                                CLC
0D0C4 69 68                             ADC #$68
0D0C6 99 00 03                          STA ppu_buffer,y
0D0C9 C8                                INY    
0D0CA                               +skipTile:
0D0CA                           
0D0CA                               ;; TILE 6 - If tile on bottom is solid, skip,
0D0CA                               ;; else draw random noise
0D0CA A5 0C                         LDA temp+1
0D0CC 18                            CLC
0D0CD 69 1F                         ADC #$1F
0D0CF 85 0C                         STA temp+1
0D0D1 A5 0B                         LDA temp
0D0D3 69 00                         ADC #$00
0D0D5 85 0B                         STA temp
0D0D7                           
0D0D7 8A                            TXA
0D0D8 29 F0                         AND #%11110000
0D0DA C9 90                         CMP #$90
0D0DC F0 1F                         BEQ +skipTile
0D0DE                           
0D0DE BD 10 04                      LDA tile_type+16,x
0D0E1 29 01                         AND #%00000001
0D0E3 D0 18                         BNE +skipTile
0D0E5 A5 0B                             LDA temp
0D0E7 99 00 03                          STA ppu_buffer,y
0D0EA C8                                INY
0D0EB A5 0C                             LDA temp+1
0D0ED 99 00 03                          STA ppu_buffer,y
0D0F0 C8                                INY
0D0F1 20 AF C5                          JSR sub_GetRandomNumber
0D0F4 29 07                             AND #%00000111
0D0F6 18                                CLC
0D0F7 69 68                             ADC #$68
0D0F9 99 00 03                          STA ppu_buffer,y
0D0FC C8                                INY    
0D0FD                               +skipTile:
0D0FD                               
0D0FD                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D0FD                               ;; else draw random noise
0D0FD E6 0C                         INC temp+1
0D0FF                           
0D0FF 8A                            TXA
0D100 29 F0                         AND #%11110000
0D102 C9 90                         CMP #$90
0D104 F0 26                         BEQ +skipTile
0D106                               
0D106 8A                            TXA
0D107 29 0F                         AND #%00001111
0D109 C9 0D                         CMP #$0D
0D10B F0 1F                         BEQ +skipTile
0D10D                               
0D10D BD 11 04                      LDA tile_type+17,x
0D110 29 01                         AND #%00000001
0D112 D0 18                         BNE +skipTile
0D114 A5 0B                             LDA temp
0D116 99 00 03                          STA ppu_buffer,y
0D119 C8                                INY
0D11A A5 0C                             LDA temp+1
0D11C 99 00 03                          STA ppu_buffer,y
0D11F C8                                INY
0D120 20 AF C5                          JSR sub_GetRandomNumber
0D123 29 07                             AND #%00000111
0D125 18                                CLC
0D126 69 68                             ADC #$68
0D128 99 00 03                          STA ppu_buffer,y
0D12B C8                                INY    
0D12C                               +skipTile:   
0D12C                           
0D12C                           
0D12C                               ;; Update attribute table accordingly through ppu buffer
0D12C 20 6B D1                      JSR sub_SetTileAttributeAddress
0D12F                               
0D12F 8A                            TXA
0D130 29 10                         AND #%00010000
0D132 F0 05                         BEQ +
0D134 A9 F0                             LDA #%11110000
0D136 4C 3B D1                          JMP ++
0D139                               +
0D139 A9 0F                         LDA #%00001111
0D13B                               ++
0D13B 85 0D                         STA temp+2
0D13D                               
0D13D 8A                            TXA
0D13E 48                            PHA
0D13F 29 01                         AND #%00000001
0D141 F0 07                         BEQ +
0D143 A5 0D                             LDA temp+2
0D145 09 CC                             ORA #%11001100
0D147 4C 4E D1                          JMP ++
0D14A                               +
0D14A A5 0D                         LDA temp+2
0D14C 09 33                         ORA #%00110011
0D14E                               ++
0D14E 85 0D                         STA temp+2
0D150                               
0D150 A5 0B                         LDA temp
0D152 38                            SEC
0D153 E9 C0                         SBC #$C0
0D155 AA                            TAX
0D156 BD A0 04                      LDA tile_attributes,x
0D159 25 0D                         AND temp+2
0D15B 9D A0 04                      STA tile_attributes,x
0D15E 99 00 03                      STA ppu_buffer,y
0D161 C8                            INY
0D162 68                            PLA
0D163 AA                            TAX
0D164                           
0D164                               ;; Tell PPU to update tiles and attributes next frame
0D164 84 45                         STY ppu_buffer_pointer
0D166 A9 01                         LDA #$01
0D168 85 44                         STA ppu_buffer_update
0D16A                            
0D16A                               ;; We're done - return
0D16A 60                            RTS
0D16B                           
0D16B                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D16B                           
0D16B                           ;; Set the correct tile attribute address based on game tile (x) 
0D16B                           ;; into the correct ppu buffer slot (y)
0D16B                           
0D16B                           sub_SetTileAttributeAddress:
0D16B A9 23                         LDA #$23
0D16D 99 00 03                      STA ppu_buffer,y
0D170 C8                            INY
0D171                               
0D171 8A                            TXA
0D172 29 F0                         AND #%11110000
0D174 4A                            LSR
0D175 4A                            LSR
0D176 4A                            LSR
0D177 4A                            LSR
0D178 18                            CLC
0D179 69 01                         ADC #$01
0D17B 4A                            LSR
0D17C 0A                            ASL
0D17D 0A                            ASL
0D17E 0A                            ASL
0D17F 18                            CLC
0D180 69 C8                         ADC #$C8
0D182 85 0B                         STA temp
0D184 8A                            TXA
0D185 29 0F                         AND #%00001111
0D187 18                            CLC
0D188 69 01                         ADC #$01
0D18A 4A                            LSR
0D18B 18                            CLC
0D18C 65 0B                         ADC temp
0D18E 85 0B                         STA temp
0D190 99 00 03                      STA ppu_buffer,y
0D193 C8                            INY
0D194                                  
0D194 60                            RTS
0D195                           
0D195                           .include "game/subroutine/SubtractXFromBonus.asm"
0D195                           
0D195                           sub_SubtractXFromBonus:
0D195 86 14                         STX temp+9
0D197 A5 39                         LDA ball_bonus+2
0D199 38                            SEC
0D19A E5 14                         SBC temp+9
0D19C 30 05                         BMI +
0D19E 85 39                             STA ball_bonus+2
0D1A0 4C B8 D1                          JMP +updateBonusOnScreen
0D1A3                               +
0D1A3                           
0D1A3 18                            CLC
0D1A4 69 0A                         ADC #$0A
0D1A6 85 39                         STA ball_bonus+2
0D1A8 C6 38                         DEC ball_bonus+1
0D1AA 10 0C                         BPL +updateBonusOnScreen
0D1AC                           
0D1AC A9 09                         LDA #$09
0D1AE 85 38                         STA ball_bonus+1
0D1B0 C6 37                         DEC ball_bonus
0D1B2 10 04                         BPL +updateBonusOnScreen
0D1B4                           
0D1B4 A9 00                         LDA #$00
0D1B6 85 37                         STA ball_bonus
0D1B8                           
0D1B8                               +updateBonusOnScreen:
0D1B8 A9 20                         LDA #$20
0D1BA 85 0B                         STA temp
0D1BC A9 9C                         LDA #$9C
0D1BE 85 0C                         STA temp+1
0D1C0 A2 02                         LDX #$02
0D1C2                               
0D1C2                               -updateNextDigit:
0D1C2 B5 37                             LDA ball_bonus,x
0D1C4 18                                CLC
0D1C5 69 01                             ADC #$01
0D1C7 85 0D                             STA temp+2
0D1C9 20 FA D1                          JSR sub_WriteByteToPPUBuffer
0D1CC C6 0C                             DEC temp+1
0D1CE CA                                DEX
0D1CF 10 F1                         BPL -updateNextDigit
0D1D1                           
0D1D1 60                            RTS
0D1D2                           
0D1D2                           .include "game/subroutine/WaitXFrames.asm"
0D1D2                           
0D1D2                           sub_WaitXFrames:
0D1D2                               
0D1D2                               ;; Push X to stack
0D1D2 8A                            TXA
0D1D3 48                            PHA
0D1D4                               
0D1D4                               ;; Wait for NMI
0D1D4 20 D1 C5                      JSR sub_WaitForNMI
0D1D7                           
0D1D7                               ;; Clear pointer, except for sprite-zero and ball
0D1D7 A9 08                         LDA #$08
0D1D9 85 48                         STA sprite_ram_pointer
0D1DB                           
0D1DB                               ;; Load animations (if any)
0D1DB 20 CE CA                      JSR sub_LoadAnimations
0D1DE                               
0D1DE                               ;; Restore original X
0D1DE 68                            PLA
0D1DF AA                            TAX
0D1E0                               
0D1E0                               ;; Check if all X frames have passed
0D1E0 CA                            DEX
0D1E1 D0 EF                         BNE sub_WaitXFrames
0D1E3                               
0D1E3                               ;; Return
0D1E3 60                            RTS
0D1E4                           
0D1E4                           .include "game/subroutine/Waste.asm"
0D1E4 20 E7 D1                  sub_Waste7: JSR sub_Waste6
0D1E7 20 EA D1                  sub_Waste6: JSR sub_Waste5
0D1EA 20 ED D1                  sub_Waste5: JSR sub_Waste4
0D1ED 20 F0 D1                  sub_Waste4: JSR sub_Waste3
0D1F0 20 F3 D1                  sub_Waste3: JSR sub_Waste2
0D1F3 20 F6 D1                  sub_Waste2: JSR sub_Waste1
0D1F6 20 F9 D1                  sub_Waste1: JSR sub_Waste0
0D1F9 60                        sub_Waste0: RTS0D1FA                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D1FA                           
0D1FA                           ;; Write the byte in temp+2 and the ppu address (temp)
0D1FA                           ;; to a buffer, so NMI can update it before the next frame
0D1FA                           
0D1FA                           sub_WriteByteToPPUBuffer:
0D1FA                           
0D1FA                               ;; Prevent updating until full 3-byte buffer is filled,
0D1FA                               ;; so that graphics won't glitch out if NMI happens during
0D1FA                               ;; updating the buffer
0D1FA A9 00                         LDA #$00
0D1FC 85 44                         STA ppu_buffer_update
0D1FE                           
0D1FE                               ;; Check if buffer full; if so, wait a frame and force update
0D1FE A4 45                         LDY ppu_buffer_pointer
0D200 C0 60                         CPY #$60
0D202 D0 05                         BNE +
0D204 E6 44                             INC ppu_buffer_update
0D206 20 DA C5                          JSR sub_WaitForVBlank
0D209                               +
0D209                           
0D209                               ;; Add ppu_addr high byte to buffer
0D209 A5 0B                         LDA temp
0D20B 99 00 03                      STA ppu_buffer,y
0D20E                           
0D20E                               ;; Add ppu_addr low byte to buffer
0D20E C8                            INY
0D20F A5 0C                         LDA temp+1
0D211 99 00 03                      STA ppu_buffer,y
0D214                           
0D214                               ;; Add ppu_data to buffer
0D214 C8                            INY
0D215 A5 0D                         LDA temp+2
0D217 99 00 03                      STA ppu_buffer,y
0D21A                           
0D21A                               ;; Update buffer pointer
0D21A C8                            INY
0D21B 84 45                         STY ppu_buffer_pointer
0D21D                           
0D21D                               ;; Tell NMI to update next round
0D21D E6 44                         INC ppu_buffer_update
0D21F                           
0D21F                               ;; Return
0D21F 60                            RTS
0D220                           
0D220                           
0D220                           
0D220                           
0D220                           ;; LUTs
0D220                           .include "game/include/tables.asm"
0D220                           
0D220                           ;; Initial screen palette
0D220                           tbl_IntroScreenPalette:
0D220 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D224 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D228 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D22C 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D230                           
0D230 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D234 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D238 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D23C 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D240                           
0D240                           
0D240                           ;; Intro: mapping logo index to chr tile
0D240                           tbl_IntroScreenLogoChr:
0D240 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D248                           
0D248                           
0D248                           ;; Intro screen data
0D248                           tbl_IntroScreenData:
0D248                           
0D248                               ;; Set PPU address $20A3 and draw
0D248 60 A3                         .db #$60, #$A3
0D24A 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D252                           
0D252                               ;; Set PPU address $20C6 and draw
0D252 60 C6                         .db #$60, #$C6
0D254 01 02                         .db #_0, #_1    
0D256                           
0D256                               ;; Set PPU address $20B4 and draw
0D256 60 B4                         .db #$60, #$B4
0D258 12 13 00 1D 0D 19 1C 0F..     .db #_H, #_I, #_SPACE, #_S, #_C, #_O, #_R, #_E, #_COLON
0D261                           
0D261                               ;; Set PPU address $20D6 and draw high score
0D261 60 D6 3E                      .db #$60, #$D6, #$3E
0D264                           
0D264                               
0D264                               ;; Set PPU address $2122 and draw
0D264 61 22                         .db #$61, #$22
0D266 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D26D 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D273 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D27B 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D280                               
0D280                               ;; Set PPU address $2147 and draw
0D280 61 47                         .db #$61, #$47
0D282 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D289 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D28D 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D293 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D299                               
0D299                               ;; Set PPU address $218B and draw
0D299 61 8B                         .db #$61, #$8B
0D29B 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D2A1 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D2A6                               
0D2A6                               ;; Set PPU address $21E6 and draw
0D2A6 61 E6                         .db #$61, #$E6
0D2A8 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D2B0 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D2B4 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D2BB                               
0D2BB                               ;; Set PPU address $222D and draw
0D2BB 62 2D                         .db #$62, #$2D
0D2BD 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D2C3                               
0D2C3                               ;; Set PPU address $2281
0D2C3 62 81                         .db #$62, #$81
0D2C5                               
0D2C5                               ;; Draw the Crillion logo
0D2C5 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D2C9 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D2CD C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D2D1 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D2D5                               
0D2D5 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D2D9 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D2DD C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D2E1 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D2E5                               
0D2E5 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D2E9 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D2ED C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D2F1 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D2F5                           
0D2F5 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D2F9 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D2FD C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D301 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D305                               
0D305 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D309 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D30D C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D311 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D315                           
0D315 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D319 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D31D C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D321 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D324                           
0D324                               ;; End of intro
0D324 3F                            .db #$3F
0D325                           
0D325                           
0D325                           ;; Animation frames table
0D325                           .include "game/include/table/animation_frames.asm"
0D325                           
0D325                           ;; CHR tile-id's per slide of explosion
0D325                           explosion_slide0:
0D325 00 00 00                      .db #$00, #$00, #$00
0D328 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D32B 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D32E                           
0D32E                           explosion_slide1:
0D32E 00 00 00                      .db #$00, #$00, #$00
0D331 29 2A 2B                      .db #$29, #$2A, #$2B
0D334 39 3A 3B                      .db #$39, #$3A, #$3B
0D337                           
0D337                           explosion_slide2:
0D337 16 00 00                      .db #$16, #$00, #$00
0D33A 26 27 28                      .db #$26, #$27, #$28
0D33D 36 37 38                      .db #$36, #$37, #$38
0D340                           
0D340                           explosion_slide3:
0D340 00 14 15                      .db #$00, #$14, #$15
0D343 23 24 25                      .db #$23, #$24, #$25
0D346 33 34 35                      .db #$33, #$34, #$35
0D349                           
0D349                           explosion_slide4:
0D349 10 11 12                      .db #$10, #$11, #$12
0D34C 20 21 22                      .db #$20, #$21, #$22
0D34F 30 31 32                      .db #$30, #$31, #$32
0D352                           
0D352                           ;; High and low bytes of animation slides
0D352                           explosion_anim_hi:
0D352 D3                            .db >#explosion_slide0
0D353 D3                            .db >#explosion_slide1
0D354 D3                            .db >#explosion_slide2
0D355 D3                            .db >#explosion_slide3
0D356 D3                            .db >#explosion_slide4
0D357 D3                            .db >#explosion_slide4
0D358 D3                            .db >#explosion_slide3
0D359 D3                            .db >#explosion_slide2
0D35A D3                            .db >#explosion_slide1
0D35B D3                            .db >#explosion_slide0
0D35C                           
0D35C                           explosion_anim_lo:
0D35C 25                            .db <#explosion_slide0
0D35D 2E                            .db <#explosion_slide1
0D35E 37                            .db <#explosion_slide2
0D35F 40                            .db <#explosion_slide3
0D360 49                            .db <#explosion_slide4
0D361 49                            .db <#explosion_slide4
0D362 40                            .db <#explosion_slide3
0D363 37                            .db <#explosion_slide2
0D364 2E                            .db <#explosion_slide1
0D365 25                            .db <#explosion_slide0
0D366                           
0D366                           
0D366                           
0D366                           ;; Ball palette color table (CBRYGM)
0D366                           tbl_BallColorDark:
0D366 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D36C                            
0D36C                           tbl_BallColorLight:
0D36C 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D372                           
0D372                               
0D372                           ;; Screen mode drawing routine addresses
0D372                           tbl_LoadScreenHi:
0D372 CF CB CF                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D375                           
0D375                           tbl_LoadScreenLo:
0D375 3C 73 E5                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D378                           
0D378                           
0D378                           ;; Level data
0D378                           .include "game/include/table/level_data.asm"
0D378                           
0D378                           ;; Level layout tables
0D378                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D378                           
0D378                           ifdef TESTING
0D378                           lvl_test:
0D378 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D380 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D388 FF                            .db #LEVEL_END
0D389                           endif
0D389                           
0D389                           lvl_layout_01:
0D389 61 21                         .db #$61, #%00100001
0D38B 52 61                         .db #$52, #%01100001
0D38D 43 65                         .db #$43, #%01100101
0D38F 83 05                         .db #$83, #%00000101
0D391 93 15                         .db #$93, #%00010101
0D393 34 7A                         .db #$34, #%01111010
0D395 74 7A                         .db #$74, #%01111010
0D397 35 7A                         .db #$35, #%01111010
0D399 75 7A                         .db #$75, #%01111010
0D39B 46 65                         .db #$46, #%01100101
0D39D 86 25                         .db #$86, #%00100101
0D39F 57 61                         .db #$57, #%01100001
0D3A1 68 21                         .db #$68, #%00100001
0D3A3 FF                            .db #LEVEL_END
0D3A4                           
0D3A4                           lvl_layout_02:
0D3A4 C0 0A                         .db #$C0, #%00001010
0D3A6 11 15                         .db #$11, #%00010101
0D3A8 21 62                         .db #$21, #%01100010
0D3AA 61 62                         .db #$61, #%01100010
0D3AC A1 42                         .db #$A1, #%01000010
0D3AE 12 67                         .db #$12, #%01100111
0D3B0 52 67                         .db #$52, #%01100111
0D3B2 92 67                         .db #$92, #%01100111
0D3B4 C3 0D                         .db #$C3, #%00001101
0D3B6 14 11                         .db #$14, #%00010001
0D3B8 24 65                         .db #$24, #%01100101
0D3BA 64 65                         .db #$64, #%01100101
0D3BC A4 45                         .db #$A4, #%01000101
0D3BE 15 67                         .db #$15, #%01100111
0D3C0 55 67                         .db #$55, #%01100111
0D3C2 95 67                         .db #$95, #%01100111
0D3C4 17 12                         .db #$17, #%00010010
0D3C6 27 61                         .db #$27, #%01100001
0D3C8 67 61                         .db #$67, #%01100001
0D3CA A7 41                         .db #$A7, #%01000001
0D3CC 38 7A                         .db #$38, #%01111010
0D3CE 98 5A                         .db #$98, #%01011010
0D3D0 18 27                         .db #$18, #%00100111
0D3D2 48 27                         .db #$48, #%00100111
0D3D4 78 27                         .db #$78, #%00100111
0D3D6 C8 07                         .db #$C8, #%00000111
0D3D8 FF                            .db #LEVEL_END
0D3D9                           
0D3D9                           lvl_layout_03:
0D3D9 00 7A                         .db #$00, #%01111010
0D3DB 40 7A                         .db #$40, #%01111010
0D3DD 80 7A                         .db #$80, #%01111010
0D3DF C0 1A                         .db #$C0, #%00011010
0D3E1 10 A1                         .db #$10, #%10100001
0D3E3 13 E1                         .db #$13, #%11100001
0D3E5 17 C1                         .db #$17, #%11000001
0D3E7 30 C1                         .db #$30, #%11000001
0D3E9 34 C1                         .db #$34, #%11000001
0D3EB 38 A1                         .db #$38, #%10100001
0D3ED 50 E1                         .db #$50, #%11100001
0D3EF 55 81                         .db #$55, #%10000001
0D3F1 57 C1                         .db #$57, #%11000001
0D3F3 70 C1                         .db #$70, #%11000001
0D3F5 73 A1                         .db #$73, #%10100001
0D3F7 76 E1                         .db #$76, #%11100001
0D3F9 90 E1                         .db #$90, #%11100001
0D3FB 95 81                         .db #$95, #%10000001
0D3FD 97 C1                         .db #$97, #%11000001
0D3FF B0 C1                         .db #$B0, #%11000001
0D401 B4 C1                         .db #$B4, #%11000001
0D403 B8 A1                         .db #$B8, #%10100001
0D405 D0 A1                         .db #$D0, #%10100001
0D407 D3 E1                         .db #$D3, #%11100001
0D409 D7 C1                         .db #$D7, #%11000001
0D40B FF                            .db #LEVEL_END
0D40C                           
0D40C                           lvl_layout_04:
0D40C 00 4C                         .db #$00, #%01001100
0D40E 40 6C                         .db #$40, #%01101100
0D410 80 4C                         .db #$80, #%01001100
0D412 81 AC                         .db #$81, #%10101100
0D414 C1 2C                         .db #$C1, #%00101100
0D416 02 6C                         .db #$02, #%01101100
0D418 42 CC                         .db #$42, #%11001100
0D41A 62 EC                         .db #$62, #%11101100
0D41C A2 CC                         .db #$A2, #%11001100
0D41E C3 CC                         .db #$C3, #%11001100
0D420 04 4C                         .db #$04, #%01001100
0D422 84 2C                         .db #$84, #%00101100
0D424 25 AC                         .db #$25, #%10101100
0D426 85 AC                         .db #$85, #%10101100
0D428 06 AC                         .db #$06, #%10101100
0D42A 36 CC                         .db #$36, #%11001100
0D42C 56 CC                         .db #$56, #%11001100
0D42E 66 EC                         .db #$66, #%11101100
0D430 96 6C                         .db #$96, #%01101100
0D432 C7 AC                         .db #$C7, #%10101100
0D434 08 2C                         .db #$08, #%00101100
0D436 78 6C                         .db #$78, #%01101100
0D438 D8 0C                         .db #$D8, #%00001100
0D43A 30 A1                         .db #$30, #%10100001
0D43C B0 21                         .db #$B0, #%00100001
0D43E 01 41                         .db #$01, #%01000001
0D440 41 61                         .db #$41, #%01100001
0D442 91 A1                         .db #$91, #%10100001
0D444 A1 21                         .db #$A1, #%00100001
0D446 52 C1                         .db #$52, #%11000001
0D448 72 E1                         .db #$72, #%11100001
0D44A B2 C1                         .db #$B2, #%11000001
0D44C C2 21                         .db #$C2, #%00100001
0D44E 03 41                         .db #$03, #%01000001
0D450 33 C1                         .db #$33, #%11000001
0D452 83 21                         .db #$83, #%00100001
0D454 D3 E1                         .db #$D3, #%11100001
0D456 05 21                         .db #$05, #%00100001
0D458 45 E1                         .db #$45, #%11100001
0D45A A5 21                         .db #$A5, #%00100001
0D45C 16 A1                         .db #$16, #%10100001
0D45E 76 A1                         .db #$76, #%10100001
0D460 27 A1                         .db #$27, #%10100001
0D462 57 21                         .db #$57, #%00100001
0D464 87 41                         .db #$87, #%01000001
0D466 B7 A1                         .db #$B7, #%10100001
0D468 19 21                         .db #$19, #%00100001
0D46A 39 41                         .db #$39, #%01000001
0D46C 89 41                         .db #$89, #%01000001
0D46E C9 21                         .db #$C9, #%00100001
0D470 D0 1A                         .db #$D0, #%00011010
0D472 55 1A                         .db #$55, #%00011010
0D474 95 1A                         .db #$95, #%00011010
0D476 D7 1A                         .db #$D7, #%00011010
0D478 09 1A                         .db #$09, #%00011010
0D47A 79 1A                         .db #$79, #%00011010
0D47C FF                            .db #LEVEL_END
0D47D                           
0D47D                           lvl_layout_05:
0D47D 40 0A                         .db #$40, #%00001010
0D47F 70 1A                         .db #$70, #%00011010
0D481 B0 42                         .db #$B0, #%01000010
0D483 41 A7                         .db #$41, #%10100111
0D485 B1 22                         .db #$B1, #%00100010
0D487 D1 15                         .db #$D1, #%00010101
0D489 22 0A                         .db #$22, #%00001010
0D48B 52 05                         .db #$52, #%00000101
0D48D B2 42                         .db #$B2, #%01000010
0D48F 03 27                         .db #$03, #%00100111
0D491 33 67                         .db #$33, #%01100111
0D493 73 67                         .db #$73, #%01100111
0D495 B3 47                         .db #$B3, #%01000111
0D497 05 E5                         .db #$05, #%11100101
0D499 25 A5                         .db #$25, #%10100101
0D49B 35 25                         .db #$35, #%00100101
0D49D 65 45                         .db #$65, #%01000101
0D49F A5 45                         .db #$A5, #%01000101
0D4A1 46 E5                         .db #$46, #%11100101
0D4A3 66 E5                         .db #$66, #%11100101
0D4A5 86 E5                         .db #$86, #%11100101
0D4A7 A6 E2                         .db #$A6, #%11100010
0D4A9 C6 E5                         .db #$C6, #%11100101
0D4AB 27 25                         .db #$27, #%00100101
0D4AD 77 05                         .db #$77, #%00000101
0D4AF B7 02                         .db #$B7, #%00000010
0D4B1 09 05                         .db #$09, #%00000101
0D4B3 79 05                         .db #$79, #%00000101
0D4B5 B9 02                         .db #$B9, #%00000010
0D4B7 FF                            .db #LEVEL_END
0D4B8                           
0D4B8                           lvl_layout_06:
0D4B8 00 03                         .db #$00, #%00000011
0D4BA 20 03                         .db #$20, #%00000011
0D4BC 40 03                         .db #$40, #%00000011
0D4BE A0 03                         .db #$A0, #%00000011
0D4C0 C0 03                         .db #$C0, #%00000011
0D4C2 11 03                         .db #$11, #%00000011
0D4C4 31 03                         .db #$31, #%00000011
0D4C6 51 03                         .db #$51, #%00000011
0D4C8 91 03                         .db #$91, #%00000011
0D4CA B1 03                         .db #$B1, #%00000011
0D4CC D1 03                         .db #$D1, #%00000011
0D4CE 02 03                         .db #$02, #%00000011
0D4D0 22 03                         .db #$22, #%00000011
0D4D2 42 03                         .db #$42, #%00000011
0D4D4 A2 03                         .db #$A2, #%00000011
0D4D6 C2 03                         .db #$C2, #%00000011
0D4D8 13 03                         .db #$13, #%00000011
0D4DA 33 03                         .db #$33, #%00000011
0D4DC 53 03                         .db #$53, #%00000011
0D4DE 93 03                         .db #$93, #%00000011
0D4E0 B3 03                         .db #$B3, #%00000011
0D4E2 D3 03                         .db #$D3, #%00000011
0D4E4 04 03                         .db #$04, #%00000011
0D4E6 24 03                         .db #$24, #%00000011
0D4E8 44 03                         .db #$44, #%00000011
0D4EA A4 03                         .db #$A4, #%00000011
0D4EC C4 03                         .db #$C4, #%00000011
0D4EE 15 03                         .db #$15, #%00000011
0D4F0 35 03                         .db #$35, #%00000011
0D4F2 55 03                         .db #$55, #%00000011
0D4F4 95 03                         .db #$95, #%00000011
0D4F6 B5 03                         .db #$B5, #%00000011
0D4F8 D5 03                         .db #$D5, #%00000011
0D4FA 06 03                         .db #$06, #%00000011
0D4FC 26 03                         .db #$26, #%00000011
0D4FE 46 03                         .db #$46, #%00000011
0D500 A6 03                         .db #$A6, #%00000011
0D502 C6 03                         .db #$C6, #%00000011
0D504 17 03                         .db #$17, #%00000011
0D506 37 03                         .db #$37, #%00000011
0D508 57 03                         .db #$57, #%00000011
0D50A 97 03                         .db #$97, #%00000011
0D50C B7 03                         .db #$B7, #%00000011
0D50E D7 03                         .db #$D7, #%00000011
0D510 08 03                         .db #$08, #%00000011
0D512 28 03                         .db #$28, #%00000011
0D514 48 03                         .db #$48, #%00000011
0D516 A8 03                         .db #$A8, #%00000011
0D518 C8 03                         .db #$C8, #%00000011
0D51A 19 03                         .db #$19, #%00000011
0D51C 39 03                         .db #$39, #%00000011
0D51E 59 03                         .db #$59, #%00000011
0D520 99 03                         .db #$99, #%00000011
0D522 B9 03                         .db #$B9, #%00000011
0D524 D9 03                         .db #$D9, #%00000011
0D526 60 4B                         .db #$60, #%01001011
0D528 71 CB                         .db #$71, #%11001011
0D52A 62 4B                         .db #$62, #%01001011
0D52C 64 4B                         .db #$64, #%01001011
0D52E 75 CB                         .db #$75, #%11001011
0D530 66 4B                         .db #$66, #%01001011
0D532 68 4B                         .db #$68, #%01001011
0D534 79 0B                         .db #$79, #%00001011
0D536 70 03                         .db #$70, #%00000011
0D538 72 03                         .db #$72, #%00000011
0D53A 74 03                         .db #$74, #%00000011
0D53C 76 03                         .db #$76, #%00000011
0D53E 78 03                         .db #$78, #%00000011
0D540 FF                            .db #LEVEL_END
0D541                           
0D541                           lvl_layout_07:
0D541 00 11                         .db #$00, #%00010001
0D543 01 FA                         .db #$01, #%11111010
0D545 12 BA                         .db #$12, #%10111010
0D547 23 DA                         .db #$23, #%11011010
0D549 34 FA                         .db #$34, #%11111010
0D54B 05 DA                         .db #$05, #%11011010
0D54D 15 FA                         .db #$15, #%11111010
0D54F 45 BA                         .db #$45, #%10111010
0D551 56 DA                         .db #$56, #%11011010
0D553 27 BA                         .db #$27, #%10111010
0D555 67 DA                         .db #$67, #%11011010
0D557 38 3A                         .db #$38, #%00111010
0D559 78 BA                         .db #$78, #%10111010
0D55B 09 3A                         .db #$09, #%00111010
0D55D 39 3A                         .db #$39, #%00111010
0D55F 89 1A                         .db #$89, #%00011010
0D561 B0 01                         .db #$B0, #%00000001
0D563 D0 01                         .db #$D0, #%00000001
0D565 A1 01                         .db #$A1, #%00000001
0D567 C1 11                         .db #$C1, #%00010001
0D569 B2 01                         .db #$B2, #%00000001
0D56B D2 01                         .db #$D2, #%00000001
0D56D A3 01                         .db #$A3, #%00000001
0D56F C3 01                         .db #$C3, #%00000001
0D571 B4 01                         .db #$B4, #%00000001
0D573 D4 01                         .db #$D4, #%00000001
0D575 A5 01                         .db #$A5, #%00000001
0D577 C5 01                         .db #$C5, #%00000001
0D579 B6 01                         .db #$B6, #%00000001
0D57B D6 01                         .db #$D6, #%00000001
0D57D A7 01                         .db #$A7, #%00000001
0D57F C7 01                         .db #$C7, #%00000001
0D581 FF                            .db #LEVEL_END
0D582                           
0D582                           lvl_layout_08:
0D582 40 B5                         .db #$40, #%10110101
0D584 31 0D                         .db #$31, #%00001101
0D586 61 10                         .db #$61, #%00010000
0D588 42 C7                         .db #$42, #%11000111
0D58A 52 67                         .db #$52, #%01100111
0D58C 63 C7                         .db #$63, #%11000111
0D58E 83 E7                         .db #$83, #%11100111
0D590 05 07                         .db #$05, #%00000111
0D592 15 3A                         .db #$15, #%00111010
0D594 07 63                         .db #$07, #%01100011
0D596 27 13                         .db #$27, #%00010011
0D598 38 A5                         .db #$38, #%10100101
0D59A 09 14                         .db #$09, #%00010100
0D59C 19 05                         .db #$19, #%00000101
0D59E D0 E0                         .db #$D0, #%11100000
0D5A0 C2 A0                         .db #$C2, #%10100000
0D5A2 B3 E0                         .db #$B3, #%11100000
0D5A4 D5 E0                         .db #$D5, #%11100000
0D5A6 C6 E0                         .db #$C6, #%11100000
0D5A8 B0 C4                         .db #$B0, #%11000100
0D5AA C0 A4                         .db #$C0, #%10100100
0D5AC D1 A4                         .db #$D1, #%10100100
0D5AE C4 24                         .db #$C4, #%00100100
0D5B0 C5 04                         .db #$C5, #%00000100
0D5B2 B7 44                         .db #$B7, #%01000100
0D5B4 B8 A4                         .db #$B8, #%10100100
0D5B6 D9 05                         .db #$D9, #%00000101
0D5B8 FF                            .db #LEVEL_END
0D5B9                           
0D5B9                           lvl_layout_09:
0D5B9 81 04                         .db #$81, #%00000100
0D5BB D1 04                         .db #$D1, #%00000100
0D5BD 32 C4                         .db #$32, #%11000100
0D5BF A2 C4                         .db #$A2, #%11000100
0D5C1 C2 24                         .db #$C2, #%00100100
0D5C3 13 24                         .db #$13, #%00100100
0D5C5 53 04                         .db #$53, #%00000100
0D5C7 C3 27                         .db #$C3, #%00100111
0D5C9 15 6C                         .db #$15, #%01101100
0D5CB 55 6C                         .db #$55, #%01101100
0D5CD 95 6C                         .db #$95, #%01101100
0D5CF D5 0C                         .db #$D5, #%00001100
0D5D1 27 C7                         .db #$27, #%11000111
0D5D3 47 C7                         .db #$47, #%11000111
0D5D5 67 C7                         .db #$67, #%11000111
0D5D7 87 C7                         .db #$87, #%11000111
0D5D9 A7 C7                         .db #$A7, #%11000111
0D5DB C7 C7                         .db #$C7, #%11000111
0D5DD 08 13                         .db #$08, #%00010011
0D5DF 28 15                         .db #$28, #%00010101
0D5E1 48 12                         .db #$48, #%00010010
0D5E3 68 15                         .db #$68, #%00010101
0D5E5 88 11                         .db #$88, #%00010001
0D5E7 A8 10                         .db #$A8, #%00010000
0D5E9 C8 14                         .db #$C8, #%00010100
0D5EB 09 07                         .db #$09, #%00000111
0D5ED 19 03                         .db #$19, #%00000011
0D5EF 39 05                         .db #$39, #%00000101
0D5F1 59 02                         .db #$59, #%00000010
0D5F3 79 05                         .db #$79, #%00000101
0D5F5 99 01                         .db #$99, #%00000001
0D5F7 B9 00                         .db #$B9, #%00000000
0D5F9 D9 04                         .db #$D9, #%00000100
0D5FB FF                            .db #LEVEL_END
0D5FC                           
0D5FC                           lvl_layout_10:
0D5FC 00 02                         .db #$00, #%00000010
0D5FE 10 C9                         .db #$10, #%11001001
0D600 50 C9                         .db #$50, #%11001001
0D602 90 C9                         .db #$90, #%11001001
0D604 D0 C9                         .db #$D0, #%11001001
0D606 31 C9                         .db #$31, #%11001001
0D608 71 C9                         .db #$71, #%11001001
0D60A B1 C9                         .db #$B1, #%11001001
0D60C 13 C9                         .db #$13, #%11001001
0D60E 53 C9                         .db #$53, #%11001001
0D610 93 C9                         .db #$93, #%11001001
0D612 D3 C9                         .db #$D3, #%11001001
0D614 34 C9                         .db #$34, #%11001001
0D616 74 C9                         .db #$74, #%11001001
0D618 B4 C9                         .db #$B4, #%11001001
0D61A 16 C9                         .db #$16, #%11001001
0D61C 56 C9                         .db #$56, #%11001001
0D61E 96 C9                         .db #$96, #%11001001
0D620 D6 C9                         .db #$D6, #%11001001
0D622 37 C9                         .db #$37, #%11001001
0D624 77 C9                         .db #$77, #%11001001
0D626 B7 C9                         .db #$B7, #%11001001
0D628 D8 12                         .db #$D8, #%00010010
0D62A FF                            .db #LEVEL_END
0D62B                           
0D62B                           lvl_layout_11:
0D62B 00 65                         .db #$00, #%01100101
0D62D 40 45                         .db #$40, #%01000101
0D62F 50 A7                         .db #$50, #%10100111
0D631 80 05                         .db #$80, #%00000101
0D633 90 A7                         .db #$90, #%10100111
0D635 A0 65                         .db #$A0, #%01100101
0D637 01 43                         .db #$01, #%01000011
0D639 31 23                         .db #$31, #%00100011
0D63B 61 A7                         .db #$61, #%10100111
0D63D 81 A7                         .db #$81, #%10100111
0D63F A1 63                         .db #$A1, #%01100011
0D641 02 44                         .db #$02, #%01000100
0D643 32 44                         .db #$32, #%01000100
0D645 92 04                         .db #$92, #%00000100
0D647 A2 64                         .db #$A2, #%01100100
0D649 03 40                         .db #$03, #%01000000
0D64B 33 40                         .db #$33, #%01000000
0D64D 64 81                         .db #$64, #%10000001
0D64F 84 82                         .db #$84, #%10000010
0D651 93 00                         .db #$93, #%00000000
0D653 A3 60                         .db #$A3, #%01100000
0D655 04 41                         .db #$04, #%01000001
0D657 34 41                         .db #$34, #%01000001
0D659 94 02                         .db #$94, #%00000010
0D65B A4 62                         .db #$A4, #%01100010
0D65D 05 47                         .db #$05, #%01000111
0D65F 35 67                         .db #$35, #%01100111
0D661 75 0A                         .db #$75, #%00001010
0D663 85 47                         .db #$85, #%01000111
0D665 B5 47                         .db #$B5, #%01000111
0D667 06 E7                         .db #$06, #%11100111
0D669 16 5A                         .db #$16, #%01011010
0D66B 26 11                         .db #$26, #%00010001
0D66D 46 13                         .db #$46, #%00010011
0D66F 56 1A                         .db #$56, #%00011010
0D671 66 14                         .db #$66, #%00010100
0D673 86 10                         .db #$86, #%00010000
0D675 96 5A                         .db #$96, #%01011010
0D677 A6 12                         .db #$A6, #%00010010
0D679 C6 15                         .db #$C6, #%00010101
0D67B D6 E7                         .db #$D6, #%11100111
0D67D FF                            .db #LEVEL_END
0D67E                           
0D67E                           lvl_layout_12:
0D67E 00 00                         .db #$00, #%00000000
0D680 50 C0                         .db #$50, #%11000000
0D682 80 00                         .db #$80, #%00000000
0D684 61 00                         .db #$61, #%00000000
0D686 22 C0                         .db #$22, #%11000000
0D688 82 E0                         .db #$82, #%11100000
0D68A C2 E0                         .db #$C2, #%11100000
0D68C A3 20                         .db #$A3, #%00100000
0D68E C3 10                         .db #$C3, #%00010000
0D690 04 00                         .db #$04, #%00000000
0D692 54 20                         .db #$54, #%00100000
0D694 15 0A                         .db #$15, #%00001010
0D696 25 C0                         .db #$25, #%11000000
0D698 55 E0                         .db #$55, #%11100000
0D69A 86 20                         .db #$86, #%00100000
0D69C C6 E0                         .db #$C6, #%11100000
0D69E C7 A0                         .db #$C7, #%10100000
0D6A0 88 00                         .db #$88, #%00000000
0D6A2 59 00                         .db #$59, #%00000000
0D6A4 89 20                         .db #$89, #%00100000
0D6A6 D9 1A                         .db #$D9, #%00011010
0D6A8 FF                            .db #LEVEL_END
0D6A9                           
0D6A9                           lvl_layout_13:
0D6A9 10 E0                         .db #$10, #%11100000
0D6AB 20 E0                         .db #$20, #%11100000
0D6AD 30 E0                         .db #$30, #%11100000
0D6AF 40 40                         .db #$40, #%01000000
0D6B1 80 60                         .db #$80, #%01100000
0D6B3 C0 E0                         .db #$C0, #%11100000
0D6B5 D0 E0                         .db #$D0, #%11100000
0D6B7 41 40                         .db #$41, #%01000000
0D6B9 71 60                         .db #$71, #%01100000
0D6BB 52 60                         .db #$52, #%01100000
0D6BD A2 20                         .db #$A2, #%00100000
0D6BF 43 60                         .db #$43, #%01100000
0D6C1 83 60                         .db #$83, #%01100000
0D6C3 14 74                         .db #$14, #%01110100
0D6C5 54 74                         .db #$54, #%01110100
0D6C7 94 74                         .db #$94, #%01110100
0D6C9 D4 14                         .db #$D4, #%00010100
0D6CB 15 0D                         .db #$15, #%00001101
0D6CD 55 0D                         .db #$55, #%00001101
0D6CF 95 0D                         .db #$95, #%00001101
0D6D1 D5 0D                         .db #$D5, #%00001101
0D6D3 26 0D                         .db #$26, #%00001101
0D6D5 46 0D                         .db #$46, #%00001101
0D6D7 66 0D                         .db #$66, #%00001101
0D6D9 86 0D                         .db #$86, #%00001101
0D6DB A6 0D                         .db #$A6, #%00001101
0D6DD C6 0D                         .db #$C6, #%00001101
0D6DF 07 10                         .db #$07, #%00010000
0D6E1 37 0D                         .db #$37, #%00001101
0D6E3 77 0D                         .db #$77, #%00001101
0D6E5 B7 0D                         .db #$B7, #%00001101
0D6E7 28 0D                         .db #$28, #%00001101
0D6E9 48 0D                         .db #$48, #%00001101
0D6EB 68 0D                         .db #$68, #%00001101
0D6ED 88 0D                         .db #$88, #%00001101
0D6EF A8 0D                         .db #$A8, #%00001101
0D6F1 C8 0D                         .db #$C8, #%00001101
0D6F3 19 0D                         .db #$19, #%00001101
0D6F5 59 0D                         .db #$59, #%00001101
0D6F7 99 0D                         .db #$99, #%00001101
0D6F9 D9 0D                         .db #$D9, #%00001101
0D6FB FF                            .db #LEVEL_END
0D6FC                           
0D6FC                           lvl_layout_14:
0D6FC 00 67                         .db #$00, #%01100111
0D6FE 40 67                         .db #$40, #%01100111
0D700 80 67                         .db #$80, #%01100111
0D702 C0 27                         .db #$C0, #%00100111
0D704 01 27                         .db #$01, #%00100111
0D706 31 C7                         .db #$31, #%11000111
0D708 51 C7                         .db #$51, #%11000111
0D70A 71 C7                         .db #$71, #%11000111
0D70C 91 C7                         .db #$91, #%11000111
0D70E B1 C7                         .db #$B1, #%11000111
0D710 D1 07                         .db #$D1, #%00000111
0D712 02 E7                         .db #$02, #%11100111
0D714 06 E7                         .db #$06, #%11100111
0D716 13 07                         .db #$13, #%00000111
0D718 D3 07                         .db #$D3, #%00000111
0D71A 15 07                         .db #$15, #%00000111
0D71C 35 07                         .db #$35, #%00000111
0D71E 55 07                         .db #$55, #%00000111
0D720 75 07                         .db #$75, #%00000111
0D722 95 07                         .db #$95, #%00000111
0D724 B5 07                         .db #$B5, #%00000111
0D726 D5 07                         .db #$D5, #%00000111
0D728 17 07                         .db #$17, #%00000111
0D72A 37 C7                         .db #$37, #%11000111
0D72C 57 C7                         .db #$57, #%11000111
0D72E 77 C7                         .db #$77, #%11000111
0D730 97 C7                         .db #$97, #%11000111
0D732 B7 C7                         .db #$B7, #%11000111
0D734 D7 07                         .db #$D7, #%00000111
0D736 19 07                         .db #$19, #%00000111
0D738 D9 07                         .db #$D9, #%00000111
0D73A 22 4C                         .db #$22, #%01001100
0D73C 62 4C                         .db #$62, #%01001100
0D73E A2 4C                         .db #$A2, #%01001100
0D740 24 0C                         .db #$24, #%00001100
0D742 44 0C                         .db #$44, #%00001100
0D744 64 0C                         .db #$64, #%00001100
0D746 84 0C                         .db #$84, #%00001100
0D748 A4 0C                         .db #$A4, #%00001100
0D74A C4 0C                         .db #$C4, #%00001100
0D74C 26 0C                         .db #$26, #%00001100
0D74E 46 0C                         .db #$46, #%00001100
0D750 66 0C                         .db #$66, #%00001100
0D752 86 0C                         .db #$86, #%00001100
0D754 A6 0C                         .db #$A6, #%00001100
0D756 C6 0C                         .db #$C6, #%00001100
0D758 28 4C                         .db #$28, #%01001100
0D75A 68 4C                         .db #$68, #%01001100
0D75C A8 4C                         .db #$A8, #%01001100
0D75E 32 04                         .db #$32, #%00000100
0D760 52 04                         .db #$52, #%00000100
0D762 72 04                         .db #$72, #%00000100
0D764 92 04                         .db #$92, #%00000100
0D766 B2 04                         .db #$B2, #%00000100
0D768 38 04                         .db #$38, #%00000100
0D76A 58 04                         .db #$58, #%00000100
0D76C 78 04                         .db #$78, #%00000100
0D76E 98 04                         .db #$98, #%00000100
0D770 B8 04                         .db #$B8, #%00000100
0D772 FF                            .db #LEVEL_END
0D773                           
0D773                           lvl_layout_15:
0D773 00 7A                         .db #$00, #%01111010
0D775 40 7A                         .db #$40, #%01111010
0D777 80 7A                         .db #$80, #%01111010
0D779 C0 3A                         .db #$C0, #%00111010
0D77B 61 64                         .db #$61, #%01100100
0D77D 05 E4                         .db #$05, #%11100100
0D77F 15 64                         .db #$15, #%01100100
0D781 55 64                         .db #$55, #%01100100
0D783 95 64                         .db #$95, #%01100100
0D785 D5 E4                         .db #$D5, #%11100100
0D787 26 04                         .db #$26, #%00000100
0D789 46 44                         .db #$46, #%01000100
0D78B 76 64                         .db #$76, #%01100100
0D78D C6 04                         .db #$C6, #%00000100
0D78F 17 04                         .db #$17, #%00000100
0D791 37 64                         .db #$37, #%01100100
0D793 77 44                         .db #$77, #%01000100
0D795 B7 04                         .db #$B7, #%00000100
0D797 18 64                         .db #$18, #%01100100
0D799 58 64                         .db #$58, #%01100100
0D79B 98 64                         .db #$98, #%01100100
0D79D FF                            .db #LEVEL_END
0D79E                           
0D79E                           lvl_layout_16:
0D79E 10 E1                         .db #$10, #%11100001
0D7A0 20 9A                         .db #$20, #%10011010
0D7A2 30 E1                         .db #$30, #%11100001
0D7A4 40 E1                         .db #$40, #%11100001
0D7A6 50 E1                         .db #$50, #%11100001
0D7A8 60 C1                         .db #$60, #%11000001
0D7AA 70 E1                         .db #$70, #%11100001
0D7AC 80 E1                         .db #$80, #%11100001
0D7AE 90 E1                         .db #$90, #%11100001
0D7B0 A0 61                         .db #$A0, #%01100001
0D7B2 21 C1                         .db #$21, #%11000001
0D7B4 A1 1A                         .db #$A1, #%00011010
0D7B6 B1 41                         .db #$B1, #%01000001
0D7B8 A2 E1                         .db #$A2, #%11100001
0D7BA B2 E1                         .db #$B2, #%11100001
0D7BC C2 1A                         .db #$C2, #%00011010
0D7BE D2 E1                         .db #$D2, #%11100001
0D7C0 63 1A                         .db #$63, #%00011010
0D7C2 C3 C1                         .db #$C3, #%11000001
0D7C4 14 61                         .db #$14, #%01100001
0D7C6 54 61                         .db #$54, #%01100001
0D7C8 94 C1                         .db #$94, #%11000001
0D7CA 15 61                         .db #$15, #%01100001
0D7CC 55 41                         .db #$55, #%01000001
0D7CE 85 1A                         .db #$85, #%00011010
0D7D0 16 41                         .db #$16, #%01000001
0D7D2 46 1A                         .db #$46, #%00011010
0D7D4 56 61                         .db #$56, #%01100001
0D7D6 A6 61                         .db #$A6, #%01100001
0D7D8 17 67                         .db #$17, #%01100111
0D7DA 57 67                         .db #$57, #%01100111
0D7DC 97 67                         .db #$97, #%01100111
0D7DE D7 07                         .db #$D7, #%00000111
0D7E0 28 41                         .db #$28, #%01000001
0D7E2 58 61                         .db #$58, #%01100001
0D7E4 A8 41                         .db #$A8, #%01000001
0D7E6 18 11                         .db #$18, #%00010001
0D7E8 38 11                         .db #$38, #%00010001
0D7EA 98 11                         .db #$98, #%00010001
0D7EC B8 11                         .db #$B8, #%00010001
0D7EE D8 11                         .db #$D8, #%00010001
0D7F0 59 09                         .db #$59, #%00001001
0D7F2 FF                            .db #LEVEL_END
0D7F3                           
0D7F3                           lvl_layout_17:
0D7F3 10 EA                         .db #$10, #%11101010
0D7F5 20 E2                         .db #$20, #%11100010
0D7F7 30 62                         .db #$30, #%01100010
0D7F9 70 02                         .db #$70, #%00000010
0D7FB 80 6A                         .db #$80, #%01101010
0D7FD 90 22                         .db #$90, #%00100010
0D7FF 01 AA                         .db #$01, #%10101010
0D801 31 6A                         .db #$31, #%01101010
0D803 81 2A                         .db #$81, #%00101010
0D805 A1 02                         .db #$A1, #%00000010
0D807 C1 02                         .db #$C1, #%00000010
0D809 D1 0A                         .db #$D1, #%00001010
0D80B 32 EA                         .db #$32, #%11101010
0D80D 42 6A                         .db #$42, #%01101010
0D80F 62 02                         .db #$62, #%00000010
0D811 92 6A                         .db #$92, #%01101010
0D813 D2 E2                         .db #$D2, #%11100010
0D815 43 1A                         .db #$43, #%00011010
0D817 53 CA                         .db #$53, #%11001010
0D819 73 02                         .db #$73, #%00000010
0D81B 83 4A                         .db #$83, #%01001010
0D81D B3 CA                         .db #$B3, #%11001010
0D81F C3 EA                         .db #$C3, #%11101010
0D821 04 0A                         .db #$04, #%00001010
0D823 14 A2                         .db #$14, #%10100010
0D825 24 AA                         .db #$24, #%10101010
0D827 44 AA                         .db #$44, #%10101010
0D829 64 6A                         .db #$64, #%01101010
0D82B 65 6A                         .db #$65, #%01101010
0D82D A5 AA                         .db #$A5, #%10101010
0D82F 06 EA                         .db #$06, #%11101010
0D831 16 62                         .db #$16, #%01100010
0D833 56 42                         .db #$56, #%01000010
0D835 86 2A                         .db #$86, #%00101010
0D837 17 42                         .db #$17, #%01000010
0D839 47 12                         .db #$47, #%00010010
0D83B 57 6A                         .db #$57, #%01101010
0D83D 97 4A                         .db #$97, #%01001010
0D83F A7 02                         .db #$A7, #%00000010
0D841 18 02                         .db #$18, #%00000010
0D843 28 0A                         .db #$28, #%00001010
0D845 38 22                         .db #$38, #%00100010
0D847 68 2A                         .db #$68, #%00101010
0D849 88 62                         .db #$88, #%01100010
0D84B C8 0A                         .db #$C8, #%00001010
0D84D D8 02                         .db #$D8, #%00000010
0D84F 19 2A                         .db #$19, #%00101010
0D851 39 2A                         .db #$39, #%00101010
0D853 69 42                         .db #$69, #%01000010
0D855 99 2A                         .db #$99, #%00101010
0D857 B9 42                         .db #$B9, #%01000010
0D859 FF                            .db #LEVEL_END
0D85A                           
0D85A                           lvl_layout_18:
0D85A 00 12                         .db #$00, #%00010010
0D85C 40 1A                         .db #$40, #%00011010
0D85E 50 11                         .db #$50, #%00010001
0D860 70 1A                         .db #$70, #%00011010
0D862 80 10                         .db #$80, #%00010000
0D864 D0 13                         .db #$D0, #%00010011
0D866 01 1A                         .db #$01, #%00011010
0D868 22 15                         .db #$22, #%00010101
0D86A A2 1A                         .db #$A2, #%00011010
0D86C B2 14                         .db #$B2, #%00010100
0D86E 03 67                         .db #$03, #%01100111
0D870 43 67                         .db #$43, #%01100111
0D872 83 67                         .db #$83, #%01100111
0D874 24 09                         .db #$24, #%00001001
0D876 74 0D                         .db #$74, #%00001101
0D878 C4 0A                         .db #$C4, #%00001010
0D87A 05 A7                         .db #$05, #%10100111
0D87C 45 27                         .db #$45, #%00100111
0D87E 95 27                         .db #$95, #%00100111
0D880 16 C7                         .db #$16, #%11000111
0D882 36 67                         .db #$36, #%01100111
0D884 86 67                         .db #$86, #%01100111
0D886 D6 07                         .db #$D6, #%00000111
0D888 07 A3                         .db #$07, #%10100011
0D88A 27 23                         .db #$27, #%00100011
0D88C 47 C7                         .db #$47, #%11000111
0D88E 57 A0                         .db #$57, #%10100000
0D890 67 A7                         .db #$67, #%10100111
0D892 77 20                         .db #$77, #%00100000
0D894 97 C7                         .db #$97, #%11000111
0D896 A7 A4                         .db #$A7, #%10100100
0D898 B7 A7                         .db #$B7, #%10100111
0D89A C7 24                         .db #$C7, #%00100100
0D89C 28 0B                         .db #$28, #%00001011
0D89E 38 A3                         .db #$38, #%10100011
0D8A0 78 08                         .db #$78, #%00001000
0D8A2 88 A0                         .db #$88, #%10100000
0D8A4 C8 0C                         .db #$C8, #%00001100
0D8A6 D8 A4                         .db #$D8, #%10100100
0D8A8 09 43                         .db #$09, #%01000011
0D8AA 59 40                         .db #$59, #%01000000
0D8AC A9 44                         .db #$A9, #%01000100
0D8AE FF                            .db #LEVEL_END
0D8AF                           
0D8AF                           lvl_layout_19:
0D8AF 11 A8                         .db #$11, #%10101000
0D8B1 21 68                         .db #$21, #%01101000
0D8B3 81 28                         .db #$81, #%00101000
0D8B5 B1 48                         .db #$B1, #%01001000
0D8B7 22 48                         .db #$22, #%01001000
0D8B9 62 68                         .db #$62, #%01101000
0D8BB B2 28                         .db #$B2, #%00101000
0D8BD 23 28                         .db #$23, #%00101000
0D8BF 83 28                         .db #$83, #%00101000
0D8C1 B3 28                         .db #$B3, #%00101000
0D8C3 04 E8                         .db #$04, #%11101000
0D8C5 24 08                         .db #$24, #%00001000
0D8C7 44 08                         .db #$44, #%00001000
0D8C9 64 E8                         .db #$64, #%11101000
0D8CB 84 E8                         .db #$84, #%11101000
0D8CD C4 A8                         .db #$C4, #%10101000
0D8CF D4 E8                         .db #$D4, #%11101000
0D8D1 15 48                         .db #$15, #%01001000
0D8D3 55 C8                         .db #$55, #%11001000
0D8D5 75 C8                         .db #$75, #%11001000
0D8D7 A5 08                         .db #$A5, #%00001000
0D8D9 36 08                         .db #$36, #%00001000
0D8DB B6 08                         .db #$B6, #%00001000
0D8DD 27 48                         .db #$27, #%01001000
0D8DF 97 28                         .db #$97, #%00101000
0D8E1 C7 08                         .db #$C7, #%00001000
0D8E3 09 61                         .db #$09, #%01100001
0D8E5 19 11                         .db #$19, #%00010001
0D8E7 49 61                         .db #$49, #%01100001
0D8E9 89 31                         .db #$89, #%00110001
0D8EB A9 61                         .db #$A9, #%01100001
0D8ED FF                            .db #LEVEL_END
0D8EE                           
0D8EE                           lvl_layout_20:
0D8EE 00 60                         .db #$00, #%01100000
0D8F0 10 1A                         .db #$10, #%00011010
0D8F2 40 A7                         .db #$40, #%10100111
0D8F4 50 20                         .db #$50, #%00100000
0D8F6 70 1A                         .db #$70, #%00011010
0D8F8 80 40                         .db #$80, #%01000000
0D8FA B0 1A                         .db #$B0, #%00011010
0D8FC C0 20                         .db #$C0, #%00100000
0D8FE 01 40                         .db #$01, #%01000000
0D900 31 1A                         .db #$31, #%00011010
0D902 A1 40                         .db #$A1, #%01000000
0D904 D1 1A                         .db #$D1, #%00011010
0D906 43 67                         .db #$43, #%01100111
0D908 83 47                         .db #$83, #%01000111
0D90A 44 A7                         .db #$44, #%10100111
0D90C 54 25                         .db #$54, #%00100101
0D90E 94 08                         .db #$94, #%00001000
0D910 A4 A7                         .db #$A4, #%10100111
0D912 55 05                         .db #$55, #%00000101
0D914 65 08                         .db #$65, #%00001000
0D916 06 27                         .db #$06, #%00100111
0D918 36 67                         .db #$36, #%01100111
0D91A 76 28                         .db #$76, #%00101000
0D91C A6 27                         .db #$A6, #%00100111
0D91E D6 07                         .db #$D6, #%00000111
0D920 A7 A7                         .db #$A7, #%10100111
0D922 08 60                         .db #$08, #%01100000
0D924 09 60                         .db #$09, #%01100000
0D926 18 A7                         .db #$18, #%10100111
0D928 48 A7                         .db #$48, #%10100111
0D92A 58 47                         .db #$58, #%01000111
0D92C 88 27                         .db #$88, #%00100111
0D92E B8 20                         .db #$B8, #%00100000
0D930 D8 1A                         .db #$D8, #%00011010
0D932 59 15                         .db #$59, #%00010101
0D934 69 60                         .db #$69, #%01100000
0D936 A9 60                         .db #$A9, #%01100000
0D938 FF                            .db #LEVEL_END
0D939                           
0D939                           lvl_layout_21:
0D939 00 13                         .db #$00, #%00010011
0D93B 10 11                         .db #$10, #%00010001
0D93D 20 67                         .db #$20, #%01100111
0D93F 60 67                         .db #$60, #%01100111
0D941 A0 47                         .db #$A0, #%01000111
0D943 D0 15                         .db #$D0, #%00010101
0D945 32 63                         .db #$32, #%01100011
0D947 72 05                         .db #$72, #%00000101
0D949 82 43                         .db #$82, #%01000011
0D94B B2 43                         .db #$B2, #%01000011
0D94D 33 03                         .db #$33, #%00000011
0D94F 43 2A                         .db #$43, #%00101010
0D951 63 7A                         .db #$63, #%01111010
0D953 73 2A                         .db #$73, #%00101010
0D955 A3 7A                         .db #$A3, #%01111010
0D957 34 63                         .db #$34, #%01100011
0D959 74 63                         .db #$74, #%01100011
0D95B B4 43                         .db #$B4, #%01000011
0D95D 06 63                         .db #$06, #%01100011
0D95F 46 63                         .db #$46, #%01100011
0D961 86 63                         .db #$86, #%01100011
0D963 C6 C3                         .db #$C6, #%11000011
0D965 07 7A                         .db #$07, #%01111010
0D967 47 7A                         .db #$47, #%01111010
0D969 67 0A                         .db #$67, #%00001010
0D96B 87 7A                         .db #$87, #%01111010
0D96D 08 13                         .db #$08, #%00010011
0D96F 18 43                         .db #$18, #%01000011
0D971 48 63                         .db #$48, #%01100011
0D973 88 63                         .db #$88, #%01100011
0D975 FF                            .db #LEVEL_END
0D976                           
0D976                           lvl_layout_22:
0D976 00 7A                         .db #$00, #%01111010
0D978 40 7A                         .db #$40, #%01111010
0D97A 80 7A                         .db #$80, #%01111010
0D97C C0 3A                         .db #$C0, #%00111010
0D97E 13 67                         .db #$13, #%01100111
0D980 83 A7                         .db #$83, #%10100111
0D982 B3 07                         .db #$B3, #%00000111
0D984 14 07                         .db #$14, #%00000111
0D986 44 07                         .db #$44, #%00000111
0D988 A4 07                         .db #$A4, #%00000111
0D98A 15 A5                         .db #$15, #%10100101
0D98C 45 A5                         .db #$45, #%10100101
0D98E 85 25                         .db #$85, #%00100101
0D990 86 05                         .db #$86, #%00000101
0D992 A6 05                         .db #$A6, #%00000101
0D994 17 11                         .db #$17, #%00010001
0D996 47 A1                         .db #$47, #%10100001
0D998 87 A1                         .db #$87, #%10100001
0D99A B7 A1                         .db #$B7, #%10100001
0D99C 18 41                         .db #$18, #%01000001
0D99E 68 01                         .db #$68, #%00000001
0D9A0 D8 01                         .db #$D8, #%00000001
0D9A2 FF                            .db #LEVEL_END
0D9A3                           
0D9A3                           lvl_layout_23:
0D9A3 00 71                         .db #$00, #%01110001
0D9A5 40 11                         .db #$40, #%00010001
0D9A7 50 43                         .db #$50, #%01000011
0D9A9 80 D1                         .db #$80, #%11010001
0D9AB 90 E3                         .db #$90, #%11100011
0D9AD A0 63                         .db #$A0, #%01100011
0D9AF 01 63                         .db #$01, #%01100011
0D9B1 41 63                         .db #$41, #%01100011
0D9B3 A1 63                         .db #$A1, #%01100011
0D9B5 02 63                         .db #$02, #%01100011
0D9B7 42 63                         .db #$42, #%01100011
0D9B9 62 11                         .db #$62, #%00010001
0D9BB A2 67                         .db #$A2, #%01100111
0D9BD 04 63                         .db #$04, #%01100011
0D9BF 44 23                         .db #$44, #%00100011
0D9C1 64 D1                         .db #$64, #%11010001
0D9C3 74 E3                         .db #$74, #%11100011
0D9C5 84 F1                         .db #$84, #%11110001
0D9C7 94 E3                         .db #$94, #%11100011
0D9C9 A4 C7                         .db #$A4, #%11000111
0D9CB B4 23                         .db #$B4, #%00100011
0D9CD 05 63                         .db #$05, #%01100011
0D9CF 45 23                         .db #$45, #%00100011
0D9D1 06 71                         .db #$06, #%01110001
0D9D3 46 11                         .db #$46, #%00010001
0D9D5 56 E3                         .db #$56, #%11100011
0D9D7 D6 07                         .db #$D6, #%00000111
0D9D9 17 D1                         .db #$17, #%11010001
0D9DB 27 43                         .db #$27, #%01000011
0D9DD 67 D1                         .db #$67, #%11010001
0D9DF A7 C7                         .db #$A7, #%11000111
0D9E1 C7 A7                         .db #$C7, #%10100111
0D9E3 D7 B3                         .db #$D7, #%10110011
0D9E5 28 43                         .db #$28, #%01000011
0D9E7 78 43                         .db #$78, #%01000011
0D9E9 29 43                         .db #$29, #%01000011
0D9EB 79 43                         .db #$79, #%01000011
0D9ED FF                           .db #LEVEL_END
0D9EE                           
0D9EE                           lvl_layout_24:
0D9EE 02 67                         .db #$02, #%01100111
0D9F0 42 67                         .db #$42, #%01100111
0D9F2 82 67                         .db #$82, #%01100111
0D9F4 05 67                         .db #$05, #%01100111
0D9F6 45 67                         .db #$45, #%01100111
0D9F8 85 67                         .db #$85, #%01100111
0D9FA 08 67                         .db #$08, #%01100111
0D9FC 48 67                         .db #$48, #%01100111
0D9FE 88 67                         .db #$88, #%01100111
0DA00 30 E7                         .db #$30, #%11100111
0DA02 70 E7                         .db #$70, #%11100111
0DA04 B0 E7                         .db #$B0, #%11100111
0DA06 34 E7                         .db #$34, #%11100111
0DA08 74 E7                         .db #$74, #%11100111
0DA0A B4 E7                         .db #$B4, #%11100111
0DA0C 20 13                         .db #$20, #%00010011
0DA0E 40 10                         .db #$40, #%00010000
0DA10 80 02                         .db #$80, #%00000010
0DA12 41 05                         .db #$41, #%00000101
0DA14 B1 09                         .db #$B1, #%00001001
0DA16 02 09                         .db #$02, #%00001001
0DA18 52 0C                         .db #$52, #%00001100
0DA1A 13 11                         .db #$13, #%00010001
0DA1C 33 04                         .db #$33, #%00000100
0DA1E 74 0C                         .db #$74, #%00001100
0DA20 B4 08                         .db #$B4, #%00001000
0DA22 15 09                         .db #$15, #%00001001
0DA24 55 0C                         .db #$55, #%00001100
0DA26 95 0C                         .db #$95, #%00001100
0DA28 47 03                         .db #$47, #%00000011
0DA2A A7 12                         .db #$A7, #%00010010
0DA2C 18 15                         .db #$18, #%00010101
0DA2E 09 05                         .db #$09, #%00000101
0DA30 19 03                         .db #$19, #%00000011
0DA32 FF                            .db #LEVEL_END
0DA33                           
0DA33                           lvl_layout_25:
0DA33 00 12                         .db #$00, #%00010010
0DA35 10 63                         .db #$10, #%01100011
0DA37 60 63                         .db #$60, #%01100011
0DA39 A0 07                         .db #$A0, #%00000111
0DA3B 01 11                         .db #$01, #%00010001
0DA3D A1 02                         .db #$A1, #%00000010
0DA3F 02 67                         .db #$02, #%01100111
0DA41 42 07                         .db #$42, #%00000111
0DA43 62 67                         .db #$62, #%01100111
0DA45 A2 C7                         .db #$A2, #%11000111
0DA47 03 61                         .db #$03, #%01100001
0DA49 43 01                         .db #$43, #%00000001
0DA4B 63 61                         .db #$63, #%01100001
0DA4D A6 E7                         .db #$A6, #%11100111
0DA4F B6 47                         .db #$B6, #%01000111
0DA51 C6 01                         .db #$C6, #%00000001
0DA53 B7 42                         .db #$B7, #%01000010
0DA55 B8 42                         .db #$B8, #%01000010
0DA57 C8 0A                         .db #$C8, #%00001010
0DA59 09 7A                         .db #$09, #%01111010
0DA5B 49 7A                         .db #$49, #%01111010
0DA5D 89 3A                         .db #$89, #%00111010
0DA5F B9 42                         .db #$B9, #%01000010
0DA61 FF                            .db #LEVEL_END
0DA62                           
0DA62                           ;; Level layout address pointers
0DA62                           tbl_lvl_layout_hi:
0DA62                           ifdef TESTING
0DA62 D3                            .db >#lvl_test
0DA63                           endif
0DA63 D3 D3 D3 D4 D4                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0DA68 D4 D5 D5 D5 D5                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0DA6D D6 D6 D6 D6 D7                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0DA72 D7 D7 D8 D8 D8                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0DA77 D9 D9 D9 D9 DA                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0DA7C                           
0DA7C                           tbl_lvl_layout_lo:
0DA7C                           ifdef TESTING
0DA7C 78                            .db <#lvl_test
0DA7D                           endif
0DA7D 89 A4 D9 0C 7D                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0DA82 B8 41 82 B9 FC                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0DA87 2B 7E A9 FC 73                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0DA8C 9E F3 5A AF EE                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0DA91 39 76 A3 EE 33                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0DA96                           
0DA96                           ;; Ball start position (#$YX)
0DA96                           tbl_lvl_ball_startpos:
0DA96                           ifdef TESTING
0DA96 29                            .db #$29
0DA97                           endif
0DA97 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0DA9C 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0DAA1 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0DAA6 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0DAAB 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0DAB0                           
0DAB0                               
0DAB0                           ;; Ball start direction, color and tile score
0DAB0                           ;; #% ccc v tttt
0DAB0                           ;;    ||| | ++++-- tile score
0DAB0                           ;;    ||| +------- vertical direction, up (0) or down
0DAB0                           ;;    +++--------- color (CBRYGM)
0DAB0                           tbl_lvl_ball_init:
0DAB0                           ifdef TESTING
0DAB0 20                            .db #%00100000
0DAB1                           endif
0DAB1 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0DAB6 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0DABB 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0DAC0 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0DAC5 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0DACA                           
0DACA                           
0DACA                           
0DACA                           ;; Helper table to multiply values by 16
0DACA                           tbl_Times16:
0DACA 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0DAD2 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0DADA                               
0DADA                           
0DADA                           ;; Helper table to multiply values by 64
0DADA                           tbl_Times64:
0DADA 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0DADE                           
0DADE                           
0DADE                           ;; Metatile ID to CHR data mapper
0DADE                           tbl_GametileTopLeft:
0DADE 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0DAE8                           
0DAE8                           tbl_GametileTopRight:
0DAE8 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0DAF2                           
0DAF2                           tbl_GametileBottomLeft:
0DAF2 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0DAFC                           
0DAFC                           tbl_GametileBottomRight:
0DAFC 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DB06                           
0DB06                           ;; Metatile ID to RAM byte data mapper
0DB06                           tbl_GameTileRamByte:
0DB06 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DB0B                           
0DB0B                           ;; HUD text data (with opaque background tile for sprite zero)
0DB0B                           tbl_HudText:
0DB0B 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DB13 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DB1A 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DB22 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DB29                           
0DB29                           ;; Move block top left tile based on color
0DB29                           tbl_MoveBlockTopLeftTile:
0DB29 42 4A 42 4A 42 4A 42          .db #$42, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DB30                           
0DB30                           ;; Game over data
0DB30                           tbl_GameOver:
0DB30 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DB34 00 00                         .db #_SPACE, #_SPACE
0DB36 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DB3A                           
0DB3A                           ;; Background fade pallette table
0DB3A                           tbl_BackgroundFade:
0DB3A 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DB44                           
0DB44                           ;; Sound effects
0DB44                           .include "game/include/table/sfx.asm"
0DB44                           ;;
0DB44                           ;; Explosion sound effects
0DB44                           ;;
0DB44                           ;;   #% ffff vvvv
0DB44                           ;;      |||| ++++---- volume (0=low, 15=high)
0DB44                           ;;      ++++-------- frequency (0=low, 15=high)
0DB44                           ;;
0DB44                           ;; #$FF = end of sfx
0DB44                           ;;
0DB44                           
0DB44                           tbl_ExplosionSfx:
0DB44 00                            .db #$00 ; buffer byte
0DB45 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DB4D 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DB55 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DB5D 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DB65 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DB6D 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DB72                           
0DB72                           tbl_ThudSfx:
0DB72 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DB73 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DB7B E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DB80                           
0DB80                           tbl_BounceSfx:
0DB80 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DB81 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DB85                           
0DB85 00                            .db #$00
0DB86                           
0DB86                           tbl_Sfx_hi:
0DB86 DB DB DB                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DB89                           
0DB89                           tbl_Sfx_lo:
0DB89 44 72 80                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DB8C                           
0DB8C                           
0DB8C                           ;; Volume envelope for move sound effect (reversed)
0DB8C                           tbl_MoveSfxVolume:
0DB8C 70 70 72 73 7B 7C 7B 7B       .db #$70, #$70, #$72, #$73, #$7B, #$7C, #$7B, #$7B
0DB94 79 79 78 77 76 76 75 75       .db #$79, #$79, #$78, #$77, #$76, #$76, #$75, #$75
0DB9C 74 74 73 73 73 73 72 71       .db #$74, #$74, #$73, #$73, #$73, #$73, #$72, #$71
0DBA4                           
0DBA4                           ;; Volume and frequency table for paint sound effect (reversed)
0DBA4 00                        tbl_PaintSfxVolume: .db #$00
0DBA5 B0 B1 B2 B3 B2 B4 B6 B3       .db #$B0, #$B1, #$B2, #$B3, #$B2, #$B4, #$B6, #$B3
0DBAD B6 B9 B5 B9 B5 B9 B5 B9       .db #$B6, #$B9, #$B5, #$B9, #$B5, #$B9, #$B5, #$B9
0DBB5 00                        tbl_PaintSfxFreqHi: .db #$00
0DBB6 08 08 08 08 08 08 08 08       .db #$08, #$08, #$08, #$08, #$08, #$08, #$08, #$08
0DBBE 08 09 08 09 09 09 09 09       .db #$08, #$09, #$08, #$09, #$09, #$09, #$09, #$09
0DBC6 00                        tbl_PaintSfxFreqLo: .db #$00
0DBC7 68 90 B8 E0 A4 CC F4 BC       .db #$68, #$90, #$B8, #$E0, #$A4, #$CC, #$F4, #$BC
0DBCF E4 0C F6 32 1A 56 44 80       .db #$E4, #$0C, #$F6, #$32, #$1A, #$56, #$44, #$80
0DBD7                               
0DBD7                           ;; End level sweep
0DBD7                           tbl_SweepVolume:
0DBD7 00 00 00 01 02 03 03 04       .db #$00, #$00, #$00, #$01, #$02, #$03, #$03, #$04
0DBDF 05 07 08 09 09 0A 0B 0D       .db #$05, #$07, #$08, #$09, #$09, #$0A, #$0B, #$0D
0DBE7                           tbl_SweepFrequency:
0DBE7 20 48 70 98 C0                .db #$20, #$48, #$70, #$98, #$C0 ; , #$E80DBEC                           
0DBEC                           ;; Lookup table to convert bonus ticks to score
0DBEC                           tbl_BonusToScore:
0DBEC 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DBF6                           
0DBF6                           ;; Check string for sentience (warm boot)
0DBF6 C0 FF EE 54 07            tbl_Sentient: .db #$C0, #$FF, #$EE, #$54, #$070DBFB                           
0DBFB                           ;; NMI handler
0DBFB                           NMI:
0DBFB                               .include "interrupt/nmi.asm"
0DBFB                           
0DBFB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DBFB                           ;;
0DBFB                           ;; include/nmi.asm
0DBFB                           ;;
0DBFB                           ;; Non-maskable interrupt script. This script is being executed
0DBFB                           ;; when vBlank hits.
0DBFB                           ;;
0DBFB                           ;;
0DBFB                           
0DBFB                               ;; Preserve accumulator through stack
0DBFB 48                            PHA
0DBFC                           
0DBFC                               ;; Should NMI be skipped?
0DBFC A5 1E                         LDA skip_nmi
0DBFE F0 03                         BEQ +
0DC00 4C F5 DD                          JMP +skip_nmi
0DC03                               +
0DC03                           
0DC03                               ;; When in NMI, skip additional NMI requests
0DC03 A9 01                         LDA #$01
0DC05 85 1E                         STA skip_nmi
0DC07                           
0DC07                               ;; Preserve X, Y, and PC through stack
0DC07 8A                            TXA
0DC08 48                            PHA
0DC09 98                            TYA
0DC0A 48                            PHA
0DC0B 08                            PHP
0DC0C                               
0DC0C                               ;; Check forced NMI skip
0DC0C A5 1F                         LDA force_skip_nmi
0DC0E F0 03                         BEQ +
0DC10 4C E4 DD                          JMP +force_skip_nmi
0DC13                               +
0DC13                           
0DC13                               ;; Update PPU mask
0DC13                               ;LDA #$00
0DC13                               ;STA PPU_CTRL
0DC13 A5 1D                         LDA soft_ppu_mask
0DC15 8D 01 20                      STA PPU_MASK
0DC18                               
0DC18                               
0DC18                               ;; Additional PPU updates go here
0DC18                               .include "game/interrupt/nmi.asm"
0DC18                           
0DC18                               ;; Check if ppu_buffer needs updating
0DC18 A5 44                         LDA ppu_buffer_update
0DC1A D0 03                         BNE +
0DC1C 4C 5E DC                          JMP +no_ppu_buffer_update
0DC1F                               +
0DC1F                           
0DC1F                               ;; Reset ppu control register and mask
0DC1F A2 00                         LDX #$00
0DC21 8E 00 20                      STX PPU_CTRL
0DC24 8E 01 20                      STX PPU_MASK
0DC27                           
0DC27                               ;; Set up loop
0DC27                               -
0DC27                                   ;; Reset hi/lo latch
0DC27 2C 02 20                          BIT PPU_STATUS
0DC2A                           
0DC2A                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DC2A BD 00 03                          LDA ppu_buffer,x
0DC2D 8D 06 20                          STA PPU_ADDR
0DC30 E8                                INX
0DC31 BD 00 03                          LDA ppu_buffer,x
0DC34 8D 06 20                          STA PPU_ADDR
0DC37                           
0DC37                                   ;; Write ppu_buffer data to PPU_ADDR
0DC37 E8                                INX
0DC38 BD 00 03                          LDA ppu_buffer,x
0DC3B 8D 07 20                          STA PPU_DATA
0DC3E                           
0DC3E                                   ;; Check if updating is done (eg. X is at pointer)
0DC3E E8                                INX
0DC3F E4 45                             CPX ppu_buffer_pointer
0DC41 F0 03                             BEQ +
0DC43 4C 27 DC                      JMP -
0DC46                           +
0DC46                           
0DC46                               ;; Reset ppu buffer update and pointer
0DC46 A9 00                         LDA #$00
0DC48 85 44                         STA ppu_buffer_update
0DC4A 85 45                         STA ppu_buffer_pointer
0DC4C                               
0DC4C                               ;; Reset scrolling position
0DC4C 8D 05 20                      STA PPU_SCROLL
0DC4F 8D 05 20                      STA PPU_SCROLL
0DC52                           
0DC52                               ;; Restore ppu control register and mask
0DC52 A9 90                         LDA #%10010000
0DC54 8D 00 20                      STA PPU_CTRL
0DC57 A5 1D                         LDA soft_ppu_mask
0DC59 8D 01 20                      STA PPU_MASK
0DC5C A9 00                         LDA #$00
0DC5E                           
0DC5E                           ;; Continue other NMI stuff
0DC5E                           +no_ppu_buffer_update:
0DC5E                           
0DC5E                               ;; Reset sprite RAM, draw sprites
0DC5E 8D 03 20                      STA OAM_ADDR
0DC61 A9 02                         LDA #$02
0DC63 8D 14 40                      STA OAM_DMA
0DC66                           
0DC66                               ;; Decrease explosion and move block timers
0DC66 A0 04                         LDY #MAX_ANIMATIONS
0DC68 A2 00                         LDX #$00
0DC6A                               -
0DC6A BD 60 03                          LDA explosion_timer,x
0DC6D F0 03                             BEQ +
0DC6F DE 60 03                              DEC explosion_timer,x
0DC72                                   +
0DC72                           
0DC72 BD 80 03                          LDA move_block_timer,x
0DC75 F0 03                             BEQ +
0DC77 DE 80 03                              DEC move_block_timer,x
0DC7A                                   +
0DC7A                                   
0DC7A E8                                INX
0DC7B 88                                DEY
0DC7C F0 03                             BEQ +done
0DC7E 4C 6A DC                      JMP -
0DC81                           +done:
0DC81                           
0DC81                               ;; Decrease nudge timer
0DC81 A5 49                         LDA nudge_timer
0DC83 F0 02                         BEQ +
0DC85 C6 49                             DEC nudge_timer
0DC87                               +
0DC87                           
0DC87                               ;; Decrease bonus timer
0DC87 A5 4A                         LDA bonus_timer
0DC89 F0 02                         BEQ +
0DC8B C6 4A                             DEC bonus_timer
0DC8D                               +
0DC8D                           
0DC8D                               ;; Decrease kill timer
0DC8D A5 4B                         LDA kill_timer
0DC8F F0 02                         BEQ +
0DC91 C6 4B                             DEC kill_timer
0DC93                               +
0DC93                               
0DC93                               ;; Decrease and handle unfreeze timer
0DC93 A5 4C                         LDA unfreeze_timer
0DC95 F0 0A                         BEQ +
0DC97 C6 4C                             DEC unfreeze_timer
0DC99 D0 06                             BNE +
0DC9B                                   
0DC9B A5 42                             LDA ball_flags
0DC9D 29 FB                             AND #UNFREEZE_BALL
0DC9F 85 42                             STA ball_flags
0DCA1                               +
0DCA1                           
0DCA1                               ;; Play background noise
0DCA1 A5 43                         LDA screen_mode
0DCA3 29 01                         AND #IS_GAME_SCREEN
0DCA5 F0 0C                         BEQ +
0DCA7                                   .include "game/include/main/background_sound.asm"
0DCA7                           
0DCA7                               ;; If noise is muted, no noise should play
0DCA7 A5 56                         LDA noise_muted
0DCA9 F0 08                         BEQ +
0DCAB A9 30                             LDA #$30
0DCAD 8D 0C 40                          STA NOISE_VOLUME
0DCB0 4C 18 DD                          JMP +endNoise
0DCB3                               +
0DCB3                               
0DCB3                               ;; At random times, set max_noise period to $03-$0A
0DCB3 A5 50                         LDA max_noise
0DCB5 D0 1D                         BNE +
0DCB7 20 AF C5                          JSR sub_GetRandomNumber
0DCBA 29 EF                             AND #%11101111
0DCBC D0 16                             BNE +
0DCBE                                   
0DCBE A5 20                             LDA frame_counter
0DCC0 85 21                             STA random_seed
0DCC2 20 AF C5                          JSR sub_GetRandomNumber
0DCC5 29 07                             AND #$07
0DCC7 69 03                             ADC #$03
0DCC9 85 50                             STA max_noise
0DCCB A9 01                             LDA #$01
0DCCD 85 51                             STA sweep_noise
0DCCF A9 34                             LDA #$34
0DCD1 8D 0C 40                          STA NOISE_VOLUME
0DCD4                               +
0DCD4                           
0DCD4                               ;; if sweep noise = $00: constant noise
0DCD4                               ;; else if sweep noise > $80: decrease pitch
0DCD4                               ;; else: increase pitch
0DCD4 A5 51                         LDA sweep_noise
0DCD6 F0 18                         BEQ +constantNoise
0DCD8 30 2A                         BMI +decreaseNoise
0DCDA                           
0DCDA                           ;; Sweep noise up to max noise pitch
0DCDA                           +increaseNoise:
0DCDA C6 52                         DEC current_noise
0DCDC A5 52                         LDA current_noise
0DCDE 8D 0E 40                      STA NOISE_PERIOD
0DCE1 C5 50                         CMP max_noise
0DCE3 D0 08                         BNE +
0DCE5 A9 00                             LDA #$00
0DCE7 85 51                             STA sweep_noise
0DCE9 A9 0A                             LDA #$0A
0DCEB 85 53                             STA noise_timer
0DCED                               +
0DCED 4C 18 DD                      JMP +endNoise
0DCF0                           
0DCF0                           ;; Keep noise at constant pitch
0DCF0                           +constantNoise:
0DCF0 A5 50                         LDA max_noise
0DCF2 F0 24                         BEQ +endNoise
0DCF4                           
0DCF4 A5 53                         LDA noise_timer
0DCF6 D0 07                         BNE +
0DCF8 A9 80                             LDA #$80
0DCFA 85 51                             STA sweep_noise
0DCFC 4C 18 DD                          JMP +endNoise
0DCFF                               +
0DCFF C6 53                         DEC noise_timer
0DD01 4C 18 DD                      JMP +endNoise
0DD04                           
0DD04                           ;; Sweep noise down to initial pitch
0DD04                           +decreaseNoise:
0DD04 E6 52                         INC current_noise
0DD06 A5 52                         LDA current_noise
0DD08 8D 0E 40                      STA NOISE_PERIOD
0DD0B C9 0E                         CMP #$0E
0DD0D D0 09                         BNE +endNoise
0DD0F                           
0DD0F 20 3F C6                      JSR sub_BackgroundNoise
0DD12 A9 00                         LDA #$00
0DD14 85 50                         STA max_noise
0DD16 85 51                         STA sweep_noise
0DD18                           
0DD18                           +endNoise:
0DD18                           
0DD18                               +
0DD18                           
0DD18                               ;; Play bonus to score bleeps
0DD18                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DD18                           
0DD18                           ;; Random bleepy noises
0DD18                           
0DD18 A5 54                         LDA do_beeps
0DD1A F0 2E                         BEQ +continue
0DD1C                               
0DD1C C9 02                         CMP #$02
0DD1E D0 12                         BNE +beep
0DD20                              
0DD20                           +stopBeep:
0DD20 A9 00                         LDA #$00
0DD22 85 54                         STA do_beeps
0DD24 A9 08                         LDA #$08
0DD26 8D 15 40                      STA APU_STATUS
0DD29 8D 0F 40                      STA NOISE_LENGTH
0DD2C 20 3F C6                      JSR sub_BackgroundNoise
0DD2F 4C 4A DD                      JMP +continue
0DD32                               
0DD32                           +beep:
0DD32 A9 01                         LDA #$01
0DD34 8D 15 40                      STA APU_STATUS
0DD37 A5 55                         LDA soft_pulse1
0DD39 8D 00 40                      STA PULSE1_VOLUME
0DD3C 20 AF C5                      JSR sub_GetRandomNumber
0DD3F 8D 02 40                      STA PULSE1_TIMER_LO
0DD42 20 AF C5                      JSR sub_GetRandomNumber
0DD45 29 01                         AND #$01
0DD47 8D 03 40                      STA PULSE1_TIMER_HI
0DD4A                           
0DD4A                           +continue:
0DD4A                           
0DD4A                               
0DD4A                               ;; Play sound effect
0DD4A                               .include "game/include/main/nmi_sfx.asm"
0DD4A                           
0DD4A                               ;; Get current explosion sfx frame; if not set, skip this
0DD4A A4 59                         LDY sfx_timer
0DD4C F0 1F                         BEQ +done
0DD4E                               
0DD4E                                   ;; Check if explosion sfx is done; if so, disable and skip
0DD4E B1 57                             LDA (sfx_address),y
0DD50 D0 07                             BNE +
0DD52 A9 00                                 LDA #$00
0DD54 85 59                                 STA sfx_timer
0DD56 4C 6D DD                              JMP +done
0DD59                                   +
0DD59                                   
0DD59                                   ;; Set low nibble as volume
0DD59 29 0F                             AND #$0F
0DD5B 09 30                             ORA #$30
0DD5D 8D 0C 40                          STA NOISE_VOLUME
0DD60                                   
0DD60                                   ;; Set high nibble as frequency
0DD60 B1 57                             LDA (sfx_address),y
0DD62 4A                                LSR
0DD63 4A                                LSR
0DD64 4A                                LSR
0DD65 4A                                LSR
0DD66 49 0F                             EOR #$0F
0DD68 8D 0E 40                          STA NOISE_PERIOD
0DD6B                                   
0DD6B                                   ;; Next frame
0DD6B E6 59                             INC sfx_timer
0DD6D                               +done:
0DD6D                           
0DD6D                           
0DD6D                               ;; Check move sfx
0DD6D A4 5A                         LDY sfx_timer+1
0DD6F F0 34                         BEQ +done
0DD71                           
0DD71 C6 5A                             DEC sfx_timer+1
0DD73 C0 18                             CPY #$18
0DD75 D0 0D                             BNE +
0DD77                                       ;; Update APU status
0DD77 A9 09                                 LDA #$09
0DD79 8D 15 40                              STA APU_STATUS
0DD7C A9 8B                                 LDA #$8B
0DD7E 85 5C                                 STA sfx_frequency
0DD80 A9 0A                                 LDA #$0A
0DD82 85 5D                                 STA sfx_frequency+1
0DD84                                   +
0DD84                                   
0DD84                                   ;; Set volume
0DD84 B9 8C DB                          LDA tbl_MoveSfxVolume,y
0DD87 8D 00 40                          STA PULSE1_VOLUME
0DD8A                                   
0DD8A 84 0B                             STY temp
0DD8C A9 18                             LDA #$18
0DD8E 38                                SEC
0DD8F E5 0B                             SBC temp
0DD91 4A                                LSR
0DD92 18                                CLC
0DD93 69 03                             ADC #$03
0DD95 65 5C                             ADC sfx_frequency
0DD97 85 5C                             STA sfx_frequency
0DD99 8D 02 40                          STA PULSE1_TIMER_LO
0DD9C A5 5D                             LDA sfx_frequency+1
0DD9E 69 00                             ADC #$00
0DDA0 85 5D                             STA sfx_frequency+1
0DDA2 8D 03 40                          STA PULSE1_TIMER_HI
0DDA5                               +done:
0DDA5                           
0DDA5                           
0DDA5                               ;; Check paint sfx
0DDA5 A4 5B                         LDY sfx_timer+2
0DDA7 F0 1D                         BEQ +done
0DDA9                           
0DDA9 C6 5B                             DEC sfx_timer+2
0DDAB C0 10                             CPY #$10
0DDAD D0 05                             BNE +
0DDAF                                       ;; Update APU status
0DDAF A9 09                                 LDA #$09
0DDB1 8D 15 40                              STA APU_STATUS
0DDB4                                   +
0DDB4                                   
0DDB4                                   ;; Set volume
0DDB4 B9 A4 DB                          LDA tbl_PaintSfxVolume,y
0DDB7 8D 00 40                          STA PULSE1_VOLUME
0DDBA B9 C6 DB                          LDA tbl_PaintSfxFreqLo,y
0DDBD 8D 02 40                          STA PULSE1_TIMER_LO
0DDC0 B9 B5 DB                          LDA tbl_PaintSfxFreqHi,y
0DDC3 8D 03 40                          STA PULSE1_TIMER_HI
0DDC6                               +done:
0DDC6                           
0DDC6                           
0DDC6                               ;; Check sweep sfx
0DDC6 A5 5E                         LDA sfx_sweep_count
0DDC8 F0 1A                         BEQ +done
0DDCA C9 0F                             CMP #$0F
0DDCC D0 05                             BNE +
0DDCE A9 01                                 LDA #$01
0DDD0 8D 15 40                              STA APU_STATUS
0DDD3                                   +
0DDD3 A5 5F                             LDA sfx_sweep_volume
0DDD5 09 70                             ORA #$70
0DDD7 8D 00 40                          STA PULSE1_VOLUME
0DDDA A5 61                             LDA sfx_sweep_frequency
0DDDC 8D 02 40                          STA PULSE1_TIMER_LO
0DDDF A9 08                             LDA #$08
0DDE1 8D 03 40                          STA PULSE1_TIMER_HI
0DDE4                               +done:0DDE4                               
0DDE4                           
0DDE4                           ;; This is what happens when we forced nmi skip
0DDE4                           +force_skip_nmi:
0DDE4                           
0DDE4                               ;; Increase frame timers
0DDE4 E6 20                         INC frame_counter
0DDE6                           
0DDE6                               ;; reset sprites_update_position
0DDE6 A9 00                         LDA #$00
0DDE8 85 40                         STA sprites_update_position
0DDEA                           
0DDEA                               ;; Don't skip next NMI request
0DDEA A9 00                         LDA #$00
0DDEC 85 1E                         STA skip_nmi
0DDEE 85 62                         STA check_nmi
0DDF0                           
0DDF0                               ;; Restore X, Y and PC from stack
0DDF0 28                            PLP
0DDF1 68                            PLA
0DDF2 A8                            TAY
0DDF3 68                            PLA
0DDF4 AA                            TAX
0DDF5                           
0DDF5                           +skip_nmi:
0DDF5                               ;; Restore accumulator from stack
0DDF5 68                            PLA
0DDF6                           
0DDF6                               ;; Return
0DDF6 40                            RTI
0DDF7                           
0DDF7                           
0DDF7                           ;; IRQ handler (empty)
0DDF7                           IRQ:
0DDF7                               .include "interrupt/irq.asm"
0DDF7                           
0DDF7 40                            RTI
0DDF8                           
0DDF8                           
0DDF8                           ;; Interrupt vectors
0DDF8 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA FB DB                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE F7 DD                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
