                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_SPRITERAM = $0200
                                ADDR_OTHERRAM  = $0300
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Starting address for screen tile RAM
                                ADDR_SCREENTILERAM  = $0400
                                
                                
                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI = #$02
                                BALL_SPEED_LO = #$C0
                                BALL_TILE_CHR = #$01
                                BALL_ATTR     = #%00000000
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD     = #%00000001
                                KILL_BALL        = #%00000001
                                REVIVE_BALL      = #%11111110
                                NUDGE_BALL_RIGHT = #%00000010
                                NUDGE_BALL_LEFT  = #%11111101
                                BALL_MOVES_DOWN  = #%00000100
                                MOVE_BALL_DOWN   = #%00000100
                                MOVE_BALL_UP     = #%11111011
                                BALL_IS_FROZEN   = #%00010000
                                FREEZE_BALL      = #%00010000
                                UNFREEZE_BALL    = #%11101111
                                
                                
                                ;; Screen load helpers
                                LOAD_INTRO_SCREEN = #%10000000
                                LOAD_GAME_SCREEN  = #%10000001
                                LOAD_WIN_SCREEN   = #%10000010
                                IS_INTRO_SCREEN   = #%00000000
                                IS_GAME_SCREEN    = #%00000001
                                IS_WIN_SCREEN     = #%00000010
                                CHECK_SCREEN_MODE = #%00000011
                                
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$30
                                BOUND_BOTTOM    = #$C8
                                BOUND_LEFT      = #$10
                                BOUND_RIGHT     = #$E8
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                
                                ;; Max number of nudge frames
                                NUDGE_FRAMES    = #$04
                                
                                
                                ;; Helper constant for when a level is done loading
                                LEVEL_END       = #$FF
                                
                                
                                ;; Character map
                                _SPACE = #$00
                                _0     = #$01
                                _1     = #$02
                                _2     = #$03
                                _3     = #$04
                                _4     = #$05
                                _5     = #$06
                                _6     = #$07
                                _7     = #$08
                                _8     = #$09
                                _9     = #$0A
                                _A     = #$0B
                                _B     = #$0C
                                _C     = #$0D
                                _D     = #$0E
                                _E     = #$0F
                                _F     = #$10
                                _G     = #$11
                                _H     = #$12
                                _I     = #$13
                                _J     = #$14
                                _K     = #$15
                                _L     = #$16
                                _M     = #$17
                                _N     = #$18
                                _O     = #$19
                                _P     = #$1A
                                _Q     = #$1B
                                _R     = #$1C
                                _S     = #$1D
                                _T     = #$1E
                                _U     = #$1F
                                _V     = #$20
                                _W     = #$21
                                _X     = #$22
                                _Y     = #$23
                                _Z     = #$24
                                _COMMA = #$25
                                _DOT   = #$26
                                _COLON = #$27
                                _COPY  = #$28
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           
00025                           ;; Update-position check
00025                           ball_update_position   .dsb 1
00026                           
00026                           
00026                           ;; Ball flags
00026                           ;; #% c c c f . v n a
00026                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00026                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00026                           ;;    | | | | | +------ ball moves up (0) or down (1)
00026                           ;;    | | | | +-------- (unused for now)
00026                           ;;    | | | +---------- ball is frozen (not moving)
00026                           ;;    +-+-+------------ ball color (1-6)
00026                           ball_flags             .dsb 1
00027                           
00027                           
00027                           ;; Screen mode
00027                           ;; #% u . . . . . t t
00027                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00027                           ;;    | +-+-+-+-+------------- unused
00027                           ;;    +----------------------- should the screen update
00027                           screen_mode            .dsb 1
00028                           
00028                           
00028                           ;; Start level pointer
00028                           ;; You can start the game at level 1, 5, 9, 13 or 17.
00028                           ;; This is the pointer that tells you at which level to start.
00028                           startlevel_pointer     .dsb 1 
00029                           
00029                           
00029                           ;; PPU buffer variables
00029                           ppu_buffer_update      .dsb 1
0002A                           ppu_buffer_pointer     .dsb 1
0002B                           
0002B                           ;; Pointer to keep track of the number of explosions
0002B                           explosion_pointer      .dsb 1
0002C                           
0002C                           ;; Sprite RAM pointer to keep track of sprites to update
0002C                           sprite_ram_pointer     .dsb 1
0002D                           
0002D                           ;; Nudge counter
0002D                           nudge_counter          .dsb 1
0002E                           
0002E                           ;; Current level
0002E                           current_level          .dsb 1
0002F                           
0002F                               0002F                           .ende
                                
                                ;; Other RAM (must be ENUM'd within)
                                .include "ram/misc.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; ram/misc.asm
                                ;;
                                ;; List of additional, non-zeropage RAM variables. Currently
                                ;; empty, but will hold data like the OAM buffer and other,
                                ;; less-often accessed, global variables.
                                ;;
                                ;;
                                
                                
                                    ;; Game specific RAM variables
                                    .include "game/ram/misc.asm"
                                ;; miscellaneous (non-zeropage) ram variables go here
                                
                                .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
                                
                                
                                ;; screen tile data (14x10 metatiles)
                                .enum ADDR_SCREENTILERAM
00400                               tile_type                 .dsb 140
0048C                           .ende
                                
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 A3 C2                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 A3 C2                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 27                         STA screen_mode
0C04F                           
0C04F                           
0C04F                           ;; Main game loop
0C04F                           MainGameLoop:
0C04F                               .include "game/main.asm"
0C04F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C04F                           ;;
0C04F                           ;; game/main.asm
0C04F                           ;;
0C04F                           ;; The main game loop content.
0C04F                           ;;
0C04F                           ;;
0C04F                           
0C04F                               ;; Reset sprite pointer every game loop
0C04F A9 00                         LDA #$00
0C051 85 2C                         STA sprite_ram_pointer
0C053                           
0C053                               ;; Store previous buttons
0C053 A5 0F                         LDA buttons_held
0C055 85 0E                         STA buttons_prev
0C057                           
0C057                               ;; Read controller input
0C057 20 8F C2                      JSR sub_ReadController
0C05A                           
0C05A                               ;; Get buttons released
0C05A A5 0F                         LDA buttons_held
0C05C 49 FF                         EOR #$FF
0C05E 25 0E                         AND buttons_prev
0C060 85 11                         STA buttons_released
0C062                           
0C062                               ;; Set buttons pressed
0C062 A5 0E                         LDA buttons_prev
0C064 49 FF                         EOR #$FF
0C066 25 0F                         AND buttons_held
0C068 85 10                         STA buttons_pressed
0C06A                           
0C06A                               ;; Load screen?
0C06A A5 27                         LDA screen_mode
0C06C 29 80                         AND #%10000000
0C06E F0 1E                         BEQ +screenLoaded
0C070                           
0C070                               ;; Get screen type to load
0C070 A5 27                         LDA screen_mode
0C072 29 03                         AND #%00000011
0C074 A8                            TAY
0C075                               
0C075                               ;; Get address to load screen type from
0C075 B9 FD C6                      LDA tbl_LoadScreenLo,y
0C078 85 0C                         STA pointer
0C07A B9 FA C6                      LDA tbl_LoadScreenHi,y
0C07D 85 0D                         STA pointer+1
0C07F                           
0C07F                               ;; Load screen
0C07F 20 3B C3                      JSR sub_DisableRendering
0C082 20 79 C3                      JSR sub_JumpToPointer
0C085 20 4F C3                      JSR sub_EnableRendering
0C088                               
0C088                               ;; Don't load screen anymore next loop
0C088 A5 27                         LDA screen_mode
0C08A 29 7F                         AND #%01111111
0C08C 85 27                         STA screen_mode
0C08E                               
0C08E                           
0C08E                           +screenLoaded:
0C08E                           
0C08E                               ;; CONCEPT SCRIPTS
0C08E                               
0C08E                               ;; Upon pressing A, an explosion will happen on screen
0C08E                               .include "game/test/show_animation.asm"
0C08E                               ;; If A button is pressed, initiate explosion
0C08E A5 10                         LDA buttons_pressed
0C090 29 80                         AND #BUTTON_A
0C092 D0 03                         BNE +
0C094 4C C6 C0                          JMP +end
0C097                               +
0C097                           
0C097                               ;; Get most recent slot for explosion
0C097 A6 2B                         LDX explosion_pointer
0C099                           
0C099                               ;; If 0, use max pointer value
0C099 D0 02                         BNE +
0C09B A2 04                             LDX #MAX_ANIMATIONS
0C09D                               +
0C09D                           
0C09D                               ;; Decrease pointer by one
0C09D CA                            DEX
0C09E 86 2B                         STX explosion_pointer
0C0A0                           
0C0A0                               ;; Load explosion data into RAM
0C0A0 A9 00                         LDA #$00
0C0A2 9D 34 03                      STA explosion_currentframe,x
0C0A5 A9 04                         LDA #ANIMATION_SPEED
0C0A7 9D 30 03                      STA explosion_framecounter,x
0C0AA 20 81 C2                      JSR sub_GetRandomNumber
0C0AD                               ;AND #%11110000
0C0AD 9D 3C 03                      STA explosion_x,x
0C0B0 20 81 C2                      JSR sub_GetRandomNumber
0C0B3                               ;AND #%11110000
0C0B3 9D 40 03                      STA explosion_y,x
0C0B6 20 81 C2                      JSR sub_GetRandomNumber
0C0B9 29 02                         AND #%00000010
0C0BB 18                            CLC
0C0BC 69 01                         ADC #$01
0C0BE 9D 38 03                      STA explosion_attributes,x
0C0C1 A9 01                         LDA #$01
0C0C3 9D 44 03                      STA explosion_active,x
0C0C6                           
0C0C6                           
0C0C6                           +end:
0C0C6                           
0C0C6                               ;; Set up loop
0C0C6 A2 00                         LDX #$00
0C0C8                               -loop_load_animation:
0C0C8                                   ;; Check if current animation is active. If not, goto next
0C0C8 BD 44 03                          LDA explosion_active,x
0C0CB D0 03                             BNE +
0C0CD 4C 67 C1                              JMP +next
0C0D0                                   +
0C0D0                           
0C0D0                                   ;; Check the explosion framecounter
0C0D0 BD 30 03                          LDA explosion_framecounter,x
0C0D3 D0 26                             BNE +
0C0D5                                       ;; Framecounter is 0
0C0D5                                       ;; Reset to animation speed
0C0D5 A9 04                                 LDA #ANIMATION_SPEED
0C0D7 9D 30 03                              STA explosion_framecounter,x
0C0DA                           
0C0DA                                       ;; Set next animation frame, and check if we're done yet
0C0DA FE 34 03                              INC explosion_currentframe,x
0C0DD BD 34 03                              LDA explosion_currentframe,x
0C0E0 C9 0A                                 CMP #ANIM_SLIDES
0C0E2 D0 17                                 BNE +
0C0E4                           
0C0E4                                       ;; If we're done, inactivate current explosion, clean
0C0E4                                       ;; up sprite RAM and go to the next one
0C0E4 A9 00                                 LDA #$00
0C0E6 9D 44 03                              STA explosion_active,x
0C0E9                                       
0C0E9 A9 09                                 LDA #SLIDE_SIZE
0C0EB 0A                                    ASL
0C0EC 0A                                    ASL
0C0ED A8                                    TAY
0C0EE A9 EF                                 LDA #$EF
0C0F0                                       -
0C0F0 88                                        DEY
0C0F1 99 00 02                                  STA ADDR_SPRITERAM,y
0C0F4 C0 00                                     CPY #00
0C0F6 D0 F8                                 BNE -
0C0F8                                       
0C0F8 4C 67 C1                              JMP +next
0C0FB                                   +
0C0FB                           
0C0FB                                   ;; Load (x,y) position in temp variables
0C0FB BD 3C 03                          LDA explosion_x,x
0C0FE 85 01                             STA temp+1
0C100 85 03                             STA temp+3
0C102 BD 40 03                          LDA explosion_y,x
0C105 85 02                             STA temp+2
0C107                           
0C107                                   ;; Load attribute in temp variable
0C107 BD 38 03                          LDA explosion_attributes,x
0C10A 85 04                             STA temp+4
0C10C                           
0C10C                                   ;; Load current frame into Y-register
0C10C BC 34 03                          LDY explosion_currentframe,x
0C10F                           
0C10F                                   ;; Load current frame ROM address from table
0C10F B9 E4 C6                          LDA explosion_anim_lo,y
0C112 85 0C                             STA pointer
0C114 B9 DA C6                          LDA explosion_anim_hi,y
0C117 85 0D                             STA pointer+1
0C119                           
0C119                                   ;; Save x-register on stack
0C119 8A                                TXA
0C11A 48                                PHA
0C11B                           
0C11B                                   ;; Load sprites into sprite RAM
0C11B A6 2C                             LDX sprite_ram_pointer
0C11D A0 00                             LDY #$00
0C11F                           
0C11F                                   ;; Prepare (x,y) offset for loop
0C11F 84 00                             STY temp
0C121                           
0C121                                   -loop_load_sprite:
0C121                                   
0C121                                       ;; Do not draw empty sprites
0C121 B1 0C                                 LDA (pointer),y
0C123 F0 18                                 BEQ +nextSprite
0C125                                   
0C125                                           ;; Add y-position to sprite ram buffer
0C125 A5 02                                     LDA temp+2
0C127 9D 00 02                                  STA ADDR_SPRITERAM,x
0C12A E8                                        INX
0C12B                           
0C12B                                           ;; Get tile number from frame ROM address, and
0C12B                                           ;; add it to sprite ram buffer
0C12B B1 0C                                     LDA (pointer),y
0C12D 9D 00 02                                  STA ADDR_SPRITERAM,x
0C130 E8                                        INX
0C131                           
0C131                                           ;; Add attribute data to sprite ram buffer
0C131 A5 04                                     LDA temp+4
0C133 9D 00 02                                  STA ADDR_SPRITERAM,x
0C136 E8                                        INX
0C137                           
0C137                                           ;; Add x-position to sprite ram buffer
0C137 A5 03                                     LDA temp+3
0C139 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13C E8                                        INX
0C13D                           
0C13D                                       +nextSprite:
0C13D                           
0C13D                                       ;; Check if all sprites are done
0C13D C8                                    INY
0C13E C0 09                                 CPY #SLIDE_SIZE
0C140 F0 21                                 BEQ +done
0C142                           
0C142                                       ;; Update x value
0C142 A5 03                                 LDA temp+3
0C144 18                                    CLC
0C145 69 08                                 ADC #$08
0C147 85 03                                 STA temp+3
0C149                           
0C149                                       ;; Update temp for x,y position
0C149 E6 00                                 INC temp
0C14B A5 00                                 LDA temp
0C14D C9 03                                 CMP #SLIDE_WIDTH
0C14F D0 0F                                 BNE +
0C151                                           ;; Row is done; reset x-position
0C151 A5 01                                     LDA temp+1
0C153 85 03                                     STA temp+3
0C155                           
0C155                                           ;; Update y-position
0C155 A5 02                                     LDA temp+2
0C157 18                                        CLC
0C158 69 08                                     ADC #$08
0C15A 85 02                                     STA temp+2
0C15C                           
0C15C                                           ;; Reset row counter
0C15C A9 00                                     LDA #$00
0C15E 85 00                                     STA temp
0C160                                       +
0C160                           
0C160 4C 21 C1                          JMP -loop_load_sprite
0C163                           
0C163                               +done:
0C163 86 2C                             STX sprite_ram_pointer
0C165                           
0C165                                   ;; Retrieve x-register from stack
0C165 68                                PLA
0C166 AA                                TAX
0C167                           
0C167                               +next:
0C167                                   ;; Check if all animations have been updated
0C167 E8                                INX
0C168 E0 04                             CPX #MAX_ANIMATIONS
0C16A F0 03                             BEQ +done
0C16C                           
0C16C 4C C8 C0                      JMP -loop_load_animation
0C16F                           +done:
0C16F                           
0C16F                               ;; On the game screen, the ball should move
0C16F A5 27                         LDA screen_mode
0C171 C9 01                         CMP #IS_GAME_SCREEN
0C173 F0 03                         BEQ +
0C175 4C 5E C2                          JMP ++
0C178                               +
0C178                               .include "game/test/move_ball.asm"
0C178                           
0C178                               ;; check if position should be updated (ie. has nmi happened yet)
0C178 A5 25                         LDA ball_update_position
0C17A F0 03                         BEQ +
0C17C 4C 42 C2                          JMP +skipBallMovement
0C17F                               +
0C17F                           
0C17F                               ;; Check if ball goes up or down
0C17F A5 26                         LDA ball_flags
0C181 29 04                         AND #BALL_MOVES_DOWN
0C183 F0 27                         BEQ +moveBallUp
0C185                           
0C185                           
0C185                           +moveBallDown:
0C185                               ;; update the low byte
0C185 A5 1A                         LDA ball_ypos_lo
0C187 18                            CLC
0C188 69 C0                         ADC #BALL_SPEED_LO
0C18A 85 1A                         STA ball_ypos_lo
0C18C                           
0C18C                               ;; update the high byte with carry
0C18C A5 19                         LDA ball_ypos_hi
0C18E 69 02                         ADC #BALL_SPEED_HI
0C190 85 19                         STA ball_ypos_hi
0C192                               
0C192                               ;; Check bottom bound
0C192 C9 C8                         CMP #BOUND_BOTTOM
0C194 90 38                         BCC +checkHorizontalMovement
0C196 F0 36                         BEQ +checkHorizontalMovement
0C198                           
0C198                               ;; Update ball color (test)
0C198 20 00 C3                      JSR sub_ColorizeBall
0C19B                           
0C19B                               ;; Change ball direction to "up"
0C19B A9 C8                         LDA #BOUND_BOTTOM
0C19D 85 19                         STA ball_ypos_hi
0C19F A9 00                         LDA #$00
0C1A1 85 1A                         STA ball_ypos_lo
0C1A3 A5 26                         LDA ball_flags
0C1A5 29 FB                         AND #MOVE_BALL_UP
0C1A7 85 26                         STA ball_flags
0C1A9 4C CE C1                      JMP +checkHorizontalMovement
0C1AC                           
0C1AC                           
0C1AC                           +moveBallUp:
0C1AC                               ;; update the low byte
0C1AC A5 1A                         LDA ball_ypos_lo
0C1AE 38                            SEC
0C1AF E9 C0                         SBC #BALL_SPEED_LO
0C1B1 85 1A                         STA ball_ypos_lo
0C1B3                           
0C1B3                               ;; update the high byte with carry
0C1B3 A5 19                         LDA ball_ypos_hi
0C1B5 E9 02                         SBC #BALL_SPEED_HI
0C1B7 85 19                         STA ball_ypos_hi
0C1B9                               
0C1B9                               ;; Check top bound
0C1B9 C9 30                         CMP #BOUND_TOP
0C1BB B0 11                         BCS +checkHorizontalMovement
0C1BD                           
0C1BD                               ;; Change ball direction to "down"
0C1BD 20 00 C3                      JSR sub_ColorizeBall
0C1C0 A9 30                         LDA #BOUND_TOP
0C1C2 85 19                         STA ball_ypos_hi
0C1C4 A9 00                         LDA #$00
0C1C6 85 1A                         STA ball_ypos_lo
0C1C8 A5 26                         LDA ball_flags
0C1CA 09 04                         ORA #MOVE_BALL_DOWN
0C1CC 85 26                         STA ball_flags
0C1CE                           
0C1CE                           
0C1CE                           +checkHorizontalMovement:
0C1CE                           
0C1CE                               ;; Check if ball is being nudged
0C1CE A5 2D                         LDA nudge_counter
0C1D0 D0 47                         BNE +doneBallMovement
0C1D2                           
0C1D2                               ;; Check if left button is held
0C1D2 A5 0F                         LDA buttons_held
0C1D4 29 02                         AND #BUTTON_LEFT
0C1D6 F0 1E                         BEQ +
0C1D8                                   ;; update the low byte
0C1D8 A5 18                             LDA ball_xpos_lo
0C1DA 38                                SEC
0C1DB E9 C0                             SBC #BALL_SPEED_LO
0C1DD 85 18                             STA ball_xpos_lo
0C1DF                           
0C1DF                                   ;; update the high byte
0C1DF A5 17                             LDA ball_xpos_hi
0C1E1 E9 02                             SBC #BALL_SPEED_HI
0C1E3 85 17                             STA ball_xpos_hi
0C1E5                                   
0C1E5                                   ;; Check left bound
0C1E5 C9 10                             CMP #BOUND_LEFT
0C1E7 B0 30                             BCS +doneBallMovement
0C1E9                                   
0C1E9                                   ;; Set flag to nudge right
0C1E9 A5 26                             LDA ball_flags
0C1EB 09 02                             ORA #NUDGE_BALL_RIGHT
0C1ED 85 26                             STA ball_flags
0C1EF                                   
0C1EF                                   ;; Set nudge timer
0C1EF A9 04                             LDA #NUDGE_FRAMES
0C1F1 85 2D                             STA nudge_counter
0C1F3                                   
0C1F3                           
0C1F3 4C 19 C2                          JMP +doneBallMovement        
0C1F6                               +
0C1F6                           
0C1F6                               ;; Check if right button is held
0C1F6 A5 0F                         LDA buttons_held
0C1F8 29 01                         AND #BUTTON_RIGHT
0C1FA F0 1D                         BEQ +
0C1FC                                   ;; update the low byte
0C1FC A5 18                             LDA ball_xpos_lo
0C1FE 18                                CLC
0C1FF 69 C0                             ADC #BALL_SPEED_LO
0C201 85 18                             STA ball_xpos_lo
0C203                           
0C203                                   ;; update the high byte
0C203 A5 17                             LDA ball_xpos_hi
0C205 69 02                             ADC #BALL_SPEED_HI
0C207 85 17                             STA ball_xpos_hi     
0C209                           
0C209                                  ;; Check right bound
0C209 C9 E8                             CMP #BOUND_RIGHT
0C20B 90 0C                             BCC +doneBallMovement
0C20D F0 0A                             BEQ +doneBallMovement
0C20F                                   
0C20F                                   ;; Set flag to nudge right
0C20F A5 26                             LDA ball_flags
0C211 29 FD                             AND #NUDGE_BALL_LEFT
0C213 85 26                             STA ball_flags
0C215                                   
0C215                                   ;; Set nudge timer
0C215 A9 04                             LDA #NUDGE_FRAMES
0C217 85 2D                             STA nudge_counter
0C219                               +
0C219                           
0C219                           
0C219                           +doneBallMovement:
0C219                           
0C219                               ;; Check nudge
0C219 A5 2D                         LDA nudge_counter
0C21B F0 23                         BEQ +doneBallNudging
0C21D A5 26                             LDA ball_flags
0C21F 29 02                             AND #NUDGE_BALL_RIGHT
0C221 F0 10                             BEQ +nudgeBallLeft
0C223                                   
0C223                                       ;; update the low byte
0C223 A5 18                                 LDA ball_xpos_lo
0C225 18                                    CLC
0C226 69 C0                                 ADC #BALL_SPEED_LO
0C228 85 18                                 STA ball_xpos_lo
0C22A                           
0C22A                                       ;; update the high byte
0C22A A5 17                                 LDA ball_xpos_hi
0C22C 69 02                                 ADC #BALL_SPEED_HI
0C22E 85 17                                 STA ball_xpos_hi  
0C230 4C 40 C2                              JMP +doneBallNudging
0C233                                   +nudgeBallLeft:
0C233                                   
0C233                                   ;; update the low byte
0C233 A5 18                             LDA ball_xpos_lo
0C235 38                                SEC
0C236 E9 C0                             SBC #BALL_SPEED_LO
0C238 85 18                             STA ball_xpos_lo
0C23A                           
0C23A                                   ;; update the high byte
0C23A A5 17                             LDA ball_xpos_hi
0C23C E9 02                             SBC #BALL_SPEED_HI
0C23E 85 17                             STA ball_xpos_hi
0C240                               +doneBallNudging:
0C240                           
0C240                               ;; Don't update position again until next frame
0C240 E6 25                         INC ball_update_position
0C242                           
0C242                           
0C242                           
0C242                           +skipBallMovement:
0C242                               ;; Add to sprite buffer
0C242 A6 2C                         LDX sprite_ram_pointer
0C244 A5 19                         LDA ball_ypos_hi
0C246 9D 00 02                      STA ADDR_SPRITERAM,x
0C249 E8                            INX
0C24A A9 01                         LDA #BALL_TILE_CHR
0C24C 9D 00 02                      STA ADDR_SPRITERAM,x
0C24F E8                            INX
0C250 A9 00                         LDA #BALL_ATTR
0C252 9D 00 02                      STA ADDR_SPRITERAM,x
0C255 E8                            INX
0C256 A5 17                         LDA ball_xpos_hi
0C258 9D 00 02                      STA ADDR_SPRITERAM,x
0C25B E8                            INX
0C25C 86 2C                         STX sprite_ram_pointer
0C25E                           
0C25E                               ++
0C25E                               
0C25E                               ;; Upon pressing START, (next level) design will be drawn
0C25E                               .include "game/test/load_next_level.asm"
0C25E                               ;; If START button is pressed
0C25E A5 10                         LDA buttons_pressed
0C260 29 10                         AND #BUTTON_START
0C262 F0 10                         BEQ +continue
0C264                                   ;; Load the next level
0C264 E6 2E                             INC current_level
0C266 A5 2E                             LDA current_level
0C268 C9 05                             CMP #$05
0C26A D0 04                             BNE +
0C26C A9 00                                 LDA #$00
0C26E 85 2E                                 STA current_level
0C270                                   +
0C270                                   
0C270 A9 81                             LDA #LOAD_GAME_SCREEN
0C272 85 27                             STA screen_mode
0C274                           
0C274                               +continue:
0C274                           
0C274                           
0C274                           
0C274                               ;; Sprite clean-up
0C274 A6 2C                         LDX sprite_ram_pointer
0C276 A9 EF                         LDA #$EF
0C278                               -
0C278 9D 00 02                          STA ADDR_SPRITERAM,x
0C27B E8                                INX
0C27C D0 FA                         BNE -
0C27E 4C 4F C0                      JMP MainGameLoop
0C281                           
0C281                           ;; Subroutines
0C281                           .include "include/subroutines.asm"
0C281                           
0C281                           ;; RNG
0C281                           .include "subroutine/GetRandomNumber.asm"
0C281                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C281                           ;;
0C281                           ;; subroutine/GetRandomNumber.asm
0C281                           ;;
0C281                           ;; Simple and fast random number generator by White Flame.
0C281                           ;;
0C281                           ;; Set random_seed to an arbitrary number to randomize between
0C281                           ;; gaming sessions, for instance using the frame counter upon
0C281                           ;; pressing START on the intro screen.
0C281                           ;;
0C281                           ;;     ;; IF START PRESSED:
0C281                           ;;     LDA frame_counter
0C281                           ;;     STA random_seed
0C281                           ;;
0C281                           ;; Source:
0C281                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C281                           ;;
0C281                           ;;
0C281                           
0C281                           sub_GetRandomNumber:
0C281                               ;; Force EOR if random_seed is zero
0C281 A5 16                         LDA random_seed
0C283 F0 05                         BEQ +doEor
0C285                           
0C285                               ;; Shift left, and EOR if the high bit is set
0C285 0A                            ASL
0C286 F0 04                         BEQ +noEor
0C288 90 02                         BCC +noEor
0C28A                           
0C28A                           +doEor:
0C28A 49 1D                         EOR #$1D
0C28C                           
0C28C                           +noEor:
0C28C 85 16                         STA random_seed
0C28E                           
0C28E 60                            RTS
0C28F                           
0C28F                           
0C28F                           ;; Read controller input
0C28F                           .include "subroutine/ReadController.asm"
0C28F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C28F                           ;;
0C28F                           ;; subroutine/ReadController.asm
0C28F                           ;;
0C28F                           ;; Subroutine that polls the controller and stores the input
0C28F                           ;; buttons in a variable. This version only handles controller
0C28F                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C28F                           ;;
0C28F                           ;;
0C28F                           
0C28F                           sub_ReadController:
0C28F                           
0C28F                               ;; Set strobe bit
0C28F A9 01                         LDA #$01
0C291 8D 16 40                      STA JOYPAD_1
0C294                           
0C294                               ;; Set up ring counter
0C294 85 0F                         STA buttons_held
0C296                           
0C296                               ;; Clear strobe bit
0C296 4A                            LSR
0C297 8D 16 40                      STA JOYPAD_1
0C29A                           
0C29A                               ;; Loop through button presses
0C29A                               -
0C29A AD 16 40                          LDA JOYPAD_1
0C29D 4A                                LSR
0C29E 26 0F                             ROL buttons_held
0C2A0                           
0C2A0                               ;; Check if ring counter is done
0C2A0 90 F8                         BCC -
0C2A2                           
0C2A2                               ;; Return from subroutine
0C2A2 60                            RTS
0C2A3                           
0C2A3                           
0C2A3                           ;; vBlank wait
0C2A3                           .include "subroutine/WaitForVBlank.asm"
0C2A3                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C2A3                           ;;
0C2A3                           ;; subroutine/WaitForVBlank.asm
0C2A3                           ;;
0C2A3                           ;; Subroutine that essentially pauses script execution until
0C2A3                           ;; vBlank happens.
0C2A3                           ;;
0C2A3                           ;;
0C2A3                           
0C2A3                           sub_WaitForVBlank:
0C2A3 2C 02 20                      BIT $2002
0C2A6 10 FB                         BPL sub_WaitForVBlank
0C2A8 60                            RTS
0C2A9                           
0C2A9                           
0C2A9                           ;; Game specific subroutines
0C2A9                           .include "game/include/subroutines.asm"
0C2A9                           ;; additional game-specific subroutines go here
0C2A9                           
0C2A9                           .include "game/subroutine/ClearScreen.asm"
0C2A9                           ;; Subroutine to clear the screen
0C2A9                           ;; If it's a game screen, add noise
0C2A9                           
0C2A9                           sub_ClearScreen:
0C2A9                               ;; Check of game screen or not
0C2A9 A5 27                         LDA screen_mode
0C2AB 29 03                         AND #CHECK_SCREEN_MODE
0C2AD C9 01                         CMP #IS_GAME_SCREEN
0C2AF F0 02                         BEQ +
0C2B1 A9 00                             LDA #$00
0C2B3                               +
0C2B3 85 01                         STA temp+1
0C2B5                               
0C2B5                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C2B5 2C 02 20                      BIT PPU_STATUS
0C2B8 A9 20                         LDA #$20
0C2BA 8D 06 20                      STA PPU_ADDR
0C2BD A9 00                         LDA #$00
0C2BF 8D 06 20                      STA PPU_ADDR
0C2C2                               
0C2C2                               ;; Set up tile to draw and loop
0C2C2 85 00                         STA temp
0C2C4 AA                            TAX
0C2C5 A8                            TAY
0C2C6                           
0C2C6                               -     
0C2C6                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C2C6 A5 00                             LDA temp
0C2C8 8D 07 20                          STA PPU_DATA
0C2CB                           
0C2CB                                   ;; Check if we should draw noise next. Noise is drawn if:
0C2CB                                   ;; - Screen mode is game screen
0C2CB                                   ;; - Y between #$06 and #$19 (inclusive)
0C2CB                                   ;; - X between #$02 and #$1D (inclusive)
0C2CB                                   
0C2CB                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C2CB A5 01                             LDA temp+1
0C2CD F0 1C                             BEQ +nextTileInRow
0C2CF                                   
0C2CF                                   ;; If Y < $6, skip the check
0C2CF C0 06                             CPY #$06
0C2D1 90 18                             BCC +nextTileInRow
0C2D3                                   
0C2D3                                   ;; If X < $1, skip the check
0C2D3 E0 01                             CPX #$01
0C2D5 90 14                             BCC +nextTileInRow
0C2D7                                   
0C2D7                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C2D7 E0 1D                             CPX #$1D
0C2D9 D0 04                             BNE +
0C2DB A9 00                                 LDA #$00
0C2DD 85 00                                 STA temp
0C2DF                                   +
0C2DF B0 0A                             BCS +nextTileInRow
0C2E1                                   
0C2E1                                   ;; Load a random noise tile
0C2E1 20 81 C2                          JSR sub_GetRandomNumber
0C2E4 29 0F                             AND #%00001111
0C2E6 18                                CLC
0C2E7 69 60                             ADC #$60
0C2E9 85 00                             STA temp
0C2EB                           
0C2EB                           +nextTileInRow:
0C2EB                                   
0C2EB                                   ;; Check if a row has been done. If not, draw the next
0C2EB E8                                INX
0C2EC E0 20                             CPX #$20
0C2EE D0 D6                             BNE -
0C2F0                                   
0C2F0                                   ;; Go to the next row (if any left)
0C2F0 A2 00                             LDX #00
0C2F2 C8                                INY
0C2F3                                   
0C2F3                                   ;; If Y is 1A, skip noise tile check until done drawing
0C2F3 C0 1A                             CPY #$1A
0C2F5 D0 04                             BNE +
0C2F7 A9 00                                 LDA #$00
0C2F9 85 01                                 STA temp+1
0C2FB                                   +
0C2FB                                   
0C2FB C0 1E                             CPY #$1E
0C2FD D0 C7                             BNE -
0C2FF                           
0C2FF 60                            RTS0C300                           .include "game/subroutine/ColorizeBall.asm"
0C300                           sub_ColorizeBall:
0C300                           
0C300                               ;; Get next ball color in cycle
0C300 A5 26                         LDA ball_flags
0C302 4A                            LSR
0C303 4A                            LSR
0C304 4A                            LSR
0C305 4A                            LSR
0C306 4A                            LSR
0C307 C9 05                         CMP #$05
0C309 D0 02                         BNE +
0C30B A9 FF                             LDA #$FF
0C30D                               +
0C30D 18                            CLC
0C30E 69 01                         ADC #$01
0C310 AA                            TAX
0C311                           
0C311                               ;; Update color in ball flags
0C311 0A                            ASL
0C312 0A                            ASL
0C313 0A                            ASL
0C314 0A                            ASL
0C315 0A                            ASL
0C316 85 00                         STA temp
0C318 A5 26                         LDA ball_flags
0C31A 29 1F                         AND #%00011111
0C31C 05 00                         ORA temp
0C31E 85 26                         STA ball_flags
0C320                           
0C320                               ;; Add new light color of ball to PPU palette
0C320 A9 3F                         LDA #$3F
0C322 85 00                         STA temp
0C324 A9 11                         LDA #$11
0C326 85 01                         STA temp+1
0C328 BD F4 C6                      LDA tbl_BallColorLight,x
0C32B 85 02                         STA temp+2
0C32D 20 90 C5                      JSR sub_WriteByteToPPUBuffer
0C330                               
0C330                               ;; Add new dark color of ball to PPU palette
0C330 E6 01                         INC temp+1
0C332 BD EE C6                      LDA tbl_BallColorDark,x
0C335 85 02                         STA temp+2
0C337 20 90 C5                      JSR sub_WriteByteToPPUBuffer
0C33A                               
0C33A 60                            RTS0C33B                           .include "game/subroutine/DisableEnableRendering.asm"
0C33B                           sub_DisableRendering:
0C33B                               ;; Force NMI skip, disable rendering
0C33B A9 01                     	LDA #$01
0C33D 85 14                     	STA force_skip_nmi
0C33F 20 A3 C2                      JSR sub_WaitForVBlank
0C342 A5 12                         LDA soft_ppu_mask
0C344 29 E7                         AND #%11100111
0C346 8D 01 20                      STA PPU_MASK
0C349 85 12                         STA soft_ppu_mask
0C34B 20 A3 C2                      JSR sub_WaitForVBlank
0C34E 60                            RTS
0C34F                           
0C34F                           sub_EnableRendering:
0C34F                               ;; Enable rendering
0C34F A5 12                         LDA soft_ppu_mask
0C351 09 18                         ORA #%00011000
0C353 85 12                         STA soft_ppu_mask
0C355 8D 01 20                      STA PPU_MASK
0C358 A9 00                     	LDA #$00
0C35A 8D 05 20                  	STA PPU_SCROLL
0C35D 8D 05 20                  	STA PPU_SCROLL
0C360 85 14                     	STA force_skip_nmi
0C362 20 A3 C2                      JSR sub_WaitForVBlank
0C365 60                            RTS
0C366                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C366                           sub_drawIntroScreenLogoTile:
0C366 B9 D6 C5                      LDA tbl_IntroScreenLogoChr,y
0C369 C9 60                         CMP #$60
0C36B D0 08                         BNE +
0C36D 20 81 C2                          JSR sub_GetRandomNumber
0C370 29 07                             AND #$07
0C372 18                                CLC
0C373 69 60                             ADC #$60
0C375                               +
0C375 8D 07 20                      STA PPU_DATA
0C378 60                            RTS
0C379                           .include "game/subroutine/JumpToPointer.asm"
0C379                           sub_JumpToPointer:
0C379 6C 0C 00                      JMP (pointer)
0C37C                               ;RTS must be handled by the routine (pointer) jumps to
0C37C                           .include "game/subroutine/LoadGameScreen.asm"
0C37C                           sub_LoadGameScreen:
0C37C                           
0C37C                               ;; Clear the screen
0C37C 20 A9 C2                      JSR sub_ClearScreen
0C37F                               
0C37F                               ;; Get pointer from current level
0C37F A6 2E                         LDX current_level
0C381 BD 40 C7                      LDA tbl_lvl_layout_lo,x
0C384 85 0C                         STA pointer
0C386 BD 3B C7                      LDA tbl_lvl_layout_hi,x
0C389 85 0D                         STA pointer+1
0C38B                           
0C38B                               ;; Set up the loop
0C38B A0 00                         LDY #$00
0C38D                           -drawRowColumnLoop:
0C38D                           
0C38D                               ;; Load (x,y) of current set of tiles
0C38D B1 0C                         LDA (pointer),y
0C38F                           
0C38F                               ;; Check if level is done; if so, skip the loop
0C38F C9 FF                         CMP #LEVEL_END
0C391 D0 03                         BNE +
0C393 4C 5A C4                          JMP +doneLevelLoad
0C396                               +
0C396                           
0C396                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C396 85 00                         STA temp
0C398 C8                            INY
0C399 B1 0C                         LDA (pointer),y
0C39B 85 01                         STA temp+1
0C39D                               
0C39D                               ;; Convert (x,y) to PPU address
0C39D                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C39D A5 00                         LDA temp
0C39F 29 0F                         AND #%00001111
0C3A1 4A                            LSR
0C3A2 4A                            LSR
0C3A3 09 20                         ORA #$20
0C3A5 85 02                         STA temp+2
0C3A7                               
0C3A7                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C3A7 A5 00                         LDA temp
0C3A9 29 F0                         AND #%11110000
0C3AB 4A                            LSR
0C3AC 4A                            LSR
0C3AD 4A                            LSR
0C3AE 85 03                         STA temp+3
0C3B0                               
0C3B0 A5 00                         LDA temp
0C3B2 29 03                         AND #%00000011
0C3B4 AA                            TAX
0C3B5 BD 45 C7                      LDA tbl_times64,x
0C3B8 18                            CLC
0C3B9 65 03                         ADC temp+3
0C3BB 18                            CLC
0C3BC 69 C2                         ADC #$C2
0C3BE 85 03                         STA temp+3
0C3C0                               
0C3C0                               ;; Add carry to temp+2
0C3C0 A5 02                         LDA temp+2
0C3C2 69 00                         ADC #$00
0C3C4 85 02                         STA temp+2
0C3C6                           
0C3C6                               ;; Convert tile data to loop count and tile type
0C3C6                               ;; temp+4 = color
0C3C6 A5 01                         LDA temp+1
0C3C8 29 07                         AND #%00000111
0C3CA                               
0C3CA                               ;; If color = 7, this is a wall
0C3CA C9 07                         CMP #%00000111
0C3CC F0 14                         BEQ +wallHack
0C3CE 85 04                             STA temp+4
0C3D0                                   
0C3D0                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C3D0 29 01                             AND #%00000001
0C3D2 F0 02                             BEQ +
0C3D4 A9 05                                 LDA #$05
0C3D6                                   +
0C3D6 85 07                             STA temp+7
0C3D8                                
0C3D8                                   ;; temp+5 = tile type
0C3D8 A5 01                             LDA temp+1
0C3DA 4A                                LSR
0C3DB 4A                                LSR
0C3DC 4A                                LSR
0C3DD 29 03                             AND #%00000011
0C3DF 4C EA C3                          JMP +setTileType
0C3E2                               +wallHack:
0C3E2                               
0C3E2                               ;; It's a wall! Set color and CHR offset to 0, and tile type to 4.
0C3E2 A9 00                         LDA #$00
0C3E4 85 04                         STA temp+4
0C3E6 85 07                         STA temp+7
0C3E8 A9 04                         LDA #$04
0C3EA                           
0C3EA                           +setTileType:    
0C3EA 85 05                         STA temp+5
0C3EC                               
0C3EC                               ;; X = tile offset
0C3EC 18                            CLC
0C3ED 65 07                         ADC temp+7
0C3EF AA                            TAX
0C3F0                               
0C3F0                               ;; temp+6 = number of tiles
0C3F0 A5 01                         LDA temp+1
0C3F2 29 60                         AND #%01100000
0C3F4 4A                            LSR
0C3F5 4A                            LSR
0C3F6 4A                            LSR
0C3F7 4A                            LSR
0C3F8 4A                            LSR
0C3F9 85 06                         STA temp+6
0C3FB                               
0C3FB                               ;; Set up loop
0C3FB 98                            TYA
0C3FC 48                            PHA
0C3FD A4 06                         LDY temp+6
0C3FF                           
0C3FF                               -drawTileLoop:
0C3FF                                   ;; Write PPU address
0C3FF 2C 02 20                          BIT PPU_STATUS
0C402 A5 02                             LDA temp+2
0C404 8D 06 20                          STA PPU_ADDR
0C407 A5 03                             LDA temp+3
0C409 8D 06 20                          STA PPU_ADDR
0C40C                                   
0C40C                                   ;; Write first and second tile
0C40C BD 49 C7                          LDA tbl_gametile_top_left,x
0C40F 8D 07 20                          STA PPU_DATA
0C412 BD 53 C7                          LDA tbl_gametile_top_right,x
0C415 8D 07 20                          STA PPU_DATA
0C418                                   
0C418                                   ;; Update PPU address
0C418 2C 02 20                          BIT PPU_STATUS
0C41B A5 02                             LDA temp+2
0C41D 8D 06 20                          STA PPU_ADDR
0C420 A5 03                             LDA temp+3
0C422 69 20                             ADC #$20
0C424 8D 06 20                          STA PPU_ADDR
0C427                                   
0C427                                   ;; Write third and fourth tile
0C427 BD 5D C7                          LDA tbl_gametile_bottom_left,x
0C42A 8D 07 20                          STA PPU_DATA
0C42D BD 67 C7                          LDA tbl_gametile_bottom_right,x
0C430 8D 07 20                          STA PPU_DATA
0C433                                   
0C433                                   ;;
0C433                                   ;; @TODO: draw shades
0C433                                   ;; @TODO: implement collision table
0C433                                   ;;
0C433                                   
0C433                                   ;; Draw next metatile in this loop (if any left)
0C433 88                                DEY
0C434 30 1E                             BMI +doneDrawingRowColumn
0C436                                   
0C436                                   ;; Is it a row or a column?
0C436 A5 01                             LDA temp+1
0C438 10 10                             BPL +
0C43A                                       ;; It is a column: move pointer down (+$40)
0C43A A5 03                                 LDA temp+3
0C43C 18                                    CLC
0C43D 69 40                                 ADC #$40
0C43F 85 03                                 STA temp+3
0C441 A5 02                                 LDA temp+2
0C443 69 00                                 ADC #$00
0C445 85 02                                 STA temp+2
0C447 4C 51 C4                              JMP +drawNextTile
0C44A                                   +
0C44A                                   
0C44A                                   ;; It is a column: move pointer right (+$02)
0C44A A5 03                             LDA temp+3
0C44C 18                                CLC
0C44D 69 02                             ADC #$02
0C44F 85 03                             STA temp+3
0C451                                   
0C451                               
0C451                               ;; Next tile in the row/column
0C451                                   +drawNextTile:
0C451 4C FF C3                      JMP -drawTileLoop
0C454                           
0C454                               ;; Go to the next set of tiles
0C454                           +doneDrawingRowColumn:
0C454 68                            PLA
0C455 A8                            TAY
0C456 C8                            INY
0C457 4C 8D C3                      JMP -drawRowColumnLoop
0C45A                           
0C45A                           ;; Level loading is done
0C45A                           +doneLevelLoad:
0C45A                           
0C45A                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C45A A9 20                         LDA #$20
0C45C 8D 06 20                      STA PPU_ADDR
0C45F A9 A2                         LDA #$A2
0C461 8D 06 20                      STA PPU_ADDR
0C464 A9 35                         LDA #$35
0C466 20 F7 C4                      JSR sub_Draw28HorizontalTiles
0C469                           
0C469                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C469 A9 23                         LDA #$23
0C46B 8D 06 20                      STA PPU_ADDR
0C46E A9 42                         LDA #$42
0C470 8D 06 20                      STA PPU_ADDR
0C473 A9 31                         LDA #$31
0C475 20 F7 C4                      JSR sub_Draw28HorizontalTiles
0C478                           
0C478                               ;; Left & right game bounds
0C478                               ;; Set PPU_ADDR and store in temp variables
0C478 A9 20                         LDA #$20
0C47A 85 00                         STA temp
0C47C 8D 06 20                      STA PPU_ADDR
0C47F A9 C1                         LDA #$C1
0C481 85 01                         STA temp+1
0C483 8D 06 20                      STA PPU_ADDR
0C486                               
0C486                               ;; Set vertical bound tile and set up loop
0C486 A0 33                         LDY #$33
0C488 A2 14                         LDX #20
0C48A                               -
0C48A                                   ;; Show left tile
0C48A 8C 07 20                          STY PPU_DATA
0C48D                                   
0C48D                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C48D A5 00                             LDA temp
0C48F 8D 06 20                          STA PPU_ADDR
0C492 A5 01                             LDA temp+1
0C494 18                                CLC
0C495 69 1D                             ADC #29
0C497 85 01                             STA temp+1
0C499 8D 06 20                          STA PPU_ADDR
0C49C                           
0C49C                                   ;; Show right tile
0C49C 8C 07 20                          STY PPU_DATA
0C49F                           
0C49F                                   ;; Check if we're done yet
0C49F CA                                DEX
0C4A0 F0 18                             BEQ +drawCorners
0C4A2                                   
0C4A2                                   ;; Not done yet: add 3 to low byte for next left bound
0C4A2 A5 01                             LDA temp+1
0C4A4 18                                CLC
0C4A5 69 03                             ADC #3
0C4A7 85 01                             STA temp+1
0C4A9                                   
0C4A9                                   ;; Apply carry to high byte
0C4A9 A5 00                             LDA temp
0C4AB 69 00                             ADC #$00
0C4AD 85 00                             STA temp
0C4AF                                   
0C4AF                                   ;; Store next PPU_ADDR to draw at
0C4AF 8D 06 20                          STA PPU_ADDR
0C4B2 A5 01                             LDA temp+1
0C4B4 8D 06 20                          STA PPU_ADDR
0C4B7 4C 8A C4                      JMP -
0C4BA                               
0C4BA                           +drawCorners:
0C4BA A9 20                         LDA #$20
0C4BC 8D 06 20                      STA PPU_ADDR
0C4BF A9 A1                         LDA #$A1
0C4C1 8D 06 20                      STA PPU_ADDR
0C4C4 A9 39                         LDA #$39
0C4C6 8D 07 20                      STA PPU_DATA
0C4C9                           
0C4C9 A9 20                         LDA #$20
0C4CB 8D 06 20                      STA PPU_ADDR
0C4CE A9 BE                         LDA #$BE
0C4D0 8D 06 20                      STA PPU_ADDR
0C4D3 A9 3A                         LDA #$3A
0C4D5 8D 07 20                      STA PPU_DATA
0C4D8                           
0C4D8 A9 23                         LDA #$23
0C4DA 8D 06 20                      STA PPU_ADDR
0C4DD A9 41                         LDA #$41
0C4DF 8D 06 20                      STA PPU_ADDR
0C4E2 A9 36                         LDA #$36
0C4E4 8D 07 20                      STA PPU_DATA
0C4E7                           
0C4E7 A9 23                         LDA #$23
0C4E9 8D 06 20                      STA PPU_ADDR
0C4EC A9 5E                         LDA #$5E
0C4EE 8D 06 20                      STA PPU_ADDR
0C4F1 A9 34                         LDA #$34
0C4F3 8D 07 20                      STA PPU_DATA
0C4F6                           
0C4F6                           
0C4F6                           
0C4F6                               ;;
0C4F6                               ;; @TODO: draw hud
0C4F6                               ;;
0C4F6                               
0C4F6                               ;; Return
0C4F6 60                            RTS
0C4F7                           
0C4F7                           
0C4F7                           ;; Subroutine: draw 28 tiles in a row
0C4F7                           sub_Draw28HorizontalTiles:
0C4F7 A2 1C                         LDX #28
0C4F9                               -
0C4F9 8D 07 20                          STA PPU_DATA
0C4FC CA                                DEX
0C4FD D0 FA                         BNE -
0C4FF 60                            RTS0C500                           .include "game/subroutine/LoadIntroScreen.asm"
0C500                           sub_LoadIntroScreen:
0C500                           
0C500                               ;; Load intro palette
0C500 2C 02 20                      BIT PPU_STATUS
0C503 A9 3F                         LDA #$3F
0C505 8D 06 20                      STA PPU_ADDR
0C508 A9 00                         LDA #$00
0C50A 8D 06 20                      STA PPU_ADDR
0C50D A2 00                         LDX #$00
0C50F                               -
0C50F BD B6 C5                          LDA tbl_IntroScreenPalette,x
0C512 8D 07 20                          STA PPU_DATA
0C515 E8                                INX
0C516 E0 20                             CPX #$20
0C518 D0 F5                         BNE -
0C51A                               
0C51A                               ;; Put ball in the middle
0C51A A9 7C                         LDA #$7C
0C51C 85 17                         STA ball_xpos_hi
0C51E 85 19                         STA ball_ypos_hi
0C520                           
0C520                               ;; Clear the screen
0C520 20 A9 C2                      JSR sub_ClearScreen
0C523                           
0C523                               ;; Set up intro screen draw loop
0C523 A2 00                         LDX #$00
0C525                           
0C525                           -loop_IntroScreenData:
0C525                           
0C525                               ;; Get current byte from intro screen data
0C525 BD DE C5                      LDA tbl_IntroScreenData,x
0C528                           
0C528                               ;; If current byte is #$3F, we're done drawing.
0C528 C9 3F                         CMP #$3F
0C52A D0 03                         BNE +
0C52C 4C 79 C5                          JMP +goToEndIntroScreen
0C52F                               +
0C52F                           
0C52F                               ;; If highest bits are %11, draw a plain tile
0C52F 29 C0                         AND #%11000000
0C531 D0 03                         BNE +
0C533 4C 59 C5                          JMP +drawTile
0C536                               +
0C536                               
0C536                               ;; If highest bits are %01, set the PPU address
0C536                               ;; If not, draw two logo tiles
0C536 C9 40                         CMP #%01000000
0C538 D0 03                         BNE +drawLogo
0C53A 4C 63 C5                          JMP +setPpuAddr
0C53D                           
0C53D                           +drawLogo:
0C53D                               ;; Get bits 0-2 and store in a temp variable
0C53D BD DE C5                      LDA tbl_IntroScreenData,x
0C540 29 07                         AND #%00000111
0C542 85 00                         STA temp
0C544                               
0C544                               ;; Get bits 3-5, shift over to get a value from 0-7
0C544 BD DE C5                      LDA tbl_IntroScreenData,x
0C547 4A                            LSR
0C548 4A                            LSR
0C549 4A                            LSR
0C54A 29 07                         AND #%00000111
0C54C                               
0C54C                               ;; Draw the tile that corresponds with that value
0C54C A8                            TAY
0C54D 20 66 C3                      JSR sub_drawIntroScreenLogoTile
0C550                               
0C550                               ;; Do the same for the value stored in temp
0C550 A4 00                         LDY temp
0C552 20 66 C3                      JSR sub_drawIntroScreenLogoTile
0C555                           
0C555                               ;; Next byte please
0C555 E8                            INX
0C556 4C 25 C5                      JMP -loop_IntroScreenData
0C559                           
0C559                           +drawTile:
0C559                               ;; Just draw the tile value on screen
0C559 BD DE C5                      LDA tbl_IntroScreenData,x
0C55C 8D 07 20                      STA PPU_DATA
0C55F                               
0C55F                               ;; Next byte please
0C55F E8                            INX
0C560 4C 25 C5                      JMP -loop_IntroScreenData
0C563                           
0C563                           
0C563                           +setPpuAddr:
0C563                               ;; Reset the PPU latch
0C563 2C 02 20                      BIT PPU_STATUS
0C566                               
0C566                               ;; Sanitize and write the high byte of the PPU address
0C566 BD DE C5                      LDA tbl_IntroScreenData,x
0C569 29 3F                         AND #%00111111
0C56B 8D 06 20                      STA PPU_ADDR
0C56E                           
0C56E                               ;; Write the low byte of the PPU address
0C56E E8                            INX
0C56F BD DE C5                      LDA tbl_IntroScreenData,x
0C572 8D 06 20                      STA PPU_ADDR
0C575                               
0C575                               ;; PPU has been set up to draw tiles at the correct spot now.
0C575                               
0C575                               ;; Next byte please.
0C575 E8                            INX
0C576 4C 25 C5                      JMP -loop_IntroScreenData
0C579                           
0C579                           +goToEndIntroScreen:
0C579                           
0C579                               ;; To color the 1.LEVEL: line green, we need to update two
0C579                               ;; values in the PPU attribute data.
0C579 2C 02 20                      BIT PPU_STATUS
0C57C A9 23                         LDA #$23
0C57E 8D 06 20                      STA PPU_ADDR
0C581 A9 CB                         LDA #$CB
0C583 8D 06 20                      STA PPU_ADDR
0C586 A9 0A                         LDA #%00001010
0C588 8D 07 20                      STA PPU_DATA
0C58B 8D 07 20                      STA PPU_DATA
0C58E                           
0C58E 60                            RTS
0C58F                           
0C58F                           .include "game/subroutine/LoadWinScreen.asm"
0C58F                           sub_LoadWinScreen:
0C58F 60                            RTS
0C590                           
0C590                           .include "game/subroutine/WriteByteToPPU.asm"
0C590                           sub_WriteByteToPPUBuffer:
0C590                           
0C590                               ;; Prevent updating until full 3-byte buffer is filled,
0C590                               ;; so that graphics won't glitch out if NMI happens during
0C590                               ;; updating the buffer
0C590 A9 00                         LDA #$00
0C592 85 29                         STA ppu_buffer_update
0C594                           
0C594                               ;; Check if buffer full; if so, wait a frame and force update
0C594 A4 2A                         LDY ppu_buffer_pointer
0C596 C0 30                         CPY #$30
0C598 D0 05                         BNE +
0C59A E6 29                             INC ppu_buffer_update
0C59C 20 A3 C2                          JSR sub_WaitForVBlank
0C59F                               +
0C59F                           
0C59F                               ;; Add ppu_addr high byte to buffer
0C59F A5 00                         LDA temp
0C5A1 99 00 03                      STA ppu_buffer,y
0C5A4                           
0C5A4                               ;; Add ppu_addr low byte to buffer
0C5A4 C8                            INY
0C5A5 A5 01                         LDA temp+1
0C5A7 99 00 03                      STA ppu_buffer,y
0C5AA                           
0C5AA                               ;; Add ppu_data to buffer
0C5AA C8                            INY
0C5AB A5 02                         LDA temp+2
0C5AD 99 00 03                      STA ppu_buffer,y
0C5B0                           
0C5B0                               ;; Update buffer pointer
0C5B0 C8                            INY
0C5B1 84 2A                         STY ppu_buffer_pointer
0C5B3                           
0C5B3                               ;; Tell NMI to update next round
0C5B3 E6 29                         INC ppu_buffer_update
0C5B5                           
0C5B5                               ;; Return
0C5B5 60                            RTS0C5B6                           
0C5B6                           
0C5B6                           ;; LUTs
0C5B6                           .include "game/include/tables.asm"
0C5B6                           
0C5B6                           ;; Intro screen palette
0C5B6                           tbl_IntroScreenPalette:
0C5B6 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C5BA 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C5BE 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C5C2 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C5C6                           
0C5C6 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C5CA 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C5CE 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C5D2 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C5D6                           
0C5D6                           
0C5D6                           ;; Intro: mapping logo index to chr tile
0C5D6                           tbl_IntroScreenLogoChr:
0C5D6 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C5DE                           
0C5DE                           
0C5DE                           ;; Intro screen data
0C5DE                           tbl_IntroScreenData:
0C5DE                           
0C5DE                               ;; Set PPU address $20AC and draw
0C5DE 60 AC                         .db #$60, #$AC
0C5E0 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C5E8                           
0C5E8                               ;; Set PPU address $20CF and draw
0C5E8 60 CF                         .db #$60, #$CF
0C5EA 01 02                         .db #_0, #_1
0C5EC                               
0C5EC                               ;; Set PPU address $2122 and draw
0C5EC 61 22                         .db #$61, #$22
0C5EE 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C5F5 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C5FB 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C603 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C608                               
0C608                               ;; Set PPU address $2147 and draw
0C608 61 47                         .db #$61, #$47
0C60A 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C611 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C615 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C61B 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C621                               
0C621                               ;; Set PPU address $218B and draw
0C621 61 8B                         .db #$61, #$8B
0C623 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C629 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C62E                               
0C62E                               ;; Set PPU address $21E6 and draw
0C62E 61 E6                         .db #$61, #$E6
0C630 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C638 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C63C 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C643                               
0C643                               ;; Set PPU address $222D and draw
0C643 62 2D                         .db #$62, #$2D
0C645 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C64B                               
0C64B                               ;; Set PPU address $2281
0C64B 62 81                         .db #$62, #$81
0C64D                               
0C64D                               ;; Draw the Crillion logo
0C64D E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C651 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C655 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C659 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C65D                               
0C65D D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C661 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C665 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C669 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C66D                               
0C66D D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C671 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C675 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C679 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C67D                           
0C67D D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C681 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C685 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C689 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C68D                               
0C68D D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C691 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C695 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C699 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C69D                           
0C69D F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C6A1 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C6A5 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C6A9 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C6AC                           
0C6AC                               ;; End of intro
0C6AC 3F                            .db #$3F
0C6AD                           
0C6AD                           
0C6AD                           ;; test animation table
0C6AD                           .include "game/test/show_animation_table.asm"
0C6AD                           ;; CHR tile-id's per slide of explosion
0C6AD                           explosion_slide0:
0C6AD 00 00 00                      .db #$00, #$00, #$00
0C6B0 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C6B3 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C6B6                           
0C6B6                           explosion_slide1:
0C6B6 00 00 00                      .db #$00, #$00, #$00
0C6B9 29 2A 2B                      .db #$29, #$2A, #$2B
0C6BC 39 3A 3B                      .db #$39, #$3A, #$3B
0C6BF                           
0C6BF                           explosion_slide2:
0C6BF 16 00 00                      .db #$16, #$00, #$00
0C6C2 26 27 28                      .db #$26, #$27, #$28
0C6C5 36 37 38                      .db #$36, #$37, #$38
0C6C8                           
0C6C8                           explosion_slide3:
0C6C8 00 14 15                      .db #$00, #$14, #$15
0C6CB 23 24 25                      .db #$23, #$24, #$25
0C6CE 33 34 35                      .db #$33, #$34, #$35
0C6D1                           
0C6D1                           explosion_slide4:
0C6D1 10 11 12                      .db #$10, #$11, #$12
0C6D4 20 21 22                      .db #$20, #$21, #$22
0C6D7 30 31 32                      .db #$30, #$31, #$32
0C6DA                           
0C6DA                           ;; High and low bytes of animation slides
0C6DA                           explosion_anim_hi:
0C6DA C6                            .db >#explosion_slide0
0C6DB C6                            .db >#explosion_slide1
0C6DC C6                            .db >#explosion_slide2
0C6DD C6                            .db >#explosion_slide3
0C6DE C6                            .db >#explosion_slide4
0C6DF C6                            .db >#explosion_slide4
0C6E0 C6                            .db >#explosion_slide3
0C6E1 C6                            .db >#explosion_slide2
0C6E2 C6                            .db >#explosion_slide1
0C6E3 C6                            .db >#explosion_slide0
0C6E4                           
0C6E4                           explosion_anim_lo:
0C6E4 AD                            .db <#explosion_slide0
0C6E5 B6                            .db <#explosion_slide1
0C6E6 BF                            .db <#explosion_slide2
0C6E7 C8                            .db <#explosion_slide3
0C6E8 D1                            .db <#explosion_slide4
0C6E9 D1                            .db <#explosion_slide4
0C6EA C8                            .db <#explosion_slide3
0C6EB BF                            .db <#explosion_slide2
0C6EC B6                            .db <#explosion_slide1
0C6ED AD                            .db <#explosion_slide0
0C6EE                           
0C6EE                           
0C6EE                           
0C6EE                           ;; Ball palette color cycle
0C6EE                           tbl_BallColorDark:
0C6EE 12 14 16 27 28 19             .db #$12, #$14, #$16, #$27, #$28, #$19
0C6F4                            
0C6F4                           tbl_BallColorLight:
0C6F4 2C 24 25 37 20 2B             .db #$2C, #$24, #$25, #$37, #$20, #$2B
0C6FA                           
0C6FA                               
0C6FA                           ;; Screen mode drawing routine addresses
0C6FA                           tbl_LoadScreenHi:
0C6FA C5 C3 C5                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C6FD                           
0C6FD                           tbl_LoadScreenLo:
0C6FD 00 7C 8F                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C700                           
0C700                           
0C700                           ;; Test level data
0C700                           .include "game/test/level_data.asm"
0C700                           lvl_layout_1:
0C700 FF                            .db #LEVEL_END
0C701                           
0C701                           lvl_layout_2:
0C701 FF                            .db #LEVEL_END
0C702                           
0C702                           lvl_layout_3:
0C702                               ; one row of death blocks
0C702 00 78 40 78 80 78 C0 38       .db #$00, #%01111000, #$40, #%01111000, #$80, #%01111000, #$C0, #%00111000
0C70A                           
0C70A                               ; four sets of color blocks at the 2nd grid column
0C70A 10 A0 13 E0 16 C0 19 00       .db #$10, #%10100000, #$13, #%11100000, #$16, #%11000000, #$19, #%00000000
0C712                           
0C712                               ; three sets of color blocks at the 4th grid column
0C712 30 C0 34 C0 38 A0             .db #$30, #%11000000, #$34, #%11000000, #$38, #%10100000
0C718                           
0C718                               ; also for grid columns 6, 8, 10, 12 and 14
0C718 50 E0 55 00 57 C0             .db #$50, #%11100000, #$55, #%00000000, #$57, #%11000000
0C71E 70 E0 74 00 76 E0             .db #$70, #%11100000, #$74, #%00000000, #$76, #%11100000
0C724 90 E0 95 00 97 C0             .db #$90, #%11100000, #$95, #%00000000, #$97, #%11000000
0C72A B0 C0 B4 C0 B8 A0             .db #$B0, #%11000000, #$B4, #%11000000, #$B8, #%10100000
0C730 D0 A0 D3 E0 D6 C0 D9 00       .db #$D0, #%10100000, #$D3, #%11100000, #$D6, #%11000000, #$D9, #%00000000
0C738                               
0C738                               ;; end of level
0C738 FF                            .db #LEVEL_END
0C739                           
0C739                           lvl_layout_4:
0C739 FF                            .db #LEVEL_END
0C73A                           
0C73A                           lvl_layout_5:
0C73A FF                            .db #LEVEL_END
0C73B                           
0C73B                           ;; Level layout address pointers
0C73B                           tbl_lvl_layout_hi:
0C73B C7 C7 C7 C7 C7                .db >#lvl_layout_1, >#lvl_layout_2, >#lvl_layout_3, >#lvl_layout_4, >#lvl_layout_5
0C740                           
0C740                           tbl_lvl_layout_lo:
0C740 00 01 02 39 3A                .db <#lvl_layout_1, <#lvl_layout_2, <#lvl_layout_3, <#lvl_layout_4, <#lvl_layout_5
0C745                           
0C745                           
0C745                           
0C745                           ;; Helper table to multiply values by 64
0C745                           tbl_times64:
0C745 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0C749                           
0C749                           
0C749                           ;; Metatile ID to CHR data mapper
0C749                           tbl_gametile_top_left:
0C749 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0C753                           
0C753                           tbl_gametile_top_right:
0C753 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0C75D                           
0C75D                           tbl_gametile_bottom_left:
0C75D 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0C767                           
0C767                           tbl_gametile_bottom_right:
0C767 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0C771                           
0C771                           
0C771                           ;; HUD text data
0C771                           tbl_hud_text:
0C771 1D 0D 19 1C 0F 00 00          .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE
0C778 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0C77F 16 13 20 0F 1D 00 00          .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE
0C786 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0C78B                           
0C78B                           ;; NMI handler
0C78B                           NMI:
0C78B                               .include "interrupt/nmi.asm"
0C78B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C78B                           ;;
0C78B                           ;; include/nmi.asm
0C78B                           ;;
0C78B                           ;; Non-maskable interrupt script. This script is being executed
0C78B                           ;; when vBlank hits.
0C78B                           ;;
0C78B                           ;;
0C78B                           
0C78B                               ;; Preserve accumulator through stack
0C78B 48                            PHA
0C78C                           
0C78C                               ;; Should NMI be skipped?
0C78C A5 13                         LDA skip_nmi
0C78E F0 03                         BEQ +
0C790 4C 1E C8                          JMP +skip_nmi
0C793                               +
0C793                           
0C793                               ;; When in NMI, skip additional NMI requests
0C793 A9 01                         LDA #$01
0C795 85 13                         STA skip_nmi
0C797                           
0C797                               ;; Preserve X, Y, and PC through stack
0C797 8A                            TXA
0C798 48                            PHA
0C799 98                            TYA
0C79A 48                            PHA
0C79B 08                            PHP
0C79C                               
0C79C                               ;; Check forced NMI skip
0C79C A5 14                         LDA force_skip_nmi
0C79E F0 03                         BEQ +
0C7A0 4C 0F C8                          JMP +force_skip_nmi
0C7A3                               +
0C7A3                           
0C7A3                               ;; Update PPU mask
0C7A3                               ;LDA #$00
0C7A3                               ;STA PPU_CTRL
0C7A3 A5 12                         LDA soft_ppu_mask
0C7A5 8D 01 20                      STA PPU_MASK
0C7A8                               
0C7A8                               
0C7A8                               ;; Additional PPU updates go here
0C7A8                               .include "game/test/tile_update_nmi.asm"
0C7A8                           
0C7A8                               ;; Check if ppu_buffer needs updating
0C7A8 A5 29                         LDA ppu_buffer_update
0C7AA D0 03                         BNE +
0C7AC 4C EE C7                          JMP +no_ppu_buffer_update
0C7AF                               +
0C7AF                           
0C7AF                               ;; Reset ppu control register and mask
0C7AF A2 00                         LDX #$00
0C7B1 8E 00 20                      STX PPU_CTRL
0C7B4 8E 01 20                      STX PPU_MASK
0C7B7                           
0C7B7                               ;; Set up loop
0C7B7                               -
0C7B7                                   ;; Reset hi/lo latch
0C7B7 2C 02 20                          BIT PPU_STATUS
0C7BA                           
0C7BA                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0C7BA BD 00 03                          LDA ppu_buffer,x
0C7BD 8D 06 20                          STA PPU_ADDR
0C7C0 E8                                INX
0C7C1 BD 00 03                          LDA ppu_buffer,x
0C7C4 8D 06 20                          STA PPU_ADDR
0C7C7                           
0C7C7                                   ;; Write ppu_buffer data to PPU_ADDR
0C7C7 E8                                INX
0C7C8 BD 00 03                          LDA ppu_buffer,x
0C7CB 8D 07 20                          STA PPU_DATA
0C7CE                           
0C7CE                                   ;; Check if updating is done (eg. X is at pointer)
0C7CE E8                                INX
0C7CF E4 2A                             CPX ppu_buffer_pointer
0C7D1 F0 03                             BEQ +
0C7D3 4C B7 C7                      JMP -
0C7D6                           +
0C7D6                           
0C7D6                               ;; Reset ppu buffer update and pointer
0C7D6 A9 00                         LDA #$00
0C7D8 85 29                         STA ppu_buffer_update
0C7DA 85 2A                         STA ppu_buffer_pointer
0C7DC                               
0C7DC                               ;; Reset scrolling position
0C7DC 8D 05 20                      STA PPU_SCROLL
0C7DF 8D 05 20                      STA PPU_SCROLL
0C7E2                           
0C7E2                               ;; Restore ppu control register and mask
0C7E2 A9 90                         LDA #%10010000
0C7E4 8D 00 20                      STA PPU_CTRL
0C7E7 A5 12                         LDA soft_ppu_mask
0C7E9 8D 01 20                      STA PPU_MASK
0C7EC A9 00                         LDA #$00
0C7EE                           
0C7EE                           ;; Continue other NMI stuff
0C7EE                           +no_ppu_buffer_update:
0C7EE                               .include "game/test/show_animation_nmi.asm"
0C7EE                               ;; Reset sprite RAM, draw sprites
0C7EE 8D 03 20                      STA OAM_ADDR
0C7F1 A9 02                         LDA #$02
0C7F3 8D 14 40                      STA OAM_DMA
0C7F6                           
0C7F6 A0 04                         LDY #MAX_ANIMATIONS
0C7F8 A2 00                         LDX #$00
0C7FA                               -
0C7FA BD 30 03                          LDA explosion_framecounter,x
0C7FD F0 03                             BEQ +
0C7FF DE 30 03                              DEC explosion_framecounter,x
0C802                                   +
0C802 E8                                INX
0C803 88                                DEY
0C804 F0 03                             BEQ +done        
0C806 4C FA C7                      JMP -
0C809                           +done:
0C809                               
0C809 A5 2D                         LDA nudge_counter
0C80B F0 02                         BEQ +
0C80D C6 2D                             DEC nudge_counter
0C80F                               +
0C80F                           
0C80F                           ;; This is what happens when we forced nmi skip
0C80F                           +force_skip_nmi:
0C80F                           
0C80F                               ;; Increase frame counters
0C80F E6 15                         INC frame_counter
0C811                           
0C811                               ;; reset ball_update_position
0C811 A9 00                         LDA #$00
0C813 85 25                         STA ball_update_position
0C815                           
0C815                               ;; Don't skip next NMI request
0C815 A9 00                         LDA #$00
0C817 85 13                         STA skip_nmi
0C819                           
0C819                               ;; Restore X, Y and PC from stack
0C819 28                            PLP
0C81A 68                            PLA
0C81B A8                            TAY
0C81C 68                            PLA
0C81D AA                            TAX
0C81E                           
0C81E                           +skip_nmi:
0C81E                               ;; Restore accumulator from stack
0C81E 68                            PLA
0C81F                           
0C81F                               ;; Return
0C81F 40                            RTI
0C820                           
0C820                           ;; IRQ handler (empty)
0C820                           IRQ:
0C820                               .include "interrupt/irq.asm"
0C820 40                            RTI0C821                           
0C821                           ;; Interrupt vectors
0C821 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 8B C7                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 20 C8                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
