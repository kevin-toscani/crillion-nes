                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_OTHERRAM  = $0300
                                ADDR_SPRITERAM = $0200
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI = #$02
                                BALL_SPEED_LO = #$C0
                                BALL_TILE_CHR = #$01
                                BALL_ATTR     = #%00000000
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD    = #%00000001
                                KILL_BALL       = #%00000001
                                REVIVE_BALL     = #%11111110
                                BALL_IS_NUDGED  = #%00000010
                                NUDGE_BALL      = #%00000010
                                STOP_NUDGE_BALL = #%11111101
                                BALL_MOVES_DOWN = #%00000100
                                MOVE_BALL_DOWN  = #%00000100
                                MOVE_BALL_UP    = #%11111011
                                BALL_IS_FROZEN  = #%00010000
                                FREEZE_BALL     = #%00010000
                                UNFREEZE_BALL   = #%11101111
                                
                                
                                ;; Screen load helpers
                                LOAD_INTRO_SCREEN = #%10000100
                                LOAD_GAME_SCREEN  = #%10000010
                                LOAD_WIN_SCREEN   = #%10000001
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$10
                                BOUND_BOTTOM    = #$98
                                BOUND_LEFT      = #$10
                                BOUND_RIGHT     = #$E8
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi        .dsb 1
00018                           ball_xpos_lo        .dsb 1
00019                           ball_ypos_hi        .dsb 1
0001A                           ball_ypos_lo        .dsb 1
0001B                           ball_lives          .dsb 1   ; number of lives left
0001C                           ball_score          .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus          .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           
00025                           ;; Update-position check
00025                           ball_update_position   .dsb 1
00026                           
00026                           
00026                           ;; Ball flags
00026                           ;; #% c c c f . v n a
00026                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00026                           ;;    | | | | | | +---- ball is being nudged (1) or not (0)
00026                           ;;    | | | | | +------ ball moves up (0) or down (1)
00026                           ;;    | | | | +-------- (unused for now)
00026                           ;;    | | | +---------- ball is frozen (not moving)
00026                           ;;    +-+-+------------ ball color (1-6)
00026                           ball_flags          .dsb 1
00027                           
00027                           
00027                           ;; Screen mode
00027                           ;; #% u . . . . . t t
00027                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00027                           ;;    | +-+-+-+-+------------- unused
00027                           ;;    +----------------------- should the screen update
00027                           screen_mode         .dsb 1
00028                           
00028                           
00028                           ;; Start level pointer
00028                           ;; You can start the game at level 1, 5, 9, 13 or 17.
00028                           ;; This is the pointer that tells you at which level to start.
00028                           startlevel_pointer  .dsb 1 
00029                           
00029                           
00029                           ;; PPU buffer variables
00029                           ppu_buffer_update   .dsb 1
0002A                           ppu_buffer_pointer  .dsb 1
0002B                           
0002B                           ;; Pointer to keep track of the number of explosions
0002B                           explosion_pointer         .dsb 1
0002C                           
0002C                           ;; Sprite RAM pointer to keep track of sprites to update
0002C                           sprite_ram_pointer        .dsb 1
0002D                           
0002D                               0002D                           .ende
                                
                                ;; Other RAM
                                .enum ADDR_OTHERRAM
00300                               .include "ram/misc.asm"
00300                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00300                           ;;
00300                           ;; ram/misc.asm
00300                           ;;
00300                           ;; List of additional, non-zeropage RAM variables. Currently
00300                           ;; empty, but will hold data like the OAM buffer and other,
00300                           ;; less-often accessed, global variables.
00300                           ;;
00300                           ;;
00300                           
00300                           
00300                               ;; Game specific RAM variables
00300                               .include "game/ram/misc.asm"
00300                           ;; miscellaneous (non-zeropage) ram variables go here
00300                           
00300                           ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                           ppu_buffer                .dsb 48
00330                           
00330                           ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                           explosion_framecounter    .dsb 4
00334                           
00334                           ;; _currentframe, keeps track which anim frame we're at
00334                           explosion_currentframe    .dsb 4
00338                           
00338                           ;; _attributes, to distinguish between ball and wall explosion
00338                           explosion_attributes      .dsb 4
0033C                           
0033C                           ;; x- and y-coordinate of the explosion
0033C                           explosion_x               .dsb 4
00340                           explosion_y               .dsb 4
00344                           
00344                           ;; active flag to see if animation is/should be shown
00344                           explosion_active          .dsb 4
00348                           .ende
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 53 C2                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 53 C2                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 84                         LDA #LOAD_INTRO_SCREEN
0C04D 85 27                         STA screen_mode
0C04F                           
0C04F                           
0C04F                           
0C04F                           ;; Main game loop
0C04F                           MainGameLoop:
0C04F                               .include "game/main.asm"
0C04F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C04F                           ;;
0C04F                           ;; game/main.asm
0C04F                           ;;
0C04F                           ;; The main game loop content.
0C04F                           ;;
0C04F                           ;;
0C04F                           
0C04F                               ;; Reset sprite pointer every game loop
0C04F A9 00                         LDA #$00
0C051 85 2C                         STA sprite_ram_pointer
0C053                           
0C053                               ;; Store previous buttons
0C053 A5 0F                         LDA buttons_held
0C055 85 0E                         STA buttons_prev
0C057                           
0C057                               ;; Read controller input
0C057 20 3F C2                      JSR sub_ReadController
0C05A                           
0C05A                               ;; Get buttons released
0C05A A5 0F                         LDA buttons_held
0C05C 49 FF                         EOR #$FF
0C05E 25 0E                         AND buttons_prev
0C060 85 11                         STA buttons_released
0C062                           
0C062                               ;; Set buttons pressed
0C062 A5 0E                         LDA buttons_prev
0C064 49 FF                         EOR #$FF
0C066 25 0F                         AND buttons_held
0C068 85 10                         STA buttons_pressed
0C06A                           
0C06A                               ;; Load screen?
0C06A A5 27                         LDA screen_mode
0C06C 29 80                         AND #%10000000
0C06E F0 1E                         BEQ +screenLoaded
0C070                           
0C070                               ;; Get screen type to load
0C070 A5 27                         LDA screen_mode
0C072 29 03                         AND #%00000011
0C074 A8                            TAY
0C075                               
0C075                               ;; Get address to load screen type from
0C075 B9 E1 C4                      LDA tbl_LoadScreenLo,y
0C078 85 0C                         STA pointer
0C07A B9 DE C4                      LDA tbl_LoadScreenHi,y
0C07D 85 0D                         STA pointer+1
0C07F                           
0C07F                               ;; Load screen
0C07F 20 94 C2                      JSR sub_DisableRendering
0C082 20 C9 C2                      JSR sub_JumpToPointer
0C085 20 A2 C2                      JSR sub_EnableRendering
0C088                               
0C088                               ;; Don't load screen anymore next loop
0C088 A5 27                         LDA screen_mode
0C08A 29 7F                         AND #%01111111
0C08C 85 27                         STA screen_mode
0C08E                               
0C08E                           
0C08E                           +screenLoaded:
0C08E                               ;; Testing my concept scripts
0C08E                               .include "game/test/tile_update.asm"
0C08E                               ;; If START button is pressed
0C08E A5 10                         LDA buttons_pressed
0C090 29 10                         AND #BUTTON_START
0C092 D0 03                         BNE +
0C094 4C A6 C0                          JMP +end
0C097                               +
0C097                           
0C097 A9 21                         LDA #$21
0C099 85 00                         STA temp
0C09B A9 E0                         LDA #$E0
0C09D 85 01                         STA temp+1
0C09F A9 28                         LDA #$28
0C0A1 85 02                         STA temp+2
0C0A3 20 CC C2                      JSR sub_WriteByteToPPU
0C0A6                           
0C0A6                           +end:0C0A6                               .include "game/test/show_animation.asm"
0C0A6                               ;; If A button is pressed, initiate explosion
0C0A6 A5 10                         LDA buttons_pressed
0C0A8 29 80                         AND #BUTTON_A
0C0AA D0 03                         BNE +
0C0AC 4C DE C0                          JMP +end
0C0AF                               +
0C0AF                           
0C0AF                               ;; Get most recent slot for explosion
0C0AF A6 2B                         LDX explosion_pointer
0C0B1                           
0C0B1                               ;; If 0, use max pointer value
0C0B1 D0 02                         BNE +
0C0B3 A2 04                             LDX #MAX_ANIMATIONS
0C0B5                               +
0C0B5                           
0C0B5                               ;; Decrease pointer by one
0C0B5 CA                            DEX
0C0B6 86 2B                         STX explosion_pointer
0C0B8                           
0C0B8                               ;; Load explosion data into RAM
0C0B8 A9 00                         LDA #$00
0C0BA 9D 34 03                      STA explosion_currentframe,x
0C0BD A9 04                         LDA #ANIMATION_SPEED
0C0BF 9D 30 03                      STA explosion_framecounter,x
0C0C2 20 31 C2                      JSR sub_GetRandomNumber
0C0C5                               ;AND #%11110000
0C0C5 9D 3C 03                      STA explosion_x,x
0C0C8 20 31 C2                      JSR sub_GetRandomNumber
0C0CB                               ;AND #%11110000
0C0CB 9D 40 03                      STA explosion_y,x
0C0CE 20 31 C2                      JSR sub_GetRandomNumber
0C0D1 29 02                         AND #%00000010
0C0D3 18                            CLC
0C0D4 69 01                         ADC #$01
0C0D6 9D 38 03                      STA explosion_attributes,x
0C0D9 A9 01                         LDA #$01
0C0DB 9D 44 03                      STA explosion_active,x
0C0DE                           
0C0DE                           
0C0DE                           +end:
0C0DE                           
0C0DE                               ;; Set up loop
0C0DE A2 00                         LDX #$00
0C0E0                               -loop_load_animation:
0C0E0                                   ;; Check if current animation is active. If not, goto next
0C0E0 BD 44 03                          LDA explosion_active,x
0C0E3 D0 03                             BNE +
0C0E5 4C 7F C1                              JMP +next
0C0E8                                   +
0C0E8                           
0C0E8                                   ;; Check the explosion framecounter
0C0E8 BD 30 03                          LDA explosion_framecounter,x
0C0EB D0 26                             BNE +
0C0ED                                       ;; Framecounter is 0
0C0ED                                       ;; Reset to animation speed
0C0ED A9 04                                 LDA #ANIMATION_SPEED
0C0EF 9D 30 03                              STA explosion_framecounter,x
0C0F2                           
0C0F2                                       ;; Set next animation frame, and check if we're done yet
0C0F2 FE 34 03                              INC explosion_currentframe,x
0C0F5 BD 34 03                              LDA explosion_currentframe,x
0C0F8 C9 0A                                 CMP #ANIM_SLIDES
0C0FA D0 17                                 BNE +
0C0FC                           
0C0FC                                       ;; If we're done, inactivate current explosion, clean
0C0FC                                       ;; up sprite RAM and go to the next one
0C0FC A9 00                                 LDA #$00
0C0FE 9D 44 03                              STA explosion_active,x
0C101                                       
0C101 A9 09                                 LDA #SLIDE_SIZE
0C103 0A                                    ASL
0C104 0A                                    ASL
0C105 A8                                    TAY
0C106 A9 EF                                 LDA #$EF
0C108                                       -
0C108 88                                        DEY
0C109 99 00 02                                  STA ADDR_SPRITERAM,y
0C10C C0 00                                     CPY #00
0C10E D0 F8                                 BNE -
0C110                                       
0C110 4C 7F C1                              JMP +next
0C113                                   +
0C113                           
0C113                                   ;; Load (x,y) position in temp variables
0C113 BD 3C 03                          LDA explosion_x,x
0C116 85 01                             STA temp+1
0C118 85 03                             STA temp+3
0C11A BD 40 03                          LDA explosion_y,x
0C11D 85 02                             STA temp+2
0C11F                           
0C11F                                   ;; Load attribute in temp variable
0C11F BD 38 03                          LDA explosion_attributes,x
0C122 85 04                             STA temp+4
0C124                           
0C124                                   ;; Load current frame into Y-register
0C124 BC 34 03                          LDY explosion_currentframe,x
0C127                           
0C127                                   ;; Load current frame ROM address from table
0C127 B9 C8 C4                          LDA explosion_anim_lo,y
0C12A 85 0C                             STA pointer
0C12C B9 BE C4                          LDA explosion_anim_hi,y
0C12F 85 0D                             STA pointer+1
0C131                           
0C131                                   ;; Save x-register on stack
0C131 8A                                TXA
0C132 48                                PHA
0C133                           
0C133                                   ;; Load sprites into sprite RAM
0C133 A6 2C                             LDX sprite_ram_pointer
0C135 A0 00                             LDY #$00
0C137                           
0C137                                   ;; Prepare (x,y) offset for loop
0C137 84 00                             STY temp
0C139                           
0C139                                   -loop_load_sprite:
0C139                                   
0C139                                       ;; Do not draw empty sprites
0C139 B1 0C                                 LDA (pointer),y
0C13B F0 18                                 BEQ +nextSprite
0C13D                                   
0C13D                                           ;; Add y-position to sprite ram buffer
0C13D A5 02                                     LDA temp+2
0C13F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C142 E8                                        INX
0C143                           
0C143                                           ;; Get tile number from frame ROM address, and
0C143                                           ;; add it to sprite ram buffer
0C143 B1 0C                                     LDA (pointer),y
0C145 9D 00 02                                  STA ADDR_SPRITERAM,x
0C148 E8                                        INX
0C149                           
0C149                                           ;; Add attribute data to sprite ram buffer
0C149 A5 04                                     LDA temp+4
0C14B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C14E E8                                        INX
0C14F                           
0C14F                                           ;; Add x-position to sprite ram buffer
0C14F A5 03                                     LDA temp+3
0C151 9D 00 02                                  STA ADDR_SPRITERAM,x
0C154 E8                                        INX
0C155                           
0C155                                       +nextSprite:
0C155                           
0C155                                       ;; Check if all sprites are done
0C155 C8                                    INY
0C156 C0 09                                 CPY #SLIDE_SIZE
0C158 F0 21                                 BEQ +done
0C15A                           
0C15A                                       ;; Update x value
0C15A A5 03                                 LDA temp+3
0C15C 18                                    CLC
0C15D 69 08                                 ADC #$08
0C15F 85 03                                 STA temp+3
0C161                           
0C161                                       ;; Update temp for x,y position
0C161 E6 00                                 INC temp
0C163 A5 00                                 LDA temp
0C165 C9 03                                 CMP #SLIDE_WIDTH
0C167 D0 0F                                 BNE +
0C169                                           ;; Row is done; reset x-position
0C169 A5 01                                     LDA temp+1
0C16B 85 03                                     STA temp+3
0C16D                           
0C16D                                           ;; Update y-position
0C16D A5 02                                     LDA temp+2
0C16F 18                                        CLC
0C170 69 08                                     ADC #$08
0C172 85 02                                     STA temp+2
0C174                           
0C174                                           ;; Reset row counter
0C174 A9 00                                     LDA #$00
0C176 85 00                                     STA temp
0C178                                       +
0C178                           
0C178 4C 39 C1                          JMP -loop_load_sprite
0C17B                           
0C17B                               +done:
0C17B 86 2C                             STX sprite_ram_pointer
0C17D                           
0C17D                                   ;; Retrieve x-register from stack
0C17D 68                                PLA
0C17E AA                                TAX
0C17F                           
0C17F                               +next:
0C17F                                   ;; Check if all animations have been updated
0C17F E8                                INX
0C180 E0 04                             CPX #MAX_ANIMATIONS
0C182 F0 03                             BEQ +done
0C184                           
0C184 4C E0 C0                      JMP -loop_load_animation
0C187                           +done:
0C187                               .include "game/test/move_ball.asm"
0C187                           
0C187                               ;; check if position should be updated (ie. has nmi happened yet)
0C187 A5 25                         LDA ball_update_position
0C189 F0 03                         BEQ +
0C18B 4C 08 C2                          JMP +skipBallMovement
0C18E                               +
0C18E                           
0C18E                               ;; Check if ball goes up or down
0C18E A5 26                         LDA ball_flags
0C190 29 04                         AND #BALL_MOVES_DOWN
0C192 F0 27                         BEQ +moveBallUp
0C194                           
0C194                           
0C194                           +moveBallDown:
0C194                               ;; update the low byte
0C194 A5 1A                         LDA ball_ypos_lo
0C196 18                            CLC
0C197 69 C0                         ADC #BALL_SPEED_LO
0C199 85 1A                         STA ball_ypos_lo
0C19B                           
0C19B                               ;; update the high byte with carry
0C19B A5 19                         LDA ball_ypos_hi
0C19D 69 02                         ADC #BALL_SPEED_HI
0C19F 85 19                         STA ball_ypos_hi
0C1A1                               
0C1A1                               ;; Check bottom bound
0C1A1 C9 98                         CMP #BOUND_BOTTOM
0C1A3 90 38                         BCC +checkHorizontalMovement
0C1A5 F0 36                         BEQ +checkHorizontalMovement
0C1A7                           
0C1A7                               ;; Update ball color (test)
0C1A7 20 59 C2                      JSR sub_ColorizeBall
0C1AA                           
0C1AA                               ;; Change ball direction to "up"
0C1AA A9 98                         LDA #BOUND_BOTTOM
0C1AC 85 19                         STA ball_ypos_hi
0C1AE A9 00                         LDA #$00
0C1B0 85 1A                         STA ball_ypos_lo
0C1B2 A5 26                         LDA ball_flags
0C1B4 29 FB                         AND #MOVE_BALL_UP
0C1B6 85 26                         STA ball_flags
0C1B8 4C DD C1                      JMP +checkHorizontalMovement
0C1BB                           
0C1BB                           
0C1BB                           +moveBallUp:
0C1BB                               ;; update the low byte
0C1BB A5 1A                         LDA ball_ypos_lo
0C1BD 38                            SEC
0C1BE E9 C0                         SBC #BALL_SPEED_LO
0C1C0 85 1A                         STA ball_ypos_lo
0C1C2                           
0C1C2                               ;; update the high byte with carry
0C1C2 A5 19                         LDA ball_ypos_hi
0C1C4 E9 02                         SBC #BALL_SPEED_HI
0C1C6 85 19                         STA ball_ypos_hi
0C1C8                               
0C1C8                               ;; Check top bound
0C1C8 C9 10                         CMP #BOUND_TOP
0C1CA B0 11                         BCS +checkHorizontalMovement
0C1CC                           
0C1CC                               ;; Change ball direction to "down"
0C1CC 20 59 C2                      JSR sub_ColorizeBall
0C1CF A9 10                         LDA #BOUND_TOP
0C1D1 85 19                         STA ball_ypos_hi
0C1D3 A9 00                         LDA #$00
0C1D5 85 1A                         STA ball_ypos_lo
0C1D7 A5 26                         LDA ball_flags
0C1D9 09 04                         ORA #MOVE_BALL_DOWN
0C1DB 85 26                         STA ball_flags
0C1DD                           
0C1DD                           
0C1DD                           +checkHorizontalMovement:
0C1DD                               ;; Check if left button is held
0C1DD A5 0F                         LDA buttons_held
0C1DF 29 02                         AND #BUTTON_LEFT
0C1E1 F0 10                         BEQ +
0C1E3                                   ;; update the low byte
0C1E3 A5 18                             LDA ball_xpos_lo
0C1E5 38                                SEC
0C1E6 E9 C0                             SBC #BALL_SPEED_LO
0C1E8 85 18                             STA ball_xpos_lo
0C1EA                           
0C1EA                                   ;; update the high byte
0C1EA A5 17                             LDA ball_xpos_hi
0C1EC E9 02                             SBC #BALL_SPEED_HI
0C1EE 85 17                             STA ball_xpos_hi
0C1F0                           
0C1F0 4C 06 C2                          JMP +doneBallMovement        
0C1F3                               +
0C1F3                           
0C1F3                               ;; Check if right button is held
0C1F3 A5 0F                         LDA buttons_held
0C1F5 29 01                         AND #BUTTON_RIGHT
0C1F7 F0 0D                         BEQ +
0C1F9                                   ;; update the low byte
0C1F9 A5 18                             LDA ball_xpos_lo
0C1FB 18                                CLC
0C1FC 69 C0                             ADC #BALL_SPEED_LO
0C1FE 85 18                             STA ball_xpos_lo
0C200                           
0C200                                   ;; update the high byte
0C200 A5 17                             LDA ball_xpos_hi
0C202 69 02                             ADC #BALL_SPEED_HI
0C204 85 17                             STA ball_xpos_hi     
0C206                               +
0C206                           
0C206                           
0C206                           +doneBallMovement:
0C206                               ;; Don't update position again until next frame
0C206 E6 25                         INC ball_update_position
0C208                           
0C208                           
0C208                           +skipBallMovement:
0C208                               ;; Add to sprite buffer
0C208 A6 2C                         LDX sprite_ram_pointer
0C20A A5 19                         LDA ball_ypos_hi
0C20C 9D 00 02                      STA ADDR_SPRITERAM,x
0C20F E8                            INX
0C210 A9 01                         LDA #BALL_TILE_CHR
0C212 9D 00 02                      STA ADDR_SPRITERAM,x
0C215 E8                            INX
0C216 A9 00                         LDA #BALL_ATTR
0C218 9D 00 02                      STA ADDR_SPRITERAM,x
0C21B E8                            INX
0C21C A5 17                         LDA ball_xpos_hi
0C21E 9D 00 02                      STA ADDR_SPRITERAM,x
0C221 E8                            INX
0C222 86 2C                         STX sprite_ram_pointer
0C224                           
0C224                           
0C224                           
0C224                               ;; Sprite clean-up
0C224 A6 2C                         LDX sprite_ram_pointer
0C226 A9 EF                         LDA #$EF
0C228                               -
0C228 9D 00 02                          STA ADDR_SPRITERAM,x
0C22B E8                                INX
0C22C D0 FA                         BNE -
0C22E 4C 4F C0                      JMP MainGameLoop
0C231                           
0C231                           ;; Subroutines
0C231                           .include "include/subroutines.asm"
0C231                           
0C231                           ;; RNG
0C231                           .include "subroutine/GetRandomNumber.asm"
0C231                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C231                           ;;
0C231                           ;; subroutine/GetRandomNumber.asm
0C231                           ;;
0C231                           ;; Simple and fast random number generator by White Flame.
0C231                           ;;
0C231                           ;; Set random_seed to an arbitrary number to randomize between
0C231                           ;; gaming sessions, for instance using the frame counter upon
0C231                           ;; pressing START on the intro screen.
0C231                           ;;
0C231                           ;;     ;; IF START PRESSED:
0C231                           ;;     LDA frame_counter
0C231                           ;;     STA random_seed
0C231                           ;;
0C231                           ;; Source:
0C231                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C231                           ;;
0C231                           ;;
0C231                           
0C231                           sub_GetRandomNumber:
0C231                               ;; Force EOR if random_seed is zero
0C231 A5 16                         LDA random_seed
0C233 F0 05                         BEQ +doEor
0C235                           
0C235                               ;; Shift left, and EOR if the high bit is set
0C235 0A                            ASL
0C236 F0 04                         BEQ +noEor
0C238 90 02                         BCC +noEor
0C23A                           
0C23A                           +doEor:
0C23A 49 1D                         EOR #$1D
0C23C                           
0C23C                           +noEor:
0C23C 85 16                         STA random_seed
0C23E                           
0C23E 60                            RTS
0C23F                           
0C23F                           
0C23F                           ;; Read controller input
0C23F                           .include "subroutine/ReadController.asm"
0C23F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C23F                           ;;
0C23F                           ;; subroutine/ReadController.asm
0C23F                           ;;
0C23F                           ;; Subroutine that polls the controller and stores the input
0C23F                           ;; buttons in a variable. This version only handles controller
0C23F                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C23F                           ;;
0C23F                           ;;
0C23F                           
0C23F                           sub_ReadController:
0C23F                           
0C23F                               ;; Set strobe bit
0C23F A9 01                         LDA #$01
0C241 8D 16 40                      STA JOYPAD_1
0C244                           
0C244                               ;; Set up ring counter
0C244 85 0F                         STA buttons_held
0C246                           
0C246                               ;; Clear strobe bit
0C246 4A                            LSR
0C247 8D 16 40                      STA JOYPAD_1
0C24A                           
0C24A                               ;; Loop through button presses
0C24A                               -
0C24A AD 16 40                          LDA JOYPAD_1
0C24D 4A                                LSR
0C24E 26 0F                             ROL buttons_held
0C250                           
0C250                               ;; Check if ring counter is done
0C250 90 F8                         BCC -
0C252                           
0C252                               ;; Return from subroutine
0C252 60                            RTS
0C253                           
0C253                           
0C253                           ;; vBlank wait
0C253                           .include "subroutine/WaitForVBlank.asm"
0C253                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C253                           ;;
0C253                           ;; subroutine/WaitForVBlank.asm
0C253                           ;;
0C253                           ;; Subroutine that essentially pauses script execution until
0C253                           ;; vBlank happens.
0C253                           ;;
0C253                           ;;
0C253                           
0C253                           sub_WaitForVBlank:
0C253 2C 02 20                      BIT $2002
0C256 10 FB                         BPL sub_WaitForVBlank
0C258 60                            RTS
0C259                           
0C259                           
0C259                           ;; Game specific subroutines
0C259                           .include "game/include/subroutines.asm"
0C259                           ;; additional game-specific subroutines go here
0C259                           
0C259                           .include "game/subroutine/ColorizeBall.asm"
0C259                           sub_ColorizeBall:
0C259                           
0C259                               ;; Get next ball color in cycle
0C259 A5 26                         LDA ball_flags
0C25B 4A                            LSR
0C25C 4A                            LSR
0C25D 4A                            LSR
0C25E 4A                            LSR
0C25F 4A                            LSR
0C260 C9 05                         CMP #$05
0C262 D0 02                         BNE +
0C264 A9 FF                             LDA #$FF
0C266                               +
0C266 18                            CLC
0C267 69 01                         ADC #$01
0C269 AA                            TAX
0C26A                           
0C26A                               ;; Update color in ball flags
0C26A 0A                            ASL
0C26B 0A                            ASL
0C26C 0A                            ASL
0C26D 0A                            ASL
0C26E 0A                            ASL
0C26F 85 00                         STA temp
0C271 A5 26                         LDA ball_flags
0C273 29 1F                         AND #%00011111
0C275 05 00                         ORA temp
0C277 85 26                         STA ball_flags
0C279                           
0C279                               ;; Add new light color of ball to PPU palette
0C279 A9 3F                         LDA #$3F
0C27B 85 00                         STA temp
0C27D A9 11                         LDA #$11
0C27F 85 01                         STA temp+1
0C281 BD D8 C4                      LDA tbl_BallColorLight,x
0C284 85 02                         STA temp+2
0C286 20 CC C2                      JSR sub_WriteByteToPPU
0C289                               
0C289                               ;; Add new dark color of ball to PPU palette
0C289 E6 01                         INC temp+1
0C28B BD D2 C4                      LDA tbl_BallColorDark,x
0C28E 85 02                         STA temp+2
0C290 20 CC C2                      JSR sub_WriteByteToPPU
0C293                               
0C293 60                            RTS0C294                           .include "game/subroutine/DisableEnableRendering.asm"
0C294                           sub_DisableRendering:
0C294                               ;; Force NMI skip, disable rendering
0C294 A9 01                     	LDA #$01
0C296 85 14                     	STA force_skip_nmi
0C298 A5 12                         LDA soft_ppu_mask
0C29A 29 E7                         AND #%11100111
0C29C 85 12                         STA soft_ppu_mask
0C29E 20 53 C2                      JSR sub_WaitForVBlank
0C2A1 60                            RTS
0C2A2                           
0C2A2                           sub_EnableRendering:
0C2A2                               ;; Enable rendering
0C2A2 A5 12                         LDA soft_ppu_mask
0C2A4 09 1E                         ORA #%00011110
0C2A6 85 12                         STA soft_ppu_mask
0C2A8 A9 00                     	LDA #$00
0C2AA 8D 05 20                  	STA PPU_SCROLL
0C2AD 8D 05 20                  	STA PPU_SCROLL
0C2B0 85 14                     	STA force_skip_nmi
0C2B2 20 53 C2                      JSR sub_WaitForVBlank
0C2B5 60                            RTS
0C2B6                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C2B6                           sub_drawIntroScreenLogoTile:
0C2B6 B9 BA C3                      LDA tbl_IntroScreenLogoChr,y
0C2B9 C9 60                         CMP #$60
0C2BB D0 08                         BNE +
0C2BD 20 31 C2                          JSR sub_GetRandomNumber
0C2C0 29 07                             AND #$07
0C2C2 18                                CLC
0C2C3 69 60                             ADC #$60
0C2C5                               +
0C2C5 8D 07 20                      STA PPU_DATA
0C2C8 60                            RTS
0C2C9                           .include "game/subroutine/JumpToPointer.asm"
0C2C9                           sub_JumpToPointer:
0C2C9 6C 0C 00                      JMP (pointer)
0C2CC                               ;RTS must be handled by the routine (pointer) jumps to
0C2CC                           .include "game/subroutine/WriteByteToPPU.asm"
0C2CC                           sub_WriteByteToPPU:
0C2CC                           
0C2CC                               ;; Prevent updating until full 3-byte buffer is filled,
0C2CC                               ;; so that graphics won't glitch out if NMI happens during
0C2CC                               ;; updating the buffer
0C2CC A9 00                         LDA #$00
0C2CE 85 29                         STA ppu_buffer_update
0C2D0                           
0C2D0                               ;; Check if buffer full; if so, wait a frame and force update
0C2D0 A4 2A                         LDY ppu_buffer_pointer
0C2D2 C0 30                         CPY #$30
0C2D4 D0 05                         BNE +
0C2D6 E6 29                             INC ppu_buffer_update
0C2D8 20 53 C2                          JSR sub_WaitForVBlank
0C2DB                               +
0C2DB                           
0C2DB                               ;; Add ppu_addr high byte to buffer
0C2DB A5 00                         LDA temp
0C2DD 99 00 03                      STA ppu_buffer,y
0C2E0                           
0C2E0                               ;; Add ppu_addr low byte to buffer
0C2E0 C8                            INY
0C2E1 A5 01                         LDA temp+1
0C2E3 99 00 03                      STA ppu_buffer,y
0C2E6                           
0C2E6                               ;; Add ppu_data to buffer
0C2E6 C8                            INY
0C2E7 A5 02                         LDA temp+2
0C2E9 99 00 03                      STA ppu_buffer,y
0C2EC                           
0C2EC                               ;; Update buffer pointer
0C2EC C8                            INY
0C2ED 84 2A                         STY ppu_buffer_pointer
0C2EF                           
0C2EF                               ;; Tell NMI to update next round
0C2EF E6 29                         INC ppu_buffer_update
0C2F1                           
0C2F1                               ;; Return
0C2F1 60                            RTS0C2F2                           .include "game/subroutine/ScreenLoaders.asm"
0C2F2                           sub_LoadIntroScreen:
0C2F2                           
0C2F2                               ;; Load intro palette
0C2F2 2C 02 20                      BIT PPU_STATUS
0C2F5 A9 3F                         LDA #$3F
0C2F7 8D 06 20                      STA PPU_ADDR
0C2FA A9 00                         LDA #$00
0C2FC 8D 06 20                      STA PPU_ADDR
0C2FF A2 00                         LDX #$00
0C301                               -
0C301 BD 9A C3                          LDA tbl_IntroScreenPalette,x
0C304 8D 07 20                          STA PPU_DATA
0C307 E8                                INX
0C308 E0 20                             CPX #$20
0C30A D0 F5                         BNE -
0C30C                               
0C30C                               ;; Put ball in the middle
0C30C A9 7C                         LDA #$7C
0C30E 85 17                         STA ball_xpos_hi
0C310 85 19                         STA ball_ypos_hi
0C312                           
0C312                               ;; Clear the screen)
0C312 2C 02 20                      BIT PPU_STATUS
0C315 A9 20                         LDA #$20
0C317 8D 06 20                      STA PPU_ADDR
0C31A A9 00                         LDA #$00
0C31C 8D 06 20                      STA PPU_ADDR
0C31F AA                            TAX
0C320 A8                            TAY
0C321                               -
0C321 8D 07 20                          STA PPU_DATA
0C324 E8                                INX
0C325 D0 FA                             BNE -
0C327 C8                                INY
0C328 C0 04                             CPY #$04
0C32A D0 F5                         BNE -
0C32C                           
0C32C                               ;; Set up intro screen draw loop
0C32C A2 00                         LDX #$00
0C32E                           
0C32E                           -loop_IntroScreenData:
0C32E                           
0C32E                               ;; Get current byte from intro screen data
0C32E BD C2 C3                      LDA tbl_IntroScreenData,x
0C331                           
0C331                               ;; If current byte is #$3F, we're done drawing.
0C331 C9 3F                         CMP #$3F
0C333 D0 03                         BNE +
0C335 4C 82 C3                          JMP +goToEndIntroScreen
0C338                               +
0C338                           
0C338                               ;; If highest bits are %11, draw a plain tile
0C338 29 C0                         AND #%11000000
0C33A D0 03                         BNE +
0C33C 4C 62 C3                          JMP +drawTile
0C33F                               +
0C33F                               
0C33F                               ;; If highest bits are %01, set the PPU address
0C33F                               ;; If not, draw two logo tiles
0C33F C9 40                         CMP #%01000000
0C341 D0 03                         BNE +drawLogo
0C343 4C 6C C3                          JMP +setPpuAddr
0C346                           
0C346                           +drawLogo:
0C346                               ;; Get bits 0-2 and store in a temp variable
0C346 BD C2 C3                      LDA tbl_IntroScreenData,x
0C349 29 07                         AND #%00000111
0C34B 85 00                         STA temp
0C34D                               
0C34D                               ;; Get bits 3-5, shift over to get a value from 0-7
0C34D BD C2 C3                      LDA tbl_IntroScreenData,x
0C350 4A                            LSR
0C351 4A                            LSR
0C352 4A                            LSR
0C353 29 07                         AND #%00000111
0C355                               
0C355                               ;; Draw the tile that corresponds with that value
0C355 A8                            TAY
0C356 20 B6 C2                      JSR sub_drawIntroScreenLogoTile
0C359                               
0C359                               ;; Do the same for the value stored in temp
0C359 A4 00                         LDY temp
0C35B 20 B6 C2                      JSR sub_drawIntroScreenLogoTile
0C35E                           
0C35E                               ;; Next byte please
0C35E E8                            INX
0C35F 4C 2E C3                      JMP -loop_IntroScreenData
0C362                           
0C362                           +drawTile:
0C362                               ;; Just draw the tile value on screen
0C362 BD C2 C3                      LDA tbl_IntroScreenData,x
0C365 8D 07 20                      STA PPU_DATA
0C368                               
0C368                               ;; Next byte please
0C368 E8                            INX
0C369 4C 2E C3                      JMP -loop_IntroScreenData
0C36C                           
0C36C                           
0C36C                           +setPpuAddr:
0C36C                               ;; Reset the PPU latch
0C36C 2C 02 20                      BIT PPU_STATUS
0C36F                               
0C36F                               ;; Sanitize and write the high byte of the PPU address
0C36F BD C2 C3                      LDA tbl_IntroScreenData,x
0C372 29 3F                         AND #%00111111
0C374 8D 06 20                      STA PPU_ADDR
0C377                           
0C377                               ;; Write the low byte of the PPU address
0C377 E8                            INX
0C378 BD C2 C3                      LDA tbl_IntroScreenData,x
0C37B 8D 06 20                      STA PPU_ADDR
0C37E                               
0C37E                               ;; PPU has been set up to draw tiles at the correct spot now.
0C37E                               
0C37E                               ;; Next byte please.
0C37E E8                            INX
0C37F 4C 2E C3                      JMP -loop_IntroScreenData
0C382                           
0C382                           +goToEndIntroScreen:
0C382                           
0C382                               ;; To color the 1.LEVEL: line green, we need to update two
0C382                               ;; values in the PPU attribute data.
0C382 2C 02 20                      BIT PPU_STATUS
0C385 A9 23                         LDA #$23
0C387 8D 06 20                      STA PPU_ADDR
0C38A A9 CB                         LDA #$CB
0C38C 8D 06 20                      STA PPU_ADDR
0C38F A9 0A                         LDA #%00001010
0C391 8D 07 20                      STA PPU_DATA
0C394 8D 07 20                      STA PPU_DATA
0C397                           
0C397 60                            RTS
0C398                           
0C398                           
0C398                           sub_LoadGameScreen:
0C398 60                            RTS
0C399                               
0C399                           sub_LoadWinScreen:
0C399 60                            RTS0C39A                           
0C39A                           
0C39A                           ;; LUTs
0C39A                           .include "game/include/tables.asm"
0C39A                           
0C39A                           ;; Intro screen palette
0C39A                           tbl_IntroScreenPalette:
0C39A 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C39E 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C3A2 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C3A6 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C3AA                           
0C3AA 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C3AE 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C3B2 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C3B6 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C3BA                           
0C3BA                           
0C3BA                           ;; Intro: mapping logo index to chr tile
0C3BA                           tbl_IntroScreenLogoChr:
0C3BA 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C3C2                           
0C3C2                           
0C3C2                           ;; Intro screen data
0C3C2                           tbl_IntroScreenData:
0C3C2                           
0C3C2                               ;; Set PPU address $20AC
0C3C2 60 AC                         .db #$60, #$AC
0C3C4                               
0C3C4                               ;; Draw
0C3C4 02 26 16 0F 20 0F 16 27       .db #$02, #$26, #$16, #$0F, #$20, #$0F, #$16, #$27 ; 1.LEVEL:
0C3CC                           
0C3CC                               ;; Set PPU address $20CF
0C3CC 60 CF                         .db #$60, #$CF
0C3CE                               
0C3CE                               ;; Draw
0C3CE 01 02                         .db #$01, #$02                                     ; 01
0C3D0                               
0C3D0                               ;; Set PPU address $2122
0C3D0 61 22                         .db #$61, #$22
0C3D2                               
0C3D2                               ;; Draw
0C3D2 0E 0F 1D 13 11 18 25          .db #$0E, #$0F, #$1D, #$13, #$11, #$18, #$25       ; DESIGN,
0C3D9 1D 19 1F 18 0E 25             .db #$1D, #$19, #$1F, #$18, #$0E, #$25             ; SOUND,
0C3DF 11 1C 0B 1A 12 13 0D 1D       .db #$11, #$1C, #$0B, #$1A, #$12, #$13, #$0D, #$1D ; GRAPHICS
0C3E7 00 0B 18 0E 00                .db #$00, #$0B, #$18, #$0E, #$00                   ; _AND_
0C3EC                               
0C3EC                               ;; Set PPU address $2147
0C3EC 61 47                         .db #$61, #$47
0C3EE                               
0C3EE                               ;; Draw
0C3EE 1A 1C 19 11 1C 0B 17          .db #$1A, #$1C, #$19, #$11, #$1C, #$0B, #$17       ; PROGRAM
0C3F5 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C3F9 19 16 13 20 0F 1C             .db #$19, #$16, #$13, #$20, #$0F, #$1C             ; OLIVER
0C3FF 00 15 13 1C 21 0B             .db #$00, #$15, #$13, #$1C, #$21, #$0B             ; _KIRWA
0C405                               
0C405                               ;; Set PPU address $218B
0C405 61 8B                         .db #$61, #$8B
0C407                               
0C407                               ;; Draw
0C407 28 00 02 0A 09 08             .db #$28, #$00, #$02, #$0A, #$09, #$08             ; C_1987
0C40D 25 02 0A 09 09                .db #$25, #$02, #$0A, #$09, #$09                   ; ,1988
0C412                               
0C412                               ;; Set PPU address $21E6
0C412 61 E6                         .db #$61, #$E6
0C414                               
0C414                               ;; Draw
0C414 18 0F 1D 00 1A 19 1C 1E       .db #$18, #$0F, #$1D, #$00, #$1A, #$19, #$1C, #$1E ; NES_PORT
0C41C 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C420 15 0F 20 13 18 09 02          .db #$15, #$0F, #$20, #$13, #$18, #$09, #$02       ; KEVIN81
0C427                               
0C427                               ;; Set PPU address $222D
0C427 62 2D                         .db #$62, #$2D
0C429                               
0C429                               ;; Draw
0C429 28 00 03 01 03 04             .db #$28, #$00, #$03, #$01, #$03, #$04             ; C_2023
0C42F                               
0C42F                               ;; Set PPU address $2281
0C42F 62 81                         .db #$62, #$81
0C431                               
0C431                               ;; Draw the Crillion logo
0C431 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C435 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C439 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C43D E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C441                               
0C441 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C445 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C449 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C44D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C451                               
0C451 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C455 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C459 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C45D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C461                           
0C461 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C465 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C469 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C46D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C471                               
0C471 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C475 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C479 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C47D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C481                           
0C481 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C485 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C489 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C48D F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C490                           
0C490                               ;; End of intro
0C490 3F                            .db #$3F
0C491                           
0C491                           
0C491                           ;; test animation table
0C491                           .include "game/test/show_animation_table.asm"
0C491                           ;; CHR tile-id's per slide of explosion
0C491                           explosion_slide0:
0C491 00 00 00                      .db #$00, #$00, #$00
0C494 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C497 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C49A                           
0C49A                           explosion_slide1:
0C49A 00 00 00                      .db #$00, #$00, #$00
0C49D 29 2A 2B                      .db #$29, #$2A, #$2B
0C4A0 39 3A 3B                      .db #$39, #$3A, #$3B
0C4A3                           
0C4A3                           explosion_slide2:
0C4A3 16 00 00                      .db #$16, #$00, #$00
0C4A6 26 27 28                      .db #$26, #$27, #$28
0C4A9 36 37 38                      .db #$36, #$37, #$38
0C4AC                           
0C4AC                           explosion_slide3:
0C4AC 00 14 15                      .db #$00, #$14, #$15
0C4AF 23 24 25                      .db #$23, #$24, #$25
0C4B2 33 34 35                      .db #$33, #$34, #$35
0C4B5                           
0C4B5                           explosion_slide4:
0C4B5 10 11 12                      .db #$10, #$11, #$12
0C4B8 20 21 22                      .db #$20, #$21, #$22
0C4BB 30 31 32                      .db #$30, #$31, #$32
0C4BE                           
0C4BE                           ;; High and low bytes of animation slides
0C4BE                           explosion_anim_hi:
0C4BE C4                            .db >#explosion_slide0
0C4BF C4                            .db >#explosion_slide1
0C4C0 C4                            .db >#explosion_slide2
0C4C1 C4                            .db >#explosion_slide3
0C4C2 C4                            .db >#explosion_slide4
0C4C3 C4                            .db >#explosion_slide4
0C4C4 C4                            .db >#explosion_slide3
0C4C5 C4                            .db >#explosion_slide2
0C4C6 C4                            .db >#explosion_slide1
0C4C7 C4                            .db >#explosion_slide0
0C4C8                           
0C4C8                           explosion_anim_lo:
0C4C8 91                            .db <#explosion_slide0
0C4C9 9A                            .db <#explosion_slide1
0C4CA A3                            .db <#explosion_slide2
0C4CB AC                            .db <#explosion_slide3
0C4CC B5                            .db <#explosion_slide4
0C4CD B5                            .db <#explosion_slide4
0C4CE AC                            .db <#explosion_slide3
0C4CF A3                            .db <#explosion_slide2
0C4D0 9A                            .db <#explosion_slide1
0C4D1 91                            .db <#explosion_slide0
0C4D2                           
0C4D2                           
0C4D2                           
0C4D2                           ;; Ball palette color cycle
0C4D2                           tbl_BallColorDark:
0C4D2 12 14 16 27 28 19             .db #$12, #$14, #$16, #$27, #$28, #$19
0C4D8                            
0C4D8                           tbl_BallColorLight:
0C4D8 2C 24 25 37 20 2B             .db #$2C, #$24, #$25, #$37, #$20, #$2B
0C4DE                           
0C4DE                               
0C4DE                           ;; Screen mode drawing routine addresses
0C4DE                           tbl_LoadScreenHi:
0C4DE C2 C3 C3                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C4E1                           
0C4E1                           tbl_LoadScreenLo:
0C4E1 F2 98 99                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C4E4                           
0C4E4                           
0C4E4                           ;; NMI handler
0C4E4                           NMI:
0C4E4                               .include "interrupt/nmi.asm"
0C4E4                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4E4                           ;;
0C4E4                           ;; include/nmi.asm
0C4E4                           ;;
0C4E4                           ;; Non-maskable interrupt script. This script is being executed
0C4E4                           ;; when vBlank hits.
0C4E4                           ;;
0C4E4                           ;;
0C4E4                           
0C4E4                               ;; Preserve accumulator through stack
0C4E4 48                            PHA
0C4E5                           
0C4E5                               ;; Should NMI be skipped?
0C4E5 A5 13                         LDA skip_nmi
0C4E7 F0 03                         BEQ +
0C4E9 4C 71 C5                          JMP +skip_nmi
0C4EC                               +
0C4EC                           
0C4EC                               ;; When in NMI, skip additional NMI requests
0C4EC A9 01                         LDA #$01
0C4EE 85 13                         STA skip_nmi
0C4F0                           
0C4F0                               ;; Preserve X, Y, and PC through stack
0C4F0 8A                            TXA
0C4F1 48                            PHA
0C4F2 98                            TYA
0C4F3 48                            PHA
0C4F4 08                            PHP
0C4F5                               
0C4F5                               ;; Check forced NMI skip
0C4F5 A5 14                         LDA force_skip_nmi
0C4F7 F0 03                         BEQ +
0C4F9 4C 62 C5                          JMP +force_skip_nmi
0C4FC                               +
0C4FC                           
0C4FC                               ;; Update PPU mask
0C4FC                               ;LDA #$00
0C4FC                               ;STA PPU_CTRL
0C4FC A5 12                         LDA soft_ppu_mask
0C4FE 8D 01 20                      STA PPU_MASK
0C501                               
0C501                               
0C501                               ;; Additional PPU updates go here
0C501                               .include "game/test/tile_update_nmi.asm"
0C501                           
0C501                               ;; Check if ppu_buffer needs updating
0C501 A5 29                         LDA ppu_buffer_update
0C503 D0 03                         BNE +
0C505 4C 47 C5                          JMP +no_ppu_buffer_update
0C508                               +
0C508                           
0C508                               ;; Reset ppu control register and mask
0C508 A2 00                         LDX #$00
0C50A 8E 00 20                      STX PPU_CTRL
0C50D 8E 01 20                      STX PPU_MASK
0C510                           
0C510                               ;; Set up loop
0C510                               -
0C510                                   ;; Reset hi/lo latch
0C510 2C 02 20                          BIT PPU_STATUS
0C513                           
0C513                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0C513 BD 00 03                          LDA ppu_buffer,x
0C516 8D 06 20                          STA PPU_ADDR
0C519 E8                                INX
0C51A BD 00 03                          LDA ppu_buffer,x
0C51D 8D 06 20                          STA PPU_ADDR
0C520                           
0C520                                   ;; Write ppu_buffer data to PPU_ADDR
0C520 E8                                INX
0C521 BD 00 03                          LDA ppu_buffer,x
0C524 8D 07 20                          STA PPU_DATA
0C527                           
0C527                                   ;; Check if updating is done (eg. X is at pointer)
0C527 E8                                INX
0C528 E4 2A                             CPX ppu_buffer_pointer
0C52A F0 03                             BEQ +
0C52C 4C 10 C5                      JMP -
0C52F                           +
0C52F                           
0C52F                               ;; Reset ppu buffer update and pointer
0C52F A9 00                         LDA #$00
0C531 85 29                         STA ppu_buffer_update
0C533 85 2A                         STA ppu_buffer_pointer
0C535                               
0C535                               ;; Reset scrolling position
0C535 8D 05 20                      STA PPU_SCROLL
0C538 8D 05 20                      STA PPU_SCROLL
0C53B                           
0C53B                               ;; Restore ppu control register and mask
0C53B A9 90                         LDA #%10010000
0C53D 8D 00 20                      STA PPU_CTRL
0C540 A5 12                         LDA soft_ppu_mask
0C542 8D 01 20                      STA PPU_MASK
0C545 A9 00                         LDA #$00
0C547                           
0C547                           ;; Continue other NMI stuff
0C547                           +no_ppu_buffer_update:
0C547                               .include "game/test/show_animation_nmi.asm"
0C547                               ;; Reset sprite RAM, draw sprites
0C547 8D 03 20                      STA OAM_ADDR
0C54A A9 02                         LDA #$02
0C54C 8D 14 40                      STA OAM_DMA
0C54F                           
0C54F A0 04                         LDY #MAX_ANIMATIONS
0C551 A2 00                         LDX #$00
0C553                               -
0C553 BD 30 03                          LDA explosion_framecounter,x
0C556 F0 03                             BEQ +
0C558 DE 30 03                              DEC explosion_framecounter,x
0C55B                                   +
0C55B E8                                INX
0C55C 88                                DEY
0C55D F0 03                             BEQ +done        
0C55F 4C 53 C5                      JMP -
0C562                           +done:
0C562                           
0C562                           ;; This is what happens when we forced nmi skip
0C562                           +force_skip_nmi:
0C562                           
0C562                               ;; Increase frame counters
0C562 E6 15                         INC frame_counter
0C564                           
0C564                               ;; reset ball_update_position
0C564 A9 00                         LDA #$00
0C566 85 25                         STA ball_update_position
0C568                           
0C568                               ;; Don't skip next NMI request
0C568 A9 00                         LDA #$00
0C56A 85 13                         STA skip_nmi
0C56C                           
0C56C                               ;; Restore X, Y and PC from stack
0C56C 28                            PLP
0C56D 68                            PLA
0C56E A8                            TAY
0C56F 68                            PLA
0C570 AA                            TAX
0C571                           
0C571                           +skip_nmi:
0C571                               ;; Restore accumulator from stack
0C571 68                            PLA
0C572                           
0C572                               ;; Return
0C572 40                            RTI
0C573                           
0C573                           ;; IRQ handler (empty)
0C573                           IRQ:
0C573                               .include "interrupt/irq.asm"
0C573 40                            RTI0C574                           
0C574                           ;; Interrupt vectors
0C574 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA E4 C4                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 73 C5                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
