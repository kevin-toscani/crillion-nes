                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_SPRITERAM = $0200
                                ADDR_OTHERRAM  = $0300
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Starting address for screen tile RAM
                                ADDR_SCREENTILERAM  = $0400
                                
                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI = #$02
                                BALL_SPEED_LO = #$30
                                BALL_TILE_CHR = #$01
                                BALL_ATTR     = #%00000000
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD     = #%00000001
                                KILL_BALL        = #%00000001
                                REVIVE_BALL      = #%11111110
                                NUDGE_BALL_RIGHT = #%00000010
                                NUDGE_BALL_LEFT  = #%11111101
                                BALL_IS_FROZEN   = #%00000100
                                FREEZE_BALL      = #%00000100
                                UNFREEZE_BALL    = #%11111011
                                BALL_MOVES_DOWN  = #%00010000
                                MOVE_BALL_DOWN   = #%00010000
                                MOVE_BALL_UP     = #%11101111
                                
                                
                                ;; Screen load helpers
                                LOAD_INTRO_SCREEN = #%10000000
                                LOAD_GAME_SCREEN  = #%10000001
                                LOAD_WIN_SCREEN   = #%10000010
                                IS_INTRO_SCREEN   = #%00000000
                                IS_GAME_SCREEN    = #%00000001
                                IS_WIN_SCREEN     = #%00000010
                                CHECK_SCREEN_MODE = #%00000011
                                
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$30
                                BOUND_BOTTOM    = #$C8
                                BOUND_LEFT      = #$10
                                BOUND_RIGHT     = #$E8
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                
                                ;; Max number of nudge frames
                                NUDGE_FRAMES    = #$03
                                
                                
                                ;; Helper constant for when a level is done loading
                                LEVEL_END       = #$FF
                                
                                
                                ;; Character map
                                _SPACE = #$00
                                _0     = #$01
                                _1     = #$02
                                _2     = #$03
                                _3     = #$04
                                _4     = #$05
                                _5     = #$06
                                _6     = #$07
                                _7     = #$08
                                _8     = #$09
                                _9     = #$0A
                                _A     = #$0B
                                _B     = #$0C
                                _C     = #$0D
                                _D     = #$0E
                                _E     = #$0F
                                _F     = #$10
                                _G     = #$11
                                _H     = #$12
                                _I     = #$13
                                _J     = #$14
                                _K     = #$15
                                _L     = #$16
                                _M     = #$17
                                _N     = #$18
                                _O     = #$19
                                _P     = #$1A
                                _Q     = #$1B
                                _R     = #$1C
                                _S     = #$1D
                                _T     = #$1E
                                _U     = #$1F
                                _V     = #$20
                                _W     = #$21
                                _X     = #$22
                                _Y     = #$23
                                _Z     = #$24
                                _COMMA = #$25
                                _DOT   = #$26
                                _COLON = #$27
                                _COPY  = #$28
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           
00025                           ;; Update-position check
00025                           ball_update_position   .dsb 1
00026                           
00026                           
00026                           ;; Ball flags
00026                           ;; #% c c c v . f n a
00026                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00026                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00026                           ;;    | | | | | +------ ball is frozen (not moving)
00026                           ;;    | | | | +-------- (unused for now)
00026                           ;;    | | | +---------- ball moves up (0) or down (1)
00026                           ;;    +-+-+------------ ball color (1-6)
00026                           ball_flags             .dsb 1
00027                           
00027                           
00027                           ;; Screen mode
00027                           ;; #% u . . . . . t t
00027                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00027                           ;;    | +-+-+-+-+------------- unused
00027                           ;;    +----------------------- should the screen update
00027                           screen_mode            .dsb 1
00028                           
00028                           
00028                           ;; Start level pointer
00028                           ;; You can start the game at level 1, 5, 9, 13 or 17.
00028                           ;; This is the pointer that tells you at which level to start.
00028                           startlevel_pointer     .dsb 1 
00029                           
00029                           
00029                           ;; PPU buffer variables
00029                           ppu_buffer_update      .dsb 1
0002A                           ppu_buffer_pointer     .dsb 1
0002B                           
0002B                           ;; Pointer to keep track of the number of explosions
0002B                           explosion_pointer      .dsb 1
0002C                           
0002C                           ;; Sprite RAM pointer to keep track of sprites to update
0002C                           sprite_ram_pointer     .dsb 1
0002D                           
0002D                           ;; Nudge counter
0002D                           nudge_counter          .dsb 1
0002E                           
0002E                           ;; Current level
0002E                           current_level          .dsb 1
0002F                           
0002F                               0002F                           .ende
                                
                                ;; Other RAM (must be ENUM'd within)
                                .include "ram/misc.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; ram/misc.asm
                                ;;
                                ;; List of additional, non-zeropage RAM variables. Currently
                                ;; empty, but will hold data like the OAM buffer and other,
                                ;; less-often accessed, global variables.
                                ;;
                                ;;
                                
                                
                                    ;; Game specific RAM variables
                                    .include "game/ram/misc.asm"
                                ;; miscellaneous (non-zeropage) ram variables go here
                                
                                .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
                                
                                
                                ;; screen tile data (14x10 metatiles)
                                .enum ADDR_SCREENTILERAM
00400                               tile_type                 .dsb 160
004A0                               tile_attributes           .dsb 64
004E0                           .ende
                                
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 A5 C2                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 A5 C2                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 27                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 2E                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 2C                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 91 C2                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 27                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 27                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 04 C9                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 01 C9                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 37 C3                      JSR sub_DisableRendering
0C08A 20 78 C3                      JSR sub_JumpToPointer
0C08D 20 4B C3                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 27                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 27                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; CONCEPT SCRIPTS
0C096                               
0C096                               ;; Upon pressing A, an explosion will happen on screen
0C096                               .include "game/test/show_animation.asm"
0C096                               ;; If A button is pressed, initiate explosion
0C096 A5 10                         LDA buttons_pressed
0C098 29 80                         AND #BUTTON_A
0C09A D0 03                         BNE +
0C09C 4C CE C0                          JMP +end
0C09F                               +
0C09F                           
0C09F                               ;; Get most recent slot for explosion
0C09F A6 2B                         LDX explosion_pointer
0C0A1                           
0C0A1                               ;; If 0, use max pointer value
0C0A1 D0 02                         BNE +
0C0A3 A2 04                             LDX #MAX_ANIMATIONS
0C0A5                               +
0C0A5                           
0C0A5                               ;; Decrease pointer by one
0C0A5 CA                            DEX
0C0A6 86 2B                         STX explosion_pointer
0C0A8                           
0C0A8                               ;; Load explosion data into RAM
0C0A8 A9 00                         LDA #$00
0C0AA 9D 34 03                      STA explosion_currentframe,x
0C0AD A9 04                         LDA #ANIMATION_SPEED
0C0AF 9D 30 03                      STA explosion_framecounter,x
0C0B2 20 83 C2                      JSR sub_GetRandomNumber
0C0B5                               ;AND #%11110000
0C0B5 9D 3C 03                      STA explosion_x,x
0C0B8 20 83 C2                      JSR sub_GetRandomNumber
0C0BB                               ;AND #%11110000
0C0BB 9D 40 03                      STA explosion_y,x
0C0BE 20 83 C2                      JSR sub_GetRandomNumber
0C0C1 29 02                         AND #%00000010
0C0C3 18                            CLC
0C0C4 69 01                         ADC #$01
0C0C6 9D 38 03                      STA explosion_attributes,x
0C0C9 A9 01                         LDA #$01
0C0CB 9D 44 03                      STA explosion_active,x
0C0CE                           
0C0CE                           
0C0CE                           +end:
0C0CE                           
0C0CE                               ;; Set up loop
0C0CE A2 00                         LDX #$00
0C0D0                               -loop_load_animation:
0C0D0                                   ;; Check if current animation is active. If not, goto next
0C0D0 BD 44 03                          LDA explosion_active,x
0C0D3 D0 03                             BNE +
0C0D5 4C 6F C1                              JMP +next
0C0D8                                   +
0C0D8                           
0C0D8                                   ;; Check the explosion framecounter
0C0D8 BD 30 03                          LDA explosion_framecounter,x
0C0DB D0 26                             BNE +
0C0DD                                       ;; Framecounter is 0
0C0DD                                       ;; Reset to animation speed
0C0DD A9 04                                 LDA #ANIMATION_SPEED
0C0DF 9D 30 03                              STA explosion_framecounter,x
0C0E2                           
0C0E2                                       ;; Set next animation frame, and check if we're done yet
0C0E2 FE 34 03                              INC explosion_currentframe,x
0C0E5 BD 34 03                              LDA explosion_currentframe,x
0C0E8 C9 0A                                 CMP #ANIM_SLIDES
0C0EA D0 17                                 BNE +
0C0EC                           
0C0EC                                       ;; If we're done, inactivate current explosion, clean
0C0EC                                       ;; up sprite RAM and go to the next one
0C0EC A9 00                                 LDA #$00
0C0EE 9D 44 03                              STA explosion_active,x
0C0F1                                       
0C0F1 A9 09                                 LDA #SLIDE_SIZE
0C0F3 0A                                    ASL
0C0F4 0A                                    ASL
0C0F5 A8                                    TAY
0C0F6 A9 EF                                 LDA #$EF
0C0F8                                       -
0C0F8 88                                        DEY
0C0F9 99 00 02                                  STA ADDR_SPRITERAM,y
0C0FC C0 00                                     CPY #00
0C0FE D0 F8                                 BNE -
0C100                                       
0C100 4C 6F C1                              JMP +next
0C103                                   +
0C103                           
0C103                                   ;; Load (x,y) position in temp variables
0C103 BD 3C 03                          LDA explosion_x,x
0C106 85 01                             STA temp+1
0C108 85 03                             STA temp+3
0C10A BD 40 03                          LDA explosion_y,x
0C10D 85 02                             STA temp+2
0C10F                           
0C10F                                   ;; Load attribute in temp variable
0C10F BD 38 03                          LDA explosion_attributes,x
0C112 85 04                             STA temp+4
0C114                           
0C114                                   ;; Load current frame into Y-register
0C114 BC 34 03                          LDY explosion_currentframe,x
0C117                           
0C117                                   ;; Load current frame ROM address from table
0C117 B9 EB C8                          LDA explosion_anim_lo,y
0C11A 85 0C                             STA pointer
0C11C B9 E1 C8                          LDA explosion_anim_hi,y
0C11F 85 0D                             STA pointer+1
0C121                           
0C121                                   ;; Save x-register on stack
0C121 8A                                TXA
0C122 48                                PHA
0C123                           
0C123                                   ;; Load sprites into sprite RAM
0C123 A6 2C                             LDX sprite_ram_pointer
0C125 A0 00                             LDY #$00
0C127                           
0C127                                   ;; Prepare (x,y) offset for loop
0C127 84 00                             STY temp
0C129                           
0C129                                   -loop_load_sprite:
0C129                                   
0C129                                       ;; Do not draw empty sprites
0C129 B1 0C                                 LDA (pointer),y
0C12B F0 18                                 BEQ +nextSprite
0C12D                                   
0C12D                                           ;; Add y-position to sprite ram buffer
0C12D A5 02                                     LDA temp+2
0C12F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C132 E8                                        INX
0C133                           
0C133                                           ;; Get tile number from frame ROM address, and
0C133                                           ;; add it to sprite ram buffer
0C133 B1 0C                                     LDA (pointer),y
0C135 9D 00 02                                  STA ADDR_SPRITERAM,x
0C138 E8                                        INX
0C139                           
0C139                                           ;; Add attribute data to sprite ram buffer
0C139 A5 04                                     LDA temp+4
0C13B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13E E8                                        INX
0C13F                           
0C13F                                           ;; Add x-position to sprite ram buffer
0C13F A5 03                                     LDA temp+3
0C141 9D 00 02                                  STA ADDR_SPRITERAM,x
0C144 E8                                        INX
0C145                           
0C145                                       +nextSprite:
0C145                           
0C145                                       ;; Check if all sprites are done
0C145 C8                                    INY
0C146 C0 09                                 CPY #SLIDE_SIZE
0C148 F0 21                                 BEQ +done
0C14A                           
0C14A                                       ;; Update x value
0C14A A5 03                                 LDA temp+3
0C14C 18                                    CLC
0C14D 69 08                                 ADC #$08
0C14F 85 03                                 STA temp+3
0C151                           
0C151                                       ;; Update temp for x,y position
0C151 E6 00                                 INC temp
0C153 A5 00                                 LDA temp
0C155 C9 03                                 CMP #SLIDE_WIDTH
0C157 D0 0F                                 BNE +
0C159                                           ;; Row is done; reset x-position
0C159 A5 01                                     LDA temp+1
0C15B 85 03                                     STA temp+3
0C15D                           
0C15D                                           ;; Update y-position
0C15D A5 02                                     LDA temp+2
0C15F 18                                        CLC
0C160 69 08                                     ADC #$08
0C162 85 02                                     STA temp+2
0C164                           
0C164                                           ;; Reset row counter
0C164 A9 00                                     LDA #$00
0C166 85 00                                     STA temp
0C168                                       +
0C168                           
0C168 4C 29 C1                          JMP -loop_load_sprite
0C16B                           
0C16B                               +done:
0C16B 86 2C                             STX sprite_ram_pointer
0C16D                           
0C16D                                   ;; Retrieve x-register from stack
0C16D 68                                PLA
0C16E AA                                TAX
0C16F                           
0C16F                               +next:
0C16F                                   ;; Check if all animations have been updated
0C16F E8                                INX
0C170 E0 04                             CPX #MAX_ANIMATIONS
0C172 F0 03                             BEQ +done
0C174                           
0C174 4C D0 C0                      JMP -loop_load_animation
0C177                           +done:
0C177                           
0C177                               ;; On the game screen, the ball should move
0C177 A5 27                         LDA screen_mode
0C179 C9 01                         CMP #IS_GAME_SCREEN
0C17B F0 03                         BEQ +
0C17D 4C 60 C2                          JMP ++
0C180                               +
0C180                               .include "game/test/move_ball.asm"
0C180                           
0C180                               ;; check if position should be updated (ie. has nmi happened yet)
0C180 A5 25                         LDA ball_update_position
0C182 F0 03                         BEQ +
0C184 4C 44 C2                          JMP +skipBallMovement
0C187                               +
0C187                           
0C187                               ;; Check if ball goes up or down
0C187 A5 26                         LDA ball_flags
0C189 29 10                         AND #BALL_MOVES_DOWN
0C18B F0 24                         BEQ +moveBallUp
0C18D                           
0C18D                           
0C18D                           +moveBallDown:
0C18D                               ;; update the low byte
0C18D A5 1A                         LDA ball_ypos_lo
0C18F 18                            CLC
0C190 69 30                         ADC #BALL_SPEED_LO
0C192 85 1A                         STA ball_ypos_lo
0C194                           
0C194                               ;; update the high byte with carry
0C194 A5 19                         LDA ball_ypos_hi
0C196 69 02                         ADC #BALL_SPEED_HI
0C198 85 19                         STA ball_ypos_hi
0C19A                               
0C19A                               ;; Check bottom bound
0C19A C9 C8                         CMP #BOUND_BOTTOM
0C19C 90 32                         BCC +checkHorizontalMovement
0C19E F0 30                         BEQ +checkHorizontalMovement
0C1A0                           
0C1A0                           
0C1A0                               ;; Change ball direction to "up"
0C1A0 A9 C8                         LDA #BOUND_BOTTOM
0C1A2 85 19                         STA ball_ypos_hi
0C1A4 A9 00                         LDA #$00
0C1A6 85 1A                         STA ball_ypos_lo
0C1A8 A5 26                         LDA ball_flags
0C1AA 29 EF                         AND #MOVE_BALL_UP
0C1AC 85 26                         STA ball_flags
0C1AE 4C D0 C1                      JMP +checkHorizontalMovement
0C1B1                           
0C1B1                           
0C1B1                           +moveBallUp:
0C1B1                               ;; update the low byte
0C1B1 A5 1A                         LDA ball_ypos_lo
0C1B3 38                            SEC
0C1B4 E9 30                         SBC #BALL_SPEED_LO
0C1B6 85 1A                         STA ball_ypos_lo
0C1B8                           
0C1B8                               ;; update the high byte with carry
0C1B8 A5 19                         LDA ball_ypos_hi
0C1BA E9 02                         SBC #BALL_SPEED_HI
0C1BC 85 19                         STA ball_ypos_hi
0C1BE                               
0C1BE                               ;; Check top bound
0C1BE C9 30                         CMP #BOUND_TOP
0C1C0 B0 0E                         BCS +checkHorizontalMovement
0C1C2                           
0C1C2                               ;; Change ball direction to "down"
0C1C2 A9 30                         LDA #BOUND_TOP
0C1C4 85 19                         STA ball_ypos_hi
0C1C6 A9 00                         LDA #$00
0C1C8 85 1A                         STA ball_ypos_lo
0C1CA A5 26                         LDA ball_flags
0C1CC 09 10                         ORA #MOVE_BALL_DOWN
0C1CE 85 26                         STA ball_flags
0C1D0                           
0C1D0                           
0C1D0                           +checkHorizontalMovement:
0C1D0                           
0C1D0                               ;; Check if ball is being nudged
0C1D0 A5 2D                         LDA nudge_counter
0C1D2 D0 47                         BNE +doneBallMovement
0C1D4                           
0C1D4                               ;; Check if left button is held
0C1D4 A5 0F                         LDA buttons_held
0C1D6 29 02                         AND #BUTTON_LEFT
0C1D8 F0 1E                         BEQ +
0C1DA                                   ;; update the low byte
0C1DA A5 18                             LDA ball_xpos_lo
0C1DC 38                                SEC
0C1DD E9 30                             SBC #BALL_SPEED_LO
0C1DF 85 18                             STA ball_xpos_lo
0C1E1                           
0C1E1                                   ;; update the high byte
0C1E1 A5 17                             LDA ball_xpos_hi
0C1E3 E9 02                             SBC #BALL_SPEED_HI
0C1E5 85 17                             STA ball_xpos_hi
0C1E7                                   
0C1E7                                   ;; Check left bound
0C1E7 C9 10                             CMP #BOUND_LEFT
0C1E9 B0 30                             BCS +doneBallMovement
0C1EB                                   
0C1EB                                   ;; Set flag to nudge right
0C1EB A5 26                             LDA ball_flags
0C1ED 09 02                             ORA #NUDGE_BALL_RIGHT
0C1EF 85 26                             STA ball_flags
0C1F1                                   
0C1F1                                   ;; Set nudge timer
0C1F1 A9 03                             LDA #NUDGE_FRAMES
0C1F3 85 2D                             STA nudge_counter
0C1F5                                   
0C1F5                           
0C1F5 4C 1B C2                          JMP +doneBallMovement        
0C1F8                               +
0C1F8                           
0C1F8                               ;; Check if right button is held
0C1F8 A5 0F                         LDA buttons_held
0C1FA 29 01                         AND #BUTTON_RIGHT
0C1FC F0 1D                         BEQ +
0C1FE                                   ;; update the low byte
0C1FE A5 18                             LDA ball_xpos_lo
0C200 18                                CLC
0C201 69 30                             ADC #BALL_SPEED_LO
0C203 85 18                             STA ball_xpos_lo
0C205                           
0C205                                   ;; update the high byte
0C205 A5 17                             LDA ball_xpos_hi
0C207 69 02                             ADC #BALL_SPEED_HI
0C209 85 17                             STA ball_xpos_hi     
0C20B                           
0C20B                                  ;; Check right bound
0C20B C9 E8                             CMP #BOUND_RIGHT
0C20D 90 0C                             BCC +doneBallMovement
0C20F F0 0A                             BEQ +doneBallMovement
0C211                                   
0C211                                   ;; Set flag to nudge right
0C211 A5 26                             LDA ball_flags
0C213 29 FD                             AND #NUDGE_BALL_LEFT
0C215 85 26                             STA ball_flags
0C217                                   
0C217                                   ;; Set nudge timer
0C217 A9 03                             LDA #NUDGE_FRAMES
0C219 85 2D                             STA nudge_counter
0C21B                               +
0C21B                           
0C21B                           
0C21B                           +doneBallMovement:
0C21B                           
0C21B                               ;; Check nudge
0C21B A5 2D                         LDA nudge_counter
0C21D F0 23                         BEQ +doneBallNudging
0C21F A5 26                             LDA ball_flags
0C221 29 02                             AND #NUDGE_BALL_RIGHT
0C223 F0 10                             BEQ +nudgeBallLeft
0C225                                   
0C225                                       ;; update the low byte
0C225 A5 18                                 LDA ball_xpos_lo
0C227 18                                    CLC
0C228 69 30                                 ADC #BALL_SPEED_LO
0C22A 85 18                                 STA ball_xpos_lo
0C22C                           
0C22C                                       ;; update the high byte
0C22C A5 17                                 LDA ball_xpos_hi
0C22E 69 02                                 ADC #BALL_SPEED_HI
0C230 85 17                                 STA ball_xpos_hi  
0C232 4C 42 C2                              JMP +doneBallNudging
0C235                                   +nudgeBallLeft:
0C235                                   
0C235                                   ;; update the low byte
0C235 A5 18                             LDA ball_xpos_lo
0C237 38                                SEC
0C238 E9 30                             SBC #BALL_SPEED_LO
0C23A 85 18                             STA ball_xpos_lo
0C23C                           
0C23C                                   ;; update the high byte
0C23C A5 17                             LDA ball_xpos_hi
0C23E E9 02                             SBC #BALL_SPEED_HI
0C240 85 17                             STA ball_xpos_hi
0C242                               +doneBallNudging:
0C242                           
0C242                               ;; Don't update position again until next frame
0C242 E6 25                         INC ball_update_position
0C244                           
0C244                           
0C244                           
0C244                           +skipBallMovement:
0C244                               ;; Add to sprite buffer
0C244 A6 2C                         LDX sprite_ram_pointer
0C246 A5 19                         LDA ball_ypos_hi
0C248 9D 00 02                      STA ADDR_SPRITERAM,x
0C24B E8                            INX
0C24C A9 01                         LDA #BALL_TILE_CHR
0C24E 9D 00 02                      STA ADDR_SPRITERAM,x
0C251 E8                            INX
0C252 A9 00                         LDA #BALL_ATTR
0C254 9D 00 02                      STA ADDR_SPRITERAM,x
0C257 E8                            INX
0C258 A5 17                         LDA ball_xpos_hi
0C25A 9D 00 02                      STA ADDR_SPRITERAM,x
0C25D E8                            INX
0C25E 86 2C                         STX sprite_ram_pointer
0C260                           
0C260                               ++
0C260                               
0C260                               ;; Upon pressing START, (next level) design will be drawn
0C260                               .include "game/test/load_next_level.asm"
0C260                               ;; If START button is pressed
0C260 A5 10                         LDA buttons_pressed
0C262 29 10                         AND #BUTTON_START
0C264 F0 10                         BEQ +continue
0C266                                   ;; Load the next level
0C266 E6 2E                             INC current_level
0C268 A5 2E                             LDA current_level
0C26A C9 19                             CMP #25
0C26C D0 04                             BNE +
0C26E A9 00                                 LDA #$00
0C270 85 2E                                 STA current_level
0C272                                   +
0C272                                   
0C272 A9 81                             LDA #LOAD_GAME_SCREEN
0C274 85 27                             STA screen_mode
0C276                           
0C276                               +continue:
0C276                           
0C276                           
0C276                           
0C276                               ;; Sprite clean-up
0C276 A6 2C                         LDX sprite_ram_pointer
0C278 A9 EF                         LDA #$EF
0C27A                               -
0C27A 9D 00 02                          STA ADDR_SPRITERAM,x
0C27D E8                                INX
0C27E D0 FA                         BNE -
0C280 4C 57 C0                      JMP MainGameLoop
0C283                           
0C283                           ;; Subroutines
0C283                           .include "include/subroutines.asm"
0C283                           
0C283                           ;; RNG
0C283                           .include "subroutine/GetRandomNumber.asm"
0C283                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C283                           ;;
0C283                           ;; subroutine/GetRandomNumber.asm
0C283                           ;;
0C283                           ;; Simple and fast random number generator by White Flame.
0C283                           ;;
0C283                           ;; Set random_seed to an arbitrary number to randomize between
0C283                           ;; gaming sessions, for instance using the frame counter upon
0C283                           ;; pressing START on the intro screen.
0C283                           ;;
0C283                           ;;     ;; IF START PRESSED:
0C283                           ;;     LDA frame_counter
0C283                           ;;     STA random_seed
0C283                           ;;
0C283                           ;; Source:
0C283                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C283                           ;;
0C283                           ;;
0C283                           
0C283                           sub_GetRandomNumber:
0C283                               ;; Force EOR if random_seed is zero
0C283 A5 16                         LDA random_seed
0C285 F0 05                         BEQ +doEor
0C287                           
0C287                               ;; Shift left, and EOR if the high bit is set
0C287 0A                            ASL
0C288 F0 04                         BEQ +noEor
0C28A 90 02                         BCC +noEor
0C28C                           
0C28C                           +doEor:
0C28C 49 1D                         EOR #$1D
0C28E                           
0C28E                           +noEor:
0C28E 85 16                         STA random_seed
0C290                           
0C290 60                            RTS
0C291                           
0C291                           
0C291                           ;; Read controller input
0C291                           .include "subroutine/ReadController.asm"
0C291                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C291                           ;;
0C291                           ;; subroutine/ReadController.asm
0C291                           ;;
0C291                           ;; Subroutine that polls the controller and stores the input
0C291                           ;; buttons in a variable. This version only handles controller
0C291                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C291                           ;;
0C291                           ;;
0C291                           
0C291                           sub_ReadController:
0C291                           
0C291                               ;; Set strobe bit
0C291 A9 01                         LDA #$01
0C293 8D 16 40                      STA JOYPAD_1
0C296                           
0C296                               ;; Set up ring counter
0C296 85 0F                         STA buttons_held
0C298                           
0C298                               ;; Clear strobe bit
0C298 4A                            LSR
0C299 8D 16 40                      STA JOYPAD_1
0C29C                           
0C29C                               ;; Loop through button presses
0C29C                               -
0C29C AD 16 40                          LDA JOYPAD_1
0C29F 4A                                LSR
0C2A0 26 0F                             ROL buttons_held
0C2A2                           
0C2A2                               ;; Check if ring counter is done
0C2A2 90 F8                         BCC -
0C2A4                           
0C2A4                               ;; Return from subroutine
0C2A4 60                            RTS
0C2A5                           
0C2A5                           
0C2A5                           ;; vBlank wait
0C2A5                           .include "subroutine/WaitForVBlank.asm"
0C2A5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C2A5                           ;;
0C2A5                           ;; subroutine/WaitForVBlank.asm
0C2A5                           ;;
0C2A5                           ;; Subroutine that essentially pauses script execution until
0C2A5                           ;; vBlank happens.
0C2A5                           ;;
0C2A5                           ;;
0C2A5                           
0C2A5                           sub_WaitForVBlank:
0C2A5 2C 02 20                      BIT $2002
0C2A8 10 FB                         BPL sub_WaitForVBlank
0C2AA 60                            RTS
0C2AB                           
0C2AB                           
0C2AB                           ;; Game specific subroutines
0C2AB                           .include "game/include/subroutines.asm"
0C2AB                           ;; additional game-specific subroutines go here
0C2AB                           
0C2AB                           .include "game/subroutine/ClearScreen.asm"
0C2AB                           ;; Subroutine to clear the screen
0C2AB                           ;; If it's a game screen, add noise
0C2AB                           
0C2AB                           sub_ClearScreen:
0C2AB                               ;; Check of game screen or not
0C2AB A5 27                         LDA screen_mode
0C2AD 29 03                         AND #CHECK_SCREEN_MODE
0C2AF C9 01                         CMP #IS_GAME_SCREEN
0C2B1 F0 02                         BEQ +
0C2B3 A9 00                             LDA #$00
0C2B5                               +
0C2B5 85 01                         STA temp+1
0C2B7                               
0C2B7                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C2B7 2C 02 20                      BIT PPU_STATUS
0C2BA A9 20                         LDA #$20
0C2BC 8D 06 20                      STA PPU_ADDR
0C2BF A9 00                         LDA #$00
0C2C1 8D 06 20                      STA PPU_ADDR
0C2C4                               
0C2C4                               ;; Set up tile to draw and loop
0C2C4 85 00                         STA temp
0C2C6 AA                            TAX
0C2C7 A8                            TAY
0C2C8                           
0C2C8                               -     
0C2C8                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C2C8 A5 00                             LDA temp
0C2CA 8D 07 20                          STA PPU_DATA
0C2CD                           
0C2CD                                   ;; Check if we should draw noise next. Noise is drawn if:
0C2CD                                   ;; - Screen mode is game screen
0C2CD                                   ;; - Y between #$06 and #$19 (inclusive)
0C2CD                                   ;; - X between #$02 and #$1D (inclusive)
0C2CD                                   
0C2CD                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C2CD A5 01                             LDA temp+1
0C2CF F0 1C                             BEQ +nextTileInRow
0C2D1                                   
0C2D1                                   ;; If Y < $6, skip the check
0C2D1 C0 06                             CPY #$06
0C2D3 90 18                             BCC +nextTileInRow
0C2D5                                   
0C2D5                                   ;; If X < $1, skip the check
0C2D5 E0 01                             CPX #$01
0C2D7 90 14                             BCC +nextTileInRow
0C2D9                                   
0C2D9                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C2D9 E0 1D                             CPX #$1D
0C2DB D0 04                             BNE +
0C2DD A9 00                                 LDA #$00
0C2DF 85 00                                 STA temp
0C2E1                                   +
0C2E1 B0 0A                             BCS +nextTileInRow
0C2E3                                   
0C2E3                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C2E3 20 83 C2                          JSR sub_GetRandomNumber
0C2E6 29 07                             AND #%00000111
0C2E8 18                                CLC
0C2E9 69 68                             ADC #$68
0C2EB 85 00                             STA temp
0C2ED                           
0C2ED                           +nextTileInRow:
0C2ED                                   
0C2ED                                   ;; Check if a row has been done. If not, draw the next
0C2ED E8                                INX
0C2EE E0 20                             CPX #$20
0C2F0 D0 D6                             BNE -
0C2F2                                   
0C2F2                                   ;; Go to the next row (if any left)
0C2F2 A2 00                             LDX #00
0C2F4 C8                                INY
0C2F5                                   
0C2F5                                   ;; If Y is 1A, skip noise tile check until done drawing
0C2F5 C0 1A                             CPY #$1A
0C2F7 D0 04                             BNE +
0C2F9 A9 00                                 LDA #$00
0C2FB 85 01                                 STA temp+1
0C2FD                                   +
0C2FD                                   
0C2FD C0 1E                             CPY #$1E
0C2FF D0 C7                         BNE -
0C301                           
0C301                               ;; Clear attribute table
0C301 A9 23                         LDA #$23
0C303 8D 06 20                      STA PPU_ADDR
0C306 A9 C0                         LDA #$C0
0C308 8D 06 20                      STA PPU_ADDR
0C30B A9 00                         LDA #$00
0C30D A2 40                         LDX #$40
0C30F                               -
0C30F 8D 07 20                          STA PPU_DATA
0C312 CA                                DEX
0C313 D0 FA                         BNE -
0C315                               
0C315 60                            RTS0C316                           .include "game/subroutine/ColorizeBall.asm"
0C316                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C316                           ;;
0C316                           ;;  Subroutine: ColorizeBall
0C316                           ;;
0C316                           ;;  Applies the color set through ball_flags to the ball sprite.
0C316                           ;;
0C316                           ;;
0C316                           
0C316                           
0C316                           sub_ColorizeBall:
0C316                           
0C316                               ;; Get color from ball_flags
0C316 4A                            LSR
0C317 4A                            LSR
0C318 4A                            LSR
0C319 4A                            LSR
0C31A 4A                            LSR
0C31B AA                            TAX
0C31C                           
0C31C                               ;; Add new light color of ball to PPU palette
0C31C A9 3F                         LDA #$3F
0C31E 85 00                         STA temp
0C320 A9 11                         LDA #$11
0C322 85 01                         STA temp+1
0C324 BD FB C8                      LDA tbl_BallColorLight,x
0C327 85 02                         STA temp+2
0C329 20 97 C7                      JSR sub_WriteByteToPPUBuffer
0C32C                               
0C32C                               ;; Add new dark color of ball to PPU palette
0C32C E6 01                         INC temp+1
0C32E BD F5 C8                      LDA tbl_BallColorDark,x
0C331 85 02                         STA temp+2
0C333 20 97 C7                      JSR sub_WriteByteToPPUBuffer
0C336                               
0C336 60                            RTS
0C337                           
0C337                           .include "game/subroutine/DisableEnableRendering.asm"
0C337                           sub_DisableRendering:
0C337                               ;; Force NMI skip, disable rendering
0C337 A9 01                     	LDA #$01
0C339 85 14                     	STA force_skip_nmi
0C33B 20 A5 C2                      JSR sub_WaitForVBlank
0C33E A5 12                         LDA soft_ppu_mask
0C340 29 E7                         AND #%11100111
0C342 8D 01 20                      STA PPU_MASK
0C345 85 12                         STA soft_ppu_mask
0C347 20 A5 C2                      JSR sub_WaitForVBlank
0C34A 60                            RTS
0C34B                           
0C34B                           sub_EnableRendering:
0C34B                               ;; Enable rendering
0C34B A9 00                     	LDA #$00
0C34D 8D 05 20                  	STA PPU_SCROLL
0C350 8D 05 20                  	STA PPU_SCROLL
0C353 20 A5 C2                      JSR sub_WaitForVBlank
0C356 85 14                     	STA force_skip_nmi
0C358 A5 12                         LDA soft_ppu_mask
0C35A 09 18                         ORA #%00011000
0C35C 85 12                         STA soft_ppu_mask
0C35E 8D 01 20                      STA PPU_MASK
0C361 20 A5 C2                      JSR sub_WaitForVBlank
0C364 60                            RTS
0C365                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C365                           sub_drawIntroScreenLogoTile:
0C365 B9 DD C7                      LDA tbl_IntroScreenLogoChr,y
0C368 C9 60                         CMP #$60
0C36A D0 08                         BNE +
0C36C 20 83 C2                          JSR sub_GetRandomNumber
0C36F 29 07                             AND #$07
0C371 18                                CLC
0C372 69 60                             ADC #$60
0C374                               +
0C374 8D 07 20                      STA PPU_DATA
0C377 60                            RTS
0C378                           .include "game/subroutine/JumpToPointer.asm"
0C378                           sub_JumpToPointer:
0C378 6C 0C 00                      JMP (pointer)
0C37B                               ;RTS must be handled by the routine (pointer) jumps to
0C37B                           .include "game/subroutine/LoadGameScreen.asm"
0C37B                           sub_LoadGameScreen:
0C37B                           
0C37B                               ;; Clear the screen
0C37B 20 AB C2                      JSR sub_ClearScreen
0C37E                               
0C37E                               ;; Clear collision and attribute data
0C37E A2 00                         LDX #$00
0C380 8A                            TXA
0C381                               -
0C381 9D 00 04                          STA tile_type,x
0C384 E8                                INX
0C385 D0 FA                         BNE -
0C387                               
0C387                               ;; Get pointer from current level
0C387 A6 2E                         LDX current_level
0C389 BD DD CD                      LDA tbl_lvl_layout_lo,x
0C38C 85 0C                         STA pointer
0C38E BD C4 CD                      LDA tbl_lvl_layout_hi,x
0C391 85 0D                         STA pointer+1
0C393                           
0C393                               ;; Set up the loop
0C393 A0 00                         LDY #$00
0C395                           -drawRowColumnLoop:
0C395                           
0C395                               ;; Load (x,y) of current set of tiles
0C395 B1 0C                         LDA (pointer),y
0C397                           
0C397                               ;; Check if level is done; if so, skip the loop
0C397 C9 FF                         CMP #LEVEL_END
0C399 D0 03                         BNE +
0C39B 4C E4 C4                          JMP +doneLevelLoad
0C39E                               +
0C39E                           
0C39E                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C39E 85 00                         STA temp
0C3A0 C8                            INY
0C3A1 B1 0C                         LDA (pointer),y
0C3A3 85 01                         STA temp+1
0C3A5                               
0C3A5                               ;; Convert (x,y) to PPU address
0C3A5                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C3A5 A5 00                         LDA temp
0C3A7 29 0F                         AND #%00001111
0C3A9 4A                            LSR
0C3AA 4A                            LSR
0C3AB 09 20                         ORA #$20
0C3AD 85 02                         STA temp+2
0C3AF                               
0C3AF                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C3AF A5 00                         LDA temp
0C3B1 29 F0                         AND #%11110000
0C3B3 4A                            LSR
0C3B4 4A                            LSR
0C3B5 4A                            LSR
0C3B6 85 03                         STA temp+3
0C3B8                               
0C3B8 A5 00                         LDA temp
0C3BA 29 03                         AND #%00000011
0C3BC AA                            TAX
0C3BD BD 28 CE                      LDA tbl_Times64,x
0C3C0 18                            CLC
0C3C1 65 03                         ADC temp+3
0C3C3 18                            CLC
0C3C4 69 C2                         ADC #$C2
0C3C6 85 03                         STA temp+3
0C3C8                               
0C3C8                               ;; Add carry to temp+2
0C3C8 A5 02                         LDA temp+2
0C3CA 69 00                         ADC #$00
0C3CC 85 02                         STA temp+2
0C3CE                           
0C3CE                               ;; Convert tile data to loop count and tile type
0C3CE                               ;; temp+4 = color
0C3CE A5 01                         LDA temp+1
0C3D0 29 07                         AND #%00000111
0C3D2 85 04                         STA temp+4
0C3D4                               
0C3D4                               ;; If color = 7, this is a wall
0C3D4 C9 07                         CMP #%00000111
0C3D6 F0 12                         BEQ +wallHack
0C3D8                                   
0C3D8                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C3D8 29 01                             AND #%00000001
0C3DA F0 02                             BEQ +
0C3DC A9 05                                 LDA #$05
0C3DE                                   +
0C3DE 85 07                             STA temp+7
0C3E0                                
0C3E0                                   ;; temp+5 = tile type
0C3E0 A5 01                             LDA temp+1
0C3E2 4A                                LSR
0C3E3 4A                                LSR
0C3E4 4A                                LSR
0C3E5 29 03                             AND #%00000011
0C3E7 4C F0 C3                          JMP +setTileType
0C3EA                               +wallHack:
0C3EA                               
0C3EA                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C3EA A9 00                         LDA #$00
0C3EC 85 07                         STA temp+7
0C3EE A9 04                         LDA #$04
0C3F0                           
0C3F0                           +setTileType:    
0C3F0 85 05                         STA temp+5
0C3F2                               
0C3F2                               ;; X = tile offset
0C3F2 18                            CLC
0C3F3 65 07                         ADC temp+7
0C3F5 AA                            TAX
0C3F6                               
0C3F6                               ;; temp+6 = number of tiles
0C3F6 A5 01                         LDA temp+1
0C3F8 29 60                         AND #%01100000
0C3FA 4A                            LSR
0C3FB 4A                            LSR
0C3FC 4A                            LSR
0C3FD 4A                            LSR
0C3FE 4A                            LSR
0C3FF 85 06                         STA temp+6
0C401                               
0C401                               ;; Translate (x,y) to (y,x) for tile RAM
0C401 A5 00                         LDA temp
0C403 0A                            ASL
0C404 0A                            ASL
0C405 0A                            ASL
0C406 0A                            ASL
0C407 85 08                         STA temp+8
0C409 A5 00                         LDA temp
0C40B 4A                            LSR
0C40C 4A                            LSR
0C40D 4A                            LSR
0C40E 4A                            LSR
0C40F 05 08                         ORA temp+8
0C411 85 00                         STA temp
0C413                               
0C413                               ;; Set up loop
0C413 98                            TYA
0C414 48                            PHA
0C415 A4 06                         LDY temp+6
0C417                           
0C417                               -drawTileLoop:
0C417                                   ;; Write PPU address
0C417 2C 02 20                          BIT PPU_STATUS
0C41A A5 02                             LDA temp+2
0C41C 8D 06 20                          STA PPU_ADDR
0C41F A5 03                             LDA temp+3
0C421 8D 06 20                          STA PPU_ADDR
0C424                                   
0C424                                   ;; Write first and second tile
0C424 BD 2C CE                          LDA tbl_GametileTopLeft,x
0C427 8D 07 20                          STA PPU_DATA
0C42A BD 36 CE                          LDA tbl_GametileTopRight,x
0C42D 8D 07 20                          STA PPU_DATA
0C430                                   
0C430                                   ;; Update PPU address
0C430 2C 02 20                          BIT PPU_STATUS
0C433 A5 02                             LDA temp+2
0C435 8D 06 20                          STA PPU_ADDR
0C438 A5 03                             LDA temp+3
0C43A 18                                CLC
0C43B 69 20                             ADC #$20
0C43D 8D 06 20                          STA PPU_ADDR
0C440                                   
0C440                                   ;; Write third and fourth tile
0C440 BD 40 CE                          LDA tbl_GametileBottomLeft,x
0C443 8D 07 20                          STA PPU_DATA
0C446 BD 4A CE                          LDA tbl_GametileBottomRight,x
0C449 8D 07 20                          STA PPU_DATA
0C44C                           
0C44C                                   ;; Push x-register to stack
0C44C 8A                                TXA
0C44D 48                                PHA
0C44E                                   
0C44E                                   ;; Update tile RAM (aka collision table)
0C44E A6 05                             LDX temp+5
0C450 BD 54 CE                          LDA tbl_GameTileRamByte,x
0C453 05 04                             ORA temp+4
0C455 0A                                ASL
0C456 09 01                             ORA #%00000001
0C458 A6 00                             LDX temp
0C45A 9D 00 04                          STA tile_type,x
0C45D                           
0C45D                                   ;; Check if shade 1 should be drawn
0C45D E8                                INX
0C45E BD 00 04                          LDA tile_type,x
0C461 D0 05                             BNE +
0C463 A9 00                                 LDA #$00
0C465 8D 07 20                              STA PPU_DATA
0C468                                   +
0C468                                   
0C468                                   ;; Check if shade 2 should be drawn
0C468 A5 03                             LDA temp+3
0C46A 18                                CLC
0C46B 69 41                             ADC #$41
0C46D 85 03                             STA temp+3
0C46F A5 02                             LDA temp+2
0C471 69 00                             ADC #$00
0C473 85 02                             STA temp+2
0C475                                   
0C475 8A                                TXA
0C476 18                                CLC
0C477 69 0F                             ADC #$0F
0C479 AA                                TAX
0C47A                                   
0C47A BD 00 04                          LDA tile_type,x
0C47D D0 0F                             BNE +
0C47F A5 02                                 LDA temp+2
0C481 8D 06 20                              STA PPU_ADDR
0C484 A5 03                                 LDA temp+3
0C486 8D 06 20                              STA PPU_ADDR
0C489 A9 00                                 LDA #$00
0C48B 8D 07 20                              STA PPU_DATA
0C48E                                   +
0C48E                           
0C48E                                   ;; Check if shade 3 should be drawn
0C48E E8                                INX
0C48F E6 03                             INC temp+3
0C491 BD 00 04                          LDA tile_type,x
0C494 D0 0F                             BNE +
0C496 A5 02                                 LDA temp+2
0C498 8D 06 20                              STA PPU_ADDR
0C49B A5 03                                 LDA temp+3
0C49D 8D 06 20                              STA PPU_ADDR
0C4A0 A9 00                                 LDA #$00
0C4A2 8D 07 20                              STA PPU_DATA
0C4A5                                   +
0C4A5                                   
0C4A5                                   ;; Restore x-register from stack
0C4A5 68                                PLA
0C4A6 AA                                TAX
0C4A7                                   
0C4A7                                   ;; Reset pointer for next tile
0C4A7 A5 03                             LDA temp+3
0C4A9 38                                SEC
0C4AA E9 42                             SBC #$42
0C4AC 85 03                             STA temp+3
0C4AE A5 02                             LDA temp+2
0C4B0 E9 00                             SBC #$00
0C4B2 85 02                             STA temp+2
0C4B4                                   
0C4B4                                   ;; Draw next metatile in this loop (if any left)
0C4B4 88                                DEY
0C4B5 30 27                             BMI +doneDrawingRowColumn
0C4B7                                   
0C4B7                                   ;; Is it a row or a column?
0C4B7 A5 01                             LDA temp+1
0C4B9 10 17                             BPL +
0C4BB                                       ;; It is a column: move pointer down (+$40)
0C4BB A5 03                                 LDA temp+3
0C4BD 18                                    CLC
0C4BE 69 40                                 ADC #$40
0C4C0 85 03                                 STA temp+3
0C4C2 A5 02                                 LDA temp+2
0C4C4 69 00                                 ADC #$00
0C4C6 85 02                                 STA temp+2
0C4C8                                       
0C4C8                                       ;; Add 16 to temp (as a tile RAM pointer)
0C4C8 A5 00                                 LDA temp
0C4CA 18                                    CLC
0C4CB 69 10                                 ADC #$10
0C4CD 85 00                                 STA temp
0C4CF 4C DB C4                              JMP +drawNextTile
0C4D2                                   +
0C4D2                                   
0C4D2                                   ;; It is a row: move pointer right (+$02)
0C4D2 A5 03                             LDA temp+3
0C4D4 18                                CLC
0C4D5 69 02                             ADC #$02
0C4D7 85 03                             STA temp+3
0C4D9                                   
0C4D9                                   ;; Add 1 to temp (as a tile RAM pointer)
0C4D9 E6 00                             INC temp
0C4DB                           
0C4DB                               
0C4DB                               ;; Next tile in the row/column
0C4DB                                   +drawNextTile:
0C4DB 4C 17 C4                      JMP -drawTileLoop
0C4DE                           
0C4DE                               ;; Go to the next set of tiles
0C4DE                           +doneDrawingRowColumn:
0C4DE 68                            PLA
0C4DF A8                            TAY
0C4E0 C8                            INY
0C4E1 4C 95 C3                      JMP -drawRowColumnLoop
0C4E4                           
0C4E4                           ;; Level loading is done
0C4E4                           +doneLevelLoad:
0C4E4                           
0C4E4                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C4E4 A9 20                         LDA #$20
0C4E6 8D 06 20                      STA PPU_ADDR
0C4E9 A9 A2                         LDA #$A2
0C4EB 8D 06 20                      STA PPU_ADDR
0C4EE A9 35                         LDA #$35
0C4F0 20 FE C6                      JSR sub_Draw28HorizontalTiles
0C4F3                           
0C4F3                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C4F3 A9 23                         LDA #$23
0C4F5 8D 06 20                      STA PPU_ADDR
0C4F8 A9 42                         LDA #$42
0C4FA 8D 06 20                      STA PPU_ADDR
0C4FD A9 31                         LDA #$31
0C4FF 20 FE C6                      JSR sub_Draw28HorizontalTiles
0C502                           
0C502                               ;; Left & right game bounds
0C502                               ;; Set PPU_ADDR and store in temp variables
0C502 A9 20                         LDA #$20
0C504 85 00                         STA temp
0C506 8D 06 20                      STA PPU_ADDR
0C509 A9 C1                         LDA #$C1
0C50B 85 01                         STA temp+1
0C50D 8D 06 20                      STA PPU_ADDR
0C510                               
0C510                               ;; Set vertical bound tile and set up loop
0C510 A0 33                         LDY #$33
0C512 A2 14                         LDX #20
0C514                               -
0C514                                   ;; Show left tile
0C514 8C 07 20                          STY PPU_DATA
0C517                                   
0C517                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C517 A5 00                             LDA temp
0C519 8D 06 20                          STA PPU_ADDR
0C51C A5 01                             LDA temp+1
0C51E 18                                CLC
0C51F 69 1D                             ADC #29
0C521 85 01                             STA temp+1
0C523 8D 06 20                          STA PPU_ADDR
0C526                           
0C526                                   ;; Show right tile
0C526 8C 07 20                          STY PPU_DATA
0C529                           
0C529                                   ;; Check if we're done yet
0C529 CA                                DEX
0C52A F0 18                             BEQ +drawCorners
0C52C                                   
0C52C                                   ;; Not done yet: add 3 to low byte for next left bound
0C52C A5 01                             LDA temp+1
0C52E 18                                CLC
0C52F 69 03                             ADC #3
0C531 85 01                             STA temp+1
0C533                                   
0C533                                   ;; Apply carry to high byte
0C533 A5 00                             LDA temp
0C535 69 00                             ADC #$00
0C537 85 00                             STA temp
0C539                                   
0C539                                   ;; Store next PPU_ADDR to draw at
0C539 8D 06 20                          STA PPU_ADDR
0C53C A5 01                             LDA temp+1
0C53E 8D 06 20                          STA PPU_ADDR
0C541 4C 14 C5                      JMP -
0C544                               
0C544                               
0C544                           
0C544                           +drawCorners:
0C544                               ;; Draw the corners of the playing field
0C544 A9 20                         LDA #$20
0C546 8D 06 20                      STA PPU_ADDR
0C549 A9 A1                         LDA #$A1
0C54B 8D 06 20                      STA PPU_ADDR
0C54E A9 39                         LDA #$39
0C550 8D 07 20                      STA PPU_DATA
0C553                           
0C553 A9 20                         LDA #$20
0C555 8D 06 20                      STA PPU_ADDR
0C558 A9 BE                         LDA #$BE
0C55A 8D 06 20                      STA PPU_ADDR
0C55D A9 3A                         LDA #$3A
0C55F 8D 07 20                      STA PPU_DATA
0C562                           
0C562 A9 23                         LDA #$23
0C564 8D 06 20                      STA PPU_ADDR
0C567 A9 41                         LDA #$41
0C569 8D 06 20                      STA PPU_ADDR
0C56C A9 36                         LDA #$36
0C56E 8D 07 20                      STA PPU_DATA
0C571                           
0C571 A9 23                         LDA #$23
0C573 8D 06 20                      STA PPU_ADDR
0C576 A9 5E                         LDA #$5E
0C578 8D 06 20                      STA PPU_ADDR
0C57B A9 34                         LDA #$34
0C57D 8D 07 20                      STA PPU_DATA
0C580                           
0C580                           
0C580                               ;; Draw the hud labels
0C580 A9 20                         LDA #$20
0C582 8D 06 20                      STA PPU_ADDR
0C585 A9 62                         LDA #$62
0C587 8D 06 20                      STA PPU_ADDR
0C58A A2 00                         LDX #$00
0C58C                               -
0C58C BD 59 CE                          LDA tbl_HudText,x
0C58F 8D 07 20                          STA PPU_DATA
0C592 E8                                INX
0C593 E0 1C                             CPX #28
0C595 D0 F5                         BNE -
0C597                           
0C597                           
0C597                               ;; Draw the current score
0C597 A9 20                         LDA #$20
0C599 8D 06 20                      STA PPU_ADDR
0C59C A9 83                         LDA #$83
0C59E 8D 06 20                      STA PPU_ADDR
0C5A1 A2 00                         LDX #$00
0C5A3                               -
0C5A3 B5 1C                             LDA ball_score,x
0C5A5 18                                CLC
0C5A6 69 01                             ADC #$01
0C5A8 8D 07 20                          STA PPU_DATA
0C5AB E8                                INX
0C5AC E0 06                             CPX #$06
0C5AE D0 F3                         BNE -
0C5B0                           
0C5B0                           
0C5B0                               ;; Draw the level number
0C5B0                               ;; (with primitive HEX>DEC)
0C5B0 A5 2E                         LDA current_level
0C5B2 18                            CLC
0C5B3 69 01                         ADC #$01
0C5B5 85 01                         STA temp+1
0C5B7                               
0C5B7 C9 14                         CMP #20
0C5B9 B0 13                         BCS +tempIsTwo
0C5BB                               
0C5BB C9 0A                         CMP #10
0C5BD B0 05                         BCS +tempIsOne
0C5BF                               
0C5BF A9 00                         LDA #$00
0C5C1 4C D5 C5                      JMP +setTemp
0C5C4                               
0C5C4                           +tempIsOne:
0C5C4 38                            SEC
0C5C5 E9 0A                         SBC #10
0C5C7 85 01                         STA temp+1
0C5C9 A9 01                         LDA #$01
0C5CB 4C D5 C5                      JMP +setTemp
0C5CE                               
0C5CE                           +tempIsTwo:
0C5CE 38                            SEC
0C5CF E9 14                         SBC #20
0C5D1 85 01                         STA temp+1
0C5D3 A9 02                         LDA #$02
0C5D5                           
0C5D5                           +setTemp:
0C5D5 85 00                         STA temp
0C5D7                               
0C5D7 E6 00                         INC temp
0C5D9 E6 01                         INC temp+1
0C5DB                               
0C5DB A9 20                         LDA #$20
0C5DD 8D 06 20                      STA PPU_ADDR
0C5E0 A9 8B                         LDA #$8B
0C5E2 8D 06 20                      STA PPU_ADDR
0C5E5 A5 00                         LDA temp
0C5E7 8D 07 20                      STA PPU_DATA
0C5EA A5 01                         LDA temp+1
0C5EC 8D 07 20                      STA PPU_DATA
0C5EF                           
0C5EF                           
0C5EF                               ;; Draw lives (presumes lives to be capped at 9)
0C5EF A9 20                         LDA #$20
0C5F1 8D 06 20                      STA PPU_ADDR
0C5F4 A9 92                         LDA #$92
0C5F6 8D 06 20                      STA PPU_ADDR
0C5F9 A6 1B                         LDX ball_lives
0C5FB E8                            INX
0C5FC 8E 07 20                      STX PPU_DATA
0C5FF                           
0C5FF                           
0C5FF                               ;; Set and draw bonus
0C5FF A9 07                         LDA #$07
0C601 85 22                         STA ball_bonus
0C603 A9 09                         LDA #$09
0C605 85 23                         STA ball_bonus+1
0C607 85 24                         STA ball_bonus+2
0C609                               
0C609 A9 20                         LDA #$20
0C60B 8D 06 20                      STA PPU_ADDR
0C60E A9 9A                         LDA #$9A
0C610 8D 06 20                      STA PPU_ADDR
0C613 A2 00                         LDX #$00
0C615                               -
0C615 B5 22                             LDA ball_bonus,x
0C617 18                                CLC
0C618 69 01                             ADC #$01
0C61A 8D 07 20                          STA PPU_DATA
0C61D E8                                INX
0C61E E0 03                             CPX #$03
0C620 D0 F3                         BNE -
0C622                           
0C622                           
0C622                               ;; Set attribute data to RAM
0C622                               
0C622                               ;; Byte 0-7 of attribute ram should be #%10100000
0C622 A2 00                         LDX #$00
0C624 A9 A0                         LDA #$A0
0C626                               -
0C626 9D A0 04                          STA tile_attributes,x
0C629 E8                                INX
0C62A E0 08                             CPX #$08
0C62C D0 F8                         BNE -
0C62E                           
0C62E                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C62E                           
0C62E                           -attributeLoop:
0C62E                               ;; Reset current attribute value
0C62E A9 00                         LDA #$00
0C630 85 02                         STA temp+2
0C632                           
0C632                               ;; Get first metatile in tile ram based on attribute index
0C632                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C632 8A                            TXA
0C633                           
0C633 38                            SEC
0C634 E9 08                         SBC #$08
0C636 85 01                         STA temp+1      ; attr - 8 (temp1)
0C638 0A                            ASL             ; * 2
0C639 85 00                         STA temp        ; temp = temp1 * 2
0C63B                           
0C63B A5 01                         LDA temp+1      ; temp1
0C63D 29 F8                         AND #%11111000  ; rounded down to 8's
0C63F 0A                            ASL             ; * 2
0C640 18                            CLC
0C641 65 00                         ADC temp        ; + temp1 * 2
0C643 85 00                         STA temp        ; first metatile
0C645                           
0C645                               ;; Store first metatile in y-register
0C645 A8                            TAY
0C646                           
0C646                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C646 8A                            TXA
0C647 29 07                         AND #%00000111
0C649 C9 07                         CMP #%00000111
0C64B F0 0B                         BEQ +
0C64D                           
0C64D                               ;; If X >= $30, don't apply bottom right metatile
0C64D E0 30                         CPX #$30
0C64F B0 07                         BCS +
0C651                               
0C651                               ;; Add metatile1 subpalette to attribute value
0C651 B9 00 04                      LDA tile_type,y
0C654 29 0C                         AND #%00001100
0C656 85 02                         STA temp+2
0C658                               +
0C658                           
0C658                           
0C658                               ;; Apply second metatile
0C658 88                            DEY
0C659                           
0C659                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C659 8A                            TXA
0C65A 29 07                         AND #%00000111
0C65C F0 10                         BEQ +
0C65E                           
0C65E                               ;; If X >= $30, don't apply bottom left metatile
0C65E E0 30                         CPX #$30
0C660 B0 0C                         BCS +
0C662                           
0C662                           
0C662                           
0C662                               ;; Add metatile2 subpalette to attribute value
0C662 B9 00 04                      LDA tile_type,y
0C665 29 0C                         AND #%00001100
0C667 4A                            LSR
0C668 4A                            LSR
0C669 05 02                         ORA temp+2
0C66B 4C 70 C6                      JMP ++
0C66E                               +
0C66E A5 02                         LDA temp+2
0C670                               ++
0C670 0A                            ASL
0C671 0A                            ASL
0C672 85 02                         STA temp+2
0C674                           
0C674                           
0C674                               ;; Apply third metatile
0C674 98                            TYA
0C675 38                            SEC
0C676 E9 0F                         SBC #$0F
0C678 A8                            TAY
0C679                           
0C679                               ;; If X MOD 8 == 7, don't apply top right metatile
0C679 8A                            TXA
0C67A 29 07                         AND #%00000111
0C67C C9 07                         CMP #%00000111
0C67E F0 11                         BEQ +
0C680                           
0C680                               ;; If X < $10, don't apply top right metatile
0C680 8A                            TXA
0C681 29 F0                         AND #%11110000
0C683 F0 0C                         BEQ +
0C685                           
0C685                               ;; Add metatile3 subpalette to attribute value
0C685 B9 00 04                      LDA tile_type,y
0C688 29 0C                         AND #%00001100
0C68A 4A                            LSR
0C68B 4A                            LSR
0C68C 05 02                         ORA temp+2
0C68E 4C 93 C6                      JMP ++
0C691                               +
0C691 A5 02                         LDA temp+2
0C693                               ++
0C693 0A                            ASL
0C694 0A                            ASL
0C695 85 02                         STA temp+2
0C697                           
0C697                           
0C697                               ;; Apply fourth metatile
0C697 88                            DEY
0C698                           
0C698                               ;; If X MOD 8 == 0, don't apply top left metatile
0C698 8A                            TXA
0C699 29 07                         AND #%00000111
0C69B F0 11                         BEQ +
0C69D                           
0C69D                               ;; If X < $10, don't apply top left metatile
0C69D 8A                            TXA
0C69E 29 F0                         AND #%11110000
0C6A0 F0 0C                         BEQ +
0C6A2                           
0C6A2                               ;; Add metatile4 subpalette to attribute value
0C6A2 B9 00 04                      LDA tile_type,y
0C6A5 29 0C                         AND #%00001100
0C6A7 4A                            LSR
0C6A8 4A                            LSR
0C6A9 05 02                         ORA temp+2
0C6AB 4C B0 C6                      JMP ++
0C6AE                               +
0C6AE A5 02                         LDA temp+2
0C6B0                               ++
0C6B0 9D A0 04                      STA tile_attributes,x
0C6B3                           
0C6B3                               ;; Check the next attribute, if any left
0C6B3 E8                            INX
0C6B4 E0 38                         CPX #$38
0C6B6 F0 03                         BEQ +
0C6B8 4C 2E C6                          JMP -attributeLoop
0C6BB                               +
0C6BB                           
0C6BB                               ;; Stream attribute RAM to PPU
0C6BB 2C 02 20                      BIT PPU_STATUS
0C6BE A9 23                         LDA #$23
0C6C0 8D 06 20                      STA PPU_ADDR
0C6C3 A9 C0                         LDA #$C0
0C6C5 8D 06 20                      STA PPU_ADDR
0C6C8 A2 00                         LDX #$00
0C6CA                               -
0C6CA BD A0 04                          LDA tile_attributes,x
0C6CD 8D 07 20                          STA PPU_DATA
0C6D0 E8                                INX
0C6D1 E0 40                             CPX #$40
0C6D3 D0 F5                         BNE -
0C6D5                           
0C6D5                               ;; Set initial ball position
0C6D5 A6 2E                         LDX current_level
0C6D7 BD F6 CD                      LDA tbl_lvl_ball_startpos,x
0C6DA 29 F0                         AND #%11110000
0C6DC 18                            CLC
0C6DD 69 34                         ADC #$34
0C6DF 85 19                         STA ball_ypos_hi
0C6E1 BD F6 CD                      LDA tbl_lvl_ball_startpos,x
0C6E4 0A                            ASL
0C6E5 0A                            ASL
0C6E6 0A                            ASL
0C6E7 0A                            ASL
0C6E8 18                            CLC
0C6E9 69 14                         ADC #$14
0C6EB 85 17                         STA ball_xpos_hi
0C6ED A9 00                         LDA #$00
0C6EF 85 18                         STA ball_xpos_lo
0C6F1 85 1A                         STA ball_ypos_lo
0C6F3                               
0C6F3                               ;; Set initial ball color and direction
0C6F3 BD 0F CE                      LDA tbl_lvl_ball_init,x
0C6F6 29 F0                         AND #%11110000
0C6F8 85 26                         STA ball_flags
0C6FA 20 16 C3                      JSR sub_ColorizeBall
0C6FD                               
0C6FD                               ;; Return
0C6FD 60                            RTS
0C6FE                           
0C6FE                           
0C6FE                           ;; Subroutine: draw 28 tiles in a row
0C6FE                           sub_Draw28HorizontalTiles:
0C6FE A2 1C                         LDX #28
0C700                               -
0C700 8D 07 20                          STA PPU_DATA
0C703 CA                                DEX
0C704 D0 FA                         BNE -
0C706 60                            RTS0C707                           .include "game/subroutine/LoadIntroScreen.asm"
0C707                           sub_LoadIntroScreen:
0C707                           
0C707                               ;; Load intro palette
0C707 2C 02 20                      BIT PPU_STATUS
0C70A A9 3F                         LDA #$3F
0C70C 8D 06 20                      STA PPU_ADDR
0C70F A9 00                         LDA #$00
0C711 8D 06 20                      STA PPU_ADDR
0C714 A2 00                         LDX #$00
0C716                               -
0C716 BD BD C7                          LDA tbl_IntroScreenPalette,x
0C719 8D 07 20                          STA PPU_DATA
0C71C E8                                INX
0C71D E0 20                             CPX #$20
0C71F D0 F5                         BNE -
0C721                               
0C721                               ;; Put ball in the middle
0C721 A9 7C                         LDA #$7C
0C723 85 17                         STA ball_xpos_hi
0C725 85 19                         STA ball_ypos_hi
0C727                           
0C727                               ;; Clear the screen
0C727 20 AB C2                      JSR sub_ClearScreen
0C72A                           
0C72A                               ;; Set up intro screen draw loop
0C72A A2 00                         LDX #$00
0C72C                           
0C72C                           -loop_IntroScreenData:
0C72C                           
0C72C                               ;; Get current byte from intro screen data
0C72C BD E5 C7                      LDA tbl_IntroScreenData,x
0C72F                           
0C72F                               ;; If current byte is #$3F, we're done drawing.
0C72F C9 3F                         CMP #$3F
0C731 D0 03                         BNE +
0C733 4C 80 C7                          JMP +goToEndIntroScreen
0C736                               +
0C736                           
0C736                               ;; If highest bits are %11, draw a plain tile
0C736 29 C0                         AND #%11000000
0C738 D0 03                         BNE +
0C73A 4C 60 C7                          JMP +drawTile
0C73D                               +
0C73D                               
0C73D                               ;; If highest bits are %01, set the PPU address
0C73D                               ;; If not, draw two logo tiles
0C73D C9 40                         CMP #%01000000
0C73F D0 03                         BNE +drawLogo
0C741 4C 6A C7                          JMP +setPpuAddr
0C744                           
0C744                           +drawLogo:
0C744                               ;; Get bits 0-2 and store in a temp variable
0C744 BD E5 C7                      LDA tbl_IntroScreenData,x
0C747 29 07                         AND #%00000111
0C749 85 00                         STA temp
0C74B                               
0C74B                               ;; Get bits 3-5, shift over to get a value from 0-7
0C74B BD E5 C7                      LDA tbl_IntroScreenData,x
0C74E 4A                            LSR
0C74F 4A                            LSR
0C750 4A                            LSR
0C751 29 07                         AND #%00000111
0C753                               
0C753                               ;; Draw the tile that corresponds with that value
0C753 A8                            TAY
0C754 20 65 C3                      JSR sub_drawIntroScreenLogoTile
0C757                               
0C757                               ;; Do the same for the value stored in temp
0C757 A4 00                         LDY temp
0C759 20 65 C3                      JSR sub_drawIntroScreenLogoTile
0C75C                           
0C75C                               ;; Next byte please
0C75C E8                            INX
0C75D 4C 2C C7                      JMP -loop_IntroScreenData
0C760                           
0C760                           +drawTile:
0C760                               ;; Just draw the tile value on screen
0C760 BD E5 C7                      LDA tbl_IntroScreenData,x
0C763 8D 07 20                      STA PPU_DATA
0C766                               
0C766                               ;; Next byte please
0C766 E8                            INX
0C767 4C 2C C7                      JMP -loop_IntroScreenData
0C76A                           
0C76A                           
0C76A                           +setPpuAddr:
0C76A                               ;; Reset the PPU latch
0C76A 2C 02 20                      BIT PPU_STATUS
0C76D                               
0C76D                               ;; Sanitize and write the high byte of the PPU address
0C76D BD E5 C7                      LDA tbl_IntroScreenData,x
0C770 29 3F                         AND #%00111111
0C772 8D 06 20                      STA PPU_ADDR
0C775                           
0C775                               ;; Write the low byte of the PPU address
0C775 E8                            INX
0C776 BD E5 C7                      LDA tbl_IntroScreenData,x
0C779 8D 06 20                      STA PPU_ADDR
0C77C                               
0C77C                               ;; PPU has been set up to draw tiles at the correct spot now.
0C77C                               
0C77C                               ;; Next byte please.
0C77C E8                            INX
0C77D 4C 2C C7                      JMP -loop_IntroScreenData
0C780                           
0C780                           +goToEndIntroScreen:
0C780                           
0C780                               ;; To color the 1.LEVEL: line green, we need to update two
0C780                               ;; values in the PPU attribute data.
0C780 2C 02 20                      BIT PPU_STATUS
0C783 A9 23                         LDA #$23
0C785 8D 06 20                      STA PPU_ADDR
0C788 A9 CB                         LDA #$CB
0C78A 8D 06 20                      STA PPU_ADDR
0C78D A9 0A                         LDA #%00001010
0C78F 8D 07 20                      STA PPU_DATA
0C792 8D 07 20                      STA PPU_DATA
0C795                           
0C795 60                            RTS
0C796                           
0C796                           .include "game/subroutine/LoadWinScreen.asm"
0C796                           sub_LoadWinScreen:
0C796 60                            RTS
0C797                           
0C797                           .include "game/subroutine/WriteByteToPPU.asm"
0C797                           sub_WriteByteToPPUBuffer:
0C797                           
0C797                               ;; Prevent updating until full 3-byte buffer is filled,
0C797                               ;; so that graphics won't glitch out if NMI happens during
0C797                               ;; updating the buffer
0C797 A9 00                         LDA #$00
0C799 85 29                         STA ppu_buffer_update
0C79B                           
0C79B                               ;; Check if buffer full; if so, wait a frame and force update
0C79B A4 2A                         LDY ppu_buffer_pointer
0C79D C0 30                         CPY #$30
0C79F D0 05                         BNE +
0C7A1 E6 29                             INC ppu_buffer_update
0C7A3 20 A5 C2                          JSR sub_WaitForVBlank
0C7A6                               +
0C7A6                           
0C7A6                               ;; Add ppu_addr high byte to buffer
0C7A6 A5 00                         LDA temp
0C7A8 99 00 03                      STA ppu_buffer,y
0C7AB                           
0C7AB                               ;; Add ppu_addr low byte to buffer
0C7AB C8                            INY
0C7AC A5 01                         LDA temp+1
0C7AE 99 00 03                      STA ppu_buffer,y
0C7B1                           
0C7B1                               ;; Add ppu_data to buffer
0C7B1 C8                            INY
0C7B2 A5 02                         LDA temp+2
0C7B4 99 00 03                      STA ppu_buffer,y
0C7B7                           
0C7B7                               ;; Update buffer pointer
0C7B7 C8                            INY
0C7B8 84 2A                         STY ppu_buffer_pointer
0C7BA                           
0C7BA                               ;; Tell NMI to update next round
0C7BA E6 29                         INC ppu_buffer_update
0C7BC                           
0C7BC                               ;; Return
0C7BC 60                            RTS0C7BD                           
0C7BD                           
0C7BD                           ;; LUTs
0C7BD                           .include "game/include/tables.asm"
0C7BD                           
0C7BD                           ;; Intro screen palette
0C7BD                           tbl_IntroScreenPalette:
0C7BD 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C7C1 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C7C5 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C7C9 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C7CD                           
0C7CD 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C7D1 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C7D5 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C7D9 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C7DD                           
0C7DD                           
0C7DD                           ;; Intro: mapping logo index to chr tile
0C7DD                           tbl_IntroScreenLogoChr:
0C7DD 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C7E5                           
0C7E5                           
0C7E5                           ;; Intro screen data
0C7E5                           tbl_IntroScreenData:
0C7E5                           
0C7E5                               ;; Set PPU address $20AC and draw
0C7E5 60 AC                         .db #$60, #$AC
0C7E7 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C7EF                           
0C7EF                               ;; Set PPU address $20CF and draw
0C7EF 60 CF                         .db #$60, #$CF
0C7F1 01 02                         .db #_0, #_1
0C7F3                               
0C7F3                               ;; Set PPU address $2122 and draw
0C7F3 61 22                         .db #$61, #$22
0C7F5 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C7FC 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C802 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C80A 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C80F                               
0C80F                               ;; Set PPU address $2147 and draw
0C80F 61 47                         .db #$61, #$47
0C811 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C818 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C81C 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C822 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C828                               
0C828                               ;; Set PPU address $218B and draw
0C828 61 8B                         .db #$61, #$8B
0C82A 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C830 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C835                               
0C835                               ;; Set PPU address $21E6 and draw
0C835 61 E6                         .db #$61, #$E6
0C837 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C83F 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C843 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C84A                               
0C84A                               ;; Set PPU address $222D and draw
0C84A 62 2D                         .db #$62, #$2D
0C84C 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C852                               
0C852                               ;; Set PPU address $2281
0C852 62 81                         .db #$62, #$81
0C854                               
0C854                               ;; Draw the Crillion logo
0C854 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C858 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C85C C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C860 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C864                               
0C864 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C868 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C86C C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C870 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C874                               
0C874 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C878 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C87C C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C880 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C884                           
0C884 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C888 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C88C C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C890 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C894                               
0C894 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C898 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C89C C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C8A0 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C8A4                           
0C8A4 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C8A8 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C8AC C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C8B0 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C8B3                           
0C8B3                               ;; End of intro
0C8B3 3F                            .db #$3F
0C8B4                           
0C8B4                           
0C8B4                           ;; test animation table
0C8B4                           .include "game/test/show_animation_table.asm"
0C8B4                           ;; CHR tile-id's per slide of explosion
0C8B4                           explosion_slide0:
0C8B4 00 00 00                      .db #$00, #$00, #$00
0C8B7 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C8BA 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C8BD                           
0C8BD                           explosion_slide1:
0C8BD 00 00 00                      .db #$00, #$00, #$00
0C8C0 29 2A 2B                      .db #$29, #$2A, #$2B
0C8C3 39 3A 3B                      .db #$39, #$3A, #$3B
0C8C6                           
0C8C6                           explosion_slide2:
0C8C6 16 00 00                      .db #$16, #$00, #$00
0C8C9 26 27 28                      .db #$26, #$27, #$28
0C8CC 36 37 38                      .db #$36, #$37, #$38
0C8CF                           
0C8CF                           explosion_slide3:
0C8CF 00 14 15                      .db #$00, #$14, #$15
0C8D2 23 24 25                      .db #$23, #$24, #$25
0C8D5 33 34 35                      .db #$33, #$34, #$35
0C8D8                           
0C8D8                           explosion_slide4:
0C8D8 10 11 12                      .db #$10, #$11, #$12
0C8DB 20 21 22                      .db #$20, #$21, #$22
0C8DE 30 31 32                      .db #$30, #$31, #$32
0C8E1                           
0C8E1                           ;; High and low bytes of animation slides
0C8E1                           explosion_anim_hi:
0C8E1 C8                            .db >#explosion_slide0
0C8E2 C8                            .db >#explosion_slide1
0C8E3 C8                            .db >#explosion_slide2
0C8E4 C8                            .db >#explosion_slide3
0C8E5 C8                            .db >#explosion_slide4
0C8E6 C8                            .db >#explosion_slide4
0C8E7 C8                            .db >#explosion_slide3
0C8E8 C8                            .db >#explosion_slide2
0C8E9 C8                            .db >#explosion_slide1
0C8EA C8                            .db >#explosion_slide0
0C8EB                           
0C8EB                           explosion_anim_lo:
0C8EB B4                            .db <#explosion_slide0
0C8EC BD                            .db <#explosion_slide1
0C8ED C6                            .db <#explosion_slide2
0C8EE CF                            .db <#explosion_slide3
0C8EF D8                            .db <#explosion_slide4
0C8F0 D8                            .db <#explosion_slide4
0C8F1 CF                            .db <#explosion_slide3
0C8F2 C6                            .db <#explosion_slide2
0C8F3 BD                            .db <#explosion_slide1
0C8F4 B4                            .db <#explosion_slide0
0C8F5                           
0C8F5                           
0C8F5                           
0C8F5                           ;; Ball palette color table (CBRYGM)
0C8F5                           tbl_BallColorDark:
0C8F5 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0C8FB                            
0C8FB                           tbl_BallColorLight:
0C8FB 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0C901                           
0C901                               
0C901                           ;; Screen mode drawing routine addresses
0C901                           tbl_LoadScreenHi:
0C901 C7 C3 C7                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C904                           
0C904                           tbl_LoadScreenLo:
0C904 07 7B 96                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C907                           
0C907                           
0C907                           ;; Test level data
0C907                           .include "game/test/level_data.asm"
0C907                           lvl_layout_01:
0C907 61 21                         .db #$61, #%00100001
0C909 52 61                         .db #$52, #%01100001
0C90B 43 65                         .db #$43, #%01100101
0C90D 83 05                         .db #$83, #%00000101
0C90F 93 15                         .db #$93, #%00010101
0C911 34 7A                         .db #$34, #%01111010
0C913 74 7A                         .db #$74, #%01111010
0C915 35 7A                         .db #$35, #%01111010
0C917 75 7A                         .db #$75, #%01111010
0C919 46 65                         .db #$46, #%01100101
0C91B 86 25                         .db #$86, #%00100101
0C91D 57 61                         .db #$57, #%01100001
0C91F 68 21                         .db #$68, #%00100001
0C921 FF                            .db #LEVEL_END
0C922                           
0C922                           lvl_layout_02:
0C922 C0 0A                         .db #$C0, #%00001010
0C924 11 15                         .db #$11, #%00010101
0C926 21 62                         .db #$21, #%01100010
0C928 61 62                         .db #$61, #%01100010
0C92A A1 42                         .db #$A1, #%01000010
0C92C 12 67                         .db #$12, #%01100111
0C92E 52 67                         .db #$52, #%01100111
0C930 92 67                         .db #$92, #%01100111
0C932 C3 0D                         .db #$C3, #%00001101
0C934 14 11                         .db #$14, #%00010001
0C936 24 65                         .db #$24, #%01100101
0C938 64 65                         .db #$64, #%01100101
0C93A A4 45                         .db #$A4, #%01000101
0C93C 15 67                         .db #$15, #%01100111
0C93E 55 67                         .db #$55, #%01100111
0C940 95 67                         .db #$95, #%01100111
0C942 17 12                         .db #$17, #%00010010
0C944 27 61                         .db #$27, #%01100001
0C946 67 61                         .db #$67, #%01100001
0C948 A7 41                         .db #$A7, #%01000001
0C94A 38 7A                         .db #$38, #%01111010
0C94C 98 5A                         .db #$98, #%01011010
0C94E 18 27                         .db #$18, #%00100111
0C950 48 27                         .db #$48, #%00100111
0C952 78 27                         .db #$78, #%00100111
0C954 C8 07                         .db #$C8, #%00000111
0C956 FF                            .db #LEVEL_END
0C957                           
0C957                           lvl_layout_03:
0C957 00 7A                         .db #$00, #%01111010
0C959 40 7A                         .db #$40, #%01111010
0C95B 80 7A                         .db #$80, #%01111010
0C95D C0 1A                         .db #$C0, #%00011010
0C95F 10 A1                         .db #$10, #%10100001
0C961 13 E1                         .db #$13, #%11100001
0C963 17 C1                         .db #$17, #%11000001
0C965 30 C1                         .db #$30, #%11000001
0C967 34 C1                         .db #$34, #%11000001
0C969 38 A1                         .db #$38, #%10100001
0C96B 50 E1                         .db #$50, #%11100001
0C96D 55 81                         .db #$55, #%10000001
0C96F 57 C1                         .db #$57, #%11000001
0C971 70 C1                         .db #$70, #%11000001
0C973 73 A1                         .db #$73, #%10100001
0C975 76 E1                         .db #$76, #%11100001
0C977 90 E1                         .db #$90, #%11100001
0C979 95 81                         .db #$95, #%10000001
0C97B 97 C1                         .db #$97, #%11000001
0C97D B0 C1                         .db #$B0, #%11000001
0C97F B4 C1                         .db #$B4, #%11000001
0C981 B8 A1                         .db #$B8, #%10100001
0C983 D0 A1                         .db #$D0, #%10100001
0C985 D3 E1                         .db #$D3, #%11100001
0C987 D7 C1                         .db #$D7, #%11000001
0C989 FF                            .db #LEVEL_END
0C98A                           
0C98A                           lvl_layout_04:
0C98A 00 4C                         .db #$00, #%01001100
0C98C 40 6C                         .db #$40, #%01101100
0C98E 80 4C                         .db #$80, #%01001100
0C990 81 AC                         .db #$81, #%10101100
0C992 C1 2C                         .db #$C1, #%00101100
0C994 02 6C                         .db #$02, #%01101100
0C996 42 CC                         .db #$42, #%11001100
0C998 62 EC                         .db #$62, #%11101100
0C99A A2 CC                         .db #$A2, #%11001100
0C99C C3 CC                         .db #$C3, #%11001100
0C99E 04 4C                         .db #$04, #%01001100
0C9A0 84 2C                         .db #$84, #%00101100
0C9A2 25 AC                         .db #$25, #%10101100
0C9A4 85 AC                         .db #$85, #%10101100
0C9A6 06 AC                         .db #$06, #%10101100
0C9A8 36 CC                         .db #$36, #%11001100
0C9AA 56 CC                         .db #$56, #%11001100
0C9AC 66 EC                         .db #$66, #%11101100
0C9AE 96 EC                         .db #$96, #%11101100
0C9B0 C7 AC                         .db #$C7, #%10101100
0C9B2 08 2C                         .db #$08, #%00101100
0C9B4 78 6C                         .db #$78, #%01101100
0C9B6 D8 0C                         .db #$D8, #%00001100
0C9B8 30 A1                         .db #$30, #%10100001
0C9BA B0 21                         .db #$B0, #%00100001
0C9BC 01 41                         .db #$01, #%01000001
0C9BE 41 61                         .db #$41, #%01100001
0C9C0 91 A1                         .db #$91, #%10100001
0C9C2 A1 21                         .db #$A1, #%00100001
0C9C4 52 C1                         .db #$52, #%11000001
0C9C6 72 E1                         .db #$72, #%11100001
0C9C8 B2 C1                         .db #$B2, #%11000001
0C9CA C2 21                         .db #$C2, #%00100001
0C9CC 03 41                         .db #$03, #%01000001
0C9CE 33 C1                         .db #$33, #%11000001
0C9D0 83 21                         .db #$83, #%00100001
0C9D2 D3 E1                         .db #$D3, #%11100001
0C9D4 05 21                         .db #$05, #%00100001
0C9D6 45 E1                         .db #$45, #%11100001
0C9D8 A5 21                         .db #$A5, #%00100001
0C9DA 16 A1                         .db #$16, #%10100001
0C9DC 76 A1                         .db #$76, #%10100001
0C9DE 27 A1                         .db #$27, #%10100001
0C9E0 57 01                         .db #$57, #%00000001
0C9E2 87 41                         .db #$87, #%01000001
0C9E4 B7 A1                         .db #$B7, #%10100001
0C9E6 19 21                         .db #$19, #%00100001
0C9E8 39 41                         .db #$39, #%01000001
0C9EA 89 41                         .db #$89, #%01000001
0C9EC C9 21                         .db #$C9, #%00100001
0C9EE D0 1A                         .db #$D0, #%00011010
0C9F0 55 1A                         .db #$55, #%00011010
0C9F2 95 1A                         .db #$95, #%00011010
0C9F4 D7 1A                         .db #$D7, #%00011010
0C9F6 09 1A                         .db #$09, #%00011010
0C9F8 79 1A                         .db #$79, #%00011010
0C9FA FF                            .db #LEVEL_END
0C9FB                           
0C9FB                           lvl_layout_05:
0C9FB 40 0A                         .db #$40, #%00001010
0C9FD 70 1A                         .db #$70, #%00011010
0C9FF B0 42                         .db #$B0, #%01000010
0CA01 41 A7                         .db #$41, #%10100111
0CA03 B1 22                         .db #$B1, #%00100010
0CA05 D1 15                         .db #$D1, #%00010101
0CA07 22 0A                         .db #$22, #%00001010
0CA09 52 05                         .db #$52, #%00000101
0CA0B B2 42                         .db #$B2, #%01000010
0CA0D 03 27                         .db #$03, #%00100111
0CA0F 33 67                         .db #$33, #%01100111
0CA11 73 67                         .db #$73, #%01100111
0CA13 B3 47                         .db #$B3, #%01000111
0CA15 05 E5                         .db #$05, #%11100101
0CA17 25 A5                         .db #$25, #%10100101
0CA19 35 25                         .db #$35, #%00100101
0CA1B 65 45                         .db #$65, #%01000101
0CA1D A5 45                         .db #$A5, #%01000101
0CA1F 46 E5                         .db #$46, #%11100101
0CA21 66 E5                         .db #$66, #%11100101
0CA23 86 E5                         .db #$86, #%11100101
0CA25 A6 E2                         .db #$A6, #%11100010
0CA27 C6 E5                         .db #$C6, #%11100101
0CA29 27 25                         .db #$27, #%00100101
0CA2B 77 05                         .db #$77, #%00000101
0CA2D B7 02                         .db #$B7, #%00000010
0CA2F 09 05                         .db #$09, #%00000101
0CA31 79 05                         .db #$79, #%00000101
0CA33 B9 02                         .db #$B9, #%00000010
0CA35 FF                            .db #LEVEL_END
0CA36                           
0CA36                           lvl_layout_06:
0CA36 00 03                         .db #$00, #%00000011
0CA38 20 03                         .db #$20, #%00000011
0CA3A 40 03                         .db #$40, #%00000011
0CA3C A0 03                         .db #$A0, #%00000011
0CA3E C0 03                         .db #$C0, #%00000011
0CA40 11 03                         .db #$11, #%00000011
0CA42 31 03                         .db #$31, #%00000011
0CA44 51 03                         .db #$51, #%00000011
0CA46 91 03                         .db #$91, #%00000011
0CA48 B1 03                         .db #$B1, #%00000011
0CA4A D1 03                         .db #$D1, #%00000011
0CA4C 02 03                         .db #$02, #%00000011
0CA4E 22 03                         .db #$22, #%00000011
0CA50 42 03                         .db #$42, #%00000011
0CA52 A2 03                         .db #$A2, #%00000011
0CA54 C2 03                         .db #$C2, #%00000011
0CA56 13 03                         .db #$13, #%00000011
0CA58 33 03                         .db #$33, #%00000011
0CA5A 53 03                         .db #$53, #%00000011
0CA5C 93 03                         .db #$93, #%00000011
0CA5E B3 03                         .db #$B3, #%00000011
0CA60 D3 03                         .db #$D3, #%00000011
0CA62 04 03                         .db #$04, #%00000011
0CA64 24 03                         .db #$24, #%00000011
0CA66 44 03                         .db #$44, #%00000011
0CA68 A4 03                         .db #$A4, #%00000011
0CA6A C4 03                         .db #$C4, #%00000011
0CA6C 15 03                         .db #$15, #%00000011
0CA6E 35 03                         .db #$35, #%00000011
0CA70 55 03                         .db #$55, #%00000011
0CA72 95 03                         .db #$95, #%00000011
0CA74 B5 03                         .db #$B5, #%00000011
0CA76 D5 03                         .db #$D5, #%00000011
0CA78 06 03                         .db #$06, #%00000011
0CA7A 26 03                         .db #$26, #%00000011
0CA7C 46 03                         .db #$46, #%00000011
0CA7E A6 03                         .db #$A6, #%00000011
0CA80 C6 03                         .db #$C6, #%00000011
0CA82 17 03                         .db #$17, #%00000011
0CA84 37 03                         .db #$37, #%00000011
0CA86 57 03                         .db #$57, #%00000011
0CA88 97 03                         .db #$97, #%00000011
0CA8A B7 03                         .db #$B7, #%00000011
0CA8C D7 03                         .db #$D7, #%00000011
0CA8E 08 03                         .db #$08, #%00000011
0CA90 28 03                         .db #$28, #%00000011
0CA92 48 03                         .db #$48, #%00000011
0CA94 A8 03                         .db #$A8, #%00000011
0CA96 C8 03                         .db #$C8, #%00000011
0CA98 19 03                         .db #$19, #%00000011
0CA9A 39 03                         .db #$39, #%00000011
0CA9C 59 03                         .db #$59, #%00000011
0CA9E 99 03                         .db #$99, #%00000011
0CAA0 B9 03                         .db #$B9, #%00000011
0CAA2 D9 03                         .db #$D9, #%00000011
0CAA4 60 4B                         .db #$60, #%01001011
0CAA6 71 CB                         .db #$71, #%11001011
0CAA8 62 4B                         .db #$62, #%01001011
0CAAA 64 4B                         .db #$64, #%01001011
0CAAC 75 CB                         .db #$75, #%11001011
0CAAE 66 4B                         .db #$66, #%01001011
0CAB0 68 4B                         .db #$68, #%01001011
0CAB2 79 0B                         .db #$79, #%00001011
0CAB4 70 03                         .db #$70, #%00000011
0CAB6 72 03                         .db #$72, #%00000011
0CAB8 74 03                         .db #$74, #%00000011
0CABA 76 03                         .db #$76, #%00000011
0CABC 78 03                         .db #$78, #%00000011
0CABE FF                            .db #LEVEL_END
0CABF                           
0CABF                           lvl_layout_07:
0CABF 00 11                         .db #$00, #%00010001
0CAC1 01 FA                         .db #$01, #%11111010
0CAC3 12 BA                         .db #$12, #%10111010
0CAC5 23 DA                         .db #$23, #%11011010
0CAC7 34 FA                         .db #$34, #%11111010
0CAC9 05 DA                         .db #$05, #%11011010
0CACB 15 FA                         .db #$15, #%11111010
0CACD 45 BA                         .db #$45, #%10111010
0CACF 56 DA                         .db #$56, #%11011010
0CAD1 27 BA                         .db #$27, #%10111010
0CAD3 67 DA                         .db #$67, #%11011010
0CAD5 38 3A                         .db #$38, #%00111010
0CAD7 78 BA                         .db #$78, #%10111010
0CAD9 09 3A                         .db #$09, #%00111010
0CADB 39 3A                         .db #$39, #%00111010
0CADD 89 1A                         .db #$89, #%00011010
0CADF B0 01                         .db #$B0, #%00000001
0CAE1 D0 01                         .db #$D0, #%00000001
0CAE3 A1 01                         .db #$A1, #%00000001
0CAE5 C1 11                         .db #$C1, #%00010001
0CAE7 B2 01                         .db #$B2, #%00000001
0CAE9 D2 01                         .db #$D2, #%00000001
0CAEB A3 01                         .db #$A3, #%00000001
0CAED C3 01                         .db #$C3, #%00000001
0CAEF B4 01                         .db #$B4, #%00000001
0CAF1 D4 01                         .db #$D4, #%00000001
0CAF3 A5 01                         .db #$A5, #%00000001
0CAF5 C5 01                         .db #$C5, #%00000001
0CAF7 B6 01                         .db #$B6, #%00000001
0CAF9 D6 01                         .db #$D6, #%00000001
0CAFB A7 01                         .db #$A7, #%00000001
0CAFD C7 01                         .db #$C7, #%00000001
0CAFF FF                            .db #LEVEL_END
0CB00                           
0CB00                           lvl_layout_08:
0CB00 40 B5                         .db #$40, #%10110101
0CB02 31 0D                         .db #$31, #%00001101
0CB04 61 10                         .db #$61, #%00010000
0CB06 42 C7                         .db #$42, #%11000111
0CB08 52 67                         .db #$52, #%01100111
0CB0A 63 C7                         .db #$63, #%11000111
0CB0C 83 E7                         .db #$83, #%11100111
0CB0E 05 07                         .db #$05, #%00000111
0CB10 15 3A                         .db #$15, #%00111010
0CB12 07 63                         .db #$07, #%01100011
0CB14 27 13                         .db #$27, #%00010011
0CB16 38 A5                         .db #$38, #%10100101
0CB18 09 14                         .db #$09, #%00010100
0CB1A 19 05                         .db #$19, #%00000101
0CB1C D0 E0                         .db #$D0, #%11100000
0CB1E C2 A0                         .db #$C2, #%10100000
0CB20 B3 E0                         .db #$B3, #%11100000
0CB22 D5 E0                         .db #$D5, #%11100000
0CB24 C6 E0                         .db #$C6, #%11100000
0CB26 B0 C4                         .db #$B0, #%11000100
0CB28 C0 A4                         .db #$C0, #%10100100
0CB2A D1 A4                         .db #$D1, #%10100100
0CB2C C4 24                         .db #$C4, #%00100100
0CB2E C5 04                         .db #$C5, #%00000100
0CB30 B7 44                         .db #$B7, #%01000100
0CB32 B8 A4                         .db #$B8, #%10100100
0CB34 D9 05                         .db #$D9, #%00000101
0CB36 FF                            .db #LEVEL_END
0CB37                           
0CB37                           lvl_layout_09:
0CB37 81 04                         .db #$81, #%00000100
0CB39 D1 04                         .db #$D1, #%00000100
0CB3B 32 C4                         .db #$32, #%11000100
0CB3D A2 C4                         .db #$A2, #%11000100
0CB3F C2 24                         .db #$C2, #%00100100
0CB41 13 24                         .db #$13, #%00100100
0CB43 53 04                         .db #$53, #%00000100
0CB45 C3 27                         .db #$C3, #%00100111
0CB47 15 6C                         .db #$15, #%01101100
0CB49 55 6C                         .db #$55, #%01101100
0CB4B 95 6C                         .db #$95, #%01101100
0CB4D D5 0C                         .db #$D5, #%00001100
0CB4F 27 C7                         .db #$27, #%11000111
0CB51 47 C7                         .db #$47, #%11000111
0CB53 67 C7                         .db #$67, #%11000111
0CB55 87 C7                         .db #$87, #%11000111
0CB57 A7 C7                         .db #$A7, #%11000111
0CB59 C7 C7                         .db #$C7, #%11000111
0CB5B 08 13                         .db #$08, #%00010011
0CB5D 28 15                         .db #$28, #%00010101
0CB5F 48 12                         .db #$48, #%00010010
0CB61 68 15                         .db #$68, #%00010101
0CB63 88 11                         .db #$88, #%00010001
0CB65 A8 10                         .db #$A8, #%00010000
0CB67 C8 14                         .db #$C8, #%00010100
0CB69 09 07                         .db #$09, #%00000111
0CB6B 19 03                         .db #$19, #%00000011
0CB6D 39 05                         .db #$39, #%00000101
0CB6F 59 02                         .db #$59, #%00000010
0CB71 79 05                         .db #$79, #%00000101
0CB73 99 01                         .db #$99, #%00000001
0CB75 B9 00                         .db #$B9, #%00000000
0CB77 D9 04                         .db #$D9, #%00000100
0CB79 FF                            .db #LEVEL_END
0CB7A                           
0CB7A                           lvl_layout_10:
0CB7A 00 02                         .db #$00, #%00000010
0CB7C 10 C9                         .db #$10, #%11001001
0CB7E 50 C9                         .db #$50, #%11001001
0CB80 90 C9                         .db #$90, #%11001001
0CB82 D0 C9                         .db #$D0, #%11001001
0CB84 31 C9                         .db #$31, #%11001001
0CB86 71 C9                         .db #$71, #%11001001
0CB88 B1 C9                         .db #$B1, #%11001001
0CB8A 13 C9                         .db #$13, #%11001001
0CB8C 53 C9                         .db #$53, #%11001001
0CB8E 93 C9                         .db #$93, #%11001001
0CB90 D3 C9                         .db #$D3, #%11001001
0CB92 34 C9                         .db #$34, #%11001001
0CB94 74 C9                         .db #$74, #%11001001
0CB96 B4 C9                         .db #$B4, #%11001001
0CB98 16 C9                         .db #$16, #%11001001
0CB9A 56 C9                         .db #$56, #%11001001
0CB9C 96 C9                         .db #$96, #%11001001
0CB9E D6 C9                         .db #$D6, #%11001001
0CBA0 37 C9                         .db #$37, #%11001001
0CBA2 77 C9                         .db #$77, #%11001001
0CBA4 B7 C9                         .db #$B7, #%11001001
0CBA6 D8 12                         .db #$D8, #%00010010
0CBA8 FF                            .db #LEVEL_END
0CBA9                           
0CBA9                           lvl_layout_11:
0CBA9 00 65                         .db #$00, #%01100101
0CBAB 40 45                         .db #$40, #%01000101
0CBAD 50 A7                         .db #$50, #%10100111
0CBAF 80 05                         .db #$80, #%00000101
0CBB1 90 A7                         .db #$90, #%10100111
0CBB3 A0 65                         .db #$A0, #%01100101
0CBB5 01 43                         .db #$01, #%01000011
0CBB7 31 23                         .db #$31, #%00100011
0CBB9 61 A7                         .db #$61, #%10100111
0CBBB 81 A7                         .db #$81, #%10100111
0CBBD A1 63                         .db #$A1, #%01100011
0CBBF 02 44                         .db #$02, #%01000100
0CBC1 32 44                         .db #$32, #%01000100
0CBC3 92 04                         .db #$92, #%00000100
0CBC5 A2 64                         .db #$A2, #%01100100
0CBC7 03 40                         .db #$03, #%01000000
0CBC9 33 40                         .db #$33, #%01000000
0CBCB 63 A1                         .db #$63, #%10100001
0CBCD 83 A2                         .db #$83, #%10100010
0CBCF 93 00                         .db #$93, #%00000000
0CBD1 A3 60                         .db #$A3, #%01100000
0CBD3 04 41                         .db #$04, #%01000001
0CBD5 34 41                         .db #$34, #%01000001
0CBD7 94 02                         .db #$94, #%00000010
0CBD9 A4 62                         .db #$A4, #%01100010
0CBDB 05 47                         .db #$05, #%01000111
0CBDD 35 67                         .db #$35, #%01100111
0CBDF 75 0A                         .db #$75, #%00001010
0CBE1 85 47                         .db #$85, #%01000111
0CBE3 B5 47                         .db #$B5, #%01000111
0CBE5 06 E7                         .db #$06, #%11100111
0CBE7 16 5A                         .db #$16, #%01011010
0CBE9 26 11                         .db #$26, #%00010001
0CBEB 46 13                         .db #$46, #%00010011
0CBED 56 1A                         .db #$56, #%00011010
0CBEF 66 14                         .db #$66, #%00010100
0CBF1 86 10                         .db #$86, #%00010000
0CBF3 96 5C                         .db #$96, #%01011100
0CBF5 A6 12                         .db #$A6, #%00010010
0CBF7 C6 15                         .db #$C6, #%00010101
0CBF9 D6 E7                         .db #$D6, #%11100111
0CBFB FF                            .db #LEVEL_END
0CBFC                           
0CBFC                           lvl_layout_12:
0CBFC 00 00                         .db #$00, #%00000000
0CBFE 50 C0                         .db #$50, #%11000000
0CC00 80 00                         .db #$80, #%00000000
0CC02 61 00                         .db #$61, #%00000000
0CC04 22 C0                         .db #$22, #%11000000
0CC06 82 E0                         .db #$82, #%11100000
0CC08 C2 E0                         .db #$C2, #%11100000
0CC0A A3 20                         .db #$A3, #%00100000
0CC0C C3 10                         .db #$C3, #%00010000
0CC0E 04 00                         .db #$04, #%00000000
0CC10 54 20                         .db #$54, #%00100000
0CC12 15 0A                         .db #$15, #%00001010
0CC14 25 C0                         .db #$25, #%11000000
0CC16 55 E0                         .db #$55, #%11100000
0CC18 86 20                         .db #$86, #%00100000
0CC1A C6 E0                         .db #$C6, #%11100000
0CC1C C7 A0                         .db #$C7, #%10100000
0CC1E 88 00                         .db #$88, #%00000000
0CC20 59 00                         .db #$59, #%00000000
0CC22 89 20                         .db #$89, #%00100000
0CC24 D9 1A                         .db #$D9, #%00011010
0CC26 FF                            .db #LEVEL_END
0CC27                           
0CC27                           lvl_layout_13:
0CC27 10 E0                         .db #$10, #%11100000
0CC29 20 E0                         .db #$20, #%11100000
0CC2B 30 E0                         .db #$30, #%11100000
0CC2D 40 40                         .db #$40, #%01000000
0CC2F 80 60                         .db #$80, #%01100000
0CC31 C0 E0                         .db #$C0, #%11100000
0CC33 D0 E0                         .db #$D0, #%11100000
0CC35 41 40                         .db #$41, #%01000000
0CC37 71 60                         .db #$71, #%01100000
0CC39 52 60                         .db #$52, #%01100000
0CC3B A2 20                         .db #$A2, #%00100000
0CC3D 43 60                         .db #$43, #%01100000
0CC3F 83 60                         .db #$83, #%01100000
0CC41 14 74                         .db #$14, #%01110100
0CC43 54 74                         .db #$54, #%01110100
0CC45 94 74                         .db #$94, #%01110100
0CC47 D4 14                         .db #$D4, #%00010100
0CC49 15 0D                         .db #$15, #%00001101
0CC4B 55 0D                         .db #$55, #%00001101
0CC4D 95 0D                         .db #$95, #%00001101
0CC4F D5 0D                         .db #$D5, #%00001101
0CC51 26 0D                         .db #$26, #%00001101
0CC53 46 0D                         .db #$46, #%00001101
0CC55 66 0D                         .db #$66, #%00001101
0CC57 86 0D                         .db #$86, #%00001101
0CC59 A6 0D                         .db #$A6, #%00001101
0CC5B C6 0D                         .db #$C6, #%00001101
0CC5D 07 10                         .db #$07, #%00010000
0CC5F 37 0D                         .db #$37, #%00001101
0CC61 77 0D                         .db #$77, #%00001101
0CC63 B7 0D                         .db #$B7, #%00001101
0CC65 28 0D                         .db #$28, #%00001101
0CC67 48 0D                         .db #$48, #%00001101
0CC69 68 0D                         .db #$68, #%00001101
0CC6B 88 0D                         .db #$88, #%00001101
0CC6D A8 0D                         .db #$A8, #%00001101
0CC6F C8 0D                         .db #$C8, #%00001101
0CC71 19 0D                         .db #$19, #%00001101
0CC73 59 0D                         .db #$59, #%00001101
0CC75 99 0D                         .db #$99, #%00001101
0CC77 D9 0D                         .db #$D9, #%00001101
0CC79 FF                            .db #LEVEL_END
0CC7A                           
0CC7A                           lvl_layout_14:
0CC7A 00 67                         .db #$00, #%01100111
0CC7C 40 67                         .db #$40, #%01100111
0CC7E 80 67                         .db #$80, #%01100111
0CC80 C0 27                         .db #$C0, #%00100111
0CC82 01 27                         .db #$01, #%00100111
0CC84 31 C7                         .db #$31, #%11000111
0CC86 51 C7                         .db #$51, #%11000111
0CC88 71 C7                         .db #$71, #%11000111
0CC8A 91 C7                         .db #$91, #%11000111
0CC8C B1 C7                         .db #$B1, #%11000111
0CC8E D1 07                         .db #$D1, #%00000111
0CC90 02 E7                         .db #$02, #%11100111
0CC92 06 E7                         .db #$06, #%11100111
0CC94 13 07                         .db #$13, #%00000111
0CC96 D3 07                         .db #$D3, #%00000111
0CC98 15 07                         .db #$15, #%00000111
0CC9A 35 07                         .db #$35, #%00000111
0CC9C 55 07                         .db #$55, #%00000111
0CC9E 75 07                         .db #$75, #%00000111
0CCA0 95 07                         .db #$95, #%00000111
0CCA2 B5 07                         .db #$B5, #%00000111
0CCA4 D5 07                         .db #$D5, #%00000111
0CCA6 17 07                         .db #$17, #%00000111
0CCA8 37 C7                         .db #$37, #%11000111
0CCAA 57 C7                         .db #$57, #%11000111
0CCAC 77 C7                         .db #$77, #%11000111
0CCAE 97 C7                         .db #$97, #%11000111
0CCB0 B7 C7                         .db #$B7, #%11000111
0CCB2 D7 07                         .db #$D7, #%00000111
0CCB4 19 07                         .db #$19, #%00000111
0CCB6 D9 07                         .db #$D9, #%00000111
0CCB8 22 4C                         .db #$22, #%01001100
0CCBA 62 4C                         .db #$62, #%01001100
0CCBC A2 4C                         .db #$A2, #%01001100
0CCBE 24 0C                         .db #$24, #%00001100
0CCC0 44 0C                         .db #$44, #%00001100
0CCC2 64 0C                         .db #$64, #%00001100
0CCC4 84 0C                         .db #$84, #%00001100
0CCC6 A4 0C                         .db #$A4, #%00001100
0CCC8 C4 0C                         .db #$C4, #%00001100
0CCCA 26 0C                         .db #$26, #%00001100
0CCCC 46 0C                         .db #$46, #%00001100
0CCCE 66 0C                         .db #$66, #%00001100
0CCD0 86 0C                         .db #$86, #%00001100
0CCD2 A6 0C                         .db #$A6, #%00001100
0CCD4 C6 0C                         .db #$C6, #%00001100
0CCD6 28 4C                         .db #$28, #%01001100
0CCD8 68 4C                         .db #$68, #%01001100
0CCDA A8 4C                         .db #$A8, #%01001100
0CCDC 32 04                         .db #$32, #%00000100
0CCDE 52 04                         .db #$52, #%00000100
0CCE0 72 04                         .db #$72, #%00000100
0CCE2 92 04                         .db #$92, #%00000100
0CCE4 B2 04                         .db #$B2, #%00000100
0CCE6 38 04                         .db #$38, #%00000100
0CCE8 58 04                         .db #$58, #%00000100
0CCEA 78 04                         .db #$78, #%00000100
0CCEC 98 04                         .db #$98, #%00000100
0CCEE B8 04                         .db #$B8, #%00000100
0CCF0 FF                            .db #LEVEL_END
0CCF1                           
0CCF1                           lvl_layout_15:
0CCF1 00 7A                         .db #$00, #%01111010
0CCF3 40 7A                         .db #$40, #%01111010
0CCF5 80 7A                         .db #$80, #%01111010
0CCF7 C0 3A                         .db #$C0, #%00111010
0CCF9 31 04                         .db #$31, #%00000100
0CCFB 51 04                         .db #$51, #%00000100
0CCFD 81 04                         .db #$81, #%00000100
0CCFF A1 04                         .db #$A1, #%00000100
0CD01 05 E4                         .db #$05, #%11100100
0CD03 15 64                         .db #$15, #%01100100
0CD05 55 64                         .db #$55, #%01100100
0CD07 95 64                         .db #$95, #%01100100
0CD09 D5 E4                         .db #$D5, #%11100100
0CD0B 26 04                         .db #$26, #%00000100
0CD0D 46 44                         .db #$46, #%01000100
0CD0F 76 64                         .db #$76, #%01100100
0CD11 C6 04                         .db #$C6, #%00000100
0CD13 17 04                         .db #$17, #%00000100
0CD15 37 64                         .db #$37, #%01100100
0CD17 77 44                         .db #$77, #%01000100
0CD19 B7 04                         .db #$B7, #%00000100
0CD1B 18 64                         .db #$18, #%01100100
0CD1D 58 64                         .db #$58, #%01100100
0CD1F 98 64                         .db #$98, #%01100100
0CD21 FF                            .db #LEVEL_END
0CD22                           
0CD22                           lvl_layout_16:
0CD22 10 E1                         .db #$10, #%11100001
0CD24 20 9A                         .db #$20, #%10011010
0CD26 30 E1                         .db #$30, #%11100001
0CD28 40 E1                         .db #$40, #%11100001
0CD2A 50 E1                         .db #$50, #%11100001
0CD2C 60 C1                         .db #$60, #%11000001
0CD2E 70 E1                         .db #$70, #%11100001
0CD30 80 E1                         .db #$80, #%11100001
0CD32 90 E1                         .db #$90, #%11100001
0CD34 A0 61                         .db #$A0, #%01100001
0CD36 21 C1                         .db #$21, #%11000001
0CD38 A1 1A                         .db #$A1, #%00011010
0CD3A B1 41                         .db #$B1, #%01000001
0CD3C A2 E1                         .db #$A2, #%11100001
0CD3E B2 E1                         .db #$B2, #%11100001
0CD40 C2 1A                         .db #$C2, #%00011010
0CD42 D2 E1                         .db #$D2, #%11100001
0CD44 63 1A                         .db #$63, #%00011010
0CD46 C3 C1                         .db #$C3, #%11000001
0CD48 14 61                         .db #$14, #%01100001
0CD4A 54 61                         .db #$54, #%01100001
0CD4C 94 C1                         .db #$94, #%11000001
0CD4E 15 61                         .db #$15, #%01100001
0CD50 55 41                         .db #$55, #%01000001
0CD52 85 1A                         .db #$85, #%00011010
0CD54 16 41                         .db #$16, #%01000001
0CD56 46 1A                         .db #$46, #%00011010
0CD58 56 61                         .db #$56, #%01100001
0CD5A A6 61                         .db #$A6, #%01100001
0CD5C 17 67                         .db #$17, #%01100111
0CD5E 57 67                         .db #$57, #%01100111
0CD60 97 67                         .db #$97, #%01100111
0CD62 D7 07                         .db #$D7, #%00000111
0CD64 28 41                         .db #$28, #%01000001
0CD66 58 61                         .db #$58, #%01100001
0CD68 A8 41                         .db #$A8, #%01000001
0CD6A 18 11                         .db #$18, #%00010001
0CD6C 38 11                         .db #$38, #%00010001
0CD6E 98 11                         .db #$98, #%00010001
0CD70 B8 11                         .db #$B8, #%00010001
0CD72 D8 11                         .db #$D8, #%00010001
0CD74 59 09                         .db #$59, #%00001001
0CD76 FF                            .db #LEVEL_END
0CD77                           
0CD77                           lvl_layout_17:
0CD77 FF                            .db #LEVEL_END
0CD78                           
0CD78                           lvl_layout_18:
0CD78 FF                            .db #LEVEL_END
0CD79                           
0CD79                           lvl_layout_19:
0CD79 FF                            .db #LEVEL_END
0CD7A                           
0CD7A                           lvl_layout_20:
0CD7A FF                            .db #LEVEL_END
0CD7B                           
0CD7B                           lvl_layout_21:
0CD7B FF                            .db #LEVEL_END
0CD7C                           
0CD7C                           lvl_layout_22:
0CD7C FF                            .db #LEVEL_END
0CD7D                           
0CD7D                           lvl_layout_23:
0CD7D FF                            .db #LEVEL_END
0CD7E                           
0CD7E                           lvl_layout_24:
0CD7E 02 67                         .db #$02, #%01100111
0CD80 42 67                         .db #$42, #%01100111
0CD82 82 67                         .db #$82, #%01100111
0CD84 05 67                         .db #$05, #%01100111
0CD86 45 67                         .db #$45, #%01100111
0CD88 85 67                         .db #$85, #%01100111
0CD8A 08 67                         .db #$08, #%01100111
0CD8C 48 67                         .db #$48, #%01100111
0CD8E 88 67                         .db #$88, #%01100111
0CD90 30 E7                         .db #$30, #%11100111
0CD92 70 E7                         .db #$70, #%11100111
0CD94 B0 E7                         .db #$B0, #%11100111
0CD96 34 E7                         .db #$34, #%11100111
0CD98 74 E7                         .db #$74, #%11100111
0CD9A B4 E7                         .db #$B4, #%11100111
0CD9C 20 13                         .db #$20, #%00010011
0CD9E 40 10                         .db #$40, #%00010000
0CDA0 80 02                         .db #$80, #%00000010
0CDA2 41 05                         .db #$41, #%00000101
0CDA4 B1 09                         .db #$B1, #%00001001
0CDA6 02 09                         .db #$02, #%00001001
0CDA8 52 0C                         .db #$52, #%00001100
0CDAA 13 11                         .db #$13, #%00010001
0CDAC 33 04                         .db #$33, #%00000100
0CDAE 74 0C                         .db #$74, #%00001100
0CDB0 B4 08                         .db #$B4, #%00001000
0CDB2 15 09                         .db #$15, #%00001001
0CDB4 55 0C                         .db #$55, #%00001100
0CDB6 95 0C                         .db #$95, #%00001100
0CDB8 47 03                         .db #$47, #%00000011
0CDBA A7 12                         .db #$A7, #%00010010
0CDBC 18 15                         .db #$18, #%00010101
0CDBE 09 05                         .db #$09, #%00000101
0CDC0 19 03                         .db #$19, #%00000011
0CDC2 FF                            .db #LEVEL_END
0CDC3                           
0CDC3                           lvl_layout_25:
0CDC3 FF                            .db #LEVEL_END
0CDC4                           
0CDC4                           ;; Level layout address pointers
0CDC4                           tbl_lvl_layout_hi:
0CDC4 C9 C9 C9 C9 C9                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0CDC9 CA CA CB CB CB                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0CDCE CB CB CC CC CC                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0CDD3 CD CD CD CD CD                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0CDD8 CD CD CD CD CD                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0CDDD                           
0CDDD                           tbl_lvl_layout_lo:
0CDDD 07 22 57 8A FB                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0CDE2 36 BF 00 37 7A                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0CDE7 A9 FC 27 7A F1                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0CDEC 22 77 78 79 7A                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0CDF1 7B 7C 7D 7E C3                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0CDF6                           
0CDF6                           ;; Ball start position (#$YX)
0CDF6                           tbl_lvl_ball_startpos:
0CDF6 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0CDFB 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0CE00 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0CE05 9D 00 00 00 00                .db #$9D, #$00, #$00, #$00, #$00
0CE0A 00 00 00 34 00                .db #$00, #$00, #$00, #$34, #$00
0CE0F                               
0CE0F                           ;; Ball start direction, color and tile score
0CE0F                           ;; #% ccc v tttt
0CE0F                           ;;    ||| | ++++-- tile score
0CE0F                           ;;    ||| +------- vertical direction, up (0) or down
0CE0F                           ;;    +++--------- color (CBRYGM)
0CE0F                           tbl_lvl_ball_init:
0CE0F 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0CE14 70 50 B0 80 50                .db #%01110000, #%01010000, #%10110000, #%10000000, #%01010000
0CE19 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0CE1E 20 00 00 00 00                .db #%00100000, #%00000000, #%00000000, #%00000000, #%00000000
0CE23 00 00 00 90 00                .db #%00000000, #%00000000, #%00000000, #%10010000, #%00000000
0CE28                           
0CE28                           
0CE28                           
0CE28                           ;; Helper table to multiply values by 64
0CE28                           tbl_Times64:
0CE28 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0CE2C                           
0CE2C                           
0CE2C                           ;; Metatile ID to CHR data mapper
0CE2C                           tbl_GametileTopLeft:
0CE2C 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0CE36                           
0CE36                           tbl_GametileTopRight:
0CE36 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0CE40                           
0CE40                           tbl_GametileBottomLeft:
0CE40 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0CE4A                           
0CE4A                           tbl_GametileBottomRight:
0CE4A 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0CE54                           
0CE54                           ;; Metatile ID to RAM byte data mapper
0CE54                           tbl_GameTileRamByte:
0CE54 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0CE59                           
0CE59                           ;; HUD text data
0CE59                           tbl_HudText:
0CE59 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0CE61 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0CE68 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0CE70 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0CE75                           
0CE75                           ;; NMI handler
0CE75                           NMI:
0CE75                               .include "interrupt/nmi.asm"
0CE75                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0CE75                           ;;
0CE75                           ;; include/nmi.asm
0CE75                           ;;
0CE75                           ;; Non-maskable interrupt script. This script is being executed
0CE75                           ;; when vBlank hits.
0CE75                           ;;
0CE75                           ;;
0CE75                           
0CE75                               ;; Preserve accumulator through stack
0CE75 48                            PHA
0CE76                           
0CE76                               ;; Should NMI be skipped?
0CE76 A5 13                         LDA skip_nmi
0CE78 F0 03                         BEQ +
0CE7A 4C 08 CF                          JMP +skip_nmi
0CE7D                               +
0CE7D                           
0CE7D                               ;; When in NMI, skip additional NMI requests
0CE7D A9 01                         LDA #$01
0CE7F 85 13                         STA skip_nmi
0CE81                           
0CE81                               ;; Preserve X, Y, and PC through stack
0CE81 8A                            TXA
0CE82 48                            PHA
0CE83 98                            TYA
0CE84 48                            PHA
0CE85 08                            PHP
0CE86                               
0CE86                               ;; Check forced NMI skip
0CE86 A5 14                         LDA force_skip_nmi
0CE88 F0 03                         BEQ +
0CE8A 4C F9 CE                          JMP +force_skip_nmi
0CE8D                               +
0CE8D                           
0CE8D                               ;; Update PPU mask
0CE8D                               ;LDA #$00
0CE8D                               ;STA PPU_CTRL
0CE8D A5 12                         LDA soft_ppu_mask
0CE8F 8D 01 20                      STA PPU_MASK
0CE92                               
0CE92                               
0CE92                               ;; Additional PPU updates go here
0CE92                               .include "game/test/tile_update_nmi.asm"
0CE92                           
0CE92                               ;; Check if ppu_buffer needs updating
0CE92 A5 29                         LDA ppu_buffer_update
0CE94 D0 03                         BNE +
0CE96 4C D8 CE                          JMP +no_ppu_buffer_update
0CE99                               +
0CE99                           
0CE99                               ;; Reset ppu control register and mask
0CE99 A2 00                         LDX #$00
0CE9B 8E 00 20                      STX PPU_CTRL
0CE9E 8E 01 20                      STX PPU_MASK
0CEA1                           
0CEA1                               ;; Set up loop
0CEA1                               -
0CEA1                                   ;; Reset hi/lo latch
0CEA1 2C 02 20                          BIT PPU_STATUS
0CEA4                           
0CEA4                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0CEA4 BD 00 03                          LDA ppu_buffer,x
0CEA7 8D 06 20                          STA PPU_ADDR
0CEAA E8                                INX
0CEAB BD 00 03                          LDA ppu_buffer,x
0CEAE 8D 06 20                          STA PPU_ADDR
0CEB1                           
0CEB1                                   ;; Write ppu_buffer data to PPU_ADDR
0CEB1 E8                                INX
0CEB2 BD 00 03                          LDA ppu_buffer,x
0CEB5 8D 07 20                          STA PPU_DATA
0CEB8                           
0CEB8                                   ;; Check if updating is done (eg. X is at pointer)
0CEB8 E8                                INX
0CEB9 E4 2A                             CPX ppu_buffer_pointer
0CEBB F0 03                             BEQ +
0CEBD 4C A1 CE                      JMP -
0CEC0                           +
0CEC0                           
0CEC0                               ;; Reset ppu buffer update and pointer
0CEC0 A9 00                         LDA #$00
0CEC2 85 29                         STA ppu_buffer_update
0CEC4 85 2A                         STA ppu_buffer_pointer
0CEC6                               
0CEC6                               ;; Reset scrolling position
0CEC6 8D 05 20                      STA PPU_SCROLL
0CEC9 8D 05 20                      STA PPU_SCROLL
0CECC                           
0CECC                               ;; Restore ppu control register and mask
0CECC A9 90                         LDA #%10010000
0CECE 8D 00 20                      STA PPU_CTRL
0CED1 A5 12                         LDA soft_ppu_mask
0CED3 8D 01 20                      STA PPU_MASK
0CED6 A9 00                         LDA #$00
0CED8                           
0CED8                           ;; Continue other NMI stuff
0CED8                           +no_ppu_buffer_update:
0CED8                               .include "game/test/show_animation_nmi.asm"
0CED8                               ;; Reset sprite RAM, draw sprites
0CED8 8D 03 20                      STA OAM_ADDR
0CEDB A9 02                         LDA #$02
0CEDD 8D 14 40                      STA OAM_DMA
0CEE0                           
0CEE0 A0 04                         LDY #MAX_ANIMATIONS
0CEE2 A2 00                         LDX #$00
0CEE4                               -
0CEE4 BD 30 03                          LDA explosion_framecounter,x
0CEE7 F0 03                             BEQ +
0CEE9 DE 30 03                              DEC explosion_framecounter,x
0CEEC                                   +
0CEEC E8                                INX
0CEED 88                                DEY
0CEEE F0 03                             BEQ +done        
0CEF0 4C E4 CE                      JMP -
0CEF3                           +done:
0CEF3                               
0CEF3 A5 2D                         LDA nudge_counter
0CEF5 F0 02                         BEQ +
0CEF7 C6 2D                             DEC nudge_counter
0CEF9                               +
0CEF9                           
0CEF9                           ;; This is what happens when we forced nmi skip
0CEF9                           +force_skip_nmi:
0CEF9                           
0CEF9                               ;; Increase frame counters
0CEF9 E6 15                         INC frame_counter
0CEFB                           
0CEFB                               ;; reset ball_update_position
0CEFB A9 00                         LDA #$00
0CEFD 85 25                         STA ball_update_position
0CEFF                           
0CEFF                               ;; Don't skip next NMI request
0CEFF A9 00                         LDA #$00
0CF01 85 13                         STA skip_nmi
0CF03                           
0CF03                               ;; Restore X, Y and PC from stack
0CF03 28                            PLP
0CF04 68                            PLA
0CF05 A8                            TAY
0CF06 68                            PLA
0CF07 AA                            TAX
0CF08                           
0CF08                           +skip_nmi:
0CF08                               ;; Restore accumulator from stack
0CF08 68                            PLA
0CF09                           
0CF09                               ;; Return
0CF09 40                            RTI
0CF0A                           
0CF0A                           ;; IRQ handler (empty)
0CF0A                           IRQ:
0CF0A                               .include "interrupt/irq.asm"
0CF0A 40                            RTI0CF0B                           
0CF0B                           ;; Interrupt vectors
0CF0B 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 75 CE                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 0A CF                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
