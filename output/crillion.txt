	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; TEST MODE (comment to disable)
	                            TESTING = #1
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$74        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Timers 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           unfreeze_timer         .dsb 1
00042                           
00042                           ;; Current level (doubles as level select variable)
00042                           current_level          .dsb 1
00043                           
00043                           ;; Tile type the ball is currently colliding with
00043                           colliding_tile         .dsb 1
00044                           
00044                           ;; Number of blocks left on screen
00044                           blocks_left            .dsb 1
00045                           
00045                           ;; Sound control variables
00045                           max_noise              .dsb 1
00046                           sweep_noise            .dsb 1
00047                           current_noise          .dsb 1
00048                           noise_timer            .dsb 1
00049                           do_beeps               .dsb 1
0004A                           soft_pulse1            .dsb 1
0004B                           noise_muted            .dsb 1
0004C                           
0004C                           ;; Sound effect variables
0004C                           sfx_address            .dsb 2
0004E                           sfx_timer              .dsb 1
0004F                           
0004F                           ;; Additional NMI check for timed PPU fade
0004F                           check_nmi              .dsb 1
00050                           
00050                           
00050                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 FB C4                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 FB C4                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 42                         STA current_level
0C057 85 20                         STA ball_score
0C059 85 21                         STA ball_score+1
0C05B 85 22                         STA ball_score+2
0C05D 85 23                         STA ball_score+3
0C05F 85 24                         STA ball_score+4
0C061 85 25                         STA ball_score+5
0C063                           
0C063                           
0C063                           
0C063                           ;; Main game loop
0C063                           lbl_MainGameLoop:
0C063                               .include "game/main.asm"
0C063                           
0C063                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C063                           ;;
0C063                           ;; game/main.asm
0C063                           ;;
0C063                           ;; The main game loop content.
0C063                           ;;
0C063                           ;;
0C063                           
0C063                               ;; Reset sprite pointer every game loop
0C063 A9 00                         LDA #$00
0C065 85 3D                         STA sprite_ram_pointer
0C067                           
0C067                               ;; Store previous buttons
0C067 A5 0F                         LDA buttons_held
0C069 85 0E                         STA buttons_prev
0C06B                           
0C06B                               ;; Read controller input
0C06B 20 DE C4                      JSR sub_ReadController
0C06E                           
0C06E                               ;; Get buttons released
0C06E A5 0F                         LDA buttons_held
0C070 49 FF                         EOR #$FF
0C072 25 0E                         AND buttons_prev
0C074 85 11                         STA buttons_released
0C076                           
0C076                               ;; Set buttons pressed
0C076 A5 0E                         LDA buttons_prev
0C078 49 FF                         EOR #$FF
0C07A 25 0F                         AND buttons_held
0C07C 85 10                         STA buttons_pressed
0C07E                           
0C07E                               ;; Load screen?
0C07E A5 38                         LDA screen_mode
0C080 29 80                         AND #%10000000
0C082 F0 1E                         BEQ +screenLoaded
0C084                           
0C084                               ;; Get screen type to load
0C084 A5 38                         LDA screen_mode
0C086 29 03                         AND #%00000011
0C088 A8                            TAY
0C089                               
0C089                               ;; Get address to load screen type from
0C089 B9 29 D2                      LDA tbl_LoadScreenLo,y
0C08C 85 0C                         STA pointer
0C08E B9 26 D2                      LDA tbl_LoadScreenHi,y
0C091 85 0D                         STA pointer+1
0C093                           
0C093                               ;; Load screen
0C093 20 7E C6                      JSR sub_DisableRendering
0C096 20 BE C9                      JSR sub_JumpToPointer
0C099 20 92 C6                      JSR sub_EnableRendering
0C09C                               
0C09C                               ;; Don't load screen anymore next loop
0C09C A5 38                         LDA screen_mode
0C09E 29 7F                         AND #%01111111
0C0A0 85 38                         STA screen_mode
0C0A2                               
0C0A2                           
0C0A2                           +screenLoaded:
0C0A2                               ;; Check if we're on the game screen
0C0A2 A5 38                         LDA screen_mode
0C0A4 C9 01                         CMP #IS_GAME_SCREEN
0C0A6 F0 03                         BEQ +
0C0A8 4C 42 C3                          JMP +checkNextScreen
0C0AB                               +
0C0AB                           
0C0AB                               ;; Load sprite 0 in place
0C0AB A9 28                         LDA #$28
0C0AD 8D 00 02                      STA ADDR_SPRITERAM
0C0B0 A9 0F                         LDA #$0F
0C0B2 8D 01 02                      STA ADDR_SPRITERAM+1
0C0B5 A9 22                         LDA #$22
0C0B7 8D 02 02                      STA ADDR_SPRITERAM+2
0C0BA A9 F8                         LDA #$F8
0C0BC 8D 03 02                      STA ADDR_SPRITERAM+3
0C0BF A9 04                         LDA #$04
0C0C1 85 3D                         STA sprite_ram_pointer
0C0C3                           
0C0C3                               ;; We're on the game screen
0C0C3                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0C3 A5 35                         LDA sprites_update_position
0C0C5 F0 03                         BEQ +
0C0C7 4C A8 C2                          JMP +skipSpriteMovement
0C0CA                               +
0C0CA                           
0C0CA                               ;; Check if ball is frozen
0C0CA A5 37                         LDA ball_flags
0C0CC 29 04                         AND #BALL_IS_FROZEN
0C0CE F0 03                         BEQ +
0C0D0 4C 67 C2                          JMP +skipBallMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Move the ball
0C0D3                               .include "game/include/main/move_ball.asm"
0C0D3                           
0C0D3                               ;; Check if ball goes up or down
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 10                         AND #BALL_MOVES_DOWN
0C0D7 F0 2B                         BEQ +moveBallUp
0C0D9                           
0C0D9                           
0C0D9                           +moveBallDown:
0C0D9                               ;; update the low byte
0C0D9 A5 1A                         LDA ball_ypos_lo
0C0DB 85 1C                         STA ball_ypos_lo_prev
0C0DD 18                            CLC
0C0DE 69 74                         ADC #BALL_SPEED_LO
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2                           
0C0E2                               ;; update the high byte with carry
0C0E2 A5 19                         LDA ball_ypos_hi
0C0E4 85 1B                         STA ball_ypos_hi_prev
0C0E6 69 01                         ADC #BALL_SPEED_HI
0C0E8 85 19                         STA ball_ypos_hi
0C0EA                               
0C0EA                               ;; Check bottom bound
0C0EA C9 C8                         CMP #BOUND_BOTTOM
0C0EC 90 3C                         BCC +checkHorizontalMovement
0C0EE F0 3A                         BEQ +checkHorizontalMovement
0C0F0                           
0C0F0                           
0C0F0                               ;; Change ball direction to "up"
0C0F0 A9 C8                         LDA #BOUND_BOTTOM
0C0F2 38                            SEC
0C0F3 E9 01                         SBC #$01
0C0F5 85 19                         STA ball_ypos_hi
0C0F7 A9 00                         LDA #$00
0C0F9 85 1A                         STA ball_ypos_lo
0C0FB A5 37                         LDA ball_flags
0C0FD 29 EF                         AND #MOVE_BALL_UP
0C0FF 85 37                         STA ball_flags
0C101 4C 2A C1                      JMP +checkHorizontalMovement
0C104                           
0C104                           
0C104                           +moveBallUp:
0C104                               ;; update the low byte
0C104 A5 1A                         LDA ball_ypos_lo
0C106 85 1C                         STA ball_ypos_lo_prev
0C108 38                            SEC
0C109 E9 74                         SBC #BALL_SPEED_LO
0C10B 85 1A                         STA ball_ypos_lo
0C10D                           
0C10D                               ;; update the high byte with carry
0C10D A5 19                         LDA ball_ypos_hi
0C10F 85 1B                         STA ball_ypos_hi_prev
0C111 E9 01                         SBC #BALL_SPEED_HI
0C113 85 19                         STA ball_ypos_hi
0C115                               
0C115                               ;; Check top bound
0C115 C9 30                         CMP #BOUND_TOP
0C117 B0 11                         BCS +checkHorizontalMovement
0C119                           
0C119                               ;; Change ball direction to "down"
0C119 A9 30                         LDA #BOUND_TOP
0C11B 18                            CLC
0C11C 69 01                         ADC #$01
0C11E 85 19                         STA ball_ypos_hi
0C120 A9 00                         LDA #$00
0C122 85 1A                         STA ball_ypos_lo
0C124 A5 37                         LDA ball_flags
0C126 09 10                         ORA #MOVE_BALL_DOWN
0C128 85 37                         STA ball_flags
0C12A                           
0C12A                           
0C12A                           +checkHorizontalMovement:
0C12A                           
0C12A                               ;; Check if ball is being nudged
0C12A A5 3E                         LDA nudge_timer
0C12C D0 41                         BNE +doneBallMovement
0C12E                           
0C12E                               ;; Check if left button is held
0C12E A5 0F                         LDA buttons_held
0C130 29 02                         AND #BUTTON_LEFT
0C132 F0 1B                         BEQ +
0C134                                   ;; update the low byte
0C134 A5 18                             LDA ball_xpos_lo
0C136 38                                SEC
0C137 E9 74                             SBC #BALL_SPEED_LO
0C139 85 18                             STA ball_xpos_lo
0C13B                           
0C13B                                   ;; update the high byte
0C13B A5 17                             LDA ball_xpos_hi
0C13D E9 01                             SBC #BALL_SPEED_HI
0C13F 85 17                             STA ball_xpos_hi
0C141                                   
0C141                                   ;; Check left bound
0C141 C9 10                             CMP #BOUND_LEFT
0C143 B0 2A                             BCS +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge right and set nudge timer
0C145 A5 37                             LDA ball_flags
0C147 09 02                             ORA #NUDGE_BALL_RIGHT
0C149 20 B7 C9                          JSR sub_InitiateNudge
0C14C                           
0C14C 4C 6F C1                          JMP +doneBallMovement        
0C14F                               +
0C14F                           
0C14F                               ;; Check if right button is held
0C14F A5 0F                         LDA buttons_held
0C151 29 01                         AND #BUTTON_RIGHT
0C153 F0 1A                         BEQ +
0C155                                   ;; update the low byte
0C155 A5 18                             LDA ball_xpos_lo
0C157 18                                CLC
0C158 69 74                             ADC #BALL_SPEED_LO
0C15A 85 18                             STA ball_xpos_lo
0C15C                           
0C15C                                   ;; update the high byte
0C15C A5 17                             LDA ball_xpos_hi
0C15E 69 01                             ADC #BALL_SPEED_HI
0C160 85 17                             STA ball_xpos_hi     
0C162                           
0C162                                  ;; Check right bound
0C162 C9 E8                             CMP #BOUND_RIGHT
0C164 90 09                             BCC +doneBallMovement
0C166 F0 07                             BEQ +doneBallMovement
0C168                                   
0C168                                   ;; Set flag to nudge left and set nudge timer
0C168 A5 37                             LDA ball_flags
0C16A 29 FD                             AND #NUDGE_BALL_LEFT
0C16C 20 B7 C9                          JSR sub_InitiateNudge
0C16F                               +
0C16F                           
0C16F                           
0C16F                           +doneBallMovement:
0C16F                           
0C16F                               ;; Check nudge
0C16F A5 3E                         LDA nudge_timer
0C171 F0 23                         BEQ +doneBallNudging
0C173 A5 37                             LDA ball_flags
0C175 29 02                             AND #NUDGE_BALL_RIGHT
0C177 F0 10                             BEQ +nudgeBallLeft
0C179                                   
0C179                                       ;; update the low byte
0C179 A5 18                                 LDA ball_xpos_lo
0C17B 18                                    CLC
0C17C 69 74                                 ADC #BALL_SPEED_LO
0C17E 85 18                                 STA ball_xpos_lo
0C180                           
0C180                                       ;; update the high byte
0C180 A5 17                                 LDA ball_xpos_hi
0C182 69 01                                 ADC #BALL_SPEED_HI
0C184 85 17                                 STA ball_xpos_hi  
0C186 4C 96 C1                              JMP +doneBallNudging
0C189                                   +nudgeBallLeft:
0C189                                   
0C189                                   ;; update the low byte
0C189 A5 18                             LDA ball_xpos_lo
0C18B 38                                SEC
0C18C E9 74                             SBC #BALL_SPEED_LO
0C18E 85 18                             STA ball_xpos_lo
0C190                           
0C190                                   ;; update the high byte
0C190 A5 17                             LDA ball_xpos_hi
0C192 E9 01                             SBC #BALL_SPEED_HI
0C194 85 17                             STA ball_xpos_hi
0C196                               +doneBallNudging:
0C196                           
0C196                               ;; Don't update position again until next frame
0C196                               ;; (moved to after move block routine)
0C196                           
0C196                           +doneBallHandling:
0C196                           
0C196                               
0C196                               ;; Do collision detection
0C196                               .include "game/include/main/collision_detection.asm"
0C196                           
0C196                               ;; Get ball's x-left, x-center, x-right position
0C196 A5 17                         LDA ball_xpos_hi
0C198 18                            CLC
0C199 69 F0                         ADC #BALL_LEFT_WGA
0C19B 85 2F                         STA ball_left
0C19D 18                            CLC
0C19E 69 04                         ADC #BALL_HALF_SIZE
0C1A0 85 30                         STA ball_center
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 31                         STA ball_right
0C1A7                           
0C1A7                               ;; Get ball's y-top, y-middle, y-bottom position
0C1A7 A5 19                         LDA ball_ypos_hi
0C1A9 18                            CLC
0C1AA 69 D0                         ADC #BALL_TOP_WGA
0C1AC 85 32                         STA ball_top
0C1AE 18                            CLC
0C1AF 69 04                         ADC #BALL_HALF_SIZE
0C1B1 85 33                         STA ball_middle
0C1B3 18                            CLC
0C1B4 69 04                         ADC #BALL_HALF_SIZE
0C1B6 85 34                         STA ball_bottom
0C1B8                           
0C1B8                           +checkRightCollision:
0C1B8                               ;; Check if ball moves right
0C1B8                               ;; No need to check nudging here as that will never collide with a tile
0C1B8 A5 0F                         LDA buttons_held
0C1BA 29 01                         AND #BUTTON_RIGHT
0C1BC F0 20                         BEQ +checkLeftCollision
0C1BE                           
0C1BE                               ;; Check tile at right position
0C1BE A5 33                         LDA ball_middle
0C1C0 85 00                         STA temp
0C1C2 A5 31                         LDA ball_right
0C1C4 85 01                         STA temp+1
0C1C6 20 66 C6                      JSR sub_ConvertXYToTileType
0C1C9 29 01                         AND #TILE_IS_SOLID
0C1CB F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1CD                           
0C1CD                               ;; Nudge ball and evaluate tile type
0C1CD A9 01                         LDA #$01
0C1CF 85 36                         STA move_block_space_to_check
0C1D1 A5 37                         LDA ball_flags
0C1D3 29 FD                         AND #NUDGE_BALL_LEFT
0C1D5 20 B7 C9                      JSR sub_InitiateNudge
0C1D8 20 F4 C7                      JSR sub_EvaluateTileType
0C1DB 4C 01 C2                      JMP +checkTopCollision
0C1DE                           
0C1DE                           +checkLeftCollision:
0C1DE                               ;; Check if ball moves right
0C1DE                               ;; No need to check nudging here as that will never collide with a tile
0C1DE A5 0F                         LDA buttons_held
0C1E0 29 02                         AND #BUTTON_LEFT
0C1E2 F0 1D                         BEQ +checkTopCollision
0C1E4                           
0C1E4                               ;; Check tile at right position
0C1E4 A5 33                         LDA ball_middle
0C1E6 85 00                         STA temp
0C1E8 A5 2F                         LDA ball_left
0C1EA 85 01                         STA temp+1
0C1EC 20 66 C6                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 0E                         BEQ +checkTopCollision
0C1F3                           
0C1F3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1F3 A9 FF                         LDA #$FF
0C1F5 85 36                         STA move_block_space_to_check
0C1F7 A5 37                         LDA ball_flags
0C1F9 09 02                         ORA #NUDGE_BALL_RIGHT
0C1FB 20 B7 C9                      JSR sub_InitiateNudge
0C1FE 20 F4 C7                      JSR sub_EvaluateTileType
0C201                               
0C201                               
0C201                           +checkTopCollision:
0C201                               ;; Check if ball moves up
0C201 A5 37                         LDA ball_flags
0C203 29 10                         AND #BALL_MOVES_DOWN
0C205 D0 27                         BNE +checkBottomCollision
0C207                           
0C207                               ;; Check tile at top position
0C207 A5 32                         LDA ball_top
0C209 85 00                         STA temp
0C20B A5 30                         LDA ball_center
0C20D 85 01                         STA temp+1
0C20F 20 66 C6                      JSR sub_ConvertXYToTileType
0C212 29 01                         AND #TILE_IS_SOLID
0C214 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C216                           
0C216                               ;; Tile is solid; move ball down and evaluate tile type
0C216 A5 1C                         LDA ball_ypos_lo_prev
0C218 85 1A                         STA ball_ypos_lo
0C21A A5 1B                         LDA ball_ypos_hi_prev
0C21C 85 19                         STA ball_ypos_hi
0C21E A5 37                         LDA ball_flags
0C220 09 10                         ORA #MOVE_BALL_DOWN
0C222 85 37                         STA ball_flags
0C224                           
0C224 A9 F0                         LDA #$F0 ; which is -16
0C226 85 36                         STA move_block_space_to_check
0C228 20 F4 C7                      JSR sub_EvaluateTileType
0C22B 4C 52 C2                      JMP +doneCheckingCollision
0C22E                           
0C22E                           +checkBottomCollision:
0C22E                               ;; No movement check needed: since ball is not moving up, it must move down
0C22E                           
0C22E                               ;; Check tile at bottom position
0C22E A5 34                         LDA ball_bottom
0C230 85 00                         STA temp
0C232 A5 30                         LDA ball_center
0C234 85 01                         STA temp+1
0C236 20 66 C6                      JSR sub_ConvertXYToTileType
0C239 29 01                         AND #TILE_IS_SOLID
0C23B F0 15                         BEQ +doneCheckingCollision
0C23D                           
0C23D                               ;; Tile is solid; move ball up and evaluate tile type
0C23D A5 1C                         LDA ball_ypos_lo_prev
0C23F 85 1A                         STA ball_ypos_lo
0C241 A5 1B                         LDA ball_ypos_hi_prev
0C243 85 19                         STA ball_ypos_hi
0C245 A5 37                         LDA ball_flags
0C247 29 EF                         AND #MOVE_BALL_UP
0C249 85 37                         STA ball_flags
0C24B                           
0C24B A9 10                         LDA #$10
0C24D 85 36                         STA move_block_space_to_check
0C24F 20 F4 C7                      JSR sub_EvaluateTileType
0C252                           
0C252                           +doneCheckingCollision:
0C252                           
0C252                               
0C252                               ;; Update bonus
0C252                               .include "game/include/main/update_bonus.asm"
0C252                           
0C252                           ;; Update the bonus counter on screen
0C252                           
0C252                               ;; If bonus = 000, skip decreasing
0C252 A5 2C                         LDA ball_bonus
0C254 05 2D                         ORA ball_bonus+1
0C256 05 2E                         ORA ball_bonus+2
0C258 F0 0D                         BEQ +done
0C25A                           
0C25A                               ;; Check if bonus timer is done yet
0C25A A5 3F                         LDA bonus_timer
0C25C D0 09                         BNE +done
0C25E                           
0C25E                               ;; Bonus timer is done
0C25E                               ;; Reset bonus timer
0C25E A9 08                         LDA #BONUS_FRAMES
0C260 85 3F                         STA bonus_timer
0C262                               
0C262                               ;; Subtract one from ball bonus ones
0C262 A2 01                         LDX #$01
0C264 20 6D D0                      JSR sub_SubtractXFromBonus
0C267                           
0C267                           +done:
0C267                           
0C267                               
0C267                               ;; Input test for beeps (disabled)
0C267                               ;; .include "game/test/input_beeps.asm"
0C267                           
0C267                               ;; Input test for explosion sound effect (disabled)
0C267                               ;; .include "game/test/input_explosion.asm"
0C267                           
0C267                           
0C267                           +skipBallMovement:
0C267                               ;; Move blocks a pixel up/down/left/right
0C267                               .include "game/include/main/move_blocks.asm"
0C267                           
0C267                               ;; Set up block loop
0C267 A2 04                         LDX #MAX_ANIMATIONS
0C269                           -moveBlocksLoop:
0C269 CA                            DEX
0C26A                           
0C26A                               ;; Check if block is still moving
0C26A BD 80 03                      LDA move_block_timer,x
0C26D F0 33                         BEQ +checkNext
0C26F                               
0C26F                               ;; Check if block is done moving
0C26F C9 01                         CMP #$01
0C271 D0 0B                         BNE +
0C273                                   ;; If so, draw a tile and remove the sprite
0C273 20 BF C6                          JSR sub_DrawMoveTile
0C276 A9 00                             LDA #$00
0C278 9D 80 03                          STA move_block_timer,x
0C27B 4C A2 C2                          JMP +checkNext
0C27E                               +
0C27E                               
0C27E                               ;; Check in which direction the block is moving
0C27E                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C27E BD 88 03                      LDA move_block_flags,x
0C281 29 03                         AND #%00000011
0C283 F0 14                         BEQ +movingDown
0C285 C9 01                         CMP #$01
0C287 F0 0A                         BEQ +movingUp
0C289 C9 02                         CMP #$02
0C28B F0 12                         BEQ +movingRight
0C28D                               
0C28D                               ;; Move block in correct direction
0C28D                               +movingLeft:
0C28D DE 78 03                      DEC move_block_x,x
0C290 4C A2 C2                      JMP +checkNext
0C293                           
0C293                               +movingUp:
0C293 DE 7C 03                      DEC move_block_y,x
0C296 4C A2 C2                      JMP +checkNext
0C299                           
0C299                               +movingDown:
0C299 FE 7C 03                      INC move_block_y,x
0C29C 4C A2 C2                      JMP +checkNext
0C29F                           
0C29F                               +movingRight:
0C29F FE 78 03                      INC move_block_x,x
0C2A2                           
0C2A2                               ;; Check next block (if any left)
0C2A2                               +checkNext:
0C2A2 E0 00                         CPX #$00
0C2A4 D0 C3                         BNE -moveBlocksLoop
0C2A6                               
0C2A6                               ;; Don't update sprites
0C2A6 E6 35                         INC sprites_update_position
0C2A8                           
0C2A8                           
0C2A8                           +skipSpriteMovement:
0C2A8                               ;; Testing timed PPU scroll concept (disabled)
0C2A8                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2A8                           
0C2A8                               ;; Check if ball is dead
0C2A8 A5 37                         LDA ball_flags
0C2AA 29 01                         AND #BALL_IS_DEAD
0C2AC F0 03                         BEQ +
0C2AE 4C D0 C2                          JMP +ballIsDead
0C2B1                               +
0C2B1                               
0C2B1                               ;; Add ball to sprite buffer
0C2B1 A6 3D                         LDX sprite_ram_pointer
0C2B3 A5 19                         LDA ball_ypos_hi
0C2B5 9D 00 02                      STA ADDR_SPRITERAM,x
0C2B8 E8                            INX
0C2B9 A9 01                         LDA #BALL_TILE_CHR
0C2BB 9D 00 02                      STA ADDR_SPRITERAM,x
0C2BE E8                            INX
0C2BF A9 00                         LDA #BALL_ATTR
0C2C1 9D 00 02                      STA ADDR_SPRITERAM,x
0C2C4 E8                            INX
0C2C5 A5 17                         LDA ball_xpos_hi
0C2C7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2CA E8                            INX
0C2CB 86 3D                         STX sprite_ram_pointer
0C2CD 4C E1 C2                      JMP +drawBlocks
0C2D0                           
0C2D0                           +ballIsDead:
0C2D0                               ;; Check if kill timer has reset
0C2D0 A5 40                         LDA kill_timer
0C2D2 F0 03                         BEQ +
0C2D4 4C E1 C2                          JMP +drawBlocks
0C2D7                               +
0C2D7                               
0C2D7                               ;; Take a live
0C2D7 C6 1F                         DEC ball_lives
0C2D9 D0 03                         BNE +
0C2DB                                   ;; If no lives left, initiate game over sequence
0C2DB 4C 94 C3                          JMP lbl_GameOver
0C2DE                               +
0C2DE                               
0C2DE                               ;; Reload current level
0C2DE 4C AB C4                      JMP lbl_InitiateLevelLoad
0C2E1                           
0C2E1                           
0C2E1                           +drawBlocks:
0C2E1                               ;; Draw moving block(s, if any)
0C2E1                               .include "game/include/main/draw_blocks.asm"
0C2E1                           
0C2E1                           ;; Handle movement of move blocks
0C2E1                           
0C2E1                               ;; Set up a loop
0C2E1 A0 04                         LDY #MAX_ANIMATIONS
0C2E3                           -drawBlocksLoop:
0C2E3 88                            DEY
0C2E4                           
0C2E4                               ;; If timer is zero, check the next move block
0C2E4 B9 80 03                      LDA move_block_timer,y
0C2E7 F0 52                         BEQ +nextMoveBlock
0C2E9                               
0C2E9                               ;; Get current sprite pointer
0C2E9 A6 3D                         LDX sprite_ram_pointer
0C2EB                           
0C2EB                               ;; Draw the sprites on screen
0C2EB B9 7C 03                      LDA move_block_y,y
0C2EE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F1 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C2F4 18                            CLC
0C2F5 69 08                         ADC #$08
0C2F7 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C2FA 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C2FD E8                            INX
0C2FE                           
0C2FE A9 52                         LDA #$52 ; Top left chr id
0C300 9D 00 02                      STA ADDR_SPRITERAM,x
0C303 A9 53                         LDA #$53 ; Top right chr id
0C305 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C308 A9 62                         LDA #$62 ; Bottom left chr id
0C30A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C30D A9 63                         LDA #$63 ; Bottom right chr id
0C30F 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C312 E8                            INX
0C313                           
0C313 A9 00                         LDA #BALL_ATTR
0C315 9D 00 02                      STA ADDR_SPRITERAM,x
0C318 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C31B 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C31E 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C321 E8                            INX
0C322                           
0C322 B9 78 03                      LDA move_block_x,y
0C325 9D 00 02                      STA ADDR_SPRITERAM,x
0C328 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C32B 18                            CLC
0C32C 69 08                         ADC #$08
0C32E 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C331 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C334                           
0C334                               ;; Update sprite RAM pointer
0C334 A5 3D                         LDA sprite_ram_pointer
0C336 18                            CLC
0C337 69 10                         ADC #$10
0C339 85 3D                         STA sprite_ram_pointer
0C33B                           
0C33B                           
0C33B                           
0C33B                           +nextMoveBlock:
0C33B                               ;; Check the next move block
0C33B C0 00                         CPY #$00
0C33D D0 A4                         BNE -drawBlocksLoop
0C33F                           
0C33F 4C 8E C3                      JMP +doneScreenLoad
0C342                           
0C342                           
0C342                           
0C342                           +checkNextScreen:
0C342                           
0C342                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C342                               ;; Upon pressing START, the selected level will start
0C342                               .include "game/include/main/select_level.asm"
0C342                           
0C342                               ;; Change level number on start screen
0C342 A5 10                         LDA buttons_pressed
0C344 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C346 F0 3C                         BEQ +checkStartPress
0C348                           
0C348                                   ;; Select next level (1, 5, 9, 13, 17)
0C348 A5 42                             LDA current_level
0C34A 18                                CLC
0C34B 69 04                             ADC #$04
0C34D C9 14                             CMP #$14
0C34F D0 02                             BNE +
0C351 A9 00                                 LDA #$00
0C353                                   +
0C353 85 42                             STA current_level
0C355                                   
0C355                                   ;; Convert level number to two-byte value
0C355 A9 00                             LDA #$00
0C357 85 03                             STA temp+3
0C359 A5 42                             LDA current_level
0C35B 18                                CLC
0C35C 69 01                             ADC #$01
0C35E                           
0C35E                               -
0C35E C9 0A                             CMP #$0A
0C360 90 08                             BCC +
0C362 E6 03                                 INC temp+3
0C364 38                                    SEC
0C365 E9 0A                                 SBC #$0A
0C367 4C 5E C3                              JMP -
0C36A                                   +
0C36A                           
0C36A                                   ;; Add level number to PPU buffer
0C36A 18                                CLC
0C36B 69 01                             ADC #$01
0C36D 85 02                             STA temp+2
0C36F A9 20                             LDA #$20
0C371 85 00                             STA temp
0C373 A9 D0                             LDA #$D0
0C375 85 01                             STA temp+1
0C377 20 BC D0                          JSR sub_WriteByteToPPUBuffer
0C37A                                   
0C37A C6 01                             DEC temp+1
0C37C A4 03                             LDY temp+3
0C37E C8                                INY
0C37F 84 02                             STY temp+2
0C381 20 BC D0                          JSR sub_WriteByteToPPUBuffer
0C384                                   
0C384                               +checkStartPress:
0C384                           
0C384                           
0C384                           
0C384                               ;; If START button is pressed
0C384 A5 10                         LDA buttons_pressed
0C386 29 10                         AND #BUTTON_START
0C388 F0 04                         BEQ +
0C38A                                   ;; Start the level
0C38A A9 81                             LDA #LOAD_GAME_SCREEN
0C38C 85 38                             STA screen_mode
0C38E                               +
0C38E                           
0C38E                           
0C38E                           
0C38E                           +doneScreenLoad:
0C38E                           
0C38E                               ;; Load animations (if any)
0C38E                               ;; and sprite clean-up
0C38E 20 C1 C9                      JSR sub_LoadAnimations
0C391                           
0C391 4C 63 C0                      JMP lbl_MainGameLoop
0C394                           
0C394                           ;; Following sequences are outside main game loop
0C394                           .include "game/include/main/game_over.asm"
0C394                           
0C394                           ;; Game over sequence
0C394                           lbl_GameOver:
0C394                           
0C394                               ;; Disable noise channel
0C394 A9 00                         LDA #$00
0C396 8D 15 40                      STA APU_STATUS
0C399 8D 0C 40                      STA NOISE_VOLUME
0C39C                               
0C39C                               ;; Do blinds effect
0C39C 20 6D C5                      JSR sub_BlindsEffect
0C39F                           
0C39F                               ;; Disable draw after HUD to disable screen
0C39F 20 F2 C4                      JSR sub_WaitForNMI
0C3A2                               -
0C3A2 AD 02 20                          LDA PPU_STATUS
0C3A5 29 40                             AND #SPRITE_0_HIT
0C3A7 D0 F9                         BNE -
0C3A9                               -
0C3A9 AD 02 20                          LDA PPU_STATUS
0C3AC 29 40                             AND #SPRITE_0_HIT
0C3AE F0 F9                         BEQ -
0C3B0 A9 00                         LDA #$00
0C3B2 8D 01 20                      STA PPU_MASK
0C3B5                           
0C3B5                               ;; Remove game area from view
0C3B5 2C 02 20                      BIT PPU_STATUS
0C3B8 A9 20                         LDA #$20
0C3BA 8D 06 20                      STA PPU_ADDR
0C3BD A9 A0                         LDA #$A0
0C3BF 8D 06 20                      STA PPU_ADDR
0C3C2 A9 00                         LDA #$00
0C3C4 A2 16                         LDX #$16
0C3C6                               -xLoop:
0C3C6 A0 20                             LDY #$20
0C3C8                                   -yLoop:
0C3C8 8D 07 20                              STA PPU_DATA
0C3CB 88                                    DEY
0C3CC D0 FA                             BNE -yLoop
0C3CE CA                                DEX
0C3CF D0 F5                         BNE -xLoop
0C3D1                               
0C3D1                               ;; Pause for a little while
0C3D1 A2 18                         LDX #$18
0C3D3                               -
0C3D3 20 F2 C4                          JSR sub_WaitForNMI
0C3D6 CA                                DEX
0C3D7 D0 FA                         BNE -
0C3D9                                       
0C3D9                               ;; Do flash effect
0C3D9 20 6A C9                      JSR sub_FlashEffect
0C3DC                           
0C3DC                               ;; Draw GAME OVER tiles over game screen
0C3DC A9 21                         LDA #$21
0C3DE 85 00                         STA temp
0C3E0 A9 EB                         LDA #$EB
0C3E2 85 01                         STA temp+1
0C3E4                           
0C3E4 A2 00                         LDX #$00
0C3E6                               -gameOverTileLoop:
0C3E6 BD E8 D9                          LDA tbl_GameOver,x
0C3E9 85 02                             STA temp+2
0C3EB 20 BC D0                          JSR sub_WriteByteToPPUBuffer
0C3EE E6 01                             INC temp+1
0C3F0 E8                                INX
0C3F1 E0 0A                             CPX #$0A
0C3F3 D0 F1                         BNE -gameOverTileLoop
0C3F5                               
0C3F5                               ;; Update GAME OVER attributes on game screen
0C3F5 A9 23                         LDA #$23
0C3F7 85 00                         STA temp
0C3F9 A9 DA                         LDA #$DA
0C3FB 85 01                         STA temp+1
0C3FD A9 AA                         LDA #$AA
0C3FF 85 02                         STA temp+2
0C401 A2 04                         LDX #$04
0C403                               -
0C403 20 BC D0                          JSR sub_WriteByteToPPUBuffer
0C406 E6 01                             INC temp+1
0C408 CA                                DEX
0C409 D0 F8                         BNE -
0C40B 20 F2 C4                      JSR sub_WaitForNMI
0C40E                               
0C40E                              
0C40E                               ;; If player score is larger than high score
0C40E                               ;; Overwrite high score with player score
0C40E                               ;; [@TODO]
0C40E                               
0C40E                               
0C40E                               ;; If player presses either A or START, (soft) reset the game
0C40E                               -checkController:
0C40E 20 DE C4                          JSR sub_ReadController
0C411 A5 0F                             LDA buttons_held
0C413 29 90                             AND #%10010000
0C415 F0 F7                         BEQ -checkController
0C417 4C 4B C0                      JMP lbl_SoftReset
0C41A                           
0C41A                           .include "game/include/main/level_win.asm"
0C41A                           
0C41A                           ;; Handling of level win state
0C41A                           lbl_LevelWin:
0C41A                           
0C41A                               ;; Freeze the ball
0C41A A5 37                         LDA ball_flags
0C41C 09 04                         ORA #FREEZE_BALL
0C41E 85 37                         STA ball_flags
0C420                           
0C420                               ;; Disable noise channel
0C420 A9 01                         LDA #$01
0C422 85 4B                         STA noise_muted
0C424                               
0C424                               ;; Wait a few frames
0C424 A2 18                         LDX #$18
0C426 20 AA D0                      JSR sub_WaitXFrames
0C429                           
0C429                               ;; Set null tile color to yellow
0C429 A9 3F                         LDA #$3F
0C42B 85 00                         STA temp
0C42D A9 02                         LDA #$02
0C42F 85 01                         STA temp+1
0C431 A9 38                         LDA #$38
0C433 85 02                         STA temp+2
0C435 20 BC D0                      JSR sub_WriteByteToPPUBuffer
0C438                               
0C438                               ;; Quick and dirty way to remove ball from screen
0C438 A9 EF                         LDA #$EF
0C43A 8D 04 02                      STA ADDR_SPRITERAM+4
0C43D 8D 05 02                      STA ADDR_SPRITERAM+5
0C440 8D 06 02                      STA ADDR_SPRITERAM+6
0C443 8D 07 02                      STA ADDR_SPRITERAM+7
0C446                               
0C446                               ;; Initiate frequency beeps (@TODO)
0C446                               
0C446                               ;; Wait a few frames
0C446 A2 10                         LDX #$10
0C448 20 AA D0                      JSR sub_WaitXFrames
0C44B                               
0C44B                               ;; Restore null tile color to dark blue
0C44B A9 3F                         LDA #$3F
0C44D 85 00                         STA temp
0C44F A9 02                         LDA #$02
0C451 85 01                         STA temp+1
0C453 A9 12                         LDA #$12
0C455 85 02                         STA temp+2
0C457 20 BC D0                      JSR sub_WriteByteToPPUBuffer
0C45A                           
0C45A                               ;; Wait a few frames
0C45A A2 2D                         LDX #$2D
0C45C 20 AA D0                      JSR sub_WaitXFrames
0C45F                               
0C45F                           
0C45F                               ;; Play the end level sweep sound effect, and
0C45F                               ;; initiate bonus score routine
0C45F A9 B8                         LDA #$B8
0C461 85 4A                         STA soft_pulse1
0C463                           
0C463 A9 01                         LDA #$01
0C465 8D 15 40                      STA APU_STATUS
0C468 85 49                         STA do_beeps
0C46A                           
0C46A                               -bonusPointsLoop:
0C46A                                   ;; Check how many bonus points to subtract
0C46A                                   ;; (either the max, or what's left)
0C46A A5 2C                             LDA ball_bonus
0C46C 05 2D                             ORA ball_bonus+1
0C46E D0 06                             BNE +fullBonus
0C470 A5 2E                             LDA ball_bonus+2
0C472 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C474 90 02                             BCC +partBonus
0C476                           
0C476                                   +fullBonus:
0C476 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C478                                   +partBonus:
0C478                           
0C478                                   ;; Put value that's added to score on the stack
0C478 AA                                TAX
0C479 BD 44 DA                          LDA tbl_BonusToScore,x
0C47C 48                                PHA
0C47D                           
0C47D                                   ;; Subtract X-register from bonus
0C47D 20 6D D0                          JSR sub_SubtractXFromBonus
0C480                           
0C480                                   ;; Get value from stack and add it to the score
0C480 68                                PLA
0C481 20 01 C5                          JSR sub_AddAccumulatorToScore
0C484                           
0C484                                   ;; Wait for NMI twice
0C484 20 F2 C4                          JSR sub_WaitForNMI
0C487 20 F2 C4                          JSR sub_WaitForNMI
0C48A                           
0C48A                                   ;; Check if bonus countdown is done
0C48A A5 2C                             LDA ball_bonus
0C48C 05 2D                             ORA ball_bonus+1
0C48E 05 2E                             ORA ball_bonus+2
0C490 D0 D8                         BNE -bonusPointsLoop
0C492                           
0C492                               ;; fade out the beeping
0C492 A2 08                         LDX #$08
0C494                               -fadeOutLoop:
0C494 20 F2 C4                          JSR sub_WaitForNMI
0C497 20 F2 C4                          JSR sub_WaitForNMI
0C49A C6 4A                             DEC soft_pulse1
0C49C CA                                DEX
0C49D D0 F5                         BNE -fadeOutLoop
0C49F                           
0C49F                               ;; Stop random beeping
0C49F A9 02                         LDA #$02
0C4A1 85 49                         STA do_beeps
0C4A3                               
0C4A3                               ;; Wait a few frames
0C4A3 A2 30                         LDX #$30
0C4A5 20 AA D0                      JSR sub_WaitXFrames
0C4A8                           
0C4A8                               ;; Load next level
0C4A8 4C AB C4                      JMP lbl_InitiateLevelLoad
0C4AB                               
0C4AB                           .include "game/include/main/initiate_level_load.asm"
0C4AB                           
0C4AB                           ;; Load level
0C4AB                           lbl_InitiateLevelLoad:
0C4AB                               
0C4AB                               ;; Blind out the screen
0C4AB 20 6D C5                      JSR sub_BlindsEffect
0C4AE                               
0C4AE                               ;; If ball is dead, (re)load current level
0C4AE                               ;; If ball is alive, load next level
0C4AE A5 37                         LDA ball_flags
0C4B0 29 01                         AND #BALL_IS_DEAD
0C4B2 D0 05                         BNE +
0C4B4 E6 42                             INC current_level
0C4B6 4C BF C4                          JMP +loadLevel
0C4B9                               +
0C4B9                               
0C4B9                               ;; Revive ball
0C4B9 A5 37                         LDA ball_flags
0C4BB 29 FE                         AND #REVIVE_BALL
0C4BD 85 37                         STA ball_flags
0C4BF                           
0C4BF                           +loadLevel:
0C4BF                               ;; This loops back to level 1 after level 25 for now,
0C4BF                               ;; as a proper game ending is yet to be introduced.
0C4BF A5 42                         LDA current_level
0C4C1 C9 19                         CMP #25
0C4C3 D0 04                         BNE +
0C4C5 A9 00                             LDA #$00
0C4C7 85 42                             STA current_level
0C4C9                               +
0C4C9                               
0C4C9                               ;; Tell the game to load the level screen on the next loop.
0C4C9 A9 81                         LDA #LOAD_GAME_SCREEN
0C4CB 85 38                         STA screen_mode
0C4CD                           
0C4CD                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C4CD 4C 63 C0                      JMP lbl_MainGameLoop0C4D0                           
0C4D0                           
0C4D0                           ;; Subroutines
0C4D0                           .include "include/subroutines.asm"
0C4D0                           
0C4D0                           ;; RNG
0C4D0                           .include "subroutine/GetRandomNumber.asm"
0C4D0                           
0C4D0                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4D0                           ;;
0C4D0                           ;; subroutine/GetRandomNumber.asm
0C4D0                           ;;
0C4D0                           ;; Simple and fast random number generator by White Flame.
0C4D0                           ;;
0C4D0                           ;; Set random_seed to an arbitrary number to randomize between
0C4D0                           ;; gaming sessions, for instance using the frame timer upon
0C4D0                           ;; pressing START on the intro screen.
0C4D0                           ;;
0C4D0                           ;;     ;; IF START PRESSED:
0C4D0                           ;;     LDA frame_counter
0C4D0                           ;;     STA random_seed
0C4D0                           ;;
0C4D0                           ;; Source:
0C4D0                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C4D0                           ;;
0C4D0                           ;;
0C4D0                           
0C4D0                           sub_GetRandomNumber:
0C4D0                               ;; Force EOR if random_seed is zero
0C4D0 A5 16                         LDA random_seed
0C4D2 F0 05                         BEQ +doEor
0C4D4                           
0C4D4                               ;; Shift left, and EOR if the high bit is set
0C4D4 0A                            ASL
0C4D5 F0 04                         BEQ +noEor
0C4D7 90 02                         BCC +noEor
0C4D9                           
0C4D9                           +doEor:
0C4D9 49 1D                         EOR #$1D
0C4DB                           
0C4DB                           +noEor:
0C4DB 85 16                         STA random_seed
0C4DD                           
0C4DD 60                            RTS
0C4DE                           
0C4DE                           
0C4DE                           ;; Read controller input
0C4DE                           .include "subroutine/ReadController.asm"
0C4DE                           
0C4DE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4DE                           ;;
0C4DE                           ;; subroutine/ReadController.asm
0C4DE                           ;;
0C4DE                           ;; Subroutine that polls the controller and stores the input
0C4DE                           ;; buttons in a variable. This version only handles controller
0C4DE                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C4DE                           ;;
0C4DE                           ;;
0C4DE                           
0C4DE                           sub_ReadController:
0C4DE                           
0C4DE                               ;; Set strobe bit
0C4DE A9 01                         LDA #$01
0C4E0 8D 16 40                      STA JOYPAD_1
0C4E3                           
0C4E3                               ;; Set up ring timer
0C4E3 85 0F                         STA buttons_held
0C4E5                           
0C4E5                               ;; Clear strobe bit
0C4E5 4A                            LSR
0C4E6 8D 16 40                      STA JOYPAD_1
0C4E9                           
0C4E9                               ;; Loop through button presses
0C4E9                               -
0C4E9 AD 16 40                          LDA JOYPAD_1
0C4EC 4A                                LSR
0C4ED 26 0F                             ROL buttons_held
0C4EF                           
0C4EF                               ;; Check if ring timer is done
0C4EF 90 F8                         BCC -
0C4F1                           
0C4F1                               ;; Return from subroutine
0C4F1 60                            RTS
0C4F2                           
0C4F2                           
0C4F2                           ;; vBlank/NMI wait
0C4F2                           .include "subroutine/WaitForNMI.asm"
0C4F2                           
0C4F2                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4F2                           ;;
0C4F2                           ;; subroutine/WaitForVBlank.asm
0C4F2                           ;;
0C4F2                           ;; Subroutine that essentially pauses script execution until
0C4F2                           ;; vBlank happens.
0C4F2                           ;;
0C4F2                           ;;
0C4F2                           
0C4F2                           sub_WaitForNMI:
0C4F2 A9 01                         LDA #$01
0C4F4 85 4F                         STA check_nmi
0C4F6                               -
0C4F6 A5 4F                             LDA check_nmi
0C4F8 D0 FC                         BNE -
0C4FA 60                            RTS
0C4FB                           
0C4FB                           .include "subroutine/WaitForVBlank.asm"
0C4FB                           
0C4FB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4FB                           ;;
0C4FB                           ;; subroutine/WaitForVBlank.asm
0C4FB                           ;;
0C4FB                           ;; Subroutine that essentially pauses script execution until
0C4FB                           ;; vBlank happens.
0C4FB                           ;;
0C4FB                           ;;
0C4FB                           
0C4FB                           sub_WaitForVBlank:
0C4FB 2C 02 20                      BIT $2002
0C4FE 10 FB                         BPL sub_WaitForVBlank
0C500 60                            RTS
0C501                           
0C501                           
0C501                           ;; Game specific subroutines
0C501                           .include "game/include/subroutines.asm"
0C501                           
0C501                           ;; additional game-specific subroutines go here
0C501                           
0C501                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C501                           
0C501                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C501                           ;;
0C501                           ;;  sub_AddAccumulatorToScore.asm
0C501                           ;;
0C501                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C501                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C501                           ;;  actual score.
0C501                           ;;
0C501                           ;;
0C501                           
0C501                           
0C501                           sub_AddAccumulatorToScore:
0C501                           
0C501                               ;; Clear old add_to_score
0C501 A2 05                         LDX #$05
0C503 A0 00                         LDY #$00
0C505                               -
0C505 94 26                             STY add_to_score,x
0C507 CA                                DEX
0C508 10 FB                         BPL -
0C50A                           
0C50A                               ;; Set accumulator to add_to_score variables
0C50A                               ;; Check and update 100s
0C50A                               -checkHundreds:
0C50A C9 64                             CMP #100
0C50C 90 08                             BCC +checkTens
0C50E 38                                    SEC
0C50F E9 64                                 SBC #100
0C511 E6 29                                 INC add_to_score+3
0C513 4C 0A C5                              JMP -checkHundreds
0C516                                   +checkTens:
0C516                           
0C516                               ;; Check and update 10s
0C516                               -checkTens:
0C516 C9 0A                             CMP #10
0C518 90 08                             BCC +setOnes
0C51A 38                                    SEC
0C51B E9 0A                                 SBC #10
0C51D E6 2A                                 INC add_to_score+4
0C51F 4C 16 C5                              JMP -checkTens
0C522                                   +setOnes:
0C522                           
0C522                               ;; We're left with 1s
0C522 85 2B                         STA add_to_score+5
0C524                           
0C524                               ;; Byte for byte, add add_to_score to ball_score
0C524 A9 00                         LDA #$00
0C526 85 39                         STA ppu_buffer_update
0C528 A4 3A                         LDY ppu_buffer_pointer
0C52A A2 05                         LDX #$05
0C52C                               -
0C52C B5 26                             LDA add_to_score,x
0C52E 18                                CLC
0C52F 75 20                             ADC ball_score,x
0C531 C9 0A                             CMP #10
0C533 90 05                             BCC +
0C535 38                                    SEC
0C536 E9 0A                                 SBC #10
0C538 F6 1F                                 INC ball_score-1,x
0C53A                                   +
0C53A                                   
0C53A                                   ;; Update new score digit
0C53A 95 20                             STA ball_score,x
0C53C                           
0C53C                                   ;; Update score tile in PPU
0C53C A9 20                             LDA #$20
0C53E 99 00 03                          STA ppu_buffer,y
0C541 C8                                INY
0C542 8A                                TXA
0C543 18                                CLC
0C544 69 83                             ADC #$83
0C546 99 00 03                          STA ppu_buffer,y
0C549 C8                                INY
0C54A B5 20                             LDA ball_score,x
0C54C 18                                CLC
0C54D 69 01                             ADC #$01
0C54F 99 00 03                          STA ppu_buffer,y
0C552 C8                                INY
0C553                           
0C553                                   ;; Check next digit (if any left)
0C553 CA                                DEX
0C554 30 03                             BMI +done
0C556 4C 2C C5                      JMP -
0C559                           
0C559                           +done:
0C559                               ;; Update PPU buffer pointer and status
0C559 84 3A                         STY ppu_buffer_pointer
0C55B A9 01                         LDA #$01
0C55D 85 39                         STA ppu_buffer_update
0C55F                           
0C55F                               ;; Done: return 
0C55F 60                            RTS
0C560                           
0C560                           .include "game/subroutine/BackgroundNoise.asm"
0C560                           
0C560                           ;; Play background noise
0C560                           sub_BackgroundNoise:
0C560 A9 32                         LDA #$32
0C562 8D 0C 40                      STA NOISE_VOLUME
0C565 A9 0E                         LDA #$0E
0C567 8D 0E 40                      STA NOISE_PERIOD
0C56A 85 47                         STA current_noise
0C56C 60                            RTS
0C56D                           
0C56D                           .include "game/subroutine/BlindsEffect.asm"
0C56D                           
0C56D                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C56D                           sub_BlindsEffect:
0C56D                           
0C56D                               ;; Set up loop fading
0C56D A9 00                         LDA #$00
0C56F 85 07                         STA temp+7
0C571 A0 08                         LDY #$08
0C573                               -fadeLoop:
0C573 84 08                             STY temp+8
0C575                           
0C575                                   ;; Wait for NMI to pass
0C575 20 F2 C4                          JSR sub_WaitForNMI
0C578                                   
0C578                                   ;; Now wait for No-sprite 0
0C578                                   -
0C578 AD 02 20                              LDA PPU_STATUS
0C57B 29 40                                 AND #SPRITE_0_HIT
0C57D D0 F9                             BNE -
0C57F                               
0C57F                                   ;; Now wait for Sprite 0
0C57F                                   -
0C57F AD 02 20                              LDA PPU_STATUS
0C582 29 40                                 AND #SPRITE_0_HIT
0C584 F0 F9                             BEQ -
0C586                                       
0C586                                   ;; Setup tile row loop
0C586 A0 16                             LDY #22
0C588                                   -tileLoop:
0C588                                   
0C588                                       ;; Disable drawing
0C588 A5 12                                 LDA soft_ppu_mask
0C58A 29 F7                                 AND #%11110111
0C58C 8D 01 20                              STA PPU_MASK
0C58F                                       
0C58F                                       ;; Set up scanline loop
0C58F A2 08                                 LDX #$08
0C591                                       -scanlineLoop:
0C591 E4 08                                     CPX temp+8
0C593 D0 0A                                     BNE +wasteTime
0C595                                           
0C595                                           ;; Restore drawing
0C595 A5 12                                     LDA soft_ppu_mask
0C597 09 08                                     ORA #%00001000
0C599 8D 01 20                                  STA PPU_MASK
0C59C 4C A5 C5                                  JMP +wasteMoreTime
0C59F                           
0C59F                                           ;; Waste 12 frames
0C59F                                           +wasteTime:
0C59F E6 09                                     INC temp+9   ;+5
0C5A1 C6 09                                     DEC temp+9   ;+5
0C5A3 49 00                                     EOR #$00     ;+2
0C5A5                                           
0C5A5                                           ;; Waste about 100 frames
0C5A5                                           +wasteMoreTime:
0C5A5                                           
0C5A5 86 01                                     STX temp+1     ;  3 down, 97 to go
0C5A7 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C5A9                                           -wasteLoop:
0C5A9 EA                                            NOP
0C5AA 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C5AC CA                                            DEX        ;  5+5L down,  95-5L to go
0C5AD D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C5AF                           
0C5AF A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C5B1 CA                                        DEX            ;  9+8L down, 91-8L to go
0C5B2 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C5B4                           
0C5B4 88                                    DEY
0C5B5 D0 D1                             BNE -tileLoop
0C5B7                           
0C5B7 A4 08                             LDY temp+8
0C5B9                                   
0C5B9 E6 07                             INC temp+7
0C5BB A5 07                             LDA temp+7
0C5BD C9 02                             CMP #$02
0C5BF D0 B2                             BNE -fadeLoop
0C5C1                           
0C5C1 A9 00                             LDA #$00
0C5C3 85 07                             STA temp+7
0C5C5 88                                DEY
0C5C6 D0 AB                         BNE -fadeLoop
0C5C8                               
0C5C8 60                            RTS
0C5C9                           
0C5C9                           .include "game/subroutine/ClearScreen.asm"
0C5C9                           
0C5C9                           ;; Subroutine to clear the screen
0C5C9                           ;; If it's a game screen, add noise
0C5C9                           
0C5C9                           sub_ClearScreen:
0C5C9                               ;; Check of game screen or not
0C5C9 A5 38                         LDA screen_mode
0C5CB 29 03                         AND #CHECK_SCREEN_MODE
0C5CD C9 01                         CMP #IS_GAME_SCREEN
0C5CF F0 02                         BEQ +
0C5D1 A9 00                             LDA #$00
0C5D3                               +
0C5D3 85 01                         STA temp+1
0C5D5                               
0C5D5                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C5D5 2C 02 20                      BIT PPU_STATUS
0C5D8 A9 20                         LDA #$20
0C5DA 8D 06 20                      STA PPU_ADDR
0C5DD A9 00                         LDA #$00
0C5DF 8D 06 20                      STA PPU_ADDR
0C5E2                               
0C5E2                               ;; Set up tile to draw and loop
0C5E2 85 00                         STA temp
0C5E4 AA                            TAX
0C5E5 A8                            TAY
0C5E6                           
0C5E6                               -     
0C5E6                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C5E6 A5 00                             LDA temp
0C5E8 8D 07 20                          STA PPU_DATA
0C5EB                           
0C5EB                                   ;; Check if we should draw noise next. Noise is drawn if:
0C5EB                                   ;; - Screen mode is game screen
0C5EB                                   ;; - Y between #$06 and #$19 (inclusive)
0C5EB                                   ;; - X between #$02 and #$1D (inclusive)
0C5EB                                   
0C5EB                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C5EB A5 01                             LDA temp+1
0C5ED F0 1C                             BEQ +nextTileInRow
0C5EF                                   
0C5EF                                   ;; If Y < $6, skip the check
0C5EF C0 06                             CPY #$06
0C5F1 90 18                             BCC +nextTileInRow
0C5F3                                   
0C5F3                                   ;; If X < $1, skip the check
0C5F3 E0 01                             CPX #$01
0C5F5 90 14                             BCC +nextTileInRow
0C5F7                                   
0C5F7                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C5F7 E0 1D                             CPX #$1D
0C5F9 D0 04                             BNE +
0C5FB A9 00                                 LDA #$00
0C5FD 85 00                                 STA temp
0C5FF                                   +
0C5FF B0 0A                             BCS +nextTileInRow
0C601                                   
0C601                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C601 20 D0 C4                          JSR sub_GetRandomNumber
0C604 29 07                             AND #%00000111
0C606 18                                CLC
0C607 69 68                             ADC #$68
0C609 85 00                             STA temp
0C60B                           
0C60B                           +nextTileInRow:
0C60B                                   
0C60B                                   ;; Check if a row has been done. If not, draw the next
0C60B E8                                INX
0C60C E0 20                             CPX #$20
0C60E D0 D6                             BNE -
0C610                                   
0C610                                   ;; Go to the next row (if any left)
0C610 A2 00                             LDX #00
0C612 C8                                INY
0C613                                   
0C613                                   ;; If Y is 1A, skip noise tile check until done drawing
0C613 C0 1A                             CPY #$1A
0C615 D0 04                             BNE +
0C617 A9 00                                 LDA #$00
0C619 85 01                                 STA temp+1
0C61B                                   +
0C61B                                   
0C61B C0 1E                             CPY #$1E
0C61D D0 C7                         BNE -
0C61F                           
0C61F                               ;; Clear attribute table
0C61F A9 23                         LDA #$23
0C621 8D 06 20                      STA PPU_ADDR
0C624 A9 C0                         LDA #$C0
0C626 8D 06 20                      STA PPU_ADDR
0C629 A9 00                         LDA #$00
0C62B A2 40                         LDX #$40
0C62D                               -
0C62D 8D 07 20                          STA PPU_DATA
0C630 CA                                DEX
0C631 D0 FA                         BNE -
0C633                               
0C633 60                            RTS
0C634                           
0C634                           .include "game/subroutine/ColorizeBall.asm"
0C634                           
0C634                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C634                           ;;
0C634                           ;;  Subroutine: ColorizeBall
0C634                           ;;
0C634                           ;;  Applies the color set through ball_flags to the ball sprite.
0C634                           ;;  Expects ball_flags to be in the accumulator
0C634                           ;;
0C634                           
0C634                           
0C634                           sub_ColorizeBall:
0C634                           
0C634                               ;; Get color from ball_flags
0C634 4A                            LSR
0C635 4A                            LSR
0C636 4A                            LSR
0C637 4A                            LSR
0C638 4A                            LSR
0C639 AA                            TAX
0C63A                           
0C63A                               ;; Add new light color of ball to PPU palette
0C63A A9 3F                         LDA #$3F
0C63C 85 00                         STA temp
0C63E A9 11                         LDA #$11
0C640 85 01                         STA temp+1
0C642 BD 20 D2                      LDA tbl_BallColorLight,x
0C645 85 02                         STA temp+2
0C647 20 BC D0                      JSR sub_WriteByteToPPUBuffer
0C64A                               
0C64A                               ;; Add new dark color of ball to PPU palette
0C64A E6 01                         INC temp+1
0C64C BD 1A D2                      LDA tbl_BallColorDark,x
0C64F 85 02                         STA temp+2
0C651 20 BC D0                      JSR sub_WriteByteToPPUBuffer
0C654                               
0C654 60                            RTS
0C655                           
0C655                           .include "game/subroutine/ColorsMatch.asm"
0C655                           
0C655                           ;; Subroutine to check if ball color matches colliding tile color
0C655                           
0C655                           sub_ColorsMatch:
0C655                               ;; Save tile color in temp variable
0C655 A5 43                         LDA colliding_tile
0C657 29 0E                         AND #%00001110
0C659 85 00                         STA temp
0C65B                           
0C65B                               ;; Get ball color
0C65B A5 37                         LDA ball_flags
0C65D 29 E0                         AND #%11100000
0C65F 4A                            LSR
0C660 4A                            LSR
0C661 4A                            LSR
0C662 4A                            LSR
0C663                           
0C663                               ;; Compare with tile color
0C663 C5 00                         CMP temp
0C665 60                            RTS
0C666                           
0C666                           .include "game/subroutine/ConvertXYToTileType.asm"
0C666                           
0C666                           ;; Subroutine to convert the ball's position to a tile type
0C666                           ;; - Expects temp to be y-position of ball within game area
0C666                           ;; - Expects temp+1 to be x-position of ball within game area
0C666                           ;; - Puts result in accumulator and zp variable
0C666                           ;; - Corrupts X-register
0C666                           
0C666                           sub_ConvertXYToTileType:
0C666 A5 01                         LDA temp+1
0C668 4A                            LSR
0C669 4A                            LSR
0C66A 4A                            LSR
0C66B 4A                            LSR
0C66C 85 09                         STA temp+9
0C66E A5 00                         LDA temp
0C670 29 F0                         AND #%11110000
0C672 18                            CLC
0C673 65 09                         ADC temp+9
0C675 85 09                         STA temp+9
0C677 AA                            TAX
0C678 BD 00 04                      LDA tile_type, x
0C67B 85 43                         STA colliding_tile
0C67D 60                            RTS
0C67E                           
0C67E                           .include "game/subroutine/DisableEnableRendering.asm"
0C67E                           
0C67E                           ;; Subroutines to disable or enable screen rendering
0C67E                           
0C67E                           sub_DisableRendering:
0C67E                               ;; Force NMI skip, disable rendering
0C67E A9 01                     	LDA #$01
0C680 85 14                     	STA force_skip_nmi
0C682 20 FB C4                      JSR sub_WaitForVBlank
0C685 A5 12                         LDA soft_ppu_mask
0C687 29 E7                         AND #%11100111
0C689 8D 01 20                      STA PPU_MASK
0C68C 85 12                         STA soft_ppu_mask
0C68E 20 FB C4                      JSR sub_WaitForVBlank
0C691 60                            RTS
0C692                           
0C692                           sub_EnableRendering:
0C692                               ;; Enable rendering
0C692 A9 00                     	LDA #$00
0C694 8D 05 20                  	STA PPU_SCROLL
0C697 8D 05 20                  	STA PPU_SCROLL
0C69A 20 FB C4                      JSR sub_WaitForVBlank
0C69D 85 14                     	STA force_skip_nmi
0C69F A5 12                         LDA soft_ppu_mask
0C6A1 09 18                         ORA #%00011000
0C6A3 85 12                         STA soft_ppu_mask
0C6A5 8D 01 20                      STA PPU_MASK
0C6A8 20 FB C4                      JSR sub_WaitForVBlank
0C6AB 60                            RTS
0C6AC                           
0C6AC                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C6AC                           
0C6AC                           ;; Draw a tile from the logo on the intro screen
0C6AC                           sub_drawIntroScreenLogoTile:
0C6AC B9 02 D1                      LDA tbl_IntroScreenLogoChr,y
0C6AF C9 60                         CMP #$60
0C6B1 D0 08                         BNE +
0C6B3 20 D0 C4                          JSR sub_GetRandomNumber
0C6B6 29 07                             AND #$07
0C6B8 18                                CLC
0C6B9 69 60                             ADC #$60
0C6BB                               +
0C6BB 8D 07 20                      STA PPU_DATA
0C6BE 60                            RTS
0C6BF                           
0C6BF                           .include "game/subroutine/DrawMoveTile.asm"
0C6BF                           
0C6BF                           ;; Draw the move tile as follows:
0C6BF                           ;;
0C6BF                           ;;  1 2
0C6BF                           ;;  3 4 5
0C6BF                           ;;    6 7
0C6BF                           ;;
0C6BF                           ;; (1,2,3,4) is the move block itself
0C6BF                           ;; (5,6,7) are shades unless that tile is solid
0C6BF                           
0C6BF                           ;; X holds the move block sprite slot
0C6BF                           
0C6BF                           sub_DrawMoveTile:
0C6BF                           
0C6BF                               ;; Get tile type index from sprite x and y values
0C6BF                               ;; and store it in a temp variable
0C6BF BD 78 03                      LDA move_block_x,x
0C6C2 18                            CLC
0C6C3 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C6C5 4A                            LSR
0C6C6 4A                            LSR
0C6C7 4A                            LSR
0C6C8 4A                            LSR
0C6C9 85 09                         STA temp+9
0C6CB BD 7C 03                      LDA move_block_y,x
0C6CE 18                            CLC
0C6CF 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C6D1 29 F0                         AND #%11110000
0C6D3 18                            CLC
0C6D4 65 09                         ADC temp+9
0C6D6 85 09                         STA temp+9
0C6D8 A8                            TAY
0C6D9                               
0C6D9                               ;; Add move tile data on the new tile location
0C6D9 BD 84 03                      LDA move_block_tile_type,x
0C6DC 99 00 04                      STA tile_type,y
0C6DF                           
0C6DF                               ;; Draw the original tile type in the ppu buffer
0C6DF                               ;; - get PPU address to write to (temp, temp+1)
0C6DF 8A                            TXA
0C6E0 48                            PHA
0C6E1 A6 09                         LDX temp+9
0C6E3 20 88 C9                      JSR sub_GetPPUAddrFromYXIndex
0C6E6 68                            PLA
0C6E7 AA                            TAX
0C6E8                               
0C6E8                               ;; - based on color, select tile 42 or 4A for top left
0C6E8 BD 88 03                      LDA move_block_flags,x
0C6EB 4A                            LSR
0C6EC 4A                            LSR
0C6ED 4A                            LSR
0C6EE 4A                            LSR
0C6EF 4A                            LSR
0C6F0 A8                            TAY
0C6F1 B9 E1 D9                      LDA tbl_MoveBlockTopLeftTile,y
0C6F4 85 08                         STA temp+8
0C6F6                               
0C6F6                               ;; - save palette ID in temp+6
0C6F6 98                            TYA
0C6F7 4A                            LSR
0C6F8 85 06                         STA temp+6
0C6FA                               
0C6FA                               ;; Prepare PPU buffer
0C6FA A4 3A                         LDY ppu_buffer_pointer
0C6FC A9 00                         LDA #$00
0C6FE 85 39                         STA ppu_buffer_update
0C700                               
0C700                               ;; Draw tile 1 (top left tile of move block)
0C700 20 E1 C7                      JSR sub_DrawTileTemp018
0C703                           
0C703                               
0C703                               ;; Draw tile 2 (top right tile of move block)
0C703 E6 01                         INC temp+1
0C705 E6 08                         INC temp+8
0C707 20 E1 C7                      JSR sub_DrawTileTemp018
0C70A                           
0C70A                               ;; Draw tile 3 (bottom left tile of move block)
0C70A A5 01                         LDA temp+1
0C70C 18                            CLC
0C70D 69 1F                         ADC #$1F
0C70F 85 01                         STA temp+1
0C711 A5 00                         LDA temp
0C713 69 00                         ADC #$00
0C715 85 00                         STA temp
0C717 A5 08                         LDA temp+8
0C719 18                            CLC
0C71A 69 0F                         ADC #$0F
0C71C 85 08                         STA temp+8
0C71E 20 E1 C7                      JSR sub_DrawTileTemp018
0C721                           
0C721                               ;; Draw tile 4 (bottom right tile of move block)
0C721 E6 01                         INC temp+1
0C723 E6 08                         INC temp+8
0C725 20 E1 C7                      JSR sub_DrawTileTemp018
0C728                           
0C728                               ;; Load tile type offset in X register
0C728 8A                            TXA
0C729 48                            PHA
0C72A A6 09                         LDX temp+9
0C72C                               
0C72C                               ;; Load shade tile in temp+8
0C72C A9 00                         LDA #$00
0C72E 85 08                         STA temp+8
0C730                           
0C730                               ;; Draw tile 5 (right shade) unless tile is solid
0C730 E6 01                         INC temp+1
0C732                               
0C732 8A                            TXA
0C733 29 0F                         AND #%00001111
0C735 C9 0D                         CMP #$0D
0C737 F0 0A                         BEQ +nextTile
0C739                           
0C739 BD 01 04                      LDA tile_type+1,x
0C73C 29 01                         AND #%00000001
0C73E D0 03                         BNE +nextTile
0C740                               
0C740 20 E1 C7                      JSR sub_DrawTileTemp018
0C743                               
0C743                           
0C743                           +nextTile:
0C743                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C743 A5 01                         LDA temp+1
0C745 18                            CLC
0C746 69 1F                         ADC #$1F
0C748 85 01                         STA temp+1
0C74A A5 00                         LDA temp
0C74C 69 00                         ADC #$00
0C74E 85 00                         STA temp
0C750                           
0C750 8A                            TXA
0C751 29 F0                         AND #%11110000
0C753 C9 90                         CMP #$90
0C755 F0 0A                         BEQ +nextTile
0C757                           
0C757 BD 10 04                      LDA tile_type+16,x
0C75A 29 01                         AND #%00000001
0C75C D0 03                         BNE +nextTile
0C75E                               
0C75E 20 E1 C7                      JSR sub_DrawTileTemp018
0C761                           
0C761                               
0C761                           +nextTile:
0C761                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C761 E6 01                         INC temp+1
0C763                           
0C763 8A                            TXA
0C764 29 F0                         AND #%11110000
0C766 C9 90                         CMP #$90
0C768 F0 11                         BEQ +setTileAttributes
0C76A                               
0C76A 8A                            TXA
0C76B 29 0F                         AND #%00001111
0C76D C9 0D                         CMP #$0D
0C76F F0 0A                         BEQ +setTileAttributes
0C771                               
0C771 BD 11 04                      LDA tile_type+17,x
0C774 29 01                         AND #%00000001
0C776 D0 03                         BNE +setTileAttributes
0C778                               
0C778 20 E1 C7                      JSR sub_DrawTileTemp018
0C77B                               
0C77B                           
0C77B                           +setTileAttributes:
0C77B                               ;; Update attribute table accordingly through ppu buffer
0C77B                               ;; - PPU buffer high byte
0C77B 20 43 D0                      JSR sub_SetTileAttributeAddress
0C77E                           
0C77E 8A                            TXA
0C77F 29 10                         AND #%00010000
0C781 F0 05                         BEQ +        
0C783 A9 F0                             LDA #%11110000
0C785 4C 8A C7                          JMP ++
0C788                               +
0C788 A9 0F                         LDA #%00001111
0C78A                               ++
0C78A 85 02                         STA temp+2
0C78C                               
0C78C 8A                            TXA
0C78D 29 01                         AND #%00000001
0C78F F0 07                         BEQ +
0C791 A5 02                             LDA temp+2
0C793 09 CC                             ORA #%11001100
0C795 4C 9C C7                          JMP ++
0C798                               +
0C798 A5 02                         LDA temp+2
0C79A 09 33                         ORA #%00110011
0C79C                               ++
0C79C 85 02                         STA temp+2
0C79E                               
0C79E C9 FC                         CMP #%11111100
0C7A0 F0 22                         BEQ +continue
0C7A2                               
0C7A2 C9 F3                         CMP #%11110011
0C7A4 D0 09                         BNE +
0C7A6 A5 06                             LDA temp+6
0C7A8 0A                                ASL
0C7A9 0A                                ASL
0C7AA 85 06                             STA temp+6
0C7AC 4C C4 C7                          JMP +continue
0C7AF                               +
0C7AF                               
0C7AF C9 CF                         CMP #%11001111
0C7B1 D0 0A                         BNE +
0C7B3 A6 06                             LDX temp+6
0C7B5 BD 84 D9                          LDA tbl_Times16,x
0C7B8 85 06                             STA temp+6
0C7BA 4C C4 C7                          JMP +continue
0C7BD                               +
0C7BD                               
0C7BD A6 06                         LDX temp+6
0C7BF BD 94 D9                      LDA tbl_Times64,x
0C7C2 85 06                         STA temp+6
0C7C4                                   
0C7C4                           +continue:
0C7C4 A5 00                         LDA temp
0C7C6 38                            SEC
0C7C7 E9 C0                         SBC #$C0
0C7C9 AA                            TAX
0C7CA BD A0 04                      LDA tile_attributes,x
0C7CD 25 02                         AND temp+2
0C7CF 05 06                         ORA temp+6
0C7D1 9D A0 04                      STA tile_attributes,x
0C7D4 99 00 03                      STA ppu_buffer,y
0C7D7 C8                            INY
0C7D8                           
0C7D8                               ;; Restore original X
0C7D8 68                            PLA
0C7D9 AA                            TAX
0C7DA                               
0C7DA                               ;; Update PPU buffer
0C7DA 84 3A                         STY ppu_buffer_pointer
0C7DC A9 01                         LDA #$01
0C7DE 85 39                         STA ppu_buffer_update
0C7E0                           
0C7E0                               ;; Return
0C7E0 60                            RTS
0C7E1                           
0C7E1                           .include "game/subroutine/DrawTileTemp018.asm"
0C7E1                           
0C7E1                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C7E1                           
0C7E1                           sub_DrawTileTemp018:
0C7E1 A5 00                         LDA temp
0C7E3 99 00 03                      STA ppu_buffer,y
0C7E6 C8                            INY
0C7E7 A5 01                         LDA temp+1
0C7E9 99 00 03                      STA ppu_buffer,y
0C7EC C8                            INY
0C7ED A5 08                         LDA temp+8
0C7EF 99 00 03                      STA ppu_buffer,y
0C7F2 C8                            INY
0C7F3 60                            RTS
0C7F4                           
0C7F4                           .include "game/subroutine/EvaluateTileType.asm"
0C7F4                           
0C7F4                           ;; Subroutine to evaluate the colliding tile type and take its
0C7F4                           ;; corresponding action (move block, kill player, ...)
0C7F4                           ;; - Expects X-register to be the tile_type offset
0C7F4                           ;; - Uses zp variable colliding_tile
0C7F4                           
0C7F4                           sub_EvaluateTileType:
0C7F4                           
0C7F4                               ;; Check if collided tile is a color block
0C7F4 A5 43                         LDA colliding_tile
0C7F6 29 80                         AND #IS_COLOR_BLOCK
0C7F8 D0 03                         BNE +
0C7FA 4C 63 C8                          JMP +checkIfPaintBlock
0C7FD                               +
0C7FD                               
0C7FD                               ;; It's a color block. Check if the colors match
0C7FD 20 55 C6                      JSR sub_ColorsMatch
0C800 F0 06                         BEQ +
0C802                                   ;; Colors don't match
0C802                                   ;; Play bounce sound effect
0C802 A2 02                             LDX #SFX_BOUNCE
0C804 20 BE CE                          JSR sub_PreloadSfxFromX
0C807                                   
0C807                                   ;; Return
0C807 60                                RTS
0C808                               +
0C808                           
0C808                               ;; Colors match; destroy color block
0C808                               
0C808                               ;; Convert the metatile offset value (which is in the X register)
0C808                               ;; to its corresponding address in PPU
0C808 20 88 C9                      JSR sub_GetPPUAddrFromYXIndex
0C80B                           
0C80B                               ;; Remove color block from screen by drawing a total
0C80B                               ;; of 7 tiles over it (shade included)
0C80B 20 CD CE                      JSR sub_RemoveBlockFromScreen
0C80E                               
0C80E                               ;; - Load destruction animation on tile
0C80E                               ;; Get most recent slot for explosion    
0C80E 8A                            TXA
0C80F 85 02                         STA temp+2
0C811 A6 3B                         LDX explosion_pointer
0C813                           
0C813                               ;; If 0, use max pointer value
0C813 D0 02                         BNE +
0C815 A2 04                             LDX #MAX_ANIMATIONS
0C817                               +
0C817                           
0C817                               ;; Decrease pointer by one
0C817 CA                            DEX
0C818 86 3B                         STX explosion_pointer
0C81A                           
0C81A                               ;; Load explosion data into RAM
0C81A A9 00                         LDA #$00
0C81C 9D 64 03                      STA explosion_currentframe,x
0C81F                           
0C81F A9 04                         LDA #ANIMATION_SPEED
0C821 9D 60 03                      STA explosion_timer,x
0C824                           
0C824 A5 02                         LDA temp+2
0C826 29 0F                         AND #%00001111
0C828 A8                            TAY
0C829 B9 84 D9                      LDA tbl_Times16,y
0C82C 18                            CLC
0C82D 69 0E                         ADC #$0E
0C82F 9D 6C 03                      STA explosion_x,x
0C832                           
0C832 A5 02                         LDA temp+2
0C834 29 F0                         AND #%11110000
0C836 18                            CLC
0C837 69 29                         ADC #$29
0C839 9D 70 03                      STA explosion_y,x
0C83C                           
0C83C A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C83E 9D 68 03                      STA explosion_attributes,x
0C841 A9 01                         LDA #$01
0C843 9D 74 03                      STA explosion_active,x
0C846                           
0C846 A5 02                         LDA temp+2
0C848 AA                            TAX
0C849                               
0C849                               
0C849                               ;; - Write #$00 in tile type ram (makes not-solid)
0C849 A9 00                         LDA #$00
0C84B 9D 00 04                      STA tile_type, x
0C84E                           
0C84E                           
0C84E                               ;; Add (80 + level number) to score
0C84E A5 42                         LDA current_level
0C850 18                            CLC
0C851 69 51                         ADC #81
0C853 20 01 C5                      JSR sub_AddAccumulatorToScore
0C856                           
0C856                           
0C856                               ;; Play thud sound effect
0C856 A2 01                         LDX #SFX_THUD
0C858 20 BE CE                      JSR sub_PreloadSfxFromX
0C85B                           
0C85B                           
0C85B                               ;; - If there are no color blocks left:
0C85B                               ;;   - Initiate level-win state
0C85B C6 44                         DEC blocks_left
0C85D D0 03                         BNE +
0C85F 4C 1A C4                          JMP lbl_LevelWin
0C862                               +
0C862                               
0C862 60                            RTS
0C863                           
0C863                           
0C863                           
0C863                           +checkIfPaintBlock:
0C863                           
0C863                               ;; Check if collided tile is a paint block
0C863 A5 43                         LDA colliding_tile
0C865 29 20                         AND #IS_PAINT_BLOCK
0C867 F0 1F                         BEQ +checkIfDeathBlock
0C869                                   ;; It's a paint block. Update ball color
0C869                                   ;; Save x-register
0C869 8A                                TXA
0C86A 48                                PHA
0C86B                           
0C86B                                   ;; Get tile color
0C86B A5 43                             LDA colliding_tile
0C86D 29 0E                             AND #%00001110
0C86F 0A                                ASL
0C870 0A                                ASL
0C871 0A                                ASL
0C872 0A                                ASL
0C873 85 00                             STA temp
0C875                           
0C875                                   ;; Apply tile color to ball
0C875 A5 37                             LDA ball_flags
0C877 29 1F                             AND #%00011111
0C879 05 00                             ORA temp
0C87B 85 37                             STA ball_flags
0C87D 20 34 C6                          JSR sub_ColorizeBall
0C880                           
0C880                                   ;; Play bounce sound effect
0C880 A2 02                             LDX #SFX_BOUNCE
0C882 20 BE CE                          JSR sub_PreloadSfxFromX
0C885                           
0C885                                   ;; Restore x-register
0C885 68                                PLA
0C886 AA                                TAX
0C887                           
0C887                                   ;; Return
0C887 60                                RTS
0C888                                   
0C888                                   
0C888                                   
0C888                           +checkIfDeathBlock:
0C888                           
0C888                               ;; Check if collided tile is a death block
0C888 A5 43                         LDA colliding_tile
0C88A 29 10                         AND #IS_DEATH_BLOCK
0C88C F0 3D                         BEQ +checkIfMoveBlock
0C88E                           
0C88E                                   ;; It is a death block
0C88E                                   ;; Freeze and kill player
0C88E A5 37                             LDA ball_flags
0C890 09 05                             ORA #%00000101
0C892 85 37                             STA ball_flags
0C894                                   
0C894                                   ;; Get free explosion slot
0C894 A6 3B                             LDX explosion_pointer
0C896 D0 02                             BNE +
0C898 A2 04                                 LDX #MAX_ANIMATIONS
0C89A                                   +
0C89A CA                                DEX
0C89B 86 3B                             STX explosion_pointer
0C89D                           
0C89D                                   ;; Load explosion data into RAM
0C89D A9 00                             LDA #$00
0C89F 9D 64 03                          STA explosion_currentframe,x
0C8A2                           
0C8A2 A9 04                             LDA #ANIMATION_SPEED
0C8A4 9D 60 03                          STA explosion_timer,x
0C8A7                           
0C8A7 A5 17                             LDA ball_xpos_hi
0C8A9 38                                SEC
0C8AA E9 08                             SBC #$08
0C8AC 9D 6C 03                          STA explosion_x,x
0C8AF                           
0C8AF A5 19                             LDA ball_ypos_hi
0C8B1 38                                SEC
0C8B2 E9 06                             SBC #$06
0C8B4 9D 70 03                          STA explosion_y,x
0C8B7                           
0C8B7 A9 01                             LDA #$01
0C8B9 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C8BC 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C8BF 85 4B                             STA noise_muted             ; mute background noise
0C8C1                                   
0C8C1                                   ;; Play explosion sound effect
0C8C1 A2 00                             LDX #SFX_EXPLOSION
0C8C3 20 BE CE                          JSR sub_PreloadSfxFromX
0C8C6                           
0C8C6                                   ;; Set kill timer
0C8C6 A9 60                             LDA #$60
0C8C8 85 40                             STA kill_timer
0C8CA                           
0C8CA                                   ;; Return
0C8CA 60                                RTS
0C8CB                           
0C8CB                           
0C8CB                           
0C8CB                           +checkIfMoveBlock:
0C8CB                           
0C8CB                               ;; Check if collided tile is a move block
0C8CB A5 43                         LDA colliding_tile
0C8CD 29 40                         AND #IS_MOVE_BLOCK
0C8CF D0 06                         BNE +
0C8D1                                   ;; Tile is not a move block
0C8D1                                   ;; Therefore, it is a solid wall
0C8D1                                   
0C8D1                                   ;; Play bounce sound effect
0C8D1 A2 02                             LDX #SFX_BOUNCE
0C8D3 20 BE CE                          JSR sub_PreloadSfxFromX
0C8D6                           
0C8D6                                   ;; Return
0C8D6 60                                RTS
0C8D7                               +
0C8D7                           
0C8D7                               ;; It is a move block. Check if colors match
0C8D7 20 55 C6                      JSR sub_ColorsMatch
0C8DA F0 06                         BEQ +
0C8DC                                   ;; Colors do not match
0C8DC                                   ;; Play bounce sound effect
0C8DC A2 02                             LDX #SFX_BOUNCE
0C8DE 20 BE CE                          JSR sub_PreloadSfxFromX
0C8E1                           
0C8E1                                   ;; Return
0C8E1 60                                RTS
0C8E2                               +
0C8E2                           
0C8E2                               ;; Colors match
0C8E2                               ;; - Check if next tile is within the playground
0C8E2                               ;; (push X onto stack as well)
0C8E2 8A                            TXA
0C8E3 48                            PHA
0C8E4 18                            CLC
0C8E5 65 36                         ADC move_block_space_to_check
0C8E7 AA                            TAX
0C8E8                               
0C8E8 29 0F                         AND #%00001111
0C8EA C9 0E                         CMP #$0E
0C8EC 90 03                         BCC +
0C8EE 4C 62 C9                          JMP +dontMoveBlock
0C8F1                               +
0C8F1 8A                            TXA
0C8F2 29 F0                         AND #%11110000
0C8F4 C9 A0                         CMP #$A0
0C8F6 D0 03                         BNE +
0C8F8 4C 62 C9                          JMP +dontMoveBlock
0C8FB                               +
0C8FB C9 F0                         CMP #$F0
0C8FD D0 03                         BNE +
0C8FF 4C 62 C9                          JMP +dontMoveBlock
0C902                               +
0C902                               
0C902                               ;; Check if the next tile is solid
0C902 BD 00 04                      LDA tile_type,x
0C905 29 01                         AND #TILE_IS_SOLID
0C907 F0 03                         BEQ +
0C909 4C 62 C9                          JMP +dontMoveBlock
0C90C                               +
0C90C                               
0C90C                               ;; Move block has room to move
0C90C                               ;; Pull original X from stack
0C90C 68                            PLA
0C90D AA                            TAX        
0C90E                               
0C90E                               ;; Add the tiles that need updating to ppu buffer, and
0C90E                               ;; update attribute table accordingly through ppu buffer
0C90E 20 88 C9                      JSR sub_GetPPUAddrFromYXIndex
0C911 20 CD CE                      JSR sub_RemoveBlockFromScreen
0C914                           
0C914                               ;; Store original tile type in temp variable
0C914 BD 00 04                      LDA tile_type,x
0C917 85 08                         STA temp+8
0C919                           
0C919                               ;; Write #$00 in tile type ram (makes not-solid)
0C919 A9 00                         LDA #$00
0C91B 9D 00 04                      STA tile_type,x
0C91E                           
0C91E                               ;; Add move tile sprite over the original tile
0C91E                               ;; - Store x in temp variable
0C91E 86 03                         STX temp+3
0C920                               
0C920                               ;; - Update move block pointer
0C920 A6 3C                         LDX move_block_pointer
0C922 D0 02                         BNE +
0C924 A2 04                             LDX #MAX_ANIMATIONS
0C926                               +
0C926 CA                            DEX
0C927 86 3C                         STX move_block_pointer
0C929                           
0C929                               ;; = Set move block tile type
0C929 A5 08                         LDA temp+8
0C92B 9D 84 03                      STA move_block_tile_type,x
0C92E                           
0C92E                               ;; - Set move block X position
0C92E A5 03                         LDA temp+3
0C930 29 0F                         AND #%00001111
0C932 A8                            TAY
0C933 C8                            INY
0C934 B9 84 D9                      LDA tbl_Times16,y
0C937 9D 78 03                      STA move_block_x,x
0C93A                               
0C93A                               ;; - Set move block Y position
0C93A A5 03                         LDA temp+3
0C93C 29 F0                         AND #%11110000
0C93E 18                            CLC
0C93F 69 30                         ADC #$30
0C941 9D 7C 03                      STA move_block_y,x
0C944 DE 7C 03                      DEC move_block_y,x
0C947                               
0C947                               ;; - Set timer to 16 (+1) frames
0C947 A9 11                         LDA #$11
0C949 9D 80 03                      STA move_block_timer,x
0C94C                               
0C94C                               ;; - Set move direction
0C94C A5 36                         LDA move_block_space_to_check
0C94E 29 81                         AND #%10000001
0C950 18                            CLC
0C951 2A                            ROL
0C952 69 00                         ADC #$00
0C954 85 04                         STA temp+4
0C956                               
0C956                               ;; - Set block color as ball color and add direction
0C956 A5 37                         LDA ball_flags
0C958 29 E0                         AND #BALL_COLOR
0C95A 05 04                         ORA temp+4
0C95C 9D 88 03                      STA move_block_flags,x
0C95F                               
0C95F                               ;; - Restore original X
0C95F A6 03                         LDX temp+3
0C961                           
0C961                               ;; Return
0C961 60                            RTS
0C962                           
0C962                           
0C962                           ;; Do not move the move block
0C962                           +dontMoveBlock:
0C962                           
0C962                               ;; Play bounce sound effect
0C962 A2 02                         LDX #SFX_BOUNCE
0C964 20 BE CE                      JSR sub_PreloadSfxFromX
0C967                           
0C967                               ;; Restore X from stack
0C967 68                            PLA
0C968 AA                            TAX
0C969                               
0C969                               ;; Return
0C969 60                            RTS
0C96A                           
0C96A                           .include "game/subroutine/FlashEffect.asm"
0C96A                           
0C96A                           ;; Apply flashing light effect to background color
0C96A                           sub_FlashEffect:
0C96A A2 00                         LDX #$00
0C96C 86 01                         STX temp+1
0C96E A9 3F                         LDA #$3F
0C970 85 00                         STA temp
0C972                           
0C972                               -flashLoop:
0C972 BD F2 D9                          LDA tbl_BackgroundFade,x
0C975 85 02                             STA temp+2
0C977 20 BC D0                          JSR sub_WriteByteToPPUBuffer
0C97A A0 03                             LDY #$03
0C97C                                   -
0C97C 20 F2 C4                              JSR sub_WaitForNMI
0C97F 88                                    DEY
0C980 D0 FA                             BNE -
0C982 E8                                INX
0C983 E0 0A                             CPX #$0A
0C985 D0 EB                         BNE -flashLoop
0C987                               
0C987 60                            RTS
0C988                           
0C988                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C988                           
0C988                           ;; Get the PPU address from YX index
0C988                           ;; - Expects YX index (aka tile offset) to be in the X register
0C988                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C988                           
0C988                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C988                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C988                           
0C988                           sub_GetPPUAddrFromYXIndex:
0C988 8A                            TXA
0C989 29 C0                         AND #%11000000
0C98B 18                            CLC
0C98C 2A                            ROL
0C98D 2A                            ROL
0C98E 2A                            ROL
0C98F 69 20                         ADC #$20
0C991 85 00                         STA temp
0C993                               
0C993 8A                            TXA
0C994 29 0F                         AND #%00001111
0C996 0A                            ASL
0C997 85 01                         STA temp+1
0C999                               
0C999 8A                            TXA
0C99A 29 30                         AND #%00110000
0C99C 0A                            ASL
0C99D 0A                            ASL
0C99E 18                            CLC
0C99F 65 01                         ADC temp+1
0C9A1 85 01                         STA temp+1
0C9A3                               
0C9A3 A5 00                         LDA temp
0C9A5 69 00                         ADC #$00
0C9A7 85 00                         STA temp
0C9A9                               
0C9A9 A5 01                         LDA temp+1
0C9AB 18                            CLC
0C9AC 69 C2                         ADC #$C2
0C9AE 85 01                         STA temp+1
0C9B0                               
0C9B0 A5 00                         LDA temp
0C9B2 69 00                         ADC #$00
0C9B4 85 00                         STA temp
0C9B6                           
0C9B6 60                            RTS
0C9B7                           
0C9B7                           .include "game/subroutine/InitiateNudge.asm"
0C9B7                           
0C9B7                           ;; Tell ball to nudge
0C9B7                           sub_InitiateNudge:
0C9B7 85 37                         STA ball_flags
0C9B9 A9 05                         LDA #NUDGE_FRAMES
0C9BB 85 3E                         STA nudge_timer
0C9BD 60                            RTS
0C9BE                           
0C9BE                           .include "game/subroutine/JumpToPointer.asm"
0C9BE                           
0C9BE                           ;; Helper subroutine to JSR to a variable pointer address
0C9BE                           sub_JumpToPointer:
0C9BE 6C 0C 00                      JMP (pointer)
0C9C1                               ;RTS must be handled by the routine (pointer) jumps to
0C9C1                           
0C9C1                           .include "game/subroutine/LoadAnimations.asm"
0C9C1                           
0C9C1                           sub_LoadAnimations:
0C9C1                           
0C9C1                               ;; Set up loop
0C9C1 A2 00                         LDX #$00
0C9C3                               -loop_load_animation:
0C9C3                                   ;; Check if current animation is active. If not, goto next
0C9C3 BD 74 03                          LDA explosion_active,x
0C9C6 D0 03                             BNE +
0C9C8 4C 53 CA                              JMP +next
0C9CB                                   +
0C9CB                           
0C9CB                                   ;; Check the explosion framecounter
0C9CB BD 60 03                          LDA explosion_timer,x
0C9CE D0 17                             BNE +
0C9D0                                       ;; Frametimer is 0
0C9D0                                       ;; Reset to animation speed
0C9D0 A9 04                                 LDA #ANIMATION_SPEED
0C9D2 9D 60 03                              STA explosion_timer,x
0C9D5                           
0C9D5                                       ;; Set next animation frame, and check if we're done yet
0C9D5 FE 64 03                              INC explosion_currentframe,x
0C9D8 BD 64 03                              LDA explosion_currentframe,x
0C9DB C9 0A                                 CMP #ANIM_SLIDES
0C9DD D0 08                                 BNE +
0C9DF                           
0C9DF                                       ;; If we're done, inactivate current explosion, go to the next one
0C9DF A9 00                                 LDA #$00
0C9E1 9D 74 03                              STA explosion_active,x
0C9E4 4C 53 CA                              JMP +next
0C9E7                                   +
0C9E7                           
0C9E7                                   ;; Load (x,y) position in temp variables
0C9E7 BD 6C 03                          LDA explosion_x,x
0C9EA 85 01                             STA temp+1
0C9EC 85 03                             STA temp+3
0C9EE BD 70 03                          LDA explosion_y,x
0C9F1 85 02                             STA temp+2
0C9F3                           
0C9F3                                   ;; Load attribute in temp variable
0C9F3 BD 68 03                          LDA explosion_attributes,x
0C9F6 85 04                             STA temp+4
0C9F8                           
0C9F8                                   ;; Load current frame into Y-register
0C9F8 BC 64 03                          LDY explosion_currentframe,x
0C9FB                           
0C9FB                                   ;; Load current frame ROM address from table
0C9FB B9 10 D2                          LDA explosion_anim_lo,y
0C9FE 85 0C                             STA pointer
0CA00 B9 06 D2                          LDA explosion_anim_hi,y
0CA03 85 0D                             STA pointer+1
0CA05                           
0CA05                                   ;; Save x-register on stack
0CA05 8A                                TXA
0CA06 48                                PHA
0CA07                           
0CA07                                   ;; Load sprites into sprite RAM
0CA07 A6 3D                             LDX sprite_ram_pointer
0CA09 A0 00                             LDY #$00
0CA0B                           
0CA0B                                   ;; Prepare (x,y) offset for loop
0CA0B 84 00                             STY temp
0CA0D                           
0CA0D                                   -loop_load_sprite:
0CA0D                                   
0CA0D                                       ;; Do not draw empty sprites
0CA0D B1 0C                                 LDA (pointer),y
0CA0F F0 18                                 BEQ +nextSprite
0CA11                                   
0CA11                                           ;; Add y-position to sprite ram buffer
0CA11 A5 02                                     LDA temp+2
0CA13 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA16 E8                                        INX
0CA17                           
0CA17                                           ;; Get tile number from frame ROM address, and
0CA17                                           ;; add it to sprite ram buffer
0CA17 B1 0C                                     LDA (pointer),y
0CA19 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA1C E8                                        INX
0CA1D                           
0CA1D                                           ;; Add attribute data to sprite ram buffer
0CA1D A5 04                                     LDA temp+4
0CA1F 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA22 E8                                        INX
0CA23                           
0CA23                                           ;; Add x-position to sprite ram buffer
0CA23 A5 03                                     LDA temp+3
0CA25 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA28 E8                                        INX
0CA29                           
0CA29                                       +nextSprite:
0CA29                           
0CA29                                       ;; Check if all sprites are done
0CA29 C8                                    INY
0CA2A C0 09                                 CPY #SLIDE_SIZE
0CA2C F0 21                                 BEQ +updateSpriteRamPointer
0CA2E                           
0CA2E                                       ;; Update x value
0CA2E A5 03                                 LDA temp+3
0CA30 18                                    CLC
0CA31 69 08                                 ADC #$08
0CA33 85 03                                 STA temp+3
0CA35                           
0CA35                                       ;; Update temp for x,y position
0CA35 E6 00                                 INC temp
0CA37 A5 00                                 LDA temp
0CA39 C9 03                                 CMP #SLIDE_WIDTH
0CA3B D0 0F                                 BNE +
0CA3D                                           ;; Row is done; reset x-position
0CA3D A5 01                                     LDA temp+1
0CA3F 85 03                                     STA temp+3
0CA41                           
0CA41                                           ;; Update y-position
0CA41 A5 02                                     LDA temp+2
0CA43 18                                        CLC
0CA44 69 08                                     ADC #$08
0CA46 85 02                                     STA temp+2
0CA48                           
0CA48                                           ;; Reset row timer
0CA48 A9 00                                     LDA #$00
0CA4A 85 00                                     STA temp
0CA4C                                       +
0CA4C                           
0CA4C 4C 0D CA                          JMP -loop_load_sprite
0CA4F                           
0CA4F                               +updateSpriteRamPointer:
0CA4F 86 3D                             STX sprite_ram_pointer
0CA51                           
0CA51                                   ;; Retrieve x-register from stack
0CA51 68                                PLA
0CA52 AA                                TAX
0CA53                           
0CA53                               +next:
0CA53                                   ;; Check if all animations have been updated
0CA53 E8                                INX
0CA54 E0 04                             CPX #MAX_ANIMATIONS
0CA56 F0 03                             BEQ +cleanUpSpriteRam
0CA58                           
0CA58 4C C3 C9                      JMP -loop_load_animation
0CA5B                           
0CA5B                           +cleanUpSpriteRam:
0CA5B A6 3D                         LDX sprite_ram_pointer
0CA5D A9 EF                         LDA #$EF
0CA5F                               -
0CA5F 9D 00 02                          STA ADDR_SPRITERAM,x
0CA62 E8                                INX
0CA63 D0 FA                         BNE -
0CA65                               
0CA65 60                            RTS
0CA66                               
0CA66                           .include "game/subroutine/LoadGameScreen.asm"
0CA66                           
0CA66                           ;; Load the game screen, based on level number
0CA66                           sub_LoadGameScreen:
0CA66                           
0CA66                               ;; Clear the screen
0CA66 20 C9 C5                      JSR sub_ClearScreen
0CA69                               
0CA69                               ;; Clear collision and attribute data; reset blocks left in the process
0CA69 A2 00                         LDX #$00
0CA6B 8A                            TXA
0CA6C 85 44                         STA blocks_left
0CA6E                               -
0CA6E 9D 00 04                          STA tile_type,x
0CA71 E8                                INX
0CA72 D0 FA                         BNE -
0CA74                               
0CA74                               ;; Get pointer from current level
0CA74 A6 42                         LDX current_level
0CA76 BD 36 D9                      LDA tbl_lvl_layout_lo,x
0CA79 85 0C                         STA pointer
0CA7B BD 1C D9                      LDA tbl_lvl_layout_hi,x
0CA7E 85 0D                         STA pointer+1
0CA80                           
0CA80                               ;; Set up the loop
0CA80 A0 00                         LDY #$00
0CA82                           -drawRowColumnLoop:
0CA82                           
0CA82                               ;; Load (x,y) of current set of tiles
0CA82 B1 0C                         LDA (pointer),y
0CA84                           
0CA84                               ;; Check if level is done; if so, skip the loop
0CA84 C9 FF                         CMP #LEVEL_END
0CA86 D0 03                         BNE +
0CA88 4C D1 CB                          JMP +doneLevelLoad
0CA8B                               +
0CA8B                           
0CA8B                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CA8B 85 00                         STA temp
0CA8D C8                            INY
0CA8E B1 0C                         LDA (pointer),y
0CA90 85 01                         STA temp+1
0CA92                               
0CA92                               ;; Convert (x,y) to PPU address
0CA92                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CA92 A5 00                         LDA temp
0CA94 29 0F                         AND #%00001111
0CA96 4A                            LSR
0CA97 4A                            LSR
0CA98 09 20                         ORA #$20
0CA9A 85 02                         STA temp+2
0CA9C                               
0CA9C                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CA9C A5 00                         LDA temp
0CA9E 29 F0                         AND #%11110000
0CAA0 4A                            LSR
0CAA1 4A                            LSR
0CAA2 4A                            LSR
0CAA3 85 03                         STA temp+3
0CAA5                               
0CAA5 A5 00                         LDA temp
0CAA7 29 03                         AND #%00000011
0CAA9 AA                            TAX
0CAAA BD 94 D9                      LDA tbl_Times64,x
0CAAD 18                            CLC
0CAAE 65 03                         ADC temp+3
0CAB0 18                            CLC
0CAB1 69 C2                         ADC #$C2
0CAB3 85 03                         STA temp+3
0CAB5                               
0CAB5                               ;; Add carry to temp+2
0CAB5 A5 02                         LDA temp+2
0CAB7 69 00                         ADC #$00
0CAB9 85 02                         STA temp+2
0CABB                           
0CABB                               ;; Convert tile data to loop count and tile type
0CABB                               ;; temp+4 = color
0CABB A5 01                         LDA temp+1
0CABD 29 07                         AND #%00000111
0CABF 85 04                         STA temp+4
0CAC1                               
0CAC1                               ;; If color = 7, this is a wall
0CAC1 C9 07                         CMP #%00000111
0CAC3 F0 12                         BEQ +wallHack
0CAC5                                   
0CAC5                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CAC5 29 01                             AND #%00000001
0CAC7 F0 02                             BEQ +
0CAC9 A9 05                                 LDA #$05
0CACB                                   +
0CACB 85 07                             STA temp+7
0CACD                                
0CACD                                   ;; temp+5 = tile type
0CACD A5 01                             LDA temp+1
0CACF 4A                                LSR
0CAD0 4A                                LSR
0CAD1 4A                                LSR
0CAD2 29 03                             AND #%00000011
0CAD4 4C DD CA                          JMP +setTileType
0CAD7                               +wallHack:
0CAD7                               
0CAD7                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CAD7 A9 00                         LDA #$00
0CAD9 85 07                         STA temp+7
0CADB A9 04                         LDA #$04
0CADD                           
0CADD                           +setTileType:    
0CADD 85 05                         STA temp+5
0CADF                               
0CADF                               ;; X = tile offset
0CADF 18                            CLC
0CAE0 65 07                         ADC temp+7
0CAE2 AA                            TAX
0CAE3                               
0CAE3                               ;; temp+6 = number of tiles
0CAE3 A5 01                         LDA temp+1
0CAE5 29 60                         AND #%01100000
0CAE7 4A                            LSR
0CAE8 4A                            LSR
0CAE9 4A                            LSR
0CAEA 4A                            LSR
0CAEB 4A                            LSR
0CAEC 85 06                         STA temp+6
0CAEE                               
0CAEE                               ;; Translate (x,y) to (y,x) for tile RAM
0CAEE A5 00                         LDA temp
0CAF0 0A                            ASL
0CAF1 0A                            ASL
0CAF2 0A                            ASL
0CAF3 0A                            ASL
0CAF4 85 08                         STA temp+8
0CAF6 A5 00                         LDA temp
0CAF8 4A                            LSR
0CAF9 4A                            LSR
0CAFA 4A                            LSR
0CAFB 4A                            LSR
0CAFC 05 08                         ORA temp+8
0CAFE 85 00                         STA temp
0CB00                               
0CB00                               ;; Set up loop
0CB00 98                            TYA
0CB01 48                            PHA
0CB02 A4 06                         LDY temp+6
0CB04                           
0CB04                               -drawTileLoop:
0CB04                                   ;; Write PPU address
0CB04 2C 02 20                          BIT PPU_STATUS
0CB07 A5 02                             LDA temp+2
0CB09 8D 06 20                          STA PPU_ADDR
0CB0C A5 03                             LDA temp+3
0CB0E 8D 06 20                          STA PPU_ADDR
0CB11                                   
0CB11                                   ;; Write first and second tile
0CB11 BD 98 D9                          LDA tbl_GametileTopLeft,x
0CB14 8D 07 20                          STA PPU_DATA
0CB17 BD A2 D9                          LDA tbl_GametileTopRight,x
0CB1A 8D 07 20                          STA PPU_DATA
0CB1D                                   
0CB1D                                   ;; Update PPU address
0CB1D 2C 02 20                          BIT PPU_STATUS
0CB20 A5 02                             LDA temp+2
0CB22 8D 06 20                          STA PPU_ADDR
0CB25 A5 03                             LDA temp+3
0CB27 18                                CLC
0CB28 69 20                             ADC #$20
0CB2A 8D 06 20                          STA PPU_ADDR
0CB2D                                   
0CB2D                                   ;; Write third and fourth tile
0CB2D BD AC D9                          LDA tbl_GametileBottomLeft,x
0CB30 8D 07 20                          STA PPU_DATA
0CB33 BD B6 D9                          LDA tbl_GametileBottomRight,x
0CB36 8D 07 20                          STA PPU_DATA
0CB39                           
0CB39                                   ;; Push x-register to stack
0CB39 8A                                TXA
0CB3A 48                                PHA
0CB3B                           
0CB3B                                   ;; Update tile RAM (aka collision table)
0CB3B A6 05                             LDX temp+5
0CB3D BD C0 D9                          LDA tbl_GameTileRamByte,x
0CB40 05 04                             ORA temp+4
0CB42 0A                                ASL
0CB43 09 01                             ORA #%00000001
0CB45 A6 00                             LDX temp
0CB47 9D 00 04                          STA tile_type,x
0CB4A                           
0CB4A                                   ;; Check if shade 1 should be drawn
0CB4A E8                                INX
0CB4B BD 00 04                          LDA tile_type,x
0CB4E D0 05                             BNE +
0CB50 A9 00                                 LDA #$00
0CB52 8D 07 20                              STA PPU_DATA
0CB55                                   +
0CB55                                   
0CB55                                   ;; Check if shade 2 should be drawn
0CB55 A5 03                             LDA temp+3
0CB57 18                                CLC
0CB58 69 41                             ADC #$41
0CB5A 85 03                             STA temp+3
0CB5C A5 02                             LDA temp+2
0CB5E 69 00                             ADC #$00
0CB60 85 02                             STA temp+2
0CB62                                   
0CB62 8A                                TXA
0CB63 18                                CLC
0CB64 69 0F                             ADC #$0F
0CB66 AA                                TAX
0CB67                                   
0CB67 BD 00 04                          LDA tile_type,x
0CB6A D0 0F                             BNE +
0CB6C A5 02                                 LDA temp+2
0CB6E 8D 06 20                              STA PPU_ADDR
0CB71 A5 03                                 LDA temp+3
0CB73 8D 06 20                              STA PPU_ADDR
0CB76 A9 00                                 LDA #$00
0CB78 8D 07 20                              STA PPU_DATA
0CB7B                                   +
0CB7B                           
0CB7B                                   ;; Check if shade 3 should be drawn
0CB7B E8                                INX
0CB7C E6 03                             INC temp+3
0CB7E BD 00 04                          LDA tile_type,x
0CB81 D0 0F                             BNE +
0CB83 A5 02                                 LDA temp+2
0CB85 8D 06 20                              STA PPU_ADDR
0CB88 A5 03                                 LDA temp+3
0CB8A 8D 06 20                              STA PPU_ADDR
0CB8D A9 00                                 LDA #$00
0CB8F 8D 07 20                              STA PPU_DATA
0CB92                                   +
0CB92                                   
0CB92                                   ;; Restore x-register from stack
0CB92 68                                PLA
0CB93 AA                                TAX
0CB94                                   
0CB94                                   ;; Reset pointer for next tile
0CB94 A5 03                             LDA temp+3
0CB96 38                                SEC
0CB97 E9 42                             SBC #$42
0CB99 85 03                             STA temp+3
0CB9B A5 02                             LDA temp+2
0CB9D E9 00                             SBC #$00
0CB9F 85 02                             STA temp+2
0CBA1                                   
0CBA1                                   ;; Draw next metatile in this loop (if any left)
0CBA1 88                                DEY
0CBA2 30 27                             BMI +doneDrawingRowColumn
0CBA4                                   
0CBA4                                   ;; Is it a row or a column?
0CBA4 A5 01                             LDA temp+1
0CBA6 10 17                             BPL +
0CBA8                                       ;; It is a column: move pointer down (+$40)
0CBA8 A5 03                                 LDA temp+3
0CBAA 18                                    CLC
0CBAB 69 40                                 ADC #$40
0CBAD 85 03                                 STA temp+3
0CBAF A5 02                                 LDA temp+2
0CBB1 69 00                                 ADC #$00
0CBB3 85 02                                 STA temp+2
0CBB5                                       
0CBB5                                       ;; Add 16 to temp (as a tile RAM pointer)
0CBB5 A5 00                                 LDA temp
0CBB7 18                                    CLC
0CBB8 69 10                                 ADC #$10
0CBBA 85 00                                 STA temp
0CBBC 4C C8 CB                              JMP +drawNextTile
0CBBF                                   +
0CBBF                                   
0CBBF                                   ;; It is a row: move pointer right (+$02)
0CBBF A5 03                             LDA temp+3
0CBC1 18                                CLC
0CBC2 69 02                             ADC #$02
0CBC4 85 03                             STA temp+3
0CBC6                                   
0CBC6                                   ;; Add 1 to temp (as a tile RAM pointer)
0CBC6 E6 00                             INC temp
0CBC8                           
0CBC8                               
0CBC8                               ;; Next tile in the row/column
0CBC8                                   +drawNextTile:
0CBC8 4C 04 CB                      JMP -drawTileLoop
0CBCB                           
0CBCB                               ;; Go to the next set of tiles
0CBCB                           +doneDrawingRowColumn:
0CBCB 68                            PLA
0CBCC A8                            TAY
0CBCD C8                            INY
0CBCE 4C 82 CA                      JMP -drawRowColumnLoop
0CBD1                           
0CBD1                           ;; Level loading is done
0CBD1                           +doneLevelLoad:
0CBD1                           
0CBD1                               ;; Count number of color blocks
0CBD1 A2 A0                         LDX #160
0CBD3                               -
0CBD3 BD FF 03                          LDA tile_type-1,x
0CBD6 29 80                             AND #%10000000
0CBD8 F0 02                             BEQ +
0CBDA E6 44                                 INC blocks_left
0CBDC                                   +
0CBDC CA                                DEX
0CBDD D0 F4                         BNE -
0CBDF                           
0CBDF                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CBDF A9 20                         LDA #$20
0CBE1 8D 06 20                      STA PPU_ADDR
0CBE4 A9 A2                         LDA #$A2
0CBE6 8D 06 20                      STA PPU_ADDR
0CBE9 A9 35                         LDA #$35
0CBEB 20 25 CE                      JSR sub_Draw28HorizontalTiles
0CBEE                           
0CBEE                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CBEE A9 23                         LDA #$23
0CBF0 8D 06 20                      STA PPU_ADDR
0CBF3 A9 42                         LDA #$42
0CBF5 8D 06 20                      STA PPU_ADDR
0CBF8 A9 31                         LDA #$31
0CBFA 20 25 CE                      JSR sub_Draw28HorizontalTiles
0CBFD                           
0CBFD                               ;; Left & right game bounds
0CBFD                               ;; Set PPU_ADDR and store in temp variables
0CBFD A9 20                         LDA #$20
0CBFF 85 00                         STA temp
0CC01 8D 06 20                      STA PPU_ADDR
0CC04 A9 C1                         LDA #$C1
0CC06 85 01                         STA temp+1
0CC08 8D 06 20                      STA PPU_ADDR
0CC0B                               
0CC0B                               ;; Set vertical bound tile and set up loop
0CC0B A0 33                         LDY #$33
0CC0D A2 14                         LDX #20
0CC0F                               -
0CC0F                                   ;; Show left tile
0CC0F 8C 07 20                          STY PPU_DATA
0CC12                                   
0CC12                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CC12 A5 00                             LDA temp
0CC14 8D 06 20                          STA PPU_ADDR
0CC17 A5 01                             LDA temp+1
0CC19 18                                CLC
0CC1A 69 1D                             ADC #29
0CC1C 85 01                             STA temp+1
0CC1E 8D 06 20                          STA PPU_ADDR
0CC21                           
0CC21                                   ;; Show right tile
0CC21 8C 07 20                          STY PPU_DATA
0CC24                           
0CC24                                   ;; Check if we're done yet
0CC24 CA                                DEX
0CC25 F0 18                             BEQ +drawCorners
0CC27                                   
0CC27                                   ;; Not done yet: add 3 to low byte for next left bound
0CC27 A5 01                             LDA temp+1
0CC29 18                                CLC
0CC2A 69 03                             ADC #3
0CC2C 85 01                             STA temp+1
0CC2E                                   
0CC2E                                   ;; Apply carry to high byte
0CC2E A5 00                             LDA temp
0CC30 69 00                             ADC #$00
0CC32 85 00                             STA temp
0CC34                                   
0CC34                                   ;; Store next PPU_ADDR to draw at
0CC34 8D 06 20                          STA PPU_ADDR
0CC37 A5 01                             LDA temp+1
0CC39 8D 06 20                          STA PPU_ADDR
0CC3C 4C 0F CC                      JMP -
0CC3F                               
0CC3F                               
0CC3F                           
0CC3F                           +drawCorners:
0CC3F                               ;; Draw the corners of the playing field
0CC3F A9 20                         LDA #$20
0CC41 8D 06 20                      STA PPU_ADDR
0CC44 A9 A1                         LDA #$A1
0CC46 8D 06 20                      STA PPU_ADDR
0CC49 A9 39                         LDA #$39
0CC4B 8D 07 20                      STA PPU_DATA
0CC4E                           
0CC4E A9 20                         LDA #$20
0CC50 8D 06 20                      STA PPU_ADDR
0CC53 A9 BE                         LDA #$BE
0CC55 8D 06 20                      STA PPU_ADDR
0CC58 A9 3A                         LDA #$3A
0CC5A 8D 07 20                      STA PPU_DATA
0CC5D                               ;; (added background tile for Sprite-0 hit)
0CC5D A9 3F                         LDA #$3F
0CC5F 8D 07 20                      STA PPU_DATA
0CC62                           
0CC62 A9 23                         LDA #$23
0CC64 8D 06 20                      STA PPU_ADDR
0CC67 A9 41                         LDA #$41
0CC69 8D 06 20                      STA PPU_ADDR
0CC6C A9 36                         LDA #$36
0CC6E 8D 07 20                      STA PPU_DATA
0CC71                           
0CC71 A9 23                         LDA #$23
0CC73 8D 06 20                      STA PPU_ADDR
0CC76 A9 5E                         LDA #$5E
0CC78 8D 06 20                      STA PPU_ADDR
0CC7B A9 34                         LDA #$34
0CC7D 8D 07 20                      STA PPU_DATA
0CC80                           
0CC80                           
0CC80                               ;; Draw the hud labels
0CC80 A9 20                         LDA #$20
0CC82 8D 06 20                      STA PPU_ADDR
0CC85 A9 62                         LDA #$62
0CC87 8D 06 20                      STA PPU_ADDR
0CC8A A2 00                         LDX #$00
0CC8C                               -
0CC8C BD C5 D9                          LDA tbl_HudText,x
0CC8F 8D 07 20                          STA PPU_DATA
0CC92 E8                                INX
0CC93 E0 1C                             CPX #28
0CC95 D0 F5                         BNE -
0CC97                           
0CC97                           
0CC97                               ;; Draw the current score
0CC97 A9 20                         LDA #$20
0CC99 8D 06 20                      STA PPU_ADDR
0CC9C A9 83                         LDA #$83
0CC9E 8D 06 20                      STA PPU_ADDR
0CCA1 A2 00                         LDX #$00
0CCA3                               -
0CCA3 B5 20                             LDA ball_score,x
0CCA5 18                                CLC
0CCA6 69 01                             ADC #$01
0CCA8 8D 07 20                          STA PPU_DATA
0CCAB E8                                INX
0CCAC E0 06                             CPX #$06
0CCAE D0 F3                         BNE -
0CCB0                           
0CCB0                           
0CCB0                               ;; Draw the level number
0CCB0                               ;; (with primitive HEX>DEC)
0CCB0 A5 42                         LDA current_level
0CCB2 18                            CLC
0CCB3 69 01                         ADC #$01
0CCB5 85 01                         STA temp+1
0CCB7                               
0CCB7 C9 14                         CMP #20
0CCB9 B0 13                         BCS +tempIsTwo
0CCBB                               
0CCBB C9 0A                         CMP #10
0CCBD B0 05                         BCS +tempIsOne
0CCBF                               
0CCBF A9 00                         LDA #$00
0CCC1 4C D5 CC                      JMP +setTemp
0CCC4                               
0CCC4                           +tempIsOne:
0CCC4 38                            SEC
0CCC5 E9 0A                         SBC #10
0CCC7 85 01                         STA temp+1
0CCC9 A9 01                         LDA #$01
0CCCB 4C D5 CC                      JMP +setTemp
0CCCE                               
0CCCE                           +tempIsTwo:
0CCCE 38                            SEC
0CCCF E9 14                         SBC #20
0CCD1 85 01                         STA temp+1
0CCD3 A9 02                         LDA #$02
0CCD5                           
0CCD5                           +setTemp:
0CCD5 85 00                         STA temp
0CCD7                               
0CCD7 E6 00                         INC temp
0CCD9 E6 01                         INC temp+1
0CCDB                               
0CCDB A9 20                         LDA #$20
0CCDD 8D 06 20                      STA PPU_ADDR
0CCE0 A9 8B                         LDA #$8B
0CCE2 8D 06 20                      STA PPU_ADDR
0CCE5 A5 00                         LDA temp
0CCE7 8D 07 20                      STA PPU_DATA
0CCEA A5 01                         LDA temp+1
0CCEC 8D 07 20                      STA PPU_DATA
0CCEF                           
0CCEF                           
0CCEF                               ;; Draw lives (presumes lives to be capped at 9)
0CCEF A9 20                         LDA #$20
0CCF1 8D 06 20                      STA PPU_ADDR
0CCF4 A9 92                         LDA #$92
0CCF6 8D 06 20                      STA PPU_ADDR
0CCF9 A6 1F                         LDX ball_lives
0CCFB E8                            INX
0CCFC 8E 07 20                      STX PPU_DATA
0CCFF                           
0CCFF                           
0CCFF                               ;; Set and draw bonus
0CCFF A9 07                         LDA #$07
0CD01 85 2C                         STA ball_bonus
0CD03 A9 09                         LDA #$09
0CD05 85 2D                         STA ball_bonus+1
0CD07 85 2E                         STA ball_bonus+2
0CD09                               
0CD09 A9 20                         LDA #$20
0CD0B 8D 06 20                      STA PPU_ADDR
0CD0E A9 9A                         LDA #$9A
0CD10 8D 06 20                      STA PPU_ADDR
0CD13 A2 00                         LDX #$00
0CD15                               -
0CD15 B5 2C                             LDA ball_bonus,x
0CD17 18                                CLC
0CD18 69 01                             ADC #$01
0CD1A 8D 07 20                          STA PPU_DATA
0CD1D E8                                INX
0CD1E E0 03                             CPX #$03
0CD20 D0 F3                         BNE -
0CD22                           
0CD22                           
0CD22                               ;; Set attribute data to RAM
0CD22                               
0CD22                               ;; Byte 0-7 of attribute ram should be #%10100000
0CD22 A2 00                         LDX #$00
0CD24 A9 A0                         LDA #$A0
0CD26                               -
0CD26 9D A0 04                          STA tile_attributes,x
0CD29 E8                                INX
0CD2A E0 08                             CPX #$08
0CD2C D0 F8                         BNE -
0CD2E                           
0CD2E                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CD2E                           
0CD2E                           -attributeLoop:
0CD2E                               ;; Reset current attribute value
0CD2E A9 00                         LDA #$00
0CD30 85 02                         STA temp+2
0CD32                           
0CD32                               ;; Get first metatile in tile ram based on attribute index
0CD32                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CD32 8A                            TXA
0CD33                           
0CD33 38                            SEC
0CD34 E9 08                         SBC #$08
0CD36 85 01                         STA temp+1      ; attr - 8 (temp1)
0CD38 0A                            ASL             ; * 2
0CD39 85 00                         STA temp        ; temp = temp1 * 2
0CD3B                           
0CD3B A5 01                         LDA temp+1      ; temp1
0CD3D 29 F8                         AND #%11111000  ; rounded down to 8's
0CD3F 0A                            ASL             ; * 2
0CD40 18                            CLC
0CD41 65 00                         ADC temp        ; + temp1 * 2
0CD43 85 00                         STA temp        ; first metatile
0CD45                           
0CD45                               ;; Store first metatile in y-register
0CD45 A8                            TAY
0CD46                           
0CD46                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CD46 8A                            TXA
0CD47 29 07                         AND #%00000111
0CD49 C9 07                         CMP #%00000111
0CD4B F0 0B                         BEQ +
0CD4D                           
0CD4D                               ;; If X >= $30, don't apply bottom right metatile
0CD4D E0 30                         CPX #$30
0CD4F B0 07                         BCS +
0CD51                               
0CD51                               ;; Add metatile1 subpalette to attribute value
0CD51 B9 00 04                      LDA tile_type,y
0CD54 29 0C                         AND #%00001100
0CD56 85 02                         STA temp+2
0CD58                               +
0CD58                           
0CD58                           
0CD58                               ;; Apply second metatile
0CD58 88                            DEY
0CD59                           
0CD59                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CD59 8A                            TXA
0CD5A 29 07                         AND #%00000111
0CD5C F0 10                         BEQ +
0CD5E                           
0CD5E                               ;; If X >= $30, don't apply bottom left metatile
0CD5E E0 30                         CPX #$30
0CD60 B0 0C                         BCS +
0CD62                           
0CD62                           
0CD62                           
0CD62                               ;; Add metatile2 subpalette to attribute value
0CD62 B9 00 04                      LDA tile_type,y
0CD65 29 0C                         AND #%00001100
0CD67 4A                            LSR
0CD68 4A                            LSR
0CD69 05 02                         ORA temp+2
0CD6B 4C 70 CD                      JMP ++
0CD6E                               +
0CD6E A5 02                         LDA temp+2
0CD70                               ++
0CD70 0A                            ASL
0CD71 0A                            ASL
0CD72 85 02                         STA temp+2
0CD74                           
0CD74                           
0CD74                               ;; Apply third metatile
0CD74 98                            TYA
0CD75 38                            SEC
0CD76 E9 0F                         SBC #$0F
0CD78 A8                            TAY
0CD79                           
0CD79                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD79 8A                            TXA
0CD7A 29 07                         AND #%00000111
0CD7C C9 07                         CMP #%00000111
0CD7E F0 11                         BEQ +
0CD80                           
0CD80                               ;; If X < $10, don't apply top right metatile
0CD80 8A                            TXA
0CD81 29 F0                         AND #%11110000
0CD83 F0 0C                         BEQ +
0CD85                           
0CD85                               ;; Add metatile3 subpalette to attribute value
0CD85 B9 00 04                      LDA tile_type,y
0CD88 29 0C                         AND #%00001100
0CD8A 4A                            LSR
0CD8B 4A                            LSR
0CD8C 05 02                         ORA temp+2
0CD8E 4C 93 CD                      JMP ++
0CD91                               +
0CD91 A5 02                         LDA temp+2
0CD93                               ++
0CD93 0A                            ASL
0CD94 0A                            ASL
0CD95 85 02                         STA temp+2
0CD97                           
0CD97                           
0CD97                               ;; Apply fourth metatile
0CD97 88                            DEY
0CD98                           
0CD98                               ;; If X MOD 8 == 0, don't apply top left metatile
0CD98 8A                            TXA
0CD99 29 07                         AND #%00000111
0CD9B F0 11                         BEQ +
0CD9D                           
0CD9D                               ;; If X < $10, don't apply top left metatile
0CD9D 8A                            TXA
0CD9E 29 F0                         AND #%11110000
0CDA0 F0 0C                         BEQ +
0CDA2                           
0CDA2                               ;; Add metatile4 subpalette to attribute value
0CDA2 B9 00 04                      LDA tile_type,y
0CDA5 29 0C                         AND #%00001100
0CDA7 4A                            LSR
0CDA8 4A                            LSR
0CDA9 05 02                         ORA temp+2
0CDAB 4C B0 CD                      JMP ++
0CDAE                               +
0CDAE A5 02                         LDA temp+2
0CDB0                               ++
0CDB0 9D A0 04                      STA tile_attributes,x
0CDB3                           
0CDB3                               ;; Check the next attribute, if any left
0CDB3 E8                            INX
0CDB4 E0 38                         CPX #$38
0CDB6 F0 03                         BEQ +
0CDB8 4C 2E CD                          JMP -attributeLoop
0CDBB                               +
0CDBB                           
0CDBB                               ;; Stream attribute RAM to PPU
0CDBB 2C 02 20                      BIT PPU_STATUS
0CDBE A9 23                         LDA #$23
0CDC0 8D 06 20                      STA PPU_ADDR
0CDC3 A9 C0                         LDA #$C0
0CDC5 8D 06 20                      STA PPU_ADDR
0CDC8 A2 00                         LDX #$00
0CDCA                               -
0CDCA BD A0 04                          LDA tile_attributes,x
0CDCD 8D 07 20                          STA PPU_DATA
0CDD0 E8                                INX
0CDD1 E0 40                             CPX #$40
0CDD3 D0 F5                         BNE -
0CDD5                           
0CDD5                               ;; Set initial ball position
0CDD5 A6 42                         LDX current_level
0CDD7 BD 50 D9                      LDA tbl_lvl_ball_startpos,x
0CDDA 29 F0                         AND #%11110000
0CDDC 18                            CLC
0CDDD 69 34                         ADC #$34
0CDDF 85 19                         STA ball_ypos_hi
0CDE1 BD 50 D9                      LDA tbl_lvl_ball_startpos,x
0CDE4 0A                            ASL
0CDE5 0A                            ASL
0CDE6 0A                            ASL
0CDE7 0A                            ASL
0CDE8 18                            CLC
0CDE9 69 14                         ADC #$14
0CDEB 85 17                         STA ball_xpos_hi
0CDED A9 00                         LDA #$00
0CDEF 85 18                         STA ball_xpos_lo
0CDF1 85 1A                         STA ball_ypos_lo
0CDF3                               
0CDF3                               ;; Set initial ball color and direction
0CDF3 BD 6A D9                      LDA tbl_lvl_ball_init,x
0CDF6 29 F0                         AND #%11110000
0CDF8 85 37                         STA ball_flags
0CDFA 20 34 C6                      JSR sub_ColorizeBall
0CDFD                               
0CDFD                               ;; Reset bonus timer
0CDFD A9 08                         LDA #BONUS_FRAMES
0CDFF 85 3F                         STA bonus_timer
0CE01                               
0CE01                               ;; Play background noise
0CE01 A9 08                         LDA #$08
0CE03 8D 15 40                      STA APU_STATUS
0CE06 8D 0F 40                      STA NOISE_LENGTH
0CE09 A9 0E                         LDA #$0E
0CE0B 85 47                         STA current_noise
0CE0D A9 00                         LDA #$00
0CE0F 85 45                         STA max_noise
0CE11 85 48                         STA noise_timer
0CE13 85 46                         STA sweep_noise
0CE15 85 4B                         STA noise_muted
0CE17 20 60 C5                      JSR sub_BackgroundNoise
0CE1A                           
0CE1A                               ;; Freeze the ball
0CE1A A5 37                         LDA ball_flags
0CE1C 09 04                         ORA #FREEZE_BALL
0CE1E 85 37                         STA ball_flags
0CE20                               
0CE20                               ;; Start unfreeze timer
0CE20 A9 30                         LDA #$30
0CE22 85 41                         STA unfreeze_timer
0CE24                           
0CE24                               ;; Return
0CE24 60                            RTS
0CE25                           
0CE25                           
0CE25                           ;; Subroutine: draw 28 tiles in a row
0CE25                           sub_Draw28HorizontalTiles:
0CE25 A2 1C                         LDX #28
0CE27                               -
0CE27 8D 07 20                          STA PPU_DATA
0CE2A CA                                DEX
0CE2B D0 FA                         BNE -
0CE2D 60                            RTS
0CE2E                           
0CE2E                           .include "game/subroutine/LoadIntroScreen.asm"
0CE2E                           
0CE2E                           ;; Load the intro screen
0CE2E                           sub_LoadIntroScreen:
0CE2E                           
0CE2E                               ;; Load intro palette
0CE2E 2C 02 20                      BIT PPU_STATUS
0CE31 A9 3F                         LDA #$3F
0CE33 8D 06 20                      STA PPU_ADDR
0CE36 A9 00                         LDA #$00
0CE38 8D 06 20                      STA PPU_ADDR
0CE3B A2 00                         LDX #$00
0CE3D                               -
0CE3D BD E2 D0                          LDA tbl_IntroScreenPalette,x
0CE40 8D 07 20                          STA PPU_DATA
0CE43 E8                                INX
0CE44 E0 20                             CPX #$20
0CE46 D0 F5                         BNE -
0CE48                               
0CE48                               ;; Put ball in the middle
0CE48 A9 7C                         LDA #$7C
0CE4A 85 17                         STA ball_xpos_hi
0CE4C 85 19                         STA ball_ypos_hi
0CE4E                           
0CE4E                               ;; Clear the screen
0CE4E 20 C9 C5                      JSR sub_ClearScreen
0CE51                           
0CE51                               ;; Set up intro screen draw loop
0CE51 A2 00                         LDX #$00
0CE53                           
0CE53                           -loop_IntroScreenData:
0CE53                           
0CE53                               ;; Get current byte from intro screen data
0CE53 BD 0A D1                      LDA tbl_IntroScreenData,x
0CE56                           
0CE56                               ;; If current byte is #$3F, we're done drawing.
0CE56 C9 3F                         CMP #$3F
0CE58 D0 03                         BNE +
0CE5A 4C A7 CE                          JMP +goToEndIntroScreen
0CE5D                               +
0CE5D                           
0CE5D                               ;; If highest bits are %11, draw a plain tile
0CE5D 29 C0                         AND #%11000000
0CE5F D0 03                         BNE +
0CE61 4C 87 CE                          JMP +drawTile
0CE64                               +
0CE64                               
0CE64                               ;; If highest bits are %01, set the PPU address
0CE64                               ;; If not, draw two logo tiles
0CE64 C9 40                         CMP #%01000000
0CE66 D0 03                         BNE +drawLogo
0CE68 4C 91 CE                          JMP +setPpuAddr
0CE6B                           
0CE6B                           +drawLogo:
0CE6B                               ;; Get bits 0-2 and store in a temp variable
0CE6B BD 0A D1                      LDA tbl_IntroScreenData,x
0CE6E 29 07                         AND #%00000111
0CE70 85 00                         STA temp
0CE72                               
0CE72                               ;; Get bits 3-5, shift over to get a value from 0-7
0CE72 BD 0A D1                      LDA tbl_IntroScreenData,x
0CE75 4A                            LSR
0CE76 4A                            LSR
0CE77 4A                            LSR
0CE78 29 07                         AND #%00000111
0CE7A                               
0CE7A                               ;; Draw the tile that corresponds with that value
0CE7A A8                            TAY
0CE7B 20 AC C6                      JSR sub_drawIntroScreenLogoTile
0CE7E                               
0CE7E                               ;; Do the same for the value stored in temp
0CE7E A4 00                         LDY temp
0CE80 20 AC C6                      JSR sub_drawIntroScreenLogoTile
0CE83                           
0CE83                               ;; Next byte please
0CE83 E8                            INX
0CE84 4C 53 CE                      JMP -loop_IntroScreenData
0CE87                           
0CE87                           +drawTile:
0CE87                               ;; Just draw the tile value on screen
0CE87 BD 0A D1                      LDA tbl_IntroScreenData,x
0CE8A 8D 07 20                      STA PPU_DATA
0CE8D                               
0CE8D                               ;; Next byte please
0CE8D E8                            INX
0CE8E 4C 53 CE                      JMP -loop_IntroScreenData
0CE91                           
0CE91                           
0CE91                           +setPpuAddr:
0CE91                               ;; Reset the PPU latch
0CE91 2C 02 20                      BIT PPU_STATUS
0CE94                               
0CE94                               ;; Sanitize and write the high byte of the PPU address
0CE94 BD 0A D1                      LDA tbl_IntroScreenData,x
0CE97 29 3F                         AND #%00111111
0CE99 8D 06 20                      STA PPU_ADDR
0CE9C                           
0CE9C                               ;; Write the low byte of the PPU address
0CE9C E8                            INX
0CE9D BD 0A D1                      LDA tbl_IntroScreenData,x
0CEA0 8D 06 20                      STA PPU_ADDR
0CEA3                               
0CEA3                               ;; PPU has been set up to draw tiles at the correct spot now.
0CEA3                               
0CEA3                               ;; Next byte please.
0CEA3 E8                            INX
0CEA4 4C 53 CE                      JMP -loop_IntroScreenData
0CEA7                           
0CEA7                           +goToEndIntroScreen:
0CEA7                           
0CEA7                               ;; To color the 1.LEVEL: line green, we need to update two
0CEA7                               ;; values in the PPU attribute data.
0CEA7 2C 02 20                      BIT PPU_STATUS
0CEAA A9 23                         LDA #$23
0CEAC 8D 06 20                      STA PPU_ADDR
0CEAF A9 CB                         LDA #$CB
0CEB1 8D 06 20                      STA PPU_ADDR
0CEB4 A9 0A                         LDA #%00001010
0CEB6 8D 07 20                      STA PPU_DATA
0CEB9 8D 07 20                      STA PPU_DATA
0CEBC                           
0CEBC 60                            RTS
0CEBD                           
0CEBD                           .include "game/subroutine/LoadWinScreen.asm"
0CEBD                           
0CEBD                           ;; Load the win screen (in progress)
0CEBD                           sub_LoadWinScreen:
0CEBD 60                            RTS
0CEBE                           
0CEBE                           .include "game/subroutine/PreloadSfxFromX.asm"
0CEBE                           
0CEBE                           sub_PreloadSfxFromX:
0CEBE                               
0CEBE                               ;; Load sample X into sfx address (low byte)
0CEBE BD 41 DA                      LDA tbl_Sfx_lo,x
0CEC1 85 4C                         STA sfx_address
0CEC3                               
0CEC3                               ;; Load sample X into sfx address (high byte)
0CEC3 BD 3E DA                      LDA tbl_Sfx_hi,x
0CEC6 85 4D                         STA sfx_address+1
0CEC8                               
0CEC8                               ;; Start SFX timer
0CEC8 A9 01                         LDA #$01
0CECA 85 4E                         STA sfx_timer
0CECC                               
0CECC 60                            RTS
0CECD                               
0CECD                               0CECD                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CECD                           
0CECD                           ;; Remove a block from screen
0CECD                           sub_RemoveBlockFromScreen:
0CECD                           
0CECD                               ;; Get current buffer location
0CECD A4 3A                         LDY ppu_buffer_pointer
0CECF                               
0CECF                               ;; TILE 1: if metatile on top left is solid, draw
0CECF                               ;; null tile, else draw random noise tile
0CECF A9 00                         LDA #$00
0CED1 85 39                         STA ppu_buffer_update
0CED3                               
0CED3 A5 00                         LDA temp
0CED5 99 00 03                      STA ppu_buffer,y
0CED8 C8                            INY
0CED9 A5 01                         LDA temp+1
0CEDB 99 00 03                      STA ppu_buffer,y
0CEDE C8                            INY
0CEDF                               
0CEDF 8A                            TXA
0CEE0 29 0F                         AND #%00001111
0CEE2 F0 11                         BEQ +drawRandomTile
0CEE4                           
0CEE4 8A                            TXA
0CEE5 29 F0                         AND #%11110000
0CEE7 F0 0C                         BEQ +drawRandomTile
0CEE9                           
0CEE9 BD EF 03                      LDA tile_type-17,x
0CEEC 29 01                         AND #%00000001
0CEEE F0 05                         BEQ +drawRandomTile  
0CEF0                           
0CEF0                               ;; Draw a null tile
0CEF0 A9 00                         LDA #$00
0CEF2 4C FD CE                      JMP +addToPPUBuffer
0CEF5                               
0CEF5                           +drawRandomTile:
0CEF5                               ;; Draw a random tile
0CEF5 20 D0 C4                      JSR sub_GetRandomNumber
0CEF8 29 07                         AND #%00000111
0CEFA 18                            CLC
0CEFB 69 68                         ADC #$68
0CEFD                               
0CEFD                               ;; Add tile to ppu buffer
0CEFD                           +addToPPUBuffer:
0CEFD 99 00 03                      STA ppu_buffer,y
0CF00 C8                            INY
0CF01                           
0CF01                               ;; TILE 2: If metatile above is solid, draw null,
0CF01                               ;; else draw random noise.
0CF01 E6 01                         INC temp+1
0CF03 A5 00                         LDA temp
0CF05 99 00 03                      STA ppu_buffer,y
0CF08 C8                            INY
0CF09 A5 01                         LDA temp+1
0CF0B 99 00 03                      STA ppu_buffer,y
0CF0E C8                            INY
0CF0F                               
0CF0F 8A                            TXA
0CF10 29 F0                         AND #%11110000
0CF12 F0 0C                         BEQ +drawRandomTile
0CF14                               
0CF14 BD F0 03                      LDA tile_type-16,x
0CF17 29 01                         AND #%00000001
0CF19 F0 05                         BEQ +drawRandomTile
0CF1B                               
0CF1B A9 00                         LDA #%00
0CF1D 4C 28 CF                      JMP +addToPPUBuffer
0CF20                           
0CF20                           +drawRandomTile:
0CF20 20 D0 C4                      JSR sub_GetRandomNumber
0CF23 29 07                         AND #%00000111
0CF25 18                            CLC
0CF26 69 68                         ADC #$68
0CF28                           
0CF28                           +addToPPUBuffer:
0CF28 99 00 03                      STA ppu_buffer,y
0CF2B C8                            INY
0CF2C                               
0CF2C                               ;; TILE 3 - If metatile left is solid, draw null,
0CF2C                               ;; else draw random noise.
0CF2C A5 01                         LDA temp+1
0CF2E 18                            CLC
0CF2F 69 1F                         ADC #$1F
0CF31 85 01                         STA temp+1
0CF33 A5 00                         LDA temp
0CF35 69 00                         ADC #$00
0CF37 85 00                         STA temp
0CF39 99 00 03                      STA ppu_buffer,y
0CF3C C8                            INY
0CF3D A5 01                         LDA temp+1
0CF3F 99 00 03                      STA ppu_buffer,y
0CF42 C8                            INY
0CF43                               
0CF43 8A                            TXA
0CF44 29 0F                         AND #%00001111
0CF46 F0 0C                         BEQ +drawRandomTile
0CF48                               
0CF48 BD FF 03                      LDA tile_type-1,x
0CF4B 29 01                         AND #%00000001
0CF4D F0 05                         BEQ +drawRandomTile
0CF4F                               
0CF4F A9 00                         LDA #%00
0CF51 4C 5C CF                      JMP +addToPPUBuffer
0CF54                           
0CF54                           +drawRandomTile:
0CF54 20 D0 C4                      JSR sub_GetRandomNumber
0CF57 29 07                         AND #%00000111
0CF59 18                            CLC
0CF5A 69 68                         ADC #$68
0CF5C                               
0CF5C                           +addToPPUBuffer:
0CF5C 99 00 03                      STA ppu_buffer,y
0CF5F C8                            INY
0CF60                               
0CF60                               ;; TILE 4 - Always random noise
0CF60 E6 01                         INC temp+1
0CF62 A5 00                         LDA temp
0CF64 99 00 03                      STA ppu_buffer,y
0CF67 C8                            INY
0CF68 A5 01                         LDA temp+1
0CF6A 99 00 03                      STA ppu_buffer,y
0CF6D C8                            INY
0CF6E 20 D0 C4                      JSR sub_GetRandomNumber
0CF71 29 07                         AND #%00000111
0CF73 18                            CLC
0CF74 69 68                         ADC #$68
0CF76 99 00 03                      STA ppu_buffer,y
0CF79 C8                            INY
0CF7A                           
0CF7A                               ;; TILE 5 - If tile on the right is solid, skip,
0CF7A                               ;; else draw random noise tile
0CF7A E6 01                         INC temp+1
0CF7C                               
0CF7C 8A                            TXA
0CF7D 29 0F                         AND #%00001111
0CF7F C9 0D                         CMP #$0D
0CF81 F0 1F                         BEQ +skipTile
0CF83                               
0CF83 BD 01 04                      LDA tile_type+1,x
0CF86 29 01                         AND #%00000001
0CF88 D0 18                         BNE +skipTile
0CF8A A5 00                             LDA temp
0CF8C 99 00 03                          STA ppu_buffer,y
0CF8F C8                                INY
0CF90 A5 01                             LDA temp+1
0CF92 99 00 03                          STA ppu_buffer,y
0CF95 C8                                INY
0CF96 20 D0 C4                          JSR sub_GetRandomNumber
0CF99 29 07                             AND #%00000111
0CF9B 18                                CLC
0CF9C 69 68                             ADC #$68
0CF9E 99 00 03                          STA ppu_buffer,y
0CFA1 C8                                INY    
0CFA2                               +skipTile:
0CFA2                           
0CFA2                               ;; TILE 6 - If tile on bottom is solid, skip,
0CFA2                               ;; else draw random noise
0CFA2 A5 01                         LDA temp+1
0CFA4 18                            CLC
0CFA5 69 1F                         ADC #$1F
0CFA7 85 01                         STA temp+1
0CFA9 A5 00                         LDA temp
0CFAB 69 00                         ADC #$00
0CFAD 85 00                         STA temp
0CFAF                           
0CFAF 8A                            TXA
0CFB0 29 F0                         AND #%11110000
0CFB2 C9 90                         CMP #$90
0CFB4 F0 1F                         BEQ +skipTile
0CFB6                           
0CFB6 BD 10 04                      LDA tile_type+16,x
0CFB9 29 01                         AND #%00000001
0CFBB D0 18                         BNE +skipTile
0CFBD A5 00                             LDA temp
0CFBF 99 00 03                          STA ppu_buffer,y
0CFC2 C8                                INY
0CFC3 A5 01                             LDA temp+1
0CFC5 99 00 03                          STA ppu_buffer,y
0CFC8 C8                                INY
0CFC9 20 D0 C4                          JSR sub_GetRandomNumber
0CFCC 29 07                             AND #%00000111
0CFCE 18                                CLC
0CFCF 69 68                             ADC #$68
0CFD1 99 00 03                          STA ppu_buffer,y
0CFD4 C8                                INY    
0CFD5                               +skipTile:
0CFD5                               
0CFD5                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CFD5                               ;; else draw random noise
0CFD5 E6 01                         INC temp+1
0CFD7                           
0CFD7 8A                            TXA
0CFD8 29 F0                         AND #%11110000
0CFDA C9 90                         CMP #$90
0CFDC F0 26                         BEQ +skipTile
0CFDE                               
0CFDE 8A                            TXA
0CFDF 29 0F                         AND #%00001111
0CFE1 C9 0D                         CMP #$0D
0CFE3 F0 1F                         BEQ +skipTile
0CFE5                               
0CFE5 BD 11 04                      LDA tile_type+17,x
0CFE8 29 01                         AND #%00000001
0CFEA D0 18                         BNE +skipTile
0CFEC A5 00                             LDA temp
0CFEE 99 00 03                          STA ppu_buffer,y
0CFF1 C8                                INY
0CFF2 A5 01                             LDA temp+1
0CFF4 99 00 03                          STA ppu_buffer,y
0CFF7 C8                                INY
0CFF8 20 D0 C4                          JSR sub_GetRandomNumber
0CFFB 29 07                             AND #%00000111
0CFFD 18                                CLC
0CFFE 69 68                             ADC #$68
0D000 99 00 03                          STA ppu_buffer,y
0D003 C8                                INY    
0D004                               +skipTile:   
0D004                           
0D004                           
0D004                               ;; Update attribute table accordingly through ppu buffer
0D004 20 43 D0                      JSR sub_SetTileAttributeAddress
0D007                               
0D007 8A                            TXA
0D008 29 10                         AND #%00010000
0D00A F0 05                         BEQ +
0D00C A9 F0                             LDA #%11110000
0D00E 4C 13 D0                          JMP ++
0D011                               +
0D011 A9 0F                         LDA #%00001111
0D013                               ++
0D013 85 02                         STA temp+2
0D015                               
0D015 8A                            TXA
0D016 48                            PHA
0D017 29 01                         AND #%00000001
0D019 F0 07                         BEQ +
0D01B A5 02                             LDA temp+2
0D01D 09 CC                             ORA #%11001100
0D01F 4C 26 D0                          JMP ++
0D022                               +
0D022 A5 02                         LDA temp+2
0D024 09 33                         ORA #%00110011
0D026                               ++
0D026 85 02                         STA temp+2
0D028                               
0D028 A5 00                         LDA temp
0D02A 38                            SEC
0D02B E9 C0                         SBC #$C0
0D02D AA                            TAX
0D02E BD A0 04                      LDA tile_attributes,x
0D031 25 02                         AND temp+2
0D033 9D A0 04                      STA tile_attributes,x
0D036 99 00 03                      STA ppu_buffer,y
0D039 C8                            INY
0D03A 68                            PLA
0D03B AA                            TAX
0D03C                           
0D03C                               ;; Tell PPU to update tiles and attributes next frame
0D03C 84 3A                         STY ppu_buffer_pointer
0D03E A9 01                         LDA #$01
0D040 85 39                         STA ppu_buffer_update
0D042                            
0D042                               ;; We're done - return
0D042 60                            RTS
0D043                           
0D043                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D043                           
0D043                           ;; Set the correct tile attribute address based on game tile (x) 
0D043                           ;; into the correct ppu buffer slot (y)
0D043                           
0D043                           sub_SetTileAttributeAddress:
0D043 A9 23                         LDA #$23
0D045 99 00 03                      STA ppu_buffer,y
0D048 C8                            INY
0D049                               
0D049 8A                            TXA
0D04A 29 F0                         AND #%11110000
0D04C 4A                            LSR
0D04D 4A                            LSR
0D04E 4A                            LSR
0D04F 4A                            LSR
0D050 18                            CLC
0D051 69 01                         ADC #$01
0D053 4A                            LSR
0D054 0A                            ASL
0D055 0A                            ASL
0D056 0A                            ASL
0D057 18                            CLC
0D058 69 C8                         ADC #$C8
0D05A 85 00                         STA temp
0D05C 8A                            TXA
0D05D 29 0F                         AND #%00001111
0D05F 18                            CLC
0D060 69 01                         ADC #$01
0D062 4A                            LSR
0D063 18                            CLC
0D064 65 00                         ADC temp
0D066 85 00                         STA temp
0D068 99 00 03                      STA ppu_buffer,y
0D06B C8                            INY
0D06C                                  
0D06C 60                            RTS
0D06D                           
0D06D                           .include "game/subroutine/SubtractXFromBonus.asm"
0D06D                           
0D06D                           sub_SubtractXFromBonus:
0D06D 86 09                         STX temp+9
0D06F A5 2E                         LDA ball_bonus+2
0D071 38                            SEC
0D072 E5 09                         SBC temp+9
0D074 30 05                         BMI +
0D076 85 2E                             STA ball_bonus+2
0D078 4C 90 D0                          JMP +updateBonusOnScreen
0D07B                               +
0D07B                           
0D07B 18                            CLC
0D07C 69 0A                         ADC #$0A
0D07E 85 2E                         STA ball_bonus+2
0D080 C6 2D                         DEC ball_bonus+1
0D082 10 0C                         BPL +updateBonusOnScreen
0D084                           
0D084 A9 09                         LDA #$09
0D086 85 2D                         STA ball_bonus+1
0D088 C6 2C                         DEC ball_bonus
0D08A 10 04                         BPL +updateBonusOnScreen
0D08C                           
0D08C A9 00                         LDA #$00
0D08E 85 2C                         STA ball_bonus
0D090                           
0D090                               +updateBonusOnScreen:
0D090 A9 20                         LDA #$20
0D092 85 00                         STA temp
0D094 A9 9C                         LDA #$9C
0D096 85 01                         STA temp+1
0D098 A2 02                         LDX #$02
0D09A                               
0D09A                               -updateNextDigit:
0D09A B5 2C                             LDA ball_bonus,x
0D09C 18                                CLC
0D09D 69 01                             ADC #$01
0D09F 85 02                             STA temp+2
0D0A1 20 BC D0                          JSR sub_WriteByteToPPUBuffer
0D0A4 C6 01                             DEC temp+1
0D0A6 CA                                DEX
0D0A7 10 F1                         BPL -updateNextDigit
0D0A9                           
0D0A9 60                            RTS
0D0AA                           
0D0AA                           .include "game/subroutine/WaitXFrames.asm"
0D0AA                           
0D0AA                           sub_WaitXFrames:
0D0AA                               
0D0AA                               ;; Push X to stack
0D0AA 8A                            TXA
0D0AB 48                            PHA
0D0AC                               
0D0AC                               ;; Wait for NMI
0D0AC 20 F2 C4                      JSR sub_WaitForNMI
0D0AF                           
0D0AF                               ;; Clear pointer, except for sprite-zero and ball
0D0AF A9 08                         LDA #$08
0D0B1 85 3D                         STA sprite_ram_pointer
0D0B3                           
0D0B3                               ;; Load animations (if any)
0D0B3 20 C1 C9                      JSR sub_LoadAnimations
0D0B6                               
0D0B6                               ;; Restore original X
0D0B6 68                            PLA
0D0B7 AA                            TAX
0D0B8                               
0D0B8                               ;; Check if all X frames have passed
0D0B8 CA                            DEX
0D0B9 D0 EF                         BNE sub_WaitXFrames
0D0BB                               
0D0BB                               ;; Return
0D0BB 60                            RTS
0D0BC                           
0D0BC                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D0BC                           
0D0BC                           ;; Write the byte in temp+2 and the ppu address (temp)
0D0BC                           ;; to a buffer, so NMI can update it before the next frame
0D0BC                           
0D0BC                           sub_WriteByteToPPUBuffer:
0D0BC                           
0D0BC                               ;; Prevent updating until full 3-byte buffer is filled,
0D0BC                               ;; so that graphics won't glitch out if NMI happens during
0D0BC                               ;; updating the buffer
0D0BC A9 00                         LDA #$00
0D0BE 85 39                         STA ppu_buffer_update
0D0C0                           
0D0C0                               ;; Check if buffer full; if so, wait a frame and force update
0D0C0 A4 3A                         LDY ppu_buffer_pointer
0D0C2 C0 60                         CPY #$60
0D0C4 D0 05                         BNE +
0D0C6 E6 39                             INC ppu_buffer_update
0D0C8 20 FB C4                          JSR sub_WaitForVBlank
0D0CB                               +
0D0CB                           
0D0CB                               ;; Add ppu_addr high byte to buffer
0D0CB A5 00                         LDA temp
0D0CD 99 00 03                      STA ppu_buffer,y
0D0D0                           
0D0D0                               ;; Add ppu_addr low byte to buffer
0D0D0 C8                            INY
0D0D1 A5 01                         LDA temp+1
0D0D3 99 00 03                      STA ppu_buffer,y
0D0D6                           
0D0D6                               ;; Add ppu_data to buffer
0D0D6 C8                            INY
0D0D7 A5 02                         LDA temp+2
0D0D9 99 00 03                      STA ppu_buffer,y
0D0DC                           
0D0DC                               ;; Update buffer pointer
0D0DC C8                            INY
0D0DD 84 3A                         STY ppu_buffer_pointer
0D0DF                           
0D0DF                               ;; Tell NMI to update next round
0D0DF E6 39                         INC ppu_buffer_update
0D0E1                           
0D0E1                               ;; Return
0D0E1 60                            RTS
0D0E2                           
0D0E2                           
0D0E2                           
0D0E2                           
0D0E2                           ;; LUTs
0D0E2                           .include "game/include/tables.asm"
0D0E2                           
0D0E2                           ;; Initial screen palette
0D0E2                           tbl_IntroScreenPalette:
0D0E2 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D0E6 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D0EA 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D0EE 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D0F2                           
0D0F2 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D0F6 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D0FA 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D0FE 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D102                           
0D102                           
0D102                           ;; Intro: mapping logo index to chr tile
0D102                           tbl_IntroScreenLogoChr:
0D102 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D10A                           
0D10A                           
0D10A                           ;; Intro screen data
0D10A                           tbl_IntroScreenData:
0D10A                           
0D10A                               ;; Set PPU address $20AC and draw
0D10A 60 AC                         .db #$60, #$AC
0D10C 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D114                           
0D114                               ;; Set PPU address $20CF and draw
0D114 60 CF                         .db #$60, #$CF
0D116 01 02                         .db #_0, #_1
0D118                               
0D118                               ;; Set PPU address $2122 and draw
0D118 61 22                         .db #$61, #$22
0D11A 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D121 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D127 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D12F 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D134                               
0D134                               ;; Set PPU address $2147 and draw
0D134 61 47                         .db #$61, #$47
0D136 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D13D 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D141 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D147 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D14D                               
0D14D                               ;; Set PPU address $218B and draw
0D14D 61 8B                         .db #$61, #$8B
0D14F 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D155 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D15A                               
0D15A                               ;; Set PPU address $21E6 and draw
0D15A 61 E6                         .db #$61, #$E6
0D15C 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D164 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D168 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D16F                               
0D16F                               ;; Set PPU address $222D and draw
0D16F 62 2D                         .db #$62, #$2D
0D171 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D177                               
0D177                               ;; Set PPU address $2281
0D177 62 81                         .db #$62, #$81
0D179                               
0D179                               ;; Draw the Crillion logo
0D179 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D17D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D181 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D185 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D189                               
0D189 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D18D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D191 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D195 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D199                               
0D199 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D19D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1A1 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1A5 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1A9                           
0D1A9 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1AD C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1B1 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1B5 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1B9                               
0D1B9 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1BD C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1C1 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1C5 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1C9                           
0D1C9 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D1CD C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D1D1 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D1D5 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D1D8                           
0D1D8                               ;; End of intro
0D1D8 3F                            .db #$3F
0D1D9                           
0D1D9                           
0D1D9                           ;; Animation frames table
0D1D9                           .include "game/include/table/animation_frames.asm"
0D1D9                           
0D1D9                           ;; CHR tile-id's per slide of explosion
0D1D9                           explosion_slide0:
0D1D9 00 00 00                      .db #$00, #$00, #$00
0D1DC 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D1DF 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D1E2                           
0D1E2                           explosion_slide1:
0D1E2 00 00 00                      .db #$00, #$00, #$00
0D1E5 29 2A 2B                      .db #$29, #$2A, #$2B
0D1E8 39 3A 3B                      .db #$39, #$3A, #$3B
0D1EB                           
0D1EB                           explosion_slide2:
0D1EB 16 00 00                      .db #$16, #$00, #$00
0D1EE 26 27 28                      .db #$26, #$27, #$28
0D1F1 36 37 38                      .db #$36, #$37, #$38
0D1F4                           
0D1F4                           explosion_slide3:
0D1F4 00 14 15                      .db #$00, #$14, #$15
0D1F7 23 24 25                      .db #$23, #$24, #$25
0D1FA 33 34 35                      .db #$33, #$34, #$35
0D1FD                           
0D1FD                           explosion_slide4:
0D1FD 10 11 12                      .db #$10, #$11, #$12
0D200 20 21 22                      .db #$20, #$21, #$22
0D203 30 31 32                      .db #$30, #$31, #$32
0D206                           
0D206                           ;; High and low bytes of animation slides
0D206                           explosion_anim_hi:
0D206 D1                            .db >#explosion_slide0
0D207 D1                            .db >#explosion_slide1
0D208 D1                            .db >#explosion_slide2
0D209 D1                            .db >#explosion_slide3
0D20A D1                            .db >#explosion_slide4
0D20B D1                            .db >#explosion_slide4
0D20C D1                            .db >#explosion_slide3
0D20D D1                            .db >#explosion_slide2
0D20E D1                            .db >#explosion_slide1
0D20F D1                            .db >#explosion_slide0
0D210                           
0D210                           explosion_anim_lo:
0D210 D9                            .db <#explosion_slide0
0D211 E2                            .db <#explosion_slide1
0D212 EB                            .db <#explosion_slide2
0D213 F4                            .db <#explosion_slide3
0D214 FD                            .db <#explosion_slide4
0D215 FD                            .db <#explosion_slide4
0D216 F4                            .db <#explosion_slide3
0D217 EB                            .db <#explosion_slide2
0D218 E2                            .db <#explosion_slide1
0D219 D9                            .db <#explosion_slide0
0D21A                           
0D21A                           
0D21A                           
0D21A                           ;; Ball palette color table (CBRYGM)
0D21A                           tbl_BallColorDark:
0D21A 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D220                            
0D220                           tbl_BallColorLight:
0D220 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D226                           
0D226                               
0D226                           ;; Screen mode drawing routine addresses
0D226                           tbl_LoadScreenHi:
0D226 CE CA CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D229                           
0D229                           tbl_LoadScreenLo:
0D229 2E 66 BD                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D22C                           
0D22C                           
0D22C                           ;; Level data
0D22C                           .include "game/include/table/level_data.asm"
0D22C                           
0D22C                           ;; Level layout tables
0D22C                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D22C                           
0D22C                           ifdef TESTING
0D22C                           lvl_test:
0D22C 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D234 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D23C FF                            .db #LEVEL_END
0D23D                           endif
0D23D                           
0D23D                           lvl_layout_01:
0D23D 61 21                         .db #$61, #%00100001
0D23F 52 61                         .db #$52, #%01100001
0D241 43 65                         .db #$43, #%01100101
0D243 83 05                         .db #$83, #%00000101
0D245 93 15                         .db #$93, #%00010101
0D247 34 7A                         .db #$34, #%01111010
0D249 74 7A                         .db #$74, #%01111010
0D24B 35 7A                         .db #$35, #%01111010
0D24D 75 7A                         .db #$75, #%01111010
0D24F 46 65                         .db #$46, #%01100101
0D251 86 25                         .db #$86, #%00100101
0D253 57 61                         .db #$57, #%01100001
0D255 68 21                         .db #$68, #%00100001
0D257 FF                            .db #LEVEL_END
0D258                           
0D258                           lvl_layout_02:
0D258 C0 0A                         .db #$C0, #%00001010
0D25A 11 15                         .db #$11, #%00010101
0D25C 21 62                         .db #$21, #%01100010
0D25E 61 62                         .db #$61, #%01100010
0D260 A1 42                         .db #$A1, #%01000010
0D262 12 67                         .db #$12, #%01100111
0D264 52 67                         .db #$52, #%01100111
0D266 92 67                         .db #$92, #%01100111
0D268 C3 0D                         .db #$C3, #%00001101
0D26A 14 11                         .db #$14, #%00010001
0D26C 24 65                         .db #$24, #%01100101
0D26E 64 65                         .db #$64, #%01100101
0D270 A4 45                         .db #$A4, #%01000101
0D272 15 67                         .db #$15, #%01100111
0D274 55 67                         .db #$55, #%01100111
0D276 95 67                         .db #$95, #%01100111
0D278 17 12                         .db #$17, #%00010010
0D27A 27 61                         .db #$27, #%01100001
0D27C 67 61                         .db #$67, #%01100001
0D27E A7 41                         .db #$A7, #%01000001
0D280 38 7A                         .db #$38, #%01111010
0D282 98 5A                         .db #$98, #%01011010
0D284 18 27                         .db #$18, #%00100111
0D286 48 27                         .db #$48, #%00100111
0D288 78 27                         .db #$78, #%00100111
0D28A C8 07                         .db #$C8, #%00000111
0D28C FF                            .db #LEVEL_END
0D28D                           
0D28D                           lvl_layout_03:
0D28D 00 7A                         .db #$00, #%01111010
0D28F 40 7A                         .db #$40, #%01111010
0D291 80 7A                         .db #$80, #%01111010
0D293 C0 1A                         .db #$C0, #%00011010
0D295 10 A1                         .db #$10, #%10100001
0D297 13 E1                         .db #$13, #%11100001
0D299 17 C1                         .db #$17, #%11000001
0D29B 30 C1                         .db #$30, #%11000001
0D29D 34 C1                         .db #$34, #%11000001
0D29F 38 A1                         .db #$38, #%10100001
0D2A1 50 E1                         .db #$50, #%11100001
0D2A3 55 81                         .db #$55, #%10000001
0D2A5 57 C1                         .db #$57, #%11000001
0D2A7 70 C1                         .db #$70, #%11000001
0D2A9 73 A1                         .db #$73, #%10100001
0D2AB 76 E1                         .db #$76, #%11100001
0D2AD 90 E1                         .db #$90, #%11100001
0D2AF 95 81                         .db #$95, #%10000001
0D2B1 97 C1                         .db #$97, #%11000001
0D2B3 B0 C1                         .db #$B0, #%11000001
0D2B5 B4 C1                         .db #$B4, #%11000001
0D2B7 B8 A1                         .db #$B8, #%10100001
0D2B9 D0 A1                         .db #$D0, #%10100001
0D2BB D3 E1                         .db #$D3, #%11100001
0D2BD D7 C1                         .db #$D7, #%11000001
0D2BF FF                            .db #LEVEL_END
0D2C0                           
0D2C0                           lvl_layout_04:
0D2C0 00 4C                         .db #$00, #%01001100
0D2C2 40 6C                         .db #$40, #%01101100
0D2C4 80 4C                         .db #$80, #%01001100
0D2C6 81 AC                         .db #$81, #%10101100
0D2C8 C1 2C                         .db #$C1, #%00101100
0D2CA 02 6C                         .db #$02, #%01101100
0D2CC 42 CC                         .db #$42, #%11001100
0D2CE 62 EC                         .db #$62, #%11101100
0D2D0 A2 CC                         .db #$A2, #%11001100
0D2D2 C3 CC                         .db #$C3, #%11001100
0D2D4 04 4C                         .db #$04, #%01001100
0D2D6 84 2C                         .db #$84, #%00101100
0D2D8 25 AC                         .db #$25, #%10101100
0D2DA 85 AC                         .db #$85, #%10101100
0D2DC 06 AC                         .db #$06, #%10101100
0D2DE 36 CC                         .db #$36, #%11001100
0D2E0 56 CC                         .db #$56, #%11001100
0D2E2 66 EC                         .db #$66, #%11101100
0D2E4 96 6C                         .db #$96, #%01101100
0D2E6 C7 AC                         .db #$C7, #%10101100
0D2E8 08 2C                         .db #$08, #%00101100
0D2EA 78 6C                         .db #$78, #%01101100
0D2EC D8 0C                         .db #$D8, #%00001100
0D2EE 30 A1                         .db #$30, #%10100001
0D2F0 B0 21                         .db #$B0, #%00100001
0D2F2 01 41                         .db #$01, #%01000001
0D2F4 41 61                         .db #$41, #%01100001
0D2F6 91 A1                         .db #$91, #%10100001
0D2F8 A1 21                         .db #$A1, #%00100001
0D2FA 52 C1                         .db #$52, #%11000001
0D2FC 72 E1                         .db #$72, #%11100001
0D2FE B2 C1                         .db #$B2, #%11000001
0D300 C2 21                         .db #$C2, #%00100001
0D302 03 41                         .db #$03, #%01000001
0D304 33 C1                         .db #$33, #%11000001
0D306 83 21                         .db #$83, #%00100001
0D308 D3 E1                         .db #$D3, #%11100001
0D30A 05 21                         .db #$05, #%00100001
0D30C 45 E1                         .db #$45, #%11100001
0D30E A5 21                         .db #$A5, #%00100001
0D310 16 A1                         .db #$16, #%10100001
0D312 76 A1                         .db #$76, #%10100001
0D314 27 A1                         .db #$27, #%10100001
0D316 57 21                         .db #$57, #%00100001
0D318 87 41                         .db #$87, #%01000001
0D31A B7 A1                         .db #$B7, #%10100001
0D31C 19 21                         .db #$19, #%00100001
0D31E 39 41                         .db #$39, #%01000001
0D320 89 41                         .db #$89, #%01000001
0D322 C9 21                         .db #$C9, #%00100001
0D324 D0 1A                         .db #$D0, #%00011010
0D326 55 1A                         .db #$55, #%00011010
0D328 95 1A                         .db #$95, #%00011010
0D32A D7 1A                         .db #$D7, #%00011010
0D32C 09 1A                         .db #$09, #%00011010
0D32E 79 1A                         .db #$79, #%00011010
0D330 FF                            .db #LEVEL_END
0D331                           
0D331                           lvl_layout_05:
0D331 40 0A                         .db #$40, #%00001010
0D333 70 1A                         .db #$70, #%00011010
0D335 B0 42                         .db #$B0, #%01000010
0D337 41 A7                         .db #$41, #%10100111
0D339 B1 22                         .db #$B1, #%00100010
0D33B D1 15                         .db #$D1, #%00010101
0D33D 22 0A                         .db #$22, #%00001010
0D33F 52 05                         .db #$52, #%00000101
0D341 B2 42                         .db #$B2, #%01000010
0D343 03 27                         .db #$03, #%00100111
0D345 33 67                         .db #$33, #%01100111
0D347 73 67                         .db #$73, #%01100111
0D349 B3 47                         .db #$B3, #%01000111
0D34B 05 E5                         .db #$05, #%11100101
0D34D 25 A5                         .db #$25, #%10100101
0D34F 35 25                         .db #$35, #%00100101
0D351 65 45                         .db #$65, #%01000101
0D353 A5 45                         .db #$A5, #%01000101
0D355 46 E5                         .db #$46, #%11100101
0D357 66 E5                         .db #$66, #%11100101
0D359 86 E5                         .db #$86, #%11100101
0D35B A6 E2                         .db #$A6, #%11100010
0D35D C6 E5                         .db #$C6, #%11100101
0D35F 27 25                         .db #$27, #%00100101
0D361 77 05                         .db #$77, #%00000101
0D363 B7 02                         .db #$B7, #%00000010
0D365 09 05                         .db #$09, #%00000101
0D367 79 05                         .db #$79, #%00000101
0D369 B9 02                         .db #$B9, #%00000010
0D36B FF                            .db #LEVEL_END
0D36C                           
0D36C                           lvl_layout_06:
0D36C 00 03                         .db #$00, #%00000011
0D36E 20 03                         .db #$20, #%00000011
0D370 40 03                         .db #$40, #%00000011
0D372 A0 03                         .db #$A0, #%00000011
0D374 C0 03                         .db #$C0, #%00000011
0D376 11 03                         .db #$11, #%00000011
0D378 31 03                         .db #$31, #%00000011
0D37A 51 03                         .db #$51, #%00000011
0D37C 91 03                         .db #$91, #%00000011
0D37E B1 03                         .db #$B1, #%00000011
0D380 D1 03                         .db #$D1, #%00000011
0D382 02 03                         .db #$02, #%00000011
0D384 22 03                         .db #$22, #%00000011
0D386 42 03                         .db #$42, #%00000011
0D388 A2 03                         .db #$A2, #%00000011
0D38A C2 03                         .db #$C2, #%00000011
0D38C 13 03                         .db #$13, #%00000011
0D38E 33 03                         .db #$33, #%00000011
0D390 53 03                         .db #$53, #%00000011
0D392 93 03                         .db #$93, #%00000011
0D394 B3 03                         .db #$B3, #%00000011
0D396 D3 03                         .db #$D3, #%00000011
0D398 04 03                         .db #$04, #%00000011
0D39A 24 03                         .db #$24, #%00000011
0D39C 44 03                         .db #$44, #%00000011
0D39E A4 03                         .db #$A4, #%00000011
0D3A0 C4 03                         .db #$C4, #%00000011
0D3A2 15 03                         .db #$15, #%00000011
0D3A4 35 03                         .db #$35, #%00000011
0D3A6 55 03                         .db #$55, #%00000011
0D3A8 95 03                         .db #$95, #%00000011
0D3AA B5 03                         .db #$B5, #%00000011
0D3AC D5 03                         .db #$D5, #%00000011
0D3AE 06 03                         .db #$06, #%00000011
0D3B0 26 03                         .db #$26, #%00000011
0D3B2 46 03                         .db #$46, #%00000011
0D3B4 A6 03                         .db #$A6, #%00000011
0D3B6 C6 03                         .db #$C6, #%00000011
0D3B8 17 03                         .db #$17, #%00000011
0D3BA 37 03                         .db #$37, #%00000011
0D3BC 57 03                         .db #$57, #%00000011
0D3BE 97 03                         .db #$97, #%00000011
0D3C0 B7 03                         .db #$B7, #%00000011
0D3C2 D7 03                         .db #$D7, #%00000011
0D3C4 08 03                         .db #$08, #%00000011
0D3C6 28 03                         .db #$28, #%00000011
0D3C8 48 03                         .db #$48, #%00000011
0D3CA A8 03                         .db #$A8, #%00000011
0D3CC C8 03                         .db #$C8, #%00000011
0D3CE 19 03                         .db #$19, #%00000011
0D3D0 39 03                         .db #$39, #%00000011
0D3D2 59 03                         .db #$59, #%00000011
0D3D4 99 03                         .db #$99, #%00000011
0D3D6 B9 03                         .db #$B9, #%00000011
0D3D8 D9 03                         .db #$D9, #%00000011
0D3DA 60 4B                         .db #$60, #%01001011
0D3DC 71 CB                         .db #$71, #%11001011
0D3DE 62 4B                         .db #$62, #%01001011
0D3E0 64 4B                         .db #$64, #%01001011
0D3E2 75 CB                         .db #$75, #%11001011
0D3E4 66 4B                         .db #$66, #%01001011
0D3E6 68 4B                         .db #$68, #%01001011
0D3E8 79 0B                         .db #$79, #%00001011
0D3EA 70 03                         .db #$70, #%00000011
0D3EC 72 03                         .db #$72, #%00000011
0D3EE 74 03                         .db #$74, #%00000011
0D3F0 76 03                         .db #$76, #%00000011
0D3F2 78 03                         .db #$78, #%00000011
0D3F4 FF                            .db #LEVEL_END
0D3F5                           
0D3F5                           lvl_layout_07:
0D3F5 00 11                         .db #$00, #%00010001
0D3F7 01 FA                         .db #$01, #%11111010
0D3F9 12 BA                         .db #$12, #%10111010
0D3FB 23 DA                         .db #$23, #%11011010
0D3FD 34 FA                         .db #$34, #%11111010
0D3FF 05 DA                         .db #$05, #%11011010
0D401 15 FA                         .db #$15, #%11111010
0D403 45 BA                         .db #$45, #%10111010
0D405 56 DA                         .db #$56, #%11011010
0D407 27 BA                         .db #$27, #%10111010
0D409 67 DA                         .db #$67, #%11011010
0D40B 38 3A                         .db #$38, #%00111010
0D40D 78 BA                         .db #$78, #%10111010
0D40F 09 3A                         .db #$09, #%00111010
0D411 39 3A                         .db #$39, #%00111010
0D413 89 1A                         .db #$89, #%00011010
0D415 B0 01                         .db #$B0, #%00000001
0D417 D0 01                         .db #$D0, #%00000001
0D419 A1 01                         .db #$A1, #%00000001
0D41B C1 11                         .db #$C1, #%00010001
0D41D B2 01                         .db #$B2, #%00000001
0D41F D2 01                         .db #$D2, #%00000001
0D421 A3 01                         .db #$A3, #%00000001
0D423 C3 01                         .db #$C3, #%00000001
0D425 B4 01                         .db #$B4, #%00000001
0D427 D4 01                         .db #$D4, #%00000001
0D429 A5 01                         .db #$A5, #%00000001
0D42B C5 01                         .db #$C5, #%00000001
0D42D B6 01                         .db #$B6, #%00000001
0D42F D6 01                         .db #$D6, #%00000001
0D431 A7 01                         .db #$A7, #%00000001
0D433 C7 01                         .db #$C7, #%00000001
0D435 FF                            .db #LEVEL_END
0D436                           
0D436                           lvl_layout_08:
0D436 40 B5                         .db #$40, #%10110101
0D438 31 0D                         .db #$31, #%00001101
0D43A 61 10                         .db #$61, #%00010000
0D43C 42 C7                         .db #$42, #%11000111
0D43E 52 67                         .db #$52, #%01100111
0D440 63 C7                         .db #$63, #%11000111
0D442 83 E7                         .db #$83, #%11100111
0D444 05 07                         .db #$05, #%00000111
0D446 15 3A                         .db #$15, #%00111010
0D448 07 63                         .db #$07, #%01100011
0D44A 27 13                         .db #$27, #%00010011
0D44C 38 A5                         .db #$38, #%10100101
0D44E 09 14                         .db #$09, #%00010100
0D450 19 05                         .db #$19, #%00000101
0D452 D0 E0                         .db #$D0, #%11100000
0D454 C2 A0                         .db #$C2, #%10100000
0D456 B3 E0                         .db #$B3, #%11100000
0D458 D5 E0                         .db #$D5, #%11100000
0D45A C6 E0                         .db #$C6, #%11100000
0D45C B0 C4                         .db #$B0, #%11000100
0D45E C0 A4                         .db #$C0, #%10100100
0D460 D1 A4                         .db #$D1, #%10100100
0D462 C4 24                         .db #$C4, #%00100100
0D464 C5 04                         .db #$C5, #%00000100
0D466 B7 44                         .db #$B7, #%01000100
0D468 B8 A4                         .db #$B8, #%10100100
0D46A D9 05                         .db #$D9, #%00000101
0D46C FF                            .db #LEVEL_END
0D46D                           
0D46D                           lvl_layout_09:
0D46D 81 04                         .db #$81, #%00000100
0D46F D1 04                         .db #$D1, #%00000100
0D471 32 C4                         .db #$32, #%11000100
0D473 A2 C4                         .db #$A2, #%11000100
0D475 C2 24                         .db #$C2, #%00100100
0D477 13 24                         .db #$13, #%00100100
0D479 53 04                         .db #$53, #%00000100
0D47B C3 27                         .db #$C3, #%00100111
0D47D 15 6C                         .db #$15, #%01101100
0D47F 55 6C                         .db #$55, #%01101100
0D481 95 6C                         .db #$95, #%01101100
0D483 D5 0C                         .db #$D5, #%00001100
0D485 27 C7                         .db #$27, #%11000111
0D487 47 C7                         .db #$47, #%11000111
0D489 67 C7                         .db #$67, #%11000111
0D48B 87 C7                         .db #$87, #%11000111
0D48D A7 C7                         .db #$A7, #%11000111
0D48F C7 C7                         .db #$C7, #%11000111
0D491 08 13                         .db #$08, #%00010011
0D493 28 15                         .db #$28, #%00010101
0D495 48 12                         .db #$48, #%00010010
0D497 68 15                         .db #$68, #%00010101
0D499 88 11                         .db #$88, #%00010001
0D49B A8 10                         .db #$A8, #%00010000
0D49D C8 14                         .db #$C8, #%00010100
0D49F 09 07                         .db #$09, #%00000111
0D4A1 19 03                         .db #$19, #%00000011
0D4A3 39 05                         .db #$39, #%00000101
0D4A5 59 02                         .db #$59, #%00000010
0D4A7 79 05                         .db #$79, #%00000101
0D4A9 99 01                         .db #$99, #%00000001
0D4AB B9 00                         .db #$B9, #%00000000
0D4AD D9 04                         .db #$D9, #%00000100
0D4AF FF                            .db #LEVEL_END
0D4B0                           
0D4B0                           lvl_layout_10:
0D4B0 00 02                         .db #$00, #%00000010
0D4B2 10 C9                         .db #$10, #%11001001
0D4B4 50 C9                         .db #$50, #%11001001
0D4B6 90 C9                         .db #$90, #%11001001
0D4B8 D0 C9                         .db #$D0, #%11001001
0D4BA 31 C9                         .db #$31, #%11001001
0D4BC 71 C9                         .db #$71, #%11001001
0D4BE B1 C9                         .db #$B1, #%11001001
0D4C0 13 C9                         .db #$13, #%11001001
0D4C2 53 C9                         .db #$53, #%11001001
0D4C4 93 C9                         .db #$93, #%11001001
0D4C6 D3 C9                         .db #$D3, #%11001001
0D4C8 34 C9                         .db #$34, #%11001001
0D4CA 74 C9                         .db #$74, #%11001001
0D4CC B4 C9                         .db #$B4, #%11001001
0D4CE 16 C9                         .db #$16, #%11001001
0D4D0 56 C9                         .db #$56, #%11001001
0D4D2 96 C9                         .db #$96, #%11001001
0D4D4 D6 C9                         .db #$D6, #%11001001
0D4D6 37 C9                         .db #$37, #%11001001
0D4D8 77 C9                         .db #$77, #%11001001
0D4DA B7 C9                         .db #$B7, #%11001001
0D4DC D8 12                         .db #$D8, #%00010010
0D4DE FF                            .db #LEVEL_END
0D4DF                           
0D4DF                           lvl_layout_11:
0D4DF 00 65                         .db #$00, #%01100101
0D4E1 40 45                         .db #$40, #%01000101
0D4E3 50 A7                         .db #$50, #%10100111
0D4E5 80 05                         .db #$80, #%00000101
0D4E7 90 A7                         .db #$90, #%10100111
0D4E9 A0 65                         .db #$A0, #%01100101
0D4EB 01 43                         .db #$01, #%01000011
0D4ED 31 23                         .db #$31, #%00100011
0D4EF 61 A7                         .db #$61, #%10100111
0D4F1 81 A7                         .db #$81, #%10100111
0D4F3 A1 63                         .db #$A1, #%01100011
0D4F5 02 44                         .db #$02, #%01000100
0D4F7 32 44                         .db #$32, #%01000100
0D4F9 92 04                         .db #$92, #%00000100
0D4FB A2 64                         .db #$A2, #%01100100
0D4FD 03 40                         .db #$03, #%01000000
0D4FF 33 40                         .db #$33, #%01000000
0D501 63 A1                         .db #$63, #%10100001
0D503 83 A2                         .db #$83, #%10100010
0D505 93 00                         .db #$93, #%00000000
0D507 A3 60                         .db #$A3, #%01100000
0D509 04 41                         .db #$04, #%01000001
0D50B 34 41                         .db #$34, #%01000001
0D50D 94 02                         .db #$94, #%00000010
0D50F A4 62                         .db #$A4, #%01100010
0D511 05 47                         .db #$05, #%01000111
0D513 35 67                         .db #$35, #%01100111
0D515 75 0A                         .db #$75, #%00001010
0D517 85 47                         .db #$85, #%01000111
0D519 B5 47                         .db #$B5, #%01000111
0D51B 06 E7                         .db #$06, #%11100111
0D51D 16 5A                         .db #$16, #%01011010
0D51F 26 11                         .db #$26, #%00010001
0D521 46 13                         .db #$46, #%00010011
0D523 56 1A                         .db #$56, #%00011010
0D525 66 14                         .db #$66, #%00010100
0D527 86 10                         .db #$86, #%00010000
0D529 96 5A                         .db #$96, #%01011010
0D52B A6 12                         .db #$A6, #%00010010
0D52D C6 15                         .db #$C6, #%00010101
0D52F D6 E7                         .db #$D6, #%11100111
0D531 FF                            .db #LEVEL_END
0D532                           
0D532                           lvl_layout_12:
0D532 00 00                         .db #$00, #%00000000
0D534 50 C0                         .db #$50, #%11000000
0D536 80 00                         .db #$80, #%00000000
0D538 61 00                         .db #$61, #%00000000
0D53A 22 C0                         .db #$22, #%11000000
0D53C 82 E0                         .db #$82, #%11100000
0D53E C2 E0                         .db #$C2, #%11100000
0D540 A3 20                         .db #$A3, #%00100000
0D542 C3 10                         .db #$C3, #%00010000
0D544 04 00                         .db #$04, #%00000000
0D546 54 20                         .db #$54, #%00100000
0D548 15 0A                         .db #$15, #%00001010
0D54A 25 C0                         .db #$25, #%11000000
0D54C 55 E0                         .db #$55, #%11100000
0D54E 86 20                         .db #$86, #%00100000
0D550 C6 E0                         .db #$C6, #%11100000
0D552 C7 A0                         .db #$C7, #%10100000
0D554 88 00                         .db #$88, #%00000000
0D556 59 00                         .db #$59, #%00000000
0D558 89 20                         .db #$89, #%00100000
0D55A D9 1A                         .db #$D9, #%00011010
0D55C FF                            .db #LEVEL_END
0D55D                           
0D55D                           lvl_layout_13:
0D55D 10 E0                         .db #$10, #%11100000
0D55F 20 E0                         .db #$20, #%11100000
0D561 30 E0                         .db #$30, #%11100000
0D563 40 40                         .db #$40, #%01000000
0D565 80 60                         .db #$80, #%01100000
0D567 C0 E0                         .db #$C0, #%11100000
0D569 D0 E0                         .db #$D0, #%11100000
0D56B 41 40                         .db #$41, #%01000000
0D56D 71 60                         .db #$71, #%01100000
0D56F 52 60                         .db #$52, #%01100000
0D571 A2 20                         .db #$A2, #%00100000
0D573 43 60                         .db #$43, #%01100000
0D575 83 60                         .db #$83, #%01100000
0D577 14 74                         .db #$14, #%01110100
0D579 54 74                         .db #$54, #%01110100
0D57B 94 74                         .db #$94, #%01110100
0D57D D4 14                         .db #$D4, #%00010100
0D57F 15 0D                         .db #$15, #%00001101
0D581 55 0D                         .db #$55, #%00001101
0D583 95 0D                         .db #$95, #%00001101
0D585 D5 0D                         .db #$D5, #%00001101
0D587 26 0D                         .db #$26, #%00001101
0D589 46 0D                         .db #$46, #%00001101
0D58B 66 0D                         .db #$66, #%00001101
0D58D 86 0D                         .db #$86, #%00001101
0D58F A6 0D                         .db #$A6, #%00001101
0D591 C6 0D                         .db #$C6, #%00001101
0D593 07 10                         .db #$07, #%00010000
0D595 37 0D                         .db #$37, #%00001101
0D597 77 0D                         .db #$77, #%00001101
0D599 B7 0D                         .db #$B7, #%00001101
0D59B 28 0D                         .db #$28, #%00001101
0D59D 48 0D                         .db #$48, #%00001101
0D59F 68 0D                         .db #$68, #%00001101
0D5A1 88 0D                         .db #$88, #%00001101
0D5A3 A8 0D                         .db #$A8, #%00001101
0D5A5 C8 0D                         .db #$C8, #%00001101
0D5A7 19 0D                         .db #$19, #%00001101
0D5A9 59 0D                         .db #$59, #%00001101
0D5AB 99 0D                         .db #$99, #%00001101
0D5AD D9 0D                         .db #$D9, #%00001101
0D5AF FF                            .db #LEVEL_END
0D5B0                           
0D5B0                           lvl_layout_14:
0D5B0 00 67                         .db #$00, #%01100111
0D5B2 40 67                         .db #$40, #%01100111
0D5B4 80 67                         .db #$80, #%01100111
0D5B6 C0 27                         .db #$C0, #%00100111
0D5B8 01 27                         .db #$01, #%00100111
0D5BA 31 C7                         .db #$31, #%11000111
0D5BC 51 C7                         .db #$51, #%11000111
0D5BE 71 C7                         .db #$71, #%11000111
0D5C0 91 C7                         .db #$91, #%11000111
0D5C2 B1 C7                         .db #$B1, #%11000111
0D5C4 D1 07                         .db #$D1, #%00000111
0D5C6 02 E7                         .db #$02, #%11100111
0D5C8 06 E7                         .db #$06, #%11100111
0D5CA 13 07                         .db #$13, #%00000111
0D5CC D3 07                         .db #$D3, #%00000111
0D5CE 15 07                         .db #$15, #%00000111
0D5D0 35 07                         .db #$35, #%00000111
0D5D2 55 07                         .db #$55, #%00000111
0D5D4 75 07                         .db #$75, #%00000111
0D5D6 95 07                         .db #$95, #%00000111
0D5D8 B5 07                         .db #$B5, #%00000111
0D5DA D5 07                         .db #$D5, #%00000111
0D5DC 17 07                         .db #$17, #%00000111
0D5DE 37 C7                         .db #$37, #%11000111
0D5E0 57 C7                         .db #$57, #%11000111
0D5E2 77 C7                         .db #$77, #%11000111
0D5E4 97 C7                         .db #$97, #%11000111
0D5E6 B7 C7                         .db #$B7, #%11000111
0D5E8 D7 07                         .db #$D7, #%00000111
0D5EA 19 07                         .db #$19, #%00000111
0D5EC D9 07                         .db #$D9, #%00000111
0D5EE 22 4C                         .db #$22, #%01001100
0D5F0 62 4C                         .db #$62, #%01001100
0D5F2 A2 4C                         .db #$A2, #%01001100
0D5F4 24 0C                         .db #$24, #%00001100
0D5F6 44 0C                         .db #$44, #%00001100
0D5F8 64 0C                         .db #$64, #%00001100
0D5FA 84 0C                         .db #$84, #%00001100
0D5FC A4 0C                         .db #$A4, #%00001100
0D5FE C4 0C                         .db #$C4, #%00001100
0D600 26 0C                         .db #$26, #%00001100
0D602 46 0C                         .db #$46, #%00001100
0D604 66 0C                         .db #$66, #%00001100
0D606 86 0C                         .db #$86, #%00001100
0D608 A6 0C                         .db #$A6, #%00001100
0D60A C6 0C                         .db #$C6, #%00001100
0D60C 28 4C                         .db #$28, #%01001100
0D60E 68 4C                         .db #$68, #%01001100
0D610 A8 4C                         .db #$A8, #%01001100
0D612 32 04                         .db #$32, #%00000100
0D614 52 04                         .db #$52, #%00000100
0D616 72 04                         .db #$72, #%00000100
0D618 92 04                         .db #$92, #%00000100
0D61A B2 04                         .db #$B2, #%00000100
0D61C 38 04                         .db #$38, #%00000100
0D61E 58 04                         .db #$58, #%00000100
0D620 78 04                         .db #$78, #%00000100
0D622 98 04                         .db #$98, #%00000100
0D624 B8 04                         .db #$B8, #%00000100
0D626 FF                            .db #LEVEL_END
0D627                           
0D627                           lvl_layout_15:
0D627 00 7A                         .db #$00, #%01111010
0D629 40 7A                         .db #$40, #%01111010
0D62B 80 7A                         .db #$80, #%01111010
0D62D C0 3A                         .db #$C0, #%00111010
0D62F 41 04                         .db #$41, #%00000100
0D631 61 04                         .db #$61, #%00000100
0D633 81 04                         .db #$81, #%00000100
0D635 A1 04                         .db #$A1, #%00000100
0D637 05 E4                         .db #$05, #%11100100
0D639 15 64                         .db #$15, #%01100100
0D63B 55 64                         .db #$55, #%01100100
0D63D 95 64                         .db #$95, #%01100100
0D63F D5 E4                         .db #$D5, #%11100100
0D641 26 04                         .db #$26, #%00000100
0D643 46 44                         .db #$46, #%01000100
0D645 76 64                         .db #$76, #%01100100
0D647 C6 04                         .db #$C6, #%00000100
0D649 17 04                         .db #$17, #%00000100
0D64B 37 64                         .db #$37, #%01100100
0D64D 77 44                         .db #$77, #%01000100
0D64F B7 04                         .db #$B7, #%00000100
0D651 18 64                         .db #$18, #%01100100
0D653 58 64                         .db #$58, #%01100100
0D655 98 64                         .db #$98, #%01100100
0D657 FF                            .db #LEVEL_END
0D658                           
0D658                           lvl_layout_16:
0D658 10 E1                         .db #$10, #%11100001
0D65A 20 9A                         .db #$20, #%10011010
0D65C 30 E1                         .db #$30, #%11100001
0D65E 40 E1                         .db #$40, #%11100001
0D660 50 E1                         .db #$50, #%11100001
0D662 60 C1                         .db #$60, #%11000001
0D664 70 E1                         .db #$70, #%11100001
0D666 80 E1                         .db #$80, #%11100001
0D668 90 E1                         .db #$90, #%11100001
0D66A A0 61                         .db #$A0, #%01100001
0D66C 21 C1                         .db #$21, #%11000001
0D66E A1 1A                         .db #$A1, #%00011010
0D670 B1 41                         .db #$B1, #%01000001
0D672 A2 E1                         .db #$A2, #%11100001
0D674 B2 E1                         .db #$B2, #%11100001
0D676 C2 1A                         .db #$C2, #%00011010
0D678 D2 E1                         .db #$D2, #%11100001
0D67A 63 1A                         .db #$63, #%00011010
0D67C C3 C1                         .db #$C3, #%11000001
0D67E 14 61                         .db #$14, #%01100001
0D680 54 61                         .db #$54, #%01100001
0D682 94 C1                         .db #$94, #%11000001
0D684 15 61                         .db #$15, #%01100001
0D686 55 41                         .db #$55, #%01000001
0D688 85 1A                         .db #$85, #%00011010
0D68A 16 41                         .db #$16, #%01000001
0D68C 46 1A                         .db #$46, #%00011010
0D68E 56 61                         .db #$56, #%01100001
0D690 A6 61                         .db #$A6, #%01100001
0D692 17 67                         .db #$17, #%01100111
0D694 57 67                         .db #$57, #%01100111
0D696 97 67                         .db #$97, #%01100111
0D698 D7 07                         .db #$D7, #%00000111
0D69A 28 41                         .db #$28, #%01000001
0D69C 58 61                         .db #$58, #%01100001
0D69E A8 41                         .db #$A8, #%01000001
0D6A0 18 11                         .db #$18, #%00010001
0D6A2 38 11                         .db #$38, #%00010001
0D6A4 98 11                         .db #$98, #%00010001
0D6A6 B8 11                         .db #$B8, #%00010001
0D6A8 D8 11                         .db #$D8, #%00010001
0D6AA 59 09                         .db #$59, #%00001001
0D6AC FF                            .db #LEVEL_END
0D6AD                           
0D6AD                           lvl_layout_17:
0D6AD 10 EA                         .db #$10, #%11101010
0D6AF 20 E2                         .db #$20, #%11100010
0D6B1 30 62                         .db #$30, #%01100010
0D6B3 70 02                         .db #$70, #%00000010
0D6B5 80 6A                         .db #$80, #%01101010
0D6B7 90 22                         .db #$90, #%00100010
0D6B9 01 AA                         .db #$01, #%10101010
0D6BB 31 6A                         .db #$31, #%01101010
0D6BD 81 2A                         .db #$81, #%00101010
0D6BF A1 02                         .db #$A1, #%00000010
0D6C1 C1 02                         .db #$C1, #%00000010
0D6C3 D1 0A                         .db #$D1, #%00001010
0D6C5 32 EA                         .db #$32, #%11101010
0D6C7 42 6A                         .db #$42, #%01101010
0D6C9 62 02                         .db #$62, #%00000010
0D6CB 92 6A                         .db #$92, #%01101010
0D6CD D2 E2                         .db #$D2, #%11100010
0D6CF 43 1A                         .db #$43, #%00011010
0D6D1 53 CA                         .db #$53, #%11001010
0D6D3 73 02                         .db #$73, #%00000010
0D6D5 83 4A                         .db #$83, #%01001010
0D6D7 B3 CA                         .db #$B3, #%11001010
0D6D9 C3 EA                         .db #$C3, #%11101010
0D6DB 04 0A                         .db #$04, #%00001010
0D6DD 14 A2                         .db #$14, #%10100010
0D6DF 24 AA                         .db #$24, #%10101010
0D6E1 44 AA                         .db #$44, #%10101010
0D6E3 64 6A                         .db #$64, #%01101010
0D6E5 65 6A                         .db #$65, #%01101010
0D6E7 A5 AA                         .db #$A5, #%10101010
0D6E9 06 EA                         .db #$06, #%11101010
0D6EB 16 62                         .db #$16, #%01100010
0D6ED 66 22                         .db #$66, #%00100010
0D6EF 86 2A                         .db #$86, #%00101010
0D6F1 17 42                         .db #$17, #%01000010
0D6F3 47 12                         .db #$47, #%00010010
0D6F5 57 6A                         .db #$57, #%01101010
0D6F7 97 4A                         .db #$97, #%01001010
0D6F9 A7 02                         .db #$A7, #%00000010
0D6FB 18 02                         .db #$18, #%00000010
0D6FD 28 0A                         .db #$28, #%00001010
0D6FF 38 22                         .db #$38, #%00100010
0D701 68 2A                         .db #$68, #%00101010
0D703 88 62                         .db #$88, #%01100010
0D705 C8 0A                         .db #$C8, #%00001010
0D707 D8 02                         .db #$D8, #%00000010
0D709 19 2A                         .db #$19, #%00101010
0D70B 39 2A                         .db #$39, #%00101010
0D70D 69 42                         .db #$69, #%01000010
0D70F 99 2A                         .db #$99, #%00101010
0D711 B9 42                         .db #$B9, #%01000010
0D713 FF                            .db #LEVEL_END
0D714                           
0D714                           lvl_layout_18:
0D714 00 12                         .db #$00, #%00010010
0D716 40 1A                         .db #$40, #%00011010
0D718 50 11                         .db #$50, #%00010001
0D71A 70 1A                         .db #$70, #%00011010
0D71C 80 10                         .db #$80, #%00010000
0D71E D0 13                         .db #$D0, #%00010011
0D720 01 1A                         .db #$01, #%00011010
0D722 22 15                         .db #$22, #%00010101
0D724 A2 1A                         .db #$A2, #%00011010
0D726 B2 14                         .db #$B2, #%00010100
0D728 03 67                         .db #$03, #%01100111
0D72A 43 67                         .db #$43, #%01100111
0D72C 83 67                         .db #$83, #%01100111
0D72E 24 09                         .db #$24, #%00001001
0D730 74 0D                         .db #$74, #%00001101
0D732 C4 0A                         .db #$C4, #%00001010
0D734 05 A7                         .db #$05, #%10100111
0D736 45 27                         .db #$45, #%00100111
0D738 95 27                         .db #$95, #%00100111
0D73A 16 C7                         .db #$16, #%11000111
0D73C 36 67                         .db #$36, #%01100111
0D73E 86 67                         .db #$86, #%01100111
0D740 D6 07                         .db #$D6, #%00000111
0D742 07 A3                         .db #$07, #%10100011
0D744 27 23                         .db #$27, #%00100011
0D746 47 C7                         .db #$47, #%11000111
0D748 57 A0                         .db #$57, #%10100000
0D74A 67 A7                         .db #$67, #%10100111
0D74C 77 20                         .db #$77, #%00100000
0D74E 97 C7                         .db #$97, #%11000111
0D750 A7 A4                         .db #$A7, #%10100100
0D752 B7 A7                         .db #$B7, #%10100111
0D754 C7 24                         .db #$C7, #%00100100
0D756 28 0B                         .db #$28, #%00001011
0D758 38 A3                         .db #$38, #%10100011
0D75A 78 08                         .db #$78, #%00001000
0D75C 88 A0                         .db #$88, #%10100000
0D75E C8 0C                         .db #$C8, #%00001100
0D760 D8 A4                         .db #$D8, #%10100100
0D762 09 43                         .db #$09, #%01000011
0D764 59 40                         .db #$59, #%01000000
0D766 A9 44                         .db #$A9, #%01000100
0D768 FF                            .db #LEVEL_END
0D769                           
0D769                           lvl_layout_19:
0D769 11 A8                         .db #$11, #%10101000
0D76B 21 68                         .db #$21, #%01101000
0D76D 81 28                         .db #$81, #%00101000
0D76F B1 48                         .db #$B1, #%01001000
0D771 22 48                         .db #$22, #%01001000
0D773 62 68                         .db #$62, #%01101000
0D775 B2 28                         .db #$B2, #%00101000
0D777 23 28                         .db #$23, #%00101000
0D779 83 28                         .db #$83, #%00101000
0D77B B3 28                         .db #$B3, #%00101000
0D77D 04 E8                         .db #$04, #%11101000
0D77F 24 08                         .db #$24, #%00001000
0D781 44 08                         .db #$44, #%00001000
0D783 64 E8                         .db #$64, #%11101000
0D785 84 E8                         .db #$84, #%11101000
0D787 C4 A8                         .db #$C4, #%10101000
0D789 D4 E8                         .db #$D4, #%11101000
0D78B 15 48                         .db #$15, #%01001000
0D78D 55 C8                         .db #$55, #%11001000
0D78F 75 C8                         .db #$75, #%11001000
0D791 A5 08                         .db #$A5, #%00001000
0D793 36 08                         .db #$36, #%00001000
0D795 B6 08                         .db #$B6, #%00001000
0D797 27 48                         .db #$27, #%01001000
0D799 97 28                         .db #$97, #%00101000
0D79B C7 08                         .db #$C7, #%00001000
0D79D 09 61                         .db #$09, #%01100001
0D79F 19 11                         .db #$19, #%00010001
0D7A1 49 61                         .db #$49, #%01100001
0D7A3 89 31                         .db #$89, #%00110001
0D7A5 A9 61                         .db #$A9, #%01100001
0D7A7 FF                            .db #LEVEL_END
0D7A8                           
0D7A8                           lvl_layout_20:
0D7A8 00 60                         .db #$00, #%01100000
0D7AA 10 1A                         .db #$10, #%00011010
0D7AC 40 A7                         .db #$40, #%10100111
0D7AE 50 20                         .db #$50, #%00100000
0D7B0 70 1A                         .db #$70, #%00011010
0D7B2 80 40                         .db #$80, #%01000000
0D7B4 B0 1A                         .db #$B0, #%00011010
0D7B6 C0 20                         .db #$C0, #%00100000
0D7B8 01 40                         .db #$01, #%01000000
0D7BA 31 1A                         .db #$31, #%00011010
0D7BC A1 40                         .db #$A1, #%01000000
0D7BE D1 1A                         .db #$D1, #%00011010
0D7C0 43 67                         .db #$43, #%01100111
0D7C2 83 47                         .db #$83, #%01000111
0D7C4 44 A7                         .db #$44, #%10100111
0D7C6 54 25                         .db #$54, #%00100101
0D7C8 94 08                         .db #$94, #%00001000
0D7CA A4 A7                         .db #$A4, #%10100111
0D7CC 55 05                         .db #$55, #%00000101
0D7CE 65 08                         .db #$65, #%00001000
0D7D0 06 27                         .db #$06, #%00100111
0D7D2 36 67                         .db #$36, #%01100111
0D7D4 76 28                         .db #$76, #%00101000
0D7D6 A6 27                         .db #$A6, #%00100111
0D7D8 D6 07                         .db #$D6, #%00000111
0D7DA A7 A7                         .db #$A7, #%10100111
0D7DC 08 60                         .db #$08, #%01100000
0D7DE 09 60                         .db #$09, #%01100000
0D7E0 18 A7                         .db #$18, #%10100111
0D7E2 48 A7                         .db #$48, #%10100111
0D7E4 58 47                         .db #$58, #%01000111
0D7E6 88 27                         .db #$88, #%00100111
0D7E8 B8 20                         .db #$B8, #%00100000
0D7EA D8 1A                         .db #$D8, #%00011010
0D7EC 59 15                         .db #$59, #%00010101
0D7EE 69 60                         .db #$69, #%01100000
0D7F0 A9 60                         .db #$A9, #%01100000
0D7F2 FF                            .db #LEVEL_END
0D7F3                           
0D7F3                           lvl_layout_21:
0D7F3 00 13                         .db #$00, #%00010011
0D7F5 10 11                         .db #$10, #%00010001
0D7F7 20 67                         .db #$20, #%01100111
0D7F9 60 67                         .db #$60, #%01100111
0D7FB A0 47                         .db #$A0, #%01000111
0D7FD D0 15                         .db #$D0, #%00010101
0D7FF 32 63                         .db #$32, #%01100011
0D801 72 05                         .db #$72, #%00000101
0D803 82 43                         .db #$82, #%01000011
0D805 B2 43                         .db #$B2, #%01000011
0D807 33 03                         .db #$33, #%00000011
0D809 43 2A                         .db #$43, #%00101010
0D80B 63 7A                         .db #$63, #%01111010
0D80D 73 2A                         .db #$73, #%00101010
0D80F A3 7A                         .db #$A3, #%01111010
0D811 34 63                         .db #$34, #%01100011
0D813 74 63                         .db #$74, #%01100011
0D815 B4 43                         .db #$B4, #%01000011
0D817 06 63                         .db #$06, #%01100011
0D819 46 63                         .db #$46, #%01100011
0D81B 86 63                         .db #$86, #%01100011
0D81D C6 C3                         .db #$C6, #%11000011
0D81F 07 7A                         .db #$07, #%01111010
0D821 47 7A                         .db #$47, #%01111010
0D823 67 0A                         .db #$67, #%00001010
0D825 87 7A                         .db #$87, #%01111010
0D827 08 13                         .db #$08, #%00010011
0D829 18 43                         .db #$18, #%01000011
0D82B 48 63                         .db #$48, #%01100011
0D82D 88 63                         .db #$88, #%01100011
0D82F FF                            .db #LEVEL_END
0D830                           
0D830                           lvl_layout_22:
0D830 00 7A                         .db #$00, #%01111010
0D832 40 7A                         .db #$40, #%01111010
0D834 80 7A                         .db #$80, #%01111010
0D836 C0 3A                         .db #$C0, #%00111010
0D838 13 67                         .db #$13, #%01100111
0D83A 83 A7                         .db #$83, #%10100111
0D83C B3 07                         .db #$B3, #%00000111
0D83E 14 07                         .db #$14, #%00000111
0D840 44 07                         .db #$44, #%00000111
0D842 A4 07                         .db #$A4, #%00000111
0D844 15 A5                         .db #$15, #%10100101
0D846 45 A5                         .db #$45, #%10100101
0D848 85 25                         .db #$85, #%00100101
0D84A 86 05                         .db #$86, #%00000101
0D84C A6 05                         .db #$A6, #%00000101
0D84E 17 11                         .db #$17, #%00010001
0D850 47 A1                         .db #$47, #%10100001
0D852 87 A1                         .db #$87, #%10100001
0D854 B7 A1                         .db #$B7, #%10100001
0D856 18 41                         .db #$18, #%01000001
0D858 68 01                         .db #$68, #%00000001
0D85A D8 01                         .db #$D8, #%00000001
0D85C FF                            .db #LEVEL_END
0D85D                           
0D85D                           lvl_layout_23:
0D85D 00 71                         .db #$00, #%01110001
0D85F 40 11                         .db #$40, #%00010001
0D861 50 43                         .db #$50, #%01000011
0D863 80 D1                         .db #$80, #%11010001
0D865 90 E3                         .db #$90, #%11100011
0D867 A0 63                         .db #$A0, #%01100011
0D869 01 63                         .db #$01, #%01100011
0D86B 41 63                         .db #$41, #%01100011
0D86D A1 63                         .db #$A1, #%01100011
0D86F 02 63                         .db #$02, #%01100011
0D871 42 63                         .db #$42, #%01100011
0D873 62 11                         .db #$62, #%00010001
0D875 A2 67                         .db #$A2, #%01100111
0D877 04 63                         .db #$04, #%01100011
0D879 44 23                         .db #$44, #%00100011
0D87B 64 D1                         .db #$64, #%11010001
0D87D 74 E3                         .db #$74, #%11100011
0D87F 84 F1                         .db #$84, #%11110001
0D881 94 E3                         .db #$94, #%11100011
0D883 A4 C7                         .db #$A4, #%11000111
0D885 B4 23                         .db #$B4, #%00100011
0D887 05 63                         .db #$05, #%01100011
0D889 45 23                         .db #$45, #%00100011
0D88B 06 71                         .db #$06, #%01110001
0D88D 46 11                         .db #$46, #%00010001
0D88F 56 E3                         .db #$56, #%11100011
0D891 D6 07                         .db #$D6, #%00000111
0D893 17 D1                         .db #$17, #%11010001
0D895 27 43                         .db #$27, #%01000011
0D897 67 D1                         .db #$67, #%11010001
0D899 A7 C7                         .db #$A7, #%11000111
0D89B C7 A7                         .db #$C7, #%10100111
0D89D D7 B3                         .db #$D7, #%10110011
0D89F 28 43                         .db #$28, #%01000011
0D8A1 78 43                         .db #$78, #%01000011
0D8A3 29 43                         .db #$29, #%01000011
0D8A5 79 43                         .db #$79, #%01000011
0D8A7 FF                           .db #LEVEL_END
0D8A8                           
0D8A8                           lvl_layout_24:
0D8A8 02 67                         .db #$02, #%01100111
0D8AA 42 67                         .db #$42, #%01100111
0D8AC 82 67                         .db #$82, #%01100111
0D8AE 05 67                         .db #$05, #%01100111
0D8B0 45 67                         .db #$45, #%01100111
0D8B2 85 67                         .db #$85, #%01100111
0D8B4 08 67                         .db #$08, #%01100111
0D8B6 48 67                         .db #$48, #%01100111
0D8B8 88 67                         .db #$88, #%01100111
0D8BA 30 E7                         .db #$30, #%11100111
0D8BC 70 E7                         .db #$70, #%11100111
0D8BE B0 E7                         .db #$B0, #%11100111
0D8C0 34 E7                         .db #$34, #%11100111
0D8C2 74 E7                         .db #$74, #%11100111
0D8C4 B4 E7                         .db #$B4, #%11100111
0D8C6 20 13                         .db #$20, #%00010011
0D8C8 40 10                         .db #$40, #%00010000
0D8CA 80 02                         .db #$80, #%00000010
0D8CC 41 05                         .db #$41, #%00000101
0D8CE B1 09                         .db #$B1, #%00001001
0D8D0 02 09                         .db #$02, #%00001001
0D8D2 52 0C                         .db #$52, #%00001100
0D8D4 13 11                         .db #$13, #%00010001
0D8D6 33 04                         .db #$33, #%00000100
0D8D8 74 0C                         .db #$74, #%00001100
0D8DA B4 08                         .db #$B4, #%00001000
0D8DC 15 09                         .db #$15, #%00001001
0D8DE 55 0C                         .db #$55, #%00001100
0D8E0 95 0C                         .db #$95, #%00001100
0D8E2 47 03                         .db #$47, #%00000011
0D8E4 A7 12                         .db #$A7, #%00010010
0D8E6 18 15                         .db #$18, #%00010101
0D8E8 09 05                         .db #$09, #%00000101
0D8EA 19 03                         .db #$19, #%00000011
0D8EC FF                            .db #LEVEL_END
0D8ED                           
0D8ED                           lvl_layout_25:
0D8ED 00 12                         .db #$00, #%00010010
0D8EF 10 63                         .db #$10, #%01100011
0D8F1 60 63                         .db #$60, #%01100011
0D8F3 A0 07                         .db #$A0, #%00000111
0D8F5 01 11                         .db #$01, #%00010001
0D8F7 A1 02                         .db #$A1, #%00000010
0D8F9 02 67                         .db #$02, #%01100111
0D8FB 42 07                         .db #$42, #%00000111
0D8FD 62 67                         .db #$62, #%01100111
0D8FF A2 C7                         .db #$A2, #%11000111
0D901 03 61                         .db #$03, #%01100001
0D903 43 01                         .db #$43, #%00000001
0D905 63 61                         .db #$63, #%01100001
0D907 A6 E7                         .db #$A6, #%11100111
0D909 B6 47                         .db #$B6, #%01000111
0D90B C6 01                         .db #$C6, #%00000001
0D90D B7 42                         .db #$B7, #%01000010
0D90F B8 42                         .db #$B8, #%01000010
0D911 C8 0A                         .db #$C8, #%00001010
0D913 09 7A                         .db #$09, #%01111010
0D915 49 7A                         .db #$49, #%01111010
0D917 89 3A                         .db #$89, #%00111010
0D919 B9 42                         .db #$B9, #%01000010
0D91B FF                            .db #LEVEL_END
0D91C                           
0D91C                           ;; Level layout address pointers
0D91C                           tbl_lvl_layout_hi:
0D91C                           ifdef TESTING
0D91C D2                            .db >#lvl_test
0D91D                           endif
0D91D D2 D2 D2 D2 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D922 D3 D3 D4 D4 D4                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D927 D4 D5 D5 D5 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D92C D6 D6 D7 D7 D7                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D931 D7 D8 D8 D8 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D936                           
0D936                           tbl_lvl_layout_lo:
0D936                           ifdef TESTING
0D936 2C                            .db <#lvl_test
0D937                           endif
0D937 3D 58 8D C0 31                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D93C 6C F5 36 6D B0                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D941 DF 32 5D B0 27                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D946 58 AD 14 69 A8                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D94B F3 30 5D A8 ED                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D950                           
0D950                           ;; Ball start position (#$YX)
0D950                           tbl_lvl_ball_startpos:
0D950                           ifdef TESTING
0D950 29                            .db #$29
0D951                           endif
0D951 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D956 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D95B 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D960 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D965 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D96A                           
0D96A                               
0D96A                           ;; Ball start direction, color and tile score
0D96A                           ;; #% ccc v tttt
0D96A                           ;;    ||| | ++++-- tile score
0D96A                           ;;    ||| +------- vertical direction, up (0) or down
0D96A                           ;;    +++--------- color (CBRYGM)
0D96A                           tbl_lvl_ball_init:
0D96A                           ifdef TESTING
0D96A 20                            .db #%00100000
0D96B                           endif
0D96B 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D970 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D975 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D97A 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D97F 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D984                           
0D984                           
0D984                           
0D984                           ;; Helper table to multiply values by 16
0D984                           tbl_Times16:
0D984 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D98C 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D994                               
0D994                           
0D994                           ;; Helper table to multiply values by 64
0D994                           tbl_Times64:
0D994 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D998                           
0D998                           
0D998                           ;; Metatile ID to CHR data mapper
0D998                           tbl_GametileTopLeft:
0D998 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D9A2                           
0D9A2                           tbl_GametileTopRight:
0D9A2 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D9AC                           
0D9AC                           tbl_GametileBottomLeft:
0D9AC 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D9B6                           
0D9B6                           tbl_GametileBottomRight:
0D9B6 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D9C0                           
0D9C0                           ;; Metatile ID to RAM byte data mapper
0D9C0                           tbl_GameTileRamByte:
0D9C0 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D9C5                           
0D9C5                           ;; HUD text data
0D9C5                           tbl_HudText:
0D9C5 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D9CD 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D9D4 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D9DC 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D9E1                           
0D9E1                           ;; Move block top left tile based on color
0D9E1                           tbl_MoveBlockTopLeftTile:
0D9E1 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D9E8                           
0D9E8                           ;; Game over data
0D9E8                           tbl_GameOver:
0D9E8 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D9EC 00 00                         .db #_SPACE, #_SPACE
0D9EE 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0D9F2                           
0D9F2                           ;; Background fade pallette table
0D9F2                           tbl_BackgroundFade:
0D9F2 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0D9FC                           
0D9FC                           ;; Sound effects
0D9FC                           .include "game/include/table/sfx.asm"
0D9FC                           ;;
0D9FC                           ;; Explosion sound effects
0D9FC                           ;;
0D9FC                           ;;   #% ffff vvvv
0D9FC                           ;;      |||| ++++---- volume (0=low, 15=high)
0D9FC                           ;;      ++++-------- frequency (0=low, 15=high)
0D9FC                           ;;
0D9FC                           ;; #$FF = end of sfx
0D9FC                           ;;
0D9FC                           
0D9FC                           tbl_ExplosionSfx:
0D9FC 00                            .db #$00 ; buffer byte
0D9FD 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DA05 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DA0D 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DA15 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DA1D 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DA25 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DA2A                           
0DA2A                           tbl_ThudSfx:
0DA2A 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA2B 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DA33 E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DA38                           
0DA38                           tbl_BounceSfx:
0DA38 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA39 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DA3D                           
0DA3D 00                            .db #$00
0DA3E                           tbl_Sfx_hi:
0DA3E D9 DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DA41                           
0DA41                           tbl_Sfx_lo:
0DA41 FC 2A 38                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DA44                           
0DA44                           ;; Lookup table to convert bonus ticks to score
0DA44                           tbl_BonusToScore:
0DA44 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DA4E                           
0DA4E                           
0DA4E                           ;; NMI handler
0DA4E                           NMI:
0DA4E                               .include "interrupt/nmi.asm"
0DA4E                           
0DA4E                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DA4E                           ;;
0DA4E                           ;; include/nmi.asm
0DA4E                           ;;
0DA4E                           ;; Non-maskable interrupt script. This script is being executed
0DA4E                           ;; when vBlank hits.
0DA4E                           ;;
0DA4E                           ;;
0DA4E                           
0DA4E                               ;; Preserve accumulator through stack
0DA4E 48                            PHA
0DA4F                           
0DA4F                               ;; Should NMI be skipped?
0DA4F A5 13                         LDA skip_nmi
0DA51 F0 03                         BEQ +
0DA53 4C D1 DB                          JMP +skip_nmi
0DA56                               +
0DA56                           
0DA56                               ;; When in NMI, skip additional NMI requests
0DA56 A9 01                         LDA #$01
0DA58 85 13                         STA skip_nmi
0DA5A                           
0DA5A                               ;; Preserve X, Y, and PC through stack
0DA5A 8A                            TXA
0DA5B 48                            PHA
0DA5C 98                            TYA
0DA5D 48                            PHA
0DA5E 08                            PHP
0DA5F                               
0DA5F                               ;; Check forced NMI skip
0DA5F A5 14                         LDA force_skip_nmi
0DA61 F0 03                         BEQ +
0DA63 4C C0 DB                          JMP +force_skip_nmi
0DA66                               +
0DA66                           
0DA66                               ;; Update PPU mask
0DA66                               ;LDA #$00
0DA66                               ;STA PPU_CTRL
0DA66 A5 12                         LDA soft_ppu_mask
0DA68 8D 01 20                      STA PPU_MASK
0DA6B                               
0DA6B                               
0DA6B                               ;; Additional PPU updates go here
0DA6B                               .include "game/interrupt/nmi.asm"
0DA6B                           
0DA6B                               ;; Check if ppu_buffer needs updating
0DA6B A5 39                         LDA ppu_buffer_update
0DA6D D0 03                         BNE +
0DA6F 4C B1 DA                          JMP +no_ppu_buffer_update
0DA72                               +
0DA72                           
0DA72                               ;; Reset ppu control register and mask
0DA72 A2 00                         LDX #$00
0DA74 8E 00 20                      STX PPU_CTRL
0DA77 8E 01 20                      STX PPU_MASK
0DA7A                           
0DA7A                               ;; Set up loop
0DA7A                               -
0DA7A                                   ;; Reset hi/lo latch
0DA7A 2C 02 20                          BIT PPU_STATUS
0DA7D                           
0DA7D                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DA7D BD 00 03                          LDA ppu_buffer,x
0DA80 8D 06 20                          STA PPU_ADDR
0DA83 E8                                INX
0DA84 BD 00 03                          LDA ppu_buffer,x
0DA87 8D 06 20                          STA PPU_ADDR
0DA8A                           
0DA8A                                   ;; Write ppu_buffer data to PPU_ADDR
0DA8A E8                                INX
0DA8B BD 00 03                          LDA ppu_buffer,x
0DA8E 8D 07 20                          STA PPU_DATA
0DA91                           
0DA91                                   ;; Check if updating is done (eg. X is at pointer)
0DA91 E8                                INX
0DA92 E4 3A                             CPX ppu_buffer_pointer
0DA94 F0 03                             BEQ +
0DA96 4C 7A DA                      JMP -
0DA99                           +
0DA99                           
0DA99                               ;; Reset ppu buffer update and pointer
0DA99 A9 00                         LDA #$00
0DA9B 85 39                         STA ppu_buffer_update
0DA9D 85 3A                         STA ppu_buffer_pointer
0DA9F                               
0DA9F                               ;; Reset scrolling position
0DA9F 8D 05 20                      STA PPU_SCROLL
0DAA2 8D 05 20                      STA PPU_SCROLL
0DAA5                           
0DAA5                               ;; Restore ppu control register and mask
0DAA5 A9 90                         LDA #%10010000
0DAA7 8D 00 20                      STA PPU_CTRL
0DAAA A5 12                         LDA soft_ppu_mask
0DAAC 8D 01 20                      STA PPU_MASK
0DAAF A9 00                         LDA #$00
0DAB1                           
0DAB1                           ;; Continue other NMI stuff
0DAB1                           +no_ppu_buffer_update:
0DAB1                           
0DAB1                               ;; Reset sprite RAM, draw sprites
0DAB1 8D 03 20                      STA OAM_ADDR
0DAB4 A9 02                         LDA #$02
0DAB6 8D 14 40                      STA OAM_DMA
0DAB9                           
0DAB9                               ;; Decrease explosion and move block timers
0DAB9 A0 04                         LDY #MAX_ANIMATIONS
0DABB A2 00                         LDX #$00
0DABD                               -
0DABD BD 60 03                          LDA explosion_timer,x
0DAC0 F0 03                             BEQ +
0DAC2 DE 60 03                              DEC explosion_timer,x
0DAC5                                   +
0DAC5                           
0DAC5 BD 80 03                          LDA move_block_timer,x
0DAC8 F0 03                             BEQ +
0DACA DE 80 03                              DEC move_block_timer,x
0DACD                                   +
0DACD                                   
0DACD E8                                INX
0DACE 88                                DEY
0DACF F0 03                             BEQ +done
0DAD1 4C BD DA                      JMP -
0DAD4                           +done:
0DAD4                           
0DAD4                               ;; Decrease nudge timer
0DAD4 A5 3E                         LDA nudge_timer
0DAD6 F0 02                         BEQ +
0DAD8 C6 3E                             DEC nudge_timer
0DADA                               +
0DADA                           
0DADA                               ;; Decrease bonus timer
0DADA A5 3F                         LDA bonus_timer
0DADC F0 02                         BEQ +
0DADE C6 3F                             DEC bonus_timer
0DAE0                               +
0DAE0                           
0DAE0                               ;; Decrease kill timer
0DAE0 A5 40                         LDA kill_timer
0DAE2 F0 02                         BEQ +
0DAE4 C6 40                             DEC kill_timer
0DAE6                               +
0DAE6                               
0DAE6                               ;; Decrease and handle unfreeze timer
0DAE6 A5 41                         LDA unfreeze_timer
0DAE8 F0 0A                         BEQ +
0DAEA C6 41                             DEC unfreeze_timer
0DAEC D0 06                             BNE +
0DAEE                                   
0DAEE A5 37                             LDA ball_flags
0DAF0 29 FB                             AND #UNFREEZE_BALL
0DAF2 85 37                             STA ball_flags
0DAF4                               +
0DAF4                           
0DAF4                               ;; Play background noise
0DAF4 A5 38                         LDA screen_mode
0DAF6 29 01                         AND #IS_GAME_SCREEN
0DAF8 F0 0C                         BEQ +
0DAFA                                   .include "game/include/main/background_sound.asm"
0DAFA                           
0DAFA                               ;; If noise is muted, no noise should play
0DAFA A5 4B                         LDA noise_muted
0DAFC F0 08                         BEQ +
0DAFE A9 30                             LDA #$30
0DB00 8D 0C 40                          STA NOISE_VOLUME
0DB03 4C 6B DB                          JMP +endNoise
0DB06                               +
0DB06                               
0DB06                               ;; At random times, set max_noise period to $03-$0A
0DB06 A5 45                         LDA max_noise
0DB08 D0 1D                         BNE +
0DB0A 20 D0 C4                          JSR sub_GetRandomNumber
0DB0D 29 EF                             AND #%11101111
0DB0F D0 16                             BNE +
0DB11                                   
0DB11 A5 15                             LDA frame_counter
0DB13 85 16                             STA random_seed
0DB15 20 D0 C4                          JSR sub_GetRandomNumber
0DB18 29 07                             AND #$07
0DB1A 69 03                             ADC #$03
0DB1C 85 45                             STA max_noise
0DB1E A9 01                             LDA #$01
0DB20 85 46                             STA sweep_noise
0DB22 A9 34                             LDA #$34
0DB24 8D 0C 40                          STA NOISE_VOLUME
0DB27                               +
0DB27                           
0DB27                               ;; if sweep noise = $00: constant noise
0DB27                               ;; else if sweep noise > $80: decrease pitch
0DB27                               ;; else: increase pitch
0DB27 A5 46                         LDA sweep_noise
0DB29 F0 18                         BEQ +constantNoise
0DB2B 30 2A                         BMI +decreaseNoise
0DB2D                           
0DB2D                           ;; Sweep noise up to max noise pitch
0DB2D                           +increaseNoise:
0DB2D C6 47                         DEC current_noise
0DB2F A5 47                         LDA current_noise
0DB31 8D 0E 40                      STA NOISE_PERIOD
0DB34 C5 45                         CMP max_noise
0DB36 D0 08                         BNE +
0DB38 A9 00                             LDA #$00
0DB3A 85 46                             STA sweep_noise
0DB3C A9 0A                             LDA #$0A
0DB3E 85 48                             STA noise_timer
0DB40                               +
0DB40 4C 6B DB                      JMP +endNoise
0DB43                           
0DB43                           ;; Keep noise at constant pitch
0DB43                           +constantNoise:
0DB43 A5 45                         LDA max_noise
0DB45 F0 24                         BEQ +endNoise
0DB47                           
0DB47 A5 48                         LDA noise_timer
0DB49 D0 07                         BNE +
0DB4B A9 80                             LDA #$80
0DB4D 85 46                             STA sweep_noise
0DB4F 4C 6B DB                          JMP +endNoise
0DB52                               +
0DB52 C6 48                         DEC noise_timer
0DB54 4C 6B DB                      JMP +endNoise
0DB57                           
0DB57                           ;; Sweep noise down to initial pitch
0DB57                           +decreaseNoise:
0DB57 E6 47                         INC current_noise
0DB59 A5 47                         LDA current_noise
0DB5B 8D 0E 40                      STA NOISE_PERIOD
0DB5E C9 0E                         CMP #$0E
0DB60 D0 09                         BNE +endNoise
0DB62                           
0DB62 20 60 C5                      JSR sub_BackgroundNoise
0DB65 A9 00                         LDA #$00
0DB67 85 45                         STA max_noise
0DB69 85 46                         STA sweep_noise
0DB6B                           
0DB6B                           +endNoise:
0DB6B                           
0DB6B                               +
0DB6B                           
0DB6B                               ;; Play bonus to score bleeps
0DB6B                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DB6B                           
0DB6B                           ;; Random bleepy noises
0DB6B                           
0DB6B A5 49                         LDA do_beeps
0DB6D F0 2E                         BEQ +continue
0DB6F                               
0DB6F C9 02                         CMP #$02
0DB71 D0 12                         BNE +beep
0DB73                              
0DB73                           +stopBeep:
0DB73 A9 00                         LDA #$00
0DB75 85 49                         STA do_beeps
0DB77 A9 08                         LDA #$08
0DB79 8D 15 40                      STA APU_STATUS
0DB7C 8D 0F 40                      STA NOISE_LENGTH
0DB7F 20 60 C5                      JSR sub_BackgroundNoise
0DB82 4C 9D DB                      JMP +continue
0DB85                               
0DB85                           +beep:
0DB85 A9 01                         LDA #$01
0DB87 8D 15 40                      STA APU_STATUS
0DB8A A5 4A                         LDA soft_pulse1
0DB8C 8D 00 40                      STA PULSE1_VOLUME
0DB8F 20 D0 C4                      JSR sub_GetRandomNumber
0DB92 8D 02 40                      STA PULSE1_TIMER_LO
0DB95 20 D0 C4                      JSR sub_GetRandomNumber
0DB98 29 01                         AND #$01
0DB9A 8D 03 40                      STA PULSE1_TIMER_HI
0DB9D                           
0DB9D                           +continue:
0DB9D                           
0DB9D                               
0DB9D                               ;; Play sound effect
0DB9D                               .include "game/include/main/nmi_sfx.asm"
0DB9D                           
0DB9D                               ;; Get current explosion sfx frame; if not set, skip this
0DB9D A4 4E                         LDY sfx_timer
0DB9F F0 1F                         BEQ +done
0DBA1                               
0DBA1                                   ;; Check if explosion sfx is done; if so, disable and skip
0DBA1 B1 4C                             LDA (sfx_address),y
0DBA3 D0 07                             BNE +
0DBA5 A9 00                                 LDA #$00
0DBA7 85 4E                                 STA sfx_timer
0DBA9 4C C0 DB                              JMP +done
0DBAC                                   +
0DBAC                                   
0DBAC                                   ;; Set low nibble as volume
0DBAC 29 0F                             AND #$0F
0DBAE 09 30                             ORA #$30
0DBB0 8D 0C 40                          STA NOISE_VOLUME
0DBB3                                   
0DBB3                                   ;; Set high nibble as frequency
0DBB3 B1 4C                             LDA (sfx_address),y
0DBB5 4A                                LSR
0DBB6 4A                                LSR
0DBB7 4A                                LSR
0DBB8 4A                                LSR
0DBB9 49 0F                             EOR #$0F
0DBBB 8D 0E 40                          STA NOISE_PERIOD
0DBBE                                   
0DBBE                                   ;; Next frame
0DBBE E6 4E                             INC sfx_timer
0DBC0                               +done
0DBC0                           
0DBC0                               
0DBC0                           
0DBC0                           ;; This is what happens when we forced nmi skip
0DBC0                           +force_skip_nmi:
0DBC0                           
0DBC0                               ;; Increase frame timers
0DBC0 E6 15                         INC frame_counter
0DBC2                           
0DBC2                               ;; reset sprites_update_position
0DBC2 A9 00                         LDA #$00
0DBC4 85 35                         STA sprites_update_position
0DBC6                           
0DBC6                               ;; Don't skip next NMI request
0DBC6 A9 00                         LDA #$00
0DBC8 85 13                         STA skip_nmi
0DBCA 85 4F                         STA check_nmi
0DBCC                           
0DBCC                               ;; Restore X, Y and PC from stack
0DBCC 28                            PLP
0DBCD 68                            PLA
0DBCE A8                            TAY
0DBCF 68                            PLA
0DBD0 AA                            TAX
0DBD1                           
0DBD1                           +skip_nmi:
0DBD1                               ;; Restore accumulator from stack
0DBD1 68                            PLA
0DBD2                           
0DBD2                               ;; Return
0DBD2 40                            RTI
0DBD3                           
0DBD3                           
0DBD3                           ;; IRQ handler (empty)
0DBD3                           IRQ:
0DBD3                               .include "interrupt/irq.asm"
0DBD3                           
0DBD3 40                            RTI
0DBD4                           
0DBD4                           
0DBD4                           ;; Interrupt vectors
0DBD4 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 4E DA                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE D3 DB                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
