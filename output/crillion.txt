	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$02        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$30        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$03
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                               00036                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 8F C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 8F C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 7B C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 71 CC                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 6E CC                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 4A C4                      JSR sub_DisableRendering
0C08A 20 E0 C6                      JSR sub_JumpToPointer
0C08D 20 5E C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 2D                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C A1 C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 32                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 2B                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 82 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 2C                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 24                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 18                            CLC
0C0C7 69 30                         ADC #BALL_SPEED_LO
0C0C9 85 1A                         STA ball_ypos_lo
0C0CB                           
0C0CB                               ;; update the high byte with carry
0C0CB A5 19                         LDA ball_ypos_hi
0C0CD 69 02                         ADC #BALL_SPEED_HI
0C0CF 85 19                         STA ball_ypos_hi
0C0D1                               
0C0D1                               ;; Check bottom bound
0C0D1 C9 C8                         CMP #BOUND_BOTTOM
0C0D3 90 32                         BCC +checkHorizontalMovement
0C0D5 F0 30                         BEQ +checkHorizontalMovement
0C0D7                           
0C0D7                           
0C0D7                               ;; Change ball direction to "up"
0C0D7 A9 C8                         LDA #BOUND_BOTTOM
0C0D9 85 19                         STA ball_ypos_hi
0C0DB A9 00                         LDA #$00
0C0DD 85 1A                         STA ball_ypos_lo
0C0DF A5 2C                         LDA ball_flags
0C0E1 29 EF                         AND #MOVE_BALL_UP
0C0E3 85 2C                         STA ball_flags
0C0E5 4C 07 C1                      JMP +checkHorizontalMovement
0C0E8                           
0C0E8                           
0C0E8                           +moveBallUp:
0C0E8                               ;; update the low byte
0C0E8 A5 1A                         LDA ball_ypos_lo
0C0EA 38                            SEC
0C0EB E9 30                         SBC #BALL_SPEED_LO
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF                           
0C0EF                               ;; update the high byte with carry
0C0EF A5 19                         LDA ball_ypos_hi
0C0F1 E9 02                         SBC #BALL_SPEED_HI
0C0F3 85 19                         STA ball_ypos_hi
0C0F5                               
0C0F5                               ;; Check top bound
0C0F5 C9 30                         CMP #BOUND_TOP
0C0F7 B0 0E                         BCS +checkHorizontalMovement
0C0F9                           
0C0F9                               ;; Change ball direction to "down"
0C0F9 A9 30                         LDA #BOUND_TOP
0C0FB 85 19                         STA ball_ypos_hi
0C0FD A9 00                         LDA #$00
0C0FF 85 1A                         STA ball_ypos_lo
0C101 A5 2C                         LDA ball_flags
0C103 09 10                         ORA #MOVE_BALL_DOWN
0C105 85 2C                         STA ball_flags
0C107                           
0C107                           
0C107                           +checkHorizontalMovement:
0C107                           
0C107                               ;; Check if ball is being nudged
0C107 A5 33                         LDA nudge_counter
0C109 D0 41                         BNE +doneBallMovement
0C10B                           
0C10B                               ;; Check if left button is held
0C10B A5 0F                         LDA buttons_held
0C10D 29 02                         AND #BUTTON_LEFT
0C10F F0 1B                         BEQ +
0C111                                   ;; update the low byte
0C111 A5 18                             LDA ball_xpos_lo
0C113 38                                SEC
0C114 E9 30                             SBC #BALL_SPEED_LO
0C116 85 18                             STA ball_xpos_lo
0C118                           
0C118                                   ;; update the high byte
0C118 A5 17                             LDA ball_xpos_hi
0C11A E9 02                             SBC #BALL_SPEED_HI
0C11C 85 17                             STA ball_xpos_hi
0C11E                                   
0C11E                                   ;; Check left bound
0C11E C9 10                             CMP #BOUND_LEFT
0C120 B0 2A                             BCS +doneBallMovement
0C122                                   
0C122                                   ;; Set flag to nudge right and set nudge counter
0C122 A5 2C                             LDA ball_flags
0C124 09 02                             ORA #NUDGE_BALL_RIGHT
0C126 20 D9 C6                          JSR sub_InitiateNudge
0C129                           
0C129 4C 4C C1                          JMP +doneBallMovement        
0C12C                               +
0C12C                           
0C12C                               ;; Check if right button is held
0C12C A5 0F                         LDA buttons_held
0C12E 29 01                         AND #BUTTON_RIGHT
0C130 F0 1A                         BEQ +
0C132                                   ;; update the low byte
0C132 A5 18                             LDA ball_xpos_lo
0C134 18                                CLC
0C135 69 30                             ADC #BALL_SPEED_LO
0C137 85 18                             STA ball_xpos_lo
0C139                           
0C139                                   ;; update the high byte
0C139 A5 17                             LDA ball_xpos_hi
0C13B 69 02                             ADC #BALL_SPEED_HI
0C13D 85 17                             STA ball_xpos_hi     
0C13F                           
0C13F                                  ;; Check right bound
0C13F C9 E8                             CMP #BOUND_RIGHT
0C141 90 09                             BCC +doneBallMovement
0C143 F0 07                             BEQ +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge left and set nudge timer
0C145 A5 2C                             LDA ball_flags
0C147 29 FD                             AND #NUDGE_BALL_LEFT
0C149 20 D9 C6                          JSR sub_InitiateNudge
0C14C                               +
0C14C                           
0C14C                           
0C14C                           +doneBallMovement:
0C14C                           
0C14C                               ;; Check nudge
0C14C A5 33                         LDA nudge_counter
0C14E F0 23                         BEQ +doneBallNudging
0C150 A5 2C                             LDA ball_flags
0C152 29 02                             AND #NUDGE_BALL_RIGHT
0C154 F0 10                             BEQ +nudgeBallLeft
0C156                                   
0C156                                       ;; update the low byte
0C156 A5 18                                 LDA ball_xpos_lo
0C158 18                                    CLC
0C159 69 30                                 ADC #BALL_SPEED_LO
0C15B 85 18                                 STA ball_xpos_lo
0C15D                           
0C15D                                       ;; update the high byte
0C15D A5 17                                 LDA ball_xpos_hi
0C15F 69 02                                 ADC #BALL_SPEED_HI
0C161 85 17                                 STA ball_xpos_hi  
0C163 4C 73 C1                              JMP +doneBallNudging
0C166                                   +nudgeBallLeft:
0C166                                   
0C166                                   ;; update the low byte
0C166 A5 18                             LDA ball_xpos_lo
0C168 38                                SEC
0C169 E9 30                             SBC #BALL_SPEED_LO
0C16B 85 18                             STA ball_xpos_lo
0C16D                           
0C16D                                   ;; update the high byte
0C16D A5 17                             LDA ball_xpos_hi
0C16F E9 02                             SBC #BALL_SPEED_HI
0C171 85 17                             STA ball_xpos_hi
0C173                               +doneBallNudging:
0C173                           
0C173                               ;; Don't update position again until next frame
0C173 E6 2B                         INC ball_update_position
0C175                           
0C175                               
0C175                               ;; Do collision detection
0C175                               .include "game/include/main/collision_detection.asm"
0C175                           
0C175                               ;; Get ball's x-left, x-center, x-right position
0C175 A5 17                         LDA ball_xpos_hi
0C177 18                            CLC
0C178 69 F0                         ADC #BALL_LEFT_WGA
0C17A 85 25                         STA ball_left
0C17C 18                            CLC
0C17D 69 04                         ADC #BALL_HALF_SIZE
0C17F 85 26                         STA ball_center
0C181 18                            CLC
0C182 69 04                         ADC #BALL_HALF_SIZE
0C184 85 27                         STA ball_right
0C186                           
0C186                               ;; Get ball's y-top, y-middle, y-bottom position
0C186 A5 19                         LDA ball_ypos_hi
0C188 18                            CLC
0C189 69 D0                         ADC #BALL_TOP_WGA
0C18B 85 28                         STA ball_top
0C18D 18                            CLC
0C18E 69 04                         ADC #BALL_HALF_SIZE
0C190 85 29                         STA ball_middle
0C192 18                            CLC
0C193 69 04                         ADC #BALL_HALF_SIZE
0C195 85 2A                         STA ball_bottom
0C197                           
0C197                           +checkRightCollision:
0C197                               ;; Check if ball moves right
0C197                               ;; No need to check nudging here as that will never collide with a tile
0C197 A5 0F                         LDA buttons_held
0C199 29 01                         AND #BUTTON_RIGHT
0C19B F0 1C                         BEQ +checkLeftCollision
0C19D                           
0C19D                               ;; Check tile at right position
0C19D A5 29                         LDA ball_middle
0C19F 85 00                         STA temp
0C1A1 A5 27                         LDA ball_right
0C1A3 85 01                         STA temp+1
0C1A5 20 32 C4                      JSR sub_ConvertXYToTileType
0C1A8 29 01                         AND #TILE_IS_SOLID
0C1AA F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1AC                           
0C1AC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1AC A5 2C                         LDA ball_flags
0C1AE 29 FD                         AND #NUDGE_BALL_LEFT
0C1B0 20 D9 C6                      JSR sub_InitiateNudge
0C1B3 20 8B C4                      JSR sub_EvaluateTileType
0C1B6 4C D8 C1                      JMP +checkTopCollision
0C1B9                           
0C1B9                           +checkLeftCollision:
0C1B9                               ;; Check if ball moves right
0C1B9                               ;; No need to check nudging here as that will never collide with a tile
0C1B9 A5 0F                         LDA buttons_held
0C1BB 29 02                         AND #BUTTON_LEFT
0C1BD F0 19                         BEQ +checkTopCollision
0C1BF                           
0C1BF                               ;; Check tile at right position
0C1BF A5 29                         LDA ball_middle
0C1C1 85 00                         STA temp
0C1C3 A5 25                         LDA ball_left
0C1C5 85 01                         STA temp+1
0C1C7 20 32 C4                      JSR sub_ConvertXYToTileType
0C1CA 29 01                         AND #TILE_IS_SOLID
0C1CC F0 0A                         BEQ +checkTopCollision
0C1CE                           
0C1CE                               ;; Tile is solid; nudge ball and evaluate tile type
0C1CE A5 2C                         LDA ball_flags
0C1D0 09 02                         ORA #NUDGE_BALL_RIGHT
0C1D2 20 D9 C6                      JSR sub_InitiateNudge
0C1D5 20 8B C4                      JSR sub_EvaluateTileType
0C1D8                               
0C1D8                               
0C1D8                           +checkTopCollision:
0C1D8                               ;; Check if ball moves up
0C1D8 A5 2C                         LDA ball_flags
0C1DA 29 10                         AND #BALL_MOVES_DOWN
0C1DC D0 1B                         BNE +checkBottomCollision
0C1DE                           
0C1DE                               ;; Check tile at top position
0C1DE A5 28                         LDA ball_top
0C1E0 85 00                         STA temp
0C1E2 A5 26                         LDA ball_center
0C1E4 85 01                         STA temp+1
0C1E6 20 32 C4                      JSR sub_ConvertXYToTileType
0C1E9 29 01                         AND #TILE_IS_SOLID
0C1EB F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1ED                           
0C1ED                               ;; Tile is solid; move ball down and evaluate tile type
0C1ED A5 2C                         LDA ball_flags
0C1EF 09 10                         ORA #MOVE_BALL_DOWN
0C1F1 85 2C                         STA ball_flags
0C1F3 20 8B C4                      JSR sub_EvaluateTileType
0C1F6 4C 11 C2                      JMP +doneCheckingCollision
0C1F9                           
0C1F9                           +checkBottomCollision:
0C1F9                               ;; No movement check needed: since ball is not moving up, it must move down
0C1F9                           
0C1F9                               ;; Check tile at bottom position
0C1F9 A5 2A                         LDA ball_bottom
0C1FB 85 00                         STA temp
0C1FD A5 26                         LDA ball_center
0C1FF 85 01                         STA temp+1
0C201 20 32 C4                      JSR sub_ConvertXYToTileType
0C204 29 01                         AND #TILE_IS_SOLID
0C206 F0 09                         BEQ +doneCheckingCollision
0C208                           
0C208                               ;; Tile is solid; move ball up and evaluate tile type
0C208 A5 2C                         LDA ball_flags
0C20A 29 EF                         AND #MOVE_BALL_UP
0C20C 85 2C                         STA ball_flags
0C20E 20 8B C4                      JSR sub_EvaluateTileType
0C211                           
0C211                           +doneCheckingCollision:
0C211                           
0C211                           
0C211                               ;; Testinging timed PPU scroll concept
0C211                               .include "game/test/timed_ppuscroll_test.asm"
0C211                           ;; Timed updates (test)
0C211                           
0C211                               ;; If B button is pressed
0C211 A5 10                         LDA buttons_pressed
0C213 29 10                         AND #BUTTON_START
0C215 F0 6B                         BEQ +end
0C217                               
0C217                               ;; Set up loop fading
0C217 A9 00                         LDA #$00
0C219 85 07                         STA temp+7
0C21B A0 08                         LDY #$08
0C21D                               -fadeLoop:
0C21D 84 08                             STY temp+8
0C21F                           
0C21F                                   ;; Wait for NMI to pass
0C21F 20 8F C3                          JSR sub_WaitForVBlank
0C222                                   
0C222                                   ;; Now wait for No-sprite 0
0C222                                   -
0C222 AD 02 20                              LDA PPU_STATUS
0C225 29 40                                 AND #SPRITE_0_HIT
0C227 D0 F9                             BNE -
0C229                               
0C229                                   ;; Now wait for Sprite 0
0C229                                   -
0C229 AD 02 20                              LDA PPU_STATUS
0C22C 29 40                                 AND #SPRITE_0_HIT
0C22E F0 F9                             BEQ -
0C230                                       
0C230                                   ;; Setup tile row loop
0C230 A0 16                             LDY #22
0C232                                   -tileLoop:
0C232                                   
0C232                                       ;; Disable drawing
0C232 A5 12                                 LDA soft_ppu_mask
0C234 29 F7                                 AND #%11110111
0C236 8D 01 20                              STA PPU_MASK
0C239                                       
0C239                                       ;; Set up scanline loop
0C239 A2 08                                 LDX #$08
0C23B                                       -scanlineLoop:
0C23B E4 08                                     CPX temp+8
0C23D D0 0A                                     BNE +wasteTime
0C23F                                           
0C23F                                           ;; Restore drawing
0C23F A5 12                                     LDA soft_ppu_mask
0C241 09 08                                     ORA #%00001000
0C243 8D 01 20                                  STA PPU_MASK
0C246 4C 4F C2                                  JMP +wasteMoreTime
0C249                           
0C249                                           ;; Waste 12 frames
0C249                                           +wasteTime:
0C249 E6 09                                     INC temp+9   ;+5
0C24B C6 09                                     DEC temp+9   ;+5
0C24D 49 00                                     EOR #$00     ;+2
0C24F                                           
0C24F                                           ;; Waste about 100 frames
0C24F                                           +wasteMoreTime:
0C24F                                           
0C24F 86 01                                     STX temp+1     ;  3 down, 97 to go
0C251 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C253                                           -wasteLoop:
0C253 EA                                            NOP
0C254 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C256 CA                                            DEX        ;  5+5L down,  95-5L to go
0C257 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C259                           
0C259 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C25B CA                                        DEX            ;  9+8L down, 91-8L to go
0C25C D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C25E                           
0C25E 88                                    DEY
0C25F D0 D1                             BNE -tileLoop
0C261                           
0C261 A4 08                             LDY temp+8
0C263                                   
0C263 E6 07                             INC temp+7
0C265 A5 07                             LDA temp+7
0C267 C9 02                             CMP #$02
0C269 D0 B2                             BNE -fadeLoop
0C26B                           
0C26B A9 00                             LDA #$00
0C26D 85 07                             STA temp+7
0C26F 88                                DEY
0C270 D0 AB                         BNE -fadeLoop
0C272                               
0C272                               ;; Load the next level
0C272 E6 34                         INC current_level
0C274 A5 34                         LDA current_level
0C276 C9 19                         CMP #25
0C278 D0 04                         BNE +
0C27A A9 00                             LDA #$00
0C27C 85 34                             STA current_level
0C27E                               +
0C27E                               
0C27E A9 81                         LDA #LOAD_GAME_SCREEN
0C280 85 2D                         STA screen_mode
0C282                           
0C282                           
0C282                           +end:
0C282                           
0C282                           
0C282                           +skipBallMovement:
0C282                               ;; Add to sprite buffer
0C282 A6 32                         LDX sprite_ram_pointer
0C284 A5 19                         LDA ball_ypos_hi
0C286 9D 00 02                      STA ADDR_SPRITERAM,x
0C289 E8                            INX
0C28A A9 01                         LDA #BALL_TILE_CHR
0C28C 9D 00 02                      STA ADDR_SPRITERAM,x
0C28F E8                            INX
0C290 A9 00                         LDA #BALL_ATTR
0C292 9D 00 02                      STA ADDR_SPRITERAM,x
0C295 E8                            INX
0C296 A5 17                         LDA ball_xpos_hi
0C298 9D 00 02                      STA ADDR_SPRITERAM,x
0C29B E8                            INX
0C29C 86 32                         STX sprite_ram_pointer
0C29E 4C B7 C2                      JMP +doneScreenLoad
0C2A1                           
0C2A1                           
0C2A1                           +checkNextScreen:
0C2A1                           
0C2A1                               ;; Upon pressing START, (next level) design will be drawn
0C2A1                               .include "game/test/load_next_level.asm"
0C2A1                               ;; If START button is pressed
0C2A1 A5 10                         LDA buttons_pressed
0C2A3 29 10                         AND #BUTTON_START
0C2A5 F0 10                         BEQ +continue
0C2A7                                   ;; Load the next level
0C2A7 E6 34                             INC current_level
0C2A9 A5 34                             LDA current_level
0C2AB C9 19                             CMP #25
0C2AD D0 04                             BNE +
0C2AF A9 00                                 LDA #$00
0C2B1 85 34                                 STA current_level
0C2B3                                   +
0C2B3                                   
0C2B3 A9 81                             LDA #LOAD_GAME_SCREEN
0C2B5 85 2D                             STA screen_mode
0C2B7                           
0C2B7                               +continue:
0C2B7                           
0C2B7                           
0C2B7                           +doneScreenLoad:
0C2B7                           
0C2B7                               ;; Load animations (if any)
0C2B7                               .include "game/include/main/load_animations.asm"
0C2B7                               ;; Set up loop
0C2B7 A2 00                         LDX #$00
0C2B9                               -loop_load_animation:
0C2B9                                   ;; Check if current animation is active. If not, goto next
0C2B9 BD 44 03                          LDA explosion_active,x
0C2BC D0 03                             BNE +
0C2BE 4C 58 C3                              JMP +next
0C2C1                                   +
0C2C1                           
0C2C1                                   ;; Check the explosion framecounter
0C2C1 BD 30 03                          LDA explosion_framecounter,x
0C2C4 D0 26                             BNE +
0C2C6                                       ;; Framecounter is 0
0C2C6                                       ;; Reset to animation speed
0C2C6 A9 04                                 LDA #ANIMATION_SPEED
0C2C8 9D 30 03                              STA explosion_framecounter,x
0C2CB                           
0C2CB                                       ;; Set next animation frame, and check if we're done yet
0C2CB FE 34 03                              INC explosion_currentframe,x
0C2CE BD 34 03                              LDA explosion_currentframe,x
0C2D1 C9 0A                                 CMP #ANIM_SLIDES
0C2D3 D0 17                                 BNE +
0C2D5                           
0C2D5                                       ;; If we're done, inactivate current explosion, clean
0C2D5                                       ;; up sprite RAM and go to the next one
0C2D5 A9 00                                 LDA #$00
0C2D7 9D 44 03                              STA explosion_active,x
0C2DA                                       
0C2DA A9 09                                 LDA #SLIDE_SIZE
0C2DC 0A                                    ASL
0C2DD 0A                                    ASL
0C2DE A8                                    TAY
0C2DF A9 EF                                 LDA #$EF
0C2E1                                       -
0C2E1 88                                        DEY
0C2E2 99 00 02                                  STA ADDR_SPRITERAM,y
0C2E5 C0 00                                     CPY #00
0C2E7 D0 F8                                 BNE -
0C2E9                                       
0C2E9 4C 58 C3                              JMP +next
0C2EC                                   +
0C2EC                           
0C2EC                                   ;; Load (x,y) position in temp variables
0C2EC BD 3C 03                          LDA explosion_x,x
0C2EF 85 01                             STA temp+1
0C2F1 85 03                             STA temp+3
0C2F3 BD 40 03                          LDA explosion_y,x
0C2F6 85 02                             STA temp+2
0C2F8                           
0C2F8                                   ;; Load attribute in temp variable
0C2F8 BD 38 03                          LDA explosion_attributes,x
0C2FB 85 04                             STA temp+4
0C2FD                           
0C2FD                                   ;; Load current frame into Y-register
0C2FD BC 34 03                          LDY explosion_currentframe,x
0C300                           
0C300                                   ;; Load current frame ROM address from table
0C300 B9 58 CC                          LDA explosion_anim_lo,y
0C303 85 0C                             STA pointer
0C305 B9 4E CC                          LDA explosion_anim_hi,y
0C308 85 0D                             STA pointer+1
0C30A                           
0C30A                                   ;; Save x-register on stack
0C30A 8A                                TXA
0C30B 48                                PHA
0C30C                           
0C30C                                   ;; Load sprites into sprite RAM
0C30C A6 32                             LDX sprite_ram_pointer
0C30E A0 00                             LDY #$00
0C310                           
0C310                                   ;; Prepare (x,y) offset for loop
0C310 84 00                             STY temp
0C312                           
0C312                                   -loop_load_sprite:
0C312                                   
0C312                                       ;; Do not draw empty sprites
0C312 B1 0C                                 LDA (pointer),y
0C314 F0 18                                 BEQ +nextSprite
0C316                                   
0C316                                           ;; Add y-position to sprite ram buffer
0C316 A5 02                                     LDA temp+2
0C318 9D 00 02                                  STA ADDR_SPRITERAM,x
0C31B E8                                        INX
0C31C                           
0C31C                                           ;; Get tile number from frame ROM address, and
0C31C                                           ;; add it to sprite ram buffer
0C31C B1 0C                                     LDA (pointer),y
0C31E 9D 00 02                                  STA ADDR_SPRITERAM,x
0C321 E8                                        INX
0C322                           
0C322                                           ;; Add attribute data to sprite ram buffer
0C322 A5 04                                     LDA temp+4
0C324 9D 00 02                                  STA ADDR_SPRITERAM,x
0C327 E8                                        INX
0C328                           
0C328                                           ;; Add x-position to sprite ram buffer
0C328 A5 03                                     LDA temp+3
0C32A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C32D E8                                        INX
0C32E                           
0C32E                                       +nextSprite:
0C32E                           
0C32E                                       ;; Check if all sprites are done
0C32E C8                                    INY
0C32F C0 09                                 CPY #SLIDE_SIZE
0C331 F0 21                                 BEQ +done
0C333                           
0C333                                       ;; Update x value
0C333 A5 03                                 LDA temp+3
0C335 18                                    CLC
0C336 69 08                                 ADC #$08
0C338 85 03                                 STA temp+3
0C33A                           
0C33A                                       ;; Update temp for x,y position
0C33A E6 00                                 INC temp
0C33C A5 00                                 LDA temp
0C33E C9 03                                 CMP #SLIDE_WIDTH
0C340 D0 0F                                 BNE +
0C342                                           ;; Row is done; reset x-position
0C342 A5 01                                     LDA temp+1
0C344 85 03                                     STA temp+3
0C346                           
0C346                                           ;; Update y-position
0C346 A5 02                                     LDA temp+2
0C348 18                                        CLC
0C349 69 08                                     ADC #$08
0C34B 85 02                                     STA temp+2
0C34D                           
0C34D                                           ;; Reset row counter
0C34D A9 00                                     LDA #$00
0C34F 85 00                                     STA temp
0C351                                       +
0C351                           
0C351 4C 12 C3                          JMP -loop_load_sprite
0C354                           
0C354                               +done:
0C354 86 32                             STX sprite_ram_pointer
0C356                           
0C356                                   ;; Retrieve x-register from stack
0C356 68                                PLA
0C357 AA                                TAX
0C358                           
0C358                               +next:
0C358                                   ;; Check if all animations have been updated
0C358 E8                                INX
0C359 E0 04                             CPX #MAX_ANIMATIONS
0C35B F0 03                             BEQ +done
0C35D                           
0C35D 4C B9 C2                      JMP -loop_load_animation
0C360                           +done:
0C360                           
0C360                               ;; Sprite clean-up
0C360 A6 32                         LDX sprite_ram_pointer
0C362 A9 EF                         LDA #$EF
0C364                               -
0C364 9D 00 02                          STA ADDR_SPRITERAM,x
0C367 E8                                INX
0C368 D0 FA                         BNE -
0C36A 4C 57 C0                      JMP MainGameLoop
0C36D                           
0C36D                           ;; Subroutines
0C36D                           .include "include/subroutines.asm"
0C36D                           
0C36D                           ;; RNG
0C36D                           .include "subroutine/GetRandomNumber.asm"
0C36D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C36D                           ;;
0C36D                           ;; subroutine/GetRandomNumber.asm
0C36D                           ;;
0C36D                           ;; Simple and fast random number generator by White Flame.
0C36D                           ;;
0C36D                           ;; Set random_seed to an arbitrary number to randomize between
0C36D                           ;; gaming sessions, for instance using the frame counter upon
0C36D                           ;; pressing START on the intro screen.
0C36D                           ;;
0C36D                           ;;     ;; IF START PRESSED:
0C36D                           ;;     LDA frame_counter
0C36D                           ;;     STA random_seed
0C36D                           ;;
0C36D                           ;; Source:
0C36D                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C36D                           ;;
0C36D                           ;;
0C36D                           
0C36D                           sub_GetRandomNumber:
0C36D                               ;; Force EOR if random_seed is zero
0C36D A5 16                         LDA random_seed
0C36F F0 05                         BEQ +doEor
0C371                           
0C371                               ;; Shift left, and EOR if the high bit is set
0C371 0A                            ASL
0C372 F0 04                         BEQ +noEor
0C374 90 02                         BCC +noEor
0C376                           
0C376                           +doEor:
0C376 49 1D                         EOR #$1D
0C378                           
0C378                           +noEor:
0C378 85 16                         STA random_seed
0C37A                           
0C37A 60                            RTS
0C37B                           
0C37B                           
0C37B                           ;; Read controller input
0C37B                           .include "subroutine/ReadController.asm"
0C37B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C37B                           ;;
0C37B                           ;; subroutine/ReadController.asm
0C37B                           ;;
0C37B                           ;; Subroutine that polls the controller and stores the input
0C37B                           ;; buttons in a variable. This version only handles controller
0C37B                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C37B                           ;;
0C37B                           ;;
0C37B                           
0C37B                           sub_ReadController:
0C37B                           
0C37B                               ;; Set strobe bit
0C37B A9 01                         LDA #$01
0C37D 8D 16 40                      STA JOYPAD_1
0C380                           
0C380                               ;; Set up ring counter
0C380 85 0F                         STA buttons_held
0C382                           
0C382                               ;; Clear strobe bit
0C382 4A                            LSR
0C383 8D 16 40                      STA JOYPAD_1
0C386                           
0C386                               ;; Loop through button presses
0C386                               -
0C386 AD 16 40                          LDA JOYPAD_1
0C389 4A                                LSR
0C38A 26 0F                             ROL buttons_held
0C38C                           
0C38C                               ;; Check if ring counter is done
0C38C 90 F8                         BCC -
0C38E                           
0C38E                               ;; Return from subroutine
0C38E 60                            RTS
0C38F                           
0C38F                           
0C38F                           ;; vBlank wait
0C38F                           .include "subroutine/WaitForVBlank.asm"
0C38F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C38F                           ;;
0C38F                           ;; subroutine/WaitForVBlank.asm
0C38F                           ;;
0C38F                           ;; Subroutine that essentially pauses script execution until
0C38F                           ;; vBlank happens.
0C38F                           ;;
0C38F                           ;;
0C38F                           
0C38F                           sub_WaitForVBlank:
0C38F 2C 02 20                      BIT $2002
0C392 10 FB                         BPL sub_WaitForVBlank
0C394 60                            RTS
0C395                           
0C395                           
0C395                           ;; Game specific subroutines
0C395                           .include "game/include/subroutines.asm"
0C395                           ;; additional game-specific subroutines go here
0C395                           
0C395                           .include "game/subroutine/ClearScreen.asm"
0C395                           ;; Subroutine to clear the screen
0C395                           ;; If it's a game screen, add noise
0C395                           
0C395                           sub_ClearScreen:
0C395                               ;; Check of game screen or not
0C395 A5 2D                         LDA screen_mode
0C397 29 03                         AND #CHECK_SCREEN_MODE
0C399 C9 01                         CMP #IS_GAME_SCREEN
0C39B F0 02                         BEQ +
0C39D A9 00                             LDA #$00
0C39F                               +
0C39F 85 01                         STA temp+1
0C3A1                               
0C3A1                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C3A1 2C 02 20                      BIT PPU_STATUS
0C3A4 A9 20                         LDA #$20
0C3A6 8D 06 20                      STA PPU_ADDR
0C3A9 A9 00                         LDA #$00
0C3AB 8D 06 20                      STA PPU_ADDR
0C3AE                               
0C3AE                               ;; Set up tile to draw and loop
0C3AE 85 00                         STA temp
0C3B0 AA                            TAX
0C3B1 A8                            TAY
0C3B2                           
0C3B2                               -     
0C3B2                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C3B2 A5 00                             LDA temp
0C3B4 8D 07 20                          STA PPU_DATA
0C3B7                           
0C3B7                                   ;; Check if we should draw noise next. Noise is drawn if:
0C3B7                                   ;; - Screen mode is game screen
0C3B7                                   ;; - Y between #$06 and #$19 (inclusive)
0C3B7                                   ;; - X between #$02 and #$1D (inclusive)
0C3B7                                   
0C3B7                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C3B7 A5 01                             LDA temp+1
0C3B9 F0 1C                             BEQ +nextTileInRow
0C3BB                                   
0C3BB                                   ;; If Y < $6, skip the check
0C3BB C0 06                             CPY #$06
0C3BD 90 18                             BCC +nextTileInRow
0C3BF                                   
0C3BF                                   ;; If X < $1, skip the check
0C3BF E0 01                             CPX #$01
0C3C1 90 14                             BCC +nextTileInRow
0C3C3                                   
0C3C3                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C3C3 E0 1D                             CPX #$1D
0C3C5 D0 04                             BNE +
0C3C7 A9 00                                 LDA #$00
0C3C9 85 00                                 STA temp
0C3CB                                   +
0C3CB B0 0A                             BCS +nextTileInRow
0C3CD                                   
0C3CD                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C3CD 20 6D C3                          JSR sub_GetRandomNumber
0C3D0 29 07                             AND #%00000111
0C3D2 18                                CLC
0C3D3 69 68                             ADC #$68
0C3D5 85 00                             STA temp
0C3D7                           
0C3D7                           +nextTileInRow:
0C3D7                                   
0C3D7                                   ;; Check if a row has been done. If not, draw the next
0C3D7 E8                                INX
0C3D8 E0 20                             CPX #$20
0C3DA D0 D6                             BNE -
0C3DC                                   
0C3DC                                   ;; Go to the next row (if any left)
0C3DC A2 00                             LDX #00
0C3DE C8                                INY
0C3DF                                   
0C3DF                                   ;; If Y is 1A, skip noise tile check until done drawing
0C3DF C0 1A                             CPY #$1A
0C3E1 D0 04                             BNE +
0C3E3 A9 00                                 LDA #$00
0C3E5 85 01                                 STA temp+1
0C3E7                                   +
0C3E7                                   
0C3E7 C0 1E                             CPY #$1E
0C3E9 D0 C7                         BNE -
0C3EB                           
0C3EB                               ;; Clear attribute table
0C3EB A9 23                         LDA #$23
0C3ED 8D 06 20                      STA PPU_ADDR
0C3F0 A9 C0                         LDA #$C0
0C3F2 8D 06 20                      STA PPU_ADDR
0C3F5 A9 00                         LDA #$00
0C3F7 A2 40                         LDX #$40
0C3F9                               -
0C3F9 8D 07 20                          STA PPU_DATA
0C3FC CA                                DEX
0C3FD D0 FA                         BNE -
0C3FF                               
0C3FF 60                            RTS0C400                           .include "game/subroutine/ColorizeBall.asm"
0C400                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C400                           ;;
0C400                           ;;  Subroutine: ColorizeBall
0C400                           ;;
0C400                           ;;  Applies the color set through ball_flags to the ball sprite.
0C400                           ;;
0C400                           ;;
0C400                           
0C400                           
0C400                           sub_ColorizeBall:
0C400                           
0C400                               ;; Get color from ball_flags
0C400 4A                            LSR
0C401 4A                            LSR
0C402 4A                            LSR
0C403 4A                            LSR
0C404 4A                            LSR
0C405 AA                            TAX
0C406                           
0C406                               ;; Add new light color of ball to PPU palette
0C406 A9 3F                         LDA #$3F
0C408 85 00                         STA temp
0C40A A9 11                         LDA #$11
0C40C 85 01                         STA temp+1
0C40E BD 68 CC                      LDA tbl_BallColorLight,x
0C411 85 02                         STA temp+2
0C413 20 04 CB                      JSR sub_WriteByteToPPUBuffer
0C416                               
0C416                               ;; Add new dark color of ball to PPU palette
0C416 E6 01                         INC temp+1
0C418 BD 62 CC                      LDA tbl_BallColorDark,x
0C41B 85 02                         STA temp+2
0C41D 20 04 CB                      JSR sub_WriteByteToPPUBuffer
0C420                               
0C420 60                            RTS
0C421                           
0C421                           .include "game/subroutine/ColorsMatch.asm"
0C421                           
0C421                           ;; Subroutine to check if ball color matches colliding tile color
0C421                           
0C421                           sub_ColorsMatch:
0C421                               ;; Save tile color in temp variable
0C421 A5 35                         LDA colliding_tile
0C423 29 0E                         AND #%00001110
0C425 85 00                         STA temp
0C427                           
0C427                               ;; Get ball color
0C427 A5 2C                         LDA ball_flags
0C429 29 E0                         AND #%11100000
0C42B 4A                            LSR
0C42C 4A                            LSR
0C42D 4A                            LSR
0C42E 4A                            LSR
0C42F                           
0C42F                               ;; Compare with tile color
0C42F C5 00                         CMP temp
0C431 60                            RTS
0C432                           
0C432                           .include "game/subroutine/ConvertXYToTileType.asm"
0C432                           
0C432                           ;; Subroutine to convert the ball's position to a tile type
0C432                           ;; - Expects temp to be y-position of ball within game area
0C432                           ;; - Expects temp+1 to be x-position of ball within game area
0C432                           ;; - Puts result in accumulator and zp variable
0C432                           ;; - Corrupts X-register
0C432                           
0C432                           sub_ConvertXYToTileType:
0C432 A5 01                         LDA temp+1
0C434 4A                            LSR
0C435 4A                            LSR
0C436 4A                            LSR
0C437 4A                            LSR
0C438 85 09                         STA temp+9
0C43A A5 00                         LDA temp
0C43C 29 F0                         AND #%11110000
0C43E 18                            CLC
0C43F 65 09                         ADC temp+9
0C441 85 09                         STA temp+9
0C443 AA                            TAX
0C444 BD 00 04                      LDA tile_type, x
0C447 85 35                         STA colliding_tile
0C449 60                            RTS
0C44A                           
0C44A                           .include "game/subroutine/DisableEnableRendering.asm"
0C44A                           sub_DisableRendering:
0C44A                               ;; Force NMI skip, disable rendering
0C44A A9 01                     	LDA #$01
0C44C 85 14                     	STA force_skip_nmi
0C44E 20 8F C3                      JSR sub_WaitForVBlank
0C451 A5 12                         LDA soft_ppu_mask
0C453 29 E7                         AND #%11100111
0C455 8D 01 20                      STA PPU_MASK
0C458 85 12                         STA soft_ppu_mask
0C45A 20 8F C3                      JSR sub_WaitForVBlank
0C45D 60                            RTS
0C45E                           
0C45E                           sub_EnableRendering:
0C45E                               ;; Enable rendering
0C45E A9 00                     	LDA #$00
0C460 8D 05 20                  	STA PPU_SCROLL
0C463 8D 05 20                  	STA PPU_SCROLL
0C466 20 8F C3                      JSR sub_WaitForVBlank
0C469 85 14                     	STA force_skip_nmi
0C46B A5 12                         LDA soft_ppu_mask
0C46D 09 18                         ORA #%00011000
0C46F 85 12                         STA soft_ppu_mask
0C471 8D 01 20                      STA PPU_MASK
0C474 20 8F C3                      JSR sub_WaitForVBlank
0C477 60                            RTS
0C478                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C478                           sub_drawIntroScreenLogoTile:
0C478 B9 4A CB                      LDA tbl_IntroScreenLogoChr,y
0C47B C9 60                         CMP #$60
0C47D D0 08                         BNE +
0C47F 20 6D C3                          JSR sub_GetRandomNumber
0C482 29 07                             AND #$07
0C484 18                                CLC
0C485 69 60                             ADC #$60
0C487                               +
0C487 8D 07 20                      STA PPU_DATA
0C48A 60                            RTS
0C48B                           .include "game/subroutine/EvaluateTileType.asm"
0C48B                           
0C48B                           ;; Subroutine to evaluate the colliding tile type and take its
0C48B                           ;; corresponding action (move block, kill player, ...)
0C48B                           ;; - Expects X-register to be the tile_type offset
0C48B                           ;; - Uses zp variable colliding_tile
0C48B                           
0C48B                           sub_EvaluateTileType:
0C48B                           
0C48B                               ;; Check if collided tile is a color block
0C48B A5 35                         LDA colliding_tile
0C48D 29 80                         AND #IS_COLOR_BLOCK
0C48F D0 03                         BNE +
0C491 4C A4 C6                          JMP +checkIfPaintBlock
0C494                               +
0C494                               
0C494                               ;; It's a color block. Check if the colors match
0C494 20 21 C4                      JSR sub_ColorsMatch
0C497 F0 01                         BEQ +
0C499                                   ;; Colors don't match - return
0C499 60                                RTS
0C49A                               +
0C49A                           
0C49A                               ;; Colors match. Destroy color block
0C49A A4 30                         LDY ppu_buffer_pointer
0C49C                               
0C49C                               ;; (this will be a subroutine)
0C49C                               ;; Get PPU address from YX index
0C49C                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C49C                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C49C 8A                            TXA
0C49D 29 C0                         AND #%11000000
0C49F 18                            CLC
0C4A0 2A                            ROL
0C4A1 2A                            ROL
0C4A2 2A                            ROL
0C4A3 69 20                         ADC #$20
0C4A5 85 00                         STA temp
0C4A7 8A                            TXA
0C4A8 29 0F                         AND #%00001111
0C4AA 0A                            ASL
0C4AB 85 01                         STA temp+1
0C4AD 8A                            TXA
0C4AE 29 30                         AND #%00110000
0C4B0 0A                            ASL
0C4B1 0A                            ASL
0C4B2 18                            CLC
0C4B3 65 01                         ADC temp+1
0C4B5 85 01                         STA temp+1
0C4B7 A5 00                         LDA temp
0C4B9 69 00                         ADC #$00
0C4BB 85 00                         STA temp
0C4BD A5 01                         LDA temp+1
0C4BF 18                            CLC
0C4C0 69 C2                         ADC #$C2
0C4C2 85 01                         STA temp+1
0C4C4 A5 00                         LDA temp
0C4C6 69 00                         ADC #$00
0C4C8 85 00                         STA temp
0C4CA                           
0C4CA                               
0C4CA                               ;; (this will also be a subroutine eventually)
0C4CA                               ;; TILE 1: if metatile on top left is solid, draw
0C4CA                               ;; null tile, else draw random noise tile
0C4CA A9 00                         LDA #%00
0C4CC 85 2F                         STA ppu_buffer_update
0C4CE                               
0C4CE A5 00                         LDA temp
0C4D0 99 00 03                      STA ppu_buffer,y
0C4D3 C8                            INY
0C4D4 A5 01                         LDA temp+1
0C4D6 99 00 03                      STA ppu_buffer,y
0C4D9 C8                            INY
0C4DA                               
0C4DA 8A                            TXA
0C4DB 29 0F                         AND #%00001111
0C4DD F0 11                         BEQ +drawRandomTile
0C4DF                           
0C4DF 8A                            TXA
0C4E0 29 F0                         AND #%11110000
0C4E2 F0 0C                         BEQ +drawRandomTile
0C4E4                           
0C4E4 BD EF 03                      LDA tile_type-17,x
0C4E7 29 01                         AND #%00000001
0C4E9 F0 05                         BEQ +drawRandomTile  
0C4EB                           
0C4EB                               ;; Draw a null tile
0C4EB A9 00                         LDA #$00
0C4ED 4C F8 C4                      JMP +addToPPUBuffer
0C4F0                               
0C4F0                           +drawRandomTile:
0C4F0                               ;; Draw a random tile
0C4F0 20 6D C3                      JSR sub_GetRandomNumber
0C4F3 29 07                         AND #%00000111
0C4F5 18                            CLC
0C4F6 69 68                         ADC #$68
0C4F8                               
0C4F8                               ;; Add tile to ppu buffer
0C4F8                           +addToPPUBuffer:
0C4F8 99 00 03                      STA ppu_buffer,y
0C4FB C8                            INY
0C4FC                           
0C4FC                               ;; TILE 2: If metatile above is solid, draw null,
0C4FC                               ;; else draw random noise.
0C4FC E6 01                         INC temp+1
0C4FE A5 00                         LDA temp
0C500 99 00 03                      STA ppu_buffer,y
0C503 C8                            INY
0C504 A5 01                         LDA temp+1
0C506 99 00 03                      STA ppu_buffer,y
0C509 C8                            INY
0C50A                               
0C50A 8A                            TXA
0C50B 29 F0                         AND #%11110000
0C50D F0 0C                         BEQ +drawRandomTile
0C50F                               
0C50F BD F0 03                      LDA tile_type-16,x
0C512 29 01                         AND #%00000001
0C514 F0 05                         BEQ +drawRandomTile
0C516                               
0C516 A9 00                         LDA #%00
0C518 4C 23 C5                      JMP +addToPPUBuffer
0C51B                           
0C51B                           +drawRandomTile:
0C51B 20 6D C3                      JSR sub_GetRandomNumber
0C51E 29 07                         AND #%00000111
0C520 18                            CLC
0C521 69 68                         ADC #$68
0C523                           
0C523                           +addToPPUBuffer:
0C523 99 00 03                      STA ppu_buffer,y
0C526 C8                            INY
0C527                               
0C527                               ;; TILE 3 - If metatile left is solid, draw null,
0C527                               ;; else draw random noise.
0C527 A5 01                         LDA temp+1
0C529 18                            CLC
0C52A 69 1F                         ADC #$1F
0C52C 85 01                         STA temp+1
0C52E A5 00                         LDA temp
0C530 69 00                         ADC #$00
0C532 85 00                         STA temp
0C534 99 00 03                      STA ppu_buffer,y
0C537 C8                            INY
0C538 A5 01                         LDA temp+1
0C53A 99 00 03                      STA ppu_buffer,y
0C53D C8                            INY
0C53E                               
0C53E 8A                            TXA
0C53F 29 0F                         AND #%00001111
0C541 F0 0C                         BEQ +drawRandomTile
0C543                               
0C543 BD FF 03                      LDA tile_type-1,x
0C546 29 01                         AND #%00000001
0C548 F0 05                         BEQ +drawRandomTile
0C54A                               
0C54A A9 00                         LDA #%00
0C54C 4C 57 C5                      JMP +addToPPUBuffer
0C54F                           
0C54F                           +drawRandomTile:
0C54F 20 6D C3                      JSR sub_GetRandomNumber
0C552 29 07                         AND #%00000111
0C554 18                            CLC
0C555 69 68                         ADC #$68
0C557                               
0C557                           +addToPPUBuffer:
0C557 99 00 03                      STA ppu_buffer,y
0C55A C8                            INY
0C55B                               
0C55B                               ;; TILE 4 - Always random noise
0C55B E6 01                         INC temp+1
0C55D A5 00                         LDA temp
0C55F 99 00 03                      STA ppu_buffer,y
0C562 C8                            INY
0C563 A5 01                         LDA temp+1
0C565 99 00 03                      STA ppu_buffer,y
0C568 C8                            INY
0C569 20 6D C3                      JSR sub_GetRandomNumber
0C56C 29 07                         AND #%00000111
0C56E 18                            CLC
0C56F 69 68                         ADC #$68
0C571 99 00 03                      STA ppu_buffer,y
0C574 C8                            INY
0C575                           
0C575                               ;; TILE 5 - If tile on the right is solid, skip,
0C575                               ;; else draw random noise tile
0C575 E6 01                         INC temp+1
0C577                               
0C577 8A                            TXA
0C578 29 0F                         AND #%00001111
0C57A C9 0D                         CMP #$0D
0C57C F0 1F                         BEQ +skipTile
0C57E                               
0C57E BD 01 04                      LDA tile_type+1,x
0C581 29 01                         AND #%00000001
0C583 D0 18                         BNE +skipTile
0C585 A5 00                             LDA temp
0C587 99 00 03                          STA ppu_buffer,y
0C58A C8                                INY
0C58B A5 01                             LDA temp+1
0C58D 99 00 03                          STA ppu_buffer,y
0C590 C8                                INY
0C591 20 6D C3                          JSR sub_GetRandomNumber
0C594 29 07                             AND #%00000111
0C596 18                                CLC
0C597 69 68                             ADC #$68
0C599 99 00 03                          STA ppu_buffer,y
0C59C C8                                INY    
0C59D                               +skipTile:
0C59D                           
0C59D                               ;; TILE 6 - If tile on bottom is solid, skip,
0C59D                               ;; else draw random noise
0C59D A5 01                         LDA temp+1
0C59F 18                            CLC
0C5A0 69 1F                         ADC #$1F
0C5A2 85 01                         STA temp+1
0C5A4 A5 00                         LDA temp
0C5A6 69 00                         ADC #$00
0C5A8 85 00                         STA temp
0C5AA                           
0C5AA 8A                            TXA
0C5AB 29 F0                         AND #%11110000
0C5AD C9 90                         CMP #$90
0C5AF F0 1F                         BEQ +skipTile
0C5B1                           
0C5B1 BD 10 04                      LDA tile_type+16,x
0C5B4 29 01                         AND #%00000001
0C5B6 D0 18                         BNE +skipTile
0C5B8 A5 00                             LDA temp
0C5BA 99 00 03                          STA ppu_buffer,y
0C5BD C8                                INY
0C5BE A5 01                             LDA temp+1
0C5C0 99 00 03                          STA ppu_buffer,y
0C5C3 C8                                INY
0C5C4 20 6D C3                          JSR sub_GetRandomNumber
0C5C7 29 07                             AND #%00000111
0C5C9 18                                CLC
0C5CA 69 68                             ADC #$68
0C5CC 99 00 03                          STA ppu_buffer,y
0C5CF C8                                INY    
0C5D0                               +skipTile:
0C5D0                               
0C5D0                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C5D0                               ;; else draw random noise
0C5D0 E6 01                         INC temp+1
0C5D2                           
0C5D2 8A                            TXA
0C5D3 29 F0                         AND #%11110000
0C5D5 C9 90                         CMP #$90
0C5D7 F0 26                         BEQ +skipTile
0C5D9                               
0C5D9 8A                            TXA
0C5DA 29 0F                         AND #%00001111
0C5DC C9 0D                         CMP #$0D
0C5DE F0 1F                         BEQ +skipTile
0C5E0                               
0C5E0 BD 11 04                      LDA tile_type+17,x
0C5E3 29 01                         AND #%00000001
0C5E5 D0 18                         BNE +skipTile
0C5E7 A5 00                             LDA temp
0C5E9 99 00 03                          STA ppu_buffer,y
0C5EC C8                                INY
0C5ED A5 01                             LDA temp+1
0C5EF 99 00 03                          STA ppu_buffer,y
0C5F2 C8                                INY
0C5F3 20 6D C3                          JSR sub_GetRandomNumber
0C5F6 29 07                             AND #%00000111
0C5F8 18                                CLC
0C5F9 69 68                             ADC #$68
0C5FB 99 00 03                          STA ppu_buffer,y
0C5FE C8                                INY    
0C5FF                               +skipTile:   
0C5FF                           
0C5FF                           
0C5FF                               ;; - Update attribute table accordingly through ppu buffer
0C5FF A9 23                         LDA #$23
0C601 99 00 03                      STA ppu_buffer,y
0C604 C8                            INY
0C605                               
0C605 8A                            TXA
0C606 29 F0                         AND #%11110000
0C608 4A                            LSR
0C609 4A                            LSR
0C60A 4A                            LSR
0C60B 4A                            LSR
0C60C 18                            CLC
0C60D 69 01                         ADC #1
0C60F 4A                            LSR
0C610 0A                            ASL
0C611 0A                            ASL
0C612 0A                            ASL
0C613 18                            CLC
0C614 69 C8                         ADC #$C8
0C616 85 00                         STA temp
0C618 8A                            TXA
0C619 29 0F                         AND #%00001111
0C61B 18                            CLC
0C61C 69 01                         ADC #$01
0C61E 4A                            LSR
0C61F 18                            CLC
0C620 65 00                         ADC temp
0C622 85 00                         STA temp
0C624 99 00 03                      STA ppu_buffer,y
0C627 C8                            INY
0C628                                  
0C628 8A                            TXA
0C629 29 10                         AND #%00010000
0C62B F0 05                         BEQ +
0C62D A9 F0                             LDA #%11110000
0C62F 4C 34 C6                          JMP ++
0C632                               +
0C632 A9 0F                         LDA #%00001111
0C634                               ++
0C634 85 02                         STA temp+2
0C636                               
0C636 8A                            TXA
0C637 48                            PHA
0C638 29 01                         AND #%00000001
0C63A F0 07                         BEQ +
0C63C A5 02                             LDA temp+2
0C63E 09 CC                             ORA #%11001100
0C640 4C 47 C6                          JMP ++
0C643                               +
0C643 A5 02                         LDA temp+2
0C645 09 33                         ORA #%00110011
0C647                               ++
0C647 85 02                         STA temp+2
0C649                               
0C649 A5 00                         LDA temp
0C64B 38                            SEC
0C64C E9 C0                         SBC #$C0
0C64E AA                            TAX
0C64F BD A0 04                      LDA tile_attributes,x
0C652 25 02                         AND temp+2
0C654 9D A0 04                      STA tile_attributes,x
0C657 99 00 03                      STA ppu_buffer,y
0C65A C8                            INY
0C65B 68                            PLA
0C65C AA                            TAX
0C65D                           
0C65D                               ;; Tell PPU to update tiles and attributes next frame
0C65D 84 30                         STY ppu_buffer_pointer
0C65F A9 01                         LDA #$01
0C661 85 2F                         STA ppu_buffer_update
0C663                            
0C663                               
0C663                               ;; - Load destruction animation on tile
0C663                               ;; Get most recent slot for explosion    
0C663 8A                            TXA
0C664 85 02                         STA temp+2
0C666 A6 31                         LDX explosion_pointer
0C668                           
0C668                               ;; If 0, use max pointer value
0C668 D0 02                         BNE +
0C66A A2 04                             LDX #MAX_ANIMATIONS
0C66C                               +
0C66C                           
0C66C                               ;; Decrease pointer by one
0C66C CA                            DEX
0C66D 86 31                         STX explosion_pointer
0C66F                           
0C66F                               ;; Load explosion data into RAM
0C66F A9 00                         LDA #$00
0C671 9D 34 03                      STA explosion_currentframe,x
0C674                           
0C674 A9 04                         LDA #ANIMATION_SPEED
0C676 9D 30 03                      STA explosion_framecounter,x
0C679                           
0C679 A5 02                         LDA temp+2
0C67B 29 0F                         AND #%00001111
0C67D A8                            TAY
0C67E B9 B7 D3                      LDA tbl_Times16,y
0C681 18                            CLC
0C682 69 0E                         ADC #$0E
0C684 9D 3C 03                      STA explosion_x,x
0C687                           
0C687 A5 02                         LDA temp+2
0C689 29 F0                         AND #%11110000
0C68B 18                            CLC
0C68C 69 29                         ADC #$29
0C68E 9D 40 03                      STA explosion_y,x
0C691                           
0C691 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C693 9D 38 03                      STA explosion_attributes,x
0C696 A9 01                         LDA #$01
0C698 9D 44 03                      STA explosion_active,x
0C69B                           
0C69B A5 02                         LDA temp+2
0C69D AA                            TAX
0C69E                               
0C69E                               
0C69E                               ;; - Write #$00 in tile type ram (makes not-solid)
0C69E A9 00                         LDA #$00
0C6A0 9D 00 04                      STA tile_type, x
0C6A3                              
0C6A3                               
0C6A3                               ;; - If there are no color blocks left:
0C6A3                               ;;   - Freeze ball
0C6A3                               ;;   - Initiate level-win state
0C6A3                               ;; [@TODO]
0C6A3                               
0C6A3 60                            RTS
0C6A4                           
0C6A4                           +checkIfPaintBlock:
0C6A4                           
0C6A4                           
0C6A4                               ;; Check if collided tile is a paint block
0C6A4 A5 35                         LDA colliding_tile
0C6A6 29 20                         AND #IS_PAINT_BLOCK
0C6A8 F0 1A                         BEQ +checkIfDeathBlock
0C6AA                                   ;; It's a paint block. Update ball color
0C6AA                                   ;; Save x-register
0C6AA 8A                                TXA
0C6AB 48                                PHA
0C6AC                           
0C6AC                                   ;; Get tile color
0C6AC A5 35                             LDA colliding_tile
0C6AE 29 0E                             AND #%00001110
0C6B0 0A                                ASL
0C6B1 0A                                ASL
0C6B2 0A                                ASL
0C6B3 0A                                ASL
0C6B4 85 00                             STA temp
0C6B6                           
0C6B6                                   ;; Apply tile color to ball
0C6B6 A5 2C                             LDA ball_flags
0C6B8 29 1F                             AND #%00011111
0C6BA 05 00                             ORA temp
0C6BC 85 2C                             STA ball_flags
0C6BE 20 00 C4                          JSR sub_ColorizeBall
0C6C1                           
0C6C1                                   ;; Restore x-register
0C6C1 68                                PLA
0C6C2 AA                                TAX
0C6C3                           
0C6C3                                   ;; Return
0C6C3 60                                RTS
0C6C4                               +checkIfDeathBlock:
0C6C4                           
0C6C4                               ;; Check if collided tile is a death block
0C6C4 A5 35                         LDA colliding_tile
0C6C6 29 10                         AND #IS_DEATH_BLOCK
0C6C8 F0 01                         BEQ +checkIfMoveBlock
0C6CA                                   ;; It is a death block. Kill player and return (@TODO)
0C6CA                           ;        LDA ball_flags
0C6CA                           ;        ORA #%00000101
0C6CA                           ;        STA ball_flags
0C6CA 60                                RTS
0C6CB                               +checkIfMoveBlock:
0C6CB                           
0C6CB                               ;; Check if collided tile is a move block
0C6CB A5 35                         LDA colliding_tile
0C6CD 29 40                         AND #IS_MOVE_BLOCK
0C6CF F0 07                         BEQ +done
0C6D1                                   ;; It is a move block. Check if colors match
0C6D1 20 21 C4                          JSR sub_ColorsMatch
0C6D4 F0 01                             BEQ +
0C6D6                                       ;; Colors don't match - return
0C6D6 60                                    RTS
0C6D7                                   +
0C6D7                           
0C6D7                                   ;; Colors match.
0C6D7                                   ;; - Check if next tile is a solid
0C6D7                                   ;; - If not, move the tile:
0C6D7                                   ;;   - Add the tiles that need updating to ppu buffer
0C6D7                                   ;;   - Add move tile sprite over the original tile
0C6D7                                   ;;   - Initiate moving the sprite that way for 16px
0C6D7                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C6D7                                   ;;   - Update attribute table accordingly through ppu buffer
0C6D7                                   ;; - After moving the sprite, in a different routine:
0C6D7                                   ;;   - Add move tile data on the new tile location
0C6D7                                   ;;   - Write the original tile type data on new position in ram
0C6D7                                   ;;   - Destroy sprite
0C6D7                                   ;;   - Update attribute table accordingly through ppu buffer
0C6D7                                   ;; (@TODO)
0C6D7 60                                RTS
0C6D8                               +done:
0C6D8                           
0C6D8                               ;; Return
0C6D8 60                            RTS
0C6D9                           
0C6D9                           .include "game/subroutine/InitiateNudge.asm"
0C6D9                           
0C6D9                           sub_InitiateNudge:
0C6D9 85 2C                         STA ball_flags
0C6DB A9 03                         LDA #NUDGE_FRAMES
0C6DD 85 33                         STA nudge_counter
0C6DF 60                            RTS
0C6E0                           
0C6E0                           .include "game/subroutine/JumpToPointer.asm"
0C6E0                           sub_JumpToPointer:
0C6E0 6C 0C 00                      JMP (pointer)
0C6E3                               ;RTS must be handled by the routine (pointer) jumps to
0C6E3                           .include "game/subroutine/LoadGameScreen.asm"
0C6E3                           sub_LoadGameScreen:
0C6E3                           
0C6E3                               ;; Clear the screen
0C6E3 20 95 C3                      JSR sub_ClearScreen
0C6E6                               
0C6E6                               ;; Clear collision and attribute data
0C6E6 A2 00                         LDX #$00
0C6E8 8A                            TXA
0C6E9                               -
0C6E9 9D 00 04                          STA tile_type,x
0C6EC E8                                INX
0C6ED D0 FA                         BNE -
0C6EF                               
0C6EF                               ;; Get pointer from current level
0C6EF A6 34                         LDX current_level
0C6F1 BD 6C D3                      LDA tbl_lvl_layout_lo,x
0C6F4 85 0C                         STA pointer
0C6F6 BD 53 D3                      LDA tbl_lvl_layout_hi,x
0C6F9 85 0D                         STA pointer+1
0C6FB                           
0C6FB                               ;; Set up the loop
0C6FB A0 00                         LDY #$00
0C6FD                           -drawRowColumnLoop:
0C6FD                           
0C6FD                               ;; Load (x,y) of current set of tiles
0C6FD B1 0C                         LDA (pointer),y
0C6FF                           
0C6FF                               ;; Check if level is done; if so, skip the loop
0C6FF C9 FF                         CMP #LEVEL_END
0C701 D0 03                         BNE +
0C703 4C 4C C8                          JMP +doneLevelLoad
0C706                               +
0C706                           
0C706                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C706 85 00                         STA temp
0C708 C8                            INY
0C709 B1 0C                         LDA (pointer),y
0C70B 85 01                         STA temp+1
0C70D                               
0C70D                               ;; Convert (x,y) to PPU address
0C70D                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C70D A5 00                         LDA temp
0C70F 29 0F                         AND #%00001111
0C711 4A                            LSR
0C712 4A                            LSR
0C713 09 20                         ORA #$20
0C715 85 02                         STA temp+2
0C717                               
0C717                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C717 A5 00                         LDA temp
0C719 29 F0                         AND #%11110000
0C71B 4A                            LSR
0C71C 4A                            LSR
0C71D 4A                            LSR
0C71E 85 03                         STA temp+3
0C720                               
0C720 A5 00                         LDA temp
0C722 29 03                         AND #%00000011
0C724 AA                            TAX
0C725 BD C7 D3                      LDA tbl_Times64,x
0C728 18                            CLC
0C729 65 03                         ADC temp+3
0C72B 18                            CLC
0C72C 69 C2                         ADC #$C2
0C72E 85 03                         STA temp+3
0C730                               
0C730                               ;; Add carry to temp+2
0C730 A5 02                         LDA temp+2
0C732 69 00                         ADC #$00
0C734 85 02                         STA temp+2
0C736                           
0C736                               ;; Convert tile data to loop count and tile type
0C736                               ;; temp+4 = color
0C736 A5 01                         LDA temp+1
0C738 29 07                         AND #%00000111
0C73A 85 04                         STA temp+4
0C73C                               
0C73C                               ;; If color = 7, this is a wall
0C73C C9 07                         CMP #%00000111
0C73E F0 12                         BEQ +wallHack
0C740                                   
0C740                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C740 29 01                             AND #%00000001
0C742 F0 02                             BEQ +
0C744 A9 05                                 LDA #$05
0C746                                   +
0C746 85 07                             STA temp+7
0C748                                
0C748                                   ;; temp+5 = tile type
0C748 A5 01                             LDA temp+1
0C74A 4A                                LSR
0C74B 4A                                LSR
0C74C 4A                                LSR
0C74D 29 03                             AND #%00000011
0C74F 4C 58 C7                          JMP +setTileType
0C752                               +wallHack:
0C752                               
0C752                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C752 A9 00                         LDA #$00
0C754 85 07                         STA temp+7
0C756 A9 04                         LDA #$04
0C758                           
0C758                           +setTileType:    
0C758 85 05                         STA temp+5
0C75A                               
0C75A                               ;; X = tile offset
0C75A 18                            CLC
0C75B 65 07                         ADC temp+7
0C75D AA                            TAX
0C75E                               
0C75E                               ;; temp+6 = number of tiles
0C75E A5 01                         LDA temp+1
0C760 29 60                         AND #%01100000
0C762 4A                            LSR
0C763 4A                            LSR
0C764 4A                            LSR
0C765 4A                            LSR
0C766 4A                            LSR
0C767 85 06                         STA temp+6
0C769                               
0C769                               ;; Translate (x,y) to (y,x) for tile RAM
0C769 A5 00                         LDA temp
0C76B 0A                            ASL
0C76C 0A                            ASL
0C76D 0A                            ASL
0C76E 0A                            ASL
0C76F 85 08                         STA temp+8
0C771 A5 00                         LDA temp
0C773 4A                            LSR
0C774 4A                            LSR
0C775 4A                            LSR
0C776 4A                            LSR
0C777 05 08                         ORA temp+8
0C779 85 00                         STA temp
0C77B                               
0C77B                               ;; Set up loop
0C77B 98                            TYA
0C77C 48                            PHA
0C77D A4 06                         LDY temp+6
0C77F                           
0C77F                               -drawTileLoop:
0C77F                                   ;; Write PPU address
0C77F 2C 02 20                          BIT PPU_STATUS
0C782 A5 02                             LDA temp+2
0C784 8D 06 20                          STA PPU_ADDR
0C787 A5 03                             LDA temp+3
0C789 8D 06 20                          STA PPU_ADDR
0C78C                                   
0C78C                                   ;; Write first and second tile
0C78C BD CB D3                          LDA tbl_GametileTopLeft,x
0C78F 8D 07 20                          STA PPU_DATA
0C792 BD D5 D3                          LDA tbl_GametileTopRight,x
0C795 8D 07 20                          STA PPU_DATA
0C798                                   
0C798                                   ;; Update PPU address
0C798 2C 02 20                          BIT PPU_STATUS
0C79B A5 02                             LDA temp+2
0C79D 8D 06 20                          STA PPU_ADDR
0C7A0 A5 03                             LDA temp+3
0C7A2 18                                CLC
0C7A3 69 20                             ADC #$20
0C7A5 8D 06 20                          STA PPU_ADDR
0C7A8                                   
0C7A8                                   ;; Write third and fourth tile
0C7A8 BD DF D3                          LDA tbl_GametileBottomLeft,x
0C7AB 8D 07 20                          STA PPU_DATA
0C7AE BD E9 D3                          LDA tbl_GametileBottomRight,x
0C7B1 8D 07 20                          STA PPU_DATA
0C7B4                           
0C7B4                                   ;; Push x-register to stack
0C7B4 8A                                TXA
0C7B5 48                                PHA
0C7B6                                   
0C7B6                                   ;; Update tile RAM (aka collision table)
0C7B6 A6 05                             LDX temp+5
0C7B8 BD F3 D3                          LDA tbl_GameTileRamByte,x
0C7BB 05 04                             ORA temp+4
0C7BD 0A                                ASL
0C7BE 09 01                             ORA #%00000001
0C7C0 A6 00                             LDX temp
0C7C2 9D 00 04                          STA tile_type,x
0C7C5                           
0C7C5                                   ;; Check if shade 1 should be drawn
0C7C5 E8                                INX
0C7C6 BD 00 04                          LDA tile_type,x
0C7C9 D0 05                             BNE +
0C7CB A9 00                                 LDA #$00
0C7CD 8D 07 20                              STA PPU_DATA
0C7D0                                   +
0C7D0                                   
0C7D0                                   ;; Check if shade 2 should be drawn
0C7D0 A5 03                             LDA temp+3
0C7D2 18                                CLC
0C7D3 69 41                             ADC #$41
0C7D5 85 03                             STA temp+3
0C7D7 A5 02                             LDA temp+2
0C7D9 69 00                             ADC #$00
0C7DB 85 02                             STA temp+2
0C7DD                                   
0C7DD 8A                                TXA
0C7DE 18                                CLC
0C7DF 69 0F                             ADC #$0F
0C7E1 AA                                TAX
0C7E2                                   
0C7E2 BD 00 04                          LDA tile_type,x
0C7E5 D0 0F                             BNE +
0C7E7 A5 02                                 LDA temp+2
0C7E9 8D 06 20                              STA PPU_ADDR
0C7EC A5 03                                 LDA temp+3
0C7EE 8D 06 20                              STA PPU_ADDR
0C7F1 A9 00                                 LDA #$00
0C7F3 8D 07 20                              STA PPU_DATA
0C7F6                                   +
0C7F6                           
0C7F6                                   ;; Check if shade 3 should be drawn
0C7F6 E8                                INX
0C7F7 E6 03                             INC temp+3
0C7F9 BD 00 04                          LDA tile_type,x
0C7FC D0 0F                             BNE +
0C7FE A5 02                                 LDA temp+2
0C800 8D 06 20                              STA PPU_ADDR
0C803 A5 03                                 LDA temp+3
0C805 8D 06 20                              STA PPU_ADDR
0C808 A9 00                                 LDA #$00
0C80A 8D 07 20                              STA PPU_DATA
0C80D                                   +
0C80D                                   
0C80D                                   ;; Restore x-register from stack
0C80D 68                                PLA
0C80E AA                                TAX
0C80F                                   
0C80F                                   ;; Reset pointer for next tile
0C80F A5 03                             LDA temp+3
0C811 38                                SEC
0C812 E9 42                             SBC #$42
0C814 85 03                             STA temp+3
0C816 A5 02                             LDA temp+2
0C818 E9 00                             SBC #$00
0C81A 85 02                             STA temp+2
0C81C                                   
0C81C                                   ;; Draw next metatile in this loop (if any left)
0C81C 88                                DEY
0C81D 30 27                             BMI +doneDrawingRowColumn
0C81F                                   
0C81F                                   ;; Is it a row or a column?
0C81F A5 01                             LDA temp+1
0C821 10 17                             BPL +
0C823                                       ;; It is a column: move pointer down (+$40)
0C823 A5 03                                 LDA temp+3
0C825 18                                    CLC
0C826 69 40                                 ADC #$40
0C828 85 03                                 STA temp+3
0C82A A5 02                                 LDA temp+2
0C82C 69 00                                 ADC #$00
0C82E 85 02                                 STA temp+2
0C830                                       
0C830                                       ;; Add 16 to temp (as a tile RAM pointer)
0C830 A5 00                                 LDA temp
0C832 18                                    CLC
0C833 69 10                                 ADC #$10
0C835 85 00                                 STA temp
0C837 4C 43 C8                              JMP +drawNextTile
0C83A                                   +
0C83A                                   
0C83A                                   ;; It is a row: move pointer right (+$02)
0C83A A5 03                             LDA temp+3
0C83C 18                                CLC
0C83D 69 02                             ADC #$02
0C83F 85 03                             STA temp+3
0C841                                   
0C841                                   ;; Add 1 to temp (as a tile RAM pointer)
0C841 E6 00                             INC temp
0C843                           
0C843                               
0C843                               ;; Next tile in the row/column
0C843                                   +drawNextTile:
0C843 4C 7F C7                      JMP -drawTileLoop
0C846                           
0C846                               ;; Go to the next set of tiles
0C846                           +doneDrawingRowColumn:
0C846 68                            PLA
0C847 A8                            TAY
0C848 C8                            INY
0C849 4C FD C6                      JMP -drawRowColumnLoop
0C84C                           
0C84C                           ;; Level loading is done
0C84C                           +doneLevelLoad:
0C84C                           
0C84C                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C84C A9 20                         LDA #$20
0C84E 8D 06 20                      STA PPU_ADDR
0C851 A9 A2                         LDA #$A2
0C853 8D 06 20                      STA PPU_ADDR
0C856 A9 35                         LDA #$35
0C858 20 6B CA                      JSR sub_Draw28HorizontalTiles
0C85B                           
0C85B                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C85B A9 23                         LDA #$23
0C85D 8D 06 20                      STA PPU_ADDR
0C860 A9 42                         LDA #$42
0C862 8D 06 20                      STA PPU_ADDR
0C865 A9 31                         LDA #$31
0C867 20 6B CA                      JSR sub_Draw28HorizontalTiles
0C86A                           
0C86A                               ;; Left & right game bounds
0C86A                               ;; Set PPU_ADDR and store in temp variables
0C86A A9 20                         LDA #$20
0C86C 85 00                         STA temp
0C86E 8D 06 20                      STA PPU_ADDR
0C871 A9 C1                         LDA #$C1
0C873 85 01                         STA temp+1
0C875 8D 06 20                      STA PPU_ADDR
0C878                               
0C878                               ;; Set vertical bound tile and set up loop
0C878 A0 33                         LDY #$33
0C87A A2 14                         LDX #20
0C87C                               -
0C87C                                   ;; Show left tile
0C87C 8C 07 20                          STY PPU_DATA
0C87F                                   
0C87F                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C87F A5 00                             LDA temp
0C881 8D 06 20                          STA PPU_ADDR
0C884 A5 01                             LDA temp+1
0C886 18                                CLC
0C887 69 1D                             ADC #29
0C889 85 01                             STA temp+1
0C88B 8D 06 20                          STA PPU_ADDR
0C88E                           
0C88E                                   ;; Show right tile
0C88E 8C 07 20                          STY PPU_DATA
0C891                           
0C891                                   ;; Check if we're done yet
0C891 CA                                DEX
0C892 F0 18                             BEQ +drawCorners
0C894                                   
0C894                                   ;; Not done yet: add 3 to low byte for next left bound
0C894 A5 01                             LDA temp+1
0C896 18                                CLC
0C897 69 03                             ADC #3
0C899 85 01                             STA temp+1
0C89B                                   
0C89B                                   ;; Apply carry to high byte
0C89B A5 00                             LDA temp
0C89D 69 00                             ADC #$00
0C89F 85 00                             STA temp
0C8A1                                   
0C8A1                                   ;; Store next PPU_ADDR to draw at
0C8A1 8D 06 20                          STA PPU_ADDR
0C8A4 A5 01                             LDA temp+1
0C8A6 8D 06 20                          STA PPU_ADDR
0C8A9 4C 7C C8                      JMP -
0C8AC                               
0C8AC                               
0C8AC                           
0C8AC                           +drawCorners:
0C8AC                               ;; Draw the corners of the playing field
0C8AC A9 20                         LDA #$20
0C8AE 8D 06 20                      STA PPU_ADDR
0C8B1 A9 A1                         LDA #$A1
0C8B3 8D 06 20                      STA PPU_ADDR
0C8B6 A9 39                         LDA #$39
0C8B8 8D 07 20                      STA PPU_DATA
0C8BB                           
0C8BB A9 20                         LDA #$20
0C8BD 8D 06 20                      STA PPU_ADDR
0C8C0 A9 BE                         LDA #$BE
0C8C2 8D 06 20                      STA PPU_ADDR
0C8C5 A9 3A                         LDA #$3A
0C8C7 8D 07 20                      STA PPU_DATA
0C8CA                               ;; (added background tile for Sprite-0 hit)
0C8CA A9 3F                         LDA #$3F
0C8CC 8D 07 20                      STA PPU_DATA
0C8CF                           
0C8CF A9 23                         LDA #$23
0C8D1 8D 06 20                      STA PPU_ADDR
0C8D4 A9 41                         LDA #$41
0C8D6 8D 06 20                      STA PPU_ADDR
0C8D9 A9 36                         LDA #$36
0C8DB 8D 07 20                      STA PPU_DATA
0C8DE                           
0C8DE A9 23                         LDA #$23
0C8E0 8D 06 20                      STA PPU_ADDR
0C8E3 A9 5E                         LDA #$5E
0C8E5 8D 06 20                      STA PPU_ADDR
0C8E8 A9 34                         LDA #$34
0C8EA 8D 07 20                      STA PPU_DATA
0C8ED                           
0C8ED                           
0C8ED                               ;; Draw the hud labels
0C8ED A9 20                         LDA #$20
0C8EF 8D 06 20                      STA PPU_ADDR
0C8F2 A9 62                         LDA #$62
0C8F4 8D 06 20                      STA PPU_ADDR
0C8F7 A2 00                         LDX #$00
0C8F9                               -
0C8F9 BD F8 D3                          LDA tbl_HudText,x
0C8FC 8D 07 20                          STA PPU_DATA
0C8FF E8                                INX
0C900 E0 1C                             CPX #28
0C902 D0 F5                         BNE -
0C904                           
0C904                           
0C904                               ;; Draw the current score
0C904 A9 20                         LDA #$20
0C906 8D 06 20                      STA PPU_ADDR
0C909 A9 83                         LDA #$83
0C90B 8D 06 20                      STA PPU_ADDR
0C90E A2 00                         LDX #$00
0C910                               -
0C910 B5 1C                             LDA ball_score,x
0C912 18                                CLC
0C913 69 01                             ADC #$01
0C915 8D 07 20                          STA PPU_DATA
0C918 E8                                INX
0C919 E0 06                             CPX #$06
0C91B D0 F3                         BNE -
0C91D                           
0C91D                           
0C91D                               ;; Draw the level number
0C91D                               ;; (with primitive HEX>DEC)
0C91D A5 34                         LDA current_level
0C91F 18                            CLC
0C920 69 01                         ADC #$01
0C922 85 01                         STA temp+1
0C924                               
0C924 C9 14                         CMP #20
0C926 B0 13                         BCS +tempIsTwo
0C928                               
0C928 C9 0A                         CMP #10
0C92A B0 05                         BCS +tempIsOne
0C92C                               
0C92C A9 00                         LDA #$00
0C92E 4C 42 C9                      JMP +setTemp
0C931                               
0C931                           +tempIsOne:
0C931 38                            SEC
0C932 E9 0A                         SBC #10
0C934 85 01                         STA temp+1
0C936 A9 01                         LDA #$01
0C938 4C 42 C9                      JMP +setTemp
0C93B                               
0C93B                           +tempIsTwo:
0C93B 38                            SEC
0C93C E9 14                         SBC #20
0C93E 85 01                         STA temp+1
0C940 A9 02                         LDA #$02
0C942                           
0C942                           +setTemp:
0C942 85 00                         STA temp
0C944                               
0C944 E6 00                         INC temp
0C946 E6 01                         INC temp+1
0C948                               
0C948 A9 20                         LDA #$20
0C94A 8D 06 20                      STA PPU_ADDR
0C94D A9 8B                         LDA #$8B
0C94F 8D 06 20                      STA PPU_ADDR
0C952 A5 00                         LDA temp
0C954 8D 07 20                      STA PPU_DATA
0C957 A5 01                         LDA temp+1
0C959 8D 07 20                      STA PPU_DATA
0C95C                           
0C95C                           
0C95C                               ;; Draw lives (presumes lives to be capped at 9)
0C95C A9 20                         LDA #$20
0C95E 8D 06 20                      STA PPU_ADDR
0C961 A9 92                         LDA #$92
0C963 8D 06 20                      STA PPU_ADDR
0C966 A6 1B                         LDX ball_lives
0C968 E8                            INX
0C969 8E 07 20                      STX PPU_DATA
0C96C                           
0C96C                           
0C96C                               ;; Set and draw bonus
0C96C A9 07                         LDA #$07
0C96E 85 22                         STA ball_bonus
0C970 A9 09                         LDA #$09
0C972 85 23                         STA ball_bonus+1
0C974 85 24                         STA ball_bonus+2
0C976                               
0C976 A9 20                         LDA #$20
0C978 8D 06 20                      STA PPU_ADDR
0C97B A9 9A                         LDA #$9A
0C97D 8D 06 20                      STA PPU_ADDR
0C980 A2 00                         LDX #$00
0C982                               -
0C982 B5 22                             LDA ball_bonus,x
0C984 18                                CLC
0C985 69 01                             ADC #$01
0C987 8D 07 20                          STA PPU_DATA
0C98A E8                                INX
0C98B E0 03                             CPX #$03
0C98D D0 F3                         BNE -
0C98F                           
0C98F                           
0C98F                               ;; Set attribute data to RAM
0C98F                               
0C98F                               ;; Byte 0-7 of attribute ram should be #%10100000
0C98F A2 00                         LDX #$00
0C991 A9 A0                         LDA #$A0
0C993                               -
0C993 9D A0 04                          STA tile_attributes,x
0C996 E8                                INX
0C997 E0 08                             CPX #$08
0C999 D0 F8                         BNE -
0C99B                           
0C99B                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C99B                           
0C99B                           -attributeLoop:
0C99B                               ;; Reset current attribute value
0C99B A9 00                         LDA #$00
0C99D 85 02                         STA temp+2
0C99F                           
0C99F                               ;; Get first metatile in tile ram based on attribute index
0C99F                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C99F 8A                            TXA
0C9A0                           
0C9A0 38                            SEC
0C9A1 E9 08                         SBC #$08
0C9A3 85 01                         STA temp+1      ; attr - 8 (temp1)
0C9A5 0A                            ASL             ; * 2
0C9A6 85 00                         STA temp        ; temp = temp1 * 2
0C9A8                           
0C9A8 A5 01                         LDA temp+1      ; temp1
0C9AA 29 F8                         AND #%11111000  ; rounded down to 8's
0C9AC 0A                            ASL             ; * 2
0C9AD 18                            CLC
0C9AE 65 00                         ADC temp        ; + temp1 * 2
0C9B0 85 00                         STA temp        ; first metatile
0C9B2                           
0C9B2                               ;; Store first metatile in y-register
0C9B2 A8                            TAY
0C9B3                           
0C9B3                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C9B3 8A                            TXA
0C9B4 29 07                         AND #%00000111
0C9B6 C9 07                         CMP #%00000111
0C9B8 F0 0B                         BEQ +
0C9BA                           
0C9BA                               ;; If X >= $30, don't apply bottom right metatile
0C9BA E0 30                         CPX #$30
0C9BC B0 07                         BCS +
0C9BE                               
0C9BE                               ;; Add metatile1 subpalette to attribute value
0C9BE B9 00 04                      LDA tile_type,y
0C9C1 29 0C                         AND #%00001100
0C9C3 85 02                         STA temp+2
0C9C5                               +
0C9C5                           
0C9C5                           
0C9C5                               ;; Apply second metatile
0C9C5 88                            DEY
0C9C6                           
0C9C6                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C9C6 8A                            TXA
0C9C7 29 07                         AND #%00000111
0C9C9 F0 10                         BEQ +
0C9CB                           
0C9CB                               ;; If X >= $30, don't apply bottom left metatile
0C9CB E0 30                         CPX #$30
0C9CD B0 0C                         BCS +
0C9CF                           
0C9CF                           
0C9CF                           
0C9CF                               ;; Add metatile2 subpalette to attribute value
0C9CF B9 00 04                      LDA tile_type,y
0C9D2 29 0C                         AND #%00001100
0C9D4 4A                            LSR
0C9D5 4A                            LSR
0C9D6 05 02                         ORA temp+2
0C9D8 4C DD C9                      JMP ++
0C9DB                               +
0C9DB A5 02                         LDA temp+2
0C9DD                               ++
0C9DD 0A                            ASL
0C9DE 0A                            ASL
0C9DF 85 02                         STA temp+2
0C9E1                           
0C9E1                           
0C9E1                               ;; Apply third metatile
0C9E1 98                            TYA
0C9E2 38                            SEC
0C9E3 E9 0F                         SBC #$0F
0C9E5 A8                            TAY
0C9E6                           
0C9E6                               ;; If X MOD 8 == 7, don't apply top right metatile
0C9E6 8A                            TXA
0C9E7 29 07                         AND #%00000111
0C9E9 C9 07                         CMP #%00000111
0C9EB F0 11                         BEQ +
0C9ED                           
0C9ED                               ;; If X < $10, don't apply top right metatile
0C9ED 8A                            TXA
0C9EE 29 F0                         AND #%11110000
0C9F0 F0 0C                         BEQ +
0C9F2                           
0C9F2                               ;; Add metatile3 subpalette to attribute value
0C9F2 B9 00 04                      LDA tile_type,y
0C9F5 29 0C                         AND #%00001100
0C9F7 4A                            LSR
0C9F8 4A                            LSR
0C9F9 05 02                         ORA temp+2
0C9FB 4C 00 CA                      JMP ++
0C9FE                               +
0C9FE A5 02                         LDA temp+2
0CA00                               ++
0CA00 0A                            ASL
0CA01 0A                            ASL
0CA02 85 02                         STA temp+2
0CA04                           
0CA04                           
0CA04                               ;; Apply fourth metatile
0CA04 88                            DEY
0CA05                           
0CA05                               ;; If X MOD 8 == 0, don't apply top left metatile
0CA05 8A                            TXA
0CA06 29 07                         AND #%00000111
0CA08 F0 11                         BEQ +
0CA0A                           
0CA0A                               ;; If X < $10, don't apply top left metatile
0CA0A 8A                            TXA
0CA0B 29 F0                         AND #%11110000
0CA0D F0 0C                         BEQ +
0CA0F                           
0CA0F                               ;; Add metatile4 subpalette to attribute value
0CA0F B9 00 04                      LDA tile_type,y
0CA12 29 0C                         AND #%00001100
0CA14 4A                            LSR
0CA15 4A                            LSR
0CA16 05 02                         ORA temp+2
0CA18 4C 1D CA                      JMP ++
0CA1B                               +
0CA1B A5 02                         LDA temp+2
0CA1D                               ++
0CA1D 9D A0 04                      STA tile_attributes,x
0CA20                           
0CA20                               ;; Check the next attribute, if any left
0CA20 E8                            INX
0CA21 E0 38                         CPX #$38
0CA23 F0 03                         BEQ +
0CA25 4C 9B C9                          JMP -attributeLoop
0CA28                               +
0CA28                           
0CA28                               ;; Stream attribute RAM to PPU
0CA28 2C 02 20                      BIT PPU_STATUS
0CA2B A9 23                         LDA #$23
0CA2D 8D 06 20                      STA PPU_ADDR
0CA30 A9 C0                         LDA #$C0
0CA32 8D 06 20                      STA PPU_ADDR
0CA35 A2 00                         LDX #$00
0CA37                               -
0CA37 BD A0 04                          LDA tile_attributes,x
0CA3A 8D 07 20                          STA PPU_DATA
0CA3D E8                                INX
0CA3E E0 40                             CPX #$40
0CA40 D0 F5                         BNE -
0CA42                           
0CA42                               ;; Set initial ball position
0CA42 A6 34                         LDX current_level
0CA44 BD 85 D3                      LDA tbl_lvl_ball_startpos,x
0CA47 29 F0                         AND #%11110000
0CA49 18                            CLC
0CA4A 69 34                         ADC #$34
0CA4C 85 19                         STA ball_ypos_hi
0CA4E BD 85 D3                      LDA tbl_lvl_ball_startpos,x
0CA51 0A                            ASL
0CA52 0A                            ASL
0CA53 0A                            ASL
0CA54 0A                            ASL
0CA55 18                            CLC
0CA56 69 14                         ADC #$14
0CA58 85 17                         STA ball_xpos_hi
0CA5A A9 00                         LDA #$00
0CA5C 85 18                         STA ball_xpos_lo
0CA5E 85 1A                         STA ball_ypos_lo
0CA60                               
0CA60                               ;; Set initial ball color and direction
0CA60 BD 9E D3                      LDA tbl_lvl_ball_init,x
0CA63 29 F0                         AND #%11110000
0CA65 85 2C                         STA ball_flags
0CA67 20 00 C4                      JSR sub_ColorizeBall
0CA6A                               
0CA6A                               ;; Return
0CA6A 60                            RTS
0CA6B                           
0CA6B                           
0CA6B                           ;; Subroutine: draw 28 tiles in a row
0CA6B                           sub_Draw28HorizontalTiles:
0CA6B A2 1C                         LDX #28
0CA6D                               -
0CA6D 8D 07 20                          STA PPU_DATA
0CA70 CA                                DEX
0CA71 D0 FA                         BNE -
0CA73 60                            RTS0CA74                           .include "game/subroutine/LoadIntroScreen.asm"
0CA74                           sub_LoadIntroScreen:
0CA74                           
0CA74                               ;; Load intro palette
0CA74 2C 02 20                      BIT PPU_STATUS
0CA77 A9 3F                         LDA #$3F
0CA79 8D 06 20                      STA PPU_ADDR
0CA7C A9 00                         LDA #$00
0CA7E 8D 06 20                      STA PPU_ADDR
0CA81 A2 00                         LDX #$00
0CA83                               -
0CA83 BD 2A CB                          LDA tbl_IntroScreenPalette,x
0CA86 8D 07 20                          STA PPU_DATA
0CA89 E8                                INX
0CA8A E0 20                             CPX #$20
0CA8C D0 F5                         BNE -
0CA8E                               
0CA8E                               ;; Put ball in the middle
0CA8E A9 7C                         LDA #$7C
0CA90 85 17                         STA ball_xpos_hi
0CA92 85 19                         STA ball_ypos_hi
0CA94                           
0CA94                               ;; Clear the screen
0CA94 20 95 C3                      JSR sub_ClearScreen
0CA97                           
0CA97                               ;; Set up intro screen draw loop
0CA97 A2 00                         LDX #$00
0CA99                           
0CA99                           -loop_IntroScreenData:
0CA99                           
0CA99                               ;; Get current byte from intro screen data
0CA99 BD 52 CB                      LDA tbl_IntroScreenData,x
0CA9C                           
0CA9C                               ;; If current byte is #$3F, we're done drawing.
0CA9C C9 3F                         CMP #$3F
0CA9E D0 03                         BNE +
0CAA0 4C ED CA                          JMP +goToEndIntroScreen
0CAA3                               +
0CAA3                           
0CAA3                               ;; If highest bits are %11, draw a plain tile
0CAA3 29 C0                         AND #%11000000
0CAA5 D0 03                         BNE +
0CAA7 4C CD CA                          JMP +drawTile
0CAAA                               +
0CAAA                               
0CAAA                               ;; If highest bits are %01, set the PPU address
0CAAA                               ;; If not, draw two logo tiles
0CAAA C9 40                         CMP #%01000000
0CAAC D0 03                         BNE +drawLogo
0CAAE 4C D7 CA                          JMP +setPpuAddr
0CAB1                           
0CAB1                           +drawLogo:
0CAB1                               ;; Get bits 0-2 and store in a temp variable
0CAB1 BD 52 CB                      LDA tbl_IntroScreenData,x
0CAB4 29 07                         AND #%00000111
0CAB6 85 00                         STA temp
0CAB8                               
0CAB8                               ;; Get bits 3-5, shift over to get a value from 0-7
0CAB8 BD 52 CB                      LDA tbl_IntroScreenData,x
0CABB 4A                            LSR
0CABC 4A                            LSR
0CABD 4A                            LSR
0CABE 29 07                         AND #%00000111
0CAC0                               
0CAC0                               ;; Draw the tile that corresponds with that value
0CAC0 A8                            TAY
0CAC1 20 78 C4                      JSR sub_drawIntroScreenLogoTile
0CAC4                               
0CAC4                               ;; Do the same for the value stored in temp
0CAC4 A4 00                         LDY temp
0CAC6 20 78 C4                      JSR sub_drawIntroScreenLogoTile
0CAC9                           
0CAC9                               ;; Next byte please
0CAC9 E8                            INX
0CACA 4C 99 CA                      JMP -loop_IntroScreenData
0CACD                           
0CACD                           +drawTile:
0CACD                               ;; Just draw the tile value on screen
0CACD BD 52 CB                      LDA tbl_IntroScreenData,x
0CAD0 8D 07 20                      STA PPU_DATA
0CAD3                               
0CAD3                               ;; Next byte please
0CAD3 E8                            INX
0CAD4 4C 99 CA                      JMP -loop_IntroScreenData
0CAD7                           
0CAD7                           
0CAD7                           +setPpuAddr:
0CAD7                               ;; Reset the PPU latch
0CAD7 2C 02 20                      BIT PPU_STATUS
0CADA                               
0CADA                               ;; Sanitize and write the high byte of the PPU address
0CADA BD 52 CB                      LDA tbl_IntroScreenData,x
0CADD 29 3F                         AND #%00111111
0CADF 8D 06 20                      STA PPU_ADDR
0CAE2                           
0CAE2                               ;; Write the low byte of the PPU address
0CAE2 E8                            INX
0CAE3 BD 52 CB                      LDA tbl_IntroScreenData,x
0CAE6 8D 06 20                      STA PPU_ADDR
0CAE9                               
0CAE9                               ;; PPU has been set up to draw tiles at the correct spot now.
0CAE9                               
0CAE9                               ;; Next byte please.
0CAE9 E8                            INX
0CAEA 4C 99 CA                      JMP -loop_IntroScreenData
0CAED                           
0CAED                           +goToEndIntroScreen:
0CAED                           
0CAED                               ;; To color the 1.LEVEL: line green, we need to update two
0CAED                               ;; values in the PPU attribute data.
0CAED 2C 02 20                      BIT PPU_STATUS
0CAF0 A9 23                         LDA #$23
0CAF2 8D 06 20                      STA PPU_ADDR
0CAF5 A9 CB                         LDA #$CB
0CAF7 8D 06 20                      STA PPU_ADDR
0CAFA A9 0A                         LDA #%00001010
0CAFC 8D 07 20                      STA PPU_DATA
0CAFF 8D 07 20                      STA PPU_DATA
0CB02                           
0CB02 60                            RTS
0CB03                           
0CB03                           .include "game/subroutine/LoadWinScreen.asm"
0CB03                           sub_LoadWinScreen:
0CB03 60                            RTS
0CB04                           
0CB04                           .include "game/subroutine/WriteByteToPPU.asm"
0CB04                           sub_WriteByteToPPUBuffer:
0CB04                           
0CB04                               ;; Prevent updating until full 3-byte buffer is filled,
0CB04                               ;; so that graphics won't glitch out if NMI happens during
0CB04                               ;; updating the buffer
0CB04 A9 00                         LDA #$00
0CB06 85 2F                         STA ppu_buffer_update
0CB08                           
0CB08                               ;; Check if buffer full; if so, wait a frame and force update
0CB08 A4 30                         LDY ppu_buffer_pointer
0CB0A C0 30                         CPY #$30
0CB0C D0 05                         BNE +
0CB0E E6 2F                             INC ppu_buffer_update
0CB10 20 8F C3                          JSR sub_WaitForVBlank
0CB13                               +
0CB13                           
0CB13                               ;; Add ppu_addr high byte to buffer
0CB13 A5 00                         LDA temp
0CB15 99 00 03                      STA ppu_buffer,y
0CB18                           
0CB18                               ;; Add ppu_addr low byte to buffer
0CB18 C8                            INY
0CB19 A5 01                         LDA temp+1
0CB1B 99 00 03                      STA ppu_buffer,y
0CB1E                           
0CB1E                               ;; Add ppu_data to buffer
0CB1E C8                            INY
0CB1F A5 02                         LDA temp+2
0CB21 99 00 03                      STA ppu_buffer,y
0CB24                           
0CB24                               ;; Update buffer pointer
0CB24 C8                            INY
0CB25 84 30                         STY ppu_buffer_pointer
0CB27                           
0CB27                               ;; Tell NMI to update next round
0CB27 E6 2F                         INC ppu_buffer_update
0CB29                           
0CB29                               ;; Return
0CB29 60                            RTS0CB2A                           
0CB2A                           
0CB2A                           ;; LUTs
0CB2A                           .include "game/include/tables.asm"
0CB2A                           
0CB2A                           ;; Initial screen palette
0CB2A                           tbl_IntroScreenPalette:
0CB2A 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CB2E 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CB32 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CB36 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CB3A                           
0CB3A 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CB3E 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CB42 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CB46 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CB4A                           
0CB4A                           
0CB4A                           ;; Intro: mapping logo index to chr tile
0CB4A                           tbl_IntroScreenLogoChr:
0CB4A 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CB52                           
0CB52                           
0CB52                           ;; Intro screen data
0CB52                           tbl_IntroScreenData:
0CB52                           
0CB52                               ;; Set PPU address $20AC and draw
0CB52 60 AC                         .db #$60, #$AC
0CB54 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CB5C                           
0CB5C                               ;; Set PPU address $20CF and draw
0CB5C 60 CF                         .db #$60, #$CF
0CB5E 01 02                         .db #_0, #_1
0CB60                               
0CB60                               ;; Set PPU address $2122 and draw
0CB60 61 22                         .db #$61, #$22
0CB62 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CB69 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CB6F 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CB77 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CB7C                               
0CB7C                               ;; Set PPU address $2147 and draw
0CB7C 61 47                         .db #$61, #$47
0CB7E 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CB85 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CB89 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CB8F 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CB95                               
0CB95                               ;; Set PPU address $218B and draw
0CB95 61 8B                         .db #$61, #$8B
0CB97 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CB9D 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CBA2                               
0CBA2                               ;; Set PPU address $21E6 and draw
0CBA2 61 E6                         .db #$61, #$E6
0CBA4 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CBAC 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CBB0 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CBB7                               
0CBB7                               ;; Set PPU address $222D and draw
0CBB7 62 2D                         .db #$62, #$2D
0CBB9 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CBBF                               
0CBBF                               ;; Set PPU address $2281
0CBBF 62 81                         .db #$62, #$81
0CBC1                               
0CBC1                               ;; Draw the Crillion logo
0CBC1 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CBC5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBC9 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CBCD E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CBD1                               
0CBD1 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CBD5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBD9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CBDD D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CBE1                               
0CBE1 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CBE5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBE9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CBED D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CBF1                           
0CBF1 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CBF5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBF9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CBFD D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC01                               
0CC01 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CC05 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC09 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC0D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC11                           
0CC11 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CC15 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CC19 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CC1D F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CC20                           
0CC20                               ;; End of intro
0CC20 3F                            .db #$3F
0CC21                           
0CC21                           
0CC21                           ;; Animation frames table
0CC21                           .include "game/include/table/animation_frames.asm"
0CC21                           ;; CHR tile-id's per slide of explosion
0CC21                           explosion_slide0:
0CC21 00 00 00                      .db #$00, #$00, #$00
0CC24 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CC27 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CC2A                           
0CC2A                           explosion_slide1:
0CC2A 00 00 00                      .db #$00, #$00, #$00
0CC2D 29 2A 2B                      .db #$29, #$2A, #$2B
0CC30 39 3A 3B                      .db #$39, #$3A, #$3B
0CC33                           
0CC33                           explosion_slide2:
0CC33 16 00 00                      .db #$16, #$00, #$00
0CC36 26 27 28                      .db #$26, #$27, #$28
0CC39 36 37 38                      .db #$36, #$37, #$38
0CC3C                           
0CC3C                           explosion_slide3:
0CC3C 00 14 15                      .db #$00, #$14, #$15
0CC3F 23 24 25                      .db #$23, #$24, #$25
0CC42 33 34 35                      .db #$33, #$34, #$35
0CC45                           
0CC45                           explosion_slide4:
0CC45 10 11 12                      .db #$10, #$11, #$12
0CC48 20 21 22                      .db #$20, #$21, #$22
0CC4B 30 31 32                      .db #$30, #$31, #$32
0CC4E                           
0CC4E                           ;; High and low bytes of animation slides
0CC4E                           explosion_anim_hi:
0CC4E CC                            .db >#explosion_slide0
0CC4F CC                            .db >#explosion_slide1
0CC50 CC                            .db >#explosion_slide2
0CC51 CC                            .db >#explosion_slide3
0CC52 CC                            .db >#explosion_slide4
0CC53 CC                            .db >#explosion_slide4
0CC54 CC                            .db >#explosion_slide3
0CC55 CC                            .db >#explosion_slide2
0CC56 CC                            .db >#explosion_slide1
0CC57 CC                            .db >#explosion_slide0
0CC58                           
0CC58                           explosion_anim_lo:
0CC58 21                            .db <#explosion_slide0
0CC59 2A                            .db <#explosion_slide1
0CC5A 33                            .db <#explosion_slide2
0CC5B 3C                            .db <#explosion_slide3
0CC5C 45                            .db <#explosion_slide4
0CC5D 45                            .db <#explosion_slide4
0CC5E 3C                            .db <#explosion_slide3
0CC5F 33                            .db <#explosion_slide2
0CC60 2A                            .db <#explosion_slide1
0CC61 21                            .db <#explosion_slide0
0CC62                           
0CC62                           
0CC62                           
0CC62                           ;; Ball palette color table (CBRYGM)
0CC62                           tbl_BallColorDark:
0CC62 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CC68                            
0CC68                           tbl_BallColorLight:
0CC68 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CC6E                           
0CC6E                               
0CC6E                           ;; Screen mode drawing routine addresses
0CC6E                           tbl_LoadScreenHi:
0CC6E CA C6 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CC71                           
0CC71                           tbl_LoadScreenLo:
0CC71 74 E3 03                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CC74                           
0CC74                           
0CC74                           ;; Level data
0CC74                           .include "game/include/table/level_data.asm"
0CC74                           lvl_layout_01:
0CC74 61 21                         .db #$61, #%00100001
0CC76 52 61                         .db #$52, #%01100001
0CC78 43 65                         .db #$43, #%01100101
0CC7A 83 05                         .db #$83, #%00000101
0CC7C 93 15                         .db #$93, #%00010101
0CC7E 34 7A                         .db #$34, #%01111010
0CC80 74 7A                         .db #$74, #%01111010
0CC82 35 7A                         .db #$35, #%01111010
0CC84 75 7A                         .db #$75, #%01111010
0CC86 46 65                         .db #$46, #%01100101
0CC88 86 25                         .db #$86, #%00100101
0CC8A 57 61                         .db #$57, #%01100001
0CC8C 68 21                         .db #$68, #%00100001
0CC8E FF                            .db #LEVEL_END
0CC8F                           
0CC8F                           lvl_layout_02:
0CC8F C0 0A                         .db #$C0, #%00001010
0CC91 11 15                         .db #$11, #%00010101
0CC93 21 62                         .db #$21, #%01100010
0CC95 61 62                         .db #$61, #%01100010
0CC97 A1 42                         .db #$A1, #%01000010
0CC99 12 67                         .db #$12, #%01100111
0CC9B 52 67                         .db #$52, #%01100111
0CC9D 92 67                         .db #$92, #%01100111
0CC9F C3 0D                         .db #$C3, #%00001101
0CCA1 14 11                         .db #$14, #%00010001
0CCA3 24 65                         .db #$24, #%01100101
0CCA5 64 65                         .db #$64, #%01100101
0CCA7 A4 45                         .db #$A4, #%01000101
0CCA9 15 67                         .db #$15, #%01100111
0CCAB 55 67                         .db #$55, #%01100111
0CCAD 95 67                         .db #$95, #%01100111
0CCAF 17 12                         .db #$17, #%00010010
0CCB1 27 61                         .db #$27, #%01100001
0CCB3 67 61                         .db #$67, #%01100001
0CCB5 A7 41                         .db #$A7, #%01000001
0CCB7 38 7A                         .db #$38, #%01111010
0CCB9 98 5A                         .db #$98, #%01011010
0CCBB 18 27                         .db #$18, #%00100111
0CCBD 48 27                         .db #$48, #%00100111
0CCBF 78 27                         .db #$78, #%00100111
0CCC1 C8 07                         .db #$C8, #%00000111
0CCC3 FF                            .db #LEVEL_END
0CCC4                           
0CCC4                           lvl_layout_03:
0CCC4 00 7A                         .db #$00, #%01111010
0CCC6 40 7A                         .db #$40, #%01111010
0CCC8 80 7A                         .db #$80, #%01111010
0CCCA C0 1A                         .db #$C0, #%00011010
0CCCC 10 A1                         .db #$10, #%10100001
0CCCE 13 E1                         .db #$13, #%11100001
0CCD0 17 C1                         .db #$17, #%11000001
0CCD2 30 C1                         .db #$30, #%11000001
0CCD4 34 C1                         .db #$34, #%11000001
0CCD6 38 A1                         .db #$38, #%10100001
0CCD8 50 E1                         .db #$50, #%11100001
0CCDA 55 81                         .db #$55, #%10000001
0CCDC 57 C1                         .db #$57, #%11000001
0CCDE 70 C1                         .db #$70, #%11000001
0CCE0 73 A1                         .db #$73, #%10100001
0CCE2 76 E1                         .db #$76, #%11100001
0CCE4 90 E1                         .db #$90, #%11100001
0CCE6 95 81                         .db #$95, #%10000001
0CCE8 97 C1                         .db #$97, #%11000001
0CCEA B0 C1                         .db #$B0, #%11000001
0CCEC B4 C1                         .db #$B4, #%11000001
0CCEE B8 A1                         .db #$B8, #%10100001
0CCF0 D0 A1                         .db #$D0, #%10100001
0CCF2 D3 E1                         .db #$D3, #%11100001
0CCF4 D7 C1                         .db #$D7, #%11000001
0CCF6 FF                            .db #LEVEL_END
0CCF7                           
0CCF7                           lvl_layout_04:
0CCF7 00 4C                         .db #$00, #%01001100
0CCF9 40 6C                         .db #$40, #%01101100
0CCFB 80 4C                         .db #$80, #%01001100
0CCFD 81 AC                         .db #$81, #%10101100
0CCFF C1 2C                         .db #$C1, #%00101100
0CD01 02 6C                         .db #$02, #%01101100
0CD03 42 CC                         .db #$42, #%11001100
0CD05 62 EC                         .db #$62, #%11101100
0CD07 A2 CC                         .db #$A2, #%11001100
0CD09 C3 CC                         .db #$C3, #%11001100
0CD0B 04 4C                         .db #$04, #%01001100
0CD0D 84 2C                         .db #$84, #%00101100
0CD0F 25 AC                         .db #$25, #%10101100
0CD11 85 AC                         .db #$85, #%10101100
0CD13 06 AC                         .db #$06, #%10101100
0CD15 36 CC                         .db #$36, #%11001100
0CD17 56 CC                         .db #$56, #%11001100
0CD19 66 EC                         .db #$66, #%11101100
0CD1B 96 6C                         .db #$96, #%01101100
0CD1D C7 AC                         .db #$C7, #%10101100
0CD1F 08 2C                         .db #$08, #%00101100
0CD21 78 6C                         .db #$78, #%01101100
0CD23 D8 0C                         .db #$D8, #%00001100
0CD25 30 A1                         .db #$30, #%10100001
0CD27 B0 21                         .db #$B0, #%00100001
0CD29 01 41                         .db #$01, #%01000001
0CD2B 41 61                         .db #$41, #%01100001
0CD2D 91 A1                         .db #$91, #%10100001
0CD2F A1 21                         .db #$A1, #%00100001
0CD31 52 C1                         .db #$52, #%11000001
0CD33 72 E1                         .db #$72, #%11100001
0CD35 B2 C1                         .db #$B2, #%11000001
0CD37 C2 21                         .db #$C2, #%00100001
0CD39 03 41                         .db #$03, #%01000001
0CD3B 33 C1                         .db #$33, #%11000001
0CD3D 83 21                         .db #$83, #%00100001
0CD3F D3 E1                         .db #$D3, #%11100001
0CD41 05 21                         .db #$05, #%00100001
0CD43 45 E1                         .db #$45, #%11100001
0CD45 A5 21                         .db #$A5, #%00100001
0CD47 16 A1                         .db #$16, #%10100001
0CD49 76 A1                         .db #$76, #%10100001
0CD4B 27 A1                         .db #$27, #%10100001
0CD4D 57 01                         .db #$57, #%00000001
0CD4F 87 41                         .db #$87, #%01000001
0CD51 B7 A1                         .db #$B7, #%10100001
0CD53 19 21                         .db #$19, #%00100001
0CD55 39 41                         .db #$39, #%01000001
0CD57 89 41                         .db #$89, #%01000001
0CD59 C9 21                         .db #$C9, #%00100001
0CD5B D0 1A                         .db #$D0, #%00011010
0CD5D 55 1A                         .db #$55, #%00011010
0CD5F 95 1A                         .db #$95, #%00011010
0CD61 D7 1A                         .db #$D7, #%00011010
0CD63 09 1A                         .db #$09, #%00011010
0CD65 79 1A                         .db #$79, #%00011010
0CD67 FF                            .db #LEVEL_END
0CD68                           
0CD68                           lvl_layout_05:
0CD68 40 0A                         .db #$40, #%00001010
0CD6A 70 1A                         .db #$70, #%00011010
0CD6C B0 42                         .db #$B0, #%01000010
0CD6E 41 A7                         .db #$41, #%10100111
0CD70 B1 22                         .db #$B1, #%00100010
0CD72 D1 15                         .db #$D1, #%00010101
0CD74 22 0A                         .db #$22, #%00001010
0CD76 52 05                         .db #$52, #%00000101
0CD78 B2 42                         .db #$B2, #%01000010
0CD7A 03 27                         .db #$03, #%00100111
0CD7C 33 67                         .db #$33, #%01100111
0CD7E 73 67                         .db #$73, #%01100111
0CD80 B3 47                         .db #$B3, #%01000111
0CD82 05 E5                         .db #$05, #%11100101
0CD84 25 A5                         .db #$25, #%10100101
0CD86 35 25                         .db #$35, #%00100101
0CD88 65 45                         .db #$65, #%01000101
0CD8A A5 45                         .db #$A5, #%01000101
0CD8C 46 E5                         .db #$46, #%11100101
0CD8E 66 E5                         .db #$66, #%11100101
0CD90 86 E5                         .db #$86, #%11100101
0CD92 A6 E2                         .db #$A6, #%11100010
0CD94 C6 E5                         .db #$C6, #%11100101
0CD96 27 25                         .db #$27, #%00100101
0CD98 77 05                         .db #$77, #%00000101
0CD9A B7 02                         .db #$B7, #%00000010
0CD9C 09 05                         .db #$09, #%00000101
0CD9E 79 05                         .db #$79, #%00000101
0CDA0 B9 02                         .db #$B9, #%00000010
0CDA2 FF                            .db #LEVEL_END
0CDA3                           
0CDA3                           lvl_layout_06:
0CDA3 00 03                         .db #$00, #%00000011
0CDA5 20 03                         .db #$20, #%00000011
0CDA7 40 03                         .db #$40, #%00000011
0CDA9 A0 03                         .db #$A0, #%00000011
0CDAB C0 03                         .db #$C0, #%00000011
0CDAD 11 03                         .db #$11, #%00000011
0CDAF 31 03                         .db #$31, #%00000011
0CDB1 51 03                         .db #$51, #%00000011
0CDB3 91 03                         .db #$91, #%00000011
0CDB5 B1 03                         .db #$B1, #%00000011
0CDB7 D1 03                         .db #$D1, #%00000011
0CDB9 02 03                         .db #$02, #%00000011
0CDBB 22 03                         .db #$22, #%00000011
0CDBD 42 03                         .db #$42, #%00000011
0CDBF A2 03                         .db #$A2, #%00000011
0CDC1 C2 03                         .db #$C2, #%00000011
0CDC3 13 03                         .db #$13, #%00000011
0CDC5 33 03                         .db #$33, #%00000011
0CDC7 53 03                         .db #$53, #%00000011
0CDC9 93 03                         .db #$93, #%00000011
0CDCB B3 03                         .db #$B3, #%00000011
0CDCD D3 03                         .db #$D3, #%00000011
0CDCF 04 03                         .db #$04, #%00000011
0CDD1 24 03                         .db #$24, #%00000011
0CDD3 44 03                         .db #$44, #%00000011
0CDD5 A4 03                         .db #$A4, #%00000011
0CDD7 C4 03                         .db #$C4, #%00000011
0CDD9 15 03                         .db #$15, #%00000011
0CDDB 35 03                         .db #$35, #%00000011
0CDDD 55 03                         .db #$55, #%00000011
0CDDF 95 03                         .db #$95, #%00000011
0CDE1 B5 03                         .db #$B5, #%00000011
0CDE3 D5 03                         .db #$D5, #%00000011
0CDE5 06 03                         .db #$06, #%00000011
0CDE7 26 03                         .db #$26, #%00000011
0CDE9 46 03                         .db #$46, #%00000011
0CDEB A6 03                         .db #$A6, #%00000011
0CDED C6 03                         .db #$C6, #%00000011
0CDEF 17 03                         .db #$17, #%00000011
0CDF1 37 03                         .db #$37, #%00000011
0CDF3 57 03                         .db #$57, #%00000011
0CDF5 97 03                         .db #$97, #%00000011
0CDF7 B7 03                         .db #$B7, #%00000011
0CDF9 D7 03                         .db #$D7, #%00000011
0CDFB 08 03                         .db #$08, #%00000011
0CDFD 28 03                         .db #$28, #%00000011
0CDFF 48 03                         .db #$48, #%00000011
0CE01 A8 03                         .db #$A8, #%00000011
0CE03 C8 03                         .db #$C8, #%00000011
0CE05 19 03                         .db #$19, #%00000011
0CE07 39 03                         .db #$39, #%00000011
0CE09 59 03                         .db #$59, #%00000011
0CE0B 99 03                         .db #$99, #%00000011
0CE0D B9 03                         .db #$B9, #%00000011
0CE0F D9 03                         .db #$D9, #%00000011
0CE11 60 4B                         .db #$60, #%01001011
0CE13 71 CB                         .db #$71, #%11001011
0CE15 62 4B                         .db #$62, #%01001011
0CE17 64 4B                         .db #$64, #%01001011
0CE19 75 CB                         .db #$75, #%11001011
0CE1B 66 4B                         .db #$66, #%01001011
0CE1D 68 4B                         .db #$68, #%01001011
0CE1F 79 0B                         .db #$79, #%00001011
0CE21 70 03                         .db #$70, #%00000011
0CE23 72 03                         .db #$72, #%00000011
0CE25 74 03                         .db #$74, #%00000011
0CE27 76 03                         .db #$76, #%00000011
0CE29 78 03                         .db #$78, #%00000011
0CE2B FF                            .db #LEVEL_END
0CE2C                           
0CE2C                           lvl_layout_07:
0CE2C 00 11                         .db #$00, #%00010001
0CE2E 01 FA                         .db #$01, #%11111010
0CE30 12 BA                         .db #$12, #%10111010
0CE32 23 DA                         .db #$23, #%11011010
0CE34 34 FA                         .db #$34, #%11111010
0CE36 05 DA                         .db #$05, #%11011010
0CE38 15 FA                         .db #$15, #%11111010
0CE3A 45 BA                         .db #$45, #%10111010
0CE3C 56 DA                         .db #$56, #%11011010
0CE3E 27 BA                         .db #$27, #%10111010
0CE40 67 DA                         .db #$67, #%11011010
0CE42 38 3A                         .db #$38, #%00111010
0CE44 78 BA                         .db #$78, #%10111010
0CE46 09 3A                         .db #$09, #%00111010
0CE48 39 3A                         .db #$39, #%00111010
0CE4A 89 1A                         .db #$89, #%00011010
0CE4C B0 01                         .db #$B0, #%00000001
0CE4E D0 01                         .db #$D0, #%00000001
0CE50 A1 01                         .db #$A1, #%00000001
0CE52 C1 11                         .db #$C1, #%00010001
0CE54 B2 01                         .db #$B2, #%00000001
0CE56 D2 01                         .db #$D2, #%00000001
0CE58 A3 01                         .db #$A3, #%00000001
0CE5A C3 01                         .db #$C3, #%00000001
0CE5C B4 01                         .db #$B4, #%00000001
0CE5E D4 01                         .db #$D4, #%00000001
0CE60 A5 01                         .db #$A5, #%00000001
0CE62 C5 01                         .db #$C5, #%00000001
0CE64 B6 01                         .db #$B6, #%00000001
0CE66 D6 01                         .db #$D6, #%00000001
0CE68 A7 01                         .db #$A7, #%00000001
0CE6A C7 01                         .db #$C7, #%00000001
0CE6C FF                            .db #LEVEL_END
0CE6D                           
0CE6D                           lvl_layout_08:
0CE6D 40 B5                         .db #$40, #%10110101
0CE6F 31 0D                         .db #$31, #%00001101
0CE71 61 10                         .db #$61, #%00010000
0CE73 42 C7                         .db #$42, #%11000111
0CE75 52 67                         .db #$52, #%01100111
0CE77 63 C7                         .db #$63, #%11000111
0CE79 83 E7                         .db #$83, #%11100111
0CE7B 05 07                         .db #$05, #%00000111
0CE7D 15 3A                         .db #$15, #%00111010
0CE7F 07 63                         .db #$07, #%01100011
0CE81 27 13                         .db #$27, #%00010011
0CE83 38 A5                         .db #$38, #%10100101
0CE85 09 14                         .db #$09, #%00010100
0CE87 19 05                         .db #$19, #%00000101
0CE89 D0 E0                         .db #$D0, #%11100000
0CE8B C2 A0                         .db #$C2, #%10100000
0CE8D B3 E0                         .db #$B3, #%11100000
0CE8F D5 E0                         .db #$D5, #%11100000
0CE91 C6 E0                         .db #$C6, #%11100000
0CE93 B0 C4                         .db #$B0, #%11000100
0CE95 C0 A4                         .db #$C0, #%10100100
0CE97 D1 A4                         .db #$D1, #%10100100
0CE99 C4 24                         .db #$C4, #%00100100
0CE9B C5 04                         .db #$C5, #%00000100
0CE9D B7 44                         .db #$B7, #%01000100
0CE9F B8 A4                         .db #$B8, #%10100100
0CEA1 D9 05                         .db #$D9, #%00000101
0CEA3 FF                            .db #LEVEL_END
0CEA4                           
0CEA4                           lvl_layout_09:
0CEA4 81 04                         .db #$81, #%00000100
0CEA6 D1 04                         .db #$D1, #%00000100
0CEA8 32 C4                         .db #$32, #%11000100
0CEAA A2 C4                         .db #$A2, #%11000100
0CEAC C2 24                         .db #$C2, #%00100100
0CEAE 13 24                         .db #$13, #%00100100
0CEB0 53 04                         .db #$53, #%00000100
0CEB2 C3 27                         .db #$C3, #%00100111
0CEB4 15 6C                         .db #$15, #%01101100
0CEB6 55 6C                         .db #$55, #%01101100
0CEB8 95 6C                         .db #$95, #%01101100
0CEBA D5 0C                         .db #$D5, #%00001100
0CEBC 27 C7                         .db #$27, #%11000111
0CEBE 47 C7                         .db #$47, #%11000111
0CEC0 67 C7                         .db #$67, #%11000111
0CEC2 87 C7                         .db #$87, #%11000111
0CEC4 A7 C7                         .db #$A7, #%11000111
0CEC6 C7 C7                         .db #$C7, #%11000111
0CEC8 08 13                         .db #$08, #%00010011
0CECA 28 15                         .db #$28, #%00010101
0CECC 48 12                         .db #$48, #%00010010
0CECE 68 15                         .db #$68, #%00010101
0CED0 88 11                         .db #$88, #%00010001
0CED2 A8 10                         .db #$A8, #%00010000
0CED4 C8 14                         .db #$C8, #%00010100
0CED6 09 07                         .db #$09, #%00000111
0CED8 19 03                         .db #$19, #%00000011
0CEDA 39 05                         .db #$39, #%00000101
0CEDC 59 02                         .db #$59, #%00000010
0CEDE 79 05                         .db #$79, #%00000101
0CEE0 99 01                         .db #$99, #%00000001
0CEE2 B9 00                         .db #$B9, #%00000000
0CEE4 D9 04                         .db #$D9, #%00000100
0CEE6 FF                            .db #LEVEL_END
0CEE7                           
0CEE7                           lvl_layout_10:
0CEE7 00 02                         .db #$00, #%00000010
0CEE9 10 C9                         .db #$10, #%11001001
0CEEB 50 C9                         .db #$50, #%11001001
0CEED 90 C9                         .db #$90, #%11001001
0CEEF D0 C9                         .db #$D0, #%11001001
0CEF1 31 C9                         .db #$31, #%11001001
0CEF3 71 C9                         .db #$71, #%11001001
0CEF5 B1 C9                         .db #$B1, #%11001001
0CEF7 13 C9                         .db #$13, #%11001001
0CEF9 53 C9                         .db #$53, #%11001001
0CEFB 93 C9                         .db #$93, #%11001001
0CEFD D3 C9                         .db #$D3, #%11001001
0CEFF 34 C9                         .db #$34, #%11001001
0CF01 74 C9                         .db #$74, #%11001001
0CF03 B4 C9                         .db #$B4, #%11001001
0CF05 16 C9                         .db #$16, #%11001001
0CF07 56 C9                         .db #$56, #%11001001
0CF09 96 C9                         .db #$96, #%11001001
0CF0B D6 C9                         .db #$D6, #%11001001
0CF0D 37 C9                         .db #$37, #%11001001
0CF0F 77 C9                         .db #$77, #%11001001
0CF11 B7 C9                         .db #$B7, #%11001001
0CF13 D8 12                         .db #$D8, #%00010010
0CF15 FF                            .db #LEVEL_END
0CF16                           
0CF16                           lvl_layout_11:
0CF16 00 65                         .db #$00, #%01100101
0CF18 40 45                         .db #$40, #%01000101
0CF1A 50 A7                         .db #$50, #%10100111
0CF1C 80 05                         .db #$80, #%00000101
0CF1E 90 A7                         .db #$90, #%10100111
0CF20 A0 65                         .db #$A0, #%01100101
0CF22 01 43                         .db #$01, #%01000011
0CF24 31 23                         .db #$31, #%00100011
0CF26 61 A7                         .db #$61, #%10100111
0CF28 81 A7                         .db #$81, #%10100111
0CF2A A1 63                         .db #$A1, #%01100011
0CF2C 02 44                         .db #$02, #%01000100
0CF2E 32 44                         .db #$32, #%01000100
0CF30 92 04                         .db #$92, #%00000100
0CF32 A2 64                         .db #$A2, #%01100100
0CF34 03 40                         .db #$03, #%01000000
0CF36 33 40                         .db #$33, #%01000000
0CF38 63 A1                         .db #$63, #%10100001
0CF3A 83 A2                         .db #$83, #%10100010
0CF3C 93 00                         .db #$93, #%00000000
0CF3E A3 60                         .db #$A3, #%01100000
0CF40 04 41                         .db #$04, #%01000001
0CF42 34 41                         .db #$34, #%01000001
0CF44 94 02                         .db #$94, #%00000010
0CF46 A4 62                         .db #$A4, #%01100010
0CF48 05 47                         .db #$05, #%01000111
0CF4A 35 67                         .db #$35, #%01100111
0CF4C 75 0A                         .db #$75, #%00001010
0CF4E 85 47                         .db #$85, #%01000111
0CF50 B5 47                         .db #$B5, #%01000111
0CF52 06 E7                         .db #$06, #%11100111
0CF54 16 5A                         .db #$16, #%01011010
0CF56 26 11                         .db #$26, #%00010001
0CF58 46 13                         .db #$46, #%00010011
0CF5A 56 1A                         .db #$56, #%00011010
0CF5C 66 14                         .db #$66, #%00010100
0CF5E 86 10                         .db #$86, #%00010000
0CF60 96 5A                         .db #$96, #%01011010
0CF62 A6 12                         .db #$A6, #%00010010
0CF64 C6 15                         .db #$C6, #%00010101
0CF66 D6 E7                         .db #$D6, #%11100111
0CF68 FF                            .db #LEVEL_END
0CF69                           
0CF69                           lvl_layout_12:
0CF69 00 00                         .db #$00, #%00000000
0CF6B 50 C0                         .db #$50, #%11000000
0CF6D 80 00                         .db #$80, #%00000000
0CF6F 61 00                         .db #$61, #%00000000
0CF71 22 C0                         .db #$22, #%11000000
0CF73 82 E0                         .db #$82, #%11100000
0CF75 C2 E0                         .db #$C2, #%11100000
0CF77 A3 20                         .db #$A3, #%00100000
0CF79 C3 10                         .db #$C3, #%00010000
0CF7B 04 00                         .db #$04, #%00000000
0CF7D 54 20                         .db #$54, #%00100000
0CF7F 15 0A                         .db #$15, #%00001010
0CF81 25 C0                         .db #$25, #%11000000
0CF83 55 E0                         .db #$55, #%11100000
0CF85 86 20                         .db #$86, #%00100000
0CF87 C6 E0                         .db #$C6, #%11100000
0CF89 C7 A0                         .db #$C7, #%10100000
0CF8B 88 00                         .db #$88, #%00000000
0CF8D 59 00                         .db #$59, #%00000000
0CF8F 89 20                         .db #$89, #%00100000
0CF91 D9 1A                         .db #$D9, #%00011010
0CF93 FF                            .db #LEVEL_END
0CF94                           
0CF94                           lvl_layout_13:
0CF94 10 E0                         .db #$10, #%11100000
0CF96 20 E0                         .db #$20, #%11100000
0CF98 30 E0                         .db #$30, #%11100000
0CF9A 40 40                         .db #$40, #%01000000
0CF9C 80 60                         .db #$80, #%01100000
0CF9E C0 E0                         .db #$C0, #%11100000
0CFA0 D0 E0                         .db #$D0, #%11100000
0CFA2 41 40                         .db #$41, #%01000000
0CFA4 71 60                         .db #$71, #%01100000
0CFA6 52 60                         .db #$52, #%01100000
0CFA8 A2 20                         .db #$A2, #%00100000
0CFAA 43 60                         .db #$43, #%01100000
0CFAC 83 60                         .db #$83, #%01100000
0CFAE 14 74                         .db #$14, #%01110100
0CFB0 54 74                         .db #$54, #%01110100
0CFB2 94 74                         .db #$94, #%01110100
0CFB4 D4 14                         .db #$D4, #%00010100
0CFB6 15 0D                         .db #$15, #%00001101
0CFB8 55 0D                         .db #$55, #%00001101
0CFBA 95 0D                         .db #$95, #%00001101
0CFBC D5 0D                         .db #$D5, #%00001101
0CFBE 26 0D                         .db #$26, #%00001101
0CFC0 46 0D                         .db #$46, #%00001101
0CFC2 66 0D                         .db #$66, #%00001101
0CFC4 86 0D                         .db #$86, #%00001101
0CFC6 A6 0D                         .db #$A6, #%00001101
0CFC8 C6 0D                         .db #$C6, #%00001101
0CFCA 07 10                         .db #$07, #%00010000
0CFCC 37 0D                         .db #$37, #%00001101
0CFCE 77 0D                         .db #$77, #%00001101
0CFD0 B7 0D                         .db #$B7, #%00001101
0CFD2 28 0D                         .db #$28, #%00001101
0CFD4 48 0D                         .db #$48, #%00001101
0CFD6 68 0D                         .db #$68, #%00001101
0CFD8 88 0D                         .db #$88, #%00001101
0CFDA A8 0D                         .db #$A8, #%00001101
0CFDC C8 0D                         .db #$C8, #%00001101
0CFDE 19 0D                         .db #$19, #%00001101
0CFE0 59 0D                         .db #$59, #%00001101
0CFE2 99 0D                         .db #$99, #%00001101
0CFE4 D9 0D                         .db #$D9, #%00001101
0CFE6 FF                            .db #LEVEL_END
0CFE7                           
0CFE7                           lvl_layout_14:
0CFE7 00 67                         .db #$00, #%01100111
0CFE9 40 67                         .db #$40, #%01100111
0CFEB 80 67                         .db #$80, #%01100111
0CFED C0 27                         .db #$C0, #%00100111
0CFEF 01 27                         .db #$01, #%00100111
0CFF1 31 C7                         .db #$31, #%11000111
0CFF3 51 C7                         .db #$51, #%11000111
0CFF5 71 C7                         .db #$71, #%11000111
0CFF7 91 C7                         .db #$91, #%11000111
0CFF9 B1 C7                         .db #$B1, #%11000111
0CFFB D1 07                         .db #$D1, #%00000111
0CFFD 02 E7                         .db #$02, #%11100111
0CFFF 06 E7                         .db #$06, #%11100111
0D001 13 07                         .db #$13, #%00000111
0D003 D3 07                         .db #$D3, #%00000111
0D005 15 07                         .db #$15, #%00000111
0D007 35 07                         .db #$35, #%00000111
0D009 55 07                         .db #$55, #%00000111
0D00B 75 07                         .db #$75, #%00000111
0D00D 95 07                         .db #$95, #%00000111
0D00F B5 07                         .db #$B5, #%00000111
0D011 D5 07                         .db #$D5, #%00000111
0D013 17 07                         .db #$17, #%00000111
0D015 37 C7                         .db #$37, #%11000111
0D017 57 C7                         .db #$57, #%11000111
0D019 77 C7                         .db #$77, #%11000111
0D01B 97 C7                         .db #$97, #%11000111
0D01D B7 C7                         .db #$B7, #%11000111
0D01F D7 07                         .db #$D7, #%00000111
0D021 19 07                         .db #$19, #%00000111
0D023 D9 07                         .db #$D9, #%00000111
0D025 22 4C                         .db #$22, #%01001100
0D027 62 4C                         .db #$62, #%01001100
0D029 A2 4C                         .db #$A2, #%01001100
0D02B 24 0C                         .db #$24, #%00001100
0D02D 44 0C                         .db #$44, #%00001100
0D02F 64 0C                         .db #$64, #%00001100
0D031 84 0C                         .db #$84, #%00001100
0D033 A4 0C                         .db #$A4, #%00001100
0D035 C4 0C                         .db #$C4, #%00001100
0D037 26 0C                         .db #$26, #%00001100
0D039 46 0C                         .db #$46, #%00001100
0D03B 66 0C                         .db #$66, #%00001100
0D03D 86 0C                         .db #$86, #%00001100
0D03F A6 0C                         .db #$A6, #%00001100
0D041 C6 0C                         .db #$C6, #%00001100
0D043 28 4C                         .db #$28, #%01001100
0D045 68 4C                         .db #$68, #%01001100
0D047 A8 4C                         .db #$A8, #%01001100
0D049 32 04                         .db #$32, #%00000100
0D04B 52 04                         .db #$52, #%00000100
0D04D 72 04                         .db #$72, #%00000100
0D04F 92 04                         .db #$92, #%00000100
0D051 B2 04                         .db #$B2, #%00000100
0D053 38 04                         .db #$38, #%00000100
0D055 58 04                         .db #$58, #%00000100
0D057 78 04                         .db #$78, #%00000100
0D059 98 04                         .db #$98, #%00000100
0D05B B8 04                         .db #$B8, #%00000100
0D05D FF                            .db #LEVEL_END
0D05E                           
0D05E                           lvl_layout_15:
0D05E 00 7A                         .db #$00, #%01111010
0D060 40 7A                         .db #$40, #%01111010
0D062 80 7A                         .db #$80, #%01111010
0D064 C0 3A                         .db #$C0, #%00111010
0D066 31 04                         .db #$31, #%00000100
0D068 51 04                         .db #$51, #%00000100
0D06A 81 04                         .db #$81, #%00000100
0D06C A1 04                         .db #$A1, #%00000100
0D06E 05 E4                         .db #$05, #%11100100
0D070 15 64                         .db #$15, #%01100100
0D072 55 64                         .db #$55, #%01100100
0D074 95 64                         .db #$95, #%01100100
0D076 D5 E4                         .db #$D5, #%11100100
0D078 26 04                         .db #$26, #%00000100
0D07A 46 44                         .db #$46, #%01000100
0D07C 76 64                         .db #$76, #%01100100
0D07E C6 04                         .db #$C6, #%00000100
0D080 17 04                         .db #$17, #%00000100
0D082 37 64                         .db #$37, #%01100100
0D084 77 44                         .db #$77, #%01000100
0D086 B7 04                         .db #$B7, #%00000100
0D088 18 64                         .db #$18, #%01100100
0D08A 58 64                         .db #$58, #%01100100
0D08C 98 64                         .db #$98, #%01100100
0D08E FF                            .db #LEVEL_END
0D08F                           
0D08F                           lvl_layout_16:
0D08F 10 E1                         .db #$10, #%11100001
0D091 20 9A                         .db #$20, #%10011010
0D093 30 E1                         .db #$30, #%11100001
0D095 40 E1                         .db #$40, #%11100001
0D097 50 E1                         .db #$50, #%11100001
0D099 60 C1                         .db #$60, #%11000001
0D09B 70 E1                         .db #$70, #%11100001
0D09D 80 E1                         .db #$80, #%11100001
0D09F 90 E1                         .db #$90, #%11100001
0D0A1 A0 61                         .db #$A0, #%01100001
0D0A3 21 C1                         .db #$21, #%11000001
0D0A5 A1 1A                         .db #$A1, #%00011010
0D0A7 B1 41                         .db #$B1, #%01000001
0D0A9 A2 E1                         .db #$A2, #%11100001
0D0AB B2 E1                         .db #$B2, #%11100001
0D0AD C2 1A                         .db #$C2, #%00011010
0D0AF D2 E1                         .db #$D2, #%11100001
0D0B1 63 1A                         .db #$63, #%00011010
0D0B3 C3 C1                         .db #$C3, #%11000001
0D0B5 14 61                         .db #$14, #%01100001
0D0B7 54 61                         .db #$54, #%01100001
0D0B9 94 C1                         .db #$94, #%11000001
0D0BB 15 61                         .db #$15, #%01100001
0D0BD 55 41                         .db #$55, #%01000001
0D0BF 85 1A                         .db #$85, #%00011010
0D0C1 16 41                         .db #$16, #%01000001
0D0C3 46 1A                         .db #$46, #%00011010
0D0C5 56 61                         .db #$56, #%01100001
0D0C7 A6 61                         .db #$A6, #%01100001
0D0C9 17 67                         .db #$17, #%01100111
0D0CB 57 67                         .db #$57, #%01100111
0D0CD 97 67                         .db #$97, #%01100111
0D0CF D7 07                         .db #$D7, #%00000111
0D0D1 28 41                         .db #$28, #%01000001
0D0D3 58 61                         .db #$58, #%01100001
0D0D5 A8 41                         .db #$A8, #%01000001
0D0D7 18 11                         .db #$18, #%00010001
0D0D9 38 11                         .db #$38, #%00010001
0D0DB 98 11                         .db #$98, #%00010001
0D0DD B8 11                         .db #$B8, #%00010001
0D0DF D8 11                         .db #$D8, #%00010001
0D0E1 59 09                         .db #$59, #%00001001
0D0E3 FF                            .db #LEVEL_END
0D0E4                           
0D0E4                           lvl_layout_17:
0D0E4 10 EA                         .db #$10, #%11101010
0D0E6 20 E2                         .db #$20, #%11100010
0D0E8 30 62                         .db #$30, #%01100010
0D0EA 70 02                         .db #$70, #%00000010
0D0EC 80 6A                         .db #$80, #%01101010
0D0EE 90 22                         .db #$90, #%00100010
0D0F0 01 AA                         .db #$01, #%10101010
0D0F2 31 6A                         .db #$31, #%01101010
0D0F4 81 2A                         .db #$81, #%00101010
0D0F6 A1 02                         .db #$A1, #%00000010
0D0F8 C1 02                         .db #$C1, #%00000010
0D0FA D1 0A                         .db #$D1, #%00001010
0D0FC 32 EA                         .db #$32, #%11101010
0D0FE 42 6A                         .db #$42, #%01101010
0D100 62 02                         .db #$62, #%00000010
0D102 92 6A                         .db #$92, #%01101010
0D104 D2 E2                         .db #$D2, #%11100010
0D106 43 1A                         .db #$43, #%00011010
0D108 53 CA                         .db #$53, #%11001010
0D10A 73 02                         .db #$73, #%00000010
0D10C 83 4A                         .db #$83, #%01001010
0D10E B3 CA                         .db #$B3, #%11001010
0D110 C3 EA                         .db #$C3, #%11101010
0D112 04 0A                         .db #$04, #%00001010
0D114 14 A2                         .db #$14, #%10100010
0D116 24 AA                         .db #$24, #%10101010
0D118 44 AA                         .db #$44, #%10101010
0D11A 64 6A                         .db #$64, #%01101010
0D11C 65 6A                         .db #$65, #%01101010
0D11E A5 AA                         .db #$A5, #%10101010
0D120 06 EA                         .db #$06, #%11101010
0D122 16 62                         .db #$16, #%01100010
0D124 66 22                         .db #$66, #%00100010
0D126 86 2A                         .db #$86, #%00101010
0D128 17 42                         .db #$17, #%01000010
0D12A 47 12                         .db #$47, #%00010010
0D12C 57 6A                         .db #$57, #%01101010
0D12E 97 4A                         .db #$97, #%01001010
0D130 A7 02                         .db #$A7, #%00000010
0D132 18 02                         .db #$18, #%00000010
0D134 28 0A                         .db #$28, #%00001010
0D136 38 22                         .db #$38, #%00100010
0D138 68 2A                         .db #$68, #%00101010
0D13A 88 62                         .db #$88, #%01100010
0D13C C8 0A                         .db #$C8, #%00001010
0D13E D8 02                         .db #$D8, #%00000010
0D140 19 2A                         .db #$19, #%00101010
0D142 39 2A                         .db #$39, #%00101010
0D144 69 42                         .db #$69, #%01000010
0D146 99 2A                         .db #$99, #%00101010
0D148 B9 42                         .db #$B9, #%01000010
0D14A FF                            .db #LEVEL_END
0D14B                           
0D14B                           lvl_layout_18:
0D14B 00 12                         .db #$00, #%00010010
0D14D 40 1A                         .db #$40, #%00011010
0D14F 50 11                         .db #$50, #%00010001
0D151 70 1A                         .db #$70, #%00011010
0D153 80 10                         .db #$80, #%00010000
0D155 D0 13                         .db #$D0, #%00010011
0D157 01 1A                         .db #$01, #%00011010
0D159 22 15                         .db #$22, #%00010101
0D15B A2 1A                         .db #$A2, #%00011010
0D15D B2 14                         .db #$B2, #%00010100
0D15F 03 67                         .db #$03, #%01100111
0D161 43 67                         .db #$43, #%01100111
0D163 83 67                         .db #$83, #%01100111
0D165 24 09                         .db #$24, #%00001001
0D167 74 0D                         .db #$74, #%00001101
0D169 C4 0A                         .db #$C4, #%00001010
0D16B 05 A7                         .db #$05, #%10100111
0D16D 45 27                         .db #$45, #%00100111
0D16F 95 27                         .db #$95, #%00100111
0D171 16 C7                         .db #$16, #%11000111
0D173 36 67                         .db #$36, #%01100111
0D175 86 67                         .db #$86, #%01100111
0D177 D6 07                         .db #$D6, #%00000111
0D179 07 A3                         .db #$07, #%10100011
0D17B 27 23                         .db #$27, #%00100011
0D17D 47 C7                         .db #$47, #%11000111
0D17F 57 A0                         .db #$57, #%10100000
0D181 67 A7                         .db #$67, #%10100111
0D183 77 20                         .db #$77, #%00100000
0D185 97 C7                         .db #$97, #%11000111
0D187 A7 A4                         .db #$A7, #%10100100
0D189 B7 A7                         .db #$B7, #%10100111
0D18B C7 24                         .db #$C7, #%00100100
0D18D 28 0B                         .db #$28, #%00001011
0D18F 38 A3                         .db #$38, #%10100011
0D191 78 08                         .db #$78, #%00001000
0D193 88 A3                         .db #$88, #%10100011
0D195 C8 0C                         .db #$C8, #%00001100
0D197 D8 A4                         .db #$D8, #%10100100
0D199 09 43                         .db #$09, #%01000011
0D19B 59 40                         .db #$59, #%01000000
0D19D A9 44                         .db #$A9, #%01000100
0D19F FF                            .db #LEVEL_END
0D1A0                           
0D1A0                           lvl_layout_19:
0D1A0 11 A8                         .db #$11, #%10101000
0D1A2 21 68                         .db #$21, #%01101000
0D1A4 81 28                         .db #$81, #%00101000
0D1A6 B1 48                         .db #$B1, #%01001000
0D1A8 22 48                         .db #$22, #%01001000
0D1AA 62 68                         .db #$62, #%01101000
0D1AC B2 28                         .db #$B2, #%00101000
0D1AE 23 28                         .db #$23, #%00101000
0D1B0 83 28                         .db #$83, #%00101000
0D1B2 B3 28                         .db #$B3, #%00101000
0D1B4 04 E8                         .db #$04, #%11101000
0D1B6 24 08                         .db #$24, #%00001000
0D1B8 44 08                         .db #$44, #%00001000
0D1BA 64 E8                         .db #$64, #%11101000
0D1BC 84 E8                         .db #$84, #%11101000
0D1BE C4 A8                         .db #$C4, #%10101000
0D1C0 D4 E8                         .db #$D4, #%11101000
0D1C2 15 48                         .db #$15, #%01001000
0D1C4 55 C8                         .db #$55, #%11001000
0D1C6 75 C8                         .db #$75, #%11001000
0D1C8 A5 08                         .db #$A5, #%00001000
0D1CA 36 08                         .db #$36, #%00001000
0D1CC B6 08                         .db #$B6, #%00001000
0D1CE 27 48                         .db #$27, #%01001000
0D1D0 97 28                         .db #$97, #%00101000
0D1D2 C7 08                         .db #$C7, #%00001000
0D1D4 09 61                         .db #$09, #%01100001
0D1D6 19 11                         .db #$19, #%00010001
0D1D8 49 61                         .db #$49, #%01100001
0D1DA 89 31                         .db #$89, #%00110001
0D1DC A9 61                         .db #$A9, #%01100001
0D1DE FF                            .db #LEVEL_END
0D1DF                           
0D1DF                           lvl_layout_20:
0D1DF 00 60                         .db #$00, #%01100000
0D1E1 10 1A                         .db #$10, #%00011010
0D1E3 40 A7                         .db #$40, #%10100111
0D1E5 50 20                         .db #$50, #%00100000
0D1E7 70 1A                         .db #$70, #%00011010
0D1E9 80 40                         .db #$80, #%01000000
0D1EB B0 1A                         .db #$B0, #%00011010
0D1ED C0 20                         .db #$C0, #%00100000
0D1EF 01 40                         .db #$01, #%01000000
0D1F1 31 1A                         .db #$31, #%00011010
0D1F3 A1 40                         .db #$A1, #%01000000
0D1F5 D1 1A                         .db #$D1, #%00011010
0D1F7 43 67                         .db #$43, #%01100111
0D1F9 83 47                         .db #$83, #%01000111
0D1FB 44 A7                         .db #$44, #%10100111
0D1FD 54 25                         .db #$54, #%00100101
0D1FF 94 08                         .db #$94, #%00001000
0D201 A4 A7                         .db #$A4, #%10100111
0D203 55 05                         .db #$55, #%00000101
0D205 65 08                         .db #$65, #%00001000
0D207 06 27                         .db #$06, #%00100111
0D209 36 67                         .db #$36, #%01100111
0D20B 76 28                         .db #$76, #%00101000
0D20D A6 27                         .db #$A6, #%00100111
0D20F D6 07                         .db #$D6, #%00000111
0D211 A7 A7                         .db #$A7, #%10100111
0D213 08 60                         .db #$08, #%01100000
0D215 09 60                         .db #$09, #%01100000
0D217 18 A7                         .db #$18, #%10100111
0D219 48 A7                         .db #$48, #%10100111
0D21B 58 47                         .db #$58, #%01000111
0D21D 88 27                         .db #$88, #%00100111
0D21F B8 20                         .db #$B8, #%00100000
0D221 D8 1A                         .db #$D8, #%00011010
0D223 59 15                         .db #$59, #%00010101
0D225 69 60                         .db #$69, #%01100000
0D227 A9 60                         .db #$A9, #%01100000
0D229 FF                            .db #LEVEL_END
0D22A                           
0D22A                           lvl_layout_21:
0D22A 00 13                         .db #$00, #%00010011
0D22C 10 11                         .db #$10, #%00010001
0D22E 20 67                         .db #$20, #%01100111
0D230 60 67                         .db #$60, #%01100111
0D232 A0 47                         .db #$A0, #%01000111
0D234 D0 15                         .db #$D0, #%00010101
0D236 32 63                         .db #$32, #%01100011
0D238 72 05                         .db #$72, #%00000101
0D23A 82 43                         .db #$82, #%01000011
0D23C B2 43                         .db #$B2, #%01000011
0D23E 33 03                         .db #$33, #%00000011
0D240 43 2A                         .db #$43, #%00101010
0D242 63 7A                         .db #$63, #%01111010
0D244 73 2A                         .db #$73, #%00101010
0D246 A3 7A                         .db #$A3, #%01111010
0D248 34 63                         .db #$34, #%01100011
0D24A 74 63                         .db #$74, #%01100011
0D24C B4 43                         .db #$B4, #%01000011
0D24E 06 63                         .db #$06, #%01100011
0D250 46 63                         .db #$46, #%01100011
0D252 86 63                         .db #$86, #%01100011
0D254 C6 C3                         .db #$C6, #%11000011
0D256 07 7A                         .db #$07, #%01111010
0D258 47 7A                         .db #$47, #%01111010
0D25A 67 0A                         .db #$67, #%00001010
0D25C 87 7A                         .db #$87, #%01111010
0D25E 08 13                         .db #$08, #%00010011
0D260 18 43                         .db #$18, #%01000011
0D262 48 63                         .db #$48, #%01100011
0D264 88 63                         .db #$88, #%01100011
0D266 FF                            .db #LEVEL_END
0D267                           
0D267                           lvl_layout_22:
0D267 00 7A                         .db #$00, #%01111010
0D269 40 7A                         .db #$40, #%01111010
0D26B 80 7A                         .db #$80, #%01111010
0D26D C0 3A                         .db #$C0, #%00111010
0D26F 13 67                         .db #$13, #%01100111
0D271 83 A7                         .db #$83, #%10100111
0D273 B3 07                         .db #$B3, #%00000111
0D275 14 07                         .db #$14, #%00000111
0D277 44 07                         .db #$44, #%00000111
0D279 A4 07                         .db #$A4, #%00000111
0D27B 15 A5                         .db #$15, #%10100101
0D27D 45 A5                         .db #$45, #%10100101
0D27F 85 25                         .db #$85, #%00100101
0D281 86 05                         .db #$86, #%00000101
0D283 A6 05                         .db #$A6, #%00000101
0D285 17 11                         .db #$17, #%00010001
0D287 47 A1                         .db #$47, #%10100001
0D289 87 A1                         .db #$87, #%10100001
0D28B B7 A1                         .db #$B7, #%10100001
0D28D 18 41                         .db #$18, #%01000001
0D28F 68 01                         .db #$68, #%00000001
0D291 D8 01                         .db #$D8, #%00000001
0D293 FF                            .db #LEVEL_END
0D294                           
0D294                           lvl_layout_23:
0D294 00 71                         .db #$00, #%01110001
0D296 40 11                         .db #$40, #%00010001
0D298 50 43                         .db #$50, #%01000011
0D29A 80 D1                         .db #$80, #%11010001
0D29C 90 E3                         .db #$90, #%11100011
0D29E A0 63                         .db #$A0, #%01100011
0D2A0 01 63                         .db #$01, #%01100011
0D2A2 41 63                         .db #$41, #%01100011
0D2A4 A1 63                         .db #$A1, #%01100011
0D2A6 02 63                         .db #$02, #%01100011
0D2A8 42 63                         .db #$42, #%01100011
0D2AA 62 11                         .db #$62, #%00010001
0D2AC A2 67                         .db #$A2, #%01100111
0D2AE 04 63                         .db #$04, #%01100011
0D2B0 44 23                         .db #$44, #%00100011
0D2B2 64 D1                         .db #$64, #%11010001
0D2B4 74 E3                         .db #$74, #%11100011
0D2B6 84 F1                         .db #$84, #%11110001
0D2B8 94 E3                         .db #$94, #%11100011
0D2BA A4 C7                         .db #$A4, #%11000111
0D2BC B4 23                         .db #$B4, #%00100011
0D2BE 05 63                         .db #$05, #%01100011
0D2C0 45 23                         .db #$45, #%00100011
0D2C2 06 71                         .db #$06, #%01110001
0D2C4 46 11                         .db #$46, #%00010001
0D2C6 56 E3                         .db #$56, #%11100011
0D2C8 D6 07                         .db #$D6, #%00000111
0D2CA 17 D1                         .db #$17, #%11010001
0D2CC 27 43                         .db #$27, #%01000011
0D2CE 67 D1                         .db #$67, #%11010001
0D2D0 A7 C7                         .db #$A7, #%11000111
0D2D2 C7 A7                         .db #$C7, #%10100111
0D2D4 D7 B3                         .db #$D7, #%10110011
0D2D6 28 43                         .db #$28, #%01000011
0D2D8 78 43                         .db #$78, #%01000011
0D2DA 29 43                         .db #$29, #%01000011
0D2DC 79 43                         .db #$79, #%01000011
0D2DE FF                           .db #LEVEL_END
0D2DF                           
0D2DF                           lvl_layout_24:
0D2DF 02 67                         .db #$02, #%01100111
0D2E1 42 67                         .db #$42, #%01100111
0D2E3 82 67                         .db #$82, #%01100111
0D2E5 05 67                         .db #$05, #%01100111
0D2E7 45 67                         .db #$45, #%01100111
0D2E9 85 67                         .db #$85, #%01100111
0D2EB 08 67                         .db #$08, #%01100111
0D2ED 48 67                         .db #$48, #%01100111
0D2EF 88 67                         .db #$88, #%01100111
0D2F1 30 E7                         .db #$30, #%11100111
0D2F3 70 E7                         .db #$70, #%11100111
0D2F5 B0 E7                         .db #$B0, #%11100111
0D2F7 34 E7                         .db #$34, #%11100111
0D2F9 74 E7                         .db #$74, #%11100111
0D2FB B4 E7                         .db #$B4, #%11100111
0D2FD 20 13                         .db #$20, #%00010011
0D2FF 40 10                         .db #$40, #%00010000
0D301 80 02                         .db #$80, #%00000010
0D303 41 05                         .db #$41, #%00000101
0D305 B1 09                         .db #$B1, #%00001001
0D307 02 09                         .db #$02, #%00001001
0D309 52 0C                         .db #$52, #%00001100
0D30B 13 11                         .db #$13, #%00010001
0D30D 33 04                         .db #$33, #%00000100
0D30F 74 0C                         .db #$74, #%00001100
0D311 B4 08                         .db #$B4, #%00001000
0D313 15 09                         .db #$15, #%00001001
0D315 55 0C                         .db #$55, #%00001100
0D317 95 0C                         .db #$95, #%00001100
0D319 47 03                         .db #$47, #%00000011
0D31B A7 12                         .db #$A7, #%00010010
0D31D 18 15                         .db #$18, #%00010101
0D31F 09 05                         .db #$09, #%00000101
0D321 19 03                         .db #$19, #%00000011
0D323 FF                            .db #LEVEL_END
0D324                           
0D324                           lvl_layout_25:
0D324 00 12                         .db #$00, #%00010010
0D326 10 63                         .db #$10, #%01100011
0D328 60 63                         .db #$60, #%01100011
0D32A A0 07                         .db #$A0, #%00000111
0D32C 01 11                         .db #$01, #%00010001
0D32E A1 02                         .db #$A1, #%00000010
0D330 02 67                         .db #$02, #%01100111
0D332 42 07                         .db #$42, #%00000111
0D334 62 67                         .db #$62, #%01100111
0D336 A2 C7                         .db #$A2, #%11000111
0D338 03 61                         .db #$03, #%01100001
0D33A 43 01                         .db #$43, #%00000001
0D33C 63 61                         .db #$63, #%01100001
0D33E A6 E7                         .db #$A6, #%11100111
0D340 B6 47                         .db #$B6, #%01000111
0D342 C6 01                         .db #$C6, #%00000001
0D344 B7 42                         .db #$B7, #%01000010
0D346 B8 42                         .db #$B8, #%01000010
0D348 C8 0A                         .db #$C8, #%00001010
0D34A 09 7A                         .db #$09, #%01111010
0D34C 49 7A                         .db #$49, #%01111010
0D34E 89 3A                         .db #$89, #%00111010
0D350 B9 42                         .db #$B9, #%01000010
0D352 FF                            .db #LEVEL_END
0D353                           
0D353                           ;; Level layout address pointers
0D353                           tbl_lvl_layout_hi:
0D353 CC CC CC CC CD                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D358 CD CE CE CE CE                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D35D CF CF CF CF D0                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D362 D0 D0 D1 D1 D1                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D367 D2 D2 D2 D2 D3                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D36C                           
0D36C                           tbl_lvl_layout_lo:
0D36C 74 8F C4 F7 68                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D371 A3 2C 6D A4 E7                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D376 16 69 94 E7 5E                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D37B 8F E4 4B A0 DF                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D380 2A 67 94 DF 24                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D385                           
0D385                           ;; Ball start position (#$YX)
0D385                           tbl_lvl_ball_startpos:
0D385 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D38A 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D38F 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D394 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D399 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D39E                               
0D39E                           ;; Ball start direction, color and tile score
0D39E                           ;; #% ccc v tttt
0D39E                           ;;    ||| | ++++-- tile score
0D39E                           ;;    ||| +------- vertical direction, up (0) or down
0D39E                           ;;    +++--------- color (CBRYGM)
0D39E                           tbl_lvl_ball_init:
0D39E 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D3A3 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D3A8 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D3AD 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D3B2 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D3B7                           
0D3B7                           
0D3B7                           
0D3B7                           ;; Helper table to multiply values by 16
0D3B7                           tbl_Times16:
0D3B7 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D3BF 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D3C7                               
0D3C7                           
0D3C7                           ;; Helper table to multiply values by 64
0D3C7                           tbl_Times64:
0D3C7 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D3CB                           
0D3CB                           
0D3CB                           ;; Metatile ID to CHR data mapper
0D3CB                           tbl_GametileTopLeft:
0D3CB 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D3D5                           
0D3D5                           tbl_GametileTopRight:
0D3D5 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D3DF                           
0D3DF                           tbl_GametileBottomLeft:
0D3DF 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D3E9                           
0D3E9                           tbl_GametileBottomRight:
0D3E9 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D3F3                           
0D3F3                           ;; Metatile ID to RAM byte data mapper
0D3F3                           tbl_GameTileRamByte:
0D3F3 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D3F8                           
0D3F8                           ;; HUD text data
0D3F8                           tbl_HudText:
0D3F8 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D400 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D407 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D40F 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D414                           
0D414                           ;; NMI handler
0D414                           NMI:
0D414                               .include "interrupt/nmi.asm"
0D414                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D414                           ;;
0D414                           ;; include/nmi.asm
0D414                           ;;
0D414                           ;; Non-maskable interrupt script. This script is being executed
0D414                           ;; when vBlank hits.
0D414                           ;;
0D414                           ;;
0D414                           
0D414                               ;; Preserve accumulator through stack
0D414 48                            PHA
0D415                           
0D415                               ;; Should NMI be skipped?
0D415 A5 13                         LDA skip_nmi
0D417 F0 03                         BEQ +
0D419 4C A7 D4                          JMP +skip_nmi
0D41C                               +
0D41C                           
0D41C                               ;; When in NMI, skip additional NMI requests
0D41C A9 01                         LDA #$01
0D41E 85 13                         STA skip_nmi
0D420                           
0D420                               ;; Preserve X, Y, and PC through stack
0D420 8A                            TXA
0D421 48                            PHA
0D422 98                            TYA
0D423 48                            PHA
0D424 08                            PHP
0D425                               
0D425                               ;; Check forced NMI skip
0D425 A5 14                         LDA force_skip_nmi
0D427 F0 03                         BEQ +
0D429 4C 98 D4                          JMP +force_skip_nmi
0D42C                               +
0D42C                           
0D42C                               ;; Update PPU mask
0D42C                               ;LDA #$00
0D42C                               ;STA PPU_CTRL
0D42C A5 12                         LDA soft_ppu_mask
0D42E 8D 01 20                      STA PPU_MASK
0D431                               
0D431                               
0D431                               ;; Additional PPU updates go here
0D431                               .include "game/interrupt/nmi.asm"
0D431                           
0D431                               ;; Check if ppu_buffer needs updating
0D431 A5 2F                         LDA ppu_buffer_update
0D433 D0 03                         BNE +
0D435 4C 77 D4                          JMP +no_ppu_buffer_update
0D438                               +
0D438                           
0D438                               ;; Reset ppu control register and mask
0D438 A2 00                         LDX #$00
0D43A 8E 00 20                      STX PPU_CTRL
0D43D 8E 01 20                      STX PPU_MASK
0D440                           
0D440                               ;; Set up loop
0D440                               -
0D440                                   ;; Reset hi/lo latch
0D440 2C 02 20                          BIT PPU_STATUS
0D443                           
0D443                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D443 BD 00 03                          LDA ppu_buffer,x
0D446 8D 06 20                          STA PPU_ADDR
0D449 E8                                INX
0D44A BD 00 03                          LDA ppu_buffer,x
0D44D 8D 06 20                          STA PPU_ADDR
0D450                           
0D450                                   ;; Write ppu_buffer data to PPU_ADDR
0D450 E8                                INX
0D451 BD 00 03                          LDA ppu_buffer,x
0D454 8D 07 20                          STA PPU_DATA
0D457                           
0D457                                   ;; Check if updating is done (eg. X is at pointer)
0D457 E8                                INX
0D458 E4 30                             CPX ppu_buffer_pointer
0D45A F0 03                             BEQ +
0D45C 4C 40 D4                      JMP -
0D45F                           +
0D45F                           
0D45F                               ;; Reset ppu buffer update and pointer
0D45F A9 00                         LDA #$00
0D461 85 2F                         STA ppu_buffer_update
0D463 85 30                         STA ppu_buffer_pointer
0D465                               
0D465                               ;; Reset scrolling position
0D465 8D 05 20                      STA PPU_SCROLL
0D468 8D 05 20                      STA PPU_SCROLL
0D46B                           
0D46B                               ;; Restore ppu control register and mask
0D46B A9 90                         LDA #%10010000
0D46D 8D 00 20                      STA PPU_CTRL
0D470 A5 12                         LDA soft_ppu_mask
0D472 8D 01 20                      STA PPU_MASK
0D475 A9 00                         LDA #$00
0D477                           
0D477                           ;; Continue other NMI stuff
0D477                           +no_ppu_buffer_update:
0D477                           
0D477                               ;; Reset sprite RAM, draw sprites
0D477 8D 03 20                      STA OAM_ADDR
0D47A A9 02                         LDA #$02
0D47C 8D 14 40                      STA OAM_DMA
0D47F                           
0D47F                               ;; Decrease explosion frame counters
0D47F A0 04                         LDY #MAX_ANIMATIONS
0D481 A2 00                         LDX #$00
0D483                               -
0D483 BD 30 03                          LDA explosion_framecounter,x
0D486 F0 03                             BEQ +
0D488 DE 30 03                              DEC explosion_framecounter,x
0D48B                                   +
0D48B E8                                INX
0D48C 88                                DEY
0D48D F0 03                             BEQ +done        
0D48F 4C 83 D4                      JMP -
0D492                           +done:
0D492                               
0D492                               ;; Decrease nudge counter
0D492 A5 33                         LDA nudge_counter
0D494 F0 02                         BEQ +
0D496 C6 33                             DEC nudge_counter
0D498                               +
0D498                           
0D498                           ;; This is what happens when we forced nmi skip
0D498                           +force_skip_nmi:
0D498                           
0D498                               ;; Increase frame counters
0D498 E6 15                         INC frame_counter
0D49A                           
0D49A                               ;; reset ball_update_position
0D49A A9 00                         LDA #$00
0D49C 85 2B                         STA ball_update_position
0D49E                           
0D49E                               ;; Don't skip next NMI request
0D49E A9 00                         LDA #$00
0D4A0 85 13                         STA skip_nmi
0D4A2                           
0D4A2                               ;; Restore X, Y and PC from stack
0D4A2 28                            PLP
0D4A3 68                            PLA
0D4A4 A8                            TAY
0D4A5 68                            PLA
0D4A6 AA                            TAX
0D4A7                           
0D4A7                           +skip_nmi:
0D4A7                               ;; Restore accumulator from stack
0D4A7 68                            PLA
0D4A8                           
0D4A8                               ;; Return
0D4A8 40                            RTI
0D4A9                           
0D4A9                           ;; IRQ handler (empty)
0D4A9                           IRQ:
0D4A9                               .include "interrupt/irq.asm"
0D4A9 40                            RTI0D4AA                           
0D4AA                           ;; Interrupt vectors
0D4AA 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 14 D4                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE A9 D4                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
