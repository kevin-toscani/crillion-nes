                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_OTHERRAM  = $0300
                                ADDR_SPRITERAM = $0200
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI = #$02
                                BALL_SPEED_LO = #$C0
                                BALL_TILE_CHR = #$01
                                BALL_ATTR     = #%00000000
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD     = #%00000001
                                KILL_BALL        = #%00000001
                                REVIVE_BALL      = #%11111110
                                NUDGE_BALL_RIGHT = #%00000010
                                NUDGE_BALL_LEFT  = #%11111101
                                BALL_MOVES_DOWN  = #%00000100
                                MOVE_BALL_DOWN   = #%00000100
                                MOVE_BALL_UP     = #%11111011
                                BALL_IS_FROZEN   = #%00010000
                                FREEZE_BALL      = #%00010000
                                UNFREEZE_BALL    = #%11101111
                                
                                
                                ;; Screen load helpers
                                LOAD_INTRO_SCREEN = #%10000100
                                LOAD_GAME_SCREEN  = #%10000010
                                LOAD_WIN_SCREEN   = #%10000001
                                
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$10
                                BOUND_BOTTOM    = #$98
                                BOUND_LEFT      = #$20
                                BOUND_RIGHT     = #$D0
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                
                                ;; Max number of nudge frames
                                NUDGE_FRAMES    = #$04                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           
00025                           ;; Update-position check
00025                           ball_update_position   .dsb 1
00026                           
00026                           
00026                           ;; Ball flags
00026                           ;; #% c c c f . v n a
00026                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00026                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00026                           ;;    | | | | | +------ ball moves up (0) or down (1)
00026                           ;;    | | | | +-------- (unused for now)
00026                           ;;    | | | +---------- ball is frozen (not moving)
00026                           ;;    +-+-+------------ ball color (1-6)
00026                           ball_flags             .dsb 1
00027                           
00027                           
00027                           ;; Screen mode
00027                           ;; #% u . . . . . t t
00027                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00027                           ;;    | +-+-+-+-+------------- unused
00027                           ;;    +----------------------- should the screen update
00027                           screen_mode            .dsb 1
00028                           
00028                           
00028                           ;; Start level pointer
00028                           ;; You can start the game at level 1, 5, 9, 13 or 17.
00028                           ;; This is the pointer that tells you at which level to start.
00028                           startlevel_pointer     .dsb 1 
00029                           
00029                           
00029                           ;; PPU buffer variables
00029                           ppu_buffer_update      .dsb 1
0002A                           ppu_buffer_pointer     .dsb 1
0002B                           
0002B                           ;; Pointer to keep track of the number of explosions
0002B                           explosion_pointer      .dsb 1
0002C                           
0002C                           ;; Sprite RAM pointer to keep track of sprites to update
0002C                           sprite_ram_pointer     .dsb 1
0002D                           
0002D                           ;; Nudge counter
0002D                           nudge_counter          .dsb 1
0002E                               0002E                           .ende
                                
                                ;; Other RAM
                                .enum ADDR_OTHERRAM
00300                               .include "ram/misc.asm"
00300                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00300                           ;;
00300                           ;; ram/misc.asm
00300                           ;;
00300                           ;; List of additional, non-zeropage RAM variables. Currently
00300                           ;; empty, but will hold data like the OAM buffer and other,
00300                           ;; less-often accessed, global variables.
00300                           ;;
00300                           ;;
00300                           
00300                           
00300                               ;; Game specific RAM variables
00300                               .include "game/ram/misc.asm"
00300                           ;; miscellaneous (non-zeropage) ram variables go here
00300                           
00300                           ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                           ppu_buffer                .dsb 48
00330                           
00330                           ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                           explosion_framecounter    .dsb 4
00334                           
00334                           ;; _currentframe, keeps track which anim frame we're at
00334                           explosion_currentframe    .dsb 4
00338                           
00338                           ;; _attributes, to distinguish between ball and wall explosion
00338                           explosion_attributes      .dsb 4
0033C                           
0033C                           ;; x- and y-coordinate of the explosion
0033C                           explosion_x               .dsb 4
00340                           explosion_y               .dsb 4
00344                           
00344                           ;; active flag to see if animation is/should be shown
00344                           explosion_active          .dsb 4
00348                           .ende
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 9C C2                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 9C C2                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 84                         LDA #LOAD_INTRO_SCREEN
0C04D 85 27                         STA screen_mode
0C04F                           
0C04F                           
0C04F                           
0C04F                           ;; Main game loop
0C04F                           MainGameLoop:
0C04F                               .include "game/main.asm"
0C04F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C04F                           ;;
0C04F                           ;; game/main.asm
0C04F                           ;;
0C04F                           ;; The main game loop content.
0C04F                           ;;
0C04F                           ;;
0C04F                           
0C04F                               ;; Reset sprite pointer every game loop
0C04F A9 00                         LDA #$00
0C051 85 2C                         STA sprite_ram_pointer
0C053                           
0C053                               ;; Store previous buttons
0C053 A5 0F                         LDA buttons_held
0C055 85 0E                         STA buttons_prev
0C057                           
0C057                               ;; Read controller input
0C057 20 88 C2                      JSR sub_ReadController
0C05A                           
0C05A                               ;; Get buttons released
0C05A A5 0F                         LDA buttons_held
0C05C 49 FF                         EOR #$FF
0C05E 25 0E                         AND buttons_prev
0C060 85 11                         STA buttons_released
0C062                           
0C062                               ;; Set buttons pressed
0C062 A5 0E                         LDA buttons_prev
0C064 49 FF                         EOR #$FF
0C066 25 0F                         AND buttons_held
0C068 85 10                         STA buttons_pressed
0C06A                           
0C06A                               ;; Load screen?
0C06A A5 27                         LDA screen_mode
0C06C 29 80                         AND #%10000000
0C06E F0 1E                         BEQ +screenLoaded
0C070                           
0C070                               ;; Get screen type to load
0C070 A5 27                         LDA screen_mode
0C072 29 03                         AND #%00000011
0C074 A8                            TAY
0C075                               
0C075                               ;; Get address to load screen type from
0C075 B9 2A C5                      LDA tbl_LoadScreenLo,y
0C078 85 0C                         STA pointer
0C07A B9 27 C5                      LDA tbl_LoadScreenHi,y
0C07D 85 0D                         STA pointer+1
0C07F                           
0C07F                               ;; Load screen
0C07F 20 DD C2                      JSR sub_DisableRendering
0C082 20 12 C3                      JSR sub_JumpToPointer
0C085 20 EB C2                      JSR sub_EnableRendering
0C088                               
0C088                               ;; Don't load screen anymore next loop
0C088 A5 27                         LDA screen_mode
0C08A 29 7F                         AND #%01111111
0C08C 85 27                         STA screen_mode
0C08E                               
0C08E                           
0C08E                           +screenLoaded:
0C08E                               ;; Testing my concept scripts
0C08E                               .include "game/test/tile_update.asm"
0C08E                               ;; If START button is pressed
0C08E A5 10                         LDA buttons_pressed
0C090 29 10                         AND #BUTTON_START
0C092 D0 03                         BNE +
0C094 4C A6 C0                          JMP +end
0C097                               +
0C097                           
0C097 A9 21                         LDA #$21
0C099 85 00                         STA temp
0C09B A9 E0                         LDA #$E0
0C09D 85 01                         STA temp+1
0C09F A9 28                         LDA #$28
0C0A1 85 02                         STA temp+2
0C0A3 20 15 C3                      JSR sub_WriteByteToPPU
0C0A6                           
0C0A6                           +end:0C0A6                               .include "game/test/show_animation.asm"
0C0A6                               ;; If A button is pressed, initiate explosion
0C0A6 A5 10                         LDA buttons_pressed
0C0A8 29 80                         AND #BUTTON_A
0C0AA D0 03                         BNE +
0C0AC 4C DE C0                          JMP +end
0C0AF                               +
0C0AF                           
0C0AF                               ;; Get most recent slot for explosion
0C0AF A6 2B                         LDX explosion_pointer
0C0B1                           
0C0B1                               ;; If 0, use max pointer value
0C0B1 D0 02                         BNE +
0C0B3 A2 04                             LDX #MAX_ANIMATIONS
0C0B5                               +
0C0B5                           
0C0B5                               ;; Decrease pointer by one
0C0B5 CA                            DEX
0C0B6 86 2B                         STX explosion_pointer
0C0B8                           
0C0B8                               ;; Load explosion data into RAM
0C0B8 A9 00                         LDA #$00
0C0BA 9D 34 03                      STA explosion_currentframe,x
0C0BD A9 04                         LDA #ANIMATION_SPEED
0C0BF 9D 30 03                      STA explosion_framecounter,x
0C0C2 20 7A C2                      JSR sub_GetRandomNumber
0C0C5                               ;AND #%11110000
0C0C5 9D 3C 03                      STA explosion_x,x
0C0C8 20 7A C2                      JSR sub_GetRandomNumber
0C0CB                               ;AND #%11110000
0C0CB 9D 40 03                      STA explosion_y,x
0C0CE 20 7A C2                      JSR sub_GetRandomNumber
0C0D1 29 02                         AND #%00000010
0C0D3 18                            CLC
0C0D4 69 01                         ADC #$01
0C0D6 9D 38 03                      STA explosion_attributes,x
0C0D9 A9 01                         LDA #$01
0C0DB 9D 44 03                      STA explosion_active,x
0C0DE                           
0C0DE                           
0C0DE                           +end:
0C0DE                           
0C0DE                               ;; Set up loop
0C0DE A2 00                         LDX #$00
0C0E0                               -loop_load_animation:
0C0E0                                   ;; Check if current animation is active. If not, goto next
0C0E0 BD 44 03                          LDA explosion_active,x
0C0E3 D0 03                             BNE +
0C0E5 4C 7F C1                              JMP +next
0C0E8                                   +
0C0E8                           
0C0E8                                   ;; Check the explosion framecounter
0C0E8 BD 30 03                          LDA explosion_framecounter,x
0C0EB D0 26                             BNE +
0C0ED                                       ;; Framecounter is 0
0C0ED                                       ;; Reset to animation speed
0C0ED A9 04                                 LDA #ANIMATION_SPEED
0C0EF 9D 30 03                              STA explosion_framecounter,x
0C0F2                           
0C0F2                                       ;; Set next animation frame, and check if we're done yet
0C0F2 FE 34 03                              INC explosion_currentframe,x
0C0F5 BD 34 03                              LDA explosion_currentframe,x
0C0F8 C9 0A                                 CMP #ANIM_SLIDES
0C0FA D0 17                                 BNE +
0C0FC                           
0C0FC                                       ;; If we're done, inactivate current explosion, clean
0C0FC                                       ;; up sprite RAM and go to the next one
0C0FC A9 00                                 LDA #$00
0C0FE 9D 44 03                              STA explosion_active,x
0C101                                       
0C101 A9 09                                 LDA #SLIDE_SIZE
0C103 0A                                    ASL
0C104 0A                                    ASL
0C105 A8                                    TAY
0C106 A9 EF                                 LDA #$EF
0C108                                       -
0C108 88                                        DEY
0C109 99 00 02                                  STA ADDR_SPRITERAM,y
0C10C C0 00                                     CPY #00
0C10E D0 F8                                 BNE -
0C110                                       
0C110 4C 7F C1                              JMP +next
0C113                                   +
0C113                           
0C113                                   ;; Load (x,y) position in temp variables
0C113 BD 3C 03                          LDA explosion_x,x
0C116 85 01                             STA temp+1
0C118 85 03                             STA temp+3
0C11A BD 40 03                          LDA explosion_y,x
0C11D 85 02                             STA temp+2
0C11F                           
0C11F                                   ;; Load attribute in temp variable
0C11F BD 38 03                          LDA explosion_attributes,x
0C122 85 04                             STA temp+4
0C124                           
0C124                                   ;; Load current frame into Y-register
0C124 BC 34 03                          LDY explosion_currentframe,x
0C127                           
0C127                                   ;; Load current frame ROM address from table
0C127 B9 11 C5                          LDA explosion_anim_lo,y
0C12A 85 0C                             STA pointer
0C12C B9 07 C5                          LDA explosion_anim_hi,y
0C12F 85 0D                             STA pointer+1
0C131                           
0C131                                   ;; Save x-register on stack
0C131 8A                                TXA
0C132 48                                PHA
0C133                           
0C133                                   ;; Load sprites into sprite RAM
0C133 A6 2C                             LDX sprite_ram_pointer
0C135 A0 00                             LDY #$00
0C137                           
0C137                                   ;; Prepare (x,y) offset for loop
0C137 84 00                             STY temp
0C139                           
0C139                                   -loop_load_sprite:
0C139                                   
0C139                                       ;; Do not draw empty sprites
0C139 B1 0C                                 LDA (pointer),y
0C13B F0 18                                 BEQ +nextSprite
0C13D                                   
0C13D                                           ;; Add y-position to sprite ram buffer
0C13D A5 02                                     LDA temp+2
0C13F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C142 E8                                        INX
0C143                           
0C143                                           ;; Get tile number from frame ROM address, and
0C143                                           ;; add it to sprite ram buffer
0C143 B1 0C                                     LDA (pointer),y
0C145 9D 00 02                                  STA ADDR_SPRITERAM,x
0C148 E8                                        INX
0C149                           
0C149                                           ;; Add attribute data to sprite ram buffer
0C149 A5 04                                     LDA temp+4
0C14B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C14E E8                                        INX
0C14F                           
0C14F                                           ;; Add x-position to sprite ram buffer
0C14F A5 03                                     LDA temp+3
0C151 9D 00 02                                  STA ADDR_SPRITERAM,x
0C154 E8                                        INX
0C155                           
0C155                                       +nextSprite:
0C155                           
0C155                                       ;; Check if all sprites are done
0C155 C8                                    INY
0C156 C0 09                                 CPY #SLIDE_SIZE
0C158 F0 21                                 BEQ +done
0C15A                           
0C15A                                       ;; Update x value
0C15A A5 03                                 LDA temp+3
0C15C 18                                    CLC
0C15D 69 08                                 ADC #$08
0C15F 85 03                                 STA temp+3
0C161                           
0C161                                       ;; Update temp for x,y position
0C161 E6 00                                 INC temp
0C163 A5 00                                 LDA temp
0C165 C9 03                                 CMP #SLIDE_WIDTH
0C167 D0 0F                                 BNE +
0C169                                           ;; Row is done; reset x-position
0C169 A5 01                                     LDA temp+1
0C16B 85 03                                     STA temp+3
0C16D                           
0C16D                                           ;; Update y-position
0C16D A5 02                                     LDA temp+2
0C16F 18                                        CLC
0C170 69 08                                     ADC #$08
0C172 85 02                                     STA temp+2
0C174                           
0C174                                           ;; Reset row counter
0C174 A9 00                                     LDA #$00
0C176 85 00                                     STA temp
0C178                                       +
0C178                           
0C178 4C 39 C1                          JMP -loop_load_sprite
0C17B                           
0C17B                               +done:
0C17B 86 2C                             STX sprite_ram_pointer
0C17D                           
0C17D                                   ;; Retrieve x-register from stack
0C17D 68                                PLA
0C17E AA                                TAX
0C17F                           
0C17F                               +next:
0C17F                                   ;; Check if all animations have been updated
0C17F E8                                INX
0C180 E0 04                             CPX #MAX_ANIMATIONS
0C182 F0 03                             BEQ +done
0C184                           
0C184 4C E0 C0                      JMP -loop_load_animation
0C187                           +done:
0C187                               .include "game/test/move_ball.asm"
0C187                           
0C187                               ;; check if position should be updated (ie. has nmi happened yet)
0C187 A5 25                         LDA ball_update_position
0C189 F0 03                         BEQ +
0C18B 4C 51 C2                          JMP +skipBallMovement
0C18E                               +
0C18E                           
0C18E                               ;; Check if ball goes up or down
0C18E A5 26                         LDA ball_flags
0C190 29 04                         AND #BALL_MOVES_DOWN
0C192 F0 27                         BEQ +moveBallUp
0C194                           
0C194                           
0C194                           +moveBallDown:
0C194                               ;; update the low byte
0C194 A5 1A                         LDA ball_ypos_lo
0C196 18                            CLC
0C197 69 C0                         ADC #BALL_SPEED_LO
0C199 85 1A                         STA ball_ypos_lo
0C19B                           
0C19B                               ;; update the high byte with carry
0C19B A5 19                         LDA ball_ypos_hi
0C19D 69 02                         ADC #BALL_SPEED_HI
0C19F 85 19                         STA ball_ypos_hi
0C1A1                               
0C1A1                               ;; Check bottom bound
0C1A1 C9 98                         CMP #BOUND_BOTTOM
0C1A3 90 38                         BCC +checkHorizontalMovement
0C1A5 F0 36                         BEQ +checkHorizontalMovement
0C1A7                           
0C1A7                               ;; Update ball color (test)
0C1A7 20 A2 C2                      JSR sub_ColorizeBall
0C1AA                           
0C1AA                               ;; Change ball direction to "up"
0C1AA A9 98                         LDA #BOUND_BOTTOM
0C1AC 85 19                         STA ball_ypos_hi
0C1AE A9 00                         LDA #$00
0C1B0 85 1A                         STA ball_ypos_lo
0C1B2 A5 26                         LDA ball_flags
0C1B4 29 FB                         AND #MOVE_BALL_UP
0C1B6 85 26                         STA ball_flags
0C1B8 4C DD C1                      JMP +checkHorizontalMovement
0C1BB                           
0C1BB                           
0C1BB                           +moveBallUp:
0C1BB                               ;; update the low byte
0C1BB A5 1A                         LDA ball_ypos_lo
0C1BD 38                            SEC
0C1BE E9 C0                         SBC #BALL_SPEED_LO
0C1C0 85 1A                         STA ball_ypos_lo
0C1C2                           
0C1C2                               ;; update the high byte with carry
0C1C2 A5 19                         LDA ball_ypos_hi
0C1C4 E9 02                         SBC #BALL_SPEED_HI
0C1C6 85 19                         STA ball_ypos_hi
0C1C8                               
0C1C8                               ;; Check top bound
0C1C8 C9 10                         CMP #BOUND_TOP
0C1CA B0 11                         BCS +checkHorizontalMovement
0C1CC                           
0C1CC                               ;; Change ball direction to "down"
0C1CC 20 A2 C2                      JSR sub_ColorizeBall
0C1CF A9 10                         LDA #BOUND_TOP
0C1D1 85 19                         STA ball_ypos_hi
0C1D3 A9 00                         LDA #$00
0C1D5 85 1A                         STA ball_ypos_lo
0C1D7 A5 26                         LDA ball_flags
0C1D9 09 04                         ORA #MOVE_BALL_DOWN
0C1DB 85 26                         STA ball_flags
0C1DD                           
0C1DD                           
0C1DD                           +checkHorizontalMovement:
0C1DD                           
0C1DD                               ;; Check if ball is being nudged
0C1DD A5 2D                         LDA nudge_counter
0C1DF D0 47                         BNE +doneBallMovement
0C1E1                           
0C1E1                               ;; Check if left button is held
0C1E1 A5 0F                         LDA buttons_held
0C1E3 29 02                         AND #BUTTON_LEFT
0C1E5 F0 1E                         BEQ +
0C1E7                                   ;; update the low byte
0C1E7 A5 18                             LDA ball_xpos_lo
0C1E9 38                                SEC
0C1EA E9 C0                             SBC #BALL_SPEED_LO
0C1EC 85 18                             STA ball_xpos_lo
0C1EE                           
0C1EE                                   ;; update the high byte
0C1EE A5 17                             LDA ball_xpos_hi
0C1F0 E9 02                             SBC #BALL_SPEED_HI
0C1F2 85 17                             STA ball_xpos_hi
0C1F4                                   
0C1F4                                   ;; Check left bound
0C1F4 C9 20                             CMP #BOUND_LEFT
0C1F6 B0 30                             BCS +doneBallMovement
0C1F8                                   
0C1F8                                   ;; Set flag to nudge right
0C1F8 A5 26                             LDA ball_flags
0C1FA 09 02                             ORA #NUDGE_BALL_RIGHT
0C1FC 85 26                             STA ball_flags
0C1FE                                   
0C1FE                                   ;; Set nudge timer
0C1FE A9 04                             LDA #NUDGE_FRAMES
0C200 85 2D                             STA nudge_counter
0C202                                   
0C202                           
0C202 4C 28 C2                          JMP +doneBallMovement        
0C205                               +
0C205                           
0C205                               ;; Check if right button is held
0C205 A5 0F                         LDA buttons_held
0C207 29 01                         AND #BUTTON_RIGHT
0C209 F0 1D                         BEQ +
0C20B                                   ;; update the low byte
0C20B A5 18                             LDA ball_xpos_lo
0C20D 18                                CLC
0C20E 69 C0                             ADC #BALL_SPEED_LO
0C210 85 18                             STA ball_xpos_lo
0C212                           
0C212                                   ;; update the high byte
0C212 A5 17                             LDA ball_xpos_hi
0C214 69 02                             ADC #BALL_SPEED_HI
0C216 85 17                             STA ball_xpos_hi     
0C218                           
0C218                                  ;; Check right bound
0C218 C9 D0                             CMP #BOUND_RIGHT
0C21A 90 0C                             BCC +doneBallMovement
0C21C F0 0A                             BEQ +doneBallMovement
0C21E                                   
0C21E                                   ;; Set flag to nudge right
0C21E A5 26                             LDA ball_flags
0C220 29 FD                             AND #NUDGE_BALL_LEFT
0C222 85 26                             STA ball_flags
0C224                                   
0C224                                   ;; Set nudge timer
0C224 A9 04                             LDA #NUDGE_FRAMES
0C226 85 2D                             STA nudge_counter
0C228                               +
0C228                           
0C228                           
0C228                           +doneBallMovement:
0C228                           
0C228                               ;; Check nudge
0C228 A5 2D                         LDA nudge_counter
0C22A F0 23                         BEQ +doneBallNudging
0C22C A5 26                             LDA ball_flags
0C22E 29 02                             AND #NUDGE_BALL_RIGHT
0C230 F0 10                             BEQ +nudgeBallLeft
0C232                                   
0C232                                       ;; update the low byte
0C232 A5 18                                 LDA ball_xpos_lo
0C234 18                                    CLC
0C235 69 C0                                 ADC #BALL_SPEED_LO
0C237 85 18                                 STA ball_xpos_lo
0C239                           
0C239                                       ;; update the high byte
0C239 A5 17                                 LDA ball_xpos_hi
0C23B 69 02                                 ADC #BALL_SPEED_HI
0C23D 85 17                                 STA ball_xpos_hi  
0C23F 4C 4F C2                              JMP +doneBallNudging
0C242                                   +nudgeBallLeft:
0C242                                   
0C242                                   ;; update the low byte
0C242 A5 18                             LDA ball_xpos_lo
0C244 38                                SEC
0C245 E9 C0                             SBC #BALL_SPEED_LO
0C247 85 18                             STA ball_xpos_lo
0C249                           
0C249                                   ;; update the high byte
0C249 A5 17                             LDA ball_xpos_hi
0C24B E9 02                             SBC #BALL_SPEED_HI
0C24D 85 17                             STA ball_xpos_hi
0C24F                               +doneBallNudging:
0C24F                           
0C24F                               ;; Don't update position again until next frame
0C24F E6 25                         INC ball_update_position
0C251                           
0C251                           
0C251                           
0C251                           +skipBallMovement:
0C251                               ;; Add to sprite buffer
0C251 A6 2C                         LDX sprite_ram_pointer
0C253 A5 19                         LDA ball_ypos_hi
0C255 9D 00 02                      STA ADDR_SPRITERAM,x
0C258 E8                            INX
0C259 A9 01                         LDA #BALL_TILE_CHR
0C25B 9D 00 02                      STA ADDR_SPRITERAM,x
0C25E E8                            INX
0C25F A9 00                         LDA #BALL_ATTR
0C261 9D 00 02                      STA ADDR_SPRITERAM,x
0C264 E8                            INX
0C265 A5 17                         LDA ball_xpos_hi
0C267 9D 00 02                      STA ADDR_SPRITERAM,x
0C26A E8                            INX
0C26B 86 2C                         STX sprite_ram_pointer
0C26D                           
0C26D                           
0C26D                           
0C26D                               ;; Sprite clean-up
0C26D A6 2C                         LDX sprite_ram_pointer
0C26F A9 EF                         LDA #$EF
0C271                               -
0C271 9D 00 02                          STA ADDR_SPRITERAM,x
0C274 E8                                INX
0C275 D0 FA                         BNE -
0C277 4C 4F C0                      JMP MainGameLoop
0C27A                           
0C27A                           ;; Subroutines
0C27A                           .include "include/subroutines.asm"
0C27A                           
0C27A                           ;; RNG
0C27A                           .include "subroutine/GetRandomNumber.asm"
0C27A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C27A                           ;;
0C27A                           ;; subroutine/GetRandomNumber.asm
0C27A                           ;;
0C27A                           ;; Simple and fast random number generator by White Flame.
0C27A                           ;;
0C27A                           ;; Set random_seed to an arbitrary number to randomize between
0C27A                           ;; gaming sessions, for instance using the frame counter upon
0C27A                           ;; pressing START on the intro screen.
0C27A                           ;;
0C27A                           ;;     ;; IF START PRESSED:
0C27A                           ;;     LDA frame_counter
0C27A                           ;;     STA random_seed
0C27A                           ;;
0C27A                           ;; Source:
0C27A                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C27A                           ;;
0C27A                           ;;
0C27A                           
0C27A                           sub_GetRandomNumber:
0C27A                               ;; Force EOR if random_seed is zero
0C27A A5 16                         LDA random_seed
0C27C F0 05                         BEQ +doEor
0C27E                           
0C27E                               ;; Shift left, and EOR if the high bit is set
0C27E 0A                            ASL
0C27F F0 04                         BEQ +noEor
0C281 90 02                         BCC +noEor
0C283                           
0C283                           +doEor:
0C283 49 1D                         EOR #$1D
0C285                           
0C285                           +noEor:
0C285 85 16                         STA random_seed
0C287                           
0C287 60                            RTS
0C288                           
0C288                           
0C288                           ;; Read controller input
0C288                           .include "subroutine/ReadController.asm"
0C288                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C288                           ;;
0C288                           ;; subroutine/ReadController.asm
0C288                           ;;
0C288                           ;; Subroutine that polls the controller and stores the input
0C288                           ;; buttons in a variable. This version only handles controller
0C288                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C288                           ;;
0C288                           ;;
0C288                           
0C288                           sub_ReadController:
0C288                           
0C288                               ;; Set strobe bit
0C288 A9 01                         LDA #$01
0C28A 8D 16 40                      STA JOYPAD_1
0C28D                           
0C28D                               ;; Set up ring counter
0C28D 85 0F                         STA buttons_held
0C28F                           
0C28F                               ;; Clear strobe bit
0C28F 4A                            LSR
0C290 8D 16 40                      STA JOYPAD_1
0C293                           
0C293                               ;; Loop through button presses
0C293                               -
0C293 AD 16 40                          LDA JOYPAD_1
0C296 4A                                LSR
0C297 26 0F                             ROL buttons_held
0C299                           
0C299                               ;; Check if ring counter is done
0C299 90 F8                         BCC -
0C29B                           
0C29B                               ;; Return from subroutine
0C29B 60                            RTS
0C29C                           
0C29C                           
0C29C                           ;; vBlank wait
0C29C                           .include "subroutine/WaitForVBlank.asm"
0C29C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C29C                           ;;
0C29C                           ;; subroutine/WaitForVBlank.asm
0C29C                           ;;
0C29C                           ;; Subroutine that essentially pauses script execution until
0C29C                           ;; vBlank happens.
0C29C                           ;;
0C29C                           ;;
0C29C                           
0C29C                           sub_WaitForVBlank:
0C29C 2C 02 20                      BIT $2002
0C29F 10 FB                         BPL sub_WaitForVBlank
0C2A1 60                            RTS
0C2A2                           
0C2A2                           
0C2A2                           ;; Game specific subroutines
0C2A2                           .include "game/include/subroutines.asm"
0C2A2                           ;; additional game-specific subroutines go here
0C2A2                           
0C2A2                           .include "game/subroutine/ColorizeBall.asm"
0C2A2                           sub_ColorizeBall:
0C2A2                           
0C2A2                               ;; Get next ball color in cycle
0C2A2 A5 26                         LDA ball_flags
0C2A4 4A                            LSR
0C2A5 4A                            LSR
0C2A6 4A                            LSR
0C2A7 4A                            LSR
0C2A8 4A                            LSR
0C2A9 C9 05                         CMP #$05
0C2AB D0 02                         BNE +
0C2AD A9 FF                             LDA #$FF
0C2AF                               +
0C2AF 18                            CLC
0C2B0 69 01                         ADC #$01
0C2B2 AA                            TAX
0C2B3                           
0C2B3                               ;; Update color in ball flags
0C2B3 0A                            ASL
0C2B4 0A                            ASL
0C2B5 0A                            ASL
0C2B6 0A                            ASL
0C2B7 0A                            ASL
0C2B8 85 00                         STA temp
0C2BA A5 26                         LDA ball_flags
0C2BC 29 1F                         AND #%00011111
0C2BE 05 00                         ORA temp
0C2C0 85 26                         STA ball_flags
0C2C2                           
0C2C2                               ;; Add new light color of ball to PPU palette
0C2C2 A9 3F                         LDA #$3F
0C2C4 85 00                         STA temp
0C2C6 A9 11                         LDA #$11
0C2C8 85 01                         STA temp+1
0C2CA BD 21 C5                      LDA tbl_BallColorLight,x
0C2CD 85 02                         STA temp+2
0C2CF 20 15 C3                      JSR sub_WriteByteToPPU
0C2D2                               
0C2D2                               ;; Add new dark color of ball to PPU palette
0C2D2 E6 01                         INC temp+1
0C2D4 BD 1B C5                      LDA tbl_BallColorDark,x
0C2D7 85 02                         STA temp+2
0C2D9 20 15 C3                      JSR sub_WriteByteToPPU
0C2DC                               
0C2DC 60                            RTS0C2DD                           .include "game/subroutine/DisableEnableRendering.asm"
0C2DD                           sub_DisableRendering:
0C2DD                               ;; Force NMI skip, disable rendering
0C2DD A9 01                     	LDA #$01
0C2DF 85 14                     	STA force_skip_nmi
0C2E1 A5 12                         LDA soft_ppu_mask
0C2E3 29 E7                         AND #%11100111
0C2E5 85 12                         STA soft_ppu_mask
0C2E7 20 9C C2                      JSR sub_WaitForVBlank
0C2EA 60                            RTS
0C2EB                           
0C2EB                           sub_EnableRendering:
0C2EB                               ;; Enable rendering
0C2EB A5 12                         LDA soft_ppu_mask
0C2ED 09 1E                         ORA #%00011110
0C2EF 85 12                         STA soft_ppu_mask
0C2F1 A9 00                     	LDA #$00
0C2F3 8D 05 20                  	STA PPU_SCROLL
0C2F6 8D 05 20                  	STA PPU_SCROLL
0C2F9 85 14                     	STA force_skip_nmi
0C2FB 20 9C C2                      JSR sub_WaitForVBlank
0C2FE 60                            RTS
0C2FF                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C2FF                           sub_drawIntroScreenLogoTile:
0C2FF B9 03 C4                      LDA tbl_IntroScreenLogoChr,y
0C302 C9 60                         CMP #$60
0C304 D0 08                         BNE +
0C306 20 7A C2                          JSR sub_GetRandomNumber
0C309 29 07                             AND #$07
0C30B 18                                CLC
0C30C 69 60                             ADC #$60
0C30E                               +
0C30E 8D 07 20                      STA PPU_DATA
0C311 60                            RTS
0C312                           .include "game/subroutine/JumpToPointer.asm"
0C312                           sub_JumpToPointer:
0C312 6C 0C 00                      JMP (pointer)
0C315                               ;RTS must be handled by the routine (pointer) jumps to
0C315                           .include "game/subroutine/WriteByteToPPU.asm"
0C315                           sub_WriteByteToPPU:
0C315                           
0C315                               ;; Prevent updating until full 3-byte buffer is filled,
0C315                               ;; so that graphics won't glitch out if NMI happens during
0C315                               ;; updating the buffer
0C315 A9 00                         LDA #$00
0C317 85 29                         STA ppu_buffer_update
0C319                           
0C319                               ;; Check if buffer full; if so, wait a frame and force update
0C319 A4 2A                         LDY ppu_buffer_pointer
0C31B C0 30                         CPY #$30
0C31D D0 05                         BNE +
0C31F E6 29                             INC ppu_buffer_update
0C321 20 9C C2                          JSR sub_WaitForVBlank
0C324                               +
0C324                           
0C324                               ;; Add ppu_addr high byte to buffer
0C324 A5 00                         LDA temp
0C326 99 00 03                      STA ppu_buffer,y
0C329                           
0C329                               ;; Add ppu_addr low byte to buffer
0C329 C8                            INY
0C32A A5 01                         LDA temp+1
0C32C 99 00 03                      STA ppu_buffer,y
0C32F                           
0C32F                               ;; Add ppu_data to buffer
0C32F C8                            INY
0C330 A5 02                         LDA temp+2
0C332 99 00 03                      STA ppu_buffer,y
0C335                           
0C335                               ;; Update buffer pointer
0C335 C8                            INY
0C336 84 2A                         STY ppu_buffer_pointer
0C338                           
0C338                               ;; Tell NMI to update next round
0C338 E6 29                         INC ppu_buffer_update
0C33A                           
0C33A                               ;; Return
0C33A 60                            RTS0C33B                           .include "game/subroutine/ScreenLoaders.asm"
0C33B                           sub_LoadIntroScreen:
0C33B                           
0C33B                               ;; Load intro palette
0C33B 2C 02 20                      BIT PPU_STATUS
0C33E A9 3F                         LDA #$3F
0C340 8D 06 20                      STA PPU_ADDR
0C343 A9 00                         LDA #$00
0C345 8D 06 20                      STA PPU_ADDR
0C348 A2 00                         LDX #$00
0C34A                               -
0C34A BD E3 C3                          LDA tbl_IntroScreenPalette,x
0C34D 8D 07 20                          STA PPU_DATA
0C350 E8                                INX
0C351 E0 20                             CPX #$20
0C353 D0 F5                         BNE -
0C355                               
0C355                               ;; Put ball in the middle
0C355 A9 7C                         LDA #$7C
0C357 85 17                         STA ball_xpos_hi
0C359 85 19                         STA ball_ypos_hi
0C35B                           
0C35B                               ;; Clear the screen)
0C35B 2C 02 20                      BIT PPU_STATUS
0C35E A9 20                         LDA #$20
0C360 8D 06 20                      STA PPU_ADDR
0C363 A9 00                         LDA #$00
0C365 8D 06 20                      STA PPU_ADDR
0C368 AA                            TAX
0C369 A8                            TAY
0C36A                               -
0C36A 8D 07 20                          STA PPU_DATA
0C36D E8                                INX
0C36E D0 FA                             BNE -
0C370 C8                                INY
0C371 C0 04                             CPY #$04
0C373 D0 F5                         BNE -
0C375                           
0C375                               ;; Set up intro screen draw loop
0C375 A2 00                         LDX #$00
0C377                           
0C377                           -loop_IntroScreenData:
0C377                           
0C377                               ;; Get current byte from intro screen data
0C377 BD 0B C4                      LDA tbl_IntroScreenData,x
0C37A                           
0C37A                               ;; If current byte is #$3F, we're done drawing.
0C37A C9 3F                         CMP #$3F
0C37C D0 03                         BNE +
0C37E 4C CB C3                          JMP +goToEndIntroScreen
0C381                               +
0C381                           
0C381                               ;; If highest bits are %11, draw a plain tile
0C381 29 C0                         AND #%11000000
0C383 D0 03                         BNE +
0C385 4C AB C3                          JMP +drawTile
0C388                               +
0C388                               
0C388                               ;; If highest bits are %01, set the PPU address
0C388                               ;; If not, draw two logo tiles
0C388 C9 40                         CMP #%01000000
0C38A D0 03                         BNE +drawLogo
0C38C 4C B5 C3                          JMP +setPpuAddr
0C38F                           
0C38F                           +drawLogo:
0C38F                               ;; Get bits 0-2 and store in a temp variable
0C38F BD 0B C4                      LDA tbl_IntroScreenData,x
0C392 29 07                         AND #%00000111
0C394 85 00                         STA temp
0C396                               
0C396                               ;; Get bits 3-5, shift over to get a value from 0-7
0C396 BD 0B C4                      LDA tbl_IntroScreenData,x
0C399 4A                            LSR
0C39A 4A                            LSR
0C39B 4A                            LSR
0C39C 29 07                         AND #%00000111
0C39E                               
0C39E                               ;; Draw the tile that corresponds with that value
0C39E A8                            TAY
0C39F 20 FF C2                      JSR sub_drawIntroScreenLogoTile
0C3A2                               
0C3A2                               ;; Do the same for the value stored in temp
0C3A2 A4 00                         LDY temp
0C3A4 20 FF C2                      JSR sub_drawIntroScreenLogoTile
0C3A7                           
0C3A7                               ;; Next byte please
0C3A7 E8                            INX
0C3A8 4C 77 C3                      JMP -loop_IntroScreenData
0C3AB                           
0C3AB                           +drawTile:
0C3AB                               ;; Just draw the tile value on screen
0C3AB BD 0B C4                      LDA tbl_IntroScreenData,x
0C3AE 8D 07 20                      STA PPU_DATA
0C3B1                               
0C3B1                               ;; Next byte please
0C3B1 E8                            INX
0C3B2 4C 77 C3                      JMP -loop_IntroScreenData
0C3B5                           
0C3B5                           
0C3B5                           +setPpuAddr:
0C3B5                               ;; Reset the PPU latch
0C3B5 2C 02 20                      BIT PPU_STATUS
0C3B8                               
0C3B8                               ;; Sanitize and write the high byte of the PPU address
0C3B8 BD 0B C4                      LDA tbl_IntroScreenData,x
0C3BB 29 3F                         AND #%00111111
0C3BD 8D 06 20                      STA PPU_ADDR
0C3C0                           
0C3C0                               ;; Write the low byte of the PPU address
0C3C0 E8                            INX
0C3C1 BD 0B C4                      LDA tbl_IntroScreenData,x
0C3C4 8D 06 20                      STA PPU_ADDR
0C3C7                               
0C3C7                               ;; PPU has been set up to draw tiles at the correct spot now.
0C3C7                               
0C3C7                               ;; Next byte please.
0C3C7 E8                            INX
0C3C8 4C 77 C3                      JMP -loop_IntroScreenData
0C3CB                           
0C3CB                           +goToEndIntroScreen:
0C3CB                           
0C3CB                               ;; To color the 1.LEVEL: line green, we need to update two
0C3CB                               ;; values in the PPU attribute data.
0C3CB 2C 02 20                      BIT PPU_STATUS
0C3CE A9 23                         LDA #$23
0C3D0 8D 06 20                      STA PPU_ADDR
0C3D3 A9 CB                         LDA #$CB
0C3D5 8D 06 20                      STA PPU_ADDR
0C3D8 A9 0A                         LDA #%00001010
0C3DA 8D 07 20                      STA PPU_DATA
0C3DD 8D 07 20                      STA PPU_DATA
0C3E0                           
0C3E0 60                            RTS
0C3E1                           
0C3E1                           
0C3E1                           sub_LoadGameScreen:
0C3E1 60                            RTS
0C3E2                               
0C3E2                           sub_LoadWinScreen:
0C3E2 60                            RTS0C3E3                           
0C3E3                           
0C3E3                           ;; LUTs
0C3E3                           .include "game/include/tables.asm"
0C3E3                           
0C3E3                           ;; Intro screen palette
0C3E3                           tbl_IntroScreenPalette:
0C3E3 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C3E7 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C3EB 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C3EF 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C3F3                           
0C3F3 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C3F7 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C3FB 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C3FF 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C403                           
0C403                           
0C403                           ;; Intro: mapping logo index to chr tile
0C403                           tbl_IntroScreenLogoChr:
0C403 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C40B                           
0C40B                           
0C40B                           ;; Intro screen data
0C40B                           tbl_IntroScreenData:
0C40B                           
0C40B                               ;; Set PPU address $20AC
0C40B 60 AC                         .db #$60, #$AC
0C40D                               
0C40D                               ;; Draw
0C40D 02 26 16 0F 20 0F 16 27       .db #$02, #$26, #$16, #$0F, #$20, #$0F, #$16, #$27 ; 1.LEVEL:
0C415                           
0C415                               ;; Set PPU address $20CF
0C415 60 CF                         .db #$60, #$CF
0C417                               
0C417                               ;; Draw
0C417 01 02                         .db #$01, #$02                                     ; 01
0C419                               
0C419                               ;; Set PPU address $2122
0C419 61 22                         .db #$61, #$22
0C41B                               
0C41B                               ;; Draw
0C41B 0E 0F 1D 13 11 18 25          .db #$0E, #$0F, #$1D, #$13, #$11, #$18, #$25       ; DESIGN,
0C422 1D 19 1F 18 0E 25             .db #$1D, #$19, #$1F, #$18, #$0E, #$25             ; SOUND,
0C428 11 1C 0B 1A 12 13 0D 1D       .db #$11, #$1C, #$0B, #$1A, #$12, #$13, #$0D, #$1D ; GRAPHICS
0C430 00 0B 18 0E 00                .db #$00, #$0B, #$18, #$0E, #$00                   ; _AND_
0C435                               
0C435                               ;; Set PPU address $2147
0C435 61 47                         .db #$61, #$47
0C437                               
0C437                               ;; Draw
0C437 1A 1C 19 11 1C 0B 17          .db #$1A, #$1C, #$19, #$11, #$1C, #$0B, #$17       ; PROGRAM
0C43E 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C442 19 16 13 20 0F 1C             .db #$19, #$16, #$13, #$20, #$0F, #$1C             ; OLIVER
0C448 00 15 13 1C 21 0B             .db #$00, #$15, #$13, #$1C, #$21, #$0B             ; _KIRWA
0C44E                               
0C44E                               ;; Set PPU address $218B
0C44E 61 8B                         .db #$61, #$8B
0C450                               
0C450                               ;; Draw
0C450 28 00 02 0A 09 08             .db #$28, #$00, #$02, #$0A, #$09, #$08             ; C_1987
0C456 25 02 0A 09 09                .db #$25, #$02, #$0A, #$09, #$09                   ; ,1988
0C45B                               
0C45B                               ;; Set PPU address $21E6
0C45B 61 E6                         .db #$61, #$E6
0C45D                               
0C45D                               ;; Draw
0C45D 18 0F 1D 00 1A 19 1C 1E       .db #$18, #$0F, #$1D, #$00, #$1A, #$19, #$1C, #$1E ; NES_PORT
0C465 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C469 15 0F 20 13 18 09 02          .db #$15, #$0F, #$20, #$13, #$18, #$09, #$02       ; KEVIN81
0C470                               
0C470                               ;; Set PPU address $222D
0C470 62 2D                         .db #$62, #$2D
0C472                               
0C472                               ;; Draw
0C472 28 00 03 01 03 04             .db #$28, #$00, #$03, #$01, #$03, #$04             ; C_2023
0C478                               
0C478                               ;; Set PPU address $2281
0C478 62 81                         .db #$62, #$81
0C47A                               
0C47A                               ;; Draw the Crillion logo
0C47A E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C47E C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C482 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C486 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C48A                               
0C48A D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C48E C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C492 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C496 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C49A                               
0C49A D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C49E C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C4A2 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C4A6 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C4AA                           
0C4AA D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C4AE C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C4B2 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C4B6 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C4BA                               
0C4BA D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C4BE C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C4C2 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C4C6 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C4CA                           
0C4CA F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C4CE C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C4D2 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C4D6 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C4D9                           
0C4D9                               ;; End of intro
0C4D9 3F                            .db #$3F
0C4DA                           
0C4DA                           
0C4DA                           ;; test animation table
0C4DA                           .include "game/test/show_animation_table.asm"
0C4DA                           ;; CHR tile-id's per slide of explosion
0C4DA                           explosion_slide0:
0C4DA 00 00 00                      .db #$00, #$00, #$00
0C4DD 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C4E0 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C4E3                           
0C4E3                           explosion_slide1:
0C4E3 00 00 00                      .db #$00, #$00, #$00
0C4E6 29 2A 2B                      .db #$29, #$2A, #$2B
0C4E9 39 3A 3B                      .db #$39, #$3A, #$3B
0C4EC                           
0C4EC                           explosion_slide2:
0C4EC 16 00 00                      .db #$16, #$00, #$00
0C4EF 26 27 28                      .db #$26, #$27, #$28
0C4F2 36 37 38                      .db #$36, #$37, #$38
0C4F5                           
0C4F5                           explosion_slide3:
0C4F5 00 14 15                      .db #$00, #$14, #$15
0C4F8 23 24 25                      .db #$23, #$24, #$25
0C4FB 33 34 35                      .db #$33, #$34, #$35
0C4FE                           
0C4FE                           explosion_slide4:
0C4FE 10 11 12                      .db #$10, #$11, #$12
0C501 20 21 22                      .db #$20, #$21, #$22
0C504 30 31 32                      .db #$30, #$31, #$32
0C507                           
0C507                           ;; High and low bytes of animation slides
0C507                           explosion_anim_hi:
0C507 C4                            .db >#explosion_slide0
0C508 C4                            .db >#explosion_slide1
0C509 C4                            .db >#explosion_slide2
0C50A C4                            .db >#explosion_slide3
0C50B C4                            .db >#explosion_slide4
0C50C C4                            .db >#explosion_slide4
0C50D C4                            .db >#explosion_slide3
0C50E C4                            .db >#explosion_slide2
0C50F C4                            .db >#explosion_slide1
0C510 C4                            .db >#explosion_slide0
0C511                           
0C511                           explosion_anim_lo:
0C511 DA                            .db <#explosion_slide0
0C512 E3                            .db <#explosion_slide1
0C513 EC                            .db <#explosion_slide2
0C514 F5                            .db <#explosion_slide3
0C515 FE                            .db <#explosion_slide4
0C516 FE                            .db <#explosion_slide4
0C517 F5                            .db <#explosion_slide3
0C518 EC                            .db <#explosion_slide2
0C519 E3                            .db <#explosion_slide1
0C51A DA                            .db <#explosion_slide0
0C51B                           
0C51B                           
0C51B                           
0C51B                           ;; Ball palette color cycle
0C51B                           tbl_BallColorDark:
0C51B 12 14 16 27 28 19             .db #$12, #$14, #$16, #$27, #$28, #$19
0C521                            
0C521                           tbl_BallColorLight:
0C521 2C 24 25 37 20 2B             .db #$2C, #$24, #$25, #$37, #$20, #$2B
0C527                           
0C527                               
0C527                           ;; Screen mode drawing routine addresses
0C527                           tbl_LoadScreenHi:
0C527 C3 C3 C3                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C52A                           
0C52A                           tbl_LoadScreenLo:
0C52A 3B E1 E2                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C52D                           
0C52D                           
0C52D                           ;; NMI handler
0C52D                           NMI:
0C52D                               .include "interrupt/nmi.asm"
0C52D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C52D                           ;;
0C52D                           ;; include/nmi.asm
0C52D                           ;;
0C52D                           ;; Non-maskable interrupt script. This script is being executed
0C52D                           ;; when vBlank hits.
0C52D                           ;;
0C52D                           ;;
0C52D                           
0C52D                               ;; Preserve accumulator through stack
0C52D 48                            PHA
0C52E                           
0C52E                               ;; Should NMI be skipped?
0C52E A5 13                         LDA skip_nmi
0C530 F0 03                         BEQ +
0C532 4C C0 C5                          JMP +skip_nmi
0C535                               +
0C535                           
0C535                               ;; When in NMI, skip additional NMI requests
0C535 A9 01                         LDA #$01
0C537 85 13                         STA skip_nmi
0C539                           
0C539                               ;; Preserve X, Y, and PC through stack
0C539 8A                            TXA
0C53A 48                            PHA
0C53B 98                            TYA
0C53C 48                            PHA
0C53D 08                            PHP
0C53E                               
0C53E                               ;; Check forced NMI skip
0C53E A5 14                         LDA force_skip_nmi
0C540 F0 03                         BEQ +
0C542 4C B1 C5                          JMP +force_skip_nmi
0C545                               +
0C545                           
0C545                               ;; Update PPU mask
0C545                               ;LDA #$00
0C545                               ;STA PPU_CTRL
0C545 A5 12                         LDA soft_ppu_mask
0C547 8D 01 20                      STA PPU_MASK
0C54A                               
0C54A                               
0C54A                               ;; Additional PPU updates go here
0C54A                               .include "game/test/tile_update_nmi.asm"
0C54A                           
0C54A                               ;; Check if ppu_buffer needs updating
0C54A A5 29                         LDA ppu_buffer_update
0C54C D0 03                         BNE +
0C54E 4C 90 C5                          JMP +no_ppu_buffer_update
0C551                               +
0C551                           
0C551                               ;; Reset ppu control register and mask
0C551 A2 00                         LDX #$00
0C553 8E 00 20                      STX PPU_CTRL
0C556 8E 01 20                      STX PPU_MASK
0C559                           
0C559                               ;; Set up loop
0C559                               -
0C559                                   ;; Reset hi/lo latch
0C559 2C 02 20                          BIT PPU_STATUS
0C55C                           
0C55C                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0C55C BD 00 03                          LDA ppu_buffer,x
0C55F 8D 06 20                          STA PPU_ADDR
0C562 E8                                INX
0C563 BD 00 03                          LDA ppu_buffer,x
0C566 8D 06 20                          STA PPU_ADDR
0C569                           
0C569                                   ;; Write ppu_buffer data to PPU_ADDR
0C569 E8                                INX
0C56A BD 00 03                          LDA ppu_buffer,x
0C56D 8D 07 20                          STA PPU_DATA
0C570                           
0C570                                   ;; Check if updating is done (eg. X is at pointer)
0C570 E8                                INX
0C571 E4 2A                             CPX ppu_buffer_pointer
0C573 F0 03                             BEQ +
0C575 4C 59 C5                      JMP -
0C578                           +
0C578                           
0C578                               ;; Reset ppu buffer update and pointer
0C578 A9 00                         LDA #$00
0C57A 85 29                         STA ppu_buffer_update
0C57C 85 2A                         STA ppu_buffer_pointer
0C57E                               
0C57E                               ;; Reset scrolling position
0C57E 8D 05 20                      STA PPU_SCROLL
0C581 8D 05 20                      STA PPU_SCROLL
0C584                           
0C584                               ;; Restore ppu control register and mask
0C584 A9 90                         LDA #%10010000
0C586 8D 00 20                      STA PPU_CTRL
0C589 A5 12                         LDA soft_ppu_mask
0C58B 8D 01 20                      STA PPU_MASK
0C58E A9 00                         LDA #$00
0C590                           
0C590                           ;; Continue other NMI stuff
0C590                           +no_ppu_buffer_update:
0C590                               .include "game/test/show_animation_nmi.asm"
0C590                               ;; Reset sprite RAM, draw sprites
0C590 8D 03 20                      STA OAM_ADDR
0C593 A9 02                         LDA #$02
0C595 8D 14 40                      STA OAM_DMA
0C598                           
0C598 A0 04                         LDY #MAX_ANIMATIONS
0C59A A2 00                         LDX #$00
0C59C                               -
0C59C BD 30 03                          LDA explosion_framecounter,x
0C59F F0 03                             BEQ +
0C5A1 DE 30 03                              DEC explosion_framecounter,x
0C5A4                                   +
0C5A4 E8                                INX
0C5A5 88                                DEY
0C5A6 F0 03                             BEQ +done        
0C5A8 4C 9C C5                      JMP -
0C5AB                           +done:
0C5AB                               
0C5AB A5 2D                         LDA nudge_counter
0C5AD F0 02                         BEQ +
0C5AF C6 2D                             DEC nudge_counter
0C5B1                               +
0C5B1                           
0C5B1                           ;; This is what happens when we forced nmi skip
0C5B1                           +force_skip_nmi:
0C5B1                           
0C5B1                               ;; Increase frame counters
0C5B1 E6 15                         INC frame_counter
0C5B3                           
0C5B3                               ;; reset ball_update_position
0C5B3 A9 00                         LDA #$00
0C5B5 85 25                         STA ball_update_position
0C5B7                           
0C5B7                               ;; Don't skip next NMI request
0C5B7 A9 00                         LDA #$00
0C5B9 85 13                         STA skip_nmi
0C5BB                           
0C5BB                               ;; Restore X, Y and PC from stack
0C5BB 28                            PLP
0C5BC 68                            PLA
0C5BD A8                            TAY
0C5BE 68                            PLA
0C5BF AA                            TAX
0C5C0                           
0C5C0                           +skip_nmi:
0C5C0                               ;; Restore accumulator from stack
0C5C0 68                            PLA
0C5C1                           
0C5C1                               ;; Return
0C5C1 40                            RTI
0C5C2                           
0C5C2                           ;; IRQ handler (empty)
0C5C2                           IRQ:
0C5C2                               .include "interrupt/irq.asm"
0C5C2 40                            RTI0C5C3                           
0C5C3                           ;; Interrupt vectors
0C5C3 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 2D C5                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE C2 C5                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
