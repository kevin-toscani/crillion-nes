	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; TEST MODE (comment to disable, or set to level number)
	                            TESTING = #0 ; start at level 1 with 255 lives
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Timers 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           unfreeze_timer         .dsb 1
00042                           
00042                           ;; Current level (doubles as level select variable)
00042                           current_level          .dsb 1
00043                           
00043                           ;; Tile type the ball is currently colliding with
00043                           colliding_tile         .dsb 1
00044                           
00044                           ;; Number of blocks left on screen
00044                           blocks_left            .dsb 1
00045                           
00045                           ;; Sound control variables
00045                           max_noise              .dsb 1
00046                           sweep_noise            .dsb 1
00047                           current_noise          .dsb 1
00048                           noise_timer            .dsb 1
00049                           do_beeps               .dsb 1
0004A                           soft_pulse1            .dsb 1
0004B                           noise_muted            .dsb 1
0004C                           
0004C                           ;; Sound effect variables
0004C                           sfx_address            .dsb 2
0004E                           sfx_timer              .dsb 2
00050                           sfx_frequency          .dsb 2
00052                           
00052                           
00052                           ;; Additional NMI check for timed PPU fade
00052                           check_nmi              .dsb 1
00053                           
00053                           ;; This variable should be used for absolutely nothing
00053                           void                   .dsb 1
00054                           
00054                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 0D C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 0D C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 20                         STA ball_score
0C057 85 21                         STA ball_score+1
0C059 85 22                         STA ball_score+2
0C05B 85 23                         STA ball_score+3
0C05D 85 24                         STA ball_score+4
0C05F 85 25                         STA ball_score+5
0C061                           
0C061                           ifdef TESTING
0C061 A9 FF                         LDA #$FF
0C063 85 1F                         STA ball_lives
0C065 A9 00                         LDA #TESTING
0C067                           endif
0C067                           
0C067 85 42                         STA current_level
0C069                           
0C069                           
0C069                           
0C069                           ;; Main game loop
0C069                           lbl_MainGameLoop:
0C069 20 04 C5                      JSR sub_WaitForNMI ; align main loop
0C06C                               .include "game/main.asm"
0C06C                           
0C06C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C06C                           ;;
0C06C                           ;; game/main.asm
0C06C                           ;;
0C06C                           ;; The main game loop content.
0C06C                           ;;
0C06C                           ;;
0C06C                           
0C06C                               ;; Reset sprite pointer every game loop
0C06C A9 00                         LDA #$00
0C06E 85 3D                         STA sprite_ram_pointer
0C070                           
0C070                               ;; Store previous buttons
0C070 A5 0F                         LDA buttons_held
0C072 85 0E                         STA buttons_prev
0C074                           
0C074                               ;; Read controller input
0C074 20 F0 C4                      JSR sub_ReadController
0C077                           
0C077                               ;; Get buttons released
0C077 A5 0F                         LDA buttons_held
0C079 49 FF                         EOR #$FF
0C07B 25 0E                         AND buttons_prev
0C07D 85 11                         STA buttons_released
0C07F                           
0C07F                               ;; Set buttons pressed
0C07F A5 0E                         LDA buttons_prev
0C081 49 FF                         EOR #$FF
0C083 25 0F                         AND buttons_held
0C085 85 10                         STA buttons_pressed
0C087                           
0C087                               ;; Load screen?
0C087 A5 38                         LDA screen_mode
0C089 29 80                         AND #%10000000
0C08B F0 1E                         BEQ +screenLoaded
0C08D                           
0C08D                               ;; Get screen type to load
0C08D A5 38                         LDA screen_mode
0C08F 29 03                         AND #%00000011
0C091 A8                            TAY
0C092                               
0C092                               ;; Get address to load screen type from
0C092 B9 6F D2                      LDA tbl_LoadScreenLo,y
0C095 85 0C                         STA pointer
0C097 B9 6C D2                      LDA tbl_LoadScreenHi,y
0C09A 85 0D                         STA pointer+1
0C09C                           
0C09C                               ;; Load screen
0C09C 20 A9 C6                      JSR sub_DisableRendering
0C09F 20 ED C9                      JSR sub_JumpToPointer
0C0A2 20 BD C6                      JSR sub_EnableRendering
0C0A5                               
0C0A5                               ;; Don't load screen anymore next loop
0C0A5 A5 38                         LDA screen_mode
0C0A7 29 7F                         AND #%01111111
0C0A9 85 38                         STA screen_mode
0C0AB                               
0C0AB                           
0C0AB                           +screenLoaded:
0C0AB                               ;; Check if we're on the game screen
0C0AB A5 38                         LDA screen_mode
0C0AD C9 01                         CMP #IS_GAME_SCREEN
0C0AF F0 03                         BEQ +
0C0B1 4C 54 C3                          JMP +checkNextScreen
0C0B4                               +
0C0B4                           
0C0B4                               ;; Load sprite 0 in place
0C0B4 A9 18                         LDA #$18
0C0B6 8D 00 02                      STA ADDR_SPRITERAM
0C0B9 A9 0F                         LDA #$0F
0C0BB 8D 01 02                      STA ADDR_SPRITERAM+1
0C0BE A9 22                         LDA #$22
0C0C0 8D 02 02                      STA ADDR_SPRITERAM+2
0C0C3 A9 F8                         LDA #$F8
0C0C5 8D 03 02                      STA ADDR_SPRITERAM+3
0C0C8 A9 04                         LDA #$04
0C0CA 85 3D                         STA sprite_ram_pointer
0C0CC                           
0C0CC                               ;; We're on the game screen
0C0CC                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0CC A5 35                         LDA sprites_update_position
0C0CE F0 03                         BEQ +
0C0D0 4C BA C2                          JMP +skipSpriteMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Check if ball is frozen
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 04                         AND #BALL_IS_FROZEN
0C0D7 F0 03                         BEQ +
0C0D9 4C 79 C2                          JMP +skipBallMovement
0C0DC                               +
0C0DC                           
0C0DC                               ;; Move the ball
0C0DC                               .include "game/include/main/move_ball.asm"
0C0DC                           
0C0DC                               ;; Check if ball goes up or down
0C0DC A5 37                         LDA ball_flags
0C0DE 29 10                         AND #BALL_MOVES_DOWN
0C0E0 F0 2B                         BEQ +moveBallUp
0C0E2                           
0C0E2                           
0C0E2                           +moveBallDown:
0C0E2                               ;; update the low byte
0C0E2 A5 1A                         LDA ball_ypos_lo
0C0E4 85 1C                         STA ball_ypos_lo_prev
0C0E6 18                            CLC
0C0E7 69 88                         ADC #BALL_SPEED_LO
0C0E9 85 1A                         STA ball_ypos_lo
0C0EB                           
0C0EB                               ;; update the high byte with carry
0C0EB A5 19                         LDA ball_ypos_hi
0C0ED 85 1B                         STA ball_ypos_hi_prev
0C0EF 69 01                         ADC #BALL_SPEED_HI
0C0F1 85 19                         STA ball_ypos_hi
0C0F3                               
0C0F3                               ;; Check bottom bound
0C0F3 C9 C8                         CMP #BOUND_BOTTOM
0C0F5 90 3C                         BCC +checkHorizontalMovement
0C0F7 F0 3A                         BEQ +checkHorizontalMovement
0C0F9                           
0C0F9                           
0C0F9                               ;; Change ball direction to "up"
0C0F9 A9 C8                         LDA #BOUND_BOTTOM
0C0FB 38                            SEC
0C0FC E9 01                         SBC #$01
0C0FE 85 19                         STA ball_ypos_hi
0C100 A9 00                         LDA #$00
0C102 85 1A                         STA ball_ypos_lo
0C104 A5 37                         LDA ball_flags
0C106 29 EF                         AND #MOVE_BALL_UP
0C108 85 37                         STA ball_flags
0C10A 4C 33 C1                      JMP +checkHorizontalMovement
0C10D                           
0C10D                           
0C10D                           +moveBallUp:
0C10D                               ;; update the low byte
0C10D A5 1A                         LDA ball_ypos_lo
0C10F 85 1C                         STA ball_ypos_lo_prev
0C111 38                            SEC
0C112 E9 88                         SBC #BALL_SPEED_LO
0C114 85 1A                         STA ball_ypos_lo
0C116                           
0C116                               ;; update the high byte with carry
0C116 A5 19                         LDA ball_ypos_hi
0C118 85 1B                         STA ball_ypos_hi_prev
0C11A E9 01                         SBC #BALL_SPEED_HI
0C11C 85 19                         STA ball_ypos_hi
0C11E                               
0C11E                               ;; Check top bound
0C11E C9 30                         CMP #BOUND_TOP
0C120 B0 11                         BCS +checkHorizontalMovement
0C122                           
0C122                               ;; Change ball direction to "down"
0C122 A9 30                         LDA #BOUND_TOP
0C124 18                            CLC
0C125 69 01                         ADC #$01
0C127 85 19                         STA ball_ypos_hi
0C129 A9 00                         LDA #$00
0C12B 85 1A                         STA ball_ypos_lo
0C12D A5 37                         LDA ball_flags
0C12F 09 10                         ORA #MOVE_BALL_DOWN
0C131 85 37                         STA ball_flags
0C133                           
0C133                           
0C133                           +checkHorizontalMovement:
0C133                           
0C133                               ;; Check if ball is being nudged
0C133 A5 3E                         LDA nudge_timer
0C135 D0 41                         BNE +doneBallMovement
0C137                           
0C137                               ;; Check if left button is held
0C137 A5 0F                         LDA buttons_held
0C139 29 02                         AND #BUTTON_LEFT
0C13B F0 1B                         BEQ +
0C13D                                   ;; update the low byte
0C13D A5 18                             LDA ball_xpos_lo
0C13F 38                                SEC
0C140 E9 88                             SBC #BALL_SPEED_LO
0C142 85 18                             STA ball_xpos_lo
0C144                           
0C144                                   ;; update the high byte
0C144 A5 17                             LDA ball_xpos_hi
0C146 E9 01                             SBC #BALL_SPEED_HI
0C148 85 17                             STA ball_xpos_hi
0C14A                                   
0C14A                                   ;; Check left bound
0C14A C9 10                             CMP #BOUND_LEFT
0C14C B0 2A                             BCS +doneBallMovement
0C14E                                   
0C14E                                   ;; Set flag to nudge right and set nudge timer
0C14E A5 37                             LDA ball_flags
0C150 09 02                             ORA #NUDGE_BALL_RIGHT
0C152 20 E6 C9                          JSR sub_InitiateNudge
0C155                           
0C155 4C 78 C1                          JMP +doneBallMovement        
0C158                               +
0C158                           
0C158                               ;; Check if right button is held
0C158 A5 0F                         LDA buttons_held
0C15A 29 01                         AND #BUTTON_RIGHT
0C15C F0 1A                         BEQ +
0C15E                                   ;; update the low byte
0C15E A5 18                             LDA ball_xpos_lo
0C160 18                                CLC
0C161 69 88                             ADC #BALL_SPEED_LO
0C163 85 18                             STA ball_xpos_lo
0C165                           
0C165                                   ;; update the high byte
0C165 A5 17                             LDA ball_xpos_hi
0C167 69 01                             ADC #BALL_SPEED_HI
0C169 85 17                             STA ball_xpos_hi     
0C16B                           
0C16B                                  ;; Check right bound
0C16B C9 E8                             CMP #BOUND_RIGHT
0C16D 90 09                             BCC +doneBallMovement
0C16F F0 07                             BEQ +doneBallMovement
0C171                                   
0C171                                   ;; Set flag to nudge left and set nudge timer
0C171 A5 37                             LDA ball_flags
0C173 29 FD                             AND #NUDGE_BALL_LEFT
0C175 20 E6 C9                          JSR sub_InitiateNudge
0C178                               +
0C178                           
0C178                           
0C178                           +doneBallMovement:
0C178                           
0C178                               ;; Check nudge
0C178 A5 3E                         LDA nudge_timer
0C17A F0 23                         BEQ +doneBallNudging
0C17C A5 37                             LDA ball_flags
0C17E 29 02                             AND #NUDGE_BALL_RIGHT
0C180 F0 10                             BEQ +nudgeBallLeft
0C182                                   
0C182                                       ;; update the low byte
0C182 A5 18                                 LDA ball_xpos_lo
0C184 18                                    CLC
0C185 69 88                                 ADC #BALL_SPEED_LO
0C187 85 18                                 STA ball_xpos_lo
0C189                           
0C189                                       ;; update the high byte
0C189 A5 17                                 LDA ball_xpos_hi
0C18B 69 01                                 ADC #BALL_SPEED_HI
0C18D 85 17                                 STA ball_xpos_hi  
0C18F 4C 9F C1                              JMP +doneBallNudging
0C192                                   +nudgeBallLeft:
0C192                                   
0C192                                   ;; update the low byte
0C192 A5 18                             LDA ball_xpos_lo
0C194 38                                SEC
0C195 E9 88                             SBC #BALL_SPEED_LO
0C197 85 18                             STA ball_xpos_lo
0C199                           
0C199                                   ;; update the high byte
0C199 A5 17                             LDA ball_xpos_hi
0C19B E9 01                             SBC #BALL_SPEED_HI
0C19D 85 17                             STA ball_xpos_hi
0C19F                               +doneBallNudging:
0C19F                           
0C19F                               ;; Don't update position again until next frame
0C19F                               ;; (moved to after move block routine)
0C19F                           
0C19F                           +doneBallHandling:
0C19F                           
0C19F                               
0C19F                               ;; Do collision detection
0C19F                               .include "game/include/main/collision_detection.asm"
0C19F                           
0C19F                               ;; Get ball's x-left, x-center, x-right position
0C19F A5 17                         LDA ball_xpos_hi
0C1A1 18                            CLC
0C1A2 69 F0                         ADC #BALL_LEFT_WGA
0C1A4 85 2F                         STA ball_left
0C1A6 18                            CLC
0C1A7 69 04                         ADC #BALL_HALF_SIZE
0C1A9 85 30                         STA ball_center
0C1AB 18                            CLC
0C1AC 69 04                         ADC #BALL_HALF_SIZE
0C1AE 85 31                         STA ball_right
0C1B0                           
0C1B0                               ;; Get ball's y-top, y-middle, y-bottom position
0C1B0 A5 19                         LDA ball_ypos_hi
0C1B2 18                            CLC
0C1B3 69 D0                         ADC #BALL_TOP_WGA
0C1B5 85 32                         STA ball_top
0C1B7 18                            CLC
0C1B8 69 04                         ADC #BALL_HALF_SIZE
0C1BA 85 33                         STA ball_middle
0C1BC 18                            CLC
0C1BD 69 04                         ADC #BALL_HALF_SIZE
0C1BF 85 34                         STA ball_bottom
0C1C1                           
0C1C1                           +checkRightCollision:
0C1C1                               ;; Check if ball moves right
0C1C1                               ;; No need to check nudging here as that will never collide with a tile
0C1C1 A5 0F                         LDA buttons_held
0C1C3 29 01                         AND #BUTTON_RIGHT
0C1C5 F0 20                         BEQ +checkLeftCollision
0C1C7                           
0C1C7                               ;; Check tile at right position
0C1C7 A5 33                         LDA ball_middle
0C1C9 85 00                         STA temp
0C1CB A5 31                         LDA ball_right
0C1CD 85 01                         STA temp+1
0C1CF 20 91 C6                      JSR sub_ConvertXYToTileType
0C1D2 29 01                         AND #TILE_IS_SOLID
0C1D4 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1D6                           
0C1D6                               ;; Nudge ball and evaluate tile type
0C1D6 A9 01                         LDA #$01
0C1D8 85 36                         STA move_block_space_to_check
0C1DA A5 37                         LDA ball_flags
0C1DC 29 FD                         AND #NUDGE_BALL_LEFT
0C1DE 20 E6 C9                      JSR sub_InitiateNudge
0C1E1 20 1F C8                      JSR sub_EvaluateTileType
0C1E4 4C 0A C2                      JMP +checkTopCollision
0C1E7                           
0C1E7                           +checkLeftCollision:
0C1E7                               ;; Check if ball moves right
0C1E7                               ;; No need to check nudging here as that will never collide with a tile
0C1E7 A5 0F                         LDA buttons_held
0C1E9 29 02                         AND #BUTTON_LEFT
0C1EB F0 1D                         BEQ +checkTopCollision
0C1ED                           
0C1ED                               ;; Check tile at right position
0C1ED A5 33                         LDA ball_middle
0C1EF 85 00                         STA temp
0C1F1 A5 2F                         LDA ball_left
0C1F3 85 01                         STA temp+1
0C1F5 20 91 C6                      JSR sub_ConvertXYToTileType
0C1F8 29 01                         AND #TILE_IS_SOLID
0C1FA F0 0E                         BEQ +checkTopCollision
0C1FC                           
0C1FC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1FC A9 FF                         LDA #$FF
0C1FE 85 36                         STA move_block_space_to_check
0C200 A5 37                         LDA ball_flags
0C202 09 02                         ORA #NUDGE_BALL_RIGHT
0C204 20 E6 C9                      JSR sub_InitiateNudge
0C207 20 1F C8                      JSR sub_EvaluateTileType
0C20A                               
0C20A                               
0C20A                           +checkTopCollision:
0C20A                               ;; Check if ball moves up
0C20A A5 37                         LDA ball_flags
0C20C 29 10                         AND #BALL_MOVES_DOWN
0C20E D0 27                         BNE +checkBottomCollision
0C210                           
0C210                               ;; Check tile at top position
0C210 A5 32                         LDA ball_top
0C212 85 00                         STA temp
0C214 A5 30                         LDA ball_center
0C216 85 01                         STA temp+1
0C218 20 91 C6                      JSR sub_ConvertXYToTileType
0C21B 29 01                         AND #TILE_IS_SOLID
0C21D F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C21F                           
0C21F                               ;; Tile is solid; move ball down and evaluate tile type
0C21F A5 1C                         LDA ball_ypos_lo_prev
0C221 85 1A                         STA ball_ypos_lo
0C223 A5 1B                         LDA ball_ypos_hi_prev
0C225 85 19                         STA ball_ypos_hi
0C227 A5 37                         LDA ball_flags
0C229 09 10                         ORA #MOVE_BALL_DOWN
0C22B 85 37                         STA ball_flags
0C22D                           
0C22D A9 F0                         LDA #$F0 ; which is -16
0C22F 85 36                         STA move_block_space_to_check
0C231 20 1F C8                      JSR sub_EvaluateTileType
0C234 4C 5B C2                      JMP +doneCheckingCollision
0C237                           
0C237                           +checkBottomCollision:
0C237                               ;; No movement check needed: since ball is not moving up, it must move down
0C237                           
0C237                               ;; Check tile at bottom position
0C237 A5 34                         LDA ball_bottom
0C239 85 00                         STA temp
0C23B A5 30                         LDA ball_center
0C23D 85 01                         STA temp+1
0C23F 20 91 C6                      JSR sub_ConvertXYToTileType
0C242 29 01                         AND #TILE_IS_SOLID
0C244 F0 15                         BEQ +doneCheckingCollision
0C246                           
0C246                               ;; Tile is solid; move ball up and evaluate tile type
0C246 A5 1C                         LDA ball_ypos_lo_prev
0C248 85 1A                         STA ball_ypos_lo
0C24A A5 1B                         LDA ball_ypos_hi_prev
0C24C 85 19                         STA ball_ypos_hi
0C24E A5 37                         LDA ball_flags
0C250 29 EF                         AND #MOVE_BALL_UP
0C252 85 37                         STA ball_flags
0C254                           
0C254 A9 10                         LDA #$10
0C256 85 36                         STA move_block_space_to_check
0C258 20 1F C8                      JSR sub_EvaluateTileType
0C25B                           
0C25B                           +doneCheckingCollision:
0C25B                           
0C25B                               
0C25B                               ;; Update bonus
0C25B                               .include "game/include/main/update_bonus.asm"
0C25B                           
0C25B                           ;; Update the bonus counter on screen
0C25B                           
0C25B                               ;; If bonus = 000, skip decreasing
0C25B A5 2C                         LDA ball_bonus
0C25D 05 2D                         ORA ball_bonus+1
0C25F 05 2E                         ORA ball_bonus+2
0C261 F0 0D                         BEQ +done
0C263                           
0C263                               ;; Check if bonus timer is done yet
0C263 A5 3F                         LDA bonus_timer
0C265 D0 09                         BNE +done
0C267                           
0C267                               ;; Bonus timer is done
0C267                               ;; Reset bonus timer
0C267 A9 08                         LDA #BONUS_FRAMES
0C269 85 3F                         STA bonus_timer
0C26B                               
0C26B                               ;; Subtract one from ball bonus ones
0C26B A2 01                         LDX #$01
0C26D 20 9D D0                      JSR sub_SubtractXFromBonus
0C270                           
0C270                           +done:
0C270                           
0C270                           
0C270                               ;; Check if self-destruct
0C270 A5 10                         LDA buttons_pressed
0C272 29 20                         AND #BUTTON_SELECT
0C274 F0 03                         BEQ +
0C276 20 B9 C8                          JSR sub_Selfdestruct
0C279                               +
0C279                           
0C279                           
0C279                           +skipBallMovement:
0C279                               ;; Move blocks a pixel up/down/left/right
0C279                               .include "game/include/main/move_blocks.asm"
0C279                           
0C279                               ;; Set up block loop
0C279 A2 04                         LDX #MAX_ANIMATIONS
0C27B                           -moveBlocksLoop:
0C27B CA                            DEX
0C27C                           
0C27C                               ;; Check if block is still moving
0C27C BD 80 03                      LDA move_block_timer,x
0C27F F0 33                         BEQ +checkNext
0C281                               
0C281                               ;; Check if block is done moving
0C281 C9 01                         CMP #$01
0C283 D0 0B                         BNE +
0C285                                   ;; If so, draw a tile and remove the sprite
0C285 20 EA C6                          JSR sub_DrawMoveTile
0C288 A9 00                             LDA #$00
0C28A 9D 80 03                          STA move_block_timer,x
0C28D 4C B4 C2                          JMP +checkNext
0C290                               +
0C290                               
0C290                               ;; Check in which direction the block is moving
0C290                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C290 BD 88 03                      LDA move_block_flags,x
0C293 29 03                         AND #%00000011
0C295 F0 14                         BEQ +movingDown
0C297 C9 01                         CMP #$01
0C299 F0 0A                         BEQ +movingUp
0C29B C9 02                         CMP #$02
0C29D F0 12                         BEQ +movingRight
0C29F                               
0C29F                               ;; Move block in correct direction
0C29F                               +movingLeft:
0C29F DE 78 03                      DEC move_block_x,x
0C2A2 4C B4 C2                      JMP +checkNext
0C2A5                           
0C2A5                               +movingUp:
0C2A5 DE 7C 03                      DEC move_block_y,x
0C2A8 4C B4 C2                      JMP +checkNext
0C2AB                           
0C2AB                               +movingDown:
0C2AB FE 7C 03                      INC move_block_y,x
0C2AE 4C B4 C2                      JMP +checkNext
0C2B1                           
0C2B1                               +movingRight:
0C2B1 FE 78 03                      INC move_block_x,x
0C2B4                           
0C2B4                               ;; Check next block (if any left)
0C2B4                               +checkNext:
0C2B4 E0 00                         CPX #$00
0C2B6 D0 C3                         BNE -moveBlocksLoop
0C2B8                               
0C2B8                               ;; Don't update sprites
0C2B8 E6 35                         INC sprites_update_position
0C2BA                           
0C2BA                           
0C2BA                           +skipSpriteMovement:
0C2BA                               ;; Testing timed PPU scroll concept (disabled)
0C2BA                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2BA                           
0C2BA                               ;; Check if ball is dead
0C2BA A5 37                         LDA ball_flags
0C2BC 29 01                         AND #BALL_IS_DEAD
0C2BE F0 03                         BEQ +
0C2C0 4C E2 C2                          JMP +ballIsDead
0C2C3                               +
0C2C3                               
0C2C3                               ;; Add ball to sprite buffer
0C2C3 A6 3D                         LDX sprite_ram_pointer
0C2C5 A5 19                         LDA ball_ypos_hi
0C2C7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2CA E8                            INX
0C2CB A9 01                         LDA #BALL_TILE_CHR
0C2CD 9D 00 02                      STA ADDR_SPRITERAM,x
0C2D0 E8                            INX
0C2D1 A9 00                         LDA #BALL_ATTR
0C2D3 9D 00 02                      STA ADDR_SPRITERAM,x
0C2D6 E8                            INX
0C2D7 A5 17                         LDA ball_xpos_hi
0C2D9 9D 00 02                      STA ADDR_SPRITERAM,x
0C2DC E8                            INX
0C2DD 86 3D                         STX sprite_ram_pointer
0C2DF 4C F3 C2                      JMP +drawBlocks
0C2E2                           
0C2E2                           +ballIsDead:
0C2E2                               ;; Check if kill timer has reset
0C2E2 A5 40                         LDA kill_timer
0C2E4 F0 03                         BEQ +
0C2E6 4C F3 C2                          JMP +drawBlocks
0C2E9                               +
0C2E9                               
0C2E9                               ;; Take a live
0C2E9 C6 1F                         DEC ball_lives
0C2EB D0 03                         BNE +
0C2ED                                   ;; If no lives left, initiate game over sequence
0C2ED 4C A6 C3                          JMP lbl_GameOver
0C2F0                               +
0C2F0                               
0C2F0                               ;; Reload current level
0C2F0 4C BD C4                      JMP lbl_InitiateLevelLoad
0C2F3                           
0C2F3                           
0C2F3                           +drawBlocks:
0C2F3                               ;; Draw moving block(s, if any)
0C2F3                               .include "game/include/main/draw_blocks.asm"
0C2F3                           
0C2F3                           ;; Handle movement of move blocks
0C2F3                           
0C2F3                               ;; Set up a loop
0C2F3 A0 04                         LDY #MAX_ANIMATIONS
0C2F5                           -drawBlocksLoop:
0C2F5 88                            DEY
0C2F6                           
0C2F6                               ;; If timer is zero, check the next move block
0C2F6 B9 80 03                      LDA move_block_timer,y
0C2F9 F0 52                         BEQ +nextMoveBlock
0C2FB                               
0C2FB                               ;; Get current sprite pointer
0C2FB A6 3D                         LDX sprite_ram_pointer
0C2FD                           
0C2FD                               ;; Draw the sprites on screen
0C2FD B9 7C 03                      LDA move_block_y,y
0C300 9D 00 02                      STA ADDR_SPRITERAM,x
0C303 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C306 18                            CLC
0C307 69 08                         ADC #$08
0C309 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C30C 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C30F E8                            INX
0C310                           
0C310 A9 52                         LDA #$52 ; Top left chr id
0C312 9D 00 02                      STA ADDR_SPRITERAM,x
0C315 A9 53                         LDA #$53 ; Top right chr id
0C317 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C31A A9 62                         LDA #$62 ; Bottom left chr id
0C31C 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C31F A9 63                         LDA #$63 ; Bottom right chr id
0C321 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C324 E8                            INX
0C325                           
0C325 A9 00                         LDA #BALL_ATTR
0C327 9D 00 02                      STA ADDR_SPRITERAM,x
0C32A 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C32D 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C330 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C333 E8                            INX
0C334                           
0C334 B9 78 03                      LDA move_block_x,y
0C337 9D 00 02                      STA ADDR_SPRITERAM,x
0C33A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C33D 18                            CLC
0C33E 69 08                         ADC #$08
0C340 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C343 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C346                           
0C346                               ;; Update sprite RAM pointer
0C346 A5 3D                         LDA sprite_ram_pointer
0C348 18                            CLC
0C349 69 10                         ADC #$10
0C34B 85 3D                         STA sprite_ram_pointer
0C34D                           
0C34D                           
0C34D                           
0C34D                           +nextMoveBlock:
0C34D                               ;; Check the next move block
0C34D C0 00                         CPY #$00
0C34F D0 A4                         BNE -drawBlocksLoop
0C351                           
0C351 4C A0 C3                      JMP +doneScreenLoad
0C354                           
0C354                           
0C354                           
0C354                           +checkNextScreen:
0C354                           
0C354                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C354                               ;; Upon pressing START, the selected level will start
0C354                               .include "game/include/main/select_level.asm"
0C354                           
0C354                               ;; Change level number on start screen
0C354 A5 10                         LDA buttons_pressed
0C356 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C358 F0 3C                         BEQ +checkStartPress
0C35A                           
0C35A                                   ;; Select next level (1, 5, 9, 13, 17)
0C35A A5 42                             LDA current_level
0C35C 18                                CLC
0C35D 69 04                             ADC #$04
0C35F C9 14                             CMP #$14
0C361 D0 02                             BNE +
0C363 A9 00                                 LDA #$00
0C365                                   +
0C365 85 42                             STA current_level
0C367                                   
0C367                                   ;; Convert level number to two-byte value
0C367 A9 00                             LDA #$00
0C369 85 03                             STA temp+3
0C36B A5 42                             LDA current_level
0C36D 18                                CLC
0C36E 69 01                             ADC #$01
0C370                           
0C370                               -
0C370 C9 0A                             CMP #$0A
0C372 90 08                             BCC +
0C374 E6 03                                 INC temp+3
0C376 38                                    SEC
0C377 E9 0A                                 SBC #$0A
0C379 4C 70 C3                              JMP -
0C37C                                   +
0C37C                           
0C37C                                   ;; Add level number to PPU buffer
0C37C 18                                CLC
0C37D 69 01                             ADC #$01
0C37F 85 02                             STA temp+2
0C381 A9 20                             LDA #$20
0C383 85 00                             STA temp
0C385 A9 D0                             LDA #$D0
0C387 85 01                             STA temp+1
0C389 20 02 D1                          JSR sub_WriteByteToPPUBuffer
0C38C                                   
0C38C C6 01                             DEC temp+1
0C38E A4 03                             LDY temp+3
0C390 C8                                INY
0C391 84 02                             STY temp+2
0C393 20 02 D1                          JSR sub_WriteByteToPPUBuffer
0C396                                   
0C396                               +checkStartPress:
0C396                           
0C396                           
0C396                           
0C396                               ;; If START button is pressed
0C396 A5 10                         LDA buttons_pressed
0C398 29 10                         AND #BUTTON_START
0C39A F0 04                         BEQ +
0C39C                                   ;; Start the level
0C39C A9 81                             LDA #LOAD_GAME_SCREEN
0C39E 85 38                             STA screen_mode
0C3A0                               +
0C3A0                           
0C3A0                           
0C3A0                           
0C3A0                           +doneScreenLoad:
0C3A0                           
0C3A0                               ;; Load animations (if any)
0C3A0                               ;; and sprite clean-up
0C3A0 20 F0 C9                      JSR sub_LoadAnimations
0C3A3                           
0C3A3 4C 69 C0                      JMP lbl_MainGameLoop
0C3A6                           
0C3A6                           ;; Following sequences are outside main game loop
0C3A6                           .include "game/include/main/game_over.asm"
0C3A6                           
0C3A6                           ;; Game over sequence
0C3A6                           lbl_GameOver:
0C3A6                           
0C3A6                               ;; Disable noise channel
0C3A6 A9 00                         LDA #$00
0C3A8 8D 15 40                      STA APU_STATUS
0C3AB 8D 0C 40                      STA NOISE_VOLUME
0C3AE                               
0C3AE                               ;; Do blinds effect
0C3AE 20 7F C5                      JSR sub_BlindsEffect
0C3B1                           
0C3B1                               ;; Disable draw after HUD to disable screen
0C3B1 20 04 C5                      JSR sub_WaitForNMI
0C3B4                               -
0C3B4 AD 02 20                          LDA PPU_STATUS
0C3B7 29 40                             AND #SPRITE_0_HIT
0C3B9 D0 F9                         BNE -
0C3BB                               -
0C3BB AD 02 20                          LDA PPU_STATUS
0C3BE 29 40                             AND #SPRITE_0_HIT
0C3C0 F0 F9                         BEQ -
0C3C2 A9 00                         LDA #$00
0C3C4 8D 01 20                      STA PPU_MASK
0C3C7                           
0C3C7                               ;; Remove game area from view
0C3C7 2C 02 20                      BIT PPU_STATUS
0C3CA A9 20                         LDA #$20
0C3CC 8D 06 20                      STA PPU_ADDR
0C3CF A9 A0                         LDA #$A0
0C3D1 8D 06 20                      STA PPU_ADDR
0C3D4 A9 00                         LDA #$00
0C3D6 A2 16                         LDX #$16
0C3D8                               -xLoop:
0C3D8 A0 20                             LDY #$20
0C3DA                                   -yLoop:
0C3DA 8D 07 20                              STA PPU_DATA
0C3DD 88                                    DEY
0C3DE D0 FA                             BNE -yLoop
0C3E0 CA                                DEX
0C3E1 D0 F5                         BNE -xLoop
0C3E3                               
0C3E3                               ;; Pause for a little while
0C3E3 A2 18                         LDX #$18
0C3E5                               -
0C3E5 20 04 C5                          JSR sub_WaitForNMI
0C3E8 CA                                DEX
0C3E9 D0 FA                         BNE -
0C3EB                                       
0C3EB                               ;; Do flash effect
0C3EB 20 99 C9                      JSR sub_FlashEffect
0C3EE                           
0C3EE                               ;; Draw GAME OVER tiles over game screen
0C3EE A9 21                         LDA #$21
0C3F0 85 00                         STA temp
0C3F2 A9 EB                         LDA #$EB
0C3F4 85 01                         STA temp+1
0C3F6                           
0C3F6 A2 00                         LDX #$00
0C3F8                               -gameOverTileLoop:
0C3F8 BD 2A DA                          LDA tbl_GameOver,x
0C3FB 85 02                             STA temp+2
0C3FD 20 02 D1                          JSR sub_WriteByteToPPUBuffer
0C400 E6 01                             INC temp+1
0C402 E8                                INX
0C403 E0 0A                             CPX #$0A
0C405 D0 F1                         BNE -gameOverTileLoop
0C407                               
0C407                               ;; Update GAME OVER attributes on game screen
0C407 A9 23                         LDA #$23
0C409 85 00                         STA temp
0C40B A9 DA                         LDA #$DA
0C40D 85 01                         STA temp+1
0C40F A9 AA                         LDA #$AA
0C411 85 02                         STA temp+2
0C413 A2 04                         LDX #$04
0C415                               -
0C415 20 02 D1                          JSR sub_WriteByteToPPUBuffer
0C418 E6 01                             INC temp+1
0C41A CA                                DEX
0C41B D0 F8                         BNE -
0C41D 20 04 C5                      JSR sub_WaitForNMI
0C420                               
0C420                              
0C420                               ;; If player score is larger than high score
0C420                               ;; Overwrite high score with player score
0C420                               ;; [@TODO]
0C420                               
0C420                               
0C420                               ;; If player presses either A or START, (soft) reset the game
0C420                               -checkController:
0C420 20 F0 C4                          JSR sub_ReadController
0C423 A5 0F                             LDA buttons_held
0C425 29 90                             AND #%10010000
0C427 F0 F7                         BEQ -checkController
0C429 4C 4B C0                      JMP lbl_SoftReset
0C42C                           
0C42C                           .include "game/include/main/level_win.asm"
0C42C                           
0C42C                           ;; Handling of level win state
0C42C                           lbl_LevelWin:
0C42C                           
0C42C                               ;; Freeze the ball
0C42C A5 37                         LDA ball_flags
0C42E 09 04                         ORA #FREEZE_BALL
0C430 85 37                         STA ball_flags
0C432                           
0C432                               ;; Disable noise channel
0C432 A9 01                         LDA #$01
0C434 85 4B                         STA noise_muted
0C436                               
0C436                               ;; Wait a few frames
0C436 A2 18                         LDX #$18
0C438 20 DA D0                      JSR sub_WaitXFrames
0C43B                           
0C43B                               ;; Set null tile color to yellow
0C43B A9 3F                         LDA #$3F
0C43D 85 00                         STA temp
0C43F A9 02                         LDA #$02
0C441 85 01                         STA temp+1
0C443 A9 38                         LDA #$38
0C445 85 02                         STA temp+2
0C447 20 02 D1                      JSR sub_WriteByteToPPUBuffer
0C44A                               
0C44A                               ;; Quick and dirty way to remove ball from screen
0C44A A9 EF                         LDA #$EF
0C44C 8D 04 02                      STA ADDR_SPRITERAM+4
0C44F 8D 05 02                      STA ADDR_SPRITERAM+5
0C452 8D 06 02                      STA ADDR_SPRITERAM+6
0C455 8D 07 02                      STA ADDR_SPRITERAM+7
0C458                               
0C458                               ;; Initiate frequency beeps (@TODO)
0C458                               
0C458                               ;; Wait a few frames
0C458 A2 10                         LDX #$10
0C45A 20 DA D0                      JSR sub_WaitXFrames
0C45D                               
0C45D                               ;; Restore null tile color to dark blue
0C45D A9 3F                         LDA #$3F
0C45F 85 00                         STA temp
0C461 A9 02                         LDA #$02
0C463 85 01                         STA temp+1
0C465 A9 12                         LDA #$12
0C467 85 02                         STA temp+2
0C469 20 02 D1                      JSR sub_WriteByteToPPUBuffer
0C46C                           
0C46C                               ;; Wait a few frames
0C46C A2 2D                         LDX #$2D
0C46E 20 DA D0                      JSR sub_WaitXFrames
0C471                               
0C471                           
0C471                               ;; Play the end level sweep sound effect, and
0C471                               ;; initiate bonus score routine
0C471 A9 B8                         LDA #$B8
0C473 85 4A                         STA soft_pulse1
0C475                           
0C475 A9 01                         LDA #$01
0C477 8D 15 40                      STA APU_STATUS
0C47A 85 49                         STA do_beeps
0C47C                           
0C47C                               -bonusPointsLoop:
0C47C                                   ;; Check how many bonus points to subtract
0C47C                                   ;; (either the max, or what's left)
0C47C A5 2C                             LDA ball_bonus
0C47E 05 2D                             ORA ball_bonus+1
0C480 D0 06                             BNE +fullBonus
0C482 A5 2E                             LDA ball_bonus+2
0C484 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C486 90 02                             BCC +partBonus
0C488                           
0C488                                   +fullBonus:
0C488 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C48A                                   +partBonus:
0C48A                           
0C48A                                   ;; Put value that's added to score on the stack
0C48A AA                                TAX
0C48B BD 9E DA                          LDA tbl_BonusToScore,x
0C48E 48                                PHA
0C48F                           
0C48F                                   ;; Subtract X-register from bonus
0C48F 20 9D D0                          JSR sub_SubtractXFromBonus
0C492                           
0C492                                   ;; Get value from stack and add it to the score
0C492 68                                PLA
0C493 20 13 C5                          JSR sub_AddAccumulatorToScore
0C496                           
0C496                                   ;; Wait for NMI twice
0C496 20 04 C5                          JSR sub_WaitForNMI
0C499 20 04 C5                          JSR sub_WaitForNMI
0C49C                           
0C49C                                   ;; Check if bonus countdown is done
0C49C A5 2C                             LDA ball_bonus
0C49E 05 2D                             ORA ball_bonus+1
0C4A0 05 2E                             ORA ball_bonus+2
0C4A2 D0 D8                         BNE -bonusPointsLoop
0C4A4                           
0C4A4                               ;; fade out the beeping
0C4A4 A2 08                         LDX #$08
0C4A6                               -fadeOutLoop:
0C4A6 20 04 C5                          JSR sub_WaitForNMI
0C4A9 20 04 C5                          JSR sub_WaitForNMI
0C4AC C6 4A                             DEC soft_pulse1
0C4AE CA                                DEX
0C4AF D0 F5                         BNE -fadeOutLoop
0C4B1                           
0C4B1                               ;; Stop random beeping
0C4B1 A9 02                         LDA #$02
0C4B3 85 49                         STA do_beeps
0C4B5                               
0C4B5                               ;; Wait a few frames
0C4B5 A2 30                         LDX #$30
0C4B7 20 DA D0                      JSR sub_WaitXFrames
0C4BA                           
0C4BA                               ;; Load next level
0C4BA 4C BD C4                      JMP lbl_InitiateLevelLoad
0C4BD                               
0C4BD                           .include "game/include/main/initiate_level_load.asm"
0C4BD                           
0C4BD                           ;; Load level
0C4BD                           lbl_InitiateLevelLoad:
0C4BD                               
0C4BD                               ;; Blind out the screen
0C4BD 20 7F C5                      JSR sub_BlindsEffect
0C4C0                               
0C4C0                               ;; If ball is dead, (re)load current level
0C4C0                               ;; If ball is alive, load next level
0C4C0 A5 37                         LDA ball_flags
0C4C2 29 01                         AND #BALL_IS_DEAD
0C4C4 D0 05                         BNE +
0C4C6 E6 42                             INC current_level
0C4C8 4C D1 C4                          JMP +loadLevel
0C4CB                               +
0C4CB                               
0C4CB                               ;; Revive ball
0C4CB A5 37                         LDA ball_flags
0C4CD 29 FE                         AND #REVIVE_BALL
0C4CF 85 37                         STA ball_flags
0C4D1                           
0C4D1                           +loadLevel:
0C4D1                               ;; This loops back to level 1 after level 25 for now,
0C4D1                               ;; as a proper game ending is yet to be introduced.
0C4D1 A5 42                         LDA current_level
0C4D3 C9 19                         CMP #25
0C4D5 D0 04                         BNE +
0C4D7 A9 00                             LDA #$00
0C4D9 85 42                             STA current_level
0C4DB                               +
0C4DB                               
0C4DB                               ;; Tell the game to load the level screen on the next loop.
0C4DB A9 81                         LDA #LOAD_GAME_SCREEN
0C4DD 85 38                         STA screen_mode
0C4DF                           
0C4DF                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C4DF 4C 69 C0                      JMP lbl_MainGameLoop0C4E2                           
0C4E2                           
0C4E2                           ;; Subroutines
0C4E2                           .include "include/subroutines.asm"
0C4E2                           
0C4E2                           ;; RNG
0C4E2                           .include "subroutine/GetRandomNumber.asm"
0C4E2                           
0C4E2                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4E2                           ;;
0C4E2                           ;; subroutine/GetRandomNumber.asm
0C4E2                           ;;
0C4E2                           ;; Simple and fast random number generator by White Flame.
0C4E2                           ;;
0C4E2                           ;; Set random_seed to an arbitrary number to randomize between
0C4E2                           ;; gaming sessions, for instance using the frame timer upon
0C4E2                           ;; pressing START on the intro screen.
0C4E2                           ;;
0C4E2                           ;;     ;; IF START PRESSED:
0C4E2                           ;;     LDA frame_counter
0C4E2                           ;;     STA random_seed
0C4E2                           ;;
0C4E2                           ;; Source:
0C4E2                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C4E2                           ;;
0C4E2                           ;;
0C4E2                           
0C4E2                           sub_GetRandomNumber:
0C4E2                               ;; Force EOR if random_seed is zero
0C4E2 A5 16                         LDA random_seed
0C4E4 F0 05                         BEQ +doEor
0C4E6                           
0C4E6                               ;; Shift left, and EOR if the high bit is set
0C4E6 0A                            ASL
0C4E7 F0 04                         BEQ +noEor
0C4E9 90 02                         BCC +noEor
0C4EB                           
0C4EB                           +doEor:
0C4EB 49 1D                         EOR #$1D
0C4ED                           
0C4ED                           +noEor:
0C4ED 85 16                         STA random_seed
0C4EF                           
0C4EF 60                            RTS
0C4F0                           
0C4F0                           
0C4F0                           ;; Read controller input
0C4F0                           .include "subroutine/ReadController.asm"
0C4F0                           
0C4F0                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4F0                           ;;
0C4F0                           ;; subroutine/ReadController.asm
0C4F0                           ;;
0C4F0                           ;; Subroutine that polls the controller and stores the input
0C4F0                           ;; buttons in a variable. This version only handles controller
0C4F0                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C4F0                           ;;
0C4F0                           ;;
0C4F0                           
0C4F0                           sub_ReadController:
0C4F0                           
0C4F0                               ;; Set strobe bit
0C4F0 A9 01                         LDA #$01
0C4F2 8D 16 40                      STA JOYPAD_1
0C4F5                           
0C4F5                               ;; Set up ring timer
0C4F5 85 0F                         STA buttons_held
0C4F7                           
0C4F7                               ;; Clear strobe bit
0C4F7 4A                            LSR
0C4F8 8D 16 40                      STA JOYPAD_1
0C4FB                           
0C4FB                               ;; Loop through button presses
0C4FB                               -
0C4FB AD 16 40                          LDA JOYPAD_1
0C4FE 4A                                LSR
0C4FF 26 0F                             ROL buttons_held
0C501                           
0C501                               ;; Check if ring timer is done
0C501 90 F8                         BCC -
0C503                           
0C503                               ;; Return from subroutine
0C503 60                            RTS
0C504                           
0C504                           
0C504                           ;; vBlank/NMI wait
0C504                           .include "subroutine/WaitForNMI.asm"
0C504                           
0C504                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C504                           ;;
0C504                           ;; subroutine/WaitForVBlank.asm
0C504                           ;;
0C504                           ;; Subroutine that essentially pauses script execution until
0C504                           ;; vBlank happens.
0C504                           ;;
0C504                           ;;
0C504                           
0C504                           sub_WaitForNMI:
0C504 A9 01                         LDA #$01
0C506 85 52                         STA check_nmi
0C508                               -
0C508 A5 52                             LDA check_nmi
0C50A D0 FC                         BNE -
0C50C 60                            RTS
0C50D                           
0C50D                           .include "subroutine/WaitForVBlank.asm"
0C50D                           
0C50D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C50D                           ;;
0C50D                           ;; subroutine/WaitForVBlank.asm
0C50D                           ;;
0C50D                           ;; Subroutine that essentially pauses script execution until
0C50D                           ;; vBlank happens.
0C50D                           ;;
0C50D                           ;;
0C50D                           
0C50D                           sub_WaitForVBlank:
0C50D 2C 02 20                      BIT $2002
0C510 10 FB                         BPL sub_WaitForVBlank
0C512 60                            RTS
0C513                           
0C513                           
0C513                           ;; Game specific subroutines
0C513                           .include "game/include/subroutines.asm"
0C513                           
0C513                           ;; additional game-specific subroutines go here
0C513                           
0C513                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C513                           
0C513                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C513                           ;;
0C513                           ;;  sub_AddAccumulatorToScore.asm
0C513                           ;;
0C513                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C513                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C513                           ;;  actual score.
0C513                           ;;
0C513                           ;;
0C513                           
0C513                           
0C513                           sub_AddAccumulatorToScore:
0C513                           
0C513                               ;; Clear old add_to_score
0C513 A2 05                         LDX #$05
0C515 A0 00                         LDY #$00
0C517                               -
0C517 94 26                             STY add_to_score,x
0C519 CA                                DEX
0C51A 10 FB                         BPL -
0C51C                           
0C51C                               ;; Set accumulator to add_to_score variables
0C51C                               ;; Check and update 100s
0C51C                               -checkHundreds:
0C51C C9 64                             CMP #100
0C51E 90 08                             BCC +checkTens
0C520 38                                    SEC
0C521 E9 64                                 SBC #100
0C523 E6 29                                 INC add_to_score+3
0C525 4C 1C C5                              JMP -checkHundreds
0C528                                   +checkTens:
0C528                           
0C528                               ;; Check and update 10s
0C528                               -checkTens:
0C528 C9 0A                             CMP #10
0C52A 90 08                             BCC +setOnes
0C52C 38                                    SEC
0C52D E9 0A                                 SBC #10
0C52F E6 2A                                 INC add_to_score+4
0C531 4C 28 C5                              JMP -checkTens
0C534                                   +setOnes:
0C534                           
0C534                               ;; We're left with 1s
0C534 85 2B                         STA add_to_score+5
0C536                           
0C536                               ;; Byte for byte, add add_to_score to ball_score
0C536 A9 00                         LDA #$00
0C538 85 39                         STA ppu_buffer_update
0C53A A4 3A                         LDY ppu_buffer_pointer
0C53C A2 05                         LDX #$05
0C53E                               -
0C53E B5 26                             LDA add_to_score,x
0C540 18                                CLC
0C541 75 20                             ADC ball_score,x
0C543 C9 0A                             CMP #10
0C545 90 05                             BCC +
0C547 38                                    SEC
0C548 E9 0A                                 SBC #10
0C54A F6 1F                                 INC ball_score-1,x
0C54C                                   +
0C54C                                   
0C54C                                   ;; Update new score digit
0C54C 95 20                             STA ball_score,x
0C54E                           
0C54E                                   ;; Update score tile in PPU
0C54E A9 20                             LDA #$20
0C550 99 00 03                          STA ppu_buffer,y
0C553 C8                                INY
0C554 8A                                TXA
0C555 18                                CLC
0C556 69 83                             ADC #$83
0C558 99 00 03                          STA ppu_buffer,y
0C55B C8                                INY
0C55C B5 20                             LDA ball_score,x
0C55E 18                                CLC
0C55F 69 01                             ADC #$01
0C561 99 00 03                          STA ppu_buffer,y
0C564 C8                                INY
0C565                           
0C565                                   ;; Check next digit (if any left)
0C565 CA                                DEX
0C566 30 03                             BMI +done
0C568 4C 3E C5                      JMP -
0C56B                           
0C56B                           +done:
0C56B                               ;; Update PPU buffer pointer and status
0C56B 84 3A                         STY ppu_buffer_pointer
0C56D A9 01                         LDA #$01
0C56F 85 39                         STA ppu_buffer_update
0C571                           
0C571                               ;; Done: return 
0C571 60                            RTS
0C572                           
0C572                           .include "game/subroutine/BackgroundNoise.asm"
0C572                           
0C572                           ;; Play background noise
0C572                           sub_BackgroundNoise:
0C572 A9 32                         LDA #$32
0C574 8D 0C 40                      STA NOISE_VOLUME
0C577 A9 0E                         LDA #$0E
0C579 8D 0E 40                      STA NOISE_PERIOD
0C57C 85 47                         STA current_noise
0C57E 60                            RTS
0C57F                           
0C57F                           .include "game/subroutine/BlindsEffect.asm"
0C57F                           
0C57F                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C57F                           sub_BlindsEffect:
0C57F                           
0C57F                               ;; Set up loop fading
0C57F A9 00                         LDA #$00
0C581 85 07                         STA temp+7
0C583 A0 08                         LDY #$08
0C585                               -fadeLoop:
0C585 84 08                             STY temp+8
0C587                           
0C587                                   ;; Wait for NMI to pass
0C587 20 04 C5                          JSR sub_WaitForNMI
0C58A                                   
0C58A                                   ;; Now wait for No-sprite 0
0C58A                                   -
0C58A AD 02 20                              LDA PPU_STATUS
0C58D 29 40                                 AND #SPRITE_0_HIT
0C58F D0 F9                             BNE -
0C591                               
0C591                                   ;; Now wait for Sprite 0
0C591                                   -
0C591 AD 02 20                              LDA PPU_STATUS
0C594 29 40                                 AND #SPRITE_0_HIT
0C596 F0 F9                             BEQ -
0C598                                   
0C598                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C598 20 EF D0                          JSR sub_Waste6
0C59B 20 F2 D0                          JSR sub_Waste5
0C59E 20 F5 D0                          JSR sub_Waste4
0C5A1 20 F8 D0                          JSR sub_Waste3
0C5A4 20 FE D0                          JSR sub_Waste1
0C5A7 20 01 D1                          JSR sub_Waste0
0C5AA                                   
0C5AA                                   
0C5AA                                   ;; Setup tile row loop
0C5AA A0 16                             LDY #22
0C5AC                                   -tileLoop:
0C5AC                                   
0C5AC                                       ;; Disable drawing
0C5AC A5 12                                 LDA soft_ppu_mask
0C5AE 29 F7                                 AND #%11110111
0C5B0 8D 01 20                              STA PPU_MASK
0C5B3                                       
0C5B3                                       ;; Set up scanline loop
0C5B3 A2 08                                 LDX #$08
0C5B5                                       -scanlineLoop:
0C5B5 E4 08                                     CPX temp+8
0C5B7 D0 0A                                     BNE +wasteTime
0C5B9                                           
0C5B9                                           ;; Restore drawing
0C5B9 A5 12                                     LDA soft_ppu_mask
0C5BB 09 08                                     ORA #%00001000
0C5BD 8D 01 20                                  STA PPU_MASK
0C5C0 4C C9 C5                                  JMP +wasteMoreTime
0C5C3                           
0C5C3                                           ;; Waste 12 frames
0C5C3                                           +wasteTime:
0C5C3 E6 53                                     INC void     ;+5
0C5C5 C6 53                                     DEC void     ;+5
0C5C7 49 00                                     EOR #$00     ;+2
0C5C9                                           
0C5C9                                           ;; Waste about a scanline worth of frames
0C5C9                                           +wasteMoreTime:
0C5C9 20 FB D0                                  JSR sub_Waste2
0C5CC 20 01 D1                                  JSR sub_Waste0
0C5CF 20 01 D1                                  JSR sub_Waste0
0C5D2 E6 53                                     INC void
0C5D4 49 00                                     EOR #$00
0C5D6 49 00                                     EOR #$00
0C5D8 CA                                        DEX
0C5D9 D0 DA                                 BNE -scanlineLoop
0C5DB C6 53                                 DEC void
0C5DD 49 00                                 EOR #$00
0C5DF 88                                    DEY
0C5E0 D0 CA                             BNE -tileLoop
0C5E2                           
0C5E2 A4 08                             LDY temp+8
0C5E4                                   
0C5E4 E6 07                             INC temp+7
0C5E6 A5 07                             LDA temp+7
0C5E8 C9 02                             CMP #$02
0C5EA D0 99                             BNE -fadeLoop
0C5EC                           
0C5EC A9 00                             LDA #$00
0C5EE 85 07                             STA temp+7
0C5F0 88                                DEY
0C5F1 D0 92                         BNE -fadeLoop
0C5F3                               
0C5F3 60                            RTS
0C5F4                           
0C5F4                           .include "game/subroutine/ClearScreen.asm"
0C5F4                           
0C5F4                           ;; Subroutine to clear the screen
0C5F4                           ;; If it's a game screen, add noise
0C5F4                           
0C5F4                           sub_ClearScreen:
0C5F4                               ;; Check of game screen or not
0C5F4 A5 38                         LDA screen_mode
0C5F6 29 03                         AND #CHECK_SCREEN_MODE
0C5F8 C9 01                         CMP #IS_GAME_SCREEN
0C5FA F0 02                         BEQ +
0C5FC A9 00                             LDA #$00
0C5FE                               +
0C5FE 85 01                         STA temp+1
0C600                               
0C600                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C600 2C 02 20                      BIT PPU_STATUS
0C603 A9 20                         LDA #$20
0C605 8D 06 20                      STA PPU_ADDR
0C608 A9 00                         LDA #$00
0C60A 8D 06 20                      STA PPU_ADDR
0C60D                               
0C60D                               ;; Set up tile to draw and loop
0C60D 85 00                         STA temp
0C60F AA                            TAX
0C610 A8                            TAY
0C611                           
0C611                               -     
0C611                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C611 A5 00                             LDA temp
0C613 8D 07 20                          STA PPU_DATA
0C616                           
0C616                                   ;; Check if we should draw noise next. Noise is drawn if:
0C616                                   ;; - Screen mode is game screen
0C616                                   ;; - Y between #$06 and #$19 (inclusive)
0C616                                   ;; - X between #$02 and #$1D (inclusive)
0C616                                   
0C616                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C616 A5 01                             LDA temp+1
0C618 F0 1C                             BEQ +nextTileInRow
0C61A                                   
0C61A                                   ;; If Y < $6, skip the check
0C61A C0 06                             CPY #$06
0C61C 90 18                             BCC +nextTileInRow
0C61E                                   
0C61E                                   ;; If X < $1, skip the check
0C61E E0 01                             CPX #$01
0C620 90 14                             BCC +nextTileInRow
0C622                                   
0C622                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C622 E0 1D                             CPX #$1D
0C624 D0 04                             BNE +
0C626 A9 00                                 LDA #$00
0C628 85 00                                 STA temp
0C62A                                   +
0C62A B0 0A                             BCS +nextTileInRow
0C62C                                   
0C62C                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C62C 20 E2 C4                          JSR sub_GetRandomNumber
0C62F 29 07                             AND #%00000111
0C631 18                                CLC
0C632 69 68                             ADC #$68
0C634 85 00                             STA temp
0C636                           
0C636                           +nextTileInRow:
0C636                                   
0C636                                   ;; Check if a row has been done. If not, draw the next
0C636 E8                                INX
0C637 E0 20                             CPX #$20
0C639 D0 D6                             BNE -
0C63B                                   
0C63B                                   ;; Go to the next row (if any left)
0C63B A2 00                             LDX #00
0C63D C8                                INY
0C63E                                   
0C63E                                   ;; If Y is 1A, skip noise tile check until done drawing
0C63E C0 1A                             CPY #$1A
0C640 D0 04                             BNE +
0C642 A9 00                                 LDA #$00
0C644 85 01                                 STA temp+1
0C646                                   +
0C646                                   
0C646 C0 1E                             CPY #$1E
0C648 D0 C7                         BNE -
0C64A                           
0C64A                               ;; Clear attribute table
0C64A A9 23                         LDA #$23
0C64C 8D 06 20                      STA PPU_ADDR
0C64F A9 C0                         LDA #$C0
0C651 8D 06 20                      STA PPU_ADDR
0C654 A9 00                         LDA #$00
0C656 A2 40                         LDX #$40
0C658                               -
0C658 8D 07 20                          STA PPU_DATA
0C65B CA                                DEX
0C65C D0 FA                         BNE -
0C65E                               
0C65E 60                            RTS
0C65F                           
0C65F                           .include "game/subroutine/ColorizeBall.asm"
0C65F                           
0C65F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C65F                           ;;
0C65F                           ;;  Subroutine: ColorizeBall
0C65F                           ;;
0C65F                           ;;  Applies the color set through ball_flags to the ball sprite.
0C65F                           ;;  Expects ball_flags to be in the accumulator
0C65F                           ;;
0C65F                           
0C65F                           
0C65F                           sub_ColorizeBall:
0C65F                           
0C65F                               ;; Get color from ball_flags
0C65F 4A                            LSR
0C660 4A                            LSR
0C661 4A                            LSR
0C662 4A                            LSR
0C663 4A                            LSR
0C664 AA                            TAX
0C665                           
0C665                               ;; Add new light color of ball to PPU palette
0C665 A9 3F                         LDA #$3F
0C667 85 00                         STA temp
0C669 A9 11                         LDA #$11
0C66B 85 01                         STA temp+1
0C66D BD 66 D2                      LDA tbl_BallColorLight,x
0C670 85 02                         STA temp+2
0C672 20 02 D1                      JSR sub_WriteByteToPPUBuffer
0C675                               
0C675                               ;; Add new dark color of ball to PPU palette
0C675 E6 01                         INC temp+1
0C677 BD 60 D2                      LDA tbl_BallColorDark,x
0C67A 85 02                         STA temp+2
0C67C 20 02 D1                      JSR sub_WriteByteToPPUBuffer
0C67F                               
0C67F 60                            RTS
0C680                           
0C680                           .include "game/subroutine/ColorsMatch.asm"
0C680                           
0C680                           ;; Subroutine to check if ball color matches colliding tile color
0C680                           
0C680                           sub_ColorsMatch:
0C680                               ;; Save tile color in temp variable
0C680 A5 43                         LDA colliding_tile
0C682 29 0E                         AND #%00001110
0C684 85 00                         STA temp
0C686                           
0C686                               ;; Get ball color
0C686 A5 37                         LDA ball_flags
0C688 29 E0                         AND #%11100000
0C68A 4A                            LSR
0C68B 4A                            LSR
0C68C 4A                            LSR
0C68D 4A                            LSR
0C68E                           
0C68E                               ;; Compare with tile color
0C68E C5 00                         CMP temp
0C690 60                            RTS
0C691                           
0C691                           .include "game/subroutine/ConvertXYToTileType.asm"
0C691                           
0C691                           ;; Subroutine to convert the ball's position to a tile type
0C691                           ;; - Expects temp to be y-position of ball within game area
0C691                           ;; - Expects temp+1 to be x-position of ball within game area
0C691                           ;; - Puts result in accumulator and zp variable
0C691                           ;; - Corrupts X-register
0C691                           
0C691                           sub_ConvertXYToTileType:
0C691 A5 01                         LDA temp+1
0C693 4A                            LSR
0C694 4A                            LSR
0C695 4A                            LSR
0C696 4A                            LSR
0C697 85 09                         STA temp+9
0C699 A5 00                         LDA temp
0C69B 29 F0                         AND #%11110000
0C69D 18                            CLC
0C69E 65 09                         ADC temp+9
0C6A0 85 09                         STA temp+9
0C6A2 AA                            TAX
0C6A3 BD 00 04                      LDA tile_type, x
0C6A6 85 43                         STA colliding_tile
0C6A8 60                            RTS
0C6A9                           
0C6A9                           .include "game/subroutine/DisableEnableRendering.asm"
0C6A9                           
0C6A9                           ;; Subroutines to disable or enable screen rendering
0C6A9                           
0C6A9                           sub_DisableRendering:
0C6A9                               ;; Force NMI skip, disable rendering
0C6A9 A9 01                     	LDA #$01
0C6AB 85 14                     	STA force_skip_nmi
0C6AD 20 0D C5                      JSR sub_WaitForVBlank
0C6B0 A5 12                         LDA soft_ppu_mask
0C6B2 29 E7                         AND #%11100111
0C6B4 8D 01 20                      STA PPU_MASK
0C6B7 85 12                         STA soft_ppu_mask
0C6B9 20 0D C5                      JSR sub_WaitForVBlank
0C6BC 60                            RTS
0C6BD                           
0C6BD                           sub_EnableRendering:
0C6BD                               ;; Enable rendering
0C6BD A9 00                     	LDA #$00
0C6BF 8D 05 20                  	STA PPU_SCROLL
0C6C2 8D 05 20                  	STA PPU_SCROLL
0C6C5 20 0D C5                      JSR sub_WaitForVBlank
0C6C8 85 14                     	STA force_skip_nmi
0C6CA A5 12                         LDA soft_ppu_mask
0C6CC 09 18                         ORA #%00011000
0C6CE 85 12                         STA soft_ppu_mask
0C6D0 8D 01 20                      STA PPU_MASK
0C6D3 20 0D C5                      JSR sub_WaitForVBlank
0C6D6 60                            RTS
0C6D7                           
0C6D7                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C6D7                           
0C6D7                           ;; Draw a tile from the logo on the intro screen
0C6D7                           sub_drawIntroScreenLogoTile:
0C6D7 B9 48 D1                      LDA tbl_IntroScreenLogoChr,y
0C6DA C9 60                         CMP #$60
0C6DC D0 08                         BNE +
0C6DE 20 E2 C4                          JSR sub_GetRandomNumber
0C6E1 29 07                             AND #$07
0C6E3 18                                CLC
0C6E4 69 60                             ADC #$60
0C6E6                               +
0C6E6 8D 07 20                      STA PPU_DATA
0C6E9 60                            RTS
0C6EA                           
0C6EA                           .include "game/subroutine/DrawMoveTile.asm"
0C6EA                           
0C6EA                           ;; Draw the move tile as follows:
0C6EA                           ;;
0C6EA                           ;;  1 2
0C6EA                           ;;  3 4 5
0C6EA                           ;;    6 7
0C6EA                           ;;
0C6EA                           ;; (1,2,3,4) is the move block itself
0C6EA                           ;; (5,6,7) are shades unless that tile is solid
0C6EA                           
0C6EA                           ;; X holds the move block sprite slot
0C6EA                           
0C6EA                           sub_DrawMoveTile:
0C6EA                           
0C6EA                               ;; Get tile type index from sprite x and y values
0C6EA                               ;; and store it in a temp variable
0C6EA BD 78 03                      LDA move_block_x,x
0C6ED 18                            CLC
0C6EE 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C6F0 4A                            LSR
0C6F1 4A                            LSR
0C6F2 4A                            LSR
0C6F3 4A                            LSR
0C6F4 85 09                         STA temp+9
0C6F6 BD 7C 03                      LDA move_block_y,x
0C6F9 18                            CLC
0C6FA 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C6FC 29 F0                         AND #%11110000
0C6FE 18                            CLC
0C6FF 65 09                         ADC temp+9
0C701 85 09                         STA temp+9
0C703 A8                            TAY
0C704                               
0C704                               ;; Add move tile data on the new tile location
0C704 BD 84 03                      LDA move_block_tile_type,x
0C707 99 00 04                      STA tile_type,y
0C70A                           
0C70A                               ;; Draw the original tile type in the ppu buffer
0C70A                               ;; - get PPU address to write to (temp, temp+1)
0C70A 8A                            TXA
0C70B 48                            PHA
0C70C A6 09                         LDX temp+9
0C70E 20 B7 C9                      JSR sub_GetPPUAddrFromYXIndex
0C711 68                            PLA
0C712 AA                            TAX
0C713                               
0C713                               ;; - based on color, select tile 42 or 4A for top left
0C713 BD 88 03                      LDA move_block_flags,x
0C716 4A                            LSR
0C717 4A                            LSR
0C718 4A                            LSR
0C719 4A                            LSR
0C71A 4A                            LSR
0C71B A8                            TAY
0C71C B9 23 DA                      LDA tbl_MoveBlockTopLeftTile,y
0C71F 85 08                         STA temp+8
0C721                               
0C721                               ;; - save palette ID in temp+6
0C721 98                            TYA
0C722 4A                            LSR
0C723 85 06                         STA temp+6
0C725                               
0C725                               ;; Prepare PPU buffer
0C725 A4 3A                         LDY ppu_buffer_pointer
0C727 A9 00                         LDA #$00
0C729 85 39                         STA ppu_buffer_update
0C72B                               
0C72B                               ;; Draw tile 1 (top left tile of move block)
0C72B 20 0C C8                      JSR sub_DrawTileTemp018
0C72E                           
0C72E                               
0C72E                               ;; Draw tile 2 (top right tile of move block)
0C72E E6 01                         INC temp+1
0C730 E6 08                         INC temp+8
0C732 20 0C C8                      JSR sub_DrawTileTemp018
0C735                           
0C735                               ;; Draw tile 3 (bottom left tile of move block)
0C735 A5 01                         LDA temp+1
0C737 18                            CLC
0C738 69 1F                         ADC #$1F
0C73A 85 01                         STA temp+1
0C73C A5 00                         LDA temp
0C73E 69 00                         ADC #$00
0C740 85 00                         STA temp
0C742 A5 08                         LDA temp+8
0C744 18                            CLC
0C745 69 0F                         ADC #$0F
0C747 85 08                         STA temp+8
0C749 20 0C C8                      JSR sub_DrawTileTemp018
0C74C                           
0C74C                               ;; Draw tile 4 (bottom right tile of move block)
0C74C E6 01                         INC temp+1
0C74E E6 08                         INC temp+8
0C750 20 0C C8                      JSR sub_DrawTileTemp018
0C753                           
0C753                               ;; Load tile type offset in X register
0C753 8A                            TXA
0C754 48                            PHA
0C755 A6 09                         LDX temp+9
0C757                               
0C757                               ;; Load shade tile in temp+8
0C757 A9 00                         LDA #$00
0C759 85 08                         STA temp+8
0C75B                           
0C75B                               ;; Draw tile 5 (right shade) unless tile is solid
0C75B E6 01                         INC temp+1
0C75D                               
0C75D 8A                            TXA
0C75E 29 0F                         AND #%00001111
0C760 C9 0D                         CMP #$0D
0C762 F0 0A                         BEQ +nextTile
0C764                           
0C764 BD 01 04                      LDA tile_type+1,x
0C767 29 01                         AND #%00000001
0C769 D0 03                         BNE +nextTile
0C76B                               
0C76B 20 0C C8                      JSR sub_DrawTileTemp018
0C76E                               
0C76E                           
0C76E                           +nextTile:
0C76E                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C76E A5 01                         LDA temp+1
0C770 18                            CLC
0C771 69 1F                         ADC #$1F
0C773 85 01                         STA temp+1
0C775 A5 00                         LDA temp
0C777 69 00                         ADC #$00
0C779 85 00                         STA temp
0C77B                           
0C77B 8A                            TXA
0C77C 29 F0                         AND #%11110000
0C77E C9 90                         CMP #$90
0C780 F0 0A                         BEQ +nextTile
0C782                           
0C782 BD 10 04                      LDA tile_type+16,x
0C785 29 01                         AND #%00000001
0C787 D0 03                         BNE +nextTile
0C789                               
0C789 20 0C C8                      JSR sub_DrawTileTemp018
0C78C                           
0C78C                               
0C78C                           +nextTile:
0C78C                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C78C E6 01                         INC temp+1
0C78E                           
0C78E 8A                            TXA
0C78F 29 F0                         AND #%11110000
0C791 C9 90                         CMP #$90
0C793 F0 11                         BEQ +setTileAttributes
0C795                               
0C795 8A                            TXA
0C796 29 0F                         AND #%00001111
0C798 C9 0D                         CMP #$0D
0C79A F0 0A                         BEQ +setTileAttributes
0C79C                               
0C79C BD 11 04                      LDA tile_type+17,x
0C79F 29 01                         AND #%00000001
0C7A1 D0 03                         BNE +setTileAttributes
0C7A3                               
0C7A3 20 0C C8                      JSR sub_DrawTileTemp018
0C7A6                               
0C7A6                           
0C7A6                           +setTileAttributes:
0C7A6                               ;; Update attribute table accordingly through ppu buffer
0C7A6                               ;; - PPU buffer high byte
0C7A6 20 73 D0                      JSR sub_SetTileAttributeAddress
0C7A9                           
0C7A9 8A                            TXA
0C7AA 29 10                         AND #%00010000
0C7AC F0 05                         BEQ +        
0C7AE A9 F0                             LDA #%11110000
0C7B0 4C B5 C7                          JMP ++
0C7B3                               +
0C7B3 A9 0F                         LDA #%00001111
0C7B5                               ++
0C7B5 85 02                         STA temp+2
0C7B7                               
0C7B7 8A                            TXA
0C7B8 29 01                         AND #%00000001
0C7BA F0 07                         BEQ +
0C7BC A5 02                             LDA temp+2
0C7BE 09 CC                             ORA #%11001100
0C7C0 4C C7 C7                          JMP ++
0C7C3                               +
0C7C3 A5 02                         LDA temp+2
0C7C5 09 33                         ORA #%00110011
0C7C7                               ++
0C7C7 85 02                         STA temp+2
0C7C9                               
0C7C9 C9 FC                         CMP #%11111100
0C7CB F0 22                         BEQ +continue
0C7CD                               
0C7CD C9 F3                         CMP #%11110011
0C7CF D0 09                         BNE +
0C7D1 A5 06                             LDA temp+6
0C7D3 0A                                ASL
0C7D4 0A                                ASL
0C7D5 85 06                             STA temp+6
0C7D7 4C EF C7                          JMP +continue
0C7DA                               +
0C7DA                               
0C7DA C9 CF                         CMP #%11001111
0C7DC D0 0A                         BNE +
0C7DE A6 06                             LDX temp+6
0C7E0 BD C4 D9                          LDA tbl_Times16,x
0C7E3 85 06                             STA temp+6
0C7E5 4C EF C7                          JMP +continue
0C7E8                               +
0C7E8                               
0C7E8 A6 06                         LDX temp+6
0C7EA BD D4 D9                      LDA tbl_Times64,x
0C7ED 85 06                         STA temp+6
0C7EF                                   
0C7EF                           +continue:
0C7EF A5 00                         LDA temp
0C7F1 38                            SEC
0C7F2 E9 C0                         SBC #$C0
0C7F4 AA                            TAX
0C7F5 BD A0 04                      LDA tile_attributes,x
0C7F8 25 02                         AND temp+2
0C7FA 05 06                         ORA temp+6
0C7FC 9D A0 04                      STA tile_attributes,x
0C7FF 99 00 03                      STA ppu_buffer,y
0C802 C8                            INY
0C803                           
0C803                               ;; Restore original X
0C803 68                            PLA
0C804 AA                            TAX
0C805                               
0C805                               ;; Update PPU buffer
0C805 84 3A                         STY ppu_buffer_pointer
0C807 A9 01                         LDA #$01
0C809 85 39                         STA ppu_buffer_update
0C80B                           
0C80B                               ;; Return
0C80B 60                            RTS
0C80C                           
0C80C                           .include "game/subroutine/DrawTileTemp018.asm"
0C80C                           
0C80C                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C80C                           
0C80C                           sub_DrawTileTemp018:
0C80C A5 00                         LDA temp
0C80E 99 00 03                      STA ppu_buffer,y
0C811 C8                            INY
0C812 A5 01                         LDA temp+1
0C814 99 00 03                      STA ppu_buffer,y
0C817 C8                            INY
0C818 A5 08                         LDA temp+8
0C81A 99 00 03                      STA ppu_buffer,y
0C81D C8                            INY
0C81E 60                            RTS
0C81F                           
0C81F                           .include "game/subroutine/EvaluateTileType.asm"
0C81F                           
0C81F                           ;; Subroutine to evaluate the colliding tile type and take its
0C81F                           ;; corresponding action (move block, kill player, ...)
0C81F                           ;; - Expects X-register to be the tile_type offset
0C81F                           ;; - Uses zp variable colliding_tile
0C81F                           
0C81F                           sub_EvaluateTileType:
0C81F                           
0C81F                               ;; Check if collided tile is a color block
0C81F A5 43                         LDA colliding_tile
0C821 29 80                         AND #IS_COLOR_BLOCK
0C823 D0 03                         BNE +
0C825 4C 8E C8                          JMP +checkIfPaintBlock
0C828                               +
0C828                               
0C828                               ;; It's a color block. Check if the colors match
0C828 20 80 C6                      JSR sub_ColorsMatch
0C82B F0 06                         BEQ +
0C82D                                   ;; Colors don't match
0C82D                                   ;; Play bounce sound effect
0C82D A2 02                             LDX #SFX_BOUNCE
0C82F 20 EE CE                          JSR sub_PreloadSfxFromX
0C832                                   
0C832                                   ;; Return
0C832 60                                RTS
0C833                               +
0C833                           
0C833                               ;; Colors match; destroy color block
0C833                               
0C833                               ;; Convert the metatile offset value (which is in the X register)
0C833                               ;; to its corresponding address in PPU
0C833 20 B7 C9                      JSR sub_GetPPUAddrFromYXIndex
0C836                           
0C836                               ;; Remove color block from screen by drawing a total
0C836                               ;; of 7 tiles over it (shade included)
0C836 20 FD CE                      JSR sub_RemoveBlockFromScreen
0C839                               
0C839                               ;; - Load destruction animation on tile
0C839                               ;; Get most recent slot for explosion    
0C839 8A                            TXA
0C83A 85 02                         STA temp+2
0C83C A6 3B                         LDX explosion_pointer
0C83E                           
0C83E                               ;; If 0, use max pointer value
0C83E D0 02                         BNE +
0C840 A2 04                             LDX #MAX_ANIMATIONS
0C842                               +
0C842                           
0C842                               ;; Decrease pointer by one
0C842 CA                            DEX
0C843 86 3B                         STX explosion_pointer
0C845                           
0C845                               ;; Load explosion data into RAM
0C845 A9 00                         LDA #$00
0C847 9D 64 03                      STA explosion_currentframe,x
0C84A                           
0C84A A9 04                         LDA #ANIMATION_SPEED
0C84C 9D 60 03                      STA explosion_timer,x
0C84F                           
0C84F A5 02                         LDA temp+2
0C851 29 0F                         AND #%00001111
0C853 A8                            TAY
0C854 B9 C4 D9                      LDA tbl_Times16,y
0C857 18                            CLC
0C858 69 0E                         ADC #$0E
0C85A 9D 6C 03                      STA explosion_x,x
0C85D                           
0C85D A5 02                         LDA temp+2
0C85F 29 F0                         AND #%11110000
0C861 18                            CLC
0C862 69 29                         ADC #$29
0C864 9D 70 03                      STA explosion_y,x
0C867                           
0C867 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C869 9D 68 03                      STA explosion_attributes,x
0C86C A9 01                         LDA #$01
0C86E 9D 74 03                      STA explosion_active,x
0C871                           
0C871 A5 02                         LDA temp+2
0C873 AA                            TAX
0C874                               
0C874                               
0C874                               ;; - Write #$00 in tile type ram (makes not-solid)
0C874 A9 00                         LDA #$00
0C876 9D 00 04                      STA tile_type, x
0C879                           
0C879                           
0C879                               ;; Add (80 + level number) to score
0C879 A5 42                         LDA current_level
0C87B 18                            CLC
0C87C 69 51                         ADC #81
0C87E 20 13 C5                      JSR sub_AddAccumulatorToScore
0C881                           
0C881                           
0C881                               ;; Play thud sound effect
0C881 A2 01                         LDX #SFX_THUD
0C883 20 EE CE                      JSR sub_PreloadSfxFromX
0C886                           
0C886                           
0C886                               ;; - If there are no color blocks left:
0C886                               ;;   - Initiate level-win state
0C886 C6 44                         DEC blocks_left
0C888 D0 03                         BNE +
0C88A 4C 2C C4                          JMP lbl_LevelWin
0C88D                               +
0C88D                               
0C88D 60                            RTS
0C88E                           
0C88E                           
0C88E                           
0C88E                           +checkIfPaintBlock:
0C88E                           
0C88E                               ;; Check if collided tile is a paint block
0C88E A5 43                         LDA colliding_tile
0C890 29 20                         AND #IS_PAINT_BLOCK
0C892 F0 1F                         BEQ +checkIfDeathBlock
0C894                                   ;; It's a paint block. Update ball color
0C894                                   ;; Save x-register
0C894 8A                                TXA
0C895 48                                PHA
0C896                           
0C896                                   ;; Get tile color
0C896 A5 43                             LDA colliding_tile
0C898 29 0E                             AND #%00001110
0C89A 0A                                ASL
0C89B 0A                                ASL
0C89C 0A                                ASL
0C89D 0A                                ASL
0C89E 85 00                             STA temp
0C8A0                           
0C8A0                                   ;; Apply tile color to ball
0C8A0 A5 37                             LDA ball_flags
0C8A2 29 1F                             AND #%00011111
0C8A4 05 00                             ORA temp
0C8A6 85 37                             STA ball_flags
0C8A8 20 5F C6                          JSR sub_ColorizeBall
0C8AB                           
0C8AB                                   ;; Play bounce sound effect
0C8AB A2 02                             LDX #SFX_BOUNCE
0C8AD 20 EE CE                          JSR sub_PreloadSfxFromX
0C8B0                           
0C8B0                                   ;; Restore x-register
0C8B0 68                                PLA
0C8B1 AA                                TAX
0C8B2                           
0C8B2                                   ;; Return
0C8B2 60                                RTS
0C8B3                                   
0C8B3                                   
0C8B3                                   
0C8B3                           +checkIfDeathBlock:
0C8B3                           
0C8B3                               ;; Check if collided tile is a death block
0C8B3 A5 43                         LDA colliding_tile
0C8B5 29 10                         AND #IS_DEATH_BLOCK
0C8B7 F0 3D                         BEQ +checkIfMoveBlock
0C8B9                           
0C8B9                           ;; Also, when the player presses select during gameplay,
0C8B9                           ;; insta-selfdestruct the ball.
0C8B9                           sub_Selfdestruct:
0C8B9                           
0C8B9                                   ;; It is a death block
0C8B9                                   ;; Freeze and kill player
0C8B9 A5 37                             LDA ball_flags
0C8BB 09 05                             ORA #%00000101
0C8BD 85 37                             STA ball_flags
0C8BF                                   
0C8BF                                   ;; Get free explosion slot
0C8BF A6 3B                             LDX explosion_pointer
0C8C1 D0 02                             BNE +
0C8C3 A2 04                                 LDX #MAX_ANIMATIONS
0C8C5                                   +
0C8C5 CA                                DEX
0C8C6 86 3B                             STX explosion_pointer
0C8C8                           
0C8C8                                   ;; Load explosion data into RAM
0C8C8 A9 00                             LDA #$00
0C8CA 9D 64 03                          STA explosion_currentframe,x
0C8CD                           
0C8CD A9 04                             LDA #ANIMATION_SPEED
0C8CF 9D 60 03                          STA explosion_timer,x
0C8D2                           
0C8D2 A5 17                             LDA ball_xpos_hi
0C8D4 38                                SEC
0C8D5 E9 08                             SBC #$08
0C8D7 9D 6C 03                          STA explosion_x,x
0C8DA                           
0C8DA A5 19                             LDA ball_ypos_hi
0C8DC 38                                SEC
0C8DD E9 06                             SBC #$06
0C8DF 9D 70 03                          STA explosion_y,x
0C8E2                           
0C8E2 A9 01                             LDA #$01
0C8E4 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C8E7 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C8EA 85 4B                             STA noise_muted             ; mute background noise
0C8EC                                   
0C8EC                                   ;; Play explosion sound effect
0C8EC A2 00                             LDX #SFX_EXPLOSION
0C8EE 20 EE CE                          JSR sub_PreloadSfxFromX
0C8F1                           
0C8F1                                   ;; Set kill timer
0C8F1 A9 60                             LDA #$60
0C8F3 85 40                             STA kill_timer
0C8F5                           
0C8F5                                   ;; Return
0C8F5 60                                RTS
0C8F6                           
0C8F6                           
0C8F6                           
0C8F6                           +checkIfMoveBlock:
0C8F6                           
0C8F6                               ;; Check if collided tile is a move block
0C8F6 A5 43                         LDA colliding_tile
0C8F8 29 40                         AND #IS_MOVE_BLOCK
0C8FA D0 06                         BNE +
0C8FC                                   ;; Tile is not a move block
0C8FC                                   ;; Therefore, it is a solid wall
0C8FC                                   
0C8FC                                   ;; Play bounce sound effect
0C8FC A2 02                             LDX #SFX_BOUNCE
0C8FE 20 EE CE                          JSR sub_PreloadSfxFromX
0C901                           
0C901                                   ;; Return
0C901 60                                RTS
0C902                               +
0C902                           
0C902                               ;; It is a move block. Check if colors match
0C902 20 80 C6                      JSR sub_ColorsMatch
0C905 F0 06                         BEQ +
0C907                                   ;; Colors do not match
0C907                                   ;; Play bounce sound effect
0C907 A2 02                             LDX #SFX_BOUNCE
0C909 20 EE CE                          JSR sub_PreloadSfxFromX
0C90C                           
0C90C                                   ;; Return
0C90C 60                                RTS
0C90D                               +
0C90D                           
0C90D                               ;; Colors match
0C90D                               ;; - Check if next tile is within the playground
0C90D                               ;; (push X onto stack as well)
0C90D 8A                            TXA
0C90E 48                            PHA
0C90F 18                            CLC
0C910 65 36                         ADC move_block_space_to_check
0C912 AA                            TAX
0C913                               
0C913 29 0F                         AND #%00001111
0C915 C9 0E                         CMP #$0E
0C917 90 03                         BCC +
0C919 4C 91 C9                          JMP +dontMoveBlock
0C91C                               +
0C91C 8A                            TXA
0C91D 29 F0                         AND #%11110000
0C91F C9 A0                         CMP #$A0
0C921 D0 03                         BNE +
0C923 4C 91 C9                          JMP +dontMoveBlock
0C926                               +
0C926 C9 F0                         CMP #$F0
0C928 D0 03                         BNE +
0C92A 4C 91 C9                          JMP +dontMoveBlock
0C92D                               +
0C92D                               
0C92D                               ;; Check if the next tile is solid
0C92D BD 00 04                      LDA tile_type,x
0C930 29 01                         AND #TILE_IS_SOLID
0C932 F0 03                         BEQ +
0C934 4C 91 C9                          JMP +dontMoveBlock
0C937                               +
0C937                               
0C937                               ;; Move block has room to move
0C937                               ;; Pull original X from stack
0C937 68                            PLA
0C938 AA                            TAX        
0C939                               
0C939                               ;; Add the tiles that need updating to ppu buffer, and
0C939                               ;; update attribute table accordingly through ppu buffer
0C939 20 B7 C9                      JSR sub_GetPPUAddrFromYXIndex
0C93C 20 FD CE                      JSR sub_RemoveBlockFromScreen
0C93F                           
0C93F                               ;; Store original tile type in temp variable
0C93F BD 00 04                      LDA tile_type,x
0C942 85 08                         STA temp+8
0C944                           
0C944                               ;; Write #$00 in tile type ram (makes not-solid)
0C944 A9 00                         LDA #$00
0C946 9D 00 04                      STA tile_type,x
0C949                           
0C949                               ;; Add move tile sprite over the original tile
0C949                               ;; - Store x in temp variable
0C949 86 03                         STX temp+3
0C94B                               
0C94B                               ;; - Update move block pointer
0C94B A6 3C                         LDX move_block_pointer
0C94D D0 02                         BNE +
0C94F A2 04                             LDX #MAX_ANIMATIONS
0C951                               +
0C951 CA                            DEX
0C952 86 3C                         STX move_block_pointer
0C954                           
0C954                               ;; = Set move block tile type
0C954 A5 08                         LDA temp+8
0C956 9D 84 03                      STA move_block_tile_type,x
0C959                           
0C959                               ;; - Set move block X position
0C959 A5 03                         LDA temp+3
0C95B 29 0F                         AND #%00001111
0C95D A8                            TAY
0C95E C8                            INY
0C95F B9 C4 D9                      LDA tbl_Times16,y
0C962 9D 78 03                      STA move_block_x,x
0C965                               
0C965                               ;; - Set move block Y position
0C965 A5 03                         LDA temp+3
0C967 29 F0                         AND #%11110000
0C969 18                            CLC
0C96A 69 30                         ADC #$30
0C96C 9D 7C 03                      STA move_block_y,x
0C96F DE 7C 03                      DEC move_block_y,x
0C972                               
0C972                               ;; - Set timer to 16 (+1) frames
0C972 A9 11                         LDA #$11
0C974 9D 80 03                      STA move_block_timer,x
0C977                               
0C977                               ;; - Set move direction
0C977 A5 36                         LDA move_block_space_to_check
0C979 29 81                         AND #%10000001
0C97B 18                            CLC
0C97C 2A                            ROL
0C97D 69 00                         ADC #$00
0C97F 85 04                         STA temp+4
0C981                               
0C981                               ;; - Set block color as ball color and add direction
0C981 A5 37                         LDA ball_flags
0C983 29 E0                         AND #BALL_COLOR
0C985 05 04                         ORA temp+4
0C987 9D 88 03                      STA move_block_flags,x
0C98A                               
0C98A                               ;; - Restore original X
0C98A A6 03                         LDX temp+3
0C98C                               
0C98C                               ;; - Initiate move sound effect
0C98C A9 18                         LDA #$18
0C98E 85 4F                         STA sfx_timer+1
0C990                           
0C990                               ;; Return
0C990 60                            RTS
0C991                           
0C991                           
0C991                           ;; Do not move the move block
0C991                           +dontMoveBlock:
0C991                           
0C991                               ;; Play bounce sound effect
0C991 A2 02                         LDX #SFX_BOUNCE
0C993 20 EE CE                      JSR sub_PreloadSfxFromX
0C996                           
0C996                               ;; Restore X from stack
0C996 68                            PLA
0C997 AA                            TAX
0C998                               
0C998                               ;; Return
0C998 60                            RTS
0C999                           
0C999                           .include "game/subroutine/FlashEffect.asm"
0C999                           
0C999                           ;; Apply flashing light effect to background color
0C999                           sub_FlashEffect:
0C999 A2 00                         LDX #$00
0C99B 86 01                         STX temp+1
0C99D A9 3F                         LDA #$3F
0C99F 85 00                         STA temp
0C9A1                           
0C9A1                               -flashLoop:
0C9A1 BD 34 DA                          LDA tbl_BackgroundFade,x
0C9A4 85 02                             STA temp+2
0C9A6 20 02 D1                          JSR sub_WriteByteToPPUBuffer
0C9A9 A0 03                             LDY #$03
0C9AB                                   -
0C9AB 20 04 C5                              JSR sub_WaitForNMI
0C9AE 88                                    DEY
0C9AF D0 FA                             BNE -
0C9B1 E8                                INX
0C9B2 E0 0A                             CPX #$0A
0C9B4 D0 EB                         BNE -flashLoop
0C9B6                               
0C9B6 60                            RTS
0C9B7                           
0C9B7                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C9B7                           
0C9B7                           ;; Get the PPU address from YX index
0C9B7                           ;; - Expects YX index (aka tile offset) to be in the X register
0C9B7                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C9B7                           
0C9B7                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C9B7                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C9B7                           
0C9B7                           sub_GetPPUAddrFromYXIndex:
0C9B7 8A                            TXA
0C9B8 29 C0                         AND #%11000000
0C9BA 18                            CLC
0C9BB 2A                            ROL
0C9BC 2A                            ROL
0C9BD 2A                            ROL
0C9BE 69 20                         ADC #$20
0C9C0 85 00                         STA temp
0C9C2                               
0C9C2 8A                            TXA
0C9C3 29 0F                         AND #%00001111
0C9C5 0A                            ASL
0C9C6 85 01                         STA temp+1
0C9C8                               
0C9C8 8A                            TXA
0C9C9 29 30                         AND #%00110000
0C9CB 0A                            ASL
0C9CC 0A                            ASL
0C9CD 18                            CLC
0C9CE 65 01                         ADC temp+1
0C9D0 85 01                         STA temp+1
0C9D2                               
0C9D2 A5 00                         LDA temp
0C9D4 69 00                         ADC #$00
0C9D6 85 00                         STA temp
0C9D8                               
0C9D8 A5 01                         LDA temp+1
0C9DA 18                            CLC
0C9DB 69 C2                         ADC #$C2
0C9DD 85 01                         STA temp+1
0C9DF                               
0C9DF A5 00                         LDA temp
0C9E1 69 00                         ADC #$00
0C9E3 85 00                         STA temp
0C9E5                           
0C9E5 60                            RTS
0C9E6                           
0C9E6                           .include "game/subroutine/InitiateNudge.asm"
0C9E6                           
0C9E6                           ;; Tell ball to nudge
0C9E6                           sub_InitiateNudge:
0C9E6 85 37                         STA ball_flags
0C9E8 A9 06                         LDA #NUDGE_FRAMES
0C9EA 85 3E                         STA nudge_timer
0C9EC 60                            RTS
0C9ED                           
0C9ED                           .include "game/subroutine/JumpToPointer.asm"
0C9ED                           
0C9ED                           ;; Helper subroutine to JSR to a variable pointer address
0C9ED                           sub_JumpToPointer:
0C9ED 6C 0C 00                      JMP (pointer)
0C9F0                               ;RTS must be handled by the routine (pointer) jumps to
0C9F0                           
0C9F0                           .include "game/subroutine/LoadAnimations.asm"
0C9F0                           
0C9F0                           sub_LoadAnimations:
0C9F0                           
0C9F0                               ;; Set up loop
0C9F0 A2 00                         LDX #$00
0C9F2                               -loop_load_animation:
0C9F2                                   ;; Check if current animation is active. If not, goto next
0C9F2 BD 74 03                          LDA explosion_active,x
0C9F5 D0 03                             BNE +
0C9F7 4C 82 CA                              JMP +next
0C9FA                                   +
0C9FA                           
0C9FA                                   ;; Check the explosion framecounter
0C9FA BD 60 03                          LDA explosion_timer,x
0C9FD D0 17                             BNE +
0C9FF                                       ;; Frametimer is 0
0C9FF                                       ;; Reset to animation speed
0C9FF A9 04                                 LDA #ANIMATION_SPEED
0CA01 9D 60 03                              STA explosion_timer,x
0CA04                           
0CA04                                       ;; Set next animation frame, and check if we're done yet
0CA04 FE 64 03                              INC explosion_currentframe,x
0CA07 BD 64 03                              LDA explosion_currentframe,x
0CA0A C9 0A                                 CMP #ANIM_SLIDES
0CA0C D0 08                                 BNE +
0CA0E                           
0CA0E                                       ;; If we're done, inactivate current explosion, go to the next one
0CA0E A9 00                                 LDA #$00
0CA10 9D 74 03                              STA explosion_active,x
0CA13 4C 82 CA                              JMP +next
0CA16                                   +
0CA16                           
0CA16                                   ;; Load (x,y) position in temp variables
0CA16 BD 6C 03                          LDA explosion_x,x
0CA19 85 01                             STA temp+1
0CA1B 85 03                             STA temp+3
0CA1D BD 70 03                          LDA explosion_y,x
0CA20 85 02                             STA temp+2
0CA22                           
0CA22                                   ;; Load attribute in temp variable
0CA22 BD 68 03                          LDA explosion_attributes,x
0CA25 85 04                             STA temp+4
0CA27                           
0CA27                                   ;; Load current frame into Y-register
0CA27 BC 64 03                          LDY explosion_currentframe,x
0CA2A                           
0CA2A                                   ;; Load current frame ROM address from table
0CA2A B9 56 D2                          LDA explosion_anim_lo,y
0CA2D 85 0C                             STA pointer
0CA2F B9 4C D2                          LDA explosion_anim_hi,y
0CA32 85 0D                             STA pointer+1
0CA34                           
0CA34                                   ;; Save x-register on stack
0CA34 8A                                TXA
0CA35 48                                PHA
0CA36                           
0CA36                                   ;; Load sprites into sprite RAM
0CA36 A6 3D                             LDX sprite_ram_pointer
0CA38 A0 00                             LDY #$00
0CA3A                           
0CA3A                                   ;; Prepare (x,y) offset for loop
0CA3A 84 00                             STY temp
0CA3C                           
0CA3C                                   -loop_load_sprite:
0CA3C                                   
0CA3C                                       ;; Do not draw empty sprites
0CA3C B1 0C                                 LDA (pointer),y
0CA3E F0 18                                 BEQ +nextSprite
0CA40                                   
0CA40                                           ;; Add y-position to sprite ram buffer
0CA40 A5 02                                     LDA temp+2
0CA42 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA45 E8                                        INX
0CA46                           
0CA46                                           ;; Get tile number from frame ROM address, and
0CA46                                           ;; add it to sprite ram buffer
0CA46 B1 0C                                     LDA (pointer),y
0CA48 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA4B E8                                        INX
0CA4C                           
0CA4C                                           ;; Add attribute data to sprite ram buffer
0CA4C A5 04                                     LDA temp+4
0CA4E 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA51 E8                                        INX
0CA52                           
0CA52                                           ;; Add x-position to sprite ram buffer
0CA52 A5 03                                     LDA temp+3
0CA54 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA57 E8                                        INX
0CA58                           
0CA58                                       +nextSprite:
0CA58                           
0CA58                                       ;; Check if all sprites are done
0CA58 C8                                    INY
0CA59 C0 09                                 CPY #SLIDE_SIZE
0CA5B F0 21                                 BEQ +updateSpriteRamPointer
0CA5D                           
0CA5D                                       ;; Update x value
0CA5D A5 03                                 LDA temp+3
0CA5F 18                                    CLC
0CA60 69 08                                 ADC #$08
0CA62 85 03                                 STA temp+3
0CA64                           
0CA64                                       ;; Update temp for x,y position
0CA64 E6 00                                 INC temp
0CA66 A5 00                                 LDA temp
0CA68 C9 03                                 CMP #SLIDE_WIDTH
0CA6A D0 0F                                 BNE +
0CA6C                                           ;; Row is done; reset x-position
0CA6C A5 01                                     LDA temp+1
0CA6E 85 03                                     STA temp+3
0CA70                           
0CA70                                           ;; Update y-position
0CA70 A5 02                                     LDA temp+2
0CA72 18                                        CLC
0CA73 69 08                                     ADC #$08
0CA75 85 02                                     STA temp+2
0CA77                           
0CA77                                           ;; Reset row timer
0CA77 A9 00                                     LDA #$00
0CA79 85 00                                     STA temp
0CA7B                                       +
0CA7B                           
0CA7B 4C 3C CA                          JMP -loop_load_sprite
0CA7E                           
0CA7E                               +updateSpriteRamPointer:
0CA7E 86 3D                             STX sprite_ram_pointer
0CA80                           
0CA80                                   ;; Retrieve x-register from stack
0CA80 68                                PLA
0CA81 AA                                TAX
0CA82                           
0CA82                               +next:
0CA82                                   ;; Check if all animations have been updated
0CA82 E8                                INX
0CA83 E0 04                             CPX #MAX_ANIMATIONS
0CA85 F0 03                             BEQ +cleanUpSpriteRam
0CA87                           
0CA87 4C F2 C9                      JMP -loop_load_animation
0CA8A                           
0CA8A                           +cleanUpSpriteRam:
0CA8A A6 3D                         LDX sprite_ram_pointer
0CA8C A9 EF                         LDA #$EF
0CA8E                               -
0CA8E 9D 00 02                          STA ADDR_SPRITERAM,x
0CA91 E8                                INX
0CA92 D0 FA                         BNE -
0CA94                               
0CA94 60                            RTS
0CA95                               
0CA95                           .include "game/subroutine/LoadGameScreen.asm"
0CA95                           
0CA95                           ;; Load the game screen, based on level number
0CA95                           sub_LoadGameScreen:
0CA95                           
0CA95                               ;; Clear the screen
0CA95 20 F4 C5                      JSR sub_ClearScreen
0CA98                               
0CA98                               ;; Clear collision and attribute data; reset blocks left in the process
0CA98 A2 00                         LDX #$00
0CA9A 8A                            TXA
0CA9B 85 44                         STA blocks_left
0CA9D                               -
0CA9D 9D 00 04                          STA tile_type,x
0CAA0 E8                                INX
0CAA1 D0 FA                         BNE -
0CAA3                               
0CAA3                               ;; Get pointer from current level
0CAA3 A6 42                         LDX current_level
0CAA5 BD 76 D9                      LDA tbl_lvl_layout_lo,x
0CAA8 85 0C                         STA pointer
0CAAA BD 5C D9                      LDA tbl_lvl_layout_hi,x
0CAAD 85 0D                         STA pointer+1
0CAAF                           
0CAAF                               ;; Set up the loop
0CAAF A0 00                         LDY #$00
0CAB1                           -drawRowColumnLoop:
0CAB1                           
0CAB1                               ;; Load (x,y) of current set of tiles
0CAB1 B1 0C                         LDA (pointer),y
0CAB3                           
0CAB3                               ;; Check if level is done; if so, skip the loop
0CAB3 C9 FF                         CMP #LEVEL_END
0CAB5 D0 03                         BNE +
0CAB7 4C 00 CC                          JMP +doneLevelLoad
0CABA                               +
0CABA                           
0CABA                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CABA 85 00                         STA temp
0CABC C8                            INY
0CABD B1 0C                         LDA (pointer),y
0CABF 85 01                         STA temp+1
0CAC1                               
0CAC1                               ;; Convert (x,y) to PPU address
0CAC1                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CAC1 A5 00                         LDA temp
0CAC3 29 0F                         AND #%00001111
0CAC5 4A                            LSR
0CAC6 4A                            LSR
0CAC7 09 20                         ORA #$20
0CAC9 85 02                         STA temp+2
0CACB                               
0CACB                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CACB A5 00                         LDA temp
0CACD 29 F0                         AND #%11110000
0CACF 4A                            LSR
0CAD0 4A                            LSR
0CAD1 4A                            LSR
0CAD2 85 03                         STA temp+3
0CAD4                               
0CAD4 A5 00                         LDA temp
0CAD6 29 03                         AND #%00000011
0CAD8 AA                            TAX
0CAD9 BD D4 D9                      LDA tbl_Times64,x
0CADC 18                            CLC
0CADD 65 03                         ADC temp+3
0CADF 18                            CLC
0CAE0 69 C2                         ADC #$C2
0CAE2 85 03                         STA temp+3
0CAE4                               
0CAE4                               ;; Add carry to temp+2
0CAE4 A5 02                         LDA temp+2
0CAE6 69 00                         ADC #$00
0CAE8 85 02                         STA temp+2
0CAEA                           
0CAEA                               ;; Convert tile data to loop count and tile type
0CAEA                               ;; temp+4 = color
0CAEA A5 01                         LDA temp+1
0CAEC 29 07                         AND #%00000111
0CAEE 85 04                         STA temp+4
0CAF0                               
0CAF0                               ;; If color = 7, this is a wall
0CAF0 C9 07                         CMP #%00000111
0CAF2 F0 12                         BEQ +wallHack
0CAF4                                   
0CAF4                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CAF4 29 01                             AND #%00000001
0CAF6 F0 02                             BEQ +
0CAF8 A9 05                                 LDA #$05
0CAFA                                   +
0CAFA 85 07                             STA temp+7
0CAFC                                
0CAFC                                   ;; temp+5 = tile type
0CAFC A5 01                             LDA temp+1
0CAFE 4A                                LSR
0CAFF 4A                                LSR
0CB00 4A                                LSR
0CB01 29 03                             AND #%00000011
0CB03 4C 0C CB                          JMP +setTileType
0CB06                               +wallHack:
0CB06                               
0CB06                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CB06 A9 00                         LDA #$00
0CB08 85 07                         STA temp+7
0CB0A A9 04                         LDA #$04
0CB0C                           
0CB0C                           +setTileType:    
0CB0C 85 05                         STA temp+5
0CB0E                               
0CB0E                               ;; X = tile offset
0CB0E 18                            CLC
0CB0F 65 07                         ADC temp+7
0CB11 AA                            TAX
0CB12                               
0CB12                               ;; temp+6 = number of tiles
0CB12 A5 01                         LDA temp+1
0CB14 29 60                         AND #%01100000
0CB16 4A                            LSR
0CB17 4A                            LSR
0CB18 4A                            LSR
0CB19 4A                            LSR
0CB1A 4A                            LSR
0CB1B 85 06                         STA temp+6
0CB1D                               
0CB1D                               ;; Translate (x,y) to (y,x) for tile RAM
0CB1D A5 00                         LDA temp
0CB1F 0A                            ASL
0CB20 0A                            ASL
0CB21 0A                            ASL
0CB22 0A                            ASL
0CB23 85 08                         STA temp+8
0CB25 A5 00                         LDA temp
0CB27 4A                            LSR
0CB28 4A                            LSR
0CB29 4A                            LSR
0CB2A 4A                            LSR
0CB2B 05 08                         ORA temp+8
0CB2D 85 00                         STA temp
0CB2F                               
0CB2F                               ;; Set up loop
0CB2F 98                            TYA
0CB30 48                            PHA
0CB31 A4 06                         LDY temp+6
0CB33                           
0CB33                               -drawTileLoop:
0CB33                                   ;; Write PPU address
0CB33 2C 02 20                          BIT PPU_STATUS
0CB36 A5 02                             LDA temp+2
0CB38 8D 06 20                          STA PPU_ADDR
0CB3B A5 03                             LDA temp+3
0CB3D 8D 06 20                          STA PPU_ADDR
0CB40                                   
0CB40                                   ;; Write first and second tile
0CB40 BD D8 D9                          LDA tbl_GametileTopLeft,x
0CB43 8D 07 20                          STA PPU_DATA
0CB46 BD E2 D9                          LDA tbl_GametileTopRight,x
0CB49 8D 07 20                          STA PPU_DATA
0CB4C                                   
0CB4C                                   ;; Update PPU address
0CB4C 2C 02 20                          BIT PPU_STATUS
0CB4F A5 02                             LDA temp+2
0CB51 8D 06 20                          STA PPU_ADDR
0CB54 A5 03                             LDA temp+3
0CB56 18                                CLC
0CB57 69 20                             ADC #$20
0CB59 8D 06 20                          STA PPU_ADDR
0CB5C                                   
0CB5C                                   ;; Write third and fourth tile
0CB5C BD EC D9                          LDA tbl_GametileBottomLeft,x
0CB5F 8D 07 20                          STA PPU_DATA
0CB62 BD F6 D9                          LDA tbl_GametileBottomRight,x
0CB65 8D 07 20                          STA PPU_DATA
0CB68                           
0CB68                                   ;; Push x-register to stack
0CB68 8A                                TXA
0CB69 48                                PHA
0CB6A                           
0CB6A                                   ;; Update tile RAM (aka collision table)
0CB6A A6 05                             LDX temp+5
0CB6C BD 00 DA                          LDA tbl_GameTileRamByte,x
0CB6F 05 04                             ORA temp+4
0CB71 0A                                ASL
0CB72 09 01                             ORA #%00000001
0CB74 A6 00                             LDX temp
0CB76 9D 00 04                          STA tile_type,x
0CB79                           
0CB79                                   ;; Check if shade 1 should be drawn
0CB79 E8                                INX
0CB7A BD 00 04                          LDA tile_type,x
0CB7D D0 05                             BNE +
0CB7F A9 00                                 LDA #$00
0CB81 8D 07 20                              STA PPU_DATA
0CB84                                   +
0CB84                                   
0CB84                                   ;; Check if shade 2 should be drawn
0CB84 A5 03                             LDA temp+3
0CB86 18                                CLC
0CB87 69 41                             ADC #$41
0CB89 85 03                             STA temp+3
0CB8B A5 02                             LDA temp+2
0CB8D 69 00                             ADC #$00
0CB8F 85 02                             STA temp+2
0CB91                                   
0CB91 8A                                TXA
0CB92 18                                CLC
0CB93 69 0F                             ADC #$0F
0CB95 AA                                TAX
0CB96                                   
0CB96 BD 00 04                          LDA tile_type,x
0CB99 D0 0F                             BNE +
0CB9B A5 02                                 LDA temp+2
0CB9D 8D 06 20                              STA PPU_ADDR
0CBA0 A5 03                                 LDA temp+3
0CBA2 8D 06 20                              STA PPU_ADDR
0CBA5 A9 00                                 LDA #$00
0CBA7 8D 07 20                              STA PPU_DATA
0CBAA                                   +
0CBAA                           
0CBAA                                   ;; Check if shade 3 should be drawn
0CBAA E8                                INX
0CBAB E6 03                             INC temp+3
0CBAD BD 00 04                          LDA tile_type,x
0CBB0 D0 0F                             BNE +
0CBB2 A5 02                                 LDA temp+2
0CBB4 8D 06 20                              STA PPU_ADDR
0CBB7 A5 03                                 LDA temp+3
0CBB9 8D 06 20                              STA PPU_ADDR
0CBBC A9 00                                 LDA #$00
0CBBE 8D 07 20                              STA PPU_DATA
0CBC1                                   +
0CBC1                                   
0CBC1                                   ;; Restore x-register from stack
0CBC1 68                                PLA
0CBC2 AA                                TAX
0CBC3                                   
0CBC3                                   ;; Reset pointer for next tile
0CBC3 A5 03                             LDA temp+3
0CBC5 38                                SEC
0CBC6 E9 42                             SBC #$42
0CBC8 85 03                             STA temp+3
0CBCA A5 02                             LDA temp+2
0CBCC E9 00                             SBC #$00
0CBCE 85 02                             STA temp+2
0CBD0                                   
0CBD0                                   ;; Draw next metatile in this loop (if any left)
0CBD0 88                                DEY
0CBD1 30 27                             BMI +doneDrawingRowColumn
0CBD3                                   
0CBD3                                   ;; Is it a row or a column?
0CBD3 A5 01                             LDA temp+1
0CBD5 10 17                             BPL +
0CBD7                                       ;; It is a column: move pointer down (+$40)
0CBD7 A5 03                                 LDA temp+3
0CBD9 18                                    CLC
0CBDA 69 40                                 ADC #$40
0CBDC 85 03                                 STA temp+3
0CBDE A5 02                                 LDA temp+2
0CBE0 69 00                                 ADC #$00
0CBE2 85 02                                 STA temp+2
0CBE4                                       
0CBE4                                       ;; Add 16 to temp (as a tile RAM pointer)
0CBE4 A5 00                                 LDA temp
0CBE6 18                                    CLC
0CBE7 69 10                                 ADC #$10
0CBE9 85 00                                 STA temp
0CBEB 4C F7 CB                              JMP +drawNextTile
0CBEE                                   +
0CBEE                                   
0CBEE                                   ;; It is a row: move pointer right (+$02)
0CBEE A5 03                             LDA temp+3
0CBF0 18                                CLC
0CBF1 69 02                             ADC #$02
0CBF3 85 03                             STA temp+3
0CBF5                                   
0CBF5                                   ;; Add 1 to temp (as a tile RAM pointer)
0CBF5 E6 00                             INC temp
0CBF7                           
0CBF7                               
0CBF7                               ;; Next tile in the row/column
0CBF7                                   +drawNextTile:
0CBF7 4C 33 CB                      JMP -drawTileLoop
0CBFA                           
0CBFA                               ;; Go to the next set of tiles
0CBFA                           +doneDrawingRowColumn:
0CBFA 68                            PLA
0CBFB A8                            TAY
0CBFC C8                            INY
0CBFD 4C B1 CA                      JMP -drawRowColumnLoop
0CC00                           
0CC00                           ;; Level loading is done
0CC00                           +doneLevelLoad:
0CC00                           
0CC00                               ;; Count number of color blocks
0CC00 A2 A0                         LDX #160
0CC02                               -
0CC02 BD FF 03                          LDA tile_type-1,x
0CC05 29 80                             AND #%10000000
0CC07 F0 02                             BEQ +
0CC09 E6 44                                 INC blocks_left
0CC0B                                   +
0CC0B CA                                DEX
0CC0C D0 F4                         BNE -
0CC0E                           
0CC0E                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CC0E A9 20                         LDA #$20
0CC10 8D 06 20                      STA PPU_ADDR
0CC13 A9 A2                         LDA #$A2
0CC15 8D 06 20                      STA PPU_ADDR
0CC18 A9 35                         LDA #$35
0CC1A 20 55 CE                      JSR sub_Draw28HorizontalTiles
0CC1D                           
0CC1D                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CC1D A9 23                         LDA #$23
0CC1F 8D 06 20                      STA PPU_ADDR
0CC22 A9 42                         LDA #$42
0CC24 8D 06 20                      STA PPU_ADDR
0CC27 A9 31                         LDA #$31
0CC29 20 55 CE                      JSR sub_Draw28HorizontalTiles
0CC2C                           
0CC2C                               ;; Left & right game bounds
0CC2C                               ;; Set PPU_ADDR and store in temp variables
0CC2C A9 20                         LDA #$20
0CC2E 85 00                         STA temp
0CC30 8D 06 20                      STA PPU_ADDR
0CC33 A9 C1                         LDA #$C1
0CC35 85 01                         STA temp+1
0CC37 8D 06 20                      STA PPU_ADDR
0CC3A                               
0CC3A                               ;; Set vertical bound tile and set up loop
0CC3A A0 33                         LDY #$33
0CC3C A2 14                         LDX #20
0CC3E                               -
0CC3E                                   ;; Show left tile
0CC3E 8C 07 20                          STY PPU_DATA
0CC41                                   
0CC41                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CC41 A5 00                             LDA temp
0CC43 8D 06 20                          STA PPU_ADDR
0CC46 A5 01                             LDA temp+1
0CC48 18                                CLC
0CC49 69 1D                             ADC #29
0CC4B 85 01                             STA temp+1
0CC4D 8D 06 20                          STA PPU_ADDR
0CC50                           
0CC50                                   ;; Show right tile
0CC50 8C 07 20                          STY PPU_DATA
0CC53                           
0CC53                                   ;; Check if we're done yet
0CC53 CA                                DEX
0CC54 F0 18                             BEQ +drawCorners
0CC56                                   
0CC56                                   ;; Not done yet: add 3 to low byte for next left bound
0CC56 A5 01                             LDA temp+1
0CC58 18                                CLC
0CC59 69 03                             ADC #3
0CC5B 85 01                             STA temp+1
0CC5D                                   
0CC5D                                   ;; Apply carry to high byte
0CC5D A5 00                             LDA temp
0CC5F 69 00                             ADC #$00
0CC61 85 00                             STA temp
0CC63                                   
0CC63                                   ;; Store next PPU_ADDR to draw at
0CC63 8D 06 20                          STA PPU_ADDR
0CC66 A5 01                             LDA temp+1
0CC68 8D 06 20                          STA PPU_ADDR
0CC6B 4C 3E CC                      JMP -
0CC6E                               
0CC6E                               
0CC6E                           
0CC6E                           +drawCorners:
0CC6E                               ;; Draw the corners of the playing field
0CC6E A9 20                         LDA #$20
0CC70 8D 06 20                      STA PPU_ADDR
0CC73 A9 A1                         LDA #$A1
0CC75 8D 06 20                      STA PPU_ADDR
0CC78 A9 39                         LDA #$39
0CC7A 8D 07 20                      STA PPU_DATA
0CC7D                           
0CC7D A9 20                         LDA #$20
0CC7F 8D 06 20                      STA PPU_ADDR
0CC82 A9 BE                         LDA #$BE
0CC84 8D 06 20                      STA PPU_ADDR
0CC87 A9 3A                         LDA #$3A
0CC89 8D 07 20                      STA PPU_DATA
0CC8C                           
0CC8C A9 23                         LDA #$23
0CC8E 8D 06 20                      STA PPU_ADDR
0CC91 A9 41                         LDA #$41
0CC93 8D 06 20                      STA PPU_ADDR
0CC96 A9 36                         LDA #$36
0CC98 8D 07 20                      STA PPU_DATA
0CC9B                           
0CC9B A9 23                         LDA #$23
0CC9D 8D 06 20                      STA PPU_ADDR
0CCA0 A9 5E                         LDA #$5E
0CCA2 8D 06 20                      STA PPU_ADDR
0CCA5 A9 34                         LDA #$34
0CCA7 8D 07 20                      STA PPU_DATA
0CCAA                               
0CCAA                           
0CCAA                               ;; Draw the hud labels
0CCAA A9 20                         LDA #$20
0CCAC 8D 06 20                      STA PPU_ADDR
0CCAF A9 62                         LDA #$62
0CCB1 8D 06 20                      STA PPU_ADDR
0CCB4 A2 00                         LDX #$00
0CCB6                               -
0CCB6 BD 05 DA                          LDA tbl_HudText,x
0CCB9 8D 07 20                          STA PPU_DATA
0CCBC E8                                INX
0CCBD E0 1E                             CPX #$1E
0CCBF D0 F5                         BNE -
0CCC1                           
0CCC1                           
0CCC1                               ;; Draw the current score
0CCC1 A9 20                         LDA #$20
0CCC3 8D 06 20                      STA PPU_ADDR
0CCC6 A9 83                         LDA #$83
0CCC8 8D 06 20                      STA PPU_ADDR
0CCCB A2 00                         LDX #$00
0CCCD                               -
0CCCD B5 20                             LDA ball_score,x
0CCCF 18                                CLC
0CCD0 69 01                             ADC #$01
0CCD2 8D 07 20                          STA PPU_DATA
0CCD5 E8                                INX
0CCD6 E0 06                             CPX #$06
0CCD8 D0 F3                         BNE -
0CCDA                           
0CCDA                           
0CCDA                               ;; Draw the level number
0CCDA                               ;; (with primitive HEX>DEC)
0CCDA A5 42                         LDA current_level
0CCDC 18                            CLC
0CCDD 69 01                         ADC #$01
0CCDF 85 01                         STA temp+1
0CCE1                               
0CCE1 C9 14                         CMP #20
0CCE3 B0 13                         BCS +tempIsTwo
0CCE5                               
0CCE5 C9 0A                         CMP #10
0CCE7 B0 05                         BCS +tempIsOne
0CCE9                               
0CCE9 A9 00                         LDA #$00
0CCEB 4C FF CC                      JMP +setTemp
0CCEE                               
0CCEE                           +tempIsOne:
0CCEE 38                            SEC
0CCEF E9 0A                         SBC #10
0CCF1 85 01                         STA temp+1
0CCF3 A9 01                         LDA #$01
0CCF5 4C FF CC                      JMP +setTemp
0CCF8                               
0CCF8                           +tempIsTwo:
0CCF8 38                            SEC
0CCF9 E9 14                         SBC #20
0CCFB 85 01                         STA temp+1
0CCFD A9 02                         LDA #$02
0CCFF                           
0CCFF                           +setTemp:
0CCFF 85 00                         STA temp
0CD01                               
0CD01 E6 00                         INC temp
0CD03 E6 01                         INC temp+1
0CD05                               
0CD05 A9 20                         LDA #$20
0CD07 8D 06 20                      STA PPU_ADDR
0CD0A A9 8B                         LDA #$8B
0CD0C 8D 06 20                      STA PPU_ADDR
0CD0F A5 00                         LDA temp
0CD11 8D 07 20                      STA PPU_DATA
0CD14 A5 01                         LDA temp+1
0CD16 8D 07 20                      STA PPU_DATA
0CD19                           
0CD19                           
0CD19                               ;; Draw lives (presumes lives to be capped at 9)
0CD19 A9 20                         LDA #$20
0CD1B 8D 06 20                      STA PPU_ADDR
0CD1E A9 92                         LDA #$92
0CD20 8D 06 20                      STA PPU_ADDR
0CD23 A6 1F                         LDX ball_lives
0CD25 E8                            INX
0CD26 8E 07 20                      STX PPU_DATA
0CD29                           
0CD29                           
0CD29                               ;; Set and draw bonus
0CD29 A9 07                         LDA #$07
0CD2B 85 2C                         STA ball_bonus
0CD2D A9 09                         LDA #$09
0CD2F 85 2D                         STA ball_bonus+1
0CD31 85 2E                         STA ball_bonus+2
0CD33                               
0CD33 A9 20                         LDA #$20
0CD35 8D 06 20                      STA PPU_ADDR
0CD38 A9 9A                         LDA #$9A
0CD3A 8D 06 20                      STA PPU_ADDR
0CD3D A2 00                         LDX #$00
0CD3F                               -
0CD3F B5 2C                             LDA ball_bonus,x
0CD41 18                                CLC
0CD42 69 01                             ADC #$01
0CD44 8D 07 20                          STA PPU_DATA
0CD47 E8                                INX
0CD48 E0 03                             CPX #$03
0CD4A D0 F3                         BNE -
0CD4C                           
0CD4C                           
0CD4C                               ;; Set attribute data to RAM
0CD4C                               
0CD4C                               ;; Byte 0-6 of attribute ram should be #%10100000
0CD4C A2 00                         LDX #$00
0CD4E A9 A0                         LDA #$A0
0CD50                               -
0CD50 9D A0 04                          STA tile_attributes,x
0CD53 E8                                INX
0CD54 E0 07                             CPX #$07
0CD56 D0 F8                         BNE -
0CD58                               
0CD58                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CD58 A9 E0                         LDA #$E0
0CD5A 9D A0 04                      STA tile_attributes,x
0CD5D E8                            INX
0CD5E                           
0CD5E                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CD5E                           
0CD5E                           -attributeLoop:
0CD5E                               ;; Reset current attribute value
0CD5E A9 00                         LDA #$00
0CD60 85 02                         STA temp+2
0CD62                           
0CD62                               ;; Get first metatile in tile ram based on attribute index
0CD62                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CD62 8A                            TXA
0CD63                           
0CD63 38                            SEC
0CD64 E9 08                         SBC #$08
0CD66 85 01                         STA temp+1      ; attr - 8 (temp1)
0CD68 0A                            ASL             ; * 2
0CD69 85 00                         STA temp        ; temp = temp1 * 2
0CD6B                           
0CD6B A5 01                         LDA temp+1      ; temp1
0CD6D 29 F8                         AND #%11111000  ; rounded down to 8's
0CD6F 0A                            ASL             ; * 2
0CD70 18                            CLC
0CD71 65 00                         ADC temp        ; + temp1 * 2
0CD73 85 00                         STA temp        ; first metatile
0CD75                           
0CD75                               ;; Store first metatile in y-register
0CD75 A8                            TAY
0CD76                           
0CD76                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CD76 8A                            TXA
0CD77 29 07                         AND #%00000111
0CD79 C9 07                         CMP #%00000111
0CD7B F0 0B                         BEQ +
0CD7D                           
0CD7D                               ;; If X >= $30, don't apply bottom right metatile
0CD7D E0 30                         CPX #$30
0CD7F B0 07                         BCS +
0CD81                               
0CD81                               ;; Add metatile1 subpalette to attribute value
0CD81 B9 00 04                      LDA tile_type,y
0CD84 29 0C                         AND #%00001100
0CD86 85 02                         STA temp+2
0CD88                               +
0CD88                           
0CD88                           
0CD88                               ;; Apply second metatile
0CD88 88                            DEY
0CD89                           
0CD89                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CD89 8A                            TXA
0CD8A 29 07                         AND #%00000111
0CD8C F0 10                         BEQ +
0CD8E                           
0CD8E                               ;; If X >= $30, don't apply bottom left metatile
0CD8E E0 30                         CPX #$30
0CD90 B0 0C                         BCS +
0CD92                           
0CD92                           
0CD92                           
0CD92                               ;; Add metatile2 subpalette to attribute value
0CD92 B9 00 04                      LDA tile_type,y
0CD95 29 0C                         AND #%00001100
0CD97 4A                            LSR
0CD98 4A                            LSR
0CD99 05 02                         ORA temp+2
0CD9B 4C A0 CD                      JMP ++
0CD9E                               +
0CD9E A5 02                         LDA temp+2
0CDA0                               ++
0CDA0 0A                            ASL
0CDA1 0A                            ASL
0CDA2 85 02                         STA temp+2
0CDA4                           
0CDA4                           
0CDA4                               ;; Apply third metatile
0CDA4 98                            TYA
0CDA5 38                            SEC
0CDA6 E9 0F                         SBC #$0F
0CDA8 A8                            TAY
0CDA9                           
0CDA9                               ;; If X MOD 8 == 7, don't apply top right metatile
0CDA9 8A                            TXA
0CDAA 29 07                         AND #%00000111
0CDAC C9 07                         CMP #%00000111
0CDAE F0 11                         BEQ +
0CDB0                           
0CDB0                               ;; If X < $10, don't apply top right metatile
0CDB0 8A                            TXA
0CDB1 29 F0                         AND #%11110000
0CDB3 F0 0C                         BEQ +
0CDB5                           
0CDB5                               ;; Add metatile3 subpalette to attribute value
0CDB5 B9 00 04                      LDA tile_type,y
0CDB8 29 0C                         AND #%00001100
0CDBA 4A                            LSR
0CDBB 4A                            LSR
0CDBC 05 02                         ORA temp+2
0CDBE 4C C3 CD                      JMP ++
0CDC1                               +
0CDC1 A5 02                         LDA temp+2
0CDC3                               ++
0CDC3 0A                            ASL
0CDC4 0A                            ASL
0CDC5 85 02                         STA temp+2
0CDC7                           
0CDC7                           
0CDC7                               ;; Apply fourth metatile
0CDC7 88                            DEY
0CDC8                           
0CDC8                               ;; If X MOD 8 == 0, don't apply top left metatile
0CDC8 8A                            TXA
0CDC9 29 07                         AND #%00000111
0CDCB F0 11                         BEQ +
0CDCD                           
0CDCD                               ;; If X < $10, don't apply top left metatile
0CDCD 8A                            TXA
0CDCE 29 F0                         AND #%11110000
0CDD0 F0 0C                         BEQ +
0CDD2                           
0CDD2                               ;; Add metatile4 subpalette to attribute value
0CDD2 B9 00 04                      LDA tile_type,y
0CDD5 29 0C                         AND #%00001100
0CDD7 4A                            LSR
0CDD8 4A                            LSR
0CDD9 05 02                         ORA temp+2
0CDDB 4C E0 CD                      JMP ++
0CDDE                               +
0CDDE A5 02                         LDA temp+2
0CDE0                               ++
0CDE0 9D A0 04                      STA tile_attributes,x
0CDE3                           
0CDE3                               ;; Check the next attribute, if any left
0CDE3 E8                            INX
0CDE4 E0 38                         CPX #$38
0CDE6 F0 03                         BEQ +
0CDE8 4C 5E CD                          JMP -attributeLoop
0CDEB                               +
0CDEB                           
0CDEB                               ;; Stream attribute RAM to PPU
0CDEB 2C 02 20                      BIT PPU_STATUS
0CDEE A9 23                         LDA #$23
0CDF0 8D 06 20                      STA PPU_ADDR
0CDF3 A9 C0                         LDA #$C0
0CDF5 8D 06 20                      STA PPU_ADDR
0CDF8 A2 00                         LDX #$00
0CDFA                               -
0CDFA BD A0 04                          LDA tile_attributes,x
0CDFD 8D 07 20                          STA PPU_DATA
0CE00 E8                                INX
0CE01 E0 40                             CPX #$40
0CE03 D0 F5                         BNE -
0CE05                           
0CE05                               ;; Set initial ball position
0CE05 A6 42                         LDX current_level
0CE07 BD 90 D9                      LDA tbl_lvl_ball_startpos,x
0CE0A 29 F0                         AND #%11110000
0CE0C 18                            CLC
0CE0D 69 34                         ADC #$34
0CE0F 85 19                         STA ball_ypos_hi
0CE11 BD 90 D9                      LDA tbl_lvl_ball_startpos,x
0CE14 0A                            ASL
0CE15 0A                            ASL
0CE16 0A                            ASL
0CE17 0A                            ASL
0CE18 18                            CLC
0CE19 69 14                         ADC #$14
0CE1B 85 17                         STA ball_xpos_hi
0CE1D A9 00                         LDA #$00
0CE1F 85 18                         STA ball_xpos_lo
0CE21 85 1A                         STA ball_ypos_lo
0CE23                               
0CE23                               ;; Set initial ball color and direction
0CE23 BD AA D9                      LDA tbl_lvl_ball_init,x
0CE26 29 F0                         AND #%11110000
0CE28 85 37                         STA ball_flags
0CE2A 20 5F C6                      JSR sub_ColorizeBall
0CE2D                               
0CE2D                               ;; Reset bonus timer
0CE2D A9 08                         LDA #BONUS_FRAMES
0CE2F 85 3F                         STA bonus_timer
0CE31                               
0CE31                               ;; Play background noise
0CE31 A9 08                         LDA #$08
0CE33 8D 15 40                      STA APU_STATUS
0CE36 8D 0F 40                      STA NOISE_LENGTH
0CE39 A9 0E                         LDA #$0E
0CE3B 85 47                         STA current_noise
0CE3D A9 00                         LDA #$00
0CE3F 85 45                         STA max_noise
0CE41 85 48                         STA noise_timer
0CE43 85 46                         STA sweep_noise
0CE45 85 4B                         STA noise_muted
0CE47 20 72 C5                      JSR sub_BackgroundNoise
0CE4A                           
0CE4A                               ;; Freeze the ball
0CE4A A5 37                         LDA ball_flags
0CE4C 09 04                         ORA #FREEZE_BALL
0CE4E 85 37                         STA ball_flags
0CE50                               
0CE50                               ;; Start unfreeze timer
0CE50 A9 30                         LDA #$30
0CE52 85 41                         STA unfreeze_timer
0CE54                           
0CE54                               ;; Return
0CE54 60                            RTS
0CE55                           
0CE55                           
0CE55                           ;; Subroutine: draw 28 tiles in a row
0CE55                           sub_Draw28HorizontalTiles:
0CE55 A2 1C                         LDX #28
0CE57                               -
0CE57 8D 07 20                          STA PPU_DATA
0CE5A CA                                DEX
0CE5B D0 FA                         BNE -
0CE5D 60                            RTS
0CE5E                           
0CE5E                           .include "game/subroutine/LoadIntroScreen.asm"
0CE5E                           
0CE5E                           ;; Load the intro screen
0CE5E                           sub_LoadIntroScreen:
0CE5E                           
0CE5E                               ;; Load intro palette
0CE5E 2C 02 20                      BIT PPU_STATUS
0CE61 A9 3F                         LDA #$3F
0CE63 8D 06 20                      STA PPU_ADDR
0CE66 A9 00                         LDA #$00
0CE68 8D 06 20                      STA PPU_ADDR
0CE6B A2 00                         LDX #$00
0CE6D                               -
0CE6D BD 28 D1                          LDA tbl_IntroScreenPalette,x
0CE70 8D 07 20                          STA PPU_DATA
0CE73 E8                                INX
0CE74 E0 20                             CPX #$20
0CE76 D0 F5                         BNE -
0CE78                               
0CE78                               ;; Put ball in the middle
0CE78 A9 7C                         LDA #$7C
0CE7A 85 17                         STA ball_xpos_hi
0CE7C 85 19                         STA ball_ypos_hi
0CE7E                           
0CE7E                               ;; Clear the screen
0CE7E 20 F4 C5                      JSR sub_ClearScreen
0CE81                           
0CE81                               ;; Set up intro screen draw loop
0CE81 A2 00                         LDX #$00
0CE83                           
0CE83                           -loop_IntroScreenData:
0CE83                           
0CE83                               ;; Get current byte from intro screen data
0CE83 BD 50 D1                      LDA tbl_IntroScreenData,x
0CE86                           
0CE86                               ;; If current byte is #$3F, we're done drawing.
0CE86 C9 3F                         CMP #$3F
0CE88 D0 03                         BNE +
0CE8A 4C D7 CE                          JMP +goToEndIntroScreen
0CE8D                               +
0CE8D                           
0CE8D                               ;; If highest bits are %11, draw a plain tile
0CE8D 29 C0                         AND #%11000000
0CE8F D0 03                         BNE +
0CE91 4C B7 CE                          JMP +drawTile
0CE94                               +
0CE94                               
0CE94                               ;; If highest bits are %01, set the PPU address
0CE94                               ;; If not, draw two logo tiles
0CE94 C9 40                         CMP #%01000000
0CE96 D0 03                         BNE +drawLogo
0CE98 4C C1 CE                          JMP +setPpuAddr
0CE9B                           
0CE9B                           +drawLogo:
0CE9B                               ;; Get bits 0-2 and store in a temp variable
0CE9B BD 50 D1                      LDA tbl_IntroScreenData,x
0CE9E 29 07                         AND #%00000111
0CEA0 85 00                         STA temp
0CEA2                               
0CEA2                               ;; Get bits 3-5, shift over to get a value from 0-7
0CEA2 BD 50 D1                      LDA tbl_IntroScreenData,x
0CEA5 4A                            LSR
0CEA6 4A                            LSR
0CEA7 4A                            LSR
0CEA8 29 07                         AND #%00000111
0CEAA                               
0CEAA                               ;; Draw the tile that corresponds with that value
0CEAA A8                            TAY
0CEAB 20 D7 C6                      JSR sub_drawIntroScreenLogoTile
0CEAE                               
0CEAE                               ;; Do the same for the value stored in temp
0CEAE A4 00                         LDY temp
0CEB0 20 D7 C6                      JSR sub_drawIntroScreenLogoTile
0CEB3                           
0CEB3                               ;; Next byte please
0CEB3 E8                            INX
0CEB4 4C 83 CE                      JMP -loop_IntroScreenData
0CEB7                           
0CEB7                           +drawTile:
0CEB7                               ;; Just draw the tile value on screen
0CEB7 BD 50 D1                      LDA tbl_IntroScreenData,x
0CEBA 8D 07 20                      STA PPU_DATA
0CEBD                               
0CEBD                               ;; Next byte please
0CEBD E8                            INX
0CEBE 4C 83 CE                      JMP -loop_IntroScreenData
0CEC1                           
0CEC1                           
0CEC1                           +setPpuAddr:
0CEC1                               ;; Reset the PPU latch
0CEC1 2C 02 20                      BIT PPU_STATUS
0CEC4                               
0CEC4                               ;; Sanitize and write the high byte of the PPU address
0CEC4 BD 50 D1                      LDA tbl_IntroScreenData,x
0CEC7 29 3F                         AND #%00111111
0CEC9 8D 06 20                      STA PPU_ADDR
0CECC                           
0CECC                               ;; Write the low byte of the PPU address
0CECC E8                            INX
0CECD BD 50 D1                      LDA tbl_IntroScreenData,x
0CED0 8D 06 20                      STA PPU_ADDR
0CED3                               
0CED3                               ;; PPU has been set up to draw tiles at the correct spot now.
0CED3                               
0CED3                               ;; Next byte please.
0CED3 E8                            INX
0CED4 4C 83 CE                      JMP -loop_IntroScreenData
0CED7                           
0CED7                           +goToEndIntroScreen:
0CED7                           
0CED7                               ;; To color the 1.LEVEL: line green, we need to update two
0CED7                               ;; values in the PPU attribute data.
0CED7 2C 02 20                      BIT PPU_STATUS
0CEDA A9 23                         LDA #$23
0CEDC 8D 06 20                      STA PPU_ADDR
0CEDF A9 CB                         LDA #$CB
0CEE1 8D 06 20                      STA PPU_ADDR
0CEE4 A9 0A                         LDA #%00001010
0CEE6 8D 07 20                      STA PPU_DATA
0CEE9 8D 07 20                      STA PPU_DATA
0CEEC                           
0CEEC 60                            RTS
0CEED                           
0CEED                           .include "game/subroutine/LoadWinScreen.asm"
0CEED                           
0CEED                           ;; Load the win screen (in progress)
0CEED                           sub_LoadWinScreen:
0CEED 60                            RTS
0CEEE                           
0CEEE                           .include "game/subroutine/PreloadSfxFromX.asm"
0CEEE                           
0CEEE                           sub_PreloadSfxFromX:
0CEEE                               
0CEEE                               ;; Load sample X into sfx address (low byte)
0CEEE BD 83 DA                      LDA tbl_Sfx_lo,x
0CEF1 85 4C                         STA sfx_address
0CEF3                               
0CEF3                               ;; Load sample X into sfx address (high byte)
0CEF3 BD 80 DA                      LDA tbl_Sfx_hi,x
0CEF6 85 4D                         STA sfx_address+1
0CEF8                               
0CEF8                               ;; Start SFX timer
0CEF8 A9 01                         LDA #$01
0CEFA 85 4E                         STA sfx_timer
0CEFC                               
0CEFC 60                            RTS
0CEFD                               
0CEFD                               0CEFD                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CEFD                           
0CEFD                           ;; Remove a block from screen
0CEFD                           sub_RemoveBlockFromScreen:
0CEFD                           
0CEFD                               ;; Get current buffer location
0CEFD A4 3A                         LDY ppu_buffer_pointer
0CEFF                               
0CEFF                               ;; TILE 1: if metatile on top left is solid, draw
0CEFF                               ;; null tile, else draw random noise tile
0CEFF A9 00                         LDA #$00
0CF01 85 39                         STA ppu_buffer_update
0CF03                               
0CF03 A5 00                         LDA temp
0CF05 99 00 03                      STA ppu_buffer,y
0CF08 C8                            INY
0CF09 A5 01                         LDA temp+1
0CF0B 99 00 03                      STA ppu_buffer,y
0CF0E C8                            INY
0CF0F                               
0CF0F 8A                            TXA
0CF10 29 0F                         AND #%00001111
0CF12 F0 11                         BEQ +drawRandomTile
0CF14                           
0CF14 8A                            TXA
0CF15 29 F0                         AND #%11110000
0CF17 F0 0C                         BEQ +drawRandomTile
0CF19                           
0CF19 BD EF 03                      LDA tile_type-17,x
0CF1C 29 01                         AND #%00000001
0CF1E F0 05                         BEQ +drawRandomTile  
0CF20                           
0CF20                               ;; Draw a null tile
0CF20 A9 00                         LDA #$00
0CF22 4C 2D CF                      JMP +addToPPUBuffer
0CF25                               
0CF25                           +drawRandomTile:
0CF25                               ;; Draw a random tile
0CF25 20 E2 C4                      JSR sub_GetRandomNumber
0CF28 29 07                         AND #%00000111
0CF2A 18                            CLC
0CF2B 69 68                         ADC #$68
0CF2D                               
0CF2D                               ;; Add tile to ppu buffer
0CF2D                           +addToPPUBuffer:
0CF2D 99 00 03                      STA ppu_buffer,y
0CF30 C8                            INY
0CF31                           
0CF31                               ;; TILE 2: If metatile above is solid, draw null,
0CF31                               ;; else draw random noise.
0CF31 E6 01                         INC temp+1
0CF33 A5 00                         LDA temp
0CF35 99 00 03                      STA ppu_buffer,y
0CF38 C8                            INY
0CF39 A5 01                         LDA temp+1
0CF3B 99 00 03                      STA ppu_buffer,y
0CF3E C8                            INY
0CF3F                               
0CF3F 8A                            TXA
0CF40 29 F0                         AND #%11110000
0CF42 F0 0C                         BEQ +drawRandomTile
0CF44                               
0CF44 BD F0 03                      LDA tile_type-16,x
0CF47 29 01                         AND #%00000001
0CF49 F0 05                         BEQ +drawRandomTile
0CF4B                               
0CF4B A9 00                         LDA #%00
0CF4D 4C 58 CF                      JMP +addToPPUBuffer
0CF50                           
0CF50                           +drawRandomTile:
0CF50 20 E2 C4                      JSR sub_GetRandomNumber
0CF53 29 07                         AND #%00000111
0CF55 18                            CLC
0CF56 69 68                         ADC #$68
0CF58                           
0CF58                           +addToPPUBuffer:
0CF58 99 00 03                      STA ppu_buffer,y
0CF5B C8                            INY
0CF5C                               
0CF5C                               ;; TILE 3 - If metatile left is solid, draw null,
0CF5C                               ;; else draw random noise.
0CF5C A5 01                         LDA temp+1
0CF5E 18                            CLC
0CF5F 69 1F                         ADC #$1F
0CF61 85 01                         STA temp+1
0CF63 A5 00                         LDA temp
0CF65 69 00                         ADC #$00
0CF67 85 00                         STA temp
0CF69 99 00 03                      STA ppu_buffer,y
0CF6C C8                            INY
0CF6D A5 01                         LDA temp+1
0CF6F 99 00 03                      STA ppu_buffer,y
0CF72 C8                            INY
0CF73                               
0CF73 8A                            TXA
0CF74 29 0F                         AND #%00001111
0CF76 F0 0C                         BEQ +drawRandomTile
0CF78                               
0CF78 BD FF 03                      LDA tile_type-1,x
0CF7B 29 01                         AND #%00000001
0CF7D F0 05                         BEQ +drawRandomTile
0CF7F                               
0CF7F A9 00                         LDA #%00
0CF81 4C 8C CF                      JMP +addToPPUBuffer
0CF84                           
0CF84                           +drawRandomTile:
0CF84 20 E2 C4                      JSR sub_GetRandomNumber
0CF87 29 07                         AND #%00000111
0CF89 18                            CLC
0CF8A 69 68                         ADC #$68
0CF8C                               
0CF8C                           +addToPPUBuffer:
0CF8C 99 00 03                      STA ppu_buffer,y
0CF8F C8                            INY
0CF90                               
0CF90                               ;; TILE 4 - Always random noise
0CF90 E6 01                         INC temp+1
0CF92 A5 00                         LDA temp
0CF94 99 00 03                      STA ppu_buffer,y
0CF97 C8                            INY
0CF98 A5 01                         LDA temp+1
0CF9A 99 00 03                      STA ppu_buffer,y
0CF9D C8                            INY
0CF9E 20 E2 C4                      JSR sub_GetRandomNumber
0CFA1 29 07                         AND #%00000111
0CFA3 18                            CLC
0CFA4 69 68                         ADC #$68
0CFA6 99 00 03                      STA ppu_buffer,y
0CFA9 C8                            INY
0CFAA                           
0CFAA                               ;; TILE 5 - If tile on the right is solid, skip,
0CFAA                               ;; else draw random noise tile
0CFAA E6 01                         INC temp+1
0CFAC                               
0CFAC 8A                            TXA
0CFAD 29 0F                         AND #%00001111
0CFAF C9 0D                         CMP #$0D
0CFB1 F0 1F                         BEQ +skipTile
0CFB3                               
0CFB3 BD 01 04                      LDA tile_type+1,x
0CFB6 29 01                         AND #%00000001
0CFB8 D0 18                         BNE +skipTile
0CFBA A5 00                             LDA temp
0CFBC 99 00 03                          STA ppu_buffer,y
0CFBF C8                                INY
0CFC0 A5 01                             LDA temp+1
0CFC2 99 00 03                          STA ppu_buffer,y
0CFC5 C8                                INY
0CFC6 20 E2 C4                          JSR sub_GetRandomNumber
0CFC9 29 07                             AND #%00000111
0CFCB 18                                CLC
0CFCC 69 68                             ADC #$68
0CFCE 99 00 03                          STA ppu_buffer,y
0CFD1 C8                                INY    
0CFD2                               +skipTile:
0CFD2                           
0CFD2                               ;; TILE 6 - If tile on bottom is solid, skip,
0CFD2                               ;; else draw random noise
0CFD2 A5 01                         LDA temp+1
0CFD4 18                            CLC
0CFD5 69 1F                         ADC #$1F
0CFD7 85 01                         STA temp+1
0CFD9 A5 00                         LDA temp
0CFDB 69 00                         ADC #$00
0CFDD 85 00                         STA temp
0CFDF                           
0CFDF 8A                            TXA
0CFE0 29 F0                         AND #%11110000
0CFE2 C9 90                         CMP #$90
0CFE4 F0 1F                         BEQ +skipTile
0CFE6                           
0CFE6 BD 10 04                      LDA tile_type+16,x
0CFE9 29 01                         AND #%00000001
0CFEB D0 18                         BNE +skipTile
0CFED A5 00                             LDA temp
0CFEF 99 00 03                          STA ppu_buffer,y
0CFF2 C8                                INY
0CFF3 A5 01                             LDA temp+1
0CFF5 99 00 03                          STA ppu_buffer,y
0CFF8 C8                                INY
0CFF9 20 E2 C4                          JSR sub_GetRandomNumber
0CFFC 29 07                             AND #%00000111
0CFFE 18                                CLC
0CFFF 69 68                             ADC #$68
0D001 99 00 03                          STA ppu_buffer,y
0D004 C8                                INY    
0D005                               +skipTile:
0D005                               
0D005                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D005                               ;; else draw random noise
0D005 E6 01                         INC temp+1
0D007                           
0D007 8A                            TXA
0D008 29 F0                         AND #%11110000
0D00A C9 90                         CMP #$90
0D00C F0 26                         BEQ +skipTile
0D00E                               
0D00E 8A                            TXA
0D00F 29 0F                         AND #%00001111
0D011 C9 0D                         CMP #$0D
0D013 F0 1F                         BEQ +skipTile
0D015                               
0D015 BD 11 04                      LDA tile_type+17,x
0D018 29 01                         AND #%00000001
0D01A D0 18                         BNE +skipTile
0D01C A5 00                             LDA temp
0D01E 99 00 03                          STA ppu_buffer,y
0D021 C8                                INY
0D022 A5 01                             LDA temp+1
0D024 99 00 03                          STA ppu_buffer,y
0D027 C8                                INY
0D028 20 E2 C4                          JSR sub_GetRandomNumber
0D02B 29 07                             AND #%00000111
0D02D 18                                CLC
0D02E 69 68                             ADC #$68
0D030 99 00 03                          STA ppu_buffer,y
0D033 C8                                INY    
0D034                               +skipTile:   
0D034                           
0D034                           
0D034                               ;; Update attribute table accordingly through ppu buffer
0D034 20 73 D0                      JSR sub_SetTileAttributeAddress
0D037                               
0D037 8A                            TXA
0D038 29 10                         AND #%00010000
0D03A F0 05                         BEQ +
0D03C A9 F0                             LDA #%11110000
0D03E 4C 43 D0                          JMP ++
0D041                               +
0D041 A9 0F                         LDA #%00001111
0D043                               ++
0D043 85 02                         STA temp+2
0D045                               
0D045 8A                            TXA
0D046 48                            PHA
0D047 29 01                         AND #%00000001
0D049 F0 07                         BEQ +
0D04B A5 02                             LDA temp+2
0D04D 09 CC                             ORA #%11001100
0D04F 4C 56 D0                          JMP ++
0D052                               +
0D052 A5 02                         LDA temp+2
0D054 09 33                         ORA #%00110011
0D056                               ++
0D056 85 02                         STA temp+2
0D058                               
0D058 A5 00                         LDA temp
0D05A 38                            SEC
0D05B E9 C0                         SBC #$C0
0D05D AA                            TAX
0D05E BD A0 04                      LDA tile_attributes,x
0D061 25 02                         AND temp+2
0D063 9D A0 04                      STA tile_attributes,x
0D066 99 00 03                      STA ppu_buffer,y
0D069 C8                            INY
0D06A 68                            PLA
0D06B AA                            TAX
0D06C                           
0D06C                               ;; Tell PPU to update tiles and attributes next frame
0D06C 84 3A                         STY ppu_buffer_pointer
0D06E A9 01                         LDA #$01
0D070 85 39                         STA ppu_buffer_update
0D072                            
0D072                               ;; We're done - return
0D072 60                            RTS
0D073                           
0D073                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D073                           
0D073                           ;; Set the correct tile attribute address based on game tile (x) 
0D073                           ;; into the correct ppu buffer slot (y)
0D073                           
0D073                           sub_SetTileAttributeAddress:
0D073 A9 23                         LDA #$23
0D075 99 00 03                      STA ppu_buffer,y
0D078 C8                            INY
0D079                               
0D079 8A                            TXA
0D07A 29 F0                         AND #%11110000
0D07C 4A                            LSR
0D07D 4A                            LSR
0D07E 4A                            LSR
0D07F 4A                            LSR
0D080 18                            CLC
0D081 69 01                         ADC #$01
0D083 4A                            LSR
0D084 0A                            ASL
0D085 0A                            ASL
0D086 0A                            ASL
0D087 18                            CLC
0D088 69 C8                         ADC #$C8
0D08A 85 00                         STA temp
0D08C 8A                            TXA
0D08D 29 0F                         AND #%00001111
0D08F 18                            CLC
0D090 69 01                         ADC #$01
0D092 4A                            LSR
0D093 18                            CLC
0D094 65 00                         ADC temp
0D096 85 00                         STA temp
0D098 99 00 03                      STA ppu_buffer,y
0D09B C8                            INY
0D09C                                  
0D09C 60                            RTS
0D09D                           
0D09D                           .include "game/subroutine/SubtractXFromBonus.asm"
0D09D                           
0D09D                           sub_SubtractXFromBonus:
0D09D 86 09                         STX temp+9
0D09F A5 2E                         LDA ball_bonus+2
0D0A1 38                            SEC
0D0A2 E5 09                         SBC temp+9
0D0A4 30 05                         BMI +
0D0A6 85 2E                             STA ball_bonus+2
0D0A8 4C C0 D0                          JMP +updateBonusOnScreen
0D0AB                               +
0D0AB                           
0D0AB 18                            CLC
0D0AC 69 0A                         ADC #$0A
0D0AE 85 2E                         STA ball_bonus+2
0D0B0 C6 2D                         DEC ball_bonus+1
0D0B2 10 0C                         BPL +updateBonusOnScreen
0D0B4                           
0D0B4 A9 09                         LDA #$09
0D0B6 85 2D                         STA ball_bonus+1
0D0B8 C6 2C                         DEC ball_bonus
0D0BA 10 04                         BPL +updateBonusOnScreen
0D0BC                           
0D0BC A9 00                         LDA #$00
0D0BE 85 2C                         STA ball_bonus
0D0C0                           
0D0C0                               +updateBonusOnScreen:
0D0C0 A9 20                         LDA #$20
0D0C2 85 00                         STA temp
0D0C4 A9 9C                         LDA #$9C
0D0C6 85 01                         STA temp+1
0D0C8 A2 02                         LDX #$02
0D0CA                               
0D0CA                               -updateNextDigit:
0D0CA B5 2C                             LDA ball_bonus,x
0D0CC 18                                CLC
0D0CD 69 01                             ADC #$01
0D0CF 85 02                             STA temp+2
0D0D1 20 02 D1                          JSR sub_WriteByteToPPUBuffer
0D0D4 C6 01                             DEC temp+1
0D0D6 CA                                DEX
0D0D7 10 F1                         BPL -updateNextDigit
0D0D9                           
0D0D9 60                            RTS
0D0DA                           
0D0DA                           .include "game/subroutine/WaitXFrames.asm"
0D0DA                           
0D0DA                           sub_WaitXFrames:
0D0DA                               
0D0DA                               ;; Push X to stack
0D0DA 8A                            TXA
0D0DB 48                            PHA
0D0DC                               
0D0DC                               ;; Wait for NMI
0D0DC 20 04 C5                      JSR sub_WaitForNMI
0D0DF                           
0D0DF                               ;; Clear pointer, except for sprite-zero and ball
0D0DF A9 08                         LDA #$08
0D0E1 85 3D                         STA sprite_ram_pointer
0D0E3                           
0D0E3                               ;; Load animations (if any)
0D0E3 20 F0 C9                      JSR sub_LoadAnimations
0D0E6                               
0D0E6                               ;; Restore original X
0D0E6 68                            PLA
0D0E7 AA                            TAX
0D0E8                               
0D0E8                               ;; Check if all X frames have passed
0D0E8 CA                            DEX
0D0E9 D0 EF                         BNE sub_WaitXFrames
0D0EB                               
0D0EB                               ;; Return
0D0EB 60                            RTS
0D0EC                           
0D0EC                           .include "game/subroutine/Waste.asm"
0D0EC 20 EF D0                  sub_Waste7: JSR sub_Waste6
0D0EF 20 F2 D0                  sub_Waste6: JSR sub_Waste5
0D0F2 20 F5 D0                  sub_Waste5: JSR sub_Waste4
0D0F5 20 F8 D0                  sub_Waste4: JSR sub_Waste3
0D0F8 20 FB D0                  sub_Waste3: JSR sub_Waste2
0D0FB 20 FE D0                  sub_Waste2: JSR sub_Waste1
0D0FE 20 01 D1                  sub_Waste1: JSR sub_Waste0
0D101 60                        sub_Waste0: RTS0D102                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D102                           
0D102                           ;; Write the byte in temp+2 and the ppu address (temp)
0D102                           ;; to a buffer, so NMI can update it before the next frame
0D102                           
0D102                           sub_WriteByteToPPUBuffer:
0D102                           
0D102                               ;; Prevent updating until full 3-byte buffer is filled,
0D102                               ;; so that graphics won't glitch out if NMI happens during
0D102                               ;; updating the buffer
0D102 A9 00                         LDA #$00
0D104 85 39                         STA ppu_buffer_update
0D106                           
0D106                               ;; Check if buffer full; if so, wait a frame and force update
0D106 A4 3A                         LDY ppu_buffer_pointer
0D108 C0 60                         CPY #$60
0D10A D0 05                         BNE +
0D10C E6 39                             INC ppu_buffer_update
0D10E 20 0D C5                          JSR sub_WaitForVBlank
0D111                               +
0D111                           
0D111                               ;; Add ppu_addr high byte to buffer
0D111 A5 00                         LDA temp
0D113 99 00 03                      STA ppu_buffer,y
0D116                           
0D116                               ;; Add ppu_addr low byte to buffer
0D116 C8                            INY
0D117 A5 01                         LDA temp+1
0D119 99 00 03                      STA ppu_buffer,y
0D11C                           
0D11C                               ;; Add ppu_data to buffer
0D11C C8                            INY
0D11D A5 02                         LDA temp+2
0D11F 99 00 03                      STA ppu_buffer,y
0D122                           
0D122                               ;; Update buffer pointer
0D122 C8                            INY
0D123 84 3A                         STY ppu_buffer_pointer
0D125                           
0D125                               ;; Tell NMI to update next round
0D125 E6 39                         INC ppu_buffer_update
0D127                           
0D127                               ;; Return
0D127 60                            RTS
0D128                           
0D128                           
0D128                           
0D128                           
0D128                           ;; LUTs
0D128                           .include "game/include/tables.asm"
0D128                           
0D128                           ;; Initial screen palette
0D128                           tbl_IntroScreenPalette:
0D128 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D12C 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D130 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D134 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D138                           
0D138 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D13C 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D140 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D144 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D148                           
0D148                           
0D148                           ;; Intro: mapping logo index to chr tile
0D148                           tbl_IntroScreenLogoChr:
0D148 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D150                           
0D150                           
0D150                           ;; Intro screen data
0D150                           tbl_IntroScreenData:
0D150                           
0D150                               ;; Set PPU address $20AC and draw
0D150 60 AC                         .db #$60, #$AC
0D152 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D15A                           
0D15A                               ;; Set PPU address $20CF and draw
0D15A 60 CF                         .db #$60, #$CF
0D15C 01 02                         .db #_0, #_1
0D15E                               
0D15E                               ;; Set PPU address $2122 and draw
0D15E 61 22                         .db #$61, #$22
0D160 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D167 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D16D 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D175 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D17A                               
0D17A                               ;; Set PPU address $2147 and draw
0D17A 61 47                         .db #$61, #$47
0D17C 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D183 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D187 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D18D 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D193                               
0D193                               ;; Set PPU address $218B and draw
0D193 61 8B                         .db #$61, #$8B
0D195 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D19B 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D1A0                               
0D1A0                               ;; Set PPU address $21E6 and draw
0D1A0 61 E6                         .db #$61, #$E6
0D1A2 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D1AA 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D1AE 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D1B5                               
0D1B5                               ;; Set PPU address $222D and draw
0D1B5 62 2D                         .db #$62, #$2D
0D1B7 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D1BD                               
0D1BD                               ;; Set PPU address $2281
0D1BD 62 81                         .db #$62, #$81
0D1BF                               
0D1BF                               ;; Draw the Crillion logo
0D1BF E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D1C3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1C7 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D1CB E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D1CF                               
0D1CF D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D1D3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1D7 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1DB D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1DF                               
0D1DF D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D1E3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1E7 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1EB D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1EF                           
0D1EF D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1F3 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1F7 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1FB D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1FF                               
0D1FF D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D203 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D207 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D20B D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D20F                           
0D20F F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D213 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D217 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D21B F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D21E                           
0D21E                               ;; End of intro
0D21E 3F                            .db #$3F
0D21F                           
0D21F                           
0D21F                           ;; Animation frames table
0D21F                           .include "game/include/table/animation_frames.asm"
0D21F                           
0D21F                           ;; CHR tile-id's per slide of explosion
0D21F                           explosion_slide0:
0D21F 00 00 00                      .db #$00, #$00, #$00
0D222 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D225 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D228                           
0D228                           explosion_slide1:
0D228 00 00 00                      .db #$00, #$00, #$00
0D22B 29 2A 2B                      .db #$29, #$2A, #$2B
0D22E 39 3A 3B                      .db #$39, #$3A, #$3B
0D231                           
0D231                           explosion_slide2:
0D231 16 00 00                      .db #$16, #$00, #$00
0D234 26 27 28                      .db #$26, #$27, #$28
0D237 36 37 38                      .db #$36, #$37, #$38
0D23A                           
0D23A                           explosion_slide3:
0D23A 00 14 15                      .db #$00, #$14, #$15
0D23D 23 24 25                      .db #$23, #$24, #$25
0D240 33 34 35                      .db #$33, #$34, #$35
0D243                           
0D243                           explosion_slide4:
0D243 10 11 12                      .db #$10, #$11, #$12
0D246 20 21 22                      .db #$20, #$21, #$22
0D249 30 31 32                      .db #$30, #$31, #$32
0D24C                           
0D24C                           ;; High and low bytes of animation slides
0D24C                           explosion_anim_hi:
0D24C D2                            .db >#explosion_slide0
0D24D D2                            .db >#explosion_slide1
0D24E D2                            .db >#explosion_slide2
0D24F D2                            .db >#explosion_slide3
0D250 D2                            .db >#explosion_slide4
0D251 D2                            .db >#explosion_slide4
0D252 D2                            .db >#explosion_slide3
0D253 D2                            .db >#explosion_slide2
0D254 D2                            .db >#explosion_slide1
0D255 D2                            .db >#explosion_slide0
0D256                           
0D256                           explosion_anim_lo:
0D256 1F                            .db <#explosion_slide0
0D257 28                            .db <#explosion_slide1
0D258 31                            .db <#explosion_slide2
0D259 3A                            .db <#explosion_slide3
0D25A 43                            .db <#explosion_slide4
0D25B 43                            .db <#explosion_slide4
0D25C 3A                            .db <#explosion_slide3
0D25D 31                            .db <#explosion_slide2
0D25E 28                            .db <#explosion_slide1
0D25F 1F                            .db <#explosion_slide0
0D260                           
0D260                           
0D260                           
0D260                           ;; Ball palette color table (CBRYGM)
0D260                           tbl_BallColorDark:
0D260 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D266                            
0D266                           tbl_BallColorLight:
0D266 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D26C                           
0D26C                               
0D26C                           ;; Screen mode drawing routine addresses
0D26C                           tbl_LoadScreenHi:
0D26C CE CA CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D26F                           
0D26F                           tbl_LoadScreenLo:
0D26F 5E 95 ED                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D272                           
0D272                           
0D272                           ;; Level data
0D272                           .include "game/include/table/level_data.asm"
0D272                           
0D272                           ;; Level layout tables
0D272                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D272                           
0D272                           ifdef TESTING
0D272                           lvl_test:
0D272 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D27A 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D282 FF                            .db #LEVEL_END
0D283                           endif
0D283                           
0D283                           lvl_layout_01:
0D283 61 21                         .db #$61, #%00100001
0D285 52 61                         .db #$52, #%01100001
0D287 43 65                         .db #$43, #%01100101
0D289 83 05                         .db #$83, #%00000101
0D28B 93 15                         .db #$93, #%00010101
0D28D 34 7A                         .db #$34, #%01111010
0D28F 74 7A                         .db #$74, #%01111010
0D291 35 7A                         .db #$35, #%01111010
0D293 75 7A                         .db #$75, #%01111010
0D295 46 65                         .db #$46, #%01100101
0D297 86 25                         .db #$86, #%00100101
0D299 57 61                         .db #$57, #%01100001
0D29B 68 21                         .db #$68, #%00100001
0D29D FF                            .db #LEVEL_END
0D29E                           
0D29E                           lvl_layout_02:
0D29E C0 0A                         .db #$C0, #%00001010
0D2A0 11 15                         .db #$11, #%00010101
0D2A2 21 62                         .db #$21, #%01100010
0D2A4 61 62                         .db #$61, #%01100010
0D2A6 A1 42                         .db #$A1, #%01000010
0D2A8 12 67                         .db #$12, #%01100111
0D2AA 52 67                         .db #$52, #%01100111
0D2AC 92 67                         .db #$92, #%01100111
0D2AE C3 0D                         .db #$C3, #%00001101
0D2B0 14 11                         .db #$14, #%00010001
0D2B2 24 65                         .db #$24, #%01100101
0D2B4 64 65                         .db #$64, #%01100101
0D2B6 A4 45                         .db #$A4, #%01000101
0D2B8 15 67                         .db #$15, #%01100111
0D2BA 55 67                         .db #$55, #%01100111
0D2BC 95 67                         .db #$95, #%01100111
0D2BE 17 12                         .db #$17, #%00010010
0D2C0 27 61                         .db #$27, #%01100001
0D2C2 67 61                         .db #$67, #%01100001
0D2C4 A7 41                         .db #$A7, #%01000001
0D2C6 38 7A                         .db #$38, #%01111010
0D2C8 98 5A                         .db #$98, #%01011010
0D2CA 18 27                         .db #$18, #%00100111
0D2CC 48 27                         .db #$48, #%00100111
0D2CE 78 27                         .db #$78, #%00100111
0D2D0 C8 07                         .db #$C8, #%00000111
0D2D2 FF                            .db #LEVEL_END
0D2D3                           
0D2D3                           lvl_layout_03:
0D2D3 00 7A                         .db #$00, #%01111010
0D2D5 40 7A                         .db #$40, #%01111010
0D2D7 80 7A                         .db #$80, #%01111010
0D2D9 C0 1A                         .db #$C0, #%00011010
0D2DB 10 A1                         .db #$10, #%10100001
0D2DD 13 E1                         .db #$13, #%11100001
0D2DF 17 C1                         .db #$17, #%11000001
0D2E1 30 C1                         .db #$30, #%11000001
0D2E3 34 C1                         .db #$34, #%11000001
0D2E5 38 A1                         .db #$38, #%10100001
0D2E7 50 E1                         .db #$50, #%11100001
0D2E9 55 81                         .db #$55, #%10000001
0D2EB 57 C1                         .db #$57, #%11000001
0D2ED 70 C1                         .db #$70, #%11000001
0D2EF 73 A1                         .db #$73, #%10100001
0D2F1 76 E1                         .db #$76, #%11100001
0D2F3 90 E1                         .db #$90, #%11100001
0D2F5 95 81                         .db #$95, #%10000001
0D2F7 97 C1                         .db #$97, #%11000001
0D2F9 B0 C1                         .db #$B0, #%11000001
0D2FB B4 C1                         .db #$B4, #%11000001
0D2FD B8 A1                         .db #$B8, #%10100001
0D2FF D0 A1                         .db #$D0, #%10100001
0D301 D3 E1                         .db #$D3, #%11100001
0D303 D7 C1                         .db #$D7, #%11000001
0D305 FF                            .db #LEVEL_END
0D306                           
0D306                           lvl_layout_04:
0D306 00 4C                         .db #$00, #%01001100
0D308 40 6C                         .db #$40, #%01101100
0D30A 80 4C                         .db #$80, #%01001100
0D30C 81 AC                         .db #$81, #%10101100
0D30E C1 2C                         .db #$C1, #%00101100
0D310 02 6C                         .db #$02, #%01101100
0D312 42 CC                         .db #$42, #%11001100
0D314 62 EC                         .db #$62, #%11101100
0D316 A2 CC                         .db #$A2, #%11001100
0D318 C3 CC                         .db #$C3, #%11001100
0D31A 04 4C                         .db #$04, #%01001100
0D31C 84 2C                         .db #$84, #%00101100
0D31E 25 AC                         .db #$25, #%10101100
0D320 85 AC                         .db #$85, #%10101100
0D322 06 AC                         .db #$06, #%10101100
0D324 36 CC                         .db #$36, #%11001100
0D326 56 CC                         .db #$56, #%11001100
0D328 66 EC                         .db #$66, #%11101100
0D32A 96 6C                         .db #$96, #%01101100
0D32C C7 AC                         .db #$C7, #%10101100
0D32E 08 2C                         .db #$08, #%00101100
0D330 78 6C                         .db #$78, #%01101100
0D332 D8 0C                         .db #$D8, #%00001100
0D334 30 A1                         .db #$30, #%10100001
0D336 B0 21                         .db #$B0, #%00100001
0D338 01 41                         .db #$01, #%01000001
0D33A 41 61                         .db #$41, #%01100001
0D33C 91 A1                         .db #$91, #%10100001
0D33E A1 21                         .db #$A1, #%00100001
0D340 52 C1                         .db #$52, #%11000001
0D342 72 E1                         .db #$72, #%11100001
0D344 B2 C1                         .db #$B2, #%11000001
0D346 C2 21                         .db #$C2, #%00100001
0D348 03 41                         .db #$03, #%01000001
0D34A 33 C1                         .db #$33, #%11000001
0D34C 83 21                         .db #$83, #%00100001
0D34E D3 E1                         .db #$D3, #%11100001
0D350 05 21                         .db #$05, #%00100001
0D352 45 E1                         .db #$45, #%11100001
0D354 A5 21                         .db #$A5, #%00100001
0D356 16 A1                         .db #$16, #%10100001
0D358 76 A1                         .db #$76, #%10100001
0D35A 27 A1                         .db #$27, #%10100001
0D35C 57 21                         .db #$57, #%00100001
0D35E 87 41                         .db #$87, #%01000001
0D360 B7 A1                         .db #$B7, #%10100001
0D362 19 21                         .db #$19, #%00100001
0D364 39 41                         .db #$39, #%01000001
0D366 89 41                         .db #$89, #%01000001
0D368 C9 21                         .db #$C9, #%00100001
0D36A D0 1A                         .db #$D0, #%00011010
0D36C 55 1A                         .db #$55, #%00011010
0D36E 95 1A                         .db #$95, #%00011010
0D370 D7 1A                         .db #$D7, #%00011010
0D372 09 1A                         .db #$09, #%00011010
0D374 79 1A                         .db #$79, #%00011010
0D376 FF                            .db #LEVEL_END
0D377                           
0D377                           lvl_layout_05:
0D377 40 0A                         .db #$40, #%00001010
0D379 70 1A                         .db #$70, #%00011010
0D37B B0 42                         .db #$B0, #%01000010
0D37D 41 A7                         .db #$41, #%10100111
0D37F B1 22                         .db #$B1, #%00100010
0D381 D1 15                         .db #$D1, #%00010101
0D383 22 0A                         .db #$22, #%00001010
0D385 52 05                         .db #$52, #%00000101
0D387 B2 42                         .db #$B2, #%01000010
0D389 03 27                         .db #$03, #%00100111
0D38B 33 67                         .db #$33, #%01100111
0D38D 73 67                         .db #$73, #%01100111
0D38F B3 47                         .db #$B3, #%01000111
0D391 05 E5                         .db #$05, #%11100101
0D393 25 A5                         .db #$25, #%10100101
0D395 35 25                         .db #$35, #%00100101
0D397 65 45                         .db #$65, #%01000101
0D399 A5 45                         .db #$A5, #%01000101
0D39B 46 E5                         .db #$46, #%11100101
0D39D 66 E5                         .db #$66, #%11100101
0D39F 86 E5                         .db #$86, #%11100101
0D3A1 A6 E2                         .db #$A6, #%11100010
0D3A3 C6 E5                         .db #$C6, #%11100101
0D3A5 27 25                         .db #$27, #%00100101
0D3A7 77 05                         .db #$77, #%00000101
0D3A9 B7 02                         .db #$B7, #%00000010
0D3AB 09 05                         .db #$09, #%00000101
0D3AD 79 05                         .db #$79, #%00000101
0D3AF B9 02                         .db #$B9, #%00000010
0D3B1 FF                            .db #LEVEL_END
0D3B2                           
0D3B2                           lvl_layout_06:
0D3B2 00 03                         .db #$00, #%00000011
0D3B4 20 03                         .db #$20, #%00000011
0D3B6 40 03                         .db #$40, #%00000011
0D3B8 A0 03                         .db #$A0, #%00000011
0D3BA C0 03                         .db #$C0, #%00000011
0D3BC 11 03                         .db #$11, #%00000011
0D3BE 31 03                         .db #$31, #%00000011
0D3C0 51 03                         .db #$51, #%00000011
0D3C2 91 03                         .db #$91, #%00000011
0D3C4 B1 03                         .db #$B1, #%00000011
0D3C6 D1 03                         .db #$D1, #%00000011
0D3C8 02 03                         .db #$02, #%00000011
0D3CA 22 03                         .db #$22, #%00000011
0D3CC 42 03                         .db #$42, #%00000011
0D3CE A2 03                         .db #$A2, #%00000011
0D3D0 C2 03                         .db #$C2, #%00000011
0D3D2 13 03                         .db #$13, #%00000011
0D3D4 33 03                         .db #$33, #%00000011
0D3D6 53 03                         .db #$53, #%00000011
0D3D8 93 03                         .db #$93, #%00000011
0D3DA B3 03                         .db #$B3, #%00000011
0D3DC D3 03                         .db #$D3, #%00000011
0D3DE 04 03                         .db #$04, #%00000011
0D3E0 24 03                         .db #$24, #%00000011
0D3E2 44 03                         .db #$44, #%00000011
0D3E4 A4 03                         .db #$A4, #%00000011
0D3E6 C4 03                         .db #$C4, #%00000011
0D3E8 15 03                         .db #$15, #%00000011
0D3EA 35 03                         .db #$35, #%00000011
0D3EC 55 03                         .db #$55, #%00000011
0D3EE 95 03                         .db #$95, #%00000011
0D3F0 B5 03                         .db #$B5, #%00000011
0D3F2 D5 03                         .db #$D5, #%00000011
0D3F4 06 03                         .db #$06, #%00000011
0D3F6 26 03                         .db #$26, #%00000011
0D3F8 46 03                         .db #$46, #%00000011
0D3FA A6 03                         .db #$A6, #%00000011
0D3FC C6 03                         .db #$C6, #%00000011
0D3FE 17 03                         .db #$17, #%00000011
0D400 37 03                         .db #$37, #%00000011
0D402 57 03                         .db #$57, #%00000011
0D404 97 03                         .db #$97, #%00000011
0D406 B7 03                         .db #$B7, #%00000011
0D408 D7 03                         .db #$D7, #%00000011
0D40A 08 03                         .db #$08, #%00000011
0D40C 28 03                         .db #$28, #%00000011
0D40E 48 03                         .db #$48, #%00000011
0D410 A8 03                         .db #$A8, #%00000011
0D412 C8 03                         .db #$C8, #%00000011
0D414 19 03                         .db #$19, #%00000011
0D416 39 03                         .db #$39, #%00000011
0D418 59 03                         .db #$59, #%00000011
0D41A 99 03                         .db #$99, #%00000011
0D41C B9 03                         .db #$B9, #%00000011
0D41E D9 03                         .db #$D9, #%00000011
0D420 60 4B                         .db #$60, #%01001011
0D422 71 CB                         .db #$71, #%11001011
0D424 62 4B                         .db #$62, #%01001011
0D426 64 4B                         .db #$64, #%01001011
0D428 75 CB                         .db #$75, #%11001011
0D42A 66 4B                         .db #$66, #%01001011
0D42C 68 4B                         .db #$68, #%01001011
0D42E 79 0B                         .db #$79, #%00001011
0D430 70 03                         .db #$70, #%00000011
0D432 72 03                         .db #$72, #%00000011
0D434 74 03                         .db #$74, #%00000011
0D436 76 03                         .db #$76, #%00000011
0D438 78 03                         .db #$78, #%00000011
0D43A FF                            .db #LEVEL_END
0D43B                           
0D43B                           lvl_layout_07:
0D43B 00 11                         .db #$00, #%00010001
0D43D 01 FA                         .db #$01, #%11111010
0D43F 12 BA                         .db #$12, #%10111010
0D441 23 DA                         .db #$23, #%11011010
0D443 34 FA                         .db #$34, #%11111010
0D445 05 DA                         .db #$05, #%11011010
0D447 15 FA                         .db #$15, #%11111010
0D449 45 BA                         .db #$45, #%10111010
0D44B 56 DA                         .db #$56, #%11011010
0D44D 27 BA                         .db #$27, #%10111010
0D44F 67 DA                         .db #$67, #%11011010
0D451 38 3A                         .db #$38, #%00111010
0D453 78 BA                         .db #$78, #%10111010
0D455 09 3A                         .db #$09, #%00111010
0D457 39 3A                         .db #$39, #%00111010
0D459 89 1A                         .db #$89, #%00011010
0D45B B0 01                         .db #$B0, #%00000001
0D45D D0 01                         .db #$D0, #%00000001
0D45F A1 01                         .db #$A1, #%00000001
0D461 C1 11                         .db #$C1, #%00010001
0D463 B2 01                         .db #$B2, #%00000001
0D465 D2 01                         .db #$D2, #%00000001
0D467 A3 01                         .db #$A3, #%00000001
0D469 C3 01                         .db #$C3, #%00000001
0D46B B4 01                         .db #$B4, #%00000001
0D46D D4 01                         .db #$D4, #%00000001
0D46F A5 01                         .db #$A5, #%00000001
0D471 C5 01                         .db #$C5, #%00000001
0D473 B6 01                         .db #$B6, #%00000001
0D475 D6 01                         .db #$D6, #%00000001
0D477 A7 01                         .db #$A7, #%00000001
0D479 C7 01                         .db #$C7, #%00000001
0D47B FF                            .db #LEVEL_END
0D47C                           
0D47C                           lvl_layout_08:
0D47C 40 B5                         .db #$40, #%10110101
0D47E 31 0D                         .db #$31, #%00001101
0D480 61 10                         .db #$61, #%00010000
0D482 42 C7                         .db #$42, #%11000111
0D484 52 67                         .db #$52, #%01100111
0D486 63 C7                         .db #$63, #%11000111
0D488 83 E7                         .db #$83, #%11100111
0D48A 05 07                         .db #$05, #%00000111
0D48C 15 3A                         .db #$15, #%00111010
0D48E 07 63                         .db #$07, #%01100011
0D490 27 13                         .db #$27, #%00010011
0D492 38 A5                         .db #$38, #%10100101
0D494 09 14                         .db #$09, #%00010100
0D496 19 05                         .db #$19, #%00000101
0D498 D0 E0                         .db #$D0, #%11100000
0D49A C2 A0                         .db #$C2, #%10100000
0D49C B3 E0                         .db #$B3, #%11100000
0D49E D5 E0                         .db #$D5, #%11100000
0D4A0 C6 E0                         .db #$C6, #%11100000
0D4A2 B0 C4                         .db #$B0, #%11000100
0D4A4 C0 A4                         .db #$C0, #%10100100
0D4A6 D1 A4                         .db #$D1, #%10100100
0D4A8 C4 24                         .db #$C4, #%00100100
0D4AA C5 04                         .db #$C5, #%00000100
0D4AC B7 44                         .db #$B7, #%01000100
0D4AE B8 A4                         .db #$B8, #%10100100
0D4B0 D9 05                         .db #$D9, #%00000101
0D4B2 FF                            .db #LEVEL_END
0D4B3                           
0D4B3                           lvl_layout_09:
0D4B3 81 04                         .db #$81, #%00000100
0D4B5 D1 04                         .db #$D1, #%00000100
0D4B7 32 C4                         .db #$32, #%11000100
0D4B9 A2 C4                         .db #$A2, #%11000100
0D4BB C2 24                         .db #$C2, #%00100100
0D4BD 13 24                         .db #$13, #%00100100
0D4BF 53 04                         .db #$53, #%00000100
0D4C1 C3 27                         .db #$C3, #%00100111
0D4C3 15 6C                         .db #$15, #%01101100
0D4C5 55 6C                         .db #$55, #%01101100
0D4C7 95 6C                         .db #$95, #%01101100
0D4C9 D5 0C                         .db #$D5, #%00001100
0D4CB 27 C7                         .db #$27, #%11000111
0D4CD 47 C7                         .db #$47, #%11000111
0D4CF 67 C7                         .db #$67, #%11000111
0D4D1 87 C7                         .db #$87, #%11000111
0D4D3 A7 C7                         .db #$A7, #%11000111
0D4D5 C7 C7                         .db #$C7, #%11000111
0D4D7 08 13                         .db #$08, #%00010011
0D4D9 28 15                         .db #$28, #%00010101
0D4DB 48 12                         .db #$48, #%00010010
0D4DD 68 15                         .db #$68, #%00010101
0D4DF 88 11                         .db #$88, #%00010001
0D4E1 A8 10                         .db #$A8, #%00010000
0D4E3 C8 14                         .db #$C8, #%00010100
0D4E5 09 07                         .db #$09, #%00000111
0D4E7 19 03                         .db #$19, #%00000011
0D4E9 39 05                         .db #$39, #%00000101
0D4EB 59 02                         .db #$59, #%00000010
0D4ED 79 05                         .db #$79, #%00000101
0D4EF 99 01                         .db #$99, #%00000001
0D4F1 B9 00                         .db #$B9, #%00000000
0D4F3 D9 04                         .db #$D9, #%00000100
0D4F5 FF                            .db #LEVEL_END
0D4F6                           
0D4F6                           lvl_layout_10:
0D4F6 00 02                         .db #$00, #%00000010
0D4F8 10 C9                         .db #$10, #%11001001
0D4FA 50 C9                         .db #$50, #%11001001
0D4FC 90 C9                         .db #$90, #%11001001
0D4FE D0 C9                         .db #$D0, #%11001001
0D500 31 C9                         .db #$31, #%11001001
0D502 71 C9                         .db #$71, #%11001001
0D504 B1 C9                         .db #$B1, #%11001001
0D506 13 C9                         .db #$13, #%11001001
0D508 53 C9                         .db #$53, #%11001001
0D50A 93 C9                         .db #$93, #%11001001
0D50C D3 C9                         .db #$D3, #%11001001
0D50E 34 C9                         .db #$34, #%11001001
0D510 74 C9                         .db #$74, #%11001001
0D512 B4 C9                         .db #$B4, #%11001001
0D514 16 C9                         .db #$16, #%11001001
0D516 56 C9                         .db #$56, #%11001001
0D518 96 C9                         .db #$96, #%11001001
0D51A D6 C9                         .db #$D6, #%11001001
0D51C 37 C9                         .db #$37, #%11001001
0D51E 77 C9                         .db #$77, #%11001001
0D520 B7 C9                         .db #$B7, #%11001001
0D522 D8 12                         .db #$D8, #%00010010
0D524 FF                            .db #LEVEL_END
0D525                           
0D525                           lvl_layout_11:
0D525 00 65                         .db #$00, #%01100101
0D527 40 45                         .db #$40, #%01000101
0D529 50 A7                         .db #$50, #%10100111
0D52B 80 05                         .db #$80, #%00000101
0D52D 90 A7                         .db #$90, #%10100111
0D52F A0 65                         .db #$A0, #%01100101
0D531 01 43                         .db #$01, #%01000011
0D533 31 23                         .db #$31, #%00100011
0D535 61 A7                         .db #$61, #%10100111
0D537 81 A7                         .db #$81, #%10100111
0D539 A1 63                         .db #$A1, #%01100011
0D53B 02 44                         .db #$02, #%01000100
0D53D 32 44                         .db #$32, #%01000100
0D53F 92 04                         .db #$92, #%00000100
0D541 A2 64                         .db #$A2, #%01100100
0D543 03 40                         .db #$03, #%01000000
0D545 33 40                         .db #$33, #%01000000
0D547 64 81                         .db #$64, #%10000001
0D549 84 82                         .db #$84, #%10000010
0D54B 93 00                         .db #$93, #%00000000
0D54D A3 60                         .db #$A3, #%01100000
0D54F 04 41                         .db #$04, #%01000001
0D551 34 41                         .db #$34, #%01000001
0D553 94 02                         .db #$94, #%00000010
0D555 A4 62                         .db #$A4, #%01100010
0D557 05 47                         .db #$05, #%01000111
0D559 35 67                         .db #$35, #%01100111
0D55B 75 0A                         .db #$75, #%00001010
0D55D 85 47                         .db #$85, #%01000111
0D55F B5 47                         .db #$B5, #%01000111
0D561 06 E7                         .db #$06, #%11100111
0D563 16 5A                         .db #$16, #%01011010
0D565 26 11                         .db #$26, #%00010001
0D567 46 13                         .db #$46, #%00010011
0D569 56 1A                         .db #$56, #%00011010
0D56B 66 14                         .db #$66, #%00010100
0D56D 86 10                         .db #$86, #%00010000
0D56F 96 5A                         .db #$96, #%01011010
0D571 A6 12                         .db #$A6, #%00010010
0D573 C6 15                         .db #$C6, #%00010101
0D575 D6 E7                         .db #$D6, #%11100111
0D577 FF                            .db #LEVEL_END
0D578                           
0D578                           lvl_layout_12:
0D578 00 00                         .db #$00, #%00000000
0D57A 50 C0                         .db #$50, #%11000000
0D57C 80 00                         .db #$80, #%00000000
0D57E 61 00                         .db #$61, #%00000000
0D580 22 C0                         .db #$22, #%11000000
0D582 82 E0                         .db #$82, #%11100000
0D584 C2 E0                         .db #$C2, #%11100000
0D586 A3 20                         .db #$A3, #%00100000
0D588 C3 10                         .db #$C3, #%00010000
0D58A 04 00                         .db #$04, #%00000000
0D58C 54 20                         .db #$54, #%00100000
0D58E 15 0A                         .db #$15, #%00001010
0D590 25 C0                         .db #$25, #%11000000
0D592 55 E0                         .db #$55, #%11100000
0D594 86 20                         .db #$86, #%00100000
0D596 C6 E0                         .db #$C6, #%11100000
0D598 C7 A0                         .db #$C7, #%10100000
0D59A 88 00                         .db #$88, #%00000000
0D59C 59 00                         .db #$59, #%00000000
0D59E 89 20                         .db #$89, #%00100000
0D5A0 D9 1A                         .db #$D9, #%00011010
0D5A2 FF                            .db #LEVEL_END
0D5A3                           
0D5A3                           lvl_layout_13:
0D5A3 10 E0                         .db #$10, #%11100000
0D5A5 20 E0                         .db #$20, #%11100000
0D5A7 30 E0                         .db #$30, #%11100000
0D5A9 40 40                         .db #$40, #%01000000
0D5AB 80 60                         .db #$80, #%01100000
0D5AD C0 E0                         .db #$C0, #%11100000
0D5AF D0 E0                         .db #$D0, #%11100000
0D5B1 41 40                         .db #$41, #%01000000
0D5B3 71 60                         .db #$71, #%01100000
0D5B5 52 60                         .db #$52, #%01100000
0D5B7 A2 20                         .db #$A2, #%00100000
0D5B9 43 60                         .db #$43, #%01100000
0D5BB 83 60                         .db #$83, #%01100000
0D5BD 14 74                         .db #$14, #%01110100
0D5BF 54 74                         .db #$54, #%01110100
0D5C1 94 74                         .db #$94, #%01110100
0D5C3 D4 14                         .db #$D4, #%00010100
0D5C5 15 0D                         .db #$15, #%00001101
0D5C7 55 0D                         .db #$55, #%00001101
0D5C9 95 0D                         .db #$95, #%00001101
0D5CB D5 0D                         .db #$D5, #%00001101
0D5CD 26 0D                         .db #$26, #%00001101
0D5CF 46 0D                         .db #$46, #%00001101
0D5D1 66 0D                         .db #$66, #%00001101
0D5D3 86 0D                         .db #$86, #%00001101
0D5D5 A6 0D                         .db #$A6, #%00001101
0D5D7 C6 0D                         .db #$C6, #%00001101
0D5D9 07 10                         .db #$07, #%00010000
0D5DB 37 0D                         .db #$37, #%00001101
0D5DD 77 0D                         .db #$77, #%00001101
0D5DF B7 0D                         .db #$B7, #%00001101
0D5E1 28 0D                         .db #$28, #%00001101
0D5E3 48 0D                         .db #$48, #%00001101
0D5E5 68 0D                         .db #$68, #%00001101
0D5E7 88 0D                         .db #$88, #%00001101
0D5E9 A8 0D                         .db #$A8, #%00001101
0D5EB C8 0D                         .db #$C8, #%00001101
0D5ED 19 0D                         .db #$19, #%00001101
0D5EF 59 0D                         .db #$59, #%00001101
0D5F1 99 0D                         .db #$99, #%00001101
0D5F3 D9 0D                         .db #$D9, #%00001101
0D5F5 FF                            .db #LEVEL_END
0D5F6                           
0D5F6                           lvl_layout_14:
0D5F6 00 67                         .db #$00, #%01100111
0D5F8 40 67                         .db #$40, #%01100111
0D5FA 80 67                         .db #$80, #%01100111
0D5FC C0 27                         .db #$C0, #%00100111
0D5FE 01 27                         .db #$01, #%00100111
0D600 31 C7                         .db #$31, #%11000111
0D602 51 C7                         .db #$51, #%11000111
0D604 71 C7                         .db #$71, #%11000111
0D606 91 C7                         .db #$91, #%11000111
0D608 B1 C7                         .db #$B1, #%11000111
0D60A D1 07                         .db #$D1, #%00000111
0D60C 02 E7                         .db #$02, #%11100111
0D60E 06 E7                         .db #$06, #%11100111
0D610 13 07                         .db #$13, #%00000111
0D612 D3 07                         .db #$D3, #%00000111
0D614 15 07                         .db #$15, #%00000111
0D616 35 07                         .db #$35, #%00000111
0D618 55 07                         .db #$55, #%00000111
0D61A 75 07                         .db #$75, #%00000111
0D61C 95 07                         .db #$95, #%00000111
0D61E B5 07                         .db #$B5, #%00000111
0D620 D5 07                         .db #$D5, #%00000111
0D622 17 07                         .db #$17, #%00000111
0D624 37 C7                         .db #$37, #%11000111
0D626 57 C7                         .db #$57, #%11000111
0D628 77 C7                         .db #$77, #%11000111
0D62A 97 C7                         .db #$97, #%11000111
0D62C B7 C7                         .db #$B7, #%11000111
0D62E D7 07                         .db #$D7, #%00000111
0D630 19 07                         .db #$19, #%00000111
0D632 D9 07                         .db #$D9, #%00000111
0D634 22 4C                         .db #$22, #%01001100
0D636 62 4C                         .db #$62, #%01001100
0D638 A2 4C                         .db #$A2, #%01001100
0D63A 24 0C                         .db #$24, #%00001100
0D63C 44 0C                         .db #$44, #%00001100
0D63E 64 0C                         .db #$64, #%00001100
0D640 84 0C                         .db #$84, #%00001100
0D642 A4 0C                         .db #$A4, #%00001100
0D644 C4 0C                         .db #$C4, #%00001100
0D646 26 0C                         .db #$26, #%00001100
0D648 46 0C                         .db #$46, #%00001100
0D64A 66 0C                         .db #$66, #%00001100
0D64C 86 0C                         .db #$86, #%00001100
0D64E A6 0C                         .db #$A6, #%00001100
0D650 C6 0C                         .db #$C6, #%00001100
0D652 28 4C                         .db #$28, #%01001100
0D654 68 4C                         .db #$68, #%01001100
0D656 A8 4C                         .db #$A8, #%01001100
0D658 32 04                         .db #$32, #%00000100
0D65A 52 04                         .db #$52, #%00000100
0D65C 72 04                         .db #$72, #%00000100
0D65E 92 04                         .db #$92, #%00000100
0D660 B2 04                         .db #$B2, #%00000100
0D662 38 04                         .db #$38, #%00000100
0D664 58 04                         .db #$58, #%00000100
0D666 78 04                         .db #$78, #%00000100
0D668 98 04                         .db #$98, #%00000100
0D66A B8 04                         .db #$B8, #%00000100
0D66C FF                            .db #LEVEL_END
0D66D                           
0D66D                           lvl_layout_15:
0D66D 00 7A                         .db #$00, #%01111010
0D66F 40 7A                         .db #$40, #%01111010
0D671 80 7A                         .db #$80, #%01111010
0D673 C0 3A                         .db #$C0, #%00111010
0D675 61 64                         .db #$61, #%01100100
0D677 05 E4                         .db #$05, #%11100100
0D679 15 64                         .db #$15, #%01100100
0D67B 55 64                         .db #$55, #%01100100
0D67D 95 64                         .db #$95, #%01100100
0D67F D5 E4                         .db #$D5, #%11100100
0D681 26 04                         .db #$26, #%00000100
0D683 46 44                         .db #$46, #%01000100
0D685 76 64                         .db #$76, #%01100100
0D687 C6 04                         .db #$C6, #%00000100
0D689 17 04                         .db #$17, #%00000100
0D68B 37 64                         .db #$37, #%01100100
0D68D 77 44                         .db #$77, #%01000100
0D68F B7 04                         .db #$B7, #%00000100
0D691 18 64                         .db #$18, #%01100100
0D693 58 64                         .db #$58, #%01100100
0D695 98 64                         .db #$98, #%01100100
0D697 FF                            .db #LEVEL_END
0D698                           
0D698                           lvl_layout_16:
0D698 10 E1                         .db #$10, #%11100001
0D69A 20 9A                         .db #$20, #%10011010
0D69C 30 E1                         .db #$30, #%11100001
0D69E 40 E1                         .db #$40, #%11100001
0D6A0 50 E1                         .db #$50, #%11100001
0D6A2 60 C1                         .db #$60, #%11000001
0D6A4 70 E1                         .db #$70, #%11100001
0D6A6 80 E1                         .db #$80, #%11100001
0D6A8 90 E1                         .db #$90, #%11100001
0D6AA A0 61                         .db #$A0, #%01100001
0D6AC 21 C1                         .db #$21, #%11000001
0D6AE A1 1A                         .db #$A1, #%00011010
0D6B0 B1 41                         .db #$B1, #%01000001
0D6B2 A2 E1                         .db #$A2, #%11100001
0D6B4 B2 E1                         .db #$B2, #%11100001
0D6B6 C2 1A                         .db #$C2, #%00011010
0D6B8 D2 E1                         .db #$D2, #%11100001
0D6BA 63 1A                         .db #$63, #%00011010
0D6BC C3 C1                         .db #$C3, #%11000001
0D6BE 14 61                         .db #$14, #%01100001
0D6C0 54 61                         .db #$54, #%01100001
0D6C2 94 C1                         .db #$94, #%11000001
0D6C4 15 61                         .db #$15, #%01100001
0D6C6 55 41                         .db #$55, #%01000001
0D6C8 85 1A                         .db #$85, #%00011010
0D6CA 16 41                         .db #$16, #%01000001
0D6CC 46 1A                         .db #$46, #%00011010
0D6CE 56 61                         .db #$56, #%01100001
0D6D0 A6 61                         .db #$A6, #%01100001
0D6D2 17 67                         .db #$17, #%01100111
0D6D4 57 67                         .db #$57, #%01100111
0D6D6 97 67                         .db #$97, #%01100111
0D6D8 D7 07                         .db #$D7, #%00000111
0D6DA 28 41                         .db #$28, #%01000001
0D6DC 58 61                         .db #$58, #%01100001
0D6DE A8 41                         .db #$A8, #%01000001
0D6E0 18 11                         .db #$18, #%00010001
0D6E2 38 11                         .db #$38, #%00010001
0D6E4 98 11                         .db #$98, #%00010001
0D6E6 B8 11                         .db #$B8, #%00010001
0D6E8 D8 11                         .db #$D8, #%00010001
0D6EA 59 09                         .db #$59, #%00001001
0D6EC FF                            .db #LEVEL_END
0D6ED                           
0D6ED                           lvl_layout_17:
0D6ED 10 EA                         .db #$10, #%11101010
0D6EF 20 E2                         .db #$20, #%11100010
0D6F1 30 62                         .db #$30, #%01100010
0D6F3 70 02                         .db #$70, #%00000010
0D6F5 80 6A                         .db #$80, #%01101010
0D6F7 90 22                         .db #$90, #%00100010
0D6F9 01 AA                         .db #$01, #%10101010
0D6FB 31 6A                         .db #$31, #%01101010
0D6FD 81 2A                         .db #$81, #%00101010
0D6FF A1 02                         .db #$A1, #%00000010
0D701 C1 02                         .db #$C1, #%00000010
0D703 D1 0A                         .db #$D1, #%00001010
0D705 32 EA                         .db #$32, #%11101010
0D707 42 6A                         .db #$42, #%01101010
0D709 62 02                         .db #$62, #%00000010
0D70B 92 6A                         .db #$92, #%01101010
0D70D D2 E2                         .db #$D2, #%11100010
0D70F 43 1A                         .db #$43, #%00011010
0D711 53 CA                         .db #$53, #%11001010
0D713 73 02                         .db #$73, #%00000010
0D715 83 4A                         .db #$83, #%01001010
0D717 B3 CA                         .db #$B3, #%11001010
0D719 C3 EA                         .db #$C3, #%11101010
0D71B 04 0A                         .db #$04, #%00001010
0D71D 14 A2                         .db #$14, #%10100010
0D71F 24 AA                         .db #$24, #%10101010
0D721 44 AA                         .db #$44, #%10101010
0D723 64 6A                         .db #$64, #%01101010
0D725 65 6A                         .db #$65, #%01101010
0D727 A5 AA                         .db #$A5, #%10101010
0D729 06 EA                         .db #$06, #%11101010
0D72B 16 62                         .db #$16, #%01100010
0D72D 66 22                         .db #$66, #%00100010
0D72F 86 2A                         .db #$86, #%00101010
0D731 17 42                         .db #$17, #%01000010
0D733 47 12                         .db #$47, #%00010010
0D735 57 6A                         .db #$57, #%01101010
0D737 97 4A                         .db #$97, #%01001010
0D739 A7 02                         .db #$A7, #%00000010
0D73B 18 02                         .db #$18, #%00000010
0D73D 28 0A                         .db #$28, #%00001010
0D73F 38 22                         .db #$38, #%00100010
0D741 68 2A                         .db #$68, #%00101010
0D743 88 62                         .db #$88, #%01100010
0D745 C8 0A                         .db #$C8, #%00001010
0D747 D8 02                         .db #$D8, #%00000010
0D749 19 2A                         .db #$19, #%00101010
0D74B 39 2A                         .db #$39, #%00101010
0D74D 69 42                         .db #$69, #%01000010
0D74F 99 2A                         .db #$99, #%00101010
0D751 B9 42                         .db #$B9, #%01000010
0D753 FF                            .db #LEVEL_END
0D754                           
0D754                           lvl_layout_18:
0D754 00 12                         .db #$00, #%00010010
0D756 40 1A                         .db #$40, #%00011010
0D758 50 11                         .db #$50, #%00010001
0D75A 70 1A                         .db #$70, #%00011010
0D75C 80 10                         .db #$80, #%00010000
0D75E D0 13                         .db #$D0, #%00010011
0D760 01 1A                         .db #$01, #%00011010
0D762 22 15                         .db #$22, #%00010101
0D764 A2 1A                         .db #$A2, #%00011010
0D766 B2 14                         .db #$B2, #%00010100
0D768 03 67                         .db #$03, #%01100111
0D76A 43 67                         .db #$43, #%01100111
0D76C 83 67                         .db #$83, #%01100111
0D76E 24 09                         .db #$24, #%00001001
0D770 74 0D                         .db #$74, #%00001101
0D772 C4 0A                         .db #$C4, #%00001010
0D774 05 A7                         .db #$05, #%10100111
0D776 45 27                         .db #$45, #%00100111
0D778 95 27                         .db #$95, #%00100111
0D77A 16 C7                         .db #$16, #%11000111
0D77C 36 67                         .db #$36, #%01100111
0D77E 86 67                         .db #$86, #%01100111
0D780 D6 07                         .db #$D6, #%00000111
0D782 07 A3                         .db #$07, #%10100011
0D784 27 23                         .db #$27, #%00100011
0D786 47 C7                         .db #$47, #%11000111
0D788 57 A0                         .db #$57, #%10100000
0D78A 67 A7                         .db #$67, #%10100111
0D78C 77 20                         .db #$77, #%00100000
0D78E 97 C7                         .db #$97, #%11000111
0D790 A7 A4                         .db #$A7, #%10100100
0D792 B7 A7                         .db #$B7, #%10100111
0D794 C7 24                         .db #$C7, #%00100100
0D796 28 0B                         .db #$28, #%00001011
0D798 38 A3                         .db #$38, #%10100011
0D79A 78 08                         .db #$78, #%00001000
0D79C 88 A0                         .db #$88, #%10100000
0D79E C8 0C                         .db #$C8, #%00001100
0D7A0 D8 A4                         .db #$D8, #%10100100
0D7A2 09 43                         .db #$09, #%01000011
0D7A4 59 40                         .db #$59, #%01000000
0D7A6 A9 44                         .db #$A9, #%01000100
0D7A8 FF                            .db #LEVEL_END
0D7A9                           
0D7A9                           lvl_layout_19:
0D7A9 11 A8                         .db #$11, #%10101000
0D7AB 21 68                         .db #$21, #%01101000
0D7AD 81 28                         .db #$81, #%00101000
0D7AF B1 48                         .db #$B1, #%01001000
0D7B1 22 48                         .db #$22, #%01001000
0D7B3 62 68                         .db #$62, #%01101000
0D7B5 B2 28                         .db #$B2, #%00101000
0D7B7 23 28                         .db #$23, #%00101000
0D7B9 83 28                         .db #$83, #%00101000
0D7BB B3 28                         .db #$B3, #%00101000
0D7BD 04 E8                         .db #$04, #%11101000
0D7BF 24 08                         .db #$24, #%00001000
0D7C1 44 08                         .db #$44, #%00001000
0D7C3 64 E8                         .db #$64, #%11101000
0D7C5 84 E8                         .db #$84, #%11101000
0D7C7 C4 A8                         .db #$C4, #%10101000
0D7C9 D4 E8                         .db #$D4, #%11101000
0D7CB 15 48                         .db #$15, #%01001000
0D7CD 55 C8                         .db #$55, #%11001000
0D7CF 75 C8                         .db #$75, #%11001000
0D7D1 A5 08                         .db #$A5, #%00001000
0D7D3 36 08                         .db #$36, #%00001000
0D7D5 B6 08                         .db #$B6, #%00001000
0D7D7 27 48                         .db #$27, #%01001000
0D7D9 97 28                         .db #$97, #%00101000
0D7DB C7 08                         .db #$C7, #%00001000
0D7DD 09 61                         .db #$09, #%01100001
0D7DF 19 11                         .db #$19, #%00010001
0D7E1 49 61                         .db #$49, #%01100001
0D7E3 89 31                         .db #$89, #%00110001
0D7E5 A9 61                         .db #$A9, #%01100001
0D7E7 FF                            .db #LEVEL_END
0D7E8                           
0D7E8                           lvl_layout_20:
0D7E8 00 60                         .db #$00, #%01100000
0D7EA 10 1A                         .db #$10, #%00011010
0D7EC 40 A7                         .db #$40, #%10100111
0D7EE 50 20                         .db #$50, #%00100000
0D7F0 70 1A                         .db #$70, #%00011010
0D7F2 80 40                         .db #$80, #%01000000
0D7F4 B0 1A                         .db #$B0, #%00011010
0D7F6 C0 20                         .db #$C0, #%00100000
0D7F8 01 40                         .db #$01, #%01000000
0D7FA 31 1A                         .db #$31, #%00011010
0D7FC A1 40                         .db #$A1, #%01000000
0D7FE D1 1A                         .db #$D1, #%00011010
0D800 43 67                         .db #$43, #%01100111
0D802 83 47                         .db #$83, #%01000111
0D804 44 A7                         .db #$44, #%10100111
0D806 54 25                         .db #$54, #%00100101
0D808 94 08                         .db #$94, #%00001000
0D80A A4 A7                         .db #$A4, #%10100111
0D80C 55 05                         .db #$55, #%00000101
0D80E 65 08                         .db #$65, #%00001000
0D810 06 27                         .db #$06, #%00100111
0D812 36 67                         .db #$36, #%01100111
0D814 76 28                         .db #$76, #%00101000
0D816 A6 27                         .db #$A6, #%00100111
0D818 D6 07                         .db #$D6, #%00000111
0D81A A7 A7                         .db #$A7, #%10100111
0D81C 08 60                         .db #$08, #%01100000
0D81E 09 60                         .db #$09, #%01100000
0D820 18 A7                         .db #$18, #%10100111
0D822 48 A7                         .db #$48, #%10100111
0D824 58 47                         .db #$58, #%01000111
0D826 88 27                         .db #$88, #%00100111
0D828 B8 20                         .db #$B8, #%00100000
0D82A D8 1A                         .db #$D8, #%00011010
0D82C 59 15                         .db #$59, #%00010101
0D82E 69 60                         .db #$69, #%01100000
0D830 A9 60                         .db #$A9, #%01100000
0D832 FF                            .db #LEVEL_END
0D833                           
0D833                           lvl_layout_21:
0D833 00 13                         .db #$00, #%00010011
0D835 10 11                         .db #$10, #%00010001
0D837 20 67                         .db #$20, #%01100111
0D839 60 67                         .db #$60, #%01100111
0D83B A0 47                         .db #$A0, #%01000111
0D83D D0 15                         .db #$D0, #%00010101
0D83F 32 63                         .db #$32, #%01100011
0D841 72 05                         .db #$72, #%00000101
0D843 82 43                         .db #$82, #%01000011
0D845 B2 43                         .db #$B2, #%01000011
0D847 33 03                         .db #$33, #%00000011
0D849 43 2A                         .db #$43, #%00101010
0D84B 63 7A                         .db #$63, #%01111010
0D84D 73 2A                         .db #$73, #%00101010
0D84F A3 7A                         .db #$A3, #%01111010
0D851 34 63                         .db #$34, #%01100011
0D853 74 63                         .db #$74, #%01100011
0D855 B4 43                         .db #$B4, #%01000011
0D857 06 63                         .db #$06, #%01100011
0D859 46 63                         .db #$46, #%01100011
0D85B 86 63                         .db #$86, #%01100011
0D85D C6 C3                         .db #$C6, #%11000011
0D85F 07 7A                         .db #$07, #%01111010
0D861 47 7A                         .db #$47, #%01111010
0D863 67 0A                         .db #$67, #%00001010
0D865 87 7A                         .db #$87, #%01111010
0D867 08 13                         .db #$08, #%00010011
0D869 18 43                         .db #$18, #%01000011
0D86B 48 63                         .db #$48, #%01100011
0D86D 88 63                         .db #$88, #%01100011
0D86F FF                            .db #LEVEL_END
0D870                           
0D870                           lvl_layout_22:
0D870 00 7A                         .db #$00, #%01111010
0D872 40 7A                         .db #$40, #%01111010
0D874 80 7A                         .db #$80, #%01111010
0D876 C0 3A                         .db #$C0, #%00111010
0D878 13 67                         .db #$13, #%01100111
0D87A 83 A7                         .db #$83, #%10100111
0D87C B3 07                         .db #$B3, #%00000111
0D87E 14 07                         .db #$14, #%00000111
0D880 44 07                         .db #$44, #%00000111
0D882 A4 07                         .db #$A4, #%00000111
0D884 15 A5                         .db #$15, #%10100101
0D886 45 A5                         .db #$45, #%10100101
0D888 85 25                         .db #$85, #%00100101
0D88A 86 05                         .db #$86, #%00000101
0D88C A6 05                         .db #$A6, #%00000101
0D88E 17 11                         .db #$17, #%00010001
0D890 47 A1                         .db #$47, #%10100001
0D892 87 A1                         .db #$87, #%10100001
0D894 B7 A1                         .db #$B7, #%10100001
0D896 18 41                         .db #$18, #%01000001
0D898 68 01                         .db #$68, #%00000001
0D89A D8 01                         .db #$D8, #%00000001
0D89C FF                            .db #LEVEL_END
0D89D                           
0D89D                           lvl_layout_23:
0D89D 00 71                         .db #$00, #%01110001
0D89F 40 11                         .db #$40, #%00010001
0D8A1 50 43                         .db #$50, #%01000011
0D8A3 80 D1                         .db #$80, #%11010001
0D8A5 90 E3                         .db #$90, #%11100011
0D8A7 A0 63                         .db #$A0, #%01100011
0D8A9 01 63                         .db #$01, #%01100011
0D8AB 41 63                         .db #$41, #%01100011
0D8AD A1 63                         .db #$A1, #%01100011
0D8AF 02 63                         .db #$02, #%01100011
0D8B1 42 63                         .db #$42, #%01100011
0D8B3 62 11                         .db #$62, #%00010001
0D8B5 A2 67                         .db #$A2, #%01100111
0D8B7 04 63                         .db #$04, #%01100011
0D8B9 44 23                         .db #$44, #%00100011
0D8BB 64 D1                         .db #$64, #%11010001
0D8BD 74 E3                         .db #$74, #%11100011
0D8BF 84 F1                         .db #$84, #%11110001
0D8C1 94 E3                         .db #$94, #%11100011
0D8C3 A4 C7                         .db #$A4, #%11000111
0D8C5 B4 23                         .db #$B4, #%00100011
0D8C7 05 63                         .db #$05, #%01100011
0D8C9 45 23                         .db #$45, #%00100011
0D8CB 06 71                         .db #$06, #%01110001
0D8CD 46 11                         .db #$46, #%00010001
0D8CF 56 E3                         .db #$56, #%11100011
0D8D1 D6 07                         .db #$D6, #%00000111
0D8D3 17 D1                         .db #$17, #%11010001
0D8D5 27 43                         .db #$27, #%01000011
0D8D7 67 D1                         .db #$67, #%11010001
0D8D9 A7 C7                         .db #$A7, #%11000111
0D8DB C7 A7                         .db #$C7, #%10100111
0D8DD D7 B3                         .db #$D7, #%10110011
0D8DF 28 43                         .db #$28, #%01000011
0D8E1 78 43                         .db #$78, #%01000011
0D8E3 29 43                         .db #$29, #%01000011
0D8E5 79 43                         .db #$79, #%01000011
0D8E7 FF                           .db #LEVEL_END
0D8E8                           
0D8E8                           lvl_layout_24:
0D8E8 02 67                         .db #$02, #%01100111
0D8EA 42 67                         .db #$42, #%01100111
0D8EC 82 67                         .db #$82, #%01100111
0D8EE 05 67                         .db #$05, #%01100111
0D8F0 45 67                         .db #$45, #%01100111
0D8F2 85 67                         .db #$85, #%01100111
0D8F4 08 67                         .db #$08, #%01100111
0D8F6 48 67                         .db #$48, #%01100111
0D8F8 88 67                         .db #$88, #%01100111
0D8FA 30 E7                         .db #$30, #%11100111
0D8FC 70 E7                         .db #$70, #%11100111
0D8FE B0 E7                         .db #$B0, #%11100111
0D900 34 E7                         .db #$34, #%11100111
0D902 74 E7                         .db #$74, #%11100111
0D904 B4 E7                         .db #$B4, #%11100111
0D906 20 13                         .db #$20, #%00010011
0D908 40 10                         .db #$40, #%00010000
0D90A 80 02                         .db #$80, #%00000010
0D90C 41 05                         .db #$41, #%00000101
0D90E B1 09                         .db #$B1, #%00001001
0D910 02 09                         .db #$02, #%00001001
0D912 52 0C                         .db #$52, #%00001100
0D914 13 11                         .db #$13, #%00010001
0D916 33 04                         .db #$33, #%00000100
0D918 74 0C                         .db #$74, #%00001100
0D91A B4 08                         .db #$B4, #%00001000
0D91C 15 09                         .db #$15, #%00001001
0D91E 55 0C                         .db #$55, #%00001100
0D920 95 0C                         .db #$95, #%00001100
0D922 47 03                         .db #$47, #%00000011
0D924 A7 12                         .db #$A7, #%00010010
0D926 18 15                         .db #$18, #%00010101
0D928 09 05                         .db #$09, #%00000101
0D92A 19 03                         .db #$19, #%00000011
0D92C FF                            .db #LEVEL_END
0D92D                           
0D92D                           lvl_layout_25:
0D92D 00 12                         .db #$00, #%00010010
0D92F 10 63                         .db #$10, #%01100011
0D931 60 63                         .db #$60, #%01100011
0D933 A0 07                         .db #$A0, #%00000111
0D935 01 11                         .db #$01, #%00010001
0D937 A1 02                         .db #$A1, #%00000010
0D939 02 67                         .db #$02, #%01100111
0D93B 42 07                         .db #$42, #%00000111
0D93D 62 67                         .db #$62, #%01100111
0D93F A2 C7                         .db #$A2, #%11000111
0D941 03 61                         .db #$03, #%01100001
0D943 43 01                         .db #$43, #%00000001
0D945 63 61                         .db #$63, #%01100001
0D947 A6 E7                         .db #$A6, #%11100111
0D949 B6 47                         .db #$B6, #%01000111
0D94B C6 01                         .db #$C6, #%00000001
0D94D B7 42                         .db #$B7, #%01000010
0D94F B8 42                         .db #$B8, #%01000010
0D951 C8 0A                         .db #$C8, #%00001010
0D953 09 7A                         .db #$09, #%01111010
0D955 49 7A                         .db #$49, #%01111010
0D957 89 3A                         .db #$89, #%00111010
0D959 B9 42                         .db #$B9, #%01000010
0D95B FF                            .db #LEVEL_END
0D95C                           
0D95C                           ;; Level layout address pointers
0D95C                           tbl_lvl_layout_hi:
0D95C                           ifdef TESTING
0D95C D2                            .db >#lvl_test
0D95D                           endif
0D95D D2 D2 D2 D3 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D962 D3 D4 D4 D4 D4                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D967 D5 D5 D5 D5 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D96C D6 D6 D7 D7 D7                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D971 D8 D8 D8 D8 D9                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D976                           
0D976                           tbl_lvl_layout_lo:
0D976                           ifdef TESTING
0D976 72                            .db <#lvl_test
0D977                           endif
0D977 83 9E D3 06 77                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D97C B2 3B 7C B3 F6                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D981 25 78 A3 F6 6D                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D986 98 ED 54 A9 E8                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D98B 33 70 9D E8 2D                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D990                           
0D990                           ;; Ball start position (#$YX)
0D990                           tbl_lvl_ball_startpos:
0D990                           ifdef TESTING
0D990 29                            .db #$29
0D991                           endif
0D991 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D996 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D99B 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D9A0 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D9A5 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D9AA                           
0D9AA                               
0D9AA                           ;; Ball start direction, color and tile score
0D9AA                           ;; #% ccc v tttt
0D9AA                           ;;    ||| | ++++-- tile score
0D9AA                           ;;    ||| +------- vertical direction, up (0) or down
0D9AA                           ;;    +++--------- color (CBRYGM)
0D9AA                           tbl_lvl_ball_init:
0D9AA                           ifdef TESTING
0D9AA 20                            .db #%00100000
0D9AB                           endif
0D9AB 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D9B0 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D9B5 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D9BA 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D9BF 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D9C4                           
0D9C4                           
0D9C4                           
0D9C4                           ;; Helper table to multiply values by 16
0D9C4                           tbl_Times16:
0D9C4 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D9CC 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D9D4                               
0D9D4                           
0D9D4                           ;; Helper table to multiply values by 64
0D9D4                           tbl_Times64:
0D9D4 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D9D8                           
0D9D8                           
0D9D8                           ;; Metatile ID to CHR data mapper
0D9D8                           tbl_GametileTopLeft:
0D9D8 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D9E2                           
0D9E2                           tbl_GametileTopRight:
0D9E2 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D9EC                           
0D9EC                           tbl_GametileBottomLeft:
0D9EC 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D9F6                           
0D9F6                           tbl_GametileBottomRight:
0D9F6 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DA00                           
0DA00                           ;; Metatile ID to RAM byte data mapper
0DA00                           tbl_GameTileRamByte:
0DA00 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DA05                           
0DA05                           ;; HUD text data (with opaque background tile for sprite zero)
0DA05                           tbl_HudText:
0DA05 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DA0D 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DA14 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DA1C 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DA23                           
0DA23                           ;; Move block top left tile based on color
0DA23                           tbl_MoveBlockTopLeftTile:
0DA23 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DA2A                           
0DA2A                           ;; Game over data
0DA2A                           tbl_GameOver:
0DA2A 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DA2E 00 00                         .db #_SPACE, #_SPACE
0DA30 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DA34                           
0DA34                           ;; Background fade pallette table
0DA34                           tbl_BackgroundFade:
0DA34 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DA3E                           
0DA3E                           ;; Sound effects
0DA3E                           .include "game/include/table/sfx.asm"
0DA3E                           ;;
0DA3E                           ;; Explosion sound effects
0DA3E                           ;;
0DA3E                           ;;   #% ffff vvvv
0DA3E                           ;;      |||| ++++---- volume (0=low, 15=high)
0DA3E                           ;;      ++++-------- frequency (0=low, 15=high)
0DA3E                           ;;
0DA3E                           ;; #$FF = end of sfx
0DA3E                           ;;
0DA3E                           
0DA3E                           tbl_ExplosionSfx:
0DA3E 00                            .db #$00 ; buffer byte
0DA3F 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DA47 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DA4F 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DA57 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DA5F 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DA67 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DA6C                           
0DA6C                           tbl_ThudSfx:
0DA6C 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA6D 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DA75 E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DA7A                           
0DA7A                           tbl_BounceSfx:
0DA7A 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA7B 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DA7F                           
0DA7F 00                            .db #$00
0DA80                           
0DA80                           tbl_Sfx_hi:
0DA80 DA DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DA83                           
0DA83                           tbl_Sfx_lo:
0DA83 3E 6C 7A                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DA86                           
0DA86                           
0DA86                           ;; Volume envelope for move sound effect (reversed)
0DA86                           tbl_MoveSfxVolume:
0DA86 00 00 02 03 0B 0C 0B 0B       .db #$00, #$00, #$02, #$03, #$0B, #$0C, #$0B, #$0B
0DA8E 09 09 08 07 06 06 05 05       .db #$09, #$09, #$08, #$07, #$06, #$06, #$05, #$05
0DA96 04 04 03 03 03 03 02 01       .db #$04, #$04, #$03, #$03, #$03, #$03, #$02, #$01
0DA9E                           
0DA9E                           ;; Lookup table to convert bonus ticks to score
0DA9E                           tbl_BonusToScore:
0DA9E 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DAA8                           
0DAA8                           
0DAA8                           ;; NMI handler
0DAA8                           NMI:
0DAA8                               .include "interrupt/nmi.asm"
0DAA8                           
0DAA8                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DAA8                           ;;
0DAA8                           ;; include/nmi.asm
0DAA8                           ;;
0DAA8                           ;; Non-maskable interrupt script. This script is being executed
0DAA8                           ;; when vBlank hits.
0DAA8                           ;;
0DAA8                           ;;
0DAA8                           
0DAA8                               ;; Preserve accumulator through stack
0DAA8 48                            PHA
0DAA9                           
0DAA9                               ;; Should NMI be skipped?
0DAA9 A5 13                         LDA skip_nmi
0DAAB F0 03                         BEQ +
0DAAD 4C 6E DC                          JMP +skip_nmi
0DAB0                               +
0DAB0                           
0DAB0                               ;; When in NMI, skip additional NMI requests
0DAB0 A9 01                         LDA #$01
0DAB2 85 13                         STA skip_nmi
0DAB4                           
0DAB4                               ;; Preserve X, Y, and PC through stack
0DAB4 8A                            TXA
0DAB5 48                            PHA
0DAB6 98                            TYA
0DAB7 48                            PHA
0DAB8 08                            PHP
0DAB9                               
0DAB9                               ;; Check forced NMI skip
0DAB9 A5 14                         LDA force_skip_nmi
0DABB F0 03                         BEQ +
0DABD 4C 5D DC                          JMP +force_skip_nmi
0DAC0                               +
0DAC0                           
0DAC0                               ;; Update PPU mask
0DAC0                               ;LDA #$00
0DAC0                               ;STA PPU_CTRL
0DAC0 A5 12                         LDA soft_ppu_mask
0DAC2 8D 01 20                      STA PPU_MASK
0DAC5                               
0DAC5                               
0DAC5                               ;; Additional PPU updates go here
0DAC5                               .include "game/interrupt/nmi.asm"
0DAC5                           
0DAC5                               ;; Check if ppu_buffer needs updating
0DAC5 A5 39                         LDA ppu_buffer_update
0DAC7 D0 03                         BNE +
0DAC9 4C 0B DB                          JMP +no_ppu_buffer_update
0DACC                               +
0DACC                           
0DACC                               ;; Reset ppu control register and mask
0DACC A2 00                         LDX #$00
0DACE 8E 00 20                      STX PPU_CTRL
0DAD1 8E 01 20                      STX PPU_MASK
0DAD4                           
0DAD4                               ;; Set up loop
0DAD4                               -
0DAD4                                   ;; Reset hi/lo latch
0DAD4 2C 02 20                          BIT PPU_STATUS
0DAD7                           
0DAD7                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DAD7 BD 00 03                          LDA ppu_buffer,x
0DADA 8D 06 20                          STA PPU_ADDR
0DADD E8                                INX
0DADE BD 00 03                          LDA ppu_buffer,x
0DAE1 8D 06 20                          STA PPU_ADDR
0DAE4                           
0DAE4                                   ;; Write ppu_buffer data to PPU_ADDR
0DAE4 E8                                INX
0DAE5 BD 00 03                          LDA ppu_buffer,x
0DAE8 8D 07 20                          STA PPU_DATA
0DAEB                           
0DAEB                                   ;; Check if updating is done (eg. X is at pointer)
0DAEB E8                                INX
0DAEC E4 3A                             CPX ppu_buffer_pointer
0DAEE F0 03                             BEQ +
0DAF0 4C D4 DA                      JMP -
0DAF3                           +
0DAF3                           
0DAF3                               ;; Reset ppu buffer update and pointer
0DAF3 A9 00                         LDA #$00
0DAF5 85 39                         STA ppu_buffer_update
0DAF7 85 3A                         STA ppu_buffer_pointer
0DAF9                               
0DAF9                               ;; Reset scrolling position
0DAF9 8D 05 20                      STA PPU_SCROLL
0DAFC 8D 05 20                      STA PPU_SCROLL
0DAFF                           
0DAFF                               ;; Restore ppu control register and mask
0DAFF A9 90                         LDA #%10010000
0DB01 8D 00 20                      STA PPU_CTRL
0DB04 A5 12                         LDA soft_ppu_mask
0DB06 8D 01 20                      STA PPU_MASK
0DB09 A9 00                         LDA #$00
0DB0B                           
0DB0B                           ;; Continue other NMI stuff
0DB0B                           +no_ppu_buffer_update:
0DB0B                           
0DB0B                               ;; Reset sprite RAM, draw sprites
0DB0B 8D 03 20                      STA OAM_ADDR
0DB0E A9 02                         LDA #$02
0DB10 8D 14 40                      STA OAM_DMA
0DB13                           
0DB13                               ;; Decrease explosion and move block timers
0DB13 A0 04                         LDY #MAX_ANIMATIONS
0DB15 A2 00                         LDX #$00
0DB17                               -
0DB17 BD 60 03                          LDA explosion_timer,x
0DB1A F0 03                             BEQ +
0DB1C DE 60 03                              DEC explosion_timer,x
0DB1F                                   +
0DB1F                           
0DB1F BD 80 03                          LDA move_block_timer,x
0DB22 F0 03                             BEQ +
0DB24 DE 80 03                              DEC move_block_timer,x
0DB27                                   +
0DB27                                   
0DB27 E8                                INX
0DB28 88                                DEY
0DB29 F0 03                             BEQ +done
0DB2B 4C 17 DB                      JMP -
0DB2E                           +done:
0DB2E                           
0DB2E                               ;; Decrease nudge timer
0DB2E A5 3E                         LDA nudge_timer
0DB30 F0 02                         BEQ +
0DB32 C6 3E                             DEC nudge_timer
0DB34                               +
0DB34                           
0DB34                               ;; Decrease bonus timer
0DB34 A5 3F                         LDA bonus_timer
0DB36 F0 02                         BEQ +
0DB38 C6 3F                             DEC bonus_timer
0DB3A                               +
0DB3A                           
0DB3A                               ;; Decrease kill timer
0DB3A A5 40                         LDA kill_timer
0DB3C F0 02                         BEQ +
0DB3E C6 40                             DEC kill_timer
0DB40                               +
0DB40                               
0DB40                               ;; Decrease and handle unfreeze timer
0DB40 A5 41                         LDA unfreeze_timer
0DB42 F0 0A                         BEQ +
0DB44 C6 41                             DEC unfreeze_timer
0DB46 D0 06                             BNE +
0DB48                                   
0DB48 A5 37                             LDA ball_flags
0DB4A 29 FB                             AND #UNFREEZE_BALL
0DB4C 85 37                             STA ball_flags
0DB4E                               +
0DB4E                           
0DB4E                               ;; Play background noise
0DB4E A5 38                         LDA screen_mode
0DB50 29 01                         AND #IS_GAME_SCREEN
0DB52 F0 0C                         BEQ +
0DB54                                   .include "game/include/main/background_sound.asm"
0DB54                           
0DB54                               ;; If noise is muted, no noise should play
0DB54 A5 4B                         LDA noise_muted
0DB56 F0 08                         BEQ +
0DB58 A9 30                             LDA #$30
0DB5A 8D 0C 40                          STA NOISE_VOLUME
0DB5D 4C C5 DB                          JMP +endNoise
0DB60                               +
0DB60                               
0DB60                               ;; At random times, set max_noise period to $03-$0A
0DB60 A5 45                         LDA max_noise
0DB62 D0 1D                         BNE +
0DB64 20 E2 C4                          JSR sub_GetRandomNumber
0DB67 29 EF                             AND #%11101111
0DB69 D0 16                             BNE +
0DB6B                                   
0DB6B A5 15                             LDA frame_counter
0DB6D 85 16                             STA random_seed
0DB6F 20 E2 C4                          JSR sub_GetRandomNumber
0DB72 29 07                             AND #$07
0DB74 69 03                             ADC #$03
0DB76 85 45                             STA max_noise
0DB78 A9 01                             LDA #$01
0DB7A 85 46                             STA sweep_noise
0DB7C A9 34                             LDA #$34
0DB7E 8D 0C 40                          STA NOISE_VOLUME
0DB81                               +
0DB81                           
0DB81                               ;; if sweep noise = $00: constant noise
0DB81                               ;; else if sweep noise > $80: decrease pitch
0DB81                               ;; else: increase pitch
0DB81 A5 46                         LDA sweep_noise
0DB83 F0 18                         BEQ +constantNoise
0DB85 30 2A                         BMI +decreaseNoise
0DB87                           
0DB87                           ;; Sweep noise up to max noise pitch
0DB87                           +increaseNoise:
0DB87 C6 47                         DEC current_noise
0DB89 A5 47                         LDA current_noise
0DB8B 8D 0E 40                      STA NOISE_PERIOD
0DB8E C5 45                         CMP max_noise
0DB90 D0 08                         BNE +
0DB92 A9 00                             LDA #$00
0DB94 85 46                             STA sweep_noise
0DB96 A9 0A                             LDA #$0A
0DB98 85 48                             STA noise_timer
0DB9A                               +
0DB9A 4C C5 DB                      JMP +endNoise
0DB9D                           
0DB9D                           ;; Keep noise at constant pitch
0DB9D                           +constantNoise:
0DB9D A5 45                         LDA max_noise
0DB9F F0 24                         BEQ +endNoise
0DBA1                           
0DBA1 A5 48                         LDA noise_timer
0DBA3 D0 07                         BNE +
0DBA5 A9 80                             LDA #$80
0DBA7 85 46                             STA sweep_noise
0DBA9 4C C5 DB                          JMP +endNoise
0DBAC                               +
0DBAC C6 48                         DEC noise_timer
0DBAE 4C C5 DB                      JMP +endNoise
0DBB1                           
0DBB1                           ;; Sweep noise down to initial pitch
0DBB1                           +decreaseNoise:
0DBB1 E6 47                         INC current_noise
0DBB3 A5 47                         LDA current_noise
0DBB5 8D 0E 40                      STA NOISE_PERIOD
0DBB8 C9 0E                         CMP #$0E
0DBBA D0 09                         BNE +endNoise
0DBBC                           
0DBBC 20 72 C5                      JSR sub_BackgroundNoise
0DBBF A9 00                         LDA #$00
0DBC1 85 45                         STA max_noise
0DBC3 85 46                         STA sweep_noise
0DBC5                           
0DBC5                           +endNoise:
0DBC5                           
0DBC5                               +
0DBC5                           
0DBC5                               ;; Play bonus to score bleeps
0DBC5                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DBC5                           
0DBC5                           ;; Random bleepy noises
0DBC5                           
0DBC5 A5 49                         LDA do_beeps
0DBC7 F0 2E                         BEQ +continue
0DBC9                               
0DBC9 C9 02                         CMP #$02
0DBCB D0 12                         BNE +beep
0DBCD                              
0DBCD                           +stopBeep:
0DBCD A9 00                         LDA #$00
0DBCF 85 49                         STA do_beeps
0DBD1 A9 08                         LDA #$08
0DBD3 8D 15 40                      STA APU_STATUS
0DBD6 8D 0F 40                      STA NOISE_LENGTH
0DBD9 20 72 C5                      JSR sub_BackgroundNoise
0DBDC 4C F7 DB                      JMP +continue
0DBDF                               
0DBDF                           +beep:
0DBDF A9 01                         LDA #$01
0DBE1 8D 15 40                      STA APU_STATUS
0DBE4 A5 4A                         LDA soft_pulse1
0DBE6 8D 00 40                      STA PULSE1_VOLUME
0DBE9 20 E2 C4                      JSR sub_GetRandomNumber
0DBEC 8D 02 40                      STA PULSE1_TIMER_LO
0DBEF 20 E2 C4                      JSR sub_GetRandomNumber
0DBF2 29 01                         AND #$01
0DBF4 8D 03 40                      STA PULSE1_TIMER_HI
0DBF7                           
0DBF7                           +continue:
0DBF7                           
0DBF7                               
0DBF7                               ;; Play sound effect
0DBF7                               .include "game/include/main/nmi_sfx.asm"
0DBF7                           
0DBF7                               ;; Get current explosion sfx frame; if not set, skip this
0DBF7 A4 4E                         LDY sfx_timer
0DBF9 F0 1F                         BEQ +done
0DBFB                               
0DBFB                                   ;; Check if explosion sfx is done; if so, disable and skip
0DBFB B1 4C                             LDA (sfx_address),y
0DBFD D0 07                             BNE +
0DBFF A9 00                                 LDA #$00
0DC01 85 4E                                 STA sfx_timer
0DC03 4C 1A DC                              JMP +done
0DC06                                   +
0DC06                                   
0DC06                                   ;; Set low nibble as volume
0DC06 29 0F                             AND #$0F
0DC08 09 30                             ORA #$30
0DC0A 8D 0C 40                          STA NOISE_VOLUME
0DC0D                                   
0DC0D                                   ;; Set high nibble as frequency
0DC0D B1 4C                             LDA (sfx_address),y
0DC0F 4A                                LSR
0DC10 4A                                LSR
0DC11 4A                                LSR
0DC12 4A                                LSR
0DC13 49 0F                             EOR #$0F
0DC15 8D 0E 40                          STA NOISE_PERIOD
0DC18                                   
0DC18                                   ;; Next frame
0DC18 E6 4E                             INC sfx_timer
0DC1A                               +done:
0DC1A                           
0DC1A                           
0DC1A                               ;; Check move sfx
0DC1A A4 4F                         LDY sfx_timer+1
0DC1C F0 3F                         BEQ +done
0DC1E                           
0DC1E C6 4F                             DEC sfx_timer+1
0DC20 C0 18                             CPY #$18
0DC22 D0 0D                             BNE +
0DC24                                       ;; Update APU status
0DC24 A9 09                                 LDA #$09
0DC26 8D 15 40                              STA APU_STATUS
0DC29 A9 8B                                 LDA #$8B
0DC2B 85 50                                 STA sfx_frequency
0DC2D A9 0A                                 LDA #$0A
0DC2F 85 51                                 STA sfx_frequency+1
0DC31                                   +
0DC31                                   
0DC31                                   ;; Set volume
0DC31 A9 70                             LDA #$70
0DC33 19 86 DA                          ORA tbl_MoveSfxVolume,y
0DC36 8D 00 40                          STA PULSE1_VOLUME
0DC39                                   
0DC39 84 00                             STY temp
0DC3B A9 18                             LDA #$18
0DC3D 38                                SEC
0DC3E E5 00                             SBC temp
0DC40 4A                                LSR
0DC41 18                                CLC
0DC42 69 03                             ADC #$03
0DC44 65 50                             ADC sfx_frequency
0DC46 85 50                             STA sfx_frequency
0DC48 8D 02 40                          STA PULSE1_TIMER_LO
0DC4B A5 51                             LDA sfx_frequency+1
0DC4D 69 00                             ADC #$00
0DC4F 85 51                             STA sfx_frequency+1
0DC51 8D 03 40                          STA PULSE1_TIMER_HI
0DC54                                   
0DC54 C0 01                             CPY #$01
0DC56 D0 05                             BNE +done
0DC58                           
0DC58                                   ;; Disable
0DC58 A9 00                             LDA #$00
0DC5A 8D 01 40                          STA $4001
0DC5D                                   
0DC5D                               +done:
0DC5D                               
0DC5D                           
0DC5D                           ;; This is what happens when we forced nmi skip
0DC5D                           +force_skip_nmi:
0DC5D                           
0DC5D                               ;; Increase frame timers
0DC5D E6 15                         INC frame_counter
0DC5F                           
0DC5F                               ;; reset sprites_update_position
0DC5F A9 00                         LDA #$00
0DC61 85 35                         STA sprites_update_position
0DC63                           
0DC63                               ;; Don't skip next NMI request
0DC63 A9 00                         LDA #$00
0DC65 85 13                         STA skip_nmi
0DC67 85 52                         STA check_nmi
0DC69                           
0DC69                               ;; Restore X, Y and PC from stack
0DC69 28                            PLP
0DC6A 68                            PLA
0DC6B A8                            TAY
0DC6C 68                            PLA
0DC6D AA                            TAX
0DC6E                           
0DC6E                           +skip_nmi:
0DC6E                               ;; Restore accumulator from stack
0DC6E 68                            PLA
0DC6F                           
0DC6F                               ;; Return
0DC6F 40                            RTI
0DC70                           
0DC70                           
0DC70                           ;; IRQ handler (empty)
0DC70                           IRQ:
0DC70                               .include "interrupt/irq.asm"
0DC70                           
0DC70 40                            RTI
0DC71                           
0DC71                           
0DC71                           ;; Interrupt vectors
0DC71 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA A8 DA                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 70 DC                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
