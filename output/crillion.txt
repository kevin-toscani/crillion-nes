	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$74        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Counters 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           
00041                           ;; Current level (doubles as level select variable)
00041                           current_level          .dsb 1
00042                           
00042                           ;; Tile type the ball is currently colliding with
00042                           colliding_tile         .dsb 1
00043                           
00043                           ;; Number of blocks left on screen
00043                           blocks_left            .dsb 1
00044                           
00044                           ;; Sound control variables
00044                           max_noise              .dsb 1
00045                           sweep_noise            .dsb 1
00046                           current_noise          .dsb 1
00047                           noise_timer            .dsb 1
00048                           do_beeps               .dsb 1
00049                           explosion_sfx_timer    .dsb 1
0004A                           
0004A                           ;; Additional NMI check for timed PPU fade
0004A                           check_nmi              .dsb 1
0004B                               0004B                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 50 C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 50 C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 41                         STA current_level
0C057 85 20                         STA ball_score
0C059 85 21                         STA ball_score+1
0C05B 85 22                         STA ball_score+2
0C05D 85 23                         STA ball_score+3
0C05F 85 24                         STA ball_score+4
0C061 85 25                         STA ball_score+5
0C063                           
0C063                           
0C063                           ;; Main game loop
0C063                           MainGameLoop:
0C063                               .include "game/main.asm"
0C063                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C063                           ;;
0C063                           ;; game/main.asm
0C063                           ;;
0C063                           ;; The main game loop content.
0C063                           ;;
0C063                           ;;
0C063                           
0C063                               ;; Reset sprite pointer every game loop
0C063 A9 00                         LDA #$00
0C065 85 3D                         STA sprite_ram_pointer
0C067                           
0C067                               ;; Store previous buttons
0C067 A5 0F                         LDA buttons_held
0C069 85 0E                         STA buttons_prev
0C06B                           
0C06B                               ;; Read controller input
0C06B 20 33 C5                      JSR sub_ReadController
0C06E                           
0C06E                               ;; Get buttons released
0C06E A5 0F                         LDA buttons_held
0C070 49 FF                         EOR #$FF
0C072 25 0E                         AND buttons_prev
0C074 85 11                         STA buttons_released
0C076                           
0C076                               ;; Set buttons pressed
0C076 A5 0E                         LDA buttons_prev
0C078 49 FF                         EOR #$FF
0C07A 25 0F                         AND buttons_held
0C07C 85 10                         STA buttons_pressed
0C07E                           
0C07E                               ;; Load screen?
0C07E A5 38                         LDA screen_mode
0C080 29 80                         AND #%10000000
0C082 F0 1E                         BEQ +screenLoaded
0C084                           
0C084                               ;; Get screen type to load
0C084 A5 38                         LDA screen_mode
0C086 29 03                         AND #%00000011
0C088 A8                            TAY
0C089                               
0C089                               ;; Get address to load screen type from
0C089 B9 51 D1                      LDA tbl_LoadScreenLo,y
0C08C 85 0C                         STA pointer
0C08E B9 4E D1                      LDA tbl_LoadScreenHi,y
0C091 85 0D                         STA pointer+1
0C093                           
0C093                               ;; Load screen
0C093 20 D3 C6                      JSR sub_DisableRendering
0C096 20 F5 C9                      JSR sub_JumpToPointer
0C099 20 E7 C6                      JSR sub_EnableRendering
0C09C                               
0C09C                               ;; Don't load screen anymore next loop
0C09C A5 38                         LDA screen_mode
0C09E 29 7F                         AND #%01111111
0C0A0 85 38                         STA screen_mode
0C0A2                               
0C0A2                           
0C0A2                           +screenLoaded:
0C0A2                           
0C0A2                               ;; Check if we're on the game screen
0C0A2 A5 38                         LDA screen_mode
0C0A4 C9 01                         CMP #IS_GAME_SCREEN
0C0A6 F0 03                         BEQ +
0C0A8 4C 9D C3                          JMP +checkNextScreen
0C0AB                               +
0C0AB                           
0C0AB                               ;; Load sprite 0 in place
0C0AB A9 28                         LDA #$28
0C0AD 8D 00 02                      STA ADDR_SPRITERAM
0C0B0 A9 0F                         LDA #$0F
0C0B2 8D 01 02                      STA ADDR_SPRITERAM+1
0C0B5 A9 22                         LDA #$22
0C0B7 8D 02 02                      STA ADDR_SPRITERAM+2
0C0BA A9 F8                         LDA #$F8
0C0BC 8D 03 02                      STA ADDR_SPRITERAM+3
0C0BF A9 04                         LDA #$04
0C0C1 85 3D                         STA sprite_ram_pointer
0C0C3                           
0C0C3                               ;; We're on the game screen
0C0C3                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0C3 A5 35                         LDA sprites_update_position
0C0C5 F0 03                         BEQ +
0C0C7 4C D0 C2                          JMP +skipSpriteMovement
0C0CA                               +
0C0CA                           
0C0CA                               ;; Check if ball is frozen
0C0CA A5 37                         LDA ball_flags
0C0CC 29 04                         AND #BALL_IS_FROZEN
0C0CE F0 03                         BEQ +
0C0D0 4C 8F C2                          JMP +skipBallMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Move the ball
0C0D3                               .include "game/include/main/move_ball.asm"
0C0D3                           
0C0D3                               ;; Check if ball goes up or down
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 10                         AND #BALL_MOVES_DOWN
0C0D7 F0 2B                         BEQ +moveBallUp
0C0D9                           
0C0D9                           
0C0D9                           +moveBallDown:
0C0D9                               ;; update the low byte
0C0D9 A5 1A                         LDA ball_ypos_lo
0C0DB 85 1C                         STA ball_ypos_lo_prev
0C0DD 18                            CLC
0C0DE 69 74                         ADC #BALL_SPEED_LO
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2                           
0C0E2                               ;; update the high byte with carry
0C0E2 A5 19                         LDA ball_ypos_hi
0C0E4 85 1B                         STA ball_ypos_hi_prev
0C0E6 69 01                         ADC #BALL_SPEED_HI
0C0E8 85 19                         STA ball_ypos_hi
0C0EA                               
0C0EA                               ;; Check bottom bound
0C0EA C9 C8                         CMP #BOUND_BOTTOM
0C0EC 90 3C                         BCC +checkHorizontalMovement
0C0EE F0 3A                         BEQ +checkHorizontalMovement
0C0F0                           
0C0F0                           
0C0F0                               ;; Change ball direction to "up"
0C0F0 A9 C8                         LDA #BOUND_BOTTOM
0C0F2 38                            SEC
0C0F3 E9 01                         SBC #$01
0C0F5 85 19                         STA ball_ypos_hi
0C0F7 A9 00                         LDA #$00
0C0F9 85 1A                         STA ball_ypos_lo
0C0FB A5 37                         LDA ball_flags
0C0FD 29 EF                         AND #MOVE_BALL_UP
0C0FF 85 37                         STA ball_flags
0C101 4C 2A C1                      JMP +checkHorizontalMovement
0C104                           
0C104                           
0C104                           +moveBallUp:
0C104                               ;; update the low byte
0C104 A5 1A                         LDA ball_ypos_lo
0C106 85 1C                         STA ball_ypos_lo_prev
0C108 38                            SEC
0C109 E9 74                         SBC #BALL_SPEED_LO
0C10B 85 1A                         STA ball_ypos_lo
0C10D                           
0C10D                               ;; update the high byte with carry
0C10D A5 19                         LDA ball_ypos_hi
0C10F 85 1B                         STA ball_ypos_hi_prev
0C111 E9 01                         SBC #BALL_SPEED_HI
0C113 85 19                         STA ball_ypos_hi
0C115                               
0C115                               ;; Check top bound
0C115 C9 30                         CMP #BOUND_TOP
0C117 B0 11                         BCS +checkHorizontalMovement
0C119                           
0C119                               ;; Change ball direction to "down"
0C119 A9 30                         LDA #BOUND_TOP
0C11B 18                            CLC
0C11C 69 01                         ADC #$01
0C11E 85 19                         STA ball_ypos_hi
0C120 A9 00                         LDA #$00
0C122 85 1A                         STA ball_ypos_lo
0C124 A5 37                         LDA ball_flags
0C126 09 10                         ORA #MOVE_BALL_DOWN
0C128 85 37                         STA ball_flags
0C12A                           
0C12A                           
0C12A                           +checkHorizontalMovement:
0C12A                           
0C12A                               ;; Check if ball is being nudged
0C12A A5 3E                         LDA nudge_timer
0C12C D0 41                         BNE +doneBallMovement
0C12E                           
0C12E                               ;; Check if left button is held
0C12E A5 0F                         LDA buttons_held
0C130 29 02                         AND #BUTTON_LEFT
0C132 F0 1B                         BEQ +
0C134                                   ;; update the low byte
0C134 A5 18                             LDA ball_xpos_lo
0C136 38                                SEC
0C137 E9 74                             SBC #BALL_SPEED_LO
0C139 85 18                             STA ball_xpos_lo
0C13B                           
0C13B                                   ;; update the high byte
0C13B A5 17                             LDA ball_xpos_hi
0C13D E9 01                             SBC #BALL_SPEED_HI
0C13F 85 17                             STA ball_xpos_hi
0C141                                   
0C141                                   ;; Check left bound
0C141 C9 10                             CMP #BOUND_LEFT
0C143 B0 2A                             BCS +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge right and set nudge timer
0C145 A5 37                             LDA ball_flags
0C147 09 02                             ORA #NUDGE_BALL_RIGHT
0C149 20 EE C9                          JSR sub_InitiateNudge
0C14C                           
0C14C 4C 6F C1                          JMP +doneBallMovement        
0C14F                               +
0C14F                           
0C14F                               ;; Check if right button is held
0C14F A5 0F                         LDA buttons_held
0C151 29 01                         AND #BUTTON_RIGHT
0C153 F0 1A                         BEQ +
0C155                                   ;; update the low byte
0C155 A5 18                             LDA ball_xpos_lo
0C157 18                                CLC
0C158 69 74                             ADC #BALL_SPEED_LO
0C15A 85 18                             STA ball_xpos_lo
0C15C                           
0C15C                                   ;; update the high byte
0C15C A5 17                             LDA ball_xpos_hi
0C15E 69 01                             ADC #BALL_SPEED_HI
0C160 85 17                             STA ball_xpos_hi     
0C162                           
0C162                                  ;; Check right bound
0C162 C9 E8                             CMP #BOUND_RIGHT
0C164 90 09                             BCC +doneBallMovement
0C166 F0 07                             BEQ +doneBallMovement
0C168                                   
0C168                                   ;; Set flag to nudge left and set nudge timer
0C168 A5 37                             LDA ball_flags
0C16A 29 FD                             AND #NUDGE_BALL_LEFT
0C16C 20 EE C9                          JSR sub_InitiateNudge
0C16F                               +
0C16F                           
0C16F                           
0C16F                           +doneBallMovement:
0C16F                           
0C16F                               ;; Check nudge
0C16F A5 3E                         LDA nudge_timer
0C171 F0 23                         BEQ +doneBallNudging
0C173 A5 37                             LDA ball_flags
0C175 29 02                             AND #NUDGE_BALL_RIGHT
0C177 F0 10                             BEQ +nudgeBallLeft
0C179                                   
0C179                                       ;; update the low byte
0C179 A5 18                                 LDA ball_xpos_lo
0C17B 18                                    CLC
0C17C 69 74                                 ADC #BALL_SPEED_LO
0C17E 85 18                                 STA ball_xpos_lo
0C180                           
0C180                                       ;; update the high byte
0C180 A5 17                                 LDA ball_xpos_hi
0C182 69 01                                 ADC #BALL_SPEED_HI
0C184 85 17                                 STA ball_xpos_hi  
0C186 4C 96 C1                              JMP +doneBallNudging
0C189                                   +nudgeBallLeft:
0C189                                   
0C189                                   ;; update the low byte
0C189 A5 18                             LDA ball_xpos_lo
0C18B 38                                SEC
0C18C E9 74                             SBC #BALL_SPEED_LO
0C18E 85 18                             STA ball_xpos_lo
0C190                           
0C190                                   ;; update the high byte
0C190 A5 17                             LDA ball_xpos_hi
0C192 E9 01                             SBC #BALL_SPEED_HI
0C194 85 17                             STA ball_xpos_hi
0C196                               +doneBallNudging:
0C196                           
0C196                               ;; Don't update position again until next frame
0C196                               ;; (moved to after move block routine)
0C196                           
0C196                           +doneBallHandling:0C196                               
0C196                               ;; Do collision detection
0C196                               .include "game/include/main/collision_detection.asm"
0C196                           
0C196                               ;; Get ball's x-left, x-center, x-right position
0C196 A5 17                         LDA ball_xpos_hi
0C198 18                            CLC
0C199 69 F0                         ADC #BALL_LEFT_WGA
0C19B 85 2F                         STA ball_left
0C19D 18                            CLC
0C19E 69 04                         ADC #BALL_HALF_SIZE
0C1A0 85 30                         STA ball_center
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 31                         STA ball_right
0C1A7                           
0C1A7                               ;; Get ball's y-top, y-middle, y-bottom position
0C1A7 A5 19                         LDA ball_ypos_hi
0C1A9 18                            CLC
0C1AA 69 D0                         ADC #BALL_TOP_WGA
0C1AC 85 32                         STA ball_top
0C1AE 18                            CLC
0C1AF 69 04                         ADC #BALL_HALF_SIZE
0C1B1 85 33                         STA ball_middle
0C1B3 18                            CLC
0C1B4 69 04                         ADC #BALL_HALF_SIZE
0C1B6 85 34                         STA ball_bottom
0C1B8                           
0C1B8                           +checkRightCollision:
0C1B8                               ;; Check if ball moves right
0C1B8                               ;; No need to check nudging here as that will never collide with a tile
0C1B8 A5 0F                         LDA buttons_held
0C1BA 29 01                         AND #BUTTON_RIGHT
0C1BC F0 20                         BEQ +checkLeftCollision
0C1BE                           
0C1BE                               ;; Check tile at right position
0C1BE A5 33                         LDA ball_middle
0C1C0 85 00                         STA temp
0C1C2 A5 31                         LDA ball_right
0C1C4 85 01                         STA temp+1
0C1C6 20 BB C6                      JSR sub_ConvertXYToTileType
0C1C9 29 01                         AND #TILE_IS_SOLID
0C1CB F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1CD                           
0C1CD                               ;; Nudge ball and evaluate tile type
0C1CD A9 01                         LDA #$01
0C1CF 85 36                         STA move_block_space_to_check
0C1D1 A5 37                         LDA ball_flags
0C1D3 29 FD                         AND #NUDGE_BALL_LEFT
0C1D5 20 EE C9                      JSR sub_InitiateNudge
0C1D8 20 49 C8                      JSR sub_EvaluateTileType
0C1DB 4C 01 C2                      JMP +checkTopCollision
0C1DE                           
0C1DE                           +checkLeftCollision:
0C1DE                               ;; Check if ball moves right
0C1DE                               ;; No need to check nudging here as that will never collide with a tile
0C1DE A5 0F                         LDA buttons_held
0C1E0 29 02                         AND #BUTTON_LEFT
0C1E2 F0 1D                         BEQ +checkTopCollision
0C1E4                           
0C1E4                               ;; Check tile at right position
0C1E4 A5 33                         LDA ball_middle
0C1E6 85 00                         STA temp
0C1E8 A5 2F                         LDA ball_left
0C1EA 85 01                         STA temp+1
0C1EC 20 BB C6                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 0E                         BEQ +checkTopCollision
0C1F3                           
0C1F3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1F3 A9 FF                         LDA #$FF
0C1F5 85 36                         STA move_block_space_to_check
0C1F7 A5 37                         LDA ball_flags
0C1F9 09 02                         ORA #NUDGE_BALL_RIGHT
0C1FB 20 EE C9                      JSR sub_InitiateNudge
0C1FE 20 49 C8                      JSR sub_EvaluateTileType
0C201                               
0C201                               
0C201                           +checkTopCollision:
0C201                               ;; Check if ball moves up
0C201 A5 37                         LDA ball_flags
0C203 29 10                         AND #BALL_MOVES_DOWN
0C205 D0 27                         BNE +checkBottomCollision
0C207                           
0C207                               ;; Check tile at top position
0C207 A5 32                         LDA ball_top
0C209 85 00                         STA temp
0C20B A5 30                         LDA ball_center
0C20D 85 01                         STA temp+1
0C20F 20 BB C6                      JSR sub_ConvertXYToTileType
0C212 29 01                         AND #TILE_IS_SOLID
0C214 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C216                           
0C216                               ;; Tile is solid; move ball down and evaluate tile type
0C216 A5 1C                         LDA ball_ypos_lo_prev
0C218 85 1A                         STA ball_ypos_lo
0C21A A5 1B                         LDA ball_ypos_hi_prev
0C21C 85 19                         STA ball_ypos_hi
0C21E A5 37                         LDA ball_flags
0C220 09 10                         ORA #MOVE_BALL_DOWN
0C222 85 37                         STA ball_flags
0C224                           
0C224 A9 F0                         LDA #$F0 ; which is -16
0C226 85 36                         STA move_block_space_to_check
0C228 20 49 C8                      JSR sub_EvaluateTileType
0C22B 4C 52 C2                      JMP +doneCheckingCollision
0C22E                           
0C22E                           +checkBottomCollision:
0C22E                               ;; No movement check needed: since ball is not moving up, it must move down
0C22E                           
0C22E                               ;; Check tile at bottom position
0C22E A5 34                         LDA ball_bottom
0C230 85 00                         STA temp
0C232 A5 30                         LDA ball_center
0C234 85 01                         STA temp+1
0C236 20 BB C6                      JSR sub_ConvertXYToTileType
0C239 29 01                         AND #TILE_IS_SOLID
0C23B F0 15                         BEQ +doneCheckingCollision
0C23D                           
0C23D                               ;; Tile is solid; move ball up and evaluate tile type
0C23D A5 1C                         LDA ball_ypos_lo_prev
0C23F 85 1A                         STA ball_ypos_lo
0C241 A5 1B                         LDA ball_ypos_hi_prev
0C243 85 19                         STA ball_ypos_hi
0C245 A5 37                         LDA ball_flags
0C247 29 EF                         AND #MOVE_BALL_UP
0C249 85 37                         STA ball_flags
0C24B                           
0C24B A9 10                         LDA #$10
0C24D 85 36                         STA move_block_space_to_check
0C24F 20 49 C8                      JSR sub_EvaluateTileType
0C252                           
0C252                           +doneCheckingCollision:
0C252                           
0C252                               
0C252                               ;; Update bonus
0C252                               .include "game/include/main/update_bonus.asm"
0C252                           ;; update_bonus.asm
0C252                           
0C252                               ;; If bonus = 000, skip decreasing
0C252 A5 2C                         LDA ball_bonus
0C254 18                            CLC
0C255 65 2D                         ADC ball_bonus+1
0C257 18                            CLC
0C258 65 2E                         ADC ball_bonus+2
0C25A F0 33                         BEQ +done
0C25C                           
0C25C                               ;; Check if bonus timer is done yet
0C25C A5 3F                         LDA bonus_timer
0C25E D0 2F                         BNE +done
0C260                           
0C260                               ;; Bonus timer is done
0C260                               ;; Reset bonus timer
0C260 A9 08                         LDA #BONUS_FRAMES
0C262 85 3F                         STA bonus_timer
0C264                               
0C264                               ;; Subtract one from ball bonus ones
0C264 C6 2E                         DEC ball_bonus+2
0C266                               
0C266                               ;; Check if underflow
0C266 10 0E                         BPL +updateBonusOnScreen
0C268                           
0C268                               ;; If underflow, set 9 and subtract one from bonus tens
0C268 A9 09                         LDA #$09
0C26A 85 2E                         STA ball_bonus+2
0C26C C6 2D                         DEC ball_bonus+1
0C26E                               
0C26E                               ;; Check if underflow
0C26E 10 06                         BPL +updateBonusOnScreen
0C270                           
0C270                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C270 A9 09                         LDA #$09
0C272 85 2D                         STA ball_bonus+1
0C274 C6 2C                         DEC ball_bonus
0C276                           
0C276                               ;;209A 209B 209C
0C276                           +updateBonusOnScreen:
0C276 A9 20                         LDA #$20
0C278 85 00                         STA temp
0C27A A9 9C                         LDA #$9C
0C27C 85 01                         STA temp+1
0C27E A2 02                         LDX #$02
0C280                               
0C280                               -updateNextDigit:
0C280 B5 2C                             LDA ball_bonus,x
0C282 18                                CLC
0C283 69 01                             ADC #$01
0C285 85 02                             STA temp+2
0C287 20 E4 CF                          JSR sub_WriteByteToPPUBuffer
0C28A C6 01                             DEC temp+1
0C28C CA                                DEX
0C28D 10 F1                         BPL -updateNextDigit
0C28F                                   
0C28F                           +done:0C28F                               
0C28F                               ;; Input test for beeps (disabled)
0C28F                               ;; .include "game/test/input_beeps.asm"
0C28F                           
0C28F                               ;; Input test for explosion sound effect (disabled)
0C28F                               ;; .include "game/test/input_explosion.asm"
0C28F                           
0C28F                           
0C28F                           +skipBallMovement:
0C28F                               ;; Move blocks a pixel up/down/left/right
0C28F                               .include "game/include/main/move_blocks.asm"
0C28F                           
0C28F                               ;; Set up block loop
0C28F A2 04                         LDX #MAX_ANIMATIONS
0C291                           -moveBlocksLoop:
0C291 CA                            DEX
0C292                           
0C292                               ;; Check if block is still moving
0C292 BD 80 03                      LDA move_block_timer,x
0C295 F0 33                         BEQ +checkNext
0C297                               
0C297                               ;; Check if block is done moving
0C297 C9 01                         CMP #$01
0C299 D0 0B                         BNE +
0C29B                                   ;; If so, draw a tile and remove the sprite
0C29B 20 14 C7                          JSR sub_DrawMoveTile
0C29E A9 00                             LDA #$00
0C2A0 9D 80 03                          STA move_block_timer,x
0C2A3 4C CA C2                          JMP +checkNext
0C2A6                               +
0C2A6                               
0C2A6                               ;; Check in which direction the block is moving
0C2A6                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2A6 BD 88 03                      LDA move_block_flags,x
0C2A9 29 03                         AND #%00000011
0C2AB F0 14                         BEQ +movingDown
0C2AD C9 01                         CMP #$01
0C2AF F0 0A                         BEQ +movingUp
0C2B1 C9 02                         CMP #$02
0C2B3 F0 12                         BEQ +movingRight
0C2B5                               
0C2B5                               ;; Move block in correct direction
0C2B5                               +movingLeft:
0C2B5 DE 78 03                      DEC move_block_x,x
0C2B8 4C CA C2                      JMP +checkNext
0C2BB                           
0C2BB                               +movingUp:
0C2BB DE 7C 03                      DEC move_block_y,x
0C2BE 4C CA C2                      JMP +checkNext
0C2C1                           
0C2C1                               +movingDown:
0C2C1 FE 7C 03                      INC move_block_y,x
0C2C4 4C CA C2                      JMP +checkNext
0C2C7                           
0C2C7                               +movingRight:
0C2C7 FE 78 03                      INC move_block_x,x
0C2CA                           
0C2CA                               ;; Check next block (if any left)
0C2CA                               +checkNext:
0C2CA E0 00                         CPX #$00
0C2CC D0 C3                         BNE -moveBlocksLoop
0C2CE                               
0C2CE                               ;; Don't update sprites
0C2CE E6 35                         INC sprites_update_position
0C2D0                           
0C2D0                           +skipSpriteMovement:
0C2D0                               ;; Testing timed PPU scroll concept
0C2D0                               .include "game/test/timed_ppuscroll_test.asm"
0C2D0                           ;; Timed updates (test)
0C2D0                           
0C2D0                               ;; If B button is pressed
0C2D0 A5 10                         LDA buttons_pressed
0C2D2 29 10                         AND #BUTTON_START
0C2D4 D0 03                         BNE +
0C2D6 4C 03 C3                          JMP +end
0C2D9                               +
0C2D9                           
0C2D9                           lbl_initiate_level_load:
0C2D9                               ;; Disable noise channel
0C2D9 A9 00                         LDA #$00
0C2DB 8D 15 40                      STA APU_STATUS
0C2DE 8D 0C 40                      STA NOISE_VOLUME
0C2E1                               
0C2E1 20 C2 C5                      JSR sub_BlindsEffect
0C2E4                               
0C2E4                               ;; Load the next level if ball not dead
0C2E4 A5 37                         LDA ball_flags
0C2E6 29 01                         AND #BALL_IS_DEAD
0C2E8 D0 05                         BNE +
0C2EA E6 41                             INC current_level
0C2EC 4C F5 C2                          JMP +loadLevel
0C2EF                               +
0C2EF                               
0C2EF                               ;; Revive ball
0C2EF A5 37                         LDA ball_flags
0C2F1 29 FE                         AND #REVIVE_BALL
0C2F3 85 37                         STA ball_flags
0C2F5                           
0C2F5                           +loadLevel:
0C2F5 A5 41                         LDA current_level
0C2F7 C9 19                         CMP #25
0C2F9 D0 04                         BNE +
0C2FB A9 00                             LDA #$00
0C2FD 85 41                             STA current_level
0C2FF                               +
0C2FF                               
0C2FF A9 81                         LDA #LOAD_GAME_SCREEN
0C301 85 38                         STA screen_mode
0C303                           
0C303                           
0C303                           +end:
0C303                           
0C303                               ;; Check if ball is dead
0C303 A5 37                         LDA ball_flags
0C305 29 01                         AND #BALL_IS_DEAD
0C307 F0 03                         BEQ +
0C309 4C 2B C3                          JMP +ballIsDead
0C30C                               +
0C30C                               
0C30C                               ;; Add ball to sprite buffer
0C30C A6 3D                         LDX sprite_ram_pointer
0C30E A5 19                         LDA ball_ypos_hi
0C310 9D 00 02                      STA ADDR_SPRITERAM,x
0C313 E8                            INX
0C314 A9 01                         LDA #BALL_TILE_CHR
0C316 9D 00 02                      STA ADDR_SPRITERAM,x
0C319 E8                            INX
0C31A A9 00                         LDA #BALL_ATTR
0C31C 9D 00 02                      STA ADDR_SPRITERAM,x
0C31F E8                            INX
0C320 A5 17                         LDA ball_xpos_hi
0C322 9D 00 02                      STA ADDR_SPRITERAM,x
0C325 E8                            INX
0C326 86 3D                         STX sprite_ram_pointer
0C328 4C 3C C3                      JMP +drawBlocks
0C32B                           
0C32B                           +ballIsDead:
0C32B                               ;; Check if kill timer has reset
0C32B A5 40                         LDA kill_timer
0C32D F0 03                         BEQ +
0C32F 4C 3C C3                          JMP +drawBlocks
0C332                               +
0C332                               
0C332                               ;; Take a live
0C332 C6 1F                         DEC ball_lives
0C334 D0 03                         BNE +
0C336                                   ;; If no lives left, initiate game over sequence
0C336 4C 9F C4                          JMP lbl_GameOver
0C339                               +
0C339                               
0C339                               ;; Reload current level
0C339 4C D9 C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C33C                           
0C33C                           
0C33C                           +drawBlocks:
0C33C                               ;; Draw moving block(s, if any)
0C33C                               .include "game/include/main/draw_blocks.asm"
0C33C                           ;; Handle movement of move blocks
0C33C                           
0C33C                               ;; Set up a loop
0C33C A0 04                         LDY #MAX_ANIMATIONS
0C33E                           -drawBlocksLoop:
0C33E 88                            DEY
0C33F                           
0C33F                               ;; If timer is zero, check the next move block
0C33F B9 80 03                      LDA move_block_timer,y
0C342 F0 52                         BEQ +nextMoveBlock
0C344                               
0C344                               ;; Get current sprite pointer
0C344 A6 3D                         LDX sprite_ram_pointer
0C346                           
0C346                               ;; Draw the sprites on screen
0C346 B9 7C 03                      LDA move_block_y,y
0C349 9D 00 02                      STA ADDR_SPRITERAM,x
0C34C 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C34F 18                            CLC
0C350 69 08                         ADC #$08
0C352 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C355 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C358 E8                            INX
0C359                           
0C359 A9 52                         LDA #$52 ; Top left chr id
0C35B 9D 00 02                      STA ADDR_SPRITERAM,x
0C35E A9 53                         LDA #$53 ; Top right chr id
0C360 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C363 A9 62                         LDA #$62 ; Bottom left chr id
0C365 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C368 A9 63                         LDA #$63 ; Bottom right chr id
0C36A 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C36D E8                            INX
0C36E                           
0C36E A9 00                         LDA #BALL_ATTR
0C370 9D 00 02                      STA ADDR_SPRITERAM,x
0C373 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C376 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C379 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C37C E8                            INX
0C37D                           
0C37D B9 78 03                      LDA move_block_x,y
0C380 9D 00 02                      STA ADDR_SPRITERAM,x
0C383 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C386 18                            CLC
0C387 69 08                         ADC #$08
0C389 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C38C 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C38F                           
0C38F                               ;; Update sprite RAM pointer
0C38F A5 3D                         LDA sprite_ram_pointer
0C391 18                            CLC
0C392 69 10                         ADC #$10
0C394 85 3D                         STA sprite_ram_pointer
0C396                           
0C396                           
0C396                           
0C396                           +nextMoveBlock:
0C396                               ;; Check the next move block
0C396 C0 00                         CPY #$00
0C398 D0 A4                         BNE -drawBlocksLoop
0C39A                           
0C39A 4C E9 C3                      JMP +doneScreenLoad
0C39D                           
0C39D                           
0C39D                           
0C39D                           +checkNextScreen:
0C39D                           
0C39D                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C39D                               ;; Upon pressing START, the selected level will start
0C39D                               .include "game/include/main/select_level.asm"
0C39D A5 10                         LDA buttons_pressed
0C39F 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3A1 F0 3C                         BEQ +checkStartPress
0C3A3                           
0C3A3                                   ;; Select next level (1, 5, 9, 13, 17)
0C3A3 A5 41                             LDA current_level
0C3A5 18                                CLC
0C3A6 69 04                             ADC #$04
0C3A8 C9 14                             CMP #$14
0C3AA D0 02                             BNE +
0C3AC A9 00                                 LDA #$00
0C3AE                                   +
0C3AE 85 41                             STA current_level
0C3B0                                   
0C3B0                                   ;; Convert level number to two-byte value
0C3B0 A9 00                             LDA #$00
0C3B2 85 03                             STA temp+3
0C3B4 A5 41                             LDA current_level
0C3B6 18                                CLC
0C3B7 69 01                             ADC #$01
0C3B9                           
0C3B9                               -
0C3B9 C9 0A                             CMP #$0A
0C3BB 90 08                             BCC +
0C3BD E6 03                                 INC temp+3
0C3BF 38                                    SEC
0C3C0 E9 0A                                 SBC #$0A
0C3C2 4C B9 C3                              JMP -
0C3C5                                   +
0C3C5                           
0C3C5                                   ;; Add level number to PPU buffer
0C3C5 18                                CLC
0C3C6 69 01                             ADC #$01
0C3C8 85 02                             STA temp+2
0C3CA A9 20                             LDA #$20
0C3CC 85 00                             STA temp
0C3CE A9 D0                             LDA #$D0
0C3D0 85 01                             STA temp+1
0C3D2 20 E4 CF                          JSR sub_WriteByteToPPUBuffer
0C3D5                                   
0C3D5 C6 01                             DEC temp+1
0C3D7 A4 03                             LDY temp+3
0C3D9 C8                                INY
0C3DA 84 02                             STY temp+2
0C3DC 20 E4 CF                          JSR sub_WriteByteToPPUBuffer
0C3DF                                   
0C3DF                               +checkStartPress:
0C3DF                           
0C3DF                           
0C3DF                           
0C3DF                               ;; If START button is pressed
0C3DF A5 10                         LDA buttons_pressed
0C3E1 29 10                         AND #BUTTON_START
0C3E3 F0 04                         BEQ +
0C3E5                                   ;; Start the level
0C3E5 A9 81                             LDA #LOAD_GAME_SCREEN
0C3E7 85 38                             STA screen_mode
0C3E9                               +
0C3E9                           
0C3E9                           
0C3E9                           
0C3E9                           +doneScreenLoad:
0C3E9                           
0C3E9                               ;; Load animations (if any)
0C3E9                               .include "game/include/main/load_animations.asm"
0C3E9                               ;; Set up loop
0C3E9 A2 00                         LDX #$00
0C3EB                               -loop_load_animation:
0C3EB                                   ;; Check if current animation is active. If not, goto next
0C3EB BD 74 03                          LDA explosion_active,x
0C3EE D0 03                             BNE +
0C3F0 4C 8A C4                              JMP +next
0C3F3                                   +
0C3F3                           
0C3F3                                   ;; Check the explosion framecounter
0C3F3 BD 60 03                          LDA explosion_timer,x
0C3F6 D0 26                             BNE +
0C3F8                                       ;; Frametimer is 0
0C3F8                                       ;; Reset to animation speed
0C3F8 A9 04                                 LDA #ANIMATION_SPEED
0C3FA 9D 60 03                              STA explosion_timer,x
0C3FD                           
0C3FD                                       ;; Set next animation frame, and check if we're done yet
0C3FD FE 64 03                              INC explosion_currentframe,x
0C400 BD 64 03                              LDA explosion_currentframe,x
0C403 C9 0A                                 CMP #ANIM_SLIDES
0C405 D0 17                                 BNE +
0C407                           
0C407                                       ;; If we're done, inactivate current explosion, clean
0C407                                       ;; up sprite RAM and go to the next one
0C407 A9 00                                 LDA #$00
0C409 9D 74 03                              STA explosion_active,x
0C40C                                       
0C40C A9 09                                 LDA #SLIDE_SIZE
0C40E 0A                                    ASL
0C40F 0A                                    ASL
0C410 A8                                    TAY
0C411 A9 EF                                 LDA #$EF
0C413                                       -
0C413 88                                        DEY
0C414 99 00 02                                  STA ADDR_SPRITERAM,y
0C417 C0 00                                     CPY #00
0C419 D0 F8                                 BNE -
0C41B                                       
0C41B 4C 8A C4                              JMP +next
0C41E                                   +
0C41E                           
0C41E                                   ;; Load (x,y) position in temp variables
0C41E BD 6C 03                          LDA explosion_x,x
0C421 85 01                             STA temp+1
0C423 85 03                             STA temp+3
0C425 BD 70 03                          LDA explosion_y,x
0C428 85 02                             STA temp+2
0C42A                           
0C42A                                   ;; Load attribute in temp variable
0C42A BD 68 03                          LDA explosion_attributes,x
0C42D 85 04                             STA temp+4
0C42F                           
0C42F                                   ;; Load current frame into Y-register
0C42F BC 64 03                          LDY explosion_currentframe,x
0C432                           
0C432                                   ;; Load current frame ROM address from table
0C432 B9 38 D1                          LDA explosion_anim_lo,y
0C435 85 0C                             STA pointer
0C437 B9 2E D1                          LDA explosion_anim_hi,y
0C43A 85 0D                             STA pointer+1
0C43C                           
0C43C                                   ;; Save x-register on stack
0C43C 8A                                TXA
0C43D 48                                PHA
0C43E                           
0C43E                                   ;; Load sprites into sprite RAM
0C43E A6 3D                             LDX sprite_ram_pointer
0C440 A0 00                             LDY #$00
0C442                           
0C442                                   ;; Prepare (x,y) offset for loop
0C442 84 00                             STY temp
0C444                           
0C444                                   -loop_load_sprite:
0C444                                   
0C444                                       ;; Do not draw empty sprites
0C444 B1 0C                                 LDA (pointer),y
0C446 F0 18                                 BEQ +nextSprite
0C448                                   
0C448                                           ;; Add y-position to sprite ram buffer
0C448 A5 02                                     LDA temp+2
0C44A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C44D E8                                        INX
0C44E                           
0C44E                                           ;; Get tile number from frame ROM address, and
0C44E                                           ;; add it to sprite ram buffer
0C44E B1 0C                                     LDA (pointer),y
0C450 9D 00 02                                  STA ADDR_SPRITERAM,x
0C453 E8                                        INX
0C454                           
0C454                                           ;; Add attribute data to sprite ram buffer
0C454 A5 04                                     LDA temp+4
0C456 9D 00 02                                  STA ADDR_SPRITERAM,x
0C459 E8                                        INX
0C45A                           
0C45A                                           ;; Add x-position to sprite ram buffer
0C45A A5 03                                     LDA temp+3
0C45C 9D 00 02                                  STA ADDR_SPRITERAM,x
0C45F E8                                        INX
0C460                           
0C460                                       +nextSprite:
0C460                           
0C460                                       ;; Check if all sprites are done
0C460 C8                                    INY
0C461 C0 09                                 CPY #SLIDE_SIZE
0C463 F0 21                                 BEQ +done
0C465                           
0C465                                       ;; Update x value
0C465 A5 03                                 LDA temp+3
0C467 18                                    CLC
0C468 69 08                                 ADC #$08
0C46A 85 03                                 STA temp+3
0C46C                           
0C46C                                       ;; Update temp for x,y position
0C46C E6 00                                 INC temp
0C46E A5 00                                 LDA temp
0C470 C9 03                                 CMP #SLIDE_WIDTH
0C472 D0 0F                                 BNE +
0C474                                           ;; Row is done; reset x-position
0C474 A5 01                                     LDA temp+1
0C476 85 03                                     STA temp+3
0C478                           
0C478                                           ;; Update y-position
0C478 A5 02                                     LDA temp+2
0C47A 18                                        CLC
0C47B 69 08                                     ADC #$08
0C47D 85 02                                     STA temp+2
0C47F                           
0C47F                                           ;; Reset row timer
0C47F A9 00                                     LDA #$00
0C481 85 00                                     STA temp
0C483                                       +
0C483                           
0C483 4C 44 C4                          JMP -loop_load_sprite
0C486                           
0C486                               +done:
0C486 86 3D                             STX sprite_ram_pointer
0C488                           
0C488                                   ;; Retrieve x-register from stack
0C488 68                                PLA
0C489 AA                                TAX
0C48A                           
0C48A                               +next:
0C48A                                   ;; Check if all animations have been updated
0C48A E8                                INX
0C48B E0 04                             CPX #MAX_ANIMATIONS
0C48D F0 03                             BEQ +done
0C48F                           
0C48F 4C EB C3                      JMP -loop_load_animation
0C492                           +done:
0C492                           
0C492                               ;; Sprite clean-up
0C492 A6 3D                         LDX sprite_ram_pointer
0C494 A9 EF                         LDA #$EF
0C496                               -
0C496 9D 00 02                          STA ADDR_SPRITERAM,x
0C499 E8                                INX
0C49A D0 FA                         BNE -
0C49C 4C 63 C0                      JMP MainGameLoop
0C49F                           
0C49F                           ;; Game over sequence is outside main game loop
0C49F                           .include "game/include/main/game_over.asm"
0C49F                           lbl_GameOver:
0C49F                           
0C49F                               ;; Disable noise channel
0C49F A9 00                         LDA #$00
0C4A1 8D 15 40                      STA APU_STATUS
0C4A4 8D 0C 40                      STA NOISE_VOLUME
0C4A7                               
0C4A7                               ;; Do blinds effect
0C4A7 20 C2 C5                      JSR sub_BlindsEffect
0C4AA                           
0C4AA                               ;; Disable draw after HUD to disable screen
0C4AA 20 47 C5                      JSR sub_WaitForNMI
0C4AD                               -
0C4AD AD 02 20                          LDA PPU_STATUS
0C4B0 29 40                             AND #SPRITE_0_HIT
0C4B2 D0 F9                         BNE -
0C4B4                               -
0C4B4 AD 02 20                          LDA PPU_STATUS
0C4B7 29 40                             AND #SPRITE_0_HIT
0C4B9 F0 F9                         BEQ -
0C4BB A9 00                         LDA #$00
0C4BD 8D 01 20                      STA PPU_MASK
0C4C0                           
0C4C0                               ;; Remove game area from view
0C4C0 2C 02 20                      BIT PPU_STATUS
0C4C3 A9 20                         LDA #$20
0C4C5 8D 06 20                      STA PPU_ADDR
0C4C8 A9 A0                         LDA #$A0
0C4CA 8D 06 20                      STA PPU_ADDR
0C4CD A9 00                         LDA #$00
0C4CF A2 16                         LDX #$16
0C4D1                               -xLoop:
0C4D1 A0 20                             LDY #$20
0C4D3                                   -yLoop:
0C4D3 8D 07 20                              STA PPU_DATA
0C4D6 88                                    DEY
0C4D7 D0 FA                             BNE -yLoop
0C4D9 CA                                DEX
0C4DA D0 F5                         BNE -xLoop
0C4DC                               
0C4DC                               ;; Pause for a little while
0C4DC A2 18                         LDX #$18
0C4DE                               -
0C4DE 20 47 C5                          JSR sub_WaitForNMI
0C4E1 CA                                DEX
0C4E2 D0 FA                         BNE -
0C4E4                                       
0C4E4                               ;; Do flash effect
0C4E4 20 A1 C9                      JSR sub_FlashEffect
0C4E7                           
0C4E7                               ;; Draw GAME OVER tiles over game screen
0C4E7 A9 21                         LDA #$21
0C4E9 85 00                         STA temp
0C4EB A9 EB                         LDA #$EB
0C4ED 85 01                         STA temp+1
0C4EF                           
0C4EF A2 00                         LDX #$00
0C4F1                               -gameOverTileLoop:
0C4F1 BD FB D8                          LDA tbl_GameOver,x
0C4F4 85 02                             STA temp+2
0C4F6 20 E4 CF                          JSR sub_WriteByteToPPUBuffer
0C4F9 E6 01                             INC temp+1
0C4FB E8                                INX
0C4FC E0 0A                             CPX #$0A
0C4FE D0 F1                         BNE -gameOverTileLoop
0C500                               
0C500                               ;; Update GAME OVER attributes on game screen
0C500 A9 23                         LDA #$23
0C502 85 00                         STA temp
0C504 A9 DA                         LDA #$DA
0C506 85 01                         STA temp+1
0C508 A9 AA                         LDA #$AA
0C50A 85 02                         STA temp+2
0C50C A2 04                         LDX #$04
0C50E                               -
0C50E 20 E4 CF                          JSR sub_WriteByteToPPUBuffer
0C511 E6 01                             INC temp+1
0C513 CA                                DEX
0C514 D0 F8                         BNE -
0C516 20 47 C5                      JSR sub_WaitForNMI
0C519                               
0C519                              
0C519                               ;; If player score is larger than high score
0C519                               ;; Overwrite high score with player score
0C519                               ;; [@TODO]
0C519                               
0C519                               
0C519                               ;; If player presses either A or START, (soft) reset the game
0C519                               -checkController:
0C519 20 33 C5                          JSR sub_ReadController
0C51C A5 0F                             LDA buttons_held
0C51E 29 90                             AND #%10010000
0C520 F0 F7                         BEQ -checkController
0C522 4C 4B C0                      JMP lbl_SoftReset
0C525                           
0C525                           ;; Subroutines
0C525                           .include "include/subroutines.asm"
0C525                           
0C525                           ;; RNG
0C525                           .include "subroutine/GetRandomNumber.asm"
0C525                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C525                           ;;
0C525                           ;; subroutine/GetRandomNumber.asm
0C525                           ;;
0C525                           ;; Simple and fast random number generator by White Flame.
0C525                           ;;
0C525                           ;; Set random_seed to an arbitrary number to randomize between
0C525                           ;; gaming sessions, for instance using the frame timer upon
0C525                           ;; pressing START on the intro screen.
0C525                           ;;
0C525                           ;;     ;; IF START PRESSED:
0C525                           ;;     LDA frame_counter
0C525                           ;;     STA random_seed
0C525                           ;;
0C525                           ;; Source:
0C525                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C525                           ;;
0C525                           ;;
0C525                           
0C525                           sub_GetRandomNumber:
0C525                               ;; Force EOR if random_seed is zero
0C525 A5 16                         LDA random_seed
0C527 F0 05                         BEQ +doEor
0C529                           
0C529                               ;; Shift left, and EOR if the high bit is set
0C529 0A                            ASL
0C52A F0 04                         BEQ +noEor
0C52C 90 02                         BCC +noEor
0C52E                           
0C52E                           +doEor:
0C52E 49 1D                         EOR #$1D
0C530                           
0C530                           +noEor:
0C530 85 16                         STA random_seed
0C532                           
0C532 60                            RTS
0C533                           
0C533                           
0C533                           ;; Read controller input
0C533                           .include "subroutine/ReadController.asm"
0C533                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C533                           ;;
0C533                           ;; subroutine/ReadController.asm
0C533                           ;;
0C533                           ;; Subroutine that polls the controller and stores the input
0C533                           ;; buttons in a variable. This version only handles controller
0C533                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C533                           ;;
0C533                           ;;
0C533                           
0C533                           sub_ReadController:
0C533                           
0C533                               ;; Set strobe bit
0C533 A9 01                         LDA #$01
0C535 8D 16 40                      STA JOYPAD_1
0C538                           
0C538                               ;; Set up ring timer
0C538 85 0F                         STA buttons_held
0C53A                           
0C53A                               ;; Clear strobe bit
0C53A 4A                            LSR
0C53B 8D 16 40                      STA JOYPAD_1
0C53E                           
0C53E                               ;; Loop through button presses
0C53E                               -
0C53E AD 16 40                          LDA JOYPAD_1
0C541 4A                                LSR
0C542 26 0F                             ROL buttons_held
0C544                           
0C544                               ;; Check if ring timer is done
0C544 90 F8                         BCC -
0C546                           
0C546                               ;; Return from subroutine
0C546 60                            RTS
0C547                           
0C547                           
0C547                           ;; vBlank/NMI wait
0C547                           .include "subroutine/WaitForNMI.asm"
0C547                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C547                           ;;
0C547                           ;; subroutine/WaitForVBlank.asm
0C547                           ;;
0C547                           ;; Subroutine that essentially pauses script execution until
0C547                           ;; vBlank happens.
0C547                           ;;
0C547                           ;;
0C547                           
0C547                           sub_WaitForNMI:
0C547 A9 01                         LDA #$01
0C549 85 4A                         STA check_nmi
0C54B                               -
0C54B A5 4A                             LDA check_nmi
0C54D D0 FC                         BNE -
0C54F 60                            RTS
0C550                           
0C550                           .include "subroutine/WaitForVBlank.asm"
0C550                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C550                           ;;
0C550                           ;; subroutine/WaitForVBlank.asm
0C550                           ;;
0C550                           ;; Subroutine that essentially pauses script execution until
0C550                           ;; vBlank happens.
0C550                           ;;
0C550                           ;;
0C550                           
0C550                           sub_WaitForVBlank:
0C550 2C 02 20                      BIT $2002
0C553 10 FB                         BPL sub_WaitForVBlank
0C555 60                            RTS
0C556                           
0C556                           
0C556                           ;; Game specific subroutines
0C556                           .include "game/include/subroutines.asm"
0C556                           ;; additional game-specific subroutines go here
0C556                           
0C556                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C556                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C556                           ;;
0C556                           ;;  sub_AddAccumulatorToScore.asm
0C556                           ;;
0C556                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C556                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C556                           ;;  actual score.
0C556                           ;;
0C556                           ;;
0C556                           
0C556                           
0C556                           sub_AddAccumulatorToScore:
0C556                           
0C556                               ;; Clear old add_to_score
0C556 A2 05                         LDX #$05
0C558 A0 00                         LDY #$00
0C55A                               -
0C55A 94 26                             STY add_to_score,x
0C55C CA                                DEX
0C55D 10 FB                         BPL -
0C55F                           
0C55F                               ;; Set accumulator to add_to_score variables
0C55F                               ;; Check and update 100s
0C55F                               -checkHundreds:
0C55F C9 64                             CMP #100
0C561 90 08                             BCC +checkTens
0C563 38                                    SEC
0C564 E9 64                                 SBC #100
0C566 E6 29                                 INC add_to_score+3
0C568 4C 5F C5                              JMP -checkHundreds
0C56B                                   +checkTens:
0C56B                           
0C56B                               ;; Check and update 10s
0C56B                               -checkTens:
0C56B C9 0A                             CMP #10
0C56D 90 08                             BCC +setOnes
0C56F 38                                    SEC
0C570 E9 0A                                 SBC #10
0C572 E6 2A                                 INC add_to_score+4
0C574 4C 6B C5                              JMP -checkTens
0C577                                   +setOnes:
0C577                           
0C577                               ;; We're left with 1s
0C577 85 2B                         STA add_to_score+5
0C579                           
0C579                               ;; Byte for byte, add add_to_score to ball_score
0C579 A9 00                         LDA #$00
0C57B 85 39                         STA ppu_buffer_update
0C57D A4 3A                         LDY ppu_buffer_pointer
0C57F A2 05                         LDX #$05
0C581                               -
0C581 B5 26                             LDA add_to_score,x
0C583 18                                CLC
0C584 75 20                             ADC ball_score,x
0C586 C9 0A                             CMP #10
0C588 90 05                             BCC +
0C58A 38                                    SEC
0C58B E9 0A                                 SBC #10
0C58D F6 1F                                 INC ball_score-1,x
0C58F                                   +
0C58F                                   
0C58F                                   ;; Update new score digit
0C58F 95 20                             STA ball_score,x
0C591                           
0C591                                   ;; Update score tile in PPU
0C591 A9 20                             LDA #$20
0C593 99 00 03                          STA ppu_buffer,y
0C596 C8                                INY
0C597 8A                                TXA
0C598 18                                CLC
0C599 69 83                             ADC #$83
0C59B 99 00 03                          STA ppu_buffer,y
0C59E C8                                INY
0C59F B5 20                             LDA ball_score,x
0C5A1 18                                CLC
0C5A2 69 01                             ADC #$01
0C5A4 99 00 03                          STA ppu_buffer,y
0C5A7 C8                                INY
0C5A8                           
0C5A8                                   ;; Check next digit (if any left)
0C5A8 CA                                DEX
0C5A9 30 03                             BMI +done
0C5AB 4C 81 C5                      JMP -
0C5AE                           
0C5AE                           +done:
0C5AE                               ;; Update PPU buffer pointer and status
0C5AE 84 3A                         STY ppu_buffer_pointer
0C5B0 A9 01                         LDA #$01
0C5B2 85 39                         STA ppu_buffer_update
0C5B4                           
0C5B4                               ;; Done: return 
0C5B4 60                            RTS
0C5B5                           
0C5B5                           .include "game/subroutine/BackgroundNoise.asm"
0C5B5                           
0C5B5                           sub_BackgroundNoise:
0C5B5 A9 32                         LDA #$32
0C5B7 8D 0C 40                      STA NOISE_VOLUME
0C5BA A9 0E                         LDA #$0E
0C5BC 8D 0E 40                      STA NOISE_PERIOD
0C5BF 85 46                         STA current_noise
0C5C1 60                            RTS0C5C2                           .include "game/subroutine/BlindsEffect.asm"
0C5C2                           
0C5C2                           sub_BlindsEffect:
0C5C2                           
0C5C2                               ;; Set up loop fading
0C5C2 A9 00                         LDA #$00
0C5C4 85 07                         STA temp+7
0C5C6 A0 08                         LDY #$08
0C5C8                               -fadeLoop:
0C5C8 84 08                             STY temp+8
0C5CA                           
0C5CA                                   ;; Wait for NMI to pass
0C5CA 20 47 C5                          JSR sub_WaitForNMI
0C5CD                                   
0C5CD                                   ;; Now wait for No-sprite 0
0C5CD                                   -
0C5CD AD 02 20                              LDA PPU_STATUS
0C5D0 29 40                                 AND #SPRITE_0_HIT
0C5D2 D0 F9                             BNE -
0C5D4                               
0C5D4                                   ;; Now wait for Sprite 0
0C5D4                                   -
0C5D4 AD 02 20                              LDA PPU_STATUS
0C5D7 29 40                                 AND #SPRITE_0_HIT
0C5D9 F0 F9                             BEQ -
0C5DB                                       
0C5DB                                   ;; Setup tile row loop
0C5DB A0 16                             LDY #22
0C5DD                                   -tileLoop:
0C5DD                                   
0C5DD                                       ;; Disable drawing
0C5DD A5 12                                 LDA soft_ppu_mask
0C5DF 29 F7                                 AND #%11110111
0C5E1 8D 01 20                              STA PPU_MASK
0C5E4                                       
0C5E4                                       ;; Set up scanline loop
0C5E4 A2 08                                 LDX #$08
0C5E6                                       -scanlineLoop:
0C5E6 E4 08                                     CPX temp+8
0C5E8 D0 0A                                     BNE +wasteTime
0C5EA                                           
0C5EA                                           ;; Restore drawing
0C5EA A5 12                                     LDA soft_ppu_mask
0C5EC 09 08                                     ORA #%00001000
0C5EE 8D 01 20                                  STA PPU_MASK
0C5F1 4C FA C5                                  JMP +wasteMoreTime
0C5F4                           
0C5F4                                           ;; Waste 12 frames
0C5F4                                           +wasteTime:
0C5F4 E6 09                                     INC temp+9   ;+5
0C5F6 C6 09                                     DEC temp+9   ;+5
0C5F8 49 00                                     EOR #$00     ;+2
0C5FA                                           
0C5FA                                           ;; Waste about 100 frames
0C5FA                                           +wasteMoreTime:
0C5FA                                           
0C5FA 86 01                                     STX temp+1     ;  3 down, 97 to go
0C5FC A2 09                                     LDX #$09       ;  5 down, 95 to go
0C5FE                                           -wasteLoop:
0C5FE EA                                            NOP
0C5FF 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C601 CA                                            DEX        ;  5+5L down,  95-5L to go
0C602 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C604                           
0C604 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C606 CA                                        DEX            ;  9+8L down, 91-8L to go
0C607 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C609                           
0C609 88                                    DEY
0C60A D0 D1                             BNE -tileLoop
0C60C                           
0C60C A4 08                             LDY temp+8
0C60E                                   
0C60E E6 07                             INC temp+7
0C610 A5 07                             LDA temp+7
0C612 C9 02                             CMP #$02
0C614 D0 B2                             BNE -fadeLoop
0C616                           
0C616 A9 00                             LDA #$00
0C618 85 07                             STA temp+7
0C61A 88                                DEY
0C61B D0 AB                         BNE -fadeLoop
0C61D                               
0C61D 60                            RTS
0C61E                           .include "game/subroutine/ClearScreen.asm"
0C61E                           ;; Subroutine to clear the screen
0C61E                           ;; If it's a game screen, add noise
0C61E                           
0C61E                           sub_ClearScreen:
0C61E                               ;; Check of game screen or not
0C61E A5 38                         LDA screen_mode
0C620 29 03                         AND #CHECK_SCREEN_MODE
0C622 C9 01                         CMP #IS_GAME_SCREEN
0C624 F0 02                         BEQ +
0C626 A9 00                             LDA #$00
0C628                               +
0C628 85 01                         STA temp+1
0C62A                               
0C62A                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C62A 2C 02 20                      BIT PPU_STATUS
0C62D A9 20                         LDA #$20
0C62F 8D 06 20                      STA PPU_ADDR
0C632 A9 00                         LDA #$00
0C634 8D 06 20                      STA PPU_ADDR
0C637                               
0C637                               ;; Set up tile to draw and loop
0C637 85 00                         STA temp
0C639 AA                            TAX
0C63A A8                            TAY
0C63B                           
0C63B                               -     
0C63B                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C63B A5 00                             LDA temp
0C63D 8D 07 20                          STA PPU_DATA
0C640                           
0C640                                   ;; Check if we should draw noise next. Noise is drawn if:
0C640                                   ;; - Screen mode is game screen
0C640                                   ;; - Y between #$06 and #$19 (inclusive)
0C640                                   ;; - X between #$02 and #$1D (inclusive)
0C640                                   
0C640                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C640 A5 01                             LDA temp+1
0C642 F0 1C                             BEQ +nextTileInRow
0C644                                   
0C644                                   ;; If Y < $6, skip the check
0C644 C0 06                             CPY #$06
0C646 90 18                             BCC +nextTileInRow
0C648                                   
0C648                                   ;; If X < $1, skip the check
0C648 E0 01                             CPX #$01
0C64A 90 14                             BCC +nextTileInRow
0C64C                                   
0C64C                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C64C E0 1D                             CPX #$1D
0C64E D0 04                             BNE +
0C650 A9 00                                 LDA #$00
0C652 85 00                                 STA temp
0C654                                   +
0C654 B0 0A                             BCS +nextTileInRow
0C656                                   
0C656                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C656 20 25 C5                          JSR sub_GetRandomNumber
0C659 29 07                             AND #%00000111
0C65B 18                                CLC
0C65C 69 68                             ADC #$68
0C65E 85 00                             STA temp
0C660                           
0C660                           +nextTileInRow:
0C660                                   
0C660                                   ;; Check if a row has been done. If not, draw the next
0C660 E8                                INX
0C661 E0 20                             CPX #$20
0C663 D0 D6                             BNE -
0C665                                   
0C665                                   ;; Go to the next row (if any left)
0C665 A2 00                             LDX #00
0C667 C8                                INY
0C668                                   
0C668                                   ;; If Y is 1A, skip noise tile check until done drawing
0C668 C0 1A                             CPY #$1A
0C66A D0 04                             BNE +
0C66C A9 00                                 LDA #$00
0C66E 85 01                                 STA temp+1
0C670                                   +
0C670                                   
0C670 C0 1E                             CPY #$1E
0C672 D0 C7                         BNE -
0C674                           
0C674                               ;; Clear attribute table
0C674 A9 23                         LDA #$23
0C676 8D 06 20                      STA PPU_ADDR
0C679 A9 C0                         LDA #$C0
0C67B 8D 06 20                      STA PPU_ADDR
0C67E A9 00                         LDA #$00
0C680 A2 40                         LDX #$40
0C682                               -
0C682 8D 07 20                          STA PPU_DATA
0C685 CA                                DEX
0C686 D0 FA                         BNE -
0C688                               
0C688 60                            RTS0C689                           .include "game/subroutine/ColorizeBall.asm"
0C689                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C689                           ;;
0C689                           ;;  Subroutine: ColorizeBall
0C689                           ;;
0C689                           ;;  Applies the color set through ball_flags to the ball sprite.
0C689                           ;;  Expects ball_flags to be in the accumulator
0C689                           ;;
0C689                           
0C689                           
0C689                           sub_ColorizeBall:
0C689                           
0C689                               ;; Get color from ball_flags
0C689 4A                            LSR
0C68A 4A                            LSR
0C68B 4A                            LSR
0C68C 4A                            LSR
0C68D 4A                            LSR
0C68E AA                            TAX
0C68F                           
0C68F                               ;; Add new light color of ball to PPU palette
0C68F A9 3F                         LDA #$3F
0C691 85 00                         STA temp
0C693 A9 11                         LDA #$11
0C695 85 01                         STA temp+1
0C697 BD 48 D1                      LDA tbl_BallColorLight,x
0C69A 85 02                         STA temp+2
0C69C 20 E4 CF                      JSR sub_WriteByteToPPUBuffer
0C69F                               
0C69F                               ;; Add new dark color of ball to PPU palette
0C69F E6 01                         INC temp+1
0C6A1 BD 42 D1                      LDA tbl_BallColorDark,x
0C6A4 85 02                         STA temp+2
0C6A6 20 E4 CF                      JSR sub_WriteByteToPPUBuffer
0C6A9                               
0C6A9 60                            RTS
0C6AA                           
0C6AA                           .include "game/subroutine/ColorsMatch.asm"
0C6AA                           
0C6AA                           ;; Subroutine to check if ball color matches colliding tile color
0C6AA                           
0C6AA                           sub_ColorsMatch:
0C6AA                               ;; Save tile color in temp variable
0C6AA A5 42                         LDA colliding_tile
0C6AC 29 0E                         AND #%00001110
0C6AE 85 00                         STA temp
0C6B0                           
0C6B0                               ;; Get ball color
0C6B0 A5 37                         LDA ball_flags
0C6B2 29 E0                         AND #%11100000
0C6B4 4A                            LSR
0C6B5 4A                            LSR
0C6B6 4A                            LSR
0C6B7 4A                            LSR
0C6B8                           
0C6B8                               ;; Compare with tile color
0C6B8 C5 00                         CMP temp
0C6BA 60                            RTS
0C6BB                           
0C6BB                           .include "game/subroutine/ConvertXYToTileType.asm"
0C6BB                           
0C6BB                           ;; Subroutine to convert the ball's position to a tile type
0C6BB                           ;; - Expects temp to be y-position of ball within game area
0C6BB                           ;; - Expects temp+1 to be x-position of ball within game area
0C6BB                           ;; - Puts result in accumulator and zp variable
0C6BB                           ;; - Corrupts X-register
0C6BB                           
0C6BB                           sub_ConvertXYToTileType:
0C6BB A5 01                         LDA temp+1
0C6BD 4A                            LSR
0C6BE 4A                            LSR
0C6BF 4A                            LSR
0C6C0 4A                            LSR
0C6C1 85 09                         STA temp+9
0C6C3 A5 00                         LDA temp
0C6C5 29 F0                         AND #%11110000
0C6C7 18                            CLC
0C6C8 65 09                         ADC temp+9
0C6CA 85 09                         STA temp+9
0C6CC AA                            TAX
0C6CD BD 00 04                      LDA tile_type, x
0C6D0 85 42                         STA colliding_tile
0C6D2 60                            RTS
0C6D3                           
0C6D3                           .include "game/subroutine/DisableEnableRendering.asm"
0C6D3                           sub_DisableRendering:
0C6D3                               ;; Force NMI skip, disable rendering
0C6D3 A9 01                     	LDA #$01
0C6D5 85 14                     	STA force_skip_nmi
0C6D7 20 50 C5                      JSR sub_WaitForVBlank
0C6DA A5 12                         LDA soft_ppu_mask
0C6DC 29 E7                         AND #%11100111
0C6DE 8D 01 20                      STA PPU_MASK
0C6E1 85 12                         STA soft_ppu_mask
0C6E3 20 50 C5                      JSR sub_WaitForVBlank
0C6E6 60                            RTS
0C6E7                           
0C6E7                           sub_EnableRendering:
0C6E7                               ;; Enable rendering
0C6E7 A9 00                     	LDA #$00
0C6E9 8D 05 20                  	STA PPU_SCROLL
0C6EC 8D 05 20                  	STA PPU_SCROLL
0C6EF 20 50 C5                      JSR sub_WaitForVBlank
0C6F2 85 14                     	STA force_skip_nmi
0C6F4 A5 12                         LDA soft_ppu_mask
0C6F6 09 18                         ORA #%00011000
0C6F8 85 12                         STA soft_ppu_mask
0C6FA 8D 01 20                      STA PPU_MASK
0C6FD 20 50 C5                      JSR sub_WaitForVBlank
0C700 60                            RTS
0C701                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C701                           sub_drawIntroScreenLogoTile:
0C701 B9 2A D0                      LDA tbl_IntroScreenLogoChr,y
0C704 C9 60                         CMP #$60
0C706 D0 08                         BNE +
0C708 20 25 C5                          JSR sub_GetRandomNumber
0C70B 29 07                             AND #$07
0C70D 18                                CLC
0C70E 69 60                             ADC #$60
0C710                               +
0C710 8D 07 20                      STA PPU_DATA
0C713 60                            RTS
0C714                           .include "game/subroutine/DrawMoveTile.asm"
0C714                           ;; Draw the move tile as follows:
0C714                           ;;
0C714                           ;;  1 2
0C714                           ;;  3 4 5
0C714                           ;;    6 7
0C714                           ;;
0C714                           ;; (1,2,3,4) is the move block itself
0C714                           ;; (5,6,7) are shades unless that tile is solid
0C714                           
0C714                           ;; X holds the move block sprite slot
0C714                           
0C714                           sub_DrawMoveTile:
0C714                           
0C714                               ;; Get tile type index from sprite x and y values
0C714                               ;; and store it in a temp variable
0C714 BD 78 03                      LDA move_block_x,x
0C717 18                            CLC
0C718 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C71A 4A                            LSR
0C71B 4A                            LSR
0C71C 4A                            LSR
0C71D 4A                            LSR
0C71E 85 09                         STA temp+9
0C720 BD 7C 03                      LDA move_block_y,x
0C723 18                            CLC
0C724 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C726 29 F0                         AND #%11110000
0C728 18                            CLC
0C729 65 09                         ADC temp+9
0C72B 85 09                         STA temp+9
0C72D A8                            TAY
0C72E                               
0C72E                               ;; Add move tile data on the new tile location
0C72E BD 84 03                      LDA move_block_tile_type,x
0C731 99 00 04                      STA tile_type,y
0C734                           
0C734                               ;; Draw the original tile type in the ppu buffer
0C734                               ;; - get PPU address to write to (temp, temp+1)
0C734 8A                            TXA
0C735 48                            PHA
0C736 A6 09                         LDX temp+9
0C738 20 BF C9                      JSR sub_GetPPUAddrFromYXIndex
0C73B 68                            PLA
0C73C AA                            TAX
0C73D                               
0C73D                               ;; - based on color, select tile 42 or 4A for top left
0C73D BD 88 03                      LDA move_block_flags,x
0C740 4A                            LSR
0C741 4A                            LSR
0C742 4A                            LSR
0C743 4A                            LSR
0C744 4A                            LSR
0C745 A8                            TAY
0C746 B9 F4 D8                      LDA tbl_MoveBlockTopLeftTile,y
0C749 85 08                         STA temp+8
0C74B                               
0C74B                               ;; - save palette ID in temp+6
0C74B 98                            TYA
0C74C 4A                            LSR
0C74D 85 06                         STA temp+6
0C74F                               
0C74F                               ;; Prepare PPU buffer
0C74F A4 3A                         LDY ppu_buffer_pointer
0C751 A9 00                         LDA #$00
0C753 85 39                         STA ppu_buffer_update
0C755                               
0C755                               ;; Draw tile 1 (top left tile of move block)
0C755 20 36 C8                      JSR sub_DrawTileTemp018
0C758                           
0C758                               
0C758                               ;; Draw tile 2 (top right tile of move block)
0C758 E6 01                         INC temp+1
0C75A E6 08                         INC temp+8
0C75C 20 36 C8                      JSR sub_DrawTileTemp018
0C75F                           
0C75F                               ;; Draw tile 3 (bottom left tile of move block)
0C75F A5 01                         LDA temp+1
0C761 18                            CLC
0C762 69 1F                         ADC #$1F
0C764 85 01                         STA temp+1
0C766 A5 00                         LDA temp
0C768 69 00                         ADC #$00
0C76A 85 00                         STA temp
0C76C A5 08                         LDA temp+8
0C76E 18                            CLC
0C76F 69 0F                         ADC #$0F
0C771 85 08                         STA temp+8
0C773 20 36 C8                      JSR sub_DrawTileTemp018
0C776                           
0C776                               ;; Draw tile 4 (bottom right tile of move block)
0C776 E6 01                         INC temp+1
0C778 E6 08                         INC temp+8
0C77A 20 36 C8                      JSR sub_DrawTileTemp018
0C77D                           
0C77D                               ;; Load tile type offset in X register
0C77D 8A                            TXA
0C77E 48                            PHA
0C77F A6 09                         LDX temp+9
0C781                               
0C781                               ;; Load shade tile in temp+8
0C781 A9 00                         LDA #$00
0C783 85 08                         STA temp+8
0C785                           
0C785                               ;; Draw tile 5 (right shade) unless tile is solid
0C785 E6 01                         INC temp+1
0C787                               
0C787 8A                            TXA
0C788 29 0F                         AND #%00001111
0C78A C9 0D                         CMP #$0D
0C78C F0 0A                         BEQ +nextTile
0C78E                           
0C78E BD 01 04                      LDA tile_type+1,x
0C791 29 01                         AND #%00000001
0C793 D0 03                         BNE +nextTile
0C795                               
0C795 20 36 C8                      JSR sub_DrawTileTemp018
0C798                               
0C798                           
0C798                           +nextTile:
0C798                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C798 A5 01                         LDA temp+1
0C79A 18                            CLC
0C79B 69 1F                         ADC #$1F
0C79D 85 01                         STA temp+1
0C79F A5 00                         LDA temp
0C7A1 69 00                         ADC #$00
0C7A3 85 00                         STA temp
0C7A5                           
0C7A5 8A                            TXA
0C7A6 29 F0                         AND #%11110000
0C7A8 C9 90                         CMP #$90
0C7AA F0 0A                         BEQ +nextTile
0C7AC                           
0C7AC BD 10 04                      LDA tile_type+16,x
0C7AF 29 01                         AND #%00000001
0C7B1 D0 03                         BNE +nextTile
0C7B3                               
0C7B3 20 36 C8                      JSR sub_DrawTileTemp018
0C7B6                           
0C7B6                               
0C7B6                           +nextTile:
0C7B6                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C7B6 E6 01                         INC temp+1
0C7B8                           
0C7B8 8A                            TXA
0C7B9 29 F0                         AND #%11110000
0C7BB C9 90                         CMP #$90
0C7BD F0 11                         BEQ +setTileAttributes
0C7BF                               
0C7BF 8A                            TXA
0C7C0 29 0F                         AND #%00001111
0C7C2 C9 0D                         CMP #$0D
0C7C4 F0 0A                         BEQ +setTileAttributes
0C7C6                               
0C7C6 BD 11 04                      LDA tile_type+17,x
0C7C9 29 01                         AND #%00000001
0C7CB D0 03                         BNE +setTileAttributes
0C7CD                               
0C7CD 20 36 C8                      JSR sub_DrawTileTemp018
0C7D0                               
0C7D0                           
0C7D0                           +setTileAttributes:
0C7D0                               ;; Update attribute table accordingly through ppu buffer
0C7D0                               ;; - PPU buffer high byte
0C7D0 20 BA CF                      JSR sub_SetTileAttributeAddress
0C7D3                           
0C7D3 8A                            TXA
0C7D4 29 10                         AND #%00010000
0C7D6 F0 05                         BEQ +        
0C7D8 A9 F0                             LDA #%11110000
0C7DA 4C DF C7                          JMP ++
0C7DD                               +
0C7DD A9 0F                         LDA #%00001111
0C7DF                               ++
0C7DF 85 02                         STA temp+2
0C7E1                               
0C7E1 8A                            TXA
0C7E2 29 01                         AND #%00000001
0C7E4 F0 07                         BEQ +
0C7E6 A5 02                             LDA temp+2
0C7E8 09 CC                             ORA #%11001100
0C7EA 4C F1 C7                          JMP ++
0C7ED                               +
0C7ED A5 02                         LDA temp+2
0C7EF 09 33                         ORA #%00110011
0C7F1                               ++
0C7F1 85 02                         STA temp+2
0C7F3                               
0C7F3 C9 FC                         CMP #%11111100
0C7F5 F0 22                         BEQ +continue
0C7F7                               
0C7F7 C9 F3                         CMP #%11110011
0C7F9 D0 09                         BNE +
0C7FB A5 06                             LDA temp+6
0C7FD 0A                                ASL
0C7FE 0A                                ASL
0C7FF 85 06                             STA temp+6
0C801 4C 19 C8                          JMP +continue
0C804                               +
0C804                               
0C804 C9 CF                         CMP #%11001111
0C806 D0 0A                         BNE +
0C808 A6 06                             LDX temp+6
0C80A BD 97 D8                          LDA tbl_Times16,x
0C80D 85 06                             STA temp+6
0C80F 4C 19 C8                          JMP +continue
0C812                               +
0C812                               
0C812 A6 06                         LDX temp+6
0C814 BD A7 D8                      LDA tbl_Times64,x
0C817 85 06                         STA temp+6
0C819                                   
0C819                           +continue:
0C819 A5 00                         LDA temp
0C81B 38                            SEC
0C81C E9 C0                         SBC #$C0
0C81E AA                            TAX
0C81F BD A0 04                      LDA tile_attributes,x
0C822 25 02                         AND temp+2
0C824 05 06                         ORA temp+6
0C826 9D A0 04                      STA tile_attributes,x
0C829 99 00 03                      STA ppu_buffer,y
0C82C C8                            INY
0C82D                           
0C82D                               ;; Restore original X
0C82D 68                            PLA
0C82E AA                            TAX
0C82F                               
0C82F                               ;; Update PPU buffer
0C82F 84 3A                         STY ppu_buffer_pointer
0C831 A9 01                         LDA #$01
0C833 85 39                         STA ppu_buffer_update
0C835                           
0C835                               ;; Return
0C835 60                            RTS
0C836                           .include "game/subroutine/DrawTileTemp018.asm"
0C836                           
0C836                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C836                           
0C836                           sub_DrawTileTemp018:
0C836 A5 00                         LDA temp
0C838 99 00 03                      STA ppu_buffer,y
0C83B C8                            INY
0C83C A5 01                         LDA temp+1
0C83E 99 00 03                      STA ppu_buffer,y
0C841 C8                            INY
0C842 A5 08                         LDA temp+8
0C844 99 00 03                      STA ppu_buffer,y
0C847 C8                            INY
0C848 60                            RTS
0C849                           .include "game/subroutine/EvaluateTileType.asm"
0C849                           ;; Subroutine to evaluate the colliding tile type and take its
0C849                           ;; corresponding action (move block, kill player, ...)
0C849                           ;; - Expects X-register to be the tile_type offset
0C849                           ;; - Uses zp variable colliding_tile
0C849                           
0C849                           sub_EvaluateTileType:
0C849                           
0C849                               ;; Check if collided tile is a color block
0C849 A5 42                         LDA colliding_tile
0C84B 29 80                         AND #IS_COLOR_BLOCK
0C84D D0 03                         BNE +
0C84F 4C B1 C8                          JMP +checkIfPaintBlock
0C852                               +
0C852                               
0C852                               ;; It's a color block. Check if the colors match
0C852 20 AA C6                      JSR sub_ColorsMatch
0C855 F0 01                         BEQ +
0C857                                   ;; Colors don't match - return
0C857 60                                RTS
0C858                               +
0C858                           
0C858                               ;; Colors match; destroy color block
0C858                               
0C858                               ;; Convert the metatile offset value (which is in the X register)
0C858                               ;; to its corresponding address in PPU
0C858 20 BF C9                      JSR sub_GetPPUAddrFromYXIndex
0C85B                           
0C85B                               ;; Remove color block from screen by drawing a total
0C85B                               ;; of 7 tiles over it (shade included)
0C85B 20 44 CE                      JSR sub_RemoveBlockFromScreen
0C85E                               
0C85E                               ;; - Load destruction animation on tile
0C85E                               ;; Get most recent slot for explosion    
0C85E 8A                            TXA
0C85F 85 02                         STA temp+2
0C861 A6 3B                         LDX explosion_pointer
0C863                           
0C863                               ;; If 0, use max pointer value
0C863 D0 02                         BNE +
0C865 A2 04                             LDX #MAX_ANIMATIONS
0C867                               +
0C867                           
0C867                               ;; Decrease pointer by one
0C867 CA                            DEX
0C868 86 3B                         STX explosion_pointer
0C86A                           
0C86A                               ;; Load explosion data into RAM
0C86A A9 00                         LDA #$00
0C86C 9D 64 03                      STA explosion_currentframe,x
0C86F                           
0C86F A9 04                         LDA #ANIMATION_SPEED
0C871 9D 60 03                      STA explosion_timer,x
0C874                           
0C874 A5 02                         LDA temp+2
0C876 29 0F                         AND #%00001111
0C878 A8                            TAY
0C879 B9 97 D8                      LDA tbl_Times16,y
0C87C 18                            CLC
0C87D 69 0E                         ADC #$0E
0C87F 9D 6C 03                      STA explosion_x,x
0C882                           
0C882 A5 02                         LDA temp+2
0C884 29 F0                         AND #%11110000
0C886 18                            CLC
0C887 69 29                         ADC #$29
0C889 9D 70 03                      STA explosion_y,x
0C88C                           
0C88C A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C88E 9D 68 03                      STA explosion_attributes,x
0C891 A9 01                         LDA #$01
0C893 9D 74 03                      STA explosion_active,x
0C896                           
0C896 A5 02                         LDA temp+2
0C898 AA                            TAX
0C899                               
0C899                               
0C899                               ;; - Write #$00 in tile type ram (makes not-solid)
0C899 A9 00                         LDA #$00
0C89B 9D 00 04                      STA tile_type, x
0C89E                           
0C89E                           
0C89E                               ;; Add (80 + level number) to score
0C89E A5 41                         LDA current_level
0C8A0 18                            CLC
0C8A1 69 51                         ADC #81
0C8A3 20 56 C5                      JSR sub_AddAccumulatorToScore
0C8A6                           
0C8A6                           
0C8A6                               ;; - If there are no color blocks left:
0C8A6                               ;;   - Freeze ball
0C8A6                               ;;   - Initiate level-win state [@TODO]
0C8A6 C6 43                         DEC blocks_left
0C8A8 D0 06                         BNE +
0C8AA A5 37                             LDA ball_flags
0C8AC 09 04                             ORA #FREEZE_BALL
0C8AE 85 37                             STA ball_flags
0C8B0                               +
0C8B0                               
0C8B0 60                            RTS
0C8B1                           
0C8B1                           +checkIfPaintBlock:
0C8B1                           
0C8B1                           
0C8B1                               ;; Check if collided tile is a paint block
0C8B1 A5 42                         LDA colliding_tile
0C8B3 29 20                         AND #IS_PAINT_BLOCK
0C8B5 F0 1A                         BEQ +checkIfDeathBlock
0C8B7                                   ;; It's a paint block. Update ball color
0C8B7                                   ;; Save x-register
0C8B7 8A                                TXA
0C8B8 48                                PHA
0C8B9                           
0C8B9                                   ;; Get tile color
0C8B9 A5 42                             LDA colliding_tile
0C8BB 29 0E                             AND #%00001110
0C8BD 0A                                ASL
0C8BE 0A                                ASL
0C8BF 0A                                ASL
0C8C0 0A                                ASL
0C8C1 85 00                             STA temp
0C8C3                           
0C8C3                                   ;; Apply tile color to ball
0C8C3 A5 37                             LDA ball_flags
0C8C5 29 1F                             AND #%00011111
0C8C7 05 00                             ORA temp
0C8C9 85 37                             STA ball_flags
0C8CB 20 89 C6                          JSR sub_ColorizeBall
0C8CE                           
0C8CE                                   ;; Restore x-register
0C8CE 68                                PLA
0C8CF AA                                TAX
0C8D0                           
0C8D0                                   ;; Return
0C8D0 60                                RTS
0C8D1                               +checkIfDeathBlock:
0C8D1                           
0C8D1                               ;; Check if collided tile is a death block
0C8D1 A5 42                         LDA colliding_tile
0C8D3 29 10                         AND #IS_DEATH_BLOCK
0C8D5 F0 3A                         BEQ +checkIfMoveBlock
0C8D7                           
0C8D7                                   ;; It is a death block
0C8D7                                   ;; Freeze and kill player
0C8D7 A5 37                             LDA ball_flags
0C8D9 09 05                             ORA #%00000101
0C8DB 85 37                             STA ball_flags
0C8DD                                   
0C8DD                                   ;; Get free explosion slot
0C8DD A6 3B                             LDX explosion_pointer
0C8DF D0 02                             BNE +
0C8E1 A2 04                                 LDX #MAX_ANIMATIONS
0C8E3                                   +
0C8E3 CA                                DEX
0C8E4 86 3B                             STX explosion_pointer
0C8E6                           
0C8E6                                   ;; Load explosion data into RAM
0C8E6 A9 00                             LDA #$00
0C8E8 9D 64 03                          STA explosion_currentframe,x
0C8EB                           
0C8EB A9 04                             LDA #ANIMATION_SPEED
0C8ED 9D 60 03                          STA explosion_timer,x
0C8F0                           
0C8F0 A5 17                             LDA ball_xpos_hi
0C8F2 38                                SEC
0C8F3 E9 08                             SBC #$08
0C8F5 9D 6C 03                          STA explosion_x,x
0C8F8                           
0C8F8 A5 19                             LDA ball_ypos_hi
0C8FA 38                                SEC
0C8FB E9 06                             SBC #$06
0C8FD 9D 70 03                          STA explosion_y,x
0C900                           
0C900 A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C902 9D 68 03                          STA explosion_attributes,x
0C905                           
0C905 A9 01                             LDA #$01
0C907 9D 74 03                          STA explosion_active,x
0C90A                                   
0C90A                                   ;; Play explosion sound effect
0C90A 85 49                             STA explosion_sfx_timer
0C90C                           
0C90C                                   ;; Set kill timer
0C90C A9 60                             LDA #$60
0C90E 85 40                             STA kill_timer
0C910                           
0C910                                   ;; Return
0C910 60                                RTS
0C911                           
0C911                           
0C911                           +checkIfMoveBlock:
0C911                           
0C911                               ;; Check if collided tile is a move block
0C911 A5 42                         LDA colliding_tile
0C913 29 40                         AND #IS_MOVE_BLOCK
0C915 D0 01                         BNE +
0C917 60                                RTS
0C918                               +
0C918                           
0C918                               ;; It is a move block. Check if colors match
0C918 20 AA C6                      JSR sub_ColorsMatch
0C91B F0 01                         BEQ +
0C91D 60                                RTS
0C91E                               +
0C91E                           
0C91E                               ;; Colors match
0C91E                               ;; - Check if next tile is within the playground
0C91E                               ;; (push X onto stack as well)
0C91E 8A                            TXA
0C91F 48                            PHA
0C920 18                            CLC
0C921 65 36                         ADC move_block_space_to_check
0C923 AA                            TAX
0C924                               
0C924 29 0F                         AND #%00001111
0C926 C9 0E                         CMP #$0E
0C928 90 03                         BCC +
0C92A 4C 9E C9                          JMP +restoreX
0C92D                               +
0C92D 8A                            TXA
0C92E 29 F0                         AND #%11110000
0C930 C9 A0                         CMP #$A0
0C932 D0 03                         BNE +
0C934 4C 9E C9                          JMP +restoreX
0C937                               +
0C937 C9 F0                         CMP #$F0
0C939 D0 03                         BNE +
0C93B 4C 9E C9                          JMP +restoreX
0C93E                               +
0C93E                               
0C93E                               ;; Check if the next tile is solid
0C93E BD 00 04                      LDA tile_type,x
0C941 29 01                         AND #TILE_IS_SOLID
0C943 F0 03                         BEQ +
0C945 4C 9E C9                          JMP +restoreX
0C948                               +
0C948                               
0C948                               ;; Move block has room to move
0C948                               ;; Pull original X from stack
0C948 68                            PLA
0C949 AA                            TAX        
0C94A                               
0C94A                               ;; Add the tiles that need updating to ppu buffer, and
0C94A                               ;; update attribute table accordingly through ppu buffer
0C94A 20 BF C9                      JSR sub_GetPPUAddrFromYXIndex
0C94D 20 44 CE                      JSR sub_RemoveBlockFromScreen
0C950                           
0C950                               ;; Store original tile type in temp variable
0C950 BD 00 04                      LDA tile_type,x
0C953 85 08                         STA temp+8
0C955                           
0C955                               ;; Write #$00 in tile type ram (makes not-solid)
0C955 A9 00                         LDA #$00
0C957 9D 00 04                      STA tile_type,x
0C95A                           
0C95A                               ;; Add move tile sprite over the original tile
0C95A                               ;; - Store x in temp variable
0C95A 86 03                         STX temp+3
0C95C                               
0C95C                               ;; - Update move block pointer
0C95C A6 3C                         LDX move_block_pointer
0C95E D0 02                         BNE +
0C960 A2 04                             LDX #MAX_ANIMATIONS
0C962                               +
0C962 CA                            DEX
0C963 86 3C                         STX move_block_pointer
0C965                           
0C965                               ;; = Set move block tile type
0C965 A5 08                         LDA temp+8
0C967 9D 84 03                      STA move_block_tile_type,x
0C96A                           
0C96A                               ;; - Set move block X position
0C96A A5 03                         LDA temp+3
0C96C 29 0F                         AND #%00001111
0C96E A8                            TAY
0C96F C8                            INY
0C970 B9 97 D8                      LDA tbl_Times16,y
0C973 9D 78 03                      STA move_block_x,x
0C976                               
0C976                               ;; - Set move block Y position
0C976 A5 03                         LDA temp+3
0C978 29 F0                         AND #%11110000
0C97A 18                            CLC
0C97B 69 30                         ADC #$30
0C97D 9D 7C 03                      STA move_block_y,x
0C980 DE 7C 03                      DEC move_block_y,x
0C983                               
0C983                               ;; - Set timer to 16 (+1) frames
0C983 A9 11                         LDA #$11
0C985 9D 80 03                      STA move_block_timer,x
0C988                               
0C988                               ;; - Set move direction
0C988 A5 36                         LDA move_block_space_to_check
0C98A 29 81                         AND #%10000001
0C98C 18                            CLC
0C98D 2A                            ROL
0C98E 69 00                         ADC #$00
0C990 85 04                         STA temp+4
0C992                               
0C992                               ;; - Set block color as ball color and add direction
0C992 A5 37                         LDA ball_flags
0C994 29 E0                         AND #BALL_COLOR
0C996 05 04                         ORA temp+4
0C998 9D 88 03                      STA move_block_flags,x
0C99B                               
0C99B                               ;; - Restore original X
0C99B A6 03                         LDX temp+3
0C99D                           
0C99D                               ;; Return
0C99D 60                            RTS
0C99E                           
0C99E                           
0C99E                           ;; Pull X register from stack before returning
0C99E                           +restoreX:
0C99E 68                            PLA
0C99F AA                            TAX
0C9A0 60                            RTS
0C9A1                           .include "game/subroutine/FlashEffect.asm"
0C9A1                           sub_FlashEffect:
0C9A1 A2 00                         LDX #$00
0C9A3 86 01                         STX temp+1
0C9A5 A9 3F                         LDA #$3F
0C9A7 85 00                         STA temp
0C9A9                           
0C9A9                               -flashLoop:
0C9A9 BD 05 D9                          LDA tbl_BackgroundFade,x
0C9AC 85 02                             STA temp+2
0C9AE 20 E4 CF                          JSR sub_WriteByteToPPUBuffer
0C9B1 A0 03                             LDY #$03
0C9B3                                   -
0C9B3 20 47 C5                              JSR sub_WaitForNMI
0C9B6 88                                    DEY
0C9B7 D0 FA                             BNE -
0C9B9 E8                                INX
0C9BA E0 0A                             CPX #$0A
0C9BC D0 EB                         BNE -flashLoop
0C9BE                               
0C9BE 60                            RTS0C9BF                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C9BF                           sub_GetPPUAddrFromYXIndex:
0C9BF                           
0C9BF                               ;; Get the PPU address from YX index
0C9BF                               ;; - Expects YX index (aka tile offset) to be in the X register
0C9BF                               ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C9BF                               
0C9BF                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C9BF                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C9BF                               
0C9BF 8A                            TXA
0C9C0 29 C0                         AND #%11000000
0C9C2 18                            CLC
0C9C3 2A                            ROL
0C9C4 2A                            ROL
0C9C5 2A                            ROL
0C9C6 69 20                         ADC #$20
0C9C8 85 00                         STA temp
0C9CA                               
0C9CA 8A                            TXA
0C9CB 29 0F                         AND #%00001111
0C9CD 0A                            ASL
0C9CE 85 01                         STA temp+1
0C9D0                               
0C9D0 8A                            TXA
0C9D1 29 30                         AND #%00110000
0C9D3 0A                            ASL
0C9D4 0A                            ASL
0C9D5 18                            CLC
0C9D6 65 01                         ADC temp+1
0C9D8 85 01                         STA temp+1
0C9DA                               
0C9DA A5 00                         LDA temp
0C9DC 69 00                         ADC #$00
0C9DE 85 00                         STA temp
0C9E0                               
0C9E0 A5 01                         LDA temp+1
0C9E2 18                            CLC
0C9E3 69 C2                         ADC #$C2
0C9E5 85 01                         STA temp+1
0C9E7                               
0C9E7 A5 00                         LDA temp
0C9E9 69 00                         ADC #$00
0C9EB 85 00                         STA temp
0C9ED                           
0C9ED 60                            RTS0C9EE                           .include "game/subroutine/InitiateNudge.asm"
0C9EE                           
0C9EE                           sub_InitiateNudge:
0C9EE 85 37                         STA ball_flags
0C9F0 A9 05                         LDA #NUDGE_FRAMES
0C9F2 85 3E                         STA nudge_timer
0C9F4 60                            RTS
0C9F5                           
0C9F5                           .include "game/subroutine/JumpToPointer.asm"
0C9F5                           sub_JumpToPointer:
0C9F5 6C 0C 00                      JMP (pointer)
0C9F8                               ;RTS must be handled by the routine (pointer) jumps to
0C9F8                           .include "game/subroutine/LoadGameScreen.asm"
0C9F8                           sub_LoadGameScreen:
0C9F8                           
0C9F8                               ;; Clear the screen
0C9F8 20 1E C6                      JSR sub_ClearScreen
0C9FB                               
0C9FB                               ;; Clear collision and attribute data; reset blocks left in the process
0C9FB A2 00                         LDX #$00
0C9FD 8A                            TXA
0C9FE 85 43                         STA blocks_left
0CA00                               -
0CA00 9D 00 04                          STA tile_type,x
0CA03 E8                                INX
0CA04 D0 FA                         BNE -
0CA06                               
0CA06                               ;; Get pointer from current level
0CA06 A6 41                         LDX current_level
0CA08 BD 4C D8                      LDA tbl_lvl_layout_lo,x
0CA0B 85 0C                         STA pointer
0CA0D BD 33 D8                      LDA tbl_lvl_layout_hi,x
0CA10 85 0D                         STA pointer+1
0CA12                           
0CA12                               ;; Set up the loop
0CA12 A0 00                         LDY #$00
0CA14                           -drawRowColumnLoop:
0CA14                           
0CA14                               ;; Load (x,y) of current set of tiles
0CA14 B1 0C                         LDA (pointer),y
0CA16                           
0CA16                               ;; Check if level is done; if so, skip the loop
0CA16 C9 FF                         CMP #LEVEL_END
0CA18 D0 03                         BNE +
0CA1A 4C 63 CB                          JMP +doneLevelLoad
0CA1D                               +
0CA1D                           
0CA1D                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CA1D 85 00                         STA temp
0CA1F C8                            INY
0CA20 B1 0C                         LDA (pointer),y
0CA22 85 01                         STA temp+1
0CA24                               
0CA24                               ;; Convert (x,y) to PPU address
0CA24                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CA24 A5 00                         LDA temp
0CA26 29 0F                         AND #%00001111
0CA28 4A                            LSR
0CA29 4A                            LSR
0CA2A 09 20                         ORA #$20
0CA2C 85 02                         STA temp+2
0CA2E                               
0CA2E                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CA2E A5 00                         LDA temp
0CA30 29 F0                         AND #%11110000
0CA32 4A                            LSR
0CA33 4A                            LSR
0CA34 4A                            LSR
0CA35 85 03                         STA temp+3
0CA37                               
0CA37 A5 00                         LDA temp
0CA39 29 03                         AND #%00000011
0CA3B AA                            TAX
0CA3C BD A7 D8                      LDA tbl_Times64,x
0CA3F 18                            CLC
0CA40 65 03                         ADC temp+3
0CA42 18                            CLC
0CA43 69 C2                         ADC #$C2
0CA45 85 03                         STA temp+3
0CA47                               
0CA47                               ;; Add carry to temp+2
0CA47 A5 02                         LDA temp+2
0CA49 69 00                         ADC #$00
0CA4B 85 02                         STA temp+2
0CA4D                           
0CA4D                               ;; Convert tile data to loop count and tile type
0CA4D                               ;; temp+4 = color
0CA4D A5 01                         LDA temp+1
0CA4F 29 07                         AND #%00000111
0CA51 85 04                         STA temp+4
0CA53                               
0CA53                               ;; If color = 7, this is a wall
0CA53 C9 07                         CMP #%00000111
0CA55 F0 12                         BEQ +wallHack
0CA57                                   
0CA57                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CA57 29 01                             AND #%00000001
0CA59 F0 02                             BEQ +
0CA5B A9 05                                 LDA #$05
0CA5D                                   +
0CA5D 85 07                             STA temp+7
0CA5F                                
0CA5F                                   ;; temp+5 = tile type
0CA5F A5 01                             LDA temp+1
0CA61 4A                                LSR
0CA62 4A                                LSR
0CA63 4A                                LSR
0CA64 29 03                             AND #%00000011
0CA66 4C 6F CA                          JMP +setTileType
0CA69                               +wallHack:
0CA69                               
0CA69                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CA69 A9 00                         LDA #$00
0CA6B 85 07                         STA temp+7
0CA6D A9 04                         LDA #$04
0CA6F                           
0CA6F                           +setTileType:    
0CA6F 85 05                         STA temp+5
0CA71                               
0CA71                               ;; X = tile offset
0CA71 18                            CLC
0CA72 65 07                         ADC temp+7
0CA74 AA                            TAX
0CA75                               
0CA75                               ;; temp+6 = number of tiles
0CA75 A5 01                         LDA temp+1
0CA77 29 60                         AND #%01100000
0CA79 4A                            LSR
0CA7A 4A                            LSR
0CA7B 4A                            LSR
0CA7C 4A                            LSR
0CA7D 4A                            LSR
0CA7E 85 06                         STA temp+6
0CA80                               
0CA80                               ;; Translate (x,y) to (y,x) for tile RAM
0CA80 A5 00                         LDA temp
0CA82 0A                            ASL
0CA83 0A                            ASL
0CA84 0A                            ASL
0CA85 0A                            ASL
0CA86 85 08                         STA temp+8
0CA88 A5 00                         LDA temp
0CA8A 4A                            LSR
0CA8B 4A                            LSR
0CA8C 4A                            LSR
0CA8D 4A                            LSR
0CA8E 05 08                         ORA temp+8
0CA90 85 00                         STA temp
0CA92                               
0CA92                               ;; Set up loop
0CA92 98                            TYA
0CA93 48                            PHA
0CA94 A4 06                         LDY temp+6
0CA96                           
0CA96                               -drawTileLoop:
0CA96                                   ;; Write PPU address
0CA96 2C 02 20                          BIT PPU_STATUS
0CA99 A5 02                             LDA temp+2
0CA9B 8D 06 20                          STA PPU_ADDR
0CA9E A5 03                             LDA temp+3
0CAA0 8D 06 20                          STA PPU_ADDR
0CAA3                                   
0CAA3                                   ;; Write first and second tile
0CAA3 BD AB D8                          LDA tbl_GametileTopLeft,x
0CAA6 8D 07 20                          STA PPU_DATA
0CAA9 BD B5 D8                          LDA tbl_GametileTopRight,x
0CAAC 8D 07 20                          STA PPU_DATA
0CAAF                                   
0CAAF                                   ;; Update PPU address
0CAAF 2C 02 20                          BIT PPU_STATUS
0CAB2 A5 02                             LDA temp+2
0CAB4 8D 06 20                          STA PPU_ADDR
0CAB7 A5 03                             LDA temp+3
0CAB9 18                                CLC
0CABA 69 20                             ADC #$20
0CABC 8D 06 20                          STA PPU_ADDR
0CABF                                   
0CABF                                   ;; Write third and fourth tile
0CABF BD BF D8                          LDA tbl_GametileBottomLeft,x
0CAC2 8D 07 20                          STA PPU_DATA
0CAC5 BD C9 D8                          LDA tbl_GametileBottomRight,x
0CAC8 8D 07 20                          STA PPU_DATA
0CACB                           
0CACB                                   ;; Push x-register to stack
0CACB 8A                                TXA
0CACC 48                                PHA
0CACD                           
0CACD                                   ;; Update tile RAM (aka collision table)
0CACD A6 05                             LDX temp+5
0CACF BD D3 D8                          LDA tbl_GameTileRamByte,x
0CAD2 05 04                             ORA temp+4
0CAD4 0A                                ASL
0CAD5 09 01                             ORA #%00000001
0CAD7 A6 00                             LDX temp
0CAD9 9D 00 04                          STA tile_type,x
0CADC                           
0CADC                                   ;; Check if shade 1 should be drawn
0CADC E8                                INX
0CADD BD 00 04                          LDA tile_type,x
0CAE0 D0 05                             BNE +
0CAE2 A9 00                                 LDA #$00
0CAE4 8D 07 20                              STA PPU_DATA
0CAE7                                   +
0CAE7                                   
0CAE7                                   ;; Check if shade 2 should be drawn
0CAE7 A5 03                             LDA temp+3
0CAE9 18                                CLC
0CAEA 69 41                             ADC #$41
0CAEC 85 03                             STA temp+3
0CAEE A5 02                             LDA temp+2
0CAF0 69 00                             ADC #$00
0CAF2 85 02                             STA temp+2
0CAF4                                   
0CAF4 8A                                TXA
0CAF5 18                                CLC
0CAF6 69 0F                             ADC #$0F
0CAF8 AA                                TAX
0CAF9                                   
0CAF9 BD 00 04                          LDA tile_type,x
0CAFC D0 0F                             BNE +
0CAFE A5 02                                 LDA temp+2
0CB00 8D 06 20                              STA PPU_ADDR
0CB03 A5 03                                 LDA temp+3
0CB05 8D 06 20                              STA PPU_ADDR
0CB08 A9 00                                 LDA #$00
0CB0A 8D 07 20                              STA PPU_DATA
0CB0D                                   +
0CB0D                           
0CB0D                                   ;; Check if shade 3 should be drawn
0CB0D E8                                INX
0CB0E E6 03                             INC temp+3
0CB10 BD 00 04                          LDA tile_type,x
0CB13 D0 0F                             BNE +
0CB15 A5 02                                 LDA temp+2
0CB17 8D 06 20                              STA PPU_ADDR
0CB1A A5 03                                 LDA temp+3
0CB1C 8D 06 20                              STA PPU_ADDR
0CB1F A9 00                                 LDA #$00
0CB21 8D 07 20                              STA PPU_DATA
0CB24                                   +
0CB24                                   
0CB24                                   ;; Restore x-register from stack
0CB24 68                                PLA
0CB25 AA                                TAX
0CB26                                   
0CB26                                   ;; Reset pointer for next tile
0CB26 A5 03                             LDA temp+3
0CB28 38                                SEC
0CB29 E9 42                             SBC #$42
0CB2B 85 03                             STA temp+3
0CB2D A5 02                             LDA temp+2
0CB2F E9 00                             SBC #$00
0CB31 85 02                             STA temp+2
0CB33                                   
0CB33                                   ;; Draw next metatile in this loop (if any left)
0CB33 88                                DEY
0CB34 30 27                             BMI +doneDrawingRowColumn
0CB36                                   
0CB36                                   ;; Is it a row or a column?
0CB36 A5 01                             LDA temp+1
0CB38 10 17                             BPL +
0CB3A                                       ;; It is a column: move pointer down (+$40)
0CB3A A5 03                                 LDA temp+3
0CB3C 18                                    CLC
0CB3D 69 40                                 ADC #$40
0CB3F 85 03                                 STA temp+3
0CB41 A5 02                                 LDA temp+2
0CB43 69 00                                 ADC #$00
0CB45 85 02                                 STA temp+2
0CB47                                       
0CB47                                       ;; Add 16 to temp (as a tile RAM pointer)
0CB47 A5 00                                 LDA temp
0CB49 18                                    CLC
0CB4A 69 10                                 ADC #$10
0CB4C 85 00                                 STA temp
0CB4E 4C 5A CB                              JMP +drawNextTile
0CB51                                   +
0CB51                                   
0CB51                                   ;; It is a row: move pointer right (+$02)
0CB51 A5 03                             LDA temp+3
0CB53 18                                CLC
0CB54 69 02                             ADC #$02
0CB56 85 03                             STA temp+3
0CB58                                   
0CB58                                   ;; Add 1 to temp (as a tile RAM pointer)
0CB58 E6 00                             INC temp
0CB5A                           
0CB5A                               
0CB5A                               ;; Next tile in the row/column
0CB5A                                   +drawNextTile:
0CB5A 4C 96 CA                      JMP -drawTileLoop
0CB5D                           
0CB5D                               ;; Go to the next set of tiles
0CB5D                           +doneDrawingRowColumn:
0CB5D 68                            PLA
0CB5E A8                            TAY
0CB5F C8                            INY
0CB60 4C 14 CA                      JMP -drawRowColumnLoop
0CB63                           
0CB63                           ;; Level loading is done
0CB63                           +doneLevelLoad:
0CB63                           
0CB63                               ;; Count number of color blocks
0CB63 A2 A0                         LDX #160
0CB65                               -
0CB65 BD FF 03                          LDA tile_type-1,x
0CB68 29 80                             AND #%10000000
0CB6A F0 02                             BEQ +
0CB6C E6 43                                 INC blocks_left
0CB6E                                   +
0CB6E CA                                DEX
0CB6F D0 F4                         BNE -
0CB71                           
0CB71                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CB71 A9 20                         LDA #$20
0CB73 8D 06 20                      STA PPU_ADDR
0CB76 A9 A2                         LDA #$A2
0CB78 8D 06 20                      STA PPU_ADDR
0CB7B A9 35                         LDA #$35
0CB7D 20 AB CD                      JSR sub_Draw28HorizontalTiles
0CB80                           
0CB80                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CB80 A9 23                         LDA #$23
0CB82 8D 06 20                      STA PPU_ADDR
0CB85 A9 42                         LDA #$42
0CB87 8D 06 20                      STA PPU_ADDR
0CB8A A9 31                         LDA #$31
0CB8C 20 AB CD                      JSR sub_Draw28HorizontalTiles
0CB8F                           
0CB8F                               ;; Left & right game bounds
0CB8F                               ;; Set PPU_ADDR and store in temp variables
0CB8F A9 20                         LDA #$20
0CB91 85 00                         STA temp
0CB93 8D 06 20                      STA PPU_ADDR
0CB96 A9 C1                         LDA #$C1
0CB98 85 01                         STA temp+1
0CB9A 8D 06 20                      STA PPU_ADDR
0CB9D                               
0CB9D                               ;; Set vertical bound tile and set up loop
0CB9D A0 33                         LDY #$33
0CB9F A2 14                         LDX #20
0CBA1                               -
0CBA1                                   ;; Show left tile
0CBA1 8C 07 20                          STY PPU_DATA
0CBA4                                   
0CBA4                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CBA4 A5 00                             LDA temp
0CBA6 8D 06 20                          STA PPU_ADDR
0CBA9 A5 01                             LDA temp+1
0CBAB 18                                CLC
0CBAC 69 1D                             ADC #29
0CBAE 85 01                             STA temp+1
0CBB0 8D 06 20                          STA PPU_ADDR
0CBB3                           
0CBB3                                   ;; Show right tile
0CBB3 8C 07 20                          STY PPU_DATA
0CBB6                           
0CBB6                                   ;; Check if we're done yet
0CBB6 CA                                DEX
0CBB7 F0 18                             BEQ +drawCorners
0CBB9                                   
0CBB9                                   ;; Not done yet: add 3 to low byte for next left bound
0CBB9 A5 01                             LDA temp+1
0CBBB 18                                CLC
0CBBC 69 03                             ADC #3
0CBBE 85 01                             STA temp+1
0CBC0                                   
0CBC0                                   ;; Apply carry to high byte
0CBC0 A5 00                             LDA temp
0CBC2 69 00                             ADC #$00
0CBC4 85 00                             STA temp
0CBC6                                   
0CBC6                                   ;; Store next PPU_ADDR to draw at
0CBC6 8D 06 20                          STA PPU_ADDR
0CBC9 A5 01                             LDA temp+1
0CBCB 8D 06 20                          STA PPU_ADDR
0CBCE 4C A1 CB                      JMP -
0CBD1                               
0CBD1                               
0CBD1                           
0CBD1                           +drawCorners:
0CBD1                               ;; Draw the corners of the playing field
0CBD1 A9 20                         LDA #$20
0CBD3 8D 06 20                      STA PPU_ADDR
0CBD6 A9 A1                         LDA #$A1
0CBD8 8D 06 20                      STA PPU_ADDR
0CBDB A9 39                         LDA #$39
0CBDD 8D 07 20                      STA PPU_DATA
0CBE0                           
0CBE0 A9 20                         LDA #$20
0CBE2 8D 06 20                      STA PPU_ADDR
0CBE5 A9 BE                         LDA #$BE
0CBE7 8D 06 20                      STA PPU_ADDR
0CBEA A9 3A                         LDA #$3A
0CBEC 8D 07 20                      STA PPU_DATA
0CBEF                               ;; (added background tile for Sprite-0 hit)
0CBEF A9 3F                         LDA #$3F
0CBF1 8D 07 20                      STA PPU_DATA
0CBF4                           
0CBF4 A9 23                         LDA #$23
0CBF6 8D 06 20                      STA PPU_ADDR
0CBF9 A9 41                         LDA #$41
0CBFB 8D 06 20                      STA PPU_ADDR
0CBFE A9 36                         LDA #$36
0CC00 8D 07 20                      STA PPU_DATA
0CC03                           
0CC03 A9 23                         LDA #$23
0CC05 8D 06 20                      STA PPU_ADDR
0CC08 A9 5E                         LDA #$5E
0CC0A 8D 06 20                      STA PPU_ADDR
0CC0D A9 34                         LDA #$34
0CC0F 8D 07 20                      STA PPU_DATA
0CC12                           
0CC12                           
0CC12                               ;; Draw the hud labels
0CC12 A9 20                         LDA #$20
0CC14 8D 06 20                      STA PPU_ADDR
0CC17 A9 62                         LDA #$62
0CC19 8D 06 20                      STA PPU_ADDR
0CC1C A2 00                         LDX #$00
0CC1E                               -
0CC1E BD D8 D8                          LDA tbl_HudText,x
0CC21 8D 07 20                          STA PPU_DATA
0CC24 E8                                INX
0CC25 E0 1C                             CPX #28
0CC27 D0 F5                         BNE -
0CC29                           
0CC29                           
0CC29                               ;; Draw the current score
0CC29 A9 20                         LDA #$20
0CC2B 8D 06 20                      STA PPU_ADDR
0CC2E A9 83                         LDA #$83
0CC30 8D 06 20                      STA PPU_ADDR
0CC33 A2 00                         LDX #$00
0CC35                               -
0CC35 B5 20                             LDA ball_score,x
0CC37 18                                CLC
0CC38 69 01                             ADC #$01
0CC3A 8D 07 20                          STA PPU_DATA
0CC3D E8                                INX
0CC3E E0 06                             CPX #$06
0CC40 D0 F3                         BNE -
0CC42                           
0CC42                           
0CC42                               ;; Draw the level number
0CC42                               ;; (with primitive HEX>DEC)
0CC42 A5 41                         LDA current_level
0CC44 18                            CLC
0CC45 69 01                         ADC #$01
0CC47 85 01                         STA temp+1
0CC49                               
0CC49 C9 14                         CMP #20
0CC4B B0 13                         BCS +tempIsTwo
0CC4D                               
0CC4D C9 0A                         CMP #10
0CC4F B0 05                         BCS +tempIsOne
0CC51                               
0CC51 A9 00                         LDA #$00
0CC53 4C 67 CC                      JMP +setTemp
0CC56                               
0CC56                           +tempIsOne:
0CC56 38                            SEC
0CC57 E9 0A                         SBC #10
0CC59 85 01                         STA temp+1
0CC5B A9 01                         LDA #$01
0CC5D 4C 67 CC                      JMP +setTemp
0CC60                               
0CC60                           +tempIsTwo:
0CC60 38                            SEC
0CC61 E9 14                         SBC #20
0CC63 85 01                         STA temp+1
0CC65 A9 02                         LDA #$02
0CC67                           
0CC67                           +setTemp:
0CC67 85 00                         STA temp
0CC69                               
0CC69 E6 00                         INC temp
0CC6B E6 01                         INC temp+1
0CC6D                               
0CC6D A9 20                         LDA #$20
0CC6F 8D 06 20                      STA PPU_ADDR
0CC72 A9 8B                         LDA #$8B
0CC74 8D 06 20                      STA PPU_ADDR
0CC77 A5 00                         LDA temp
0CC79 8D 07 20                      STA PPU_DATA
0CC7C A5 01                         LDA temp+1
0CC7E 8D 07 20                      STA PPU_DATA
0CC81                           
0CC81                           
0CC81                               ;; Draw lives (presumes lives to be capped at 9)
0CC81 A9 20                         LDA #$20
0CC83 8D 06 20                      STA PPU_ADDR
0CC86 A9 92                         LDA #$92
0CC88 8D 06 20                      STA PPU_ADDR
0CC8B A6 1F                         LDX ball_lives
0CC8D E8                            INX
0CC8E 8E 07 20                      STX PPU_DATA
0CC91                           
0CC91                           
0CC91                               ;; Set and draw bonus
0CC91 A9 07                         LDA #$07
0CC93 85 2C                         STA ball_bonus
0CC95 A9 09                         LDA #$09
0CC97 85 2D                         STA ball_bonus+1
0CC99 85 2E                         STA ball_bonus+2
0CC9B                               
0CC9B A9 20                         LDA #$20
0CC9D 8D 06 20                      STA PPU_ADDR
0CCA0 A9 9A                         LDA #$9A
0CCA2 8D 06 20                      STA PPU_ADDR
0CCA5 A2 00                         LDX #$00
0CCA7                               -
0CCA7 B5 2C                             LDA ball_bonus,x
0CCA9 18                                CLC
0CCAA 69 01                             ADC #$01
0CCAC 8D 07 20                          STA PPU_DATA
0CCAF E8                                INX
0CCB0 E0 03                             CPX #$03
0CCB2 D0 F3                         BNE -
0CCB4                           
0CCB4                           
0CCB4                               ;; Set attribute data to RAM
0CCB4                               
0CCB4                               ;; Byte 0-7 of attribute ram should be #%10100000
0CCB4 A2 00                         LDX #$00
0CCB6 A9 A0                         LDA #$A0
0CCB8                               -
0CCB8 9D A0 04                          STA tile_attributes,x
0CCBB E8                                INX
0CCBC E0 08                             CPX #$08
0CCBE D0 F8                         BNE -
0CCC0                           
0CCC0                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CCC0                           
0CCC0                           -attributeLoop:
0CCC0                               ;; Reset current attribute value
0CCC0 A9 00                         LDA #$00
0CCC2 85 02                         STA temp+2
0CCC4                           
0CCC4                               ;; Get first metatile in tile ram based on attribute index
0CCC4                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CCC4 8A                            TXA
0CCC5                           
0CCC5 38                            SEC
0CCC6 E9 08                         SBC #$08
0CCC8 85 01                         STA temp+1      ; attr - 8 (temp1)
0CCCA 0A                            ASL             ; * 2
0CCCB 85 00                         STA temp        ; temp = temp1 * 2
0CCCD                           
0CCCD A5 01                         LDA temp+1      ; temp1
0CCCF 29 F8                         AND #%11111000  ; rounded down to 8's
0CCD1 0A                            ASL             ; * 2
0CCD2 18                            CLC
0CCD3 65 00                         ADC temp        ; + temp1 * 2
0CCD5 85 00                         STA temp        ; first metatile
0CCD7                           
0CCD7                               ;; Store first metatile in y-register
0CCD7 A8                            TAY
0CCD8                           
0CCD8                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CCD8 8A                            TXA
0CCD9 29 07                         AND #%00000111
0CCDB C9 07                         CMP #%00000111
0CCDD F0 0B                         BEQ +
0CCDF                           
0CCDF                               ;; If X >= $30, don't apply bottom right metatile
0CCDF E0 30                         CPX #$30
0CCE1 B0 07                         BCS +
0CCE3                               
0CCE3                               ;; Add metatile1 subpalette to attribute value
0CCE3 B9 00 04                      LDA tile_type,y
0CCE6 29 0C                         AND #%00001100
0CCE8 85 02                         STA temp+2
0CCEA                               +
0CCEA                           
0CCEA                           
0CCEA                               ;; Apply second metatile
0CCEA 88                            DEY
0CCEB                           
0CCEB                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CCEB 8A                            TXA
0CCEC 29 07                         AND #%00000111
0CCEE F0 10                         BEQ +
0CCF0                           
0CCF0                               ;; If X >= $30, don't apply bottom left metatile
0CCF0 E0 30                         CPX #$30
0CCF2 B0 0C                         BCS +
0CCF4                           
0CCF4                           
0CCF4                           
0CCF4                               ;; Add metatile2 subpalette to attribute value
0CCF4 B9 00 04                      LDA tile_type,y
0CCF7 29 0C                         AND #%00001100
0CCF9 4A                            LSR
0CCFA 4A                            LSR
0CCFB 05 02                         ORA temp+2
0CCFD 4C 02 CD                      JMP ++
0CD00                               +
0CD00 A5 02                         LDA temp+2
0CD02                               ++
0CD02 0A                            ASL
0CD03 0A                            ASL
0CD04 85 02                         STA temp+2
0CD06                           
0CD06                           
0CD06                               ;; Apply third metatile
0CD06 98                            TYA
0CD07 38                            SEC
0CD08 E9 0F                         SBC #$0F
0CD0A A8                            TAY
0CD0B                           
0CD0B                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD0B 8A                            TXA
0CD0C 29 07                         AND #%00000111
0CD0E C9 07                         CMP #%00000111
0CD10 F0 11                         BEQ +
0CD12                           
0CD12                               ;; If X < $10, don't apply top right metatile
0CD12 8A                            TXA
0CD13 29 F0                         AND #%11110000
0CD15 F0 0C                         BEQ +
0CD17                           
0CD17                               ;; Add metatile3 subpalette to attribute value
0CD17 B9 00 04                      LDA tile_type,y
0CD1A 29 0C                         AND #%00001100
0CD1C 4A                            LSR
0CD1D 4A                            LSR
0CD1E 05 02                         ORA temp+2
0CD20 4C 25 CD                      JMP ++
0CD23                               +
0CD23 A5 02                         LDA temp+2
0CD25                               ++
0CD25 0A                            ASL
0CD26 0A                            ASL
0CD27 85 02                         STA temp+2
0CD29                           
0CD29                           
0CD29                               ;; Apply fourth metatile
0CD29 88                            DEY
0CD2A                           
0CD2A                               ;; If X MOD 8 == 0, don't apply top left metatile
0CD2A 8A                            TXA
0CD2B 29 07                         AND #%00000111
0CD2D F0 11                         BEQ +
0CD2F                           
0CD2F                               ;; If X < $10, don't apply top left metatile
0CD2F 8A                            TXA
0CD30 29 F0                         AND #%11110000
0CD32 F0 0C                         BEQ +
0CD34                           
0CD34                               ;; Add metatile4 subpalette to attribute value
0CD34 B9 00 04                      LDA tile_type,y
0CD37 29 0C                         AND #%00001100
0CD39 4A                            LSR
0CD3A 4A                            LSR
0CD3B 05 02                         ORA temp+2
0CD3D 4C 42 CD                      JMP ++
0CD40                               +
0CD40 A5 02                         LDA temp+2
0CD42                               ++
0CD42 9D A0 04                      STA tile_attributes,x
0CD45                           
0CD45                               ;; Check the next attribute, if any left
0CD45 E8                            INX
0CD46 E0 38                         CPX #$38
0CD48 F0 03                         BEQ +
0CD4A 4C C0 CC                          JMP -attributeLoop
0CD4D                               +
0CD4D                           
0CD4D                               ;; Stream attribute RAM to PPU
0CD4D 2C 02 20                      BIT PPU_STATUS
0CD50 A9 23                         LDA #$23
0CD52 8D 06 20                      STA PPU_ADDR
0CD55 A9 C0                         LDA #$C0
0CD57 8D 06 20                      STA PPU_ADDR
0CD5A A2 00                         LDX #$00
0CD5C                               -
0CD5C BD A0 04                          LDA tile_attributes,x
0CD5F 8D 07 20                          STA PPU_DATA
0CD62 E8                                INX
0CD63 E0 40                             CPX #$40
0CD65 D0 F5                         BNE -
0CD67                           
0CD67                               ;; Set initial ball position
0CD67 A6 41                         LDX current_level
0CD69 BD 65 D8                      LDA tbl_lvl_ball_startpos,x
0CD6C 29 F0                         AND #%11110000
0CD6E 18                            CLC
0CD6F 69 34                         ADC #$34
0CD71 85 19                         STA ball_ypos_hi
0CD73 BD 65 D8                      LDA tbl_lvl_ball_startpos,x
0CD76 0A                            ASL
0CD77 0A                            ASL
0CD78 0A                            ASL
0CD79 0A                            ASL
0CD7A 18                            CLC
0CD7B 69 14                         ADC #$14
0CD7D 85 17                         STA ball_xpos_hi
0CD7F A9 00                         LDA #$00
0CD81 85 18                         STA ball_xpos_lo
0CD83 85 1A                         STA ball_ypos_lo
0CD85                               
0CD85                               ;; Set initial ball color and direction
0CD85 BD 7E D8                      LDA tbl_lvl_ball_init,x
0CD88 29 F0                         AND #%11110000
0CD8A 85 37                         STA ball_flags
0CD8C 20 89 C6                      JSR sub_ColorizeBall
0CD8F                               
0CD8F                               ;; Reset bonus timer
0CD8F A9 08                         LDA #BONUS_FRAMES
0CD91 85 3F                         STA bonus_timer
0CD93                               
0CD93                               ;; Play background noise
0CD93 A9 08                         LDA #$08
0CD95 8D 15 40                      STA APU_STATUS
0CD98 8D 0F 40                      STA NOISE_LENGTH
0CD9B A9 0E                         LDA #$0E
0CD9D 85 46                         STA current_noise
0CD9F A9 00                         LDA #$00
0CDA1 85 44                         STA max_noise
0CDA3 85 47                         STA noise_timer
0CDA5 85 45                         STA sweep_noise
0CDA7 20 B5 C5                      JSR sub_BackgroundNoise
0CDAA                           
0CDAA                               ;; Return
0CDAA 60                            RTS
0CDAB                           
0CDAB                           
0CDAB                           ;; Subroutine: draw 28 tiles in a row
0CDAB                           sub_Draw28HorizontalTiles:
0CDAB A2 1C                         LDX #28
0CDAD                               -
0CDAD 8D 07 20                          STA PPU_DATA
0CDB0 CA                                DEX
0CDB1 D0 FA                         BNE -
0CDB3 60                            RTS0CDB4                           .include "game/subroutine/LoadIntroScreen.asm"
0CDB4                           sub_LoadIntroScreen:
0CDB4                           
0CDB4                               ;; Load intro palette
0CDB4 2C 02 20                      BIT PPU_STATUS
0CDB7 A9 3F                         LDA #$3F
0CDB9 8D 06 20                      STA PPU_ADDR
0CDBC A9 00                         LDA #$00
0CDBE 8D 06 20                      STA PPU_ADDR
0CDC1 A2 00                         LDX #$00
0CDC3                               -
0CDC3 BD 0A D0                          LDA tbl_IntroScreenPalette,x
0CDC6 8D 07 20                          STA PPU_DATA
0CDC9 E8                                INX
0CDCA E0 20                             CPX #$20
0CDCC D0 F5                         BNE -
0CDCE                               
0CDCE                               ;; Put ball in the middle
0CDCE A9 7C                         LDA #$7C
0CDD0 85 17                         STA ball_xpos_hi
0CDD2 85 19                         STA ball_ypos_hi
0CDD4                           
0CDD4                               ;; Clear the screen
0CDD4 20 1E C6                      JSR sub_ClearScreen
0CDD7                           
0CDD7                               ;; Set up intro screen draw loop
0CDD7 A2 00                         LDX #$00
0CDD9                           
0CDD9                           -loop_IntroScreenData:
0CDD9                           
0CDD9                               ;; Get current byte from intro screen data
0CDD9 BD 32 D0                      LDA tbl_IntroScreenData,x
0CDDC                           
0CDDC                               ;; If current byte is #$3F, we're done drawing.
0CDDC C9 3F                         CMP #$3F
0CDDE D0 03                         BNE +
0CDE0 4C 2D CE                          JMP +goToEndIntroScreen
0CDE3                               +
0CDE3                           
0CDE3                               ;; If highest bits are %11, draw a plain tile
0CDE3 29 C0                         AND #%11000000
0CDE5 D0 03                         BNE +
0CDE7 4C 0D CE                          JMP +drawTile
0CDEA                               +
0CDEA                               
0CDEA                               ;; If highest bits are %01, set the PPU address
0CDEA                               ;; If not, draw two logo tiles
0CDEA C9 40                         CMP #%01000000
0CDEC D0 03                         BNE +drawLogo
0CDEE 4C 17 CE                          JMP +setPpuAddr
0CDF1                           
0CDF1                           +drawLogo:
0CDF1                               ;; Get bits 0-2 and store in a temp variable
0CDF1 BD 32 D0                      LDA tbl_IntroScreenData,x
0CDF4 29 07                         AND #%00000111
0CDF6 85 00                         STA temp
0CDF8                               
0CDF8                               ;; Get bits 3-5, shift over to get a value from 0-7
0CDF8 BD 32 D0                      LDA tbl_IntroScreenData,x
0CDFB 4A                            LSR
0CDFC 4A                            LSR
0CDFD 4A                            LSR
0CDFE 29 07                         AND #%00000111
0CE00                               
0CE00                               ;; Draw the tile that corresponds with that value
0CE00 A8                            TAY
0CE01 20 01 C7                      JSR sub_drawIntroScreenLogoTile
0CE04                               
0CE04                               ;; Do the same for the value stored in temp
0CE04 A4 00                         LDY temp
0CE06 20 01 C7                      JSR sub_drawIntroScreenLogoTile
0CE09                           
0CE09                               ;; Next byte please
0CE09 E8                            INX
0CE0A 4C D9 CD                      JMP -loop_IntroScreenData
0CE0D                           
0CE0D                           +drawTile:
0CE0D                               ;; Just draw the tile value on screen
0CE0D BD 32 D0                      LDA tbl_IntroScreenData,x
0CE10 8D 07 20                      STA PPU_DATA
0CE13                               
0CE13                               ;; Next byte please
0CE13 E8                            INX
0CE14 4C D9 CD                      JMP -loop_IntroScreenData
0CE17                           
0CE17                           
0CE17                           +setPpuAddr:
0CE17                               ;; Reset the PPU latch
0CE17 2C 02 20                      BIT PPU_STATUS
0CE1A                               
0CE1A                               ;; Sanitize and write the high byte of the PPU address
0CE1A BD 32 D0                      LDA tbl_IntroScreenData,x
0CE1D 29 3F                         AND #%00111111
0CE1F 8D 06 20                      STA PPU_ADDR
0CE22                           
0CE22                               ;; Write the low byte of the PPU address
0CE22 E8                            INX
0CE23 BD 32 D0                      LDA tbl_IntroScreenData,x
0CE26 8D 06 20                      STA PPU_ADDR
0CE29                               
0CE29                               ;; PPU has been set up to draw tiles at the correct spot now.
0CE29                               
0CE29                               ;; Next byte please.
0CE29 E8                            INX
0CE2A 4C D9 CD                      JMP -loop_IntroScreenData
0CE2D                           
0CE2D                           +goToEndIntroScreen:
0CE2D                           
0CE2D                               ;; To color the 1.LEVEL: line green, we need to update two
0CE2D                               ;; values in the PPU attribute data.
0CE2D 2C 02 20                      BIT PPU_STATUS
0CE30 A9 23                         LDA #$23
0CE32 8D 06 20                      STA PPU_ADDR
0CE35 A9 CB                         LDA #$CB
0CE37 8D 06 20                      STA PPU_ADDR
0CE3A A9 0A                         LDA #%00001010
0CE3C 8D 07 20                      STA PPU_DATA
0CE3F 8D 07 20                      STA PPU_DATA
0CE42                           
0CE42 60                            RTS
0CE43                           
0CE43                           .include "game/subroutine/LoadWinScreen.asm"
0CE43                           sub_LoadWinScreen:
0CE43 60                            RTS
0CE44                           
0CE44                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CE44                           sub_RemoveBlockFromScreen:
0CE44                           
0CE44                               ;; Get current buffer location
0CE44 A4 3A                         LDY ppu_buffer_pointer
0CE46                               
0CE46                               ;; TILE 1: if metatile on top left is solid, draw
0CE46                               ;; null tile, else draw random noise tile
0CE46 A9 00                         LDA #$00
0CE48 85 39                         STA ppu_buffer_update
0CE4A                               
0CE4A A5 00                         LDA temp
0CE4C 99 00 03                      STA ppu_buffer,y
0CE4F C8                            INY
0CE50 A5 01                         LDA temp+1
0CE52 99 00 03                      STA ppu_buffer,y
0CE55 C8                            INY
0CE56                               
0CE56 8A                            TXA
0CE57 29 0F                         AND #%00001111
0CE59 F0 11                         BEQ +drawRandomTile
0CE5B                           
0CE5B 8A                            TXA
0CE5C 29 F0                         AND #%11110000
0CE5E F0 0C                         BEQ +drawRandomTile
0CE60                           
0CE60 BD EF 03                      LDA tile_type-17,x
0CE63 29 01                         AND #%00000001
0CE65 F0 05                         BEQ +drawRandomTile  
0CE67                           
0CE67                               ;; Draw a null tile
0CE67 A9 00                         LDA #$00
0CE69 4C 74 CE                      JMP +addToPPUBuffer
0CE6C                               
0CE6C                           +drawRandomTile:
0CE6C                               ;; Draw a random tile
0CE6C 20 25 C5                      JSR sub_GetRandomNumber
0CE6F 29 07                         AND #%00000111
0CE71 18                            CLC
0CE72 69 68                         ADC #$68
0CE74                               
0CE74                               ;; Add tile to ppu buffer
0CE74                           +addToPPUBuffer:
0CE74 99 00 03                      STA ppu_buffer,y
0CE77 C8                            INY
0CE78                           
0CE78                               ;; TILE 2: If metatile above is solid, draw null,
0CE78                               ;; else draw random noise.
0CE78 E6 01                         INC temp+1
0CE7A A5 00                         LDA temp
0CE7C 99 00 03                      STA ppu_buffer,y
0CE7F C8                            INY
0CE80 A5 01                         LDA temp+1
0CE82 99 00 03                      STA ppu_buffer,y
0CE85 C8                            INY
0CE86                               
0CE86 8A                            TXA
0CE87 29 F0                         AND #%11110000
0CE89 F0 0C                         BEQ +drawRandomTile
0CE8B                               
0CE8B BD F0 03                      LDA tile_type-16,x
0CE8E 29 01                         AND #%00000001
0CE90 F0 05                         BEQ +drawRandomTile
0CE92                               
0CE92 A9 00                         LDA #%00
0CE94 4C 9F CE                      JMP +addToPPUBuffer
0CE97                           
0CE97                           +drawRandomTile:
0CE97 20 25 C5                      JSR sub_GetRandomNumber
0CE9A 29 07                         AND #%00000111
0CE9C 18                            CLC
0CE9D 69 68                         ADC #$68
0CE9F                           
0CE9F                           +addToPPUBuffer:
0CE9F 99 00 03                      STA ppu_buffer,y
0CEA2 C8                            INY
0CEA3                               
0CEA3                               ;; TILE 3 - If metatile left is solid, draw null,
0CEA3                               ;; else draw random noise.
0CEA3 A5 01                         LDA temp+1
0CEA5 18                            CLC
0CEA6 69 1F                         ADC #$1F
0CEA8 85 01                         STA temp+1
0CEAA A5 00                         LDA temp
0CEAC 69 00                         ADC #$00
0CEAE 85 00                         STA temp
0CEB0 99 00 03                      STA ppu_buffer,y
0CEB3 C8                            INY
0CEB4 A5 01                         LDA temp+1
0CEB6 99 00 03                      STA ppu_buffer,y
0CEB9 C8                            INY
0CEBA                               
0CEBA 8A                            TXA
0CEBB 29 0F                         AND #%00001111
0CEBD F0 0C                         BEQ +drawRandomTile
0CEBF                               
0CEBF BD FF 03                      LDA tile_type-1,x
0CEC2 29 01                         AND #%00000001
0CEC4 F0 05                         BEQ +drawRandomTile
0CEC6                               
0CEC6 A9 00                         LDA #%00
0CEC8 4C D3 CE                      JMP +addToPPUBuffer
0CECB                           
0CECB                           +drawRandomTile:
0CECB 20 25 C5                      JSR sub_GetRandomNumber
0CECE 29 07                         AND #%00000111
0CED0 18                            CLC
0CED1 69 68                         ADC #$68
0CED3                               
0CED3                           +addToPPUBuffer:
0CED3 99 00 03                      STA ppu_buffer,y
0CED6 C8                            INY
0CED7                               
0CED7                               ;; TILE 4 - Always random noise
0CED7 E6 01                         INC temp+1
0CED9 A5 00                         LDA temp
0CEDB 99 00 03                      STA ppu_buffer,y
0CEDE C8                            INY
0CEDF A5 01                         LDA temp+1
0CEE1 99 00 03                      STA ppu_buffer,y
0CEE4 C8                            INY
0CEE5 20 25 C5                      JSR sub_GetRandomNumber
0CEE8 29 07                         AND #%00000111
0CEEA 18                            CLC
0CEEB 69 68                         ADC #$68
0CEED 99 00 03                      STA ppu_buffer,y
0CEF0 C8                            INY
0CEF1                           
0CEF1                               ;; TILE 5 - If tile on the right is solid, skip,
0CEF1                               ;; else draw random noise tile
0CEF1 E6 01                         INC temp+1
0CEF3                               
0CEF3 8A                            TXA
0CEF4 29 0F                         AND #%00001111
0CEF6 C9 0D                         CMP #$0D
0CEF8 F0 1F                         BEQ +skipTile
0CEFA                               
0CEFA BD 01 04                      LDA tile_type+1,x
0CEFD 29 01                         AND #%00000001
0CEFF D0 18                         BNE +skipTile
0CF01 A5 00                             LDA temp
0CF03 99 00 03                          STA ppu_buffer,y
0CF06 C8                                INY
0CF07 A5 01                             LDA temp+1
0CF09 99 00 03                          STA ppu_buffer,y
0CF0C C8                                INY
0CF0D 20 25 C5                          JSR sub_GetRandomNumber
0CF10 29 07                             AND #%00000111
0CF12 18                                CLC
0CF13 69 68                             ADC #$68
0CF15 99 00 03                          STA ppu_buffer,y
0CF18 C8                                INY    
0CF19                               +skipTile:
0CF19                           
0CF19                               ;; TILE 6 - If tile on bottom is solid, skip,
0CF19                               ;; else draw random noise
0CF19 A5 01                         LDA temp+1
0CF1B 18                            CLC
0CF1C 69 1F                         ADC #$1F
0CF1E 85 01                         STA temp+1
0CF20 A5 00                         LDA temp
0CF22 69 00                         ADC #$00
0CF24 85 00                         STA temp
0CF26                           
0CF26 8A                            TXA
0CF27 29 F0                         AND #%11110000
0CF29 C9 90                         CMP #$90
0CF2B F0 1F                         BEQ +skipTile
0CF2D                           
0CF2D BD 10 04                      LDA tile_type+16,x
0CF30 29 01                         AND #%00000001
0CF32 D0 18                         BNE +skipTile
0CF34 A5 00                             LDA temp
0CF36 99 00 03                          STA ppu_buffer,y
0CF39 C8                                INY
0CF3A A5 01                             LDA temp+1
0CF3C 99 00 03                          STA ppu_buffer,y
0CF3F C8                                INY
0CF40 20 25 C5                          JSR sub_GetRandomNumber
0CF43 29 07                             AND #%00000111
0CF45 18                                CLC
0CF46 69 68                             ADC #$68
0CF48 99 00 03                          STA ppu_buffer,y
0CF4B C8                                INY    
0CF4C                               +skipTile:
0CF4C                               
0CF4C                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CF4C                               ;; else draw random noise
0CF4C E6 01                         INC temp+1
0CF4E                           
0CF4E 8A                            TXA
0CF4F 29 F0                         AND #%11110000
0CF51 C9 90                         CMP #$90
0CF53 F0 26                         BEQ +skipTile
0CF55                               
0CF55 8A                            TXA
0CF56 29 0F                         AND #%00001111
0CF58 C9 0D                         CMP #$0D
0CF5A F0 1F                         BEQ +skipTile
0CF5C                               
0CF5C BD 11 04                      LDA tile_type+17,x
0CF5F 29 01                         AND #%00000001
0CF61 D0 18                         BNE +skipTile
0CF63 A5 00                             LDA temp
0CF65 99 00 03                          STA ppu_buffer,y
0CF68 C8                                INY
0CF69 A5 01                             LDA temp+1
0CF6B 99 00 03                          STA ppu_buffer,y
0CF6E C8                                INY
0CF6F 20 25 C5                          JSR sub_GetRandomNumber
0CF72 29 07                             AND #%00000111
0CF74 18                                CLC
0CF75 69 68                             ADC #$68
0CF77 99 00 03                          STA ppu_buffer,y
0CF7A C8                                INY    
0CF7B                               +skipTile:   
0CF7B                           
0CF7B                           
0CF7B                               ;; Update attribute table accordingly through ppu buffer
0CF7B 20 BA CF                      JSR sub_SetTileAttributeAddress
0CF7E                               
0CF7E 8A                            TXA
0CF7F 29 10                         AND #%00010000
0CF81 F0 05                         BEQ +
0CF83 A9 F0                             LDA #%11110000
0CF85 4C 8A CF                          JMP ++
0CF88                               +
0CF88 A9 0F                         LDA #%00001111
0CF8A                               ++
0CF8A 85 02                         STA temp+2
0CF8C                               
0CF8C 8A                            TXA
0CF8D 48                            PHA
0CF8E 29 01                         AND #%00000001
0CF90 F0 07                         BEQ +
0CF92 A5 02                             LDA temp+2
0CF94 09 CC                             ORA #%11001100
0CF96 4C 9D CF                          JMP ++
0CF99                               +
0CF99 A5 02                         LDA temp+2
0CF9B 09 33                         ORA #%00110011
0CF9D                               ++
0CF9D 85 02                         STA temp+2
0CF9F                               
0CF9F A5 00                         LDA temp
0CFA1 38                            SEC
0CFA2 E9 C0                         SBC #$C0
0CFA4 AA                            TAX
0CFA5 BD A0 04                      LDA tile_attributes,x
0CFA8 25 02                         AND temp+2
0CFAA 9D A0 04                      STA tile_attributes,x
0CFAD 99 00 03                      STA ppu_buffer,y
0CFB0 C8                            INY
0CFB1 68                            PLA
0CFB2 AA                            TAX
0CFB3                           
0CFB3                               ;; Tell PPU to update tiles and attributes next frame
0CFB3 84 3A                         STY ppu_buffer_pointer
0CFB5 A9 01                         LDA #$01
0CFB7 85 39                         STA ppu_buffer_update
0CFB9                            
0CFB9                               ;; We're done - return
0CFB9 60                            RTS0CFBA                           .include "game/subroutine/SetTileAttributeAddress.asm"
0CFBA                           
0CFBA                           sub_SetTileAttributeAddress:
0CFBA A9 23                         LDA #$23
0CFBC 99 00 03                      STA ppu_buffer,y
0CFBF C8                            INY
0CFC0                               
0CFC0 8A                            TXA
0CFC1 29 F0                         AND #%11110000
0CFC3 4A                            LSR
0CFC4 4A                            LSR
0CFC5 4A                            LSR
0CFC6 4A                            LSR
0CFC7 18                            CLC
0CFC8 69 01                         ADC #1
0CFCA 4A                            LSR
0CFCB 0A                            ASL
0CFCC 0A                            ASL
0CFCD 0A                            ASL
0CFCE 18                            CLC
0CFCF 69 C8                         ADC #$C8
0CFD1 85 00                         STA temp
0CFD3 8A                            TXA
0CFD4 29 0F                         AND #%00001111
0CFD6 18                            CLC
0CFD7 69 01                         ADC #$01
0CFD9 4A                            LSR
0CFDA 18                            CLC
0CFDB 65 00                         ADC temp
0CFDD 85 00                         STA temp
0CFDF 99 00 03                      STA ppu_buffer,y
0CFE2 C8                            INY
0CFE3                                  
0CFE3 60                            RTS
0CFE4                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CFE4                           sub_WriteByteToPPUBuffer:
0CFE4                           
0CFE4                               ;; Prevent updating until full 3-byte buffer is filled,
0CFE4                               ;; so that graphics won't glitch out if NMI happens during
0CFE4                               ;; updating the buffer
0CFE4 A9 00                         LDA #$00
0CFE6 85 39                         STA ppu_buffer_update
0CFE8                           
0CFE8                               ;; Check if buffer full; if so, wait a frame and force update
0CFE8 A4 3A                         LDY ppu_buffer_pointer
0CFEA C0 60                         CPY #$60
0CFEC D0 05                         BNE +
0CFEE E6 39                             INC ppu_buffer_update
0CFF0 20 50 C5                          JSR sub_WaitForVBlank
0CFF3                               +
0CFF3                           
0CFF3                               ;; Add ppu_addr high byte to buffer
0CFF3 A5 00                         LDA temp
0CFF5 99 00 03                      STA ppu_buffer,y
0CFF8                           
0CFF8                               ;; Add ppu_addr low byte to buffer
0CFF8 C8                            INY
0CFF9 A5 01                         LDA temp+1
0CFFB 99 00 03                      STA ppu_buffer,y
0CFFE                           
0CFFE                               ;; Add ppu_data to buffer
0CFFE C8                            INY
0CFFF A5 02                         LDA temp+2
0D001 99 00 03                      STA ppu_buffer,y
0D004                           
0D004                               ;; Update buffer pointer
0D004 C8                            INY
0D005 84 3A                         STY ppu_buffer_pointer
0D007                           
0D007                               ;; Tell NMI to update next round
0D007 E6 39                         INC ppu_buffer_update
0D009                           
0D009                               ;; Return
0D009 60                            RTS0D00A                           
0D00A                           ;; LUTs
0D00A                           .include "game/include/tables.asm"
0D00A                           
0D00A                           ;; Initial screen palette
0D00A                           tbl_IntroScreenPalette:
0D00A 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D00E 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D012 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D016 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D01A                           
0D01A 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D01E 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D022 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D026 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D02A                           
0D02A                           
0D02A                           ;; Intro: mapping logo index to chr tile
0D02A                           tbl_IntroScreenLogoChr:
0D02A 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D032                           
0D032                           
0D032                           ;; Intro screen data
0D032                           tbl_IntroScreenData:
0D032                           
0D032                               ;; Set PPU address $20AC and draw
0D032 60 AC                         .db #$60, #$AC
0D034 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D03C                           
0D03C                               ;; Set PPU address $20CF and draw
0D03C 60 CF                         .db #$60, #$CF
0D03E 01 02                         .db #_0, #_1
0D040                               
0D040                               ;; Set PPU address $2122 and draw
0D040 61 22                         .db #$61, #$22
0D042 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D049 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D04F 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D057 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D05C                               
0D05C                               ;; Set PPU address $2147 and draw
0D05C 61 47                         .db #$61, #$47
0D05E 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D065 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D069 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D06F 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D075                               
0D075                               ;; Set PPU address $218B and draw
0D075 61 8B                         .db #$61, #$8B
0D077 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D07D 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D082                               
0D082                               ;; Set PPU address $21E6 and draw
0D082 61 E6                         .db #$61, #$E6
0D084 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D08C 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D090 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D097                               
0D097                               ;; Set PPU address $222D and draw
0D097 62 2D                         .db #$62, #$2D
0D099 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D09F                               
0D09F                               ;; Set PPU address $2281
0D09F 62 81                         .db #$62, #$81
0D0A1                               
0D0A1                               ;; Draw the Crillion logo
0D0A1 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D0A5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0A9 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D0AD E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D0B1                               
0D0B1 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D0B5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0B9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0BD D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0C1                               
0D0C1 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D0C5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0C9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0CD D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0D1                           
0D0D1 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D0D5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0D9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0DD D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0E1                               
0D0E1 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D0E5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0E9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0ED D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0F1                           
0D0F1 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D0F5 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D0F9 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D0FD F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D100                           
0D100                               ;; End of intro
0D100 3F                            .db #$3F
0D101                           
0D101                           
0D101                           ;; Animation frames table
0D101                           .include "game/include/table/animation_frames.asm"
0D101                           ;; CHR tile-id's per slide of explosion
0D101                           explosion_slide0:
0D101 00 00 00                      .db #$00, #$00, #$00
0D104 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D107 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D10A                           
0D10A                           explosion_slide1:
0D10A 00 00 00                      .db #$00, #$00, #$00
0D10D 29 2A 2B                      .db #$29, #$2A, #$2B
0D110 39 3A 3B                      .db #$39, #$3A, #$3B
0D113                           
0D113                           explosion_slide2:
0D113 16 00 00                      .db #$16, #$00, #$00
0D116 26 27 28                      .db #$26, #$27, #$28
0D119 36 37 38                      .db #$36, #$37, #$38
0D11C                           
0D11C                           explosion_slide3:
0D11C 00 14 15                      .db #$00, #$14, #$15
0D11F 23 24 25                      .db #$23, #$24, #$25
0D122 33 34 35                      .db #$33, #$34, #$35
0D125                           
0D125                           explosion_slide4:
0D125 10 11 12                      .db #$10, #$11, #$12
0D128 20 21 22                      .db #$20, #$21, #$22
0D12B 30 31 32                      .db #$30, #$31, #$32
0D12E                           
0D12E                           ;; High and low bytes of animation slides
0D12E                           explosion_anim_hi:
0D12E D1                            .db >#explosion_slide0
0D12F D1                            .db >#explosion_slide1
0D130 D1                            .db >#explosion_slide2
0D131 D1                            .db >#explosion_slide3
0D132 D1                            .db >#explosion_slide4
0D133 D1                            .db >#explosion_slide4
0D134 D1                            .db >#explosion_slide3
0D135 D1                            .db >#explosion_slide2
0D136 D1                            .db >#explosion_slide1
0D137 D1                            .db >#explosion_slide0
0D138                           
0D138                           explosion_anim_lo:
0D138 01                            .db <#explosion_slide0
0D139 0A                            .db <#explosion_slide1
0D13A 13                            .db <#explosion_slide2
0D13B 1C                            .db <#explosion_slide3
0D13C 25                            .db <#explosion_slide4
0D13D 25                            .db <#explosion_slide4
0D13E 1C                            .db <#explosion_slide3
0D13F 13                            .db <#explosion_slide2
0D140 0A                            .db <#explosion_slide1
0D141 01                            .db <#explosion_slide0
0D142                           
0D142                           
0D142                           
0D142                           ;; Ball palette color table (CBRYGM)
0D142                           tbl_BallColorDark:
0D142 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D148                            
0D148                           tbl_BallColorLight:
0D148 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D14E                           
0D14E                               
0D14E                           ;; Screen mode drawing routine addresses
0D14E                           tbl_LoadScreenHi:
0D14E CD C9 CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D151                           
0D151                           tbl_LoadScreenLo:
0D151 B4 F8 43                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D154                           
0D154                           
0D154                           ;; Level data
0D154                           .include "game/include/table/level_data.asm"
0D154                           lvl_layout_01:
0D154 61 21                         .db #$61, #%00100001
0D156 52 61                         .db #$52, #%01100001
0D158 43 65                         .db #$43, #%01100101
0D15A 83 05                         .db #$83, #%00000101
0D15C 93 15                         .db #$93, #%00010101
0D15E 34 7A                         .db #$34, #%01111010
0D160 74 7A                         .db #$74, #%01111010
0D162 35 7A                         .db #$35, #%01111010
0D164 75 7A                         .db #$75, #%01111010
0D166 46 65                         .db #$46, #%01100101
0D168 86 25                         .db #$86, #%00100101
0D16A 57 61                         .db #$57, #%01100001
0D16C 68 21                         .db #$68, #%00100001
0D16E FF                            .db #LEVEL_END
0D16F                           
0D16F                           lvl_layout_02:
0D16F C0 0A                         .db #$C0, #%00001010
0D171 11 15                         .db #$11, #%00010101
0D173 21 62                         .db #$21, #%01100010
0D175 61 62                         .db #$61, #%01100010
0D177 A1 42                         .db #$A1, #%01000010
0D179 12 67                         .db #$12, #%01100111
0D17B 52 67                         .db #$52, #%01100111
0D17D 92 67                         .db #$92, #%01100111
0D17F C3 0D                         .db #$C3, #%00001101
0D181 14 11                         .db #$14, #%00010001
0D183 24 65                         .db #$24, #%01100101
0D185 64 65                         .db #$64, #%01100101
0D187 A4 45                         .db #$A4, #%01000101
0D189 15 67                         .db #$15, #%01100111
0D18B 55 67                         .db #$55, #%01100111
0D18D 95 67                         .db #$95, #%01100111
0D18F 17 12                         .db #$17, #%00010010
0D191 27 61                         .db #$27, #%01100001
0D193 67 61                         .db #$67, #%01100001
0D195 A7 41                         .db #$A7, #%01000001
0D197 38 7A                         .db #$38, #%01111010
0D199 98 5A                         .db #$98, #%01011010
0D19B 18 27                         .db #$18, #%00100111
0D19D 48 27                         .db #$48, #%00100111
0D19F 78 27                         .db #$78, #%00100111
0D1A1 C8 07                         .db #$C8, #%00000111
0D1A3 FF                            .db #LEVEL_END
0D1A4                           
0D1A4                           lvl_layout_03:
0D1A4 00 7A                         .db #$00, #%01111010
0D1A6 40 7A                         .db #$40, #%01111010
0D1A8 80 7A                         .db #$80, #%01111010
0D1AA C0 1A                         .db #$C0, #%00011010
0D1AC 10 A1                         .db #$10, #%10100001
0D1AE 13 E1                         .db #$13, #%11100001
0D1B0 17 C1                         .db #$17, #%11000001
0D1B2 30 C1                         .db #$30, #%11000001
0D1B4 34 C1                         .db #$34, #%11000001
0D1B6 38 A1                         .db #$38, #%10100001
0D1B8 50 E1                         .db #$50, #%11100001
0D1BA 55 81                         .db #$55, #%10000001
0D1BC 57 C1                         .db #$57, #%11000001
0D1BE 70 C1                         .db #$70, #%11000001
0D1C0 73 A1                         .db #$73, #%10100001
0D1C2 76 E1                         .db #$76, #%11100001
0D1C4 90 E1                         .db #$90, #%11100001
0D1C6 95 81                         .db #$95, #%10000001
0D1C8 97 C1                         .db #$97, #%11000001
0D1CA B0 C1                         .db #$B0, #%11000001
0D1CC B4 C1                         .db #$B4, #%11000001
0D1CE B8 A1                         .db #$B8, #%10100001
0D1D0 D0 A1                         .db #$D0, #%10100001
0D1D2 D3 E1                         .db #$D3, #%11100001
0D1D4 D7 C1                         .db #$D7, #%11000001
0D1D6 FF                            .db #LEVEL_END
0D1D7                           
0D1D7                           lvl_layout_04:
0D1D7 00 4C                         .db #$00, #%01001100
0D1D9 40 6C                         .db #$40, #%01101100
0D1DB 80 4C                         .db #$80, #%01001100
0D1DD 81 AC                         .db #$81, #%10101100
0D1DF C1 2C                         .db #$C1, #%00101100
0D1E1 02 6C                         .db #$02, #%01101100
0D1E3 42 CC                         .db #$42, #%11001100
0D1E5 62 EC                         .db #$62, #%11101100
0D1E7 A2 CC                         .db #$A2, #%11001100
0D1E9 C3 CC                         .db #$C3, #%11001100
0D1EB 04 4C                         .db #$04, #%01001100
0D1ED 84 2C                         .db #$84, #%00101100
0D1EF 25 AC                         .db #$25, #%10101100
0D1F1 85 AC                         .db #$85, #%10101100
0D1F3 06 AC                         .db #$06, #%10101100
0D1F5 36 CC                         .db #$36, #%11001100
0D1F7 56 CC                         .db #$56, #%11001100
0D1F9 66 EC                         .db #$66, #%11101100
0D1FB 96 6C                         .db #$96, #%01101100
0D1FD C7 AC                         .db #$C7, #%10101100
0D1FF 08 2C                         .db #$08, #%00101100
0D201 78 6C                         .db #$78, #%01101100
0D203 D8 0C                         .db #$D8, #%00001100
0D205 30 A1                         .db #$30, #%10100001
0D207 B0 21                         .db #$B0, #%00100001
0D209 01 41                         .db #$01, #%01000001
0D20B 41 61                         .db #$41, #%01100001
0D20D 91 A1                         .db #$91, #%10100001
0D20F A1 21                         .db #$A1, #%00100001
0D211 52 C1                         .db #$52, #%11000001
0D213 72 E1                         .db #$72, #%11100001
0D215 B2 C1                         .db #$B2, #%11000001
0D217 C2 21                         .db #$C2, #%00100001
0D219 03 41                         .db #$03, #%01000001
0D21B 33 C1                         .db #$33, #%11000001
0D21D 83 21                         .db #$83, #%00100001
0D21F D3 E1                         .db #$D3, #%11100001
0D221 05 21                         .db #$05, #%00100001
0D223 45 E1                         .db #$45, #%11100001
0D225 A5 21                         .db #$A5, #%00100001
0D227 16 A1                         .db #$16, #%10100001
0D229 76 A1                         .db #$76, #%10100001
0D22B 27 A1                         .db #$27, #%10100001
0D22D 57 21                         .db #$57, #%00100001
0D22F 87 41                         .db #$87, #%01000001
0D231 B7 A1                         .db #$B7, #%10100001
0D233 19 21                         .db #$19, #%00100001
0D235 39 41                         .db #$39, #%01000001
0D237 89 41                         .db #$89, #%01000001
0D239 C9 21                         .db #$C9, #%00100001
0D23B D0 1A                         .db #$D0, #%00011010
0D23D 55 1A                         .db #$55, #%00011010
0D23F 95 1A                         .db #$95, #%00011010
0D241 D7 1A                         .db #$D7, #%00011010
0D243 09 1A                         .db #$09, #%00011010
0D245 79 1A                         .db #$79, #%00011010
0D247 FF                            .db #LEVEL_END
0D248                           
0D248                           lvl_layout_05:
0D248 40 0A                         .db #$40, #%00001010
0D24A 70 1A                         .db #$70, #%00011010
0D24C B0 42                         .db #$B0, #%01000010
0D24E 41 A7                         .db #$41, #%10100111
0D250 B1 22                         .db #$B1, #%00100010
0D252 D1 15                         .db #$D1, #%00010101
0D254 22 0A                         .db #$22, #%00001010
0D256 52 05                         .db #$52, #%00000101
0D258 B2 42                         .db #$B2, #%01000010
0D25A 03 27                         .db #$03, #%00100111
0D25C 33 67                         .db #$33, #%01100111
0D25E 73 67                         .db #$73, #%01100111
0D260 B3 47                         .db #$B3, #%01000111
0D262 05 E5                         .db #$05, #%11100101
0D264 25 A5                         .db #$25, #%10100101
0D266 35 25                         .db #$35, #%00100101
0D268 65 45                         .db #$65, #%01000101
0D26A A5 45                         .db #$A5, #%01000101
0D26C 46 E5                         .db #$46, #%11100101
0D26E 66 E5                         .db #$66, #%11100101
0D270 86 E5                         .db #$86, #%11100101
0D272 A6 E2                         .db #$A6, #%11100010
0D274 C6 E5                         .db #$C6, #%11100101
0D276 27 25                         .db #$27, #%00100101
0D278 77 05                         .db #$77, #%00000101
0D27A B7 02                         .db #$B7, #%00000010
0D27C 09 05                         .db #$09, #%00000101
0D27E 79 05                         .db #$79, #%00000101
0D280 B9 02                         .db #$B9, #%00000010
0D282 FF                            .db #LEVEL_END
0D283                           
0D283                           lvl_layout_06:
0D283 00 03                         .db #$00, #%00000011
0D285 20 03                         .db #$20, #%00000011
0D287 40 03                         .db #$40, #%00000011
0D289 A0 03                         .db #$A0, #%00000011
0D28B C0 03                         .db #$C0, #%00000011
0D28D 11 03                         .db #$11, #%00000011
0D28F 31 03                         .db #$31, #%00000011
0D291 51 03                         .db #$51, #%00000011
0D293 91 03                         .db #$91, #%00000011
0D295 B1 03                         .db #$B1, #%00000011
0D297 D1 03                         .db #$D1, #%00000011
0D299 02 03                         .db #$02, #%00000011
0D29B 22 03                         .db #$22, #%00000011
0D29D 42 03                         .db #$42, #%00000011
0D29F A2 03                         .db #$A2, #%00000011
0D2A1 C2 03                         .db #$C2, #%00000011
0D2A3 13 03                         .db #$13, #%00000011
0D2A5 33 03                         .db #$33, #%00000011
0D2A7 53 03                         .db #$53, #%00000011
0D2A9 93 03                         .db #$93, #%00000011
0D2AB B3 03                         .db #$B3, #%00000011
0D2AD D3 03                         .db #$D3, #%00000011
0D2AF 04 03                         .db #$04, #%00000011
0D2B1 24 03                         .db #$24, #%00000011
0D2B3 44 03                         .db #$44, #%00000011
0D2B5 A4 03                         .db #$A4, #%00000011
0D2B7 C4 03                         .db #$C4, #%00000011
0D2B9 15 03                         .db #$15, #%00000011
0D2BB 35 03                         .db #$35, #%00000011
0D2BD 55 03                         .db #$55, #%00000011
0D2BF 95 03                         .db #$95, #%00000011
0D2C1 B5 03                         .db #$B5, #%00000011
0D2C3 D5 03                         .db #$D5, #%00000011
0D2C5 06 03                         .db #$06, #%00000011
0D2C7 26 03                         .db #$26, #%00000011
0D2C9 46 03                         .db #$46, #%00000011
0D2CB A6 03                         .db #$A6, #%00000011
0D2CD C6 03                         .db #$C6, #%00000011
0D2CF 17 03                         .db #$17, #%00000011
0D2D1 37 03                         .db #$37, #%00000011
0D2D3 57 03                         .db #$57, #%00000011
0D2D5 97 03                         .db #$97, #%00000011
0D2D7 B7 03                         .db #$B7, #%00000011
0D2D9 D7 03                         .db #$D7, #%00000011
0D2DB 08 03                         .db #$08, #%00000011
0D2DD 28 03                         .db #$28, #%00000011
0D2DF 48 03                         .db #$48, #%00000011
0D2E1 A8 03                         .db #$A8, #%00000011
0D2E3 C8 03                         .db #$C8, #%00000011
0D2E5 19 03                         .db #$19, #%00000011
0D2E7 39 03                         .db #$39, #%00000011
0D2E9 59 03                         .db #$59, #%00000011
0D2EB 99 03                         .db #$99, #%00000011
0D2ED B9 03                         .db #$B9, #%00000011
0D2EF D9 03                         .db #$D9, #%00000011
0D2F1 60 4B                         .db #$60, #%01001011
0D2F3 71 CB                         .db #$71, #%11001011
0D2F5 62 4B                         .db #$62, #%01001011
0D2F7 64 4B                         .db #$64, #%01001011
0D2F9 75 CB                         .db #$75, #%11001011
0D2FB 66 4B                         .db #$66, #%01001011
0D2FD 68 4B                         .db #$68, #%01001011
0D2FF 79 0B                         .db #$79, #%00001011
0D301 70 03                         .db #$70, #%00000011
0D303 72 03                         .db #$72, #%00000011
0D305 74 03                         .db #$74, #%00000011
0D307 76 03                         .db #$76, #%00000011
0D309 78 03                         .db #$78, #%00000011
0D30B FF                            .db #LEVEL_END
0D30C                           
0D30C                           lvl_layout_07:
0D30C 00 11                         .db #$00, #%00010001
0D30E 01 FA                         .db #$01, #%11111010
0D310 12 BA                         .db #$12, #%10111010
0D312 23 DA                         .db #$23, #%11011010
0D314 34 FA                         .db #$34, #%11111010
0D316 05 DA                         .db #$05, #%11011010
0D318 15 FA                         .db #$15, #%11111010
0D31A 45 BA                         .db #$45, #%10111010
0D31C 56 DA                         .db #$56, #%11011010
0D31E 27 BA                         .db #$27, #%10111010
0D320 67 DA                         .db #$67, #%11011010
0D322 38 3A                         .db #$38, #%00111010
0D324 78 BA                         .db #$78, #%10111010
0D326 09 3A                         .db #$09, #%00111010
0D328 39 3A                         .db #$39, #%00111010
0D32A 89 1A                         .db #$89, #%00011010
0D32C B0 01                         .db #$B0, #%00000001
0D32E D0 01                         .db #$D0, #%00000001
0D330 A1 01                         .db #$A1, #%00000001
0D332 C1 11                         .db #$C1, #%00010001
0D334 B2 01                         .db #$B2, #%00000001
0D336 D2 01                         .db #$D2, #%00000001
0D338 A3 01                         .db #$A3, #%00000001
0D33A C3 01                         .db #$C3, #%00000001
0D33C B4 01                         .db #$B4, #%00000001
0D33E D4 01                         .db #$D4, #%00000001
0D340 A5 01                         .db #$A5, #%00000001
0D342 C5 01                         .db #$C5, #%00000001
0D344 B6 01                         .db #$B6, #%00000001
0D346 D6 01                         .db #$D6, #%00000001
0D348 A7 01                         .db #$A7, #%00000001
0D34A C7 01                         .db #$C7, #%00000001
0D34C FF                            .db #LEVEL_END
0D34D                           
0D34D                           lvl_layout_08:
0D34D 40 B5                         .db #$40, #%10110101
0D34F 31 0D                         .db #$31, #%00001101
0D351 61 10                         .db #$61, #%00010000
0D353 42 C7                         .db #$42, #%11000111
0D355 52 67                         .db #$52, #%01100111
0D357 63 C7                         .db #$63, #%11000111
0D359 83 E7                         .db #$83, #%11100111
0D35B 05 07                         .db #$05, #%00000111
0D35D 15 3A                         .db #$15, #%00111010
0D35F 07 63                         .db #$07, #%01100011
0D361 27 13                         .db #$27, #%00010011
0D363 38 A5                         .db #$38, #%10100101
0D365 09 14                         .db #$09, #%00010100
0D367 19 05                         .db #$19, #%00000101
0D369 D0 E0                         .db #$D0, #%11100000
0D36B C2 A0                         .db #$C2, #%10100000
0D36D B3 E0                         .db #$B3, #%11100000
0D36F D5 E0                         .db #$D5, #%11100000
0D371 C6 E0                         .db #$C6, #%11100000
0D373 B0 C4                         .db #$B0, #%11000100
0D375 C0 A4                         .db #$C0, #%10100100
0D377 D1 A4                         .db #$D1, #%10100100
0D379 C4 24                         .db #$C4, #%00100100
0D37B C5 04                         .db #$C5, #%00000100
0D37D B7 44                         .db #$B7, #%01000100
0D37F B8 A4                         .db #$B8, #%10100100
0D381 D9 05                         .db #$D9, #%00000101
0D383 FF                            .db #LEVEL_END
0D384                           
0D384                           lvl_layout_09:
0D384 81 04                         .db #$81, #%00000100
0D386 D1 04                         .db #$D1, #%00000100
0D388 32 C4                         .db #$32, #%11000100
0D38A A2 C4                         .db #$A2, #%11000100
0D38C C2 24                         .db #$C2, #%00100100
0D38E 13 24                         .db #$13, #%00100100
0D390 53 04                         .db #$53, #%00000100
0D392 C3 27                         .db #$C3, #%00100111
0D394 15 6C                         .db #$15, #%01101100
0D396 55 6C                         .db #$55, #%01101100
0D398 95 6C                         .db #$95, #%01101100
0D39A D5 0C                         .db #$D5, #%00001100
0D39C 27 C7                         .db #$27, #%11000111
0D39E 47 C7                         .db #$47, #%11000111
0D3A0 67 C7                         .db #$67, #%11000111
0D3A2 87 C7                         .db #$87, #%11000111
0D3A4 A7 C7                         .db #$A7, #%11000111
0D3A6 C7 C7                         .db #$C7, #%11000111
0D3A8 08 13                         .db #$08, #%00010011
0D3AA 28 15                         .db #$28, #%00010101
0D3AC 48 12                         .db #$48, #%00010010
0D3AE 68 15                         .db #$68, #%00010101
0D3B0 88 11                         .db #$88, #%00010001
0D3B2 A8 10                         .db #$A8, #%00010000
0D3B4 C8 14                         .db #$C8, #%00010100
0D3B6 09 07                         .db #$09, #%00000111
0D3B8 19 03                         .db #$19, #%00000011
0D3BA 39 05                         .db #$39, #%00000101
0D3BC 59 02                         .db #$59, #%00000010
0D3BE 79 05                         .db #$79, #%00000101
0D3C0 99 01                         .db #$99, #%00000001
0D3C2 B9 00                         .db #$B9, #%00000000
0D3C4 D9 04                         .db #$D9, #%00000100
0D3C6 FF                            .db #LEVEL_END
0D3C7                           
0D3C7                           lvl_layout_10:
0D3C7 00 02                         .db #$00, #%00000010
0D3C9 10 C9                         .db #$10, #%11001001
0D3CB 50 C9                         .db #$50, #%11001001
0D3CD 90 C9                         .db #$90, #%11001001
0D3CF D0 C9                         .db #$D0, #%11001001
0D3D1 31 C9                         .db #$31, #%11001001
0D3D3 71 C9                         .db #$71, #%11001001
0D3D5 B1 C9                         .db #$B1, #%11001001
0D3D7 13 C9                         .db #$13, #%11001001
0D3D9 53 C9                         .db #$53, #%11001001
0D3DB 93 C9                         .db #$93, #%11001001
0D3DD D3 C9                         .db #$D3, #%11001001
0D3DF 34 C9                         .db #$34, #%11001001
0D3E1 74 C9                         .db #$74, #%11001001
0D3E3 B4 C9                         .db #$B4, #%11001001
0D3E5 16 C9                         .db #$16, #%11001001
0D3E7 56 C9                         .db #$56, #%11001001
0D3E9 96 C9                         .db #$96, #%11001001
0D3EB D6 C9                         .db #$D6, #%11001001
0D3ED 37 C9                         .db #$37, #%11001001
0D3EF 77 C9                         .db #$77, #%11001001
0D3F1 B7 C9                         .db #$B7, #%11001001
0D3F3 D8 12                         .db #$D8, #%00010010
0D3F5 FF                            .db #LEVEL_END
0D3F6                           
0D3F6                           lvl_layout_11:
0D3F6 00 65                         .db #$00, #%01100101
0D3F8 40 45                         .db #$40, #%01000101
0D3FA 50 A7                         .db #$50, #%10100111
0D3FC 80 05                         .db #$80, #%00000101
0D3FE 90 A7                         .db #$90, #%10100111
0D400 A0 65                         .db #$A0, #%01100101
0D402 01 43                         .db #$01, #%01000011
0D404 31 23                         .db #$31, #%00100011
0D406 61 A7                         .db #$61, #%10100111
0D408 81 A7                         .db #$81, #%10100111
0D40A A1 63                         .db #$A1, #%01100011
0D40C 02 44                         .db #$02, #%01000100
0D40E 32 44                         .db #$32, #%01000100
0D410 92 04                         .db #$92, #%00000100
0D412 A2 64                         .db #$A2, #%01100100
0D414 03 40                         .db #$03, #%01000000
0D416 33 40                         .db #$33, #%01000000
0D418 63 A1                         .db #$63, #%10100001
0D41A 83 A2                         .db #$83, #%10100010
0D41C 93 00                         .db #$93, #%00000000
0D41E A3 60                         .db #$A3, #%01100000
0D420 04 41                         .db #$04, #%01000001
0D422 34 41                         .db #$34, #%01000001
0D424 94 02                         .db #$94, #%00000010
0D426 A4 62                         .db #$A4, #%01100010
0D428 05 47                         .db #$05, #%01000111
0D42A 35 67                         .db #$35, #%01100111
0D42C 75 0A                         .db #$75, #%00001010
0D42E 85 47                         .db #$85, #%01000111
0D430 B5 47                         .db #$B5, #%01000111
0D432 06 E7                         .db #$06, #%11100111
0D434 16 5A                         .db #$16, #%01011010
0D436 26 11                         .db #$26, #%00010001
0D438 46 13                         .db #$46, #%00010011
0D43A 56 1A                         .db #$56, #%00011010
0D43C 66 14                         .db #$66, #%00010100
0D43E 86 10                         .db #$86, #%00010000
0D440 96 5A                         .db #$96, #%01011010
0D442 A6 12                         .db #$A6, #%00010010
0D444 C6 15                         .db #$C6, #%00010101
0D446 D6 E7                         .db #$D6, #%11100111
0D448 FF                            .db #LEVEL_END
0D449                           
0D449                           lvl_layout_12:
0D449 00 00                         .db #$00, #%00000000
0D44B 50 C0                         .db #$50, #%11000000
0D44D 80 00                         .db #$80, #%00000000
0D44F 61 00                         .db #$61, #%00000000
0D451 22 C0                         .db #$22, #%11000000
0D453 82 E0                         .db #$82, #%11100000
0D455 C2 E0                         .db #$C2, #%11100000
0D457 A3 20                         .db #$A3, #%00100000
0D459 C3 10                         .db #$C3, #%00010000
0D45B 04 00                         .db #$04, #%00000000
0D45D 54 20                         .db #$54, #%00100000
0D45F 15 0A                         .db #$15, #%00001010
0D461 25 C0                         .db #$25, #%11000000
0D463 55 E0                         .db #$55, #%11100000
0D465 86 20                         .db #$86, #%00100000
0D467 C6 E0                         .db #$C6, #%11100000
0D469 C7 A0                         .db #$C7, #%10100000
0D46B 88 00                         .db #$88, #%00000000
0D46D 59 00                         .db #$59, #%00000000
0D46F 89 20                         .db #$89, #%00100000
0D471 D9 1A                         .db #$D9, #%00011010
0D473 FF                            .db #LEVEL_END
0D474                           
0D474                           lvl_layout_13:
0D474 10 E0                         .db #$10, #%11100000
0D476 20 E0                         .db #$20, #%11100000
0D478 30 E0                         .db #$30, #%11100000
0D47A 40 40                         .db #$40, #%01000000
0D47C 80 60                         .db #$80, #%01100000
0D47E C0 E0                         .db #$C0, #%11100000
0D480 D0 E0                         .db #$D0, #%11100000
0D482 41 40                         .db #$41, #%01000000
0D484 71 60                         .db #$71, #%01100000
0D486 52 60                         .db #$52, #%01100000
0D488 A2 20                         .db #$A2, #%00100000
0D48A 43 60                         .db #$43, #%01100000
0D48C 83 60                         .db #$83, #%01100000
0D48E 14 74                         .db #$14, #%01110100
0D490 54 74                         .db #$54, #%01110100
0D492 94 74                         .db #$94, #%01110100
0D494 D4 14                         .db #$D4, #%00010100
0D496 15 0D                         .db #$15, #%00001101
0D498 55 0D                         .db #$55, #%00001101
0D49A 95 0D                         .db #$95, #%00001101
0D49C D5 0D                         .db #$D5, #%00001101
0D49E 26 0D                         .db #$26, #%00001101
0D4A0 46 0D                         .db #$46, #%00001101
0D4A2 66 0D                         .db #$66, #%00001101
0D4A4 86 0D                         .db #$86, #%00001101
0D4A6 A6 0D                         .db #$A6, #%00001101
0D4A8 C6 0D                         .db #$C6, #%00001101
0D4AA 07 10                         .db #$07, #%00010000
0D4AC 37 0D                         .db #$37, #%00001101
0D4AE 77 0D                         .db #$77, #%00001101
0D4B0 B7 0D                         .db #$B7, #%00001101
0D4B2 28 0D                         .db #$28, #%00001101
0D4B4 48 0D                         .db #$48, #%00001101
0D4B6 68 0D                         .db #$68, #%00001101
0D4B8 88 0D                         .db #$88, #%00001101
0D4BA A8 0D                         .db #$A8, #%00001101
0D4BC C8 0D                         .db #$C8, #%00001101
0D4BE 19 0D                         .db #$19, #%00001101
0D4C0 59 0D                         .db #$59, #%00001101
0D4C2 99 0D                         .db #$99, #%00001101
0D4C4 D9 0D                         .db #$D9, #%00001101
0D4C6 FF                            .db #LEVEL_END
0D4C7                           
0D4C7                           lvl_layout_14:
0D4C7 00 67                         .db #$00, #%01100111
0D4C9 40 67                         .db #$40, #%01100111
0D4CB 80 67                         .db #$80, #%01100111
0D4CD C0 27                         .db #$C0, #%00100111
0D4CF 01 27                         .db #$01, #%00100111
0D4D1 31 C7                         .db #$31, #%11000111
0D4D3 51 C7                         .db #$51, #%11000111
0D4D5 71 C7                         .db #$71, #%11000111
0D4D7 91 C7                         .db #$91, #%11000111
0D4D9 B1 C7                         .db #$B1, #%11000111
0D4DB D1 07                         .db #$D1, #%00000111
0D4DD 02 E7                         .db #$02, #%11100111
0D4DF 06 E7                         .db #$06, #%11100111
0D4E1 13 07                         .db #$13, #%00000111
0D4E3 D3 07                         .db #$D3, #%00000111
0D4E5 15 07                         .db #$15, #%00000111
0D4E7 35 07                         .db #$35, #%00000111
0D4E9 55 07                         .db #$55, #%00000111
0D4EB 75 07                         .db #$75, #%00000111
0D4ED 95 07                         .db #$95, #%00000111
0D4EF B5 07                         .db #$B5, #%00000111
0D4F1 D5 07                         .db #$D5, #%00000111
0D4F3 17 07                         .db #$17, #%00000111
0D4F5 37 C7                         .db #$37, #%11000111
0D4F7 57 C7                         .db #$57, #%11000111
0D4F9 77 C7                         .db #$77, #%11000111
0D4FB 97 C7                         .db #$97, #%11000111
0D4FD B7 C7                         .db #$B7, #%11000111
0D4FF D7 07                         .db #$D7, #%00000111
0D501 19 07                         .db #$19, #%00000111
0D503 D9 07                         .db #$D9, #%00000111
0D505 22 4C                         .db #$22, #%01001100
0D507 62 4C                         .db #$62, #%01001100
0D509 A2 4C                         .db #$A2, #%01001100
0D50B 24 0C                         .db #$24, #%00001100
0D50D 44 0C                         .db #$44, #%00001100
0D50F 64 0C                         .db #$64, #%00001100
0D511 84 0C                         .db #$84, #%00001100
0D513 A4 0C                         .db #$A4, #%00001100
0D515 C4 0C                         .db #$C4, #%00001100
0D517 26 0C                         .db #$26, #%00001100
0D519 46 0C                         .db #$46, #%00001100
0D51B 66 0C                         .db #$66, #%00001100
0D51D 86 0C                         .db #$86, #%00001100
0D51F A6 0C                         .db #$A6, #%00001100
0D521 C6 0C                         .db #$C6, #%00001100
0D523 28 4C                         .db #$28, #%01001100
0D525 68 4C                         .db #$68, #%01001100
0D527 A8 4C                         .db #$A8, #%01001100
0D529 32 04                         .db #$32, #%00000100
0D52B 52 04                         .db #$52, #%00000100
0D52D 72 04                         .db #$72, #%00000100
0D52F 92 04                         .db #$92, #%00000100
0D531 B2 04                         .db #$B2, #%00000100
0D533 38 04                         .db #$38, #%00000100
0D535 58 04                         .db #$58, #%00000100
0D537 78 04                         .db #$78, #%00000100
0D539 98 04                         .db #$98, #%00000100
0D53B B8 04                         .db #$B8, #%00000100
0D53D FF                            .db #LEVEL_END
0D53E                           
0D53E                           lvl_layout_15:
0D53E 00 7A                         .db #$00, #%01111010
0D540 40 7A                         .db #$40, #%01111010
0D542 80 7A                         .db #$80, #%01111010
0D544 C0 3A                         .db #$C0, #%00111010
0D546 41 04                         .db #$41, #%00000100
0D548 61 04                         .db #$61, #%00000100
0D54A 81 04                         .db #$81, #%00000100
0D54C A1 04                         .db #$A1, #%00000100
0D54E 05 E4                         .db #$05, #%11100100
0D550 15 64                         .db #$15, #%01100100
0D552 55 64                         .db #$55, #%01100100
0D554 95 64                         .db #$95, #%01100100
0D556 D5 E4                         .db #$D5, #%11100100
0D558 26 04                         .db #$26, #%00000100
0D55A 46 44                         .db #$46, #%01000100
0D55C 76 64                         .db #$76, #%01100100
0D55E C6 04                         .db #$C6, #%00000100
0D560 17 04                         .db #$17, #%00000100
0D562 37 64                         .db #$37, #%01100100
0D564 77 44                         .db #$77, #%01000100
0D566 B7 04                         .db #$B7, #%00000100
0D568 18 64                         .db #$18, #%01100100
0D56A 58 64                         .db #$58, #%01100100
0D56C 98 64                         .db #$98, #%01100100
0D56E FF                            .db #LEVEL_END
0D56F                           
0D56F                           lvl_layout_16:
0D56F 10 E1                         .db #$10, #%11100001
0D571 20 9A                         .db #$20, #%10011010
0D573 30 E1                         .db #$30, #%11100001
0D575 40 E1                         .db #$40, #%11100001
0D577 50 E1                         .db #$50, #%11100001
0D579 60 C1                         .db #$60, #%11000001
0D57B 70 E1                         .db #$70, #%11100001
0D57D 80 E1                         .db #$80, #%11100001
0D57F 90 E1                         .db #$90, #%11100001
0D581 A0 61                         .db #$A0, #%01100001
0D583 21 C1                         .db #$21, #%11000001
0D585 A1 1A                         .db #$A1, #%00011010
0D587 B1 41                         .db #$B1, #%01000001
0D589 A2 E1                         .db #$A2, #%11100001
0D58B B2 E1                         .db #$B2, #%11100001
0D58D C2 1A                         .db #$C2, #%00011010
0D58F D2 E1                         .db #$D2, #%11100001
0D591 63 1A                         .db #$63, #%00011010
0D593 C3 C1                         .db #$C3, #%11000001
0D595 14 61                         .db #$14, #%01100001
0D597 54 61                         .db #$54, #%01100001
0D599 94 C1                         .db #$94, #%11000001
0D59B 15 61                         .db #$15, #%01100001
0D59D 55 41                         .db #$55, #%01000001
0D59F 85 1A                         .db #$85, #%00011010
0D5A1 16 41                         .db #$16, #%01000001
0D5A3 46 1A                         .db #$46, #%00011010
0D5A5 56 61                         .db #$56, #%01100001
0D5A7 A6 61                         .db #$A6, #%01100001
0D5A9 17 67                         .db #$17, #%01100111
0D5AB 57 67                         .db #$57, #%01100111
0D5AD 97 67                         .db #$97, #%01100111
0D5AF D7 07                         .db #$D7, #%00000111
0D5B1 28 41                         .db #$28, #%01000001
0D5B3 58 61                         .db #$58, #%01100001
0D5B5 A8 41                         .db #$A8, #%01000001
0D5B7 18 11                         .db #$18, #%00010001
0D5B9 38 11                         .db #$38, #%00010001
0D5BB 98 11                         .db #$98, #%00010001
0D5BD B8 11                         .db #$B8, #%00010001
0D5BF D8 11                         .db #$D8, #%00010001
0D5C1 59 09                         .db #$59, #%00001001
0D5C3 FF                            .db #LEVEL_END
0D5C4                           
0D5C4                           lvl_layout_17:
0D5C4 10 EA                         .db #$10, #%11101010
0D5C6 20 E2                         .db #$20, #%11100010
0D5C8 30 62                         .db #$30, #%01100010
0D5CA 70 02                         .db #$70, #%00000010
0D5CC 80 6A                         .db #$80, #%01101010
0D5CE 90 22                         .db #$90, #%00100010
0D5D0 01 AA                         .db #$01, #%10101010
0D5D2 31 6A                         .db #$31, #%01101010
0D5D4 81 2A                         .db #$81, #%00101010
0D5D6 A1 02                         .db #$A1, #%00000010
0D5D8 C1 02                         .db #$C1, #%00000010
0D5DA D1 0A                         .db #$D1, #%00001010
0D5DC 32 EA                         .db #$32, #%11101010
0D5DE 42 6A                         .db #$42, #%01101010
0D5E0 62 02                         .db #$62, #%00000010
0D5E2 92 6A                         .db #$92, #%01101010
0D5E4 D2 E2                         .db #$D2, #%11100010
0D5E6 43 1A                         .db #$43, #%00011010
0D5E8 53 CA                         .db #$53, #%11001010
0D5EA 73 02                         .db #$73, #%00000010
0D5EC 83 4A                         .db #$83, #%01001010
0D5EE B3 CA                         .db #$B3, #%11001010
0D5F0 C3 EA                         .db #$C3, #%11101010
0D5F2 04 0A                         .db #$04, #%00001010
0D5F4 14 A2                         .db #$14, #%10100010
0D5F6 24 AA                         .db #$24, #%10101010
0D5F8 44 AA                         .db #$44, #%10101010
0D5FA 64 6A                         .db #$64, #%01101010
0D5FC 65 6A                         .db #$65, #%01101010
0D5FE A5 AA                         .db #$A5, #%10101010
0D600 06 EA                         .db #$06, #%11101010
0D602 16 62                         .db #$16, #%01100010
0D604 66 22                         .db #$66, #%00100010
0D606 86 2A                         .db #$86, #%00101010
0D608 17 42                         .db #$17, #%01000010
0D60A 47 12                         .db #$47, #%00010010
0D60C 57 6A                         .db #$57, #%01101010
0D60E 97 4A                         .db #$97, #%01001010
0D610 A7 02                         .db #$A7, #%00000010
0D612 18 02                         .db #$18, #%00000010
0D614 28 0A                         .db #$28, #%00001010
0D616 38 22                         .db #$38, #%00100010
0D618 68 2A                         .db #$68, #%00101010
0D61A 88 62                         .db #$88, #%01100010
0D61C C8 0A                         .db #$C8, #%00001010
0D61E D8 02                         .db #$D8, #%00000010
0D620 19 2A                         .db #$19, #%00101010
0D622 39 2A                         .db #$39, #%00101010
0D624 69 42                         .db #$69, #%01000010
0D626 99 2A                         .db #$99, #%00101010
0D628 B9 42                         .db #$B9, #%01000010
0D62A FF                            .db #LEVEL_END
0D62B                           
0D62B                           lvl_layout_18:
0D62B 00 12                         .db #$00, #%00010010
0D62D 40 1A                         .db #$40, #%00011010
0D62F 50 11                         .db #$50, #%00010001
0D631 70 1A                         .db #$70, #%00011010
0D633 80 10                         .db #$80, #%00010000
0D635 D0 13                         .db #$D0, #%00010011
0D637 01 1A                         .db #$01, #%00011010
0D639 22 15                         .db #$22, #%00010101
0D63B A2 1A                         .db #$A2, #%00011010
0D63D B2 14                         .db #$B2, #%00010100
0D63F 03 67                         .db #$03, #%01100111
0D641 43 67                         .db #$43, #%01100111
0D643 83 67                         .db #$83, #%01100111
0D645 24 09                         .db #$24, #%00001001
0D647 74 0D                         .db #$74, #%00001101
0D649 C4 0A                         .db #$C4, #%00001010
0D64B 05 A7                         .db #$05, #%10100111
0D64D 45 27                         .db #$45, #%00100111
0D64F 95 27                         .db #$95, #%00100111
0D651 16 C7                         .db #$16, #%11000111
0D653 36 67                         .db #$36, #%01100111
0D655 86 67                         .db #$86, #%01100111
0D657 D6 07                         .db #$D6, #%00000111
0D659 07 A3                         .db #$07, #%10100011
0D65B 27 23                         .db #$27, #%00100011
0D65D 47 C7                         .db #$47, #%11000111
0D65F 57 A0                         .db #$57, #%10100000
0D661 67 A7                         .db #$67, #%10100111
0D663 77 20                         .db #$77, #%00100000
0D665 97 C7                         .db #$97, #%11000111
0D667 A7 A4                         .db #$A7, #%10100100
0D669 B7 A7                         .db #$B7, #%10100111
0D66B C7 24                         .db #$C7, #%00100100
0D66D 28 0B                         .db #$28, #%00001011
0D66F 38 A3                         .db #$38, #%10100011
0D671 78 08                         .db #$78, #%00001000
0D673 88 A0                         .db #$88, #%10100000
0D675 C8 0C                         .db #$C8, #%00001100
0D677 D8 A4                         .db #$D8, #%10100100
0D679 09 43                         .db #$09, #%01000011
0D67B 59 40                         .db #$59, #%01000000
0D67D A9 44                         .db #$A9, #%01000100
0D67F FF                            .db #LEVEL_END
0D680                           
0D680                           lvl_layout_19:
0D680 11 A8                         .db #$11, #%10101000
0D682 21 68                         .db #$21, #%01101000
0D684 81 28                         .db #$81, #%00101000
0D686 B1 48                         .db #$B1, #%01001000
0D688 22 48                         .db #$22, #%01001000
0D68A 62 68                         .db #$62, #%01101000
0D68C B2 28                         .db #$B2, #%00101000
0D68E 23 28                         .db #$23, #%00101000
0D690 83 28                         .db #$83, #%00101000
0D692 B3 28                         .db #$B3, #%00101000
0D694 04 E8                         .db #$04, #%11101000
0D696 24 08                         .db #$24, #%00001000
0D698 44 08                         .db #$44, #%00001000
0D69A 64 E8                         .db #$64, #%11101000
0D69C 84 E8                         .db #$84, #%11101000
0D69E C4 A8                         .db #$C4, #%10101000
0D6A0 D4 E8                         .db #$D4, #%11101000
0D6A2 15 48                         .db #$15, #%01001000
0D6A4 55 C8                         .db #$55, #%11001000
0D6A6 75 C8                         .db #$75, #%11001000
0D6A8 A5 08                         .db #$A5, #%00001000
0D6AA 36 08                         .db #$36, #%00001000
0D6AC B6 08                         .db #$B6, #%00001000
0D6AE 27 48                         .db #$27, #%01001000
0D6B0 97 28                         .db #$97, #%00101000
0D6B2 C7 08                         .db #$C7, #%00001000
0D6B4 09 61                         .db #$09, #%01100001
0D6B6 19 11                         .db #$19, #%00010001
0D6B8 49 61                         .db #$49, #%01100001
0D6BA 89 31                         .db #$89, #%00110001
0D6BC A9 61                         .db #$A9, #%01100001
0D6BE FF                            .db #LEVEL_END
0D6BF                           
0D6BF                           lvl_layout_20:
0D6BF 00 60                         .db #$00, #%01100000
0D6C1 10 1A                         .db #$10, #%00011010
0D6C3 40 A7                         .db #$40, #%10100111
0D6C5 50 20                         .db #$50, #%00100000
0D6C7 70 1A                         .db #$70, #%00011010
0D6C9 80 40                         .db #$80, #%01000000
0D6CB B0 1A                         .db #$B0, #%00011010
0D6CD C0 20                         .db #$C0, #%00100000
0D6CF 01 40                         .db #$01, #%01000000
0D6D1 31 1A                         .db #$31, #%00011010
0D6D3 A1 40                         .db #$A1, #%01000000
0D6D5 D1 1A                         .db #$D1, #%00011010
0D6D7 43 67                         .db #$43, #%01100111
0D6D9 83 47                         .db #$83, #%01000111
0D6DB 44 A7                         .db #$44, #%10100111
0D6DD 54 25                         .db #$54, #%00100101
0D6DF 94 08                         .db #$94, #%00001000
0D6E1 A4 A7                         .db #$A4, #%10100111
0D6E3 55 05                         .db #$55, #%00000101
0D6E5 65 08                         .db #$65, #%00001000
0D6E7 06 27                         .db #$06, #%00100111
0D6E9 36 67                         .db #$36, #%01100111
0D6EB 76 28                         .db #$76, #%00101000
0D6ED A6 27                         .db #$A6, #%00100111
0D6EF D6 07                         .db #$D6, #%00000111
0D6F1 A7 A7                         .db #$A7, #%10100111
0D6F3 08 60                         .db #$08, #%01100000
0D6F5 09 60                         .db #$09, #%01100000
0D6F7 18 A7                         .db #$18, #%10100111
0D6F9 48 A7                         .db #$48, #%10100111
0D6FB 58 47                         .db #$58, #%01000111
0D6FD 88 27                         .db #$88, #%00100111
0D6FF B8 20                         .db #$B8, #%00100000
0D701 D8 1A                         .db #$D8, #%00011010
0D703 59 15                         .db #$59, #%00010101
0D705 69 60                         .db #$69, #%01100000
0D707 A9 60                         .db #$A9, #%01100000
0D709 FF                            .db #LEVEL_END
0D70A                           
0D70A                           lvl_layout_21:
0D70A 00 13                         .db #$00, #%00010011
0D70C 10 11                         .db #$10, #%00010001
0D70E 20 67                         .db #$20, #%01100111
0D710 60 67                         .db #$60, #%01100111
0D712 A0 47                         .db #$A0, #%01000111
0D714 D0 15                         .db #$D0, #%00010101
0D716 32 63                         .db #$32, #%01100011
0D718 72 05                         .db #$72, #%00000101
0D71A 82 43                         .db #$82, #%01000011
0D71C B2 43                         .db #$B2, #%01000011
0D71E 33 03                         .db #$33, #%00000011
0D720 43 2A                         .db #$43, #%00101010
0D722 63 7A                         .db #$63, #%01111010
0D724 73 2A                         .db #$73, #%00101010
0D726 A3 7A                         .db #$A3, #%01111010
0D728 34 63                         .db #$34, #%01100011
0D72A 74 63                         .db #$74, #%01100011
0D72C B4 43                         .db #$B4, #%01000011
0D72E 06 63                         .db #$06, #%01100011
0D730 46 63                         .db #$46, #%01100011
0D732 86 63                         .db #$86, #%01100011
0D734 C6 C3                         .db #$C6, #%11000011
0D736 07 7A                         .db #$07, #%01111010
0D738 47 7A                         .db #$47, #%01111010
0D73A 67 0A                         .db #$67, #%00001010
0D73C 87 7A                         .db #$87, #%01111010
0D73E 08 13                         .db #$08, #%00010011
0D740 18 43                         .db #$18, #%01000011
0D742 48 63                         .db #$48, #%01100011
0D744 88 63                         .db #$88, #%01100011
0D746 FF                            .db #LEVEL_END
0D747                           
0D747                           lvl_layout_22:
0D747 00 7A                         .db #$00, #%01111010
0D749 40 7A                         .db #$40, #%01111010
0D74B 80 7A                         .db #$80, #%01111010
0D74D C0 3A                         .db #$C0, #%00111010
0D74F 13 67                         .db #$13, #%01100111
0D751 83 A7                         .db #$83, #%10100111
0D753 B3 07                         .db #$B3, #%00000111
0D755 14 07                         .db #$14, #%00000111
0D757 44 07                         .db #$44, #%00000111
0D759 A4 07                         .db #$A4, #%00000111
0D75B 15 A5                         .db #$15, #%10100101
0D75D 45 A5                         .db #$45, #%10100101
0D75F 85 25                         .db #$85, #%00100101
0D761 86 05                         .db #$86, #%00000101
0D763 A6 05                         .db #$A6, #%00000101
0D765 17 11                         .db #$17, #%00010001
0D767 47 A1                         .db #$47, #%10100001
0D769 87 A1                         .db #$87, #%10100001
0D76B B7 A1                         .db #$B7, #%10100001
0D76D 18 41                         .db #$18, #%01000001
0D76F 68 01                         .db #$68, #%00000001
0D771 D8 01                         .db #$D8, #%00000001
0D773 FF                            .db #LEVEL_END
0D774                           
0D774                           lvl_layout_23:
0D774 00 71                         .db #$00, #%01110001
0D776 40 11                         .db #$40, #%00010001
0D778 50 43                         .db #$50, #%01000011
0D77A 80 D1                         .db #$80, #%11010001
0D77C 90 E3                         .db #$90, #%11100011
0D77E A0 63                         .db #$A0, #%01100011
0D780 01 63                         .db #$01, #%01100011
0D782 41 63                         .db #$41, #%01100011
0D784 A1 63                         .db #$A1, #%01100011
0D786 02 63                         .db #$02, #%01100011
0D788 42 63                         .db #$42, #%01100011
0D78A 62 11                         .db #$62, #%00010001
0D78C A2 67                         .db #$A2, #%01100111
0D78E 04 63                         .db #$04, #%01100011
0D790 44 23                         .db #$44, #%00100011
0D792 64 D1                         .db #$64, #%11010001
0D794 74 E3                         .db #$74, #%11100011
0D796 84 F1                         .db #$84, #%11110001
0D798 94 E3                         .db #$94, #%11100011
0D79A A4 C7                         .db #$A4, #%11000111
0D79C B4 23                         .db #$B4, #%00100011
0D79E 05 63                         .db #$05, #%01100011
0D7A0 45 23                         .db #$45, #%00100011
0D7A2 06 71                         .db #$06, #%01110001
0D7A4 46 11                         .db #$46, #%00010001
0D7A6 56 E3                         .db #$56, #%11100011
0D7A8 D6 07                         .db #$D6, #%00000111
0D7AA 17 D1                         .db #$17, #%11010001
0D7AC 27 43                         .db #$27, #%01000011
0D7AE 67 D1                         .db #$67, #%11010001
0D7B0 A7 C7                         .db #$A7, #%11000111
0D7B2 C7 A7                         .db #$C7, #%10100111
0D7B4 D7 B3                         .db #$D7, #%10110011
0D7B6 28 43                         .db #$28, #%01000011
0D7B8 78 43                         .db #$78, #%01000011
0D7BA 29 43                         .db #$29, #%01000011
0D7BC 79 43                         .db #$79, #%01000011
0D7BE FF                           .db #LEVEL_END
0D7BF                           
0D7BF                           lvl_layout_24:
0D7BF 02 67                         .db #$02, #%01100111
0D7C1 42 67                         .db #$42, #%01100111
0D7C3 82 67                         .db #$82, #%01100111
0D7C5 05 67                         .db #$05, #%01100111
0D7C7 45 67                         .db #$45, #%01100111
0D7C9 85 67                         .db #$85, #%01100111
0D7CB 08 67                         .db #$08, #%01100111
0D7CD 48 67                         .db #$48, #%01100111
0D7CF 88 67                         .db #$88, #%01100111
0D7D1 30 E7                         .db #$30, #%11100111
0D7D3 70 E7                         .db #$70, #%11100111
0D7D5 B0 E7                         .db #$B0, #%11100111
0D7D7 34 E7                         .db #$34, #%11100111
0D7D9 74 E7                         .db #$74, #%11100111
0D7DB B4 E7                         .db #$B4, #%11100111
0D7DD 20 13                         .db #$20, #%00010011
0D7DF 40 10                         .db #$40, #%00010000
0D7E1 80 02                         .db #$80, #%00000010
0D7E3 41 05                         .db #$41, #%00000101
0D7E5 B1 09                         .db #$B1, #%00001001
0D7E7 02 09                         .db #$02, #%00001001
0D7E9 52 0C                         .db #$52, #%00001100
0D7EB 13 11                         .db #$13, #%00010001
0D7ED 33 04                         .db #$33, #%00000100
0D7EF 74 0C                         .db #$74, #%00001100
0D7F1 B4 08                         .db #$B4, #%00001000
0D7F3 15 09                         .db #$15, #%00001001
0D7F5 55 0C                         .db #$55, #%00001100
0D7F7 95 0C                         .db #$95, #%00001100
0D7F9 47 03                         .db #$47, #%00000011
0D7FB A7 12                         .db #$A7, #%00010010
0D7FD 18 15                         .db #$18, #%00010101
0D7FF 09 05                         .db #$09, #%00000101
0D801 19 03                         .db #$19, #%00000011
0D803 FF                            .db #LEVEL_END
0D804                           
0D804                           lvl_layout_25:
0D804 00 12                         .db #$00, #%00010010
0D806 10 63                         .db #$10, #%01100011
0D808 60 63                         .db #$60, #%01100011
0D80A A0 07                         .db #$A0, #%00000111
0D80C 01 11                         .db #$01, #%00010001
0D80E A1 02                         .db #$A1, #%00000010
0D810 02 67                         .db #$02, #%01100111
0D812 42 07                         .db #$42, #%00000111
0D814 62 67                         .db #$62, #%01100111
0D816 A2 C7                         .db #$A2, #%11000111
0D818 03 61                         .db #$03, #%01100001
0D81A 43 01                         .db #$43, #%00000001
0D81C 63 61                         .db #$63, #%01100001
0D81E A6 E7                         .db #$A6, #%11100111
0D820 B6 47                         .db #$B6, #%01000111
0D822 C6 01                         .db #$C6, #%00000001
0D824 B7 42                         .db #$B7, #%01000010
0D826 B8 42                         .db #$B8, #%01000010
0D828 C8 0A                         .db #$C8, #%00001010
0D82A 09 7A                         .db #$09, #%01111010
0D82C 49 7A                         .db #$49, #%01111010
0D82E 89 3A                         .db #$89, #%00111010
0D830 B9 42                         .db #$B9, #%01000010
0D832 FF                            .db #LEVEL_END
0D833                           
0D833                           ;; Level layout address pointers
0D833                           tbl_lvl_layout_hi:
0D833 D1 D1 D1 D1 D2                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D838 D2 D3 D3 D3 D3                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D83D D3 D4 D4 D4 D5                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D842 D5 D5 D6 D6 D6                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D847 D7 D7 D7 D7 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D84C                           
0D84C                           tbl_lvl_layout_lo:
0D84C 54 6F A4 D7 48                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D851 83 0C 4D 84 C7                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D856 F6 49 74 C7 3E                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D85B 6F C4 2B 80 BF                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D860 0A 47 74 BF 04                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D865                           
0D865                           ;; Ball start position (#$YX)
0D865                           tbl_lvl_ball_startpos:
0D865 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D86A 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D86F 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D874 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D879 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D87E                               
0D87E                           ;; Ball start direction, color and tile score
0D87E                           ;; #% ccc v tttt
0D87E                           ;;    ||| | ++++-- tile score
0D87E                           ;;    ||| +------- vertical direction, up (0) or down
0D87E                           ;;    +++--------- color (CBRYGM)
0D87E                           tbl_lvl_ball_init:
0D87E 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D883 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D888 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D88D 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D892 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D897                           
0D897                           
0D897                           
0D897                           ;; Helper table to multiply values by 16
0D897                           tbl_Times16:
0D897 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D89F 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D8A7                               
0D8A7                           
0D8A7                           ;; Helper table to multiply values by 64
0D8A7                           tbl_Times64:
0D8A7 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D8AB                           
0D8AB                           
0D8AB                           ;; Metatile ID to CHR data mapper
0D8AB                           tbl_GametileTopLeft:
0D8AB 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D8B5                           
0D8B5                           tbl_GametileTopRight:
0D8B5 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D8BF                           
0D8BF                           tbl_GametileBottomLeft:
0D8BF 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D8C9                           
0D8C9                           tbl_GametileBottomRight:
0D8C9 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D8D3                           
0D8D3                           ;; Metatile ID to RAM byte data mapper
0D8D3                           tbl_GameTileRamByte:
0D8D3 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D8D8                           
0D8D8                           ;; HUD text data
0D8D8                           tbl_HudText:
0D8D8 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D8E0 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D8E7 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D8EF 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D8F4                           
0D8F4                           ;; Move block top left tile based on color
0D8F4                           tbl_MoveBlockTopLeftTile:
0D8F4 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D8FB                           
0D8FB                           ;; Game over data
0D8FB                           tbl_GameOver:
0D8FB 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D8FF 00 00                         .db #_SPACE, #_SPACE
0D901 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0D905                           
0D905                           tbl_BackgroundFade:
0D905 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0D90F                           
0D90F                           
0D90F                           ;; Explosion sound effect frames
0D90F                           ;; #% ffff vvvv
0D90F                           ;;    |||| ++++---- volume (0=low, 15=high)
0D90F                           ;;    ++++-------- frequency (0=low, 15=high)
0D90F                           ;;
0D90F                           ;; #$FF = end of sfx
0D90F                           tbl_ExplosionSfx:
0D90F 00                            .db #$00
0D910 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0D918 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0D920 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0D928 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0D930 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0D938 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0D93D FF                            .db #$FF ;end sfx byte
0D93E                           
0D93E                           
0D93E                           ;; NMI handler
0D93E                           NMI:
0D93E                               .include "interrupt/nmi.asm"
0D93E                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D93E                           ;;
0D93E                           ;; include/nmi.asm
0D93E                           ;;
0D93E                           ;; Non-maskable interrupt script. This script is being executed
0D93E                           ;; when vBlank hits.
0D93E                           ;;
0D93E                           ;;
0D93E                           
0D93E                               ;; Preserve accumulator through stack
0D93E 48                            PHA
0D93F                           
0D93F                               ;; Should NMI be skipped?
0D93F A5 13                         LDA skip_nmi
0D941 F0 03                         BEQ +
0D943 4C AB DA                          JMP +skip_nmi
0D946                               +
0D946                           
0D946                               ;; When in NMI, skip additional NMI requests
0D946 A9 01                         LDA #$01
0D948 85 13                         STA skip_nmi
0D94A                           
0D94A                               ;; Preserve X, Y, and PC through stack
0D94A 8A                            TXA
0D94B 48                            PHA
0D94C 98                            TYA
0D94D 48                            PHA
0D94E 08                            PHP
0D94F                               
0D94F                               ;; Check forced NMI skip
0D94F A5 14                         LDA force_skip_nmi
0D951 F0 03                         BEQ +
0D953 4C 9A DA                          JMP +force_skip_nmi
0D956                               +
0D956                           
0D956                               ;; Update PPU mask
0D956                               ;LDA #$00
0D956                               ;STA PPU_CTRL
0D956 A5 12                         LDA soft_ppu_mask
0D958 8D 01 20                      STA PPU_MASK
0D95B                               
0D95B                               
0D95B                               ;; Additional PPU updates go here
0D95B                               .include "game/interrupt/nmi.asm"
0D95B                           
0D95B                               ;; Check if ppu_buffer needs updating
0D95B A5 39                         LDA ppu_buffer_update
0D95D D0 03                         BNE +
0D95F 4C A1 D9                          JMP +no_ppu_buffer_update
0D962                               +
0D962                           
0D962                               ;; Reset ppu control register and mask
0D962 A2 00                         LDX #$00
0D964 8E 00 20                      STX PPU_CTRL
0D967 8E 01 20                      STX PPU_MASK
0D96A                           
0D96A                               ;; Set up loop
0D96A                               -
0D96A                                   ;; Reset hi/lo latch
0D96A 2C 02 20                          BIT PPU_STATUS
0D96D                           
0D96D                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D96D BD 00 03                          LDA ppu_buffer,x
0D970 8D 06 20                          STA PPU_ADDR
0D973 E8                                INX
0D974 BD 00 03                          LDA ppu_buffer,x
0D977 8D 06 20                          STA PPU_ADDR
0D97A                           
0D97A                                   ;; Write ppu_buffer data to PPU_ADDR
0D97A E8                                INX
0D97B BD 00 03                          LDA ppu_buffer,x
0D97E 8D 07 20                          STA PPU_DATA
0D981                           
0D981                                   ;; Check if updating is done (eg. X is at pointer)
0D981 E8                                INX
0D982 E4 3A                             CPX ppu_buffer_pointer
0D984 F0 03                             BEQ +
0D986 4C 6A D9                      JMP -
0D989                           +
0D989                           
0D989                               ;; Reset ppu buffer update and pointer
0D989 A9 00                         LDA #$00
0D98B 85 39                         STA ppu_buffer_update
0D98D 85 3A                         STA ppu_buffer_pointer
0D98F                               
0D98F                               ;; Reset scrolling position
0D98F 8D 05 20                      STA PPU_SCROLL
0D992 8D 05 20                      STA PPU_SCROLL
0D995                           
0D995                               ;; Restore ppu control register and mask
0D995 A9 90                         LDA #%10010000
0D997 8D 00 20                      STA PPU_CTRL
0D99A A5 12                         LDA soft_ppu_mask
0D99C 8D 01 20                      STA PPU_MASK
0D99F A9 00                         LDA #$00
0D9A1                           
0D9A1                           ;; Continue other NMI stuff
0D9A1                           +no_ppu_buffer_update:
0D9A1                           
0D9A1                               ;; Reset sprite RAM, draw sprites
0D9A1 8D 03 20                      STA OAM_ADDR
0D9A4 A9 02                         LDA #$02
0D9A6 8D 14 40                      STA OAM_DMA
0D9A9                           
0D9A9                               ;; Decrease explosion and move block timers
0D9A9 A0 04                         LDY #MAX_ANIMATIONS
0D9AB A2 00                         LDX #$00
0D9AD                               -
0D9AD BD 60 03                          LDA explosion_timer,x
0D9B0 F0 03                             BEQ +
0D9B2 DE 60 03                              DEC explosion_timer,x
0D9B5                                   +
0D9B5                           
0D9B5 BD 80 03                          LDA move_block_timer,x
0D9B8 F0 03                             BEQ +
0D9BA DE 80 03                              DEC move_block_timer,x
0D9BD                                   +
0D9BD                                   
0D9BD E8                                INX
0D9BE 88                                DEY
0D9BF F0 03                             BEQ +done
0D9C1 4C AD D9                      JMP -
0D9C4                           +done:
0D9C4                           
0D9C4                               ;; Decrease nudge timer
0D9C4 A5 3E                         LDA nudge_timer
0D9C6 F0 02                         BEQ +
0D9C8 C6 3E                             DEC nudge_timer
0D9CA                               +
0D9CA                           
0D9CA                               ;; Decrease bonus timer
0D9CA A5 3F                         LDA bonus_timer
0D9CC F0 02                         BEQ +
0D9CE C6 3F                             DEC bonus_timer
0D9D0                               +
0D9D0                           
0D9D0                               ;; Decrease kill timer
0D9D0 A5 40                         LDA kill_timer
0D9D2 F0 02                         BEQ +
0D9D4 C6 40                             DEC kill_timer
0D9D6                               +
0D9D6                           
0D9D6                               ;; Play background noise
0D9D6 A5 38                         LDA screen_mode
0D9D8 29 01                         AND #IS_GAME_SCREEN
0D9DA F0 21                         BEQ +
0D9DC                                   .include "game/include/main/background_sound.asm"
0D9DC                               ;; At random times, set max_noise period to $03-$0A
0D9DC A5 44                         LDA max_noise
0D9DE D0 1D                         BNE +
0D9E0 20 25 C5                          JSR sub_GetRandomNumber
0D9E3 29 EF                             AND #%11101111
0D9E5 D0 16                             BNE +
0D9E7                                   
0D9E7 A5 15                             LDA frame_counter
0D9E9 85 16                             STA random_seed
0D9EB 20 25 C5                          JSR sub_GetRandomNumber
0D9EE 29 07                             AND #$07
0D9F0 69 03                             ADC #$03
0D9F2 85 44                             STA max_noise
0D9F4 A9 01                             LDA #$01
0D9F6 85 45                             STA sweep_noise
0D9F8 A9 34                             LDA #$34
0D9FA 8D 0C 40                          STA NOISE_VOLUME
0D9FD                           
0D9FD                               +
0D9FD                           
0D9FD                               ;; if sweep noise = $00: constant noise
0D9FD                               ;; else if sweep noise > $80: decrease pitch
0D9FD                               ;; else: increase pitch
0D9FD A5 45                         LDA sweep_noise
0D9FF F0 18                         BEQ +constantNoise
0DA01 30 2A                         BMI +decreaseNoise
0DA03                           
0DA03                           ;; Sweep noise up to max noise pitch
0DA03                           +increaseNoise:
0DA03 C6 46                         DEC current_noise
0DA05 A5 46                         LDA current_noise
0DA07 8D 0E 40                      STA NOISE_PERIOD
0DA0A C5 44                         CMP max_noise
0DA0C D0 08                         BNE +
0DA0E A9 00                             LDA #$00
0DA10 85 45                             STA sweep_noise
0DA12 A9 0A                             LDA #$0A
0DA14 85 47                             STA noise_timer
0DA16                               +
0DA16 4C 41 DA                      JMP +endNoise
0DA19                           
0DA19                           ;; Keep noise at constant pitch
0DA19                           +constantNoise:
0DA19 A5 44                         LDA max_noise
0DA1B F0 24                         BEQ +endNoise
0DA1D                           
0DA1D A5 47                         LDA noise_timer
0DA1F D0 07                         BNE +
0DA21 A9 80                             LDA #$80
0DA23 85 45                             STA sweep_noise
0DA25 4C 41 DA                          JMP +endNoise
0DA28                               +
0DA28 C6 47                         DEC noise_timer
0DA2A 4C 41 DA                      JMP +endNoise
0DA2D                           
0DA2D                           ;; Sweep noise down to initial pitch
0DA2D                           +decreaseNoise:
0DA2D E6 46                         INC current_noise
0DA2F A5 46                         LDA current_noise
0DA31 8D 0E 40                      STA NOISE_PERIOD
0DA34 C9 0E                         CMP #$0E
0DA36 D0 09                         BNE +endNoise
0DA38                           
0DA38 20 B5 C5                      JSR sub_BackgroundNoise
0DA3B A9 00                         LDA #$00
0DA3D 85 44                         STA max_noise
0DA3F 85 45                         STA sweep_noise
0DA41                           
0DA41                           +endNoise:
0DA41                           
0DA41                               +
0DA41                           
0DA41                               ;; Test: random bleeps (disabled)
0DA41                               .include "game/test/random_descending_bleeps.asm"
0DA41                           ;; Random bleepy noises
0DA41 A5 48                         LDA do_beeps
0DA43 F0 2E                         BEQ +continue
0DA45                               
0DA45 C9 02                         CMP #$02
0DA47 D0 12                         BNE +beep
0DA49                              
0DA49                           +stopBeep:
0DA49 A9 00                         LDA #$00
0DA4B 85 48                         STA do_beeps
0DA4D A9 08                         LDA #$08
0DA4F 8D 15 40                      STA APU_STATUS
0DA52 8D 0F 40                      STA NOISE_LENGTH
0DA55 20 B5 C5                      JSR sub_BackgroundNoise
0DA58 4C 73 DA                      JMP +continue
0DA5B                               
0DA5B                           +beep:
0DA5B A9 01                         LDA #$01
0DA5D 8D 15 40                      STA APU_STATUS
0DA60 A9 B8                         LDA #$B8
0DA62 8D 00 40                      STA PULSE1_VOLUME
0DA65 20 25 C5                      JSR sub_GetRandomNumber
0DA68 8D 02 40                      STA PULSE1_TIMER_LO
0DA6B 20 25 C5                      JSR sub_GetRandomNumber
0DA6E 29 01                         AND #$01
0DA70 8D 03 40                      STA PULSE1_TIMER_HI
0DA73                           
0DA73                           +continue:0DA73                               
0DA73                               ;; Test: explosion sound
0DA73                               .include "game/test/nmi_explosion.asm"
0DA73                           
0DA73                               ;; Get current explosion sfx frame; if not set, skip this
0DA73 A6 49                         LDX explosion_sfx_timer
0DA75 F0 23                         BEQ +done
0DA77                               
0DA77                                   ;; Check if explosion sfx is done; if so, disable and skip
0DA77 BD 0F D9                          LDA tbl_ExplosionSfx, x
0DA7A C9 FF                             CMP #$FF
0DA7C D0 07                             BNE +
0DA7E A9 00                                 LDA #$00
0DA80 85 49                                 STA explosion_sfx_timer
0DA82 4C 9A DA                              JMP +done
0DA85                                   +
0DA85                                   
0DA85                                   ;; Set low nibble as volume
0DA85 29 0F                             AND #$0F
0DA87 09 30                             ORA #$30
0DA89 8D 0C 40                          STA NOISE_VOLUME
0DA8C                                   
0DA8C                                   ;; Set high nibble as frequency
0DA8C BD 0F D9                          LDA tbl_ExplosionSfx, x
0DA8F 4A                                LSR
0DA90 4A                                LSR
0DA91 4A                                LSR
0DA92 4A                                LSR
0DA93 49 0F                             EOR #$0F
0DA95 8D 0E 40                          STA NOISE_PERIOD
0DA98                                   
0DA98                                   ;; Next frame
0DA98 E6 49                             INC explosion_sfx_timer
0DA9A                               +done0DA9A                               
0DA9A                           
0DA9A                           
0DA9A                           ;; This is what happens when we forced nmi skip
0DA9A                           +force_skip_nmi:
0DA9A                           
0DA9A                               ;; Increase frame timers
0DA9A E6 15                         INC frame_counter
0DA9C                           
0DA9C                               ;; reset sprites_update_position
0DA9C A9 00                         LDA #$00
0DA9E 85 35                         STA sprites_update_position
0DAA0                           
0DAA0                               ;; Don't skip next NMI request
0DAA0 A9 00                         LDA #$00
0DAA2 85 13                         STA skip_nmi
0DAA4 85 4A                         STA check_nmi
0DAA6                           
0DAA6                               ;; Restore X, Y and PC from stack
0DAA6 28                            PLP
0DAA7 68                            PLA
0DAA8 A8                            TAY
0DAA9 68                            PLA
0DAAA AA                            TAX
0DAAB                           
0DAAB                           +skip_nmi:
0DAAB                               ;; Restore accumulator from stack
0DAAB 68                            PLA
0DAAC                           
0DAAC                               ;; Return
0DAAC 40                            RTI
0DAAD                           
0DAAD                           ;; IRQ handler (empty)
0DAAD                           IRQ:
0DAAD                               .include "interrupt/irq.asm"
0DAAD 40                            RTI0DAAE                           
0DAAE                           ;; Interrupt vectors
0DAAE 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 3E D9                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE AD DA                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
