	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$06
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU Noise registers
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           ball_update_position   .dsb 1
00036                           
00036                           
00036                           ;; Ball flags
00036                           ;; #% c c c v . f n a
00036                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00036                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00036                           ;;    | | | | | +------ ball is frozen (not moving)
00036                           ;;    | | | | +-------- (unused for now)
00036                           ;;    | | | +---------- ball moves up (0) or down (1)
00036                           ;;    +-+-+------------ ball color (1-6)
00036                           ball_flags             .dsb 1
00037                           
00037                           
00037                           ;; Screen mode
00037                           ;; #% u . . . . . t t
00037                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00037                           ;;    | +-+-+-+-+------------- unused
00037                           ;;    +----------------------- should the screen update
00037                           screen_mode            .dsb 1
00038                           
00038                           
00038                           
00038                           ;; PPU buffer variables
00038                           ppu_buffer_update      .dsb 1
00039                           ppu_buffer_pointer     .dsb 1
0003A                           
0003A                           ;; Pointer to keep track of the number of explosions
0003A                           explosion_pointer      .dsb 1
0003B                           
0003B                           ;; Sprite RAM pointer to keep track of sprites to update
0003B                           sprite_ram_pointer     .dsb 1
0003C                           
0003C                           ;; Counters
0003C                           nudge_counter          .dsb 1
0003D                           bonus_counter          .dsb 1
0003E                           
0003E                           ;; Current level (doubles as level select variable)
0003E                           current_level          .dsb 1
0003F                           
0003F                           ;; Tile type the ball is currently colliding with
0003F                           colliding_tile         .dsb 1
00040                           
00040                           ;; Background noise variables
00040                           max_noise              .dsb 1
00041                           sweep_noise            .dsb 1
00042                           current_noise          .dsb 1
00043                           noise_counter          .dsb 1
00044                           
00044                           ;; Additional NMI check for timed PPU fade
00044                           check_nmi              .dsb 1
00045                               00045                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 31 C4                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 31 C4                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 37                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 3E                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3B                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 14 C4                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 37                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 37                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 A2 CD                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 9F CD                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 58 C5                      JSR sub_DisableRendering
0C08A 20 F6 C7                      JSR sub_JumpToPointer
0C08D 20 6C C5                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 37                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 37                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 37                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C 04 C3                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3B                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C E5 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 36                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 2B                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 85 1C                         STA ball_ypos_lo_prev
0C0C8 18                            CLC
0C0C9 69 F0                         ADC #BALL_SPEED_LO
0C0CB 85 1A                         STA ball_ypos_lo
0C0CD                           
0C0CD                               ;; update the high byte with carry
0C0CD A5 19                         LDA ball_ypos_hi
0C0CF 85 1B                         STA ball_ypos_hi_prev
0C0D1 69 01                         ADC #BALL_SPEED_HI
0C0D3 85 19                         STA ball_ypos_hi
0C0D5                               
0C0D5                               ;; Check bottom bound
0C0D5 C9 C8                         CMP #BOUND_BOTTOM
0C0D7 90 3C                         BCC +checkHorizontalMovement
0C0D9 F0 3A                         BEQ +checkHorizontalMovement
0C0DB                           
0C0DB                           
0C0DB                               ;; Change ball direction to "up"
0C0DB A9 C8                         LDA #BOUND_BOTTOM
0C0DD 38                            SEC
0C0DE E9 01                         SBC #$01
0C0E0 85 19                         STA ball_ypos_hi
0C0E2 A9 00                         LDA #$00
0C0E4 85 1A                         STA ball_ypos_lo
0C0E6 A5 36                         LDA ball_flags
0C0E8 29 EF                         AND #MOVE_BALL_UP
0C0EA 85 36                         STA ball_flags
0C0EC 4C 15 C1                      JMP +checkHorizontalMovement
0C0EF                           
0C0EF                           
0C0EF                           +moveBallUp:
0C0EF                               ;; update the low byte
0C0EF A5 1A                         LDA ball_ypos_lo
0C0F1 85 1C                         STA ball_ypos_lo_prev
0C0F3 38                            SEC
0C0F4 E9 F0                         SBC #BALL_SPEED_LO
0C0F6 85 1A                         STA ball_ypos_lo
0C0F8                           
0C0F8                               ;; update the high byte with carry
0C0F8 A5 19                         LDA ball_ypos_hi
0C0FA 85 1B                         STA ball_ypos_hi_prev
0C0FC E9 01                         SBC #BALL_SPEED_HI
0C0FE 85 19                         STA ball_ypos_hi
0C100                               
0C100                               ;; Check top bound
0C100 C9 30                         CMP #BOUND_TOP
0C102 B0 11                         BCS +checkHorizontalMovement
0C104                           
0C104                               ;; Change ball direction to "down"
0C104 A9 30                         LDA #BOUND_TOP
0C106 18                            CLC
0C107 69 01                         ADC #$01
0C109 85 19                         STA ball_ypos_hi
0C10B A9 00                         LDA #$00
0C10D 85 1A                         STA ball_ypos_lo
0C10F A5 36                         LDA ball_flags
0C111 09 10                         ORA #MOVE_BALL_DOWN
0C113 85 36                         STA ball_flags
0C115                           
0C115                           
0C115                           +checkHorizontalMovement:
0C115                           
0C115                               ;; Check if ball is being nudged
0C115 A5 3C                         LDA nudge_counter
0C117 D0 41                         BNE +doneBallMovement
0C119                           
0C119                               ;; Check if left button is held
0C119 A5 0F                         LDA buttons_held
0C11B 29 02                         AND #BUTTON_LEFT
0C11D F0 1B                         BEQ +
0C11F                                   ;; update the low byte
0C11F A5 18                             LDA ball_xpos_lo
0C121 38                                SEC
0C122 E9 F0                             SBC #BALL_SPEED_LO
0C124 85 18                             STA ball_xpos_lo
0C126                           
0C126                                   ;; update the high byte
0C126 A5 17                             LDA ball_xpos_hi
0C128 E9 01                             SBC #BALL_SPEED_HI
0C12A 85 17                             STA ball_xpos_hi
0C12C                                   
0C12C                                   ;; Check left bound
0C12C C9 10                             CMP #BOUND_LEFT
0C12E B0 2A                             BCS +doneBallMovement
0C130                                   
0C130                                   ;; Set flag to nudge right and set nudge counter
0C130 A5 36                             LDA ball_flags
0C132 09 02                             ORA #NUDGE_BALL_RIGHT
0C134 20 EF C7                          JSR sub_InitiateNudge
0C137                           
0C137 4C 5A C1                          JMP +doneBallMovement        
0C13A                               +
0C13A                           
0C13A                               ;; Check if right button is held
0C13A A5 0F                         LDA buttons_held
0C13C 29 01                         AND #BUTTON_RIGHT
0C13E F0 1A                         BEQ +
0C140                                   ;; update the low byte
0C140 A5 18                             LDA ball_xpos_lo
0C142 18                                CLC
0C143 69 F0                             ADC #BALL_SPEED_LO
0C145 85 18                             STA ball_xpos_lo
0C147                           
0C147                                   ;; update the high byte
0C147 A5 17                             LDA ball_xpos_hi
0C149 69 01                             ADC #BALL_SPEED_HI
0C14B 85 17                             STA ball_xpos_hi     
0C14D                           
0C14D                                  ;; Check right bound
0C14D C9 E8                             CMP #BOUND_RIGHT
0C14F 90 09                             BCC +doneBallMovement
0C151 F0 07                             BEQ +doneBallMovement
0C153                                   
0C153                                   ;; Set flag to nudge left and set nudge timer
0C153 A5 36                             LDA ball_flags
0C155 29 FD                             AND #NUDGE_BALL_LEFT
0C157 20 EF C7                          JSR sub_InitiateNudge
0C15A                               +
0C15A                           
0C15A                           
0C15A                           +doneBallMovement:
0C15A                           
0C15A                               ;; Check nudge
0C15A A5 3C                         LDA nudge_counter
0C15C F0 23                         BEQ +doneBallNudging
0C15E A5 36                             LDA ball_flags
0C160 29 02                             AND #NUDGE_BALL_RIGHT
0C162 F0 10                             BEQ +nudgeBallLeft
0C164                                   
0C164                                       ;; update the low byte
0C164 A5 18                                 LDA ball_xpos_lo
0C166 18                                    CLC
0C167 69 F0                                 ADC #BALL_SPEED_LO
0C169 85 18                                 STA ball_xpos_lo
0C16B                           
0C16B                                       ;; update the high byte
0C16B A5 17                                 LDA ball_xpos_hi
0C16D 69 01                                 ADC #BALL_SPEED_HI
0C16F 85 17                                 STA ball_xpos_hi  
0C171 4C 81 C1                              JMP +doneBallNudging
0C174                                   +nudgeBallLeft:
0C174                                   
0C174                                   ;; update the low byte
0C174 A5 18                             LDA ball_xpos_lo
0C176 38                                SEC
0C177 E9 F0                             SBC #BALL_SPEED_LO
0C179 85 18                             STA ball_xpos_lo
0C17B                           
0C17B                                   ;; update the high byte
0C17B A5 17                             LDA ball_xpos_hi
0C17D E9 01                             SBC #BALL_SPEED_HI
0C17F 85 17                             STA ball_xpos_hi
0C181                               +doneBallNudging:
0C181                           
0C181                               ;; Don't update position again until next frame
0C181 E6 35                         INC ball_update_position
0C183                           
0C183                               
0C183                               ;; Do collision detection
0C183                               .include "game/include/main/collision_detection.asm"
0C183                           
0C183                               ;; Get ball's x-left, x-center, x-right position
0C183 A5 17                         LDA ball_xpos_hi
0C185 18                            CLC
0C186 69 F0                         ADC #BALL_LEFT_WGA
0C188 85 2F                         STA ball_left
0C18A 18                            CLC
0C18B 69 04                         ADC #BALL_HALF_SIZE
0C18D 85 30                         STA ball_center
0C18F 18                            CLC
0C190 69 04                         ADC #BALL_HALF_SIZE
0C192 85 31                         STA ball_right
0C194                           
0C194                               ;; Get ball's y-top, y-middle, y-bottom position
0C194 A5 19                         LDA ball_ypos_hi
0C196 18                            CLC
0C197 69 D0                         ADC #BALL_TOP_WGA
0C199 85 32                         STA ball_top
0C19B 18                            CLC
0C19C 69 04                         ADC #BALL_HALF_SIZE
0C19E 85 33                         STA ball_middle
0C1A0 18                            CLC
0C1A1 69 04                         ADC #BALL_HALF_SIZE
0C1A3 85 34                         STA ball_bottom
0C1A5                           
0C1A5                           +checkRightCollision:
0C1A5                               ;; Check if ball moves right
0C1A5                               ;; No need to check nudging here as that will never collide with a tile
0C1A5 A5 0F                         LDA buttons_held
0C1A7 29 01                         AND #BUTTON_RIGHT
0C1A9 F0 1C                         BEQ +checkLeftCollision
0C1AB                           
0C1AB                               ;; Check tile at right position
0C1AB A5 33                         LDA ball_middle
0C1AD 85 00                         STA temp
0C1AF A5 31                         LDA ball_right
0C1B1 85 01                         STA temp+1
0C1B3 20 40 C5                      JSR sub_ConvertXYToTileType
0C1B6 29 01                         AND #TILE_IS_SOLID
0C1B8 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1BA                           
0C1BA                               ;; Tile is solid; nudge ball and evaluate tile type
0C1BA A5 36                         LDA ball_flags
0C1BC 29 FD                         AND #NUDGE_BALL_LEFT
0C1BE 20 EF C7                      JSR sub_InitiateNudge
0C1C1 20 99 C5                      JSR sub_EvaluateTileType
0C1C4 4C E6 C1                      JMP +checkTopCollision
0C1C7                           
0C1C7                           +checkLeftCollision:
0C1C7                               ;; Check if ball moves right
0C1C7                               ;; No need to check nudging here as that will never collide with a tile
0C1C7 A5 0F                         LDA buttons_held
0C1C9 29 02                         AND #BUTTON_LEFT
0C1CB F0 19                         BEQ +checkTopCollision
0C1CD                           
0C1CD                               ;; Check tile at right position
0C1CD A5 33                         LDA ball_middle
0C1CF 85 00                         STA temp
0C1D1 A5 2F                         LDA ball_left
0C1D3 85 01                         STA temp+1
0C1D5 20 40 C5                      JSR sub_ConvertXYToTileType
0C1D8 29 01                         AND #TILE_IS_SOLID
0C1DA F0 0A                         BEQ +checkTopCollision
0C1DC                           
0C1DC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1DC A5 36                         LDA ball_flags
0C1DE 09 02                         ORA #NUDGE_BALL_RIGHT
0C1E0 20 EF C7                      JSR sub_InitiateNudge
0C1E3 20 99 C5                      JSR sub_EvaluateTileType
0C1E6                               
0C1E6                               
0C1E6                           +checkTopCollision:
0C1E6                               ;; Check if ball moves up
0C1E6 A5 36                         LDA ball_flags
0C1E8 29 10                         AND #BALL_MOVES_DOWN
0C1EA D0 23                         BNE +checkBottomCollision
0C1EC                           
0C1EC                               ;; Check tile at top position
0C1EC A5 32                         LDA ball_top
0C1EE 85 00                         STA temp
0C1F0 A5 30                         LDA ball_center
0C1F2 85 01                         STA temp+1
0C1F4 20 40 C5                      JSR sub_ConvertXYToTileType
0C1F7 29 01                         AND #TILE_IS_SOLID
0C1F9 F0 34                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1FB                           
0C1FB                               ;; Tile is solid; move ball down and evaluate tile type
0C1FB A5 1C                         LDA ball_ypos_lo_prev
0C1FD 85 1A                         STA ball_ypos_lo
0C1FF A5 1B                         LDA ball_ypos_hi_prev
0C201 85 19                         STA ball_ypos_hi
0C203 A5 36                         LDA ball_flags
0C205 09 10                         ORA #MOVE_BALL_DOWN
0C207 85 36                         STA ball_flags
0C209 20 99 C5                      JSR sub_EvaluateTileType
0C20C 4C 2F C2                      JMP +doneCheckingCollision
0C20F                           
0C20F                           +checkBottomCollision:
0C20F                               ;; No movement check needed: since ball is not moving up, it must move down
0C20F                           
0C20F                               ;; Check tile at bottom position
0C20F A5 34                         LDA ball_bottom
0C211 85 00                         STA temp
0C213 A5 30                         LDA ball_center
0C215 85 01                         STA temp+1
0C217 20 40 C5                      JSR sub_ConvertXYToTileType
0C21A 29 01                         AND #TILE_IS_SOLID
0C21C F0 11                         BEQ +doneCheckingCollision
0C21E                           
0C21E                               ;; Tile is solid; move ball up and evaluate tile type
0C21E A5 1C                         LDA ball_ypos_lo_prev
0C220 85 1A                         STA ball_ypos_lo
0C222 A5 1B                         LDA ball_ypos_hi_prev
0C224 85 19                         STA ball_ypos_hi
0C226 A5 36                         LDA ball_flags
0C228 29 EF                         AND #MOVE_BALL_UP
0C22A 85 36                         STA ball_flags
0C22C 20 99 C5                      JSR sub_EvaluateTileType
0C22F                           
0C22F                           +doneCheckingCollision:
0C22F                           
0C22F                               
0C22F                               ;; Update bonus
0C22F                               .include "game/include/main/update_bonus.asm"
0C22F                           ;; update_bonus.asm
0C22F                           
0C22F                               ;; If bonus = 000, skip decreasing
0C22F A5 2C                         LDA ball_bonus
0C231 18                            CLC
0C232 65 2D                         ADC ball_bonus+1
0C234 18                            CLC
0C235 65 2E                         ADC ball_bonus+2
0C237 F0 33                         BEQ +done
0C239                           
0C239                               ;; Check if bonus counter is done yet
0C239 A5 3D                         LDA bonus_counter
0C23B D0 2F                         BNE +done
0C23D                           
0C23D                               ;; Bonus counter is done
0C23D                               ;; Reset bonus counter
0C23D A9 06                         LDA #BONUS_FRAMES
0C23F 85 3D                         STA bonus_counter
0C241                               
0C241                               ;; Subtract one from ball bonus ones
0C241 C6 2E                         DEC ball_bonus+2
0C243                               
0C243                               ;; Check if underflow
0C243 10 0E                         BPL +updateBonusOnScreen
0C245                           
0C245                               ;; If underflow, set 9 and subtract one from bonus tens
0C245 A9 09                         LDA #$09
0C247 85 2E                         STA ball_bonus+2
0C249 C6 2D                         DEC ball_bonus+1
0C24B                               
0C24B                               ;; Check if underflow
0C24B 10 06                         BPL +updateBonusOnScreen
0C24D                           
0C24D                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C24D A9 09                         LDA #$09
0C24F 85 2D                         STA ball_bonus+1
0C251 C6 2C                         DEC ball_bonus
0C253                           
0C253                               ;;209A 209B 209C
0C253                           +updateBonusOnScreen:
0C253 A9 20                         LDA #$20
0C255 85 00                         STA temp
0C257 A9 9C                         LDA #$9C
0C259 85 01                         STA temp+1
0C25B A2 02                         LDX #$02
0C25D                               
0C25D                               -updateNextDigit:
0C25D B5 2C                             LDA ball_bonus,x
0C25F 18                                CLC
0C260 69 01                             ADC #$01
0C262 85 02                             STA temp+2
0C264 20 35 CC                          JSR sub_WriteByteToPPUBuffer
0C267 C6 01                             DEC temp+1
0C269 CA                                DEX
0C26A 10 F1                         BPL -updateNextDigit
0C26C                                   
0C26C                           +done:0C26C                           
0C26C                               ;; Testing timed PPU scroll concept
0C26C                               .include "game/test/timed_ppuscroll_test.asm"
0C26C                           ;; Timed updates (test)
0C26C                           
0C26C                               ;; If B button is pressed
0C26C A5 10                         LDA buttons_pressed
0C26E 29 10                         AND #BUTTON_START
0C270 F0 73                         BEQ +end
0C272                           
0C272                               ;; Disable noise channel
0C272 A9 00                         LDA #$00
0C274 8D 15 40                      STA APU_STATUS
0C277 8D 0C 40                      STA NOISE_VOLUME
0C27A                               
0C27A                               ;; Set up loop fading
0C27A A9 00                         LDA #$00
0C27C 85 07                         STA temp+7
0C27E A0 08                         LDY #$08
0C280                               -fadeLoop:
0C280 84 08                             STY temp+8
0C282                           
0C282                                   ;; Wait for NMI to pass
0C282 20 28 C4                          JSR sub_WaitForNMI
0C285                                   
0C285                                   ;; Now wait for No-sprite 0
0C285                                   -
0C285 AD 02 20                              LDA PPU_STATUS
0C288 29 40                                 AND #SPRITE_0_HIT
0C28A D0 F9                             BNE -
0C28C                               
0C28C                                   ;; Now wait for Sprite 0
0C28C                                   -
0C28C AD 02 20                              LDA PPU_STATUS
0C28F 29 40                                 AND #SPRITE_0_HIT
0C291 F0 F9                             BEQ -
0C293                                       
0C293                                   ;; Setup tile row loop
0C293 A0 16                             LDY #22
0C295                                   -tileLoop:
0C295                                   
0C295                                       ;; Disable drawing
0C295 A5 12                                 LDA soft_ppu_mask
0C297 29 F7                                 AND #%11110111
0C299 8D 01 20                              STA PPU_MASK
0C29C                                       
0C29C                                       ;; Set up scanline loop
0C29C A2 08                                 LDX #$08
0C29E                                       -scanlineLoop:
0C29E E4 08                                     CPX temp+8
0C2A0 D0 0A                                     BNE +wasteTime
0C2A2                                           
0C2A2                                           ;; Restore drawing
0C2A2 A5 12                                     LDA soft_ppu_mask
0C2A4 09 08                                     ORA #%00001000
0C2A6 8D 01 20                                  STA PPU_MASK
0C2A9 4C B2 C2                                  JMP +wasteMoreTime
0C2AC                           
0C2AC                                           ;; Waste 12 frames
0C2AC                                           +wasteTime:
0C2AC E6 09                                     INC temp+9   ;+5
0C2AE C6 09                                     DEC temp+9   ;+5
0C2B0 49 00                                     EOR #$00     ;+2
0C2B2                                           
0C2B2                                           ;; Waste about 100 frames
0C2B2                                           +wasteMoreTime:
0C2B2                                           
0C2B2 86 01                                     STX temp+1     ;  3 down, 97 to go
0C2B4 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C2B6                                           -wasteLoop:
0C2B6 EA                                            NOP
0C2B7 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C2B9 CA                                            DEX        ;  5+5L down,  95-5L to go
0C2BA D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C2BC                           
0C2BC A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C2BE CA                                        DEX            ;  9+8L down, 91-8L to go
0C2BF D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C2C1                           
0C2C1 88                                    DEY
0C2C2 D0 D1                             BNE -tileLoop
0C2C4                           
0C2C4 A4 08                             LDY temp+8
0C2C6                                   
0C2C6 E6 07                             INC temp+7
0C2C8 A5 07                             LDA temp+7
0C2CA C9 02                             CMP #$02
0C2CC D0 B2                             BNE -fadeLoop
0C2CE                           
0C2CE A9 00                             LDA #$00
0C2D0 85 07                             STA temp+7
0C2D2 88                                DEY
0C2D3 D0 AB                         BNE -fadeLoop
0C2D5                               
0C2D5                               ;; Load the next level
0C2D5 E6 3E                         INC current_level
0C2D7 A5 3E                         LDA current_level
0C2D9 C9 19                         CMP #25
0C2DB D0 04                         BNE +
0C2DD A9 00                             LDA #$00
0C2DF 85 3E                             STA current_level
0C2E1                               +
0C2E1                               
0C2E1 A9 81                         LDA #LOAD_GAME_SCREEN
0C2E3 85 37                         STA screen_mode
0C2E5                           
0C2E5                           
0C2E5                           +end:
0C2E5                           
0C2E5                           
0C2E5                           +skipBallMovement:
0C2E5                               ;; Add to sprite buffer
0C2E5 A6 3B                         LDX sprite_ram_pointer
0C2E7 A5 19                         LDA ball_ypos_hi
0C2E9 9D 00 02                      STA ADDR_SPRITERAM,x
0C2EC E8                            INX
0C2ED A9 01                         LDA #BALL_TILE_CHR
0C2EF 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F2 E8                            INX
0C2F3 A9 00                         LDA #BALL_ATTR
0C2F5 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F8 E8                            INX
0C2F9 A5 17                         LDA ball_xpos_hi
0C2FB 9D 00 02                      STA ADDR_SPRITERAM,x
0C2FE E8                            INX
0C2FF 86 3B                         STX sprite_ram_pointer
0C301 4C 50 C3                      JMP +doneScreenLoad
0C304                           
0C304                           
0C304                           +checkNextScreen:
0C304                           
0C304                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C304                               ;; Upon pressing START, the selected level will start
0C304                               .include "game/include/main/select_level.asm"
0C304 A5 10                         LDA buttons_pressed
0C306 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C308 F0 3C                         BEQ +checkStartPress
0C30A                           
0C30A                                   ;; Select next level (1, 5, 9, 13, 17)
0C30A A5 3E                             LDA current_level
0C30C 18                                CLC
0C30D 69 04                             ADC #$04
0C30F C9 14                             CMP #$14
0C311 D0 02                             BNE +
0C313 A9 00                                 LDA #$00
0C315                                   +
0C315 85 3E                             STA current_level
0C317                                   
0C317                                   ;; Convert level number to two-byte value
0C317 A9 00                             LDA #$00
0C319 85 03                             STA temp+3
0C31B A5 3E                             LDA current_level
0C31D 18                                CLC
0C31E 69 01                             ADC #$01
0C320                           
0C320                               -
0C320 C9 0A                             CMP #$0A
0C322 90 08                             BCC +
0C324 E6 03                                 INC temp+3
0C326 38                                    SEC
0C327 E9 0A                                 SBC #$0A
0C329 4C 20 C3                              JMP -
0C32C                                   +
0C32C                           
0C32C                                   ;; Add level number to PPU buffer
0C32C 18                                CLC
0C32D 69 01                             ADC #$01
0C32F 85 02                             STA temp+2
0C331 A9 20                             LDA #$20
0C333 85 00                             STA temp
0C335 A9 D0                             LDA #$D0
0C337 85 01                             STA temp+1
0C339 20 35 CC                          JSR sub_WriteByteToPPUBuffer
0C33C                                   
0C33C C6 01                             DEC temp+1
0C33E A4 03                             LDY temp+3
0C340 C8                                INY
0C341 84 02                             STY temp+2
0C343 20 35 CC                          JSR sub_WriteByteToPPUBuffer
0C346                                   
0C346                               +checkStartPress:
0C346                           
0C346                           
0C346                           
0C346                               ;; If START button is pressed
0C346 A5 10                         LDA buttons_pressed
0C348 29 10                         AND #BUTTON_START
0C34A F0 04                         BEQ +
0C34C                                   ;; Start the level
0C34C A9 81                             LDA #LOAD_GAME_SCREEN
0C34E 85 37                             STA screen_mode
0C350                               +
0C350                           
0C350                           
0C350                           
0C350                           +doneScreenLoad:
0C350                           
0C350                               ;; Load animations (if any)
0C350                               .include "game/include/main/load_animations.asm"
0C350                               ;; Set up loop
0C350 A2 00                         LDX #$00
0C352                               -loop_load_animation:
0C352                                   ;; Check if current animation is active. If not, goto next
0C352 BD 44 03                          LDA explosion_active,x
0C355 D0 03                             BNE +
0C357 4C F1 C3                              JMP +next
0C35A                                   +
0C35A                           
0C35A                                   ;; Check the explosion framecounter
0C35A BD 30 03                          LDA explosion_framecounter,x
0C35D D0 26                             BNE +
0C35F                                       ;; Framecounter is 0
0C35F                                       ;; Reset to animation speed
0C35F A9 04                                 LDA #ANIMATION_SPEED
0C361 9D 30 03                              STA explosion_framecounter,x
0C364                           
0C364                                       ;; Set next animation frame, and check if we're done yet
0C364 FE 34 03                              INC explosion_currentframe,x
0C367 BD 34 03                              LDA explosion_currentframe,x
0C36A C9 0A                                 CMP #ANIM_SLIDES
0C36C D0 17                                 BNE +
0C36E                           
0C36E                                       ;; If we're done, inactivate current explosion, clean
0C36E                                       ;; up sprite RAM and go to the next one
0C36E A9 00                                 LDA #$00
0C370 9D 44 03                              STA explosion_active,x
0C373                                       
0C373 A9 09                                 LDA #SLIDE_SIZE
0C375 0A                                    ASL
0C376 0A                                    ASL
0C377 A8                                    TAY
0C378 A9 EF                                 LDA #$EF
0C37A                                       -
0C37A 88                                        DEY
0C37B 99 00 02                                  STA ADDR_SPRITERAM,y
0C37E C0 00                                     CPY #00
0C380 D0 F8                                 BNE -
0C382                                       
0C382 4C F1 C3                              JMP +next
0C385                                   +
0C385                           
0C385                                   ;; Load (x,y) position in temp variables
0C385 BD 3C 03                          LDA explosion_x,x
0C388 85 01                             STA temp+1
0C38A 85 03                             STA temp+3
0C38C BD 40 03                          LDA explosion_y,x
0C38F 85 02                             STA temp+2
0C391                           
0C391                                   ;; Load attribute in temp variable
0C391 BD 38 03                          LDA explosion_attributes,x
0C394 85 04                             STA temp+4
0C396                           
0C396                                   ;; Load current frame into Y-register
0C396 BC 34 03                          LDY explosion_currentframe,x
0C399                           
0C399                                   ;; Load current frame ROM address from table
0C399 B9 89 CD                          LDA explosion_anim_lo,y
0C39C 85 0C                             STA pointer
0C39E B9 7F CD                          LDA explosion_anim_hi,y
0C3A1 85 0D                             STA pointer+1
0C3A3                           
0C3A3                                   ;; Save x-register on stack
0C3A3 8A                                TXA
0C3A4 48                                PHA
0C3A5                           
0C3A5                                   ;; Load sprites into sprite RAM
0C3A5 A6 3B                             LDX sprite_ram_pointer
0C3A7 A0 00                             LDY #$00
0C3A9                           
0C3A9                                   ;; Prepare (x,y) offset for loop
0C3A9 84 00                             STY temp
0C3AB                           
0C3AB                                   -loop_load_sprite:
0C3AB                                   
0C3AB                                       ;; Do not draw empty sprites
0C3AB B1 0C                                 LDA (pointer),y
0C3AD F0 18                                 BEQ +nextSprite
0C3AF                                   
0C3AF                                           ;; Add y-position to sprite ram buffer
0C3AF A5 02                                     LDA temp+2
0C3B1 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3B4 E8                                        INX
0C3B5                           
0C3B5                                           ;; Get tile number from frame ROM address, and
0C3B5                                           ;; add it to sprite ram buffer
0C3B5 B1 0C                                     LDA (pointer),y
0C3B7 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3BA E8                                        INX
0C3BB                           
0C3BB                                           ;; Add attribute data to sprite ram buffer
0C3BB A5 04                                     LDA temp+4
0C3BD 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3C0 E8                                        INX
0C3C1                           
0C3C1                                           ;; Add x-position to sprite ram buffer
0C3C1 A5 03                                     LDA temp+3
0C3C3 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3C6 E8                                        INX
0C3C7                           
0C3C7                                       +nextSprite:
0C3C7                           
0C3C7                                       ;; Check if all sprites are done
0C3C7 C8                                    INY
0C3C8 C0 09                                 CPY #SLIDE_SIZE
0C3CA F0 21                                 BEQ +done
0C3CC                           
0C3CC                                       ;; Update x value
0C3CC A5 03                                 LDA temp+3
0C3CE 18                                    CLC
0C3CF 69 08                                 ADC #$08
0C3D1 85 03                                 STA temp+3
0C3D3                           
0C3D3                                       ;; Update temp for x,y position
0C3D3 E6 00                                 INC temp
0C3D5 A5 00                                 LDA temp
0C3D7 C9 03                                 CMP #SLIDE_WIDTH
0C3D9 D0 0F                                 BNE +
0C3DB                                           ;; Row is done; reset x-position
0C3DB A5 01                                     LDA temp+1
0C3DD 85 03                                     STA temp+3
0C3DF                           
0C3DF                                           ;; Update y-position
0C3DF A5 02                                     LDA temp+2
0C3E1 18                                        CLC
0C3E2 69 08                                     ADC #$08
0C3E4 85 02                                     STA temp+2
0C3E6                           
0C3E6                                           ;; Reset row counter
0C3E6 A9 00                                     LDA #$00
0C3E8 85 00                                     STA temp
0C3EA                                       +
0C3EA                           
0C3EA 4C AB C3                          JMP -loop_load_sprite
0C3ED                           
0C3ED                               +done:
0C3ED 86 3B                             STX sprite_ram_pointer
0C3EF                           
0C3EF                                   ;; Retrieve x-register from stack
0C3EF 68                                PLA
0C3F0 AA                                TAX
0C3F1                           
0C3F1                               +next:
0C3F1                                   ;; Check if all animations have been updated
0C3F1 E8                                INX
0C3F2 E0 04                             CPX #MAX_ANIMATIONS
0C3F4 F0 03                             BEQ +done
0C3F6                           
0C3F6 4C 52 C3                      JMP -loop_load_animation
0C3F9                           +done:
0C3F9                           
0C3F9                               ;; Sprite clean-up
0C3F9 A6 3B                         LDX sprite_ram_pointer
0C3FB A9 EF                         LDA #$EF
0C3FD                               -
0C3FD 9D 00 02                          STA ADDR_SPRITERAM,x
0C400 E8                                INX
0C401 D0 FA                         BNE -
0C403 4C 57 C0                      JMP MainGameLoop
0C406                           
0C406                           ;; Subroutines
0C406                           .include "include/subroutines.asm"
0C406                           
0C406                           ;; RNG
0C406                           .include "subroutine/GetRandomNumber.asm"
0C406                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C406                           ;;
0C406                           ;; subroutine/GetRandomNumber.asm
0C406                           ;;
0C406                           ;; Simple and fast random number generator by White Flame.
0C406                           ;;
0C406                           ;; Set random_seed to an arbitrary number to randomize between
0C406                           ;; gaming sessions, for instance using the frame counter upon
0C406                           ;; pressing START on the intro screen.
0C406                           ;;
0C406                           ;;     ;; IF START PRESSED:
0C406                           ;;     LDA frame_counter
0C406                           ;;     STA random_seed
0C406                           ;;
0C406                           ;; Source:
0C406                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C406                           ;;
0C406                           ;;
0C406                           
0C406                           sub_GetRandomNumber:
0C406                               ;; Force EOR if random_seed is zero
0C406 A5 16                         LDA random_seed
0C408 F0 05                         BEQ +doEor
0C40A                           
0C40A                               ;; Shift left, and EOR if the high bit is set
0C40A 0A                            ASL
0C40B F0 04                         BEQ +noEor
0C40D 90 02                         BCC +noEor
0C40F                           
0C40F                           +doEor:
0C40F 49 1D                         EOR #$1D
0C411                           
0C411                           +noEor:
0C411 85 16                         STA random_seed
0C413                           
0C413 60                            RTS
0C414                           
0C414                           
0C414                           ;; Read controller input
0C414                           .include "subroutine/ReadController.asm"
0C414                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C414                           ;;
0C414                           ;; subroutine/ReadController.asm
0C414                           ;;
0C414                           ;; Subroutine that polls the controller and stores the input
0C414                           ;; buttons in a variable. This version only handles controller
0C414                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C414                           ;;
0C414                           ;;
0C414                           
0C414                           sub_ReadController:
0C414                           
0C414                               ;; Set strobe bit
0C414 A9 01                         LDA #$01
0C416 8D 16 40                      STA JOYPAD_1
0C419                           
0C419                               ;; Set up ring counter
0C419 85 0F                         STA buttons_held
0C41B                           
0C41B                               ;; Clear strobe bit
0C41B 4A                            LSR
0C41C 8D 16 40                      STA JOYPAD_1
0C41F                           
0C41F                               ;; Loop through button presses
0C41F                               -
0C41F AD 16 40                          LDA JOYPAD_1
0C422 4A                                LSR
0C423 26 0F                             ROL buttons_held
0C425                           
0C425                               ;; Check if ring counter is done
0C425 90 F8                         BCC -
0C427                           
0C427                               ;; Return from subroutine
0C427 60                            RTS
0C428                           
0C428                           
0C428                           ;; vBlank/NMI wait
0C428                           .include "subroutine/WaitForNMI.asm"
0C428                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C428                           ;;
0C428                           ;; subroutine/WaitForVBlank.asm
0C428                           ;;
0C428                           ;; Subroutine that essentially pauses script execution until
0C428                           ;; vBlank happens.
0C428                           ;;
0C428                           ;;
0C428                           
0C428                           sub_WaitForNMI:
0C428 A9 01                         LDA #$01
0C42A 85 44                         STA check_nmi
0C42C                               -
0C42C A5 44                             LDA check_nmi
0C42E D0 FC                         BNE -
0C430 60                            RTS
0C431                           
0C431                           .include "subroutine/WaitForVBlank.asm"
0C431                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C431                           ;;
0C431                           ;; subroutine/WaitForVBlank.asm
0C431                           ;;
0C431                           ;; Subroutine that essentially pauses script execution until
0C431                           ;; vBlank happens.
0C431                           ;;
0C431                           ;;
0C431                           
0C431                           sub_WaitForVBlank:
0C431 2C 02 20                      BIT $2002
0C434 10 FB                         BPL sub_WaitForVBlank
0C436 60                            RTS
0C437                           
0C437                           
0C437                           ;; Game specific subroutines
0C437                           .include "game/include/subroutines.asm"
0C437                           ;; additional game-specific subroutines go here
0C437                           
0C437                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C437                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C437                           ;;
0C437                           ;;  sub_AddAccumulatorToScore.asm
0C437                           ;;
0C437                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C437                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C437                           ;;  actual score.
0C437                           ;;
0C437                           ;;
0C437                           
0C437                           
0C437                           sub_AddAccumulatorToScore:
0C437                           
0C437                               ;; Clear old add_to_score
0C437 A2 05                         LDX #$05
0C439 A0 00                         LDY #$00
0C43B                               -
0C43B 94 26                             STY add_to_score,x
0C43D CA                                DEX
0C43E 10 FB                         BPL -
0C440                           
0C440                               ;; Set accumulator to add_to_score variables
0C440                               ;; Check and update 100s
0C440                               -checkHundreds:
0C440 C9 64                             CMP #100
0C442 90 08                             BCC +checkTens
0C444 38                                    SEC
0C445 E9 64                                 SBC #100
0C447 E6 29                                 INC add_to_score+3
0C449 4C 40 C4                              JMP -checkHundreds
0C44C                                   +checkTens:
0C44C                           
0C44C                               ;; Check and update 10s
0C44C                               -checkTens:
0C44C C9 0A                             CMP #10
0C44E 90 08                             BCC +setOnes
0C450 38                                    SEC
0C451 E9 0A                                 SBC #10
0C453 E6 2A                                 INC add_to_score+4
0C455 4C 4C C4                              JMP -checkTens
0C458                                   +setOnes:
0C458                           
0C458                               ;; We're left with 1s
0C458 85 2B                         STA add_to_score+5
0C45A                           
0C45A                               ;; Byte for byte, add add_to_score to ball_score
0C45A A9 00                         LDA #$00
0C45C 85 38                         STA ppu_buffer_update
0C45E A4 39                         LDY ppu_buffer_pointer
0C460 A2 05                         LDX #$05
0C462                               -
0C462 B5 26                             LDA add_to_score,x
0C464 18                                CLC
0C465 75 20                             ADC ball_score,x
0C467 C9 0A                             CMP #10
0C469 90 05                             BCC +
0C46B 38                                    SEC
0C46C E9 0A                                 SBC #10
0C46E F6 1F                                 INC ball_score-1,x
0C470                                   +
0C470                                   
0C470                                   ;; Update new score digit
0C470 95 20                             STA ball_score,x
0C472                           
0C472                                   ;; Update score tile in PPU
0C472 A9 20                             LDA #$20
0C474 99 00 03                          STA ppu_buffer,y
0C477 C8                                INY
0C478 8A                                TXA
0C479 18                                CLC
0C47A 69 83                             ADC #$83
0C47C 99 00 03                          STA ppu_buffer,y
0C47F C8                                INY
0C480 B5 20                             LDA ball_score,x
0C482 18                                CLC
0C483 69 01                             ADC #$01
0C485 99 00 03                          STA ppu_buffer,y
0C488 C8                                INY
0C489                           
0C489                                   ;; Check next digit (if any left)
0C489 CA                                DEX
0C48A 30 03                             BMI +done
0C48C 4C 62 C4                      JMP -
0C48F                           
0C48F                           +done:
0C48F                               ;; Update PPU buffer pointer and status
0C48F 84 39                         STY ppu_buffer_pointer
0C491 A9 01                         LDA #$01
0C493 85 38                         STA ppu_buffer_update
0C495                           
0C495                               ;; Done: return 
0C495 60                            RTS
0C496                           
0C496                           .include "game/subroutine/BackgroundNoise.asm"
0C496                           
0C496                           sub_BackgroundNoise:
0C496 A9 32                         LDA #$32
0C498 8D 0C 40                      STA NOISE_VOLUME
0C49B A9 0E                         LDA #$0E
0C49D 8D 0E 40                      STA NOISE_PERIOD
0C4A0 85 42                         STA current_noise
0C4A2 60                            RTS0C4A3                           .include "game/subroutine/ClearScreen.asm"
0C4A3                           ;; Subroutine to clear the screen
0C4A3                           ;; If it's a game screen, add noise
0C4A3                           
0C4A3                           sub_ClearScreen:
0C4A3                               ;; Check of game screen or not
0C4A3 A5 37                         LDA screen_mode
0C4A5 29 03                         AND #CHECK_SCREEN_MODE
0C4A7 C9 01                         CMP #IS_GAME_SCREEN
0C4A9 F0 02                         BEQ +
0C4AB A9 00                             LDA #$00
0C4AD                               +
0C4AD 85 01                         STA temp+1
0C4AF                               
0C4AF                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C4AF 2C 02 20                      BIT PPU_STATUS
0C4B2 A9 20                         LDA #$20
0C4B4 8D 06 20                      STA PPU_ADDR
0C4B7 A9 00                         LDA #$00
0C4B9 8D 06 20                      STA PPU_ADDR
0C4BC                               
0C4BC                               ;; Set up tile to draw and loop
0C4BC 85 00                         STA temp
0C4BE AA                            TAX
0C4BF A8                            TAY
0C4C0                           
0C4C0                               -     
0C4C0                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C4C0 A5 00                             LDA temp
0C4C2 8D 07 20                          STA PPU_DATA
0C4C5                           
0C4C5                                   ;; Check if we should draw noise next. Noise is drawn if:
0C4C5                                   ;; - Screen mode is game screen
0C4C5                                   ;; - Y between #$06 and #$19 (inclusive)
0C4C5                                   ;; - X between #$02 and #$1D (inclusive)
0C4C5                                   
0C4C5                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C4C5 A5 01                             LDA temp+1
0C4C7 F0 1C                             BEQ +nextTileInRow
0C4C9                                   
0C4C9                                   ;; If Y < $6, skip the check
0C4C9 C0 06                             CPY #$06
0C4CB 90 18                             BCC +nextTileInRow
0C4CD                                   
0C4CD                                   ;; If X < $1, skip the check
0C4CD E0 01                             CPX #$01
0C4CF 90 14                             BCC +nextTileInRow
0C4D1                                   
0C4D1                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C4D1 E0 1D                             CPX #$1D
0C4D3 D0 04                             BNE +
0C4D5 A9 00                                 LDA #$00
0C4D7 85 00                                 STA temp
0C4D9                                   +
0C4D9 B0 0A                             BCS +nextTileInRow
0C4DB                                   
0C4DB                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C4DB 20 06 C4                          JSR sub_GetRandomNumber
0C4DE 29 07                             AND #%00000111
0C4E0 18                                CLC
0C4E1 69 68                             ADC #$68
0C4E3 85 00                             STA temp
0C4E5                           
0C4E5                           +nextTileInRow:
0C4E5                                   
0C4E5                                   ;; Check if a row has been done. If not, draw the next
0C4E5 E8                                INX
0C4E6 E0 20                             CPX #$20
0C4E8 D0 D6                             BNE -
0C4EA                                   
0C4EA                                   ;; Go to the next row (if any left)
0C4EA A2 00                             LDX #00
0C4EC C8                                INY
0C4ED                                   
0C4ED                                   ;; If Y is 1A, skip noise tile check until done drawing
0C4ED C0 1A                             CPY #$1A
0C4EF D0 04                             BNE +
0C4F1 A9 00                                 LDA #$00
0C4F3 85 01                                 STA temp+1
0C4F5                                   +
0C4F5                                   
0C4F5 C0 1E                             CPY #$1E
0C4F7 D0 C7                         BNE -
0C4F9                           
0C4F9                               ;; Clear attribute table
0C4F9 A9 23                         LDA #$23
0C4FB 8D 06 20                      STA PPU_ADDR
0C4FE A9 C0                         LDA #$C0
0C500 8D 06 20                      STA PPU_ADDR
0C503 A9 00                         LDA #$00
0C505 A2 40                         LDX #$40
0C507                               -
0C507 8D 07 20                          STA PPU_DATA
0C50A CA                                DEX
0C50B D0 FA                         BNE -
0C50D                               
0C50D 60                            RTS0C50E                           .include "game/subroutine/ColorizeBall.asm"
0C50E                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C50E                           ;;
0C50E                           ;;  Subroutine: ColorizeBall
0C50E                           ;;
0C50E                           ;;  Applies the color set through ball_flags to the ball sprite.
0C50E                           ;;
0C50E                           ;;
0C50E                           
0C50E                           
0C50E                           sub_ColorizeBall:
0C50E                           
0C50E                               ;; Get color from ball_flags
0C50E 4A                            LSR
0C50F 4A                            LSR
0C510 4A                            LSR
0C511 4A                            LSR
0C512 4A                            LSR
0C513 AA                            TAX
0C514                           
0C514                               ;; Add new light color of ball to PPU palette
0C514 A9 3F                         LDA #$3F
0C516 85 00                         STA temp
0C518 A9 11                         LDA #$11
0C51A 85 01                         STA temp+1
0C51C BD 99 CD                      LDA tbl_BallColorLight,x
0C51F 85 02                         STA temp+2
0C521 20 35 CC                      JSR sub_WriteByteToPPUBuffer
0C524                               
0C524                               ;; Add new dark color of ball to PPU palette
0C524 E6 01                         INC temp+1
0C526 BD 93 CD                      LDA tbl_BallColorDark,x
0C529 85 02                         STA temp+2
0C52B 20 35 CC                      JSR sub_WriteByteToPPUBuffer
0C52E                               
0C52E 60                            RTS
0C52F                           
0C52F                           .include "game/subroutine/ColorsMatch.asm"
0C52F                           
0C52F                           ;; Subroutine to check if ball color matches colliding tile color
0C52F                           
0C52F                           sub_ColorsMatch:
0C52F                               ;; Save tile color in temp variable
0C52F A5 3F                         LDA colliding_tile
0C531 29 0E                         AND #%00001110
0C533 85 00                         STA temp
0C535                           
0C535                               ;; Get ball color
0C535 A5 36                         LDA ball_flags
0C537 29 E0                         AND #%11100000
0C539 4A                            LSR
0C53A 4A                            LSR
0C53B 4A                            LSR
0C53C 4A                            LSR
0C53D                           
0C53D                               ;; Compare with tile color
0C53D C5 00                         CMP temp
0C53F 60                            RTS
0C540                           
0C540                           .include "game/subroutine/ConvertXYToTileType.asm"
0C540                           
0C540                           ;; Subroutine to convert the ball's position to a tile type
0C540                           ;; - Expects temp to be y-position of ball within game area
0C540                           ;; - Expects temp+1 to be x-position of ball within game area
0C540                           ;; - Puts result in accumulator and zp variable
0C540                           ;; - Corrupts X-register
0C540                           
0C540                           sub_ConvertXYToTileType:
0C540 A5 01                         LDA temp+1
0C542 4A                            LSR
0C543 4A                            LSR
0C544 4A                            LSR
0C545 4A                            LSR
0C546 85 09                         STA temp+9
0C548 A5 00                         LDA temp
0C54A 29 F0                         AND #%11110000
0C54C 18                            CLC
0C54D 65 09                         ADC temp+9
0C54F 85 09                         STA temp+9
0C551 AA                            TAX
0C552 BD 00 04                      LDA tile_type, x
0C555 85 3F                         STA colliding_tile
0C557 60                            RTS
0C558                           
0C558                           .include "game/subroutine/DisableEnableRendering.asm"
0C558                           sub_DisableRendering:
0C558                               ;; Force NMI skip, disable rendering
0C558 A9 01                     	LDA #$01
0C55A 85 14                     	STA force_skip_nmi
0C55C 20 31 C4                      JSR sub_WaitForVBlank
0C55F A5 12                         LDA soft_ppu_mask
0C561 29 E7                         AND #%11100111
0C563 8D 01 20                      STA PPU_MASK
0C566 85 12                         STA soft_ppu_mask
0C568 20 31 C4                      JSR sub_WaitForVBlank
0C56B 60                            RTS
0C56C                           
0C56C                           sub_EnableRendering:
0C56C                               ;; Enable rendering
0C56C A9 00                     	LDA #$00
0C56E 8D 05 20                  	STA PPU_SCROLL
0C571 8D 05 20                  	STA PPU_SCROLL
0C574 20 31 C4                      JSR sub_WaitForVBlank
0C577 85 14                     	STA force_skip_nmi
0C579 A5 12                         LDA soft_ppu_mask
0C57B 09 18                         ORA #%00011000
0C57D 85 12                         STA soft_ppu_mask
0C57F 8D 01 20                      STA PPU_MASK
0C582 20 31 C4                      JSR sub_WaitForVBlank
0C585 60                            RTS
0C586                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C586                           sub_drawIntroScreenLogoTile:
0C586 B9 7B CC                      LDA tbl_IntroScreenLogoChr,y
0C589 C9 60                         CMP #$60
0C58B D0 08                         BNE +
0C58D 20 06 C4                          JSR sub_GetRandomNumber
0C590 29 07                             AND #$07
0C592 18                                CLC
0C593 69 60                             ADC #$60
0C595                               +
0C595 8D 07 20                      STA PPU_DATA
0C598 60                            RTS
0C599                           .include "game/subroutine/EvaluateTileType.asm"
0C599                           
0C599                           ;; Subroutine to evaluate the colliding tile type and take its
0C599                           ;; corresponding action (move block, kill player, ...)
0C599                           ;; - Expects X-register to be the tile_type offset
0C599                           ;; - Uses zp variable colliding_tile
0C599                           
0C599                           sub_EvaluateTileType:
0C599                           
0C599                               ;; Check if collided tile is a color block
0C599 A5 3F                         LDA colliding_tile
0C59B 29 80                         AND #IS_COLOR_BLOCK
0C59D D0 03                         BNE +
0C59F 4C BA C7                          JMP +checkIfPaintBlock
0C5A2                               +
0C5A2                               
0C5A2                               ;; It's a color block. Check if the colors match
0C5A2 20 2F C5                      JSR sub_ColorsMatch
0C5A5 F0 01                         BEQ +
0C5A7                                   ;; Colors don't match - return
0C5A7 60                                RTS
0C5A8                               +
0C5A8                           
0C5A8                               ;; Colors match. Destroy color block
0C5A8 A4 39                         LDY ppu_buffer_pointer
0C5AA                               
0C5AA                               ;; (this will be a subroutine)
0C5AA                               ;; Get PPU address from YX index
0C5AA                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C5AA                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C5AA 8A                            TXA
0C5AB 29 C0                         AND #%11000000
0C5AD 18                            CLC
0C5AE 2A                            ROL
0C5AF 2A                            ROL
0C5B0 2A                            ROL
0C5B1 69 20                         ADC #$20
0C5B3 85 00                         STA temp
0C5B5 8A                            TXA
0C5B6 29 0F                         AND #%00001111
0C5B8 0A                            ASL
0C5B9 85 01                         STA temp+1
0C5BB 8A                            TXA
0C5BC 29 30                         AND #%00110000
0C5BE 0A                            ASL
0C5BF 0A                            ASL
0C5C0 18                            CLC
0C5C1 65 01                         ADC temp+1
0C5C3 85 01                         STA temp+1
0C5C5 A5 00                         LDA temp
0C5C7 69 00                         ADC #$00
0C5C9 85 00                         STA temp
0C5CB A5 01                         LDA temp+1
0C5CD 18                            CLC
0C5CE 69 C2                         ADC #$C2
0C5D0 85 01                         STA temp+1
0C5D2 A5 00                         LDA temp
0C5D4 69 00                         ADC #$00
0C5D6 85 00                         STA temp
0C5D8                           
0C5D8                               
0C5D8                               ;; (this will also be a subroutine eventually)
0C5D8                               ;; TILE 1: if metatile on top left is solid, draw
0C5D8                               ;; null tile, else draw random noise tile
0C5D8 A9 00                         LDA #$00
0C5DA 85 38                         STA ppu_buffer_update
0C5DC                               
0C5DC A5 00                         LDA temp
0C5DE 99 00 03                      STA ppu_buffer,y
0C5E1 C8                            INY
0C5E2 A5 01                         LDA temp+1
0C5E4 99 00 03                      STA ppu_buffer,y
0C5E7 C8                            INY
0C5E8                               
0C5E8 8A                            TXA
0C5E9 29 0F                         AND #%00001111
0C5EB F0 11                         BEQ +drawRandomTile
0C5ED                           
0C5ED 8A                            TXA
0C5EE 29 F0                         AND #%11110000
0C5F0 F0 0C                         BEQ +drawRandomTile
0C5F2                           
0C5F2 BD EF 03                      LDA tile_type-17,x
0C5F5 29 01                         AND #%00000001
0C5F7 F0 05                         BEQ +drawRandomTile  
0C5F9                           
0C5F9                               ;; Draw a null tile
0C5F9 A9 00                         LDA #$00
0C5FB 4C 06 C6                      JMP +addToPPUBuffer
0C5FE                               
0C5FE                           +drawRandomTile:
0C5FE                               ;; Draw a random tile
0C5FE 20 06 C4                      JSR sub_GetRandomNumber
0C601 29 07                         AND #%00000111
0C603 18                            CLC
0C604 69 68                         ADC #$68
0C606                               
0C606                               ;; Add tile to ppu buffer
0C606                           +addToPPUBuffer:
0C606 99 00 03                      STA ppu_buffer,y
0C609 C8                            INY
0C60A                           
0C60A                               ;; TILE 2: If metatile above is solid, draw null,
0C60A                               ;; else draw random noise.
0C60A E6 01                         INC temp+1
0C60C A5 00                         LDA temp
0C60E 99 00 03                      STA ppu_buffer,y
0C611 C8                            INY
0C612 A5 01                         LDA temp+1
0C614 99 00 03                      STA ppu_buffer,y
0C617 C8                            INY
0C618                               
0C618 8A                            TXA
0C619 29 F0                         AND #%11110000
0C61B F0 0C                         BEQ +drawRandomTile
0C61D                               
0C61D BD F0 03                      LDA tile_type-16,x
0C620 29 01                         AND #%00000001
0C622 F0 05                         BEQ +drawRandomTile
0C624                               
0C624 A9 00                         LDA #%00
0C626 4C 31 C6                      JMP +addToPPUBuffer
0C629                           
0C629                           +drawRandomTile:
0C629 20 06 C4                      JSR sub_GetRandomNumber
0C62C 29 07                         AND #%00000111
0C62E 18                            CLC
0C62F 69 68                         ADC #$68
0C631                           
0C631                           +addToPPUBuffer:
0C631 99 00 03                      STA ppu_buffer,y
0C634 C8                            INY
0C635                               
0C635                               ;; TILE 3 - If metatile left is solid, draw null,
0C635                               ;; else draw random noise.
0C635 A5 01                         LDA temp+1
0C637 18                            CLC
0C638 69 1F                         ADC #$1F
0C63A 85 01                         STA temp+1
0C63C A5 00                         LDA temp
0C63E 69 00                         ADC #$00
0C640 85 00                         STA temp
0C642 99 00 03                      STA ppu_buffer,y
0C645 C8                            INY
0C646 A5 01                         LDA temp+1
0C648 99 00 03                      STA ppu_buffer,y
0C64B C8                            INY
0C64C                               
0C64C 8A                            TXA
0C64D 29 0F                         AND #%00001111
0C64F F0 0C                         BEQ +drawRandomTile
0C651                               
0C651 BD FF 03                      LDA tile_type-1,x
0C654 29 01                         AND #%00000001
0C656 F0 05                         BEQ +drawRandomTile
0C658                               
0C658 A9 00                         LDA #%00
0C65A 4C 65 C6                      JMP +addToPPUBuffer
0C65D                           
0C65D                           +drawRandomTile:
0C65D 20 06 C4                      JSR sub_GetRandomNumber
0C660 29 07                         AND #%00000111
0C662 18                            CLC
0C663 69 68                         ADC #$68
0C665                               
0C665                           +addToPPUBuffer:
0C665 99 00 03                      STA ppu_buffer,y
0C668 C8                            INY
0C669                               
0C669                               ;; TILE 4 - Always random noise
0C669 E6 01                         INC temp+1
0C66B A5 00                         LDA temp
0C66D 99 00 03                      STA ppu_buffer,y
0C670 C8                            INY
0C671 A5 01                         LDA temp+1
0C673 99 00 03                      STA ppu_buffer,y
0C676 C8                            INY
0C677 20 06 C4                      JSR sub_GetRandomNumber
0C67A 29 07                         AND #%00000111
0C67C 18                            CLC
0C67D 69 68                         ADC #$68
0C67F 99 00 03                      STA ppu_buffer,y
0C682 C8                            INY
0C683                           
0C683                               ;; TILE 5 - If tile on the right is solid, skip,
0C683                               ;; else draw random noise tile
0C683 E6 01                         INC temp+1
0C685                               
0C685 8A                            TXA
0C686 29 0F                         AND #%00001111
0C688 C9 0D                         CMP #$0D
0C68A F0 1F                         BEQ +skipTile
0C68C                               
0C68C BD 01 04                      LDA tile_type+1,x
0C68F 29 01                         AND #%00000001
0C691 D0 18                         BNE +skipTile
0C693 A5 00                             LDA temp
0C695 99 00 03                          STA ppu_buffer,y
0C698 C8                                INY
0C699 A5 01                             LDA temp+1
0C69B 99 00 03                          STA ppu_buffer,y
0C69E C8                                INY
0C69F 20 06 C4                          JSR sub_GetRandomNumber
0C6A2 29 07                             AND #%00000111
0C6A4 18                                CLC
0C6A5 69 68                             ADC #$68
0C6A7 99 00 03                          STA ppu_buffer,y
0C6AA C8                                INY    
0C6AB                               +skipTile:
0C6AB                           
0C6AB                               ;; TILE 6 - If tile on bottom is solid, skip,
0C6AB                               ;; else draw random noise
0C6AB A5 01                         LDA temp+1
0C6AD 18                            CLC
0C6AE 69 1F                         ADC #$1F
0C6B0 85 01                         STA temp+1
0C6B2 A5 00                         LDA temp
0C6B4 69 00                         ADC #$00
0C6B6 85 00                         STA temp
0C6B8                           
0C6B8 8A                            TXA
0C6B9 29 F0                         AND #%11110000
0C6BB C9 90                         CMP #$90
0C6BD F0 1F                         BEQ +skipTile
0C6BF                           
0C6BF BD 10 04                      LDA tile_type+16,x
0C6C2 29 01                         AND #%00000001
0C6C4 D0 18                         BNE +skipTile
0C6C6 A5 00                             LDA temp
0C6C8 99 00 03                          STA ppu_buffer,y
0C6CB C8                                INY
0C6CC A5 01                             LDA temp+1
0C6CE 99 00 03                          STA ppu_buffer,y
0C6D1 C8                                INY
0C6D2 20 06 C4                          JSR sub_GetRandomNumber
0C6D5 29 07                             AND #%00000111
0C6D7 18                                CLC
0C6D8 69 68                             ADC #$68
0C6DA 99 00 03                          STA ppu_buffer,y
0C6DD C8                                INY    
0C6DE                               +skipTile:
0C6DE                               
0C6DE                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C6DE                               ;; else draw random noise
0C6DE E6 01                         INC temp+1
0C6E0                           
0C6E0 8A                            TXA
0C6E1 29 F0                         AND #%11110000
0C6E3 C9 90                         CMP #$90
0C6E5 F0 26                         BEQ +skipTile
0C6E7                               
0C6E7 8A                            TXA
0C6E8 29 0F                         AND #%00001111
0C6EA C9 0D                         CMP #$0D
0C6EC F0 1F                         BEQ +skipTile
0C6EE                               
0C6EE BD 11 04                      LDA tile_type+17,x
0C6F1 29 01                         AND #%00000001
0C6F3 D0 18                         BNE +skipTile
0C6F5 A5 00                             LDA temp
0C6F7 99 00 03                          STA ppu_buffer,y
0C6FA C8                                INY
0C6FB A5 01                             LDA temp+1
0C6FD 99 00 03                          STA ppu_buffer,y
0C700 C8                                INY
0C701 20 06 C4                          JSR sub_GetRandomNumber
0C704 29 07                             AND #%00000111
0C706 18                                CLC
0C707 69 68                             ADC #$68
0C709 99 00 03                          STA ppu_buffer,y
0C70C C8                                INY    
0C70D                               +skipTile:   
0C70D                           
0C70D                           
0C70D                               ;; - Update attribute table accordingly through ppu buffer
0C70D A9 23                         LDA #$23
0C70F 99 00 03                      STA ppu_buffer,y
0C712 C8                            INY
0C713                               
0C713 8A                            TXA
0C714 29 F0                         AND #%11110000
0C716 4A                            LSR
0C717 4A                            LSR
0C718 4A                            LSR
0C719 4A                            LSR
0C71A 18                            CLC
0C71B 69 01                         ADC #1
0C71D 4A                            LSR
0C71E 0A                            ASL
0C71F 0A                            ASL
0C720 0A                            ASL
0C721 18                            CLC
0C722 69 C8                         ADC #$C8
0C724 85 00                         STA temp
0C726 8A                            TXA
0C727 29 0F                         AND #%00001111
0C729 18                            CLC
0C72A 69 01                         ADC #$01
0C72C 4A                            LSR
0C72D 18                            CLC
0C72E 65 00                         ADC temp
0C730 85 00                         STA temp
0C732 99 00 03                      STA ppu_buffer,y
0C735 C8                            INY
0C736                                  
0C736 8A                            TXA
0C737 29 10                         AND #%00010000
0C739 F0 05                         BEQ +
0C73B A9 F0                             LDA #%11110000
0C73D 4C 42 C7                          JMP ++
0C740                               +
0C740 A9 0F                         LDA #%00001111
0C742                               ++
0C742 85 02                         STA temp+2
0C744                               
0C744 8A                            TXA
0C745 48                            PHA
0C746 29 01                         AND #%00000001
0C748 F0 07                         BEQ +
0C74A A5 02                             LDA temp+2
0C74C 09 CC                             ORA #%11001100
0C74E 4C 55 C7                          JMP ++
0C751                               +
0C751 A5 02                         LDA temp+2
0C753 09 33                         ORA #%00110011
0C755                               ++
0C755 85 02                         STA temp+2
0C757                               
0C757 A5 00                         LDA temp
0C759 38                            SEC
0C75A E9 C0                         SBC #$C0
0C75C AA                            TAX
0C75D BD A0 04                      LDA tile_attributes,x
0C760 25 02                         AND temp+2
0C762 9D A0 04                      STA tile_attributes,x
0C765 99 00 03                      STA ppu_buffer,y
0C768 C8                            INY
0C769 68                            PLA
0C76A AA                            TAX
0C76B                           
0C76B                               ;; Tell PPU to update tiles and attributes next frame
0C76B 84 39                         STY ppu_buffer_pointer
0C76D A9 01                         LDA #$01
0C76F 85 38                         STA ppu_buffer_update
0C771                            
0C771                               
0C771                               ;; - Load destruction animation on tile
0C771                               ;; Get most recent slot for explosion    
0C771 8A                            TXA
0C772 85 02                         STA temp+2
0C774 A6 3A                         LDX explosion_pointer
0C776                           
0C776                               ;; If 0, use max pointer value
0C776 D0 02                         BNE +
0C778 A2 04                             LDX #MAX_ANIMATIONS
0C77A                               +
0C77A                           
0C77A                               ;; Decrease pointer by one
0C77A CA                            DEX
0C77B 86 3A                         STX explosion_pointer
0C77D                           
0C77D                               ;; Load explosion data into RAM
0C77D A9 00                         LDA #$00
0C77F 9D 34 03                      STA explosion_currentframe,x
0C782                           
0C782 A9 04                         LDA #ANIMATION_SPEED
0C784 9D 30 03                      STA explosion_framecounter,x
0C787                           
0C787 A5 02                         LDA temp+2
0C789 29 0F                         AND #%00001111
0C78B A8                            TAY
0C78C B9 E8 D4                      LDA tbl_Times16,y
0C78F 18                            CLC
0C790 69 0E                         ADC #$0E
0C792 9D 3C 03                      STA explosion_x,x
0C795                           
0C795 A5 02                         LDA temp+2
0C797 29 F0                         AND #%11110000
0C799 18                            CLC
0C79A 69 29                         ADC #$29
0C79C 9D 40 03                      STA explosion_y,x
0C79F                           
0C79F A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C7A1 9D 38 03                      STA explosion_attributes,x
0C7A4 A9 01                         LDA #$01
0C7A6 9D 44 03                      STA explosion_active,x
0C7A9                           
0C7A9 A5 02                         LDA temp+2
0C7AB AA                            TAX
0C7AC                               
0C7AC                               
0C7AC                               ;; - Write #$00 in tile type ram (makes not-solid)
0C7AC A9 00                         LDA #$00
0C7AE 9D 00 04                      STA tile_type, x
0C7B1                           
0C7B1                           
0C7B1                               ;; Add (80 + level number) to score
0C7B1 A5 3E                         LDA current_level
0C7B3 18                            CLC
0C7B4 69 51                         ADC #81
0C7B6 20 37 C4                      JSR sub_AddAccumulatorToScore
0C7B9                           
0C7B9                           
0C7B9                               ;; - If there are no color blocks left:
0C7B9                               ;;   - Freeze ball
0C7B9                               ;;   - Initiate level-win state
0C7B9                               ;; [@TODO]
0C7B9                               
0C7B9 60                            RTS
0C7BA                           
0C7BA                           +checkIfPaintBlock:
0C7BA                           
0C7BA                           
0C7BA                               ;; Check if collided tile is a paint block
0C7BA A5 3F                         LDA colliding_tile
0C7BC 29 20                         AND #IS_PAINT_BLOCK
0C7BE F0 1A                         BEQ +checkIfDeathBlock
0C7C0                                   ;; It's a paint block. Update ball color
0C7C0                                   ;; Save x-register
0C7C0 8A                                TXA
0C7C1 48                                PHA
0C7C2                           
0C7C2                                   ;; Get tile color
0C7C2 A5 3F                             LDA colliding_tile
0C7C4 29 0E                             AND #%00001110
0C7C6 0A                                ASL
0C7C7 0A                                ASL
0C7C8 0A                                ASL
0C7C9 0A                                ASL
0C7CA 85 00                             STA temp
0C7CC                           
0C7CC                                   ;; Apply tile color to ball
0C7CC A5 36                             LDA ball_flags
0C7CE 29 1F                             AND #%00011111
0C7D0 05 00                             ORA temp
0C7D2 85 36                             STA ball_flags
0C7D4 20 0E C5                          JSR sub_ColorizeBall
0C7D7                           
0C7D7                                   ;; Restore x-register
0C7D7 68                                PLA
0C7D8 AA                                TAX
0C7D9                           
0C7D9                                   ;; Return
0C7D9 60                                RTS
0C7DA                               +checkIfDeathBlock:
0C7DA                           
0C7DA                               ;; Check if collided tile is a death block
0C7DA A5 3F                         LDA colliding_tile
0C7DC 29 10                         AND #IS_DEATH_BLOCK
0C7DE F0 01                         BEQ +checkIfMoveBlock
0C7E0                                   ;; It is a death block. Kill player and return (@TODO)
0C7E0                           ;        LDA ball_flags
0C7E0                           ;        ORA #%00000101
0C7E0                           ;        STA ball_flags
0C7E0 60                                RTS
0C7E1                               +checkIfMoveBlock:
0C7E1                           
0C7E1                               ;; Check if collided tile is a move block
0C7E1 A5 3F                         LDA colliding_tile
0C7E3 29 40                         AND #IS_MOVE_BLOCK
0C7E5 F0 07                         BEQ +done
0C7E7                                   ;; It is a move block. Check if colors match
0C7E7 20 2F C5                          JSR sub_ColorsMatch
0C7EA F0 01                             BEQ +
0C7EC                                       ;; Colors don't match - return
0C7EC 60                                    RTS
0C7ED                                   +
0C7ED                           
0C7ED                                   ;; Colors match.
0C7ED                                   ;; - Check if next tile is a solid
0C7ED                                   ;; - If not, move the tile:
0C7ED                                   ;;   - Add the tiles that need updating to ppu buffer
0C7ED                                   ;;   - Add move tile sprite over the original tile
0C7ED                                   ;;   - Initiate moving the sprite that way for 16px
0C7ED                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C7ED                                   ;;   - Update attribute table accordingly through ppu buffer
0C7ED                                   ;; - After moving the sprite, in a different routine:
0C7ED                                   ;;   - Add move tile data on the new tile location
0C7ED                                   ;;   - Write the original tile type data on new position in ram
0C7ED                                   ;;   - Destroy sprite
0C7ED                                   ;;   - Update attribute table accordingly through ppu buffer
0C7ED                                   ;; (@TODO)
0C7ED 60                                RTS
0C7EE                               +done:
0C7EE                           
0C7EE                               ;; Return
0C7EE 60                            RTS
0C7EF                           
0C7EF                           .include "game/subroutine/InitiateNudge.asm"
0C7EF                           
0C7EF                           sub_InitiateNudge:
0C7EF 85 36                         STA ball_flags
0C7F1 A9 05                         LDA #NUDGE_FRAMES
0C7F3 85 3C                         STA nudge_counter
0C7F5 60                            RTS
0C7F6                           
0C7F6                           .include "game/subroutine/JumpToPointer.asm"
0C7F6                           sub_JumpToPointer:
0C7F6 6C 0C 00                      JMP (pointer)
0C7F9                               ;RTS must be handled by the routine (pointer) jumps to
0C7F9                           .include "game/subroutine/LoadGameScreen.asm"
0C7F9                           sub_LoadGameScreen:
0C7F9                           
0C7F9                               ;; Clear the screen
0C7F9 20 A3 C4                      JSR sub_ClearScreen
0C7FC                               
0C7FC                               ;; Clear collision and attribute data
0C7FC A2 00                         LDX #$00
0C7FE 8A                            TXA
0C7FF                               -
0C7FF 9D 00 04                          STA tile_type,x
0C802 E8                                INX
0C803 D0 FA                         BNE -
0C805                               
0C805                               ;; Get pointer from current level
0C805 A6 3E                         LDX current_level
0C807 BD 9D D4                      LDA tbl_lvl_layout_lo,x
0C80A 85 0C                         STA pointer
0C80C BD 84 D4                      LDA tbl_lvl_layout_hi,x
0C80F 85 0D                         STA pointer+1
0C811                           
0C811                               ;; Set up the loop
0C811 A0 00                         LDY #$00
0C813                           -drawRowColumnLoop:
0C813                           
0C813                               ;; Load (x,y) of current set of tiles
0C813 B1 0C                         LDA (pointer),y
0C815                           
0C815                               ;; Check if level is done; if so, skip the loop
0C815 C9 FF                         CMP #LEVEL_END
0C817 D0 03                         BNE +
0C819 4C 62 C9                          JMP +doneLevelLoad
0C81C                               +
0C81C                           
0C81C                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C81C 85 00                         STA temp
0C81E C8                            INY
0C81F B1 0C                         LDA (pointer),y
0C821 85 01                         STA temp+1
0C823                               
0C823                               ;; Convert (x,y) to PPU address
0C823                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C823 A5 00                         LDA temp
0C825 29 0F                         AND #%00001111
0C827 4A                            LSR
0C828 4A                            LSR
0C829 09 20                         ORA #$20
0C82B 85 02                         STA temp+2
0C82D                               
0C82D                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C82D A5 00                         LDA temp
0C82F 29 F0                         AND #%11110000
0C831 4A                            LSR
0C832 4A                            LSR
0C833 4A                            LSR
0C834 85 03                         STA temp+3
0C836                               
0C836 A5 00                         LDA temp
0C838 29 03                         AND #%00000011
0C83A AA                            TAX
0C83B BD F8 D4                      LDA tbl_Times64,x
0C83E 18                            CLC
0C83F 65 03                         ADC temp+3
0C841 18                            CLC
0C842 69 C2                         ADC #$C2
0C844 85 03                         STA temp+3
0C846                               
0C846                               ;; Add carry to temp+2
0C846 A5 02                         LDA temp+2
0C848 69 00                         ADC #$00
0C84A 85 02                         STA temp+2
0C84C                           
0C84C                               ;; Convert tile data to loop count and tile type
0C84C                               ;; temp+4 = color
0C84C A5 01                         LDA temp+1
0C84E 29 07                         AND #%00000111
0C850 85 04                         STA temp+4
0C852                               
0C852                               ;; If color = 7, this is a wall
0C852 C9 07                         CMP #%00000111
0C854 F0 12                         BEQ +wallHack
0C856                                   
0C856                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C856 29 01                             AND #%00000001
0C858 F0 02                             BEQ +
0C85A A9 05                                 LDA #$05
0C85C                                   +
0C85C 85 07                             STA temp+7
0C85E                                
0C85E                                   ;; temp+5 = tile type
0C85E A5 01                             LDA temp+1
0C860 4A                                LSR
0C861 4A                                LSR
0C862 4A                                LSR
0C863 29 03                             AND #%00000011
0C865 4C 6E C8                          JMP +setTileType
0C868                               +wallHack:
0C868                               
0C868                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C868 A9 00                         LDA #$00
0C86A 85 07                         STA temp+7
0C86C A9 04                         LDA #$04
0C86E                           
0C86E                           +setTileType:    
0C86E 85 05                         STA temp+5
0C870                               
0C870                               ;; X = tile offset
0C870 18                            CLC
0C871 65 07                         ADC temp+7
0C873 AA                            TAX
0C874                               
0C874                               ;; temp+6 = number of tiles
0C874 A5 01                         LDA temp+1
0C876 29 60                         AND #%01100000
0C878 4A                            LSR
0C879 4A                            LSR
0C87A 4A                            LSR
0C87B 4A                            LSR
0C87C 4A                            LSR
0C87D 85 06                         STA temp+6
0C87F                               
0C87F                               ;; Translate (x,y) to (y,x) for tile RAM
0C87F A5 00                         LDA temp
0C881 0A                            ASL
0C882 0A                            ASL
0C883 0A                            ASL
0C884 0A                            ASL
0C885 85 08                         STA temp+8
0C887 A5 00                         LDA temp
0C889 4A                            LSR
0C88A 4A                            LSR
0C88B 4A                            LSR
0C88C 4A                            LSR
0C88D 05 08                         ORA temp+8
0C88F 85 00                         STA temp
0C891                               
0C891                               ;; Set up loop
0C891 98                            TYA
0C892 48                            PHA
0C893 A4 06                         LDY temp+6
0C895                           
0C895                               -drawTileLoop:
0C895                                   ;; Write PPU address
0C895 2C 02 20                          BIT PPU_STATUS
0C898 A5 02                             LDA temp+2
0C89A 8D 06 20                          STA PPU_ADDR
0C89D A5 03                             LDA temp+3
0C89F 8D 06 20                          STA PPU_ADDR
0C8A2                                   
0C8A2                                   ;; Write first and second tile
0C8A2 BD FC D4                          LDA tbl_GametileTopLeft,x
0C8A5 8D 07 20                          STA PPU_DATA
0C8A8 BD 06 D5                          LDA tbl_GametileTopRight,x
0C8AB 8D 07 20                          STA PPU_DATA
0C8AE                                   
0C8AE                                   ;; Update PPU address
0C8AE 2C 02 20                          BIT PPU_STATUS
0C8B1 A5 02                             LDA temp+2
0C8B3 8D 06 20                          STA PPU_ADDR
0C8B6 A5 03                             LDA temp+3
0C8B8 18                                CLC
0C8B9 69 20                             ADC #$20
0C8BB 8D 06 20                          STA PPU_ADDR
0C8BE                                   
0C8BE                                   ;; Write third and fourth tile
0C8BE BD 10 D5                          LDA tbl_GametileBottomLeft,x
0C8C1 8D 07 20                          STA PPU_DATA
0C8C4 BD 1A D5                          LDA tbl_GametileBottomRight,x
0C8C7 8D 07 20                          STA PPU_DATA
0C8CA                           
0C8CA                                   ;; Push x-register to stack
0C8CA 8A                                TXA
0C8CB 48                                PHA
0C8CC                                   
0C8CC                                   ;; Update tile RAM (aka collision table)
0C8CC A6 05                             LDX temp+5
0C8CE BD 24 D5                          LDA tbl_GameTileRamByte,x
0C8D1 05 04                             ORA temp+4
0C8D3 0A                                ASL
0C8D4 09 01                             ORA #%00000001
0C8D6 A6 00                             LDX temp
0C8D8 9D 00 04                          STA tile_type,x
0C8DB                           
0C8DB                                   ;; Check if shade 1 should be drawn
0C8DB E8                                INX
0C8DC BD 00 04                          LDA tile_type,x
0C8DF D0 05                             BNE +
0C8E1 A9 00                                 LDA #$00
0C8E3 8D 07 20                              STA PPU_DATA
0C8E6                                   +
0C8E6                                   
0C8E6                                   ;; Check if shade 2 should be drawn
0C8E6 A5 03                             LDA temp+3
0C8E8 18                                CLC
0C8E9 69 41                             ADC #$41
0C8EB 85 03                             STA temp+3
0C8ED A5 02                             LDA temp+2
0C8EF 69 00                             ADC #$00
0C8F1 85 02                             STA temp+2
0C8F3                                   
0C8F3 8A                                TXA
0C8F4 18                                CLC
0C8F5 69 0F                             ADC #$0F
0C8F7 AA                                TAX
0C8F8                                   
0C8F8 BD 00 04                          LDA tile_type,x
0C8FB D0 0F                             BNE +
0C8FD A5 02                                 LDA temp+2
0C8FF 8D 06 20                              STA PPU_ADDR
0C902 A5 03                                 LDA temp+3
0C904 8D 06 20                              STA PPU_ADDR
0C907 A9 00                                 LDA #$00
0C909 8D 07 20                              STA PPU_DATA
0C90C                                   +
0C90C                           
0C90C                                   ;; Check if shade 3 should be drawn
0C90C E8                                INX
0C90D E6 03                             INC temp+3
0C90F BD 00 04                          LDA tile_type,x
0C912 D0 0F                             BNE +
0C914 A5 02                                 LDA temp+2
0C916 8D 06 20                              STA PPU_ADDR
0C919 A5 03                                 LDA temp+3
0C91B 8D 06 20                              STA PPU_ADDR
0C91E A9 00                                 LDA #$00
0C920 8D 07 20                              STA PPU_DATA
0C923                                   +
0C923                                   
0C923                                   ;; Restore x-register from stack
0C923 68                                PLA
0C924 AA                                TAX
0C925                                   
0C925                                   ;; Reset pointer for next tile
0C925 A5 03                             LDA temp+3
0C927 38                                SEC
0C928 E9 42                             SBC #$42
0C92A 85 03                             STA temp+3
0C92C A5 02                             LDA temp+2
0C92E E9 00                             SBC #$00
0C930 85 02                             STA temp+2
0C932                                   
0C932                                   ;; Draw next metatile in this loop (if any left)
0C932 88                                DEY
0C933 30 27                             BMI +doneDrawingRowColumn
0C935                                   
0C935                                   ;; Is it a row or a column?
0C935 A5 01                             LDA temp+1
0C937 10 17                             BPL +
0C939                                       ;; It is a column: move pointer down (+$40)
0C939 A5 03                                 LDA temp+3
0C93B 18                                    CLC
0C93C 69 40                                 ADC #$40
0C93E 85 03                                 STA temp+3
0C940 A5 02                                 LDA temp+2
0C942 69 00                                 ADC #$00
0C944 85 02                                 STA temp+2
0C946                                       
0C946                                       ;; Add 16 to temp (as a tile RAM pointer)
0C946 A5 00                                 LDA temp
0C948 18                                    CLC
0C949 69 10                                 ADC #$10
0C94B 85 00                                 STA temp
0C94D 4C 59 C9                              JMP +drawNextTile
0C950                                   +
0C950                                   
0C950                                   ;; It is a row: move pointer right (+$02)
0C950 A5 03                             LDA temp+3
0C952 18                                CLC
0C953 69 02                             ADC #$02
0C955 85 03                             STA temp+3
0C957                                   
0C957                                   ;; Add 1 to temp (as a tile RAM pointer)
0C957 E6 00                             INC temp
0C959                           
0C959                               
0C959                               ;; Next tile in the row/column
0C959                                   +drawNextTile:
0C959 4C 95 C8                      JMP -drawTileLoop
0C95C                           
0C95C                               ;; Go to the next set of tiles
0C95C                           +doneDrawingRowColumn:
0C95C 68                            PLA
0C95D A8                            TAY
0C95E C8                            INY
0C95F 4C 13 C8                      JMP -drawRowColumnLoop
0C962                           
0C962                           ;; Level loading is done
0C962                           +doneLevelLoad:
0C962                           
0C962                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C962 A9 20                         LDA #$20
0C964 8D 06 20                      STA PPU_ADDR
0C967 A9 A2                         LDA #$A2
0C969 8D 06 20                      STA PPU_ADDR
0C96C A9 35                         LDA #$35
0C96E 20 9C CB                      JSR sub_Draw28HorizontalTiles
0C971                           
0C971                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C971 A9 23                         LDA #$23
0C973 8D 06 20                      STA PPU_ADDR
0C976 A9 42                         LDA #$42
0C978 8D 06 20                      STA PPU_ADDR
0C97B A9 31                         LDA #$31
0C97D 20 9C CB                      JSR sub_Draw28HorizontalTiles
0C980                           
0C980                               ;; Left & right game bounds
0C980                               ;; Set PPU_ADDR and store in temp variables
0C980 A9 20                         LDA #$20
0C982 85 00                         STA temp
0C984 8D 06 20                      STA PPU_ADDR
0C987 A9 C1                         LDA #$C1
0C989 85 01                         STA temp+1
0C98B 8D 06 20                      STA PPU_ADDR
0C98E                               
0C98E                               ;; Set vertical bound tile and set up loop
0C98E A0 33                         LDY #$33
0C990 A2 14                         LDX #20
0C992                               -
0C992                                   ;; Show left tile
0C992 8C 07 20                          STY PPU_DATA
0C995                                   
0C995                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C995 A5 00                             LDA temp
0C997 8D 06 20                          STA PPU_ADDR
0C99A A5 01                             LDA temp+1
0C99C 18                                CLC
0C99D 69 1D                             ADC #29
0C99F 85 01                             STA temp+1
0C9A1 8D 06 20                          STA PPU_ADDR
0C9A4                           
0C9A4                                   ;; Show right tile
0C9A4 8C 07 20                          STY PPU_DATA
0C9A7                           
0C9A7                                   ;; Check if we're done yet
0C9A7 CA                                DEX
0C9A8 F0 18                             BEQ +drawCorners
0C9AA                                   
0C9AA                                   ;; Not done yet: add 3 to low byte for next left bound
0C9AA A5 01                             LDA temp+1
0C9AC 18                                CLC
0C9AD 69 03                             ADC #3
0C9AF 85 01                             STA temp+1
0C9B1                                   
0C9B1                                   ;; Apply carry to high byte
0C9B1 A5 00                             LDA temp
0C9B3 69 00                             ADC #$00
0C9B5 85 00                             STA temp
0C9B7                                   
0C9B7                                   ;; Store next PPU_ADDR to draw at
0C9B7 8D 06 20                          STA PPU_ADDR
0C9BA A5 01                             LDA temp+1
0C9BC 8D 06 20                          STA PPU_ADDR
0C9BF 4C 92 C9                      JMP -
0C9C2                               
0C9C2                               
0C9C2                           
0C9C2                           +drawCorners:
0C9C2                               ;; Draw the corners of the playing field
0C9C2 A9 20                         LDA #$20
0C9C4 8D 06 20                      STA PPU_ADDR
0C9C7 A9 A1                         LDA #$A1
0C9C9 8D 06 20                      STA PPU_ADDR
0C9CC A9 39                         LDA #$39
0C9CE 8D 07 20                      STA PPU_DATA
0C9D1                           
0C9D1 A9 20                         LDA #$20
0C9D3 8D 06 20                      STA PPU_ADDR
0C9D6 A9 BE                         LDA #$BE
0C9D8 8D 06 20                      STA PPU_ADDR
0C9DB A9 3A                         LDA #$3A
0C9DD 8D 07 20                      STA PPU_DATA
0C9E0                               ;; (added background tile for Sprite-0 hit)
0C9E0 A9 3F                         LDA #$3F
0C9E2 8D 07 20                      STA PPU_DATA
0C9E5                           
0C9E5 A9 23                         LDA #$23
0C9E7 8D 06 20                      STA PPU_ADDR
0C9EA A9 41                         LDA #$41
0C9EC 8D 06 20                      STA PPU_ADDR
0C9EF A9 36                         LDA #$36
0C9F1 8D 07 20                      STA PPU_DATA
0C9F4                           
0C9F4 A9 23                         LDA #$23
0C9F6 8D 06 20                      STA PPU_ADDR
0C9F9 A9 5E                         LDA #$5E
0C9FB 8D 06 20                      STA PPU_ADDR
0C9FE A9 34                         LDA #$34
0CA00 8D 07 20                      STA PPU_DATA
0CA03                           
0CA03                           
0CA03                               ;; Draw the hud labels
0CA03 A9 20                         LDA #$20
0CA05 8D 06 20                      STA PPU_ADDR
0CA08 A9 62                         LDA #$62
0CA0A 8D 06 20                      STA PPU_ADDR
0CA0D A2 00                         LDX #$00
0CA0F                               -
0CA0F BD 29 D5                          LDA tbl_HudText,x
0CA12 8D 07 20                          STA PPU_DATA
0CA15 E8                                INX
0CA16 E0 1C                             CPX #28
0CA18 D0 F5                         BNE -
0CA1A                           
0CA1A                           
0CA1A                               ;; Draw the current score
0CA1A A9 20                         LDA #$20
0CA1C 8D 06 20                      STA PPU_ADDR
0CA1F A9 83                         LDA #$83
0CA21 8D 06 20                      STA PPU_ADDR
0CA24 A2 00                         LDX #$00
0CA26                               -
0CA26 B5 20                             LDA ball_score,x
0CA28 18                                CLC
0CA29 69 01                             ADC #$01
0CA2B 8D 07 20                          STA PPU_DATA
0CA2E E8                                INX
0CA2F E0 06                             CPX #$06
0CA31 D0 F3                         BNE -
0CA33                           
0CA33                           
0CA33                               ;; Draw the level number
0CA33                               ;; (with primitive HEX>DEC)
0CA33 A5 3E                         LDA current_level
0CA35 18                            CLC
0CA36 69 01                         ADC #$01
0CA38 85 01                         STA temp+1
0CA3A                               
0CA3A C9 14                         CMP #20
0CA3C B0 13                         BCS +tempIsTwo
0CA3E                               
0CA3E C9 0A                         CMP #10
0CA40 B0 05                         BCS +tempIsOne
0CA42                               
0CA42 A9 00                         LDA #$00
0CA44 4C 58 CA                      JMP +setTemp
0CA47                               
0CA47                           +tempIsOne:
0CA47 38                            SEC
0CA48 E9 0A                         SBC #10
0CA4A 85 01                         STA temp+1
0CA4C A9 01                         LDA #$01
0CA4E 4C 58 CA                      JMP +setTemp
0CA51                               
0CA51                           +tempIsTwo:
0CA51 38                            SEC
0CA52 E9 14                         SBC #20
0CA54 85 01                         STA temp+1
0CA56 A9 02                         LDA #$02
0CA58                           
0CA58                           +setTemp:
0CA58 85 00                         STA temp
0CA5A                               
0CA5A E6 00                         INC temp
0CA5C E6 01                         INC temp+1
0CA5E                               
0CA5E A9 20                         LDA #$20
0CA60 8D 06 20                      STA PPU_ADDR
0CA63 A9 8B                         LDA #$8B
0CA65 8D 06 20                      STA PPU_ADDR
0CA68 A5 00                         LDA temp
0CA6A 8D 07 20                      STA PPU_DATA
0CA6D A5 01                         LDA temp+1
0CA6F 8D 07 20                      STA PPU_DATA
0CA72                           
0CA72                           
0CA72                               ;; Draw lives (presumes lives to be capped at 9)
0CA72 A9 20                         LDA #$20
0CA74 8D 06 20                      STA PPU_ADDR
0CA77 A9 92                         LDA #$92
0CA79 8D 06 20                      STA PPU_ADDR
0CA7C A6 1F                         LDX ball_lives
0CA7E E8                            INX
0CA7F 8E 07 20                      STX PPU_DATA
0CA82                           
0CA82                           
0CA82                               ;; Set and draw bonus
0CA82 A9 07                         LDA #$07
0CA84 85 2C                         STA ball_bonus
0CA86 A9 09                         LDA #$09
0CA88 85 2D                         STA ball_bonus+1
0CA8A 85 2E                         STA ball_bonus+2
0CA8C                               
0CA8C A9 20                         LDA #$20
0CA8E 8D 06 20                      STA PPU_ADDR
0CA91 A9 9A                         LDA #$9A
0CA93 8D 06 20                      STA PPU_ADDR
0CA96 A2 00                         LDX #$00
0CA98                               -
0CA98 B5 2C                             LDA ball_bonus,x
0CA9A 18                                CLC
0CA9B 69 01                             ADC #$01
0CA9D 8D 07 20                          STA PPU_DATA
0CAA0 E8                                INX
0CAA1 E0 03                             CPX #$03
0CAA3 D0 F3                         BNE -
0CAA5                           
0CAA5                           
0CAA5                               ;; Set attribute data to RAM
0CAA5                               
0CAA5                               ;; Byte 0-7 of attribute ram should be #%10100000
0CAA5 A2 00                         LDX #$00
0CAA7 A9 A0                         LDA #$A0
0CAA9                               -
0CAA9 9D A0 04                          STA tile_attributes,x
0CAAC E8                                INX
0CAAD E0 08                             CPX #$08
0CAAF D0 F8                         BNE -
0CAB1                           
0CAB1                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CAB1                           
0CAB1                           -attributeLoop:
0CAB1                               ;; Reset current attribute value
0CAB1 A9 00                         LDA #$00
0CAB3 85 02                         STA temp+2
0CAB5                           
0CAB5                               ;; Get first metatile in tile ram based on attribute index
0CAB5                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CAB5 8A                            TXA
0CAB6                           
0CAB6 38                            SEC
0CAB7 E9 08                         SBC #$08
0CAB9 85 01                         STA temp+1      ; attr - 8 (temp1)
0CABB 0A                            ASL             ; * 2
0CABC 85 00                         STA temp        ; temp = temp1 * 2
0CABE                           
0CABE A5 01                         LDA temp+1      ; temp1
0CAC0 29 F8                         AND #%11111000  ; rounded down to 8's
0CAC2 0A                            ASL             ; * 2
0CAC3 18                            CLC
0CAC4 65 00                         ADC temp        ; + temp1 * 2
0CAC6 85 00                         STA temp        ; first metatile
0CAC8                           
0CAC8                               ;; Store first metatile in y-register
0CAC8 A8                            TAY
0CAC9                           
0CAC9                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CAC9 8A                            TXA
0CACA 29 07                         AND #%00000111
0CACC C9 07                         CMP #%00000111
0CACE F0 0B                         BEQ +
0CAD0                           
0CAD0                               ;; If X >= $30, don't apply bottom right metatile
0CAD0 E0 30                         CPX #$30
0CAD2 B0 07                         BCS +
0CAD4                               
0CAD4                               ;; Add metatile1 subpalette to attribute value
0CAD4 B9 00 04                      LDA tile_type,y
0CAD7 29 0C                         AND #%00001100
0CAD9 85 02                         STA temp+2
0CADB                               +
0CADB                           
0CADB                           
0CADB                               ;; Apply second metatile
0CADB 88                            DEY
0CADC                           
0CADC                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CADC 8A                            TXA
0CADD 29 07                         AND #%00000111
0CADF F0 10                         BEQ +
0CAE1                           
0CAE1                               ;; If X >= $30, don't apply bottom left metatile
0CAE1 E0 30                         CPX #$30
0CAE3 B0 0C                         BCS +
0CAE5                           
0CAE5                           
0CAE5                           
0CAE5                               ;; Add metatile2 subpalette to attribute value
0CAE5 B9 00 04                      LDA tile_type,y
0CAE8 29 0C                         AND #%00001100
0CAEA 4A                            LSR
0CAEB 4A                            LSR
0CAEC 05 02                         ORA temp+2
0CAEE 4C F3 CA                      JMP ++
0CAF1                               +
0CAF1 A5 02                         LDA temp+2
0CAF3                               ++
0CAF3 0A                            ASL
0CAF4 0A                            ASL
0CAF5 85 02                         STA temp+2
0CAF7                           
0CAF7                           
0CAF7                               ;; Apply third metatile
0CAF7 98                            TYA
0CAF8 38                            SEC
0CAF9 E9 0F                         SBC #$0F
0CAFB A8                            TAY
0CAFC                           
0CAFC                               ;; If X MOD 8 == 7, don't apply top right metatile
0CAFC 8A                            TXA
0CAFD 29 07                         AND #%00000111
0CAFF C9 07                         CMP #%00000111
0CB01 F0 11                         BEQ +
0CB03                           
0CB03                               ;; If X < $10, don't apply top right metatile
0CB03 8A                            TXA
0CB04 29 F0                         AND #%11110000
0CB06 F0 0C                         BEQ +
0CB08                           
0CB08                               ;; Add metatile3 subpalette to attribute value
0CB08 B9 00 04                      LDA tile_type,y
0CB0B 29 0C                         AND #%00001100
0CB0D 4A                            LSR
0CB0E 4A                            LSR
0CB0F 05 02                         ORA temp+2
0CB11 4C 16 CB                      JMP ++
0CB14                               +
0CB14 A5 02                         LDA temp+2
0CB16                               ++
0CB16 0A                            ASL
0CB17 0A                            ASL
0CB18 85 02                         STA temp+2
0CB1A                           
0CB1A                           
0CB1A                               ;; Apply fourth metatile
0CB1A 88                            DEY
0CB1B                           
0CB1B                               ;; If X MOD 8 == 0, don't apply top left metatile
0CB1B 8A                            TXA
0CB1C 29 07                         AND #%00000111
0CB1E F0 11                         BEQ +
0CB20                           
0CB20                               ;; If X < $10, don't apply top left metatile
0CB20 8A                            TXA
0CB21 29 F0                         AND #%11110000
0CB23 F0 0C                         BEQ +
0CB25                           
0CB25                               ;; Add metatile4 subpalette to attribute value
0CB25 B9 00 04                      LDA tile_type,y
0CB28 29 0C                         AND #%00001100
0CB2A 4A                            LSR
0CB2B 4A                            LSR
0CB2C 05 02                         ORA temp+2
0CB2E 4C 33 CB                      JMP ++
0CB31                               +
0CB31 A5 02                         LDA temp+2
0CB33                               ++
0CB33 9D A0 04                      STA tile_attributes,x
0CB36                           
0CB36                               ;; Check the next attribute, if any left
0CB36 E8                            INX
0CB37 E0 38                         CPX #$38
0CB39 F0 03                         BEQ +
0CB3B 4C B1 CA                          JMP -attributeLoop
0CB3E                               +
0CB3E                           
0CB3E                               ;; Stream attribute RAM to PPU
0CB3E 2C 02 20                      BIT PPU_STATUS
0CB41 A9 23                         LDA #$23
0CB43 8D 06 20                      STA PPU_ADDR
0CB46 A9 C0                         LDA #$C0
0CB48 8D 06 20                      STA PPU_ADDR
0CB4B A2 00                         LDX #$00
0CB4D                               -
0CB4D BD A0 04                          LDA tile_attributes,x
0CB50 8D 07 20                          STA PPU_DATA
0CB53 E8                                INX
0CB54 E0 40                             CPX #$40
0CB56 D0 F5                         BNE -
0CB58                           
0CB58                               ;; Set initial ball position
0CB58 A6 3E                         LDX current_level
0CB5A BD B6 D4                      LDA tbl_lvl_ball_startpos,x
0CB5D 29 F0                         AND #%11110000
0CB5F 18                            CLC
0CB60 69 34                         ADC #$34
0CB62 85 19                         STA ball_ypos_hi
0CB64 BD B6 D4                      LDA tbl_lvl_ball_startpos,x
0CB67 0A                            ASL
0CB68 0A                            ASL
0CB69 0A                            ASL
0CB6A 0A                            ASL
0CB6B 18                            CLC
0CB6C 69 14                         ADC #$14
0CB6E 85 17                         STA ball_xpos_hi
0CB70 A9 00                         LDA #$00
0CB72 85 18                         STA ball_xpos_lo
0CB74 85 1A                         STA ball_ypos_lo
0CB76                               
0CB76                               ;; Set initial ball color and direction
0CB76 BD CF D4                      LDA tbl_lvl_ball_init,x
0CB79 29 F0                         AND #%11110000
0CB7B 85 36                         STA ball_flags
0CB7D 20 0E C5                      JSR sub_ColorizeBall
0CB80                               
0CB80                               ;; Reset bonus counter
0CB80 A9 06                         LDA #BONUS_FRAMES
0CB82 85 3D                         STA bonus_counter
0CB84                               
0CB84                               ;; Play background noise
0CB84 A9 08                         LDA #$08
0CB86 8D 15 40                      STA APU_STATUS
0CB89 8D 0F 40                      STA NOISE_LENGTH
0CB8C A9 0E                         LDA #$0E
0CB8E 85 42                         STA current_noise
0CB90 A9 00                         LDA #$00
0CB92 85 40                         STA max_noise
0CB94 85 43                         STA noise_counter
0CB96 85 41                         STA sweep_noise
0CB98 20 96 C4                      JSR sub_BackgroundNoise
0CB9B                           
0CB9B                               ;; Return
0CB9B 60                            RTS
0CB9C                           
0CB9C                           
0CB9C                           ;; Subroutine: draw 28 tiles in a row
0CB9C                           sub_Draw28HorizontalTiles:
0CB9C A2 1C                         LDX #28
0CB9E                               -
0CB9E 8D 07 20                          STA PPU_DATA
0CBA1 CA                                DEX
0CBA2 D0 FA                         BNE -
0CBA4 60                            RTS0CBA5                           .include "game/subroutine/LoadIntroScreen.asm"
0CBA5                           sub_LoadIntroScreen:
0CBA5                           
0CBA5                               ;; Load intro palette
0CBA5 2C 02 20                      BIT PPU_STATUS
0CBA8 A9 3F                         LDA #$3F
0CBAA 8D 06 20                      STA PPU_ADDR
0CBAD A9 00                         LDA #$00
0CBAF 8D 06 20                      STA PPU_ADDR
0CBB2 A2 00                         LDX #$00
0CBB4                               -
0CBB4 BD 5B CC                          LDA tbl_IntroScreenPalette,x
0CBB7 8D 07 20                          STA PPU_DATA
0CBBA E8                                INX
0CBBB E0 20                             CPX #$20
0CBBD D0 F5                         BNE -
0CBBF                               
0CBBF                               ;; Put ball in the middle
0CBBF A9 7C                         LDA #$7C
0CBC1 85 17                         STA ball_xpos_hi
0CBC3 85 19                         STA ball_ypos_hi
0CBC5                           
0CBC5                               ;; Clear the screen
0CBC5 20 A3 C4                      JSR sub_ClearScreen
0CBC8                           
0CBC8                               ;; Set up intro screen draw loop
0CBC8 A2 00                         LDX #$00
0CBCA                           
0CBCA                           -loop_IntroScreenData:
0CBCA                           
0CBCA                               ;; Get current byte from intro screen data
0CBCA BD 83 CC                      LDA tbl_IntroScreenData,x
0CBCD                           
0CBCD                               ;; If current byte is #$3F, we're done drawing.
0CBCD C9 3F                         CMP #$3F
0CBCF D0 03                         BNE +
0CBD1 4C 1E CC                          JMP +goToEndIntroScreen
0CBD4                               +
0CBD4                           
0CBD4                               ;; If highest bits are %11, draw a plain tile
0CBD4 29 C0                         AND #%11000000
0CBD6 D0 03                         BNE +
0CBD8 4C FE CB                          JMP +drawTile
0CBDB                               +
0CBDB                               
0CBDB                               ;; If highest bits are %01, set the PPU address
0CBDB                               ;; If not, draw two logo tiles
0CBDB C9 40                         CMP #%01000000
0CBDD D0 03                         BNE +drawLogo
0CBDF 4C 08 CC                          JMP +setPpuAddr
0CBE2                           
0CBE2                           +drawLogo:
0CBE2                               ;; Get bits 0-2 and store in a temp variable
0CBE2 BD 83 CC                      LDA tbl_IntroScreenData,x
0CBE5 29 07                         AND #%00000111
0CBE7 85 00                         STA temp
0CBE9                               
0CBE9                               ;; Get bits 3-5, shift over to get a value from 0-7
0CBE9 BD 83 CC                      LDA tbl_IntroScreenData,x
0CBEC 4A                            LSR
0CBED 4A                            LSR
0CBEE 4A                            LSR
0CBEF 29 07                         AND #%00000111
0CBF1                               
0CBF1                               ;; Draw the tile that corresponds with that value
0CBF1 A8                            TAY
0CBF2 20 86 C5                      JSR sub_drawIntroScreenLogoTile
0CBF5                               
0CBF5                               ;; Do the same for the value stored in temp
0CBF5 A4 00                         LDY temp
0CBF7 20 86 C5                      JSR sub_drawIntroScreenLogoTile
0CBFA                           
0CBFA                               ;; Next byte please
0CBFA E8                            INX
0CBFB 4C CA CB                      JMP -loop_IntroScreenData
0CBFE                           
0CBFE                           +drawTile:
0CBFE                               ;; Just draw the tile value on screen
0CBFE BD 83 CC                      LDA tbl_IntroScreenData,x
0CC01 8D 07 20                      STA PPU_DATA
0CC04                               
0CC04                               ;; Next byte please
0CC04 E8                            INX
0CC05 4C CA CB                      JMP -loop_IntroScreenData
0CC08                           
0CC08                           
0CC08                           +setPpuAddr:
0CC08                               ;; Reset the PPU latch
0CC08 2C 02 20                      BIT PPU_STATUS
0CC0B                               
0CC0B                               ;; Sanitize and write the high byte of the PPU address
0CC0B BD 83 CC                      LDA tbl_IntroScreenData,x
0CC0E 29 3F                         AND #%00111111
0CC10 8D 06 20                      STA PPU_ADDR
0CC13                           
0CC13                               ;; Write the low byte of the PPU address
0CC13 E8                            INX
0CC14 BD 83 CC                      LDA tbl_IntroScreenData,x
0CC17 8D 06 20                      STA PPU_ADDR
0CC1A                               
0CC1A                               ;; PPU has been set up to draw tiles at the correct spot now.
0CC1A                               
0CC1A                               ;; Next byte please.
0CC1A E8                            INX
0CC1B 4C CA CB                      JMP -loop_IntroScreenData
0CC1E                           
0CC1E                           +goToEndIntroScreen:
0CC1E                           
0CC1E                               ;; To color the 1.LEVEL: line green, we need to update two
0CC1E                               ;; values in the PPU attribute data.
0CC1E 2C 02 20                      BIT PPU_STATUS
0CC21 A9 23                         LDA #$23
0CC23 8D 06 20                      STA PPU_ADDR
0CC26 A9 CB                         LDA #$CB
0CC28 8D 06 20                      STA PPU_ADDR
0CC2B A9 0A                         LDA #%00001010
0CC2D 8D 07 20                      STA PPU_DATA
0CC30 8D 07 20                      STA PPU_DATA
0CC33                           
0CC33 60                            RTS
0CC34                           
0CC34                           .include "game/subroutine/LoadWinScreen.asm"
0CC34                           sub_LoadWinScreen:
0CC34 60                            RTS
0CC35                           
0CC35                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CC35                           sub_WriteByteToPPUBuffer:
0CC35                           
0CC35                               ;; Prevent updating until full 3-byte buffer is filled,
0CC35                               ;; so that graphics won't glitch out if NMI happens during
0CC35                               ;; updating the buffer
0CC35 A9 00                         LDA #$00
0CC37 85 38                         STA ppu_buffer_update
0CC39                           
0CC39                               ;; Check if buffer full; if so, wait a frame and force update
0CC39 A4 39                         LDY ppu_buffer_pointer
0CC3B C0 30                         CPY #$30
0CC3D D0 05                         BNE +
0CC3F E6 38                             INC ppu_buffer_update
0CC41 20 31 C4                          JSR sub_WaitForVBlank
0CC44                               +
0CC44                           
0CC44                               ;; Add ppu_addr high byte to buffer
0CC44 A5 00                         LDA temp
0CC46 99 00 03                      STA ppu_buffer,y
0CC49                           
0CC49                               ;; Add ppu_addr low byte to buffer
0CC49 C8                            INY
0CC4A A5 01                         LDA temp+1
0CC4C 99 00 03                      STA ppu_buffer,y
0CC4F                           
0CC4F                               ;; Add ppu_data to buffer
0CC4F C8                            INY
0CC50 A5 02                         LDA temp+2
0CC52 99 00 03                      STA ppu_buffer,y
0CC55                           
0CC55                               ;; Update buffer pointer
0CC55 C8                            INY
0CC56 84 39                         STY ppu_buffer_pointer
0CC58                           
0CC58                               ;; Tell NMI to update next round
0CC58 E6 38                         INC ppu_buffer_update
0CC5A                           
0CC5A                               ;; Return
0CC5A 60                            RTS0CC5B                           
0CC5B                           
0CC5B                           ;; LUTs
0CC5B                           .include "game/include/tables.asm"
0CC5B                           
0CC5B                           ;; Initial screen palette
0CC5B                           tbl_IntroScreenPalette:
0CC5B 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CC5F 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CC63 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CC67 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CC6B                           
0CC6B 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CC6F 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CC73 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CC77 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CC7B                           
0CC7B                           
0CC7B                           ;; Intro: mapping logo index to chr tile
0CC7B                           tbl_IntroScreenLogoChr:
0CC7B 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CC83                           
0CC83                           
0CC83                           ;; Intro screen data
0CC83                           tbl_IntroScreenData:
0CC83                           
0CC83                               ;; Set PPU address $20AC and draw
0CC83 60 AC                         .db #$60, #$AC
0CC85 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CC8D                           
0CC8D                               ;; Set PPU address $20CF and draw
0CC8D 60 CF                         .db #$60, #$CF
0CC8F 01 02                         .db #_0, #_1
0CC91                               
0CC91                               ;; Set PPU address $2122 and draw
0CC91 61 22                         .db #$61, #$22
0CC93 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CC9A 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CCA0 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CCA8 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CCAD                               
0CCAD                               ;; Set PPU address $2147 and draw
0CCAD 61 47                         .db #$61, #$47
0CCAF 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CCB6 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CCBA 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CCC0 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CCC6                               
0CCC6                               ;; Set PPU address $218B and draw
0CCC6 61 8B                         .db #$61, #$8B
0CCC8 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CCCE 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CCD3                               
0CCD3                               ;; Set PPU address $21E6 and draw
0CCD3 61 E6                         .db #$61, #$E6
0CCD5 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CCDD 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CCE1 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CCE8                               
0CCE8                               ;; Set PPU address $222D and draw
0CCE8 62 2D                         .db #$62, #$2D
0CCEA 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CCF0                               
0CCF0                               ;; Set PPU address $2281
0CCF0 62 81                         .db #$62, #$81
0CCF2                               
0CCF2                               ;; Draw the Crillion logo
0CCF2 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CCF6 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCFA C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CCFE E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CD02                               
0CD02 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CD06 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD0A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CD0E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CD12                               
0CD12 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CD16 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD1A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CD1E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CD22                           
0CD22 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CD26 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD2A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CD2E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CD32                               
0CD32 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CD36 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD3A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CD3E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CD42                           
0CD42 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CD46 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CD4A C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CD4E F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CD51                           
0CD51                               ;; End of intro
0CD51 3F                            .db #$3F
0CD52                           
0CD52                           
0CD52                           ;; Animation frames table
0CD52                           .include "game/include/table/animation_frames.asm"
0CD52                           ;; CHR tile-id's per slide of explosion
0CD52                           explosion_slide0:
0CD52 00 00 00                      .db #$00, #$00, #$00
0CD55 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CD58 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CD5B                           
0CD5B                           explosion_slide1:
0CD5B 00 00 00                      .db #$00, #$00, #$00
0CD5E 29 2A 2B                      .db #$29, #$2A, #$2B
0CD61 39 3A 3B                      .db #$39, #$3A, #$3B
0CD64                           
0CD64                           explosion_slide2:
0CD64 16 00 00                      .db #$16, #$00, #$00
0CD67 26 27 28                      .db #$26, #$27, #$28
0CD6A 36 37 38                      .db #$36, #$37, #$38
0CD6D                           
0CD6D                           explosion_slide3:
0CD6D 00 14 15                      .db #$00, #$14, #$15
0CD70 23 24 25                      .db #$23, #$24, #$25
0CD73 33 34 35                      .db #$33, #$34, #$35
0CD76                           
0CD76                           explosion_slide4:
0CD76 10 11 12                      .db #$10, #$11, #$12
0CD79 20 21 22                      .db #$20, #$21, #$22
0CD7C 30 31 32                      .db #$30, #$31, #$32
0CD7F                           
0CD7F                           ;; High and low bytes of animation slides
0CD7F                           explosion_anim_hi:
0CD7F CD                            .db >#explosion_slide0
0CD80 CD                            .db >#explosion_slide1
0CD81 CD                            .db >#explosion_slide2
0CD82 CD                            .db >#explosion_slide3
0CD83 CD                            .db >#explosion_slide4
0CD84 CD                            .db >#explosion_slide4
0CD85 CD                            .db >#explosion_slide3
0CD86 CD                            .db >#explosion_slide2
0CD87 CD                            .db >#explosion_slide1
0CD88 CD                            .db >#explosion_slide0
0CD89                           
0CD89                           explosion_anim_lo:
0CD89 52                            .db <#explosion_slide0
0CD8A 5B                            .db <#explosion_slide1
0CD8B 64                            .db <#explosion_slide2
0CD8C 6D                            .db <#explosion_slide3
0CD8D 76                            .db <#explosion_slide4
0CD8E 76                            .db <#explosion_slide4
0CD8F 6D                            .db <#explosion_slide3
0CD90 64                            .db <#explosion_slide2
0CD91 5B                            .db <#explosion_slide1
0CD92 52                            .db <#explosion_slide0
0CD93                           
0CD93                           
0CD93                           
0CD93                           ;; Ball palette color table (CBRYGM)
0CD93                           tbl_BallColorDark:
0CD93 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CD99                            
0CD99                           tbl_BallColorLight:
0CD99 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CD9F                           
0CD9F                               
0CD9F                           ;; Screen mode drawing routine addresses
0CD9F                           tbl_LoadScreenHi:
0CD9F CB C7 CC                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CDA2                           
0CDA2                           tbl_LoadScreenLo:
0CDA2 A5 F9 34                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CDA5                           
0CDA5                           
0CDA5                           ;; Level data
0CDA5                           .include "game/include/table/level_data.asm"
0CDA5                           lvl_layout_01:
0CDA5 61 21                         .db #$61, #%00100001
0CDA7 52 61                         .db #$52, #%01100001
0CDA9 43 65                         .db #$43, #%01100101
0CDAB 83 05                         .db #$83, #%00000101
0CDAD 93 15                         .db #$93, #%00010101
0CDAF 34 7A                         .db #$34, #%01111010
0CDB1 74 7A                         .db #$74, #%01111010
0CDB3 35 7A                         .db #$35, #%01111010
0CDB5 75 7A                         .db #$75, #%01111010
0CDB7 46 65                         .db #$46, #%01100101
0CDB9 86 25                         .db #$86, #%00100101
0CDBB 57 61                         .db #$57, #%01100001
0CDBD 68 21                         .db #$68, #%00100001
0CDBF FF                            .db #LEVEL_END
0CDC0                           
0CDC0                           lvl_layout_02:
0CDC0 C0 0A                         .db #$C0, #%00001010
0CDC2 11 15                         .db #$11, #%00010101
0CDC4 21 62                         .db #$21, #%01100010
0CDC6 61 62                         .db #$61, #%01100010
0CDC8 A1 42                         .db #$A1, #%01000010
0CDCA 12 67                         .db #$12, #%01100111
0CDCC 52 67                         .db #$52, #%01100111
0CDCE 92 67                         .db #$92, #%01100111
0CDD0 C3 0D                         .db #$C3, #%00001101
0CDD2 14 11                         .db #$14, #%00010001
0CDD4 24 65                         .db #$24, #%01100101
0CDD6 64 65                         .db #$64, #%01100101
0CDD8 A4 45                         .db #$A4, #%01000101
0CDDA 15 67                         .db #$15, #%01100111
0CDDC 55 67                         .db #$55, #%01100111
0CDDE 95 67                         .db #$95, #%01100111
0CDE0 17 12                         .db #$17, #%00010010
0CDE2 27 61                         .db #$27, #%01100001
0CDE4 67 61                         .db #$67, #%01100001
0CDE6 A7 41                         .db #$A7, #%01000001
0CDE8 38 7A                         .db #$38, #%01111010
0CDEA 98 5A                         .db #$98, #%01011010
0CDEC 18 27                         .db #$18, #%00100111
0CDEE 48 27                         .db #$48, #%00100111
0CDF0 78 27                         .db #$78, #%00100111
0CDF2 C8 07                         .db #$C8, #%00000111
0CDF4 FF                            .db #LEVEL_END
0CDF5                           
0CDF5                           lvl_layout_03:
0CDF5 00 7A                         .db #$00, #%01111010
0CDF7 40 7A                         .db #$40, #%01111010
0CDF9 80 7A                         .db #$80, #%01111010
0CDFB C0 1A                         .db #$C0, #%00011010
0CDFD 10 A1                         .db #$10, #%10100001
0CDFF 13 E1                         .db #$13, #%11100001
0CE01 17 C1                         .db #$17, #%11000001
0CE03 30 C1                         .db #$30, #%11000001
0CE05 34 C1                         .db #$34, #%11000001
0CE07 38 A1                         .db #$38, #%10100001
0CE09 50 E1                         .db #$50, #%11100001
0CE0B 55 81                         .db #$55, #%10000001
0CE0D 57 C1                         .db #$57, #%11000001
0CE0F 70 C1                         .db #$70, #%11000001
0CE11 73 A1                         .db #$73, #%10100001
0CE13 76 E1                         .db #$76, #%11100001
0CE15 90 E1                         .db #$90, #%11100001
0CE17 95 81                         .db #$95, #%10000001
0CE19 97 C1                         .db #$97, #%11000001
0CE1B B0 C1                         .db #$B0, #%11000001
0CE1D B4 C1                         .db #$B4, #%11000001
0CE1F B8 A1                         .db #$B8, #%10100001
0CE21 D0 A1                         .db #$D0, #%10100001
0CE23 D3 E1                         .db #$D3, #%11100001
0CE25 D7 C1                         .db #$D7, #%11000001
0CE27 FF                            .db #LEVEL_END
0CE28                           
0CE28                           lvl_layout_04:
0CE28 00 4C                         .db #$00, #%01001100
0CE2A 40 6C                         .db #$40, #%01101100
0CE2C 80 4C                         .db #$80, #%01001100
0CE2E 81 AC                         .db #$81, #%10101100
0CE30 C1 2C                         .db #$C1, #%00101100
0CE32 02 6C                         .db #$02, #%01101100
0CE34 42 CC                         .db #$42, #%11001100
0CE36 62 EC                         .db #$62, #%11101100
0CE38 A2 CC                         .db #$A2, #%11001100
0CE3A C3 CC                         .db #$C3, #%11001100
0CE3C 04 4C                         .db #$04, #%01001100
0CE3E 84 2C                         .db #$84, #%00101100
0CE40 25 AC                         .db #$25, #%10101100
0CE42 85 AC                         .db #$85, #%10101100
0CE44 06 AC                         .db #$06, #%10101100
0CE46 36 CC                         .db #$36, #%11001100
0CE48 56 CC                         .db #$56, #%11001100
0CE4A 66 EC                         .db #$66, #%11101100
0CE4C 96 6C                         .db #$96, #%01101100
0CE4E C7 AC                         .db #$C7, #%10101100
0CE50 08 2C                         .db #$08, #%00101100
0CE52 78 6C                         .db #$78, #%01101100
0CE54 D8 0C                         .db #$D8, #%00001100
0CE56 30 A1                         .db #$30, #%10100001
0CE58 B0 21                         .db #$B0, #%00100001
0CE5A 01 41                         .db #$01, #%01000001
0CE5C 41 61                         .db #$41, #%01100001
0CE5E 91 A1                         .db #$91, #%10100001
0CE60 A1 21                         .db #$A1, #%00100001
0CE62 52 C1                         .db #$52, #%11000001
0CE64 72 E1                         .db #$72, #%11100001
0CE66 B2 C1                         .db #$B2, #%11000001
0CE68 C2 21                         .db #$C2, #%00100001
0CE6A 03 41                         .db #$03, #%01000001
0CE6C 33 C1                         .db #$33, #%11000001
0CE6E 83 21                         .db #$83, #%00100001
0CE70 D3 E1                         .db #$D3, #%11100001
0CE72 05 21                         .db #$05, #%00100001
0CE74 45 E1                         .db #$45, #%11100001
0CE76 A5 21                         .db #$A5, #%00100001
0CE78 16 A1                         .db #$16, #%10100001
0CE7A 76 A1                         .db #$76, #%10100001
0CE7C 27 A1                         .db #$27, #%10100001
0CE7E 57 01                         .db #$57, #%00000001
0CE80 87 41                         .db #$87, #%01000001
0CE82 B7 A1                         .db #$B7, #%10100001
0CE84 19 21                         .db #$19, #%00100001
0CE86 39 41                         .db #$39, #%01000001
0CE88 89 41                         .db #$89, #%01000001
0CE8A C9 21                         .db #$C9, #%00100001
0CE8C D0 1A                         .db #$D0, #%00011010
0CE8E 55 1A                         .db #$55, #%00011010
0CE90 95 1A                         .db #$95, #%00011010
0CE92 D7 1A                         .db #$D7, #%00011010
0CE94 09 1A                         .db #$09, #%00011010
0CE96 79 1A                         .db #$79, #%00011010
0CE98 FF                            .db #LEVEL_END
0CE99                           
0CE99                           lvl_layout_05:
0CE99 40 0A                         .db #$40, #%00001010
0CE9B 70 1A                         .db #$70, #%00011010
0CE9D B0 42                         .db #$B0, #%01000010
0CE9F 41 A7                         .db #$41, #%10100111
0CEA1 B1 22                         .db #$B1, #%00100010
0CEA3 D1 15                         .db #$D1, #%00010101
0CEA5 22 0A                         .db #$22, #%00001010
0CEA7 52 05                         .db #$52, #%00000101
0CEA9 B2 42                         .db #$B2, #%01000010
0CEAB 03 27                         .db #$03, #%00100111
0CEAD 33 67                         .db #$33, #%01100111
0CEAF 73 67                         .db #$73, #%01100111
0CEB1 B3 47                         .db #$B3, #%01000111
0CEB3 05 E5                         .db #$05, #%11100101
0CEB5 25 A5                         .db #$25, #%10100101
0CEB7 35 25                         .db #$35, #%00100101
0CEB9 65 45                         .db #$65, #%01000101
0CEBB A5 45                         .db #$A5, #%01000101
0CEBD 46 E5                         .db #$46, #%11100101
0CEBF 66 E5                         .db #$66, #%11100101
0CEC1 86 E5                         .db #$86, #%11100101
0CEC3 A6 E2                         .db #$A6, #%11100010
0CEC5 C6 E5                         .db #$C6, #%11100101
0CEC7 27 25                         .db #$27, #%00100101
0CEC9 77 05                         .db #$77, #%00000101
0CECB B7 02                         .db #$B7, #%00000010
0CECD 09 05                         .db #$09, #%00000101
0CECF 79 05                         .db #$79, #%00000101
0CED1 B9 02                         .db #$B9, #%00000010
0CED3 FF                            .db #LEVEL_END
0CED4                           
0CED4                           lvl_layout_06:
0CED4 00 03                         .db #$00, #%00000011
0CED6 20 03                         .db #$20, #%00000011
0CED8 40 03                         .db #$40, #%00000011
0CEDA A0 03                         .db #$A0, #%00000011
0CEDC C0 03                         .db #$C0, #%00000011
0CEDE 11 03                         .db #$11, #%00000011
0CEE0 31 03                         .db #$31, #%00000011
0CEE2 51 03                         .db #$51, #%00000011
0CEE4 91 03                         .db #$91, #%00000011
0CEE6 B1 03                         .db #$B1, #%00000011
0CEE8 D1 03                         .db #$D1, #%00000011
0CEEA 02 03                         .db #$02, #%00000011
0CEEC 22 03                         .db #$22, #%00000011
0CEEE 42 03                         .db #$42, #%00000011
0CEF0 A2 03                         .db #$A2, #%00000011
0CEF2 C2 03                         .db #$C2, #%00000011
0CEF4 13 03                         .db #$13, #%00000011
0CEF6 33 03                         .db #$33, #%00000011
0CEF8 53 03                         .db #$53, #%00000011
0CEFA 93 03                         .db #$93, #%00000011
0CEFC B3 03                         .db #$B3, #%00000011
0CEFE D3 03                         .db #$D3, #%00000011
0CF00 04 03                         .db #$04, #%00000011
0CF02 24 03                         .db #$24, #%00000011
0CF04 44 03                         .db #$44, #%00000011
0CF06 A4 03                         .db #$A4, #%00000011
0CF08 C4 03                         .db #$C4, #%00000011
0CF0A 15 03                         .db #$15, #%00000011
0CF0C 35 03                         .db #$35, #%00000011
0CF0E 55 03                         .db #$55, #%00000011
0CF10 95 03                         .db #$95, #%00000011
0CF12 B5 03                         .db #$B5, #%00000011
0CF14 D5 03                         .db #$D5, #%00000011
0CF16 06 03                         .db #$06, #%00000011
0CF18 26 03                         .db #$26, #%00000011
0CF1A 46 03                         .db #$46, #%00000011
0CF1C A6 03                         .db #$A6, #%00000011
0CF1E C6 03                         .db #$C6, #%00000011
0CF20 17 03                         .db #$17, #%00000011
0CF22 37 03                         .db #$37, #%00000011
0CF24 57 03                         .db #$57, #%00000011
0CF26 97 03                         .db #$97, #%00000011
0CF28 B7 03                         .db #$B7, #%00000011
0CF2A D7 03                         .db #$D7, #%00000011
0CF2C 08 03                         .db #$08, #%00000011
0CF2E 28 03                         .db #$28, #%00000011
0CF30 48 03                         .db #$48, #%00000011
0CF32 A8 03                         .db #$A8, #%00000011
0CF34 C8 03                         .db #$C8, #%00000011
0CF36 19 03                         .db #$19, #%00000011
0CF38 39 03                         .db #$39, #%00000011
0CF3A 59 03                         .db #$59, #%00000011
0CF3C 99 03                         .db #$99, #%00000011
0CF3E B9 03                         .db #$B9, #%00000011
0CF40 D9 03                         .db #$D9, #%00000011
0CF42 60 4B                         .db #$60, #%01001011
0CF44 71 CB                         .db #$71, #%11001011
0CF46 62 4B                         .db #$62, #%01001011
0CF48 64 4B                         .db #$64, #%01001011
0CF4A 75 CB                         .db #$75, #%11001011
0CF4C 66 4B                         .db #$66, #%01001011
0CF4E 68 4B                         .db #$68, #%01001011
0CF50 79 0B                         .db #$79, #%00001011
0CF52 70 03                         .db #$70, #%00000011
0CF54 72 03                         .db #$72, #%00000011
0CF56 74 03                         .db #$74, #%00000011
0CF58 76 03                         .db #$76, #%00000011
0CF5A 78 03                         .db #$78, #%00000011
0CF5C FF                            .db #LEVEL_END
0CF5D                           
0CF5D                           lvl_layout_07:
0CF5D 00 11                         .db #$00, #%00010001
0CF5F 01 FA                         .db #$01, #%11111010
0CF61 12 BA                         .db #$12, #%10111010
0CF63 23 DA                         .db #$23, #%11011010
0CF65 34 FA                         .db #$34, #%11111010
0CF67 05 DA                         .db #$05, #%11011010
0CF69 15 FA                         .db #$15, #%11111010
0CF6B 45 BA                         .db #$45, #%10111010
0CF6D 56 DA                         .db #$56, #%11011010
0CF6F 27 BA                         .db #$27, #%10111010
0CF71 67 DA                         .db #$67, #%11011010
0CF73 38 3A                         .db #$38, #%00111010
0CF75 78 BA                         .db #$78, #%10111010
0CF77 09 3A                         .db #$09, #%00111010
0CF79 39 3A                         .db #$39, #%00111010
0CF7B 89 1A                         .db #$89, #%00011010
0CF7D B0 01                         .db #$B0, #%00000001
0CF7F D0 01                         .db #$D0, #%00000001
0CF81 A1 01                         .db #$A1, #%00000001
0CF83 C1 11                         .db #$C1, #%00010001
0CF85 B2 01                         .db #$B2, #%00000001
0CF87 D2 01                         .db #$D2, #%00000001
0CF89 A3 01                         .db #$A3, #%00000001
0CF8B C3 01                         .db #$C3, #%00000001
0CF8D B4 01                         .db #$B4, #%00000001
0CF8F D4 01                         .db #$D4, #%00000001
0CF91 A5 01                         .db #$A5, #%00000001
0CF93 C5 01                         .db #$C5, #%00000001
0CF95 B6 01                         .db #$B6, #%00000001
0CF97 D6 01                         .db #$D6, #%00000001
0CF99 A7 01                         .db #$A7, #%00000001
0CF9B C7 01                         .db #$C7, #%00000001
0CF9D FF                            .db #LEVEL_END
0CF9E                           
0CF9E                           lvl_layout_08:
0CF9E 40 B5                         .db #$40, #%10110101
0CFA0 31 0D                         .db #$31, #%00001101
0CFA2 61 10                         .db #$61, #%00010000
0CFA4 42 C7                         .db #$42, #%11000111
0CFA6 52 67                         .db #$52, #%01100111
0CFA8 63 C7                         .db #$63, #%11000111
0CFAA 83 E7                         .db #$83, #%11100111
0CFAC 05 07                         .db #$05, #%00000111
0CFAE 15 3A                         .db #$15, #%00111010
0CFB0 07 63                         .db #$07, #%01100011
0CFB2 27 13                         .db #$27, #%00010011
0CFB4 38 A5                         .db #$38, #%10100101
0CFB6 09 14                         .db #$09, #%00010100
0CFB8 19 05                         .db #$19, #%00000101
0CFBA D0 E0                         .db #$D0, #%11100000
0CFBC C2 A0                         .db #$C2, #%10100000
0CFBE B3 E0                         .db #$B3, #%11100000
0CFC0 D5 E0                         .db #$D5, #%11100000
0CFC2 C6 E0                         .db #$C6, #%11100000
0CFC4 B0 C4                         .db #$B0, #%11000100
0CFC6 C0 A4                         .db #$C0, #%10100100
0CFC8 D1 A4                         .db #$D1, #%10100100
0CFCA C4 24                         .db #$C4, #%00100100
0CFCC C5 04                         .db #$C5, #%00000100
0CFCE B7 44                         .db #$B7, #%01000100
0CFD0 B8 A4                         .db #$B8, #%10100100
0CFD2 D9 05                         .db #$D9, #%00000101
0CFD4 FF                            .db #LEVEL_END
0CFD5                           
0CFD5                           lvl_layout_09:
0CFD5 81 04                         .db #$81, #%00000100
0CFD7 D1 04                         .db #$D1, #%00000100
0CFD9 32 C4                         .db #$32, #%11000100
0CFDB A2 C4                         .db #$A2, #%11000100
0CFDD C2 24                         .db #$C2, #%00100100
0CFDF 13 24                         .db #$13, #%00100100
0CFE1 53 04                         .db #$53, #%00000100
0CFE3 C3 27                         .db #$C3, #%00100111
0CFE5 15 6C                         .db #$15, #%01101100
0CFE7 55 6C                         .db #$55, #%01101100
0CFE9 95 6C                         .db #$95, #%01101100
0CFEB D5 0C                         .db #$D5, #%00001100
0CFED 27 C7                         .db #$27, #%11000111
0CFEF 47 C7                         .db #$47, #%11000111
0CFF1 67 C7                         .db #$67, #%11000111
0CFF3 87 C7                         .db #$87, #%11000111
0CFF5 A7 C7                         .db #$A7, #%11000111
0CFF7 C7 C7                         .db #$C7, #%11000111
0CFF9 08 13                         .db #$08, #%00010011
0CFFB 28 15                         .db #$28, #%00010101
0CFFD 48 12                         .db #$48, #%00010010
0CFFF 68 15                         .db #$68, #%00010101
0D001 88 11                         .db #$88, #%00010001
0D003 A8 10                         .db #$A8, #%00010000
0D005 C8 14                         .db #$C8, #%00010100
0D007 09 07                         .db #$09, #%00000111
0D009 19 03                         .db #$19, #%00000011
0D00B 39 05                         .db #$39, #%00000101
0D00D 59 02                         .db #$59, #%00000010
0D00F 79 05                         .db #$79, #%00000101
0D011 99 01                         .db #$99, #%00000001
0D013 B9 00                         .db #$B9, #%00000000
0D015 D9 04                         .db #$D9, #%00000100
0D017 FF                            .db #LEVEL_END
0D018                           
0D018                           lvl_layout_10:
0D018 00 02                         .db #$00, #%00000010
0D01A 10 C9                         .db #$10, #%11001001
0D01C 50 C9                         .db #$50, #%11001001
0D01E 90 C9                         .db #$90, #%11001001
0D020 D0 C9                         .db #$D0, #%11001001
0D022 31 C9                         .db #$31, #%11001001
0D024 71 C9                         .db #$71, #%11001001
0D026 B1 C9                         .db #$B1, #%11001001
0D028 13 C9                         .db #$13, #%11001001
0D02A 53 C9                         .db #$53, #%11001001
0D02C 93 C9                         .db #$93, #%11001001
0D02E D3 C9                         .db #$D3, #%11001001
0D030 34 C9                         .db #$34, #%11001001
0D032 74 C9                         .db #$74, #%11001001
0D034 B4 C9                         .db #$B4, #%11001001
0D036 16 C9                         .db #$16, #%11001001
0D038 56 C9                         .db #$56, #%11001001
0D03A 96 C9                         .db #$96, #%11001001
0D03C D6 C9                         .db #$D6, #%11001001
0D03E 37 C9                         .db #$37, #%11001001
0D040 77 C9                         .db #$77, #%11001001
0D042 B7 C9                         .db #$B7, #%11001001
0D044 D8 12                         .db #$D8, #%00010010
0D046 FF                            .db #LEVEL_END
0D047                           
0D047                           lvl_layout_11:
0D047 00 65                         .db #$00, #%01100101
0D049 40 45                         .db #$40, #%01000101
0D04B 50 A7                         .db #$50, #%10100111
0D04D 80 05                         .db #$80, #%00000101
0D04F 90 A7                         .db #$90, #%10100111
0D051 A0 65                         .db #$A0, #%01100101
0D053 01 43                         .db #$01, #%01000011
0D055 31 23                         .db #$31, #%00100011
0D057 61 A7                         .db #$61, #%10100111
0D059 81 A7                         .db #$81, #%10100111
0D05B A1 63                         .db #$A1, #%01100011
0D05D 02 44                         .db #$02, #%01000100
0D05F 32 44                         .db #$32, #%01000100
0D061 92 04                         .db #$92, #%00000100
0D063 A2 64                         .db #$A2, #%01100100
0D065 03 40                         .db #$03, #%01000000
0D067 33 40                         .db #$33, #%01000000
0D069 63 A1                         .db #$63, #%10100001
0D06B 83 A2                         .db #$83, #%10100010
0D06D 93 00                         .db #$93, #%00000000
0D06F A3 60                         .db #$A3, #%01100000
0D071 04 41                         .db #$04, #%01000001
0D073 34 41                         .db #$34, #%01000001
0D075 94 02                         .db #$94, #%00000010
0D077 A4 62                         .db #$A4, #%01100010
0D079 05 47                         .db #$05, #%01000111
0D07B 35 67                         .db #$35, #%01100111
0D07D 75 0A                         .db #$75, #%00001010
0D07F 85 47                         .db #$85, #%01000111
0D081 B5 47                         .db #$B5, #%01000111
0D083 06 E7                         .db #$06, #%11100111
0D085 16 5A                         .db #$16, #%01011010
0D087 26 11                         .db #$26, #%00010001
0D089 46 13                         .db #$46, #%00010011
0D08B 56 1A                         .db #$56, #%00011010
0D08D 66 14                         .db #$66, #%00010100
0D08F 86 10                         .db #$86, #%00010000
0D091 96 5A                         .db #$96, #%01011010
0D093 A6 12                         .db #$A6, #%00010010
0D095 C6 15                         .db #$C6, #%00010101
0D097 D6 E7                         .db #$D6, #%11100111
0D099 FF                            .db #LEVEL_END
0D09A                           
0D09A                           lvl_layout_12:
0D09A 00 00                         .db #$00, #%00000000
0D09C 50 C0                         .db #$50, #%11000000
0D09E 80 00                         .db #$80, #%00000000
0D0A0 61 00                         .db #$61, #%00000000
0D0A2 22 C0                         .db #$22, #%11000000
0D0A4 82 E0                         .db #$82, #%11100000
0D0A6 C2 E0                         .db #$C2, #%11100000
0D0A8 A3 20                         .db #$A3, #%00100000
0D0AA C3 10                         .db #$C3, #%00010000
0D0AC 04 00                         .db #$04, #%00000000
0D0AE 54 20                         .db #$54, #%00100000
0D0B0 15 0A                         .db #$15, #%00001010
0D0B2 25 C0                         .db #$25, #%11000000
0D0B4 55 E0                         .db #$55, #%11100000
0D0B6 86 20                         .db #$86, #%00100000
0D0B8 C6 E0                         .db #$C6, #%11100000
0D0BA C7 A0                         .db #$C7, #%10100000
0D0BC 88 00                         .db #$88, #%00000000
0D0BE 59 00                         .db #$59, #%00000000
0D0C0 89 20                         .db #$89, #%00100000
0D0C2 D9 1A                         .db #$D9, #%00011010
0D0C4 FF                            .db #LEVEL_END
0D0C5                           
0D0C5                           lvl_layout_13:
0D0C5 10 E0                         .db #$10, #%11100000
0D0C7 20 E0                         .db #$20, #%11100000
0D0C9 30 E0                         .db #$30, #%11100000
0D0CB 40 40                         .db #$40, #%01000000
0D0CD 80 60                         .db #$80, #%01100000
0D0CF C0 E0                         .db #$C0, #%11100000
0D0D1 D0 E0                         .db #$D0, #%11100000
0D0D3 41 40                         .db #$41, #%01000000
0D0D5 71 60                         .db #$71, #%01100000
0D0D7 52 60                         .db #$52, #%01100000
0D0D9 A2 20                         .db #$A2, #%00100000
0D0DB 43 60                         .db #$43, #%01100000
0D0DD 83 60                         .db #$83, #%01100000
0D0DF 14 74                         .db #$14, #%01110100
0D0E1 54 74                         .db #$54, #%01110100
0D0E3 94 74                         .db #$94, #%01110100
0D0E5 D4 14                         .db #$D4, #%00010100
0D0E7 15 0D                         .db #$15, #%00001101
0D0E9 55 0D                         .db #$55, #%00001101
0D0EB 95 0D                         .db #$95, #%00001101
0D0ED D5 0D                         .db #$D5, #%00001101
0D0EF 26 0D                         .db #$26, #%00001101
0D0F1 46 0D                         .db #$46, #%00001101
0D0F3 66 0D                         .db #$66, #%00001101
0D0F5 86 0D                         .db #$86, #%00001101
0D0F7 A6 0D                         .db #$A6, #%00001101
0D0F9 C6 0D                         .db #$C6, #%00001101
0D0FB 07 10                         .db #$07, #%00010000
0D0FD 37 0D                         .db #$37, #%00001101
0D0FF 77 0D                         .db #$77, #%00001101
0D101 B7 0D                         .db #$B7, #%00001101
0D103 28 0D                         .db #$28, #%00001101
0D105 48 0D                         .db #$48, #%00001101
0D107 68 0D                         .db #$68, #%00001101
0D109 88 0D                         .db #$88, #%00001101
0D10B A8 0D                         .db #$A8, #%00001101
0D10D C8 0D                         .db #$C8, #%00001101
0D10F 19 0D                         .db #$19, #%00001101
0D111 59 0D                         .db #$59, #%00001101
0D113 99 0D                         .db #$99, #%00001101
0D115 D9 0D                         .db #$D9, #%00001101
0D117 FF                            .db #LEVEL_END
0D118                           
0D118                           lvl_layout_14:
0D118 00 67                         .db #$00, #%01100111
0D11A 40 67                         .db #$40, #%01100111
0D11C 80 67                         .db #$80, #%01100111
0D11E C0 27                         .db #$C0, #%00100111
0D120 01 27                         .db #$01, #%00100111
0D122 31 C7                         .db #$31, #%11000111
0D124 51 C7                         .db #$51, #%11000111
0D126 71 C7                         .db #$71, #%11000111
0D128 91 C7                         .db #$91, #%11000111
0D12A B1 C7                         .db #$B1, #%11000111
0D12C D1 07                         .db #$D1, #%00000111
0D12E 02 E7                         .db #$02, #%11100111
0D130 06 E7                         .db #$06, #%11100111
0D132 13 07                         .db #$13, #%00000111
0D134 D3 07                         .db #$D3, #%00000111
0D136 15 07                         .db #$15, #%00000111
0D138 35 07                         .db #$35, #%00000111
0D13A 55 07                         .db #$55, #%00000111
0D13C 75 07                         .db #$75, #%00000111
0D13E 95 07                         .db #$95, #%00000111
0D140 B5 07                         .db #$B5, #%00000111
0D142 D5 07                         .db #$D5, #%00000111
0D144 17 07                         .db #$17, #%00000111
0D146 37 C7                         .db #$37, #%11000111
0D148 57 C7                         .db #$57, #%11000111
0D14A 77 C7                         .db #$77, #%11000111
0D14C 97 C7                         .db #$97, #%11000111
0D14E B7 C7                         .db #$B7, #%11000111
0D150 D7 07                         .db #$D7, #%00000111
0D152 19 07                         .db #$19, #%00000111
0D154 D9 07                         .db #$D9, #%00000111
0D156 22 4C                         .db #$22, #%01001100
0D158 62 4C                         .db #$62, #%01001100
0D15A A2 4C                         .db #$A2, #%01001100
0D15C 24 0C                         .db #$24, #%00001100
0D15E 44 0C                         .db #$44, #%00001100
0D160 64 0C                         .db #$64, #%00001100
0D162 84 0C                         .db #$84, #%00001100
0D164 A4 0C                         .db #$A4, #%00001100
0D166 C4 0C                         .db #$C4, #%00001100
0D168 26 0C                         .db #$26, #%00001100
0D16A 46 0C                         .db #$46, #%00001100
0D16C 66 0C                         .db #$66, #%00001100
0D16E 86 0C                         .db #$86, #%00001100
0D170 A6 0C                         .db #$A6, #%00001100
0D172 C6 0C                         .db #$C6, #%00001100
0D174 28 4C                         .db #$28, #%01001100
0D176 68 4C                         .db #$68, #%01001100
0D178 A8 4C                         .db #$A8, #%01001100
0D17A 32 04                         .db #$32, #%00000100
0D17C 52 04                         .db #$52, #%00000100
0D17E 72 04                         .db #$72, #%00000100
0D180 92 04                         .db #$92, #%00000100
0D182 B2 04                         .db #$B2, #%00000100
0D184 38 04                         .db #$38, #%00000100
0D186 58 04                         .db #$58, #%00000100
0D188 78 04                         .db #$78, #%00000100
0D18A 98 04                         .db #$98, #%00000100
0D18C B8 04                         .db #$B8, #%00000100
0D18E FF                            .db #LEVEL_END
0D18F                           
0D18F                           lvl_layout_15:
0D18F 00 7A                         .db #$00, #%01111010
0D191 40 7A                         .db #$40, #%01111010
0D193 80 7A                         .db #$80, #%01111010
0D195 C0 3A                         .db #$C0, #%00111010
0D197 31 04                         .db #$31, #%00000100
0D199 51 04                         .db #$51, #%00000100
0D19B 81 04                         .db #$81, #%00000100
0D19D A1 04                         .db #$A1, #%00000100
0D19F 05 E4                         .db #$05, #%11100100
0D1A1 15 64                         .db #$15, #%01100100
0D1A3 55 64                         .db #$55, #%01100100
0D1A5 95 64                         .db #$95, #%01100100
0D1A7 D5 E4                         .db #$D5, #%11100100
0D1A9 26 04                         .db #$26, #%00000100
0D1AB 46 44                         .db #$46, #%01000100
0D1AD 76 64                         .db #$76, #%01100100
0D1AF C6 04                         .db #$C6, #%00000100
0D1B1 17 04                         .db #$17, #%00000100
0D1B3 37 64                         .db #$37, #%01100100
0D1B5 77 44                         .db #$77, #%01000100
0D1B7 B7 04                         .db #$B7, #%00000100
0D1B9 18 64                         .db #$18, #%01100100
0D1BB 58 64                         .db #$58, #%01100100
0D1BD 98 64                         .db #$98, #%01100100
0D1BF FF                            .db #LEVEL_END
0D1C0                           
0D1C0                           lvl_layout_16:
0D1C0 10 E1                         .db #$10, #%11100001
0D1C2 20 9A                         .db #$20, #%10011010
0D1C4 30 E1                         .db #$30, #%11100001
0D1C6 40 E1                         .db #$40, #%11100001
0D1C8 50 E1                         .db #$50, #%11100001
0D1CA 60 C1                         .db #$60, #%11000001
0D1CC 70 E1                         .db #$70, #%11100001
0D1CE 80 E1                         .db #$80, #%11100001
0D1D0 90 E1                         .db #$90, #%11100001
0D1D2 A0 61                         .db #$A0, #%01100001
0D1D4 21 C1                         .db #$21, #%11000001
0D1D6 A1 1A                         .db #$A1, #%00011010
0D1D8 B1 41                         .db #$B1, #%01000001
0D1DA A2 E1                         .db #$A2, #%11100001
0D1DC B2 E1                         .db #$B2, #%11100001
0D1DE C2 1A                         .db #$C2, #%00011010
0D1E0 D2 E1                         .db #$D2, #%11100001
0D1E2 63 1A                         .db #$63, #%00011010
0D1E4 C3 C1                         .db #$C3, #%11000001
0D1E6 14 61                         .db #$14, #%01100001
0D1E8 54 61                         .db #$54, #%01100001
0D1EA 94 C1                         .db #$94, #%11000001
0D1EC 15 61                         .db #$15, #%01100001
0D1EE 55 41                         .db #$55, #%01000001
0D1F0 85 1A                         .db #$85, #%00011010
0D1F2 16 41                         .db #$16, #%01000001
0D1F4 46 1A                         .db #$46, #%00011010
0D1F6 56 61                         .db #$56, #%01100001
0D1F8 A6 61                         .db #$A6, #%01100001
0D1FA 17 67                         .db #$17, #%01100111
0D1FC 57 67                         .db #$57, #%01100111
0D1FE 97 67                         .db #$97, #%01100111
0D200 D7 07                         .db #$D7, #%00000111
0D202 28 41                         .db #$28, #%01000001
0D204 58 61                         .db #$58, #%01100001
0D206 A8 41                         .db #$A8, #%01000001
0D208 18 11                         .db #$18, #%00010001
0D20A 38 11                         .db #$38, #%00010001
0D20C 98 11                         .db #$98, #%00010001
0D20E B8 11                         .db #$B8, #%00010001
0D210 D8 11                         .db #$D8, #%00010001
0D212 59 09                         .db #$59, #%00001001
0D214 FF                            .db #LEVEL_END
0D215                           
0D215                           lvl_layout_17:
0D215 10 EA                         .db #$10, #%11101010
0D217 20 E2                         .db #$20, #%11100010
0D219 30 62                         .db #$30, #%01100010
0D21B 70 02                         .db #$70, #%00000010
0D21D 80 6A                         .db #$80, #%01101010
0D21F 90 22                         .db #$90, #%00100010
0D221 01 AA                         .db #$01, #%10101010
0D223 31 6A                         .db #$31, #%01101010
0D225 81 2A                         .db #$81, #%00101010
0D227 A1 02                         .db #$A1, #%00000010
0D229 C1 02                         .db #$C1, #%00000010
0D22B D1 0A                         .db #$D1, #%00001010
0D22D 32 EA                         .db #$32, #%11101010
0D22F 42 6A                         .db #$42, #%01101010
0D231 62 02                         .db #$62, #%00000010
0D233 92 6A                         .db #$92, #%01101010
0D235 D2 E2                         .db #$D2, #%11100010
0D237 43 1A                         .db #$43, #%00011010
0D239 53 CA                         .db #$53, #%11001010
0D23B 73 02                         .db #$73, #%00000010
0D23D 83 4A                         .db #$83, #%01001010
0D23F B3 CA                         .db #$B3, #%11001010
0D241 C3 EA                         .db #$C3, #%11101010
0D243 04 0A                         .db #$04, #%00001010
0D245 14 A2                         .db #$14, #%10100010
0D247 24 AA                         .db #$24, #%10101010
0D249 44 AA                         .db #$44, #%10101010
0D24B 64 6A                         .db #$64, #%01101010
0D24D 65 6A                         .db #$65, #%01101010
0D24F A5 AA                         .db #$A5, #%10101010
0D251 06 EA                         .db #$06, #%11101010
0D253 16 62                         .db #$16, #%01100010
0D255 66 22                         .db #$66, #%00100010
0D257 86 2A                         .db #$86, #%00101010
0D259 17 42                         .db #$17, #%01000010
0D25B 47 12                         .db #$47, #%00010010
0D25D 57 6A                         .db #$57, #%01101010
0D25F 97 4A                         .db #$97, #%01001010
0D261 A7 02                         .db #$A7, #%00000010
0D263 18 02                         .db #$18, #%00000010
0D265 28 0A                         .db #$28, #%00001010
0D267 38 22                         .db #$38, #%00100010
0D269 68 2A                         .db #$68, #%00101010
0D26B 88 62                         .db #$88, #%01100010
0D26D C8 0A                         .db #$C8, #%00001010
0D26F D8 02                         .db #$D8, #%00000010
0D271 19 2A                         .db #$19, #%00101010
0D273 39 2A                         .db #$39, #%00101010
0D275 69 42                         .db #$69, #%01000010
0D277 99 2A                         .db #$99, #%00101010
0D279 B9 42                         .db #$B9, #%01000010
0D27B FF                            .db #LEVEL_END
0D27C                           
0D27C                           lvl_layout_18:
0D27C 00 12                         .db #$00, #%00010010
0D27E 40 1A                         .db #$40, #%00011010
0D280 50 11                         .db #$50, #%00010001
0D282 70 1A                         .db #$70, #%00011010
0D284 80 10                         .db #$80, #%00010000
0D286 D0 13                         .db #$D0, #%00010011
0D288 01 1A                         .db #$01, #%00011010
0D28A 22 15                         .db #$22, #%00010101
0D28C A2 1A                         .db #$A2, #%00011010
0D28E B2 14                         .db #$B2, #%00010100
0D290 03 67                         .db #$03, #%01100111
0D292 43 67                         .db #$43, #%01100111
0D294 83 67                         .db #$83, #%01100111
0D296 24 09                         .db #$24, #%00001001
0D298 74 0D                         .db #$74, #%00001101
0D29A C4 0A                         .db #$C4, #%00001010
0D29C 05 A7                         .db #$05, #%10100111
0D29E 45 27                         .db #$45, #%00100111
0D2A0 95 27                         .db #$95, #%00100111
0D2A2 16 C7                         .db #$16, #%11000111
0D2A4 36 67                         .db #$36, #%01100111
0D2A6 86 67                         .db #$86, #%01100111
0D2A8 D6 07                         .db #$D6, #%00000111
0D2AA 07 A3                         .db #$07, #%10100011
0D2AC 27 23                         .db #$27, #%00100011
0D2AE 47 C7                         .db #$47, #%11000111
0D2B0 57 A0                         .db #$57, #%10100000
0D2B2 67 A7                         .db #$67, #%10100111
0D2B4 77 20                         .db #$77, #%00100000
0D2B6 97 C7                         .db #$97, #%11000111
0D2B8 A7 A4                         .db #$A7, #%10100100
0D2BA B7 A7                         .db #$B7, #%10100111
0D2BC C7 24                         .db #$C7, #%00100100
0D2BE 28 0B                         .db #$28, #%00001011
0D2C0 38 A3                         .db #$38, #%10100011
0D2C2 78 08                         .db #$78, #%00001000
0D2C4 88 A3                         .db #$88, #%10100011
0D2C6 C8 0C                         .db #$C8, #%00001100
0D2C8 D8 A4                         .db #$D8, #%10100100
0D2CA 09 43                         .db #$09, #%01000011
0D2CC 59 40                         .db #$59, #%01000000
0D2CE A9 44                         .db #$A9, #%01000100
0D2D0 FF                            .db #LEVEL_END
0D2D1                           
0D2D1                           lvl_layout_19:
0D2D1 11 A8                         .db #$11, #%10101000
0D2D3 21 68                         .db #$21, #%01101000
0D2D5 81 28                         .db #$81, #%00101000
0D2D7 B1 48                         .db #$B1, #%01001000
0D2D9 22 48                         .db #$22, #%01001000
0D2DB 62 68                         .db #$62, #%01101000
0D2DD B2 28                         .db #$B2, #%00101000
0D2DF 23 28                         .db #$23, #%00101000
0D2E1 83 28                         .db #$83, #%00101000
0D2E3 B3 28                         .db #$B3, #%00101000
0D2E5 04 E8                         .db #$04, #%11101000
0D2E7 24 08                         .db #$24, #%00001000
0D2E9 44 08                         .db #$44, #%00001000
0D2EB 64 E8                         .db #$64, #%11101000
0D2ED 84 E8                         .db #$84, #%11101000
0D2EF C4 A8                         .db #$C4, #%10101000
0D2F1 D4 E8                         .db #$D4, #%11101000
0D2F3 15 48                         .db #$15, #%01001000
0D2F5 55 C8                         .db #$55, #%11001000
0D2F7 75 C8                         .db #$75, #%11001000
0D2F9 A5 08                         .db #$A5, #%00001000
0D2FB 36 08                         .db #$36, #%00001000
0D2FD B6 08                         .db #$B6, #%00001000
0D2FF 27 48                         .db #$27, #%01001000
0D301 97 28                         .db #$97, #%00101000
0D303 C7 08                         .db #$C7, #%00001000
0D305 09 61                         .db #$09, #%01100001
0D307 19 11                         .db #$19, #%00010001
0D309 49 61                         .db #$49, #%01100001
0D30B 89 31                         .db #$89, #%00110001
0D30D A9 61                         .db #$A9, #%01100001
0D30F FF                            .db #LEVEL_END
0D310                           
0D310                           lvl_layout_20:
0D310 00 60                         .db #$00, #%01100000
0D312 10 1A                         .db #$10, #%00011010
0D314 40 A7                         .db #$40, #%10100111
0D316 50 20                         .db #$50, #%00100000
0D318 70 1A                         .db #$70, #%00011010
0D31A 80 40                         .db #$80, #%01000000
0D31C B0 1A                         .db #$B0, #%00011010
0D31E C0 20                         .db #$C0, #%00100000
0D320 01 40                         .db #$01, #%01000000
0D322 31 1A                         .db #$31, #%00011010
0D324 A1 40                         .db #$A1, #%01000000
0D326 D1 1A                         .db #$D1, #%00011010
0D328 43 67                         .db #$43, #%01100111
0D32A 83 47                         .db #$83, #%01000111
0D32C 44 A7                         .db #$44, #%10100111
0D32E 54 25                         .db #$54, #%00100101
0D330 94 08                         .db #$94, #%00001000
0D332 A4 A7                         .db #$A4, #%10100111
0D334 55 05                         .db #$55, #%00000101
0D336 65 08                         .db #$65, #%00001000
0D338 06 27                         .db #$06, #%00100111
0D33A 36 67                         .db #$36, #%01100111
0D33C 76 28                         .db #$76, #%00101000
0D33E A6 27                         .db #$A6, #%00100111
0D340 D6 07                         .db #$D6, #%00000111
0D342 A7 A7                         .db #$A7, #%10100111
0D344 08 60                         .db #$08, #%01100000
0D346 09 60                         .db #$09, #%01100000
0D348 18 A7                         .db #$18, #%10100111
0D34A 48 A7                         .db #$48, #%10100111
0D34C 58 47                         .db #$58, #%01000111
0D34E 88 27                         .db #$88, #%00100111
0D350 B8 20                         .db #$B8, #%00100000
0D352 D8 1A                         .db #$D8, #%00011010
0D354 59 15                         .db #$59, #%00010101
0D356 69 60                         .db #$69, #%01100000
0D358 A9 60                         .db #$A9, #%01100000
0D35A FF                            .db #LEVEL_END
0D35B                           
0D35B                           lvl_layout_21:
0D35B 00 13                         .db #$00, #%00010011
0D35D 10 11                         .db #$10, #%00010001
0D35F 20 67                         .db #$20, #%01100111
0D361 60 67                         .db #$60, #%01100111
0D363 A0 47                         .db #$A0, #%01000111
0D365 D0 15                         .db #$D0, #%00010101
0D367 32 63                         .db #$32, #%01100011
0D369 72 05                         .db #$72, #%00000101
0D36B 82 43                         .db #$82, #%01000011
0D36D B2 43                         .db #$B2, #%01000011
0D36F 33 03                         .db #$33, #%00000011
0D371 43 2A                         .db #$43, #%00101010
0D373 63 7A                         .db #$63, #%01111010
0D375 73 2A                         .db #$73, #%00101010
0D377 A3 7A                         .db #$A3, #%01111010
0D379 34 63                         .db #$34, #%01100011
0D37B 74 63                         .db #$74, #%01100011
0D37D B4 43                         .db #$B4, #%01000011
0D37F 06 63                         .db #$06, #%01100011
0D381 46 63                         .db #$46, #%01100011
0D383 86 63                         .db #$86, #%01100011
0D385 C6 C3                         .db #$C6, #%11000011
0D387 07 7A                         .db #$07, #%01111010
0D389 47 7A                         .db #$47, #%01111010
0D38B 67 0A                         .db #$67, #%00001010
0D38D 87 7A                         .db #$87, #%01111010
0D38F 08 13                         .db #$08, #%00010011
0D391 18 43                         .db #$18, #%01000011
0D393 48 63                         .db #$48, #%01100011
0D395 88 63                         .db #$88, #%01100011
0D397 FF                            .db #LEVEL_END
0D398                           
0D398                           lvl_layout_22:
0D398 00 7A                         .db #$00, #%01111010
0D39A 40 7A                         .db #$40, #%01111010
0D39C 80 7A                         .db #$80, #%01111010
0D39E C0 3A                         .db #$C0, #%00111010
0D3A0 13 67                         .db #$13, #%01100111
0D3A2 83 A7                         .db #$83, #%10100111
0D3A4 B3 07                         .db #$B3, #%00000111
0D3A6 14 07                         .db #$14, #%00000111
0D3A8 44 07                         .db #$44, #%00000111
0D3AA A4 07                         .db #$A4, #%00000111
0D3AC 15 A5                         .db #$15, #%10100101
0D3AE 45 A5                         .db #$45, #%10100101
0D3B0 85 25                         .db #$85, #%00100101
0D3B2 86 05                         .db #$86, #%00000101
0D3B4 A6 05                         .db #$A6, #%00000101
0D3B6 17 11                         .db #$17, #%00010001
0D3B8 47 A1                         .db #$47, #%10100001
0D3BA 87 A1                         .db #$87, #%10100001
0D3BC B7 A1                         .db #$B7, #%10100001
0D3BE 18 41                         .db #$18, #%01000001
0D3C0 68 01                         .db #$68, #%00000001
0D3C2 D8 01                         .db #$D8, #%00000001
0D3C4 FF                            .db #LEVEL_END
0D3C5                           
0D3C5                           lvl_layout_23:
0D3C5 00 71                         .db #$00, #%01110001
0D3C7 40 11                         .db #$40, #%00010001
0D3C9 50 43                         .db #$50, #%01000011
0D3CB 80 D1                         .db #$80, #%11010001
0D3CD 90 E3                         .db #$90, #%11100011
0D3CF A0 63                         .db #$A0, #%01100011
0D3D1 01 63                         .db #$01, #%01100011
0D3D3 41 63                         .db #$41, #%01100011
0D3D5 A1 63                         .db #$A1, #%01100011
0D3D7 02 63                         .db #$02, #%01100011
0D3D9 42 63                         .db #$42, #%01100011
0D3DB 62 11                         .db #$62, #%00010001
0D3DD A2 67                         .db #$A2, #%01100111
0D3DF 04 63                         .db #$04, #%01100011
0D3E1 44 23                         .db #$44, #%00100011
0D3E3 64 D1                         .db #$64, #%11010001
0D3E5 74 E3                         .db #$74, #%11100011
0D3E7 84 F1                         .db #$84, #%11110001
0D3E9 94 E3                         .db #$94, #%11100011
0D3EB A4 C7                         .db #$A4, #%11000111
0D3ED B4 23                         .db #$B4, #%00100011
0D3EF 05 63                         .db #$05, #%01100011
0D3F1 45 23                         .db #$45, #%00100011
0D3F3 06 71                         .db #$06, #%01110001
0D3F5 46 11                         .db #$46, #%00010001
0D3F7 56 E3                         .db #$56, #%11100011
0D3F9 D6 07                         .db #$D6, #%00000111
0D3FB 17 D1                         .db #$17, #%11010001
0D3FD 27 43                         .db #$27, #%01000011
0D3FF 67 D1                         .db #$67, #%11010001
0D401 A7 C7                         .db #$A7, #%11000111
0D403 C7 A7                         .db #$C7, #%10100111
0D405 D7 B3                         .db #$D7, #%10110011
0D407 28 43                         .db #$28, #%01000011
0D409 78 43                         .db #$78, #%01000011
0D40B 29 43                         .db #$29, #%01000011
0D40D 79 43                         .db #$79, #%01000011
0D40F FF                           .db #LEVEL_END
0D410                           
0D410                           lvl_layout_24:
0D410 02 67                         .db #$02, #%01100111
0D412 42 67                         .db #$42, #%01100111
0D414 82 67                         .db #$82, #%01100111
0D416 05 67                         .db #$05, #%01100111
0D418 45 67                         .db #$45, #%01100111
0D41A 85 67                         .db #$85, #%01100111
0D41C 08 67                         .db #$08, #%01100111
0D41E 48 67                         .db #$48, #%01100111
0D420 88 67                         .db #$88, #%01100111
0D422 30 E7                         .db #$30, #%11100111
0D424 70 E7                         .db #$70, #%11100111
0D426 B0 E7                         .db #$B0, #%11100111
0D428 34 E7                         .db #$34, #%11100111
0D42A 74 E7                         .db #$74, #%11100111
0D42C B4 E7                         .db #$B4, #%11100111
0D42E 20 13                         .db #$20, #%00010011
0D430 40 10                         .db #$40, #%00010000
0D432 80 02                         .db #$80, #%00000010
0D434 41 05                         .db #$41, #%00000101
0D436 B1 09                         .db #$B1, #%00001001
0D438 02 09                         .db #$02, #%00001001
0D43A 52 0C                         .db #$52, #%00001100
0D43C 13 11                         .db #$13, #%00010001
0D43E 33 04                         .db #$33, #%00000100
0D440 74 0C                         .db #$74, #%00001100
0D442 B4 08                         .db #$B4, #%00001000
0D444 15 09                         .db #$15, #%00001001
0D446 55 0C                         .db #$55, #%00001100
0D448 95 0C                         .db #$95, #%00001100
0D44A 47 03                         .db #$47, #%00000011
0D44C A7 12                         .db #$A7, #%00010010
0D44E 18 15                         .db #$18, #%00010101
0D450 09 05                         .db #$09, #%00000101
0D452 19 03                         .db #$19, #%00000011
0D454 FF                            .db #LEVEL_END
0D455                           
0D455                           lvl_layout_25:
0D455 00 12                         .db #$00, #%00010010
0D457 10 63                         .db #$10, #%01100011
0D459 60 63                         .db #$60, #%01100011
0D45B A0 07                         .db #$A0, #%00000111
0D45D 01 11                         .db #$01, #%00010001
0D45F A1 02                         .db #$A1, #%00000010
0D461 02 67                         .db #$02, #%01100111
0D463 42 07                         .db #$42, #%00000111
0D465 62 67                         .db #$62, #%01100111
0D467 A2 C7                         .db #$A2, #%11000111
0D469 03 61                         .db #$03, #%01100001
0D46B 43 01                         .db #$43, #%00000001
0D46D 63 61                         .db #$63, #%01100001
0D46F A6 E7                         .db #$A6, #%11100111
0D471 B6 47                         .db #$B6, #%01000111
0D473 C6 01                         .db #$C6, #%00000001
0D475 B7 42                         .db #$B7, #%01000010
0D477 B8 42                         .db #$B8, #%01000010
0D479 C8 0A                         .db #$C8, #%00001010
0D47B 09 7A                         .db #$09, #%01111010
0D47D 49 7A                         .db #$49, #%01111010
0D47F 89 3A                         .db #$89, #%00111010
0D481 B9 42                         .db #$B9, #%01000010
0D483 FF                            .db #LEVEL_END
0D484                           
0D484                           ;; Level layout address pointers
0D484                           tbl_lvl_layout_hi:
0D484 CD CD CD CE CE                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D489 CE CF CF CF D0                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D48E D0 D0 D0 D1 D1                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D493 D1 D2 D2 D2 D3                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D498 D3 D3 D3 D4 D4                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D49D                           
0D49D                           tbl_lvl_layout_lo:
0D49D A5 C0 F5 28 99                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D4A2 D4 5D 9E D5 18                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D4A7 47 9A C5 18 8F                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D4AC C0 15 7C D1 10                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D4B1 5B 98 C5 10 55                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D4B6                           
0D4B6                           ;; Ball start position (#$YX)
0D4B6                           tbl_lvl_ball_startpos:
0D4B6 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D4BB 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D4C0 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D4C5 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D4CA 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D4CF                               
0D4CF                           ;; Ball start direction, color and tile score
0D4CF                           ;; #% ccc v tttt
0D4CF                           ;;    ||| | ++++-- tile score
0D4CF                           ;;    ||| +------- vertical direction, up (0) or down
0D4CF                           ;;    +++--------- color (CBRYGM)
0D4CF                           tbl_lvl_ball_init:
0D4CF 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D4D4 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D4D9 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D4DE 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D4E3 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D4E8                           
0D4E8                           
0D4E8                           
0D4E8                           ;; Helper table to multiply values by 16
0D4E8                           tbl_Times16:
0D4E8 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D4F0 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D4F8                               
0D4F8                           
0D4F8                           ;; Helper table to multiply values by 64
0D4F8                           tbl_Times64:
0D4F8 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D4FC                           
0D4FC                           
0D4FC                           ;; Metatile ID to CHR data mapper
0D4FC                           tbl_GametileTopLeft:
0D4FC 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D506                           
0D506                           tbl_GametileTopRight:
0D506 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D510                           
0D510                           tbl_GametileBottomLeft:
0D510 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D51A                           
0D51A                           tbl_GametileBottomRight:
0D51A 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D524                           
0D524                           ;; Metatile ID to RAM byte data mapper
0D524                           tbl_GameTileRamByte:
0D524 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D529                           
0D529                           ;; HUD text data
0D529                           tbl_HudText:
0D529 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D531 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D538 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D540 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D545                           
0D545                           ;; NMI handler
0D545                           NMI:
0D545                               .include "interrupt/nmi.asm"
0D545                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D545                           ;;
0D545                           ;; include/nmi.asm
0D545                           ;;
0D545                           ;; Non-maskable interrupt script. This script is being executed
0D545                           ;; when vBlank hits.
0D545                           ;;
0D545                           ;;
0D545                           
0D545                               ;; Preserve accumulator through stack
0D545 48                            PHA
0D546                           
0D546                               ;; Should NMI be skipped?
0D546 A5 13                         LDA skip_nmi
0D548 F0 03                         BEQ +
0D54A 4C 4B D6                          JMP +skip_nmi
0D54D                               +
0D54D                           
0D54D                               ;; When in NMI, skip additional NMI requests
0D54D A9 01                         LDA #$01
0D54F 85 13                         STA skip_nmi
0D551                           
0D551                               ;; Preserve X, Y, and PC through stack
0D551 8A                            TXA
0D552 48                            PHA
0D553 98                            TYA
0D554 48                            PHA
0D555 08                            PHP
0D556                               
0D556                               ;; Check forced NMI skip
0D556 A5 14                         LDA force_skip_nmi
0D558 F0 03                         BEQ +
0D55A 4C 3A D6                          JMP +force_skip_nmi
0D55D                               +
0D55D                           
0D55D                               ;; Update PPU mask
0D55D                               ;LDA #$00
0D55D                               ;STA PPU_CTRL
0D55D A5 12                         LDA soft_ppu_mask
0D55F 8D 01 20                      STA PPU_MASK
0D562                               
0D562                               
0D562                               ;; Additional PPU updates go here
0D562                               .include "game/interrupt/nmi.asm"
0D562                           
0D562                               ;; Check if ppu_buffer needs updating
0D562 A5 38                         LDA ppu_buffer_update
0D564 D0 03                         BNE +
0D566 4C A8 D5                          JMP +no_ppu_buffer_update
0D569                               +
0D569                           
0D569                               ;; Reset ppu control register and mask
0D569 A2 00                         LDX #$00
0D56B 8E 00 20                      STX PPU_CTRL
0D56E 8E 01 20                      STX PPU_MASK
0D571                           
0D571                               ;; Set up loop
0D571                               -
0D571                                   ;; Reset hi/lo latch
0D571 2C 02 20                          BIT PPU_STATUS
0D574                           
0D574                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D574 BD 00 03                          LDA ppu_buffer,x
0D577 8D 06 20                          STA PPU_ADDR
0D57A E8                                INX
0D57B BD 00 03                          LDA ppu_buffer,x
0D57E 8D 06 20                          STA PPU_ADDR
0D581                           
0D581                                   ;; Write ppu_buffer data to PPU_ADDR
0D581 E8                                INX
0D582 BD 00 03                          LDA ppu_buffer,x
0D585 8D 07 20                          STA PPU_DATA
0D588                           
0D588                                   ;; Check if updating is done (eg. X is at pointer)
0D588 E8                                INX
0D589 E4 39                             CPX ppu_buffer_pointer
0D58B F0 03                             BEQ +
0D58D 4C 71 D5                      JMP -
0D590                           +
0D590                           
0D590                               ;; Reset ppu buffer update and pointer
0D590 A9 00                         LDA #$00
0D592 85 38                         STA ppu_buffer_update
0D594 85 39                         STA ppu_buffer_pointer
0D596                               
0D596                               ;; Reset scrolling position
0D596 8D 05 20                      STA PPU_SCROLL
0D599 8D 05 20                      STA PPU_SCROLL
0D59C                           
0D59C                               ;; Restore ppu control register and mask
0D59C A9 90                         LDA #%10010000
0D59E 8D 00 20                      STA PPU_CTRL
0D5A1 A5 12                         LDA soft_ppu_mask
0D5A3 8D 01 20                      STA PPU_MASK
0D5A6 A9 00                         LDA #$00
0D5A8                           
0D5A8                           ;; Continue other NMI stuff
0D5A8                           +no_ppu_buffer_update:
0D5A8                           
0D5A8                               ;; Reset sprite RAM, draw sprites
0D5A8 8D 03 20                      STA OAM_ADDR
0D5AB A9 02                         LDA #$02
0D5AD 8D 14 40                      STA OAM_DMA
0D5B0                           
0D5B0                               ;; Decrease explosion frame counters
0D5B0 A0 04                         LDY #MAX_ANIMATIONS
0D5B2 A2 00                         LDX #$00
0D5B4                               -
0D5B4 BD 30 03                          LDA explosion_framecounter,x
0D5B7 F0 03                             BEQ +
0D5B9 DE 30 03                              DEC explosion_framecounter,x
0D5BC                                   +
0D5BC E8                                INX
0D5BD 88                                DEY
0D5BE F0 03                             BEQ +done        
0D5C0 4C B4 D5                      JMP -
0D5C3                           +done:
0D5C3                               
0D5C3                               ;; Decrease nudge counter
0D5C3 A5 3C                         LDA nudge_counter
0D5C5 F0 02                         BEQ +
0D5C7 C6 3C                             DEC nudge_counter
0D5C9                               +
0D5C9                           
0D5C9                               ;; Decrease bonus counter
0D5C9 A5 3D                         LDA bonus_counter
0D5CB F0 02                         BEQ +
0D5CD C6 3D                             DEC bonus_counter
0D5CF                               +
0D5CF                               
0D5CF                               ;; Test background noise
0D5CF A5 37                         LDA screen_mode
0D5D1 29 01                         AND #IS_GAME_SCREEN
0D5D3 F0 21                         BEQ +
0D5D5                                   .include "game/include/main/background_sound.asm"
0D5D5                               ;; At random times, set max_noise period to $03-$0A
0D5D5 A5 40                         LDA max_noise
0D5D7 D0 1D                         BNE +
0D5D9 20 06 C4                          JSR sub_GetRandomNumber
0D5DC 29 EF                             AND #%11101111
0D5DE D0 16                             BNE +
0D5E0                                   
0D5E0 A5 15                             LDA frame_counter
0D5E2 85 16                             STA random_seed
0D5E4 20 06 C4                          JSR sub_GetRandomNumber
0D5E7 29 07                             AND #$07
0D5E9 69 03                             ADC #$03
0D5EB 85 40                             STA max_noise
0D5ED A9 01                             LDA #$01
0D5EF 85 41                             STA sweep_noise
0D5F1 A9 34                             LDA #$34
0D5F3 8D 0C 40                          STA NOISE_VOLUME
0D5F6                           
0D5F6                               +
0D5F6                           
0D5F6                               ;; if sweep noise = $00: constant noise
0D5F6                               ;; else if sweep noise > $80: decrease pitch
0D5F6                               ;; else: inrease pitch
0D5F6 A5 41                         LDA sweep_noise
0D5F8 F0 18                         BEQ +constantNoise
0D5FA 30 2A                         BMI +decreaseNoise
0D5FC                           
0D5FC                           ;; Sweep noise up to max noise pitch
0D5FC                           +increaseNoise:
0D5FC C6 42                         DEC current_noise
0D5FE A5 42                         LDA current_noise
0D600 8D 0E 40                      STA NOISE_PERIOD
0D603 C5 40                         CMP max_noise
0D605 D0 08                         BNE +
0D607 A9 00                             LDA #$00
0D609 85 41                             STA sweep_noise
0D60B A9 0A                             LDA #$0A
0D60D 85 43                             STA noise_counter
0D60F                               +
0D60F 4C 3A D6                      JMP +endNoise
0D612                           
0D612                           ;; Keep noise at constant pitch
0D612                           +constantNoise:
0D612 A5 40                         LDA max_noise
0D614 F0 24                         BEQ +endNoise
0D616                           
0D616 A5 43                         LDA noise_counter
0D618 D0 07                         BNE +
0D61A A9 80                             LDA #$80
0D61C 85 41                             STA sweep_noise
0D61E 4C 3A D6                          JMP +endNoise
0D621                               +
0D621 C6 43                         DEC noise_counter
0D623 4C 3A D6                      JMP +endNoise
0D626                           
0D626                           ;; Sweep noise down to initial pitch
0D626                           +decreaseNoise:
0D626 E6 42                         INC current_noise
0D628 A5 42                         LDA current_noise
0D62A 8D 0E 40                      STA NOISE_PERIOD
0D62D C9 0E                         CMP #$0E
0D62F D0 09                         BNE +endNoise
0D631                           
0D631 20 96 C4                      JSR sub_BackgroundNoise
0D634 A9 00                         LDA #$00
0D636 85 40                         STA max_noise
0D638 85 41                         STA sweep_noise
0D63A                           
0D63A                           +endNoise:
0D63A                           
0D63A                               +
0D63A                           
0D63A                           
0D63A                           
0D63A                           ;; This is what happens when we forced nmi skip
0D63A                           +force_skip_nmi:
0D63A                           
0D63A                               ;; Increase frame counters
0D63A E6 15                         INC frame_counter
0D63C                           
0D63C                               ;; reset ball_update_position
0D63C A9 00                         LDA #$00
0D63E 85 35                         STA ball_update_position
0D640                           
0D640                               ;; Don't skip next NMI request
0D640 A9 00                         LDA #$00
0D642 85 13                         STA skip_nmi
0D644 85 44                         STA check_nmi
0D646                           
0D646                               ;; Restore X, Y and PC from stack
0D646 28                            PLP
0D647 68                            PLA
0D648 A8                            TAY
0D649 68                            PLA
0D64A AA                            TAX
0D64B                           
0D64B                           +skip_nmi:
0D64B                               ;; Restore accumulator from stack
0D64B 68                            PLA
0D64C                           
0D64C                               ;; Return
0D64C 40                            RTI
0D64D                           
0D64D                           ;; IRQ handler (empty)
0D64D                           IRQ:
0D64D                               .include "interrupt/irq.asm"
0D64D 40                            RTI0D64E                           
0D64E                           ;; Interrupt vectors
0D64E 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 45 D5                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 4D D6                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
