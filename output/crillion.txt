	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$02        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$30        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_PAINT_BLOCK   = #%00010000
	                            IS_DEATH_BLOCK   = #%00100000
	                            IS_MOVE_BLOCK    = #%01000000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$03
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                               00036                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 3F C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 3F C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 2B C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 F0 C9                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 ED C9                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 FA C3                      JSR sub_DisableRendering
0C08A 20 64 C4                      JSR sub_JumpToPointer
0C08D 20 0E C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; CONCEPT SCRIPTS
0C096                               
0C096                               ;; Upon pressing A, an explosion will happen on screen
0C096                               .include "game/test/show_animation.asm"
0C096                               ;; If A button is pressed, initiate explosion
0C096 A5 10                         LDA buttons_pressed
0C098 29 80                         AND #BUTTON_A
0C09A D0 03                         BNE +
0C09C 4C CE C0                          JMP +end
0C09F                               +
0C09F                           
0C09F                               ;; Get most recent slot for explosion
0C09F A6 31                         LDX explosion_pointer
0C0A1                           
0C0A1                               ;; If 0, use max pointer value
0C0A1 D0 02                         BNE +
0C0A3 A2 04                             LDX #MAX_ANIMATIONS
0C0A5                               +
0C0A5                           
0C0A5                               ;; Decrease pointer by one
0C0A5 CA                            DEX
0C0A6 86 31                         STX explosion_pointer
0C0A8                           
0C0A8                               ;; Load explosion data into RAM
0C0A8 A9 00                         LDA #$00
0C0AA 9D 34 03                      STA explosion_currentframe,x
0C0AD A9 04                         LDA #ANIMATION_SPEED
0C0AF 9D 30 03                      STA explosion_framecounter,x
0C0B2 20 1D C3                      JSR sub_GetRandomNumber
0C0B5                               ;AND #%11110000
0C0B5 9D 3C 03                      STA explosion_x,x
0C0B8 20 1D C3                      JSR sub_GetRandomNumber
0C0BB                               ;AND #%11110000
0C0BB 9D 40 03                      STA explosion_y,x
0C0BE 20 1D C3                      JSR sub_GetRandomNumber
0C0C1 29 02                         AND #%00000010
0C0C3 18                            CLC
0C0C4 69 01                         ADC #$01
0C0C6 9D 38 03                      STA explosion_attributes,x
0C0C9 A9 01                         LDA #$01
0C0CB 9D 44 03                      STA explosion_active,x
0C0CE                           
0C0CE                           
0C0CE                           +end:
0C0CE                           
0C0CE                               ;; Set up loop
0C0CE A2 00                         LDX #$00
0C0D0                               -loop_load_animation:
0C0D0                                   ;; Check if current animation is active. If not, goto next
0C0D0 BD 44 03                          LDA explosion_active,x
0C0D3 D0 03                             BNE +
0C0D5 4C 6F C1                              JMP +next
0C0D8                                   +
0C0D8                           
0C0D8                                   ;; Check the explosion framecounter
0C0D8 BD 30 03                          LDA explosion_framecounter,x
0C0DB D0 26                             BNE +
0C0DD                                       ;; Framecounter is 0
0C0DD                                       ;; Reset to animation speed
0C0DD A9 04                                 LDA #ANIMATION_SPEED
0C0DF 9D 30 03                              STA explosion_framecounter,x
0C0E2                           
0C0E2                                       ;; Set next animation frame, and check if we're done yet
0C0E2 FE 34 03                              INC explosion_currentframe,x
0C0E5 BD 34 03                              LDA explosion_currentframe,x
0C0E8 C9 0A                                 CMP #ANIM_SLIDES
0C0EA D0 17                                 BNE +
0C0EC                           
0C0EC                                       ;; If we're done, inactivate current explosion, clean
0C0EC                                       ;; up sprite RAM and go to the next one
0C0EC A9 00                                 LDA #$00
0C0EE 9D 44 03                              STA explosion_active,x
0C0F1                                       
0C0F1 A9 09                                 LDA #SLIDE_SIZE
0C0F3 0A                                    ASL
0C0F4 0A                                    ASL
0C0F5 A8                                    TAY
0C0F6 A9 EF                                 LDA #$EF
0C0F8                                       -
0C0F8 88                                        DEY
0C0F9 99 00 02                                  STA ADDR_SPRITERAM,y
0C0FC C0 00                                     CPY #00
0C0FE D0 F8                                 BNE -
0C100                                       
0C100 4C 6F C1                              JMP +next
0C103                                   +
0C103                           
0C103                                   ;; Load (x,y) position in temp variables
0C103 BD 3C 03                          LDA explosion_x,x
0C106 85 01                             STA temp+1
0C108 85 03                             STA temp+3
0C10A BD 40 03                          LDA explosion_y,x
0C10D 85 02                             STA temp+2
0C10F                           
0C10F                                   ;; Load attribute in temp variable
0C10F BD 38 03                          LDA explosion_attributes,x
0C112 85 04                             STA temp+4
0C114                           
0C114                                   ;; Load current frame into Y-register
0C114 BC 34 03                          LDY explosion_currentframe,x
0C117                           
0C117                                   ;; Load current frame ROM address from table
0C117 B9 D7 C9                          LDA explosion_anim_lo,y
0C11A 85 0C                             STA pointer
0C11C B9 CD C9                          LDA explosion_anim_hi,y
0C11F 85 0D                             STA pointer+1
0C121                           
0C121                                   ;; Save x-register on stack
0C121 8A                                TXA
0C122 48                                PHA
0C123                           
0C123                                   ;; Load sprites into sprite RAM
0C123 A6 32                             LDX sprite_ram_pointer
0C125 A0 00                             LDY #$00
0C127                           
0C127                                   ;; Prepare (x,y) offset for loop
0C127 84 00                             STY temp
0C129                           
0C129                                   -loop_load_sprite:
0C129                                   
0C129                                       ;; Do not draw empty sprites
0C129 B1 0C                                 LDA (pointer),y
0C12B F0 18                                 BEQ +nextSprite
0C12D                                   
0C12D                                           ;; Add y-position to sprite ram buffer
0C12D A5 02                                     LDA temp+2
0C12F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C132 E8                                        INX
0C133                           
0C133                                           ;; Get tile number from frame ROM address, and
0C133                                           ;; add it to sprite ram buffer
0C133 B1 0C                                     LDA (pointer),y
0C135 9D 00 02                                  STA ADDR_SPRITERAM,x
0C138 E8                                        INX
0C139                           
0C139                                           ;; Add attribute data to sprite ram buffer
0C139 A5 04                                     LDA temp+4
0C13B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13E E8                                        INX
0C13F                           
0C13F                                           ;; Add x-position to sprite ram buffer
0C13F A5 03                                     LDA temp+3
0C141 9D 00 02                                  STA ADDR_SPRITERAM,x
0C144 E8                                        INX
0C145                           
0C145                                       +nextSprite:
0C145                           
0C145                                       ;; Check if all sprites are done
0C145 C8                                    INY
0C146 C0 09                                 CPY #SLIDE_SIZE
0C148 F0 21                                 BEQ +done
0C14A                           
0C14A                                       ;; Update x value
0C14A A5 03                                 LDA temp+3
0C14C 18                                    CLC
0C14D 69 08                                 ADC #$08
0C14F 85 03                                 STA temp+3
0C151                           
0C151                                       ;; Update temp for x,y position
0C151 E6 00                                 INC temp
0C153 A5 00                                 LDA temp
0C155 C9 03                                 CMP #SLIDE_WIDTH
0C157 D0 0F                                 BNE +
0C159                                           ;; Row is done; reset x-position
0C159 A5 01                                     LDA temp+1
0C15B 85 03                                     STA temp+3
0C15D                           
0C15D                                           ;; Update y-position
0C15D A5 02                                     LDA temp+2
0C15F 18                                        CLC
0C160 69 08                                     ADC #$08
0C162 85 02                                     STA temp+2
0C164                           
0C164                                           ;; Reset row counter
0C164 A9 00                                     LDA #$00
0C166 85 00                                     STA temp
0C168                                       +
0C168                           
0C168 4C 29 C1                          JMP -loop_load_sprite
0C16B                           
0C16B                               +done:
0C16B 86 32                             STX sprite_ram_pointer
0C16D                           
0C16D                                   ;; Retrieve x-register from stack
0C16D 68                                PLA
0C16E AA                                TAX
0C16F                           
0C16F                               +next:
0C16F                                   ;; Check if all animations have been updated
0C16F E8                                INX
0C170 E0 04                             CPX #MAX_ANIMATIONS
0C172 F0 03                             BEQ +done
0C174                           
0C174 4C D0 C0                      JMP -loop_load_animation
0C177                           +done:
0C177                           
0C177                               ;; Check if we're on the game screen
0C177 A5 2D                         LDA screen_mode
0C179 C9 01                         CMP #IS_GAME_SCREEN
0C17B F0 03                         BEQ +
0C17D 4C FA C2                          JMP +doneGameScreen
0C180                               +
0C180                           
0C180                               ;; We're on the game screen
0C180                               ;; Check if position should be updated (ie. has nmi happened yet)
0C180 A5 2B                         LDA ball_update_position
0C182 F0 03                         BEQ +
0C184 4C DE C2                          JMP +skipBallMovement
0C187                               +
0C187                               
0C187                               ;; Move the ball
0C187                               .include "game/test/move_ball.asm"
0C187                           
0C187                               ;; Check if ball goes up or down
0C187 A5 2C                         LDA ball_flags
0C189 29 10                         AND #BALL_MOVES_DOWN
0C18B F0 24                         BEQ +moveBallUp
0C18D                           
0C18D                           
0C18D                           +moveBallDown:
0C18D                               ;; update the low byte
0C18D A5 1A                         LDA ball_ypos_lo
0C18F 18                            CLC
0C190 69 30                         ADC #BALL_SPEED_LO
0C192 85 1A                         STA ball_ypos_lo
0C194                           
0C194                               ;; update the high byte with carry
0C194 A5 19                         LDA ball_ypos_hi
0C196 69 02                         ADC #BALL_SPEED_HI
0C198 85 19                         STA ball_ypos_hi
0C19A                               
0C19A                               ;; Check bottom bound
0C19A C9 C8                         CMP #BOUND_BOTTOM
0C19C 90 32                         BCC +checkHorizontalMovement
0C19E F0 30                         BEQ +checkHorizontalMovement
0C1A0                           
0C1A0                           
0C1A0                               ;; Change ball direction to "up"
0C1A0 A9 C8                         LDA #BOUND_BOTTOM
0C1A2 85 19                         STA ball_ypos_hi
0C1A4 A9 00                         LDA #$00
0C1A6 85 1A                         STA ball_ypos_lo
0C1A8 A5 2C                         LDA ball_flags
0C1AA 29 EF                         AND #MOVE_BALL_UP
0C1AC 85 2C                         STA ball_flags
0C1AE 4C D0 C1                      JMP +checkHorizontalMovement
0C1B1                           
0C1B1                           
0C1B1                           +moveBallUp:
0C1B1                               ;; update the low byte
0C1B1 A5 1A                         LDA ball_ypos_lo
0C1B3 38                            SEC
0C1B4 E9 30                         SBC #BALL_SPEED_LO
0C1B6 85 1A                         STA ball_ypos_lo
0C1B8                           
0C1B8                               ;; update the high byte with carry
0C1B8 A5 19                         LDA ball_ypos_hi
0C1BA E9 02                         SBC #BALL_SPEED_HI
0C1BC 85 19                         STA ball_ypos_hi
0C1BE                               
0C1BE                               ;; Check top bound
0C1BE C9 30                         CMP #BOUND_TOP
0C1C0 B0 0E                         BCS +checkHorizontalMovement
0C1C2                           
0C1C2                               ;; Change ball direction to "down"
0C1C2 A9 30                         LDA #BOUND_TOP
0C1C4 85 19                         STA ball_ypos_hi
0C1C6 A9 00                         LDA #$00
0C1C8 85 1A                         STA ball_ypos_lo
0C1CA A5 2C                         LDA ball_flags
0C1CC 09 10                         ORA #MOVE_BALL_DOWN
0C1CE 85 2C                         STA ball_flags
0C1D0                           
0C1D0                           
0C1D0                           +checkHorizontalMovement:
0C1D0                           
0C1D0                               ;; Check if ball is being nudged
0C1D0 A5 33                         LDA nudge_counter
0C1D2 D0 47                         BNE +doneBallMovement
0C1D4                           
0C1D4                               ;; Check if left button is held
0C1D4 A5 0F                         LDA buttons_held
0C1D6 29 02                         AND #BUTTON_LEFT
0C1D8 F0 1E                         BEQ +
0C1DA                                   ;; update the low byte
0C1DA A5 18                             LDA ball_xpos_lo
0C1DC 38                                SEC
0C1DD E9 30                             SBC #BALL_SPEED_LO
0C1DF 85 18                             STA ball_xpos_lo
0C1E1                           
0C1E1                                   ;; update the high byte
0C1E1 A5 17                             LDA ball_xpos_hi
0C1E3 E9 02                             SBC #BALL_SPEED_HI
0C1E5 85 17                             STA ball_xpos_hi
0C1E7                                   
0C1E7                                   ;; Check left bound
0C1E7 C9 10                             CMP #BOUND_LEFT
0C1E9 B0 30                             BCS +doneBallMovement
0C1EB                                   
0C1EB                                   ;; Set flag to nudge right
0C1EB A5 2C                             LDA ball_flags
0C1ED 09 02                             ORA #NUDGE_BALL_RIGHT
0C1EF 85 2C                             STA ball_flags
0C1F1                                   
0C1F1                                   ;; Set nudge timer
0C1F1 A9 03                             LDA #NUDGE_FRAMES
0C1F3 85 33                             STA nudge_counter
0C1F5                                   
0C1F5                           
0C1F5 4C 1B C2                          JMP +doneBallMovement        
0C1F8                               +
0C1F8                           
0C1F8                               ;; Check if right button is held
0C1F8 A5 0F                         LDA buttons_held
0C1FA 29 01                         AND #BUTTON_RIGHT
0C1FC F0 1D                         BEQ +
0C1FE                                   ;; update the low byte
0C1FE A5 18                             LDA ball_xpos_lo
0C200 18                                CLC
0C201 69 30                             ADC #BALL_SPEED_LO
0C203 85 18                             STA ball_xpos_lo
0C205                           
0C205                                   ;; update the high byte
0C205 A5 17                             LDA ball_xpos_hi
0C207 69 02                             ADC #BALL_SPEED_HI
0C209 85 17                             STA ball_xpos_hi     
0C20B                           
0C20B                                  ;; Check right bound
0C20B C9 E8                             CMP #BOUND_RIGHT
0C20D 90 0C                             BCC +doneBallMovement
0C20F F0 0A                             BEQ +doneBallMovement
0C211                                   
0C211                                   ;; Set flag to nudge right
0C211 A5 2C                             LDA ball_flags
0C213 29 FD                             AND #NUDGE_BALL_LEFT
0C215 85 2C                             STA ball_flags
0C217                                   
0C217                                   ;; Set nudge timer
0C217 A9 03                             LDA #NUDGE_FRAMES
0C219 85 33                             STA nudge_counter
0C21B                               +
0C21B                           
0C21B                           
0C21B                           +doneBallMovement:
0C21B                           
0C21B                               ;; Check nudge
0C21B A5 33                         LDA nudge_counter
0C21D F0 23                         BEQ +doneBallNudging
0C21F A5 2C                             LDA ball_flags
0C221 29 02                             AND #NUDGE_BALL_RIGHT
0C223 F0 10                             BEQ +nudgeBallLeft
0C225                                   
0C225                                       ;; update the low byte
0C225 A5 18                                 LDA ball_xpos_lo
0C227 18                                    CLC
0C228 69 30                                 ADC #BALL_SPEED_LO
0C22A 85 18                                 STA ball_xpos_lo
0C22C                           
0C22C                                       ;; update the high byte
0C22C A5 17                                 LDA ball_xpos_hi
0C22E 69 02                                 ADC #BALL_SPEED_HI
0C230 85 17                                 STA ball_xpos_hi  
0C232 4C 42 C2                              JMP +doneBallNudging
0C235                                   +nudgeBallLeft:
0C235                                   
0C235                                   ;; update the low byte
0C235 A5 18                             LDA ball_xpos_lo
0C237 38                                SEC
0C238 E9 30                             SBC #BALL_SPEED_LO
0C23A 85 18                             STA ball_xpos_lo
0C23C                           
0C23C                                   ;; update the high byte
0C23C A5 17                             LDA ball_xpos_hi
0C23E E9 02                             SBC #BALL_SPEED_HI
0C240 85 17                             STA ball_xpos_hi
0C242                               +doneBallNudging:
0C242                           
0C242                               ;; Don't update position again until next frame
0C242 E6 2B                         INC ball_update_position
0C244                           
0C244                               
0C244                               ;; Test collision detection
0C244                               .include "game/test/collision_detection.asm"
0C244                           
0C244                               ;; Get ball's x-left, x-center, x-right position
0C244 A5 17                         LDA ball_xpos_hi
0C246 18                            CLC
0C247 69 F0                         ADC #BALL_LEFT_WGA
0C249 85 25                         STA ball_left
0C24B 18                            CLC
0C24C 69 04                         ADC #BALL_HALF_SIZE
0C24E 85 26                         STA ball_center
0C250 18                            CLC
0C251 69 04                         ADC #BALL_HALF_SIZE
0C253 85 27                         STA ball_right
0C255                           
0C255                               ;; Get ball's y-top, y-middle, y-bottom position
0C255 A5 19                         LDA ball_ypos_hi
0C257 18                            CLC
0C258 69 D0                         ADC #BALL_TOP_WGA
0C25A 85 28                         STA ball_top
0C25C 18                            CLC
0C25D 69 04                         ADC #BALL_HALF_SIZE
0C25F 85 29                         STA ball_middle
0C261 18                            CLC
0C262 69 04                         ADC #BALL_HALF_SIZE
0C264 85 2A                         STA ball_bottom
0C266                           
0C266                           +checkRightCollision:
0C266                               ;; Check if ball moves right
0C266                               ;; No need to check nudging here as that will never collide with a tile
0C266 A5 0F                         LDA buttons_held
0C268 29 01                         AND #BUTTON_RIGHT
0C26A F0 1B                         BEQ +checkLeftCollision
0C26C                           
0C26C                               ;; Check tile at right position
0C26C A5 29                         LDA ball_middle
0C26E 85 00                         STA temp
0C270 A5 27                         LDA ball_right
0C272 85 01                         STA temp+1
0C274 20 E2 C3                      JSR sub_ConvertXYToTileType
0C277 29 01                         AND #TILE_IS_SOLID
0C279 F0 2A                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C27B                           
0C27B                               ;; Tile is solid; nudge ball and evaluate tile type
0C27B A5 2C                         LDA ball_flags
0C27D 09 FD                         ORA #NUDGE_BALL_LEFT
0C27F 85 2C                         STA ball_flags
0C281 20 3B C4                      JSR sub_EvaluateTileType
0C284 4C A5 C2                      JMP +checkTopCollision
0C287                           
0C287                           +checkLeftCollision:
0C287                               ;; Check if ball moves right
0C287                               ;; No need to check nudging here as that will never collide with a tile
0C287 A5 0F                         LDA buttons_held
0C289 29 02                         AND #BUTTON_LEFT
0C28B F0 18                         BEQ +checkTopCollision
0C28D                           
0C28D                               ;; Check tile at right position
0C28D A5 29                         LDA ball_middle
0C28F 85 00                         STA temp
0C291 A5 25                         LDA ball_left
0C293 85 01                         STA temp+1
0C295 20 E2 C3                      JSR sub_ConvertXYToTileType
0C298 29 01                         AND #TILE_IS_SOLID
0C29A F0 09                         BEQ +checkTopCollision
0C29C                           
0C29C                               ;; Tile is solid; nudge ball and evaluate tile type
0C29C A5 2C                         LDA ball_flags
0C29E 29 FD                         AND #NUDGE_BALL_LEFT
0C2A0 85 2C                         STA ball_flags
0C2A2 20 3B C4                      JSR sub_EvaluateTileType
0C2A5                               ;JMP +checkTopCollision
0C2A5                           
0C2A5                           +checkTopCollision:
0C2A5                               ;; Check if ball moves up
0C2A5 A5 2C                         LDA ball_flags
0C2A7 29 10                         AND #BALL_MOVES_DOWN
0C2A9 D0 1B                         BNE +checkBottomCollision
0C2AB                           
0C2AB                               ;; Check tile at top position
0C2AB A5 28                         LDA ball_top
0C2AD 85 00                         STA temp
0C2AF A5 26                         LDA ball_center
0C2B1 85 01                         STA temp+1
0C2B3 20 E2 C3                      JSR sub_ConvertXYToTileType
0C2B6 29 01                         AND #TILE_IS_SOLID
0C2B8 F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C2BA                           
0C2BA                               ;; Tile is solid; move ball down and evaluate tile type
0C2BA A5 2C                         LDA ball_flags
0C2BC 09 10                         ORA #MOVE_BALL_DOWN
0C2BE 85 2C                         STA ball_flags
0C2C0 20 3B C4                      JSR sub_EvaluateTileType
0C2C3 4C DE C2                      JMP +doneCheckingCollision
0C2C6                           
0C2C6                           +checkBottomCollision:
0C2C6                               ;; No movement check needed: since ball is not moving up, it must move down
0C2C6                           
0C2C6                               ;; Check tile at bottom position
0C2C6 A5 2A                         LDA ball_bottom
0C2C8 85 00                         STA temp
0C2CA A5 26                         LDA ball_center
0C2CC 85 01                         STA temp+1
0C2CE 20 E2 C3                      JSR sub_ConvertXYToTileType
0C2D1 29 01                         AND #TILE_IS_SOLID
0C2D3 F0 09                         BEQ +doneCheckingCollision
0C2D5                           
0C2D5                               ;; Tile is solid; move ball up and evaluate tile type
0C2D5 A5 2C                         LDA ball_flags
0C2D7 29 EF                         AND #MOVE_BALL_UP
0C2D9 85 2C                         STA ball_flags
0C2DB 20 3B C4                      JSR sub_EvaluateTileType
0C2DE                               ;JMP +doneCheckingCollision
0C2DE                           
0C2DE                           +doneCheckingCollision:
0C2DE                           
0C2DE                           
0C2DE                           
0C2DE                           +skipBallMovement:
0C2DE                               ;; Add to sprite buffer
0C2DE A6 32                         LDX sprite_ram_pointer
0C2E0 A5 19                         LDA ball_ypos_hi
0C2E2 9D 00 02                      STA ADDR_SPRITERAM,x
0C2E5 E8                            INX
0C2E6 A9 01                         LDA #BALL_TILE_CHR
0C2E8 9D 00 02                      STA ADDR_SPRITERAM,x
0C2EB E8                            INX
0C2EC A9 00                         LDA #BALL_ATTR
0C2EE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F1 E8                            INX
0C2F2 A5 17                         LDA ball_xpos_hi
0C2F4 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F7 E8                            INX
0C2F8 86 32                         STX sprite_ram_pointer
0C2FA                           
0C2FA                           
0C2FA                           +doneGameScreen:
0C2FA                           
0C2FA                               ;; Upon pressing START, (next level) design will be drawn
0C2FA                               .include "game/test/load_next_level.asm"
0C2FA                               ;; If START button is pressed
0C2FA A5 10                         LDA buttons_pressed
0C2FC 29 10                         AND #BUTTON_START
0C2FE F0 10                         BEQ +continue
0C300                                   ;; Load the next level
0C300 E6 34                             INC current_level
0C302 A5 34                             LDA current_level
0C304 C9 19                             CMP #25
0C306 D0 04                             BNE +
0C308 A9 00                                 LDA #$00
0C30A 85 34                                 STA current_level
0C30C                                   +
0C30C                                   
0C30C A9 81                             LDA #LOAD_GAME_SCREEN
0C30E 85 2D                             STA screen_mode
0C310                           
0C310                               +continue:
0C310                           
0C310                           
0C310                           
0C310                               ;; Sprite clean-up
0C310 A6 32                         LDX sprite_ram_pointer
0C312 A9 EF                         LDA #$EF
0C314                               -
0C314 9D 00 02                          STA ADDR_SPRITERAM,x
0C317 E8                                INX
0C318 D0 FA                         BNE -
0C31A 4C 57 C0                      JMP MainGameLoop
0C31D                           
0C31D                           ;; Subroutines
0C31D                           .include "include/subroutines.asm"
0C31D                           
0C31D                           ;; RNG
0C31D                           .include "subroutine/GetRandomNumber.asm"
0C31D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C31D                           ;;
0C31D                           ;; subroutine/GetRandomNumber.asm
0C31D                           ;;
0C31D                           ;; Simple and fast random number generator by White Flame.
0C31D                           ;;
0C31D                           ;; Set random_seed to an arbitrary number to randomize between
0C31D                           ;; gaming sessions, for instance using the frame counter upon
0C31D                           ;; pressing START on the intro screen.
0C31D                           ;;
0C31D                           ;;     ;; IF START PRESSED:
0C31D                           ;;     LDA frame_counter
0C31D                           ;;     STA random_seed
0C31D                           ;;
0C31D                           ;; Source:
0C31D                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C31D                           ;;
0C31D                           ;;
0C31D                           
0C31D                           sub_GetRandomNumber:
0C31D                               ;; Force EOR if random_seed is zero
0C31D A5 16                         LDA random_seed
0C31F F0 05                         BEQ +doEor
0C321                           
0C321                               ;; Shift left, and EOR if the high bit is set
0C321 0A                            ASL
0C322 F0 04                         BEQ +noEor
0C324 90 02                         BCC +noEor
0C326                           
0C326                           +doEor:
0C326 49 1D                         EOR #$1D
0C328                           
0C328                           +noEor:
0C328 85 16                         STA random_seed
0C32A                           
0C32A 60                            RTS
0C32B                           
0C32B                           
0C32B                           ;; Read controller input
0C32B                           .include "subroutine/ReadController.asm"
0C32B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C32B                           ;;
0C32B                           ;; subroutine/ReadController.asm
0C32B                           ;;
0C32B                           ;; Subroutine that polls the controller and stores the input
0C32B                           ;; buttons in a variable. This version only handles controller
0C32B                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C32B                           ;;
0C32B                           ;;
0C32B                           
0C32B                           sub_ReadController:
0C32B                           
0C32B                               ;; Set strobe bit
0C32B A9 01                         LDA #$01
0C32D 8D 16 40                      STA JOYPAD_1
0C330                           
0C330                               ;; Set up ring counter
0C330 85 0F                         STA buttons_held
0C332                           
0C332                               ;; Clear strobe bit
0C332 4A                            LSR
0C333 8D 16 40                      STA JOYPAD_1
0C336                           
0C336                               ;; Loop through button presses
0C336                               -
0C336 AD 16 40                          LDA JOYPAD_1
0C339 4A                                LSR
0C33A 26 0F                             ROL buttons_held
0C33C                           
0C33C                               ;; Check if ring counter is done
0C33C 90 F8                         BCC -
0C33E                           
0C33E                               ;; Return from subroutine
0C33E 60                            RTS
0C33F                           
0C33F                           
0C33F                           ;; vBlank wait
0C33F                           .include "subroutine/WaitForVBlank.asm"
0C33F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C33F                           ;;
0C33F                           ;; subroutine/WaitForVBlank.asm
0C33F                           ;;
0C33F                           ;; Subroutine that essentially pauses script execution until
0C33F                           ;; vBlank happens.
0C33F                           ;;
0C33F                           ;;
0C33F                           
0C33F                           sub_WaitForVBlank:
0C33F 2C 02 20                      BIT $2002
0C342 10 FB                         BPL sub_WaitForVBlank
0C344 60                            RTS
0C345                           
0C345                           
0C345                           ;; Game specific subroutines
0C345                           .include "game/include/subroutines.asm"
0C345                           ;; additional game-specific subroutines go here
0C345                           
0C345                           .include "game/subroutine/ClearScreen.asm"
0C345                           ;; Subroutine to clear the screen
0C345                           ;; If it's a game screen, add noise
0C345                           
0C345                           sub_ClearScreen:
0C345                               ;; Check of game screen or not
0C345 A5 2D                         LDA screen_mode
0C347 29 03                         AND #CHECK_SCREEN_MODE
0C349 C9 01                         CMP #IS_GAME_SCREEN
0C34B F0 02                         BEQ +
0C34D A9 00                             LDA #$00
0C34F                               +
0C34F 85 01                         STA temp+1
0C351                               
0C351                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C351 2C 02 20                      BIT PPU_STATUS
0C354 A9 20                         LDA #$20
0C356 8D 06 20                      STA PPU_ADDR
0C359 A9 00                         LDA #$00
0C35B 8D 06 20                      STA PPU_ADDR
0C35E                               
0C35E                               ;; Set up tile to draw and loop
0C35E 85 00                         STA temp
0C360 AA                            TAX
0C361 A8                            TAY
0C362                           
0C362                               -     
0C362                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C362 A5 00                             LDA temp
0C364 8D 07 20                          STA PPU_DATA
0C367                           
0C367                                   ;; Check if we should draw noise next. Noise is drawn if:
0C367                                   ;; - Screen mode is game screen
0C367                                   ;; - Y between #$06 and #$19 (inclusive)
0C367                                   ;; - X between #$02 and #$1D (inclusive)
0C367                                   
0C367                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C367 A5 01                             LDA temp+1
0C369 F0 1C                             BEQ +nextTileInRow
0C36B                                   
0C36B                                   ;; If Y < $6, skip the check
0C36B C0 06                             CPY #$06
0C36D 90 18                             BCC +nextTileInRow
0C36F                                   
0C36F                                   ;; If X < $1, skip the check
0C36F E0 01                             CPX #$01
0C371 90 14                             BCC +nextTileInRow
0C373                                   
0C373                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C373 E0 1D                             CPX #$1D
0C375 D0 04                             BNE +
0C377 A9 00                                 LDA #$00
0C379 85 00                                 STA temp
0C37B                                   +
0C37B B0 0A                             BCS +nextTileInRow
0C37D                                   
0C37D                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C37D 20 1D C3                          JSR sub_GetRandomNumber
0C380 29 07                             AND #%00000111
0C382 18                                CLC
0C383 69 68                             ADC #$68
0C385 85 00                             STA temp
0C387                           
0C387                           +nextTileInRow:
0C387                                   
0C387                                   ;; Check if a row has been done. If not, draw the next
0C387 E8                                INX
0C388 E0 20                             CPX #$20
0C38A D0 D6                             BNE -
0C38C                                   
0C38C                                   ;; Go to the next row (if any left)
0C38C A2 00                             LDX #00
0C38E C8                                INY
0C38F                                   
0C38F                                   ;; If Y is 1A, skip noise tile check until done drawing
0C38F C0 1A                             CPY #$1A
0C391 D0 04                             BNE +
0C393 A9 00                                 LDA #$00
0C395 85 01                                 STA temp+1
0C397                                   +
0C397                                   
0C397 C0 1E                             CPY #$1E
0C399 D0 C7                         BNE -
0C39B                           
0C39B                               ;; Clear attribute table
0C39B A9 23                         LDA #$23
0C39D 8D 06 20                      STA PPU_ADDR
0C3A0 A9 C0                         LDA #$C0
0C3A2 8D 06 20                      STA PPU_ADDR
0C3A5 A9 00                         LDA #$00
0C3A7 A2 40                         LDX #$40
0C3A9                               -
0C3A9 8D 07 20                          STA PPU_DATA
0C3AC CA                                DEX
0C3AD D0 FA                         BNE -
0C3AF                               
0C3AF 60                            RTS0C3B0                           .include "game/subroutine/ColorizeBall.asm"
0C3B0                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3B0                           ;;
0C3B0                           ;;  Subroutine: ColorizeBall
0C3B0                           ;;
0C3B0                           ;;  Applies the color set through ball_flags to the ball sprite.
0C3B0                           ;;
0C3B0                           ;;
0C3B0                           
0C3B0                           
0C3B0                           sub_ColorizeBall:
0C3B0                           
0C3B0                               ;; Get color from ball_flags
0C3B0 4A                            LSR
0C3B1 4A                            LSR
0C3B2 4A                            LSR
0C3B3 4A                            LSR
0C3B4 4A                            LSR
0C3B5 AA                            TAX
0C3B6                           
0C3B6                               ;; Add new light color of ball to PPU palette
0C3B6 A9 3F                         LDA #$3F
0C3B8 85 00                         STA temp
0C3BA A9 11                         LDA #$11
0C3BC 85 01                         STA temp+1
0C3BE BD E7 C9                      LDA tbl_BallColorLight,x
0C3C1 85 02                         STA temp+2
0C3C3 20 83 C8                      JSR sub_WriteByteToPPUBuffer
0C3C6                               
0C3C6                               ;; Add new dark color of ball to PPU palette
0C3C6 E6 01                         INC temp+1
0C3C8 BD E1 C9                      LDA tbl_BallColorDark,x
0C3CB 85 02                         STA temp+2
0C3CD 20 83 C8                      JSR sub_WriteByteToPPUBuffer
0C3D0                               
0C3D0 60                            RTS
0C3D1                           
0C3D1                           .include "game/subroutine/ColorsMatch.asm"
0C3D1                           
0C3D1                           ;; Subroutine to check if ball color matches colliding tile color
0C3D1                           
0C3D1                           sub_ColorsMatch:
0C3D1                               ;; Save tile color in temp variable
0C3D1 A5 35                         LDA colliding_tile
0C3D3 29 0E                         AND #%00001110
0C3D5 85 00                         STA temp
0C3D7                           
0C3D7                               ;; Get ball color
0C3D7 A5 2C                         LDA ball_flags
0C3D9 29 E0                         AND #%11100000
0C3DB 4A                            LSR
0C3DC 4A                            LSR
0C3DD 4A                            LSR
0C3DE 4A                            LSR
0C3DF                           
0C3DF                               ;; Compare with tile color
0C3DF C5 00                         CMP temp
0C3E1 60                            RTS
0C3E2                           
0C3E2                           .include "game/subroutine/ConvertXYToTileType.asm"
0C3E2                           
0C3E2                           ;; Subroutine to convert the ball's position to a tile type
0C3E2                           ;; - Expects temp to be y-position of ball within game area
0C3E2                           ;; - Expects temp+1 to be x-position of ball within game area
0C3E2                           ;; - Puts result in accumulator and zp variable
0C3E2                           ;; - Corrupts X-register
0C3E2                           
0C3E2                           sub_ConvertXYToTileType:
0C3E2 A5 01                         LDA temp+1
0C3E4 4A                            LSR
0C3E5 4A                            LSR
0C3E6 4A                            LSR
0C3E7 4A                            LSR
0C3E8 85 09                         STA temp+9
0C3EA A5 00                         LDA temp
0C3EC 29 F0                         AND #%11110000
0C3EE 18                            CLC
0C3EF 65 09                         ADC temp+9
0C3F1 85 09                         STA temp+9
0C3F3 AA                            TAX
0C3F4 BD 00 04                      LDA ADDR_SCREENTILERAM, x
0C3F7 85 35                         STA colliding_tile
0C3F9 60                            RTS
0C3FA                           
0C3FA                           .include "game/subroutine/DisableEnableRendering.asm"
0C3FA                           sub_DisableRendering:
0C3FA                               ;; Force NMI skip, disable rendering
0C3FA A9 01                     	LDA #$01
0C3FC 85 14                     	STA force_skip_nmi
0C3FE 20 3F C3                      JSR sub_WaitForVBlank
0C401 A5 12                         LDA soft_ppu_mask
0C403 29 E7                         AND #%11100111
0C405 8D 01 20                      STA PPU_MASK
0C408 85 12                         STA soft_ppu_mask
0C40A 20 3F C3                      JSR sub_WaitForVBlank
0C40D 60                            RTS
0C40E                           
0C40E                           sub_EnableRendering:
0C40E                               ;; Enable rendering
0C40E A9 00                     	LDA #$00
0C410 8D 05 20                  	STA PPU_SCROLL
0C413 8D 05 20                  	STA PPU_SCROLL
0C416 20 3F C3                      JSR sub_WaitForVBlank
0C419 85 14                     	STA force_skip_nmi
0C41B A5 12                         LDA soft_ppu_mask
0C41D 09 18                         ORA #%00011000
0C41F 85 12                         STA soft_ppu_mask
0C421 8D 01 20                      STA PPU_MASK
0C424 20 3F C3                      JSR sub_WaitForVBlank
0C427 60                            RTS
0C428                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C428                           sub_drawIntroScreenLogoTile:
0C428 B9 C9 C8                      LDA tbl_IntroScreenLogoChr,y
0C42B C9 60                         CMP #$60
0C42D D0 08                         BNE +
0C42F 20 1D C3                          JSR sub_GetRandomNumber
0C432 29 07                             AND #$07
0C434 18                                CLC
0C435 69 60                             ADC #$60
0C437                               +
0C437 8D 07 20                      STA PPU_DATA
0C43A 60                            RTS
0C43B                           .include "game/subroutine/EvaluateTileType.asm"
0C43B                           
0C43B                           ;; Subroutine to evaluate the colliding tile type and take its
0C43B                           ;; corresponding action (move block, kill player, ...)
0C43B                           ;; - Expects X-register to be the ADDR_SCREENTILERAM offset
0C43B                           ;; - Uses zp variable colliding_tile
0C43B                           
0C43B                           sub_EvaluateTileType:
0C43B                           
0C43B                               ;; Check if collided tile is a color block
0C43B A5 35                         LDA colliding_tile
0C43D 29 80                         AND #IS_COLOR_BLOCK
0C43F F0 07                         BEQ +checkIfPaintBlock
0C441                                   ;; It's a color block. Check if the colors match
0C441 20 D1 C3                          JSR sub_ColorsMatch
0C444 F0 01                             BEQ +
0C446                                       ;; Colors don't match - return
0C446 60                                    RTS
0C447                                   +
0C447                           
0C447                                   ;; Colors match. Destroy color block
0C447                                   ;; - Add the tiles that need updating to ppu buffer
0C447                                   ;; - Load destruction animation on tile
0C447                                   ;; - Write #$00 in tile type ram (makes not-solid)
0C447                                   ;; - Update attribute table accordingly through ppu buffer
0C447                                   ;; - If there are no color blocks left:
0C447                                   ;;   - Freeze ball
0C447                                   ;;   - Initiate level-win state
0C447                                   ;; (@TODO)
0C447 60                                RTS
0C448                               +checkIfPaintBlock:
0C448                               
0C448                               ;; Check if collided tile is a paint block
0C448 A5 35                         LDA colliding_tile
0C44A 29 10                         AND #IS_PAINT_BLOCK
0C44C F0 01                         BEQ +checkIfDeathBlock
0C44E                                   ;; It's a paint block. Update ball color (@TODO)
0C44E                           
0C44E                           ;        ;; Save x-register
0C44E                           ;        TXA
0C44E                           ;        PHA
0C44E                           ;
0C44E                           ;        ;; Get tile color
0C44E                           ;        LDA colliding_tile
0C44E                           ;        AND #%00001110
0C44E                           ;        ASL
0C44E                           ;        ASL
0C44E                           ;        ASL
0C44E                           ;        ASL
0C44E                           ;        STA temp
0C44E                           ;
0C44E                           ;        ;; Apply tile color to ball
0C44E                           ;        LDA ball_flags
0C44E                           ;        AND #%00011111
0C44E                           ;        ORA temp
0C44E                           ;        STA ball_flags
0C44E                           ;        JSR sub_ColorizeBall
0C44E                           ;
0C44E                           ;        ;; Restore x-register
0C44E                           ;        PLA
0C44E                           ;        TAX
0C44E                           
0C44E                                   ;; Return
0C44E 60                                RTS
0C44F                               +checkIfDeathBlock:
0C44F                           
0C44F                               ;; Check if collided tile is a death block
0C44F A5 35                         LDA colliding_tile
0C451 29 20                         AND #IS_DEATH_BLOCK
0C453 F0 01                         BEQ +checkIfMoveBlock
0C455                                   ;; It is a death block. Kill player and return (@TODO)
0C455                           ;        LDA ball_flags
0C455                           ;        ORA #%00000101
0C455                           ;        STA ball_flags
0C455 60                                RTS
0C456                               +checkIfMoveBlock:
0C456                           
0C456                               ;; Check if collided tile is a move block
0C456 A5 35                         LDA colliding_tile
0C458 29 40                         AND #IS_MOVE_BLOCK
0C45A F0 07                         BEQ +done
0C45C                                   ;; It is a move block. Check if colors match
0C45C 20 D1 C3                          JSR sub_ColorsMatch
0C45F F0 01                             BEQ +
0C461                                       ;; Colors don't match - return
0C461 60                                    RTS
0C462                                   +
0C462                           
0C462                                   ;; Colors match.
0C462                                   ;; - Check if next tile is a solid
0C462                                   ;; - If not, move the tile:
0C462                                   ;;   - Add the tiles that need updating to ppu buffer
0C462                                   ;;   - Add move tile sprite over the original tile
0C462                                   ;;   - Initiate moving the sprite that way for 16px
0C462                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C462                                   ;;   - Update attribute table accordingly through ppu buffer
0C462                                   ;; - After moving the sprite, in a different routine:
0C462                                   ;;   - Add move tile data on the new tile location
0C462                                   ;;   - Write the original tile type data on new position in ram
0C462                                   ;;   - Destroy sprite
0C462                                   ;;   - Update attribute table accordingly through ppu buffer
0C462                                   ;; (@TODO)
0C462 60                                RTS
0C463                               +done:
0C463                           
0C463                               ;; Return
0C463 60                            RTS
0C464                           
0C464                           .include "game/subroutine/JumpToPointer.asm"
0C464                           sub_JumpToPointer:
0C464 6C 0C 00                      JMP (pointer)
0C467                               ;RTS must be handled by the routine (pointer) jumps to
0C467                           .include "game/subroutine/LoadGameScreen.asm"
0C467                           sub_LoadGameScreen:
0C467                           
0C467                               ;; Clear the screen
0C467 20 45 C3                      JSR sub_ClearScreen
0C46A                               
0C46A                               ;; Clear collision and attribute data
0C46A A2 00                         LDX #$00
0C46C 8A                            TXA
0C46D                               -
0C46D 9D 00 04                          STA tile_type,x
0C470 E8                                INX
0C471 D0 FA                         BNE -
0C473                               
0C473                               ;; Get pointer from current level
0C473 A6 34                         LDX current_level
0C475 BD EB D0                      LDA tbl_lvl_layout_lo,x
0C478 85 0C                         STA pointer
0C47A BD D2 D0                      LDA tbl_lvl_layout_hi,x
0C47D 85 0D                         STA pointer+1
0C47F                           
0C47F                               ;; Set up the loop
0C47F A0 00                         LDY #$00
0C481                           -drawRowColumnLoop:
0C481                           
0C481                               ;; Load (x,y) of current set of tiles
0C481 B1 0C                         LDA (pointer),y
0C483                           
0C483                               ;; Check if level is done; if so, skip the loop
0C483 C9 FF                         CMP #LEVEL_END
0C485 D0 03                         BNE +
0C487 4C D0 C5                          JMP +doneLevelLoad
0C48A                               +
0C48A                           
0C48A                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C48A 85 00                         STA temp
0C48C C8                            INY
0C48D B1 0C                         LDA (pointer),y
0C48F 85 01                         STA temp+1
0C491                               
0C491                               ;; Convert (x,y) to PPU address
0C491                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C491 A5 00                         LDA temp
0C493 29 0F                         AND #%00001111
0C495 4A                            LSR
0C496 4A                            LSR
0C497 09 20                         ORA #$20
0C499 85 02                         STA temp+2
0C49B                               
0C49B                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C49B A5 00                         LDA temp
0C49D 29 F0                         AND #%11110000
0C49F 4A                            LSR
0C4A0 4A                            LSR
0C4A1 4A                            LSR
0C4A2 85 03                         STA temp+3
0C4A4                               
0C4A4 A5 00                         LDA temp
0C4A6 29 03                         AND #%00000011
0C4A8 AA                            TAX
0C4A9 BD 36 D1                      LDA tbl_Times64,x
0C4AC 18                            CLC
0C4AD 65 03                         ADC temp+3
0C4AF 18                            CLC
0C4B0 69 C2                         ADC #$C2
0C4B2 85 03                         STA temp+3
0C4B4                               
0C4B4                               ;; Add carry to temp+2
0C4B4 A5 02                         LDA temp+2
0C4B6 69 00                         ADC #$00
0C4B8 85 02                         STA temp+2
0C4BA                           
0C4BA                               ;; Convert tile data to loop count and tile type
0C4BA                               ;; temp+4 = color
0C4BA A5 01                         LDA temp+1
0C4BC 29 07                         AND #%00000111
0C4BE 85 04                         STA temp+4
0C4C0                               
0C4C0                               ;; If color = 7, this is a wall
0C4C0 C9 07                         CMP #%00000111
0C4C2 F0 12                         BEQ +wallHack
0C4C4                                   
0C4C4                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C4C4 29 01                             AND #%00000001
0C4C6 F0 02                             BEQ +
0C4C8 A9 05                                 LDA #$05
0C4CA                                   +
0C4CA 85 07                             STA temp+7
0C4CC                                
0C4CC                                   ;; temp+5 = tile type
0C4CC A5 01                             LDA temp+1
0C4CE 4A                                LSR
0C4CF 4A                                LSR
0C4D0 4A                                LSR
0C4D1 29 03                             AND #%00000011
0C4D3 4C DC C4                          JMP +setTileType
0C4D6                               +wallHack:
0C4D6                               
0C4D6                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C4D6 A9 00                         LDA #$00
0C4D8 85 07                         STA temp+7
0C4DA A9 04                         LDA #$04
0C4DC                           
0C4DC                           +setTileType:    
0C4DC 85 05                         STA temp+5
0C4DE                               
0C4DE                               ;; X = tile offset
0C4DE 18                            CLC
0C4DF 65 07                         ADC temp+7
0C4E1 AA                            TAX
0C4E2                               
0C4E2                               ;; temp+6 = number of tiles
0C4E2 A5 01                         LDA temp+1
0C4E4 29 60                         AND #%01100000
0C4E6 4A                            LSR
0C4E7 4A                            LSR
0C4E8 4A                            LSR
0C4E9 4A                            LSR
0C4EA 4A                            LSR
0C4EB 85 06                         STA temp+6
0C4ED                               
0C4ED                               ;; Translate (x,y) to (y,x) for tile RAM
0C4ED A5 00                         LDA temp
0C4EF 0A                            ASL
0C4F0 0A                            ASL
0C4F1 0A                            ASL
0C4F2 0A                            ASL
0C4F3 85 08                         STA temp+8
0C4F5 A5 00                         LDA temp
0C4F7 4A                            LSR
0C4F8 4A                            LSR
0C4F9 4A                            LSR
0C4FA 4A                            LSR
0C4FB 05 08                         ORA temp+8
0C4FD 85 00                         STA temp
0C4FF                               
0C4FF                               ;; Set up loop
0C4FF 98                            TYA
0C500 48                            PHA
0C501 A4 06                         LDY temp+6
0C503                           
0C503                               -drawTileLoop:
0C503                                   ;; Write PPU address
0C503 2C 02 20                          BIT PPU_STATUS
0C506 A5 02                             LDA temp+2
0C508 8D 06 20                          STA PPU_ADDR
0C50B A5 03                             LDA temp+3
0C50D 8D 06 20                          STA PPU_ADDR
0C510                                   
0C510                                   ;; Write first and second tile
0C510 BD 3A D1                          LDA tbl_GametileTopLeft,x
0C513 8D 07 20                          STA PPU_DATA
0C516 BD 44 D1                          LDA tbl_GametileTopRight,x
0C519 8D 07 20                          STA PPU_DATA
0C51C                                   
0C51C                                   ;; Update PPU address
0C51C 2C 02 20                          BIT PPU_STATUS
0C51F A5 02                             LDA temp+2
0C521 8D 06 20                          STA PPU_ADDR
0C524 A5 03                             LDA temp+3
0C526 18                                CLC
0C527 69 20                             ADC #$20
0C529 8D 06 20                          STA PPU_ADDR
0C52C                                   
0C52C                                   ;; Write third and fourth tile
0C52C BD 4E D1                          LDA tbl_GametileBottomLeft,x
0C52F 8D 07 20                          STA PPU_DATA
0C532 BD 58 D1                          LDA tbl_GametileBottomRight,x
0C535 8D 07 20                          STA PPU_DATA
0C538                           
0C538                                   ;; Push x-register to stack
0C538 8A                                TXA
0C539 48                                PHA
0C53A                                   
0C53A                                   ;; Update tile RAM (aka collision table)
0C53A A6 05                             LDX temp+5
0C53C BD 62 D1                          LDA tbl_GameTileRamByte,x
0C53F 05 04                             ORA temp+4
0C541 0A                                ASL
0C542 09 01                             ORA #%00000001
0C544 A6 00                             LDX temp
0C546 9D 00 04                          STA tile_type,x
0C549                           
0C549                                   ;; Check if shade 1 should be drawn
0C549 E8                                INX
0C54A BD 00 04                          LDA tile_type,x
0C54D D0 05                             BNE +
0C54F A9 00                                 LDA #$00
0C551 8D 07 20                              STA PPU_DATA
0C554                                   +
0C554                                   
0C554                                   ;; Check if shade 2 should be drawn
0C554 A5 03                             LDA temp+3
0C556 18                                CLC
0C557 69 41                             ADC #$41
0C559 85 03                             STA temp+3
0C55B A5 02                             LDA temp+2
0C55D 69 00                             ADC #$00
0C55F 85 02                             STA temp+2
0C561                                   
0C561 8A                                TXA
0C562 18                                CLC
0C563 69 0F                             ADC #$0F
0C565 AA                                TAX
0C566                                   
0C566 BD 00 04                          LDA tile_type,x
0C569 D0 0F                             BNE +
0C56B A5 02                                 LDA temp+2
0C56D 8D 06 20                              STA PPU_ADDR
0C570 A5 03                                 LDA temp+3
0C572 8D 06 20                              STA PPU_ADDR
0C575 A9 00                                 LDA #$00
0C577 8D 07 20                              STA PPU_DATA
0C57A                                   +
0C57A                           
0C57A                                   ;; Check if shade 3 should be drawn
0C57A E8                                INX
0C57B E6 03                             INC temp+3
0C57D BD 00 04                          LDA tile_type,x
0C580 D0 0F                             BNE +
0C582 A5 02                                 LDA temp+2
0C584 8D 06 20                              STA PPU_ADDR
0C587 A5 03                                 LDA temp+3
0C589 8D 06 20                              STA PPU_ADDR
0C58C A9 00                                 LDA #$00
0C58E 8D 07 20                              STA PPU_DATA
0C591                                   +
0C591                                   
0C591                                   ;; Restore x-register from stack
0C591 68                                PLA
0C592 AA                                TAX
0C593                                   
0C593                                   ;; Reset pointer for next tile
0C593 A5 03                             LDA temp+3
0C595 38                                SEC
0C596 E9 42                             SBC #$42
0C598 85 03                             STA temp+3
0C59A A5 02                             LDA temp+2
0C59C E9 00                             SBC #$00
0C59E 85 02                             STA temp+2
0C5A0                                   
0C5A0                                   ;; Draw next metatile in this loop (if any left)
0C5A0 88                                DEY
0C5A1 30 27                             BMI +doneDrawingRowColumn
0C5A3                                   
0C5A3                                   ;; Is it a row or a column?
0C5A3 A5 01                             LDA temp+1
0C5A5 10 17                             BPL +
0C5A7                                       ;; It is a column: move pointer down (+$40)
0C5A7 A5 03                                 LDA temp+3
0C5A9 18                                    CLC
0C5AA 69 40                                 ADC #$40
0C5AC 85 03                                 STA temp+3
0C5AE A5 02                                 LDA temp+2
0C5B0 69 00                                 ADC #$00
0C5B2 85 02                                 STA temp+2
0C5B4                                       
0C5B4                                       ;; Add 16 to temp (as a tile RAM pointer)
0C5B4 A5 00                                 LDA temp
0C5B6 18                                    CLC
0C5B7 69 10                                 ADC #$10
0C5B9 85 00                                 STA temp
0C5BB 4C C7 C5                              JMP +drawNextTile
0C5BE                                   +
0C5BE                                   
0C5BE                                   ;; It is a row: move pointer right (+$02)
0C5BE A5 03                             LDA temp+3
0C5C0 18                                CLC
0C5C1 69 02                             ADC #$02
0C5C3 85 03                             STA temp+3
0C5C5                                   
0C5C5                                   ;; Add 1 to temp (as a tile RAM pointer)
0C5C5 E6 00                             INC temp
0C5C7                           
0C5C7                               
0C5C7                               ;; Next tile in the row/column
0C5C7                                   +drawNextTile:
0C5C7 4C 03 C5                      JMP -drawTileLoop
0C5CA                           
0C5CA                               ;; Go to the next set of tiles
0C5CA                           +doneDrawingRowColumn:
0C5CA 68                            PLA
0C5CB A8                            TAY
0C5CC C8                            INY
0C5CD 4C 81 C4                      JMP -drawRowColumnLoop
0C5D0                           
0C5D0                           ;; Level loading is done
0C5D0                           +doneLevelLoad:
0C5D0                           
0C5D0                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C5D0 A9 20                         LDA #$20
0C5D2 8D 06 20                      STA PPU_ADDR
0C5D5 A9 A2                         LDA #$A2
0C5D7 8D 06 20                      STA PPU_ADDR
0C5DA A9 35                         LDA #$35
0C5DC 20 EA C7                      JSR sub_Draw28HorizontalTiles
0C5DF                           
0C5DF                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C5DF A9 23                         LDA #$23
0C5E1 8D 06 20                      STA PPU_ADDR
0C5E4 A9 42                         LDA #$42
0C5E6 8D 06 20                      STA PPU_ADDR
0C5E9 A9 31                         LDA #$31
0C5EB 20 EA C7                      JSR sub_Draw28HorizontalTiles
0C5EE                           
0C5EE                               ;; Left & right game bounds
0C5EE                               ;; Set PPU_ADDR and store in temp variables
0C5EE A9 20                         LDA #$20
0C5F0 85 00                         STA temp
0C5F2 8D 06 20                      STA PPU_ADDR
0C5F5 A9 C1                         LDA #$C1
0C5F7 85 01                         STA temp+1
0C5F9 8D 06 20                      STA PPU_ADDR
0C5FC                               
0C5FC                               ;; Set vertical bound tile and set up loop
0C5FC A0 33                         LDY #$33
0C5FE A2 14                         LDX #20
0C600                               -
0C600                                   ;; Show left tile
0C600 8C 07 20                          STY PPU_DATA
0C603                                   
0C603                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C603 A5 00                             LDA temp
0C605 8D 06 20                          STA PPU_ADDR
0C608 A5 01                             LDA temp+1
0C60A 18                                CLC
0C60B 69 1D                             ADC #29
0C60D 85 01                             STA temp+1
0C60F 8D 06 20                          STA PPU_ADDR
0C612                           
0C612                                   ;; Show right tile
0C612 8C 07 20                          STY PPU_DATA
0C615                           
0C615                                   ;; Check if we're done yet
0C615 CA                                DEX
0C616 F0 18                             BEQ +drawCorners
0C618                                   
0C618                                   ;; Not done yet: add 3 to low byte for next left bound
0C618 A5 01                             LDA temp+1
0C61A 18                                CLC
0C61B 69 03                             ADC #3
0C61D 85 01                             STA temp+1
0C61F                                   
0C61F                                   ;; Apply carry to high byte
0C61F A5 00                             LDA temp
0C621 69 00                             ADC #$00
0C623 85 00                             STA temp
0C625                                   
0C625                                   ;; Store next PPU_ADDR to draw at
0C625 8D 06 20                          STA PPU_ADDR
0C628 A5 01                             LDA temp+1
0C62A 8D 06 20                          STA PPU_ADDR
0C62D 4C 00 C6                      JMP -
0C630                               
0C630                               
0C630                           
0C630                           +drawCorners:
0C630                               ;; Draw the corners of the playing field
0C630 A9 20                         LDA #$20
0C632 8D 06 20                      STA PPU_ADDR
0C635 A9 A1                         LDA #$A1
0C637 8D 06 20                      STA PPU_ADDR
0C63A A9 39                         LDA #$39
0C63C 8D 07 20                      STA PPU_DATA
0C63F                           
0C63F A9 20                         LDA #$20
0C641 8D 06 20                      STA PPU_ADDR
0C644 A9 BE                         LDA #$BE
0C646 8D 06 20                      STA PPU_ADDR
0C649 A9 3A                         LDA #$3A
0C64B 8D 07 20                      STA PPU_DATA
0C64E                           
0C64E A9 23                         LDA #$23
0C650 8D 06 20                      STA PPU_ADDR
0C653 A9 41                         LDA #$41
0C655 8D 06 20                      STA PPU_ADDR
0C658 A9 36                         LDA #$36
0C65A 8D 07 20                      STA PPU_DATA
0C65D                           
0C65D A9 23                         LDA #$23
0C65F 8D 06 20                      STA PPU_ADDR
0C662 A9 5E                         LDA #$5E
0C664 8D 06 20                      STA PPU_ADDR
0C667 A9 34                         LDA #$34
0C669 8D 07 20                      STA PPU_DATA
0C66C                           
0C66C                           
0C66C                               ;; Draw the hud labels
0C66C A9 20                         LDA #$20
0C66E 8D 06 20                      STA PPU_ADDR
0C671 A9 62                         LDA #$62
0C673 8D 06 20                      STA PPU_ADDR
0C676 A2 00                         LDX #$00
0C678                               -
0C678 BD 67 D1                          LDA tbl_HudText,x
0C67B 8D 07 20                          STA PPU_DATA
0C67E E8                                INX
0C67F E0 1C                             CPX #28
0C681 D0 F5                         BNE -
0C683                           
0C683                           
0C683                               ;; Draw the current score
0C683 A9 20                         LDA #$20
0C685 8D 06 20                      STA PPU_ADDR
0C688 A9 83                         LDA #$83
0C68A 8D 06 20                      STA PPU_ADDR
0C68D A2 00                         LDX #$00
0C68F                               -
0C68F B5 1C                             LDA ball_score,x
0C691 18                                CLC
0C692 69 01                             ADC #$01
0C694 8D 07 20                          STA PPU_DATA
0C697 E8                                INX
0C698 E0 06                             CPX #$06
0C69A D0 F3                         BNE -
0C69C                           
0C69C                           
0C69C                               ;; Draw the level number
0C69C                               ;; (with primitive HEX>DEC)
0C69C A5 34                         LDA current_level
0C69E 18                            CLC
0C69F 69 01                         ADC #$01
0C6A1 85 01                         STA temp+1
0C6A3                               
0C6A3 C9 14                         CMP #20
0C6A5 B0 13                         BCS +tempIsTwo
0C6A7                               
0C6A7 C9 0A                         CMP #10
0C6A9 B0 05                         BCS +tempIsOne
0C6AB                               
0C6AB A9 00                         LDA #$00
0C6AD 4C C1 C6                      JMP +setTemp
0C6B0                               
0C6B0                           +tempIsOne:
0C6B0 38                            SEC
0C6B1 E9 0A                         SBC #10
0C6B3 85 01                         STA temp+1
0C6B5 A9 01                         LDA #$01
0C6B7 4C C1 C6                      JMP +setTemp
0C6BA                               
0C6BA                           +tempIsTwo:
0C6BA 38                            SEC
0C6BB E9 14                         SBC #20
0C6BD 85 01                         STA temp+1
0C6BF A9 02                         LDA #$02
0C6C1                           
0C6C1                           +setTemp:
0C6C1 85 00                         STA temp
0C6C3                               
0C6C3 E6 00                         INC temp
0C6C5 E6 01                         INC temp+1
0C6C7                               
0C6C7 A9 20                         LDA #$20
0C6C9 8D 06 20                      STA PPU_ADDR
0C6CC A9 8B                         LDA #$8B
0C6CE 8D 06 20                      STA PPU_ADDR
0C6D1 A5 00                         LDA temp
0C6D3 8D 07 20                      STA PPU_DATA
0C6D6 A5 01                         LDA temp+1
0C6D8 8D 07 20                      STA PPU_DATA
0C6DB                           
0C6DB                           
0C6DB                               ;; Draw lives (presumes lives to be capped at 9)
0C6DB A9 20                         LDA #$20
0C6DD 8D 06 20                      STA PPU_ADDR
0C6E0 A9 92                         LDA #$92
0C6E2 8D 06 20                      STA PPU_ADDR
0C6E5 A6 1B                         LDX ball_lives
0C6E7 E8                            INX
0C6E8 8E 07 20                      STX PPU_DATA
0C6EB                           
0C6EB                           
0C6EB                               ;; Set and draw bonus
0C6EB A9 07                         LDA #$07
0C6ED 85 22                         STA ball_bonus
0C6EF A9 09                         LDA #$09
0C6F1 85 23                         STA ball_bonus+1
0C6F3 85 24                         STA ball_bonus+2
0C6F5                               
0C6F5 A9 20                         LDA #$20
0C6F7 8D 06 20                      STA PPU_ADDR
0C6FA A9 9A                         LDA #$9A
0C6FC 8D 06 20                      STA PPU_ADDR
0C6FF A2 00                         LDX #$00
0C701                               -
0C701 B5 22                             LDA ball_bonus,x
0C703 18                                CLC
0C704 69 01                             ADC #$01
0C706 8D 07 20                          STA PPU_DATA
0C709 E8                                INX
0C70A E0 03                             CPX #$03
0C70C D0 F3                         BNE -
0C70E                           
0C70E                           
0C70E                               ;; Set attribute data to RAM
0C70E                               
0C70E                               ;; Byte 0-7 of attribute ram should be #%10100000
0C70E A2 00                         LDX #$00
0C710 A9 A0                         LDA #$A0
0C712                               -
0C712 9D A0 04                          STA tile_attributes,x
0C715 E8                                INX
0C716 E0 08                             CPX #$08
0C718 D0 F8                         BNE -
0C71A                           
0C71A                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C71A                           
0C71A                           -attributeLoop:
0C71A                               ;; Reset current attribute value
0C71A A9 00                         LDA #$00
0C71C 85 02                         STA temp+2
0C71E                           
0C71E                               ;; Get first metatile in tile ram based on attribute index
0C71E                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C71E 8A                            TXA
0C71F                           
0C71F 38                            SEC
0C720 E9 08                         SBC #$08
0C722 85 01                         STA temp+1      ; attr - 8 (temp1)
0C724 0A                            ASL             ; * 2
0C725 85 00                         STA temp        ; temp = temp1 * 2
0C727                           
0C727 A5 01                         LDA temp+1      ; temp1
0C729 29 F8                         AND #%11111000  ; rounded down to 8's
0C72B 0A                            ASL             ; * 2
0C72C 18                            CLC
0C72D 65 00                         ADC temp        ; + temp1 * 2
0C72F 85 00                         STA temp        ; first metatile
0C731                           
0C731                               ;; Store first metatile in y-register
0C731 A8                            TAY
0C732                           
0C732                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C732 8A                            TXA
0C733 29 07                         AND #%00000111
0C735 C9 07                         CMP #%00000111
0C737 F0 0B                         BEQ +
0C739                           
0C739                               ;; If X >= $30, don't apply bottom right metatile
0C739 E0 30                         CPX #$30
0C73B B0 07                         BCS +
0C73D                               
0C73D                               ;; Add metatile1 subpalette to attribute value
0C73D B9 00 04                      LDA tile_type,y
0C740 29 0C                         AND #%00001100
0C742 85 02                         STA temp+2
0C744                               +
0C744                           
0C744                           
0C744                               ;; Apply second metatile
0C744 88                            DEY
0C745                           
0C745                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C745 8A                            TXA
0C746 29 07                         AND #%00000111
0C748 F0 10                         BEQ +
0C74A                           
0C74A                               ;; If X >= $30, don't apply bottom left metatile
0C74A E0 30                         CPX #$30
0C74C B0 0C                         BCS +
0C74E                           
0C74E                           
0C74E                           
0C74E                               ;; Add metatile2 subpalette to attribute value
0C74E B9 00 04                      LDA tile_type,y
0C751 29 0C                         AND #%00001100
0C753 4A                            LSR
0C754 4A                            LSR
0C755 05 02                         ORA temp+2
0C757 4C 5C C7                      JMP ++
0C75A                               +
0C75A A5 02                         LDA temp+2
0C75C                               ++
0C75C 0A                            ASL
0C75D 0A                            ASL
0C75E 85 02                         STA temp+2
0C760                           
0C760                           
0C760                               ;; Apply third metatile
0C760 98                            TYA
0C761 38                            SEC
0C762 E9 0F                         SBC #$0F
0C764 A8                            TAY
0C765                           
0C765                               ;; If X MOD 8 == 7, don't apply top right metatile
0C765 8A                            TXA
0C766 29 07                         AND #%00000111
0C768 C9 07                         CMP #%00000111
0C76A F0 11                         BEQ +
0C76C                           
0C76C                               ;; If X < $10, don't apply top right metatile
0C76C 8A                            TXA
0C76D 29 F0                         AND #%11110000
0C76F F0 0C                         BEQ +
0C771                           
0C771                               ;; Add metatile3 subpalette to attribute value
0C771 B9 00 04                      LDA tile_type,y
0C774 29 0C                         AND #%00001100
0C776 4A                            LSR
0C777 4A                            LSR
0C778 05 02                         ORA temp+2
0C77A 4C 7F C7                      JMP ++
0C77D                               +
0C77D A5 02                         LDA temp+2
0C77F                               ++
0C77F 0A                            ASL
0C780 0A                            ASL
0C781 85 02                         STA temp+2
0C783                           
0C783                           
0C783                               ;; Apply fourth metatile
0C783 88                            DEY
0C784                           
0C784                               ;; If X MOD 8 == 0, don't apply top left metatile
0C784 8A                            TXA
0C785 29 07                         AND #%00000111
0C787 F0 11                         BEQ +
0C789                           
0C789                               ;; If X < $10, don't apply top left metatile
0C789 8A                            TXA
0C78A 29 F0                         AND #%11110000
0C78C F0 0C                         BEQ +
0C78E                           
0C78E                               ;; Add metatile4 subpalette to attribute value
0C78E B9 00 04                      LDA tile_type,y
0C791 29 0C                         AND #%00001100
0C793 4A                            LSR
0C794 4A                            LSR
0C795 05 02                         ORA temp+2
0C797 4C 9C C7                      JMP ++
0C79A                               +
0C79A A5 02                         LDA temp+2
0C79C                               ++
0C79C 9D A0 04                      STA tile_attributes,x
0C79F                           
0C79F                               ;; Check the next attribute, if any left
0C79F E8                            INX
0C7A0 E0 38                         CPX #$38
0C7A2 F0 03                         BEQ +
0C7A4 4C 1A C7                          JMP -attributeLoop
0C7A7                               +
0C7A7                           
0C7A7                               ;; Stream attribute RAM to PPU
0C7A7 2C 02 20                      BIT PPU_STATUS
0C7AA A9 23                         LDA #$23
0C7AC 8D 06 20                      STA PPU_ADDR
0C7AF A9 C0                         LDA #$C0
0C7B1 8D 06 20                      STA PPU_ADDR
0C7B4 A2 00                         LDX #$00
0C7B6                               -
0C7B6 BD A0 04                          LDA tile_attributes,x
0C7B9 8D 07 20                          STA PPU_DATA
0C7BC E8                                INX
0C7BD E0 40                             CPX #$40
0C7BF D0 F5                         BNE -
0C7C1                           
0C7C1                               ;; Set initial ball position
0C7C1 A6 34                         LDX current_level
0C7C3 BD 04 D1                      LDA tbl_lvl_ball_startpos,x
0C7C6 29 F0                         AND #%11110000
0C7C8 18                            CLC
0C7C9 69 34                         ADC #$34
0C7CB 85 19                         STA ball_ypos_hi
0C7CD BD 04 D1                      LDA tbl_lvl_ball_startpos,x
0C7D0 0A                            ASL
0C7D1 0A                            ASL
0C7D2 0A                            ASL
0C7D3 0A                            ASL
0C7D4 18                            CLC
0C7D5 69 14                         ADC #$14
0C7D7 85 17                         STA ball_xpos_hi
0C7D9 A9 00                         LDA #$00
0C7DB 85 18                         STA ball_xpos_lo
0C7DD 85 1A                         STA ball_ypos_lo
0C7DF                               
0C7DF                               ;; Set initial ball color and direction
0C7DF BD 1D D1                      LDA tbl_lvl_ball_init,x
0C7E2 29 F0                         AND #%11110000
0C7E4 85 2C                         STA ball_flags
0C7E6 20 B0 C3                      JSR sub_ColorizeBall
0C7E9                               
0C7E9                               ;; Return
0C7E9 60                            RTS
0C7EA                           
0C7EA                           
0C7EA                           ;; Subroutine: draw 28 tiles in a row
0C7EA                           sub_Draw28HorizontalTiles:
0C7EA A2 1C                         LDX #28
0C7EC                               -
0C7EC 8D 07 20                          STA PPU_DATA
0C7EF CA                                DEX
0C7F0 D0 FA                         BNE -
0C7F2 60                            RTS0C7F3                           .include "game/subroutine/LoadIntroScreen.asm"
0C7F3                           sub_LoadIntroScreen:
0C7F3                           
0C7F3                               ;; Load intro palette
0C7F3 2C 02 20                      BIT PPU_STATUS
0C7F6 A9 3F                         LDA #$3F
0C7F8 8D 06 20                      STA PPU_ADDR
0C7FB A9 00                         LDA #$00
0C7FD 8D 06 20                      STA PPU_ADDR
0C800 A2 00                         LDX #$00
0C802                               -
0C802 BD A9 C8                          LDA tbl_IntroScreenPalette,x
0C805 8D 07 20                          STA PPU_DATA
0C808 E8                                INX
0C809 E0 20                             CPX #$20
0C80B D0 F5                         BNE -
0C80D                               
0C80D                               ;; Put ball in the middle
0C80D A9 7C                         LDA #$7C
0C80F 85 17                         STA ball_xpos_hi
0C811 85 19                         STA ball_ypos_hi
0C813                           
0C813                               ;; Clear the screen
0C813 20 45 C3                      JSR sub_ClearScreen
0C816                           
0C816                               ;; Set up intro screen draw loop
0C816 A2 00                         LDX #$00
0C818                           
0C818                           -loop_IntroScreenData:
0C818                           
0C818                               ;; Get current byte from intro screen data
0C818 BD D1 C8                      LDA tbl_IntroScreenData,x
0C81B                           
0C81B                               ;; If current byte is #$3F, we're done drawing.
0C81B C9 3F                         CMP #$3F
0C81D D0 03                         BNE +
0C81F 4C 6C C8                          JMP +goToEndIntroScreen
0C822                               +
0C822                           
0C822                               ;; If highest bits are %11, draw a plain tile
0C822 29 C0                         AND #%11000000
0C824 D0 03                         BNE +
0C826 4C 4C C8                          JMP +drawTile
0C829                               +
0C829                               
0C829                               ;; If highest bits are %01, set the PPU address
0C829                               ;; If not, draw two logo tiles
0C829 C9 40                         CMP #%01000000
0C82B D0 03                         BNE +drawLogo
0C82D 4C 56 C8                          JMP +setPpuAddr
0C830                           
0C830                           +drawLogo:
0C830                               ;; Get bits 0-2 and store in a temp variable
0C830 BD D1 C8                      LDA tbl_IntroScreenData,x
0C833 29 07                         AND #%00000111
0C835 85 00                         STA temp
0C837                               
0C837                               ;; Get bits 3-5, shift over to get a value from 0-7
0C837 BD D1 C8                      LDA tbl_IntroScreenData,x
0C83A 4A                            LSR
0C83B 4A                            LSR
0C83C 4A                            LSR
0C83D 29 07                         AND #%00000111
0C83F                               
0C83F                               ;; Draw the tile that corresponds with that value
0C83F A8                            TAY
0C840 20 28 C4                      JSR sub_drawIntroScreenLogoTile
0C843                               
0C843                               ;; Do the same for the value stored in temp
0C843 A4 00                         LDY temp
0C845 20 28 C4                      JSR sub_drawIntroScreenLogoTile
0C848                           
0C848                               ;; Next byte please
0C848 E8                            INX
0C849 4C 18 C8                      JMP -loop_IntroScreenData
0C84C                           
0C84C                           +drawTile:
0C84C                               ;; Just draw the tile value on screen
0C84C BD D1 C8                      LDA tbl_IntroScreenData,x
0C84F 8D 07 20                      STA PPU_DATA
0C852                               
0C852                               ;; Next byte please
0C852 E8                            INX
0C853 4C 18 C8                      JMP -loop_IntroScreenData
0C856                           
0C856                           
0C856                           +setPpuAddr:
0C856                               ;; Reset the PPU latch
0C856 2C 02 20                      BIT PPU_STATUS
0C859                               
0C859                               ;; Sanitize and write the high byte of the PPU address
0C859 BD D1 C8                      LDA tbl_IntroScreenData,x
0C85C 29 3F                         AND #%00111111
0C85E 8D 06 20                      STA PPU_ADDR
0C861                           
0C861                               ;; Write the low byte of the PPU address
0C861 E8                            INX
0C862 BD D1 C8                      LDA tbl_IntroScreenData,x
0C865 8D 06 20                      STA PPU_ADDR
0C868                               
0C868                               ;; PPU has been set up to draw tiles at the correct spot now.
0C868                               
0C868                               ;; Next byte please.
0C868 E8                            INX
0C869 4C 18 C8                      JMP -loop_IntroScreenData
0C86C                           
0C86C                           +goToEndIntroScreen:
0C86C                           
0C86C                               ;; To color the 1.LEVEL: line green, we need to update two
0C86C                               ;; values in the PPU attribute data.
0C86C 2C 02 20                      BIT PPU_STATUS
0C86F A9 23                         LDA #$23
0C871 8D 06 20                      STA PPU_ADDR
0C874 A9 CB                         LDA #$CB
0C876 8D 06 20                      STA PPU_ADDR
0C879 A9 0A                         LDA #%00001010
0C87B 8D 07 20                      STA PPU_DATA
0C87E 8D 07 20                      STA PPU_DATA
0C881                           
0C881 60                            RTS
0C882                           
0C882                           .include "game/subroutine/LoadWinScreen.asm"
0C882                           sub_LoadWinScreen:
0C882 60                            RTS
0C883                           
0C883                           .include "game/subroutine/WriteByteToPPU.asm"
0C883                           sub_WriteByteToPPUBuffer:
0C883                           
0C883                               ;; Prevent updating until full 3-byte buffer is filled,
0C883                               ;; so that graphics won't glitch out if NMI happens during
0C883                               ;; updating the buffer
0C883 A9 00                         LDA #$00
0C885 85 2F                         STA ppu_buffer_update
0C887                           
0C887                               ;; Check if buffer full; if so, wait a frame and force update
0C887 A4 30                         LDY ppu_buffer_pointer
0C889 C0 30                         CPY #$30
0C88B D0 05                         BNE +
0C88D E6 2F                             INC ppu_buffer_update
0C88F 20 3F C3                          JSR sub_WaitForVBlank
0C892                               +
0C892                           
0C892                               ;; Add ppu_addr high byte to buffer
0C892 A5 00                         LDA temp
0C894 99 00 03                      STA ppu_buffer,y
0C897                           
0C897                               ;; Add ppu_addr low byte to buffer
0C897 C8                            INY
0C898 A5 01                         LDA temp+1
0C89A 99 00 03                      STA ppu_buffer,y
0C89D                           
0C89D                               ;; Add ppu_data to buffer
0C89D C8                            INY
0C89E A5 02                         LDA temp+2
0C8A0 99 00 03                      STA ppu_buffer,y
0C8A3                           
0C8A3                               ;; Update buffer pointer
0C8A3 C8                            INY
0C8A4 84 30                         STY ppu_buffer_pointer
0C8A6                           
0C8A6                               ;; Tell NMI to update next round
0C8A6 E6 2F                         INC ppu_buffer_update
0C8A8                           
0C8A8                               ;; Return
0C8A8 60                            RTS0C8A9                           
0C8A9                           
0C8A9                           ;; LUTs
0C8A9                           .include "game/include/tables.asm"
0C8A9                           
0C8A9                           ;; Intro screen palette
0C8A9                           tbl_IntroScreenPalette:
0C8A9 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C8AD 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C8B1 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C8B5 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C8B9                           
0C8B9 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C8BD 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C8C1 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C8C5 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C8C9                           
0C8C9                           
0C8C9                           ;; Intro: mapping logo index to chr tile
0C8C9                           tbl_IntroScreenLogoChr:
0C8C9 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C8D1                           
0C8D1                           
0C8D1                           ;; Intro screen data
0C8D1                           tbl_IntroScreenData:
0C8D1                           
0C8D1                               ;; Set PPU address $20AC and draw
0C8D1 60 AC                         .db #$60, #$AC
0C8D3 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C8DB                           
0C8DB                               ;; Set PPU address $20CF and draw
0C8DB 60 CF                         .db #$60, #$CF
0C8DD 01 02                         .db #_0, #_1
0C8DF                               
0C8DF                               ;; Set PPU address $2122 and draw
0C8DF 61 22                         .db #$61, #$22
0C8E1 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C8E8 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C8EE 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C8F6 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C8FB                               
0C8FB                               ;; Set PPU address $2147 and draw
0C8FB 61 47                         .db #$61, #$47
0C8FD 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C904 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C908 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C90E 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C914                               
0C914                               ;; Set PPU address $218B and draw
0C914 61 8B                         .db #$61, #$8B
0C916 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C91C 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C921                               
0C921                               ;; Set PPU address $21E6 and draw
0C921 61 E6                         .db #$61, #$E6
0C923 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C92B 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C92F 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C936                               
0C936                               ;; Set PPU address $222D and draw
0C936 62 2D                         .db #$62, #$2D
0C938 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C93E                               
0C93E                               ;; Set PPU address $2281
0C93E 62 81                         .db #$62, #$81
0C940                               
0C940                               ;; Draw the Crillion logo
0C940 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C944 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C948 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C94C E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C950                               
0C950 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C954 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C958 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C95C D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C960                               
0C960 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C964 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C968 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C96C D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C970                           
0C970 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C974 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C978 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C97C D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C980                               
0C980 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C984 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C988 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C98C D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C990                           
0C990 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C994 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C998 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C99C F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C99F                           
0C99F                               ;; End of intro
0C99F 3F                            .db #$3F
0C9A0                           
0C9A0                           
0C9A0                           ;; test animation table
0C9A0                           .include "game/test/show_animation_table.asm"
0C9A0                           ;; CHR tile-id's per slide of explosion
0C9A0                           explosion_slide0:
0C9A0 00 00 00                      .db #$00, #$00, #$00
0C9A3 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C9A6 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C9A9                           
0C9A9                           explosion_slide1:
0C9A9 00 00 00                      .db #$00, #$00, #$00
0C9AC 29 2A 2B                      .db #$29, #$2A, #$2B
0C9AF 39 3A 3B                      .db #$39, #$3A, #$3B
0C9B2                           
0C9B2                           explosion_slide2:
0C9B2 16 00 00                      .db #$16, #$00, #$00
0C9B5 26 27 28                      .db #$26, #$27, #$28
0C9B8 36 37 38                      .db #$36, #$37, #$38
0C9BB                           
0C9BB                           explosion_slide3:
0C9BB 00 14 15                      .db #$00, #$14, #$15
0C9BE 23 24 25                      .db #$23, #$24, #$25
0C9C1 33 34 35                      .db #$33, #$34, #$35
0C9C4                           
0C9C4                           explosion_slide4:
0C9C4 10 11 12                      .db #$10, #$11, #$12
0C9C7 20 21 22                      .db #$20, #$21, #$22
0C9CA 30 31 32                      .db #$30, #$31, #$32
0C9CD                           
0C9CD                           ;; High and low bytes of animation slides
0C9CD                           explosion_anim_hi:
0C9CD C9                            .db >#explosion_slide0
0C9CE C9                            .db >#explosion_slide1
0C9CF C9                            .db >#explosion_slide2
0C9D0 C9                            .db >#explosion_slide3
0C9D1 C9                            .db >#explosion_slide4
0C9D2 C9                            .db >#explosion_slide4
0C9D3 C9                            .db >#explosion_slide3
0C9D4 C9                            .db >#explosion_slide2
0C9D5 C9                            .db >#explosion_slide1
0C9D6 C9                            .db >#explosion_slide0
0C9D7                           
0C9D7                           explosion_anim_lo:
0C9D7 A0                            .db <#explosion_slide0
0C9D8 A9                            .db <#explosion_slide1
0C9D9 B2                            .db <#explosion_slide2
0C9DA BB                            .db <#explosion_slide3
0C9DB C4                            .db <#explosion_slide4
0C9DC C4                            .db <#explosion_slide4
0C9DD BB                            .db <#explosion_slide3
0C9DE B2                            .db <#explosion_slide2
0C9DF A9                            .db <#explosion_slide1
0C9E0 A0                            .db <#explosion_slide0
0C9E1                           
0C9E1                           
0C9E1                           
0C9E1                           ;; Ball palette color table (CBRYGM)
0C9E1                           tbl_BallColorDark:
0C9E1 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0C9E7                            
0C9E7                           tbl_BallColorLight:
0C9E7 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0C9ED                           
0C9ED                               
0C9ED                           ;; Screen mode drawing routine addresses
0C9ED                           tbl_LoadScreenHi:
0C9ED C7 C4 C8                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C9F0                           
0C9F0                           tbl_LoadScreenLo:
0C9F0 F3 67 82                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C9F3                           
0C9F3                           
0C9F3                           ;; Test level data
0C9F3                           .include "game/test/level_data.asm"
0C9F3                           lvl_layout_01:
0C9F3 61 21                         .db #$61, #%00100001
0C9F5 52 61                         .db #$52, #%01100001
0C9F7 43 65                         .db #$43, #%01100101
0C9F9 83 05                         .db #$83, #%00000101
0C9FB 93 15                         .db #$93, #%00010101
0C9FD 34 7A                         .db #$34, #%01111010
0C9FF 74 7A                         .db #$74, #%01111010
0CA01 35 7A                         .db #$35, #%01111010
0CA03 75 7A                         .db #$75, #%01111010
0CA05 46 65                         .db #$46, #%01100101
0CA07 86 25                         .db #$86, #%00100101
0CA09 57 61                         .db #$57, #%01100001
0CA0B 68 21                         .db #$68, #%00100001
0CA0D FF                            .db #LEVEL_END
0CA0E                           
0CA0E                           lvl_layout_02:
0CA0E C0 0A                         .db #$C0, #%00001010
0CA10 11 15                         .db #$11, #%00010101
0CA12 21 62                         .db #$21, #%01100010
0CA14 61 62                         .db #$61, #%01100010
0CA16 A1 42                         .db #$A1, #%01000010
0CA18 12 67                         .db #$12, #%01100111
0CA1A 52 67                         .db #$52, #%01100111
0CA1C 92 67                         .db #$92, #%01100111
0CA1E C3 0D                         .db #$C3, #%00001101
0CA20 14 11                         .db #$14, #%00010001
0CA22 24 65                         .db #$24, #%01100101
0CA24 64 65                         .db #$64, #%01100101
0CA26 A4 45                         .db #$A4, #%01000101
0CA28 15 67                         .db #$15, #%01100111
0CA2A 55 67                         .db #$55, #%01100111
0CA2C 95 67                         .db #$95, #%01100111
0CA2E 17 12                         .db #$17, #%00010010
0CA30 27 61                         .db #$27, #%01100001
0CA32 67 61                         .db #$67, #%01100001
0CA34 A7 41                         .db #$A7, #%01000001
0CA36 38 7A                         .db #$38, #%01111010
0CA38 98 5A                         .db #$98, #%01011010
0CA3A 18 27                         .db #$18, #%00100111
0CA3C 48 27                         .db #$48, #%00100111
0CA3E 78 27                         .db #$78, #%00100111
0CA40 C8 07                         .db #$C8, #%00000111
0CA42 FF                            .db #LEVEL_END
0CA43                           
0CA43                           lvl_layout_03:
0CA43 00 7A                         .db #$00, #%01111010
0CA45 40 7A                         .db #$40, #%01111010
0CA47 80 7A                         .db #$80, #%01111010
0CA49 C0 1A                         .db #$C0, #%00011010
0CA4B 10 A1                         .db #$10, #%10100001
0CA4D 13 E1                         .db #$13, #%11100001
0CA4F 17 C1                         .db #$17, #%11000001
0CA51 30 C1                         .db #$30, #%11000001
0CA53 34 C1                         .db #$34, #%11000001
0CA55 38 A1                         .db #$38, #%10100001
0CA57 50 E1                         .db #$50, #%11100001
0CA59 55 81                         .db #$55, #%10000001
0CA5B 57 C1                         .db #$57, #%11000001
0CA5D 70 C1                         .db #$70, #%11000001
0CA5F 73 A1                         .db #$73, #%10100001
0CA61 76 E1                         .db #$76, #%11100001
0CA63 90 E1                         .db #$90, #%11100001
0CA65 95 81                         .db #$95, #%10000001
0CA67 97 C1                         .db #$97, #%11000001
0CA69 B0 C1                         .db #$B0, #%11000001
0CA6B B4 C1                         .db #$B4, #%11000001
0CA6D B8 A1                         .db #$B8, #%10100001
0CA6F D0 A1                         .db #$D0, #%10100001
0CA71 D3 E1                         .db #$D3, #%11100001
0CA73 D7 C1                         .db #$D7, #%11000001
0CA75 FF                            .db #LEVEL_END
0CA76                           
0CA76                           lvl_layout_04:
0CA76 00 4C                         .db #$00, #%01001100
0CA78 40 6C                         .db #$40, #%01101100
0CA7A 80 4C                         .db #$80, #%01001100
0CA7C 81 AC                         .db #$81, #%10101100
0CA7E C1 2C                         .db #$C1, #%00101100
0CA80 02 6C                         .db #$02, #%01101100
0CA82 42 CC                         .db #$42, #%11001100
0CA84 62 EC                         .db #$62, #%11101100
0CA86 A2 CC                         .db #$A2, #%11001100
0CA88 C3 CC                         .db #$C3, #%11001100
0CA8A 04 4C                         .db #$04, #%01001100
0CA8C 84 2C                         .db #$84, #%00101100
0CA8E 25 AC                         .db #$25, #%10101100
0CA90 85 AC                         .db #$85, #%10101100
0CA92 06 AC                         .db #$06, #%10101100
0CA94 36 CC                         .db #$36, #%11001100
0CA96 56 CC                         .db #$56, #%11001100
0CA98 66 EC                         .db #$66, #%11101100
0CA9A 96 6C                         .db #$96, #%01101100
0CA9C C7 AC                         .db #$C7, #%10101100
0CA9E 08 2C                         .db #$08, #%00101100
0CAA0 78 6C                         .db #$78, #%01101100
0CAA2 D8 0C                         .db #$D8, #%00001100
0CAA4 30 A1                         .db #$30, #%10100001
0CAA6 B0 21                         .db #$B0, #%00100001
0CAA8 01 41                         .db #$01, #%01000001
0CAAA 41 61                         .db #$41, #%01100001
0CAAC 91 A1                         .db #$91, #%10100001
0CAAE A1 21                         .db #$A1, #%00100001
0CAB0 52 C1                         .db #$52, #%11000001
0CAB2 72 E1                         .db #$72, #%11100001
0CAB4 B2 C1                         .db #$B2, #%11000001
0CAB6 C2 21                         .db #$C2, #%00100001
0CAB8 03 41                         .db #$03, #%01000001
0CABA 33 C1                         .db #$33, #%11000001
0CABC 83 21                         .db #$83, #%00100001
0CABE D3 E1                         .db #$D3, #%11100001
0CAC0 05 21                         .db #$05, #%00100001
0CAC2 45 E1                         .db #$45, #%11100001
0CAC4 A5 21                         .db #$A5, #%00100001
0CAC6 16 A1                         .db #$16, #%10100001
0CAC8 76 A1                         .db #$76, #%10100001
0CACA 27 A1                         .db #$27, #%10100001
0CACC 57 01                         .db #$57, #%00000001
0CACE 87 41                         .db #$87, #%01000001
0CAD0 B7 A1                         .db #$B7, #%10100001
0CAD2 19 21                         .db #$19, #%00100001
0CAD4 39 41                         .db #$39, #%01000001
0CAD6 89 41                         .db #$89, #%01000001
0CAD8 C9 21                         .db #$C9, #%00100001
0CADA D0 1A                         .db #$D0, #%00011010
0CADC 55 1A                         .db #$55, #%00011010
0CADE 95 1A                         .db #$95, #%00011010
0CAE0 D7 1A                         .db #$D7, #%00011010
0CAE2 09 1A                         .db #$09, #%00011010
0CAE4 79 1A                         .db #$79, #%00011010
0CAE6 FF                            .db #LEVEL_END
0CAE7                           
0CAE7                           lvl_layout_05:
0CAE7 40 0A                         .db #$40, #%00001010
0CAE9 70 1A                         .db #$70, #%00011010
0CAEB B0 42                         .db #$B0, #%01000010
0CAED 41 A7                         .db #$41, #%10100111
0CAEF B1 22                         .db #$B1, #%00100010
0CAF1 D1 15                         .db #$D1, #%00010101
0CAF3 22 0A                         .db #$22, #%00001010
0CAF5 52 05                         .db #$52, #%00000101
0CAF7 B2 42                         .db #$B2, #%01000010
0CAF9 03 27                         .db #$03, #%00100111
0CAFB 33 67                         .db #$33, #%01100111
0CAFD 73 67                         .db #$73, #%01100111
0CAFF B3 47                         .db #$B3, #%01000111
0CB01 05 E5                         .db #$05, #%11100101
0CB03 25 A5                         .db #$25, #%10100101
0CB05 35 25                         .db #$35, #%00100101
0CB07 65 45                         .db #$65, #%01000101
0CB09 A5 45                         .db #$A5, #%01000101
0CB0B 46 E5                         .db #$46, #%11100101
0CB0D 66 E5                         .db #$66, #%11100101
0CB0F 86 E5                         .db #$86, #%11100101
0CB11 A6 E2                         .db #$A6, #%11100010
0CB13 C6 E5                         .db #$C6, #%11100101
0CB15 27 25                         .db #$27, #%00100101
0CB17 77 05                         .db #$77, #%00000101
0CB19 B7 02                         .db #$B7, #%00000010
0CB1B 09 05                         .db #$09, #%00000101
0CB1D 79 05                         .db #$79, #%00000101
0CB1F B9 02                         .db #$B9, #%00000010
0CB21 FF                            .db #LEVEL_END
0CB22                           
0CB22                           lvl_layout_06:
0CB22 00 03                         .db #$00, #%00000011
0CB24 20 03                         .db #$20, #%00000011
0CB26 40 03                         .db #$40, #%00000011
0CB28 A0 03                         .db #$A0, #%00000011
0CB2A C0 03                         .db #$C0, #%00000011
0CB2C 11 03                         .db #$11, #%00000011
0CB2E 31 03                         .db #$31, #%00000011
0CB30 51 03                         .db #$51, #%00000011
0CB32 91 03                         .db #$91, #%00000011
0CB34 B1 03                         .db #$B1, #%00000011
0CB36 D1 03                         .db #$D1, #%00000011
0CB38 02 03                         .db #$02, #%00000011
0CB3A 22 03                         .db #$22, #%00000011
0CB3C 42 03                         .db #$42, #%00000011
0CB3E A2 03                         .db #$A2, #%00000011
0CB40 C2 03                         .db #$C2, #%00000011
0CB42 13 03                         .db #$13, #%00000011
0CB44 33 03                         .db #$33, #%00000011
0CB46 53 03                         .db #$53, #%00000011
0CB48 93 03                         .db #$93, #%00000011
0CB4A B3 03                         .db #$B3, #%00000011
0CB4C D3 03                         .db #$D3, #%00000011
0CB4E 04 03                         .db #$04, #%00000011
0CB50 24 03                         .db #$24, #%00000011
0CB52 44 03                         .db #$44, #%00000011
0CB54 A4 03                         .db #$A4, #%00000011
0CB56 C4 03                         .db #$C4, #%00000011
0CB58 15 03                         .db #$15, #%00000011
0CB5A 35 03                         .db #$35, #%00000011
0CB5C 55 03                         .db #$55, #%00000011
0CB5E 95 03                         .db #$95, #%00000011
0CB60 B5 03                         .db #$B5, #%00000011
0CB62 D5 03                         .db #$D5, #%00000011
0CB64 06 03                         .db #$06, #%00000011
0CB66 26 03                         .db #$26, #%00000011
0CB68 46 03                         .db #$46, #%00000011
0CB6A A6 03                         .db #$A6, #%00000011
0CB6C C6 03                         .db #$C6, #%00000011
0CB6E 17 03                         .db #$17, #%00000011
0CB70 37 03                         .db #$37, #%00000011
0CB72 57 03                         .db #$57, #%00000011
0CB74 97 03                         .db #$97, #%00000011
0CB76 B7 03                         .db #$B7, #%00000011
0CB78 D7 03                         .db #$D7, #%00000011
0CB7A 08 03                         .db #$08, #%00000011
0CB7C 28 03                         .db #$28, #%00000011
0CB7E 48 03                         .db #$48, #%00000011
0CB80 A8 03                         .db #$A8, #%00000011
0CB82 C8 03                         .db #$C8, #%00000011
0CB84 19 03                         .db #$19, #%00000011
0CB86 39 03                         .db #$39, #%00000011
0CB88 59 03                         .db #$59, #%00000011
0CB8A 99 03                         .db #$99, #%00000011
0CB8C B9 03                         .db #$B9, #%00000011
0CB8E D9 03                         .db #$D9, #%00000011
0CB90 60 4B                         .db #$60, #%01001011
0CB92 71 CB                         .db #$71, #%11001011
0CB94 62 4B                         .db #$62, #%01001011
0CB96 64 4B                         .db #$64, #%01001011
0CB98 75 CB                         .db #$75, #%11001011
0CB9A 66 4B                         .db #$66, #%01001011
0CB9C 68 4B                         .db #$68, #%01001011
0CB9E 79 0B                         .db #$79, #%00001011
0CBA0 70 03                         .db #$70, #%00000011
0CBA2 72 03                         .db #$72, #%00000011
0CBA4 74 03                         .db #$74, #%00000011
0CBA6 76 03                         .db #$76, #%00000011
0CBA8 78 03                         .db #$78, #%00000011
0CBAA FF                            .db #LEVEL_END
0CBAB                           
0CBAB                           lvl_layout_07:
0CBAB 00 11                         .db #$00, #%00010001
0CBAD 01 FA                         .db #$01, #%11111010
0CBAF 12 BA                         .db #$12, #%10111010
0CBB1 23 DA                         .db #$23, #%11011010
0CBB3 34 FA                         .db #$34, #%11111010
0CBB5 05 DA                         .db #$05, #%11011010
0CBB7 15 FA                         .db #$15, #%11111010
0CBB9 45 BA                         .db #$45, #%10111010
0CBBB 56 DA                         .db #$56, #%11011010
0CBBD 27 BA                         .db #$27, #%10111010
0CBBF 67 DA                         .db #$67, #%11011010
0CBC1 38 3A                         .db #$38, #%00111010
0CBC3 78 BA                         .db #$78, #%10111010
0CBC5 09 3A                         .db #$09, #%00111010
0CBC7 39 3A                         .db #$39, #%00111010
0CBC9 89 1A                         .db #$89, #%00011010
0CBCB B0 01                         .db #$B0, #%00000001
0CBCD D0 01                         .db #$D0, #%00000001
0CBCF A1 01                         .db #$A1, #%00000001
0CBD1 C1 11                         .db #$C1, #%00010001
0CBD3 B2 01                         .db #$B2, #%00000001
0CBD5 D2 01                         .db #$D2, #%00000001
0CBD7 A3 01                         .db #$A3, #%00000001
0CBD9 C3 01                         .db #$C3, #%00000001
0CBDB B4 01                         .db #$B4, #%00000001
0CBDD D4 01                         .db #$D4, #%00000001
0CBDF A5 01                         .db #$A5, #%00000001
0CBE1 C5 01                         .db #$C5, #%00000001
0CBE3 B6 01                         .db #$B6, #%00000001
0CBE5 D6 01                         .db #$D6, #%00000001
0CBE7 A7 01                         .db #$A7, #%00000001
0CBE9 C7 01                         .db #$C7, #%00000001
0CBEB FF                            .db #LEVEL_END
0CBEC                           
0CBEC                           lvl_layout_08:
0CBEC 40 B5                         .db #$40, #%10110101
0CBEE 31 0D                         .db #$31, #%00001101
0CBF0 61 10                         .db #$61, #%00010000
0CBF2 42 C7                         .db #$42, #%11000111
0CBF4 52 67                         .db #$52, #%01100111
0CBF6 63 C7                         .db #$63, #%11000111
0CBF8 83 E7                         .db #$83, #%11100111
0CBFA 05 07                         .db #$05, #%00000111
0CBFC 15 3A                         .db #$15, #%00111010
0CBFE 07 63                         .db #$07, #%01100011
0CC00 27 13                         .db #$27, #%00010011
0CC02 38 A5                         .db #$38, #%10100101
0CC04 09 14                         .db #$09, #%00010100
0CC06 19 05                         .db #$19, #%00000101
0CC08 D0 E0                         .db #$D0, #%11100000
0CC0A C2 A0                         .db #$C2, #%10100000
0CC0C B3 E0                         .db #$B3, #%11100000
0CC0E D5 E0                         .db #$D5, #%11100000
0CC10 C6 E0                         .db #$C6, #%11100000
0CC12 B0 C4                         .db #$B0, #%11000100
0CC14 C0 A4                         .db #$C0, #%10100100
0CC16 D1 A4                         .db #$D1, #%10100100
0CC18 C4 24                         .db #$C4, #%00100100
0CC1A C5 04                         .db #$C5, #%00000100
0CC1C B7 44                         .db #$B7, #%01000100
0CC1E B8 A4                         .db #$B8, #%10100100
0CC20 D9 05                         .db #$D9, #%00000101
0CC22 FF                            .db #LEVEL_END
0CC23                           
0CC23                           lvl_layout_09:
0CC23 81 04                         .db #$81, #%00000100
0CC25 D1 04                         .db #$D1, #%00000100
0CC27 32 C4                         .db #$32, #%11000100
0CC29 A2 C4                         .db #$A2, #%11000100
0CC2B C2 24                         .db #$C2, #%00100100
0CC2D 13 24                         .db #$13, #%00100100
0CC2F 53 04                         .db #$53, #%00000100
0CC31 C3 27                         .db #$C3, #%00100111
0CC33 15 6C                         .db #$15, #%01101100
0CC35 55 6C                         .db #$55, #%01101100
0CC37 95 6C                         .db #$95, #%01101100
0CC39 D5 0C                         .db #$D5, #%00001100
0CC3B 27 C7                         .db #$27, #%11000111
0CC3D 47 C7                         .db #$47, #%11000111
0CC3F 67 C7                         .db #$67, #%11000111
0CC41 87 C7                         .db #$87, #%11000111
0CC43 A7 C7                         .db #$A7, #%11000111
0CC45 C7 C7                         .db #$C7, #%11000111
0CC47 08 13                         .db #$08, #%00010011
0CC49 28 15                         .db #$28, #%00010101
0CC4B 48 12                         .db #$48, #%00010010
0CC4D 68 15                         .db #$68, #%00010101
0CC4F 88 11                         .db #$88, #%00010001
0CC51 A8 10                         .db #$A8, #%00010000
0CC53 C8 14                         .db #$C8, #%00010100
0CC55 09 07                         .db #$09, #%00000111
0CC57 19 03                         .db #$19, #%00000011
0CC59 39 05                         .db #$39, #%00000101
0CC5B 59 02                         .db #$59, #%00000010
0CC5D 79 05                         .db #$79, #%00000101
0CC5F 99 01                         .db #$99, #%00000001
0CC61 B9 00                         .db #$B9, #%00000000
0CC63 D9 04                         .db #$D9, #%00000100
0CC65 FF                            .db #LEVEL_END
0CC66                           
0CC66                           lvl_layout_10:
0CC66 00 02                         .db #$00, #%00000010
0CC68 10 C9                         .db #$10, #%11001001
0CC6A 50 C9                         .db #$50, #%11001001
0CC6C 90 C9                         .db #$90, #%11001001
0CC6E D0 C9                         .db #$D0, #%11001001
0CC70 31 C9                         .db #$31, #%11001001
0CC72 71 C9                         .db #$71, #%11001001
0CC74 B1 C9                         .db #$B1, #%11001001
0CC76 13 C9                         .db #$13, #%11001001
0CC78 53 C9                         .db #$53, #%11001001
0CC7A 93 C9                         .db #$93, #%11001001
0CC7C D3 C9                         .db #$D3, #%11001001
0CC7E 34 C9                         .db #$34, #%11001001
0CC80 74 C9                         .db #$74, #%11001001
0CC82 B4 C9                         .db #$B4, #%11001001
0CC84 16 C9                         .db #$16, #%11001001
0CC86 56 C9                         .db #$56, #%11001001
0CC88 96 C9                         .db #$96, #%11001001
0CC8A D6 C9                         .db #$D6, #%11001001
0CC8C 37 C9                         .db #$37, #%11001001
0CC8E 77 C9                         .db #$77, #%11001001
0CC90 B7 C9                         .db #$B7, #%11001001
0CC92 D8 12                         .db #$D8, #%00010010
0CC94 FF                            .db #LEVEL_END
0CC95                           
0CC95                           lvl_layout_11:
0CC95 00 65                         .db #$00, #%01100101
0CC97 40 45                         .db #$40, #%01000101
0CC99 50 A7                         .db #$50, #%10100111
0CC9B 80 05                         .db #$80, #%00000101
0CC9D 90 A7                         .db #$90, #%10100111
0CC9F A0 65                         .db #$A0, #%01100101
0CCA1 01 43                         .db #$01, #%01000011
0CCA3 31 23                         .db #$31, #%00100011
0CCA5 61 A7                         .db #$61, #%10100111
0CCA7 81 A7                         .db #$81, #%10100111
0CCA9 A1 63                         .db #$A1, #%01100011
0CCAB 02 44                         .db #$02, #%01000100
0CCAD 32 44                         .db #$32, #%01000100
0CCAF 92 04                         .db #$92, #%00000100
0CCB1 A2 64                         .db #$A2, #%01100100
0CCB3 03 40                         .db #$03, #%01000000
0CCB5 33 40                         .db #$33, #%01000000
0CCB7 63 A1                         .db #$63, #%10100001
0CCB9 83 A2                         .db #$83, #%10100010
0CCBB 93 00                         .db #$93, #%00000000
0CCBD A3 60                         .db #$A3, #%01100000
0CCBF 04 41                         .db #$04, #%01000001
0CCC1 34 41                         .db #$34, #%01000001
0CCC3 94 02                         .db #$94, #%00000010
0CCC5 A4 62                         .db #$A4, #%01100010
0CCC7 05 47                         .db #$05, #%01000111
0CCC9 35 67                         .db #$35, #%01100111
0CCCB 75 0A                         .db #$75, #%00001010
0CCCD 85 47                         .db #$85, #%01000111
0CCCF B5 47                         .db #$B5, #%01000111
0CCD1 06 E7                         .db #$06, #%11100111
0CCD3 16 5A                         .db #$16, #%01011010
0CCD5 26 11                         .db #$26, #%00010001
0CCD7 46 13                         .db #$46, #%00010011
0CCD9 56 1A                         .db #$56, #%00011010
0CCDB 66 14                         .db #$66, #%00010100
0CCDD 86 10                         .db #$86, #%00010000
0CCDF 96 5C                         .db #$96, #%01011100
0CCE1 A6 12                         .db #$A6, #%00010010
0CCE3 C6 15                         .db #$C6, #%00010101
0CCE5 D6 E7                         .db #$D6, #%11100111
0CCE7 FF                            .db #LEVEL_END
0CCE8                           
0CCE8                           lvl_layout_12:
0CCE8 00 00                         .db #$00, #%00000000
0CCEA 50 C0                         .db #$50, #%11000000
0CCEC 80 00                         .db #$80, #%00000000
0CCEE 61 00                         .db #$61, #%00000000
0CCF0 22 C0                         .db #$22, #%11000000
0CCF2 82 E0                         .db #$82, #%11100000
0CCF4 C2 E0                         .db #$C2, #%11100000
0CCF6 A3 20                         .db #$A3, #%00100000
0CCF8 C3 10                         .db #$C3, #%00010000
0CCFA 04 00                         .db #$04, #%00000000
0CCFC 54 20                         .db #$54, #%00100000
0CCFE 15 0A                         .db #$15, #%00001010
0CD00 25 C0                         .db #$25, #%11000000
0CD02 55 E0                         .db #$55, #%11100000
0CD04 86 20                         .db #$86, #%00100000
0CD06 C6 E0                         .db #$C6, #%11100000
0CD08 C7 A0                         .db #$C7, #%10100000
0CD0A 88 00                         .db #$88, #%00000000
0CD0C 59 00                         .db #$59, #%00000000
0CD0E 89 20                         .db #$89, #%00100000
0CD10 D9 1A                         .db #$D9, #%00011010
0CD12 FF                            .db #LEVEL_END
0CD13                           
0CD13                           lvl_layout_13:
0CD13 10 E0                         .db #$10, #%11100000
0CD15 20 E0                         .db #$20, #%11100000
0CD17 30 E0                         .db #$30, #%11100000
0CD19 40 40                         .db #$40, #%01000000
0CD1B 80 60                         .db #$80, #%01100000
0CD1D C0 E0                         .db #$C0, #%11100000
0CD1F D0 E0                         .db #$D0, #%11100000
0CD21 41 40                         .db #$41, #%01000000
0CD23 71 60                         .db #$71, #%01100000
0CD25 52 60                         .db #$52, #%01100000
0CD27 A2 20                         .db #$A2, #%00100000
0CD29 43 60                         .db #$43, #%01100000
0CD2B 83 60                         .db #$83, #%01100000
0CD2D 14 74                         .db #$14, #%01110100
0CD2F 54 74                         .db #$54, #%01110100
0CD31 94 74                         .db #$94, #%01110100
0CD33 D4 14                         .db #$D4, #%00010100
0CD35 15 0D                         .db #$15, #%00001101
0CD37 55 0D                         .db #$55, #%00001101
0CD39 95 0D                         .db #$95, #%00001101
0CD3B D5 0D                         .db #$D5, #%00001101
0CD3D 26 0D                         .db #$26, #%00001101
0CD3F 46 0D                         .db #$46, #%00001101
0CD41 66 0D                         .db #$66, #%00001101
0CD43 86 0D                         .db #$86, #%00001101
0CD45 A6 0D                         .db #$A6, #%00001101
0CD47 C6 0D                         .db #$C6, #%00001101
0CD49 07 10                         .db #$07, #%00010000
0CD4B 37 0D                         .db #$37, #%00001101
0CD4D 77 0D                         .db #$77, #%00001101
0CD4F B7 0D                         .db #$B7, #%00001101
0CD51 28 0D                         .db #$28, #%00001101
0CD53 48 0D                         .db #$48, #%00001101
0CD55 68 0D                         .db #$68, #%00001101
0CD57 88 0D                         .db #$88, #%00001101
0CD59 A8 0D                         .db #$A8, #%00001101
0CD5B C8 0D                         .db #$C8, #%00001101
0CD5D 19 0D                         .db #$19, #%00001101
0CD5F 59 0D                         .db #$59, #%00001101
0CD61 99 0D                         .db #$99, #%00001101
0CD63 D9 0D                         .db #$D9, #%00001101
0CD65 FF                            .db #LEVEL_END
0CD66                           
0CD66                           lvl_layout_14:
0CD66 00 67                         .db #$00, #%01100111
0CD68 40 67                         .db #$40, #%01100111
0CD6A 80 67                         .db #$80, #%01100111
0CD6C C0 27                         .db #$C0, #%00100111
0CD6E 01 27                         .db #$01, #%00100111
0CD70 31 C7                         .db #$31, #%11000111
0CD72 51 C7                         .db #$51, #%11000111
0CD74 71 C7                         .db #$71, #%11000111
0CD76 91 C7                         .db #$91, #%11000111
0CD78 B1 C7                         .db #$B1, #%11000111
0CD7A D1 07                         .db #$D1, #%00000111
0CD7C 02 E7                         .db #$02, #%11100111
0CD7E 06 E7                         .db #$06, #%11100111
0CD80 13 07                         .db #$13, #%00000111
0CD82 D3 07                         .db #$D3, #%00000111
0CD84 15 07                         .db #$15, #%00000111
0CD86 35 07                         .db #$35, #%00000111
0CD88 55 07                         .db #$55, #%00000111
0CD8A 75 07                         .db #$75, #%00000111
0CD8C 95 07                         .db #$95, #%00000111
0CD8E B5 07                         .db #$B5, #%00000111
0CD90 D5 07                         .db #$D5, #%00000111
0CD92 17 07                         .db #$17, #%00000111
0CD94 37 C7                         .db #$37, #%11000111
0CD96 57 C7                         .db #$57, #%11000111
0CD98 77 C7                         .db #$77, #%11000111
0CD9A 97 C7                         .db #$97, #%11000111
0CD9C B7 C7                         .db #$B7, #%11000111
0CD9E D7 07                         .db #$D7, #%00000111
0CDA0 19 07                         .db #$19, #%00000111
0CDA2 D9 07                         .db #$D9, #%00000111
0CDA4 22 4C                         .db #$22, #%01001100
0CDA6 62 4C                         .db #$62, #%01001100
0CDA8 A2 4C                         .db #$A2, #%01001100
0CDAA 24 0C                         .db #$24, #%00001100
0CDAC 44 0C                         .db #$44, #%00001100
0CDAE 64 0C                         .db #$64, #%00001100
0CDB0 84 0C                         .db #$84, #%00001100
0CDB2 A4 0C                         .db #$A4, #%00001100
0CDB4 C4 0C                         .db #$C4, #%00001100
0CDB6 26 0C                         .db #$26, #%00001100
0CDB8 46 0C                         .db #$46, #%00001100
0CDBA 66 0C                         .db #$66, #%00001100
0CDBC 86 0C                         .db #$86, #%00001100
0CDBE A6 0C                         .db #$A6, #%00001100
0CDC0 C6 0C                         .db #$C6, #%00001100
0CDC2 28 4C                         .db #$28, #%01001100
0CDC4 68 4C                         .db #$68, #%01001100
0CDC6 A8 4C                         .db #$A8, #%01001100
0CDC8 32 04                         .db #$32, #%00000100
0CDCA 52 04                         .db #$52, #%00000100
0CDCC 72 04                         .db #$72, #%00000100
0CDCE 92 04                         .db #$92, #%00000100
0CDD0 B2 04                         .db #$B2, #%00000100
0CDD2 38 04                         .db #$38, #%00000100
0CDD4 58 04                         .db #$58, #%00000100
0CDD6 78 04                         .db #$78, #%00000100
0CDD8 98 04                         .db #$98, #%00000100
0CDDA B8 04                         .db #$B8, #%00000100
0CDDC FF                            .db #LEVEL_END
0CDDD                           
0CDDD                           lvl_layout_15:
0CDDD 00 7A                         .db #$00, #%01111010
0CDDF 40 7A                         .db #$40, #%01111010
0CDE1 80 7A                         .db #$80, #%01111010
0CDE3 C0 3A                         .db #$C0, #%00111010
0CDE5 31 04                         .db #$31, #%00000100
0CDE7 51 04                         .db #$51, #%00000100
0CDE9 81 04                         .db #$81, #%00000100
0CDEB A1 04                         .db #$A1, #%00000100
0CDED 05 E4                         .db #$05, #%11100100
0CDEF 15 64                         .db #$15, #%01100100
0CDF1 55 64                         .db #$55, #%01100100
0CDF3 95 64                         .db #$95, #%01100100
0CDF5 D5 E4                         .db #$D5, #%11100100
0CDF7 26 04                         .db #$26, #%00000100
0CDF9 46 44                         .db #$46, #%01000100
0CDFB 76 64                         .db #$76, #%01100100
0CDFD C6 04                         .db #$C6, #%00000100
0CDFF 17 04                         .db #$17, #%00000100
0CE01 37 64                         .db #$37, #%01100100
0CE03 77 44                         .db #$77, #%01000100
0CE05 B7 04                         .db #$B7, #%00000100
0CE07 18 64                         .db #$18, #%01100100
0CE09 58 64                         .db #$58, #%01100100
0CE0B 98 64                         .db #$98, #%01100100
0CE0D FF                            .db #LEVEL_END
0CE0E                           
0CE0E                           lvl_layout_16:
0CE0E 10 E1                         .db #$10, #%11100001
0CE10 20 9A                         .db #$20, #%10011010
0CE12 30 E1                         .db #$30, #%11100001
0CE14 40 E1                         .db #$40, #%11100001
0CE16 50 E1                         .db #$50, #%11100001
0CE18 60 C1                         .db #$60, #%11000001
0CE1A 70 E1                         .db #$70, #%11100001
0CE1C 80 E1                         .db #$80, #%11100001
0CE1E 90 E1                         .db #$90, #%11100001
0CE20 A0 61                         .db #$A0, #%01100001
0CE22 21 C1                         .db #$21, #%11000001
0CE24 A1 1A                         .db #$A1, #%00011010
0CE26 B1 41                         .db #$B1, #%01000001
0CE28 A2 E1                         .db #$A2, #%11100001
0CE2A B2 E1                         .db #$B2, #%11100001
0CE2C C2 1A                         .db #$C2, #%00011010
0CE2E D2 E1                         .db #$D2, #%11100001
0CE30 63 1A                         .db #$63, #%00011010
0CE32 C3 C1                         .db #$C3, #%11000001
0CE34 14 61                         .db #$14, #%01100001
0CE36 54 61                         .db #$54, #%01100001
0CE38 94 C1                         .db #$94, #%11000001
0CE3A 15 61                         .db #$15, #%01100001
0CE3C 55 41                         .db #$55, #%01000001
0CE3E 85 1A                         .db #$85, #%00011010
0CE40 16 41                         .db #$16, #%01000001
0CE42 46 1A                         .db #$46, #%00011010
0CE44 56 61                         .db #$56, #%01100001
0CE46 A6 61                         .db #$A6, #%01100001
0CE48 17 67                         .db #$17, #%01100111
0CE4A 57 67                         .db #$57, #%01100111
0CE4C 97 67                         .db #$97, #%01100111
0CE4E D7 07                         .db #$D7, #%00000111
0CE50 28 41                         .db #$28, #%01000001
0CE52 58 61                         .db #$58, #%01100001
0CE54 A8 41                         .db #$A8, #%01000001
0CE56 18 11                         .db #$18, #%00010001
0CE58 38 11                         .db #$38, #%00010001
0CE5A 98 11                         .db #$98, #%00010001
0CE5C B8 11                         .db #$B8, #%00010001
0CE5E D8 11                         .db #$D8, #%00010001
0CE60 59 09                         .db #$59, #%00001001
0CE62 FF                            .db #LEVEL_END
0CE63                           
0CE63                           lvl_layout_17:
0CE63 10 EA                         .db #$10, #%11101010
0CE65 20 E2                         .db #$20, #%11100010
0CE67 30 62                         .db #$30, #%01100010
0CE69 70 02                         .db #$70, #%00000010
0CE6B 80 6A                         .db #$80, #%01101010
0CE6D 90 22                         .db #$90, #%00100010
0CE6F 01 AA                         .db #$01, #%10101010
0CE71 31 6A                         .db #$31, #%01101010
0CE73 81 2A                         .db #$81, #%00101010
0CE75 A1 02                         .db #$A1, #%00000010
0CE77 C1 02                         .db #$C1, #%00000010
0CE79 D1 0A                         .db #$D1, #%00001010
0CE7B 32 EA                         .db #$32, #%11101010
0CE7D 42 6A                         .db #$42, #%01101010
0CE7F 62 02                         .db #$62, #%00000010
0CE81 92 6A                         .db #$92, #%01101010
0CE83 D2 E2                         .db #$D2, #%11100010
0CE85 43 1A                         .db #$43, #%00011010
0CE87 53 CA                         .db #$53, #%11001010
0CE89 73 02                         .db #$73, #%00000010
0CE8B 83 4A                         .db #$83, #%01001010
0CE8D B3 CA                         .db #$B3, #%11001010
0CE8F C3 EA                         .db #$C3, #%11101010
0CE91 04 0A                         .db #$04, #%00001010
0CE93 14 A2                         .db #$14, #%10100010
0CE95 24 AA                         .db #$24, #%10101010
0CE97 44 AA                         .db #$44, #%10101010
0CE99 64 6A                         .db #$64, #%01101010
0CE9B 65 6A                         .db #$65, #%01101010
0CE9D A5 AA                         .db #$A5, #%10101010
0CE9F 06 EA                         .db #$06, #%11101010
0CEA1 16 62                         .db #$16, #%01100010
0CEA3 66 22                         .db #$66, #%00100010
0CEA5 86 2A                         .db #$86, #%00101010
0CEA7 17 42                         .db #$17, #%01000010
0CEA9 47 12                         .db #$47, #%00010010
0CEAB 57 6A                         .db #$57, #%01101010
0CEAD 97 4A                         .db #$97, #%01001010
0CEAF A7 02                         .db #$A7, #%00000010
0CEB1 18 02                         .db #$18, #%00000010
0CEB3 28 0A                         .db #$28, #%00001010
0CEB5 38 22                         .db #$38, #%00100010
0CEB7 68 2A                         .db #$68, #%00101010
0CEB9 88 62                         .db #$88, #%01100010
0CEBB C8 0A                         .db #$C8, #%00001010
0CEBD D8 02                         .db #$D8, #%00000010
0CEBF 19 2A                         .db #$19, #%00101010
0CEC1 39 2A                         .db #$39, #%00101010
0CEC3 69 42                         .db #$69, #%01000010
0CEC5 99 2A                         .db #$99, #%00101010
0CEC7 B9 42                         .db #$B9, #%01000010
0CEC9 FF                            .db #LEVEL_END
0CECA                           
0CECA                           lvl_layout_18:
0CECA 00 12                         .db #$00, #%00010010
0CECC 40 1A                         .db #$40, #%00011010
0CECE 50 11                         .db #$50, #%00010001
0CED0 70 1A                         .db #$70, #%00011010
0CED2 80 10                         .db #$80, #%00010000
0CED4 D0 13                         .db #$D0, #%00010011
0CED6 01 1A                         .db #$01, #%00011010
0CED8 22 15                         .db #$22, #%00010101
0CEDA A2 1A                         .db #$A2, #%00011010
0CEDC B2 14                         .db #$B2, #%00010100
0CEDE 03 67                         .db #$03, #%01100111
0CEE0 43 67                         .db #$43, #%01100111
0CEE2 83 67                         .db #$83, #%01100111
0CEE4 24 09                         .db #$24, #%00001001
0CEE6 74 0D                         .db #$74, #%00001101
0CEE8 C4 0A                         .db #$C4, #%00001010
0CEEA 05 A7                         .db #$05, #%10100111
0CEEC 45 27                         .db #$45, #%00100111
0CEEE 95 27                         .db #$95, #%00100111
0CEF0 16 C7                         .db #$16, #%11000111
0CEF2 36 67                         .db #$36, #%01100111
0CEF4 86 67                         .db #$86, #%01100111
0CEF6 D6 07                         .db #$D6, #%00000111
0CEF8 07 A3                         .db #$07, #%10100011
0CEFA 27 23                         .db #$27, #%00100011
0CEFC 47 C7                         .db #$47, #%11000111
0CEFE 57 A0                         .db #$57, #%10100000
0CF00 67 A7                         .db #$67, #%10100111
0CF02 77 20                         .db #$77, #%00100000
0CF04 97 C7                         .db #$97, #%11000111
0CF06 A7 A4                         .db #$A7, #%10100100
0CF08 B7 A7                         .db #$B7, #%10100111
0CF0A C7 24                         .db #$C7, #%00100100
0CF0C 28 0B                         .db #$28, #%00001011
0CF0E 38 A3                         .db #$38, #%10100011
0CF10 78 08                         .db #$78, #%00001000
0CF12 88 A3                         .db #$88, #%10100011
0CF14 C8 0C                         .db #$C8, #%00001100
0CF16 D8 A4                         .db #$D8, #%10100100
0CF18 09 43                         .db #$09, #%01000011
0CF1A 59 40                         .db #$59, #%01000000
0CF1C A9 44                         .db #$A9, #%01000100
0CF1E FF                            .db #LEVEL_END
0CF1F                           
0CF1F                           lvl_layout_19:
0CF1F 11 A8                         .db #$11, #%10101000
0CF21 21 68                         .db #$21, #%01101000
0CF23 81 28                         .db #$81, #%00101000
0CF25 B1 48                         .db #$B1, #%01001000
0CF27 22 48                         .db #$22, #%01001000
0CF29 62 68                         .db #$62, #%01101000
0CF2B B2 28                         .db #$B2, #%00101000
0CF2D 23 28                         .db #$23, #%00101000
0CF2F 83 28                         .db #$83, #%00101000
0CF31 B3 28                         .db #$B3, #%00101000
0CF33 04 E8                         .db #$04, #%11101000
0CF35 24 08                         .db #$24, #%00001000
0CF37 44 08                         .db #$44, #%00001000
0CF39 64 E8                         .db #$64, #%11101000
0CF3B 84 E8                         .db #$84, #%11101000
0CF3D C4 A8                         .db #$C4, #%10101000
0CF3F D4 E8                         .db #$D4, #%11101000
0CF41 15 48                         .db #$15, #%01001000
0CF43 55 C8                         .db #$55, #%11001000
0CF45 75 C8                         .db #$75, #%11001000
0CF47 A5 08                         .db #$A5, #%00001000
0CF49 36 08                         .db #$36, #%00001000
0CF4B B6 08                         .db #$B6, #%00001000
0CF4D 27 48                         .db #$27, #%01001000
0CF4F 97 28                         .db #$97, #%00101000
0CF51 C7 08                         .db #$C7, #%00001000
0CF53 09 61                         .db #$09, #%01100001
0CF55 19 11                         .db #$19, #%00010001
0CF57 49 61                         .db #$49, #%01100001
0CF59 89 31                         .db #$89, #%00110001
0CF5B A9 61                         .db #$A9, #%01100001
0CF5D FF                            .db #LEVEL_END
0CF5E                           
0CF5E                           lvl_layout_20:
0CF5E 00 60                         .db #$00, #%01100000
0CF60 10 1A                         .db #$10, #%00011010
0CF62 40 A7                         .db #$40, #%10100111
0CF64 50 20                         .db #$50, #%00100000
0CF66 70 1A                         .db #$70, #%00011010
0CF68 80 40                         .db #$80, #%01000000
0CF6A B0 1A                         .db #$B0, #%00011010
0CF6C C0 20                         .db #$C0, #%00100000
0CF6E 01 40                         .db #$01, #%01000000
0CF70 31 1A                         .db #$31, #%00011010
0CF72 A1 40                         .db #$A1, #%01000000
0CF74 D1 1A                         .db #$D1, #%00011010
0CF76 43 67                         .db #$43, #%01100111
0CF78 83 47                         .db #$83, #%01000111
0CF7A 44 A7                         .db #$44, #%10100111
0CF7C 54 25                         .db #$54, #%00100101
0CF7E 94 08                         .db #$94, #%00001000
0CF80 A4 A7                         .db #$A4, #%10100111
0CF82 55 05                         .db #$55, #%00000101
0CF84 65 08                         .db #$65, #%00001000
0CF86 06 27                         .db #$06, #%00100111
0CF88 36 67                         .db #$36, #%01100111
0CF8A 76 28                         .db #$76, #%00101000
0CF8C A6 27                         .db #$A6, #%00100111
0CF8E D6 07                         .db #$D6, #%00000111
0CF90 A7 A7                         .db #$A7, #%10100111
0CF92 08 60                         .db #$08, #%01100000
0CF94 09 60                         .db #$09, #%01100000
0CF96 18 A7                         .db #$18, #%10100111
0CF98 48 A7                         .db #$48, #%10100111
0CF9A 58 47                         .db #$58, #%01000111
0CF9C 88 27                         .db #$88, #%00100111
0CF9E B8 20                         .db #$B8, #%00100000
0CFA0 D8 1A                         .db #$D8, #%00011010
0CFA2 59 15                         .db #$59, #%00010101
0CFA4 69 60                         .db #$69, #%01100000
0CFA6 A9 60                         .db #$A9, #%01100000
0CFA8 FF                            .db #LEVEL_END
0CFA9                           
0CFA9                           lvl_layout_21:
0CFA9 00 13                         .db #$00, #%00010011
0CFAB 10 11                         .db #$10, #%00010001
0CFAD 20 67                         .db #$20, #%01100111
0CFAF 60 67                         .db #$60, #%01100111
0CFB1 A0 47                         .db #$A0, #%01000111
0CFB3 D0 15                         .db #$D0, #%00010101
0CFB5 32 63                         .db #$32, #%01100011
0CFB7 72 05                         .db #$72, #%00000101
0CFB9 82 43                         .db #$82, #%01000011
0CFBB B2 43                         .db #$B2, #%01000011
0CFBD 33 03                         .db #$33, #%00000011
0CFBF 43 2A                         .db #$43, #%00101010
0CFC1 63 7A                         .db #$63, #%01111010
0CFC3 73 2A                         .db #$73, #%00101010
0CFC5 A3 7A                         .db #$A3, #%01111010
0CFC7 34 63                         .db #$34, #%01100011
0CFC9 74 63                         .db #$74, #%01100011
0CFCB B4 43                         .db #$B4, #%01000011
0CFCD 06 63                         .db #$06, #%01100011
0CFCF 46 63                         .db #$46, #%01100011
0CFD1 86 63                         .db #$86, #%01100011
0CFD3 C6 C3                         .db #$C6, #%11000011
0CFD5 07 7A                         .db #$07, #%01111010
0CFD7 47 7A                         .db #$47, #%01111010
0CFD9 67 0A                         .db #$67, #%00001010
0CFDB 87 7A                         .db #$87, #%01111010
0CFDD 08 13                         .db #$08, #%00010011
0CFDF 18 43                         .db #$18, #%01000011
0CFE1 48 63                         .db #$48, #%01100011
0CFE3 88 63                         .db #$88, #%01100011
0CFE5 FF                            .db #LEVEL_END
0CFE6                           
0CFE6                           lvl_layout_22:
0CFE6 00 7A                         .db #$00, #%01111010
0CFE8 40 7A                         .db #$40, #%01111010
0CFEA 80 7A                         .db #$80, #%01111010
0CFEC C0 3A                         .db #$C0, #%00111010
0CFEE 13 67                         .db #$13, #%01100111
0CFF0 83 A7                         .db #$83, #%10100111
0CFF2 B3 07                         .db #$B3, #%00000111
0CFF4 14 07                         .db #$14, #%00000111
0CFF6 44 07                         .db #$44, #%00000111
0CFF8 A4 07                         .db #$A4, #%00000111
0CFFA 15 A5                         .db #$15, #%10100101
0CFFC 45 A5                         .db #$45, #%10100101
0CFFE 85 25                         .db #$85, #%00100101
0D000 86 05                         .db #$86, #%00000101
0D002 A6 05                         .db #$A6, #%00000101
0D004 17 11                         .db #$17, #%00010001
0D006 47 A1                         .db #$47, #%10100001
0D008 87 A1                         .db #$87, #%10100001
0D00A B7 A1                         .db #$B7, #%10100001
0D00C 18 41                         .db #$18, #%01000001
0D00E 68 01                         .db #$68, #%00000001
0D010 D8 01                         .db #$D8, #%00000001
0D012 FF                            .db #LEVEL_END
0D013                           
0D013                           lvl_layout_23:
0D013 00 71                         .db #$00, #%01110001
0D015 40 11                         .db #$40, #%00010001
0D017 50 43                         .db #$50, #%01000011
0D019 80 D1                         .db #$80, #%11010001
0D01B 90 E3                         .db #$90, #%11100011
0D01D A0 63                         .db #$A0, #%01100011
0D01F 01 63                         .db #$01, #%01100011
0D021 41 63                         .db #$41, #%01100011
0D023 A1 63                         .db #$A1, #%01100011
0D025 02 63                         .db #$02, #%01100011
0D027 42 63                         .db #$42, #%01100011
0D029 62 11                         .db #$62, #%00010001
0D02B A2 67                         .db #$A2, #%01100111
0D02D 04 63                         .db #$04, #%01100011
0D02F 44 23                         .db #$44, #%00100011
0D031 64 D1                         .db #$64, #%11010001
0D033 74 E3                         .db #$74, #%11100011
0D035 84 F1                         .db #$84, #%11110001
0D037 94 E3                         .db #$94, #%11100011
0D039 A4 C7                         .db #$A4, #%11000111
0D03B B4 23                         .db #$B4, #%00100011
0D03D 05 63                         .db #$05, #%01100011
0D03F 45 23                         .db #$45, #%00100011
0D041 06 71                         .db #$06, #%01110001
0D043 46 11                         .db #$46, #%00010001
0D045 56 E3                         .db #$56, #%11100011
0D047 D6 07                         .db #$D6, #%00000111
0D049 17 D1                         .db #$17, #%11010001
0D04B 27 43                         .db #$27, #%01000011
0D04D 67 D1                         .db #$67, #%11010001
0D04F A7 C7                         .db #$A7, #%11000111
0D051 C7 A7                         .db #$C7, #%10100111
0D053 D7 B3                         .db #$D7, #%10110011
0D055 28 43                         .db #$28, #%01000011
0D057 78 43                         .db #$78, #%01000011
0D059 29 43                         .db #$29, #%01000011
0D05B 79 43                         .db #$79, #%01000011
0D05D FF                           .db #LEVEL_END
0D05E                           
0D05E                           lvl_layout_24:
0D05E 02 67                         .db #$02, #%01100111
0D060 42 67                         .db #$42, #%01100111
0D062 82 67                         .db #$82, #%01100111
0D064 05 67                         .db #$05, #%01100111
0D066 45 67                         .db #$45, #%01100111
0D068 85 67                         .db #$85, #%01100111
0D06A 08 67                         .db #$08, #%01100111
0D06C 48 67                         .db #$48, #%01100111
0D06E 88 67                         .db #$88, #%01100111
0D070 30 E7                         .db #$30, #%11100111
0D072 70 E7                         .db #$70, #%11100111
0D074 B0 E7                         .db #$B0, #%11100111
0D076 34 E7                         .db #$34, #%11100111
0D078 74 E7                         .db #$74, #%11100111
0D07A B4 E7                         .db #$B4, #%11100111
0D07C 20 13                         .db #$20, #%00010011
0D07E 40 10                         .db #$40, #%00010000
0D080 80 02                         .db #$80, #%00000010
0D082 41 05                         .db #$41, #%00000101
0D084 B1 09                         .db #$B1, #%00001001
0D086 02 09                         .db #$02, #%00001001
0D088 52 0C                         .db #$52, #%00001100
0D08A 13 11                         .db #$13, #%00010001
0D08C 33 04                         .db #$33, #%00000100
0D08E 74 0C                         .db #$74, #%00001100
0D090 B4 08                         .db #$B4, #%00001000
0D092 15 09                         .db #$15, #%00001001
0D094 55 0C                         .db #$55, #%00001100
0D096 95 0C                         .db #$95, #%00001100
0D098 47 03                         .db #$47, #%00000011
0D09A A7 12                         .db #$A7, #%00010010
0D09C 18 15                         .db #$18, #%00010101
0D09E 09 05                         .db #$09, #%00000101
0D0A0 19 03                         .db #$19, #%00000011
0D0A2 FF                            .db #LEVEL_END
0D0A3                           
0D0A3                           lvl_layout_25:
0D0A3 00 12                         .db #$00, #%00010010
0D0A5 10 63                         .db #$10, #%01100011
0D0A7 60 63                         .db #$60, #%01100011
0D0A9 A0 07                         .db #$A0, #%00000111
0D0AB 01 11                         .db #$01, #%00010001
0D0AD A1 02                         .db #$A1, #%00000010
0D0AF 02 67                         .db #$02, #%01100111
0D0B1 42 07                         .db #$42, #%00000111
0D0B3 62 67                         .db #$62, #%01100111
0D0B5 A2 C7                         .db #$A2, #%11000111
0D0B7 03 61                         .db #$03, #%01100001
0D0B9 43 01                         .db #$43, #%00000001
0D0BB 63 61                         .db #$63, #%01100001
0D0BD A6 E7                         .db #$A6, #%11100111
0D0BF B6 47                         .db #$B6, #%01000111
0D0C1 C6 01                         .db #$C6, #%00000001
0D0C3 B7 42                         .db #$B7, #%01000010
0D0C5 B8 42                         .db #$B8, #%01000010
0D0C7 C8 0A                         .db #$C8, #%00001010
0D0C9 09 7A                         .db #$09, #%01111010
0D0CB 49 7A                         .db #$49, #%01111010
0D0CD 89 3A                         .db #$89, #%00111010
0D0CF B9 42                         .db #$B9, #%01000010
0D0D1 FF                            .db #LEVEL_END
0D0D2                           
0D0D2                           ;; Level layout address pointers
0D0D2                           tbl_lvl_layout_hi:
0D0D2 C9 CA CA CA CA                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D0D7 CB CB CB CC CC                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D0DC CC CC CD CD CD                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D0E1 CE CE CE CF CF                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D0E6 CF CF D0 D0 D0                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D0EB                           
0D0EB                           tbl_lvl_layout_lo:
0D0EB F3 0E 43 76 E7                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D0F0 22 AB EC 23 66                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D0F5 95 E8 13 66 DD                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D0FA 0E 63 CA 1F 5E                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D0FF A9 E6 13 5E A3                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D104                           
0D104                           ;; Ball start position (#$YX)
0D104                           tbl_lvl_ball_startpos:
0D104 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D109 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D10E 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D113 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D118 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D11D                               
0D11D                           ;; Ball start direction, color and tile score
0D11D                           ;; #% ccc v tttt
0D11D                           ;;    ||| | ++++-- tile score
0D11D                           ;;    ||| +------- vertical direction, up (0) or down
0D11D                           ;;    +++--------- color (CBRYGM)
0D11D                           tbl_lvl_ball_init:
0D11D 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D122 70 50 B0 80 50                .db #%01110000, #%01010000, #%10110000, #%10000000, #%01010000
0D127 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D12C 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D131 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D136                           
0D136                           
0D136                           
0D136                           ;; Helper table to multiply values by 64
0D136                           tbl_Times64:
0D136 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D13A                           
0D13A                           
0D13A                           ;; Metatile ID to CHR data mapper
0D13A                           tbl_GametileTopLeft:
0D13A 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D144                           
0D144                           tbl_GametileTopRight:
0D144 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D14E                           
0D14E                           tbl_GametileBottomLeft:
0D14E 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D158                           
0D158                           tbl_GametileBottomRight:
0D158 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D162                           
0D162                           ;; Metatile ID to RAM byte data mapper
0D162                           tbl_GameTileRamByte:
0D162 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D167                           
0D167                           ;; HUD text data
0D167                           tbl_HudText:
0D167 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D16F 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D176 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D17E 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D183                           
0D183                           ;; NMI handler
0D183                           NMI:
0D183                               .include "interrupt/nmi.asm"
0D183                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D183                           ;;
0D183                           ;; include/nmi.asm
0D183                           ;;
0D183                           ;; Non-maskable interrupt script. This script is being executed
0D183                           ;; when vBlank hits.
0D183                           ;;
0D183                           ;;
0D183                           
0D183                               ;; Preserve accumulator through stack
0D183 48                            PHA
0D184                           
0D184                               ;; Should NMI be skipped?
0D184 A5 13                         LDA skip_nmi
0D186 F0 03                         BEQ +
0D188 4C 16 D2                          JMP +skip_nmi
0D18B                               +
0D18B                           
0D18B                               ;; When in NMI, skip additional NMI requests
0D18B A9 01                         LDA #$01
0D18D 85 13                         STA skip_nmi
0D18F                           
0D18F                               ;; Preserve X, Y, and PC through stack
0D18F 8A                            TXA
0D190 48                            PHA
0D191 98                            TYA
0D192 48                            PHA
0D193 08                            PHP
0D194                               
0D194                               ;; Check forced NMI skip
0D194 A5 14                         LDA force_skip_nmi
0D196 F0 03                         BEQ +
0D198 4C 07 D2                          JMP +force_skip_nmi
0D19B                               +
0D19B                           
0D19B                               ;; Update PPU mask
0D19B                               ;LDA #$00
0D19B                               ;STA PPU_CTRL
0D19B A5 12                         LDA soft_ppu_mask
0D19D 8D 01 20                      STA PPU_MASK
0D1A0                               
0D1A0                               
0D1A0                               ;; Additional PPU updates go here
0D1A0                               .include "game/test/tile_update_nmi.asm"
0D1A0                           
0D1A0                               ;; Check if ppu_buffer needs updating
0D1A0 A5 2F                         LDA ppu_buffer_update
0D1A2 D0 03                         BNE +
0D1A4 4C E6 D1                          JMP +no_ppu_buffer_update
0D1A7                               +
0D1A7                           
0D1A7                               ;; Reset ppu control register and mask
0D1A7 A2 00                         LDX #$00
0D1A9 8E 00 20                      STX PPU_CTRL
0D1AC 8E 01 20                      STX PPU_MASK
0D1AF                           
0D1AF                               ;; Set up loop
0D1AF                               -
0D1AF                                   ;; Reset hi/lo latch
0D1AF 2C 02 20                          BIT PPU_STATUS
0D1B2                           
0D1B2                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D1B2 BD 00 03                          LDA ppu_buffer,x
0D1B5 8D 06 20                          STA PPU_ADDR
0D1B8 E8                                INX
0D1B9 BD 00 03                          LDA ppu_buffer,x
0D1BC 8D 06 20                          STA PPU_ADDR
0D1BF                           
0D1BF                                   ;; Write ppu_buffer data to PPU_ADDR
0D1BF E8                                INX
0D1C0 BD 00 03                          LDA ppu_buffer,x
0D1C3 8D 07 20                          STA PPU_DATA
0D1C6                           
0D1C6                                   ;; Check if updating is done (eg. X is at pointer)
0D1C6 E8                                INX
0D1C7 E4 30                             CPX ppu_buffer_pointer
0D1C9 F0 03                             BEQ +
0D1CB 4C AF D1                      JMP -
0D1CE                           +
0D1CE                           
0D1CE                               ;; Reset ppu buffer update and pointer
0D1CE A9 00                         LDA #$00
0D1D0 85 2F                         STA ppu_buffer_update
0D1D2 85 30                         STA ppu_buffer_pointer
0D1D4                               
0D1D4                               ;; Reset scrolling position
0D1D4 8D 05 20                      STA PPU_SCROLL
0D1D7 8D 05 20                      STA PPU_SCROLL
0D1DA                           
0D1DA                               ;; Restore ppu control register and mask
0D1DA A9 90                         LDA #%10010000
0D1DC 8D 00 20                      STA PPU_CTRL
0D1DF A5 12                         LDA soft_ppu_mask
0D1E1 8D 01 20                      STA PPU_MASK
0D1E4 A9 00                         LDA #$00
0D1E6                           
0D1E6                           ;; Continue other NMI stuff
0D1E6                           +no_ppu_buffer_update:
0D1E6                               .include "game/test/show_animation_nmi.asm"
0D1E6                               ;; Reset sprite RAM, draw sprites
0D1E6 8D 03 20                      STA OAM_ADDR
0D1E9 A9 02                         LDA #$02
0D1EB 8D 14 40                      STA OAM_DMA
0D1EE                           
0D1EE A0 04                         LDY #MAX_ANIMATIONS
0D1F0 A2 00                         LDX #$00
0D1F2                               -
0D1F2 BD 30 03                          LDA explosion_framecounter,x
0D1F5 F0 03                             BEQ +
0D1F7 DE 30 03                              DEC explosion_framecounter,x
0D1FA                                   +
0D1FA E8                                INX
0D1FB 88                                DEY
0D1FC F0 03                             BEQ +done        
0D1FE 4C F2 D1                      JMP -
0D201                           +done:
0D201                               
0D201 A5 33                         LDA nudge_counter
0D203 F0 02                         BEQ +
0D205 C6 33                             DEC nudge_counter
0D207                               +
0D207                           
0D207                           ;; This is what happens when we forced nmi skip
0D207                           +force_skip_nmi:
0D207                           
0D207                               ;; Increase frame counters
0D207 E6 15                         INC frame_counter
0D209                           
0D209                               ;; reset ball_update_position
0D209 A9 00                         LDA #$00
0D20B 85 2B                         STA ball_update_position
0D20D                           
0D20D                               ;; Don't skip next NMI request
0D20D A9 00                         LDA #$00
0D20F 85 13                         STA skip_nmi
0D211                           
0D211                               ;; Restore X, Y and PC from stack
0D211 28                            PLP
0D212 68                            PLA
0D213 A8                            TAY
0D214 68                            PLA
0D215 AA                            TAX
0D216                           
0D216                           +skip_nmi:
0D216                               ;; Restore accumulator from stack
0D216 68                            PLA
0D217                           
0D217                               ;; Return
0D217 40                            RTI
0D218                           
0D218                           ;; IRQ handler (empty)
0D218                           IRQ:
0D218                               .include "interrupt/irq.asm"
0D218 40                            RTI0D219                           
0D219                           ;; Interrupt vectors
0D219 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 83 D1                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 18 D2                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
