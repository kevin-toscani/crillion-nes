	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$02        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$30        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$03
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                               00036                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 3B C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 3B C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 27 C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 0C CA                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 09 CA                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 F6 C3                      JSR sub_DisableRendering
0C08A 20 80 C4                      JSR sub_JumpToPointer
0C08D 20 0A C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; CONCEPT SCRIPTS
0C096                               
0C096                               ;; Upon pressing A, an explosion will happen on screen
0C096                               .include "game/test/show_animation.asm"
0C096                               ;; If A button is pressed, initiate explosion
0C096 A5 10                         LDA buttons_pressed
0C098 29 80                         AND #BUTTON_A
0C09A D0 03                         BNE +
0C09C 4C CE C0                          JMP +end
0C09F                               +
0C09F                           
0C09F                               ;; Get most recent slot for explosion
0C09F A6 31                         LDX explosion_pointer
0C0A1                           
0C0A1                               ;; If 0, use max pointer value
0C0A1 D0 02                         BNE +
0C0A3 A2 04                             LDX #MAX_ANIMATIONS
0C0A5                               +
0C0A5                           
0C0A5                               ;; Decrease pointer by one
0C0A5 CA                            DEX
0C0A6 86 31                         STX explosion_pointer
0C0A8                           
0C0A8                               ;; Load explosion data into RAM
0C0A8 A9 00                         LDA #$00
0C0AA 9D 34 03                      STA explosion_currentframe,x
0C0AD A9 04                         LDA #ANIMATION_SPEED
0C0AF 9D 30 03                      STA explosion_framecounter,x
0C0B2 20 19 C3                      JSR sub_GetRandomNumber
0C0B5                               ;AND #%11110000
0C0B5 9D 3C 03                      STA explosion_x,x
0C0B8 20 19 C3                      JSR sub_GetRandomNumber
0C0BB                               ;AND #%11110000
0C0BB 9D 40 03                      STA explosion_y,x
0C0BE 20 19 C3                      JSR sub_GetRandomNumber
0C0C1 29 02                         AND #%00000010
0C0C3 18                            CLC
0C0C4 69 01                         ADC #$01
0C0C6 9D 38 03                      STA explosion_attributes,x
0C0C9 A9 01                         LDA #$01
0C0CB 9D 44 03                      STA explosion_active,x
0C0CE                           
0C0CE                           
0C0CE                           +end:
0C0CE                           
0C0CE                               ;; Set up loop
0C0CE A2 00                         LDX #$00
0C0D0                               -loop_load_animation:
0C0D0                                   ;; Check if current animation is active. If not, goto next
0C0D0 BD 44 03                          LDA explosion_active,x
0C0D3 D0 03                             BNE +
0C0D5 4C 6F C1                              JMP +next
0C0D8                                   +
0C0D8                           
0C0D8                                   ;; Check the explosion framecounter
0C0D8 BD 30 03                          LDA explosion_framecounter,x
0C0DB D0 26                             BNE +
0C0DD                                       ;; Framecounter is 0
0C0DD                                       ;; Reset to animation speed
0C0DD A9 04                                 LDA #ANIMATION_SPEED
0C0DF 9D 30 03                              STA explosion_framecounter,x
0C0E2                           
0C0E2                                       ;; Set next animation frame, and check if we're done yet
0C0E2 FE 34 03                              INC explosion_currentframe,x
0C0E5 BD 34 03                              LDA explosion_currentframe,x
0C0E8 C9 0A                                 CMP #ANIM_SLIDES
0C0EA D0 17                                 BNE +
0C0EC                           
0C0EC                                       ;; If we're done, inactivate current explosion, clean
0C0EC                                       ;; up sprite RAM and go to the next one
0C0EC A9 00                                 LDA #$00
0C0EE 9D 44 03                              STA explosion_active,x
0C0F1                                       
0C0F1 A9 09                                 LDA #SLIDE_SIZE
0C0F3 0A                                    ASL
0C0F4 0A                                    ASL
0C0F5 A8                                    TAY
0C0F6 A9 EF                                 LDA #$EF
0C0F8                                       -
0C0F8 88                                        DEY
0C0F9 99 00 02                                  STA ADDR_SPRITERAM,y
0C0FC C0 00                                     CPY #00
0C0FE D0 F8                                 BNE -
0C100                                       
0C100 4C 6F C1                              JMP +next
0C103                                   +
0C103                           
0C103                                   ;; Load (x,y) position in temp variables
0C103 BD 3C 03                          LDA explosion_x,x
0C106 85 01                             STA temp+1
0C108 85 03                             STA temp+3
0C10A BD 40 03                          LDA explosion_y,x
0C10D 85 02                             STA temp+2
0C10F                           
0C10F                                   ;; Load attribute in temp variable
0C10F BD 38 03                          LDA explosion_attributes,x
0C112 85 04                             STA temp+4
0C114                           
0C114                                   ;; Load current frame into Y-register
0C114 BC 34 03                          LDY explosion_currentframe,x
0C117                           
0C117                                   ;; Load current frame ROM address from table
0C117 B9 F3 C9                          LDA explosion_anim_lo,y
0C11A 85 0C                             STA pointer
0C11C B9 E9 C9                          LDA explosion_anim_hi,y
0C11F 85 0D                             STA pointer+1
0C121                           
0C121                                   ;; Save x-register on stack
0C121 8A                                TXA
0C122 48                                PHA
0C123                           
0C123                                   ;; Load sprites into sprite RAM
0C123 A6 32                             LDX sprite_ram_pointer
0C125 A0 00                             LDY #$00
0C127                           
0C127                                   ;; Prepare (x,y) offset for loop
0C127 84 00                             STY temp
0C129                           
0C129                                   -loop_load_sprite:
0C129                                   
0C129                                       ;; Do not draw empty sprites
0C129 B1 0C                                 LDA (pointer),y
0C12B F0 18                                 BEQ +nextSprite
0C12D                                   
0C12D                                           ;; Add y-position to sprite ram buffer
0C12D A5 02                                     LDA temp+2
0C12F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C132 E8                                        INX
0C133                           
0C133                                           ;; Get tile number from frame ROM address, and
0C133                                           ;; add it to sprite ram buffer
0C133 B1 0C                                     LDA (pointer),y
0C135 9D 00 02                                  STA ADDR_SPRITERAM,x
0C138 E8                                        INX
0C139                           
0C139                                           ;; Add attribute data to sprite ram buffer
0C139 A5 04                                     LDA temp+4
0C13B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13E E8                                        INX
0C13F                           
0C13F                                           ;; Add x-position to sprite ram buffer
0C13F A5 03                                     LDA temp+3
0C141 9D 00 02                                  STA ADDR_SPRITERAM,x
0C144 E8                                        INX
0C145                           
0C145                                       +nextSprite:
0C145                           
0C145                                       ;; Check if all sprites are done
0C145 C8                                    INY
0C146 C0 09                                 CPY #SLIDE_SIZE
0C148 F0 21                                 BEQ +done
0C14A                           
0C14A                                       ;; Update x value
0C14A A5 03                                 LDA temp+3
0C14C 18                                    CLC
0C14D 69 08                                 ADC #$08
0C14F 85 03                                 STA temp+3
0C151                           
0C151                                       ;; Update temp for x,y position
0C151 E6 00                                 INC temp
0C153 A5 00                                 LDA temp
0C155 C9 03                                 CMP #SLIDE_WIDTH
0C157 D0 0F                                 BNE +
0C159                                           ;; Row is done; reset x-position
0C159 A5 01                                     LDA temp+1
0C15B 85 03                                     STA temp+3
0C15D                           
0C15D                                           ;; Update y-position
0C15D A5 02                                     LDA temp+2
0C15F 18                                        CLC
0C160 69 08                                     ADC #$08
0C162 85 02                                     STA temp+2
0C164                           
0C164                                           ;; Reset row counter
0C164 A9 00                                     LDA #$00
0C166 85 00                                     STA temp
0C168                                       +
0C168                           
0C168 4C 29 C1                          JMP -loop_load_sprite
0C16B                           
0C16B                               +done:
0C16B 86 32                             STX sprite_ram_pointer
0C16D                           
0C16D                                   ;; Retrieve x-register from stack
0C16D 68                                PLA
0C16E AA                                TAX
0C16F                           
0C16F                               +next:
0C16F                                   ;; Check if all animations have been updated
0C16F E8                                INX
0C170 E0 04                             CPX #MAX_ANIMATIONS
0C172 F0 03                             BEQ +done
0C174                           
0C174 4C D0 C0                      JMP -loop_load_animation
0C177                           +done:
0C177                           
0C177                               ;; Check if we're on the game screen
0C177 A5 2D                         LDA screen_mode
0C179 C9 01                         CMP #IS_GAME_SCREEN
0C17B F0 03                         BEQ +
0C17D 4C F6 C2                          JMP +doneGameScreen
0C180                               +
0C180                           
0C180                               ;; We're on the game screen
0C180                               ;; Check if position should be updated (ie. has nmi happened yet)
0C180 A5 2B                         LDA ball_update_position
0C182 F0 03                         BEQ +
0C184 4C DA C2                          JMP +skipBallMovement
0C187                               +
0C187                               
0C187                               ;; Move the ball
0C187                               .include "game/test/move_ball.asm"
0C187                           
0C187                               ;; Check if ball goes up or down
0C187 A5 2C                         LDA ball_flags
0C189 29 10                         AND #BALL_MOVES_DOWN
0C18B F0 24                         BEQ +moveBallUp
0C18D                           
0C18D                           
0C18D                           +moveBallDown:
0C18D                               ;; update the low byte
0C18D A5 1A                         LDA ball_ypos_lo
0C18F 18                            CLC
0C190 69 30                         ADC #BALL_SPEED_LO
0C192 85 1A                         STA ball_ypos_lo
0C194                           
0C194                               ;; update the high byte with carry
0C194 A5 19                         LDA ball_ypos_hi
0C196 69 02                         ADC #BALL_SPEED_HI
0C198 85 19                         STA ball_ypos_hi
0C19A                               
0C19A                               ;; Check bottom bound
0C19A C9 C8                         CMP #BOUND_BOTTOM
0C19C 90 32                         BCC +checkHorizontalMovement
0C19E F0 30                         BEQ +checkHorizontalMovement
0C1A0                           
0C1A0                           
0C1A0                               ;; Change ball direction to "up"
0C1A0 A9 C8                         LDA #BOUND_BOTTOM
0C1A2 85 19                         STA ball_ypos_hi
0C1A4 A9 00                         LDA #$00
0C1A6 85 1A                         STA ball_ypos_lo
0C1A8 A5 2C                         LDA ball_flags
0C1AA 29 EF                         AND #MOVE_BALL_UP
0C1AC 85 2C                         STA ball_flags
0C1AE 4C D0 C1                      JMP +checkHorizontalMovement
0C1B1                           
0C1B1                           
0C1B1                           +moveBallUp:
0C1B1                               ;; update the low byte
0C1B1 A5 1A                         LDA ball_ypos_lo
0C1B3 38                            SEC
0C1B4 E9 30                         SBC #BALL_SPEED_LO
0C1B6 85 1A                         STA ball_ypos_lo
0C1B8                           
0C1B8                               ;; update the high byte with carry
0C1B8 A5 19                         LDA ball_ypos_hi
0C1BA E9 02                         SBC #BALL_SPEED_HI
0C1BC 85 19                         STA ball_ypos_hi
0C1BE                               
0C1BE                               ;; Check top bound
0C1BE C9 30                         CMP #BOUND_TOP
0C1C0 B0 0E                         BCS +checkHorizontalMovement
0C1C2                           
0C1C2                               ;; Change ball direction to "down"
0C1C2 A9 30                         LDA #BOUND_TOP
0C1C4 85 19                         STA ball_ypos_hi
0C1C6 A9 00                         LDA #$00
0C1C8 85 1A                         STA ball_ypos_lo
0C1CA A5 2C                         LDA ball_flags
0C1CC 09 10                         ORA #MOVE_BALL_DOWN
0C1CE 85 2C                         STA ball_flags
0C1D0                           
0C1D0                           
0C1D0                           +checkHorizontalMovement:
0C1D0                           
0C1D0                               ;; Check if ball is being nudged
0C1D0 A5 33                         LDA nudge_counter
0C1D2 D0 41                         BNE +doneBallMovement
0C1D4                           
0C1D4                               ;; Check if left button is held
0C1D4 A5 0F                         LDA buttons_held
0C1D6 29 02                         AND #BUTTON_LEFT
0C1D8 F0 1B                         BEQ +
0C1DA                                   ;; update the low byte
0C1DA A5 18                             LDA ball_xpos_lo
0C1DC 38                                SEC
0C1DD E9 30                             SBC #BALL_SPEED_LO
0C1DF 85 18                             STA ball_xpos_lo
0C1E1                           
0C1E1                                   ;; update the high byte
0C1E1 A5 17                             LDA ball_xpos_hi
0C1E3 E9 02                             SBC #BALL_SPEED_HI
0C1E5 85 17                             STA ball_xpos_hi
0C1E7                                   
0C1E7                                   ;; Check left bound
0C1E7 C9 10                             CMP #BOUND_LEFT
0C1E9 B0 2A                             BCS +doneBallMovement
0C1EB                                   
0C1EB                                   ;; Set flag to nudge right and set nudge counter
0C1EB A5 2C                             LDA ball_flags
0C1ED 09 02                             ORA #NUDGE_BALL_RIGHT
0C1EF 20 79 C4                          JSR sub_InitiateNudge
0C1F2                           
0C1F2 4C 15 C2                          JMP +doneBallMovement        
0C1F5                               +
0C1F5                           
0C1F5                               ;; Check if right button is held
0C1F5 A5 0F                         LDA buttons_held
0C1F7 29 01                         AND #BUTTON_RIGHT
0C1F9 F0 1A                         BEQ +
0C1FB                                   ;; update the low byte
0C1FB A5 18                             LDA ball_xpos_lo
0C1FD 18                                CLC
0C1FE 69 30                             ADC #BALL_SPEED_LO
0C200 85 18                             STA ball_xpos_lo
0C202                           
0C202                                   ;; update the high byte
0C202 A5 17                             LDA ball_xpos_hi
0C204 69 02                             ADC #BALL_SPEED_HI
0C206 85 17                             STA ball_xpos_hi     
0C208                           
0C208                                  ;; Check right bound
0C208 C9 E8                             CMP #BOUND_RIGHT
0C20A 90 09                             BCC +doneBallMovement
0C20C F0 07                             BEQ +doneBallMovement
0C20E                                   
0C20E                                   ;; Set flag to nudge left and set nudge timer
0C20E A5 2C                             LDA ball_flags
0C210 29 FD                             AND #NUDGE_BALL_LEFT
0C212 20 79 C4                          JSR sub_InitiateNudge
0C215                               +
0C215                           
0C215                           
0C215                           +doneBallMovement:
0C215                           
0C215                               ;; Check nudge
0C215 A5 33                         LDA nudge_counter
0C217 F0 23                         BEQ +doneBallNudging
0C219 A5 2C                             LDA ball_flags
0C21B 29 02                             AND #NUDGE_BALL_RIGHT
0C21D F0 10                             BEQ +nudgeBallLeft
0C21F                                   
0C21F                                       ;; update the low byte
0C21F A5 18                                 LDA ball_xpos_lo
0C221 18                                    CLC
0C222 69 30                                 ADC #BALL_SPEED_LO
0C224 85 18                                 STA ball_xpos_lo
0C226                           
0C226                                       ;; update the high byte
0C226 A5 17                                 LDA ball_xpos_hi
0C228 69 02                                 ADC #BALL_SPEED_HI
0C22A 85 17                                 STA ball_xpos_hi  
0C22C 4C 3C C2                              JMP +doneBallNudging
0C22F                                   +nudgeBallLeft:
0C22F                                   
0C22F                                   ;; update the low byte
0C22F A5 18                             LDA ball_xpos_lo
0C231 38                                SEC
0C232 E9 30                             SBC #BALL_SPEED_LO
0C234 85 18                             STA ball_xpos_lo
0C236                           
0C236                                   ;; update the high byte
0C236 A5 17                             LDA ball_xpos_hi
0C238 E9 02                             SBC #BALL_SPEED_HI
0C23A 85 17                             STA ball_xpos_hi
0C23C                               +doneBallNudging:
0C23C                           
0C23C                               ;; Don't update position again until next frame
0C23C E6 2B                         INC ball_update_position
0C23E                           
0C23E                               
0C23E                               ;; Test collision detection
0C23E                               .include "game/test/collision_detection.asm"
0C23E                           
0C23E                               ;; Get ball's x-left, x-center, x-right position
0C23E A5 17                         LDA ball_xpos_hi
0C240 18                            CLC
0C241 69 F0                         ADC #BALL_LEFT_WGA
0C243 85 25                         STA ball_left
0C245 18                            CLC
0C246 69 04                         ADC #BALL_HALF_SIZE
0C248 85 26                         STA ball_center
0C24A 18                            CLC
0C24B 69 04                         ADC #BALL_HALF_SIZE
0C24D 85 27                         STA ball_right
0C24F                           
0C24F                               ;; Get ball's y-top, y-middle, y-bottom position
0C24F A5 19                         LDA ball_ypos_hi
0C251 18                            CLC
0C252 69 D0                         ADC #BALL_TOP_WGA
0C254 85 28                         STA ball_top
0C256 18                            CLC
0C257 69 04                         ADC #BALL_HALF_SIZE
0C259 85 29                         STA ball_middle
0C25B 18                            CLC
0C25C 69 04                         ADC #BALL_HALF_SIZE
0C25E 85 2A                         STA ball_bottom
0C260                           
0C260                           +checkRightCollision:
0C260                               ;; Check if ball moves right
0C260                               ;; No need to check nudging here as that will never collide with a tile
0C260 A5 0F                         LDA buttons_held
0C262 29 01                         AND #BUTTON_RIGHT
0C264 F0 1C                         BEQ +checkLeftCollision
0C266                           
0C266                               ;; Check tile at right position
0C266 A5 29                         LDA ball_middle
0C268 85 00                         STA temp
0C26A A5 27                         LDA ball_right
0C26C 85 01                         STA temp+1
0C26E 20 DE C3                      JSR sub_ConvertXYToTileType
0C271 29 01                         AND #TILE_IS_SOLID
0C273 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C275                           
0C275                               ;; Tile is solid; nudge ball and evaluate tile type
0C275 A5 2C                         LDA ball_flags
0C277 29 FD                         AND #NUDGE_BALL_LEFT
0C279 20 79 C4                      JSR sub_InitiateNudge
0C27C 20 37 C4                      JSR sub_EvaluateTileType
0C27F 4C A1 C2                      JMP +checkTopCollision
0C282                           
0C282                           +checkLeftCollision:
0C282                               ;; Check if ball moves right
0C282                               ;; No need to check nudging here as that will never collide with a tile
0C282 A5 0F                         LDA buttons_held
0C284 29 02                         AND #BUTTON_LEFT
0C286 F0 19                         BEQ +checkTopCollision
0C288                           
0C288                               ;; Check tile at right position
0C288 A5 29                         LDA ball_middle
0C28A 85 00                         STA temp
0C28C A5 25                         LDA ball_left
0C28E 85 01                         STA temp+1
0C290 20 DE C3                      JSR sub_ConvertXYToTileType
0C293 29 01                         AND #TILE_IS_SOLID
0C295 F0 0A                         BEQ +checkTopCollision
0C297                           
0C297                               ;; Tile is solid; nudge ball and evaluate tile type
0C297 A5 2C                         LDA ball_flags
0C299 09 02                         ORA #NUDGE_BALL_RIGHT
0C29B 20 79 C4                      JSR sub_InitiateNudge
0C29E 20 37 C4                      JSR sub_EvaluateTileType
0C2A1                               
0C2A1                               
0C2A1                           +checkTopCollision:
0C2A1                               ;; Check if ball moves up
0C2A1 A5 2C                         LDA ball_flags
0C2A3 29 10                         AND #BALL_MOVES_DOWN
0C2A5 D0 1B                         BNE +checkBottomCollision
0C2A7                           
0C2A7                               ;; Check tile at top position
0C2A7 A5 28                         LDA ball_top
0C2A9 85 00                         STA temp
0C2AB A5 26                         LDA ball_center
0C2AD 85 01                         STA temp+1
0C2AF 20 DE C3                      JSR sub_ConvertXYToTileType
0C2B2 29 01                         AND #TILE_IS_SOLID
0C2B4 F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C2B6                           
0C2B6                               ;; Tile is solid; move ball down and evaluate tile type
0C2B6 A5 2C                         LDA ball_flags
0C2B8 09 10                         ORA #MOVE_BALL_DOWN
0C2BA 85 2C                         STA ball_flags
0C2BC 20 37 C4                      JSR sub_EvaluateTileType
0C2BF 4C DA C2                      JMP +doneCheckingCollision
0C2C2                           
0C2C2                           +checkBottomCollision:
0C2C2                               ;; No movement check needed: since ball is not moving up, it must move down
0C2C2                           
0C2C2                               ;; Check tile at bottom position
0C2C2 A5 2A                         LDA ball_bottom
0C2C4 85 00                         STA temp
0C2C6 A5 26                         LDA ball_center
0C2C8 85 01                         STA temp+1
0C2CA 20 DE C3                      JSR sub_ConvertXYToTileType
0C2CD 29 01                         AND #TILE_IS_SOLID
0C2CF F0 09                         BEQ +doneCheckingCollision
0C2D1                           
0C2D1                               ;; Tile is solid; move ball up and evaluate tile type
0C2D1 A5 2C                         LDA ball_flags
0C2D3 29 EF                         AND #MOVE_BALL_UP
0C2D5 85 2C                         STA ball_flags
0C2D7 20 37 C4                      JSR sub_EvaluateTileType
0C2DA                               ;JMP +doneCheckingCollision
0C2DA                           
0C2DA                           +doneCheckingCollision:
0C2DA                           
0C2DA                           
0C2DA                           
0C2DA                           +skipBallMovement:
0C2DA                               ;; Add to sprite buffer
0C2DA A6 32                         LDX sprite_ram_pointer
0C2DC A5 19                         LDA ball_ypos_hi
0C2DE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2E1 E8                            INX
0C2E2 A9 01                         LDA #BALL_TILE_CHR
0C2E4 9D 00 02                      STA ADDR_SPRITERAM,x
0C2E7 E8                            INX
0C2E8 A9 00                         LDA #BALL_ATTR
0C2EA 9D 00 02                      STA ADDR_SPRITERAM,x
0C2ED E8                            INX
0C2EE A5 17                         LDA ball_xpos_hi
0C2F0 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F3 E8                            INX
0C2F4 86 32                         STX sprite_ram_pointer
0C2F6                           
0C2F6                           
0C2F6                           +doneGameScreen:
0C2F6                           
0C2F6                               ;; Upon pressing START, (next level) design will be drawn
0C2F6                               .include "game/test/load_next_level.asm"
0C2F6                               ;; If START button is pressed
0C2F6 A5 10                         LDA buttons_pressed
0C2F8 29 10                         AND #BUTTON_START
0C2FA F0 10                         BEQ +continue
0C2FC                                   ;; Load the next level
0C2FC E6 34                             INC current_level
0C2FE A5 34                             LDA current_level
0C300 C9 19                             CMP #25
0C302 D0 04                             BNE +
0C304 A9 00                                 LDA #$00
0C306 85 34                                 STA current_level
0C308                                   +
0C308                                   
0C308 A9 81                             LDA #LOAD_GAME_SCREEN
0C30A 85 2D                             STA screen_mode
0C30C                           
0C30C                               +continue:
0C30C                           
0C30C                           
0C30C                           
0C30C                               ;; Sprite clean-up
0C30C A6 32                         LDX sprite_ram_pointer
0C30E A9 EF                         LDA #$EF
0C310                               -
0C310 9D 00 02                          STA ADDR_SPRITERAM,x
0C313 E8                                INX
0C314 D0 FA                         BNE -
0C316 4C 57 C0                      JMP MainGameLoop
0C319                           
0C319                           ;; Subroutines
0C319                           .include "include/subroutines.asm"
0C319                           
0C319                           ;; RNG
0C319                           .include "subroutine/GetRandomNumber.asm"
0C319                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C319                           ;;
0C319                           ;; subroutine/GetRandomNumber.asm
0C319                           ;;
0C319                           ;; Simple and fast random number generator by White Flame.
0C319                           ;;
0C319                           ;; Set random_seed to an arbitrary number to randomize between
0C319                           ;; gaming sessions, for instance using the frame counter upon
0C319                           ;; pressing START on the intro screen.
0C319                           ;;
0C319                           ;;     ;; IF START PRESSED:
0C319                           ;;     LDA frame_counter
0C319                           ;;     STA random_seed
0C319                           ;;
0C319                           ;; Source:
0C319                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C319                           ;;
0C319                           ;;
0C319                           
0C319                           sub_GetRandomNumber:
0C319                               ;; Force EOR if random_seed is zero
0C319 A5 16                         LDA random_seed
0C31B F0 05                         BEQ +doEor
0C31D                           
0C31D                               ;; Shift left, and EOR if the high bit is set
0C31D 0A                            ASL
0C31E F0 04                         BEQ +noEor
0C320 90 02                         BCC +noEor
0C322                           
0C322                           +doEor:
0C322 49 1D                         EOR #$1D
0C324                           
0C324                           +noEor:
0C324 85 16                         STA random_seed
0C326                           
0C326 60                            RTS
0C327                           
0C327                           
0C327                           ;; Read controller input
0C327                           .include "subroutine/ReadController.asm"
0C327                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C327                           ;;
0C327                           ;; subroutine/ReadController.asm
0C327                           ;;
0C327                           ;; Subroutine that polls the controller and stores the input
0C327                           ;; buttons in a variable. This version only handles controller
0C327                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C327                           ;;
0C327                           ;;
0C327                           
0C327                           sub_ReadController:
0C327                           
0C327                               ;; Set strobe bit
0C327 A9 01                         LDA #$01
0C329 8D 16 40                      STA JOYPAD_1
0C32C                           
0C32C                               ;; Set up ring counter
0C32C 85 0F                         STA buttons_held
0C32E                           
0C32E                               ;; Clear strobe bit
0C32E 4A                            LSR
0C32F 8D 16 40                      STA JOYPAD_1
0C332                           
0C332                               ;; Loop through button presses
0C332                               -
0C332 AD 16 40                          LDA JOYPAD_1
0C335 4A                                LSR
0C336 26 0F                             ROL buttons_held
0C338                           
0C338                               ;; Check if ring counter is done
0C338 90 F8                         BCC -
0C33A                           
0C33A                               ;; Return from subroutine
0C33A 60                            RTS
0C33B                           
0C33B                           
0C33B                           ;; vBlank wait
0C33B                           .include "subroutine/WaitForVBlank.asm"
0C33B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C33B                           ;;
0C33B                           ;; subroutine/WaitForVBlank.asm
0C33B                           ;;
0C33B                           ;; Subroutine that essentially pauses script execution until
0C33B                           ;; vBlank happens.
0C33B                           ;;
0C33B                           ;;
0C33B                           
0C33B                           sub_WaitForVBlank:
0C33B 2C 02 20                      BIT $2002
0C33E 10 FB                         BPL sub_WaitForVBlank
0C340 60                            RTS
0C341                           
0C341                           
0C341                           ;; Game specific subroutines
0C341                           .include "game/include/subroutines.asm"
0C341                           ;; additional game-specific subroutines go here
0C341                           
0C341                           .include "game/subroutine/ClearScreen.asm"
0C341                           ;; Subroutine to clear the screen
0C341                           ;; If it's a game screen, add noise
0C341                           
0C341                           sub_ClearScreen:
0C341                               ;; Check of game screen or not
0C341 A5 2D                         LDA screen_mode
0C343 29 03                         AND #CHECK_SCREEN_MODE
0C345 C9 01                         CMP #IS_GAME_SCREEN
0C347 F0 02                         BEQ +
0C349 A9 00                             LDA #$00
0C34B                               +
0C34B 85 01                         STA temp+1
0C34D                               
0C34D                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C34D 2C 02 20                      BIT PPU_STATUS
0C350 A9 20                         LDA #$20
0C352 8D 06 20                      STA PPU_ADDR
0C355 A9 00                         LDA #$00
0C357 8D 06 20                      STA PPU_ADDR
0C35A                               
0C35A                               ;; Set up tile to draw and loop
0C35A 85 00                         STA temp
0C35C AA                            TAX
0C35D A8                            TAY
0C35E                           
0C35E                               -     
0C35E                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C35E A5 00                             LDA temp
0C360 8D 07 20                          STA PPU_DATA
0C363                           
0C363                                   ;; Check if we should draw noise next. Noise is drawn if:
0C363                                   ;; - Screen mode is game screen
0C363                                   ;; - Y between #$06 and #$19 (inclusive)
0C363                                   ;; - X between #$02 and #$1D (inclusive)
0C363                                   
0C363                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C363 A5 01                             LDA temp+1
0C365 F0 1C                             BEQ +nextTileInRow
0C367                                   
0C367                                   ;; If Y < $6, skip the check
0C367 C0 06                             CPY #$06
0C369 90 18                             BCC +nextTileInRow
0C36B                                   
0C36B                                   ;; If X < $1, skip the check
0C36B E0 01                             CPX #$01
0C36D 90 14                             BCC +nextTileInRow
0C36F                                   
0C36F                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C36F E0 1D                             CPX #$1D
0C371 D0 04                             BNE +
0C373 A9 00                                 LDA #$00
0C375 85 00                                 STA temp
0C377                                   +
0C377 B0 0A                             BCS +nextTileInRow
0C379                                   
0C379                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C379 20 19 C3                          JSR sub_GetRandomNumber
0C37C 29 07                             AND #%00000111
0C37E 18                                CLC
0C37F 69 68                             ADC #$68
0C381 85 00                             STA temp
0C383                           
0C383                           +nextTileInRow:
0C383                                   
0C383                                   ;; Check if a row has been done. If not, draw the next
0C383 E8                                INX
0C384 E0 20                             CPX #$20
0C386 D0 D6                             BNE -
0C388                                   
0C388                                   ;; Go to the next row (if any left)
0C388 A2 00                             LDX #00
0C38A C8                                INY
0C38B                                   
0C38B                                   ;; If Y is 1A, skip noise tile check until done drawing
0C38B C0 1A                             CPY #$1A
0C38D D0 04                             BNE +
0C38F A9 00                                 LDA #$00
0C391 85 01                                 STA temp+1
0C393                                   +
0C393                                   
0C393 C0 1E                             CPY #$1E
0C395 D0 C7                         BNE -
0C397                           
0C397                               ;; Clear attribute table
0C397 A9 23                         LDA #$23
0C399 8D 06 20                      STA PPU_ADDR
0C39C A9 C0                         LDA #$C0
0C39E 8D 06 20                      STA PPU_ADDR
0C3A1 A9 00                         LDA #$00
0C3A3 A2 40                         LDX #$40
0C3A5                               -
0C3A5 8D 07 20                          STA PPU_DATA
0C3A8 CA                                DEX
0C3A9 D0 FA                         BNE -
0C3AB                               
0C3AB 60                            RTS0C3AC                           .include "game/subroutine/ColorizeBall.asm"
0C3AC                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3AC                           ;;
0C3AC                           ;;  Subroutine: ColorizeBall
0C3AC                           ;;
0C3AC                           ;;  Applies the color set through ball_flags to the ball sprite.
0C3AC                           ;;
0C3AC                           ;;
0C3AC                           
0C3AC                           
0C3AC                           sub_ColorizeBall:
0C3AC                           
0C3AC                               ;; Get color from ball_flags
0C3AC 4A                            LSR
0C3AD 4A                            LSR
0C3AE 4A                            LSR
0C3AF 4A                            LSR
0C3B0 4A                            LSR
0C3B1 AA                            TAX
0C3B2                           
0C3B2                               ;; Add new light color of ball to PPU palette
0C3B2 A9 3F                         LDA #$3F
0C3B4 85 00                         STA temp
0C3B6 A9 11                         LDA #$11
0C3B8 85 01                         STA temp+1
0C3BA BD 03 CA                      LDA tbl_BallColorLight,x
0C3BD 85 02                         STA temp+2
0C3BF 20 9F C8                      JSR sub_WriteByteToPPUBuffer
0C3C2                               
0C3C2                               ;; Add new dark color of ball to PPU palette
0C3C2 E6 01                         INC temp+1
0C3C4 BD FD C9                      LDA tbl_BallColorDark,x
0C3C7 85 02                         STA temp+2
0C3C9 20 9F C8                      JSR sub_WriteByteToPPUBuffer
0C3CC                               
0C3CC 60                            RTS
0C3CD                           
0C3CD                           .include "game/subroutine/ColorsMatch.asm"
0C3CD                           
0C3CD                           ;; Subroutine to check if ball color matches colliding tile color
0C3CD                           
0C3CD                           sub_ColorsMatch:
0C3CD                               ;; Save tile color in temp variable
0C3CD A5 35                         LDA colliding_tile
0C3CF 29 0E                         AND #%00001110
0C3D1 85 00                         STA temp
0C3D3                           
0C3D3                               ;; Get ball color
0C3D3 A5 2C                         LDA ball_flags
0C3D5 29 E0                         AND #%11100000
0C3D7 4A                            LSR
0C3D8 4A                            LSR
0C3D9 4A                            LSR
0C3DA 4A                            LSR
0C3DB                           
0C3DB                               ;; Compare with tile color
0C3DB C5 00                         CMP temp
0C3DD 60                            RTS
0C3DE                           
0C3DE                           .include "game/subroutine/ConvertXYToTileType.asm"
0C3DE                           
0C3DE                           ;; Subroutine to convert the ball's position to a tile type
0C3DE                           ;; - Expects temp to be y-position of ball within game area
0C3DE                           ;; - Expects temp+1 to be x-position of ball within game area
0C3DE                           ;; - Puts result in accumulator and zp variable
0C3DE                           ;; - Corrupts X-register
0C3DE                           
0C3DE                           sub_ConvertXYToTileType:
0C3DE A5 01                         LDA temp+1
0C3E0 4A                            LSR
0C3E1 4A                            LSR
0C3E2 4A                            LSR
0C3E3 4A                            LSR
0C3E4 85 09                         STA temp+9
0C3E6 A5 00                         LDA temp
0C3E8 29 F0                         AND #%11110000
0C3EA 18                            CLC
0C3EB 65 09                         ADC temp+9
0C3ED 85 09                         STA temp+9
0C3EF AA                            TAX
0C3F0 BD 00 04                      LDA ADDR_SCREENTILERAM, x
0C3F3 85 35                         STA colliding_tile
0C3F5 60                            RTS
0C3F6                           
0C3F6                           .include "game/subroutine/DisableEnableRendering.asm"
0C3F6                           sub_DisableRendering:
0C3F6                               ;; Force NMI skip, disable rendering
0C3F6 A9 01                     	LDA #$01
0C3F8 85 14                     	STA force_skip_nmi
0C3FA 20 3B C3                      JSR sub_WaitForVBlank
0C3FD A5 12                         LDA soft_ppu_mask
0C3FF 29 E7                         AND #%11100111
0C401 8D 01 20                      STA PPU_MASK
0C404 85 12                         STA soft_ppu_mask
0C406 20 3B C3                      JSR sub_WaitForVBlank
0C409 60                            RTS
0C40A                           
0C40A                           sub_EnableRendering:
0C40A                               ;; Enable rendering
0C40A A9 00                     	LDA #$00
0C40C 8D 05 20                  	STA PPU_SCROLL
0C40F 8D 05 20                  	STA PPU_SCROLL
0C412 20 3B C3                      JSR sub_WaitForVBlank
0C415 85 14                     	STA force_skip_nmi
0C417 A5 12                         LDA soft_ppu_mask
0C419 09 18                         ORA #%00011000
0C41B 85 12                         STA soft_ppu_mask
0C41D 8D 01 20                      STA PPU_MASK
0C420 20 3B C3                      JSR sub_WaitForVBlank
0C423 60                            RTS
0C424                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C424                           sub_drawIntroScreenLogoTile:
0C424 B9 E5 C8                      LDA tbl_IntroScreenLogoChr,y
0C427 C9 60                         CMP #$60
0C429 D0 08                         BNE +
0C42B 20 19 C3                          JSR sub_GetRandomNumber
0C42E 29 07                             AND #$07
0C430 18                                CLC
0C431 69 60                             ADC #$60
0C433                               +
0C433 8D 07 20                      STA PPU_DATA
0C436 60                            RTS
0C437                           .include "game/subroutine/EvaluateTileType.asm"
0C437                           
0C437                           ;; Subroutine to evaluate the colliding tile type and take its
0C437                           ;; corresponding action (move block, kill player, ...)
0C437                           ;; - Expects X-register to be the ADDR_SCREENTILERAM offset
0C437                           ;; - Uses zp variable colliding_tile
0C437                           
0C437                           sub_EvaluateTileType:
0C437                           
0C437                               ;; Check if collided tile is a color block
0C437 A5 35                         LDA colliding_tile
0C439 29 80                         AND #IS_COLOR_BLOCK
0C43B F0 07                         BEQ +checkIfPaintBlock
0C43D                                   ;; It's a color block. Check if the colors match
0C43D 20 CD C3                          JSR sub_ColorsMatch
0C440 F0 01                             BEQ +
0C442                                       ;; Colors don't match - return
0C442 60                                    RTS
0C443                                   +
0C443                           
0C443                                   ;; Colors match. Destroy color block
0C443                                   ;; - Add the tiles that need updating to ppu buffer
0C443                                   ;; - Load destruction animation on tile
0C443                                   ;; - Write #$00 in tile type ram (makes not-solid)
0C443                                   ;; - Update attribute table accordingly through ppu buffer
0C443                                   ;; - If there are no color blocks left:
0C443                                   ;;   - Freeze ball
0C443                                   ;;   - Initiate level-win state
0C443                                   ;; (@TODO)
0C443 60                                RTS
0C444                               +checkIfPaintBlock:
0C444                               
0C444                               ;; Check if collided tile is a paint block
0C444 A5 35                         LDA colliding_tile
0C446 29 20                         AND #IS_PAINT_BLOCK
0C448 F0 1A                         BEQ +checkIfDeathBlock
0C44A                                   ;; It's a paint block. Update ball color
0C44A                                   ;; Save x-register
0C44A 8A                                TXA
0C44B 48                                PHA
0C44C                           
0C44C                                   ;; Get tile color
0C44C A5 35                             LDA colliding_tile
0C44E 29 0E                             AND #%00001110
0C450 0A                                ASL
0C451 0A                                ASL
0C452 0A                                ASL
0C453 0A                                ASL
0C454 85 00                             STA temp
0C456                           
0C456                                   ;; Apply tile color to ball
0C456 A5 2C                             LDA ball_flags
0C458 29 1F                             AND #%00011111
0C45A 05 00                             ORA temp
0C45C 85 2C                             STA ball_flags
0C45E 20 AC C3                          JSR sub_ColorizeBall
0C461                           
0C461                                   ;; Restore x-register
0C461 68                                PLA
0C462 AA                                TAX
0C463                           
0C463                                   ;; Return
0C463 60                                RTS
0C464                               +checkIfDeathBlock:
0C464                           
0C464                               ;; Check if collided tile is a death block
0C464 A5 35                         LDA colliding_tile
0C466 29 10                         AND #IS_DEATH_BLOCK
0C468 F0 01                         BEQ +checkIfMoveBlock
0C46A                                   ;; It is a death block. Kill player and return (@TODO)
0C46A                           ;        LDA ball_flags
0C46A                           ;        ORA #%00000101
0C46A                           ;        STA ball_flags
0C46A 60                                RTS
0C46B                               +checkIfMoveBlock:
0C46B                           
0C46B                               ;; Check if collided tile is a move block
0C46B A5 35                         LDA colliding_tile
0C46D 29 40                         AND #IS_MOVE_BLOCK
0C46F F0 07                         BEQ +done
0C471                                   ;; It is a move block. Check if colors match
0C471 20 CD C3                          JSR sub_ColorsMatch
0C474 F0 01                             BEQ +
0C476                                       ;; Colors don't match - return
0C476 60                                    RTS
0C477                                   +
0C477                           
0C477                                   ;; Colors match.
0C477                                   ;; - Check if next tile is a solid
0C477                                   ;; - If not, move the tile:
0C477                                   ;;   - Add the tiles that need updating to ppu buffer
0C477                                   ;;   - Add move tile sprite over the original tile
0C477                                   ;;   - Initiate moving the sprite that way for 16px
0C477                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C477                                   ;;   - Update attribute table accordingly through ppu buffer
0C477                                   ;; - After moving the sprite, in a different routine:
0C477                                   ;;   - Add move tile data on the new tile location
0C477                                   ;;   - Write the original tile type data on new position in ram
0C477                                   ;;   - Destroy sprite
0C477                                   ;;   - Update attribute table accordingly through ppu buffer
0C477                                   ;; (@TODO)
0C477 60                                RTS
0C478                               +done:
0C478                           
0C478                               ;; Return
0C478 60                            RTS
0C479                           
0C479                           .include "game/subroutine/InitiateNudge.asm"
0C479                           
0C479                           sub_InitiateNudge:
0C479 85 2C                         STA ball_flags
0C47B A9 03                         LDA #NUDGE_FRAMES
0C47D 85 33                         STA nudge_counter
0C47F 60                            RTS
0C480                           
0C480                           .include "game/subroutine/JumpToPointer.asm"
0C480                           sub_JumpToPointer:
0C480 6C 0C 00                      JMP (pointer)
0C483                               ;RTS must be handled by the routine (pointer) jumps to
0C483                           .include "game/subroutine/LoadGameScreen.asm"
0C483                           sub_LoadGameScreen:
0C483                           
0C483                               ;; Clear the screen
0C483 20 41 C3                      JSR sub_ClearScreen
0C486                               
0C486                               ;; Clear collision and attribute data
0C486 A2 00                         LDX #$00
0C488 8A                            TXA
0C489                               -
0C489 9D 00 04                          STA tile_type,x
0C48C E8                                INX
0C48D D0 FA                         BNE -
0C48F                               
0C48F                               ;; Get pointer from current level
0C48F A6 34                         LDX current_level
0C491 BD 07 D1                      LDA tbl_lvl_layout_lo,x
0C494 85 0C                         STA pointer
0C496 BD EE D0                      LDA tbl_lvl_layout_hi,x
0C499 85 0D                         STA pointer+1
0C49B                           
0C49B                               ;; Set up the loop
0C49B A0 00                         LDY #$00
0C49D                           -drawRowColumnLoop:
0C49D                           
0C49D                               ;; Load (x,y) of current set of tiles
0C49D B1 0C                         LDA (pointer),y
0C49F                           
0C49F                               ;; Check if level is done; if so, skip the loop
0C49F C9 FF                         CMP #LEVEL_END
0C4A1 D0 03                         BNE +
0C4A3 4C EC C5                          JMP +doneLevelLoad
0C4A6                               +
0C4A6                           
0C4A6                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C4A6 85 00                         STA temp
0C4A8 C8                            INY
0C4A9 B1 0C                         LDA (pointer),y
0C4AB 85 01                         STA temp+1
0C4AD                               
0C4AD                               ;; Convert (x,y) to PPU address
0C4AD                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C4AD A5 00                         LDA temp
0C4AF 29 0F                         AND #%00001111
0C4B1 4A                            LSR
0C4B2 4A                            LSR
0C4B3 09 20                         ORA #$20
0C4B5 85 02                         STA temp+2
0C4B7                               
0C4B7                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C4B7 A5 00                         LDA temp
0C4B9 29 F0                         AND #%11110000
0C4BB 4A                            LSR
0C4BC 4A                            LSR
0C4BD 4A                            LSR
0C4BE 85 03                         STA temp+3
0C4C0                               
0C4C0 A5 00                         LDA temp
0C4C2 29 03                         AND #%00000011
0C4C4 AA                            TAX
0C4C5 BD 52 D1                      LDA tbl_Times64,x
0C4C8 18                            CLC
0C4C9 65 03                         ADC temp+3
0C4CB 18                            CLC
0C4CC 69 C2                         ADC #$C2
0C4CE 85 03                         STA temp+3
0C4D0                               
0C4D0                               ;; Add carry to temp+2
0C4D0 A5 02                         LDA temp+2
0C4D2 69 00                         ADC #$00
0C4D4 85 02                         STA temp+2
0C4D6                           
0C4D6                               ;; Convert tile data to loop count and tile type
0C4D6                               ;; temp+4 = color
0C4D6 A5 01                         LDA temp+1
0C4D8 29 07                         AND #%00000111
0C4DA 85 04                         STA temp+4
0C4DC                               
0C4DC                               ;; If color = 7, this is a wall
0C4DC C9 07                         CMP #%00000111
0C4DE F0 12                         BEQ +wallHack
0C4E0                                   
0C4E0                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C4E0 29 01                             AND #%00000001
0C4E2 F0 02                             BEQ +
0C4E4 A9 05                                 LDA #$05
0C4E6                                   +
0C4E6 85 07                             STA temp+7
0C4E8                                
0C4E8                                   ;; temp+5 = tile type
0C4E8 A5 01                             LDA temp+1
0C4EA 4A                                LSR
0C4EB 4A                                LSR
0C4EC 4A                                LSR
0C4ED 29 03                             AND #%00000011
0C4EF 4C F8 C4                          JMP +setTileType
0C4F2                               +wallHack:
0C4F2                               
0C4F2                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C4F2 A9 00                         LDA #$00
0C4F4 85 07                         STA temp+7
0C4F6 A9 04                         LDA #$04
0C4F8                           
0C4F8                           +setTileType:    
0C4F8 85 05                         STA temp+5
0C4FA                               
0C4FA                               ;; X = tile offset
0C4FA 18                            CLC
0C4FB 65 07                         ADC temp+7
0C4FD AA                            TAX
0C4FE                               
0C4FE                               ;; temp+6 = number of tiles
0C4FE A5 01                         LDA temp+1
0C500 29 60                         AND #%01100000
0C502 4A                            LSR
0C503 4A                            LSR
0C504 4A                            LSR
0C505 4A                            LSR
0C506 4A                            LSR
0C507 85 06                         STA temp+6
0C509                               
0C509                               ;; Translate (x,y) to (y,x) for tile RAM
0C509 A5 00                         LDA temp
0C50B 0A                            ASL
0C50C 0A                            ASL
0C50D 0A                            ASL
0C50E 0A                            ASL
0C50F 85 08                         STA temp+8
0C511 A5 00                         LDA temp
0C513 4A                            LSR
0C514 4A                            LSR
0C515 4A                            LSR
0C516 4A                            LSR
0C517 05 08                         ORA temp+8
0C519 85 00                         STA temp
0C51B                               
0C51B                               ;; Set up loop
0C51B 98                            TYA
0C51C 48                            PHA
0C51D A4 06                         LDY temp+6
0C51F                           
0C51F                               -drawTileLoop:
0C51F                                   ;; Write PPU address
0C51F 2C 02 20                          BIT PPU_STATUS
0C522 A5 02                             LDA temp+2
0C524 8D 06 20                          STA PPU_ADDR
0C527 A5 03                             LDA temp+3
0C529 8D 06 20                          STA PPU_ADDR
0C52C                                   
0C52C                                   ;; Write first and second tile
0C52C BD 56 D1                          LDA tbl_GametileTopLeft,x
0C52F 8D 07 20                          STA PPU_DATA
0C532 BD 60 D1                          LDA tbl_GametileTopRight,x
0C535 8D 07 20                          STA PPU_DATA
0C538                                   
0C538                                   ;; Update PPU address
0C538 2C 02 20                          BIT PPU_STATUS
0C53B A5 02                             LDA temp+2
0C53D 8D 06 20                          STA PPU_ADDR
0C540 A5 03                             LDA temp+3
0C542 18                                CLC
0C543 69 20                             ADC #$20
0C545 8D 06 20                          STA PPU_ADDR
0C548                                   
0C548                                   ;; Write third and fourth tile
0C548 BD 6A D1                          LDA tbl_GametileBottomLeft,x
0C54B 8D 07 20                          STA PPU_DATA
0C54E BD 74 D1                          LDA tbl_GametileBottomRight,x
0C551 8D 07 20                          STA PPU_DATA
0C554                           
0C554                                   ;; Push x-register to stack
0C554 8A                                TXA
0C555 48                                PHA
0C556                                   
0C556                                   ;; Update tile RAM (aka collision table)
0C556 A6 05                             LDX temp+5
0C558 BD 7E D1                          LDA tbl_GameTileRamByte,x
0C55B 05 04                             ORA temp+4
0C55D 0A                                ASL
0C55E 09 01                             ORA #%00000001
0C560 A6 00                             LDX temp
0C562 9D 00 04                          STA tile_type,x
0C565                           
0C565                                   ;; Check if shade 1 should be drawn
0C565 E8                                INX
0C566 BD 00 04                          LDA tile_type,x
0C569 D0 05                             BNE +
0C56B A9 00                                 LDA #$00
0C56D 8D 07 20                              STA PPU_DATA
0C570                                   +
0C570                                   
0C570                                   ;; Check if shade 2 should be drawn
0C570 A5 03                             LDA temp+3
0C572 18                                CLC
0C573 69 41                             ADC #$41
0C575 85 03                             STA temp+3
0C577 A5 02                             LDA temp+2
0C579 69 00                             ADC #$00
0C57B 85 02                             STA temp+2
0C57D                                   
0C57D 8A                                TXA
0C57E 18                                CLC
0C57F 69 0F                             ADC #$0F
0C581 AA                                TAX
0C582                                   
0C582 BD 00 04                          LDA tile_type,x
0C585 D0 0F                             BNE +
0C587 A5 02                                 LDA temp+2
0C589 8D 06 20                              STA PPU_ADDR
0C58C A5 03                                 LDA temp+3
0C58E 8D 06 20                              STA PPU_ADDR
0C591 A9 00                                 LDA #$00
0C593 8D 07 20                              STA PPU_DATA
0C596                                   +
0C596                           
0C596                                   ;; Check if shade 3 should be drawn
0C596 E8                                INX
0C597 E6 03                             INC temp+3
0C599 BD 00 04                          LDA tile_type,x
0C59C D0 0F                             BNE +
0C59E A5 02                                 LDA temp+2
0C5A0 8D 06 20                              STA PPU_ADDR
0C5A3 A5 03                                 LDA temp+3
0C5A5 8D 06 20                              STA PPU_ADDR
0C5A8 A9 00                                 LDA #$00
0C5AA 8D 07 20                              STA PPU_DATA
0C5AD                                   +
0C5AD                                   
0C5AD                                   ;; Restore x-register from stack
0C5AD 68                                PLA
0C5AE AA                                TAX
0C5AF                                   
0C5AF                                   ;; Reset pointer for next tile
0C5AF A5 03                             LDA temp+3
0C5B1 38                                SEC
0C5B2 E9 42                             SBC #$42
0C5B4 85 03                             STA temp+3
0C5B6 A5 02                             LDA temp+2
0C5B8 E9 00                             SBC #$00
0C5BA 85 02                             STA temp+2
0C5BC                                   
0C5BC                                   ;; Draw next metatile in this loop (if any left)
0C5BC 88                                DEY
0C5BD 30 27                             BMI +doneDrawingRowColumn
0C5BF                                   
0C5BF                                   ;; Is it a row or a column?
0C5BF A5 01                             LDA temp+1
0C5C1 10 17                             BPL +
0C5C3                                       ;; It is a column: move pointer down (+$40)
0C5C3 A5 03                                 LDA temp+3
0C5C5 18                                    CLC
0C5C6 69 40                                 ADC #$40
0C5C8 85 03                                 STA temp+3
0C5CA A5 02                                 LDA temp+2
0C5CC 69 00                                 ADC #$00
0C5CE 85 02                                 STA temp+2
0C5D0                                       
0C5D0                                       ;; Add 16 to temp (as a tile RAM pointer)
0C5D0 A5 00                                 LDA temp
0C5D2 18                                    CLC
0C5D3 69 10                                 ADC #$10
0C5D5 85 00                                 STA temp
0C5D7 4C E3 C5                              JMP +drawNextTile
0C5DA                                   +
0C5DA                                   
0C5DA                                   ;; It is a row: move pointer right (+$02)
0C5DA A5 03                             LDA temp+3
0C5DC 18                                CLC
0C5DD 69 02                             ADC #$02
0C5DF 85 03                             STA temp+3
0C5E1                                   
0C5E1                                   ;; Add 1 to temp (as a tile RAM pointer)
0C5E1 E6 00                             INC temp
0C5E3                           
0C5E3                               
0C5E3                               ;; Next tile in the row/column
0C5E3                                   +drawNextTile:
0C5E3 4C 1F C5                      JMP -drawTileLoop
0C5E6                           
0C5E6                               ;; Go to the next set of tiles
0C5E6                           +doneDrawingRowColumn:
0C5E6 68                            PLA
0C5E7 A8                            TAY
0C5E8 C8                            INY
0C5E9 4C 9D C4                      JMP -drawRowColumnLoop
0C5EC                           
0C5EC                           ;; Level loading is done
0C5EC                           +doneLevelLoad:
0C5EC                           
0C5EC                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C5EC A9 20                         LDA #$20
0C5EE 8D 06 20                      STA PPU_ADDR
0C5F1 A9 A2                         LDA #$A2
0C5F3 8D 06 20                      STA PPU_ADDR
0C5F6 A9 35                         LDA #$35
0C5F8 20 06 C8                      JSR sub_Draw28HorizontalTiles
0C5FB                           
0C5FB                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C5FB A9 23                         LDA #$23
0C5FD 8D 06 20                      STA PPU_ADDR
0C600 A9 42                         LDA #$42
0C602 8D 06 20                      STA PPU_ADDR
0C605 A9 31                         LDA #$31
0C607 20 06 C8                      JSR sub_Draw28HorizontalTiles
0C60A                           
0C60A                               ;; Left & right game bounds
0C60A                               ;; Set PPU_ADDR and store in temp variables
0C60A A9 20                         LDA #$20
0C60C 85 00                         STA temp
0C60E 8D 06 20                      STA PPU_ADDR
0C611 A9 C1                         LDA #$C1
0C613 85 01                         STA temp+1
0C615 8D 06 20                      STA PPU_ADDR
0C618                               
0C618                               ;; Set vertical bound tile and set up loop
0C618 A0 33                         LDY #$33
0C61A A2 14                         LDX #20
0C61C                               -
0C61C                                   ;; Show left tile
0C61C 8C 07 20                          STY PPU_DATA
0C61F                                   
0C61F                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C61F A5 00                             LDA temp
0C621 8D 06 20                          STA PPU_ADDR
0C624 A5 01                             LDA temp+1
0C626 18                                CLC
0C627 69 1D                             ADC #29
0C629 85 01                             STA temp+1
0C62B 8D 06 20                          STA PPU_ADDR
0C62E                           
0C62E                                   ;; Show right tile
0C62E 8C 07 20                          STY PPU_DATA
0C631                           
0C631                                   ;; Check if we're done yet
0C631 CA                                DEX
0C632 F0 18                             BEQ +drawCorners
0C634                                   
0C634                                   ;; Not done yet: add 3 to low byte for next left bound
0C634 A5 01                             LDA temp+1
0C636 18                                CLC
0C637 69 03                             ADC #3
0C639 85 01                             STA temp+1
0C63B                                   
0C63B                                   ;; Apply carry to high byte
0C63B A5 00                             LDA temp
0C63D 69 00                             ADC #$00
0C63F 85 00                             STA temp
0C641                                   
0C641                                   ;; Store next PPU_ADDR to draw at
0C641 8D 06 20                          STA PPU_ADDR
0C644 A5 01                             LDA temp+1
0C646 8D 06 20                          STA PPU_ADDR
0C649 4C 1C C6                      JMP -
0C64C                               
0C64C                               
0C64C                           
0C64C                           +drawCorners:
0C64C                               ;; Draw the corners of the playing field
0C64C A9 20                         LDA #$20
0C64E 8D 06 20                      STA PPU_ADDR
0C651 A9 A1                         LDA #$A1
0C653 8D 06 20                      STA PPU_ADDR
0C656 A9 39                         LDA #$39
0C658 8D 07 20                      STA PPU_DATA
0C65B                           
0C65B A9 20                         LDA #$20
0C65D 8D 06 20                      STA PPU_ADDR
0C660 A9 BE                         LDA #$BE
0C662 8D 06 20                      STA PPU_ADDR
0C665 A9 3A                         LDA #$3A
0C667 8D 07 20                      STA PPU_DATA
0C66A                           
0C66A A9 23                         LDA #$23
0C66C 8D 06 20                      STA PPU_ADDR
0C66F A9 41                         LDA #$41
0C671 8D 06 20                      STA PPU_ADDR
0C674 A9 36                         LDA #$36
0C676 8D 07 20                      STA PPU_DATA
0C679                           
0C679 A9 23                         LDA #$23
0C67B 8D 06 20                      STA PPU_ADDR
0C67E A9 5E                         LDA #$5E
0C680 8D 06 20                      STA PPU_ADDR
0C683 A9 34                         LDA #$34
0C685 8D 07 20                      STA PPU_DATA
0C688                           
0C688                           
0C688                               ;; Draw the hud labels
0C688 A9 20                         LDA #$20
0C68A 8D 06 20                      STA PPU_ADDR
0C68D A9 62                         LDA #$62
0C68F 8D 06 20                      STA PPU_ADDR
0C692 A2 00                         LDX #$00
0C694                               -
0C694 BD 83 D1                          LDA tbl_HudText,x
0C697 8D 07 20                          STA PPU_DATA
0C69A E8                                INX
0C69B E0 1C                             CPX #28
0C69D D0 F5                         BNE -
0C69F                           
0C69F                           
0C69F                               ;; Draw the current score
0C69F A9 20                         LDA #$20
0C6A1 8D 06 20                      STA PPU_ADDR
0C6A4 A9 83                         LDA #$83
0C6A6 8D 06 20                      STA PPU_ADDR
0C6A9 A2 00                         LDX #$00
0C6AB                               -
0C6AB B5 1C                             LDA ball_score,x
0C6AD 18                                CLC
0C6AE 69 01                             ADC #$01
0C6B0 8D 07 20                          STA PPU_DATA
0C6B3 E8                                INX
0C6B4 E0 06                             CPX #$06
0C6B6 D0 F3                         BNE -
0C6B8                           
0C6B8                           
0C6B8                               ;; Draw the level number
0C6B8                               ;; (with primitive HEX>DEC)
0C6B8 A5 34                         LDA current_level
0C6BA 18                            CLC
0C6BB 69 01                         ADC #$01
0C6BD 85 01                         STA temp+1
0C6BF                               
0C6BF C9 14                         CMP #20
0C6C1 B0 13                         BCS +tempIsTwo
0C6C3                               
0C6C3 C9 0A                         CMP #10
0C6C5 B0 05                         BCS +tempIsOne
0C6C7                               
0C6C7 A9 00                         LDA #$00
0C6C9 4C DD C6                      JMP +setTemp
0C6CC                               
0C6CC                           +tempIsOne:
0C6CC 38                            SEC
0C6CD E9 0A                         SBC #10
0C6CF 85 01                         STA temp+1
0C6D1 A9 01                         LDA #$01
0C6D3 4C DD C6                      JMP +setTemp
0C6D6                               
0C6D6                           +tempIsTwo:
0C6D6 38                            SEC
0C6D7 E9 14                         SBC #20
0C6D9 85 01                         STA temp+1
0C6DB A9 02                         LDA #$02
0C6DD                           
0C6DD                           +setTemp:
0C6DD 85 00                         STA temp
0C6DF                               
0C6DF E6 00                         INC temp
0C6E1 E6 01                         INC temp+1
0C6E3                               
0C6E3 A9 20                         LDA #$20
0C6E5 8D 06 20                      STA PPU_ADDR
0C6E8 A9 8B                         LDA #$8B
0C6EA 8D 06 20                      STA PPU_ADDR
0C6ED A5 00                         LDA temp
0C6EF 8D 07 20                      STA PPU_DATA
0C6F2 A5 01                         LDA temp+1
0C6F4 8D 07 20                      STA PPU_DATA
0C6F7                           
0C6F7                           
0C6F7                               ;; Draw lives (presumes lives to be capped at 9)
0C6F7 A9 20                         LDA #$20
0C6F9 8D 06 20                      STA PPU_ADDR
0C6FC A9 92                         LDA #$92
0C6FE 8D 06 20                      STA PPU_ADDR
0C701 A6 1B                         LDX ball_lives
0C703 E8                            INX
0C704 8E 07 20                      STX PPU_DATA
0C707                           
0C707                           
0C707                               ;; Set and draw bonus
0C707 A9 07                         LDA #$07
0C709 85 22                         STA ball_bonus
0C70B A9 09                         LDA #$09
0C70D 85 23                         STA ball_bonus+1
0C70F 85 24                         STA ball_bonus+2
0C711                               
0C711 A9 20                         LDA #$20
0C713 8D 06 20                      STA PPU_ADDR
0C716 A9 9A                         LDA #$9A
0C718 8D 06 20                      STA PPU_ADDR
0C71B A2 00                         LDX #$00
0C71D                               -
0C71D B5 22                             LDA ball_bonus,x
0C71F 18                                CLC
0C720 69 01                             ADC #$01
0C722 8D 07 20                          STA PPU_DATA
0C725 E8                                INX
0C726 E0 03                             CPX #$03
0C728 D0 F3                         BNE -
0C72A                           
0C72A                           
0C72A                               ;; Set attribute data to RAM
0C72A                               
0C72A                               ;; Byte 0-7 of attribute ram should be #%10100000
0C72A A2 00                         LDX #$00
0C72C A9 A0                         LDA #$A0
0C72E                               -
0C72E 9D A0 04                          STA tile_attributes,x
0C731 E8                                INX
0C732 E0 08                             CPX #$08
0C734 D0 F8                         BNE -
0C736                           
0C736                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C736                           
0C736                           -attributeLoop:
0C736                               ;; Reset current attribute value
0C736 A9 00                         LDA #$00
0C738 85 02                         STA temp+2
0C73A                           
0C73A                               ;; Get first metatile in tile ram based on attribute index
0C73A                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C73A 8A                            TXA
0C73B                           
0C73B 38                            SEC
0C73C E9 08                         SBC #$08
0C73E 85 01                         STA temp+1      ; attr - 8 (temp1)
0C740 0A                            ASL             ; * 2
0C741 85 00                         STA temp        ; temp = temp1 * 2
0C743                           
0C743 A5 01                         LDA temp+1      ; temp1
0C745 29 F8                         AND #%11111000  ; rounded down to 8's
0C747 0A                            ASL             ; * 2
0C748 18                            CLC
0C749 65 00                         ADC temp        ; + temp1 * 2
0C74B 85 00                         STA temp        ; first metatile
0C74D                           
0C74D                               ;; Store first metatile in y-register
0C74D A8                            TAY
0C74E                           
0C74E                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C74E 8A                            TXA
0C74F 29 07                         AND #%00000111
0C751 C9 07                         CMP #%00000111
0C753 F0 0B                         BEQ +
0C755                           
0C755                               ;; If X >= $30, don't apply bottom right metatile
0C755 E0 30                         CPX #$30
0C757 B0 07                         BCS +
0C759                               
0C759                               ;; Add metatile1 subpalette to attribute value
0C759 B9 00 04                      LDA tile_type,y
0C75C 29 0C                         AND #%00001100
0C75E 85 02                         STA temp+2
0C760                               +
0C760                           
0C760                           
0C760                               ;; Apply second metatile
0C760 88                            DEY
0C761                           
0C761                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C761 8A                            TXA
0C762 29 07                         AND #%00000111
0C764 F0 10                         BEQ +
0C766                           
0C766                               ;; If X >= $30, don't apply bottom left metatile
0C766 E0 30                         CPX #$30
0C768 B0 0C                         BCS +
0C76A                           
0C76A                           
0C76A                           
0C76A                               ;; Add metatile2 subpalette to attribute value
0C76A B9 00 04                      LDA tile_type,y
0C76D 29 0C                         AND #%00001100
0C76F 4A                            LSR
0C770 4A                            LSR
0C771 05 02                         ORA temp+2
0C773 4C 78 C7                      JMP ++
0C776                               +
0C776 A5 02                         LDA temp+2
0C778                               ++
0C778 0A                            ASL
0C779 0A                            ASL
0C77A 85 02                         STA temp+2
0C77C                           
0C77C                           
0C77C                               ;; Apply third metatile
0C77C 98                            TYA
0C77D 38                            SEC
0C77E E9 0F                         SBC #$0F
0C780 A8                            TAY
0C781                           
0C781                               ;; If X MOD 8 == 7, don't apply top right metatile
0C781 8A                            TXA
0C782 29 07                         AND #%00000111
0C784 C9 07                         CMP #%00000111
0C786 F0 11                         BEQ +
0C788                           
0C788                               ;; If X < $10, don't apply top right metatile
0C788 8A                            TXA
0C789 29 F0                         AND #%11110000
0C78B F0 0C                         BEQ +
0C78D                           
0C78D                               ;; Add metatile3 subpalette to attribute value
0C78D B9 00 04                      LDA tile_type,y
0C790 29 0C                         AND #%00001100
0C792 4A                            LSR
0C793 4A                            LSR
0C794 05 02                         ORA temp+2
0C796 4C 9B C7                      JMP ++
0C799                               +
0C799 A5 02                         LDA temp+2
0C79B                               ++
0C79B 0A                            ASL
0C79C 0A                            ASL
0C79D 85 02                         STA temp+2
0C79F                           
0C79F                           
0C79F                               ;; Apply fourth metatile
0C79F 88                            DEY
0C7A0                           
0C7A0                               ;; If X MOD 8 == 0, don't apply top left metatile
0C7A0 8A                            TXA
0C7A1 29 07                         AND #%00000111
0C7A3 F0 11                         BEQ +
0C7A5                           
0C7A5                               ;; If X < $10, don't apply top left metatile
0C7A5 8A                            TXA
0C7A6 29 F0                         AND #%11110000
0C7A8 F0 0C                         BEQ +
0C7AA                           
0C7AA                               ;; Add metatile4 subpalette to attribute value
0C7AA B9 00 04                      LDA tile_type,y
0C7AD 29 0C                         AND #%00001100
0C7AF 4A                            LSR
0C7B0 4A                            LSR
0C7B1 05 02                         ORA temp+2
0C7B3 4C B8 C7                      JMP ++
0C7B6                               +
0C7B6 A5 02                         LDA temp+2
0C7B8                               ++
0C7B8 9D A0 04                      STA tile_attributes,x
0C7BB                           
0C7BB                               ;; Check the next attribute, if any left
0C7BB E8                            INX
0C7BC E0 38                         CPX #$38
0C7BE F0 03                         BEQ +
0C7C0 4C 36 C7                          JMP -attributeLoop
0C7C3                               +
0C7C3                           
0C7C3                               ;; Stream attribute RAM to PPU
0C7C3 2C 02 20                      BIT PPU_STATUS
0C7C6 A9 23                         LDA #$23
0C7C8 8D 06 20                      STA PPU_ADDR
0C7CB A9 C0                         LDA #$C0
0C7CD 8D 06 20                      STA PPU_ADDR
0C7D0 A2 00                         LDX #$00
0C7D2                               -
0C7D2 BD A0 04                          LDA tile_attributes,x
0C7D5 8D 07 20                          STA PPU_DATA
0C7D8 E8                                INX
0C7D9 E0 40                             CPX #$40
0C7DB D0 F5                         BNE -
0C7DD                           
0C7DD                               ;; Set initial ball position
0C7DD A6 34                         LDX current_level
0C7DF BD 20 D1                      LDA tbl_lvl_ball_startpos,x
0C7E2 29 F0                         AND #%11110000
0C7E4 18                            CLC
0C7E5 69 34                         ADC #$34
0C7E7 85 19                         STA ball_ypos_hi
0C7E9 BD 20 D1                      LDA tbl_lvl_ball_startpos,x
0C7EC 0A                            ASL
0C7ED 0A                            ASL
0C7EE 0A                            ASL
0C7EF 0A                            ASL
0C7F0 18                            CLC
0C7F1 69 14                         ADC #$14
0C7F3 85 17                         STA ball_xpos_hi
0C7F5 A9 00                         LDA #$00
0C7F7 85 18                         STA ball_xpos_lo
0C7F9 85 1A                         STA ball_ypos_lo
0C7FB                               
0C7FB                               ;; Set initial ball color and direction
0C7FB BD 39 D1                      LDA tbl_lvl_ball_init,x
0C7FE 29 F0                         AND #%11110000
0C800 85 2C                         STA ball_flags
0C802 20 AC C3                      JSR sub_ColorizeBall
0C805                               
0C805                               ;; Return
0C805 60                            RTS
0C806                           
0C806                           
0C806                           ;; Subroutine: draw 28 tiles in a row
0C806                           sub_Draw28HorizontalTiles:
0C806 A2 1C                         LDX #28
0C808                               -
0C808 8D 07 20                          STA PPU_DATA
0C80B CA                                DEX
0C80C D0 FA                         BNE -
0C80E 60                            RTS0C80F                           .include "game/subroutine/LoadIntroScreen.asm"
0C80F                           sub_LoadIntroScreen:
0C80F                           
0C80F                               ;; Load intro palette
0C80F 2C 02 20                      BIT PPU_STATUS
0C812 A9 3F                         LDA #$3F
0C814 8D 06 20                      STA PPU_ADDR
0C817 A9 00                         LDA #$00
0C819 8D 06 20                      STA PPU_ADDR
0C81C A2 00                         LDX #$00
0C81E                               -
0C81E BD C5 C8                          LDA tbl_IntroScreenPalette,x
0C821 8D 07 20                          STA PPU_DATA
0C824 E8                                INX
0C825 E0 20                             CPX #$20
0C827 D0 F5                         BNE -
0C829                               
0C829                               ;; Put ball in the middle
0C829 A9 7C                         LDA #$7C
0C82B 85 17                         STA ball_xpos_hi
0C82D 85 19                         STA ball_ypos_hi
0C82F                           
0C82F                               ;; Clear the screen
0C82F 20 41 C3                      JSR sub_ClearScreen
0C832                           
0C832                               ;; Set up intro screen draw loop
0C832 A2 00                         LDX #$00
0C834                           
0C834                           -loop_IntroScreenData:
0C834                           
0C834                               ;; Get current byte from intro screen data
0C834 BD ED C8                      LDA tbl_IntroScreenData,x
0C837                           
0C837                               ;; If current byte is #$3F, we're done drawing.
0C837 C9 3F                         CMP #$3F
0C839 D0 03                         BNE +
0C83B 4C 88 C8                          JMP +goToEndIntroScreen
0C83E                               +
0C83E                           
0C83E                               ;; If highest bits are %11, draw a plain tile
0C83E 29 C0                         AND #%11000000
0C840 D0 03                         BNE +
0C842 4C 68 C8                          JMP +drawTile
0C845                               +
0C845                               
0C845                               ;; If highest bits are %01, set the PPU address
0C845                               ;; If not, draw two logo tiles
0C845 C9 40                         CMP #%01000000
0C847 D0 03                         BNE +drawLogo
0C849 4C 72 C8                          JMP +setPpuAddr
0C84C                           
0C84C                           +drawLogo:
0C84C                               ;; Get bits 0-2 and store in a temp variable
0C84C BD ED C8                      LDA tbl_IntroScreenData,x
0C84F 29 07                         AND #%00000111
0C851 85 00                         STA temp
0C853                               
0C853                               ;; Get bits 3-5, shift over to get a value from 0-7
0C853 BD ED C8                      LDA tbl_IntroScreenData,x
0C856 4A                            LSR
0C857 4A                            LSR
0C858 4A                            LSR
0C859 29 07                         AND #%00000111
0C85B                               
0C85B                               ;; Draw the tile that corresponds with that value
0C85B A8                            TAY
0C85C 20 24 C4                      JSR sub_drawIntroScreenLogoTile
0C85F                               
0C85F                               ;; Do the same for the value stored in temp
0C85F A4 00                         LDY temp
0C861 20 24 C4                      JSR sub_drawIntroScreenLogoTile
0C864                           
0C864                               ;; Next byte please
0C864 E8                            INX
0C865 4C 34 C8                      JMP -loop_IntroScreenData
0C868                           
0C868                           +drawTile:
0C868                               ;; Just draw the tile value on screen
0C868 BD ED C8                      LDA tbl_IntroScreenData,x
0C86B 8D 07 20                      STA PPU_DATA
0C86E                               
0C86E                               ;; Next byte please
0C86E E8                            INX
0C86F 4C 34 C8                      JMP -loop_IntroScreenData
0C872                           
0C872                           
0C872                           +setPpuAddr:
0C872                               ;; Reset the PPU latch
0C872 2C 02 20                      BIT PPU_STATUS
0C875                               
0C875                               ;; Sanitize and write the high byte of the PPU address
0C875 BD ED C8                      LDA tbl_IntroScreenData,x
0C878 29 3F                         AND #%00111111
0C87A 8D 06 20                      STA PPU_ADDR
0C87D                           
0C87D                               ;; Write the low byte of the PPU address
0C87D E8                            INX
0C87E BD ED C8                      LDA tbl_IntroScreenData,x
0C881 8D 06 20                      STA PPU_ADDR
0C884                               
0C884                               ;; PPU has been set up to draw tiles at the correct spot now.
0C884                               
0C884                               ;; Next byte please.
0C884 E8                            INX
0C885 4C 34 C8                      JMP -loop_IntroScreenData
0C888                           
0C888                           +goToEndIntroScreen:
0C888                           
0C888                               ;; To color the 1.LEVEL: line green, we need to update two
0C888                               ;; values in the PPU attribute data.
0C888 2C 02 20                      BIT PPU_STATUS
0C88B A9 23                         LDA #$23
0C88D 8D 06 20                      STA PPU_ADDR
0C890 A9 CB                         LDA #$CB
0C892 8D 06 20                      STA PPU_ADDR
0C895 A9 0A                         LDA #%00001010
0C897 8D 07 20                      STA PPU_DATA
0C89A 8D 07 20                      STA PPU_DATA
0C89D                           
0C89D 60                            RTS
0C89E                           
0C89E                           .include "game/subroutine/LoadWinScreen.asm"
0C89E                           sub_LoadWinScreen:
0C89E 60                            RTS
0C89F                           
0C89F                           .include "game/subroutine/WriteByteToPPU.asm"
0C89F                           sub_WriteByteToPPUBuffer:
0C89F                           
0C89F                               ;; Prevent updating until full 3-byte buffer is filled,
0C89F                               ;; so that graphics won't glitch out if NMI happens during
0C89F                               ;; updating the buffer
0C89F A9 00                         LDA #$00
0C8A1 85 2F                         STA ppu_buffer_update
0C8A3                           
0C8A3                               ;; Check if buffer full; if so, wait a frame and force update
0C8A3 A4 30                         LDY ppu_buffer_pointer
0C8A5 C0 30                         CPY #$30
0C8A7 D0 05                         BNE +
0C8A9 E6 2F                             INC ppu_buffer_update
0C8AB 20 3B C3                          JSR sub_WaitForVBlank
0C8AE                               +
0C8AE                           
0C8AE                               ;; Add ppu_addr high byte to buffer
0C8AE A5 00                         LDA temp
0C8B0 99 00 03                      STA ppu_buffer,y
0C8B3                           
0C8B3                               ;; Add ppu_addr low byte to buffer
0C8B3 C8                            INY
0C8B4 A5 01                         LDA temp+1
0C8B6 99 00 03                      STA ppu_buffer,y
0C8B9                           
0C8B9                               ;; Add ppu_data to buffer
0C8B9 C8                            INY
0C8BA A5 02                         LDA temp+2
0C8BC 99 00 03                      STA ppu_buffer,y
0C8BF                           
0C8BF                               ;; Update buffer pointer
0C8BF C8                            INY
0C8C0 84 30                         STY ppu_buffer_pointer
0C8C2                           
0C8C2                               ;; Tell NMI to update next round
0C8C2 E6 2F                         INC ppu_buffer_update
0C8C4                           
0C8C4                               ;; Return
0C8C4 60                            RTS0C8C5                           
0C8C5                           
0C8C5                           ;; LUTs
0C8C5                           .include "game/include/tables.asm"
0C8C5                           
0C8C5                           ;; Intro screen palette
0C8C5                           tbl_IntroScreenPalette:
0C8C5 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C8C9 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C8CD 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C8D1 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C8D5                           
0C8D5 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C8D9 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C8DD 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C8E1 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C8E5                           
0C8E5                           
0C8E5                           ;; Intro: mapping logo index to chr tile
0C8E5                           tbl_IntroScreenLogoChr:
0C8E5 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C8ED                           
0C8ED                           
0C8ED                           ;; Intro screen data
0C8ED                           tbl_IntroScreenData:
0C8ED                           
0C8ED                               ;; Set PPU address $20AC and draw
0C8ED 60 AC                         .db #$60, #$AC
0C8EF 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C8F7                           
0C8F7                               ;; Set PPU address $20CF and draw
0C8F7 60 CF                         .db #$60, #$CF
0C8F9 01 02                         .db #_0, #_1
0C8FB                               
0C8FB                               ;; Set PPU address $2122 and draw
0C8FB 61 22                         .db #$61, #$22
0C8FD 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C904 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C90A 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C912 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C917                               
0C917                               ;; Set PPU address $2147 and draw
0C917 61 47                         .db #$61, #$47
0C919 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C920 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C924 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C92A 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C930                               
0C930                               ;; Set PPU address $218B and draw
0C930 61 8B                         .db #$61, #$8B
0C932 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C938 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C93D                               
0C93D                               ;; Set PPU address $21E6 and draw
0C93D 61 E6                         .db #$61, #$E6
0C93F 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C947 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C94B 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C952                               
0C952                               ;; Set PPU address $222D and draw
0C952 62 2D                         .db #$62, #$2D
0C954 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C95A                               
0C95A                               ;; Set PPU address $2281
0C95A 62 81                         .db #$62, #$81
0C95C                               
0C95C                               ;; Draw the Crillion logo
0C95C E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C960 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C964 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C968 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C96C                               
0C96C D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C970 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C974 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C978 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C97C                               
0C97C D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C980 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C984 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C988 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C98C                           
0C98C D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C990 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C994 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C998 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C99C                               
0C99C D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C9A0 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C9A4 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C9A8 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C9AC                           
0C9AC F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C9B0 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C9B4 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C9B8 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C9BB                           
0C9BB                               ;; End of intro
0C9BB 3F                            .db #$3F
0C9BC                           
0C9BC                           
0C9BC                           ;; test animation table
0C9BC                           .include "game/test/show_animation_table.asm"
0C9BC                           ;; CHR tile-id's per slide of explosion
0C9BC                           explosion_slide0:
0C9BC 00 00 00                      .db #$00, #$00, #$00
0C9BF 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C9C2 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C9C5                           
0C9C5                           explosion_slide1:
0C9C5 00 00 00                      .db #$00, #$00, #$00
0C9C8 29 2A 2B                      .db #$29, #$2A, #$2B
0C9CB 39 3A 3B                      .db #$39, #$3A, #$3B
0C9CE                           
0C9CE                           explosion_slide2:
0C9CE 16 00 00                      .db #$16, #$00, #$00
0C9D1 26 27 28                      .db #$26, #$27, #$28
0C9D4 36 37 38                      .db #$36, #$37, #$38
0C9D7                           
0C9D7                           explosion_slide3:
0C9D7 00 14 15                      .db #$00, #$14, #$15
0C9DA 23 24 25                      .db #$23, #$24, #$25
0C9DD 33 34 35                      .db #$33, #$34, #$35
0C9E0                           
0C9E0                           explosion_slide4:
0C9E0 10 11 12                      .db #$10, #$11, #$12
0C9E3 20 21 22                      .db #$20, #$21, #$22
0C9E6 30 31 32                      .db #$30, #$31, #$32
0C9E9                           
0C9E9                           ;; High and low bytes of animation slides
0C9E9                           explosion_anim_hi:
0C9E9 C9                            .db >#explosion_slide0
0C9EA C9                            .db >#explosion_slide1
0C9EB C9                            .db >#explosion_slide2
0C9EC C9                            .db >#explosion_slide3
0C9ED C9                            .db >#explosion_slide4
0C9EE C9                            .db >#explosion_slide4
0C9EF C9                            .db >#explosion_slide3
0C9F0 C9                            .db >#explosion_slide2
0C9F1 C9                            .db >#explosion_slide1
0C9F2 C9                            .db >#explosion_slide0
0C9F3                           
0C9F3                           explosion_anim_lo:
0C9F3 BC                            .db <#explosion_slide0
0C9F4 C5                            .db <#explosion_slide1
0C9F5 CE                            .db <#explosion_slide2
0C9F6 D7                            .db <#explosion_slide3
0C9F7 E0                            .db <#explosion_slide4
0C9F8 E0                            .db <#explosion_slide4
0C9F9 D7                            .db <#explosion_slide3
0C9FA CE                            .db <#explosion_slide2
0C9FB C5                            .db <#explosion_slide1
0C9FC BC                            .db <#explosion_slide0
0C9FD                           
0C9FD                           
0C9FD                           
0C9FD                           ;; Ball palette color table (CBRYGM)
0C9FD                           tbl_BallColorDark:
0C9FD 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CA03                            
0CA03                           tbl_BallColorLight:
0CA03 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CA09                           
0CA09                               
0CA09                           ;; Screen mode drawing routine addresses
0CA09                           tbl_LoadScreenHi:
0CA09 C8 C4 C8                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CA0C                           
0CA0C                           tbl_LoadScreenLo:
0CA0C 0F 83 9E                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CA0F                           
0CA0F                           
0CA0F                           ;; Test level data
0CA0F                           .include "game/test/level_data.asm"
0CA0F                           lvl_layout_01:
0CA0F 61 21                         .db #$61, #%00100001
0CA11 52 61                         .db #$52, #%01100001
0CA13 43 65                         .db #$43, #%01100101
0CA15 83 05                         .db #$83, #%00000101
0CA17 93 15                         .db #$93, #%00010101
0CA19 34 7A                         .db #$34, #%01111010
0CA1B 74 7A                         .db #$74, #%01111010
0CA1D 35 7A                         .db #$35, #%01111010
0CA1F 75 7A                         .db #$75, #%01111010
0CA21 46 65                         .db #$46, #%01100101
0CA23 86 25                         .db #$86, #%00100101
0CA25 57 61                         .db #$57, #%01100001
0CA27 68 21                         .db #$68, #%00100001
0CA29 FF                            .db #LEVEL_END
0CA2A                           
0CA2A                           lvl_layout_02:
0CA2A C0 0A                         .db #$C0, #%00001010
0CA2C 11 15                         .db #$11, #%00010101
0CA2E 21 62                         .db #$21, #%01100010
0CA30 61 62                         .db #$61, #%01100010
0CA32 A1 42                         .db #$A1, #%01000010
0CA34 12 67                         .db #$12, #%01100111
0CA36 52 67                         .db #$52, #%01100111
0CA38 92 67                         .db #$92, #%01100111
0CA3A C3 0D                         .db #$C3, #%00001101
0CA3C 14 11                         .db #$14, #%00010001
0CA3E 24 65                         .db #$24, #%01100101
0CA40 64 65                         .db #$64, #%01100101
0CA42 A4 45                         .db #$A4, #%01000101
0CA44 15 67                         .db #$15, #%01100111
0CA46 55 67                         .db #$55, #%01100111
0CA48 95 67                         .db #$95, #%01100111
0CA4A 17 12                         .db #$17, #%00010010
0CA4C 27 61                         .db #$27, #%01100001
0CA4E 67 61                         .db #$67, #%01100001
0CA50 A7 41                         .db #$A7, #%01000001
0CA52 38 7A                         .db #$38, #%01111010
0CA54 98 5A                         .db #$98, #%01011010
0CA56 18 27                         .db #$18, #%00100111
0CA58 48 27                         .db #$48, #%00100111
0CA5A 78 27                         .db #$78, #%00100111
0CA5C C8 07                         .db #$C8, #%00000111
0CA5E FF                            .db #LEVEL_END
0CA5F                           
0CA5F                           lvl_layout_03:
0CA5F 00 7A                         .db #$00, #%01111010
0CA61 40 7A                         .db #$40, #%01111010
0CA63 80 7A                         .db #$80, #%01111010
0CA65 C0 1A                         .db #$C0, #%00011010
0CA67 10 A1                         .db #$10, #%10100001
0CA69 13 E1                         .db #$13, #%11100001
0CA6B 17 C1                         .db #$17, #%11000001
0CA6D 30 C1                         .db #$30, #%11000001
0CA6F 34 C1                         .db #$34, #%11000001
0CA71 38 A1                         .db #$38, #%10100001
0CA73 50 E1                         .db #$50, #%11100001
0CA75 55 81                         .db #$55, #%10000001
0CA77 57 C1                         .db #$57, #%11000001
0CA79 70 C1                         .db #$70, #%11000001
0CA7B 73 A1                         .db #$73, #%10100001
0CA7D 76 E1                         .db #$76, #%11100001
0CA7F 90 E1                         .db #$90, #%11100001
0CA81 95 81                         .db #$95, #%10000001
0CA83 97 C1                         .db #$97, #%11000001
0CA85 B0 C1                         .db #$B0, #%11000001
0CA87 B4 C1                         .db #$B4, #%11000001
0CA89 B8 A1                         .db #$B8, #%10100001
0CA8B D0 A1                         .db #$D0, #%10100001
0CA8D D3 E1                         .db #$D3, #%11100001
0CA8F D7 C1                         .db #$D7, #%11000001
0CA91 FF                            .db #LEVEL_END
0CA92                           
0CA92                           lvl_layout_04:
0CA92 00 4C                         .db #$00, #%01001100
0CA94 40 6C                         .db #$40, #%01101100
0CA96 80 4C                         .db #$80, #%01001100
0CA98 81 AC                         .db #$81, #%10101100
0CA9A C1 2C                         .db #$C1, #%00101100
0CA9C 02 6C                         .db #$02, #%01101100
0CA9E 42 CC                         .db #$42, #%11001100
0CAA0 62 EC                         .db #$62, #%11101100
0CAA2 A2 CC                         .db #$A2, #%11001100
0CAA4 C3 CC                         .db #$C3, #%11001100
0CAA6 04 4C                         .db #$04, #%01001100
0CAA8 84 2C                         .db #$84, #%00101100
0CAAA 25 AC                         .db #$25, #%10101100
0CAAC 85 AC                         .db #$85, #%10101100
0CAAE 06 AC                         .db #$06, #%10101100
0CAB0 36 CC                         .db #$36, #%11001100
0CAB2 56 CC                         .db #$56, #%11001100
0CAB4 66 EC                         .db #$66, #%11101100
0CAB6 96 6C                         .db #$96, #%01101100
0CAB8 C7 AC                         .db #$C7, #%10101100
0CABA 08 2C                         .db #$08, #%00101100
0CABC 78 6C                         .db #$78, #%01101100
0CABE D8 0C                         .db #$D8, #%00001100
0CAC0 30 A1                         .db #$30, #%10100001
0CAC2 B0 21                         .db #$B0, #%00100001
0CAC4 01 41                         .db #$01, #%01000001
0CAC6 41 61                         .db #$41, #%01100001
0CAC8 91 A1                         .db #$91, #%10100001
0CACA A1 21                         .db #$A1, #%00100001
0CACC 52 C1                         .db #$52, #%11000001
0CACE 72 E1                         .db #$72, #%11100001
0CAD0 B2 C1                         .db #$B2, #%11000001
0CAD2 C2 21                         .db #$C2, #%00100001
0CAD4 03 41                         .db #$03, #%01000001
0CAD6 33 C1                         .db #$33, #%11000001
0CAD8 83 21                         .db #$83, #%00100001
0CADA D3 E1                         .db #$D3, #%11100001
0CADC 05 21                         .db #$05, #%00100001
0CADE 45 E1                         .db #$45, #%11100001
0CAE0 A5 21                         .db #$A5, #%00100001
0CAE2 16 A1                         .db #$16, #%10100001
0CAE4 76 A1                         .db #$76, #%10100001
0CAE6 27 A1                         .db #$27, #%10100001
0CAE8 57 01                         .db #$57, #%00000001
0CAEA 87 41                         .db #$87, #%01000001
0CAEC B7 A1                         .db #$B7, #%10100001
0CAEE 19 21                         .db #$19, #%00100001
0CAF0 39 41                         .db #$39, #%01000001
0CAF2 89 41                         .db #$89, #%01000001
0CAF4 C9 21                         .db #$C9, #%00100001
0CAF6 D0 1A                         .db #$D0, #%00011010
0CAF8 55 1A                         .db #$55, #%00011010
0CAFA 95 1A                         .db #$95, #%00011010
0CAFC D7 1A                         .db #$D7, #%00011010
0CAFE 09 1A                         .db #$09, #%00011010
0CB00 79 1A                         .db #$79, #%00011010
0CB02 FF                            .db #LEVEL_END
0CB03                           
0CB03                           lvl_layout_05:
0CB03 40 0A                         .db #$40, #%00001010
0CB05 70 1A                         .db #$70, #%00011010
0CB07 B0 42                         .db #$B0, #%01000010
0CB09 41 A7                         .db #$41, #%10100111
0CB0B B1 22                         .db #$B1, #%00100010
0CB0D D1 15                         .db #$D1, #%00010101
0CB0F 22 0A                         .db #$22, #%00001010
0CB11 52 05                         .db #$52, #%00000101
0CB13 B2 42                         .db #$B2, #%01000010
0CB15 03 27                         .db #$03, #%00100111
0CB17 33 67                         .db #$33, #%01100111
0CB19 73 67                         .db #$73, #%01100111
0CB1B B3 47                         .db #$B3, #%01000111
0CB1D 05 E5                         .db #$05, #%11100101
0CB1F 25 A5                         .db #$25, #%10100101
0CB21 35 25                         .db #$35, #%00100101
0CB23 65 45                         .db #$65, #%01000101
0CB25 A5 45                         .db #$A5, #%01000101
0CB27 46 E5                         .db #$46, #%11100101
0CB29 66 E5                         .db #$66, #%11100101
0CB2B 86 E5                         .db #$86, #%11100101
0CB2D A6 E2                         .db #$A6, #%11100010
0CB2F C6 E5                         .db #$C6, #%11100101
0CB31 27 25                         .db #$27, #%00100101
0CB33 77 05                         .db #$77, #%00000101
0CB35 B7 02                         .db #$B7, #%00000010
0CB37 09 05                         .db #$09, #%00000101
0CB39 79 05                         .db #$79, #%00000101
0CB3B B9 02                         .db #$B9, #%00000010
0CB3D FF                            .db #LEVEL_END
0CB3E                           
0CB3E                           lvl_layout_06:
0CB3E 00 03                         .db #$00, #%00000011
0CB40 20 03                         .db #$20, #%00000011
0CB42 40 03                         .db #$40, #%00000011
0CB44 A0 03                         .db #$A0, #%00000011
0CB46 C0 03                         .db #$C0, #%00000011
0CB48 11 03                         .db #$11, #%00000011
0CB4A 31 03                         .db #$31, #%00000011
0CB4C 51 03                         .db #$51, #%00000011
0CB4E 91 03                         .db #$91, #%00000011
0CB50 B1 03                         .db #$B1, #%00000011
0CB52 D1 03                         .db #$D1, #%00000011
0CB54 02 03                         .db #$02, #%00000011
0CB56 22 03                         .db #$22, #%00000011
0CB58 42 03                         .db #$42, #%00000011
0CB5A A2 03                         .db #$A2, #%00000011
0CB5C C2 03                         .db #$C2, #%00000011
0CB5E 13 03                         .db #$13, #%00000011
0CB60 33 03                         .db #$33, #%00000011
0CB62 53 03                         .db #$53, #%00000011
0CB64 93 03                         .db #$93, #%00000011
0CB66 B3 03                         .db #$B3, #%00000011
0CB68 D3 03                         .db #$D3, #%00000011
0CB6A 04 03                         .db #$04, #%00000011
0CB6C 24 03                         .db #$24, #%00000011
0CB6E 44 03                         .db #$44, #%00000011
0CB70 A4 03                         .db #$A4, #%00000011
0CB72 C4 03                         .db #$C4, #%00000011
0CB74 15 03                         .db #$15, #%00000011
0CB76 35 03                         .db #$35, #%00000011
0CB78 55 03                         .db #$55, #%00000011
0CB7A 95 03                         .db #$95, #%00000011
0CB7C B5 03                         .db #$B5, #%00000011
0CB7E D5 03                         .db #$D5, #%00000011
0CB80 06 03                         .db #$06, #%00000011
0CB82 26 03                         .db #$26, #%00000011
0CB84 46 03                         .db #$46, #%00000011
0CB86 A6 03                         .db #$A6, #%00000011
0CB88 C6 03                         .db #$C6, #%00000011
0CB8A 17 03                         .db #$17, #%00000011
0CB8C 37 03                         .db #$37, #%00000011
0CB8E 57 03                         .db #$57, #%00000011
0CB90 97 03                         .db #$97, #%00000011
0CB92 B7 03                         .db #$B7, #%00000011
0CB94 D7 03                         .db #$D7, #%00000011
0CB96 08 03                         .db #$08, #%00000011
0CB98 28 03                         .db #$28, #%00000011
0CB9A 48 03                         .db #$48, #%00000011
0CB9C A8 03                         .db #$A8, #%00000011
0CB9E C8 03                         .db #$C8, #%00000011
0CBA0 19 03                         .db #$19, #%00000011
0CBA2 39 03                         .db #$39, #%00000011
0CBA4 59 03                         .db #$59, #%00000011
0CBA6 99 03                         .db #$99, #%00000011
0CBA8 B9 03                         .db #$B9, #%00000011
0CBAA D9 03                         .db #$D9, #%00000011
0CBAC 60 4B                         .db #$60, #%01001011
0CBAE 71 CB                         .db #$71, #%11001011
0CBB0 62 4B                         .db #$62, #%01001011
0CBB2 64 4B                         .db #$64, #%01001011
0CBB4 75 CB                         .db #$75, #%11001011
0CBB6 66 4B                         .db #$66, #%01001011
0CBB8 68 4B                         .db #$68, #%01001011
0CBBA 79 0B                         .db #$79, #%00001011
0CBBC 70 03                         .db #$70, #%00000011
0CBBE 72 03                         .db #$72, #%00000011
0CBC0 74 03                         .db #$74, #%00000011
0CBC2 76 03                         .db #$76, #%00000011
0CBC4 78 03                         .db #$78, #%00000011
0CBC6 FF                            .db #LEVEL_END
0CBC7                           
0CBC7                           lvl_layout_07:
0CBC7 00 11                         .db #$00, #%00010001
0CBC9 01 FA                         .db #$01, #%11111010
0CBCB 12 BA                         .db #$12, #%10111010
0CBCD 23 DA                         .db #$23, #%11011010
0CBCF 34 FA                         .db #$34, #%11111010
0CBD1 05 DA                         .db #$05, #%11011010
0CBD3 15 FA                         .db #$15, #%11111010
0CBD5 45 BA                         .db #$45, #%10111010
0CBD7 56 DA                         .db #$56, #%11011010
0CBD9 27 BA                         .db #$27, #%10111010
0CBDB 67 DA                         .db #$67, #%11011010
0CBDD 38 3A                         .db #$38, #%00111010
0CBDF 78 BA                         .db #$78, #%10111010
0CBE1 09 3A                         .db #$09, #%00111010
0CBE3 39 3A                         .db #$39, #%00111010
0CBE5 89 1A                         .db #$89, #%00011010
0CBE7 B0 01                         .db #$B0, #%00000001
0CBE9 D0 01                         .db #$D0, #%00000001
0CBEB A1 01                         .db #$A1, #%00000001
0CBED C1 11                         .db #$C1, #%00010001
0CBEF B2 01                         .db #$B2, #%00000001
0CBF1 D2 01                         .db #$D2, #%00000001
0CBF3 A3 01                         .db #$A3, #%00000001
0CBF5 C3 01                         .db #$C3, #%00000001
0CBF7 B4 01                         .db #$B4, #%00000001
0CBF9 D4 01                         .db #$D4, #%00000001
0CBFB A5 01                         .db #$A5, #%00000001
0CBFD C5 01                         .db #$C5, #%00000001
0CBFF B6 01                         .db #$B6, #%00000001
0CC01 D6 01                         .db #$D6, #%00000001
0CC03 A7 01                         .db #$A7, #%00000001
0CC05 C7 01                         .db #$C7, #%00000001
0CC07 FF                            .db #LEVEL_END
0CC08                           
0CC08                           lvl_layout_08:
0CC08 40 B5                         .db #$40, #%10110101
0CC0A 31 0D                         .db #$31, #%00001101
0CC0C 61 10                         .db #$61, #%00010000
0CC0E 42 C7                         .db #$42, #%11000111
0CC10 52 67                         .db #$52, #%01100111
0CC12 63 C7                         .db #$63, #%11000111
0CC14 83 E7                         .db #$83, #%11100111
0CC16 05 07                         .db #$05, #%00000111
0CC18 15 3A                         .db #$15, #%00111010
0CC1A 07 63                         .db #$07, #%01100011
0CC1C 27 13                         .db #$27, #%00010011
0CC1E 38 A5                         .db #$38, #%10100101
0CC20 09 14                         .db #$09, #%00010100
0CC22 19 05                         .db #$19, #%00000101
0CC24 D0 E0                         .db #$D0, #%11100000
0CC26 C2 A0                         .db #$C2, #%10100000
0CC28 B3 E0                         .db #$B3, #%11100000
0CC2A D5 E0                         .db #$D5, #%11100000
0CC2C C6 E0                         .db #$C6, #%11100000
0CC2E B0 C4                         .db #$B0, #%11000100
0CC30 C0 A4                         .db #$C0, #%10100100
0CC32 D1 A4                         .db #$D1, #%10100100
0CC34 C4 24                         .db #$C4, #%00100100
0CC36 C5 04                         .db #$C5, #%00000100
0CC38 B7 44                         .db #$B7, #%01000100
0CC3A B8 A4                         .db #$B8, #%10100100
0CC3C D9 05                         .db #$D9, #%00000101
0CC3E FF                            .db #LEVEL_END
0CC3F                           
0CC3F                           lvl_layout_09:
0CC3F 81 04                         .db #$81, #%00000100
0CC41 D1 04                         .db #$D1, #%00000100
0CC43 32 C4                         .db #$32, #%11000100
0CC45 A2 C4                         .db #$A2, #%11000100
0CC47 C2 24                         .db #$C2, #%00100100
0CC49 13 24                         .db #$13, #%00100100
0CC4B 53 04                         .db #$53, #%00000100
0CC4D C3 27                         .db #$C3, #%00100111
0CC4F 15 6C                         .db #$15, #%01101100
0CC51 55 6C                         .db #$55, #%01101100
0CC53 95 6C                         .db #$95, #%01101100
0CC55 D5 0C                         .db #$D5, #%00001100
0CC57 27 C7                         .db #$27, #%11000111
0CC59 47 C7                         .db #$47, #%11000111
0CC5B 67 C7                         .db #$67, #%11000111
0CC5D 87 C7                         .db #$87, #%11000111
0CC5F A7 C7                         .db #$A7, #%11000111
0CC61 C7 C7                         .db #$C7, #%11000111
0CC63 08 13                         .db #$08, #%00010011
0CC65 28 15                         .db #$28, #%00010101
0CC67 48 12                         .db #$48, #%00010010
0CC69 68 15                         .db #$68, #%00010101
0CC6B 88 11                         .db #$88, #%00010001
0CC6D A8 10                         .db #$A8, #%00010000
0CC6F C8 14                         .db #$C8, #%00010100
0CC71 09 07                         .db #$09, #%00000111
0CC73 19 03                         .db #$19, #%00000011
0CC75 39 05                         .db #$39, #%00000101
0CC77 59 02                         .db #$59, #%00000010
0CC79 79 05                         .db #$79, #%00000101
0CC7B 99 01                         .db #$99, #%00000001
0CC7D B9 00                         .db #$B9, #%00000000
0CC7F D9 04                         .db #$D9, #%00000100
0CC81 FF                            .db #LEVEL_END
0CC82                           
0CC82                           lvl_layout_10:
0CC82 00 02                         .db #$00, #%00000010
0CC84 10 C9                         .db #$10, #%11001001
0CC86 50 C9                         .db #$50, #%11001001
0CC88 90 C9                         .db #$90, #%11001001
0CC8A D0 C9                         .db #$D0, #%11001001
0CC8C 31 C9                         .db #$31, #%11001001
0CC8E 71 C9                         .db #$71, #%11001001
0CC90 B1 C9                         .db #$B1, #%11001001
0CC92 13 C9                         .db #$13, #%11001001
0CC94 53 C9                         .db #$53, #%11001001
0CC96 93 C9                         .db #$93, #%11001001
0CC98 D3 C9                         .db #$D3, #%11001001
0CC9A 34 C9                         .db #$34, #%11001001
0CC9C 74 C9                         .db #$74, #%11001001
0CC9E B4 C9                         .db #$B4, #%11001001
0CCA0 16 C9                         .db #$16, #%11001001
0CCA2 56 C9                         .db #$56, #%11001001
0CCA4 96 C9                         .db #$96, #%11001001
0CCA6 D6 C9                         .db #$D6, #%11001001
0CCA8 37 C9                         .db #$37, #%11001001
0CCAA 77 C9                         .db #$77, #%11001001
0CCAC B7 C9                         .db #$B7, #%11001001
0CCAE D8 12                         .db #$D8, #%00010010
0CCB0 FF                            .db #LEVEL_END
0CCB1                           
0CCB1                           lvl_layout_11:
0CCB1 00 65                         .db #$00, #%01100101
0CCB3 40 45                         .db #$40, #%01000101
0CCB5 50 A7                         .db #$50, #%10100111
0CCB7 80 05                         .db #$80, #%00000101
0CCB9 90 A7                         .db #$90, #%10100111
0CCBB A0 65                         .db #$A0, #%01100101
0CCBD 01 43                         .db #$01, #%01000011
0CCBF 31 23                         .db #$31, #%00100011
0CCC1 61 A7                         .db #$61, #%10100111
0CCC3 81 A7                         .db #$81, #%10100111
0CCC5 A1 63                         .db #$A1, #%01100011
0CCC7 02 44                         .db #$02, #%01000100
0CCC9 32 44                         .db #$32, #%01000100
0CCCB 92 04                         .db #$92, #%00000100
0CCCD A2 64                         .db #$A2, #%01100100
0CCCF 03 40                         .db #$03, #%01000000
0CCD1 33 40                         .db #$33, #%01000000
0CCD3 63 A1                         .db #$63, #%10100001
0CCD5 83 A2                         .db #$83, #%10100010
0CCD7 93 00                         .db #$93, #%00000000
0CCD9 A3 60                         .db #$A3, #%01100000
0CCDB 04 41                         .db #$04, #%01000001
0CCDD 34 41                         .db #$34, #%01000001
0CCDF 94 02                         .db #$94, #%00000010
0CCE1 A4 62                         .db #$A4, #%01100010
0CCE3 05 47                         .db #$05, #%01000111
0CCE5 35 67                         .db #$35, #%01100111
0CCE7 75 0A                         .db #$75, #%00001010
0CCE9 85 47                         .db #$85, #%01000111
0CCEB B5 47                         .db #$B5, #%01000111
0CCED 06 E7                         .db #$06, #%11100111
0CCEF 16 5A                         .db #$16, #%01011010
0CCF1 26 11                         .db #$26, #%00010001
0CCF3 46 13                         .db #$46, #%00010011
0CCF5 56 1A                         .db #$56, #%00011010
0CCF7 66 14                         .db #$66, #%00010100
0CCF9 86 10                         .db #$86, #%00010000
0CCFB 96 5C                         .db #$96, #%01011100
0CCFD A6 12                         .db #$A6, #%00010010
0CCFF C6 15                         .db #$C6, #%00010101
0CD01 D6 E7                         .db #$D6, #%11100111
0CD03 FF                            .db #LEVEL_END
0CD04                           
0CD04                           lvl_layout_12:
0CD04 00 00                         .db #$00, #%00000000
0CD06 50 C0                         .db #$50, #%11000000
0CD08 80 00                         .db #$80, #%00000000
0CD0A 61 00                         .db #$61, #%00000000
0CD0C 22 C0                         .db #$22, #%11000000
0CD0E 82 E0                         .db #$82, #%11100000
0CD10 C2 E0                         .db #$C2, #%11100000
0CD12 A3 20                         .db #$A3, #%00100000
0CD14 C3 10                         .db #$C3, #%00010000
0CD16 04 00                         .db #$04, #%00000000
0CD18 54 20                         .db #$54, #%00100000
0CD1A 15 0A                         .db #$15, #%00001010
0CD1C 25 C0                         .db #$25, #%11000000
0CD1E 55 E0                         .db #$55, #%11100000
0CD20 86 20                         .db #$86, #%00100000
0CD22 C6 E0                         .db #$C6, #%11100000
0CD24 C7 A0                         .db #$C7, #%10100000
0CD26 88 00                         .db #$88, #%00000000
0CD28 59 00                         .db #$59, #%00000000
0CD2A 89 20                         .db #$89, #%00100000
0CD2C D9 1A                         .db #$D9, #%00011010
0CD2E FF                            .db #LEVEL_END
0CD2F                           
0CD2F                           lvl_layout_13:
0CD2F 10 E0                         .db #$10, #%11100000
0CD31 20 E0                         .db #$20, #%11100000
0CD33 30 E0                         .db #$30, #%11100000
0CD35 40 40                         .db #$40, #%01000000
0CD37 80 60                         .db #$80, #%01100000
0CD39 C0 E0                         .db #$C0, #%11100000
0CD3B D0 E0                         .db #$D0, #%11100000
0CD3D 41 40                         .db #$41, #%01000000
0CD3F 71 60                         .db #$71, #%01100000
0CD41 52 60                         .db #$52, #%01100000
0CD43 A2 20                         .db #$A2, #%00100000
0CD45 43 60                         .db #$43, #%01100000
0CD47 83 60                         .db #$83, #%01100000
0CD49 14 74                         .db #$14, #%01110100
0CD4B 54 74                         .db #$54, #%01110100
0CD4D 94 74                         .db #$94, #%01110100
0CD4F D4 14                         .db #$D4, #%00010100
0CD51 15 0D                         .db #$15, #%00001101
0CD53 55 0D                         .db #$55, #%00001101
0CD55 95 0D                         .db #$95, #%00001101
0CD57 D5 0D                         .db #$D5, #%00001101
0CD59 26 0D                         .db #$26, #%00001101
0CD5B 46 0D                         .db #$46, #%00001101
0CD5D 66 0D                         .db #$66, #%00001101
0CD5F 86 0D                         .db #$86, #%00001101
0CD61 A6 0D                         .db #$A6, #%00001101
0CD63 C6 0D                         .db #$C6, #%00001101
0CD65 07 10                         .db #$07, #%00010000
0CD67 37 0D                         .db #$37, #%00001101
0CD69 77 0D                         .db #$77, #%00001101
0CD6B B7 0D                         .db #$B7, #%00001101
0CD6D 28 0D                         .db #$28, #%00001101
0CD6F 48 0D                         .db #$48, #%00001101
0CD71 68 0D                         .db #$68, #%00001101
0CD73 88 0D                         .db #$88, #%00001101
0CD75 A8 0D                         .db #$A8, #%00001101
0CD77 C8 0D                         .db #$C8, #%00001101
0CD79 19 0D                         .db #$19, #%00001101
0CD7B 59 0D                         .db #$59, #%00001101
0CD7D 99 0D                         .db #$99, #%00001101
0CD7F D9 0D                         .db #$D9, #%00001101
0CD81 FF                            .db #LEVEL_END
0CD82                           
0CD82                           lvl_layout_14:
0CD82 00 67                         .db #$00, #%01100111
0CD84 40 67                         .db #$40, #%01100111
0CD86 80 67                         .db #$80, #%01100111
0CD88 C0 27                         .db #$C0, #%00100111
0CD8A 01 27                         .db #$01, #%00100111
0CD8C 31 C7                         .db #$31, #%11000111
0CD8E 51 C7                         .db #$51, #%11000111
0CD90 71 C7                         .db #$71, #%11000111
0CD92 91 C7                         .db #$91, #%11000111
0CD94 B1 C7                         .db #$B1, #%11000111
0CD96 D1 07                         .db #$D1, #%00000111
0CD98 02 E7                         .db #$02, #%11100111
0CD9A 06 E7                         .db #$06, #%11100111
0CD9C 13 07                         .db #$13, #%00000111
0CD9E D3 07                         .db #$D3, #%00000111
0CDA0 15 07                         .db #$15, #%00000111
0CDA2 35 07                         .db #$35, #%00000111
0CDA4 55 07                         .db #$55, #%00000111
0CDA6 75 07                         .db #$75, #%00000111
0CDA8 95 07                         .db #$95, #%00000111
0CDAA B5 07                         .db #$B5, #%00000111
0CDAC D5 07                         .db #$D5, #%00000111
0CDAE 17 07                         .db #$17, #%00000111
0CDB0 37 C7                         .db #$37, #%11000111
0CDB2 57 C7                         .db #$57, #%11000111
0CDB4 77 C7                         .db #$77, #%11000111
0CDB6 97 C7                         .db #$97, #%11000111
0CDB8 B7 C7                         .db #$B7, #%11000111
0CDBA D7 07                         .db #$D7, #%00000111
0CDBC 19 07                         .db #$19, #%00000111
0CDBE D9 07                         .db #$D9, #%00000111
0CDC0 22 4C                         .db #$22, #%01001100
0CDC2 62 4C                         .db #$62, #%01001100
0CDC4 A2 4C                         .db #$A2, #%01001100
0CDC6 24 0C                         .db #$24, #%00001100
0CDC8 44 0C                         .db #$44, #%00001100
0CDCA 64 0C                         .db #$64, #%00001100
0CDCC 84 0C                         .db #$84, #%00001100
0CDCE A4 0C                         .db #$A4, #%00001100
0CDD0 C4 0C                         .db #$C4, #%00001100
0CDD2 26 0C                         .db #$26, #%00001100
0CDD4 46 0C                         .db #$46, #%00001100
0CDD6 66 0C                         .db #$66, #%00001100
0CDD8 86 0C                         .db #$86, #%00001100
0CDDA A6 0C                         .db #$A6, #%00001100
0CDDC C6 0C                         .db #$C6, #%00001100
0CDDE 28 4C                         .db #$28, #%01001100
0CDE0 68 4C                         .db #$68, #%01001100
0CDE2 A8 4C                         .db #$A8, #%01001100
0CDE4 32 04                         .db #$32, #%00000100
0CDE6 52 04                         .db #$52, #%00000100
0CDE8 72 04                         .db #$72, #%00000100
0CDEA 92 04                         .db #$92, #%00000100
0CDEC B2 04                         .db #$B2, #%00000100
0CDEE 38 04                         .db #$38, #%00000100
0CDF0 58 04                         .db #$58, #%00000100
0CDF2 78 04                         .db #$78, #%00000100
0CDF4 98 04                         .db #$98, #%00000100
0CDF6 B8 04                         .db #$B8, #%00000100
0CDF8 FF                            .db #LEVEL_END
0CDF9                           
0CDF9                           lvl_layout_15:
0CDF9 00 7A                         .db #$00, #%01111010
0CDFB 40 7A                         .db #$40, #%01111010
0CDFD 80 7A                         .db #$80, #%01111010
0CDFF C0 3A                         .db #$C0, #%00111010
0CE01 31 04                         .db #$31, #%00000100
0CE03 51 04                         .db #$51, #%00000100
0CE05 81 04                         .db #$81, #%00000100
0CE07 A1 04                         .db #$A1, #%00000100
0CE09 05 E4                         .db #$05, #%11100100
0CE0B 15 64                         .db #$15, #%01100100
0CE0D 55 64                         .db #$55, #%01100100
0CE0F 95 64                         .db #$95, #%01100100
0CE11 D5 E4                         .db #$D5, #%11100100
0CE13 26 04                         .db #$26, #%00000100
0CE15 46 44                         .db #$46, #%01000100
0CE17 76 64                         .db #$76, #%01100100
0CE19 C6 04                         .db #$C6, #%00000100
0CE1B 17 04                         .db #$17, #%00000100
0CE1D 37 64                         .db #$37, #%01100100
0CE1F 77 44                         .db #$77, #%01000100
0CE21 B7 04                         .db #$B7, #%00000100
0CE23 18 64                         .db #$18, #%01100100
0CE25 58 64                         .db #$58, #%01100100
0CE27 98 64                         .db #$98, #%01100100
0CE29 FF                            .db #LEVEL_END
0CE2A                           
0CE2A                           lvl_layout_16:
0CE2A 10 E1                         .db #$10, #%11100001
0CE2C 20 9A                         .db #$20, #%10011010
0CE2E 30 E1                         .db #$30, #%11100001
0CE30 40 E1                         .db #$40, #%11100001
0CE32 50 E1                         .db #$50, #%11100001
0CE34 60 C1                         .db #$60, #%11000001
0CE36 70 E1                         .db #$70, #%11100001
0CE38 80 E1                         .db #$80, #%11100001
0CE3A 90 E1                         .db #$90, #%11100001
0CE3C A0 61                         .db #$A0, #%01100001
0CE3E 21 C1                         .db #$21, #%11000001
0CE40 A1 1A                         .db #$A1, #%00011010
0CE42 B1 41                         .db #$B1, #%01000001
0CE44 A2 E1                         .db #$A2, #%11100001
0CE46 B2 E1                         .db #$B2, #%11100001
0CE48 C2 1A                         .db #$C2, #%00011010
0CE4A D2 E1                         .db #$D2, #%11100001
0CE4C 63 1A                         .db #$63, #%00011010
0CE4E C3 C1                         .db #$C3, #%11000001
0CE50 14 61                         .db #$14, #%01100001
0CE52 54 61                         .db #$54, #%01100001
0CE54 94 C1                         .db #$94, #%11000001
0CE56 15 61                         .db #$15, #%01100001
0CE58 55 41                         .db #$55, #%01000001
0CE5A 85 1A                         .db #$85, #%00011010
0CE5C 16 41                         .db #$16, #%01000001
0CE5E 46 1A                         .db #$46, #%00011010
0CE60 56 61                         .db #$56, #%01100001
0CE62 A6 61                         .db #$A6, #%01100001
0CE64 17 67                         .db #$17, #%01100111
0CE66 57 67                         .db #$57, #%01100111
0CE68 97 67                         .db #$97, #%01100111
0CE6A D7 07                         .db #$D7, #%00000111
0CE6C 28 41                         .db #$28, #%01000001
0CE6E 58 61                         .db #$58, #%01100001
0CE70 A8 41                         .db #$A8, #%01000001
0CE72 18 11                         .db #$18, #%00010001
0CE74 38 11                         .db #$38, #%00010001
0CE76 98 11                         .db #$98, #%00010001
0CE78 B8 11                         .db #$B8, #%00010001
0CE7A D8 11                         .db #$D8, #%00010001
0CE7C 59 09                         .db #$59, #%00001001
0CE7E FF                            .db #LEVEL_END
0CE7F                           
0CE7F                           lvl_layout_17:
0CE7F 10 EA                         .db #$10, #%11101010
0CE81 20 E2                         .db #$20, #%11100010
0CE83 30 62                         .db #$30, #%01100010
0CE85 70 02                         .db #$70, #%00000010
0CE87 80 6A                         .db #$80, #%01101010
0CE89 90 22                         .db #$90, #%00100010
0CE8B 01 AA                         .db #$01, #%10101010
0CE8D 31 6A                         .db #$31, #%01101010
0CE8F 81 2A                         .db #$81, #%00101010
0CE91 A1 02                         .db #$A1, #%00000010
0CE93 C1 02                         .db #$C1, #%00000010
0CE95 D1 0A                         .db #$D1, #%00001010
0CE97 32 EA                         .db #$32, #%11101010
0CE99 42 6A                         .db #$42, #%01101010
0CE9B 62 02                         .db #$62, #%00000010
0CE9D 92 6A                         .db #$92, #%01101010
0CE9F D2 E2                         .db #$D2, #%11100010
0CEA1 43 1A                         .db #$43, #%00011010
0CEA3 53 CA                         .db #$53, #%11001010
0CEA5 73 02                         .db #$73, #%00000010
0CEA7 83 4A                         .db #$83, #%01001010
0CEA9 B3 CA                         .db #$B3, #%11001010
0CEAB C3 EA                         .db #$C3, #%11101010
0CEAD 04 0A                         .db #$04, #%00001010
0CEAF 14 A2                         .db #$14, #%10100010
0CEB1 24 AA                         .db #$24, #%10101010
0CEB3 44 AA                         .db #$44, #%10101010
0CEB5 64 6A                         .db #$64, #%01101010
0CEB7 65 6A                         .db #$65, #%01101010
0CEB9 A5 AA                         .db #$A5, #%10101010
0CEBB 06 EA                         .db #$06, #%11101010
0CEBD 16 62                         .db #$16, #%01100010
0CEBF 66 22                         .db #$66, #%00100010
0CEC1 86 2A                         .db #$86, #%00101010
0CEC3 17 42                         .db #$17, #%01000010
0CEC5 47 12                         .db #$47, #%00010010
0CEC7 57 6A                         .db #$57, #%01101010
0CEC9 97 4A                         .db #$97, #%01001010
0CECB A7 02                         .db #$A7, #%00000010
0CECD 18 02                         .db #$18, #%00000010
0CECF 28 0A                         .db #$28, #%00001010
0CED1 38 22                         .db #$38, #%00100010
0CED3 68 2A                         .db #$68, #%00101010
0CED5 88 62                         .db #$88, #%01100010
0CED7 C8 0A                         .db #$C8, #%00001010
0CED9 D8 02                         .db #$D8, #%00000010
0CEDB 19 2A                         .db #$19, #%00101010
0CEDD 39 2A                         .db #$39, #%00101010
0CEDF 69 42                         .db #$69, #%01000010
0CEE1 99 2A                         .db #$99, #%00101010
0CEE3 B9 42                         .db #$B9, #%01000010
0CEE5 FF                            .db #LEVEL_END
0CEE6                           
0CEE6                           lvl_layout_18:
0CEE6 00 12                         .db #$00, #%00010010
0CEE8 40 1A                         .db #$40, #%00011010
0CEEA 50 11                         .db #$50, #%00010001
0CEEC 70 1A                         .db #$70, #%00011010
0CEEE 80 10                         .db #$80, #%00010000
0CEF0 D0 13                         .db #$D0, #%00010011
0CEF2 01 1A                         .db #$01, #%00011010
0CEF4 22 15                         .db #$22, #%00010101
0CEF6 A2 1A                         .db #$A2, #%00011010
0CEF8 B2 14                         .db #$B2, #%00010100
0CEFA 03 67                         .db #$03, #%01100111
0CEFC 43 67                         .db #$43, #%01100111
0CEFE 83 67                         .db #$83, #%01100111
0CF00 24 09                         .db #$24, #%00001001
0CF02 74 0D                         .db #$74, #%00001101
0CF04 C4 0A                         .db #$C4, #%00001010
0CF06 05 A7                         .db #$05, #%10100111
0CF08 45 27                         .db #$45, #%00100111
0CF0A 95 27                         .db #$95, #%00100111
0CF0C 16 C7                         .db #$16, #%11000111
0CF0E 36 67                         .db #$36, #%01100111
0CF10 86 67                         .db #$86, #%01100111
0CF12 D6 07                         .db #$D6, #%00000111
0CF14 07 A3                         .db #$07, #%10100011
0CF16 27 23                         .db #$27, #%00100011
0CF18 47 C7                         .db #$47, #%11000111
0CF1A 57 A0                         .db #$57, #%10100000
0CF1C 67 A7                         .db #$67, #%10100111
0CF1E 77 20                         .db #$77, #%00100000
0CF20 97 C7                         .db #$97, #%11000111
0CF22 A7 A4                         .db #$A7, #%10100100
0CF24 B7 A7                         .db #$B7, #%10100111
0CF26 C7 24                         .db #$C7, #%00100100
0CF28 28 0B                         .db #$28, #%00001011
0CF2A 38 A3                         .db #$38, #%10100011
0CF2C 78 08                         .db #$78, #%00001000
0CF2E 88 A3                         .db #$88, #%10100011
0CF30 C8 0C                         .db #$C8, #%00001100
0CF32 D8 A4                         .db #$D8, #%10100100
0CF34 09 43                         .db #$09, #%01000011
0CF36 59 40                         .db #$59, #%01000000
0CF38 A9 44                         .db #$A9, #%01000100
0CF3A FF                            .db #LEVEL_END
0CF3B                           
0CF3B                           lvl_layout_19:
0CF3B 11 A8                         .db #$11, #%10101000
0CF3D 21 68                         .db #$21, #%01101000
0CF3F 81 28                         .db #$81, #%00101000
0CF41 B1 48                         .db #$B1, #%01001000
0CF43 22 48                         .db #$22, #%01001000
0CF45 62 68                         .db #$62, #%01101000
0CF47 B2 28                         .db #$B2, #%00101000
0CF49 23 28                         .db #$23, #%00101000
0CF4B 83 28                         .db #$83, #%00101000
0CF4D B3 28                         .db #$B3, #%00101000
0CF4F 04 E8                         .db #$04, #%11101000
0CF51 24 08                         .db #$24, #%00001000
0CF53 44 08                         .db #$44, #%00001000
0CF55 64 E8                         .db #$64, #%11101000
0CF57 84 E8                         .db #$84, #%11101000
0CF59 C4 A8                         .db #$C4, #%10101000
0CF5B D4 E8                         .db #$D4, #%11101000
0CF5D 15 48                         .db #$15, #%01001000
0CF5F 55 C8                         .db #$55, #%11001000
0CF61 75 C8                         .db #$75, #%11001000
0CF63 A5 08                         .db #$A5, #%00001000
0CF65 36 08                         .db #$36, #%00001000
0CF67 B6 08                         .db #$B6, #%00001000
0CF69 27 48                         .db #$27, #%01001000
0CF6B 97 28                         .db #$97, #%00101000
0CF6D C7 08                         .db #$C7, #%00001000
0CF6F 09 61                         .db #$09, #%01100001
0CF71 19 11                         .db #$19, #%00010001
0CF73 49 61                         .db #$49, #%01100001
0CF75 89 31                         .db #$89, #%00110001
0CF77 A9 61                         .db #$A9, #%01100001
0CF79 FF                            .db #LEVEL_END
0CF7A                           
0CF7A                           lvl_layout_20:
0CF7A 00 60                         .db #$00, #%01100000
0CF7C 10 1A                         .db #$10, #%00011010
0CF7E 40 A7                         .db #$40, #%10100111
0CF80 50 20                         .db #$50, #%00100000
0CF82 70 1A                         .db #$70, #%00011010
0CF84 80 40                         .db #$80, #%01000000
0CF86 B0 1A                         .db #$B0, #%00011010
0CF88 C0 20                         .db #$C0, #%00100000
0CF8A 01 40                         .db #$01, #%01000000
0CF8C 31 1A                         .db #$31, #%00011010
0CF8E A1 40                         .db #$A1, #%01000000
0CF90 D1 1A                         .db #$D1, #%00011010
0CF92 43 67                         .db #$43, #%01100111
0CF94 83 47                         .db #$83, #%01000111
0CF96 44 A7                         .db #$44, #%10100111
0CF98 54 25                         .db #$54, #%00100101
0CF9A 94 08                         .db #$94, #%00001000
0CF9C A4 A7                         .db #$A4, #%10100111
0CF9E 55 05                         .db #$55, #%00000101
0CFA0 65 08                         .db #$65, #%00001000
0CFA2 06 27                         .db #$06, #%00100111
0CFA4 36 67                         .db #$36, #%01100111
0CFA6 76 28                         .db #$76, #%00101000
0CFA8 A6 27                         .db #$A6, #%00100111
0CFAA D6 07                         .db #$D6, #%00000111
0CFAC A7 A7                         .db #$A7, #%10100111
0CFAE 08 60                         .db #$08, #%01100000
0CFB0 09 60                         .db #$09, #%01100000
0CFB2 18 A7                         .db #$18, #%10100111
0CFB4 48 A7                         .db #$48, #%10100111
0CFB6 58 47                         .db #$58, #%01000111
0CFB8 88 27                         .db #$88, #%00100111
0CFBA B8 20                         .db #$B8, #%00100000
0CFBC D8 1A                         .db #$D8, #%00011010
0CFBE 59 15                         .db #$59, #%00010101
0CFC0 69 60                         .db #$69, #%01100000
0CFC2 A9 60                         .db #$A9, #%01100000
0CFC4 FF                            .db #LEVEL_END
0CFC5                           
0CFC5                           lvl_layout_21:
0CFC5 00 13                         .db #$00, #%00010011
0CFC7 10 11                         .db #$10, #%00010001
0CFC9 20 67                         .db #$20, #%01100111
0CFCB 60 67                         .db #$60, #%01100111
0CFCD A0 47                         .db #$A0, #%01000111
0CFCF D0 15                         .db #$D0, #%00010101
0CFD1 32 63                         .db #$32, #%01100011
0CFD3 72 05                         .db #$72, #%00000101
0CFD5 82 43                         .db #$82, #%01000011
0CFD7 B2 43                         .db #$B2, #%01000011
0CFD9 33 03                         .db #$33, #%00000011
0CFDB 43 2A                         .db #$43, #%00101010
0CFDD 63 7A                         .db #$63, #%01111010
0CFDF 73 2A                         .db #$73, #%00101010
0CFE1 A3 7A                         .db #$A3, #%01111010
0CFE3 34 63                         .db #$34, #%01100011
0CFE5 74 63                         .db #$74, #%01100011
0CFE7 B4 43                         .db #$B4, #%01000011
0CFE9 06 63                         .db #$06, #%01100011
0CFEB 46 63                         .db #$46, #%01100011
0CFED 86 63                         .db #$86, #%01100011
0CFEF C6 C3                         .db #$C6, #%11000011
0CFF1 07 7A                         .db #$07, #%01111010
0CFF3 47 7A                         .db #$47, #%01111010
0CFF5 67 0A                         .db #$67, #%00001010
0CFF7 87 7A                         .db #$87, #%01111010
0CFF9 08 13                         .db #$08, #%00010011
0CFFB 18 43                         .db #$18, #%01000011
0CFFD 48 63                         .db #$48, #%01100011
0CFFF 88 63                         .db #$88, #%01100011
0D001 FF                            .db #LEVEL_END
0D002                           
0D002                           lvl_layout_22:
0D002 00 7A                         .db #$00, #%01111010
0D004 40 7A                         .db #$40, #%01111010
0D006 80 7A                         .db #$80, #%01111010
0D008 C0 3A                         .db #$C0, #%00111010
0D00A 13 67                         .db #$13, #%01100111
0D00C 83 A7                         .db #$83, #%10100111
0D00E B3 07                         .db #$B3, #%00000111
0D010 14 07                         .db #$14, #%00000111
0D012 44 07                         .db #$44, #%00000111
0D014 A4 07                         .db #$A4, #%00000111
0D016 15 A5                         .db #$15, #%10100101
0D018 45 A5                         .db #$45, #%10100101
0D01A 85 25                         .db #$85, #%00100101
0D01C 86 05                         .db #$86, #%00000101
0D01E A6 05                         .db #$A6, #%00000101
0D020 17 11                         .db #$17, #%00010001
0D022 47 A1                         .db #$47, #%10100001
0D024 87 A1                         .db #$87, #%10100001
0D026 B7 A1                         .db #$B7, #%10100001
0D028 18 41                         .db #$18, #%01000001
0D02A 68 01                         .db #$68, #%00000001
0D02C D8 01                         .db #$D8, #%00000001
0D02E FF                            .db #LEVEL_END
0D02F                           
0D02F                           lvl_layout_23:
0D02F 00 71                         .db #$00, #%01110001
0D031 40 11                         .db #$40, #%00010001
0D033 50 43                         .db #$50, #%01000011
0D035 80 D1                         .db #$80, #%11010001
0D037 90 E3                         .db #$90, #%11100011
0D039 A0 63                         .db #$A0, #%01100011
0D03B 01 63                         .db #$01, #%01100011
0D03D 41 63                         .db #$41, #%01100011
0D03F A1 63                         .db #$A1, #%01100011
0D041 02 63                         .db #$02, #%01100011
0D043 42 63                         .db #$42, #%01100011
0D045 62 11                         .db #$62, #%00010001
0D047 A2 67                         .db #$A2, #%01100111
0D049 04 63                         .db #$04, #%01100011
0D04B 44 23                         .db #$44, #%00100011
0D04D 64 D1                         .db #$64, #%11010001
0D04F 74 E3                         .db #$74, #%11100011
0D051 84 F1                         .db #$84, #%11110001
0D053 94 E3                         .db #$94, #%11100011
0D055 A4 C7                         .db #$A4, #%11000111
0D057 B4 23                         .db #$B4, #%00100011
0D059 05 63                         .db #$05, #%01100011
0D05B 45 23                         .db #$45, #%00100011
0D05D 06 71                         .db #$06, #%01110001
0D05F 46 11                         .db #$46, #%00010001
0D061 56 E3                         .db #$56, #%11100011
0D063 D6 07                         .db #$D6, #%00000111
0D065 17 D1                         .db #$17, #%11010001
0D067 27 43                         .db #$27, #%01000011
0D069 67 D1                         .db #$67, #%11010001
0D06B A7 C7                         .db #$A7, #%11000111
0D06D C7 A7                         .db #$C7, #%10100111
0D06F D7 B3                         .db #$D7, #%10110011
0D071 28 43                         .db #$28, #%01000011
0D073 78 43                         .db #$78, #%01000011
0D075 29 43                         .db #$29, #%01000011
0D077 79 43                         .db #$79, #%01000011
0D079 FF                           .db #LEVEL_END
0D07A                           
0D07A                           lvl_layout_24:
0D07A 02 67                         .db #$02, #%01100111
0D07C 42 67                         .db #$42, #%01100111
0D07E 82 67                         .db #$82, #%01100111
0D080 05 67                         .db #$05, #%01100111
0D082 45 67                         .db #$45, #%01100111
0D084 85 67                         .db #$85, #%01100111
0D086 08 67                         .db #$08, #%01100111
0D088 48 67                         .db #$48, #%01100111
0D08A 88 67                         .db #$88, #%01100111
0D08C 30 E7                         .db #$30, #%11100111
0D08E 70 E7                         .db #$70, #%11100111
0D090 B0 E7                         .db #$B0, #%11100111
0D092 34 E7                         .db #$34, #%11100111
0D094 74 E7                         .db #$74, #%11100111
0D096 B4 E7                         .db #$B4, #%11100111
0D098 20 13                         .db #$20, #%00010011
0D09A 40 10                         .db #$40, #%00010000
0D09C 80 02                         .db #$80, #%00000010
0D09E 41 05                         .db #$41, #%00000101
0D0A0 B1 09                         .db #$B1, #%00001001
0D0A2 02 09                         .db #$02, #%00001001
0D0A4 52 0C                         .db #$52, #%00001100
0D0A6 13 11                         .db #$13, #%00010001
0D0A8 33 04                         .db #$33, #%00000100
0D0AA 74 0C                         .db #$74, #%00001100
0D0AC B4 08                         .db #$B4, #%00001000
0D0AE 15 09                         .db #$15, #%00001001
0D0B0 55 0C                         .db #$55, #%00001100
0D0B2 95 0C                         .db #$95, #%00001100
0D0B4 47 03                         .db #$47, #%00000011
0D0B6 A7 12                         .db #$A7, #%00010010
0D0B8 18 15                         .db #$18, #%00010101
0D0BA 09 05                         .db #$09, #%00000101
0D0BC 19 03                         .db #$19, #%00000011
0D0BE FF                            .db #LEVEL_END
0D0BF                           
0D0BF                           lvl_layout_25:
0D0BF 00 12                         .db #$00, #%00010010
0D0C1 10 63                         .db #$10, #%01100011
0D0C3 60 63                         .db #$60, #%01100011
0D0C5 A0 07                         .db #$A0, #%00000111
0D0C7 01 11                         .db #$01, #%00010001
0D0C9 A1 02                         .db #$A1, #%00000010
0D0CB 02 67                         .db #$02, #%01100111
0D0CD 42 07                         .db #$42, #%00000111
0D0CF 62 67                         .db #$62, #%01100111
0D0D1 A2 C7                         .db #$A2, #%11000111
0D0D3 03 61                         .db #$03, #%01100001
0D0D5 43 01                         .db #$43, #%00000001
0D0D7 63 61                         .db #$63, #%01100001
0D0D9 A6 E7                         .db #$A6, #%11100111
0D0DB B6 47                         .db #$B6, #%01000111
0D0DD C6 01                         .db #$C6, #%00000001
0D0DF B7 42                         .db #$B7, #%01000010
0D0E1 B8 42                         .db #$B8, #%01000010
0D0E3 C8 0A                         .db #$C8, #%00001010
0D0E5 09 7A                         .db #$09, #%01111010
0D0E7 49 7A                         .db #$49, #%01111010
0D0E9 89 3A                         .db #$89, #%00111010
0D0EB B9 42                         .db #$B9, #%01000010
0D0ED FF                            .db #LEVEL_END
0D0EE                           
0D0EE                           ;; Level layout address pointers
0D0EE                           tbl_lvl_layout_hi:
0D0EE CA CA CA CA CB                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D0F3 CB CB CC CC CC                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D0F8 CC CD CD CD CD                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D0FD CE CE CE CF CF                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D102 CF D0 D0 D0 D0                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D107                           
0D107                           tbl_lvl_layout_lo:
0D107 0F 2A 5F 92 03                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D10C 3E C7 08 3F 82                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D111 B1 04 2F 82 F9                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D116 2A 7F E6 3B 7A                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D11B C5 02 2F 7A BF                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D120                           
0D120                           ;; Ball start position (#$YX)
0D120                           tbl_lvl_ball_startpos:
0D120 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D125 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D12A 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D12F 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D134 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D139                               
0D139                           ;; Ball start direction, color and tile score
0D139                           ;; #% ccc v tttt
0D139                           ;;    ||| | ++++-- tile score
0D139                           ;;    ||| +------- vertical direction, up (0) or down
0D139                           ;;    +++--------- color (CBRYGM)
0D139                           tbl_lvl_ball_init:
0D139 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D13E 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D143 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D148 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D14D 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D152                           
0D152                           
0D152                           
0D152                           ;; Helper table to multiply values by 64
0D152                           tbl_Times64:
0D152 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D156                           
0D156                           
0D156                           ;; Metatile ID to CHR data mapper
0D156                           tbl_GametileTopLeft:
0D156 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D160                           
0D160                           tbl_GametileTopRight:
0D160 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D16A                           
0D16A                           tbl_GametileBottomLeft:
0D16A 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D174                           
0D174                           tbl_GametileBottomRight:
0D174 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D17E                           
0D17E                           ;; Metatile ID to RAM byte data mapper
0D17E                           tbl_GameTileRamByte:
0D17E 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D183                           
0D183                           ;; HUD text data
0D183                           tbl_HudText:
0D183 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D18B 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D192 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D19A 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D19F                           
0D19F                           ;; NMI handler
0D19F                           NMI:
0D19F                               .include "interrupt/nmi.asm"
0D19F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D19F                           ;;
0D19F                           ;; include/nmi.asm
0D19F                           ;;
0D19F                           ;; Non-maskable interrupt script. This script is being executed
0D19F                           ;; when vBlank hits.
0D19F                           ;;
0D19F                           ;;
0D19F                           
0D19F                               ;; Preserve accumulator through stack
0D19F 48                            PHA
0D1A0                           
0D1A0                               ;; Should NMI be skipped?
0D1A0 A5 13                         LDA skip_nmi
0D1A2 F0 03                         BEQ +
0D1A4 4C 32 D2                          JMP +skip_nmi
0D1A7                               +
0D1A7                           
0D1A7                               ;; When in NMI, skip additional NMI requests
0D1A7 A9 01                         LDA #$01
0D1A9 85 13                         STA skip_nmi
0D1AB                           
0D1AB                               ;; Preserve X, Y, and PC through stack
0D1AB 8A                            TXA
0D1AC 48                            PHA
0D1AD 98                            TYA
0D1AE 48                            PHA
0D1AF 08                            PHP
0D1B0                               
0D1B0                               ;; Check forced NMI skip
0D1B0 A5 14                         LDA force_skip_nmi
0D1B2 F0 03                         BEQ +
0D1B4 4C 23 D2                          JMP +force_skip_nmi
0D1B7                               +
0D1B7                           
0D1B7                               ;; Update PPU mask
0D1B7                               ;LDA #$00
0D1B7                               ;STA PPU_CTRL
0D1B7 A5 12                         LDA soft_ppu_mask
0D1B9 8D 01 20                      STA PPU_MASK
0D1BC                               
0D1BC                               
0D1BC                               ;; Additional PPU updates go here
0D1BC                               .include "game/test/tile_update_nmi.asm"
0D1BC                           
0D1BC                               ;; Check if ppu_buffer needs updating
0D1BC A5 2F                         LDA ppu_buffer_update
0D1BE D0 03                         BNE +
0D1C0 4C 02 D2                          JMP +no_ppu_buffer_update
0D1C3                               +
0D1C3                           
0D1C3                               ;; Reset ppu control register and mask
0D1C3 A2 00                         LDX #$00
0D1C5 8E 00 20                      STX PPU_CTRL
0D1C8 8E 01 20                      STX PPU_MASK
0D1CB                           
0D1CB                               ;; Set up loop
0D1CB                               -
0D1CB                                   ;; Reset hi/lo latch
0D1CB 2C 02 20                          BIT PPU_STATUS
0D1CE                           
0D1CE                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D1CE BD 00 03                          LDA ppu_buffer,x
0D1D1 8D 06 20                          STA PPU_ADDR
0D1D4 E8                                INX
0D1D5 BD 00 03                          LDA ppu_buffer,x
0D1D8 8D 06 20                          STA PPU_ADDR
0D1DB                           
0D1DB                                   ;; Write ppu_buffer data to PPU_ADDR
0D1DB E8                                INX
0D1DC BD 00 03                          LDA ppu_buffer,x
0D1DF 8D 07 20                          STA PPU_DATA
0D1E2                           
0D1E2                                   ;; Check if updating is done (eg. X is at pointer)
0D1E2 E8                                INX
0D1E3 E4 30                             CPX ppu_buffer_pointer
0D1E5 F0 03                             BEQ +
0D1E7 4C CB D1                      JMP -
0D1EA                           +
0D1EA                           
0D1EA                               ;; Reset ppu buffer update and pointer
0D1EA A9 00                         LDA #$00
0D1EC 85 2F                         STA ppu_buffer_update
0D1EE 85 30                         STA ppu_buffer_pointer
0D1F0                               
0D1F0                               ;; Reset scrolling position
0D1F0 8D 05 20                      STA PPU_SCROLL
0D1F3 8D 05 20                      STA PPU_SCROLL
0D1F6                           
0D1F6                               ;; Restore ppu control register and mask
0D1F6 A9 90                         LDA #%10010000
0D1F8 8D 00 20                      STA PPU_CTRL
0D1FB A5 12                         LDA soft_ppu_mask
0D1FD 8D 01 20                      STA PPU_MASK
0D200 A9 00                         LDA #$00
0D202                           
0D202                           ;; Continue other NMI stuff
0D202                           +no_ppu_buffer_update:
0D202                               .include "game/test/show_animation_nmi.asm"
0D202                               ;; Reset sprite RAM, draw sprites
0D202 8D 03 20                      STA OAM_ADDR
0D205 A9 02                         LDA #$02
0D207 8D 14 40                      STA OAM_DMA
0D20A                           
0D20A A0 04                         LDY #MAX_ANIMATIONS
0D20C A2 00                         LDX #$00
0D20E                               -
0D20E BD 30 03                          LDA explosion_framecounter,x
0D211 F0 03                             BEQ +
0D213 DE 30 03                              DEC explosion_framecounter,x
0D216                                   +
0D216 E8                                INX
0D217 88                                DEY
0D218 F0 03                             BEQ +done        
0D21A 4C 0E D2                      JMP -
0D21D                           +done:
0D21D                               
0D21D A5 33                         LDA nudge_counter
0D21F F0 02                         BEQ +
0D221 C6 33                             DEC nudge_counter
0D223                               +
0D223                           
0D223                           ;; This is what happens when we forced nmi skip
0D223                           +force_skip_nmi:
0D223                           
0D223                               ;; Increase frame counters
0D223 E6 15                         INC frame_counter
0D225                           
0D225                               ;; reset ball_update_position
0D225 A9 00                         LDA #$00
0D227 85 2B                         STA ball_update_position
0D229                           
0D229                               ;; Don't skip next NMI request
0D229 A9 00                         LDA #$00
0D22B 85 13                         STA skip_nmi
0D22D                           
0D22D                               ;; Restore X, Y and PC from stack
0D22D 28                            PLP
0D22E 68                            PLA
0D22F A8                            TAY
0D230 68                            PLA
0D231 AA                            TAX
0D232                           
0D232                           +skip_nmi:
0D232                               ;; Restore accumulator from stack
0D232 68                            PLA
0D233                           
0D233                               ;; Return
0D233 40                            RTI
0D234                           
0D234                           ;; IRQ handler (empty)
0D234                           IRQ:
0D234                               .include "interrupt/irq.asm"
0D234 40                            RTI0D235                           
0D235                           ;; Interrupt vectors
0D235 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 9F D1                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 34 D2                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
