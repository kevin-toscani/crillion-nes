	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$C0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$05
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU Noise registers
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                           
00036                           ;; Background noise variables
00036                           max_noise              .dsb 1
00037                           sweep_noise            .dsb 1
00038                           current_noise          .dsb 1
00039                           noise_counter          .dsb 1
0003A                               0003A                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 9D C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 9D C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 89 C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 A3 CC                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 A0 CC                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 65 C4                      JSR sub_DisableRendering
0C08A 20 FB C6                      JSR sub_JumpToPointer
0C08D 20 79 C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 2D                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C AF C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 32                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 2B                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 90 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 2C                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 27                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 18                            CLC
0C0C7 69 C0                         ADC #BALL_SPEED_LO
0C0C9 85 1A                         STA ball_ypos_lo
0C0CB                           
0C0CB                               ;; update the high byte with carry
0C0CB A5 19                         LDA ball_ypos_hi
0C0CD 69 01                         ADC #BALL_SPEED_HI
0C0CF 85 19                         STA ball_ypos_hi
0C0D1                               
0C0D1                               ;; Check bottom bound
0C0D1 C9 C8                         CMP #BOUND_BOTTOM
0C0D3 90 38                         BCC +checkHorizontalMovement
0C0D5 F0 36                         BEQ +checkHorizontalMovement
0C0D7                           
0C0D7                           
0C0D7                               ;; Change ball direction to "up"
0C0D7 A9 C8                         LDA #BOUND_BOTTOM
0C0D9 38                            SEC
0C0DA E9 01                         SBC #$01
0C0DC 85 19                         STA ball_ypos_hi
0C0DE A9 00                         LDA #$00
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2 A5 2C                         LDA ball_flags
0C0E4 29 EF                         AND #MOVE_BALL_UP
0C0E6 85 2C                         STA ball_flags
0C0E8 4C 0D C1                      JMP +checkHorizontalMovement
0C0EB                           
0C0EB                           
0C0EB                           +moveBallUp:
0C0EB                               ;; update the low byte
0C0EB A5 1A                         LDA ball_ypos_lo
0C0ED 38                            SEC
0C0EE E9 C0                         SBC #BALL_SPEED_LO
0C0F0 85 1A                         STA ball_ypos_lo
0C0F2                           
0C0F2                               ;; update the high byte with carry
0C0F2 A5 19                         LDA ball_ypos_hi
0C0F4 E9 01                         SBC #BALL_SPEED_HI
0C0F6 85 19                         STA ball_ypos_hi
0C0F8                               
0C0F8                               ;; Check top bound
0C0F8 C9 30                         CMP #BOUND_TOP
0C0FA B0 11                         BCS +checkHorizontalMovement
0C0FC                           
0C0FC                               ;; Change ball direction to "down"
0C0FC A9 30                         LDA #BOUND_TOP
0C0FE 18                            CLC
0C0FF 69 01                         ADC #$01
0C101 85 19                         STA ball_ypos_hi
0C103 A9 00                         LDA #$00
0C105 85 1A                         STA ball_ypos_lo
0C107 A5 2C                         LDA ball_flags
0C109 09 10                         ORA #MOVE_BALL_DOWN
0C10B 85 2C                         STA ball_flags
0C10D                           
0C10D                           
0C10D                           +checkHorizontalMovement:
0C10D                           
0C10D                               ;; Check if ball is being nudged
0C10D A5 33                         LDA nudge_counter
0C10F D0 41                         BNE +doneBallMovement
0C111                           
0C111                               ;; Check if left button is held
0C111 A5 0F                         LDA buttons_held
0C113 29 02                         AND #BUTTON_LEFT
0C115 F0 1B                         BEQ +
0C117                                   ;; update the low byte
0C117 A5 18                             LDA ball_xpos_lo
0C119 38                                SEC
0C11A E9 C0                             SBC #BALL_SPEED_LO
0C11C 85 18                             STA ball_xpos_lo
0C11E                           
0C11E                                   ;; update the high byte
0C11E A5 17                             LDA ball_xpos_hi
0C120 E9 01                             SBC #BALL_SPEED_HI
0C122 85 17                             STA ball_xpos_hi
0C124                                   
0C124                                   ;; Check left bound
0C124 C9 10                             CMP #BOUND_LEFT
0C126 B0 2A                             BCS +doneBallMovement
0C128                                   
0C128                                   ;; Set flag to nudge right and set nudge counter
0C128 A5 2C                             LDA ball_flags
0C12A 09 02                             ORA #NUDGE_BALL_RIGHT
0C12C 20 F4 C6                          JSR sub_InitiateNudge
0C12F                           
0C12F 4C 52 C1                          JMP +doneBallMovement        
0C132                               +
0C132                           
0C132                               ;; Check if right button is held
0C132 A5 0F                         LDA buttons_held
0C134 29 01                         AND #BUTTON_RIGHT
0C136 F0 1A                         BEQ +
0C138                                   ;; update the low byte
0C138 A5 18                             LDA ball_xpos_lo
0C13A 18                                CLC
0C13B 69 C0                             ADC #BALL_SPEED_LO
0C13D 85 18                             STA ball_xpos_lo
0C13F                           
0C13F                                   ;; update the high byte
0C13F A5 17                             LDA ball_xpos_hi
0C141 69 01                             ADC #BALL_SPEED_HI
0C143 85 17                             STA ball_xpos_hi     
0C145                           
0C145                                  ;; Check right bound
0C145 C9 E8                             CMP #BOUND_RIGHT
0C147 90 09                             BCC +doneBallMovement
0C149 F0 07                             BEQ +doneBallMovement
0C14B                                   
0C14B                                   ;; Set flag to nudge left and set nudge timer
0C14B A5 2C                             LDA ball_flags
0C14D 29 FD                             AND #NUDGE_BALL_LEFT
0C14F 20 F4 C6                          JSR sub_InitiateNudge
0C152                               +
0C152                           
0C152                           
0C152                           +doneBallMovement:
0C152                           
0C152                               ;; Check nudge
0C152 A5 33                         LDA nudge_counter
0C154 F0 23                         BEQ +doneBallNudging
0C156 A5 2C                             LDA ball_flags
0C158 29 02                             AND #NUDGE_BALL_RIGHT
0C15A F0 10                             BEQ +nudgeBallLeft
0C15C                                   
0C15C                                       ;; update the low byte
0C15C A5 18                                 LDA ball_xpos_lo
0C15E 18                                    CLC
0C15F 69 C0                                 ADC #BALL_SPEED_LO
0C161 85 18                                 STA ball_xpos_lo
0C163                           
0C163                                       ;; update the high byte
0C163 A5 17                                 LDA ball_xpos_hi
0C165 69 01                                 ADC #BALL_SPEED_HI
0C167 85 17                                 STA ball_xpos_hi  
0C169 4C 79 C1                              JMP +doneBallNudging
0C16C                                   +nudgeBallLeft:
0C16C                                   
0C16C                                   ;; update the low byte
0C16C A5 18                             LDA ball_xpos_lo
0C16E 38                                SEC
0C16F E9 C0                             SBC #BALL_SPEED_LO
0C171 85 18                             STA ball_xpos_lo
0C173                           
0C173                                   ;; update the high byte
0C173 A5 17                             LDA ball_xpos_hi
0C175 E9 01                             SBC #BALL_SPEED_HI
0C177 85 17                             STA ball_xpos_hi
0C179                               +doneBallNudging:
0C179                           
0C179                               ;; Don't update position again until next frame
0C179 E6 2B                         INC ball_update_position
0C17B                           
0C17B                               
0C17B                               ;; Do collision detection
0C17B                               .include "game/include/main/collision_detection.asm"
0C17B                           
0C17B                               ;; Get ball's x-left, x-center, x-right position
0C17B A5 17                         LDA ball_xpos_hi
0C17D 18                            CLC
0C17E 69 F0                         ADC #BALL_LEFT_WGA
0C180 85 25                         STA ball_left
0C182 18                            CLC
0C183 69 04                         ADC #BALL_HALF_SIZE
0C185 85 26                         STA ball_center
0C187 18                            CLC
0C188 69 04                         ADC #BALL_HALF_SIZE
0C18A 85 27                         STA ball_right
0C18C                           
0C18C                               ;; Get ball's y-top, y-middle, y-bottom position
0C18C A5 19                         LDA ball_ypos_hi
0C18E 18                            CLC
0C18F 69 D0                         ADC #BALL_TOP_WGA
0C191 85 28                         STA ball_top
0C193 18                            CLC
0C194 69 04                         ADC #BALL_HALF_SIZE
0C196 85 29                         STA ball_middle
0C198 18                            CLC
0C199 69 04                         ADC #BALL_HALF_SIZE
0C19B 85 2A                         STA ball_bottom
0C19D                           
0C19D                           +checkRightCollision:
0C19D                               ;; Check if ball moves right
0C19D                               ;; No need to check nudging here as that will never collide with a tile
0C19D A5 0F                         LDA buttons_held
0C19F 29 01                         AND #BUTTON_RIGHT
0C1A1 F0 1C                         BEQ +checkLeftCollision
0C1A3                           
0C1A3                               ;; Check tile at right position
0C1A3 A5 29                         LDA ball_middle
0C1A5 85 00                         STA temp
0C1A7 A5 27                         LDA ball_right
0C1A9 85 01                         STA temp+1
0C1AB 20 4D C4                      JSR sub_ConvertXYToTileType
0C1AE 29 01                         AND #TILE_IS_SOLID
0C1B0 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1B2                           
0C1B2                               ;; Tile is solid; nudge ball and evaluate tile type
0C1B2 A5 2C                         LDA ball_flags
0C1B4 29 FD                         AND #NUDGE_BALL_LEFT
0C1B6 20 F4 C6                      JSR sub_InitiateNudge
0C1B9 20 A6 C4                      JSR sub_EvaluateTileType
0C1BC 4C DE C1                      JMP +checkTopCollision
0C1BF                           
0C1BF                           +checkLeftCollision:
0C1BF                               ;; Check if ball moves right
0C1BF                               ;; No need to check nudging here as that will never collide with a tile
0C1BF A5 0F                         LDA buttons_held
0C1C1 29 02                         AND #BUTTON_LEFT
0C1C3 F0 19                         BEQ +checkTopCollision
0C1C5                           
0C1C5                               ;; Check tile at right position
0C1C5 A5 29                         LDA ball_middle
0C1C7 85 00                         STA temp
0C1C9 A5 25                         LDA ball_left
0C1CB 85 01                         STA temp+1
0C1CD 20 4D C4                      JSR sub_ConvertXYToTileType
0C1D0 29 01                         AND #TILE_IS_SOLID
0C1D2 F0 0A                         BEQ +checkTopCollision
0C1D4                           
0C1D4                               ;; Tile is solid; nudge ball and evaluate tile type
0C1D4 A5 2C                         LDA ball_flags
0C1D6 09 02                         ORA #NUDGE_BALL_RIGHT
0C1D8 20 F4 C6                      JSR sub_InitiateNudge
0C1DB 20 A6 C4                      JSR sub_EvaluateTileType
0C1DE                               
0C1DE                               
0C1DE                           +checkTopCollision:
0C1DE                               ;; Check if ball moves up
0C1DE A5 2C                         LDA ball_flags
0C1E0 29 10                         AND #BALL_MOVES_DOWN
0C1E2 D0 1B                         BNE +checkBottomCollision
0C1E4                           
0C1E4                               ;; Check tile at top position
0C1E4 A5 28                         LDA ball_top
0C1E6 85 00                         STA temp
0C1E8 A5 26                         LDA ball_center
0C1EA 85 01                         STA temp+1
0C1EC 20 4D C4                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1F3                           
0C1F3                               ;; Tile is solid; move ball down and evaluate tile type
0C1F3 A5 2C                         LDA ball_flags
0C1F5 09 10                         ORA #MOVE_BALL_DOWN
0C1F7 85 2C                         STA ball_flags
0C1F9 20 A6 C4                      JSR sub_EvaluateTileType
0C1FC 4C 17 C2                      JMP +doneCheckingCollision
0C1FF                           
0C1FF                           +checkBottomCollision:
0C1FF                               ;; No movement check needed: since ball is not moving up, it must move down
0C1FF                           
0C1FF                               ;; Check tile at bottom position
0C1FF A5 2A                         LDA ball_bottom
0C201 85 00                         STA temp
0C203 A5 26                         LDA ball_center
0C205 85 01                         STA temp+1
0C207 20 4D C4                      JSR sub_ConvertXYToTileType
0C20A 29 01                         AND #TILE_IS_SOLID
0C20C F0 09                         BEQ +doneCheckingCollision
0C20E                           
0C20E                               ;; Tile is solid; move ball up and evaluate tile type
0C20E A5 2C                         LDA ball_flags
0C210 29 EF                         AND #MOVE_BALL_UP
0C212 85 2C                         STA ball_flags
0C214 20 A6 C4                      JSR sub_EvaluateTileType
0C217                           
0C217                           +doneCheckingCollision:
0C217                           
0C217                           
0C217                               ;; Testinging timed PPU scroll concept
0C217                               .include "game/test/timed_ppuscroll_test.asm"
0C217                           ;; Timed updates (test)
0C217                           
0C217                               ;; If B button is pressed
0C217 A5 10                         LDA buttons_pressed
0C219 29 10                         AND #BUTTON_START
0C21B F0 73                         BEQ +end
0C21D                           
0C21D                               ;; Disable noise channel
0C21D A9 00                         LDA #$00
0C21F 8D 15 40                      STA APU_STATUS
0C222 8D 0C 40                      STA NOISE_VOLUME
0C225                               
0C225                               ;; Set up loop fading
0C225 A9 00                         LDA #$00
0C227 85 07                         STA temp+7
0C229 A0 08                         LDY #$08
0C22B                               -fadeLoop:
0C22B 84 08                             STY temp+8
0C22D                           
0C22D                                   ;; Wait for NMI to pass
0C22D 20 9D C3                          JSR sub_WaitForVBlank
0C230                                   
0C230                                   ;; Now wait for No-sprite 0
0C230                                   -
0C230 AD 02 20                              LDA PPU_STATUS
0C233 29 40                                 AND #SPRITE_0_HIT
0C235 D0 F9                             BNE -
0C237                               
0C237                                   ;; Now wait for Sprite 0
0C237                                   -
0C237 AD 02 20                              LDA PPU_STATUS
0C23A 29 40                                 AND #SPRITE_0_HIT
0C23C F0 F9                             BEQ -
0C23E                                       
0C23E                                   ;; Setup tile row loop
0C23E A0 16                             LDY #22
0C240                                   -tileLoop:
0C240                                   
0C240                                       ;; Disable drawing
0C240 A5 12                                 LDA soft_ppu_mask
0C242 29 F7                                 AND #%11110111
0C244 8D 01 20                              STA PPU_MASK
0C247                                       
0C247                                       ;; Set up scanline loop
0C247 A2 08                                 LDX #$08
0C249                                       -scanlineLoop:
0C249 E4 08                                     CPX temp+8
0C24B D0 0A                                     BNE +wasteTime
0C24D                                           
0C24D                                           ;; Restore drawing
0C24D A5 12                                     LDA soft_ppu_mask
0C24F 09 08                                     ORA #%00001000
0C251 8D 01 20                                  STA PPU_MASK
0C254 4C 5D C2                                  JMP +wasteMoreTime
0C257                           
0C257                                           ;; Waste 12 frames
0C257                                           +wasteTime:
0C257 E6 09                                     INC temp+9   ;+5
0C259 C6 09                                     DEC temp+9   ;+5
0C25B 49 00                                     EOR #$00     ;+2
0C25D                                           
0C25D                                           ;; Waste about 100 frames
0C25D                                           +wasteMoreTime:
0C25D                                           
0C25D 86 01                                     STX temp+1     ;  3 down, 97 to go
0C25F A2 09                                     LDX #$09       ;  5 down, 95 to go
0C261                                           -wasteLoop:
0C261 EA                                            NOP
0C262 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C264 CA                                            DEX        ;  5+5L down,  95-5L to go
0C265 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C267                           
0C267 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C269 CA                                        DEX            ;  9+8L down, 91-8L to go
0C26A D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C26C                           
0C26C 88                                    DEY
0C26D D0 D1                             BNE -tileLoop
0C26F                           
0C26F A4 08                             LDY temp+8
0C271                                   
0C271 E6 07                             INC temp+7
0C273 A5 07                             LDA temp+7
0C275 C9 02                             CMP #$02
0C277 D0 B2                             BNE -fadeLoop
0C279                           
0C279 A9 00                             LDA #$00
0C27B 85 07                             STA temp+7
0C27D 88                                DEY
0C27E D0 AB                         BNE -fadeLoop
0C280                               
0C280                               ;; Load the next level
0C280 E6 34                         INC current_level
0C282 A5 34                         LDA current_level
0C284 C9 19                         CMP #25
0C286 D0 04                         BNE +
0C288 A9 00                             LDA #$00
0C28A 85 34                             STA current_level
0C28C                               +
0C28C                               
0C28C A9 81                         LDA #LOAD_GAME_SCREEN
0C28E 85 2D                         STA screen_mode
0C290                           
0C290                           
0C290                           +end:
0C290                           
0C290                           
0C290                           +skipBallMovement:
0C290                               ;; Add to sprite buffer
0C290 A6 32                         LDX sprite_ram_pointer
0C292 A5 19                         LDA ball_ypos_hi
0C294 9D 00 02                      STA ADDR_SPRITERAM,x
0C297 E8                            INX
0C298 A9 01                         LDA #BALL_TILE_CHR
0C29A 9D 00 02                      STA ADDR_SPRITERAM,x
0C29D E8                            INX
0C29E A9 00                         LDA #BALL_ATTR
0C2A0 9D 00 02                      STA ADDR_SPRITERAM,x
0C2A3 E8                            INX
0C2A4 A5 17                         LDA ball_xpos_hi
0C2A6 9D 00 02                      STA ADDR_SPRITERAM,x
0C2A9 E8                            INX
0C2AA 86 32                         STX sprite_ram_pointer
0C2AC 4C C5 C2                      JMP +doneScreenLoad
0C2AF                           
0C2AF                           
0C2AF                           +checkNextScreen:
0C2AF                           
0C2AF                               ;; Upon pressing START, (next level) design will be drawn
0C2AF                               .include "game/test/load_next_level.asm"
0C2AF                               ;; If START button is pressed
0C2AF A5 10                         LDA buttons_pressed
0C2B1 29 10                         AND #BUTTON_START
0C2B3 F0 10                         BEQ +continue
0C2B5                                   
0C2B5                                   ;; Load the next level
0C2B5 E6 34                             INC current_level
0C2B7 A5 34                             LDA current_level
0C2B9 C9 19                             CMP #25
0C2BB D0 04                             BNE +
0C2BD A9 00                                 LDA #$00
0C2BF 85 34                                 STA current_level
0C2C1                                   +
0C2C1                                   
0C2C1 A9 81                             LDA #LOAD_GAME_SCREEN
0C2C3 85 2D                             STA screen_mode
0C2C5                           
0C2C5                               +continue:
0C2C5                           
0C2C5                           
0C2C5                           +doneScreenLoad:
0C2C5                           
0C2C5                               ;; Load animations (if any)
0C2C5                               .include "game/include/main/load_animations.asm"
0C2C5                               ;; Set up loop
0C2C5 A2 00                         LDX #$00
0C2C7                               -loop_load_animation:
0C2C7                                   ;; Check if current animation is active. If not, goto next
0C2C7 BD 44 03                          LDA explosion_active,x
0C2CA D0 03                             BNE +
0C2CC 4C 66 C3                              JMP +next
0C2CF                                   +
0C2CF                           
0C2CF                                   ;; Check the explosion framecounter
0C2CF BD 30 03                          LDA explosion_framecounter,x
0C2D2 D0 26                             BNE +
0C2D4                                       ;; Framecounter is 0
0C2D4                                       ;; Reset to animation speed
0C2D4 A9 04                                 LDA #ANIMATION_SPEED
0C2D6 9D 30 03                              STA explosion_framecounter,x
0C2D9                           
0C2D9                                       ;; Set next animation frame, and check if we're done yet
0C2D9 FE 34 03                              INC explosion_currentframe,x
0C2DC BD 34 03                              LDA explosion_currentframe,x
0C2DF C9 0A                                 CMP #ANIM_SLIDES
0C2E1 D0 17                                 BNE +
0C2E3                           
0C2E3                                       ;; If we're done, inactivate current explosion, clean
0C2E3                                       ;; up sprite RAM and go to the next one
0C2E3 A9 00                                 LDA #$00
0C2E5 9D 44 03                              STA explosion_active,x
0C2E8                                       
0C2E8 A9 09                                 LDA #SLIDE_SIZE
0C2EA 0A                                    ASL
0C2EB 0A                                    ASL
0C2EC A8                                    TAY
0C2ED A9 EF                                 LDA #$EF
0C2EF                                       -
0C2EF 88                                        DEY
0C2F0 99 00 02                                  STA ADDR_SPRITERAM,y
0C2F3 C0 00                                     CPY #00
0C2F5 D0 F8                                 BNE -
0C2F7                                       
0C2F7 4C 66 C3                              JMP +next
0C2FA                                   +
0C2FA                           
0C2FA                                   ;; Load (x,y) position in temp variables
0C2FA BD 3C 03                          LDA explosion_x,x
0C2FD 85 01                             STA temp+1
0C2FF 85 03                             STA temp+3
0C301 BD 40 03                          LDA explosion_y,x
0C304 85 02                             STA temp+2
0C306                           
0C306                                   ;; Load attribute in temp variable
0C306 BD 38 03                          LDA explosion_attributes,x
0C309 85 04                             STA temp+4
0C30B                           
0C30B                                   ;; Load current frame into Y-register
0C30B BC 34 03                          LDY explosion_currentframe,x
0C30E                           
0C30E                                   ;; Load current frame ROM address from table
0C30E B9 8A CC                          LDA explosion_anim_lo,y
0C311 85 0C                             STA pointer
0C313 B9 80 CC                          LDA explosion_anim_hi,y
0C316 85 0D                             STA pointer+1
0C318                           
0C318                                   ;; Save x-register on stack
0C318 8A                                TXA
0C319 48                                PHA
0C31A                           
0C31A                                   ;; Load sprites into sprite RAM
0C31A A6 32                             LDX sprite_ram_pointer
0C31C A0 00                             LDY #$00
0C31E                           
0C31E                                   ;; Prepare (x,y) offset for loop
0C31E 84 00                             STY temp
0C320                           
0C320                                   -loop_load_sprite:
0C320                                   
0C320                                       ;; Do not draw empty sprites
0C320 B1 0C                                 LDA (pointer),y
0C322 F0 18                                 BEQ +nextSprite
0C324                                   
0C324                                           ;; Add y-position to sprite ram buffer
0C324 A5 02                                     LDA temp+2
0C326 9D 00 02                                  STA ADDR_SPRITERAM,x
0C329 E8                                        INX
0C32A                           
0C32A                                           ;; Get tile number from frame ROM address, and
0C32A                                           ;; add it to sprite ram buffer
0C32A B1 0C                                     LDA (pointer),y
0C32C 9D 00 02                                  STA ADDR_SPRITERAM,x
0C32F E8                                        INX
0C330                           
0C330                                           ;; Add attribute data to sprite ram buffer
0C330 A5 04                                     LDA temp+4
0C332 9D 00 02                                  STA ADDR_SPRITERAM,x
0C335 E8                                        INX
0C336                           
0C336                                           ;; Add x-position to sprite ram buffer
0C336 A5 03                                     LDA temp+3
0C338 9D 00 02                                  STA ADDR_SPRITERAM,x
0C33B E8                                        INX
0C33C                           
0C33C                                       +nextSprite:
0C33C                           
0C33C                                       ;; Check if all sprites are done
0C33C C8                                    INY
0C33D C0 09                                 CPY #SLIDE_SIZE
0C33F F0 21                                 BEQ +done
0C341                           
0C341                                       ;; Update x value
0C341 A5 03                                 LDA temp+3
0C343 18                                    CLC
0C344 69 08                                 ADC #$08
0C346 85 03                                 STA temp+3
0C348                           
0C348                                       ;; Update temp for x,y position
0C348 E6 00                                 INC temp
0C34A A5 00                                 LDA temp
0C34C C9 03                                 CMP #SLIDE_WIDTH
0C34E D0 0F                                 BNE +
0C350                                           ;; Row is done; reset x-position
0C350 A5 01                                     LDA temp+1
0C352 85 03                                     STA temp+3
0C354                           
0C354                                           ;; Update y-position
0C354 A5 02                                     LDA temp+2
0C356 18                                        CLC
0C357 69 08                                     ADC #$08
0C359 85 02                                     STA temp+2
0C35B                           
0C35B                                           ;; Reset row counter
0C35B A9 00                                     LDA #$00
0C35D 85 00                                     STA temp
0C35F                                       +
0C35F                           
0C35F 4C 20 C3                          JMP -loop_load_sprite
0C362                           
0C362                               +done:
0C362 86 32                             STX sprite_ram_pointer
0C364                           
0C364                                   ;; Retrieve x-register from stack
0C364 68                                PLA
0C365 AA                                TAX
0C366                           
0C366                               +next:
0C366                                   ;; Check if all animations have been updated
0C366 E8                                INX
0C367 E0 04                             CPX #MAX_ANIMATIONS
0C369 F0 03                             BEQ +done
0C36B                           
0C36B 4C C7 C2                      JMP -loop_load_animation
0C36E                           +done:
0C36E                           
0C36E                               ;; Sprite clean-up
0C36E A6 32                         LDX sprite_ram_pointer
0C370 A9 EF                         LDA #$EF
0C372                               -
0C372 9D 00 02                          STA ADDR_SPRITERAM,x
0C375 E8                                INX
0C376 D0 FA                         BNE -
0C378 4C 57 C0                      JMP MainGameLoop
0C37B                           
0C37B                           ;; Subroutines
0C37B                           .include "include/subroutines.asm"
0C37B                           
0C37B                           ;; RNG
0C37B                           .include "subroutine/GetRandomNumber.asm"
0C37B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C37B                           ;;
0C37B                           ;; subroutine/GetRandomNumber.asm
0C37B                           ;;
0C37B                           ;; Simple and fast random number generator by White Flame.
0C37B                           ;;
0C37B                           ;; Set random_seed to an arbitrary number to randomize between
0C37B                           ;; gaming sessions, for instance using the frame counter upon
0C37B                           ;; pressing START on the intro screen.
0C37B                           ;;
0C37B                           ;;     ;; IF START PRESSED:
0C37B                           ;;     LDA frame_counter
0C37B                           ;;     STA random_seed
0C37B                           ;;
0C37B                           ;; Source:
0C37B                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C37B                           ;;
0C37B                           ;;
0C37B                           
0C37B                           sub_GetRandomNumber:
0C37B                               ;; Force EOR if random_seed is zero
0C37B A5 16                         LDA random_seed
0C37D F0 05                         BEQ +doEor
0C37F                           
0C37F                               ;; Shift left, and EOR if the high bit is set
0C37F 0A                            ASL
0C380 F0 04                         BEQ +noEor
0C382 90 02                         BCC +noEor
0C384                           
0C384                           +doEor:
0C384 49 1D                         EOR #$1D
0C386                           
0C386                           +noEor:
0C386 85 16                         STA random_seed
0C388                           
0C388 60                            RTS
0C389                           
0C389                           
0C389                           ;; Read controller input
0C389                           .include "subroutine/ReadController.asm"
0C389                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C389                           ;;
0C389                           ;; subroutine/ReadController.asm
0C389                           ;;
0C389                           ;; Subroutine that polls the controller and stores the input
0C389                           ;; buttons in a variable. This version only handles controller
0C389                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C389                           ;;
0C389                           ;;
0C389                           
0C389                           sub_ReadController:
0C389                           
0C389                               ;; Set strobe bit
0C389 A9 01                         LDA #$01
0C38B 8D 16 40                      STA JOYPAD_1
0C38E                           
0C38E                               ;; Set up ring counter
0C38E 85 0F                         STA buttons_held
0C390                           
0C390                               ;; Clear strobe bit
0C390 4A                            LSR
0C391 8D 16 40                      STA JOYPAD_1
0C394                           
0C394                               ;; Loop through button presses
0C394                               -
0C394 AD 16 40                          LDA JOYPAD_1
0C397 4A                                LSR
0C398 26 0F                             ROL buttons_held
0C39A                           
0C39A                               ;; Check if ring counter is done
0C39A 90 F8                         BCC -
0C39C                           
0C39C                               ;; Return from subroutine
0C39C 60                            RTS
0C39D                           
0C39D                           
0C39D                           ;; vBlank wait
0C39D                           .include "subroutine/WaitForVBlank.asm"
0C39D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C39D                           ;;
0C39D                           ;; subroutine/WaitForVBlank.asm
0C39D                           ;;
0C39D                           ;; Subroutine that essentially pauses script execution until
0C39D                           ;; vBlank happens.
0C39D                           ;;
0C39D                           ;;
0C39D                           
0C39D                           sub_WaitForVBlank:
0C39D 2C 02 20                      BIT $2002
0C3A0 10 FB                         BPL sub_WaitForVBlank
0C3A2 60                            RTS
0C3A3                           
0C3A3                           
0C3A3                           ;; Game specific subroutines
0C3A3                           .include "game/include/subroutines.asm"
0C3A3                           ;; additional game-specific subroutines go here
0C3A3                           
0C3A3                           .include "game/subroutine/BackgroundNoise.asm"
0C3A3                           
0C3A3                           sub_BackgroundNoise:
0C3A3 A9 32                         LDA #$32
0C3A5 8D 0C 40                      STA NOISE_VOLUME
0C3A8 A9 0E                         LDA #$0E
0C3AA 8D 0E 40                      STA NOISE_PERIOD
0C3AD 85 38                         STA current_noise
0C3AF 60                            RTS0C3B0                           .include "game/subroutine/ClearScreen.asm"
0C3B0                           ;; Subroutine to clear the screen
0C3B0                           ;; If it's a game screen, add noise
0C3B0                           
0C3B0                           sub_ClearScreen:
0C3B0                               ;; Check of game screen or not
0C3B0 A5 2D                         LDA screen_mode
0C3B2 29 03                         AND #CHECK_SCREEN_MODE
0C3B4 C9 01                         CMP #IS_GAME_SCREEN
0C3B6 F0 02                         BEQ +
0C3B8 A9 00                             LDA #$00
0C3BA                               +
0C3BA 85 01                         STA temp+1
0C3BC                               
0C3BC                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C3BC 2C 02 20                      BIT PPU_STATUS
0C3BF A9 20                         LDA #$20
0C3C1 8D 06 20                      STA PPU_ADDR
0C3C4 A9 00                         LDA #$00
0C3C6 8D 06 20                      STA PPU_ADDR
0C3C9                               
0C3C9                               ;; Set up tile to draw and loop
0C3C9 85 00                         STA temp
0C3CB AA                            TAX
0C3CC A8                            TAY
0C3CD                           
0C3CD                               -     
0C3CD                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C3CD A5 00                             LDA temp
0C3CF 8D 07 20                          STA PPU_DATA
0C3D2                           
0C3D2                                   ;; Check if we should draw noise next. Noise is drawn if:
0C3D2                                   ;; - Screen mode is game screen
0C3D2                                   ;; - Y between #$06 and #$19 (inclusive)
0C3D2                                   ;; - X between #$02 and #$1D (inclusive)
0C3D2                                   
0C3D2                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C3D2 A5 01                             LDA temp+1
0C3D4 F0 1C                             BEQ +nextTileInRow
0C3D6                                   
0C3D6                                   ;; If Y < $6, skip the check
0C3D6 C0 06                             CPY #$06
0C3D8 90 18                             BCC +nextTileInRow
0C3DA                                   
0C3DA                                   ;; If X < $1, skip the check
0C3DA E0 01                             CPX #$01
0C3DC 90 14                             BCC +nextTileInRow
0C3DE                                   
0C3DE                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C3DE E0 1D                             CPX #$1D
0C3E0 D0 04                             BNE +
0C3E2 A9 00                                 LDA #$00
0C3E4 85 00                                 STA temp
0C3E6                                   +
0C3E6 B0 0A                             BCS +nextTileInRow
0C3E8                                   
0C3E8                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C3E8 20 7B C3                          JSR sub_GetRandomNumber
0C3EB 29 07                             AND #%00000111
0C3ED 18                                CLC
0C3EE 69 68                             ADC #$68
0C3F0 85 00                             STA temp
0C3F2                           
0C3F2                           +nextTileInRow:
0C3F2                                   
0C3F2                                   ;; Check if a row has been done. If not, draw the next
0C3F2 E8                                INX
0C3F3 E0 20                             CPX #$20
0C3F5 D0 D6                             BNE -
0C3F7                                   
0C3F7                                   ;; Go to the next row (if any left)
0C3F7 A2 00                             LDX #00
0C3F9 C8                                INY
0C3FA                                   
0C3FA                                   ;; If Y is 1A, skip noise tile check until done drawing
0C3FA C0 1A                             CPY #$1A
0C3FC D0 04                             BNE +
0C3FE A9 00                                 LDA #$00
0C400 85 01                                 STA temp+1
0C402                                   +
0C402                                   
0C402 C0 1E                             CPY #$1E
0C404 D0 C7                         BNE -
0C406                           
0C406                               ;; Clear attribute table
0C406 A9 23                         LDA #$23
0C408 8D 06 20                      STA PPU_ADDR
0C40B A9 C0                         LDA #$C0
0C40D 8D 06 20                      STA PPU_ADDR
0C410 A9 00                         LDA #$00
0C412 A2 40                         LDX #$40
0C414                               -
0C414 8D 07 20                          STA PPU_DATA
0C417 CA                                DEX
0C418 D0 FA                         BNE -
0C41A                               
0C41A 60                            RTS0C41B                           .include "game/subroutine/ColorizeBall.asm"
0C41B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C41B                           ;;
0C41B                           ;;  Subroutine: ColorizeBall
0C41B                           ;;
0C41B                           ;;  Applies the color set through ball_flags to the ball sprite.
0C41B                           ;;
0C41B                           ;;
0C41B                           
0C41B                           
0C41B                           sub_ColorizeBall:
0C41B                           
0C41B                               ;; Get color from ball_flags
0C41B 4A                            LSR
0C41C 4A                            LSR
0C41D 4A                            LSR
0C41E 4A                            LSR
0C41F 4A                            LSR
0C420 AA                            TAX
0C421                           
0C421                               ;; Add new light color of ball to PPU palette
0C421 A9 3F                         LDA #$3F
0C423 85 00                         STA temp
0C425 A9 11                         LDA #$11
0C427 85 01                         STA temp+1
0C429 BD 9A CC                      LDA tbl_BallColorLight,x
0C42C 85 02                         STA temp+2
0C42E 20 36 CB                      JSR sub_WriteByteToPPUBuffer
0C431                               
0C431                               ;; Add new dark color of ball to PPU palette
0C431 E6 01                         INC temp+1
0C433 BD 94 CC                      LDA tbl_BallColorDark,x
0C436 85 02                         STA temp+2
0C438 20 36 CB                      JSR sub_WriteByteToPPUBuffer
0C43B                               
0C43B 60                            RTS
0C43C                           
0C43C                           .include "game/subroutine/ColorsMatch.asm"
0C43C                           
0C43C                           ;; Subroutine to check if ball color matches colliding tile color
0C43C                           
0C43C                           sub_ColorsMatch:
0C43C                               ;; Save tile color in temp variable
0C43C A5 35                         LDA colliding_tile
0C43E 29 0E                         AND #%00001110
0C440 85 00                         STA temp
0C442                           
0C442                               ;; Get ball color
0C442 A5 2C                         LDA ball_flags
0C444 29 E0                         AND #%11100000
0C446 4A                            LSR
0C447 4A                            LSR
0C448 4A                            LSR
0C449 4A                            LSR
0C44A                           
0C44A                               ;; Compare with tile color
0C44A C5 00                         CMP temp
0C44C 60                            RTS
0C44D                           
0C44D                           .include "game/subroutine/ConvertXYToTileType.asm"
0C44D                           
0C44D                           ;; Subroutine to convert the ball's position to a tile type
0C44D                           ;; - Expects temp to be y-position of ball within game area
0C44D                           ;; - Expects temp+1 to be x-position of ball within game area
0C44D                           ;; - Puts result in accumulator and zp variable
0C44D                           ;; - Corrupts X-register
0C44D                           
0C44D                           sub_ConvertXYToTileType:
0C44D A5 01                         LDA temp+1
0C44F 4A                            LSR
0C450 4A                            LSR
0C451 4A                            LSR
0C452 4A                            LSR
0C453 85 09                         STA temp+9
0C455 A5 00                         LDA temp
0C457 29 F0                         AND #%11110000
0C459 18                            CLC
0C45A 65 09                         ADC temp+9
0C45C 85 09                         STA temp+9
0C45E AA                            TAX
0C45F BD 00 04                      LDA tile_type, x
0C462 85 35                         STA colliding_tile
0C464 60                            RTS
0C465                           
0C465                           .include "game/subroutine/DisableEnableRendering.asm"
0C465                           sub_DisableRendering:
0C465                               ;; Force NMI skip, disable rendering
0C465 A9 01                     	LDA #$01
0C467 85 14                     	STA force_skip_nmi
0C469 20 9D C3                      JSR sub_WaitForVBlank
0C46C A5 12                         LDA soft_ppu_mask
0C46E 29 E7                         AND #%11100111
0C470 8D 01 20                      STA PPU_MASK
0C473 85 12                         STA soft_ppu_mask
0C475 20 9D C3                      JSR sub_WaitForVBlank
0C478 60                            RTS
0C479                           
0C479                           sub_EnableRendering:
0C479                               ;; Enable rendering
0C479 A9 00                     	LDA #$00
0C47B 8D 05 20                  	STA PPU_SCROLL
0C47E 8D 05 20                  	STA PPU_SCROLL
0C481 20 9D C3                      JSR sub_WaitForVBlank
0C484 85 14                     	STA force_skip_nmi
0C486 A5 12                         LDA soft_ppu_mask
0C488 09 18                         ORA #%00011000
0C48A 85 12                         STA soft_ppu_mask
0C48C 8D 01 20                      STA PPU_MASK
0C48F 20 9D C3                      JSR sub_WaitForVBlank
0C492 60                            RTS
0C493                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C493                           sub_drawIntroScreenLogoTile:
0C493 B9 7C CB                      LDA tbl_IntroScreenLogoChr,y
0C496 C9 60                         CMP #$60
0C498 D0 08                         BNE +
0C49A 20 7B C3                          JSR sub_GetRandomNumber
0C49D 29 07                             AND #$07
0C49F 18                                CLC
0C4A0 69 60                             ADC #$60
0C4A2                               +
0C4A2 8D 07 20                      STA PPU_DATA
0C4A5 60                            RTS
0C4A6                           .include "game/subroutine/EvaluateTileType.asm"
0C4A6                           
0C4A6                           ;; Subroutine to evaluate the colliding tile type and take its
0C4A6                           ;; corresponding action (move block, kill player, ...)
0C4A6                           ;; - Expects X-register to be the tile_type offset
0C4A6                           ;; - Uses zp variable colliding_tile
0C4A6                           
0C4A6                           sub_EvaluateTileType:
0C4A6                           
0C4A6                               ;; Check if collided tile is a color block
0C4A6 A5 35                         LDA colliding_tile
0C4A8 29 80                         AND #IS_COLOR_BLOCK
0C4AA D0 03                         BNE +
0C4AC 4C BF C6                          JMP +checkIfPaintBlock
0C4AF                               +
0C4AF                               
0C4AF                               ;; It's a color block. Check if the colors match
0C4AF 20 3C C4                      JSR sub_ColorsMatch
0C4B2 F0 01                         BEQ +
0C4B4                                   ;; Colors don't match - return
0C4B4 60                                RTS
0C4B5                               +
0C4B5                           
0C4B5                               ;; Colors match. Destroy color block
0C4B5 A4 30                         LDY ppu_buffer_pointer
0C4B7                               
0C4B7                               ;; (this will be a subroutine)
0C4B7                               ;; Get PPU address from YX index
0C4B7                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C4B7                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C4B7 8A                            TXA
0C4B8 29 C0                         AND #%11000000
0C4BA 18                            CLC
0C4BB 2A                            ROL
0C4BC 2A                            ROL
0C4BD 2A                            ROL
0C4BE 69 20                         ADC #$20
0C4C0 85 00                         STA temp
0C4C2 8A                            TXA
0C4C3 29 0F                         AND #%00001111
0C4C5 0A                            ASL
0C4C6 85 01                         STA temp+1
0C4C8 8A                            TXA
0C4C9 29 30                         AND #%00110000
0C4CB 0A                            ASL
0C4CC 0A                            ASL
0C4CD 18                            CLC
0C4CE 65 01                         ADC temp+1
0C4D0 85 01                         STA temp+1
0C4D2 A5 00                         LDA temp
0C4D4 69 00                         ADC #$00
0C4D6 85 00                         STA temp
0C4D8 A5 01                         LDA temp+1
0C4DA 18                            CLC
0C4DB 69 C2                         ADC #$C2
0C4DD 85 01                         STA temp+1
0C4DF A5 00                         LDA temp
0C4E1 69 00                         ADC #$00
0C4E3 85 00                         STA temp
0C4E5                           
0C4E5                               
0C4E5                               ;; (this will also be a subroutine eventually)
0C4E5                               ;; TILE 1: if metatile on top left is solid, draw
0C4E5                               ;; null tile, else draw random noise tile
0C4E5 A9 00                         LDA #%00
0C4E7 85 2F                         STA ppu_buffer_update
0C4E9                               
0C4E9 A5 00                         LDA temp
0C4EB 99 00 03                      STA ppu_buffer,y
0C4EE C8                            INY
0C4EF A5 01                         LDA temp+1
0C4F1 99 00 03                      STA ppu_buffer,y
0C4F4 C8                            INY
0C4F5                               
0C4F5 8A                            TXA
0C4F6 29 0F                         AND #%00001111
0C4F8 F0 11                         BEQ +drawRandomTile
0C4FA                           
0C4FA 8A                            TXA
0C4FB 29 F0                         AND #%11110000
0C4FD F0 0C                         BEQ +drawRandomTile
0C4FF                           
0C4FF BD EF 03                      LDA tile_type-17,x
0C502 29 01                         AND #%00000001
0C504 F0 05                         BEQ +drawRandomTile  
0C506                           
0C506                               ;; Draw a null tile
0C506 A9 00                         LDA #$00
0C508 4C 13 C5                      JMP +addToPPUBuffer
0C50B                               
0C50B                           +drawRandomTile:
0C50B                               ;; Draw a random tile
0C50B 20 7B C3                      JSR sub_GetRandomNumber
0C50E 29 07                         AND #%00000111
0C510 18                            CLC
0C511 69 68                         ADC #$68
0C513                               
0C513                               ;; Add tile to ppu buffer
0C513                           +addToPPUBuffer:
0C513 99 00 03                      STA ppu_buffer,y
0C516 C8                            INY
0C517                           
0C517                               ;; TILE 2: If metatile above is solid, draw null,
0C517                               ;; else draw random noise.
0C517 E6 01                         INC temp+1
0C519 A5 00                         LDA temp
0C51B 99 00 03                      STA ppu_buffer,y
0C51E C8                            INY
0C51F A5 01                         LDA temp+1
0C521 99 00 03                      STA ppu_buffer,y
0C524 C8                            INY
0C525                               
0C525 8A                            TXA
0C526 29 F0                         AND #%11110000
0C528 F0 0C                         BEQ +drawRandomTile
0C52A                               
0C52A BD F0 03                      LDA tile_type-16,x
0C52D 29 01                         AND #%00000001
0C52F F0 05                         BEQ +drawRandomTile
0C531                               
0C531 A9 00                         LDA #%00
0C533 4C 3E C5                      JMP +addToPPUBuffer
0C536                           
0C536                           +drawRandomTile:
0C536 20 7B C3                      JSR sub_GetRandomNumber
0C539 29 07                         AND #%00000111
0C53B 18                            CLC
0C53C 69 68                         ADC #$68
0C53E                           
0C53E                           +addToPPUBuffer:
0C53E 99 00 03                      STA ppu_buffer,y
0C541 C8                            INY
0C542                               
0C542                               ;; TILE 3 - If metatile left is solid, draw null,
0C542                               ;; else draw random noise.
0C542 A5 01                         LDA temp+1
0C544 18                            CLC
0C545 69 1F                         ADC #$1F
0C547 85 01                         STA temp+1
0C549 A5 00                         LDA temp
0C54B 69 00                         ADC #$00
0C54D 85 00                         STA temp
0C54F 99 00 03                      STA ppu_buffer,y
0C552 C8                            INY
0C553 A5 01                         LDA temp+1
0C555 99 00 03                      STA ppu_buffer,y
0C558 C8                            INY
0C559                               
0C559 8A                            TXA
0C55A 29 0F                         AND #%00001111
0C55C F0 0C                         BEQ +drawRandomTile
0C55E                               
0C55E BD FF 03                      LDA tile_type-1,x
0C561 29 01                         AND #%00000001
0C563 F0 05                         BEQ +drawRandomTile
0C565                               
0C565 A9 00                         LDA #%00
0C567 4C 72 C5                      JMP +addToPPUBuffer
0C56A                           
0C56A                           +drawRandomTile:
0C56A 20 7B C3                      JSR sub_GetRandomNumber
0C56D 29 07                         AND #%00000111
0C56F 18                            CLC
0C570 69 68                         ADC #$68
0C572                               
0C572                           +addToPPUBuffer:
0C572 99 00 03                      STA ppu_buffer,y
0C575 C8                            INY
0C576                               
0C576                               ;; TILE 4 - Always random noise
0C576 E6 01                         INC temp+1
0C578 A5 00                         LDA temp
0C57A 99 00 03                      STA ppu_buffer,y
0C57D C8                            INY
0C57E A5 01                         LDA temp+1
0C580 99 00 03                      STA ppu_buffer,y
0C583 C8                            INY
0C584 20 7B C3                      JSR sub_GetRandomNumber
0C587 29 07                         AND #%00000111
0C589 18                            CLC
0C58A 69 68                         ADC #$68
0C58C 99 00 03                      STA ppu_buffer,y
0C58F C8                            INY
0C590                           
0C590                               ;; TILE 5 - If tile on the right is solid, skip,
0C590                               ;; else draw random noise tile
0C590 E6 01                         INC temp+1
0C592                               
0C592 8A                            TXA
0C593 29 0F                         AND #%00001111
0C595 C9 0D                         CMP #$0D
0C597 F0 1F                         BEQ +skipTile
0C599                               
0C599 BD 01 04                      LDA tile_type+1,x
0C59C 29 01                         AND #%00000001
0C59E D0 18                         BNE +skipTile
0C5A0 A5 00                             LDA temp
0C5A2 99 00 03                          STA ppu_buffer,y
0C5A5 C8                                INY
0C5A6 A5 01                             LDA temp+1
0C5A8 99 00 03                          STA ppu_buffer,y
0C5AB C8                                INY
0C5AC 20 7B C3                          JSR sub_GetRandomNumber
0C5AF 29 07                             AND #%00000111
0C5B1 18                                CLC
0C5B2 69 68                             ADC #$68
0C5B4 99 00 03                          STA ppu_buffer,y
0C5B7 C8                                INY    
0C5B8                               +skipTile:
0C5B8                           
0C5B8                               ;; TILE 6 - If tile on bottom is solid, skip,
0C5B8                               ;; else draw random noise
0C5B8 A5 01                         LDA temp+1
0C5BA 18                            CLC
0C5BB 69 1F                         ADC #$1F
0C5BD 85 01                         STA temp+1
0C5BF A5 00                         LDA temp
0C5C1 69 00                         ADC #$00
0C5C3 85 00                         STA temp
0C5C5                           
0C5C5 8A                            TXA
0C5C6 29 F0                         AND #%11110000
0C5C8 C9 90                         CMP #$90
0C5CA F0 1F                         BEQ +skipTile
0C5CC                           
0C5CC BD 10 04                      LDA tile_type+16,x
0C5CF 29 01                         AND #%00000001
0C5D1 D0 18                         BNE +skipTile
0C5D3 A5 00                             LDA temp
0C5D5 99 00 03                          STA ppu_buffer,y
0C5D8 C8                                INY
0C5D9 A5 01                             LDA temp+1
0C5DB 99 00 03                          STA ppu_buffer,y
0C5DE C8                                INY
0C5DF 20 7B C3                          JSR sub_GetRandomNumber
0C5E2 29 07                             AND #%00000111
0C5E4 18                                CLC
0C5E5 69 68                             ADC #$68
0C5E7 99 00 03                          STA ppu_buffer,y
0C5EA C8                                INY    
0C5EB                               +skipTile:
0C5EB                               
0C5EB                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C5EB                               ;; else draw random noise
0C5EB E6 01                         INC temp+1
0C5ED                           
0C5ED 8A                            TXA
0C5EE 29 F0                         AND #%11110000
0C5F0 C9 90                         CMP #$90
0C5F2 F0 26                         BEQ +skipTile
0C5F4                               
0C5F4 8A                            TXA
0C5F5 29 0F                         AND #%00001111
0C5F7 C9 0D                         CMP #$0D
0C5F9 F0 1F                         BEQ +skipTile
0C5FB                               
0C5FB BD 11 04                      LDA tile_type+17,x
0C5FE 29 01                         AND #%00000001
0C600 D0 18                         BNE +skipTile
0C602 A5 00                             LDA temp
0C604 99 00 03                          STA ppu_buffer,y
0C607 C8                                INY
0C608 A5 01                             LDA temp+1
0C60A 99 00 03                          STA ppu_buffer,y
0C60D C8                                INY
0C60E 20 7B C3                          JSR sub_GetRandomNumber
0C611 29 07                             AND #%00000111
0C613 18                                CLC
0C614 69 68                             ADC #$68
0C616 99 00 03                          STA ppu_buffer,y
0C619 C8                                INY    
0C61A                               +skipTile:   
0C61A                           
0C61A                           
0C61A                               ;; - Update attribute table accordingly through ppu buffer
0C61A A9 23                         LDA #$23
0C61C 99 00 03                      STA ppu_buffer,y
0C61F C8                            INY
0C620                               
0C620 8A                            TXA
0C621 29 F0                         AND #%11110000
0C623 4A                            LSR
0C624 4A                            LSR
0C625 4A                            LSR
0C626 4A                            LSR
0C627 18                            CLC
0C628 69 01                         ADC #1
0C62A 4A                            LSR
0C62B 0A                            ASL
0C62C 0A                            ASL
0C62D 0A                            ASL
0C62E 18                            CLC
0C62F 69 C8                         ADC #$C8
0C631 85 00                         STA temp
0C633 8A                            TXA
0C634 29 0F                         AND #%00001111
0C636 18                            CLC
0C637 69 01                         ADC #$01
0C639 4A                            LSR
0C63A 18                            CLC
0C63B 65 00                         ADC temp
0C63D 85 00                         STA temp
0C63F 99 00 03                      STA ppu_buffer,y
0C642 C8                            INY
0C643                                  
0C643 8A                            TXA
0C644 29 10                         AND #%00010000
0C646 F0 05                         BEQ +
0C648 A9 F0                             LDA #%11110000
0C64A 4C 4F C6                          JMP ++
0C64D                               +
0C64D A9 0F                         LDA #%00001111
0C64F                               ++
0C64F 85 02                         STA temp+2
0C651                               
0C651 8A                            TXA
0C652 48                            PHA
0C653 29 01                         AND #%00000001
0C655 F0 07                         BEQ +
0C657 A5 02                             LDA temp+2
0C659 09 CC                             ORA #%11001100
0C65B 4C 62 C6                          JMP ++
0C65E                               +
0C65E A5 02                         LDA temp+2
0C660 09 33                         ORA #%00110011
0C662                               ++
0C662 85 02                         STA temp+2
0C664                               
0C664 A5 00                         LDA temp
0C666 38                            SEC
0C667 E9 C0                         SBC #$C0
0C669 AA                            TAX
0C66A BD A0 04                      LDA tile_attributes,x
0C66D 25 02                         AND temp+2
0C66F 9D A0 04                      STA tile_attributes,x
0C672 99 00 03                      STA ppu_buffer,y
0C675 C8                            INY
0C676 68                            PLA
0C677 AA                            TAX
0C678                           
0C678                               ;; Tell PPU to update tiles and attributes next frame
0C678 84 30                         STY ppu_buffer_pointer
0C67A A9 01                         LDA #$01
0C67C 85 2F                         STA ppu_buffer_update
0C67E                            
0C67E                               
0C67E                               ;; - Load destruction animation on tile
0C67E                               ;; Get most recent slot for explosion    
0C67E 8A                            TXA
0C67F 85 02                         STA temp+2
0C681 A6 31                         LDX explosion_pointer
0C683                           
0C683                               ;; If 0, use max pointer value
0C683 D0 02                         BNE +
0C685 A2 04                             LDX #MAX_ANIMATIONS
0C687                               +
0C687                           
0C687                               ;; Decrease pointer by one
0C687 CA                            DEX
0C688 86 31                         STX explosion_pointer
0C68A                           
0C68A                               ;; Load explosion data into RAM
0C68A A9 00                         LDA #$00
0C68C 9D 34 03                      STA explosion_currentframe,x
0C68F                           
0C68F A9 04                         LDA #ANIMATION_SPEED
0C691 9D 30 03                      STA explosion_framecounter,x
0C694                           
0C694 A5 02                         LDA temp+2
0C696 29 0F                         AND #%00001111
0C698 A8                            TAY
0C699 B9 E9 D3                      LDA tbl_Times16,y
0C69C 18                            CLC
0C69D 69 0E                         ADC #$0E
0C69F 9D 3C 03                      STA explosion_x,x
0C6A2                           
0C6A2 A5 02                         LDA temp+2
0C6A4 29 F0                         AND #%11110000
0C6A6 18                            CLC
0C6A7 69 29                         ADC #$29
0C6A9 9D 40 03                      STA explosion_y,x
0C6AC                           
0C6AC A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C6AE 9D 38 03                      STA explosion_attributes,x
0C6B1 A9 01                         LDA #$01
0C6B3 9D 44 03                      STA explosion_active,x
0C6B6                           
0C6B6 A5 02                         LDA temp+2
0C6B8 AA                            TAX
0C6B9                               
0C6B9                               
0C6B9                               ;; - Write #$00 in tile type ram (makes not-solid)
0C6B9 A9 00                         LDA #$00
0C6BB 9D 00 04                      STA tile_type, x
0C6BE                              
0C6BE                               
0C6BE                               ;; - If there are no color blocks left:
0C6BE                               ;;   - Freeze ball
0C6BE                               ;;   - Initiate level-win state
0C6BE                               ;; [@TODO]
0C6BE                               
0C6BE 60                            RTS
0C6BF                           
0C6BF                           +checkIfPaintBlock:
0C6BF                           
0C6BF                           
0C6BF                               ;; Check if collided tile is a paint block
0C6BF A5 35                         LDA colliding_tile
0C6C1 29 20                         AND #IS_PAINT_BLOCK
0C6C3 F0 1A                         BEQ +checkIfDeathBlock
0C6C5                                   ;; It's a paint block. Update ball color
0C6C5                                   ;; Save x-register
0C6C5 8A                                TXA
0C6C6 48                                PHA
0C6C7                           
0C6C7                                   ;; Get tile color
0C6C7 A5 35                             LDA colliding_tile
0C6C9 29 0E                             AND #%00001110
0C6CB 0A                                ASL
0C6CC 0A                                ASL
0C6CD 0A                                ASL
0C6CE 0A                                ASL
0C6CF 85 00                             STA temp
0C6D1                           
0C6D1                                   ;; Apply tile color to ball
0C6D1 A5 2C                             LDA ball_flags
0C6D3 29 1F                             AND #%00011111
0C6D5 05 00                             ORA temp
0C6D7 85 2C                             STA ball_flags
0C6D9 20 1B C4                          JSR sub_ColorizeBall
0C6DC                           
0C6DC                                   ;; Restore x-register
0C6DC 68                                PLA
0C6DD AA                                TAX
0C6DE                           
0C6DE                                   ;; Return
0C6DE 60                                RTS
0C6DF                               +checkIfDeathBlock:
0C6DF                           
0C6DF                               ;; Check if collided tile is a death block
0C6DF A5 35                         LDA colliding_tile
0C6E1 29 10                         AND #IS_DEATH_BLOCK
0C6E3 F0 01                         BEQ +checkIfMoveBlock
0C6E5                                   ;; It is a death block. Kill player and return (@TODO)
0C6E5                           ;        LDA ball_flags
0C6E5                           ;        ORA #%00000101
0C6E5                           ;        STA ball_flags
0C6E5 60                                RTS
0C6E6                               +checkIfMoveBlock:
0C6E6                           
0C6E6                               ;; Check if collided tile is a move block
0C6E6 A5 35                         LDA colliding_tile
0C6E8 29 40                         AND #IS_MOVE_BLOCK
0C6EA F0 07                         BEQ +done
0C6EC                                   ;; It is a move block. Check if colors match
0C6EC 20 3C C4                          JSR sub_ColorsMatch
0C6EF F0 01                             BEQ +
0C6F1                                       ;; Colors don't match - return
0C6F1 60                                    RTS
0C6F2                                   +
0C6F2                           
0C6F2                                   ;; Colors match.
0C6F2                                   ;; - Check if next tile is a solid
0C6F2                                   ;; - If not, move the tile:
0C6F2                                   ;;   - Add the tiles that need updating to ppu buffer
0C6F2                                   ;;   - Add move tile sprite over the original tile
0C6F2                                   ;;   - Initiate moving the sprite that way for 16px
0C6F2                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C6F2                                   ;;   - Update attribute table accordingly through ppu buffer
0C6F2                                   ;; - After moving the sprite, in a different routine:
0C6F2                                   ;;   - Add move tile data on the new tile location
0C6F2                                   ;;   - Write the original tile type data on new position in ram
0C6F2                                   ;;   - Destroy sprite
0C6F2                                   ;;   - Update attribute table accordingly through ppu buffer
0C6F2                                   ;; (@TODO)
0C6F2 60                                RTS
0C6F3                               +done:
0C6F3                           
0C6F3                               ;; Return
0C6F3 60                            RTS
0C6F4                           
0C6F4                           .include "game/subroutine/InitiateNudge.asm"
0C6F4                           
0C6F4                           sub_InitiateNudge:
0C6F4 85 2C                         STA ball_flags
0C6F6 A9 05                         LDA #NUDGE_FRAMES
0C6F8 85 33                         STA nudge_counter
0C6FA 60                            RTS
0C6FB                           
0C6FB                           .include "game/subroutine/JumpToPointer.asm"
0C6FB                           sub_JumpToPointer:
0C6FB 6C 0C 00                      JMP (pointer)
0C6FE                               ;RTS must be handled by the routine (pointer) jumps to
0C6FE                           .include "game/subroutine/LoadGameScreen.asm"
0C6FE                           sub_LoadGameScreen:
0C6FE                           
0C6FE                               ;; Clear the screen
0C6FE 20 B0 C3                      JSR sub_ClearScreen
0C701                               
0C701                               ;; Clear collision and attribute data
0C701 A2 00                         LDX #$00
0C703 8A                            TXA
0C704                               -
0C704 9D 00 04                          STA tile_type,x
0C707 E8                                INX
0C708 D0 FA                         BNE -
0C70A                               
0C70A                               ;; Get pointer from current level
0C70A A6 34                         LDX current_level
0C70C BD 9E D3                      LDA tbl_lvl_layout_lo,x
0C70F 85 0C                         STA pointer
0C711 BD 85 D3                      LDA tbl_lvl_layout_hi,x
0C714 85 0D                         STA pointer+1
0C716                           
0C716                               ;; Set up the loop
0C716 A0 00                         LDY #$00
0C718                           -drawRowColumnLoop:
0C718                           
0C718                               ;; Load (x,y) of current set of tiles
0C718 B1 0C                         LDA (pointer),y
0C71A                           
0C71A                               ;; Check if level is done; if so, skip the loop
0C71A C9 FF                         CMP #LEVEL_END
0C71C D0 03                         BNE +
0C71E 4C 67 C8                          JMP +doneLevelLoad
0C721                               +
0C721                           
0C721                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C721 85 00                         STA temp
0C723 C8                            INY
0C724 B1 0C                         LDA (pointer),y
0C726 85 01                         STA temp+1
0C728                               
0C728                               ;; Convert (x,y) to PPU address
0C728                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C728 A5 00                         LDA temp
0C72A 29 0F                         AND #%00001111
0C72C 4A                            LSR
0C72D 4A                            LSR
0C72E 09 20                         ORA #$20
0C730 85 02                         STA temp+2
0C732                               
0C732                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C732 A5 00                         LDA temp
0C734 29 F0                         AND #%11110000
0C736 4A                            LSR
0C737 4A                            LSR
0C738 4A                            LSR
0C739 85 03                         STA temp+3
0C73B                               
0C73B A5 00                         LDA temp
0C73D 29 03                         AND #%00000011
0C73F AA                            TAX
0C740 BD F9 D3                      LDA tbl_Times64,x
0C743 18                            CLC
0C744 65 03                         ADC temp+3
0C746 18                            CLC
0C747 69 C2                         ADC #$C2
0C749 85 03                         STA temp+3
0C74B                               
0C74B                               ;; Add carry to temp+2
0C74B A5 02                         LDA temp+2
0C74D 69 00                         ADC #$00
0C74F 85 02                         STA temp+2
0C751                           
0C751                               ;; Convert tile data to loop count and tile type
0C751                               ;; temp+4 = color
0C751 A5 01                         LDA temp+1
0C753 29 07                         AND #%00000111
0C755 85 04                         STA temp+4
0C757                               
0C757                               ;; If color = 7, this is a wall
0C757 C9 07                         CMP #%00000111
0C759 F0 12                         BEQ +wallHack
0C75B                                   
0C75B                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C75B 29 01                             AND #%00000001
0C75D F0 02                             BEQ +
0C75F A9 05                                 LDA #$05
0C761                                   +
0C761 85 07                             STA temp+7
0C763                                
0C763                                   ;; temp+5 = tile type
0C763 A5 01                             LDA temp+1
0C765 4A                                LSR
0C766 4A                                LSR
0C767 4A                                LSR
0C768 29 03                             AND #%00000011
0C76A 4C 73 C7                          JMP +setTileType
0C76D                               +wallHack:
0C76D                               
0C76D                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C76D A9 00                         LDA #$00
0C76F 85 07                         STA temp+7
0C771 A9 04                         LDA #$04
0C773                           
0C773                           +setTileType:    
0C773 85 05                         STA temp+5
0C775                               
0C775                               ;; X = tile offset
0C775 18                            CLC
0C776 65 07                         ADC temp+7
0C778 AA                            TAX
0C779                               
0C779                               ;; temp+6 = number of tiles
0C779 A5 01                         LDA temp+1
0C77B 29 60                         AND #%01100000
0C77D 4A                            LSR
0C77E 4A                            LSR
0C77F 4A                            LSR
0C780 4A                            LSR
0C781 4A                            LSR
0C782 85 06                         STA temp+6
0C784                               
0C784                               ;; Translate (x,y) to (y,x) for tile RAM
0C784 A5 00                         LDA temp
0C786 0A                            ASL
0C787 0A                            ASL
0C788 0A                            ASL
0C789 0A                            ASL
0C78A 85 08                         STA temp+8
0C78C A5 00                         LDA temp
0C78E 4A                            LSR
0C78F 4A                            LSR
0C790 4A                            LSR
0C791 4A                            LSR
0C792 05 08                         ORA temp+8
0C794 85 00                         STA temp
0C796                               
0C796                               ;; Set up loop
0C796 98                            TYA
0C797 48                            PHA
0C798 A4 06                         LDY temp+6
0C79A                           
0C79A                               -drawTileLoop:
0C79A                                   ;; Write PPU address
0C79A 2C 02 20                          BIT PPU_STATUS
0C79D A5 02                             LDA temp+2
0C79F 8D 06 20                          STA PPU_ADDR
0C7A2 A5 03                             LDA temp+3
0C7A4 8D 06 20                          STA PPU_ADDR
0C7A7                                   
0C7A7                                   ;; Write first and second tile
0C7A7 BD FD D3                          LDA tbl_GametileTopLeft,x
0C7AA 8D 07 20                          STA PPU_DATA
0C7AD BD 07 D4                          LDA tbl_GametileTopRight,x
0C7B0 8D 07 20                          STA PPU_DATA
0C7B3                                   
0C7B3                                   ;; Update PPU address
0C7B3 2C 02 20                          BIT PPU_STATUS
0C7B6 A5 02                             LDA temp+2
0C7B8 8D 06 20                          STA PPU_ADDR
0C7BB A5 03                             LDA temp+3
0C7BD 18                                CLC
0C7BE 69 20                             ADC #$20
0C7C0 8D 06 20                          STA PPU_ADDR
0C7C3                                   
0C7C3                                   ;; Write third and fourth tile
0C7C3 BD 11 D4                          LDA tbl_GametileBottomLeft,x
0C7C6 8D 07 20                          STA PPU_DATA
0C7C9 BD 1B D4                          LDA tbl_GametileBottomRight,x
0C7CC 8D 07 20                          STA PPU_DATA
0C7CF                           
0C7CF                                   ;; Push x-register to stack
0C7CF 8A                                TXA
0C7D0 48                                PHA
0C7D1                                   
0C7D1                                   ;; Update tile RAM (aka collision table)
0C7D1 A6 05                             LDX temp+5
0C7D3 BD 25 D4                          LDA tbl_GameTileRamByte,x
0C7D6 05 04                             ORA temp+4
0C7D8 0A                                ASL
0C7D9 09 01                             ORA #%00000001
0C7DB A6 00                             LDX temp
0C7DD 9D 00 04                          STA tile_type,x
0C7E0                           
0C7E0                                   ;; Check if shade 1 should be drawn
0C7E0 E8                                INX
0C7E1 BD 00 04                          LDA tile_type,x
0C7E4 D0 05                             BNE +
0C7E6 A9 00                                 LDA #$00
0C7E8 8D 07 20                              STA PPU_DATA
0C7EB                                   +
0C7EB                                   
0C7EB                                   ;; Check if shade 2 should be drawn
0C7EB A5 03                             LDA temp+3
0C7ED 18                                CLC
0C7EE 69 41                             ADC #$41
0C7F0 85 03                             STA temp+3
0C7F2 A5 02                             LDA temp+2
0C7F4 69 00                             ADC #$00
0C7F6 85 02                             STA temp+2
0C7F8                                   
0C7F8 8A                                TXA
0C7F9 18                                CLC
0C7FA 69 0F                             ADC #$0F
0C7FC AA                                TAX
0C7FD                                   
0C7FD BD 00 04                          LDA tile_type,x
0C800 D0 0F                             BNE +
0C802 A5 02                                 LDA temp+2
0C804 8D 06 20                              STA PPU_ADDR
0C807 A5 03                                 LDA temp+3
0C809 8D 06 20                              STA PPU_ADDR
0C80C A9 00                                 LDA #$00
0C80E 8D 07 20                              STA PPU_DATA
0C811                                   +
0C811                           
0C811                                   ;; Check if shade 3 should be drawn
0C811 E8                                INX
0C812 E6 03                             INC temp+3
0C814 BD 00 04                          LDA tile_type,x
0C817 D0 0F                             BNE +
0C819 A5 02                                 LDA temp+2
0C81B 8D 06 20                              STA PPU_ADDR
0C81E A5 03                                 LDA temp+3
0C820 8D 06 20                              STA PPU_ADDR
0C823 A9 00                                 LDA #$00
0C825 8D 07 20                              STA PPU_DATA
0C828                                   +
0C828                                   
0C828                                   ;; Restore x-register from stack
0C828 68                                PLA
0C829 AA                                TAX
0C82A                                   
0C82A                                   ;; Reset pointer for next tile
0C82A A5 03                             LDA temp+3
0C82C 38                                SEC
0C82D E9 42                             SBC #$42
0C82F 85 03                             STA temp+3
0C831 A5 02                             LDA temp+2
0C833 E9 00                             SBC #$00
0C835 85 02                             STA temp+2
0C837                                   
0C837                                   ;; Draw next metatile in this loop (if any left)
0C837 88                                DEY
0C838 30 27                             BMI +doneDrawingRowColumn
0C83A                                   
0C83A                                   ;; Is it a row or a column?
0C83A A5 01                             LDA temp+1
0C83C 10 17                             BPL +
0C83E                                       ;; It is a column: move pointer down (+$40)
0C83E A5 03                                 LDA temp+3
0C840 18                                    CLC
0C841 69 40                                 ADC #$40
0C843 85 03                                 STA temp+3
0C845 A5 02                                 LDA temp+2
0C847 69 00                                 ADC #$00
0C849 85 02                                 STA temp+2
0C84B                                       
0C84B                                       ;; Add 16 to temp (as a tile RAM pointer)
0C84B A5 00                                 LDA temp
0C84D 18                                    CLC
0C84E 69 10                                 ADC #$10
0C850 85 00                                 STA temp
0C852 4C 5E C8                              JMP +drawNextTile
0C855                                   +
0C855                                   
0C855                                   ;; It is a row: move pointer right (+$02)
0C855 A5 03                             LDA temp+3
0C857 18                                CLC
0C858 69 02                             ADC #$02
0C85A 85 03                             STA temp+3
0C85C                                   
0C85C                                   ;; Add 1 to temp (as a tile RAM pointer)
0C85C E6 00                             INC temp
0C85E                           
0C85E                               
0C85E                               ;; Next tile in the row/column
0C85E                                   +drawNextTile:
0C85E 4C 9A C7                      JMP -drawTileLoop
0C861                           
0C861                               ;; Go to the next set of tiles
0C861                           +doneDrawingRowColumn:
0C861 68                            PLA
0C862 A8                            TAY
0C863 C8                            INY
0C864 4C 18 C7                      JMP -drawRowColumnLoop
0C867                           
0C867                           ;; Level loading is done
0C867                           +doneLevelLoad:
0C867                           
0C867                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C867 A9 20                         LDA #$20
0C869 8D 06 20                      STA PPU_ADDR
0C86C A9 A2                         LDA #$A2
0C86E 8D 06 20                      STA PPU_ADDR
0C871 A9 35                         LDA #$35
0C873 20 9D CA                      JSR sub_Draw28HorizontalTiles
0C876                           
0C876                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C876 A9 23                         LDA #$23
0C878 8D 06 20                      STA PPU_ADDR
0C87B A9 42                         LDA #$42
0C87D 8D 06 20                      STA PPU_ADDR
0C880 A9 31                         LDA #$31
0C882 20 9D CA                      JSR sub_Draw28HorizontalTiles
0C885                           
0C885                               ;; Left & right game bounds
0C885                               ;; Set PPU_ADDR and store in temp variables
0C885 A9 20                         LDA #$20
0C887 85 00                         STA temp
0C889 8D 06 20                      STA PPU_ADDR
0C88C A9 C1                         LDA #$C1
0C88E 85 01                         STA temp+1
0C890 8D 06 20                      STA PPU_ADDR
0C893                               
0C893                               ;; Set vertical bound tile and set up loop
0C893 A0 33                         LDY #$33
0C895 A2 14                         LDX #20
0C897                               -
0C897                                   ;; Show left tile
0C897 8C 07 20                          STY PPU_DATA
0C89A                                   
0C89A                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C89A A5 00                             LDA temp
0C89C 8D 06 20                          STA PPU_ADDR
0C89F A5 01                             LDA temp+1
0C8A1 18                                CLC
0C8A2 69 1D                             ADC #29
0C8A4 85 01                             STA temp+1
0C8A6 8D 06 20                          STA PPU_ADDR
0C8A9                           
0C8A9                                   ;; Show right tile
0C8A9 8C 07 20                          STY PPU_DATA
0C8AC                           
0C8AC                                   ;; Check if we're done yet
0C8AC CA                                DEX
0C8AD F0 18                             BEQ +drawCorners
0C8AF                                   
0C8AF                                   ;; Not done yet: add 3 to low byte for next left bound
0C8AF A5 01                             LDA temp+1
0C8B1 18                                CLC
0C8B2 69 03                             ADC #3
0C8B4 85 01                             STA temp+1
0C8B6                                   
0C8B6                                   ;; Apply carry to high byte
0C8B6 A5 00                             LDA temp
0C8B8 69 00                             ADC #$00
0C8BA 85 00                             STA temp
0C8BC                                   
0C8BC                                   ;; Store next PPU_ADDR to draw at
0C8BC 8D 06 20                          STA PPU_ADDR
0C8BF A5 01                             LDA temp+1
0C8C1 8D 06 20                          STA PPU_ADDR
0C8C4 4C 97 C8                      JMP -
0C8C7                               
0C8C7                               
0C8C7                           
0C8C7                           +drawCorners:
0C8C7                               ;; Draw the corners of the playing field
0C8C7 A9 20                         LDA #$20
0C8C9 8D 06 20                      STA PPU_ADDR
0C8CC A9 A1                         LDA #$A1
0C8CE 8D 06 20                      STA PPU_ADDR
0C8D1 A9 39                         LDA #$39
0C8D3 8D 07 20                      STA PPU_DATA
0C8D6                           
0C8D6 A9 20                         LDA #$20
0C8D8 8D 06 20                      STA PPU_ADDR
0C8DB A9 BE                         LDA #$BE
0C8DD 8D 06 20                      STA PPU_ADDR
0C8E0 A9 3A                         LDA #$3A
0C8E2 8D 07 20                      STA PPU_DATA
0C8E5                               ;; (added background tile for Sprite-0 hit)
0C8E5 A9 3F                         LDA #$3F
0C8E7 8D 07 20                      STA PPU_DATA
0C8EA                           
0C8EA A9 23                         LDA #$23
0C8EC 8D 06 20                      STA PPU_ADDR
0C8EF A9 41                         LDA #$41
0C8F1 8D 06 20                      STA PPU_ADDR
0C8F4 A9 36                         LDA #$36
0C8F6 8D 07 20                      STA PPU_DATA
0C8F9                           
0C8F9 A9 23                         LDA #$23
0C8FB 8D 06 20                      STA PPU_ADDR
0C8FE A9 5E                         LDA #$5E
0C900 8D 06 20                      STA PPU_ADDR
0C903 A9 34                         LDA #$34
0C905 8D 07 20                      STA PPU_DATA
0C908                           
0C908                           
0C908                               ;; Draw the hud labels
0C908 A9 20                         LDA #$20
0C90A 8D 06 20                      STA PPU_ADDR
0C90D A9 62                         LDA #$62
0C90F 8D 06 20                      STA PPU_ADDR
0C912 A2 00                         LDX #$00
0C914                               -
0C914 BD 2A D4                          LDA tbl_HudText,x
0C917 8D 07 20                          STA PPU_DATA
0C91A E8                                INX
0C91B E0 1C                             CPX #28
0C91D D0 F5                         BNE -
0C91F                           
0C91F                           
0C91F                               ;; Draw the current score
0C91F A9 20                         LDA #$20
0C921 8D 06 20                      STA PPU_ADDR
0C924 A9 83                         LDA #$83
0C926 8D 06 20                      STA PPU_ADDR
0C929 A2 00                         LDX #$00
0C92B                               -
0C92B B5 1C                             LDA ball_score,x
0C92D 18                                CLC
0C92E 69 01                             ADC #$01
0C930 8D 07 20                          STA PPU_DATA
0C933 E8                                INX
0C934 E0 06                             CPX #$06
0C936 D0 F3                         BNE -
0C938                           
0C938                           
0C938                               ;; Draw the level number
0C938                               ;; (with primitive HEX>DEC)
0C938 A5 34                         LDA current_level
0C93A 18                            CLC
0C93B 69 01                         ADC #$01
0C93D 85 01                         STA temp+1
0C93F                               
0C93F C9 14                         CMP #20
0C941 B0 13                         BCS +tempIsTwo
0C943                               
0C943 C9 0A                         CMP #10
0C945 B0 05                         BCS +tempIsOne
0C947                               
0C947 A9 00                         LDA #$00
0C949 4C 5D C9                      JMP +setTemp
0C94C                               
0C94C                           +tempIsOne:
0C94C 38                            SEC
0C94D E9 0A                         SBC #10
0C94F 85 01                         STA temp+1
0C951 A9 01                         LDA #$01
0C953 4C 5D C9                      JMP +setTemp
0C956                               
0C956                           +tempIsTwo:
0C956 38                            SEC
0C957 E9 14                         SBC #20
0C959 85 01                         STA temp+1
0C95B A9 02                         LDA #$02
0C95D                           
0C95D                           +setTemp:
0C95D 85 00                         STA temp
0C95F                               
0C95F E6 00                         INC temp
0C961 E6 01                         INC temp+1
0C963                               
0C963 A9 20                         LDA #$20
0C965 8D 06 20                      STA PPU_ADDR
0C968 A9 8B                         LDA #$8B
0C96A 8D 06 20                      STA PPU_ADDR
0C96D A5 00                         LDA temp
0C96F 8D 07 20                      STA PPU_DATA
0C972 A5 01                         LDA temp+1
0C974 8D 07 20                      STA PPU_DATA
0C977                           
0C977                           
0C977                               ;; Draw lives (presumes lives to be capped at 9)
0C977 A9 20                         LDA #$20
0C979 8D 06 20                      STA PPU_ADDR
0C97C A9 92                         LDA #$92
0C97E 8D 06 20                      STA PPU_ADDR
0C981 A6 1B                         LDX ball_lives
0C983 E8                            INX
0C984 8E 07 20                      STX PPU_DATA
0C987                           
0C987                           
0C987                               ;; Set and draw bonus
0C987 A9 07                         LDA #$07
0C989 85 22                         STA ball_bonus
0C98B A9 09                         LDA #$09
0C98D 85 23                         STA ball_bonus+1
0C98F 85 24                         STA ball_bonus+2
0C991                               
0C991 A9 20                         LDA #$20
0C993 8D 06 20                      STA PPU_ADDR
0C996 A9 9A                         LDA #$9A
0C998 8D 06 20                      STA PPU_ADDR
0C99B A2 00                         LDX #$00
0C99D                               -
0C99D B5 22                             LDA ball_bonus,x
0C99F 18                                CLC
0C9A0 69 01                             ADC #$01
0C9A2 8D 07 20                          STA PPU_DATA
0C9A5 E8                                INX
0C9A6 E0 03                             CPX #$03
0C9A8 D0 F3                         BNE -
0C9AA                           
0C9AA                           
0C9AA                               ;; Set attribute data to RAM
0C9AA                               
0C9AA                               ;; Byte 0-7 of attribute ram should be #%10100000
0C9AA A2 00                         LDX #$00
0C9AC A9 A0                         LDA #$A0
0C9AE                               -
0C9AE 9D A0 04                          STA tile_attributes,x
0C9B1 E8                                INX
0C9B2 E0 08                             CPX #$08
0C9B4 D0 F8                         BNE -
0C9B6                           
0C9B6                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C9B6                           
0C9B6                           -attributeLoop:
0C9B6                               ;; Reset current attribute value
0C9B6 A9 00                         LDA #$00
0C9B8 85 02                         STA temp+2
0C9BA                           
0C9BA                               ;; Get first metatile in tile ram based on attribute index
0C9BA                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C9BA 8A                            TXA
0C9BB                           
0C9BB 38                            SEC
0C9BC E9 08                         SBC #$08
0C9BE 85 01                         STA temp+1      ; attr - 8 (temp1)
0C9C0 0A                            ASL             ; * 2
0C9C1 85 00                         STA temp        ; temp = temp1 * 2
0C9C3                           
0C9C3 A5 01                         LDA temp+1      ; temp1
0C9C5 29 F8                         AND #%11111000  ; rounded down to 8's
0C9C7 0A                            ASL             ; * 2
0C9C8 18                            CLC
0C9C9 65 00                         ADC temp        ; + temp1 * 2
0C9CB 85 00                         STA temp        ; first metatile
0C9CD                           
0C9CD                               ;; Store first metatile in y-register
0C9CD A8                            TAY
0C9CE                           
0C9CE                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C9CE 8A                            TXA
0C9CF 29 07                         AND #%00000111
0C9D1 C9 07                         CMP #%00000111
0C9D3 F0 0B                         BEQ +
0C9D5                           
0C9D5                               ;; If X >= $30, don't apply bottom right metatile
0C9D5 E0 30                         CPX #$30
0C9D7 B0 07                         BCS +
0C9D9                               
0C9D9                               ;; Add metatile1 subpalette to attribute value
0C9D9 B9 00 04                      LDA tile_type,y
0C9DC 29 0C                         AND #%00001100
0C9DE 85 02                         STA temp+2
0C9E0                               +
0C9E0                           
0C9E0                           
0C9E0                               ;; Apply second metatile
0C9E0 88                            DEY
0C9E1                           
0C9E1                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C9E1 8A                            TXA
0C9E2 29 07                         AND #%00000111
0C9E4 F0 10                         BEQ +
0C9E6                           
0C9E6                               ;; If X >= $30, don't apply bottom left metatile
0C9E6 E0 30                         CPX #$30
0C9E8 B0 0C                         BCS +
0C9EA                           
0C9EA                           
0C9EA                           
0C9EA                               ;; Add metatile2 subpalette to attribute value
0C9EA B9 00 04                      LDA tile_type,y
0C9ED 29 0C                         AND #%00001100
0C9EF 4A                            LSR
0C9F0 4A                            LSR
0C9F1 05 02                         ORA temp+2
0C9F3 4C F8 C9                      JMP ++
0C9F6                               +
0C9F6 A5 02                         LDA temp+2
0C9F8                               ++
0C9F8 0A                            ASL
0C9F9 0A                            ASL
0C9FA 85 02                         STA temp+2
0C9FC                           
0C9FC                           
0C9FC                               ;; Apply third metatile
0C9FC 98                            TYA
0C9FD 38                            SEC
0C9FE E9 0F                         SBC #$0F
0CA00 A8                            TAY
0CA01                           
0CA01                               ;; If X MOD 8 == 7, don't apply top right metatile
0CA01 8A                            TXA
0CA02 29 07                         AND #%00000111
0CA04 C9 07                         CMP #%00000111
0CA06 F0 11                         BEQ +
0CA08                           
0CA08                               ;; If X < $10, don't apply top right metatile
0CA08 8A                            TXA
0CA09 29 F0                         AND #%11110000
0CA0B F0 0C                         BEQ +
0CA0D                           
0CA0D                               ;; Add metatile3 subpalette to attribute value
0CA0D B9 00 04                      LDA tile_type,y
0CA10 29 0C                         AND #%00001100
0CA12 4A                            LSR
0CA13 4A                            LSR
0CA14 05 02                         ORA temp+2
0CA16 4C 1B CA                      JMP ++
0CA19                               +
0CA19 A5 02                         LDA temp+2
0CA1B                               ++
0CA1B 0A                            ASL
0CA1C 0A                            ASL
0CA1D 85 02                         STA temp+2
0CA1F                           
0CA1F                           
0CA1F                               ;; Apply fourth metatile
0CA1F 88                            DEY
0CA20                           
0CA20                               ;; If X MOD 8 == 0, don't apply top left metatile
0CA20 8A                            TXA
0CA21 29 07                         AND #%00000111
0CA23 F0 11                         BEQ +
0CA25                           
0CA25                               ;; If X < $10, don't apply top left metatile
0CA25 8A                            TXA
0CA26 29 F0                         AND #%11110000
0CA28 F0 0C                         BEQ +
0CA2A                           
0CA2A                               ;; Add metatile4 subpalette to attribute value
0CA2A B9 00 04                      LDA tile_type,y
0CA2D 29 0C                         AND #%00001100
0CA2F 4A                            LSR
0CA30 4A                            LSR
0CA31 05 02                         ORA temp+2
0CA33 4C 38 CA                      JMP ++
0CA36                               +
0CA36 A5 02                         LDA temp+2
0CA38                               ++
0CA38 9D A0 04                      STA tile_attributes,x
0CA3B                           
0CA3B                               ;; Check the next attribute, if any left
0CA3B E8                            INX
0CA3C E0 38                         CPX #$38
0CA3E F0 03                         BEQ +
0CA40 4C B6 C9                          JMP -attributeLoop
0CA43                               +
0CA43                           
0CA43                               ;; Stream attribute RAM to PPU
0CA43 2C 02 20                      BIT PPU_STATUS
0CA46 A9 23                         LDA #$23
0CA48 8D 06 20                      STA PPU_ADDR
0CA4B A9 C0                         LDA #$C0
0CA4D 8D 06 20                      STA PPU_ADDR
0CA50 A2 00                         LDX #$00
0CA52                               -
0CA52 BD A0 04                          LDA tile_attributes,x
0CA55 8D 07 20                          STA PPU_DATA
0CA58 E8                                INX
0CA59 E0 40                             CPX #$40
0CA5B D0 F5                         BNE -
0CA5D                           
0CA5D                               ;; Set initial ball position
0CA5D A6 34                         LDX current_level
0CA5F BD B7 D3                      LDA tbl_lvl_ball_startpos,x
0CA62 29 F0                         AND #%11110000
0CA64 18                            CLC
0CA65 69 34                         ADC #$34
0CA67 85 19                         STA ball_ypos_hi
0CA69 BD B7 D3                      LDA tbl_lvl_ball_startpos,x
0CA6C 0A                            ASL
0CA6D 0A                            ASL
0CA6E 0A                            ASL
0CA6F 0A                            ASL
0CA70 18                            CLC
0CA71 69 14                         ADC #$14
0CA73 85 17                         STA ball_xpos_hi
0CA75 A9 00                         LDA #$00
0CA77 85 18                         STA ball_xpos_lo
0CA79 85 1A                         STA ball_ypos_lo
0CA7B                               
0CA7B                               ;; Set initial ball color and direction
0CA7B BD D0 D3                      LDA tbl_lvl_ball_init,x
0CA7E 29 F0                         AND #%11110000
0CA80 85 2C                         STA ball_flags
0CA82 20 1B C4                      JSR sub_ColorizeBall
0CA85                               
0CA85                               ;; Play background noise
0CA85 A9 08                         LDA #$08
0CA87 8D 15 40                      STA APU_STATUS
0CA8A 8D 0F 40                      STA NOISE_LENGTH
0CA8D A9 0E                         LDA #$0E
0CA8F 85 38                         STA current_noise
0CA91 A9 00                         LDA #$00
0CA93 85 36                         STA max_noise
0CA95 85 39                         STA noise_counter
0CA97 85 37                         STA sweep_noise
0CA99 20 A3 C3                      JSR sub_BackgroundNoise
0CA9C                           
0CA9C                               ;; Return
0CA9C 60                            RTS
0CA9D                           
0CA9D                           
0CA9D                           ;; Subroutine: draw 28 tiles in a row
0CA9D                           sub_Draw28HorizontalTiles:
0CA9D A2 1C                         LDX #28
0CA9F                               -
0CA9F 8D 07 20                          STA PPU_DATA
0CAA2 CA                                DEX
0CAA3 D0 FA                         BNE -
0CAA5 60                            RTS0CAA6                           .include "game/subroutine/LoadIntroScreen.asm"
0CAA6                           sub_LoadIntroScreen:
0CAA6                           
0CAA6                               ;; Load intro palette
0CAA6 2C 02 20                      BIT PPU_STATUS
0CAA9 A9 3F                         LDA #$3F
0CAAB 8D 06 20                      STA PPU_ADDR
0CAAE A9 00                         LDA #$00
0CAB0 8D 06 20                      STA PPU_ADDR
0CAB3 A2 00                         LDX #$00
0CAB5                               -
0CAB5 BD 5C CB                          LDA tbl_IntroScreenPalette,x
0CAB8 8D 07 20                          STA PPU_DATA
0CABB E8                                INX
0CABC E0 20                             CPX #$20
0CABE D0 F5                         BNE -
0CAC0                               
0CAC0                               ;; Put ball in the middle
0CAC0 A9 7C                         LDA #$7C
0CAC2 85 17                         STA ball_xpos_hi
0CAC4 85 19                         STA ball_ypos_hi
0CAC6                           
0CAC6                               ;; Clear the screen
0CAC6 20 B0 C3                      JSR sub_ClearScreen
0CAC9                           
0CAC9                               ;; Set up intro screen draw loop
0CAC9 A2 00                         LDX #$00
0CACB                           
0CACB                           -loop_IntroScreenData:
0CACB                           
0CACB                               ;; Get current byte from intro screen data
0CACB BD 84 CB                      LDA tbl_IntroScreenData,x
0CACE                           
0CACE                               ;; If current byte is #$3F, we're done drawing.
0CACE C9 3F                         CMP #$3F
0CAD0 D0 03                         BNE +
0CAD2 4C 1F CB                          JMP +goToEndIntroScreen
0CAD5                               +
0CAD5                           
0CAD5                               ;; If highest bits are %11, draw a plain tile
0CAD5 29 C0                         AND #%11000000
0CAD7 D0 03                         BNE +
0CAD9 4C FF CA                          JMP +drawTile
0CADC                               +
0CADC                               
0CADC                               ;; If highest bits are %01, set the PPU address
0CADC                               ;; If not, draw two logo tiles
0CADC C9 40                         CMP #%01000000
0CADE D0 03                         BNE +drawLogo
0CAE0 4C 09 CB                          JMP +setPpuAddr
0CAE3                           
0CAE3                           +drawLogo:
0CAE3                               ;; Get bits 0-2 and store in a temp variable
0CAE3 BD 84 CB                      LDA tbl_IntroScreenData,x
0CAE6 29 07                         AND #%00000111
0CAE8 85 00                         STA temp
0CAEA                               
0CAEA                               ;; Get bits 3-5, shift over to get a value from 0-7
0CAEA BD 84 CB                      LDA tbl_IntroScreenData,x
0CAED 4A                            LSR
0CAEE 4A                            LSR
0CAEF 4A                            LSR
0CAF0 29 07                         AND #%00000111
0CAF2                               
0CAF2                               ;; Draw the tile that corresponds with that value
0CAF2 A8                            TAY
0CAF3 20 93 C4                      JSR sub_drawIntroScreenLogoTile
0CAF6                               
0CAF6                               ;; Do the same for the value stored in temp
0CAF6 A4 00                         LDY temp
0CAF8 20 93 C4                      JSR sub_drawIntroScreenLogoTile
0CAFB                           
0CAFB                               ;; Next byte please
0CAFB E8                            INX
0CAFC 4C CB CA                      JMP -loop_IntroScreenData
0CAFF                           
0CAFF                           +drawTile:
0CAFF                               ;; Just draw the tile value on screen
0CAFF BD 84 CB                      LDA tbl_IntroScreenData,x
0CB02 8D 07 20                      STA PPU_DATA
0CB05                               
0CB05                               ;; Next byte please
0CB05 E8                            INX
0CB06 4C CB CA                      JMP -loop_IntroScreenData
0CB09                           
0CB09                           
0CB09                           +setPpuAddr:
0CB09                               ;; Reset the PPU latch
0CB09 2C 02 20                      BIT PPU_STATUS
0CB0C                               
0CB0C                               ;; Sanitize and write the high byte of the PPU address
0CB0C BD 84 CB                      LDA tbl_IntroScreenData,x
0CB0F 29 3F                         AND #%00111111
0CB11 8D 06 20                      STA PPU_ADDR
0CB14                           
0CB14                               ;; Write the low byte of the PPU address
0CB14 E8                            INX
0CB15 BD 84 CB                      LDA tbl_IntroScreenData,x
0CB18 8D 06 20                      STA PPU_ADDR
0CB1B                               
0CB1B                               ;; PPU has been set up to draw tiles at the correct spot now.
0CB1B                               
0CB1B                               ;; Next byte please.
0CB1B E8                            INX
0CB1C 4C CB CA                      JMP -loop_IntroScreenData
0CB1F                           
0CB1F                           +goToEndIntroScreen:
0CB1F                           
0CB1F                               ;; To color the 1.LEVEL: line green, we need to update two
0CB1F                               ;; values in the PPU attribute data.
0CB1F 2C 02 20                      BIT PPU_STATUS
0CB22 A9 23                         LDA #$23
0CB24 8D 06 20                      STA PPU_ADDR
0CB27 A9 CB                         LDA #$CB
0CB29 8D 06 20                      STA PPU_ADDR
0CB2C A9 0A                         LDA #%00001010
0CB2E 8D 07 20                      STA PPU_DATA
0CB31 8D 07 20                      STA PPU_DATA
0CB34                           
0CB34 60                            RTS
0CB35                           
0CB35                           .include "game/subroutine/LoadWinScreen.asm"
0CB35                           sub_LoadWinScreen:
0CB35 60                            RTS
0CB36                           
0CB36                           .include "game/subroutine/WriteByteToPPU.asm"
0CB36                           sub_WriteByteToPPUBuffer:
0CB36                           
0CB36                               ;; Prevent updating until full 3-byte buffer is filled,
0CB36                               ;; so that graphics won't glitch out if NMI happens during
0CB36                               ;; updating the buffer
0CB36 A9 00                         LDA #$00
0CB38 85 2F                         STA ppu_buffer_update
0CB3A                           
0CB3A                               ;; Check if buffer full; if so, wait a frame and force update
0CB3A A4 30                         LDY ppu_buffer_pointer
0CB3C C0 30                         CPY #$30
0CB3E D0 05                         BNE +
0CB40 E6 2F                             INC ppu_buffer_update
0CB42 20 9D C3                          JSR sub_WaitForVBlank
0CB45                               +
0CB45                           
0CB45                               ;; Add ppu_addr high byte to buffer
0CB45 A5 00                         LDA temp
0CB47 99 00 03                      STA ppu_buffer,y
0CB4A                           
0CB4A                               ;; Add ppu_addr low byte to buffer
0CB4A C8                            INY
0CB4B A5 01                         LDA temp+1
0CB4D 99 00 03                      STA ppu_buffer,y
0CB50                           
0CB50                               ;; Add ppu_data to buffer
0CB50 C8                            INY
0CB51 A5 02                         LDA temp+2
0CB53 99 00 03                      STA ppu_buffer,y
0CB56                           
0CB56                               ;; Update buffer pointer
0CB56 C8                            INY
0CB57 84 30                         STY ppu_buffer_pointer
0CB59                           
0CB59                               ;; Tell NMI to update next round
0CB59 E6 2F                         INC ppu_buffer_update
0CB5B                           
0CB5B                               ;; Return
0CB5B 60                            RTS0CB5C                           
0CB5C                           
0CB5C                           ;; LUTs
0CB5C                           .include "game/include/tables.asm"
0CB5C                           
0CB5C                           ;; Initial screen palette
0CB5C                           tbl_IntroScreenPalette:
0CB5C 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CB60 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CB64 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CB68 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CB6C                           
0CB6C 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CB70 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CB74 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CB78 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CB7C                           
0CB7C                           
0CB7C                           ;; Intro: mapping logo index to chr tile
0CB7C                           tbl_IntroScreenLogoChr:
0CB7C 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CB84                           
0CB84                           
0CB84                           ;; Intro screen data
0CB84                           tbl_IntroScreenData:
0CB84                           
0CB84                               ;; Set PPU address $20AC and draw
0CB84 60 AC                         .db #$60, #$AC
0CB86 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CB8E                           
0CB8E                               ;; Set PPU address $20CF and draw
0CB8E 60 CF                         .db #$60, #$CF
0CB90 01 02                         .db #_0, #_1
0CB92                               
0CB92                               ;; Set PPU address $2122 and draw
0CB92 61 22                         .db #$61, #$22
0CB94 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CB9B 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CBA1 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CBA9 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CBAE                               
0CBAE                               ;; Set PPU address $2147 and draw
0CBAE 61 47                         .db #$61, #$47
0CBB0 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CBB7 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CBBB 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CBC1 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CBC7                               
0CBC7                               ;; Set PPU address $218B and draw
0CBC7 61 8B                         .db #$61, #$8B
0CBC9 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CBCF 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CBD4                               
0CBD4                               ;; Set PPU address $21E6 and draw
0CBD4 61 E6                         .db #$61, #$E6
0CBD6 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CBDE 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CBE2 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CBE9                               
0CBE9                               ;; Set PPU address $222D and draw
0CBE9 62 2D                         .db #$62, #$2D
0CBEB 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CBF1                               
0CBF1                               ;; Set PPU address $2281
0CBF1 62 81                         .db #$62, #$81
0CBF3                               
0CBF3                               ;; Draw the Crillion logo
0CBF3 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CBF7 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBFB C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CBFF E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CC03                               
0CC03 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CC07 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC0B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC0F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC13                               
0CC13 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CC17 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC1B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC1F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC23                           
0CC23 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CC27 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC2B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC2F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC33                               
0CC33 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CC37 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC3B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC3F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC43                           
0CC43 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CC47 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CC4B C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CC4F F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CC52                           
0CC52                               ;; End of intro
0CC52 3F                            .db #$3F
0CC53                           
0CC53                           
0CC53                           ;; Animation frames table
0CC53                           .include "game/include/table/animation_frames.asm"
0CC53                           ;; CHR tile-id's per slide of explosion
0CC53                           explosion_slide0:
0CC53 00 00 00                      .db #$00, #$00, #$00
0CC56 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CC59 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CC5C                           
0CC5C                           explosion_slide1:
0CC5C 00 00 00                      .db #$00, #$00, #$00
0CC5F 29 2A 2B                      .db #$29, #$2A, #$2B
0CC62 39 3A 3B                      .db #$39, #$3A, #$3B
0CC65                           
0CC65                           explosion_slide2:
0CC65 16 00 00                      .db #$16, #$00, #$00
0CC68 26 27 28                      .db #$26, #$27, #$28
0CC6B 36 37 38                      .db #$36, #$37, #$38
0CC6E                           
0CC6E                           explosion_slide3:
0CC6E 00 14 15                      .db #$00, #$14, #$15
0CC71 23 24 25                      .db #$23, #$24, #$25
0CC74 33 34 35                      .db #$33, #$34, #$35
0CC77                           
0CC77                           explosion_slide4:
0CC77 10 11 12                      .db #$10, #$11, #$12
0CC7A 20 21 22                      .db #$20, #$21, #$22
0CC7D 30 31 32                      .db #$30, #$31, #$32
0CC80                           
0CC80                           ;; High and low bytes of animation slides
0CC80                           explosion_anim_hi:
0CC80 CC                            .db >#explosion_slide0
0CC81 CC                            .db >#explosion_slide1
0CC82 CC                            .db >#explosion_slide2
0CC83 CC                            .db >#explosion_slide3
0CC84 CC                            .db >#explosion_slide4
0CC85 CC                            .db >#explosion_slide4
0CC86 CC                            .db >#explosion_slide3
0CC87 CC                            .db >#explosion_slide2
0CC88 CC                            .db >#explosion_slide1
0CC89 CC                            .db >#explosion_slide0
0CC8A                           
0CC8A                           explosion_anim_lo:
0CC8A 53                            .db <#explosion_slide0
0CC8B 5C                            .db <#explosion_slide1
0CC8C 65                            .db <#explosion_slide2
0CC8D 6E                            .db <#explosion_slide3
0CC8E 77                            .db <#explosion_slide4
0CC8F 77                            .db <#explosion_slide4
0CC90 6E                            .db <#explosion_slide3
0CC91 65                            .db <#explosion_slide2
0CC92 5C                            .db <#explosion_slide1
0CC93 53                            .db <#explosion_slide0
0CC94                           
0CC94                           
0CC94                           
0CC94                           ;; Ball palette color table (CBRYGM)
0CC94                           tbl_BallColorDark:
0CC94 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CC9A                            
0CC9A                           tbl_BallColorLight:
0CC9A 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CCA0                           
0CCA0                               
0CCA0                           ;; Screen mode drawing routine addresses
0CCA0                           tbl_LoadScreenHi:
0CCA0 CA C6 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CCA3                           
0CCA3                           tbl_LoadScreenLo:
0CCA3 A6 FE 35                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CCA6                           
0CCA6                           
0CCA6                           ;; Level data
0CCA6                           .include "game/include/table/level_data.asm"
0CCA6                           lvl_layout_01:
0CCA6 61 21                         .db #$61, #%00100001
0CCA8 52 61                         .db #$52, #%01100001
0CCAA 43 65                         .db #$43, #%01100101
0CCAC 83 05                         .db #$83, #%00000101
0CCAE 93 15                         .db #$93, #%00010101
0CCB0 34 7A                         .db #$34, #%01111010
0CCB2 74 7A                         .db #$74, #%01111010
0CCB4 35 7A                         .db #$35, #%01111010
0CCB6 75 7A                         .db #$75, #%01111010
0CCB8 46 65                         .db #$46, #%01100101
0CCBA 86 25                         .db #$86, #%00100101
0CCBC 57 61                         .db #$57, #%01100001
0CCBE 68 21                         .db #$68, #%00100001
0CCC0 FF                            .db #LEVEL_END
0CCC1                           
0CCC1                           lvl_layout_02:
0CCC1 C0 0A                         .db #$C0, #%00001010
0CCC3 11 15                         .db #$11, #%00010101
0CCC5 21 62                         .db #$21, #%01100010
0CCC7 61 62                         .db #$61, #%01100010
0CCC9 A1 42                         .db #$A1, #%01000010
0CCCB 12 67                         .db #$12, #%01100111
0CCCD 52 67                         .db #$52, #%01100111
0CCCF 92 67                         .db #$92, #%01100111
0CCD1 C3 0D                         .db #$C3, #%00001101
0CCD3 14 11                         .db #$14, #%00010001
0CCD5 24 65                         .db #$24, #%01100101
0CCD7 64 65                         .db #$64, #%01100101
0CCD9 A4 45                         .db #$A4, #%01000101
0CCDB 15 67                         .db #$15, #%01100111
0CCDD 55 67                         .db #$55, #%01100111
0CCDF 95 67                         .db #$95, #%01100111
0CCE1 17 12                         .db #$17, #%00010010
0CCE3 27 61                         .db #$27, #%01100001
0CCE5 67 61                         .db #$67, #%01100001
0CCE7 A7 41                         .db #$A7, #%01000001
0CCE9 38 7A                         .db #$38, #%01111010
0CCEB 98 5A                         .db #$98, #%01011010
0CCED 18 27                         .db #$18, #%00100111
0CCEF 48 27                         .db #$48, #%00100111
0CCF1 78 27                         .db #$78, #%00100111
0CCF3 C8 07                         .db #$C8, #%00000111
0CCF5 FF                            .db #LEVEL_END
0CCF6                           
0CCF6                           lvl_layout_03:
0CCF6 00 7A                         .db #$00, #%01111010
0CCF8 40 7A                         .db #$40, #%01111010
0CCFA 80 7A                         .db #$80, #%01111010
0CCFC C0 1A                         .db #$C0, #%00011010
0CCFE 10 A1                         .db #$10, #%10100001
0CD00 13 E1                         .db #$13, #%11100001
0CD02 17 C1                         .db #$17, #%11000001
0CD04 30 C1                         .db #$30, #%11000001
0CD06 34 C1                         .db #$34, #%11000001
0CD08 38 A1                         .db #$38, #%10100001
0CD0A 50 E1                         .db #$50, #%11100001
0CD0C 55 81                         .db #$55, #%10000001
0CD0E 57 C1                         .db #$57, #%11000001
0CD10 70 C1                         .db #$70, #%11000001
0CD12 73 A1                         .db #$73, #%10100001
0CD14 76 E1                         .db #$76, #%11100001
0CD16 90 E1                         .db #$90, #%11100001
0CD18 95 81                         .db #$95, #%10000001
0CD1A 97 C1                         .db #$97, #%11000001
0CD1C B0 C1                         .db #$B0, #%11000001
0CD1E B4 C1                         .db #$B4, #%11000001
0CD20 B8 A1                         .db #$B8, #%10100001
0CD22 D0 A1                         .db #$D0, #%10100001
0CD24 D3 E1                         .db #$D3, #%11100001
0CD26 D7 C1                         .db #$D7, #%11000001
0CD28 FF                            .db #LEVEL_END
0CD29                           
0CD29                           lvl_layout_04:
0CD29 00 4C                         .db #$00, #%01001100
0CD2B 40 6C                         .db #$40, #%01101100
0CD2D 80 4C                         .db #$80, #%01001100
0CD2F 81 AC                         .db #$81, #%10101100
0CD31 C1 2C                         .db #$C1, #%00101100
0CD33 02 6C                         .db #$02, #%01101100
0CD35 42 CC                         .db #$42, #%11001100
0CD37 62 EC                         .db #$62, #%11101100
0CD39 A2 CC                         .db #$A2, #%11001100
0CD3B C3 CC                         .db #$C3, #%11001100
0CD3D 04 4C                         .db #$04, #%01001100
0CD3F 84 2C                         .db #$84, #%00101100
0CD41 25 AC                         .db #$25, #%10101100
0CD43 85 AC                         .db #$85, #%10101100
0CD45 06 AC                         .db #$06, #%10101100
0CD47 36 CC                         .db #$36, #%11001100
0CD49 56 CC                         .db #$56, #%11001100
0CD4B 66 EC                         .db #$66, #%11101100
0CD4D 96 6C                         .db #$96, #%01101100
0CD4F C7 AC                         .db #$C7, #%10101100
0CD51 08 2C                         .db #$08, #%00101100
0CD53 78 6C                         .db #$78, #%01101100
0CD55 D8 0C                         .db #$D8, #%00001100
0CD57 30 A1                         .db #$30, #%10100001
0CD59 B0 21                         .db #$B0, #%00100001
0CD5B 01 41                         .db #$01, #%01000001
0CD5D 41 61                         .db #$41, #%01100001
0CD5F 91 A1                         .db #$91, #%10100001
0CD61 A1 21                         .db #$A1, #%00100001
0CD63 52 C1                         .db #$52, #%11000001
0CD65 72 E1                         .db #$72, #%11100001
0CD67 B2 C1                         .db #$B2, #%11000001
0CD69 C2 21                         .db #$C2, #%00100001
0CD6B 03 41                         .db #$03, #%01000001
0CD6D 33 C1                         .db #$33, #%11000001
0CD6F 83 21                         .db #$83, #%00100001
0CD71 D3 E1                         .db #$D3, #%11100001
0CD73 05 21                         .db #$05, #%00100001
0CD75 45 E1                         .db #$45, #%11100001
0CD77 A5 21                         .db #$A5, #%00100001
0CD79 16 A1                         .db #$16, #%10100001
0CD7B 76 A1                         .db #$76, #%10100001
0CD7D 27 A1                         .db #$27, #%10100001
0CD7F 57 01                         .db #$57, #%00000001
0CD81 87 41                         .db #$87, #%01000001
0CD83 B7 A1                         .db #$B7, #%10100001
0CD85 19 21                         .db #$19, #%00100001
0CD87 39 41                         .db #$39, #%01000001
0CD89 89 41                         .db #$89, #%01000001
0CD8B C9 21                         .db #$C9, #%00100001
0CD8D D0 1A                         .db #$D0, #%00011010
0CD8F 55 1A                         .db #$55, #%00011010
0CD91 95 1A                         .db #$95, #%00011010
0CD93 D7 1A                         .db #$D7, #%00011010
0CD95 09 1A                         .db #$09, #%00011010
0CD97 79 1A                         .db #$79, #%00011010
0CD99 FF                            .db #LEVEL_END
0CD9A                           
0CD9A                           lvl_layout_05:
0CD9A 40 0A                         .db #$40, #%00001010
0CD9C 70 1A                         .db #$70, #%00011010
0CD9E B0 42                         .db #$B0, #%01000010
0CDA0 41 A7                         .db #$41, #%10100111
0CDA2 B1 22                         .db #$B1, #%00100010
0CDA4 D1 15                         .db #$D1, #%00010101
0CDA6 22 0A                         .db #$22, #%00001010
0CDA8 52 05                         .db #$52, #%00000101
0CDAA B2 42                         .db #$B2, #%01000010
0CDAC 03 27                         .db #$03, #%00100111
0CDAE 33 67                         .db #$33, #%01100111
0CDB0 73 67                         .db #$73, #%01100111
0CDB2 B3 47                         .db #$B3, #%01000111
0CDB4 05 E5                         .db #$05, #%11100101
0CDB6 25 A5                         .db #$25, #%10100101
0CDB8 35 25                         .db #$35, #%00100101
0CDBA 65 45                         .db #$65, #%01000101
0CDBC A5 45                         .db #$A5, #%01000101
0CDBE 46 E5                         .db #$46, #%11100101
0CDC0 66 E5                         .db #$66, #%11100101
0CDC2 86 E5                         .db #$86, #%11100101
0CDC4 A6 E2                         .db #$A6, #%11100010
0CDC6 C6 E5                         .db #$C6, #%11100101
0CDC8 27 25                         .db #$27, #%00100101
0CDCA 77 05                         .db #$77, #%00000101
0CDCC B7 02                         .db #$B7, #%00000010
0CDCE 09 05                         .db #$09, #%00000101
0CDD0 79 05                         .db #$79, #%00000101
0CDD2 B9 02                         .db #$B9, #%00000010
0CDD4 FF                            .db #LEVEL_END
0CDD5                           
0CDD5                           lvl_layout_06:
0CDD5 00 03                         .db #$00, #%00000011
0CDD7 20 03                         .db #$20, #%00000011
0CDD9 40 03                         .db #$40, #%00000011
0CDDB A0 03                         .db #$A0, #%00000011
0CDDD C0 03                         .db #$C0, #%00000011
0CDDF 11 03                         .db #$11, #%00000011
0CDE1 31 03                         .db #$31, #%00000011
0CDE3 51 03                         .db #$51, #%00000011
0CDE5 91 03                         .db #$91, #%00000011
0CDE7 B1 03                         .db #$B1, #%00000011
0CDE9 D1 03                         .db #$D1, #%00000011
0CDEB 02 03                         .db #$02, #%00000011
0CDED 22 03                         .db #$22, #%00000011
0CDEF 42 03                         .db #$42, #%00000011
0CDF1 A2 03                         .db #$A2, #%00000011
0CDF3 C2 03                         .db #$C2, #%00000011
0CDF5 13 03                         .db #$13, #%00000011
0CDF7 33 03                         .db #$33, #%00000011
0CDF9 53 03                         .db #$53, #%00000011
0CDFB 93 03                         .db #$93, #%00000011
0CDFD B3 03                         .db #$B3, #%00000011
0CDFF D3 03                         .db #$D3, #%00000011
0CE01 04 03                         .db #$04, #%00000011
0CE03 24 03                         .db #$24, #%00000011
0CE05 44 03                         .db #$44, #%00000011
0CE07 A4 03                         .db #$A4, #%00000011
0CE09 C4 03                         .db #$C4, #%00000011
0CE0B 15 03                         .db #$15, #%00000011
0CE0D 35 03                         .db #$35, #%00000011
0CE0F 55 03                         .db #$55, #%00000011
0CE11 95 03                         .db #$95, #%00000011
0CE13 B5 03                         .db #$B5, #%00000011
0CE15 D5 03                         .db #$D5, #%00000011
0CE17 06 03                         .db #$06, #%00000011
0CE19 26 03                         .db #$26, #%00000011
0CE1B 46 03                         .db #$46, #%00000011
0CE1D A6 03                         .db #$A6, #%00000011
0CE1F C6 03                         .db #$C6, #%00000011
0CE21 17 03                         .db #$17, #%00000011
0CE23 37 03                         .db #$37, #%00000011
0CE25 57 03                         .db #$57, #%00000011
0CE27 97 03                         .db #$97, #%00000011
0CE29 B7 03                         .db #$B7, #%00000011
0CE2B D7 03                         .db #$D7, #%00000011
0CE2D 08 03                         .db #$08, #%00000011
0CE2F 28 03                         .db #$28, #%00000011
0CE31 48 03                         .db #$48, #%00000011
0CE33 A8 03                         .db #$A8, #%00000011
0CE35 C8 03                         .db #$C8, #%00000011
0CE37 19 03                         .db #$19, #%00000011
0CE39 39 03                         .db #$39, #%00000011
0CE3B 59 03                         .db #$59, #%00000011
0CE3D 99 03                         .db #$99, #%00000011
0CE3F B9 03                         .db #$B9, #%00000011
0CE41 D9 03                         .db #$D9, #%00000011
0CE43 60 4B                         .db #$60, #%01001011
0CE45 71 CB                         .db #$71, #%11001011
0CE47 62 4B                         .db #$62, #%01001011
0CE49 64 4B                         .db #$64, #%01001011
0CE4B 75 CB                         .db #$75, #%11001011
0CE4D 66 4B                         .db #$66, #%01001011
0CE4F 68 4B                         .db #$68, #%01001011
0CE51 79 0B                         .db #$79, #%00001011
0CE53 70 03                         .db #$70, #%00000011
0CE55 72 03                         .db #$72, #%00000011
0CE57 74 03                         .db #$74, #%00000011
0CE59 76 03                         .db #$76, #%00000011
0CE5B 78 03                         .db #$78, #%00000011
0CE5D FF                            .db #LEVEL_END
0CE5E                           
0CE5E                           lvl_layout_07:
0CE5E 00 11                         .db #$00, #%00010001
0CE60 01 FA                         .db #$01, #%11111010
0CE62 12 BA                         .db #$12, #%10111010
0CE64 23 DA                         .db #$23, #%11011010
0CE66 34 FA                         .db #$34, #%11111010
0CE68 05 DA                         .db #$05, #%11011010
0CE6A 15 FA                         .db #$15, #%11111010
0CE6C 45 BA                         .db #$45, #%10111010
0CE6E 56 DA                         .db #$56, #%11011010
0CE70 27 BA                         .db #$27, #%10111010
0CE72 67 DA                         .db #$67, #%11011010
0CE74 38 3A                         .db #$38, #%00111010
0CE76 78 BA                         .db #$78, #%10111010
0CE78 09 3A                         .db #$09, #%00111010
0CE7A 39 3A                         .db #$39, #%00111010
0CE7C 89 1A                         .db #$89, #%00011010
0CE7E B0 01                         .db #$B0, #%00000001
0CE80 D0 01                         .db #$D0, #%00000001
0CE82 A1 01                         .db #$A1, #%00000001
0CE84 C1 11                         .db #$C1, #%00010001
0CE86 B2 01                         .db #$B2, #%00000001
0CE88 D2 01                         .db #$D2, #%00000001
0CE8A A3 01                         .db #$A3, #%00000001
0CE8C C3 01                         .db #$C3, #%00000001
0CE8E B4 01                         .db #$B4, #%00000001
0CE90 D4 01                         .db #$D4, #%00000001
0CE92 A5 01                         .db #$A5, #%00000001
0CE94 C5 01                         .db #$C5, #%00000001
0CE96 B6 01                         .db #$B6, #%00000001
0CE98 D6 01                         .db #$D6, #%00000001
0CE9A A7 01                         .db #$A7, #%00000001
0CE9C C7 01                         .db #$C7, #%00000001
0CE9E FF                            .db #LEVEL_END
0CE9F                           
0CE9F                           lvl_layout_08:
0CE9F 40 B5                         .db #$40, #%10110101
0CEA1 31 0D                         .db #$31, #%00001101
0CEA3 61 10                         .db #$61, #%00010000
0CEA5 42 C7                         .db #$42, #%11000111
0CEA7 52 67                         .db #$52, #%01100111
0CEA9 63 C7                         .db #$63, #%11000111
0CEAB 83 E7                         .db #$83, #%11100111
0CEAD 05 07                         .db #$05, #%00000111
0CEAF 15 3A                         .db #$15, #%00111010
0CEB1 07 63                         .db #$07, #%01100011
0CEB3 27 13                         .db #$27, #%00010011
0CEB5 38 A5                         .db #$38, #%10100101
0CEB7 09 14                         .db #$09, #%00010100
0CEB9 19 05                         .db #$19, #%00000101
0CEBB D0 E0                         .db #$D0, #%11100000
0CEBD C2 A0                         .db #$C2, #%10100000
0CEBF B3 E0                         .db #$B3, #%11100000
0CEC1 D5 E0                         .db #$D5, #%11100000
0CEC3 C6 E0                         .db #$C6, #%11100000
0CEC5 B0 C4                         .db #$B0, #%11000100
0CEC7 C0 A4                         .db #$C0, #%10100100
0CEC9 D1 A4                         .db #$D1, #%10100100
0CECB C4 24                         .db #$C4, #%00100100
0CECD C5 04                         .db #$C5, #%00000100
0CECF B7 44                         .db #$B7, #%01000100
0CED1 B8 A4                         .db #$B8, #%10100100
0CED3 D9 05                         .db #$D9, #%00000101
0CED5 FF                            .db #LEVEL_END
0CED6                           
0CED6                           lvl_layout_09:
0CED6 81 04                         .db #$81, #%00000100
0CED8 D1 04                         .db #$D1, #%00000100
0CEDA 32 C4                         .db #$32, #%11000100
0CEDC A2 C4                         .db #$A2, #%11000100
0CEDE C2 24                         .db #$C2, #%00100100
0CEE0 13 24                         .db #$13, #%00100100
0CEE2 53 04                         .db #$53, #%00000100
0CEE4 C3 27                         .db #$C3, #%00100111
0CEE6 15 6C                         .db #$15, #%01101100
0CEE8 55 6C                         .db #$55, #%01101100
0CEEA 95 6C                         .db #$95, #%01101100
0CEEC D5 0C                         .db #$D5, #%00001100
0CEEE 27 C7                         .db #$27, #%11000111
0CEF0 47 C7                         .db #$47, #%11000111
0CEF2 67 C7                         .db #$67, #%11000111
0CEF4 87 C7                         .db #$87, #%11000111
0CEF6 A7 C7                         .db #$A7, #%11000111
0CEF8 C7 C7                         .db #$C7, #%11000111
0CEFA 08 13                         .db #$08, #%00010011
0CEFC 28 15                         .db #$28, #%00010101
0CEFE 48 12                         .db #$48, #%00010010
0CF00 68 15                         .db #$68, #%00010101
0CF02 88 11                         .db #$88, #%00010001
0CF04 A8 10                         .db #$A8, #%00010000
0CF06 C8 14                         .db #$C8, #%00010100
0CF08 09 07                         .db #$09, #%00000111
0CF0A 19 03                         .db #$19, #%00000011
0CF0C 39 05                         .db #$39, #%00000101
0CF0E 59 02                         .db #$59, #%00000010
0CF10 79 05                         .db #$79, #%00000101
0CF12 99 01                         .db #$99, #%00000001
0CF14 B9 00                         .db #$B9, #%00000000
0CF16 D9 04                         .db #$D9, #%00000100
0CF18 FF                            .db #LEVEL_END
0CF19                           
0CF19                           lvl_layout_10:
0CF19 00 02                         .db #$00, #%00000010
0CF1B 10 C9                         .db #$10, #%11001001
0CF1D 50 C9                         .db #$50, #%11001001
0CF1F 90 C9                         .db #$90, #%11001001
0CF21 D0 C9                         .db #$D0, #%11001001
0CF23 31 C9                         .db #$31, #%11001001
0CF25 71 C9                         .db #$71, #%11001001
0CF27 B1 C9                         .db #$B1, #%11001001
0CF29 13 C9                         .db #$13, #%11001001
0CF2B 53 C9                         .db #$53, #%11001001
0CF2D 93 C9                         .db #$93, #%11001001
0CF2F D3 C9                         .db #$D3, #%11001001
0CF31 34 C9                         .db #$34, #%11001001
0CF33 74 C9                         .db #$74, #%11001001
0CF35 B4 C9                         .db #$B4, #%11001001
0CF37 16 C9                         .db #$16, #%11001001
0CF39 56 C9                         .db #$56, #%11001001
0CF3B 96 C9                         .db #$96, #%11001001
0CF3D D6 C9                         .db #$D6, #%11001001
0CF3F 37 C9                         .db #$37, #%11001001
0CF41 77 C9                         .db #$77, #%11001001
0CF43 B7 C9                         .db #$B7, #%11001001
0CF45 D8 12                         .db #$D8, #%00010010
0CF47 FF                            .db #LEVEL_END
0CF48                           
0CF48                           lvl_layout_11:
0CF48 00 65                         .db #$00, #%01100101
0CF4A 40 45                         .db #$40, #%01000101
0CF4C 50 A7                         .db #$50, #%10100111
0CF4E 80 05                         .db #$80, #%00000101
0CF50 90 A7                         .db #$90, #%10100111
0CF52 A0 65                         .db #$A0, #%01100101
0CF54 01 43                         .db #$01, #%01000011
0CF56 31 23                         .db #$31, #%00100011
0CF58 61 A7                         .db #$61, #%10100111
0CF5A 81 A7                         .db #$81, #%10100111
0CF5C A1 63                         .db #$A1, #%01100011
0CF5E 02 44                         .db #$02, #%01000100
0CF60 32 44                         .db #$32, #%01000100
0CF62 92 04                         .db #$92, #%00000100
0CF64 A2 64                         .db #$A2, #%01100100
0CF66 03 40                         .db #$03, #%01000000
0CF68 33 40                         .db #$33, #%01000000
0CF6A 63 A1                         .db #$63, #%10100001
0CF6C 83 A2                         .db #$83, #%10100010
0CF6E 93 00                         .db #$93, #%00000000
0CF70 A3 60                         .db #$A3, #%01100000
0CF72 04 41                         .db #$04, #%01000001
0CF74 34 41                         .db #$34, #%01000001
0CF76 94 02                         .db #$94, #%00000010
0CF78 A4 62                         .db #$A4, #%01100010
0CF7A 05 47                         .db #$05, #%01000111
0CF7C 35 67                         .db #$35, #%01100111
0CF7E 75 0A                         .db #$75, #%00001010
0CF80 85 47                         .db #$85, #%01000111
0CF82 B5 47                         .db #$B5, #%01000111
0CF84 06 E7                         .db #$06, #%11100111
0CF86 16 5A                         .db #$16, #%01011010
0CF88 26 11                         .db #$26, #%00010001
0CF8A 46 13                         .db #$46, #%00010011
0CF8C 56 1A                         .db #$56, #%00011010
0CF8E 66 14                         .db #$66, #%00010100
0CF90 86 10                         .db #$86, #%00010000
0CF92 96 5A                         .db #$96, #%01011010
0CF94 A6 12                         .db #$A6, #%00010010
0CF96 C6 15                         .db #$C6, #%00010101
0CF98 D6 E7                         .db #$D6, #%11100111
0CF9A FF                            .db #LEVEL_END
0CF9B                           
0CF9B                           lvl_layout_12:
0CF9B 00 00                         .db #$00, #%00000000
0CF9D 50 C0                         .db #$50, #%11000000
0CF9F 80 00                         .db #$80, #%00000000
0CFA1 61 00                         .db #$61, #%00000000
0CFA3 22 C0                         .db #$22, #%11000000
0CFA5 82 E0                         .db #$82, #%11100000
0CFA7 C2 E0                         .db #$C2, #%11100000
0CFA9 A3 20                         .db #$A3, #%00100000
0CFAB C3 10                         .db #$C3, #%00010000
0CFAD 04 00                         .db #$04, #%00000000
0CFAF 54 20                         .db #$54, #%00100000
0CFB1 15 0A                         .db #$15, #%00001010
0CFB3 25 C0                         .db #$25, #%11000000
0CFB5 55 E0                         .db #$55, #%11100000
0CFB7 86 20                         .db #$86, #%00100000
0CFB9 C6 E0                         .db #$C6, #%11100000
0CFBB C7 A0                         .db #$C7, #%10100000
0CFBD 88 00                         .db #$88, #%00000000
0CFBF 59 00                         .db #$59, #%00000000
0CFC1 89 20                         .db #$89, #%00100000
0CFC3 D9 1A                         .db #$D9, #%00011010
0CFC5 FF                            .db #LEVEL_END
0CFC6                           
0CFC6                           lvl_layout_13:
0CFC6 10 E0                         .db #$10, #%11100000
0CFC8 20 E0                         .db #$20, #%11100000
0CFCA 30 E0                         .db #$30, #%11100000
0CFCC 40 40                         .db #$40, #%01000000
0CFCE 80 60                         .db #$80, #%01100000
0CFD0 C0 E0                         .db #$C0, #%11100000
0CFD2 D0 E0                         .db #$D0, #%11100000
0CFD4 41 40                         .db #$41, #%01000000
0CFD6 71 60                         .db #$71, #%01100000
0CFD8 52 60                         .db #$52, #%01100000
0CFDA A2 20                         .db #$A2, #%00100000
0CFDC 43 60                         .db #$43, #%01100000
0CFDE 83 60                         .db #$83, #%01100000
0CFE0 14 74                         .db #$14, #%01110100
0CFE2 54 74                         .db #$54, #%01110100
0CFE4 94 74                         .db #$94, #%01110100
0CFE6 D4 14                         .db #$D4, #%00010100
0CFE8 15 0D                         .db #$15, #%00001101
0CFEA 55 0D                         .db #$55, #%00001101
0CFEC 95 0D                         .db #$95, #%00001101
0CFEE D5 0D                         .db #$D5, #%00001101
0CFF0 26 0D                         .db #$26, #%00001101
0CFF2 46 0D                         .db #$46, #%00001101
0CFF4 66 0D                         .db #$66, #%00001101
0CFF6 86 0D                         .db #$86, #%00001101
0CFF8 A6 0D                         .db #$A6, #%00001101
0CFFA C6 0D                         .db #$C6, #%00001101
0CFFC 07 10                         .db #$07, #%00010000
0CFFE 37 0D                         .db #$37, #%00001101
0D000 77 0D                         .db #$77, #%00001101
0D002 B7 0D                         .db #$B7, #%00001101
0D004 28 0D                         .db #$28, #%00001101
0D006 48 0D                         .db #$48, #%00001101
0D008 68 0D                         .db #$68, #%00001101
0D00A 88 0D                         .db #$88, #%00001101
0D00C A8 0D                         .db #$A8, #%00001101
0D00E C8 0D                         .db #$C8, #%00001101
0D010 19 0D                         .db #$19, #%00001101
0D012 59 0D                         .db #$59, #%00001101
0D014 99 0D                         .db #$99, #%00001101
0D016 D9 0D                         .db #$D9, #%00001101
0D018 FF                            .db #LEVEL_END
0D019                           
0D019                           lvl_layout_14:
0D019 00 67                         .db #$00, #%01100111
0D01B 40 67                         .db #$40, #%01100111
0D01D 80 67                         .db #$80, #%01100111
0D01F C0 27                         .db #$C0, #%00100111
0D021 01 27                         .db #$01, #%00100111
0D023 31 C7                         .db #$31, #%11000111
0D025 51 C7                         .db #$51, #%11000111
0D027 71 C7                         .db #$71, #%11000111
0D029 91 C7                         .db #$91, #%11000111
0D02B B1 C7                         .db #$B1, #%11000111
0D02D D1 07                         .db #$D1, #%00000111
0D02F 02 E7                         .db #$02, #%11100111
0D031 06 E7                         .db #$06, #%11100111
0D033 13 07                         .db #$13, #%00000111
0D035 D3 07                         .db #$D3, #%00000111
0D037 15 07                         .db #$15, #%00000111
0D039 35 07                         .db #$35, #%00000111
0D03B 55 07                         .db #$55, #%00000111
0D03D 75 07                         .db #$75, #%00000111
0D03F 95 07                         .db #$95, #%00000111
0D041 B5 07                         .db #$B5, #%00000111
0D043 D5 07                         .db #$D5, #%00000111
0D045 17 07                         .db #$17, #%00000111
0D047 37 C7                         .db #$37, #%11000111
0D049 57 C7                         .db #$57, #%11000111
0D04B 77 C7                         .db #$77, #%11000111
0D04D 97 C7                         .db #$97, #%11000111
0D04F B7 C7                         .db #$B7, #%11000111
0D051 D7 07                         .db #$D7, #%00000111
0D053 19 07                         .db #$19, #%00000111
0D055 D9 07                         .db #$D9, #%00000111
0D057 22 4C                         .db #$22, #%01001100
0D059 62 4C                         .db #$62, #%01001100
0D05B A2 4C                         .db #$A2, #%01001100
0D05D 24 0C                         .db #$24, #%00001100
0D05F 44 0C                         .db #$44, #%00001100
0D061 64 0C                         .db #$64, #%00001100
0D063 84 0C                         .db #$84, #%00001100
0D065 A4 0C                         .db #$A4, #%00001100
0D067 C4 0C                         .db #$C4, #%00001100
0D069 26 0C                         .db #$26, #%00001100
0D06B 46 0C                         .db #$46, #%00001100
0D06D 66 0C                         .db #$66, #%00001100
0D06F 86 0C                         .db #$86, #%00001100
0D071 A6 0C                         .db #$A6, #%00001100
0D073 C6 0C                         .db #$C6, #%00001100
0D075 28 4C                         .db #$28, #%01001100
0D077 68 4C                         .db #$68, #%01001100
0D079 A8 4C                         .db #$A8, #%01001100
0D07B 32 04                         .db #$32, #%00000100
0D07D 52 04                         .db #$52, #%00000100
0D07F 72 04                         .db #$72, #%00000100
0D081 92 04                         .db #$92, #%00000100
0D083 B2 04                         .db #$B2, #%00000100
0D085 38 04                         .db #$38, #%00000100
0D087 58 04                         .db #$58, #%00000100
0D089 78 04                         .db #$78, #%00000100
0D08B 98 04                         .db #$98, #%00000100
0D08D B8 04                         .db #$B8, #%00000100
0D08F FF                            .db #LEVEL_END
0D090                           
0D090                           lvl_layout_15:
0D090 00 7A                         .db #$00, #%01111010
0D092 40 7A                         .db #$40, #%01111010
0D094 80 7A                         .db #$80, #%01111010
0D096 C0 3A                         .db #$C0, #%00111010
0D098 31 04                         .db #$31, #%00000100
0D09A 51 04                         .db #$51, #%00000100
0D09C 81 04                         .db #$81, #%00000100
0D09E A1 04                         .db #$A1, #%00000100
0D0A0 05 E4                         .db #$05, #%11100100
0D0A2 15 64                         .db #$15, #%01100100
0D0A4 55 64                         .db #$55, #%01100100
0D0A6 95 64                         .db #$95, #%01100100
0D0A8 D5 E4                         .db #$D5, #%11100100
0D0AA 26 04                         .db #$26, #%00000100
0D0AC 46 44                         .db #$46, #%01000100
0D0AE 76 64                         .db #$76, #%01100100
0D0B0 C6 04                         .db #$C6, #%00000100
0D0B2 17 04                         .db #$17, #%00000100
0D0B4 37 64                         .db #$37, #%01100100
0D0B6 77 44                         .db #$77, #%01000100
0D0B8 B7 04                         .db #$B7, #%00000100
0D0BA 18 64                         .db #$18, #%01100100
0D0BC 58 64                         .db #$58, #%01100100
0D0BE 98 64                         .db #$98, #%01100100
0D0C0 FF                            .db #LEVEL_END
0D0C1                           
0D0C1                           lvl_layout_16:
0D0C1 10 E1                         .db #$10, #%11100001
0D0C3 20 9A                         .db #$20, #%10011010
0D0C5 30 E1                         .db #$30, #%11100001
0D0C7 40 E1                         .db #$40, #%11100001
0D0C9 50 E1                         .db #$50, #%11100001
0D0CB 60 C1                         .db #$60, #%11000001
0D0CD 70 E1                         .db #$70, #%11100001
0D0CF 80 E1                         .db #$80, #%11100001
0D0D1 90 E1                         .db #$90, #%11100001
0D0D3 A0 61                         .db #$A0, #%01100001
0D0D5 21 C1                         .db #$21, #%11000001
0D0D7 A1 1A                         .db #$A1, #%00011010
0D0D9 B1 41                         .db #$B1, #%01000001
0D0DB A2 E1                         .db #$A2, #%11100001
0D0DD B2 E1                         .db #$B2, #%11100001
0D0DF C2 1A                         .db #$C2, #%00011010
0D0E1 D2 E1                         .db #$D2, #%11100001
0D0E3 63 1A                         .db #$63, #%00011010
0D0E5 C3 C1                         .db #$C3, #%11000001
0D0E7 14 61                         .db #$14, #%01100001
0D0E9 54 61                         .db #$54, #%01100001
0D0EB 94 C1                         .db #$94, #%11000001
0D0ED 15 61                         .db #$15, #%01100001
0D0EF 55 41                         .db #$55, #%01000001
0D0F1 85 1A                         .db #$85, #%00011010
0D0F3 16 41                         .db #$16, #%01000001
0D0F5 46 1A                         .db #$46, #%00011010
0D0F7 56 61                         .db #$56, #%01100001
0D0F9 A6 61                         .db #$A6, #%01100001
0D0FB 17 67                         .db #$17, #%01100111
0D0FD 57 67                         .db #$57, #%01100111
0D0FF 97 67                         .db #$97, #%01100111
0D101 D7 07                         .db #$D7, #%00000111
0D103 28 41                         .db #$28, #%01000001
0D105 58 61                         .db #$58, #%01100001
0D107 A8 41                         .db #$A8, #%01000001
0D109 18 11                         .db #$18, #%00010001
0D10B 38 11                         .db #$38, #%00010001
0D10D 98 11                         .db #$98, #%00010001
0D10F B8 11                         .db #$B8, #%00010001
0D111 D8 11                         .db #$D8, #%00010001
0D113 59 09                         .db #$59, #%00001001
0D115 FF                            .db #LEVEL_END
0D116                           
0D116                           lvl_layout_17:
0D116 10 EA                         .db #$10, #%11101010
0D118 20 E2                         .db #$20, #%11100010
0D11A 30 62                         .db #$30, #%01100010
0D11C 70 02                         .db #$70, #%00000010
0D11E 80 6A                         .db #$80, #%01101010
0D120 90 22                         .db #$90, #%00100010
0D122 01 AA                         .db #$01, #%10101010
0D124 31 6A                         .db #$31, #%01101010
0D126 81 2A                         .db #$81, #%00101010
0D128 A1 02                         .db #$A1, #%00000010
0D12A C1 02                         .db #$C1, #%00000010
0D12C D1 0A                         .db #$D1, #%00001010
0D12E 32 EA                         .db #$32, #%11101010
0D130 42 6A                         .db #$42, #%01101010
0D132 62 02                         .db #$62, #%00000010
0D134 92 6A                         .db #$92, #%01101010
0D136 D2 E2                         .db #$D2, #%11100010
0D138 43 1A                         .db #$43, #%00011010
0D13A 53 CA                         .db #$53, #%11001010
0D13C 73 02                         .db #$73, #%00000010
0D13E 83 4A                         .db #$83, #%01001010
0D140 B3 CA                         .db #$B3, #%11001010
0D142 C3 EA                         .db #$C3, #%11101010
0D144 04 0A                         .db #$04, #%00001010
0D146 14 A2                         .db #$14, #%10100010
0D148 24 AA                         .db #$24, #%10101010
0D14A 44 AA                         .db #$44, #%10101010
0D14C 64 6A                         .db #$64, #%01101010
0D14E 65 6A                         .db #$65, #%01101010
0D150 A5 AA                         .db #$A5, #%10101010
0D152 06 EA                         .db #$06, #%11101010
0D154 16 62                         .db #$16, #%01100010
0D156 66 22                         .db #$66, #%00100010
0D158 86 2A                         .db #$86, #%00101010
0D15A 17 42                         .db #$17, #%01000010
0D15C 47 12                         .db #$47, #%00010010
0D15E 57 6A                         .db #$57, #%01101010
0D160 97 4A                         .db #$97, #%01001010
0D162 A7 02                         .db #$A7, #%00000010
0D164 18 02                         .db #$18, #%00000010
0D166 28 0A                         .db #$28, #%00001010
0D168 38 22                         .db #$38, #%00100010
0D16A 68 2A                         .db #$68, #%00101010
0D16C 88 62                         .db #$88, #%01100010
0D16E C8 0A                         .db #$C8, #%00001010
0D170 D8 02                         .db #$D8, #%00000010
0D172 19 2A                         .db #$19, #%00101010
0D174 39 2A                         .db #$39, #%00101010
0D176 69 42                         .db #$69, #%01000010
0D178 99 2A                         .db #$99, #%00101010
0D17A B9 42                         .db #$B9, #%01000010
0D17C FF                            .db #LEVEL_END
0D17D                           
0D17D                           lvl_layout_18:
0D17D 00 12                         .db #$00, #%00010010
0D17F 40 1A                         .db #$40, #%00011010
0D181 50 11                         .db #$50, #%00010001
0D183 70 1A                         .db #$70, #%00011010
0D185 80 10                         .db #$80, #%00010000
0D187 D0 13                         .db #$D0, #%00010011
0D189 01 1A                         .db #$01, #%00011010
0D18B 22 15                         .db #$22, #%00010101
0D18D A2 1A                         .db #$A2, #%00011010
0D18F B2 14                         .db #$B2, #%00010100
0D191 03 67                         .db #$03, #%01100111
0D193 43 67                         .db #$43, #%01100111
0D195 83 67                         .db #$83, #%01100111
0D197 24 09                         .db #$24, #%00001001
0D199 74 0D                         .db #$74, #%00001101
0D19B C4 0A                         .db #$C4, #%00001010
0D19D 05 A7                         .db #$05, #%10100111
0D19F 45 27                         .db #$45, #%00100111
0D1A1 95 27                         .db #$95, #%00100111
0D1A3 16 C7                         .db #$16, #%11000111
0D1A5 36 67                         .db #$36, #%01100111
0D1A7 86 67                         .db #$86, #%01100111
0D1A9 D6 07                         .db #$D6, #%00000111
0D1AB 07 A3                         .db #$07, #%10100011
0D1AD 27 23                         .db #$27, #%00100011
0D1AF 47 C7                         .db #$47, #%11000111
0D1B1 57 A0                         .db #$57, #%10100000
0D1B3 67 A7                         .db #$67, #%10100111
0D1B5 77 20                         .db #$77, #%00100000
0D1B7 97 C7                         .db #$97, #%11000111
0D1B9 A7 A4                         .db #$A7, #%10100100
0D1BB B7 A7                         .db #$B7, #%10100111
0D1BD C7 24                         .db #$C7, #%00100100
0D1BF 28 0B                         .db #$28, #%00001011
0D1C1 38 A3                         .db #$38, #%10100011
0D1C3 78 08                         .db #$78, #%00001000
0D1C5 88 A3                         .db #$88, #%10100011
0D1C7 C8 0C                         .db #$C8, #%00001100
0D1C9 D8 A4                         .db #$D8, #%10100100
0D1CB 09 43                         .db #$09, #%01000011
0D1CD 59 40                         .db #$59, #%01000000
0D1CF A9 44                         .db #$A9, #%01000100
0D1D1 FF                            .db #LEVEL_END
0D1D2                           
0D1D2                           lvl_layout_19:
0D1D2 11 A8                         .db #$11, #%10101000
0D1D4 21 68                         .db #$21, #%01101000
0D1D6 81 28                         .db #$81, #%00101000
0D1D8 B1 48                         .db #$B1, #%01001000
0D1DA 22 48                         .db #$22, #%01001000
0D1DC 62 68                         .db #$62, #%01101000
0D1DE B2 28                         .db #$B2, #%00101000
0D1E0 23 28                         .db #$23, #%00101000
0D1E2 83 28                         .db #$83, #%00101000
0D1E4 B3 28                         .db #$B3, #%00101000
0D1E6 04 E8                         .db #$04, #%11101000
0D1E8 24 08                         .db #$24, #%00001000
0D1EA 44 08                         .db #$44, #%00001000
0D1EC 64 E8                         .db #$64, #%11101000
0D1EE 84 E8                         .db #$84, #%11101000
0D1F0 C4 A8                         .db #$C4, #%10101000
0D1F2 D4 E8                         .db #$D4, #%11101000
0D1F4 15 48                         .db #$15, #%01001000
0D1F6 55 C8                         .db #$55, #%11001000
0D1F8 75 C8                         .db #$75, #%11001000
0D1FA A5 08                         .db #$A5, #%00001000
0D1FC 36 08                         .db #$36, #%00001000
0D1FE B6 08                         .db #$B6, #%00001000
0D200 27 48                         .db #$27, #%01001000
0D202 97 28                         .db #$97, #%00101000
0D204 C7 08                         .db #$C7, #%00001000
0D206 09 61                         .db #$09, #%01100001
0D208 19 11                         .db #$19, #%00010001
0D20A 49 61                         .db #$49, #%01100001
0D20C 89 31                         .db #$89, #%00110001
0D20E A9 61                         .db #$A9, #%01100001
0D210 FF                            .db #LEVEL_END
0D211                           
0D211                           lvl_layout_20:
0D211 00 60                         .db #$00, #%01100000
0D213 10 1A                         .db #$10, #%00011010
0D215 40 A7                         .db #$40, #%10100111
0D217 50 20                         .db #$50, #%00100000
0D219 70 1A                         .db #$70, #%00011010
0D21B 80 40                         .db #$80, #%01000000
0D21D B0 1A                         .db #$B0, #%00011010
0D21F C0 20                         .db #$C0, #%00100000
0D221 01 40                         .db #$01, #%01000000
0D223 31 1A                         .db #$31, #%00011010
0D225 A1 40                         .db #$A1, #%01000000
0D227 D1 1A                         .db #$D1, #%00011010
0D229 43 67                         .db #$43, #%01100111
0D22B 83 47                         .db #$83, #%01000111
0D22D 44 A7                         .db #$44, #%10100111
0D22F 54 25                         .db #$54, #%00100101
0D231 94 08                         .db #$94, #%00001000
0D233 A4 A7                         .db #$A4, #%10100111
0D235 55 05                         .db #$55, #%00000101
0D237 65 08                         .db #$65, #%00001000
0D239 06 27                         .db #$06, #%00100111
0D23B 36 67                         .db #$36, #%01100111
0D23D 76 28                         .db #$76, #%00101000
0D23F A6 27                         .db #$A6, #%00100111
0D241 D6 07                         .db #$D6, #%00000111
0D243 A7 A7                         .db #$A7, #%10100111
0D245 08 60                         .db #$08, #%01100000
0D247 09 60                         .db #$09, #%01100000
0D249 18 A7                         .db #$18, #%10100111
0D24B 48 A7                         .db #$48, #%10100111
0D24D 58 47                         .db #$58, #%01000111
0D24F 88 27                         .db #$88, #%00100111
0D251 B8 20                         .db #$B8, #%00100000
0D253 D8 1A                         .db #$D8, #%00011010
0D255 59 15                         .db #$59, #%00010101
0D257 69 60                         .db #$69, #%01100000
0D259 A9 60                         .db #$A9, #%01100000
0D25B FF                            .db #LEVEL_END
0D25C                           
0D25C                           lvl_layout_21:
0D25C 00 13                         .db #$00, #%00010011
0D25E 10 11                         .db #$10, #%00010001
0D260 20 67                         .db #$20, #%01100111
0D262 60 67                         .db #$60, #%01100111
0D264 A0 47                         .db #$A0, #%01000111
0D266 D0 15                         .db #$D0, #%00010101
0D268 32 63                         .db #$32, #%01100011
0D26A 72 05                         .db #$72, #%00000101
0D26C 82 43                         .db #$82, #%01000011
0D26E B2 43                         .db #$B2, #%01000011
0D270 33 03                         .db #$33, #%00000011
0D272 43 2A                         .db #$43, #%00101010
0D274 63 7A                         .db #$63, #%01111010
0D276 73 2A                         .db #$73, #%00101010
0D278 A3 7A                         .db #$A3, #%01111010
0D27A 34 63                         .db #$34, #%01100011
0D27C 74 63                         .db #$74, #%01100011
0D27E B4 43                         .db #$B4, #%01000011
0D280 06 63                         .db #$06, #%01100011
0D282 46 63                         .db #$46, #%01100011
0D284 86 63                         .db #$86, #%01100011
0D286 C6 C3                         .db #$C6, #%11000011
0D288 07 7A                         .db #$07, #%01111010
0D28A 47 7A                         .db #$47, #%01111010
0D28C 67 0A                         .db #$67, #%00001010
0D28E 87 7A                         .db #$87, #%01111010
0D290 08 13                         .db #$08, #%00010011
0D292 18 43                         .db #$18, #%01000011
0D294 48 63                         .db #$48, #%01100011
0D296 88 63                         .db #$88, #%01100011
0D298 FF                            .db #LEVEL_END
0D299                           
0D299                           lvl_layout_22:
0D299 00 7A                         .db #$00, #%01111010
0D29B 40 7A                         .db #$40, #%01111010
0D29D 80 7A                         .db #$80, #%01111010
0D29F C0 3A                         .db #$C0, #%00111010
0D2A1 13 67                         .db #$13, #%01100111
0D2A3 83 A7                         .db #$83, #%10100111
0D2A5 B3 07                         .db #$B3, #%00000111
0D2A7 14 07                         .db #$14, #%00000111
0D2A9 44 07                         .db #$44, #%00000111
0D2AB A4 07                         .db #$A4, #%00000111
0D2AD 15 A5                         .db #$15, #%10100101
0D2AF 45 A5                         .db #$45, #%10100101
0D2B1 85 25                         .db #$85, #%00100101
0D2B3 86 05                         .db #$86, #%00000101
0D2B5 A6 05                         .db #$A6, #%00000101
0D2B7 17 11                         .db #$17, #%00010001
0D2B9 47 A1                         .db #$47, #%10100001
0D2BB 87 A1                         .db #$87, #%10100001
0D2BD B7 A1                         .db #$B7, #%10100001
0D2BF 18 41                         .db #$18, #%01000001
0D2C1 68 01                         .db #$68, #%00000001
0D2C3 D8 01                         .db #$D8, #%00000001
0D2C5 FF                            .db #LEVEL_END
0D2C6                           
0D2C6                           lvl_layout_23:
0D2C6 00 71                         .db #$00, #%01110001
0D2C8 40 11                         .db #$40, #%00010001
0D2CA 50 43                         .db #$50, #%01000011
0D2CC 80 D1                         .db #$80, #%11010001
0D2CE 90 E3                         .db #$90, #%11100011
0D2D0 A0 63                         .db #$A0, #%01100011
0D2D2 01 63                         .db #$01, #%01100011
0D2D4 41 63                         .db #$41, #%01100011
0D2D6 A1 63                         .db #$A1, #%01100011
0D2D8 02 63                         .db #$02, #%01100011
0D2DA 42 63                         .db #$42, #%01100011
0D2DC 62 11                         .db #$62, #%00010001
0D2DE A2 67                         .db #$A2, #%01100111
0D2E0 04 63                         .db #$04, #%01100011
0D2E2 44 23                         .db #$44, #%00100011
0D2E4 64 D1                         .db #$64, #%11010001
0D2E6 74 E3                         .db #$74, #%11100011
0D2E8 84 F1                         .db #$84, #%11110001
0D2EA 94 E3                         .db #$94, #%11100011
0D2EC A4 C7                         .db #$A4, #%11000111
0D2EE B4 23                         .db #$B4, #%00100011
0D2F0 05 63                         .db #$05, #%01100011
0D2F2 45 23                         .db #$45, #%00100011
0D2F4 06 71                         .db #$06, #%01110001
0D2F6 46 11                         .db #$46, #%00010001
0D2F8 56 E3                         .db #$56, #%11100011
0D2FA D6 07                         .db #$D6, #%00000111
0D2FC 17 D1                         .db #$17, #%11010001
0D2FE 27 43                         .db #$27, #%01000011
0D300 67 D1                         .db #$67, #%11010001
0D302 A7 C7                         .db #$A7, #%11000111
0D304 C7 A7                         .db #$C7, #%10100111
0D306 D7 B3                         .db #$D7, #%10110011
0D308 28 43                         .db #$28, #%01000011
0D30A 78 43                         .db #$78, #%01000011
0D30C 29 43                         .db #$29, #%01000011
0D30E 79 43                         .db #$79, #%01000011
0D310 FF                           .db #LEVEL_END
0D311                           
0D311                           lvl_layout_24:
0D311 02 67                         .db #$02, #%01100111
0D313 42 67                         .db #$42, #%01100111
0D315 82 67                         .db #$82, #%01100111
0D317 05 67                         .db #$05, #%01100111
0D319 45 67                         .db #$45, #%01100111
0D31B 85 67                         .db #$85, #%01100111
0D31D 08 67                         .db #$08, #%01100111
0D31F 48 67                         .db #$48, #%01100111
0D321 88 67                         .db #$88, #%01100111
0D323 30 E7                         .db #$30, #%11100111
0D325 70 E7                         .db #$70, #%11100111
0D327 B0 E7                         .db #$B0, #%11100111
0D329 34 E7                         .db #$34, #%11100111
0D32B 74 E7                         .db #$74, #%11100111
0D32D B4 E7                         .db #$B4, #%11100111
0D32F 20 13                         .db #$20, #%00010011
0D331 40 10                         .db #$40, #%00010000
0D333 80 02                         .db #$80, #%00000010
0D335 41 05                         .db #$41, #%00000101
0D337 B1 09                         .db #$B1, #%00001001
0D339 02 09                         .db #$02, #%00001001
0D33B 52 0C                         .db #$52, #%00001100
0D33D 13 11                         .db #$13, #%00010001
0D33F 33 04                         .db #$33, #%00000100
0D341 74 0C                         .db #$74, #%00001100
0D343 B4 08                         .db #$B4, #%00001000
0D345 15 09                         .db #$15, #%00001001
0D347 55 0C                         .db #$55, #%00001100
0D349 95 0C                         .db #$95, #%00001100
0D34B 47 03                         .db #$47, #%00000011
0D34D A7 12                         .db #$A7, #%00010010
0D34F 18 15                         .db #$18, #%00010101
0D351 09 05                         .db #$09, #%00000101
0D353 19 03                         .db #$19, #%00000011
0D355 FF                            .db #LEVEL_END
0D356                           
0D356                           lvl_layout_25:
0D356 00 12                         .db #$00, #%00010010
0D358 10 63                         .db #$10, #%01100011
0D35A 60 63                         .db #$60, #%01100011
0D35C A0 07                         .db #$A0, #%00000111
0D35E 01 11                         .db #$01, #%00010001
0D360 A1 02                         .db #$A1, #%00000010
0D362 02 67                         .db #$02, #%01100111
0D364 42 07                         .db #$42, #%00000111
0D366 62 67                         .db #$62, #%01100111
0D368 A2 C7                         .db #$A2, #%11000111
0D36A 03 61                         .db #$03, #%01100001
0D36C 43 01                         .db #$43, #%00000001
0D36E 63 61                         .db #$63, #%01100001
0D370 A6 E7                         .db #$A6, #%11100111
0D372 B6 47                         .db #$B6, #%01000111
0D374 C6 01                         .db #$C6, #%00000001
0D376 B7 42                         .db #$B7, #%01000010
0D378 B8 42                         .db #$B8, #%01000010
0D37A C8 0A                         .db #$C8, #%00001010
0D37C 09 7A                         .db #$09, #%01111010
0D37E 49 7A                         .db #$49, #%01111010
0D380 89 3A                         .db #$89, #%00111010
0D382 B9 42                         .db #$B9, #%01000010
0D384 FF                            .db #LEVEL_END
0D385                           
0D385                           ;; Level layout address pointers
0D385                           tbl_lvl_layout_hi:
0D385 CC CC CC CD CD                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D38A CD CE CE CE CF                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D38F CF CF CF D0 D0                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D394 D0 D1 D1 D1 D2                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D399 D2 D2 D2 D3 D3                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D39E                           
0D39E                           tbl_lvl_layout_lo:
0D39E A6 C1 F6 29 9A                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D3A3 D5 5E 9F D6 19                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D3A8 48 9B C6 19 90                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D3AD C1 16 7D D2 11                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D3B2 5C 99 C6 11 56                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D3B7                           
0D3B7                           ;; Ball start position (#$YX)
0D3B7                           tbl_lvl_ball_startpos:
0D3B7 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D3BC 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D3C1 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D3C6 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D3CB 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D3D0                               
0D3D0                           ;; Ball start direction, color and tile score
0D3D0                           ;; #% ccc v tttt
0D3D0                           ;;    ||| | ++++-- tile score
0D3D0                           ;;    ||| +------- vertical direction, up (0) or down
0D3D0                           ;;    +++--------- color (CBRYGM)
0D3D0                           tbl_lvl_ball_init:
0D3D0 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D3D5 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D3DA 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D3DF 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D3E4 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D3E9                           
0D3E9                           
0D3E9                           
0D3E9                           ;; Helper table to multiply values by 16
0D3E9                           tbl_Times16:
0D3E9 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D3F1 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D3F9                               
0D3F9                           
0D3F9                           ;; Helper table to multiply values by 64
0D3F9                           tbl_Times64:
0D3F9 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D3FD                           
0D3FD                           
0D3FD                           ;; Metatile ID to CHR data mapper
0D3FD                           tbl_GametileTopLeft:
0D3FD 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D407                           
0D407                           tbl_GametileTopRight:
0D407 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D411                           
0D411                           tbl_GametileBottomLeft:
0D411 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D41B                           
0D41B                           tbl_GametileBottomRight:
0D41B 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D425                           
0D425                           ;; Metatile ID to RAM byte data mapper
0D425                           tbl_GameTileRamByte:
0D425 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D42A                           
0D42A                           ;; HUD text data
0D42A                           tbl_HudText:
0D42A 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D432 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D439 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D441 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D446                           
0D446                           ;; NMI handler
0D446                           NMI:
0D446                               .include "interrupt/nmi.asm"
0D446                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D446                           ;;
0D446                           ;; include/nmi.asm
0D446                           ;;
0D446                           ;; Non-maskable interrupt script. This script is being executed
0D446                           ;; when vBlank hits.
0D446                           ;;
0D446                           ;;
0D446                           
0D446                               ;; Preserve accumulator through stack
0D446 48                            PHA
0D447                           
0D447                               ;; Should NMI be skipped?
0D447 A5 13                         LDA skip_nmi
0D449 F0 03                         BEQ +
0D44B 4C 44 D5                          JMP +skip_nmi
0D44E                               +
0D44E                           
0D44E                               ;; When in NMI, skip additional NMI requests
0D44E A9 01                         LDA #$01
0D450 85 13                         STA skip_nmi
0D452                           
0D452                               ;; Preserve X, Y, and PC through stack
0D452 8A                            TXA
0D453 48                            PHA
0D454 98                            TYA
0D455 48                            PHA
0D456 08                            PHP
0D457                               
0D457                               ;; Check forced NMI skip
0D457 A5 14                         LDA force_skip_nmi
0D459 F0 03                         BEQ +
0D45B 4C 35 D5                          JMP +force_skip_nmi
0D45E                               +
0D45E                           
0D45E                               ;; Update PPU mask
0D45E                               ;LDA #$00
0D45E                               ;STA PPU_CTRL
0D45E A5 12                         LDA soft_ppu_mask
0D460 8D 01 20                      STA PPU_MASK
0D463                               
0D463                               
0D463                               ;; Additional PPU updates go here
0D463                               .include "game/interrupt/nmi.asm"
0D463                           
0D463                               ;; Check if ppu_buffer needs updating
0D463 A5 2F                         LDA ppu_buffer_update
0D465 D0 03                         BNE +
0D467 4C A9 D4                          JMP +no_ppu_buffer_update
0D46A                               +
0D46A                           
0D46A                               ;; Reset ppu control register and mask
0D46A A2 00                         LDX #$00
0D46C 8E 00 20                      STX PPU_CTRL
0D46F 8E 01 20                      STX PPU_MASK
0D472                           
0D472                               ;; Set up loop
0D472                               -
0D472                                   ;; Reset hi/lo latch
0D472 2C 02 20                          BIT PPU_STATUS
0D475                           
0D475                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D475 BD 00 03                          LDA ppu_buffer,x
0D478 8D 06 20                          STA PPU_ADDR
0D47B E8                                INX
0D47C BD 00 03                          LDA ppu_buffer,x
0D47F 8D 06 20                          STA PPU_ADDR
0D482                           
0D482                                   ;; Write ppu_buffer data to PPU_ADDR
0D482 E8                                INX
0D483 BD 00 03                          LDA ppu_buffer,x
0D486 8D 07 20                          STA PPU_DATA
0D489                           
0D489                                   ;; Check if updating is done (eg. X is at pointer)
0D489 E8                                INX
0D48A E4 30                             CPX ppu_buffer_pointer
0D48C F0 03                             BEQ +
0D48E 4C 72 D4                      JMP -
0D491                           +
0D491                           
0D491                               ;; Reset ppu buffer update and pointer
0D491 A9 00                         LDA #$00
0D493 85 2F                         STA ppu_buffer_update
0D495 85 30                         STA ppu_buffer_pointer
0D497                               
0D497                               ;; Reset scrolling position
0D497 8D 05 20                      STA PPU_SCROLL
0D49A 8D 05 20                      STA PPU_SCROLL
0D49D                           
0D49D                               ;; Restore ppu control register and mask
0D49D A9 90                         LDA #%10010000
0D49F 8D 00 20                      STA PPU_CTRL
0D4A2 A5 12                         LDA soft_ppu_mask
0D4A4 8D 01 20                      STA PPU_MASK
0D4A7 A9 00                         LDA #$00
0D4A9                           
0D4A9                           ;; Continue other NMI stuff
0D4A9                           +no_ppu_buffer_update:
0D4A9                           
0D4A9                               ;; Reset sprite RAM, draw sprites
0D4A9 8D 03 20                      STA OAM_ADDR
0D4AC A9 02                         LDA #$02
0D4AE 8D 14 40                      STA OAM_DMA
0D4B1                           
0D4B1                               ;; Decrease explosion frame counters
0D4B1 A0 04                         LDY #MAX_ANIMATIONS
0D4B3 A2 00                         LDX #$00
0D4B5                               -
0D4B5 BD 30 03                          LDA explosion_framecounter,x
0D4B8 F0 03                             BEQ +
0D4BA DE 30 03                              DEC explosion_framecounter,x
0D4BD                                   +
0D4BD E8                                INX
0D4BE 88                                DEY
0D4BF F0 03                             BEQ +done        
0D4C1 4C B5 D4                      JMP -
0D4C4                           +done:
0D4C4                               
0D4C4                               ;; Decrease nudge counter
0D4C4 A5 33                         LDA nudge_counter
0D4C6 F0 02                         BEQ +
0D4C8 C6 33                             DEC nudge_counter
0D4CA                               +
0D4CA                               
0D4CA                               ;; Test background noise
0D4CA A5 2D                         LDA screen_mode
0D4CC 29 01                         AND #IS_GAME_SCREEN
0D4CE F0 21                         BEQ +
0D4D0                                   .include "game/test/background_noise.asm"
0D4D0                               ;; At random times, set max_noise period to $03-$0A
0D4D0 A5 36                         LDA max_noise
0D4D2 D0 1D                         BNE +
0D4D4 20 7B C3                          JSR sub_GetRandomNumber
0D4D7 29 EF                             AND #%11101111
0D4D9 D0 16                             BNE +
0D4DB                                   
0D4DB A5 15                             LDA frame_counter
0D4DD 85 16                             STA random_seed
0D4DF 20 7B C3                          JSR sub_GetRandomNumber
0D4E2 29 07                             AND #$07
0D4E4 69 03                             ADC #$03
0D4E6 85 36                             STA max_noise
0D4E8 A9 01                             LDA #$01
0D4EA 85 37                             STA sweep_noise
0D4EC A9 34                             LDA #$34
0D4EE 8D 0C 40                          STA NOISE_VOLUME
0D4F1                           
0D4F1                               +
0D4F1                           
0D4F1                               ;; if sweep noise = $00: constant noise
0D4F1                               ;; else if sweep noise > $80: decrease pitch
0D4F1                               ;; else: inrease pitch
0D4F1 A5 37                         LDA sweep_noise
0D4F3 F0 18                         BEQ +constantNoise
0D4F5 30 2A                         BMI +decreaseNoise
0D4F7                           
0D4F7                           ;; Sweep noise up to max noise pitch
0D4F7                           +increaseNoise:
0D4F7 C6 38                         DEC current_noise
0D4F9 A5 38                         LDA current_noise
0D4FB 8D 0E 40                      STA NOISE_PERIOD
0D4FE C5 36                         CMP max_noise
0D500 D0 08                         BNE +
0D502 A9 00                             LDA #$00
0D504 85 37                             STA sweep_noise
0D506 A9 0A                             LDA #$0A
0D508 85 39                             STA noise_counter
0D50A                               +
0D50A 4C 35 D5                      JMP +endNoise
0D50D                           
0D50D                           ;; Keep noise at constant pitch
0D50D                           +constantNoise:
0D50D A5 36                         LDA max_noise
0D50F F0 24                         BEQ +endNoise
0D511                           
0D511 A5 39                         LDA noise_counter
0D513 D0 07                         BNE +
0D515 A9 80                             LDA #$80
0D517 85 37                             STA sweep_noise
0D519 4C 35 D5                          JMP +endNoise
0D51C                               +
0D51C C6 39                         DEC noise_counter
0D51E 4C 35 D5                      JMP +endNoise
0D521                           
0D521                           ;; Sweep noise down to initial pitch
0D521                           +decreaseNoise:
0D521 E6 38                         INC current_noise
0D523 A5 38                         LDA current_noise
0D525 8D 0E 40                      STA NOISE_PERIOD
0D528 C9 0E                         CMP #$0E
0D52A D0 09                         BNE +endNoise
0D52C                           
0D52C 20 A3 C3                      JSR sub_BackgroundNoise
0D52F A9 00                         LDA #$00
0D531 85 36                         STA max_noise
0D533 85 37                         STA sweep_noise
0D535                           
0D535                           +endNoise:0D535                               +
0D535                           
0D535                           ;; This is what happens when we forced nmi skip
0D535                           +force_skip_nmi:
0D535                           
0D535                               ;; Increase frame counters
0D535 E6 15                         INC frame_counter
0D537                           
0D537                               ;; reset ball_update_position
0D537 A9 00                         LDA #$00
0D539 85 2B                         STA ball_update_position
0D53B                           
0D53B                               ;; Don't skip next NMI request
0D53B A9 00                         LDA #$00
0D53D 85 13                         STA skip_nmi
0D53F                           
0D53F                               ;; Restore X, Y and PC from stack
0D53F 28                            PLP
0D540 68                            PLA
0D541 A8                            TAY
0D542 68                            PLA
0D543 AA                            TAX
0D544                           
0D544                           +skip_nmi:
0D544                               ;; Restore accumulator from stack
0D544 68                            PLA
0D545                           
0D545                               ;; Return
0D545 40                            RTI
0D546                           
0D546                           ;; IRQ handler (empty)
0D546                           IRQ:
0D546                               .include "interrupt/irq.asm"
0D546 40                            RTI0D547                           
0D547                           ;; Interrupt vectors
0D547 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 46 D4                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 46 D5                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
