	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; TEST MODE (comment to disable)
	                            TESTING = #1
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$74        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Counters 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           
00041                           ;; Current level (doubles as level select variable)
00041                           current_level          .dsb 1
00042                           
00042                           ;; Tile type the ball is currently colliding with
00042                           colliding_tile         .dsb 1
00043                           
00043                           ;; Number of blocks left on screen
00043                           blocks_left            .dsb 1
00044                           
00044                           ;; Sound control variables
00044                           max_noise              .dsb 1
00045                           sweep_noise            .dsb 1
00046                           current_noise          .dsb 1
00047                           noise_timer            .dsb 1
00048                           do_beeps               .dsb 1
00049                           soft_pulse1            .dsb 1
0004A                           
0004A                           ;; Sound effect variables
0004A                           sfx_address            .dsb 2
0004C                           sfx_timer              .dsb 1
0004D                           
0004D                           ;; Additional NMI check for timed PPU fade
0004D                           check_nmi              .dsb 1
0004E                           
0004E                           
0004E                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 FC C4                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 FC C4                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 41                         STA current_level
0C057 85 20                         STA ball_score
0C059 85 21                         STA ball_score+1
0C05B 85 22                         STA ball_score+2
0C05D 85 23                         STA ball_score+3
0C05F 85 24                         STA ball_score+4
0C061 85 25                         STA ball_score+5
0C063                           
0C063                           
0C063                           
0C063                           ;; Main game loop
0C063                           lbl_MainGameLoop:
0C063                               .include "game/main.asm"
0C063                           
0C063                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C063                           ;;
0C063                           ;; game/main.asm
0C063                           ;;
0C063                           ;; The main game loop content.
0C063                           ;;
0C063                           ;;
0C063                           
0C063                               ;; Reset sprite pointer every game loop
0C063 A9 00                         LDA #$00
0C065 85 3D                         STA sprite_ram_pointer
0C067                           
0C067                               ;; Store previous buttons
0C067 A5 0F                         LDA buttons_held
0C069 85 0E                         STA buttons_prev
0C06B                           
0C06B                               ;; Read controller input
0C06B 20 DF C4                      JSR sub_ReadController
0C06E                           
0C06E                               ;; Get buttons released
0C06E A5 0F                         LDA buttons_held
0C070 49 FF                         EOR #$FF
0C072 25 0E                         AND buttons_prev
0C074 85 11                         STA buttons_released
0C076                           
0C076                               ;; Set buttons pressed
0C076 A5 0E                         LDA buttons_prev
0C078 49 FF                         EOR #$FF
0C07A 25 0F                         AND buttons_held
0C07C 85 10                         STA buttons_pressed
0C07E                           
0C07E                               ;; Load screen?
0C07E A5 38                         LDA screen_mode
0C080 29 80                         AND #%10000000
0C082 F0 1E                         BEQ +screenLoaded
0C084                           
0C084                               ;; Get screen type to load
0C084 A5 38                         LDA screen_mode
0C086 29 03                         AND #%00000011
0C088 A8                            TAY
0C089                               
0C089                               ;; Get address to load screen type from
0C089 B9 1E D2                      LDA tbl_LoadScreenLo,y
0C08C 85 0C                         STA pointer
0C08E B9 1B D2                      LDA tbl_LoadScreenHi,y
0C091 85 0D                         STA pointer+1
0C093                           
0C093                               ;; Load screen
0C093 20 7F C6                      JSR sub_DisableRendering
0C096 20 BF C9                      JSR sub_JumpToPointer
0C099 20 93 C6                      JSR sub_EnableRendering
0C09C                               
0C09C                               ;; Don't load screen anymore next loop
0C09C A5 38                         LDA screen_mode
0C09E 29 7F                         AND #%01111111
0C0A0 85 38                         STA screen_mode
0C0A2                               
0C0A2                           
0C0A2                           +screenLoaded:
0C0A2                               ;; Check if we're on the game screen
0C0A2 A5 38                         LDA screen_mode
0C0A4 C9 01                         CMP #IS_GAME_SCREEN
0C0A6 F0 03                         BEQ +
0C0A8 4C 42 C3                          JMP +checkNextScreen
0C0AB                               +
0C0AB                           
0C0AB                               ;; Load sprite 0 in place
0C0AB A9 28                         LDA #$28
0C0AD 8D 00 02                      STA ADDR_SPRITERAM
0C0B0 A9 0F                         LDA #$0F
0C0B2 8D 01 02                      STA ADDR_SPRITERAM+1
0C0B5 A9 22                         LDA #$22
0C0B7 8D 02 02                      STA ADDR_SPRITERAM+2
0C0BA A9 F8                         LDA #$F8
0C0BC 8D 03 02                      STA ADDR_SPRITERAM+3
0C0BF A9 04                         LDA #$04
0C0C1 85 3D                         STA sprite_ram_pointer
0C0C3                           
0C0C3                               ;; We're on the game screen
0C0C3                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0C3 A5 35                         LDA sprites_update_position
0C0C5 F0 03                         BEQ +
0C0C7 4C A8 C2                          JMP +skipSpriteMovement
0C0CA                               +
0C0CA                           
0C0CA                               ;; Check if ball is frozen
0C0CA A5 37                         LDA ball_flags
0C0CC 29 04                         AND #BALL_IS_FROZEN
0C0CE F0 03                         BEQ +
0C0D0 4C 67 C2                          JMP +skipBallMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Move the ball
0C0D3                               .include "game/include/main/move_ball.asm"
0C0D3                           
0C0D3                               ;; Check if ball goes up or down
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 10                         AND #BALL_MOVES_DOWN
0C0D7 F0 2B                         BEQ +moveBallUp
0C0D9                           
0C0D9                           
0C0D9                           +moveBallDown:
0C0D9                               ;; update the low byte
0C0D9 A5 1A                         LDA ball_ypos_lo
0C0DB 85 1C                         STA ball_ypos_lo_prev
0C0DD 18                            CLC
0C0DE 69 74                         ADC #BALL_SPEED_LO
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2                           
0C0E2                               ;; update the high byte with carry
0C0E2 A5 19                         LDA ball_ypos_hi
0C0E4 85 1B                         STA ball_ypos_hi_prev
0C0E6 69 01                         ADC #BALL_SPEED_HI
0C0E8 85 19                         STA ball_ypos_hi
0C0EA                               
0C0EA                               ;; Check bottom bound
0C0EA C9 C8                         CMP #BOUND_BOTTOM
0C0EC 90 3C                         BCC +checkHorizontalMovement
0C0EE F0 3A                         BEQ +checkHorizontalMovement
0C0F0                           
0C0F0                           
0C0F0                               ;; Change ball direction to "up"
0C0F0 A9 C8                         LDA #BOUND_BOTTOM
0C0F2 38                            SEC
0C0F3 E9 01                         SBC #$01
0C0F5 85 19                         STA ball_ypos_hi
0C0F7 A9 00                         LDA #$00
0C0F9 85 1A                         STA ball_ypos_lo
0C0FB A5 37                         LDA ball_flags
0C0FD 29 EF                         AND #MOVE_BALL_UP
0C0FF 85 37                         STA ball_flags
0C101 4C 2A C1                      JMP +checkHorizontalMovement
0C104                           
0C104                           
0C104                           +moveBallUp:
0C104                               ;; update the low byte
0C104 A5 1A                         LDA ball_ypos_lo
0C106 85 1C                         STA ball_ypos_lo_prev
0C108 38                            SEC
0C109 E9 74                         SBC #BALL_SPEED_LO
0C10B 85 1A                         STA ball_ypos_lo
0C10D                           
0C10D                               ;; update the high byte with carry
0C10D A5 19                         LDA ball_ypos_hi
0C10F 85 1B                         STA ball_ypos_hi_prev
0C111 E9 01                         SBC #BALL_SPEED_HI
0C113 85 19                         STA ball_ypos_hi
0C115                               
0C115                               ;; Check top bound
0C115 C9 30                         CMP #BOUND_TOP
0C117 B0 11                         BCS +checkHorizontalMovement
0C119                           
0C119                               ;; Change ball direction to "down"
0C119 A9 30                         LDA #BOUND_TOP
0C11B 18                            CLC
0C11C 69 01                         ADC #$01
0C11E 85 19                         STA ball_ypos_hi
0C120 A9 00                         LDA #$00
0C122 85 1A                         STA ball_ypos_lo
0C124 A5 37                         LDA ball_flags
0C126 09 10                         ORA #MOVE_BALL_DOWN
0C128 85 37                         STA ball_flags
0C12A                           
0C12A                           
0C12A                           +checkHorizontalMovement:
0C12A                           
0C12A                               ;; Check if ball is being nudged
0C12A A5 3E                         LDA nudge_timer
0C12C D0 41                         BNE +doneBallMovement
0C12E                           
0C12E                               ;; Check if left button is held
0C12E A5 0F                         LDA buttons_held
0C130 29 02                         AND #BUTTON_LEFT
0C132 F0 1B                         BEQ +
0C134                                   ;; update the low byte
0C134 A5 18                             LDA ball_xpos_lo
0C136 38                                SEC
0C137 E9 74                             SBC #BALL_SPEED_LO
0C139 85 18                             STA ball_xpos_lo
0C13B                           
0C13B                                   ;; update the high byte
0C13B A5 17                             LDA ball_xpos_hi
0C13D E9 01                             SBC #BALL_SPEED_HI
0C13F 85 17                             STA ball_xpos_hi
0C141                                   
0C141                                   ;; Check left bound
0C141 C9 10                             CMP #BOUND_LEFT
0C143 B0 2A                             BCS +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge right and set nudge timer
0C145 A5 37                             LDA ball_flags
0C147 09 02                             ORA #NUDGE_BALL_RIGHT
0C149 20 B8 C9                          JSR sub_InitiateNudge
0C14C                           
0C14C 4C 6F C1                          JMP +doneBallMovement        
0C14F                               +
0C14F                           
0C14F                               ;; Check if right button is held
0C14F A5 0F                         LDA buttons_held
0C151 29 01                         AND #BUTTON_RIGHT
0C153 F0 1A                         BEQ +
0C155                                   ;; update the low byte
0C155 A5 18                             LDA ball_xpos_lo
0C157 18                                CLC
0C158 69 74                             ADC #BALL_SPEED_LO
0C15A 85 18                             STA ball_xpos_lo
0C15C                           
0C15C                                   ;; update the high byte
0C15C A5 17                             LDA ball_xpos_hi
0C15E 69 01                             ADC #BALL_SPEED_HI
0C160 85 17                             STA ball_xpos_hi     
0C162                           
0C162                                  ;; Check right bound
0C162 C9 E8                             CMP #BOUND_RIGHT
0C164 90 09                             BCC +doneBallMovement
0C166 F0 07                             BEQ +doneBallMovement
0C168                                   
0C168                                   ;; Set flag to nudge left and set nudge timer
0C168 A5 37                             LDA ball_flags
0C16A 29 FD                             AND #NUDGE_BALL_LEFT
0C16C 20 B8 C9                          JSR sub_InitiateNudge
0C16F                               +
0C16F                           
0C16F                           
0C16F                           +doneBallMovement:
0C16F                           
0C16F                               ;; Check nudge
0C16F A5 3E                         LDA nudge_timer
0C171 F0 23                         BEQ +doneBallNudging
0C173 A5 37                             LDA ball_flags
0C175 29 02                             AND #NUDGE_BALL_RIGHT
0C177 F0 10                             BEQ +nudgeBallLeft
0C179                                   
0C179                                       ;; update the low byte
0C179 A5 18                                 LDA ball_xpos_lo
0C17B 18                                    CLC
0C17C 69 74                                 ADC #BALL_SPEED_LO
0C17E 85 18                                 STA ball_xpos_lo
0C180                           
0C180                                       ;; update the high byte
0C180 A5 17                                 LDA ball_xpos_hi
0C182 69 01                                 ADC #BALL_SPEED_HI
0C184 85 17                                 STA ball_xpos_hi  
0C186 4C 96 C1                              JMP +doneBallNudging
0C189                                   +nudgeBallLeft:
0C189                                   
0C189                                   ;; update the low byte
0C189 A5 18                             LDA ball_xpos_lo
0C18B 38                                SEC
0C18C E9 74                             SBC #BALL_SPEED_LO
0C18E 85 18                             STA ball_xpos_lo
0C190                           
0C190                                   ;; update the high byte
0C190 A5 17                             LDA ball_xpos_hi
0C192 E9 01                             SBC #BALL_SPEED_HI
0C194 85 17                             STA ball_xpos_hi
0C196                               +doneBallNudging:
0C196                           
0C196                               ;; Don't update position again until next frame
0C196                               ;; (moved to after move block routine)
0C196                           
0C196                           +doneBallHandling:
0C196                           
0C196                               
0C196                               ;; Do collision detection
0C196                               .include "game/include/main/collision_detection.asm"
0C196                           
0C196                               ;; Get ball's x-left, x-center, x-right position
0C196 A5 17                         LDA ball_xpos_hi
0C198 18                            CLC
0C199 69 F0                         ADC #BALL_LEFT_WGA
0C19B 85 2F                         STA ball_left
0C19D 18                            CLC
0C19E 69 04                         ADC #BALL_HALF_SIZE
0C1A0 85 30                         STA ball_center
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 31                         STA ball_right
0C1A7                           
0C1A7                               ;; Get ball's y-top, y-middle, y-bottom position
0C1A7 A5 19                         LDA ball_ypos_hi
0C1A9 18                            CLC
0C1AA 69 D0                         ADC #BALL_TOP_WGA
0C1AC 85 32                         STA ball_top
0C1AE 18                            CLC
0C1AF 69 04                         ADC #BALL_HALF_SIZE
0C1B1 85 33                         STA ball_middle
0C1B3 18                            CLC
0C1B4 69 04                         ADC #BALL_HALF_SIZE
0C1B6 85 34                         STA ball_bottom
0C1B8                           
0C1B8                           +checkRightCollision:
0C1B8                               ;; Check if ball moves right
0C1B8                               ;; No need to check nudging here as that will never collide with a tile
0C1B8 A5 0F                         LDA buttons_held
0C1BA 29 01                         AND #BUTTON_RIGHT
0C1BC F0 20                         BEQ +checkLeftCollision
0C1BE                           
0C1BE                               ;; Check tile at right position
0C1BE A5 33                         LDA ball_middle
0C1C0 85 00                         STA temp
0C1C2 A5 31                         LDA ball_right
0C1C4 85 01                         STA temp+1
0C1C6 20 67 C6                      JSR sub_ConvertXYToTileType
0C1C9 29 01                         AND #TILE_IS_SOLID
0C1CB F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1CD                           
0C1CD                               ;; Nudge ball and evaluate tile type
0C1CD A9 01                         LDA #$01
0C1CF 85 36                         STA move_block_space_to_check
0C1D1 A5 37                         LDA ball_flags
0C1D3 29 FD                         AND #NUDGE_BALL_LEFT
0C1D5 20 B8 C9                      JSR sub_InitiateNudge
0C1D8 20 F5 C7                      JSR sub_EvaluateTileType
0C1DB 4C 01 C2                      JMP +checkTopCollision
0C1DE                           
0C1DE                           +checkLeftCollision:
0C1DE                               ;; Check if ball moves right
0C1DE                               ;; No need to check nudging here as that will never collide with a tile
0C1DE A5 0F                         LDA buttons_held
0C1E0 29 02                         AND #BUTTON_LEFT
0C1E2 F0 1D                         BEQ +checkTopCollision
0C1E4                           
0C1E4                               ;; Check tile at right position
0C1E4 A5 33                         LDA ball_middle
0C1E6 85 00                         STA temp
0C1E8 A5 2F                         LDA ball_left
0C1EA 85 01                         STA temp+1
0C1EC 20 67 C6                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 0E                         BEQ +checkTopCollision
0C1F3                           
0C1F3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1F3 A9 FF                         LDA #$FF
0C1F5 85 36                         STA move_block_space_to_check
0C1F7 A5 37                         LDA ball_flags
0C1F9 09 02                         ORA #NUDGE_BALL_RIGHT
0C1FB 20 B8 C9                      JSR sub_InitiateNudge
0C1FE 20 F5 C7                      JSR sub_EvaluateTileType
0C201                               
0C201                               
0C201                           +checkTopCollision:
0C201                               ;; Check if ball moves up
0C201 A5 37                         LDA ball_flags
0C203 29 10                         AND #BALL_MOVES_DOWN
0C205 D0 27                         BNE +checkBottomCollision
0C207                           
0C207                               ;; Check tile at top position
0C207 A5 32                         LDA ball_top
0C209 85 00                         STA temp
0C20B A5 30                         LDA ball_center
0C20D 85 01                         STA temp+1
0C20F 20 67 C6                      JSR sub_ConvertXYToTileType
0C212 29 01                         AND #TILE_IS_SOLID
0C214 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C216                           
0C216                               ;; Tile is solid; move ball down and evaluate tile type
0C216 A5 1C                         LDA ball_ypos_lo_prev
0C218 85 1A                         STA ball_ypos_lo
0C21A A5 1B                         LDA ball_ypos_hi_prev
0C21C 85 19                         STA ball_ypos_hi
0C21E A5 37                         LDA ball_flags
0C220 09 10                         ORA #MOVE_BALL_DOWN
0C222 85 37                         STA ball_flags
0C224                           
0C224 A9 F0                         LDA #$F0 ; which is -16
0C226 85 36                         STA move_block_space_to_check
0C228 20 F5 C7                      JSR sub_EvaluateTileType
0C22B 4C 52 C2                      JMP +doneCheckingCollision
0C22E                           
0C22E                           +checkBottomCollision:
0C22E                               ;; No movement check needed: since ball is not moving up, it must move down
0C22E                           
0C22E                               ;; Check tile at bottom position
0C22E A5 34                         LDA ball_bottom
0C230 85 00                         STA temp
0C232 A5 30                         LDA ball_center
0C234 85 01                         STA temp+1
0C236 20 67 C6                      JSR sub_ConvertXYToTileType
0C239 29 01                         AND #TILE_IS_SOLID
0C23B F0 15                         BEQ +doneCheckingCollision
0C23D                           
0C23D                               ;; Tile is solid; move ball up and evaluate tile type
0C23D A5 1C                         LDA ball_ypos_lo_prev
0C23F 85 1A                         STA ball_ypos_lo
0C241 A5 1B                         LDA ball_ypos_hi_prev
0C243 85 19                         STA ball_ypos_hi
0C245 A5 37                         LDA ball_flags
0C247 29 EF                         AND #MOVE_BALL_UP
0C249 85 37                         STA ball_flags
0C24B                           
0C24B A9 10                         LDA #$10
0C24D 85 36                         STA move_block_space_to_check
0C24F 20 F5 C7                      JSR sub_EvaluateTileType
0C252                           
0C252                           +doneCheckingCollision:
0C252                           
0C252                               
0C252                               ;; Update bonus
0C252                               .include "game/include/main/update_bonus.asm"
0C252                           
0C252                           ;; Update the bonus counter on screen
0C252                           
0C252                               ;; If bonus = 000, skip decreasing
0C252 A5 2C                         LDA ball_bonus
0C254 05 2D                         ORA ball_bonus+1
0C256 05 2E                         ORA ball_bonus+2
0C258 F0 0D                         BEQ +done
0C25A                           
0C25A                               ;; Check if bonus timer is done yet
0C25A A5 3F                         LDA bonus_timer
0C25C D0 09                         BNE +done
0C25E                           
0C25E                               ;; Bonus timer is done
0C25E                               ;; Reset bonus timer
0C25E A9 08                         LDA #BONUS_FRAMES
0C260 85 3F                         STA bonus_timer
0C262                               
0C262                               ;; Subtract one from ball bonus ones
0C262 A2 01                         LDX #$01
0C264 20 62 D0                      JSR sub_SubtractXFromBonus
0C267                           
0C267                           +done:
0C267                           
0C267                               
0C267                               ;; Input test for beeps (disabled)
0C267                               ;; .include "game/test/input_beeps.asm"
0C267                           
0C267                               ;; Input test for explosion sound effect (disabled)
0C267                               ;; .include "game/test/input_explosion.asm"
0C267                           
0C267                           
0C267                           +skipBallMovement:
0C267                               ;; Move blocks a pixel up/down/left/right
0C267                               .include "game/include/main/move_blocks.asm"
0C267                           
0C267                               ;; Set up block loop
0C267 A2 04                         LDX #MAX_ANIMATIONS
0C269                           -moveBlocksLoop:
0C269 CA                            DEX
0C26A                           
0C26A                               ;; Check if block is still moving
0C26A BD 80 03                      LDA move_block_timer,x
0C26D F0 33                         BEQ +checkNext
0C26F                               
0C26F                               ;; Check if block is done moving
0C26F C9 01                         CMP #$01
0C271 D0 0B                         BNE +
0C273                                   ;; If so, draw a tile and remove the sprite
0C273 20 C0 C6                          JSR sub_DrawMoveTile
0C276 A9 00                             LDA #$00
0C278 9D 80 03                          STA move_block_timer,x
0C27B 4C A2 C2                          JMP +checkNext
0C27E                               +
0C27E                               
0C27E                               ;; Check in which direction the block is moving
0C27E                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C27E BD 88 03                      LDA move_block_flags,x
0C281 29 03                         AND #%00000011
0C283 F0 14                         BEQ +movingDown
0C285 C9 01                         CMP #$01
0C287 F0 0A                         BEQ +movingUp
0C289 C9 02                         CMP #$02
0C28B F0 12                         BEQ +movingRight
0C28D                               
0C28D                               ;; Move block in correct direction
0C28D                               +movingLeft:
0C28D DE 78 03                      DEC move_block_x,x
0C290 4C A2 C2                      JMP +checkNext
0C293                           
0C293                               +movingUp:
0C293 DE 7C 03                      DEC move_block_y,x
0C296 4C A2 C2                      JMP +checkNext
0C299                           
0C299                               +movingDown:
0C299 FE 7C 03                      INC move_block_y,x
0C29C 4C A2 C2                      JMP +checkNext
0C29F                           
0C29F                               +movingRight:
0C29F FE 78 03                      INC move_block_x,x
0C2A2                           
0C2A2                               ;; Check next block (if any left)
0C2A2                               +checkNext:
0C2A2 E0 00                         CPX #$00
0C2A4 D0 C3                         BNE -moveBlocksLoop
0C2A6                               
0C2A6                               ;; Don't update sprites
0C2A6 E6 35                         INC sprites_update_position
0C2A8                           
0C2A8                           
0C2A8                           +skipSpriteMovement:
0C2A8                               ;; Testing timed PPU scroll concept (disabled)
0C2A8                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2A8                           
0C2A8                               ;; Check if ball is dead
0C2A8 A5 37                         LDA ball_flags
0C2AA 29 01                         AND #BALL_IS_DEAD
0C2AC F0 03                         BEQ +
0C2AE 4C D0 C2                          JMP +ballIsDead
0C2B1                               +
0C2B1                               
0C2B1                               ;; Add ball to sprite buffer
0C2B1 A6 3D                         LDX sprite_ram_pointer
0C2B3 A5 19                         LDA ball_ypos_hi
0C2B5 9D 00 02                      STA ADDR_SPRITERAM,x
0C2B8 E8                            INX
0C2B9 A9 01                         LDA #BALL_TILE_CHR
0C2BB 9D 00 02                      STA ADDR_SPRITERAM,x
0C2BE E8                            INX
0C2BF A9 00                         LDA #BALL_ATTR
0C2C1 9D 00 02                      STA ADDR_SPRITERAM,x
0C2C4 E8                            INX
0C2C5 A5 17                         LDA ball_xpos_hi
0C2C7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2CA E8                            INX
0C2CB 86 3D                         STX sprite_ram_pointer
0C2CD 4C E1 C2                      JMP +drawBlocks
0C2D0                           
0C2D0                           +ballIsDead:
0C2D0                               ;; Check if kill timer has reset
0C2D0 A5 40                         LDA kill_timer
0C2D2 F0 03                         BEQ +
0C2D4 4C E1 C2                          JMP +drawBlocks
0C2D7                               +
0C2D7                               
0C2D7                               ;; Take a live
0C2D7 C6 1F                         DEC ball_lives
0C2D9 D0 03                         BNE +
0C2DB                                   ;; If no lives left, initiate game over sequence
0C2DB 4C 94 C3                          JMP lbl_GameOver
0C2DE                               +
0C2DE                               
0C2DE                               ;; Reload current level
0C2DE 4C AC C4                      JMP lbl_InitiateLevelLoad
0C2E1                           
0C2E1                           
0C2E1                           +drawBlocks:
0C2E1                               ;; Draw moving block(s, if any)
0C2E1                               .include "game/include/main/draw_blocks.asm"
0C2E1                           
0C2E1                           ;; Handle movement of move blocks
0C2E1                           
0C2E1                               ;; Set up a loop
0C2E1 A0 04                         LDY #MAX_ANIMATIONS
0C2E3                           -drawBlocksLoop:
0C2E3 88                            DEY
0C2E4                           
0C2E4                               ;; If timer is zero, check the next move block
0C2E4 B9 80 03                      LDA move_block_timer,y
0C2E7 F0 52                         BEQ +nextMoveBlock
0C2E9                               
0C2E9                               ;; Get current sprite pointer
0C2E9 A6 3D                         LDX sprite_ram_pointer
0C2EB                           
0C2EB                               ;; Draw the sprites on screen
0C2EB B9 7C 03                      LDA move_block_y,y
0C2EE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F1 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C2F4 18                            CLC
0C2F5 69 08                         ADC #$08
0C2F7 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C2FA 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C2FD E8                            INX
0C2FE                           
0C2FE A9 52                         LDA #$52 ; Top left chr id
0C300 9D 00 02                      STA ADDR_SPRITERAM,x
0C303 A9 53                         LDA #$53 ; Top right chr id
0C305 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C308 A9 62                         LDA #$62 ; Bottom left chr id
0C30A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C30D A9 63                         LDA #$63 ; Bottom right chr id
0C30F 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C312 E8                            INX
0C313                           
0C313 A9 00                         LDA #BALL_ATTR
0C315 9D 00 02                      STA ADDR_SPRITERAM,x
0C318 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C31B 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C31E 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C321 E8                            INX
0C322                           
0C322 B9 78 03                      LDA move_block_x,y
0C325 9D 00 02                      STA ADDR_SPRITERAM,x
0C328 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C32B 18                            CLC
0C32C 69 08                         ADC #$08
0C32E 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C331 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C334                           
0C334                               ;; Update sprite RAM pointer
0C334 A5 3D                         LDA sprite_ram_pointer
0C336 18                            CLC
0C337 69 10                         ADC #$10
0C339 85 3D                         STA sprite_ram_pointer
0C33B                           
0C33B                           
0C33B                           
0C33B                           +nextMoveBlock:
0C33B                               ;; Check the next move block
0C33B C0 00                         CPY #$00
0C33D D0 A4                         BNE -drawBlocksLoop
0C33F                           
0C33F 4C 8E C3                      JMP +doneScreenLoad
0C342                           
0C342                           
0C342                           
0C342                           +checkNextScreen:
0C342                           
0C342                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C342                               ;; Upon pressing START, the selected level will start
0C342                               .include "game/include/main/select_level.asm"
0C342                           
0C342                               ;; Change level number on start screen
0C342 A5 10                         LDA buttons_pressed
0C344 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C346 F0 3C                         BEQ +checkStartPress
0C348                           
0C348                                   ;; Select next level (1, 5, 9, 13, 17)
0C348 A5 41                             LDA current_level
0C34A 18                                CLC
0C34B 69 04                             ADC #$04
0C34D C9 14                             CMP #$14
0C34F D0 02                             BNE +
0C351 A9 00                                 LDA #$00
0C353                                   +
0C353 85 41                             STA current_level
0C355                                   
0C355                                   ;; Convert level number to two-byte value
0C355 A9 00                             LDA #$00
0C357 85 03                             STA temp+3
0C359 A5 41                             LDA current_level
0C35B 18                                CLC
0C35C 69 01                             ADC #$01
0C35E                           
0C35E                               -
0C35E C9 0A                             CMP #$0A
0C360 90 08                             BCC +
0C362 E6 03                                 INC temp+3
0C364 38                                    SEC
0C365 E9 0A                                 SBC #$0A
0C367 4C 5E C3                              JMP -
0C36A                                   +
0C36A                           
0C36A                                   ;; Add level number to PPU buffer
0C36A 18                                CLC
0C36B 69 01                             ADC #$01
0C36D 85 02                             STA temp+2
0C36F A9 20                             LDA #$20
0C371 85 00                             STA temp
0C373 A9 D0                             LDA #$D0
0C375 85 01                             STA temp+1
0C377 20 B1 D0                          JSR sub_WriteByteToPPUBuffer
0C37A                                   
0C37A C6 01                             DEC temp+1
0C37C A4 03                             LDY temp+3
0C37E C8                                INY
0C37F 84 02                             STY temp+2
0C381 20 B1 D0                          JSR sub_WriteByteToPPUBuffer
0C384                                   
0C384                               +checkStartPress:
0C384                           
0C384                           
0C384                           
0C384                               ;; If START button is pressed
0C384 A5 10                         LDA buttons_pressed
0C386 29 10                         AND #BUTTON_START
0C388 F0 04                         BEQ +
0C38A                                   ;; Start the level
0C38A A9 81                             LDA #LOAD_GAME_SCREEN
0C38C 85 38                             STA screen_mode
0C38E                               +
0C38E                           
0C38E                           
0C38E                           
0C38E                           +doneScreenLoad:
0C38E                           
0C38E                               ;; Load animations (if any)
0C38E                               ;; and sprite clean-up
0C38E 20 C2 C9                      JSR sub_LoadAnimations
0C391                           
0C391 4C 63 C0                      JMP lbl_MainGameLoop
0C394                           
0C394                           ;; Following sequences are outside main game loop
0C394                           .include "game/include/main/game_over.asm"
0C394                           
0C394                           ;; Game over sequence
0C394                           lbl_GameOver:
0C394                           
0C394                               ;; Disable noise channel
0C394 A9 00                         LDA #$00
0C396 8D 15 40                      STA APU_STATUS
0C399 8D 0C 40                      STA NOISE_VOLUME
0C39C                               
0C39C                               ;; Do blinds effect
0C39C 20 6E C5                      JSR sub_BlindsEffect
0C39F                           
0C39F                               ;; Disable draw after HUD to disable screen
0C39F 20 F3 C4                      JSR sub_WaitForNMI
0C3A2                               -
0C3A2 AD 02 20                          LDA PPU_STATUS
0C3A5 29 40                             AND #SPRITE_0_HIT
0C3A7 D0 F9                         BNE -
0C3A9                               -
0C3A9 AD 02 20                          LDA PPU_STATUS
0C3AC 29 40                             AND #SPRITE_0_HIT
0C3AE F0 F9                         BEQ -
0C3B0 A9 00                         LDA #$00
0C3B2 8D 01 20                      STA PPU_MASK
0C3B5                           
0C3B5                               ;; Remove game area from view
0C3B5 2C 02 20                      BIT PPU_STATUS
0C3B8 A9 20                         LDA #$20
0C3BA 8D 06 20                      STA PPU_ADDR
0C3BD A9 A0                         LDA #$A0
0C3BF 8D 06 20                      STA PPU_ADDR
0C3C2 A9 00                         LDA #$00
0C3C4 A2 16                         LDX #$16
0C3C6                               -xLoop:
0C3C6 A0 20                             LDY #$20
0C3C8                                   -yLoop:
0C3C8 8D 07 20                              STA PPU_DATA
0C3CB 88                                    DEY
0C3CC D0 FA                             BNE -yLoop
0C3CE CA                                DEX
0C3CF D0 F5                         BNE -xLoop
0C3D1                               
0C3D1                               ;; Pause for a little while
0C3D1 A2 18                         LDX #$18
0C3D3                               -
0C3D3 20 F3 C4                          JSR sub_WaitForNMI
0C3D6 CA                                DEX
0C3D7 D0 FA                         BNE -
0C3D9                                       
0C3D9                               ;; Do flash effect
0C3D9 20 6B C9                      JSR sub_FlashEffect
0C3DC                           
0C3DC                               ;; Draw GAME OVER tiles over game screen
0C3DC A9 21                         LDA #$21
0C3DE 85 00                         STA temp
0C3E0 A9 EB                         LDA #$EB
0C3E2 85 01                         STA temp+1
0C3E4                           
0C3E4 A2 00                         LDX #$00
0C3E6                               -gameOverTileLoop:
0C3E6 BD DD D9                          LDA tbl_GameOver,x
0C3E9 85 02                             STA temp+2
0C3EB 20 B1 D0                          JSR sub_WriteByteToPPUBuffer
0C3EE E6 01                             INC temp+1
0C3F0 E8                                INX
0C3F1 E0 0A                             CPX #$0A
0C3F3 D0 F1                         BNE -gameOverTileLoop
0C3F5                               
0C3F5                               ;; Update GAME OVER attributes on game screen
0C3F5 A9 23                         LDA #$23
0C3F7 85 00                         STA temp
0C3F9 A9 DA                         LDA #$DA
0C3FB 85 01                         STA temp+1
0C3FD A9 AA                         LDA #$AA
0C3FF 85 02                         STA temp+2
0C401 A2 04                         LDX #$04
0C403                               -
0C403 20 B1 D0                          JSR sub_WriteByteToPPUBuffer
0C406 E6 01                             INC temp+1
0C408 CA                                DEX
0C409 D0 F8                         BNE -
0C40B 20 F3 C4                      JSR sub_WaitForNMI
0C40E                               
0C40E                              
0C40E                               ;; If player score is larger than high score
0C40E                               ;; Overwrite high score with player score
0C40E                               ;; [@TODO]
0C40E                               
0C40E                               
0C40E                               ;; If player presses either A or START, (soft) reset the game
0C40E                               -checkController:
0C40E 20 DF C4                          JSR sub_ReadController
0C411 A5 0F                             LDA buttons_held
0C413 29 90                             AND #%10010000
0C415 F0 F7                         BEQ -checkController
0C417 4C 4B C0                      JMP lbl_SoftReset
0C41A                           
0C41A                           .include "game/include/main/level_win.asm"
0C41A                           
0C41A                           ;; Handling of level win state
0C41A                           lbl_LevelWin:
0C41A                           
0C41A                               ;; Freeze the ball
0C41A A5 37                         LDA ball_flags
0C41C 09 04                         ORA #FREEZE_BALL
0C41E 85 37                         STA ball_flags
0C420                           
0C420                               ;; Disable noise channel
0C420 A9 00                         LDA #$00
0C422 8D 0C 40                      STA NOISE_VOLUME
0C425                               
0C425                               ;; Wait a few frames
0C425 A2 18                         LDX #$18
0C427 20 9F D0                      JSR sub_WaitXFrames
0C42A                           
0C42A                               ;; Set null tile color to yellow
0C42A A9 3F                         LDA #$3F
0C42C 85 00                         STA temp
0C42E A9 02                         LDA #$02
0C430 85 01                         STA temp+1
0C432 A9 38                         LDA #$38
0C434 85 02                         STA temp+2
0C436 20 B1 D0                      JSR sub_WriteByteToPPUBuffer
0C439                               
0C439                               ;; Quick and dirty way to remove ball from screen
0C439 A9 EF                         LDA #$EF
0C43B 8D 04 02                      STA ADDR_SPRITERAM+4
0C43E 8D 05 02                      STA ADDR_SPRITERAM+5
0C441 8D 06 02                      STA ADDR_SPRITERAM+6
0C444 8D 07 02                      STA ADDR_SPRITERAM+7
0C447                               
0C447                               ;; Initiate frequency beeps (@TODO)
0C447                               
0C447                               ;; Wait a few frames
0C447 A2 10                         LDX #$10
0C449 20 9F D0                      JSR sub_WaitXFrames
0C44C                               
0C44C                               ;; Restore null tile color to dark blue
0C44C A9 3F                         LDA #$3F
0C44E 85 00                         STA temp
0C450 A9 02                         LDA #$02
0C452 85 01                         STA temp+1
0C454 A9 12                         LDA #$12
0C456 85 02                         STA temp+2
0C458 20 B1 D0                      JSR sub_WriteByteToPPUBuffer
0C45B                           
0C45B                               ;; Wait a few frames
0C45B A2 2D                         LDX #$2D
0C45D 20 9F D0                      JSR sub_WaitXFrames
0C460                               
0C460                           
0C460                               ;; Play the end level sweep sound effect, and
0C460                               ;; initiate bonus score routine
0C460 A9 B8                         LDA #$B8
0C462 85 49                         STA soft_pulse1
0C464                           
0C464 A9 01                         LDA #$01
0C466 8D 15 40                      STA APU_STATUS
0C469 85 48                         STA do_beeps
0C46B                           
0C46B                               -bonusPointsLoop:
0C46B                                   ;; Check how many bonus points to subtract
0C46B                                   ;; (either the max, or what's left)
0C46B A5 2C                             LDA ball_bonus
0C46D 05 2D                             ORA ball_bonus+1
0C46F D0 06                             BNE +fullBonus
0C471 A5 2E                             LDA ball_bonus+2
0C473 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C475 90 02                             BCC +partBonus
0C477                           
0C477                                   +fullBonus:
0C477 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C479                                   +partBonus:
0C479                           
0C479                                   ;; Put value that's added to score on the stack
0C479 AA                                TAX
0C47A BD 39 DA                          LDA tbl_BonusToScore,x
0C47D 48                                PHA
0C47E                           
0C47E                                   ;; Subtract X-register from bonus
0C47E 20 62 D0                          JSR sub_SubtractXFromBonus
0C481                           
0C481                                   ;; Get value from stack and add it to the score
0C481 68                                PLA
0C482 20 02 C5                          JSR sub_AddAccumulatorToScore
0C485                           
0C485                                   ;; Wait for NMI twice
0C485 20 F3 C4                          JSR sub_WaitForNMI
0C488 20 F3 C4                          JSR sub_WaitForNMI
0C48B                           
0C48B                                   ;; Check if bonus countdown is done
0C48B A5 2C                             LDA ball_bonus
0C48D 05 2D                             ORA ball_bonus+1
0C48F 05 2E                             ORA ball_bonus+2
0C491 D0 D8                         BNE -bonusPointsLoop
0C493                           
0C493                               ;; fade out the beeping
0C493 A2 08                         LDX #$08
0C495                               -fadeOutLoop:
0C495 20 F3 C4                          JSR sub_WaitForNMI
0C498 20 F3 C4                          JSR sub_WaitForNMI
0C49B C6 49                             DEC soft_pulse1
0C49D CA                                DEX
0C49E D0 F5                         BNE -fadeOutLoop
0C4A0                           
0C4A0                               ;; Stop random beeping
0C4A0 A9 02                         LDA #$02
0C4A2 85 48                         STA do_beeps
0C4A4                           
0C4A4                           
0C4A4                               ;; Wait a few frames
0C4A4 A2 30                         LDX #$30
0C4A6 20 9F D0                      JSR sub_WaitXFrames
0C4A9                           
0C4A9                               ;; Load next level
0C4A9 4C AC C4                      JMP lbl_InitiateLevelLoad
0C4AC                               
0C4AC                           .include "game/include/main/initiate_level_load.asm"
0C4AC                           
0C4AC                           ;; Load level
0C4AC                           lbl_InitiateLevelLoad:
0C4AC                               
0C4AC                               ;; Blind out the screen
0C4AC 20 6E C5                      JSR sub_BlindsEffect
0C4AF                               
0C4AF                               ;; If ball is dead, (re)load current level
0C4AF                               ;; If ball is alive, load next level
0C4AF A5 37                         LDA ball_flags
0C4B1 29 01                         AND #BALL_IS_DEAD
0C4B3 D0 05                         BNE +
0C4B5 E6 41                             INC current_level
0C4B7 4C C0 C4                          JMP +loadLevel
0C4BA                               +
0C4BA                               
0C4BA                               ;; Revive ball
0C4BA A5 37                         LDA ball_flags
0C4BC 29 FE                         AND #REVIVE_BALL
0C4BE 85 37                         STA ball_flags
0C4C0                           
0C4C0                           +loadLevel:
0C4C0                               ;; This loops back to level 1 after level 25 for now,
0C4C0                               ;; as a proper game ending is yet to be introduced.
0C4C0 A5 41                         LDA current_level
0C4C2 C9 19                         CMP #25
0C4C4 D0 04                         BNE +
0C4C6 A9 00                             LDA #$00
0C4C8 85 41                             STA current_level
0C4CA                               +
0C4CA                               
0C4CA                               ;; Tell the game to load the level screen on the next loop.
0C4CA A9 81                         LDA #LOAD_GAME_SCREEN
0C4CC 85 38                         STA screen_mode
0C4CE                           
0C4CE                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C4CE 4C 63 C0                      JMP lbl_MainGameLoop0C4D1                           
0C4D1                           
0C4D1                           ;; Subroutines
0C4D1                           .include "include/subroutines.asm"
0C4D1                           
0C4D1                           ;; RNG
0C4D1                           .include "subroutine/GetRandomNumber.asm"
0C4D1                           
0C4D1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4D1                           ;;
0C4D1                           ;; subroutine/GetRandomNumber.asm
0C4D1                           ;;
0C4D1                           ;; Simple and fast random number generator by White Flame.
0C4D1                           ;;
0C4D1                           ;; Set random_seed to an arbitrary number to randomize between
0C4D1                           ;; gaming sessions, for instance using the frame timer upon
0C4D1                           ;; pressing START on the intro screen.
0C4D1                           ;;
0C4D1                           ;;     ;; IF START PRESSED:
0C4D1                           ;;     LDA frame_counter
0C4D1                           ;;     STA random_seed
0C4D1                           ;;
0C4D1                           ;; Source:
0C4D1                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C4D1                           ;;
0C4D1                           ;;
0C4D1                           
0C4D1                           sub_GetRandomNumber:
0C4D1                               ;; Force EOR if random_seed is zero
0C4D1 A5 16                         LDA random_seed
0C4D3 F0 05                         BEQ +doEor
0C4D5                           
0C4D5                               ;; Shift left, and EOR if the high bit is set
0C4D5 0A                            ASL
0C4D6 F0 04                         BEQ +noEor
0C4D8 90 02                         BCC +noEor
0C4DA                           
0C4DA                           +doEor:
0C4DA 49 1D                         EOR #$1D
0C4DC                           
0C4DC                           +noEor:
0C4DC 85 16                         STA random_seed
0C4DE                           
0C4DE 60                            RTS
0C4DF                           
0C4DF                           
0C4DF                           ;; Read controller input
0C4DF                           .include "subroutine/ReadController.asm"
0C4DF                           
0C4DF                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4DF                           ;;
0C4DF                           ;; subroutine/ReadController.asm
0C4DF                           ;;
0C4DF                           ;; Subroutine that polls the controller and stores the input
0C4DF                           ;; buttons in a variable. This version only handles controller
0C4DF                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C4DF                           ;;
0C4DF                           ;;
0C4DF                           
0C4DF                           sub_ReadController:
0C4DF                           
0C4DF                               ;; Set strobe bit
0C4DF A9 01                         LDA #$01
0C4E1 8D 16 40                      STA JOYPAD_1
0C4E4                           
0C4E4                               ;; Set up ring timer
0C4E4 85 0F                         STA buttons_held
0C4E6                           
0C4E6                               ;; Clear strobe bit
0C4E6 4A                            LSR
0C4E7 8D 16 40                      STA JOYPAD_1
0C4EA                           
0C4EA                               ;; Loop through button presses
0C4EA                               -
0C4EA AD 16 40                          LDA JOYPAD_1
0C4ED 4A                                LSR
0C4EE 26 0F                             ROL buttons_held
0C4F0                           
0C4F0                               ;; Check if ring timer is done
0C4F0 90 F8                         BCC -
0C4F2                           
0C4F2                               ;; Return from subroutine
0C4F2 60                            RTS
0C4F3                           
0C4F3                           
0C4F3                           ;; vBlank/NMI wait
0C4F3                           .include "subroutine/WaitForNMI.asm"
0C4F3                           
0C4F3                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4F3                           ;;
0C4F3                           ;; subroutine/WaitForVBlank.asm
0C4F3                           ;;
0C4F3                           ;; Subroutine that essentially pauses script execution until
0C4F3                           ;; vBlank happens.
0C4F3                           ;;
0C4F3                           ;;
0C4F3                           
0C4F3                           sub_WaitForNMI:
0C4F3 A9 01                         LDA #$01
0C4F5 85 4D                         STA check_nmi
0C4F7                               -
0C4F7 A5 4D                             LDA check_nmi
0C4F9 D0 FC                         BNE -
0C4FB 60                            RTS
0C4FC                           
0C4FC                           .include "subroutine/WaitForVBlank.asm"
0C4FC                           
0C4FC                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4FC                           ;;
0C4FC                           ;; subroutine/WaitForVBlank.asm
0C4FC                           ;;
0C4FC                           ;; Subroutine that essentially pauses script execution until
0C4FC                           ;; vBlank happens.
0C4FC                           ;;
0C4FC                           ;;
0C4FC                           
0C4FC                           sub_WaitForVBlank:
0C4FC 2C 02 20                      BIT $2002
0C4FF 10 FB                         BPL sub_WaitForVBlank
0C501 60                            RTS
0C502                           
0C502                           
0C502                           ;; Game specific subroutines
0C502                           .include "game/include/subroutines.asm"
0C502                           
0C502                           ;; additional game-specific subroutines go here
0C502                           
0C502                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C502                           
0C502                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C502                           ;;
0C502                           ;;  sub_AddAccumulatorToScore.asm
0C502                           ;;
0C502                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C502                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C502                           ;;  actual score.
0C502                           ;;
0C502                           ;;
0C502                           
0C502                           
0C502                           sub_AddAccumulatorToScore:
0C502                           
0C502                               ;; Clear old add_to_score
0C502 A2 05                         LDX #$05
0C504 A0 00                         LDY #$00
0C506                               -
0C506 94 26                             STY add_to_score,x
0C508 CA                                DEX
0C509 10 FB                         BPL -
0C50B                           
0C50B                               ;; Set accumulator to add_to_score variables
0C50B                               ;; Check and update 100s
0C50B                               -checkHundreds:
0C50B C9 64                             CMP #100
0C50D 90 08                             BCC +checkTens
0C50F 38                                    SEC
0C510 E9 64                                 SBC #100
0C512 E6 29                                 INC add_to_score+3
0C514 4C 0B C5                              JMP -checkHundreds
0C517                                   +checkTens:
0C517                           
0C517                               ;; Check and update 10s
0C517                               -checkTens:
0C517 C9 0A                             CMP #10
0C519 90 08                             BCC +setOnes
0C51B 38                                    SEC
0C51C E9 0A                                 SBC #10
0C51E E6 2A                                 INC add_to_score+4
0C520 4C 17 C5                              JMP -checkTens
0C523                                   +setOnes:
0C523                           
0C523                               ;; We're left with 1s
0C523 85 2B                         STA add_to_score+5
0C525                           
0C525                               ;; Byte for byte, add add_to_score to ball_score
0C525 A9 00                         LDA #$00
0C527 85 39                         STA ppu_buffer_update
0C529 A4 3A                         LDY ppu_buffer_pointer
0C52B A2 05                         LDX #$05
0C52D                               -
0C52D B5 26                             LDA add_to_score,x
0C52F 18                                CLC
0C530 75 20                             ADC ball_score,x
0C532 C9 0A                             CMP #10
0C534 90 05                             BCC +
0C536 38                                    SEC
0C537 E9 0A                                 SBC #10
0C539 F6 1F                                 INC ball_score-1,x
0C53B                                   +
0C53B                                   
0C53B                                   ;; Update new score digit
0C53B 95 20                             STA ball_score,x
0C53D                           
0C53D                                   ;; Update score tile in PPU
0C53D A9 20                             LDA #$20
0C53F 99 00 03                          STA ppu_buffer,y
0C542 C8                                INY
0C543 8A                                TXA
0C544 18                                CLC
0C545 69 83                             ADC #$83
0C547 99 00 03                          STA ppu_buffer,y
0C54A C8                                INY
0C54B B5 20                             LDA ball_score,x
0C54D 18                                CLC
0C54E 69 01                             ADC #$01
0C550 99 00 03                          STA ppu_buffer,y
0C553 C8                                INY
0C554                           
0C554                                   ;; Check next digit (if any left)
0C554 CA                                DEX
0C555 30 03                             BMI +done
0C557 4C 2D C5                      JMP -
0C55A                           
0C55A                           +done:
0C55A                               ;; Update PPU buffer pointer and status
0C55A 84 3A                         STY ppu_buffer_pointer
0C55C A9 01                         LDA #$01
0C55E 85 39                         STA ppu_buffer_update
0C560                           
0C560                               ;; Done: return 
0C560 60                            RTS
0C561                           
0C561                           .include "game/subroutine/BackgroundNoise.asm"
0C561                           
0C561                           ;; Play background noise
0C561                           sub_BackgroundNoise:
0C561 A9 32                         LDA #$32
0C563 8D 0C 40                      STA NOISE_VOLUME
0C566 A9 0E                         LDA #$0E
0C568 8D 0E 40                      STA NOISE_PERIOD
0C56B 85 46                         STA current_noise
0C56D 60                            RTS
0C56E                           
0C56E                           .include "game/subroutine/BlindsEffect.asm"
0C56E                           
0C56E                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C56E                           sub_BlindsEffect:
0C56E                           
0C56E                               ;; Set up loop fading
0C56E A9 00                         LDA #$00
0C570 85 07                         STA temp+7
0C572 A0 08                         LDY #$08
0C574                               -fadeLoop:
0C574 84 08                             STY temp+8
0C576                           
0C576                                   ;; Wait for NMI to pass
0C576 20 F3 C4                          JSR sub_WaitForNMI
0C579                                   
0C579                                   ;; Now wait for No-sprite 0
0C579                                   -
0C579 AD 02 20                              LDA PPU_STATUS
0C57C 29 40                                 AND #SPRITE_0_HIT
0C57E D0 F9                             BNE -
0C580                               
0C580                                   ;; Now wait for Sprite 0
0C580                                   -
0C580 AD 02 20                              LDA PPU_STATUS
0C583 29 40                                 AND #SPRITE_0_HIT
0C585 F0 F9                             BEQ -
0C587                                       
0C587                                   ;; Setup tile row loop
0C587 A0 16                             LDY #22
0C589                                   -tileLoop:
0C589                                   
0C589                                       ;; Disable drawing
0C589 A5 12                                 LDA soft_ppu_mask
0C58B 29 F7                                 AND #%11110111
0C58D 8D 01 20                              STA PPU_MASK
0C590                                       
0C590                                       ;; Set up scanline loop
0C590 A2 08                                 LDX #$08
0C592                                       -scanlineLoop:
0C592 E4 08                                     CPX temp+8
0C594 D0 0A                                     BNE +wasteTime
0C596                                           
0C596                                           ;; Restore drawing
0C596 A5 12                                     LDA soft_ppu_mask
0C598 09 08                                     ORA #%00001000
0C59A 8D 01 20                                  STA PPU_MASK
0C59D 4C A6 C5                                  JMP +wasteMoreTime
0C5A0                           
0C5A0                                           ;; Waste 12 frames
0C5A0                                           +wasteTime:
0C5A0 E6 09                                     INC temp+9   ;+5
0C5A2 C6 09                                     DEC temp+9   ;+5
0C5A4 49 00                                     EOR #$00     ;+2
0C5A6                                           
0C5A6                                           ;; Waste about 100 frames
0C5A6                                           +wasteMoreTime:
0C5A6                                           
0C5A6 86 01                                     STX temp+1     ;  3 down, 97 to go
0C5A8 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C5AA                                           -wasteLoop:
0C5AA EA                                            NOP
0C5AB 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C5AD CA                                            DEX        ;  5+5L down,  95-5L to go
0C5AE D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C5B0                           
0C5B0 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C5B2 CA                                        DEX            ;  9+8L down, 91-8L to go
0C5B3 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C5B5                           
0C5B5 88                                    DEY
0C5B6 D0 D1                             BNE -tileLoop
0C5B8                           
0C5B8 A4 08                             LDY temp+8
0C5BA                                   
0C5BA E6 07                             INC temp+7
0C5BC A5 07                             LDA temp+7
0C5BE C9 02                             CMP #$02
0C5C0 D0 B2                             BNE -fadeLoop
0C5C2                           
0C5C2 A9 00                             LDA #$00
0C5C4 85 07                             STA temp+7
0C5C6 88                                DEY
0C5C7 D0 AB                         BNE -fadeLoop
0C5C9                               
0C5C9 60                            RTS
0C5CA                           
0C5CA                           .include "game/subroutine/ClearScreen.asm"
0C5CA                           
0C5CA                           ;; Subroutine to clear the screen
0C5CA                           ;; If it's a game screen, add noise
0C5CA                           
0C5CA                           sub_ClearScreen:
0C5CA                               ;; Check of game screen or not
0C5CA A5 38                         LDA screen_mode
0C5CC 29 03                         AND #CHECK_SCREEN_MODE
0C5CE C9 01                         CMP #IS_GAME_SCREEN
0C5D0 F0 02                         BEQ +
0C5D2 A9 00                             LDA #$00
0C5D4                               +
0C5D4 85 01                         STA temp+1
0C5D6                               
0C5D6                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C5D6 2C 02 20                      BIT PPU_STATUS
0C5D9 A9 20                         LDA #$20
0C5DB 8D 06 20                      STA PPU_ADDR
0C5DE A9 00                         LDA #$00
0C5E0 8D 06 20                      STA PPU_ADDR
0C5E3                               
0C5E3                               ;; Set up tile to draw and loop
0C5E3 85 00                         STA temp
0C5E5 AA                            TAX
0C5E6 A8                            TAY
0C5E7                           
0C5E7                               -     
0C5E7                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C5E7 A5 00                             LDA temp
0C5E9 8D 07 20                          STA PPU_DATA
0C5EC                           
0C5EC                                   ;; Check if we should draw noise next. Noise is drawn if:
0C5EC                                   ;; - Screen mode is game screen
0C5EC                                   ;; - Y between #$06 and #$19 (inclusive)
0C5EC                                   ;; - X between #$02 and #$1D (inclusive)
0C5EC                                   
0C5EC                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C5EC A5 01                             LDA temp+1
0C5EE F0 1C                             BEQ +nextTileInRow
0C5F0                                   
0C5F0                                   ;; If Y < $6, skip the check
0C5F0 C0 06                             CPY #$06
0C5F2 90 18                             BCC +nextTileInRow
0C5F4                                   
0C5F4                                   ;; If X < $1, skip the check
0C5F4 E0 01                             CPX #$01
0C5F6 90 14                             BCC +nextTileInRow
0C5F8                                   
0C5F8                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C5F8 E0 1D                             CPX #$1D
0C5FA D0 04                             BNE +
0C5FC A9 00                                 LDA #$00
0C5FE 85 00                                 STA temp
0C600                                   +
0C600 B0 0A                             BCS +nextTileInRow
0C602                                   
0C602                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C602 20 D1 C4                          JSR sub_GetRandomNumber
0C605 29 07                             AND #%00000111
0C607 18                                CLC
0C608 69 68                             ADC #$68
0C60A 85 00                             STA temp
0C60C                           
0C60C                           +nextTileInRow:
0C60C                                   
0C60C                                   ;; Check if a row has been done. If not, draw the next
0C60C E8                                INX
0C60D E0 20                             CPX #$20
0C60F D0 D6                             BNE -
0C611                                   
0C611                                   ;; Go to the next row (if any left)
0C611 A2 00                             LDX #00
0C613 C8                                INY
0C614                                   
0C614                                   ;; If Y is 1A, skip noise tile check until done drawing
0C614 C0 1A                             CPY #$1A
0C616 D0 04                             BNE +
0C618 A9 00                                 LDA #$00
0C61A 85 01                                 STA temp+1
0C61C                                   +
0C61C                                   
0C61C C0 1E                             CPY #$1E
0C61E D0 C7                         BNE -
0C620                           
0C620                               ;; Clear attribute table
0C620 A9 23                         LDA #$23
0C622 8D 06 20                      STA PPU_ADDR
0C625 A9 C0                         LDA #$C0
0C627 8D 06 20                      STA PPU_ADDR
0C62A A9 00                         LDA #$00
0C62C A2 40                         LDX #$40
0C62E                               -
0C62E 8D 07 20                          STA PPU_DATA
0C631 CA                                DEX
0C632 D0 FA                         BNE -
0C634                               
0C634 60                            RTS
0C635                           
0C635                           .include "game/subroutine/ColorizeBall.asm"
0C635                           
0C635                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C635                           ;;
0C635                           ;;  Subroutine: ColorizeBall
0C635                           ;;
0C635                           ;;  Applies the color set through ball_flags to the ball sprite.
0C635                           ;;  Expects ball_flags to be in the accumulator
0C635                           ;;
0C635                           
0C635                           
0C635                           sub_ColorizeBall:
0C635                           
0C635                               ;; Get color from ball_flags
0C635 4A                            LSR
0C636 4A                            LSR
0C637 4A                            LSR
0C638 4A                            LSR
0C639 4A                            LSR
0C63A AA                            TAX
0C63B                           
0C63B                               ;; Add new light color of ball to PPU palette
0C63B A9 3F                         LDA #$3F
0C63D 85 00                         STA temp
0C63F A9 11                         LDA #$11
0C641 85 01                         STA temp+1
0C643 BD 15 D2                      LDA tbl_BallColorLight,x
0C646 85 02                         STA temp+2
0C648 20 B1 D0                      JSR sub_WriteByteToPPUBuffer
0C64B                               
0C64B                               ;; Add new dark color of ball to PPU palette
0C64B E6 01                         INC temp+1
0C64D BD 0F D2                      LDA tbl_BallColorDark,x
0C650 85 02                         STA temp+2
0C652 20 B1 D0                      JSR sub_WriteByteToPPUBuffer
0C655                               
0C655 60                            RTS
0C656                           
0C656                           .include "game/subroutine/ColorsMatch.asm"
0C656                           
0C656                           ;; Subroutine to check if ball color matches colliding tile color
0C656                           
0C656                           sub_ColorsMatch:
0C656                               ;; Save tile color in temp variable
0C656 A5 42                         LDA colliding_tile
0C658 29 0E                         AND #%00001110
0C65A 85 00                         STA temp
0C65C                           
0C65C                               ;; Get ball color
0C65C A5 37                         LDA ball_flags
0C65E 29 E0                         AND #%11100000
0C660 4A                            LSR
0C661 4A                            LSR
0C662 4A                            LSR
0C663 4A                            LSR
0C664                           
0C664                               ;; Compare with tile color
0C664 C5 00                         CMP temp
0C666 60                            RTS
0C667                           
0C667                           .include "game/subroutine/ConvertXYToTileType.asm"
0C667                           
0C667                           ;; Subroutine to convert the ball's position to a tile type
0C667                           ;; - Expects temp to be y-position of ball within game area
0C667                           ;; - Expects temp+1 to be x-position of ball within game area
0C667                           ;; - Puts result in accumulator and zp variable
0C667                           ;; - Corrupts X-register
0C667                           
0C667                           sub_ConvertXYToTileType:
0C667 A5 01                         LDA temp+1
0C669 4A                            LSR
0C66A 4A                            LSR
0C66B 4A                            LSR
0C66C 4A                            LSR
0C66D 85 09                         STA temp+9
0C66F A5 00                         LDA temp
0C671 29 F0                         AND #%11110000
0C673 18                            CLC
0C674 65 09                         ADC temp+9
0C676 85 09                         STA temp+9
0C678 AA                            TAX
0C679 BD 00 04                      LDA tile_type, x
0C67C 85 42                         STA colliding_tile
0C67E 60                            RTS
0C67F                           
0C67F                           .include "game/subroutine/DisableEnableRendering.asm"
0C67F                           
0C67F                           ;; Subroutines to disable or enable screen rendering
0C67F                           
0C67F                           sub_DisableRendering:
0C67F                               ;; Force NMI skip, disable rendering
0C67F A9 01                     	LDA #$01
0C681 85 14                     	STA force_skip_nmi
0C683 20 FC C4                      JSR sub_WaitForVBlank
0C686 A5 12                         LDA soft_ppu_mask
0C688 29 E7                         AND #%11100111
0C68A 8D 01 20                      STA PPU_MASK
0C68D 85 12                         STA soft_ppu_mask
0C68F 20 FC C4                      JSR sub_WaitForVBlank
0C692 60                            RTS
0C693                           
0C693                           sub_EnableRendering:
0C693                               ;; Enable rendering
0C693 A9 00                     	LDA #$00
0C695 8D 05 20                  	STA PPU_SCROLL
0C698 8D 05 20                  	STA PPU_SCROLL
0C69B 20 FC C4                      JSR sub_WaitForVBlank
0C69E 85 14                     	STA force_skip_nmi
0C6A0 A5 12                         LDA soft_ppu_mask
0C6A2 09 18                         ORA #%00011000
0C6A4 85 12                         STA soft_ppu_mask
0C6A6 8D 01 20                      STA PPU_MASK
0C6A9 20 FC C4                      JSR sub_WaitForVBlank
0C6AC 60                            RTS
0C6AD                           
0C6AD                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C6AD                           
0C6AD                           ;; Draw a tile from the logo on the intro screen
0C6AD                           sub_drawIntroScreenLogoTile:
0C6AD B9 F7 D0                      LDA tbl_IntroScreenLogoChr,y
0C6B0 C9 60                         CMP #$60
0C6B2 D0 08                         BNE +
0C6B4 20 D1 C4                          JSR sub_GetRandomNumber
0C6B7 29 07                             AND #$07
0C6B9 18                                CLC
0C6BA 69 60                             ADC #$60
0C6BC                               +
0C6BC 8D 07 20                      STA PPU_DATA
0C6BF 60                            RTS
0C6C0                           
0C6C0                           .include "game/subroutine/DrawMoveTile.asm"
0C6C0                           
0C6C0                           ;; Draw the move tile as follows:
0C6C0                           ;;
0C6C0                           ;;  1 2
0C6C0                           ;;  3 4 5
0C6C0                           ;;    6 7
0C6C0                           ;;
0C6C0                           ;; (1,2,3,4) is the move block itself
0C6C0                           ;; (5,6,7) are shades unless that tile is solid
0C6C0                           
0C6C0                           ;; X holds the move block sprite slot
0C6C0                           
0C6C0                           sub_DrawMoveTile:
0C6C0                           
0C6C0                               ;; Get tile type index from sprite x and y values
0C6C0                               ;; and store it in a temp variable
0C6C0 BD 78 03                      LDA move_block_x,x
0C6C3 18                            CLC
0C6C4 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C6C6 4A                            LSR
0C6C7 4A                            LSR
0C6C8 4A                            LSR
0C6C9 4A                            LSR
0C6CA 85 09                         STA temp+9
0C6CC BD 7C 03                      LDA move_block_y,x
0C6CF 18                            CLC
0C6D0 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C6D2 29 F0                         AND #%11110000
0C6D4 18                            CLC
0C6D5 65 09                         ADC temp+9
0C6D7 85 09                         STA temp+9
0C6D9 A8                            TAY
0C6DA                               
0C6DA                               ;; Add move tile data on the new tile location
0C6DA BD 84 03                      LDA move_block_tile_type,x
0C6DD 99 00 04                      STA tile_type,y
0C6E0                           
0C6E0                               ;; Draw the original tile type in the ppu buffer
0C6E0                               ;; - get PPU address to write to (temp, temp+1)
0C6E0 8A                            TXA
0C6E1 48                            PHA
0C6E2 A6 09                         LDX temp+9
0C6E4 20 89 C9                      JSR sub_GetPPUAddrFromYXIndex
0C6E7 68                            PLA
0C6E8 AA                            TAX
0C6E9                               
0C6E9                               ;; - based on color, select tile 42 or 4A for top left
0C6E9 BD 88 03                      LDA move_block_flags,x
0C6EC 4A                            LSR
0C6ED 4A                            LSR
0C6EE 4A                            LSR
0C6EF 4A                            LSR
0C6F0 4A                            LSR
0C6F1 A8                            TAY
0C6F2 B9 D6 D9                      LDA tbl_MoveBlockTopLeftTile,y
0C6F5 85 08                         STA temp+8
0C6F7                               
0C6F7                               ;; - save palette ID in temp+6
0C6F7 98                            TYA
0C6F8 4A                            LSR
0C6F9 85 06                         STA temp+6
0C6FB                               
0C6FB                               ;; Prepare PPU buffer
0C6FB A4 3A                         LDY ppu_buffer_pointer
0C6FD A9 00                         LDA #$00
0C6FF 85 39                         STA ppu_buffer_update
0C701                               
0C701                               ;; Draw tile 1 (top left tile of move block)
0C701 20 E2 C7                      JSR sub_DrawTileTemp018
0C704                           
0C704                               
0C704                               ;; Draw tile 2 (top right tile of move block)
0C704 E6 01                         INC temp+1
0C706 E6 08                         INC temp+8
0C708 20 E2 C7                      JSR sub_DrawTileTemp018
0C70B                           
0C70B                               ;; Draw tile 3 (bottom left tile of move block)
0C70B A5 01                         LDA temp+1
0C70D 18                            CLC
0C70E 69 1F                         ADC #$1F
0C710 85 01                         STA temp+1
0C712 A5 00                         LDA temp
0C714 69 00                         ADC #$00
0C716 85 00                         STA temp
0C718 A5 08                         LDA temp+8
0C71A 18                            CLC
0C71B 69 0F                         ADC #$0F
0C71D 85 08                         STA temp+8
0C71F 20 E2 C7                      JSR sub_DrawTileTemp018
0C722                           
0C722                               ;; Draw tile 4 (bottom right tile of move block)
0C722 E6 01                         INC temp+1
0C724 E6 08                         INC temp+8
0C726 20 E2 C7                      JSR sub_DrawTileTemp018
0C729                           
0C729                               ;; Load tile type offset in X register
0C729 8A                            TXA
0C72A 48                            PHA
0C72B A6 09                         LDX temp+9
0C72D                               
0C72D                               ;; Load shade tile in temp+8
0C72D A9 00                         LDA #$00
0C72F 85 08                         STA temp+8
0C731                           
0C731                               ;; Draw tile 5 (right shade) unless tile is solid
0C731 E6 01                         INC temp+1
0C733                               
0C733 8A                            TXA
0C734 29 0F                         AND #%00001111
0C736 C9 0D                         CMP #$0D
0C738 F0 0A                         BEQ +nextTile
0C73A                           
0C73A BD 01 04                      LDA tile_type+1,x
0C73D 29 01                         AND #%00000001
0C73F D0 03                         BNE +nextTile
0C741                               
0C741 20 E2 C7                      JSR sub_DrawTileTemp018
0C744                               
0C744                           
0C744                           +nextTile:
0C744                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C744 A5 01                         LDA temp+1
0C746 18                            CLC
0C747 69 1F                         ADC #$1F
0C749 85 01                         STA temp+1
0C74B A5 00                         LDA temp
0C74D 69 00                         ADC #$00
0C74F 85 00                         STA temp
0C751                           
0C751 8A                            TXA
0C752 29 F0                         AND #%11110000
0C754 C9 90                         CMP #$90
0C756 F0 0A                         BEQ +nextTile
0C758                           
0C758 BD 10 04                      LDA tile_type+16,x
0C75B 29 01                         AND #%00000001
0C75D D0 03                         BNE +nextTile
0C75F                               
0C75F 20 E2 C7                      JSR sub_DrawTileTemp018
0C762                           
0C762                               
0C762                           +nextTile:
0C762                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C762 E6 01                         INC temp+1
0C764                           
0C764 8A                            TXA
0C765 29 F0                         AND #%11110000
0C767 C9 90                         CMP #$90
0C769 F0 11                         BEQ +setTileAttributes
0C76B                               
0C76B 8A                            TXA
0C76C 29 0F                         AND #%00001111
0C76E C9 0D                         CMP #$0D
0C770 F0 0A                         BEQ +setTileAttributes
0C772                               
0C772 BD 11 04                      LDA tile_type+17,x
0C775 29 01                         AND #%00000001
0C777 D0 03                         BNE +setTileAttributes
0C779                               
0C779 20 E2 C7                      JSR sub_DrawTileTemp018
0C77C                               
0C77C                           
0C77C                           +setTileAttributes:
0C77C                               ;; Update attribute table accordingly through ppu buffer
0C77C                               ;; - PPU buffer high byte
0C77C 20 38 D0                      JSR sub_SetTileAttributeAddress
0C77F                           
0C77F 8A                            TXA
0C780 29 10                         AND #%00010000
0C782 F0 05                         BEQ +        
0C784 A9 F0                             LDA #%11110000
0C786 4C 8B C7                          JMP ++
0C789                               +
0C789 A9 0F                         LDA #%00001111
0C78B                               ++
0C78B 85 02                         STA temp+2
0C78D                               
0C78D 8A                            TXA
0C78E 29 01                         AND #%00000001
0C790 F0 07                         BEQ +
0C792 A5 02                             LDA temp+2
0C794 09 CC                             ORA #%11001100
0C796 4C 9D C7                          JMP ++
0C799                               +
0C799 A5 02                         LDA temp+2
0C79B 09 33                         ORA #%00110011
0C79D                               ++
0C79D 85 02                         STA temp+2
0C79F                               
0C79F C9 FC                         CMP #%11111100
0C7A1 F0 22                         BEQ +continue
0C7A3                               
0C7A3 C9 F3                         CMP #%11110011
0C7A5 D0 09                         BNE +
0C7A7 A5 06                             LDA temp+6
0C7A9 0A                                ASL
0C7AA 0A                                ASL
0C7AB 85 06                             STA temp+6
0C7AD 4C C5 C7                          JMP +continue
0C7B0                               +
0C7B0                               
0C7B0 C9 CF                         CMP #%11001111
0C7B2 D0 0A                         BNE +
0C7B4 A6 06                             LDX temp+6
0C7B6 BD 79 D9                          LDA tbl_Times16,x
0C7B9 85 06                             STA temp+6
0C7BB 4C C5 C7                          JMP +continue
0C7BE                               +
0C7BE                               
0C7BE A6 06                         LDX temp+6
0C7C0 BD 89 D9                      LDA tbl_Times64,x
0C7C3 85 06                         STA temp+6
0C7C5                                   
0C7C5                           +continue:
0C7C5 A5 00                         LDA temp
0C7C7 38                            SEC
0C7C8 E9 C0                         SBC #$C0
0C7CA AA                            TAX
0C7CB BD A0 04                      LDA tile_attributes,x
0C7CE 25 02                         AND temp+2
0C7D0 05 06                         ORA temp+6
0C7D2 9D A0 04                      STA tile_attributes,x
0C7D5 99 00 03                      STA ppu_buffer,y
0C7D8 C8                            INY
0C7D9                           
0C7D9                               ;; Restore original X
0C7D9 68                            PLA
0C7DA AA                            TAX
0C7DB                               
0C7DB                               ;; Update PPU buffer
0C7DB 84 3A                         STY ppu_buffer_pointer
0C7DD A9 01                         LDA #$01
0C7DF 85 39                         STA ppu_buffer_update
0C7E1                           
0C7E1                               ;; Return
0C7E1 60                            RTS
0C7E2                           
0C7E2                           .include "game/subroutine/DrawTileTemp018.asm"
0C7E2                           
0C7E2                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C7E2                           
0C7E2                           sub_DrawTileTemp018:
0C7E2 A5 00                         LDA temp
0C7E4 99 00 03                      STA ppu_buffer,y
0C7E7 C8                            INY
0C7E8 A5 01                         LDA temp+1
0C7EA 99 00 03                      STA ppu_buffer,y
0C7ED C8                            INY
0C7EE A5 08                         LDA temp+8
0C7F0 99 00 03                      STA ppu_buffer,y
0C7F3 C8                            INY
0C7F4 60                            RTS
0C7F5                           
0C7F5                           .include "game/subroutine/EvaluateTileType.asm"
0C7F5                           
0C7F5                           ;; Subroutine to evaluate the colliding tile type and take its
0C7F5                           ;; corresponding action (move block, kill player, ...)
0C7F5                           ;; - Expects X-register to be the tile_type offset
0C7F5                           ;; - Uses zp variable colliding_tile
0C7F5                           
0C7F5                           sub_EvaluateTileType:
0C7F5                           
0C7F5                               ;; Check if collided tile is a color block
0C7F5 A5 42                         LDA colliding_tile
0C7F7 29 80                         AND #IS_COLOR_BLOCK
0C7F9 D0 03                         BNE +
0C7FB 4C 64 C8                          JMP +checkIfPaintBlock
0C7FE                               +
0C7FE                               
0C7FE                               ;; It's a color block. Check if the colors match
0C7FE 20 56 C6                      JSR sub_ColorsMatch
0C801 F0 06                         BEQ +
0C803                                   ;; Colors don't match
0C803                                   ;; Play bounce sound effect
0C803 A2 02                             LDX #SFX_BOUNCE
0C805 20 B3 CE                          JSR sub_PreloadSfxFromX
0C808                                   
0C808                                   ;; Return
0C808 60                                RTS
0C809                               +
0C809                           
0C809                               ;; Colors match; destroy color block
0C809                               
0C809                               ;; Convert the metatile offset value (which is in the X register)
0C809                               ;; to its corresponding address in PPU
0C809 20 89 C9                      JSR sub_GetPPUAddrFromYXIndex
0C80C                           
0C80C                               ;; Remove color block from screen by drawing a total
0C80C                               ;; of 7 tiles over it (shade included)
0C80C 20 C2 CE                      JSR sub_RemoveBlockFromScreen
0C80F                               
0C80F                               ;; - Load destruction animation on tile
0C80F                               ;; Get most recent slot for explosion    
0C80F 8A                            TXA
0C810 85 02                         STA temp+2
0C812 A6 3B                         LDX explosion_pointer
0C814                           
0C814                               ;; If 0, use max pointer value
0C814 D0 02                         BNE +
0C816 A2 04                             LDX #MAX_ANIMATIONS
0C818                               +
0C818                           
0C818                               ;; Decrease pointer by one
0C818 CA                            DEX
0C819 86 3B                         STX explosion_pointer
0C81B                           
0C81B                               ;; Load explosion data into RAM
0C81B A9 00                         LDA #$00
0C81D 9D 64 03                      STA explosion_currentframe,x
0C820                           
0C820 A9 04                         LDA #ANIMATION_SPEED
0C822 9D 60 03                      STA explosion_timer,x
0C825                           
0C825 A5 02                         LDA temp+2
0C827 29 0F                         AND #%00001111
0C829 A8                            TAY
0C82A B9 79 D9                      LDA tbl_Times16,y
0C82D 18                            CLC
0C82E 69 0E                         ADC #$0E
0C830 9D 6C 03                      STA explosion_x,x
0C833                           
0C833 A5 02                         LDA temp+2
0C835 29 F0                         AND #%11110000
0C837 18                            CLC
0C838 69 29                         ADC #$29
0C83A 9D 70 03                      STA explosion_y,x
0C83D                           
0C83D A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C83F 9D 68 03                      STA explosion_attributes,x
0C842 A9 01                         LDA #$01
0C844 9D 74 03                      STA explosion_active,x
0C847                           
0C847 A5 02                         LDA temp+2
0C849 AA                            TAX
0C84A                               
0C84A                               
0C84A                               ;; - Write #$00 in tile type ram (makes not-solid)
0C84A A9 00                         LDA #$00
0C84C 9D 00 04                      STA tile_type, x
0C84F                           
0C84F                           
0C84F                               ;; Add (80 + level number) to score
0C84F A5 41                         LDA current_level
0C851 18                            CLC
0C852 69 51                         ADC #81
0C854 20 02 C5                      JSR sub_AddAccumulatorToScore
0C857                           
0C857                           
0C857                               ;; Play thud sound effect
0C857 A2 01                         LDX #SFX_THUD
0C859 20 B3 CE                      JSR sub_PreloadSfxFromX
0C85C                           
0C85C                           
0C85C                               ;; - If there are no color blocks left:
0C85C                               ;;   - Initiate level-win state
0C85C C6 43                         DEC blocks_left
0C85E D0 03                         BNE +
0C860 4C 1A C4                          JMP lbl_LevelWin
0C863                               +
0C863                               
0C863 60                            RTS
0C864                           
0C864                           
0C864                           
0C864                           +checkIfPaintBlock:
0C864                           
0C864                               ;; Check if collided tile is a paint block
0C864 A5 42                         LDA colliding_tile
0C866 29 20                         AND #IS_PAINT_BLOCK
0C868 F0 1F                         BEQ +checkIfDeathBlock
0C86A                                   ;; It's a paint block. Update ball color
0C86A                                   ;; Save x-register
0C86A 8A                                TXA
0C86B 48                                PHA
0C86C                           
0C86C                                   ;; Get tile color
0C86C A5 42                             LDA colliding_tile
0C86E 29 0E                             AND #%00001110
0C870 0A                                ASL
0C871 0A                                ASL
0C872 0A                                ASL
0C873 0A                                ASL
0C874 85 00                             STA temp
0C876                           
0C876                                   ;; Apply tile color to ball
0C876 A5 37                             LDA ball_flags
0C878 29 1F                             AND #%00011111
0C87A 05 00                             ORA temp
0C87C 85 37                             STA ball_flags
0C87E 20 35 C6                          JSR sub_ColorizeBall
0C881                           
0C881                                   ;; Play bounce sound effect
0C881 A2 02                             LDX #SFX_BOUNCE
0C883 20 B3 CE                          JSR sub_PreloadSfxFromX
0C886                           
0C886                                   ;; Restore x-register
0C886 68                                PLA
0C887 AA                                TAX
0C888                           
0C888                                   ;; Return
0C888 60                                RTS
0C889                                   
0C889                                   
0C889                                   
0C889                           +checkIfDeathBlock:
0C889                           
0C889                               ;; Check if collided tile is a death block
0C889 A5 42                         LDA colliding_tile
0C88B 29 10                         AND #IS_DEATH_BLOCK
0C88D F0 3D                         BEQ +checkIfMoveBlock
0C88F                           
0C88F                                   ;; It is a death block
0C88F                                   ;; Freeze and kill player
0C88F A5 37                             LDA ball_flags
0C891 09 05                             ORA #%00000101
0C893 85 37                             STA ball_flags
0C895                                   
0C895                                   ;; Get free explosion slot
0C895 A6 3B                             LDX explosion_pointer
0C897 D0 02                             BNE +
0C899 A2 04                                 LDX #MAX_ANIMATIONS
0C89B                                   +
0C89B CA                                DEX
0C89C 86 3B                             STX explosion_pointer
0C89E                           
0C89E                                   ;; Load explosion data into RAM
0C89E A9 00                             LDA #$00
0C8A0 9D 64 03                          STA explosion_currentframe,x
0C8A3                           
0C8A3 A9 04                             LDA #ANIMATION_SPEED
0C8A5 9D 60 03                          STA explosion_timer,x
0C8A8                           
0C8A8 A5 17                             LDA ball_xpos_hi
0C8AA 38                                SEC
0C8AB E9 08                             SBC #$08
0C8AD 9D 6C 03                          STA explosion_x,x
0C8B0                           
0C8B0 A5 19                             LDA ball_ypos_hi
0C8B2 38                                SEC
0C8B3 E9 06                             SBC #$06
0C8B5 9D 70 03                          STA explosion_y,x
0C8B8                           
0C8B8 A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C8BA 9D 68 03                          STA explosion_attributes,x
0C8BD                           
0C8BD A9 01                             LDA #$01
0C8BF 9D 74 03                          STA explosion_active,x
0C8C2                                   
0C8C2                                   ;; Play explosion sound effect
0C8C2 A2 00                             LDX #SFX_EXPLOSION
0C8C4 20 B3 CE                          JSR sub_PreloadSfxFromX
0C8C7                           
0C8C7                                   ;; Set kill timer
0C8C7 A9 60                             LDA #$60
0C8C9 85 40                             STA kill_timer
0C8CB                           
0C8CB                                   ;; Return
0C8CB 60                                RTS
0C8CC                           
0C8CC                           
0C8CC                           
0C8CC                           +checkIfMoveBlock:
0C8CC                           
0C8CC                               ;; Check if collided tile is a move block
0C8CC A5 42                         LDA colliding_tile
0C8CE 29 40                         AND #IS_MOVE_BLOCK
0C8D0 D0 06                         BNE +
0C8D2                                   ;; Tile is not a move block
0C8D2                                   ;; Therefore, it is a solid wall
0C8D2                                   
0C8D2                                   ;; Play bounce sound effect
0C8D2 A2 02                             LDX #SFX_BOUNCE
0C8D4 20 B3 CE                          JSR sub_PreloadSfxFromX
0C8D7                           
0C8D7                                   ;; Return
0C8D7 60                                RTS
0C8D8                               +
0C8D8                           
0C8D8                               ;; It is a move block. Check if colors match
0C8D8 20 56 C6                      JSR sub_ColorsMatch
0C8DB F0 06                         BEQ +
0C8DD                                   ;; Colors do not match
0C8DD                                   ;; Play bounce sound effect
0C8DD A2 02                             LDX #SFX_BOUNCE
0C8DF 20 B3 CE                          JSR sub_PreloadSfxFromX
0C8E2                           
0C8E2                                   ;; Return
0C8E2 60                                RTS
0C8E3                               +
0C8E3                           
0C8E3                               ;; Colors match
0C8E3                               ;; - Check if next tile is within the playground
0C8E3                               ;; (push X onto stack as well)
0C8E3 8A                            TXA
0C8E4 48                            PHA
0C8E5 18                            CLC
0C8E6 65 36                         ADC move_block_space_to_check
0C8E8 AA                            TAX
0C8E9                               
0C8E9 29 0F                         AND #%00001111
0C8EB C9 0E                         CMP #$0E
0C8ED 90 03                         BCC +
0C8EF 4C 63 C9                          JMP +dontMoveBlock
0C8F2                               +
0C8F2 8A                            TXA
0C8F3 29 F0                         AND #%11110000
0C8F5 C9 A0                         CMP #$A0
0C8F7 D0 03                         BNE +
0C8F9 4C 63 C9                          JMP +dontMoveBlock
0C8FC                               +
0C8FC C9 F0                         CMP #$F0
0C8FE D0 03                         BNE +
0C900 4C 63 C9                          JMP +dontMoveBlock
0C903                               +
0C903                               
0C903                               ;; Check if the next tile is solid
0C903 BD 00 04                      LDA tile_type,x
0C906 29 01                         AND #TILE_IS_SOLID
0C908 F0 03                         BEQ +
0C90A 4C 63 C9                          JMP +dontMoveBlock
0C90D                               +
0C90D                               
0C90D                               ;; Move block has room to move
0C90D                               ;; Pull original X from stack
0C90D 68                            PLA
0C90E AA                            TAX        
0C90F                               
0C90F                               ;; Add the tiles that need updating to ppu buffer, and
0C90F                               ;; update attribute table accordingly through ppu buffer
0C90F 20 89 C9                      JSR sub_GetPPUAddrFromYXIndex
0C912 20 C2 CE                      JSR sub_RemoveBlockFromScreen
0C915                           
0C915                               ;; Store original tile type in temp variable
0C915 BD 00 04                      LDA tile_type,x
0C918 85 08                         STA temp+8
0C91A                           
0C91A                               ;; Write #$00 in tile type ram (makes not-solid)
0C91A A9 00                         LDA #$00
0C91C 9D 00 04                      STA tile_type,x
0C91F                           
0C91F                               ;; Add move tile sprite over the original tile
0C91F                               ;; - Store x in temp variable
0C91F 86 03                         STX temp+3
0C921                               
0C921                               ;; - Update move block pointer
0C921 A6 3C                         LDX move_block_pointer
0C923 D0 02                         BNE +
0C925 A2 04                             LDX #MAX_ANIMATIONS
0C927                               +
0C927 CA                            DEX
0C928 86 3C                         STX move_block_pointer
0C92A                           
0C92A                               ;; = Set move block tile type
0C92A A5 08                         LDA temp+8
0C92C 9D 84 03                      STA move_block_tile_type,x
0C92F                           
0C92F                               ;; - Set move block X position
0C92F A5 03                         LDA temp+3
0C931 29 0F                         AND #%00001111
0C933 A8                            TAY
0C934 C8                            INY
0C935 B9 79 D9                      LDA tbl_Times16,y
0C938 9D 78 03                      STA move_block_x,x
0C93B                               
0C93B                               ;; - Set move block Y position
0C93B A5 03                         LDA temp+3
0C93D 29 F0                         AND #%11110000
0C93F 18                            CLC
0C940 69 30                         ADC #$30
0C942 9D 7C 03                      STA move_block_y,x
0C945 DE 7C 03                      DEC move_block_y,x
0C948                               
0C948                               ;; - Set timer to 16 (+1) frames
0C948 A9 11                         LDA #$11
0C94A 9D 80 03                      STA move_block_timer,x
0C94D                               
0C94D                               ;; - Set move direction
0C94D A5 36                         LDA move_block_space_to_check
0C94F 29 81                         AND #%10000001
0C951 18                            CLC
0C952 2A                            ROL
0C953 69 00                         ADC #$00
0C955 85 04                         STA temp+4
0C957                               
0C957                               ;; - Set block color as ball color and add direction
0C957 A5 37                         LDA ball_flags
0C959 29 E0                         AND #BALL_COLOR
0C95B 05 04                         ORA temp+4
0C95D 9D 88 03                      STA move_block_flags,x
0C960                               
0C960                               ;; - Restore original X
0C960 A6 03                         LDX temp+3
0C962                           
0C962                               ;; Return
0C962 60                            RTS
0C963                           
0C963                           
0C963                           ;; Do not move the move block
0C963                           +dontMoveBlock:
0C963                           
0C963                               ;; Play bounce sound effect
0C963 A2 02                         LDX #SFX_BOUNCE
0C965 20 B3 CE                      JSR sub_PreloadSfxFromX
0C968                           
0C968                               ;; Restore X from stack
0C968 68                            PLA
0C969 AA                            TAX
0C96A                               
0C96A                               ;; Return
0C96A 60                            RTS
0C96B                           
0C96B                           .include "game/subroutine/FlashEffect.asm"
0C96B                           
0C96B                           ;; Apply flashing light effect to background color
0C96B                           sub_FlashEffect:
0C96B A2 00                         LDX #$00
0C96D 86 01                         STX temp+1
0C96F A9 3F                         LDA #$3F
0C971 85 00                         STA temp
0C973                           
0C973                               -flashLoop:
0C973 BD E7 D9                          LDA tbl_BackgroundFade,x
0C976 85 02                             STA temp+2
0C978 20 B1 D0                          JSR sub_WriteByteToPPUBuffer
0C97B A0 03                             LDY #$03
0C97D                                   -
0C97D 20 F3 C4                              JSR sub_WaitForNMI
0C980 88                                    DEY
0C981 D0 FA                             BNE -
0C983 E8                                INX
0C984 E0 0A                             CPX #$0A
0C986 D0 EB                         BNE -flashLoop
0C988                               
0C988 60                            RTS
0C989                           
0C989                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C989                           
0C989                           ;; Get the PPU address from YX index
0C989                           ;; - Expects YX index (aka tile offset) to be in the X register
0C989                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C989                           
0C989                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C989                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C989                           
0C989                           sub_GetPPUAddrFromYXIndex:
0C989 8A                            TXA
0C98A 29 C0                         AND #%11000000
0C98C 18                            CLC
0C98D 2A                            ROL
0C98E 2A                            ROL
0C98F 2A                            ROL
0C990 69 20                         ADC #$20
0C992 85 00                         STA temp
0C994                               
0C994 8A                            TXA
0C995 29 0F                         AND #%00001111
0C997 0A                            ASL
0C998 85 01                         STA temp+1
0C99A                               
0C99A 8A                            TXA
0C99B 29 30                         AND #%00110000
0C99D 0A                            ASL
0C99E 0A                            ASL
0C99F 18                            CLC
0C9A0 65 01                         ADC temp+1
0C9A2 85 01                         STA temp+1
0C9A4                               
0C9A4 A5 00                         LDA temp
0C9A6 69 00                         ADC #$00
0C9A8 85 00                         STA temp
0C9AA                               
0C9AA A5 01                         LDA temp+1
0C9AC 18                            CLC
0C9AD 69 C2                         ADC #$C2
0C9AF 85 01                         STA temp+1
0C9B1                               
0C9B1 A5 00                         LDA temp
0C9B3 69 00                         ADC #$00
0C9B5 85 00                         STA temp
0C9B7                           
0C9B7 60                            RTS
0C9B8                           
0C9B8                           .include "game/subroutine/InitiateNudge.asm"
0C9B8                           
0C9B8                           ;; Tell ball to nudge
0C9B8                           sub_InitiateNudge:
0C9B8 85 37                         STA ball_flags
0C9BA A9 05                         LDA #NUDGE_FRAMES
0C9BC 85 3E                         STA nudge_timer
0C9BE 60                            RTS
0C9BF                           
0C9BF                           .include "game/subroutine/JumpToPointer.asm"
0C9BF                           
0C9BF                           ;; Helper subroutine to JSR to a variable pointer address
0C9BF                           sub_JumpToPointer:
0C9BF 6C 0C 00                      JMP (pointer)
0C9C2                               ;RTS must be handled by the routine (pointer) jumps to
0C9C2                           
0C9C2                           .include "game/subroutine/LoadAnimations.asm"
0C9C2                           
0C9C2                           sub_LoadAnimations:
0C9C2                           
0C9C2                               ;; Set up loop
0C9C2 A2 00                         LDX #$00
0C9C4                               -loop_load_animation:
0C9C4                                   ;; Check if current animation is active. If not, goto next
0C9C4 BD 74 03                          LDA explosion_active,x
0C9C7 D0 03                             BNE +
0C9C9 4C 54 CA                              JMP +next
0C9CC                                   +
0C9CC                           
0C9CC                                   ;; Check the explosion framecounter
0C9CC BD 60 03                          LDA explosion_timer,x
0C9CF D0 17                             BNE +
0C9D1                                       ;; Frametimer is 0
0C9D1                                       ;; Reset to animation speed
0C9D1 A9 04                                 LDA #ANIMATION_SPEED
0C9D3 9D 60 03                              STA explosion_timer,x
0C9D6                           
0C9D6                                       ;; Set next animation frame, and check if we're done yet
0C9D6 FE 64 03                              INC explosion_currentframe,x
0C9D9 BD 64 03                              LDA explosion_currentframe,x
0C9DC C9 0A                                 CMP #ANIM_SLIDES
0C9DE D0 08                                 BNE +
0C9E0                           
0C9E0                                       ;; If we're done, inactivate current explosion, go to the next one
0C9E0 A9 00                                 LDA #$00
0C9E2 9D 74 03                              STA explosion_active,x
0C9E5 4C 54 CA                              JMP +next
0C9E8                                   +
0C9E8                           
0C9E8                                   ;; Load (x,y) position in temp variables
0C9E8 BD 6C 03                          LDA explosion_x,x
0C9EB 85 01                             STA temp+1
0C9ED 85 03                             STA temp+3
0C9EF BD 70 03                          LDA explosion_y,x
0C9F2 85 02                             STA temp+2
0C9F4                           
0C9F4                                   ;; Load attribute in temp variable
0C9F4 BD 68 03                          LDA explosion_attributes,x
0C9F7 85 04                             STA temp+4
0C9F9                           
0C9F9                                   ;; Load current frame into Y-register
0C9F9 BC 64 03                          LDY explosion_currentframe,x
0C9FC                           
0C9FC                                   ;; Load current frame ROM address from table
0C9FC B9 05 D2                          LDA explosion_anim_lo,y
0C9FF 85 0C                             STA pointer
0CA01 B9 FB D1                          LDA explosion_anim_hi,y
0CA04 85 0D                             STA pointer+1
0CA06                           
0CA06                                   ;; Save x-register on stack
0CA06 8A                                TXA
0CA07 48                                PHA
0CA08                           
0CA08                                   ;; Load sprites into sprite RAM
0CA08 A6 3D                             LDX sprite_ram_pointer
0CA0A A0 00                             LDY #$00
0CA0C                           
0CA0C                                   ;; Prepare (x,y) offset for loop
0CA0C 84 00                             STY temp
0CA0E                           
0CA0E                                   -loop_load_sprite:
0CA0E                                   
0CA0E                                       ;; Do not draw empty sprites
0CA0E B1 0C                                 LDA (pointer),y
0CA10 F0 18                                 BEQ +nextSprite
0CA12                                   
0CA12                                           ;; Add y-position to sprite ram buffer
0CA12 A5 02                                     LDA temp+2
0CA14 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA17 E8                                        INX
0CA18                           
0CA18                                           ;; Get tile number from frame ROM address, and
0CA18                                           ;; add it to sprite ram buffer
0CA18 B1 0C                                     LDA (pointer),y
0CA1A 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA1D E8                                        INX
0CA1E                           
0CA1E                                           ;; Add attribute data to sprite ram buffer
0CA1E A5 04                                     LDA temp+4
0CA20 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA23 E8                                        INX
0CA24                           
0CA24                                           ;; Add x-position to sprite ram buffer
0CA24 A5 03                                     LDA temp+3
0CA26 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA29 E8                                        INX
0CA2A                           
0CA2A                                       +nextSprite:
0CA2A                           
0CA2A                                       ;; Check if all sprites are done
0CA2A C8                                    INY
0CA2B C0 09                                 CPY #SLIDE_SIZE
0CA2D F0 21                                 BEQ +updateSpriteRamPointer
0CA2F                           
0CA2F                                       ;; Update x value
0CA2F A5 03                                 LDA temp+3
0CA31 18                                    CLC
0CA32 69 08                                 ADC #$08
0CA34 85 03                                 STA temp+3
0CA36                           
0CA36                                       ;; Update temp for x,y position
0CA36 E6 00                                 INC temp
0CA38 A5 00                                 LDA temp
0CA3A C9 03                                 CMP #SLIDE_WIDTH
0CA3C D0 0F                                 BNE +
0CA3E                                           ;; Row is done; reset x-position
0CA3E A5 01                                     LDA temp+1
0CA40 85 03                                     STA temp+3
0CA42                           
0CA42                                           ;; Update y-position
0CA42 A5 02                                     LDA temp+2
0CA44 18                                        CLC
0CA45 69 08                                     ADC #$08
0CA47 85 02                                     STA temp+2
0CA49                           
0CA49                                           ;; Reset row timer
0CA49 A9 00                                     LDA #$00
0CA4B 85 00                                     STA temp
0CA4D                                       +
0CA4D                           
0CA4D 4C 0E CA                          JMP -loop_load_sprite
0CA50                           
0CA50                               +updateSpriteRamPointer:
0CA50 86 3D                             STX sprite_ram_pointer
0CA52                           
0CA52                                   ;; Retrieve x-register from stack
0CA52 68                                PLA
0CA53 AA                                TAX
0CA54                           
0CA54                               +next:
0CA54                                   ;; Check if all animations have been updated
0CA54 E8                                INX
0CA55 E0 04                             CPX #MAX_ANIMATIONS
0CA57 F0 03                             BEQ +cleanUpSpriteRam
0CA59                           
0CA59 4C C4 C9                      JMP -loop_load_animation
0CA5C                           
0CA5C                           +cleanUpSpriteRam:
0CA5C A6 3D                         LDX sprite_ram_pointer
0CA5E A9 EF                         LDA #$EF
0CA60                               -
0CA60 9D 00 02                          STA ADDR_SPRITERAM,x
0CA63 E8                                INX
0CA64 D0 FA                         BNE -
0CA66                               
0CA66 60                            RTS
0CA67                               
0CA67                           .include "game/subroutine/LoadGameScreen.asm"
0CA67                           
0CA67                           ;; Load the game screen, based on level number
0CA67                           sub_LoadGameScreen:
0CA67                           
0CA67                               ;; Clear the screen
0CA67 20 CA C5                      JSR sub_ClearScreen
0CA6A                               
0CA6A                               ;; Clear collision and attribute data; reset blocks left in the process
0CA6A A2 00                         LDX #$00
0CA6C 8A                            TXA
0CA6D 85 43                         STA blocks_left
0CA6F                               -
0CA6F 9D 00 04                          STA tile_type,x
0CA72 E8                                INX
0CA73 D0 FA                         BNE -
0CA75                               
0CA75                               ;; Get pointer from current level
0CA75 A6 41                         LDX current_level
0CA77 BD 2B D9                      LDA tbl_lvl_layout_lo,x
0CA7A 85 0C                         STA pointer
0CA7C BD 11 D9                      LDA tbl_lvl_layout_hi,x
0CA7F 85 0D                         STA pointer+1
0CA81                           
0CA81                               ;; Set up the loop
0CA81 A0 00                         LDY #$00
0CA83                           -drawRowColumnLoop:
0CA83                           
0CA83                               ;; Load (x,y) of current set of tiles
0CA83 B1 0C                         LDA (pointer),y
0CA85                           
0CA85                               ;; Check if level is done; if so, skip the loop
0CA85 C9 FF                         CMP #LEVEL_END
0CA87 D0 03                         BNE +
0CA89 4C D2 CB                          JMP +doneLevelLoad
0CA8C                               +
0CA8C                           
0CA8C                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CA8C 85 00                         STA temp
0CA8E C8                            INY
0CA8F B1 0C                         LDA (pointer),y
0CA91 85 01                         STA temp+1
0CA93                               
0CA93                               ;; Convert (x,y) to PPU address
0CA93                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CA93 A5 00                         LDA temp
0CA95 29 0F                         AND #%00001111
0CA97 4A                            LSR
0CA98 4A                            LSR
0CA99 09 20                         ORA #$20
0CA9B 85 02                         STA temp+2
0CA9D                               
0CA9D                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CA9D A5 00                         LDA temp
0CA9F 29 F0                         AND #%11110000
0CAA1 4A                            LSR
0CAA2 4A                            LSR
0CAA3 4A                            LSR
0CAA4 85 03                         STA temp+3
0CAA6                               
0CAA6 A5 00                         LDA temp
0CAA8 29 03                         AND #%00000011
0CAAA AA                            TAX
0CAAB BD 89 D9                      LDA tbl_Times64,x
0CAAE 18                            CLC
0CAAF 65 03                         ADC temp+3
0CAB1 18                            CLC
0CAB2 69 C2                         ADC #$C2
0CAB4 85 03                         STA temp+3
0CAB6                               
0CAB6                               ;; Add carry to temp+2
0CAB6 A5 02                         LDA temp+2
0CAB8 69 00                         ADC #$00
0CABA 85 02                         STA temp+2
0CABC                           
0CABC                               ;; Convert tile data to loop count and tile type
0CABC                               ;; temp+4 = color
0CABC A5 01                         LDA temp+1
0CABE 29 07                         AND #%00000111
0CAC0 85 04                         STA temp+4
0CAC2                               
0CAC2                               ;; If color = 7, this is a wall
0CAC2 C9 07                         CMP #%00000111
0CAC4 F0 12                         BEQ +wallHack
0CAC6                                   
0CAC6                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CAC6 29 01                             AND #%00000001
0CAC8 F0 02                             BEQ +
0CACA A9 05                                 LDA #$05
0CACC                                   +
0CACC 85 07                             STA temp+7
0CACE                                
0CACE                                   ;; temp+5 = tile type
0CACE A5 01                             LDA temp+1
0CAD0 4A                                LSR
0CAD1 4A                                LSR
0CAD2 4A                                LSR
0CAD3 29 03                             AND #%00000011
0CAD5 4C DE CA                          JMP +setTileType
0CAD8                               +wallHack:
0CAD8                               
0CAD8                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CAD8 A9 00                         LDA #$00
0CADA 85 07                         STA temp+7
0CADC A9 04                         LDA #$04
0CADE                           
0CADE                           +setTileType:    
0CADE 85 05                         STA temp+5
0CAE0                               
0CAE0                               ;; X = tile offset
0CAE0 18                            CLC
0CAE1 65 07                         ADC temp+7
0CAE3 AA                            TAX
0CAE4                               
0CAE4                               ;; temp+6 = number of tiles
0CAE4 A5 01                         LDA temp+1
0CAE6 29 60                         AND #%01100000
0CAE8 4A                            LSR
0CAE9 4A                            LSR
0CAEA 4A                            LSR
0CAEB 4A                            LSR
0CAEC 4A                            LSR
0CAED 85 06                         STA temp+6
0CAEF                               
0CAEF                               ;; Translate (x,y) to (y,x) for tile RAM
0CAEF A5 00                         LDA temp
0CAF1 0A                            ASL
0CAF2 0A                            ASL
0CAF3 0A                            ASL
0CAF4 0A                            ASL
0CAF5 85 08                         STA temp+8
0CAF7 A5 00                         LDA temp
0CAF9 4A                            LSR
0CAFA 4A                            LSR
0CAFB 4A                            LSR
0CAFC 4A                            LSR
0CAFD 05 08                         ORA temp+8
0CAFF 85 00                         STA temp
0CB01                               
0CB01                               ;; Set up loop
0CB01 98                            TYA
0CB02 48                            PHA
0CB03 A4 06                         LDY temp+6
0CB05                           
0CB05                               -drawTileLoop:
0CB05                                   ;; Write PPU address
0CB05 2C 02 20                          BIT PPU_STATUS
0CB08 A5 02                             LDA temp+2
0CB0A 8D 06 20                          STA PPU_ADDR
0CB0D A5 03                             LDA temp+3
0CB0F 8D 06 20                          STA PPU_ADDR
0CB12                                   
0CB12                                   ;; Write first and second tile
0CB12 BD 8D D9                          LDA tbl_GametileTopLeft,x
0CB15 8D 07 20                          STA PPU_DATA
0CB18 BD 97 D9                          LDA tbl_GametileTopRight,x
0CB1B 8D 07 20                          STA PPU_DATA
0CB1E                                   
0CB1E                                   ;; Update PPU address
0CB1E 2C 02 20                          BIT PPU_STATUS
0CB21 A5 02                             LDA temp+2
0CB23 8D 06 20                          STA PPU_ADDR
0CB26 A5 03                             LDA temp+3
0CB28 18                                CLC
0CB29 69 20                             ADC #$20
0CB2B 8D 06 20                          STA PPU_ADDR
0CB2E                                   
0CB2E                                   ;; Write third and fourth tile
0CB2E BD A1 D9                          LDA tbl_GametileBottomLeft,x
0CB31 8D 07 20                          STA PPU_DATA
0CB34 BD AB D9                          LDA tbl_GametileBottomRight,x
0CB37 8D 07 20                          STA PPU_DATA
0CB3A                           
0CB3A                                   ;; Push x-register to stack
0CB3A 8A                                TXA
0CB3B 48                                PHA
0CB3C                           
0CB3C                                   ;; Update tile RAM (aka collision table)
0CB3C A6 05                             LDX temp+5
0CB3E BD B5 D9                          LDA tbl_GameTileRamByte,x
0CB41 05 04                             ORA temp+4
0CB43 0A                                ASL
0CB44 09 01                             ORA #%00000001
0CB46 A6 00                             LDX temp
0CB48 9D 00 04                          STA tile_type,x
0CB4B                           
0CB4B                                   ;; Check if shade 1 should be drawn
0CB4B E8                                INX
0CB4C BD 00 04                          LDA tile_type,x
0CB4F D0 05                             BNE +
0CB51 A9 00                                 LDA #$00
0CB53 8D 07 20                              STA PPU_DATA
0CB56                                   +
0CB56                                   
0CB56                                   ;; Check if shade 2 should be drawn
0CB56 A5 03                             LDA temp+3
0CB58 18                                CLC
0CB59 69 41                             ADC #$41
0CB5B 85 03                             STA temp+3
0CB5D A5 02                             LDA temp+2
0CB5F 69 00                             ADC #$00
0CB61 85 02                             STA temp+2
0CB63                                   
0CB63 8A                                TXA
0CB64 18                                CLC
0CB65 69 0F                             ADC #$0F
0CB67 AA                                TAX
0CB68                                   
0CB68 BD 00 04                          LDA tile_type,x
0CB6B D0 0F                             BNE +
0CB6D A5 02                                 LDA temp+2
0CB6F 8D 06 20                              STA PPU_ADDR
0CB72 A5 03                                 LDA temp+3
0CB74 8D 06 20                              STA PPU_ADDR
0CB77 A9 00                                 LDA #$00
0CB79 8D 07 20                              STA PPU_DATA
0CB7C                                   +
0CB7C                           
0CB7C                                   ;; Check if shade 3 should be drawn
0CB7C E8                                INX
0CB7D E6 03                             INC temp+3
0CB7F BD 00 04                          LDA tile_type,x
0CB82 D0 0F                             BNE +
0CB84 A5 02                                 LDA temp+2
0CB86 8D 06 20                              STA PPU_ADDR
0CB89 A5 03                                 LDA temp+3
0CB8B 8D 06 20                              STA PPU_ADDR
0CB8E A9 00                                 LDA #$00
0CB90 8D 07 20                              STA PPU_DATA
0CB93                                   +
0CB93                                   
0CB93                                   ;; Restore x-register from stack
0CB93 68                                PLA
0CB94 AA                                TAX
0CB95                                   
0CB95                                   ;; Reset pointer for next tile
0CB95 A5 03                             LDA temp+3
0CB97 38                                SEC
0CB98 E9 42                             SBC #$42
0CB9A 85 03                             STA temp+3
0CB9C A5 02                             LDA temp+2
0CB9E E9 00                             SBC #$00
0CBA0 85 02                             STA temp+2
0CBA2                                   
0CBA2                                   ;; Draw next metatile in this loop (if any left)
0CBA2 88                                DEY
0CBA3 30 27                             BMI +doneDrawingRowColumn
0CBA5                                   
0CBA5                                   ;; Is it a row or a column?
0CBA5 A5 01                             LDA temp+1
0CBA7 10 17                             BPL +
0CBA9                                       ;; It is a column: move pointer down (+$40)
0CBA9 A5 03                                 LDA temp+3
0CBAB 18                                    CLC
0CBAC 69 40                                 ADC #$40
0CBAE 85 03                                 STA temp+3
0CBB0 A5 02                                 LDA temp+2
0CBB2 69 00                                 ADC #$00
0CBB4 85 02                                 STA temp+2
0CBB6                                       
0CBB6                                       ;; Add 16 to temp (as a tile RAM pointer)
0CBB6 A5 00                                 LDA temp
0CBB8 18                                    CLC
0CBB9 69 10                                 ADC #$10
0CBBB 85 00                                 STA temp
0CBBD 4C C9 CB                              JMP +drawNextTile
0CBC0                                   +
0CBC0                                   
0CBC0                                   ;; It is a row: move pointer right (+$02)
0CBC0 A5 03                             LDA temp+3
0CBC2 18                                CLC
0CBC3 69 02                             ADC #$02
0CBC5 85 03                             STA temp+3
0CBC7                                   
0CBC7                                   ;; Add 1 to temp (as a tile RAM pointer)
0CBC7 E6 00                             INC temp
0CBC9                           
0CBC9                               
0CBC9                               ;; Next tile in the row/column
0CBC9                                   +drawNextTile:
0CBC9 4C 05 CB                      JMP -drawTileLoop
0CBCC                           
0CBCC                               ;; Go to the next set of tiles
0CBCC                           +doneDrawingRowColumn:
0CBCC 68                            PLA
0CBCD A8                            TAY
0CBCE C8                            INY
0CBCF 4C 83 CA                      JMP -drawRowColumnLoop
0CBD2                           
0CBD2                           ;; Level loading is done
0CBD2                           +doneLevelLoad:
0CBD2                           
0CBD2                               ;; Count number of color blocks
0CBD2 A2 A0                         LDX #160
0CBD4                               -
0CBD4 BD FF 03                          LDA tile_type-1,x
0CBD7 29 80                             AND #%10000000
0CBD9 F0 02                             BEQ +
0CBDB E6 43                                 INC blocks_left
0CBDD                                   +
0CBDD CA                                DEX
0CBDE D0 F4                         BNE -
0CBE0                           
0CBE0                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CBE0 A9 20                         LDA #$20
0CBE2 8D 06 20                      STA PPU_ADDR
0CBE5 A9 A2                         LDA #$A2
0CBE7 8D 06 20                      STA PPU_ADDR
0CBEA A9 35                         LDA #$35
0CBEC 20 1A CE                      JSR sub_Draw28HorizontalTiles
0CBEF                           
0CBEF                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CBEF A9 23                         LDA #$23
0CBF1 8D 06 20                      STA PPU_ADDR
0CBF4 A9 42                         LDA #$42
0CBF6 8D 06 20                      STA PPU_ADDR
0CBF9 A9 31                         LDA #$31
0CBFB 20 1A CE                      JSR sub_Draw28HorizontalTiles
0CBFE                           
0CBFE                               ;; Left & right game bounds
0CBFE                               ;; Set PPU_ADDR and store in temp variables
0CBFE A9 20                         LDA #$20
0CC00 85 00                         STA temp
0CC02 8D 06 20                      STA PPU_ADDR
0CC05 A9 C1                         LDA #$C1
0CC07 85 01                         STA temp+1
0CC09 8D 06 20                      STA PPU_ADDR
0CC0C                               
0CC0C                               ;; Set vertical bound tile and set up loop
0CC0C A0 33                         LDY #$33
0CC0E A2 14                         LDX #20
0CC10                               -
0CC10                                   ;; Show left tile
0CC10 8C 07 20                          STY PPU_DATA
0CC13                                   
0CC13                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CC13 A5 00                             LDA temp
0CC15 8D 06 20                          STA PPU_ADDR
0CC18 A5 01                             LDA temp+1
0CC1A 18                                CLC
0CC1B 69 1D                             ADC #29
0CC1D 85 01                             STA temp+1
0CC1F 8D 06 20                          STA PPU_ADDR
0CC22                           
0CC22                                   ;; Show right tile
0CC22 8C 07 20                          STY PPU_DATA
0CC25                           
0CC25                                   ;; Check if we're done yet
0CC25 CA                                DEX
0CC26 F0 18                             BEQ +drawCorners
0CC28                                   
0CC28                                   ;; Not done yet: add 3 to low byte for next left bound
0CC28 A5 01                             LDA temp+1
0CC2A 18                                CLC
0CC2B 69 03                             ADC #3
0CC2D 85 01                             STA temp+1
0CC2F                                   
0CC2F                                   ;; Apply carry to high byte
0CC2F A5 00                             LDA temp
0CC31 69 00                             ADC #$00
0CC33 85 00                             STA temp
0CC35                                   
0CC35                                   ;; Store next PPU_ADDR to draw at
0CC35 8D 06 20                          STA PPU_ADDR
0CC38 A5 01                             LDA temp+1
0CC3A 8D 06 20                          STA PPU_ADDR
0CC3D 4C 10 CC                      JMP -
0CC40                               
0CC40                               
0CC40                           
0CC40                           +drawCorners:
0CC40                               ;; Draw the corners of the playing field
0CC40 A9 20                         LDA #$20
0CC42 8D 06 20                      STA PPU_ADDR
0CC45 A9 A1                         LDA #$A1
0CC47 8D 06 20                      STA PPU_ADDR
0CC4A A9 39                         LDA #$39
0CC4C 8D 07 20                      STA PPU_DATA
0CC4F                           
0CC4F A9 20                         LDA #$20
0CC51 8D 06 20                      STA PPU_ADDR
0CC54 A9 BE                         LDA #$BE
0CC56 8D 06 20                      STA PPU_ADDR
0CC59 A9 3A                         LDA #$3A
0CC5B 8D 07 20                      STA PPU_DATA
0CC5E                               ;; (added background tile for Sprite-0 hit)
0CC5E A9 3F                         LDA #$3F
0CC60 8D 07 20                      STA PPU_DATA
0CC63                           
0CC63 A9 23                         LDA #$23
0CC65 8D 06 20                      STA PPU_ADDR
0CC68 A9 41                         LDA #$41
0CC6A 8D 06 20                      STA PPU_ADDR
0CC6D A9 36                         LDA #$36
0CC6F 8D 07 20                      STA PPU_DATA
0CC72                           
0CC72 A9 23                         LDA #$23
0CC74 8D 06 20                      STA PPU_ADDR
0CC77 A9 5E                         LDA #$5E
0CC79 8D 06 20                      STA PPU_ADDR
0CC7C A9 34                         LDA #$34
0CC7E 8D 07 20                      STA PPU_DATA
0CC81                           
0CC81                           
0CC81                               ;; Draw the hud labels
0CC81 A9 20                         LDA #$20
0CC83 8D 06 20                      STA PPU_ADDR
0CC86 A9 62                         LDA #$62
0CC88 8D 06 20                      STA PPU_ADDR
0CC8B A2 00                         LDX #$00
0CC8D                               -
0CC8D BD BA D9                          LDA tbl_HudText,x
0CC90 8D 07 20                          STA PPU_DATA
0CC93 E8                                INX
0CC94 E0 1C                             CPX #28
0CC96 D0 F5                         BNE -
0CC98                           
0CC98                           
0CC98                               ;; Draw the current score
0CC98 A9 20                         LDA #$20
0CC9A 8D 06 20                      STA PPU_ADDR
0CC9D A9 83                         LDA #$83
0CC9F 8D 06 20                      STA PPU_ADDR
0CCA2 A2 00                         LDX #$00
0CCA4                               -
0CCA4 B5 20                             LDA ball_score,x
0CCA6 18                                CLC
0CCA7 69 01                             ADC #$01
0CCA9 8D 07 20                          STA PPU_DATA
0CCAC E8                                INX
0CCAD E0 06                             CPX #$06
0CCAF D0 F3                         BNE -
0CCB1                           
0CCB1                           
0CCB1                               ;; Draw the level number
0CCB1                               ;; (with primitive HEX>DEC)
0CCB1 A5 41                         LDA current_level
0CCB3 18                            CLC
0CCB4 69 01                         ADC #$01
0CCB6 85 01                         STA temp+1
0CCB8                               
0CCB8 C9 14                         CMP #20
0CCBA B0 13                         BCS +tempIsTwo
0CCBC                               
0CCBC C9 0A                         CMP #10
0CCBE B0 05                         BCS +tempIsOne
0CCC0                               
0CCC0 A9 00                         LDA #$00
0CCC2 4C D6 CC                      JMP +setTemp
0CCC5                               
0CCC5                           +tempIsOne:
0CCC5 38                            SEC
0CCC6 E9 0A                         SBC #10
0CCC8 85 01                         STA temp+1
0CCCA A9 01                         LDA #$01
0CCCC 4C D6 CC                      JMP +setTemp
0CCCF                               
0CCCF                           +tempIsTwo:
0CCCF 38                            SEC
0CCD0 E9 14                         SBC #20
0CCD2 85 01                         STA temp+1
0CCD4 A9 02                         LDA #$02
0CCD6                           
0CCD6                           +setTemp:
0CCD6 85 00                         STA temp
0CCD8                               
0CCD8 E6 00                         INC temp
0CCDA E6 01                         INC temp+1
0CCDC                               
0CCDC A9 20                         LDA #$20
0CCDE 8D 06 20                      STA PPU_ADDR
0CCE1 A9 8B                         LDA #$8B
0CCE3 8D 06 20                      STA PPU_ADDR
0CCE6 A5 00                         LDA temp
0CCE8 8D 07 20                      STA PPU_DATA
0CCEB A5 01                         LDA temp+1
0CCED 8D 07 20                      STA PPU_DATA
0CCF0                           
0CCF0                           
0CCF0                               ;; Draw lives (presumes lives to be capped at 9)
0CCF0 A9 20                         LDA #$20
0CCF2 8D 06 20                      STA PPU_ADDR
0CCF5 A9 92                         LDA #$92
0CCF7 8D 06 20                      STA PPU_ADDR
0CCFA A6 1F                         LDX ball_lives
0CCFC E8                            INX
0CCFD 8E 07 20                      STX PPU_DATA
0CD00                           
0CD00                           
0CD00                               ;; Set and draw bonus
0CD00 A9 07                         LDA #$07
0CD02 85 2C                         STA ball_bonus
0CD04 A9 09                         LDA #$09
0CD06 85 2D                         STA ball_bonus+1
0CD08 85 2E                         STA ball_bonus+2
0CD0A                               
0CD0A A9 20                         LDA #$20
0CD0C 8D 06 20                      STA PPU_ADDR
0CD0F A9 9A                         LDA #$9A
0CD11 8D 06 20                      STA PPU_ADDR
0CD14 A2 00                         LDX #$00
0CD16                               -
0CD16 B5 2C                             LDA ball_bonus,x
0CD18 18                                CLC
0CD19 69 01                             ADC #$01
0CD1B 8D 07 20                          STA PPU_DATA
0CD1E E8                                INX
0CD1F E0 03                             CPX #$03
0CD21 D0 F3                         BNE -
0CD23                           
0CD23                           
0CD23                               ;; Set attribute data to RAM
0CD23                               
0CD23                               ;; Byte 0-7 of attribute ram should be #%10100000
0CD23 A2 00                         LDX #$00
0CD25 A9 A0                         LDA #$A0
0CD27                               -
0CD27 9D A0 04                          STA tile_attributes,x
0CD2A E8                                INX
0CD2B E0 08                             CPX #$08
0CD2D D0 F8                         BNE -
0CD2F                           
0CD2F                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CD2F                           
0CD2F                           -attributeLoop:
0CD2F                               ;; Reset current attribute value
0CD2F A9 00                         LDA #$00
0CD31 85 02                         STA temp+2
0CD33                           
0CD33                               ;; Get first metatile in tile ram based on attribute index
0CD33                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CD33 8A                            TXA
0CD34                           
0CD34 38                            SEC
0CD35 E9 08                         SBC #$08
0CD37 85 01                         STA temp+1      ; attr - 8 (temp1)
0CD39 0A                            ASL             ; * 2
0CD3A 85 00                         STA temp        ; temp = temp1 * 2
0CD3C                           
0CD3C A5 01                         LDA temp+1      ; temp1
0CD3E 29 F8                         AND #%11111000  ; rounded down to 8's
0CD40 0A                            ASL             ; * 2
0CD41 18                            CLC
0CD42 65 00                         ADC temp        ; + temp1 * 2
0CD44 85 00                         STA temp        ; first metatile
0CD46                           
0CD46                               ;; Store first metatile in y-register
0CD46 A8                            TAY
0CD47                           
0CD47                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CD47 8A                            TXA
0CD48 29 07                         AND #%00000111
0CD4A C9 07                         CMP #%00000111
0CD4C F0 0B                         BEQ +
0CD4E                           
0CD4E                               ;; If X >= $30, don't apply bottom right metatile
0CD4E E0 30                         CPX #$30
0CD50 B0 07                         BCS +
0CD52                               
0CD52                               ;; Add metatile1 subpalette to attribute value
0CD52 B9 00 04                      LDA tile_type,y
0CD55 29 0C                         AND #%00001100
0CD57 85 02                         STA temp+2
0CD59                               +
0CD59                           
0CD59                           
0CD59                               ;; Apply second metatile
0CD59 88                            DEY
0CD5A                           
0CD5A                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CD5A 8A                            TXA
0CD5B 29 07                         AND #%00000111
0CD5D F0 10                         BEQ +
0CD5F                           
0CD5F                               ;; If X >= $30, don't apply bottom left metatile
0CD5F E0 30                         CPX #$30
0CD61 B0 0C                         BCS +
0CD63                           
0CD63                           
0CD63                           
0CD63                               ;; Add metatile2 subpalette to attribute value
0CD63 B9 00 04                      LDA tile_type,y
0CD66 29 0C                         AND #%00001100
0CD68 4A                            LSR
0CD69 4A                            LSR
0CD6A 05 02                         ORA temp+2
0CD6C 4C 71 CD                      JMP ++
0CD6F                               +
0CD6F A5 02                         LDA temp+2
0CD71                               ++
0CD71 0A                            ASL
0CD72 0A                            ASL
0CD73 85 02                         STA temp+2
0CD75                           
0CD75                           
0CD75                               ;; Apply third metatile
0CD75 98                            TYA
0CD76 38                            SEC
0CD77 E9 0F                         SBC #$0F
0CD79 A8                            TAY
0CD7A                           
0CD7A                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD7A 8A                            TXA
0CD7B 29 07                         AND #%00000111
0CD7D C9 07                         CMP #%00000111
0CD7F F0 11                         BEQ +
0CD81                           
0CD81                               ;; If X < $10, don't apply top right metatile
0CD81 8A                            TXA
0CD82 29 F0                         AND #%11110000
0CD84 F0 0C                         BEQ +
0CD86                           
0CD86                               ;; Add metatile3 subpalette to attribute value
0CD86 B9 00 04                      LDA tile_type,y
0CD89 29 0C                         AND #%00001100
0CD8B 4A                            LSR
0CD8C 4A                            LSR
0CD8D 05 02                         ORA temp+2
0CD8F 4C 94 CD                      JMP ++
0CD92                               +
0CD92 A5 02                         LDA temp+2
0CD94                               ++
0CD94 0A                            ASL
0CD95 0A                            ASL
0CD96 85 02                         STA temp+2
0CD98                           
0CD98                           
0CD98                               ;; Apply fourth metatile
0CD98 88                            DEY
0CD99                           
0CD99                               ;; If X MOD 8 == 0, don't apply top left metatile
0CD99 8A                            TXA
0CD9A 29 07                         AND #%00000111
0CD9C F0 11                         BEQ +
0CD9E                           
0CD9E                               ;; If X < $10, don't apply top left metatile
0CD9E 8A                            TXA
0CD9F 29 F0                         AND #%11110000
0CDA1 F0 0C                         BEQ +
0CDA3                           
0CDA3                               ;; Add metatile4 subpalette to attribute value
0CDA3 B9 00 04                      LDA tile_type,y
0CDA6 29 0C                         AND #%00001100
0CDA8 4A                            LSR
0CDA9 4A                            LSR
0CDAA 05 02                         ORA temp+2
0CDAC 4C B1 CD                      JMP ++
0CDAF                               +
0CDAF A5 02                         LDA temp+2
0CDB1                               ++
0CDB1 9D A0 04                      STA tile_attributes,x
0CDB4                           
0CDB4                               ;; Check the next attribute, if any left
0CDB4 E8                            INX
0CDB5 E0 38                         CPX #$38
0CDB7 F0 03                         BEQ +
0CDB9 4C 2F CD                          JMP -attributeLoop
0CDBC                               +
0CDBC                           
0CDBC                               ;; Stream attribute RAM to PPU
0CDBC 2C 02 20                      BIT PPU_STATUS
0CDBF A9 23                         LDA #$23
0CDC1 8D 06 20                      STA PPU_ADDR
0CDC4 A9 C0                         LDA #$C0
0CDC6 8D 06 20                      STA PPU_ADDR
0CDC9 A2 00                         LDX #$00
0CDCB                               -
0CDCB BD A0 04                          LDA tile_attributes,x
0CDCE 8D 07 20                          STA PPU_DATA
0CDD1 E8                                INX
0CDD2 E0 40                             CPX #$40
0CDD4 D0 F5                         BNE -
0CDD6                           
0CDD6                               ;; Set initial ball position
0CDD6 A6 41                         LDX current_level
0CDD8 BD 45 D9                      LDA tbl_lvl_ball_startpos,x
0CDDB 29 F0                         AND #%11110000
0CDDD 18                            CLC
0CDDE 69 34                         ADC #$34
0CDE0 85 19                         STA ball_ypos_hi
0CDE2 BD 45 D9                      LDA tbl_lvl_ball_startpos,x
0CDE5 0A                            ASL
0CDE6 0A                            ASL
0CDE7 0A                            ASL
0CDE8 0A                            ASL
0CDE9 18                            CLC
0CDEA 69 14                         ADC #$14
0CDEC 85 17                         STA ball_xpos_hi
0CDEE A9 00                         LDA #$00
0CDF0 85 18                         STA ball_xpos_lo
0CDF2 85 1A                         STA ball_ypos_lo
0CDF4                               
0CDF4                               ;; Set initial ball color and direction
0CDF4 BD 5F D9                      LDA tbl_lvl_ball_init,x
0CDF7 29 F0                         AND #%11110000
0CDF9 85 37                         STA ball_flags
0CDFB 20 35 C6                      JSR sub_ColorizeBall
0CDFE                               
0CDFE                               ;; Reset bonus timer
0CDFE A9 08                         LDA #BONUS_FRAMES
0CE00 85 3F                         STA bonus_timer
0CE02                               
0CE02                               ;; Play background noise
0CE02 A9 08                         LDA #$08
0CE04 8D 15 40                      STA APU_STATUS
0CE07 8D 0F 40                      STA NOISE_LENGTH
0CE0A A9 0E                         LDA #$0E
0CE0C 85 46                         STA current_noise
0CE0E A9 00                         LDA #$00
0CE10 85 44                         STA max_noise
0CE12 85 47                         STA noise_timer
0CE14 85 45                         STA sweep_noise
0CE16 20 61 C5                      JSR sub_BackgroundNoise
0CE19                           
0CE19                               ;; Return
0CE19 60                            RTS
0CE1A                           
0CE1A                           
0CE1A                           ;; Subroutine: draw 28 tiles in a row
0CE1A                           sub_Draw28HorizontalTiles:
0CE1A A2 1C                         LDX #28
0CE1C                               -
0CE1C 8D 07 20                          STA PPU_DATA
0CE1F CA                                DEX
0CE20 D0 FA                         BNE -
0CE22 60                            RTS
0CE23                           
0CE23                           .include "game/subroutine/LoadIntroScreen.asm"
0CE23                           
0CE23                           ;; Load the intro screen
0CE23                           sub_LoadIntroScreen:
0CE23                           
0CE23                               ;; Load intro palette
0CE23 2C 02 20                      BIT PPU_STATUS
0CE26 A9 3F                         LDA #$3F
0CE28 8D 06 20                      STA PPU_ADDR
0CE2B A9 00                         LDA #$00
0CE2D 8D 06 20                      STA PPU_ADDR
0CE30 A2 00                         LDX #$00
0CE32                               -
0CE32 BD D7 D0                          LDA tbl_IntroScreenPalette,x
0CE35 8D 07 20                          STA PPU_DATA
0CE38 E8                                INX
0CE39 E0 20                             CPX #$20
0CE3B D0 F5                         BNE -
0CE3D                               
0CE3D                               ;; Put ball in the middle
0CE3D A9 7C                         LDA #$7C
0CE3F 85 17                         STA ball_xpos_hi
0CE41 85 19                         STA ball_ypos_hi
0CE43                           
0CE43                               ;; Clear the screen
0CE43 20 CA C5                      JSR sub_ClearScreen
0CE46                           
0CE46                               ;; Set up intro screen draw loop
0CE46 A2 00                         LDX #$00
0CE48                           
0CE48                           -loop_IntroScreenData:
0CE48                           
0CE48                               ;; Get current byte from intro screen data
0CE48 BD FF D0                      LDA tbl_IntroScreenData,x
0CE4B                           
0CE4B                               ;; If current byte is #$3F, we're done drawing.
0CE4B C9 3F                         CMP #$3F
0CE4D D0 03                         BNE +
0CE4F 4C 9C CE                          JMP +goToEndIntroScreen
0CE52                               +
0CE52                           
0CE52                               ;; If highest bits are %11, draw a plain tile
0CE52 29 C0                         AND #%11000000
0CE54 D0 03                         BNE +
0CE56 4C 7C CE                          JMP +drawTile
0CE59                               +
0CE59                               
0CE59                               ;; If highest bits are %01, set the PPU address
0CE59                               ;; If not, draw two logo tiles
0CE59 C9 40                         CMP #%01000000
0CE5B D0 03                         BNE +drawLogo
0CE5D 4C 86 CE                          JMP +setPpuAddr
0CE60                           
0CE60                           +drawLogo:
0CE60                               ;; Get bits 0-2 and store in a temp variable
0CE60 BD FF D0                      LDA tbl_IntroScreenData,x
0CE63 29 07                         AND #%00000111
0CE65 85 00                         STA temp
0CE67                               
0CE67                               ;; Get bits 3-5, shift over to get a value from 0-7
0CE67 BD FF D0                      LDA tbl_IntroScreenData,x
0CE6A 4A                            LSR
0CE6B 4A                            LSR
0CE6C 4A                            LSR
0CE6D 29 07                         AND #%00000111
0CE6F                               
0CE6F                               ;; Draw the tile that corresponds with that value
0CE6F A8                            TAY
0CE70 20 AD C6                      JSR sub_drawIntroScreenLogoTile
0CE73                               
0CE73                               ;; Do the same for the value stored in temp
0CE73 A4 00                         LDY temp
0CE75 20 AD C6                      JSR sub_drawIntroScreenLogoTile
0CE78                           
0CE78                               ;; Next byte please
0CE78 E8                            INX
0CE79 4C 48 CE                      JMP -loop_IntroScreenData
0CE7C                           
0CE7C                           +drawTile:
0CE7C                               ;; Just draw the tile value on screen
0CE7C BD FF D0                      LDA tbl_IntroScreenData,x
0CE7F 8D 07 20                      STA PPU_DATA
0CE82                               
0CE82                               ;; Next byte please
0CE82 E8                            INX
0CE83 4C 48 CE                      JMP -loop_IntroScreenData
0CE86                           
0CE86                           
0CE86                           +setPpuAddr:
0CE86                               ;; Reset the PPU latch
0CE86 2C 02 20                      BIT PPU_STATUS
0CE89                               
0CE89                               ;; Sanitize and write the high byte of the PPU address
0CE89 BD FF D0                      LDA tbl_IntroScreenData,x
0CE8C 29 3F                         AND #%00111111
0CE8E 8D 06 20                      STA PPU_ADDR
0CE91                           
0CE91                               ;; Write the low byte of the PPU address
0CE91 E8                            INX
0CE92 BD FF D0                      LDA tbl_IntroScreenData,x
0CE95 8D 06 20                      STA PPU_ADDR
0CE98                               
0CE98                               ;; PPU has been set up to draw tiles at the correct spot now.
0CE98                               
0CE98                               ;; Next byte please.
0CE98 E8                            INX
0CE99 4C 48 CE                      JMP -loop_IntroScreenData
0CE9C                           
0CE9C                           +goToEndIntroScreen:
0CE9C                           
0CE9C                               ;; To color the 1.LEVEL: line green, we need to update two
0CE9C                               ;; values in the PPU attribute data.
0CE9C 2C 02 20                      BIT PPU_STATUS
0CE9F A9 23                         LDA #$23
0CEA1 8D 06 20                      STA PPU_ADDR
0CEA4 A9 CB                         LDA #$CB
0CEA6 8D 06 20                      STA PPU_ADDR
0CEA9 A9 0A                         LDA #%00001010
0CEAB 8D 07 20                      STA PPU_DATA
0CEAE 8D 07 20                      STA PPU_DATA
0CEB1                           
0CEB1 60                            RTS
0CEB2                           
0CEB2                           .include "game/subroutine/LoadWinScreen.asm"
0CEB2                           
0CEB2                           ;; Load the win screen (in progress)
0CEB2                           sub_LoadWinScreen:
0CEB2 60                            RTS
0CEB3                           
0CEB3                           .include "game/subroutine/PreloadSfxFromX.asm"
0CEB3                           
0CEB3                           sub_PreloadSfxFromX:
0CEB3                               
0CEB3                               ;; Load sample X into sfx address (low byte)
0CEB3 BD 36 DA                      LDA tbl_Sfx_lo,x
0CEB6 85 4A                         STA sfx_address
0CEB8                               
0CEB8                               ;; Load sample X into sfx address (high byte)
0CEB8 BD 33 DA                      LDA tbl_Sfx_hi,x
0CEBB 85 4B                         STA sfx_address+1
0CEBD                               
0CEBD                               ;; Start SFX timer
0CEBD A9 01                         LDA #$01
0CEBF 85 4C                         STA sfx_timer
0CEC1                               
0CEC1 60                            RTS
0CEC2                               
0CEC2                               0CEC2                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CEC2                           
0CEC2                           ;; Remove a block from screen
0CEC2                           sub_RemoveBlockFromScreen:
0CEC2                           
0CEC2                               ;; Get current buffer location
0CEC2 A4 3A                         LDY ppu_buffer_pointer
0CEC4                               
0CEC4                               ;; TILE 1: if metatile on top left is solid, draw
0CEC4                               ;; null tile, else draw random noise tile
0CEC4 A9 00                         LDA #$00
0CEC6 85 39                         STA ppu_buffer_update
0CEC8                               
0CEC8 A5 00                         LDA temp
0CECA 99 00 03                      STA ppu_buffer,y
0CECD C8                            INY
0CECE A5 01                         LDA temp+1
0CED0 99 00 03                      STA ppu_buffer,y
0CED3 C8                            INY
0CED4                               
0CED4 8A                            TXA
0CED5 29 0F                         AND #%00001111
0CED7 F0 11                         BEQ +drawRandomTile
0CED9                           
0CED9 8A                            TXA
0CEDA 29 F0                         AND #%11110000
0CEDC F0 0C                         BEQ +drawRandomTile
0CEDE                           
0CEDE BD EF 03                      LDA tile_type-17,x
0CEE1 29 01                         AND #%00000001
0CEE3 F0 05                         BEQ +drawRandomTile  
0CEE5                           
0CEE5                               ;; Draw a null tile
0CEE5 A9 00                         LDA #$00
0CEE7 4C F2 CE                      JMP +addToPPUBuffer
0CEEA                               
0CEEA                           +drawRandomTile:
0CEEA                               ;; Draw a random tile
0CEEA 20 D1 C4                      JSR sub_GetRandomNumber
0CEED 29 07                         AND #%00000111
0CEEF 18                            CLC
0CEF0 69 68                         ADC #$68
0CEF2                               
0CEF2                               ;; Add tile to ppu buffer
0CEF2                           +addToPPUBuffer:
0CEF2 99 00 03                      STA ppu_buffer,y
0CEF5 C8                            INY
0CEF6                           
0CEF6                               ;; TILE 2: If metatile above is solid, draw null,
0CEF6                               ;; else draw random noise.
0CEF6 E6 01                         INC temp+1
0CEF8 A5 00                         LDA temp
0CEFA 99 00 03                      STA ppu_buffer,y
0CEFD C8                            INY
0CEFE A5 01                         LDA temp+1
0CF00 99 00 03                      STA ppu_buffer,y
0CF03 C8                            INY
0CF04                               
0CF04 8A                            TXA
0CF05 29 F0                         AND #%11110000
0CF07 F0 0C                         BEQ +drawRandomTile
0CF09                               
0CF09 BD F0 03                      LDA tile_type-16,x
0CF0C 29 01                         AND #%00000001
0CF0E F0 05                         BEQ +drawRandomTile
0CF10                               
0CF10 A9 00                         LDA #%00
0CF12 4C 1D CF                      JMP +addToPPUBuffer
0CF15                           
0CF15                           +drawRandomTile:
0CF15 20 D1 C4                      JSR sub_GetRandomNumber
0CF18 29 07                         AND #%00000111
0CF1A 18                            CLC
0CF1B 69 68                         ADC #$68
0CF1D                           
0CF1D                           +addToPPUBuffer:
0CF1D 99 00 03                      STA ppu_buffer,y
0CF20 C8                            INY
0CF21                               
0CF21                               ;; TILE 3 - If metatile left is solid, draw null,
0CF21                               ;; else draw random noise.
0CF21 A5 01                         LDA temp+1
0CF23 18                            CLC
0CF24 69 1F                         ADC #$1F
0CF26 85 01                         STA temp+1
0CF28 A5 00                         LDA temp
0CF2A 69 00                         ADC #$00
0CF2C 85 00                         STA temp
0CF2E 99 00 03                      STA ppu_buffer,y
0CF31 C8                            INY
0CF32 A5 01                         LDA temp+1
0CF34 99 00 03                      STA ppu_buffer,y
0CF37 C8                            INY
0CF38                               
0CF38 8A                            TXA
0CF39 29 0F                         AND #%00001111
0CF3B F0 0C                         BEQ +drawRandomTile
0CF3D                               
0CF3D BD FF 03                      LDA tile_type-1,x
0CF40 29 01                         AND #%00000001
0CF42 F0 05                         BEQ +drawRandomTile
0CF44                               
0CF44 A9 00                         LDA #%00
0CF46 4C 51 CF                      JMP +addToPPUBuffer
0CF49                           
0CF49                           +drawRandomTile:
0CF49 20 D1 C4                      JSR sub_GetRandomNumber
0CF4C 29 07                         AND #%00000111
0CF4E 18                            CLC
0CF4F 69 68                         ADC #$68
0CF51                               
0CF51                           +addToPPUBuffer:
0CF51 99 00 03                      STA ppu_buffer,y
0CF54 C8                            INY
0CF55                               
0CF55                               ;; TILE 4 - Always random noise
0CF55 E6 01                         INC temp+1
0CF57 A5 00                         LDA temp
0CF59 99 00 03                      STA ppu_buffer,y
0CF5C C8                            INY
0CF5D A5 01                         LDA temp+1
0CF5F 99 00 03                      STA ppu_buffer,y
0CF62 C8                            INY
0CF63 20 D1 C4                      JSR sub_GetRandomNumber
0CF66 29 07                         AND #%00000111
0CF68 18                            CLC
0CF69 69 68                         ADC #$68
0CF6B 99 00 03                      STA ppu_buffer,y
0CF6E C8                            INY
0CF6F                           
0CF6F                               ;; TILE 5 - If tile on the right is solid, skip,
0CF6F                               ;; else draw random noise tile
0CF6F E6 01                         INC temp+1
0CF71                               
0CF71 8A                            TXA
0CF72 29 0F                         AND #%00001111
0CF74 C9 0D                         CMP #$0D
0CF76 F0 1F                         BEQ +skipTile
0CF78                               
0CF78 BD 01 04                      LDA tile_type+1,x
0CF7B 29 01                         AND #%00000001
0CF7D D0 18                         BNE +skipTile
0CF7F A5 00                             LDA temp
0CF81 99 00 03                          STA ppu_buffer,y
0CF84 C8                                INY
0CF85 A5 01                             LDA temp+1
0CF87 99 00 03                          STA ppu_buffer,y
0CF8A C8                                INY
0CF8B 20 D1 C4                          JSR sub_GetRandomNumber
0CF8E 29 07                             AND #%00000111
0CF90 18                                CLC
0CF91 69 68                             ADC #$68
0CF93 99 00 03                          STA ppu_buffer,y
0CF96 C8                                INY    
0CF97                               +skipTile:
0CF97                           
0CF97                               ;; TILE 6 - If tile on bottom is solid, skip,
0CF97                               ;; else draw random noise
0CF97 A5 01                         LDA temp+1
0CF99 18                            CLC
0CF9A 69 1F                         ADC #$1F
0CF9C 85 01                         STA temp+1
0CF9E A5 00                         LDA temp
0CFA0 69 00                         ADC #$00
0CFA2 85 00                         STA temp
0CFA4                           
0CFA4 8A                            TXA
0CFA5 29 F0                         AND #%11110000
0CFA7 C9 90                         CMP #$90
0CFA9 F0 1F                         BEQ +skipTile
0CFAB                           
0CFAB BD 10 04                      LDA tile_type+16,x
0CFAE 29 01                         AND #%00000001
0CFB0 D0 18                         BNE +skipTile
0CFB2 A5 00                             LDA temp
0CFB4 99 00 03                          STA ppu_buffer,y
0CFB7 C8                                INY
0CFB8 A5 01                             LDA temp+1
0CFBA 99 00 03                          STA ppu_buffer,y
0CFBD C8                                INY
0CFBE 20 D1 C4                          JSR sub_GetRandomNumber
0CFC1 29 07                             AND #%00000111
0CFC3 18                                CLC
0CFC4 69 68                             ADC #$68
0CFC6 99 00 03                          STA ppu_buffer,y
0CFC9 C8                                INY    
0CFCA                               +skipTile:
0CFCA                               
0CFCA                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CFCA                               ;; else draw random noise
0CFCA E6 01                         INC temp+1
0CFCC                           
0CFCC 8A                            TXA
0CFCD 29 F0                         AND #%11110000
0CFCF C9 90                         CMP #$90
0CFD1 F0 26                         BEQ +skipTile
0CFD3                               
0CFD3 8A                            TXA
0CFD4 29 0F                         AND #%00001111
0CFD6 C9 0D                         CMP #$0D
0CFD8 F0 1F                         BEQ +skipTile
0CFDA                               
0CFDA BD 11 04                      LDA tile_type+17,x
0CFDD 29 01                         AND #%00000001
0CFDF D0 18                         BNE +skipTile
0CFE1 A5 00                             LDA temp
0CFE3 99 00 03                          STA ppu_buffer,y
0CFE6 C8                                INY
0CFE7 A5 01                             LDA temp+1
0CFE9 99 00 03                          STA ppu_buffer,y
0CFEC C8                                INY
0CFED 20 D1 C4                          JSR sub_GetRandomNumber
0CFF0 29 07                             AND #%00000111
0CFF2 18                                CLC
0CFF3 69 68                             ADC #$68
0CFF5 99 00 03                          STA ppu_buffer,y
0CFF8 C8                                INY    
0CFF9                               +skipTile:   
0CFF9                           
0CFF9                           
0CFF9                               ;; Update attribute table accordingly through ppu buffer
0CFF9 20 38 D0                      JSR sub_SetTileAttributeAddress
0CFFC                               
0CFFC 8A                            TXA
0CFFD 29 10                         AND #%00010000
0CFFF F0 05                         BEQ +
0D001 A9 F0                             LDA #%11110000
0D003 4C 08 D0                          JMP ++
0D006                               +
0D006 A9 0F                         LDA #%00001111
0D008                               ++
0D008 85 02                         STA temp+2
0D00A                               
0D00A 8A                            TXA
0D00B 48                            PHA
0D00C 29 01                         AND #%00000001
0D00E F0 07                         BEQ +
0D010 A5 02                             LDA temp+2
0D012 09 CC                             ORA #%11001100
0D014 4C 1B D0                          JMP ++
0D017                               +
0D017 A5 02                         LDA temp+2
0D019 09 33                         ORA #%00110011
0D01B                               ++
0D01B 85 02                         STA temp+2
0D01D                               
0D01D A5 00                         LDA temp
0D01F 38                            SEC
0D020 E9 C0                         SBC #$C0
0D022 AA                            TAX
0D023 BD A0 04                      LDA tile_attributes,x
0D026 25 02                         AND temp+2
0D028 9D A0 04                      STA tile_attributes,x
0D02B 99 00 03                      STA ppu_buffer,y
0D02E C8                            INY
0D02F 68                            PLA
0D030 AA                            TAX
0D031                           
0D031                               ;; Tell PPU to update tiles and attributes next frame
0D031 84 3A                         STY ppu_buffer_pointer
0D033 A9 01                         LDA #$01
0D035 85 39                         STA ppu_buffer_update
0D037                            
0D037                               ;; We're done - return
0D037 60                            RTS
0D038                           
0D038                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D038                           
0D038                           ;; Set the correct tile attribute address based on game tile (x) 
0D038                           ;; into the correct ppu buffer slot (y)
0D038                           
0D038                           sub_SetTileAttributeAddress:
0D038 A9 23                         LDA #$23
0D03A 99 00 03                      STA ppu_buffer,y
0D03D C8                            INY
0D03E                               
0D03E 8A                            TXA
0D03F 29 F0                         AND #%11110000
0D041 4A                            LSR
0D042 4A                            LSR
0D043 4A                            LSR
0D044 4A                            LSR
0D045 18                            CLC
0D046 69 01                         ADC #$01
0D048 4A                            LSR
0D049 0A                            ASL
0D04A 0A                            ASL
0D04B 0A                            ASL
0D04C 18                            CLC
0D04D 69 C8                         ADC #$C8
0D04F 85 00                         STA temp
0D051 8A                            TXA
0D052 29 0F                         AND #%00001111
0D054 18                            CLC
0D055 69 01                         ADC #$01
0D057 4A                            LSR
0D058 18                            CLC
0D059 65 00                         ADC temp
0D05B 85 00                         STA temp
0D05D 99 00 03                      STA ppu_buffer,y
0D060 C8                            INY
0D061                                  
0D061 60                            RTS
0D062                           
0D062                           .include "game/subroutine/SubtractXFromBonus.asm"
0D062                           
0D062                           sub_SubtractXFromBonus:
0D062 86 09                         STX temp+9
0D064 A5 2E                         LDA ball_bonus+2
0D066 38                            SEC
0D067 E5 09                         SBC temp+9
0D069 30 05                         BMI +
0D06B 85 2E                             STA ball_bonus+2
0D06D 4C 85 D0                          JMP +updateBonusOnScreen
0D070                               +
0D070                           
0D070 18                            CLC
0D071 69 0A                         ADC #$0A
0D073 85 2E                         STA ball_bonus+2
0D075 C6 2D                         DEC ball_bonus+1
0D077 10 0C                         BPL +updateBonusOnScreen
0D079                           
0D079 A9 09                         LDA #$09
0D07B 85 2D                         STA ball_bonus+1
0D07D C6 2C                         DEC ball_bonus
0D07F 10 04                         BPL +updateBonusOnScreen
0D081                           
0D081 A9 00                         LDA #$00
0D083 85 2C                         STA ball_bonus
0D085                           
0D085                               +updateBonusOnScreen:
0D085 A9 20                         LDA #$20
0D087 85 00                         STA temp
0D089 A9 9C                         LDA #$9C
0D08B 85 01                         STA temp+1
0D08D A2 02                         LDX #$02
0D08F                               
0D08F                               -updateNextDigit:
0D08F B5 2C                             LDA ball_bonus,x
0D091 18                                CLC
0D092 69 01                             ADC #$01
0D094 85 02                             STA temp+2
0D096 20 B1 D0                          JSR sub_WriteByteToPPUBuffer
0D099 C6 01                             DEC temp+1
0D09B CA                                DEX
0D09C 10 F1                         BPL -updateNextDigit
0D09E                           
0D09E 60                            RTS
0D09F                           
0D09F                           .include "game/subroutine/WaitXFrames.asm"
0D09F                           
0D09F                           sub_WaitXFrames:
0D09F                               
0D09F                               ;; Push X to stack
0D09F 8A                            TXA
0D0A0 48                            PHA
0D0A1                               
0D0A1                               ;; Wait for NMI
0D0A1 20 F3 C4                      JSR sub_WaitForNMI
0D0A4                           
0D0A4                               ;; Clear pointer, except for sprite-zero and ball
0D0A4 A9 08                         LDA #$08
0D0A6 85 3D                         STA sprite_ram_pointer
0D0A8                           
0D0A8                               ;; Load animations (if any)
0D0A8 20 C2 C9                      JSR sub_LoadAnimations
0D0AB                               
0D0AB                               ;; Restore original X
0D0AB 68                            PLA
0D0AC AA                            TAX
0D0AD                               
0D0AD                               ;; Check if all X frames have passed
0D0AD CA                            DEX
0D0AE D0 EF                         BNE sub_WaitXFrames
0D0B0                               
0D0B0                               ;; Return
0D0B0 60                            RTS
0D0B1                           
0D0B1                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D0B1                           
0D0B1                           ;; Write the byte in temp+2 and the ppu address (temp)
0D0B1                           ;; to a buffer, so NMI can update it before the next frame
0D0B1                           
0D0B1                           sub_WriteByteToPPUBuffer:
0D0B1                           
0D0B1                               ;; Prevent updating until full 3-byte buffer is filled,
0D0B1                               ;; so that graphics won't glitch out if NMI happens during
0D0B1                               ;; updating the buffer
0D0B1 A9 00                         LDA #$00
0D0B3 85 39                         STA ppu_buffer_update
0D0B5                           
0D0B5                               ;; Check if buffer full; if so, wait a frame and force update
0D0B5 A4 3A                         LDY ppu_buffer_pointer
0D0B7 C0 60                         CPY #$60
0D0B9 D0 05                         BNE +
0D0BB E6 39                             INC ppu_buffer_update
0D0BD 20 FC C4                          JSR sub_WaitForVBlank
0D0C0                               +
0D0C0                           
0D0C0                               ;; Add ppu_addr high byte to buffer
0D0C0 A5 00                         LDA temp
0D0C2 99 00 03                      STA ppu_buffer,y
0D0C5                           
0D0C5                               ;; Add ppu_addr low byte to buffer
0D0C5 C8                            INY
0D0C6 A5 01                         LDA temp+1
0D0C8 99 00 03                      STA ppu_buffer,y
0D0CB                           
0D0CB                               ;; Add ppu_data to buffer
0D0CB C8                            INY
0D0CC A5 02                         LDA temp+2
0D0CE 99 00 03                      STA ppu_buffer,y
0D0D1                           
0D0D1                               ;; Update buffer pointer
0D0D1 C8                            INY
0D0D2 84 3A                         STY ppu_buffer_pointer
0D0D4                           
0D0D4                               ;; Tell NMI to update next round
0D0D4 E6 39                         INC ppu_buffer_update
0D0D6                           
0D0D6                               ;; Return
0D0D6 60                            RTS
0D0D7                           
0D0D7                           
0D0D7                           
0D0D7                           
0D0D7                           ;; LUTs
0D0D7                           .include "game/include/tables.asm"
0D0D7                           
0D0D7                           ;; Initial screen palette
0D0D7                           tbl_IntroScreenPalette:
0D0D7 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D0DB 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D0DF 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D0E3 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D0E7                           
0D0E7 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D0EB 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D0EF 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D0F3 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D0F7                           
0D0F7                           
0D0F7                           ;; Intro: mapping logo index to chr tile
0D0F7                           tbl_IntroScreenLogoChr:
0D0F7 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D0FF                           
0D0FF                           
0D0FF                           ;; Intro screen data
0D0FF                           tbl_IntroScreenData:
0D0FF                           
0D0FF                               ;; Set PPU address $20AC and draw
0D0FF 60 AC                         .db #$60, #$AC
0D101 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D109                           
0D109                               ;; Set PPU address $20CF and draw
0D109 60 CF                         .db #$60, #$CF
0D10B 01 02                         .db #_0, #_1
0D10D                               
0D10D                               ;; Set PPU address $2122 and draw
0D10D 61 22                         .db #$61, #$22
0D10F 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D116 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D11C 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D124 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D129                               
0D129                               ;; Set PPU address $2147 and draw
0D129 61 47                         .db #$61, #$47
0D12B 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D132 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D136 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D13C 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D142                               
0D142                               ;; Set PPU address $218B and draw
0D142 61 8B                         .db #$61, #$8B
0D144 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D14A 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D14F                               
0D14F                               ;; Set PPU address $21E6 and draw
0D14F 61 E6                         .db #$61, #$E6
0D151 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D159 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D15D 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D164                               
0D164                               ;; Set PPU address $222D and draw
0D164 62 2D                         .db #$62, #$2D
0D166 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D16C                               
0D16C                               ;; Set PPU address $2281
0D16C 62 81                         .db #$62, #$81
0D16E                               
0D16E                               ;; Draw the Crillion logo
0D16E E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D172 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D176 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D17A E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D17E                               
0D17E D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D182 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D186 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D18A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D18E                               
0D18E D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D192 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D196 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D19A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D19E                           
0D19E D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1A2 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1A6 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1AA D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1AE                               
0D1AE D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1B2 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1B6 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1BA D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1BE                           
0D1BE F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D1C2 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D1C6 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D1CA F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D1CD                           
0D1CD                               ;; End of intro
0D1CD 3F                            .db #$3F
0D1CE                           
0D1CE                           
0D1CE                           ;; Animation frames table
0D1CE                           .include "game/include/table/animation_frames.asm"
0D1CE                           
0D1CE                           ;; CHR tile-id's per slide of explosion
0D1CE                           explosion_slide0:
0D1CE 00 00 00                      .db #$00, #$00, #$00
0D1D1 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D1D4 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D1D7                           
0D1D7                           explosion_slide1:
0D1D7 00 00 00                      .db #$00, #$00, #$00
0D1DA 29 2A 2B                      .db #$29, #$2A, #$2B
0D1DD 39 3A 3B                      .db #$39, #$3A, #$3B
0D1E0                           
0D1E0                           explosion_slide2:
0D1E0 16 00 00                      .db #$16, #$00, #$00
0D1E3 26 27 28                      .db #$26, #$27, #$28
0D1E6 36 37 38                      .db #$36, #$37, #$38
0D1E9                           
0D1E9                           explosion_slide3:
0D1E9 00 14 15                      .db #$00, #$14, #$15
0D1EC 23 24 25                      .db #$23, #$24, #$25
0D1EF 33 34 35                      .db #$33, #$34, #$35
0D1F2                           
0D1F2                           explosion_slide4:
0D1F2 10 11 12                      .db #$10, #$11, #$12
0D1F5 20 21 22                      .db #$20, #$21, #$22
0D1F8 30 31 32                      .db #$30, #$31, #$32
0D1FB                           
0D1FB                           ;; High and low bytes of animation slides
0D1FB                           explosion_anim_hi:
0D1FB D1                            .db >#explosion_slide0
0D1FC D1                            .db >#explosion_slide1
0D1FD D1                            .db >#explosion_slide2
0D1FE D1                            .db >#explosion_slide3
0D1FF D1                            .db >#explosion_slide4
0D200 D1                            .db >#explosion_slide4
0D201 D1                            .db >#explosion_slide3
0D202 D1                            .db >#explosion_slide2
0D203 D1                            .db >#explosion_slide1
0D204 D1                            .db >#explosion_slide0
0D205                           
0D205                           explosion_anim_lo:
0D205 CE                            .db <#explosion_slide0
0D206 D7                            .db <#explosion_slide1
0D207 E0                            .db <#explosion_slide2
0D208 E9                            .db <#explosion_slide3
0D209 F2                            .db <#explosion_slide4
0D20A F2                            .db <#explosion_slide4
0D20B E9                            .db <#explosion_slide3
0D20C E0                            .db <#explosion_slide2
0D20D D7                            .db <#explosion_slide1
0D20E CE                            .db <#explosion_slide0
0D20F                           
0D20F                           
0D20F                           
0D20F                           ;; Ball palette color table (CBRYGM)
0D20F                           tbl_BallColorDark:
0D20F 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D215                            
0D215                           tbl_BallColorLight:
0D215 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D21B                           
0D21B                               
0D21B                           ;; Screen mode drawing routine addresses
0D21B                           tbl_LoadScreenHi:
0D21B CE CA CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D21E                           
0D21E                           tbl_LoadScreenLo:
0D21E 23 67 B2                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D221                           
0D221                           
0D221                           ;; Level data
0D221                           .include "game/include/table/level_data.asm"
0D221                           
0D221                           ;; Level layout tables
0D221                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D221                           
0D221                           ifdef TESTING
0D221                           lvl_test:
0D221 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D229 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D231 FF                            .db #LEVEL_END
0D232                           endif
0D232                           
0D232                           lvl_layout_01:
0D232 61 21                         .db #$61, #%00100001
0D234 52 61                         .db #$52, #%01100001
0D236 43 65                         .db #$43, #%01100101
0D238 83 05                         .db #$83, #%00000101
0D23A 93 15                         .db #$93, #%00010101
0D23C 34 7A                         .db #$34, #%01111010
0D23E 74 7A                         .db #$74, #%01111010
0D240 35 7A                         .db #$35, #%01111010
0D242 75 7A                         .db #$75, #%01111010
0D244 46 65                         .db #$46, #%01100101
0D246 86 25                         .db #$86, #%00100101
0D248 57 61                         .db #$57, #%01100001
0D24A 68 21                         .db #$68, #%00100001
0D24C FF                            .db #LEVEL_END
0D24D                           
0D24D                           lvl_layout_02:
0D24D C0 0A                         .db #$C0, #%00001010
0D24F 11 15                         .db #$11, #%00010101
0D251 21 62                         .db #$21, #%01100010
0D253 61 62                         .db #$61, #%01100010
0D255 A1 42                         .db #$A1, #%01000010
0D257 12 67                         .db #$12, #%01100111
0D259 52 67                         .db #$52, #%01100111
0D25B 92 67                         .db #$92, #%01100111
0D25D C3 0D                         .db #$C3, #%00001101
0D25F 14 11                         .db #$14, #%00010001
0D261 24 65                         .db #$24, #%01100101
0D263 64 65                         .db #$64, #%01100101
0D265 A4 45                         .db #$A4, #%01000101
0D267 15 67                         .db #$15, #%01100111
0D269 55 67                         .db #$55, #%01100111
0D26B 95 67                         .db #$95, #%01100111
0D26D 17 12                         .db #$17, #%00010010
0D26F 27 61                         .db #$27, #%01100001
0D271 67 61                         .db #$67, #%01100001
0D273 A7 41                         .db #$A7, #%01000001
0D275 38 7A                         .db #$38, #%01111010
0D277 98 5A                         .db #$98, #%01011010
0D279 18 27                         .db #$18, #%00100111
0D27B 48 27                         .db #$48, #%00100111
0D27D 78 27                         .db #$78, #%00100111
0D27F C8 07                         .db #$C8, #%00000111
0D281 FF                            .db #LEVEL_END
0D282                           
0D282                           lvl_layout_03:
0D282 00 7A                         .db #$00, #%01111010
0D284 40 7A                         .db #$40, #%01111010
0D286 80 7A                         .db #$80, #%01111010
0D288 C0 1A                         .db #$C0, #%00011010
0D28A 10 A1                         .db #$10, #%10100001
0D28C 13 E1                         .db #$13, #%11100001
0D28E 17 C1                         .db #$17, #%11000001
0D290 30 C1                         .db #$30, #%11000001
0D292 34 C1                         .db #$34, #%11000001
0D294 38 A1                         .db #$38, #%10100001
0D296 50 E1                         .db #$50, #%11100001
0D298 55 81                         .db #$55, #%10000001
0D29A 57 C1                         .db #$57, #%11000001
0D29C 70 C1                         .db #$70, #%11000001
0D29E 73 A1                         .db #$73, #%10100001
0D2A0 76 E1                         .db #$76, #%11100001
0D2A2 90 E1                         .db #$90, #%11100001
0D2A4 95 81                         .db #$95, #%10000001
0D2A6 97 C1                         .db #$97, #%11000001
0D2A8 B0 C1                         .db #$B0, #%11000001
0D2AA B4 C1                         .db #$B4, #%11000001
0D2AC B8 A1                         .db #$B8, #%10100001
0D2AE D0 A1                         .db #$D0, #%10100001
0D2B0 D3 E1                         .db #$D3, #%11100001
0D2B2 D7 C1                         .db #$D7, #%11000001
0D2B4 FF                            .db #LEVEL_END
0D2B5                           
0D2B5                           lvl_layout_04:
0D2B5 00 4C                         .db #$00, #%01001100
0D2B7 40 6C                         .db #$40, #%01101100
0D2B9 80 4C                         .db #$80, #%01001100
0D2BB 81 AC                         .db #$81, #%10101100
0D2BD C1 2C                         .db #$C1, #%00101100
0D2BF 02 6C                         .db #$02, #%01101100
0D2C1 42 CC                         .db #$42, #%11001100
0D2C3 62 EC                         .db #$62, #%11101100
0D2C5 A2 CC                         .db #$A2, #%11001100
0D2C7 C3 CC                         .db #$C3, #%11001100
0D2C9 04 4C                         .db #$04, #%01001100
0D2CB 84 2C                         .db #$84, #%00101100
0D2CD 25 AC                         .db #$25, #%10101100
0D2CF 85 AC                         .db #$85, #%10101100
0D2D1 06 AC                         .db #$06, #%10101100
0D2D3 36 CC                         .db #$36, #%11001100
0D2D5 56 CC                         .db #$56, #%11001100
0D2D7 66 EC                         .db #$66, #%11101100
0D2D9 96 6C                         .db #$96, #%01101100
0D2DB C7 AC                         .db #$C7, #%10101100
0D2DD 08 2C                         .db #$08, #%00101100
0D2DF 78 6C                         .db #$78, #%01101100
0D2E1 D8 0C                         .db #$D8, #%00001100
0D2E3 30 A1                         .db #$30, #%10100001
0D2E5 B0 21                         .db #$B0, #%00100001
0D2E7 01 41                         .db #$01, #%01000001
0D2E9 41 61                         .db #$41, #%01100001
0D2EB 91 A1                         .db #$91, #%10100001
0D2ED A1 21                         .db #$A1, #%00100001
0D2EF 52 C1                         .db #$52, #%11000001
0D2F1 72 E1                         .db #$72, #%11100001
0D2F3 B2 C1                         .db #$B2, #%11000001
0D2F5 C2 21                         .db #$C2, #%00100001
0D2F7 03 41                         .db #$03, #%01000001
0D2F9 33 C1                         .db #$33, #%11000001
0D2FB 83 21                         .db #$83, #%00100001
0D2FD D3 E1                         .db #$D3, #%11100001
0D2FF 05 21                         .db #$05, #%00100001
0D301 45 E1                         .db #$45, #%11100001
0D303 A5 21                         .db #$A5, #%00100001
0D305 16 A1                         .db #$16, #%10100001
0D307 76 A1                         .db #$76, #%10100001
0D309 27 A1                         .db #$27, #%10100001
0D30B 57 21                         .db #$57, #%00100001
0D30D 87 41                         .db #$87, #%01000001
0D30F B7 A1                         .db #$B7, #%10100001
0D311 19 21                         .db #$19, #%00100001
0D313 39 41                         .db #$39, #%01000001
0D315 89 41                         .db #$89, #%01000001
0D317 C9 21                         .db #$C9, #%00100001
0D319 D0 1A                         .db #$D0, #%00011010
0D31B 55 1A                         .db #$55, #%00011010
0D31D 95 1A                         .db #$95, #%00011010
0D31F D7 1A                         .db #$D7, #%00011010
0D321 09 1A                         .db #$09, #%00011010
0D323 79 1A                         .db #$79, #%00011010
0D325 FF                            .db #LEVEL_END
0D326                           
0D326                           lvl_layout_05:
0D326 40 0A                         .db #$40, #%00001010
0D328 70 1A                         .db #$70, #%00011010
0D32A B0 42                         .db #$B0, #%01000010
0D32C 41 A7                         .db #$41, #%10100111
0D32E B1 22                         .db #$B1, #%00100010
0D330 D1 15                         .db #$D1, #%00010101
0D332 22 0A                         .db #$22, #%00001010
0D334 52 05                         .db #$52, #%00000101
0D336 B2 42                         .db #$B2, #%01000010
0D338 03 27                         .db #$03, #%00100111
0D33A 33 67                         .db #$33, #%01100111
0D33C 73 67                         .db #$73, #%01100111
0D33E B3 47                         .db #$B3, #%01000111
0D340 05 E5                         .db #$05, #%11100101
0D342 25 A5                         .db #$25, #%10100101
0D344 35 25                         .db #$35, #%00100101
0D346 65 45                         .db #$65, #%01000101
0D348 A5 45                         .db #$A5, #%01000101
0D34A 46 E5                         .db #$46, #%11100101
0D34C 66 E5                         .db #$66, #%11100101
0D34E 86 E5                         .db #$86, #%11100101
0D350 A6 E2                         .db #$A6, #%11100010
0D352 C6 E5                         .db #$C6, #%11100101
0D354 27 25                         .db #$27, #%00100101
0D356 77 05                         .db #$77, #%00000101
0D358 B7 02                         .db #$B7, #%00000010
0D35A 09 05                         .db #$09, #%00000101
0D35C 79 05                         .db #$79, #%00000101
0D35E B9 02                         .db #$B9, #%00000010
0D360 FF                            .db #LEVEL_END
0D361                           
0D361                           lvl_layout_06:
0D361 00 03                         .db #$00, #%00000011
0D363 20 03                         .db #$20, #%00000011
0D365 40 03                         .db #$40, #%00000011
0D367 A0 03                         .db #$A0, #%00000011
0D369 C0 03                         .db #$C0, #%00000011
0D36B 11 03                         .db #$11, #%00000011
0D36D 31 03                         .db #$31, #%00000011
0D36F 51 03                         .db #$51, #%00000011
0D371 91 03                         .db #$91, #%00000011
0D373 B1 03                         .db #$B1, #%00000011
0D375 D1 03                         .db #$D1, #%00000011
0D377 02 03                         .db #$02, #%00000011
0D379 22 03                         .db #$22, #%00000011
0D37B 42 03                         .db #$42, #%00000011
0D37D A2 03                         .db #$A2, #%00000011
0D37F C2 03                         .db #$C2, #%00000011
0D381 13 03                         .db #$13, #%00000011
0D383 33 03                         .db #$33, #%00000011
0D385 53 03                         .db #$53, #%00000011
0D387 93 03                         .db #$93, #%00000011
0D389 B3 03                         .db #$B3, #%00000011
0D38B D3 03                         .db #$D3, #%00000011
0D38D 04 03                         .db #$04, #%00000011
0D38F 24 03                         .db #$24, #%00000011
0D391 44 03                         .db #$44, #%00000011
0D393 A4 03                         .db #$A4, #%00000011
0D395 C4 03                         .db #$C4, #%00000011
0D397 15 03                         .db #$15, #%00000011
0D399 35 03                         .db #$35, #%00000011
0D39B 55 03                         .db #$55, #%00000011
0D39D 95 03                         .db #$95, #%00000011
0D39F B5 03                         .db #$B5, #%00000011
0D3A1 D5 03                         .db #$D5, #%00000011
0D3A3 06 03                         .db #$06, #%00000011
0D3A5 26 03                         .db #$26, #%00000011
0D3A7 46 03                         .db #$46, #%00000011
0D3A9 A6 03                         .db #$A6, #%00000011
0D3AB C6 03                         .db #$C6, #%00000011
0D3AD 17 03                         .db #$17, #%00000011
0D3AF 37 03                         .db #$37, #%00000011
0D3B1 57 03                         .db #$57, #%00000011
0D3B3 97 03                         .db #$97, #%00000011
0D3B5 B7 03                         .db #$B7, #%00000011
0D3B7 D7 03                         .db #$D7, #%00000011
0D3B9 08 03                         .db #$08, #%00000011
0D3BB 28 03                         .db #$28, #%00000011
0D3BD 48 03                         .db #$48, #%00000011
0D3BF A8 03                         .db #$A8, #%00000011
0D3C1 C8 03                         .db #$C8, #%00000011
0D3C3 19 03                         .db #$19, #%00000011
0D3C5 39 03                         .db #$39, #%00000011
0D3C7 59 03                         .db #$59, #%00000011
0D3C9 99 03                         .db #$99, #%00000011
0D3CB B9 03                         .db #$B9, #%00000011
0D3CD D9 03                         .db #$D9, #%00000011
0D3CF 60 4B                         .db #$60, #%01001011
0D3D1 71 CB                         .db #$71, #%11001011
0D3D3 62 4B                         .db #$62, #%01001011
0D3D5 64 4B                         .db #$64, #%01001011
0D3D7 75 CB                         .db #$75, #%11001011
0D3D9 66 4B                         .db #$66, #%01001011
0D3DB 68 4B                         .db #$68, #%01001011
0D3DD 79 0B                         .db #$79, #%00001011
0D3DF 70 03                         .db #$70, #%00000011
0D3E1 72 03                         .db #$72, #%00000011
0D3E3 74 03                         .db #$74, #%00000011
0D3E5 76 03                         .db #$76, #%00000011
0D3E7 78 03                         .db #$78, #%00000011
0D3E9 FF                            .db #LEVEL_END
0D3EA                           
0D3EA                           lvl_layout_07:
0D3EA 00 11                         .db #$00, #%00010001
0D3EC 01 FA                         .db #$01, #%11111010
0D3EE 12 BA                         .db #$12, #%10111010
0D3F0 23 DA                         .db #$23, #%11011010
0D3F2 34 FA                         .db #$34, #%11111010
0D3F4 05 DA                         .db #$05, #%11011010
0D3F6 15 FA                         .db #$15, #%11111010
0D3F8 45 BA                         .db #$45, #%10111010
0D3FA 56 DA                         .db #$56, #%11011010
0D3FC 27 BA                         .db #$27, #%10111010
0D3FE 67 DA                         .db #$67, #%11011010
0D400 38 3A                         .db #$38, #%00111010
0D402 78 BA                         .db #$78, #%10111010
0D404 09 3A                         .db #$09, #%00111010
0D406 39 3A                         .db #$39, #%00111010
0D408 89 1A                         .db #$89, #%00011010
0D40A B0 01                         .db #$B0, #%00000001
0D40C D0 01                         .db #$D0, #%00000001
0D40E A1 01                         .db #$A1, #%00000001
0D410 C1 11                         .db #$C1, #%00010001
0D412 B2 01                         .db #$B2, #%00000001
0D414 D2 01                         .db #$D2, #%00000001
0D416 A3 01                         .db #$A3, #%00000001
0D418 C3 01                         .db #$C3, #%00000001
0D41A B4 01                         .db #$B4, #%00000001
0D41C D4 01                         .db #$D4, #%00000001
0D41E A5 01                         .db #$A5, #%00000001
0D420 C5 01                         .db #$C5, #%00000001
0D422 B6 01                         .db #$B6, #%00000001
0D424 D6 01                         .db #$D6, #%00000001
0D426 A7 01                         .db #$A7, #%00000001
0D428 C7 01                         .db #$C7, #%00000001
0D42A FF                            .db #LEVEL_END
0D42B                           
0D42B                           lvl_layout_08:
0D42B 40 B5                         .db #$40, #%10110101
0D42D 31 0D                         .db #$31, #%00001101
0D42F 61 10                         .db #$61, #%00010000
0D431 42 C7                         .db #$42, #%11000111
0D433 52 67                         .db #$52, #%01100111
0D435 63 C7                         .db #$63, #%11000111
0D437 83 E7                         .db #$83, #%11100111
0D439 05 07                         .db #$05, #%00000111
0D43B 15 3A                         .db #$15, #%00111010
0D43D 07 63                         .db #$07, #%01100011
0D43F 27 13                         .db #$27, #%00010011
0D441 38 A5                         .db #$38, #%10100101
0D443 09 14                         .db #$09, #%00010100
0D445 19 05                         .db #$19, #%00000101
0D447 D0 E0                         .db #$D0, #%11100000
0D449 C2 A0                         .db #$C2, #%10100000
0D44B B3 E0                         .db #$B3, #%11100000
0D44D D5 E0                         .db #$D5, #%11100000
0D44F C6 E0                         .db #$C6, #%11100000
0D451 B0 C4                         .db #$B0, #%11000100
0D453 C0 A4                         .db #$C0, #%10100100
0D455 D1 A4                         .db #$D1, #%10100100
0D457 C4 24                         .db #$C4, #%00100100
0D459 C5 04                         .db #$C5, #%00000100
0D45B B7 44                         .db #$B7, #%01000100
0D45D B8 A4                         .db #$B8, #%10100100
0D45F D9 05                         .db #$D9, #%00000101
0D461 FF                            .db #LEVEL_END
0D462                           
0D462                           lvl_layout_09:
0D462 81 04                         .db #$81, #%00000100
0D464 D1 04                         .db #$D1, #%00000100
0D466 32 C4                         .db #$32, #%11000100
0D468 A2 C4                         .db #$A2, #%11000100
0D46A C2 24                         .db #$C2, #%00100100
0D46C 13 24                         .db #$13, #%00100100
0D46E 53 04                         .db #$53, #%00000100
0D470 C3 27                         .db #$C3, #%00100111
0D472 15 6C                         .db #$15, #%01101100
0D474 55 6C                         .db #$55, #%01101100
0D476 95 6C                         .db #$95, #%01101100
0D478 D5 0C                         .db #$D5, #%00001100
0D47A 27 C7                         .db #$27, #%11000111
0D47C 47 C7                         .db #$47, #%11000111
0D47E 67 C7                         .db #$67, #%11000111
0D480 87 C7                         .db #$87, #%11000111
0D482 A7 C7                         .db #$A7, #%11000111
0D484 C7 C7                         .db #$C7, #%11000111
0D486 08 13                         .db #$08, #%00010011
0D488 28 15                         .db #$28, #%00010101
0D48A 48 12                         .db #$48, #%00010010
0D48C 68 15                         .db #$68, #%00010101
0D48E 88 11                         .db #$88, #%00010001
0D490 A8 10                         .db #$A8, #%00010000
0D492 C8 14                         .db #$C8, #%00010100
0D494 09 07                         .db #$09, #%00000111
0D496 19 03                         .db #$19, #%00000011
0D498 39 05                         .db #$39, #%00000101
0D49A 59 02                         .db #$59, #%00000010
0D49C 79 05                         .db #$79, #%00000101
0D49E 99 01                         .db #$99, #%00000001
0D4A0 B9 00                         .db #$B9, #%00000000
0D4A2 D9 04                         .db #$D9, #%00000100
0D4A4 FF                            .db #LEVEL_END
0D4A5                           
0D4A5                           lvl_layout_10:
0D4A5 00 02                         .db #$00, #%00000010
0D4A7 10 C9                         .db #$10, #%11001001
0D4A9 50 C9                         .db #$50, #%11001001
0D4AB 90 C9                         .db #$90, #%11001001
0D4AD D0 C9                         .db #$D0, #%11001001
0D4AF 31 C9                         .db #$31, #%11001001
0D4B1 71 C9                         .db #$71, #%11001001
0D4B3 B1 C9                         .db #$B1, #%11001001
0D4B5 13 C9                         .db #$13, #%11001001
0D4B7 53 C9                         .db #$53, #%11001001
0D4B9 93 C9                         .db #$93, #%11001001
0D4BB D3 C9                         .db #$D3, #%11001001
0D4BD 34 C9                         .db #$34, #%11001001
0D4BF 74 C9                         .db #$74, #%11001001
0D4C1 B4 C9                         .db #$B4, #%11001001
0D4C3 16 C9                         .db #$16, #%11001001
0D4C5 56 C9                         .db #$56, #%11001001
0D4C7 96 C9                         .db #$96, #%11001001
0D4C9 D6 C9                         .db #$D6, #%11001001
0D4CB 37 C9                         .db #$37, #%11001001
0D4CD 77 C9                         .db #$77, #%11001001
0D4CF B7 C9                         .db #$B7, #%11001001
0D4D1 D8 12                         .db #$D8, #%00010010
0D4D3 FF                            .db #LEVEL_END
0D4D4                           
0D4D4                           lvl_layout_11:
0D4D4 00 65                         .db #$00, #%01100101
0D4D6 40 45                         .db #$40, #%01000101
0D4D8 50 A7                         .db #$50, #%10100111
0D4DA 80 05                         .db #$80, #%00000101
0D4DC 90 A7                         .db #$90, #%10100111
0D4DE A0 65                         .db #$A0, #%01100101
0D4E0 01 43                         .db #$01, #%01000011
0D4E2 31 23                         .db #$31, #%00100011
0D4E4 61 A7                         .db #$61, #%10100111
0D4E6 81 A7                         .db #$81, #%10100111
0D4E8 A1 63                         .db #$A1, #%01100011
0D4EA 02 44                         .db #$02, #%01000100
0D4EC 32 44                         .db #$32, #%01000100
0D4EE 92 04                         .db #$92, #%00000100
0D4F0 A2 64                         .db #$A2, #%01100100
0D4F2 03 40                         .db #$03, #%01000000
0D4F4 33 40                         .db #$33, #%01000000
0D4F6 63 A1                         .db #$63, #%10100001
0D4F8 83 A2                         .db #$83, #%10100010
0D4FA 93 00                         .db #$93, #%00000000
0D4FC A3 60                         .db #$A3, #%01100000
0D4FE 04 41                         .db #$04, #%01000001
0D500 34 41                         .db #$34, #%01000001
0D502 94 02                         .db #$94, #%00000010
0D504 A4 62                         .db #$A4, #%01100010
0D506 05 47                         .db #$05, #%01000111
0D508 35 67                         .db #$35, #%01100111
0D50A 75 0A                         .db #$75, #%00001010
0D50C 85 47                         .db #$85, #%01000111
0D50E B5 47                         .db #$B5, #%01000111
0D510 06 E7                         .db #$06, #%11100111
0D512 16 5A                         .db #$16, #%01011010
0D514 26 11                         .db #$26, #%00010001
0D516 46 13                         .db #$46, #%00010011
0D518 56 1A                         .db #$56, #%00011010
0D51A 66 14                         .db #$66, #%00010100
0D51C 86 10                         .db #$86, #%00010000
0D51E 96 5A                         .db #$96, #%01011010
0D520 A6 12                         .db #$A6, #%00010010
0D522 C6 15                         .db #$C6, #%00010101
0D524 D6 E7                         .db #$D6, #%11100111
0D526 FF                            .db #LEVEL_END
0D527                           
0D527                           lvl_layout_12:
0D527 00 00                         .db #$00, #%00000000
0D529 50 C0                         .db #$50, #%11000000
0D52B 80 00                         .db #$80, #%00000000
0D52D 61 00                         .db #$61, #%00000000
0D52F 22 C0                         .db #$22, #%11000000
0D531 82 E0                         .db #$82, #%11100000
0D533 C2 E0                         .db #$C2, #%11100000
0D535 A3 20                         .db #$A3, #%00100000
0D537 C3 10                         .db #$C3, #%00010000
0D539 04 00                         .db #$04, #%00000000
0D53B 54 20                         .db #$54, #%00100000
0D53D 15 0A                         .db #$15, #%00001010
0D53F 25 C0                         .db #$25, #%11000000
0D541 55 E0                         .db #$55, #%11100000
0D543 86 20                         .db #$86, #%00100000
0D545 C6 E0                         .db #$C6, #%11100000
0D547 C7 A0                         .db #$C7, #%10100000
0D549 88 00                         .db #$88, #%00000000
0D54B 59 00                         .db #$59, #%00000000
0D54D 89 20                         .db #$89, #%00100000
0D54F D9 1A                         .db #$D9, #%00011010
0D551 FF                            .db #LEVEL_END
0D552                           
0D552                           lvl_layout_13:
0D552 10 E0                         .db #$10, #%11100000
0D554 20 E0                         .db #$20, #%11100000
0D556 30 E0                         .db #$30, #%11100000
0D558 40 40                         .db #$40, #%01000000
0D55A 80 60                         .db #$80, #%01100000
0D55C C0 E0                         .db #$C0, #%11100000
0D55E D0 E0                         .db #$D0, #%11100000
0D560 41 40                         .db #$41, #%01000000
0D562 71 60                         .db #$71, #%01100000
0D564 52 60                         .db #$52, #%01100000
0D566 A2 20                         .db #$A2, #%00100000
0D568 43 60                         .db #$43, #%01100000
0D56A 83 60                         .db #$83, #%01100000
0D56C 14 74                         .db #$14, #%01110100
0D56E 54 74                         .db #$54, #%01110100
0D570 94 74                         .db #$94, #%01110100
0D572 D4 14                         .db #$D4, #%00010100
0D574 15 0D                         .db #$15, #%00001101
0D576 55 0D                         .db #$55, #%00001101
0D578 95 0D                         .db #$95, #%00001101
0D57A D5 0D                         .db #$D5, #%00001101
0D57C 26 0D                         .db #$26, #%00001101
0D57E 46 0D                         .db #$46, #%00001101
0D580 66 0D                         .db #$66, #%00001101
0D582 86 0D                         .db #$86, #%00001101
0D584 A6 0D                         .db #$A6, #%00001101
0D586 C6 0D                         .db #$C6, #%00001101
0D588 07 10                         .db #$07, #%00010000
0D58A 37 0D                         .db #$37, #%00001101
0D58C 77 0D                         .db #$77, #%00001101
0D58E B7 0D                         .db #$B7, #%00001101
0D590 28 0D                         .db #$28, #%00001101
0D592 48 0D                         .db #$48, #%00001101
0D594 68 0D                         .db #$68, #%00001101
0D596 88 0D                         .db #$88, #%00001101
0D598 A8 0D                         .db #$A8, #%00001101
0D59A C8 0D                         .db #$C8, #%00001101
0D59C 19 0D                         .db #$19, #%00001101
0D59E 59 0D                         .db #$59, #%00001101
0D5A0 99 0D                         .db #$99, #%00001101
0D5A2 D9 0D                         .db #$D9, #%00001101
0D5A4 FF                            .db #LEVEL_END
0D5A5                           
0D5A5                           lvl_layout_14:
0D5A5 00 67                         .db #$00, #%01100111
0D5A7 40 67                         .db #$40, #%01100111
0D5A9 80 67                         .db #$80, #%01100111
0D5AB C0 27                         .db #$C0, #%00100111
0D5AD 01 27                         .db #$01, #%00100111
0D5AF 31 C7                         .db #$31, #%11000111
0D5B1 51 C7                         .db #$51, #%11000111
0D5B3 71 C7                         .db #$71, #%11000111
0D5B5 91 C7                         .db #$91, #%11000111
0D5B7 B1 C7                         .db #$B1, #%11000111
0D5B9 D1 07                         .db #$D1, #%00000111
0D5BB 02 E7                         .db #$02, #%11100111
0D5BD 06 E7                         .db #$06, #%11100111
0D5BF 13 07                         .db #$13, #%00000111
0D5C1 D3 07                         .db #$D3, #%00000111
0D5C3 15 07                         .db #$15, #%00000111
0D5C5 35 07                         .db #$35, #%00000111
0D5C7 55 07                         .db #$55, #%00000111
0D5C9 75 07                         .db #$75, #%00000111
0D5CB 95 07                         .db #$95, #%00000111
0D5CD B5 07                         .db #$B5, #%00000111
0D5CF D5 07                         .db #$D5, #%00000111
0D5D1 17 07                         .db #$17, #%00000111
0D5D3 37 C7                         .db #$37, #%11000111
0D5D5 57 C7                         .db #$57, #%11000111
0D5D7 77 C7                         .db #$77, #%11000111
0D5D9 97 C7                         .db #$97, #%11000111
0D5DB B7 C7                         .db #$B7, #%11000111
0D5DD D7 07                         .db #$D7, #%00000111
0D5DF 19 07                         .db #$19, #%00000111
0D5E1 D9 07                         .db #$D9, #%00000111
0D5E3 22 4C                         .db #$22, #%01001100
0D5E5 62 4C                         .db #$62, #%01001100
0D5E7 A2 4C                         .db #$A2, #%01001100
0D5E9 24 0C                         .db #$24, #%00001100
0D5EB 44 0C                         .db #$44, #%00001100
0D5ED 64 0C                         .db #$64, #%00001100
0D5EF 84 0C                         .db #$84, #%00001100
0D5F1 A4 0C                         .db #$A4, #%00001100
0D5F3 C4 0C                         .db #$C4, #%00001100
0D5F5 26 0C                         .db #$26, #%00001100
0D5F7 46 0C                         .db #$46, #%00001100
0D5F9 66 0C                         .db #$66, #%00001100
0D5FB 86 0C                         .db #$86, #%00001100
0D5FD A6 0C                         .db #$A6, #%00001100
0D5FF C6 0C                         .db #$C6, #%00001100
0D601 28 4C                         .db #$28, #%01001100
0D603 68 4C                         .db #$68, #%01001100
0D605 A8 4C                         .db #$A8, #%01001100
0D607 32 04                         .db #$32, #%00000100
0D609 52 04                         .db #$52, #%00000100
0D60B 72 04                         .db #$72, #%00000100
0D60D 92 04                         .db #$92, #%00000100
0D60F B2 04                         .db #$B2, #%00000100
0D611 38 04                         .db #$38, #%00000100
0D613 58 04                         .db #$58, #%00000100
0D615 78 04                         .db #$78, #%00000100
0D617 98 04                         .db #$98, #%00000100
0D619 B8 04                         .db #$B8, #%00000100
0D61B FF                            .db #LEVEL_END
0D61C                           
0D61C                           lvl_layout_15:
0D61C 00 7A                         .db #$00, #%01111010
0D61E 40 7A                         .db #$40, #%01111010
0D620 80 7A                         .db #$80, #%01111010
0D622 C0 3A                         .db #$C0, #%00111010
0D624 41 04                         .db #$41, #%00000100
0D626 61 04                         .db #$61, #%00000100
0D628 81 04                         .db #$81, #%00000100
0D62A A1 04                         .db #$A1, #%00000100
0D62C 05 E4                         .db #$05, #%11100100
0D62E 15 64                         .db #$15, #%01100100
0D630 55 64                         .db #$55, #%01100100
0D632 95 64                         .db #$95, #%01100100
0D634 D5 E4                         .db #$D5, #%11100100
0D636 26 04                         .db #$26, #%00000100
0D638 46 44                         .db #$46, #%01000100
0D63A 76 64                         .db #$76, #%01100100
0D63C C6 04                         .db #$C6, #%00000100
0D63E 17 04                         .db #$17, #%00000100
0D640 37 64                         .db #$37, #%01100100
0D642 77 44                         .db #$77, #%01000100
0D644 B7 04                         .db #$B7, #%00000100
0D646 18 64                         .db #$18, #%01100100
0D648 58 64                         .db #$58, #%01100100
0D64A 98 64                         .db #$98, #%01100100
0D64C FF                            .db #LEVEL_END
0D64D                           
0D64D                           lvl_layout_16:
0D64D 10 E1                         .db #$10, #%11100001
0D64F 20 9A                         .db #$20, #%10011010
0D651 30 E1                         .db #$30, #%11100001
0D653 40 E1                         .db #$40, #%11100001
0D655 50 E1                         .db #$50, #%11100001
0D657 60 C1                         .db #$60, #%11000001
0D659 70 E1                         .db #$70, #%11100001
0D65B 80 E1                         .db #$80, #%11100001
0D65D 90 E1                         .db #$90, #%11100001
0D65F A0 61                         .db #$A0, #%01100001
0D661 21 C1                         .db #$21, #%11000001
0D663 A1 1A                         .db #$A1, #%00011010
0D665 B1 41                         .db #$B1, #%01000001
0D667 A2 E1                         .db #$A2, #%11100001
0D669 B2 E1                         .db #$B2, #%11100001
0D66B C2 1A                         .db #$C2, #%00011010
0D66D D2 E1                         .db #$D2, #%11100001
0D66F 63 1A                         .db #$63, #%00011010
0D671 C3 C1                         .db #$C3, #%11000001
0D673 14 61                         .db #$14, #%01100001
0D675 54 61                         .db #$54, #%01100001
0D677 94 C1                         .db #$94, #%11000001
0D679 15 61                         .db #$15, #%01100001
0D67B 55 41                         .db #$55, #%01000001
0D67D 85 1A                         .db #$85, #%00011010
0D67F 16 41                         .db #$16, #%01000001
0D681 46 1A                         .db #$46, #%00011010
0D683 56 61                         .db #$56, #%01100001
0D685 A6 61                         .db #$A6, #%01100001
0D687 17 67                         .db #$17, #%01100111
0D689 57 67                         .db #$57, #%01100111
0D68B 97 67                         .db #$97, #%01100111
0D68D D7 07                         .db #$D7, #%00000111
0D68F 28 41                         .db #$28, #%01000001
0D691 58 61                         .db #$58, #%01100001
0D693 A8 41                         .db #$A8, #%01000001
0D695 18 11                         .db #$18, #%00010001
0D697 38 11                         .db #$38, #%00010001
0D699 98 11                         .db #$98, #%00010001
0D69B B8 11                         .db #$B8, #%00010001
0D69D D8 11                         .db #$D8, #%00010001
0D69F 59 09                         .db #$59, #%00001001
0D6A1 FF                            .db #LEVEL_END
0D6A2                           
0D6A2                           lvl_layout_17:
0D6A2 10 EA                         .db #$10, #%11101010
0D6A4 20 E2                         .db #$20, #%11100010
0D6A6 30 62                         .db #$30, #%01100010
0D6A8 70 02                         .db #$70, #%00000010
0D6AA 80 6A                         .db #$80, #%01101010
0D6AC 90 22                         .db #$90, #%00100010
0D6AE 01 AA                         .db #$01, #%10101010
0D6B0 31 6A                         .db #$31, #%01101010
0D6B2 81 2A                         .db #$81, #%00101010
0D6B4 A1 02                         .db #$A1, #%00000010
0D6B6 C1 02                         .db #$C1, #%00000010
0D6B8 D1 0A                         .db #$D1, #%00001010
0D6BA 32 EA                         .db #$32, #%11101010
0D6BC 42 6A                         .db #$42, #%01101010
0D6BE 62 02                         .db #$62, #%00000010
0D6C0 92 6A                         .db #$92, #%01101010
0D6C2 D2 E2                         .db #$D2, #%11100010
0D6C4 43 1A                         .db #$43, #%00011010
0D6C6 53 CA                         .db #$53, #%11001010
0D6C8 73 02                         .db #$73, #%00000010
0D6CA 83 4A                         .db #$83, #%01001010
0D6CC B3 CA                         .db #$B3, #%11001010
0D6CE C3 EA                         .db #$C3, #%11101010
0D6D0 04 0A                         .db #$04, #%00001010
0D6D2 14 A2                         .db #$14, #%10100010
0D6D4 24 AA                         .db #$24, #%10101010
0D6D6 44 AA                         .db #$44, #%10101010
0D6D8 64 6A                         .db #$64, #%01101010
0D6DA 65 6A                         .db #$65, #%01101010
0D6DC A5 AA                         .db #$A5, #%10101010
0D6DE 06 EA                         .db #$06, #%11101010
0D6E0 16 62                         .db #$16, #%01100010
0D6E2 66 22                         .db #$66, #%00100010
0D6E4 86 2A                         .db #$86, #%00101010
0D6E6 17 42                         .db #$17, #%01000010
0D6E8 47 12                         .db #$47, #%00010010
0D6EA 57 6A                         .db #$57, #%01101010
0D6EC 97 4A                         .db #$97, #%01001010
0D6EE A7 02                         .db #$A7, #%00000010
0D6F0 18 02                         .db #$18, #%00000010
0D6F2 28 0A                         .db #$28, #%00001010
0D6F4 38 22                         .db #$38, #%00100010
0D6F6 68 2A                         .db #$68, #%00101010
0D6F8 88 62                         .db #$88, #%01100010
0D6FA C8 0A                         .db #$C8, #%00001010
0D6FC D8 02                         .db #$D8, #%00000010
0D6FE 19 2A                         .db #$19, #%00101010
0D700 39 2A                         .db #$39, #%00101010
0D702 69 42                         .db #$69, #%01000010
0D704 99 2A                         .db #$99, #%00101010
0D706 B9 42                         .db #$B9, #%01000010
0D708 FF                            .db #LEVEL_END
0D709                           
0D709                           lvl_layout_18:
0D709 00 12                         .db #$00, #%00010010
0D70B 40 1A                         .db #$40, #%00011010
0D70D 50 11                         .db #$50, #%00010001
0D70F 70 1A                         .db #$70, #%00011010
0D711 80 10                         .db #$80, #%00010000
0D713 D0 13                         .db #$D0, #%00010011
0D715 01 1A                         .db #$01, #%00011010
0D717 22 15                         .db #$22, #%00010101
0D719 A2 1A                         .db #$A2, #%00011010
0D71B B2 14                         .db #$B2, #%00010100
0D71D 03 67                         .db #$03, #%01100111
0D71F 43 67                         .db #$43, #%01100111
0D721 83 67                         .db #$83, #%01100111
0D723 24 09                         .db #$24, #%00001001
0D725 74 0D                         .db #$74, #%00001101
0D727 C4 0A                         .db #$C4, #%00001010
0D729 05 A7                         .db #$05, #%10100111
0D72B 45 27                         .db #$45, #%00100111
0D72D 95 27                         .db #$95, #%00100111
0D72F 16 C7                         .db #$16, #%11000111
0D731 36 67                         .db #$36, #%01100111
0D733 86 67                         .db #$86, #%01100111
0D735 D6 07                         .db #$D6, #%00000111
0D737 07 A3                         .db #$07, #%10100011
0D739 27 23                         .db #$27, #%00100011
0D73B 47 C7                         .db #$47, #%11000111
0D73D 57 A0                         .db #$57, #%10100000
0D73F 67 A7                         .db #$67, #%10100111
0D741 77 20                         .db #$77, #%00100000
0D743 97 C7                         .db #$97, #%11000111
0D745 A7 A4                         .db #$A7, #%10100100
0D747 B7 A7                         .db #$B7, #%10100111
0D749 C7 24                         .db #$C7, #%00100100
0D74B 28 0B                         .db #$28, #%00001011
0D74D 38 A3                         .db #$38, #%10100011
0D74F 78 08                         .db #$78, #%00001000
0D751 88 A0                         .db #$88, #%10100000
0D753 C8 0C                         .db #$C8, #%00001100
0D755 D8 A4                         .db #$D8, #%10100100
0D757 09 43                         .db #$09, #%01000011
0D759 59 40                         .db #$59, #%01000000
0D75B A9 44                         .db #$A9, #%01000100
0D75D FF                            .db #LEVEL_END
0D75E                           
0D75E                           lvl_layout_19:
0D75E 11 A8                         .db #$11, #%10101000
0D760 21 68                         .db #$21, #%01101000
0D762 81 28                         .db #$81, #%00101000
0D764 B1 48                         .db #$B1, #%01001000
0D766 22 48                         .db #$22, #%01001000
0D768 62 68                         .db #$62, #%01101000
0D76A B2 28                         .db #$B2, #%00101000
0D76C 23 28                         .db #$23, #%00101000
0D76E 83 28                         .db #$83, #%00101000
0D770 B3 28                         .db #$B3, #%00101000
0D772 04 E8                         .db #$04, #%11101000
0D774 24 08                         .db #$24, #%00001000
0D776 44 08                         .db #$44, #%00001000
0D778 64 E8                         .db #$64, #%11101000
0D77A 84 E8                         .db #$84, #%11101000
0D77C C4 A8                         .db #$C4, #%10101000
0D77E D4 E8                         .db #$D4, #%11101000
0D780 15 48                         .db #$15, #%01001000
0D782 55 C8                         .db #$55, #%11001000
0D784 75 C8                         .db #$75, #%11001000
0D786 A5 08                         .db #$A5, #%00001000
0D788 36 08                         .db #$36, #%00001000
0D78A B6 08                         .db #$B6, #%00001000
0D78C 27 48                         .db #$27, #%01001000
0D78E 97 28                         .db #$97, #%00101000
0D790 C7 08                         .db #$C7, #%00001000
0D792 09 61                         .db #$09, #%01100001
0D794 19 11                         .db #$19, #%00010001
0D796 49 61                         .db #$49, #%01100001
0D798 89 31                         .db #$89, #%00110001
0D79A A9 61                         .db #$A9, #%01100001
0D79C FF                            .db #LEVEL_END
0D79D                           
0D79D                           lvl_layout_20:
0D79D 00 60                         .db #$00, #%01100000
0D79F 10 1A                         .db #$10, #%00011010
0D7A1 40 A7                         .db #$40, #%10100111
0D7A3 50 20                         .db #$50, #%00100000
0D7A5 70 1A                         .db #$70, #%00011010
0D7A7 80 40                         .db #$80, #%01000000
0D7A9 B0 1A                         .db #$B0, #%00011010
0D7AB C0 20                         .db #$C0, #%00100000
0D7AD 01 40                         .db #$01, #%01000000
0D7AF 31 1A                         .db #$31, #%00011010
0D7B1 A1 40                         .db #$A1, #%01000000
0D7B3 D1 1A                         .db #$D1, #%00011010
0D7B5 43 67                         .db #$43, #%01100111
0D7B7 83 47                         .db #$83, #%01000111
0D7B9 44 A7                         .db #$44, #%10100111
0D7BB 54 25                         .db #$54, #%00100101
0D7BD 94 08                         .db #$94, #%00001000
0D7BF A4 A7                         .db #$A4, #%10100111
0D7C1 55 05                         .db #$55, #%00000101
0D7C3 65 08                         .db #$65, #%00001000
0D7C5 06 27                         .db #$06, #%00100111
0D7C7 36 67                         .db #$36, #%01100111
0D7C9 76 28                         .db #$76, #%00101000
0D7CB A6 27                         .db #$A6, #%00100111
0D7CD D6 07                         .db #$D6, #%00000111
0D7CF A7 A7                         .db #$A7, #%10100111
0D7D1 08 60                         .db #$08, #%01100000
0D7D3 09 60                         .db #$09, #%01100000
0D7D5 18 A7                         .db #$18, #%10100111
0D7D7 48 A7                         .db #$48, #%10100111
0D7D9 58 47                         .db #$58, #%01000111
0D7DB 88 27                         .db #$88, #%00100111
0D7DD B8 20                         .db #$B8, #%00100000
0D7DF D8 1A                         .db #$D8, #%00011010
0D7E1 59 15                         .db #$59, #%00010101
0D7E3 69 60                         .db #$69, #%01100000
0D7E5 A9 60                         .db #$A9, #%01100000
0D7E7 FF                            .db #LEVEL_END
0D7E8                           
0D7E8                           lvl_layout_21:
0D7E8 00 13                         .db #$00, #%00010011
0D7EA 10 11                         .db #$10, #%00010001
0D7EC 20 67                         .db #$20, #%01100111
0D7EE 60 67                         .db #$60, #%01100111
0D7F0 A0 47                         .db #$A0, #%01000111
0D7F2 D0 15                         .db #$D0, #%00010101
0D7F4 32 63                         .db #$32, #%01100011
0D7F6 72 05                         .db #$72, #%00000101
0D7F8 82 43                         .db #$82, #%01000011
0D7FA B2 43                         .db #$B2, #%01000011
0D7FC 33 03                         .db #$33, #%00000011
0D7FE 43 2A                         .db #$43, #%00101010
0D800 63 7A                         .db #$63, #%01111010
0D802 73 2A                         .db #$73, #%00101010
0D804 A3 7A                         .db #$A3, #%01111010
0D806 34 63                         .db #$34, #%01100011
0D808 74 63                         .db #$74, #%01100011
0D80A B4 43                         .db #$B4, #%01000011
0D80C 06 63                         .db #$06, #%01100011
0D80E 46 63                         .db #$46, #%01100011
0D810 86 63                         .db #$86, #%01100011
0D812 C6 C3                         .db #$C6, #%11000011
0D814 07 7A                         .db #$07, #%01111010
0D816 47 7A                         .db #$47, #%01111010
0D818 67 0A                         .db #$67, #%00001010
0D81A 87 7A                         .db #$87, #%01111010
0D81C 08 13                         .db #$08, #%00010011
0D81E 18 43                         .db #$18, #%01000011
0D820 48 63                         .db #$48, #%01100011
0D822 88 63                         .db #$88, #%01100011
0D824 FF                            .db #LEVEL_END
0D825                           
0D825                           lvl_layout_22:
0D825 00 7A                         .db #$00, #%01111010
0D827 40 7A                         .db #$40, #%01111010
0D829 80 7A                         .db #$80, #%01111010
0D82B C0 3A                         .db #$C0, #%00111010
0D82D 13 67                         .db #$13, #%01100111
0D82F 83 A7                         .db #$83, #%10100111
0D831 B3 07                         .db #$B3, #%00000111
0D833 14 07                         .db #$14, #%00000111
0D835 44 07                         .db #$44, #%00000111
0D837 A4 07                         .db #$A4, #%00000111
0D839 15 A5                         .db #$15, #%10100101
0D83B 45 A5                         .db #$45, #%10100101
0D83D 85 25                         .db #$85, #%00100101
0D83F 86 05                         .db #$86, #%00000101
0D841 A6 05                         .db #$A6, #%00000101
0D843 17 11                         .db #$17, #%00010001
0D845 47 A1                         .db #$47, #%10100001
0D847 87 A1                         .db #$87, #%10100001
0D849 B7 A1                         .db #$B7, #%10100001
0D84B 18 41                         .db #$18, #%01000001
0D84D 68 01                         .db #$68, #%00000001
0D84F D8 01                         .db #$D8, #%00000001
0D851 FF                            .db #LEVEL_END
0D852                           
0D852                           lvl_layout_23:
0D852 00 71                         .db #$00, #%01110001
0D854 40 11                         .db #$40, #%00010001
0D856 50 43                         .db #$50, #%01000011
0D858 80 D1                         .db #$80, #%11010001
0D85A 90 E3                         .db #$90, #%11100011
0D85C A0 63                         .db #$A0, #%01100011
0D85E 01 63                         .db #$01, #%01100011
0D860 41 63                         .db #$41, #%01100011
0D862 A1 63                         .db #$A1, #%01100011
0D864 02 63                         .db #$02, #%01100011
0D866 42 63                         .db #$42, #%01100011
0D868 62 11                         .db #$62, #%00010001
0D86A A2 67                         .db #$A2, #%01100111
0D86C 04 63                         .db #$04, #%01100011
0D86E 44 23                         .db #$44, #%00100011
0D870 64 D1                         .db #$64, #%11010001
0D872 74 E3                         .db #$74, #%11100011
0D874 84 F1                         .db #$84, #%11110001
0D876 94 E3                         .db #$94, #%11100011
0D878 A4 C7                         .db #$A4, #%11000111
0D87A B4 23                         .db #$B4, #%00100011
0D87C 05 63                         .db #$05, #%01100011
0D87E 45 23                         .db #$45, #%00100011
0D880 06 71                         .db #$06, #%01110001
0D882 46 11                         .db #$46, #%00010001
0D884 56 E3                         .db #$56, #%11100011
0D886 D6 07                         .db #$D6, #%00000111
0D888 17 D1                         .db #$17, #%11010001
0D88A 27 43                         .db #$27, #%01000011
0D88C 67 D1                         .db #$67, #%11010001
0D88E A7 C7                         .db #$A7, #%11000111
0D890 C7 A7                         .db #$C7, #%10100111
0D892 D7 B3                         .db #$D7, #%10110011
0D894 28 43                         .db #$28, #%01000011
0D896 78 43                         .db #$78, #%01000011
0D898 29 43                         .db #$29, #%01000011
0D89A 79 43                         .db #$79, #%01000011
0D89C FF                           .db #LEVEL_END
0D89D                           
0D89D                           lvl_layout_24:
0D89D 02 67                         .db #$02, #%01100111
0D89F 42 67                         .db #$42, #%01100111
0D8A1 82 67                         .db #$82, #%01100111
0D8A3 05 67                         .db #$05, #%01100111
0D8A5 45 67                         .db #$45, #%01100111
0D8A7 85 67                         .db #$85, #%01100111
0D8A9 08 67                         .db #$08, #%01100111
0D8AB 48 67                         .db #$48, #%01100111
0D8AD 88 67                         .db #$88, #%01100111
0D8AF 30 E7                         .db #$30, #%11100111
0D8B1 70 E7                         .db #$70, #%11100111
0D8B3 B0 E7                         .db #$B0, #%11100111
0D8B5 34 E7                         .db #$34, #%11100111
0D8B7 74 E7                         .db #$74, #%11100111
0D8B9 B4 E7                         .db #$B4, #%11100111
0D8BB 20 13                         .db #$20, #%00010011
0D8BD 40 10                         .db #$40, #%00010000
0D8BF 80 02                         .db #$80, #%00000010
0D8C1 41 05                         .db #$41, #%00000101
0D8C3 B1 09                         .db #$B1, #%00001001
0D8C5 02 09                         .db #$02, #%00001001
0D8C7 52 0C                         .db #$52, #%00001100
0D8C9 13 11                         .db #$13, #%00010001
0D8CB 33 04                         .db #$33, #%00000100
0D8CD 74 0C                         .db #$74, #%00001100
0D8CF B4 08                         .db #$B4, #%00001000
0D8D1 15 09                         .db #$15, #%00001001
0D8D3 55 0C                         .db #$55, #%00001100
0D8D5 95 0C                         .db #$95, #%00001100
0D8D7 47 03                         .db #$47, #%00000011
0D8D9 A7 12                         .db #$A7, #%00010010
0D8DB 18 15                         .db #$18, #%00010101
0D8DD 09 05                         .db #$09, #%00000101
0D8DF 19 03                         .db #$19, #%00000011
0D8E1 FF                            .db #LEVEL_END
0D8E2                           
0D8E2                           lvl_layout_25:
0D8E2 00 12                         .db #$00, #%00010010
0D8E4 10 63                         .db #$10, #%01100011
0D8E6 60 63                         .db #$60, #%01100011
0D8E8 A0 07                         .db #$A0, #%00000111
0D8EA 01 11                         .db #$01, #%00010001
0D8EC A1 02                         .db #$A1, #%00000010
0D8EE 02 67                         .db #$02, #%01100111
0D8F0 42 07                         .db #$42, #%00000111
0D8F2 62 67                         .db #$62, #%01100111
0D8F4 A2 C7                         .db #$A2, #%11000111
0D8F6 03 61                         .db #$03, #%01100001
0D8F8 43 01                         .db #$43, #%00000001
0D8FA 63 61                         .db #$63, #%01100001
0D8FC A6 E7                         .db #$A6, #%11100111
0D8FE B6 47                         .db #$B6, #%01000111
0D900 C6 01                         .db #$C6, #%00000001
0D902 B7 42                         .db #$B7, #%01000010
0D904 B8 42                         .db #$B8, #%01000010
0D906 C8 0A                         .db #$C8, #%00001010
0D908 09 7A                         .db #$09, #%01111010
0D90A 49 7A                         .db #$49, #%01111010
0D90C 89 3A                         .db #$89, #%00111010
0D90E B9 42                         .db #$B9, #%01000010
0D910 FF                            .db #LEVEL_END
0D911                           
0D911                           ;; Level layout address pointers
0D911                           tbl_lvl_layout_hi:
0D911                           ifdef TESTING
0D911 D2                            .db >#lvl_test
0D912                           endif
0D912 D2 D2 D2 D2 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D917 D3 D3 D4 D4 D4                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D91C D4 D5 D5 D5 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D921 D6 D6 D7 D7 D7                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D926 D7 D8 D8 D8 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D92B                           
0D92B                           tbl_lvl_layout_lo:
0D92B                           ifdef TESTING
0D92B 21                            .db <#lvl_test
0D92C                           endif
0D92C 32 4D 82 B5 26                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D931 61 EA 2B 62 A5                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D936 D4 27 52 A5 1C                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D93B 4D A2 09 5E 9D                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D940 E8 25 52 9D E2                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D945                           
0D945                           ;; Ball start position (#$YX)
0D945                           tbl_lvl_ball_startpos:
0D945                           ifdef TESTING
0D945 29                            .db #$29
0D946                           endif
0D946 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D94B 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D950 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D955 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D95A 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D95F                           
0D95F                               
0D95F                           ;; Ball start direction, color and tile score
0D95F                           ;; #% ccc v tttt
0D95F                           ;;    ||| | ++++-- tile score
0D95F                           ;;    ||| +------- vertical direction, up (0) or down
0D95F                           ;;    +++--------- color (CBRYGM)
0D95F                           tbl_lvl_ball_init:
0D95F                           ifdef TESTING
0D95F 20                            .db #%00100000
0D960                           endif
0D960 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D965 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D96A 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D96F 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D974 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D979                           
0D979                           
0D979                           
0D979                           ;; Helper table to multiply values by 16
0D979                           tbl_Times16:
0D979 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D981 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D989                               
0D989                           
0D989                           ;; Helper table to multiply values by 64
0D989                           tbl_Times64:
0D989 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D98D                           
0D98D                           
0D98D                           ;; Metatile ID to CHR data mapper
0D98D                           tbl_GametileTopLeft:
0D98D 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D997                           
0D997                           tbl_GametileTopRight:
0D997 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D9A1                           
0D9A1                           tbl_GametileBottomLeft:
0D9A1 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D9AB                           
0D9AB                           tbl_GametileBottomRight:
0D9AB 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D9B5                           
0D9B5                           ;; Metatile ID to RAM byte data mapper
0D9B5                           tbl_GameTileRamByte:
0D9B5 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D9BA                           
0D9BA                           ;; HUD text data
0D9BA                           tbl_HudText:
0D9BA 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D9C2 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D9C9 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D9D1 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D9D6                           
0D9D6                           ;; Move block top left tile based on color
0D9D6                           tbl_MoveBlockTopLeftTile:
0D9D6 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D9DD                           
0D9DD                           ;; Game over data
0D9DD                           tbl_GameOver:
0D9DD 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D9E1 00 00                         .db #_SPACE, #_SPACE
0D9E3 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0D9E7                           
0D9E7                           ;; Background fade pallette table
0D9E7                           tbl_BackgroundFade:
0D9E7 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0D9F1                           
0D9F1                           ;; Sound effects
0D9F1                           .include "game/include/table/sfx.asm"
0D9F1                           ;;
0D9F1                           ;; Explosion sound effects
0D9F1                           ;;
0D9F1                           ;;   #% ffff vvvv
0D9F1                           ;;      |||| ++++---- volume (0=low, 15=high)
0D9F1                           ;;      ++++-------- frequency (0=low, 15=high)
0D9F1                           ;;
0D9F1                           ;; #$FF = end of sfx
0D9F1                           ;;
0D9F1                           
0D9F1                           tbl_ExplosionSfx:
0D9F1 00                            .db #$00 ; buffer byte
0D9F2 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0D9FA 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DA02 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DA0A 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DA12 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DA1A 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DA1F                           
0DA1F                           tbl_ThudSfx:
0DA1F 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA20 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DA28 E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DA2D                           
0DA2D                           tbl_BounceSfx:
0DA2D 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA2E 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DA32                           
0DA32 00                            .db #$00
0DA33                           tbl_Sfx_hi:
0DA33 D9 DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DA36                           
0DA36                           tbl_Sfx_lo:
0DA36 F1 1F 2D                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DA39                           
0DA39                           ;; Lookup table to convert bonus ticks to score
0DA39                           tbl_BonusToScore:
0DA39 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DA43                           
0DA43                           
0DA43                           ;; NMI handler
0DA43                           NMI:
0DA43                               .include "interrupt/nmi.asm"
0DA43                           
0DA43                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DA43                           ;;
0DA43                           ;; include/nmi.asm
0DA43                           ;;
0DA43                           ;; Non-maskable interrupt script. This script is being executed
0DA43                           ;; when vBlank hits.
0DA43                           ;;
0DA43                           ;;
0DA43                           
0DA43                               ;; Preserve accumulator through stack
0DA43 48                            PHA
0DA44                           
0DA44                               ;; Should NMI be skipped?
0DA44 A5 13                         LDA skip_nmi
0DA46 F0 03                         BEQ +
0DA48 4C BA DB                          JMP +skip_nmi
0DA4B                               +
0DA4B                           
0DA4B                               ;; When in NMI, skip additional NMI requests
0DA4B A9 01                         LDA #$01
0DA4D 85 13                         STA skip_nmi
0DA4F                           
0DA4F                               ;; Preserve X, Y, and PC through stack
0DA4F 8A                            TXA
0DA50 48                            PHA
0DA51 98                            TYA
0DA52 48                            PHA
0DA53 08                            PHP
0DA54                               
0DA54                               ;; Check forced NMI skip
0DA54 A5 14                         LDA force_skip_nmi
0DA56 F0 03                         BEQ +
0DA58 4C A9 DB                          JMP +force_skip_nmi
0DA5B                               +
0DA5B                           
0DA5B                               ;; Update PPU mask
0DA5B                               ;LDA #$00
0DA5B                               ;STA PPU_CTRL
0DA5B A5 12                         LDA soft_ppu_mask
0DA5D 8D 01 20                      STA PPU_MASK
0DA60                               
0DA60                               
0DA60                               ;; Additional PPU updates go here
0DA60                               .include "game/interrupt/nmi.asm"
0DA60                           
0DA60                               ;; Check if ppu_buffer needs updating
0DA60 A5 39                         LDA ppu_buffer_update
0DA62 D0 03                         BNE +
0DA64 4C A6 DA                          JMP +no_ppu_buffer_update
0DA67                               +
0DA67                           
0DA67                               ;; Reset ppu control register and mask
0DA67 A2 00                         LDX #$00
0DA69 8E 00 20                      STX PPU_CTRL
0DA6C 8E 01 20                      STX PPU_MASK
0DA6F                           
0DA6F                               ;; Set up loop
0DA6F                               -
0DA6F                                   ;; Reset hi/lo latch
0DA6F 2C 02 20                          BIT PPU_STATUS
0DA72                           
0DA72                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DA72 BD 00 03                          LDA ppu_buffer,x
0DA75 8D 06 20                          STA PPU_ADDR
0DA78 E8                                INX
0DA79 BD 00 03                          LDA ppu_buffer,x
0DA7C 8D 06 20                          STA PPU_ADDR
0DA7F                           
0DA7F                                   ;; Write ppu_buffer data to PPU_ADDR
0DA7F E8                                INX
0DA80 BD 00 03                          LDA ppu_buffer,x
0DA83 8D 07 20                          STA PPU_DATA
0DA86                           
0DA86                                   ;; Check if updating is done (eg. X is at pointer)
0DA86 E8                                INX
0DA87 E4 3A                             CPX ppu_buffer_pointer
0DA89 F0 03                             BEQ +
0DA8B 4C 6F DA                      JMP -
0DA8E                           +
0DA8E                           
0DA8E                               ;; Reset ppu buffer update and pointer
0DA8E A9 00                         LDA #$00
0DA90 85 39                         STA ppu_buffer_update
0DA92 85 3A                         STA ppu_buffer_pointer
0DA94                               
0DA94                               ;; Reset scrolling position
0DA94 8D 05 20                      STA PPU_SCROLL
0DA97 8D 05 20                      STA PPU_SCROLL
0DA9A                           
0DA9A                               ;; Restore ppu control register and mask
0DA9A A9 90                         LDA #%10010000
0DA9C 8D 00 20                      STA PPU_CTRL
0DA9F A5 12                         LDA soft_ppu_mask
0DAA1 8D 01 20                      STA PPU_MASK
0DAA4 A9 00                         LDA #$00
0DAA6                           
0DAA6                           ;; Continue other NMI stuff
0DAA6                           +no_ppu_buffer_update:
0DAA6                           
0DAA6                               ;; Reset sprite RAM, draw sprites
0DAA6 8D 03 20                      STA OAM_ADDR
0DAA9 A9 02                         LDA #$02
0DAAB 8D 14 40                      STA OAM_DMA
0DAAE                           
0DAAE                               ;; Decrease explosion and move block timers
0DAAE A0 04                         LDY #MAX_ANIMATIONS
0DAB0 A2 00                         LDX #$00
0DAB2                               -
0DAB2 BD 60 03                          LDA explosion_timer,x
0DAB5 F0 03                             BEQ +
0DAB7 DE 60 03                              DEC explosion_timer,x
0DABA                                   +
0DABA                           
0DABA BD 80 03                          LDA move_block_timer,x
0DABD F0 03                             BEQ +
0DABF DE 80 03                              DEC move_block_timer,x
0DAC2                                   +
0DAC2                                   
0DAC2 E8                                INX
0DAC3 88                                DEY
0DAC4 F0 03                             BEQ +done
0DAC6 4C B2 DA                      JMP -
0DAC9                           +done:
0DAC9                           
0DAC9                               ;; Decrease nudge timer
0DAC9 A5 3E                         LDA nudge_timer
0DACB F0 02                         BEQ +
0DACD C6 3E                             DEC nudge_timer
0DACF                               +
0DACF                           
0DACF                               ;; Decrease bonus timer
0DACF A5 3F                         LDA bonus_timer
0DAD1 F0 02                         BEQ +
0DAD3 C6 3F                             DEC bonus_timer
0DAD5                               +
0DAD5                           
0DAD5                               ;; Decrease kill timer
0DAD5 A5 40                         LDA kill_timer
0DAD7 F0 02                         BEQ +
0DAD9 C6 40                             DEC kill_timer
0DADB                               +
0DADB                           
0DADB                               ;; Play background noise
0DADB A5 38                         LDA screen_mode
0DADD 29 01                         AND #IS_GAME_SCREEN
0DADF F0 0E                         BEQ +
0DAE1                                   .include "game/include/main/background_sound.asm"
0DAE1                           
0DAE1                               ;; If ball is frozen, no background sound should play
0DAE1 A5 37                         LDA ball_flags
0DAE3 29 04                         AND #BALL_IS_FROZEN
0DAE5 F0 08                         BEQ +
0DAE7 A9 30                             LDA #$30
0DAE9 8D 0C 40                          STA NOISE_VOLUME
0DAEC 4C 54 DB                          JMP +endNoise
0DAEF                               +
0DAEF                               
0DAEF                               ;; At random times, set max_noise period to $03-$0A
0DAEF A5 44                         LDA max_noise
0DAF1 D0 1D                         BNE +
0DAF3 20 D1 C4                          JSR sub_GetRandomNumber
0DAF6 29 EF                             AND #%11101111
0DAF8 D0 16                             BNE +
0DAFA                                   
0DAFA A5 15                             LDA frame_counter
0DAFC 85 16                             STA random_seed
0DAFE 20 D1 C4                          JSR sub_GetRandomNumber
0DB01 29 07                             AND #$07
0DB03 69 03                             ADC #$03
0DB05 85 44                             STA max_noise
0DB07 A9 01                             LDA #$01
0DB09 85 45                             STA sweep_noise
0DB0B A9 34                             LDA #$34
0DB0D 8D 0C 40                          STA NOISE_VOLUME
0DB10                           
0DB10                               +
0DB10                           
0DB10                               ;; if sweep noise = $00: constant noise
0DB10                               ;; else if sweep noise > $80: decrease pitch
0DB10                               ;; else: increase pitch
0DB10 A5 45                         LDA sweep_noise
0DB12 F0 18                         BEQ +constantNoise
0DB14 30 2A                         BMI +decreaseNoise
0DB16                           
0DB16                           ;; Sweep noise up to max noise pitch
0DB16                           +increaseNoise:
0DB16 C6 46                         DEC current_noise
0DB18 A5 46                         LDA current_noise
0DB1A 8D 0E 40                      STA NOISE_PERIOD
0DB1D C5 44                         CMP max_noise
0DB1F D0 08                         BNE +
0DB21 A9 00                             LDA #$00
0DB23 85 45                             STA sweep_noise
0DB25 A9 0A                             LDA #$0A
0DB27 85 47                             STA noise_timer
0DB29                               +
0DB29 4C 54 DB                      JMP +endNoise
0DB2C                           
0DB2C                           ;; Keep noise at constant pitch
0DB2C                           +constantNoise:
0DB2C A5 44                         LDA max_noise
0DB2E F0 24                         BEQ +endNoise
0DB30                           
0DB30 A5 47                         LDA noise_timer
0DB32 D0 07                         BNE +
0DB34 A9 80                             LDA #$80
0DB36 85 45                             STA sweep_noise
0DB38 4C 54 DB                          JMP +endNoise
0DB3B                               +
0DB3B C6 47                         DEC noise_timer
0DB3D 4C 54 DB                      JMP +endNoise
0DB40                           
0DB40                           ;; Sweep noise down to initial pitch
0DB40                           +decreaseNoise:
0DB40 E6 46                         INC current_noise
0DB42 A5 46                         LDA current_noise
0DB44 8D 0E 40                      STA NOISE_PERIOD
0DB47 C9 0E                         CMP #$0E
0DB49 D0 09                         BNE +endNoise
0DB4B                           
0DB4B 20 61 C5                      JSR sub_BackgroundNoise
0DB4E A9 00                         LDA #$00
0DB50 85 44                         STA max_noise
0DB52 85 45                         STA sweep_noise
0DB54                           
0DB54                           +endNoise:
0DB54                           
0DB54                               +
0DB54                           
0DB54                               ;; Play bonus to score bleeps
0DB54                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DB54                           
0DB54                           ;; Random bleepy noises
0DB54                           
0DB54 A5 48                         LDA do_beeps
0DB56 F0 2E                         BEQ +continue
0DB58                               
0DB58 C9 02                         CMP #$02
0DB5A D0 12                         BNE +beep
0DB5C                              
0DB5C                           +stopBeep:
0DB5C A9 00                         LDA #$00
0DB5E 85 48                         STA do_beeps
0DB60 A9 08                         LDA #$08
0DB62 8D 15 40                      STA APU_STATUS
0DB65 8D 0F 40                      STA NOISE_LENGTH
0DB68 20 61 C5                      JSR sub_BackgroundNoise
0DB6B 4C 86 DB                      JMP +continue
0DB6E                               
0DB6E                           +beep:
0DB6E A9 01                         LDA #$01
0DB70 8D 15 40                      STA APU_STATUS
0DB73 A5 49                         LDA soft_pulse1
0DB75 8D 00 40                      STA PULSE1_VOLUME
0DB78 20 D1 C4                      JSR sub_GetRandomNumber
0DB7B 8D 02 40                      STA PULSE1_TIMER_LO
0DB7E 20 D1 C4                      JSR sub_GetRandomNumber
0DB81 29 01                         AND #$01
0DB83 8D 03 40                      STA PULSE1_TIMER_HI
0DB86                           
0DB86                           +continue:
0DB86                           
0DB86                               
0DB86                               ;; Play sound effect
0DB86                               .include "game/include/main/nmi_sfx.asm"
0DB86                           
0DB86                               ;; Get current explosion sfx frame; if not set, skip this
0DB86 A4 4C                         LDY sfx_timer
0DB88 F0 1F                         BEQ +done
0DB8A                               
0DB8A                                   ;; Check if explosion sfx is done; if so, disable and skip
0DB8A B1 4A                             LDA (sfx_address),y
0DB8C D0 07                             BNE +
0DB8E A9 00                                 LDA #$00
0DB90 85 4C                                 STA sfx_timer
0DB92 4C A9 DB                              JMP +done
0DB95                                   +
0DB95                                   
0DB95                                   ;; Set low nibble as volume
0DB95 29 0F                             AND #$0F
0DB97 09 30                             ORA #$30
0DB99 8D 0C 40                          STA NOISE_VOLUME
0DB9C                                   
0DB9C                                   ;; Set high nibble as frequency
0DB9C B1 4A                             LDA (sfx_address),y
0DB9E 4A                                LSR
0DB9F 4A                                LSR
0DBA0 4A                                LSR
0DBA1 4A                                LSR
0DBA2 49 0F                             EOR #$0F
0DBA4 8D 0E 40                          STA NOISE_PERIOD
0DBA7                                   
0DBA7                                   ;; Next frame
0DBA7 E6 4C                             INC sfx_timer
0DBA9                               +done
0DBA9                           
0DBA9                               
0DBA9                           
0DBA9                           ;; This is what happens when we forced nmi skip
0DBA9                           +force_skip_nmi:
0DBA9                           
0DBA9                               ;; Increase frame timers
0DBA9 E6 15                         INC frame_counter
0DBAB                           
0DBAB                               ;; reset sprites_update_position
0DBAB A9 00                         LDA #$00
0DBAD 85 35                         STA sprites_update_position
0DBAF                           
0DBAF                               ;; Don't skip next NMI request
0DBAF A9 00                         LDA #$00
0DBB1 85 13                         STA skip_nmi
0DBB3 85 4D                         STA check_nmi
0DBB5                           
0DBB5                               ;; Restore X, Y and PC from stack
0DBB5 28                            PLP
0DBB6 68                            PLA
0DBB7 A8                            TAY
0DBB8 68                            PLA
0DBB9 AA                            TAX
0DBBA                           
0DBBA                           +skip_nmi:
0DBBA                               ;; Restore accumulator from stack
0DBBA 68                            PLA
0DBBB                           
0DBBB                               ;; Return
0DBBB 40                            RTI
0DBBC                           
0DBBC                           
0DBBC                           ;; IRQ handler (empty)
0DBBC                           IRQ:
0DBBC                               .include "interrupt/irq.asm"
0DBBC                           
0DBBC 40                            RTI
0DBBD                           
0DBBD                           
0DBBD                           ;; Interrupt vectors
0DBBD 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 43 DA                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE BC DB                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
