	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; Enable test mode
	                            ;; - Test mode adds a test level and allows the developer to start
	                            ;;   at any given level with any number of lives. Remove the line
	                            ;;   that starts with TESTING (or add a semicolon in front) to
	                            ;;   disable test mode.
	                            TESTING     = 1
	                            START_LEVEL = 0
	                            START_LIVES = 1
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Timers 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           unfreeze_timer         .dsb 1
00042                           
00042                           ;; Current level (doubles as level select variable)
00042                           current_level          .dsb 1
00043                           
00043                           ;; Tile type the ball is currently colliding with
00043                           colliding_tile         .dsb 1
00044                           
00044                           ;; Number of blocks left on screen
00044                           blocks_left            .dsb 1
00045                           
00045                           ;; Sound control variables
00045                           max_noise              .dsb 1
00046                           sweep_noise            .dsb 1
00047                           current_noise          .dsb 1
00048                           noise_timer            .dsb 1
00049                           do_beeps               .dsb 1
0004A                           soft_pulse1            .dsb 1
0004B                           noise_muted            .dsb 1
0004C                           
0004C                           ;; Sound effect variables
0004C                           sfx_address            .dsb 2
0004E                           sfx_timer              .dsb 3
00051                           sfx_frequency          .dsb 2
00053                           
00053                           
00053                           ;; Additional NMI check for timed PPU fade
00053                           check_nmi              .dsb 1
00054                           
00054                           ;; The TV system this game is running on (0=ntsc, 1=pal, 2=dendy, 3=unknown)
00054                           tv_system              .dsb 1
00055                           
00055                           ;; This variable should be used for absolutely nothing
00055                           void                   .dsb 1
00056                           
00056                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 60 C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 60 C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                           
0C04B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C04B                           ;;
0C04B                           ;;  NES TV system detection code
0C04B                           ;;  Copyright 2011 Damian Yerrick
0C04B                           ;;  https://www.nesdev.org/wiki/Detect_TV_system
0C04B                           ;;
0C04B A2 00                         LDX #$00
0C04D A0 00                         LDY #$00
0C04F A9 01                         LDA #$01
0C051 85 53                         STA check_nmi
0C053                               -
0C053 C5 53                             CMP check_nmi
0C055 F0 FC                         BEQ -
0C057 A9 01                         LDA #$01
0C059 85 53                         STA check_nmi
0C05B                               -
0C05B E8                                INX
0C05C D0 01                             BNE +
0C05E C8                                    INY
0C05F C5 53                             + CMP check_nmi
0C061 F0 F8                         BEQ -
0C063 98                            TYA
0C064 38                            SEC
0C065 E9 0A                         SBC #$0A
0C067 C9 03                         CMP #$03
0C069 90 02                         BCC +
0C06B A9 03                             LDA #$03
0C06D 85 54                         + STA tv_system ; 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C06F                           ;;
0C06F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C06F                           
0C06F                           
0C06F                               ;; Tell game to load the intro screen
0C06F A9 80                         LDA #LOAD_INTRO_SCREEN
0C071 85 38                         STA screen_mode
0C073                           
0C073                               ;; Set number of lives (5)
0C073 A9 05                         LDA #$05
0C075 85 1F                         STA ball_lives
0C077                           
0C077                               ;; Start at level 1
0C077 A9 00                         LDA #$00
0C079 85 20                         STA ball_score
0C07B 85 21                         STA ball_score+1
0C07D 85 22                         STA ball_score+2
0C07F 85 23                         STA ball_score+3
0C081 85 24                         STA ball_score+4
0C083 85 25                         STA ball_score+5
0C085                           
0C085                           ifdef TESTING
0C085 A9 01                         LDA #START_LIVES
0C087 85 1F                         STA ball_lives
0C089 A9 00                         LDA #START_LEVEL
0C08B                           endif
0C08B                           
0C08B 85 42                         STA current_level
0C08D                           
0C08D                           
0C08D                           
0C08D                           ;; Main game loop
0C08D                           lbl_MainGameLoop:
0C08D 20 57 C5                      JSR sub_WaitForNMI ; align main loop
0C090                               .include "game/main.asm"
0C090                           
0C090                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C090                           ;;
0C090                           ;; game/main.asm
0C090                           ;;
0C090                           ;; The main game loop content.
0C090                           ;;
0C090                           ;;
0C090                           
0C090                               ;; Reset sprite pointer every game loop
0C090 A9 00                         LDA #$00
0C092 85 3D                         STA sprite_ram_pointer
0C094                           
0C094                               ;; Store previous buttons
0C094 A5 0F                         LDA buttons_held
0C096 85 0E                         STA buttons_prev
0C098                           
0C098                               ;; Read controller input
0C098 20 43 C5                      JSR sub_ReadController
0C09B                           
0C09B                               ;; Get buttons released
0C09B A5 0F                         LDA buttons_held
0C09D 49 FF                         EOR #$FF
0C09F 25 0E                         AND buttons_prev
0C0A1 85 11                         STA buttons_released
0C0A3                           
0C0A3                               ;; Set buttons pressed
0C0A3 A5 0E                         LDA buttons_prev
0C0A5 49 FF                         EOR #$FF
0C0A7 25 0F                         AND buttons_held
0C0A9 85 10                         STA buttons_pressed
0C0AB                           
0C0AB                               ;; Load screen?
0C0AB A5 38                         LDA screen_mode
0C0AD 29 80                         AND #%10000000
0C0AF F0 1E                         BEQ +screenLoaded
0C0B1                           
0C0B1                               ;; Get screen type to load
0C0B1 A5 38                         LDA screen_mode
0C0B3 29 03                         AND #%00000011
0C0B5 A8                            TAY
0C0B6                               
0C0B6                               ;; Get address to load screen type from
0C0B6 B9 D3 D2                      LDA tbl_LoadScreenLo,y
0C0B9 85 0C                         STA pointer
0C0BB B9 D0 D2                      LDA tbl_LoadScreenHi,y
0C0BE 85 0D                         STA pointer+1
0C0C0                           
0C0C0                               ;; Load screen
0C0C0 20 FC C6                      JSR sub_DisableRendering
0C0C3 20 51 CA                      JSR sub_JumpToPointer
0C0C6 20 10 C7                      JSR sub_EnableRendering
0C0C9                               
0C0C9                               ;; Don't load screen anymore next loop
0C0C9 A5 38                         LDA screen_mode
0C0CB 29 7F                         AND #%01111111
0C0CD 85 38                         STA screen_mode
0C0CF                               
0C0CF                           
0C0CF                           +screenLoaded:
0C0CF                               ;; Check if we're on the game screen
0C0CF A5 38                         LDA screen_mode
0C0D1 C9 01                         CMP #IS_GAME_SCREEN
0C0D3 F0 03                         BEQ +
0C0D5 4C 78 C3                          JMP +checkNextScreen
0C0D8                               +
0C0D8                           
0C0D8                               ;; Load sprite 0 in place
0C0D8 A9 18                         LDA #$18
0C0DA 8D 00 02                      STA ADDR_SPRITERAM
0C0DD A9 0F                         LDA #$0F
0C0DF 8D 01 02                      STA ADDR_SPRITERAM+1
0C0E2 A9 22                         LDA #$22
0C0E4 8D 02 02                      STA ADDR_SPRITERAM+2
0C0E7 A9 F8                         LDA #$F8
0C0E9 8D 03 02                      STA ADDR_SPRITERAM+3
0C0EC A9 04                         LDA #$04
0C0EE 85 3D                         STA sprite_ram_pointer
0C0F0                           
0C0F0                               ;; We're on the game screen
0C0F0                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0F0 A5 35                         LDA sprites_update_position
0C0F2 F0 03                         BEQ +
0C0F4 4C DE C2                          JMP +skipSpriteMovement
0C0F7                               +
0C0F7                           
0C0F7                               ;; Check if ball is frozen
0C0F7 A5 37                         LDA ball_flags
0C0F9 29 04                         AND #BALL_IS_FROZEN
0C0FB F0 03                         BEQ +
0C0FD 4C 9D C2                          JMP +skipBallMovement
0C100                               +
0C100                           
0C100                               ;; Move the ball
0C100                               .include "game/include/main/move_ball.asm"
0C100                           
0C100                               ;; Check if ball goes up or down
0C100 A5 37                         LDA ball_flags
0C102 29 10                         AND #BALL_MOVES_DOWN
0C104 F0 2B                         BEQ +moveBallUp
0C106                           
0C106                           
0C106                           +moveBallDown:
0C106                               ;; update the low byte
0C106 A5 1A                         LDA ball_ypos_lo
0C108 85 1C                         STA ball_ypos_lo_prev
0C10A 18                            CLC
0C10B 69 88                         ADC #BALL_SPEED_LO
0C10D 85 1A                         STA ball_ypos_lo
0C10F                           
0C10F                               ;; update the high byte with carry
0C10F A5 19                         LDA ball_ypos_hi
0C111 85 1B                         STA ball_ypos_hi_prev
0C113 69 01                         ADC #BALL_SPEED_HI
0C115 85 19                         STA ball_ypos_hi
0C117                               
0C117                               ;; Check bottom bound
0C117 C9 C8                         CMP #BOUND_BOTTOM
0C119 90 3C                         BCC +checkHorizontalMovement
0C11B F0 3A                         BEQ +checkHorizontalMovement
0C11D                           
0C11D                           
0C11D                               ;; Change ball direction to "up"
0C11D A9 C8                         LDA #BOUND_BOTTOM
0C11F 38                            SEC
0C120 E9 01                         SBC #$01
0C122 85 19                         STA ball_ypos_hi
0C124 A9 00                         LDA #$00
0C126 85 1A                         STA ball_ypos_lo
0C128 A5 37                         LDA ball_flags
0C12A 29 EF                         AND #MOVE_BALL_UP
0C12C 85 37                         STA ball_flags
0C12E 4C 57 C1                      JMP +checkHorizontalMovement
0C131                           
0C131                           
0C131                           +moveBallUp:
0C131                               ;; update the low byte
0C131 A5 1A                         LDA ball_ypos_lo
0C133 85 1C                         STA ball_ypos_lo_prev
0C135 38                            SEC
0C136 E9 88                         SBC #BALL_SPEED_LO
0C138 85 1A                         STA ball_ypos_lo
0C13A                           
0C13A                               ;; update the high byte with carry
0C13A A5 19                         LDA ball_ypos_hi
0C13C 85 1B                         STA ball_ypos_hi_prev
0C13E E9 01                         SBC #BALL_SPEED_HI
0C140 85 19                         STA ball_ypos_hi
0C142                               
0C142                               ;; Check top bound
0C142 C9 30                         CMP #BOUND_TOP
0C144 B0 11                         BCS +checkHorizontalMovement
0C146                           
0C146                               ;; Change ball direction to "down"
0C146 A9 30                         LDA #BOUND_TOP
0C148 18                            CLC
0C149 69 01                         ADC #$01
0C14B 85 19                         STA ball_ypos_hi
0C14D A9 00                         LDA #$00
0C14F 85 1A                         STA ball_ypos_lo
0C151 A5 37                         LDA ball_flags
0C153 09 10                         ORA #MOVE_BALL_DOWN
0C155 85 37                         STA ball_flags
0C157                           
0C157                           
0C157                           +checkHorizontalMovement:
0C157                           
0C157                               ;; Check if ball is being nudged
0C157 A5 3E                         LDA nudge_timer
0C159 D0 41                         BNE +doneBallMovement
0C15B                           
0C15B                               ;; Check if left button is held
0C15B A5 0F                         LDA buttons_held
0C15D 29 02                         AND #BUTTON_LEFT
0C15F F0 1B                         BEQ +
0C161                                   ;; update the low byte
0C161 A5 18                             LDA ball_xpos_lo
0C163 38                                SEC
0C164 E9 88                             SBC #BALL_SPEED_LO
0C166 85 18                             STA ball_xpos_lo
0C168                           
0C168                                   ;; update the high byte
0C168 A5 17                             LDA ball_xpos_hi
0C16A E9 01                             SBC #BALL_SPEED_HI
0C16C 85 17                             STA ball_xpos_hi
0C16E                                   
0C16E                                   ;; Check left bound
0C16E C9 10                             CMP #BOUND_LEFT
0C170 B0 2A                             BCS +doneBallMovement
0C172                                   
0C172                                   ;; Set flag to nudge right and set nudge timer
0C172 A5 37                             LDA ball_flags
0C174 09 02                             ORA #NUDGE_BALL_RIGHT
0C176 20 4A CA                          JSR sub_InitiateNudge
0C179                           
0C179 4C 9C C1                          JMP +doneBallMovement        
0C17C                               +
0C17C                           
0C17C                               ;; Check if right button is held
0C17C A5 0F                         LDA buttons_held
0C17E 29 01                         AND #BUTTON_RIGHT
0C180 F0 1A                         BEQ +
0C182                                   ;; update the low byte
0C182 A5 18                             LDA ball_xpos_lo
0C184 18                                CLC
0C185 69 88                             ADC #BALL_SPEED_LO
0C187 85 18                             STA ball_xpos_lo
0C189                           
0C189                                   ;; update the high byte
0C189 A5 17                             LDA ball_xpos_hi
0C18B 69 01                             ADC #BALL_SPEED_HI
0C18D 85 17                             STA ball_xpos_hi     
0C18F                           
0C18F                                  ;; Check right bound
0C18F C9 E8                             CMP #BOUND_RIGHT
0C191 90 09                             BCC +doneBallMovement
0C193 F0 07                             BEQ +doneBallMovement
0C195                                   
0C195                                   ;; Set flag to nudge left and set nudge timer
0C195 A5 37                             LDA ball_flags
0C197 29 FD                             AND #NUDGE_BALL_LEFT
0C199 20 4A CA                          JSR sub_InitiateNudge
0C19C                               +
0C19C                           
0C19C                           
0C19C                           +doneBallMovement:
0C19C                           
0C19C                               ;; Check nudge
0C19C A5 3E                         LDA nudge_timer
0C19E F0 23                         BEQ +doneBallNudging
0C1A0 A5 37                             LDA ball_flags
0C1A2 29 02                             AND #NUDGE_BALL_RIGHT
0C1A4 F0 10                             BEQ +nudgeBallLeft
0C1A6                                   
0C1A6                                       ;; update the low byte
0C1A6 A5 18                                 LDA ball_xpos_lo
0C1A8 18                                    CLC
0C1A9 69 88                                 ADC #BALL_SPEED_LO
0C1AB 85 18                                 STA ball_xpos_lo
0C1AD                           
0C1AD                                       ;; update the high byte
0C1AD A5 17                                 LDA ball_xpos_hi
0C1AF 69 01                                 ADC #BALL_SPEED_HI
0C1B1 85 17                                 STA ball_xpos_hi  
0C1B3 4C C3 C1                              JMP +doneBallNudging
0C1B6                                   +nudgeBallLeft:
0C1B6                                   
0C1B6                                   ;; update the low byte
0C1B6 A5 18                             LDA ball_xpos_lo
0C1B8 38                                SEC
0C1B9 E9 88                             SBC #BALL_SPEED_LO
0C1BB 85 18                             STA ball_xpos_lo
0C1BD                           
0C1BD                                   ;; update the high byte
0C1BD A5 17                             LDA ball_xpos_hi
0C1BF E9 01                             SBC #BALL_SPEED_HI
0C1C1 85 17                             STA ball_xpos_hi
0C1C3                               +doneBallNudging:
0C1C3                           
0C1C3                               ;; Don't update position again until next frame
0C1C3                               ;; (moved to after move block routine)
0C1C3                           
0C1C3                           +doneBallHandling:
0C1C3                           
0C1C3                               
0C1C3                               ;; Do collision detection
0C1C3                               .include "game/include/main/collision_detection.asm"
0C1C3                           
0C1C3                               ;; Get ball's x-left, x-center, x-right position
0C1C3 A5 17                         LDA ball_xpos_hi
0C1C5 18                            CLC
0C1C6 69 F0                         ADC #BALL_LEFT_WGA
0C1C8 85 2F                         STA ball_left
0C1CA 18                            CLC
0C1CB 69 04                         ADC #BALL_HALF_SIZE
0C1CD 85 30                         STA ball_center
0C1CF 18                            CLC
0C1D0 69 04                         ADC #BALL_HALF_SIZE
0C1D2 85 31                         STA ball_right
0C1D4                           
0C1D4                               ;; Get ball's y-top, y-middle, y-bottom position
0C1D4 A5 19                         LDA ball_ypos_hi
0C1D6 18                            CLC
0C1D7 69 D0                         ADC #BALL_TOP_WGA
0C1D9 85 32                         STA ball_top
0C1DB 18                            CLC
0C1DC 69 04                         ADC #BALL_HALF_SIZE
0C1DE 85 33                         STA ball_middle
0C1E0 18                            CLC
0C1E1 69 04                         ADC #BALL_HALF_SIZE
0C1E3 85 34                         STA ball_bottom
0C1E5                           
0C1E5                           +checkRightCollision:
0C1E5                               ;; Check if ball moves right
0C1E5                               ;; No need to check nudging here as that will never collide with a tile
0C1E5 A5 0F                         LDA buttons_held
0C1E7 29 01                         AND #BUTTON_RIGHT
0C1E9 F0 20                         BEQ +checkLeftCollision
0C1EB                           
0C1EB                               ;; Check tile at right position
0C1EB A5 33                         LDA ball_middle
0C1ED 85 00                         STA temp
0C1EF A5 31                         LDA ball_right
0C1F1 85 01                         STA temp+1
0C1F3 20 E4 C6                      JSR sub_ConvertXYToTileType
0C1F6 29 01                         AND #TILE_IS_SOLID
0C1F8 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1FA                           
0C1FA                               ;; Nudge ball and evaluate tile type
0C1FA A9 01                         LDA #$01
0C1FC 85 36                         STA move_block_space_to_check
0C1FE A5 37                         LDA ball_flags
0C200 29 FD                         AND #NUDGE_BALL_LEFT
0C202 20 4A CA                      JSR sub_InitiateNudge
0C205 20 72 C8                      JSR sub_EvaluateTileType
0C208 4C 2E C2                      JMP +checkTopCollision
0C20B                           
0C20B                           +checkLeftCollision:
0C20B                               ;; Check if ball moves right
0C20B                               ;; No need to check nudging here as that will never collide with a tile
0C20B A5 0F                         LDA buttons_held
0C20D 29 02                         AND #BUTTON_LEFT
0C20F F0 1D                         BEQ +checkTopCollision
0C211                           
0C211                               ;; Check tile at right position
0C211 A5 33                         LDA ball_middle
0C213 85 00                         STA temp
0C215 A5 2F                         LDA ball_left
0C217 85 01                         STA temp+1
0C219 20 E4 C6                      JSR sub_ConvertXYToTileType
0C21C 29 01                         AND #TILE_IS_SOLID
0C21E F0 0E                         BEQ +checkTopCollision
0C220                           
0C220                               ;; Tile is solid; nudge ball and evaluate tile type
0C220 A9 FF                         LDA #$FF
0C222 85 36                         STA move_block_space_to_check
0C224 A5 37                         LDA ball_flags
0C226 09 02                         ORA #NUDGE_BALL_RIGHT
0C228 20 4A CA                      JSR sub_InitiateNudge
0C22B 20 72 C8                      JSR sub_EvaluateTileType
0C22E                               
0C22E                               
0C22E                           +checkTopCollision:
0C22E                               ;; Check if ball moves up
0C22E A5 37                         LDA ball_flags
0C230 29 10                         AND #BALL_MOVES_DOWN
0C232 D0 27                         BNE +checkBottomCollision
0C234                           
0C234                               ;; Check tile at top position
0C234 A5 32                         LDA ball_top
0C236 85 00                         STA temp
0C238 A5 30                         LDA ball_center
0C23A 85 01                         STA temp+1
0C23C 20 E4 C6                      JSR sub_ConvertXYToTileType
0C23F 29 01                         AND #TILE_IS_SOLID
0C241 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C243                           
0C243                               ;; Tile is solid; move ball down and evaluate tile type
0C243 A5 1C                         LDA ball_ypos_lo_prev
0C245 85 1A                         STA ball_ypos_lo
0C247 A5 1B                         LDA ball_ypos_hi_prev
0C249 85 19                         STA ball_ypos_hi
0C24B A5 37                         LDA ball_flags
0C24D 09 10                         ORA #MOVE_BALL_DOWN
0C24F 85 37                         STA ball_flags
0C251                           
0C251 A9 F0                         LDA #$F0 ; which is -16
0C253 85 36                         STA move_block_space_to_check
0C255 20 72 C8                      JSR sub_EvaluateTileType
0C258 4C 7F C2                      JMP +doneCheckingCollision
0C25B                           
0C25B                           +checkBottomCollision:
0C25B                               ;; No movement check needed: since ball is not moving up, it must move down
0C25B                           
0C25B                               ;; Check tile at bottom position
0C25B A5 34                         LDA ball_bottom
0C25D 85 00                         STA temp
0C25F A5 30                         LDA ball_center
0C261 85 01                         STA temp+1
0C263 20 E4 C6                      JSR sub_ConvertXYToTileType
0C266 29 01                         AND #TILE_IS_SOLID
0C268 F0 15                         BEQ +doneCheckingCollision
0C26A                           
0C26A                               ;; Tile is solid; move ball up and evaluate tile type
0C26A A5 1C                         LDA ball_ypos_lo_prev
0C26C 85 1A                         STA ball_ypos_lo
0C26E A5 1B                         LDA ball_ypos_hi_prev
0C270 85 19                         STA ball_ypos_hi
0C272 A5 37                         LDA ball_flags
0C274 29 EF                         AND #MOVE_BALL_UP
0C276 85 37                         STA ball_flags
0C278                           
0C278 A9 10                         LDA #$10
0C27A 85 36                         STA move_block_space_to_check
0C27C 20 72 C8                      JSR sub_EvaluateTileType
0C27F                           
0C27F                           +doneCheckingCollision:
0C27F                           
0C27F                               
0C27F                               ;; Update bonus
0C27F                               .include "game/include/main/update_bonus.asm"
0C27F                           
0C27F                           ;; Update the bonus counter on screen
0C27F                           
0C27F                               ;; If bonus = 000, skip decreasing
0C27F A5 2C                         LDA ball_bonus
0C281 05 2D                         ORA ball_bonus+1
0C283 05 2E                         ORA ball_bonus+2
0C285 F0 0D                         BEQ +done
0C287                           
0C287                               ;; Check if bonus timer is done yet
0C287 A5 3F                         LDA bonus_timer
0C289 D0 09                         BNE +done
0C28B                           
0C28B                               ;; Bonus timer is done
0C28B                               ;; Reset bonus timer
0C28B A9 08                         LDA #BONUS_FRAMES
0C28D 85 3F                         STA bonus_timer
0C28F                               
0C28F                               ;; Subtract one from ball bonus ones
0C28F A2 01                         LDX #$01
0C291 20 01 D1                      JSR sub_SubtractXFromBonus
0C294                           
0C294                           +done:
0C294                           
0C294                           
0C294                               ;; Check if self-destruct
0C294 A5 10                         LDA buttons_pressed
0C296 29 20                         AND #BUTTON_SELECT
0C298 F0 03                         BEQ +
0C29A 20 0B C9                          JSR sub_Selfdestruct
0C29D                               +
0C29D                           
0C29D                           
0C29D                           +skipBallMovement:
0C29D                               ;; Move blocks a pixel up/down/left/right
0C29D                               .include "game/include/main/move_blocks.asm"
0C29D                           
0C29D                               ;; Set up block loop
0C29D A2 04                         LDX #MAX_ANIMATIONS
0C29F                           -moveBlocksLoop:
0C29F CA                            DEX
0C2A0                           
0C2A0                               ;; Check if block is still moving
0C2A0 BD 80 03                      LDA move_block_timer,x
0C2A3 F0 33                         BEQ +checkNext
0C2A5                               
0C2A5                               ;; Check if block is done moving
0C2A5 C9 01                         CMP #$01
0C2A7 D0 0B                         BNE +
0C2A9                                   ;; If so, draw a tile and remove the sprite
0C2A9 20 3D C7                          JSR sub_DrawMoveTile
0C2AC A9 00                             LDA #$00
0C2AE 9D 80 03                          STA move_block_timer,x
0C2B1 4C D8 C2                          JMP +checkNext
0C2B4                               +
0C2B4                               
0C2B4                               ;; Check in which direction the block is moving
0C2B4                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2B4 BD 88 03                      LDA move_block_flags,x
0C2B7 29 03                         AND #%00000011
0C2B9 F0 14                         BEQ +movingDown
0C2BB C9 01                         CMP #$01
0C2BD F0 0A                         BEQ +movingUp
0C2BF C9 02                         CMP #$02
0C2C1 F0 12                         BEQ +movingRight
0C2C3                               
0C2C3                               ;; Move block in correct direction
0C2C3                               +movingLeft:
0C2C3 DE 78 03                      DEC move_block_x,x
0C2C6 4C D8 C2                      JMP +checkNext
0C2C9                           
0C2C9                               +movingUp:
0C2C9 DE 7C 03                      DEC move_block_y,x
0C2CC 4C D8 C2                      JMP +checkNext
0C2CF                           
0C2CF                               +movingDown:
0C2CF FE 7C 03                      INC move_block_y,x
0C2D2 4C D8 C2                      JMP +checkNext
0C2D5                           
0C2D5                               +movingRight:
0C2D5 FE 78 03                      INC move_block_x,x
0C2D8                           
0C2D8                               ;; Check next block (if any left)
0C2D8                               +checkNext:
0C2D8 E0 00                         CPX #$00
0C2DA D0 C3                         BNE -moveBlocksLoop
0C2DC                               
0C2DC                               ;; Don't update sprites
0C2DC E6 35                         INC sprites_update_position
0C2DE                           
0C2DE                           
0C2DE                           +skipSpriteMovement:
0C2DE                               ;; Testing timed PPU scroll concept (disabled)
0C2DE                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2DE                           
0C2DE                               ;; Check if ball is dead
0C2DE A5 37                         LDA ball_flags
0C2E0 29 01                         AND #BALL_IS_DEAD
0C2E2 F0 03                         BEQ +
0C2E4 4C 06 C3                          JMP +ballIsDead
0C2E7                               +
0C2E7                               
0C2E7                               ;; Add ball to sprite buffer
0C2E7 A6 3D                         LDX sprite_ram_pointer
0C2E9 A5 19                         LDA ball_ypos_hi
0C2EB 9D 00 02                      STA ADDR_SPRITERAM,x
0C2EE E8                            INX
0C2EF A9 01                         LDA #BALL_TILE_CHR
0C2F1 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F4 E8                            INX
0C2F5 A9 00                         LDA #BALL_ATTR
0C2F7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2FA E8                            INX
0C2FB A5 17                         LDA ball_xpos_hi
0C2FD 9D 00 02                      STA ADDR_SPRITERAM,x
0C300 E8                            INX
0C301 86 3D                         STX sprite_ram_pointer
0C303 4C 17 C3                      JMP +drawBlocks
0C306                           
0C306                           +ballIsDead:
0C306                               ;; Check if kill timer has reset
0C306 A5 40                         LDA kill_timer
0C308 F0 03                         BEQ +
0C30A 4C 17 C3                          JMP +drawBlocks
0C30D                               +
0C30D                               
0C30D                               ;; Take a live
0C30D C6 1F                         DEC ball_lives
0C30F D0 03                         BNE +
0C311                                   ;; If no lives left, initiate game over sequence
0C311 4C CA C3                          JMP lbl_GameOver
0C314                               +
0C314                               
0C314                               ;; Reload current level
0C314 4C 10 C5                      JMP lbl_InitiateLevelLoad
0C317                           
0C317                           
0C317                           +drawBlocks:
0C317                               ;; Draw moving block(s, if any)
0C317                               .include "game/include/main/draw_blocks.asm"
0C317                           
0C317                           ;; Handle movement of move blocks
0C317                           
0C317                               ;; Set up a loop
0C317 A0 04                         LDY #MAX_ANIMATIONS
0C319                           -drawBlocksLoop:
0C319 88                            DEY
0C31A                           
0C31A                               ;; If timer is zero, check the next move block
0C31A B9 80 03                      LDA move_block_timer,y
0C31D F0 52                         BEQ +nextMoveBlock
0C31F                               
0C31F                               ;; Get current sprite pointer
0C31F A6 3D                         LDX sprite_ram_pointer
0C321                           
0C321                               ;; Draw the sprites on screen
0C321 B9 7C 03                      LDA move_block_y,y
0C324 9D 00 02                      STA ADDR_SPRITERAM,x
0C327 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C32A 18                            CLC
0C32B 69 08                         ADC #$08
0C32D 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C330 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C333 E8                            INX
0C334                           
0C334 A9 52                         LDA #$52 ; Top left chr id
0C336 9D 00 02                      STA ADDR_SPRITERAM,x
0C339 A9 53                         LDA #$53 ; Top right chr id
0C33B 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C33E A9 62                         LDA #$62 ; Bottom left chr id
0C340 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C343 A9 63                         LDA #$63 ; Bottom right chr id
0C345 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C348 E8                            INX
0C349                           
0C349 A9 00                         LDA #BALL_ATTR
0C34B 9D 00 02                      STA ADDR_SPRITERAM,x
0C34E 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C351 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C354 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C357 E8                            INX
0C358                           
0C358 B9 78 03                      LDA move_block_x,y
0C35B 9D 00 02                      STA ADDR_SPRITERAM,x
0C35E 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C361 18                            CLC
0C362 69 08                         ADC #$08
0C364 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C367 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C36A                           
0C36A                               ;; Update sprite RAM pointer
0C36A A5 3D                         LDA sprite_ram_pointer
0C36C 18                            CLC
0C36D 69 10                         ADC #$10
0C36F 85 3D                         STA sprite_ram_pointer
0C371                           
0C371                           
0C371                           
0C371                           +nextMoveBlock:
0C371                               ;; Check the next move block
0C371 C0 00                         CPY #$00
0C373 D0 A4                         BNE -drawBlocksLoop
0C375                           
0C375 4C C4 C3                      JMP +doneScreenLoad
0C378                           
0C378                           
0C378                           
0C378                           +checkNextScreen:
0C378                           
0C378                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C378                               ;; Upon pressing START, the selected level will start
0C378                               .include "game/include/main/select_level.asm"
0C378                           
0C378                               ;; Change level number on start screen
0C378 A5 10                         LDA buttons_pressed
0C37A 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C37C F0 3C                         BEQ +checkStartPress
0C37E                           
0C37E                                   ;; Select next level (1, 5, 9, 13, 17)
0C37E A5 42                             LDA current_level
0C380 18                                CLC
0C381 69 04                             ADC #$04
0C383 C9 14                             CMP #$14
0C385 D0 02                             BNE +
0C387 A9 00                                 LDA #$00
0C389                                   +
0C389 85 42                             STA current_level
0C38B                                   
0C38B                                   ;; Convert level number to two-byte value
0C38B A9 00                             LDA #$00
0C38D 85 03                             STA temp+3
0C38F A5 42                             LDA current_level
0C391 18                                CLC
0C392 69 01                             ADC #$01
0C394                           
0C394                               -
0C394 C9 0A                             CMP #$0A
0C396 90 08                             BCC +
0C398 E6 03                                 INC temp+3
0C39A 38                                    SEC
0C39B E9 0A                                 SBC #$0A
0C39D 4C 94 C3                              JMP -
0C3A0                                   +
0C3A0                           
0C3A0                                   ;; Add level number to PPU buffer
0C3A0 18                                CLC
0C3A1 69 01                             ADC #$01
0C3A3 85 02                             STA temp+2
0C3A5 A9 20                             LDA #$20
0C3A7 85 00                             STA temp
0C3A9 A9 D0                             LDA #$D0
0C3AB 85 01                             STA temp+1
0C3AD 20 66 D1                          JSR sub_WriteByteToPPUBuffer
0C3B0                                   
0C3B0 C6 01                             DEC temp+1
0C3B2 A4 03                             LDY temp+3
0C3B4 C8                                INY
0C3B5 84 02                             STY temp+2
0C3B7 20 66 D1                          JSR sub_WriteByteToPPUBuffer
0C3BA                                   
0C3BA                               +checkStartPress:
0C3BA                           
0C3BA                           
0C3BA                           
0C3BA                               ;; If START button is pressed
0C3BA A5 10                         LDA buttons_pressed
0C3BC 29 10                         AND #BUTTON_START
0C3BE F0 04                         BEQ +
0C3C0                                   ;; Start the level
0C3C0 A9 81                             LDA #LOAD_GAME_SCREEN
0C3C2 85 38                             STA screen_mode
0C3C4                               +
0C3C4                           
0C3C4                           
0C3C4                           
0C3C4                           +doneScreenLoad:
0C3C4                           
0C3C4                               ;; Load animations (if any)
0C3C4                               ;; and sprite clean-up
0C3C4 20 54 CA                      JSR sub_LoadAnimations
0C3C7                           
0C3C7 4C 8D C0                      JMP lbl_MainGameLoop
0C3CA                           
0C3CA                           ;; Following sequences are outside main game loop
0C3CA                           .include "game/include/main/game_over.asm"
0C3CA                           
0C3CA                           ;; Game over sequence
0C3CA                           lbl_GameOver:
0C3CA                           
0C3CA                               ;; Disable noise channel
0C3CA A9 00                         LDA #$00
0C3CC 8D 15 40                      STA APU_STATUS
0C3CF 8D 0C 40                      STA NOISE_VOLUME
0C3D2                               
0C3D2                               ;; Do blinds effect
0C3D2 20 D2 C5                      JSR sub_BlindsEffect
0C3D5                           
0C3D5                               ;; Disable draw after HUD to disable screen
0C3D5 20 57 C5                      JSR sub_WaitForNMI
0C3D8                               -
0C3D8 AD 02 20                          LDA PPU_STATUS
0C3DB 29 40                             AND #SPRITE_0_HIT
0C3DD D0 F9                         BNE -
0C3DF                               -
0C3DF AD 02 20                          LDA PPU_STATUS
0C3E2 29 40                             AND #SPRITE_0_HIT
0C3E4 F0 F9                         BEQ -
0C3E6 20 53 D1                      JSR sub_Waste6
0C3E9 20 56 D1                      JSR sub_Waste5
0C3EC 20 59 D1                      JSR sub_Waste4
0C3EF 20 5C D1                      JSR sub_Waste3
0C3F2 20 62 D1                      JSR sub_Waste1
0C3F5 20 65 D1                      JSR sub_Waste0
0C3F8 A9 00                         LDA #$00
0C3FA 8D 01 20                      STA PPU_MASK
0C3FD                               
0C3FD                               ;; Remove game area from view
0C3FD 2C 02 20                      BIT PPU_STATUS
0C400 A9 20                         LDA #$20
0C402 8D 06 20                      STA PPU_ADDR
0C405 A9 A0                         LDA #$A0
0C407 8D 06 20                      STA PPU_ADDR
0C40A A9 00                         LDA #$00
0C40C A2 16                         LDX #$16
0C40E                               -xLoop:
0C40E A0 20                             LDY #$20
0C410                                   -yLoop:
0C410 8D 07 20                              STA PPU_DATA
0C413 88                                    DEY
0C414 D0 FA                             BNE -yLoop
0C416 CA                                DEX
0C417 D0 F5                         BNE -xLoop
0C419                               
0C419                               ;; Set lives to 0
0C419 2C 02 20                      BIT PPU_STATUS
0C41C A9 20                         LDA #$20
0C41E 8D 06 20                      STA PPU_ADDR
0C421 A9 92                         LDA #$92
0C423 8D 06 20                      STA PPU_ADDR
0C426 A9 01                         LDA #$01
0C428 8D 07 20                      STA PPU_DATA
0C42B                               
0C42B                               ;; Reset scroll
0C42B A9 00                         LDA #$00
0C42D 8D 05 20                      STA PPU_SCROLL
0C430 8D 05 20                      STA PPU_SCROLL
0C433 20 57 C5                      JSR sub_WaitForNMI
0C436                           
0C436                               ;; Pause for a little while
0C436 A2 18                         LDX #$18
0C438                               -
0C438 20 57 C5                          JSR sub_WaitForNMI
0C43B CA                                DEX
0C43C D0 FA                         BNE -
0C43E                                       
0C43E                               ;; Do flash effect
0C43E 20 EB C9                      JSR sub_FlashEffect
0C441                           
0C441                               ;; Draw GAME OVER tiles over game screen
0C441 A9 21                         LDA #$21
0C443 85 00                         STA temp
0C445 A9 EB                         LDA #$EB
0C447 85 01                         STA temp+1
0C449                           
0C449 A2 00                         LDX #$00
0C44B                               -gameOverTileLoop:
0C44B BD 8E DA                          LDA tbl_GameOver,x
0C44E 85 02                             STA temp+2
0C450 20 66 D1                          JSR sub_WriteByteToPPUBuffer
0C453 E6 01                             INC temp+1
0C455 E8                                INX
0C456 E0 0A                             CPX #$0A
0C458 D0 F1                         BNE -gameOverTileLoop
0C45A                               
0C45A                               ;; Update GAME OVER attributes on game screen
0C45A A9 23                         LDA #$23
0C45C 85 00                         STA temp
0C45E A9 DA                         LDA #$DA
0C460 85 01                         STA temp+1
0C462 A9 AA                         LDA #$AA
0C464 85 02                         STA temp+2
0C466 A2 04                         LDX #$04
0C468                               -
0C468 20 66 D1                          JSR sub_WriteByteToPPUBuffer
0C46B E6 01                             INC temp+1
0C46D CA                                DEX
0C46E D0 F8                         BNE -
0C470 20 57 C5                      JSR sub_WaitForNMI
0C473                               
0C473                              
0C473                               ;; If player score is larger than high score
0C473                               ;; Overwrite high score with player score
0C473                               ;; [@TODO]
0C473                               
0C473                               
0C473                               ;; If player presses either A or START, (soft) reset the game
0C473                               -checkController:
0C473 20 43 C5                          JSR sub_ReadController
0C476 A5 0F                             LDA buttons_held
0C478 29 90                             AND #%10010000
0C47A F0 F7                         BEQ -checkController
0C47C 4C 4B C0                      JMP lbl_SoftReset
0C47F                           
0C47F                           .include "game/include/main/level_win.asm"
0C47F                           
0C47F                           ;; Handling of level win state
0C47F                           lbl_LevelWin:
0C47F                           
0C47F                               ;; Freeze the ball
0C47F A5 37                         LDA ball_flags
0C481 09 04                         ORA #FREEZE_BALL
0C483 85 37                         STA ball_flags
0C485                           
0C485                               ;; Disable noise channel
0C485 A9 01                         LDA #$01
0C487 85 4B                         STA noise_muted
0C489                               
0C489                               ;; Wait a few frames
0C489 A2 18                         LDX #$18
0C48B 20 3E D1                      JSR sub_WaitXFrames
0C48E                           
0C48E                               ;; Set null tile color to yellow
0C48E A9 3F                         LDA #$3F
0C490 85 00                         STA temp
0C492 A9 02                         LDA #$02
0C494 85 01                         STA temp+1
0C496 A9 38                         LDA #$38
0C498 85 02                         STA temp+2
0C49A 20 66 D1                      JSR sub_WriteByteToPPUBuffer
0C49D                               
0C49D                               ;; Quick and dirty way to remove ball from screen
0C49D A9 EF                         LDA #$EF
0C49F 8D 04 02                      STA ADDR_SPRITERAM+4
0C4A2 8D 05 02                      STA ADDR_SPRITERAM+5
0C4A5 8D 06 02                      STA ADDR_SPRITERAM+6
0C4A8 8D 07 02                      STA ADDR_SPRITERAM+7
0C4AB                               
0C4AB                               ;; Initiate frequency beeps (@TODO)
0C4AB                               
0C4AB                               ;; Wait a few frames
0C4AB A2 10                         LDX #$10
0C4AD 20 3E D1                      JSR sub_WaitXFrames
0C4B0                               
0C4B0                               ;; Restore null tile color to dark blue
0C4B0 A9 3F                         LDA #$3F
0C4B2 85 00                         STA temp
0C4B4 A9 02                         LDA #$02
0C4B6 85 01                         STA temp+1
0C4B8 A9 12                         LDA #$12
0C4BA 85 02                         STA temp+2
0C4BC 20 66 D1                      JSR sub_WriteByteToPPUBuffer
0C4BF                           
0C4BF                               ;; Wait a few frames
0C4BF A2 2D                         LDX #$2D
0C4C1 20 3E D1                      JSR sub_WaitXFrames
0C4C4                               
0C4C4                           
0C4C4                               ;; Play the end level sweep sound effect, and
0C4C4                               ;; initiate bonus score routine
0C4C4 A9 B8                         LDA #$B8
0C4C6 85 4A                         STA soft_pulse1
0C4C8                           
0C4C8 A9 01                         LDA #$01
0C4CA 8D 15 40                      STA APU_STATUS
0C4CD 85 49                         STA do_beeps
0C4CF                           
0C4CF                               -bonusPointsLoop:
0C4CF                                   ;; Check how many bonus points to subtract
0C4CF                                   ;; (either the max, or what's left)
0C4CF A5 2C                             LDA ball_bonus
0C4D1 05 2D                             ORA ball_bonus+1
0C4D3 D0 06                             BNE +fullBonus
0C4D5 A5 2E                             LDA ball_bonus+2
0C4D7 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C4D9 90 02                             BCC +partBonus
0C4DB                           
0C4DB                                   +fullBonus:
0C4DB A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C4DD                                   +partBonus:
0C4DD                           
0C4DD                                   ;; Put value that's added to score on the stack
0C4DD AA                                TAX
0C4DE BD 35 DB                          LDA tbl_BonusToScore,x
0C4E1 48                                PHA
0C4E2                           
0C4E2                                   ;; Subtract X-register from bonus
0C4E2 20 01 D1                          JSR sub_SubtractXFromBonus
0C4E5                           
0C4E5                                   ;; Get value from stack and add it to the score
0C4E5 68                                PLA
0C4E6 20 66 C5                          JSR sub_AddAccumulatorToScore
0C4E9                           
0C4E9                                   ;; Wait for NMI twice
0C4E9 20 57 C5                          JSR sub_WaitForNMI
0C4EC 20 57 C5                          JSR sub_WaitForNMI
0C4EF                           
0C4EF                                   ;; Check if bonus countdown is done
0C4EF A5 2C                             LDA ball_bonus
0C4F1 05 2D                             ORA ball_bonus+1
0C4F3 05 2E                             ORA ball_bonus+2
0C4F5 D0 D8                         BNE -bonusPointsLoop
0C4F7                           
0C4F7                               ;; fade out the beeping
0C4F7 A2 08                         LDX #$08
0C4F9                               -fadeOutLoop:
0C4F9 20 57 C5                          JSR sub_WaitForNMI
0C4FC 20 57 C5                          JSR sub_WaitForNMI
0C4FF C6 4A                             DEC soft_pulse1
0C501 CA                                DEX
0C502 D0 F5                         BNE -fadeOutLoop
0C504                           
0C504                               ;; Stop random beeping
0C504 A9 02                         LDA #$02
0C506 85 49                         STA do_beeps
0C508                               
0C508                               ;; Wait a few frames
0C508 A2 30                         LDX #$30
0C50A 20 3E D1                      JSR sub_WaitXFrames
0C50D                           
0C50D                               ;; Load next level
0C50D 4C 10 C5                      JMP lbl_InitiateLevelLoad
0C510                               
0C510                           .include "game/include/main/initiate_level_load.asm"
0C510                           
0C510                           ;; Load level
0C510                           lbl_InitiateLevelLoad:
0C510                               
0C510                               ;; Blind out the screen
0C510 20 D2 C5                      JSR sub_BlindsEffect
0C513                               
0C513                               ;; If ball is dead, (re)load current level
0C513                               ;; If ball is alive, load next level
0C513 A5 37                         LDA ball_flags
0C515 29 01                         AND #BALL_IS_DEAD
0C517 D0 05                         BNE +
0C519 E6 42                             INC current_level
0C51B 4C 24 C5                          JMP +loadLevel
0C51E                               +
0C51E                               
0C51E                               ;; Revive ball
0C51E A5 37                         LDA ball_flags
0C520 29 FE                         AND #REVIVE_BALL
0C522 85 37                         STA ball_flags
0C524                           
0C524                           +loadLevel:
0C524                               ;; This loops back to level 1 after level 25 for now,
0C524                               ;; as a proper game ending is yet to be introduced.
0C524 A5 42                         LDA current_level
0C526 C9 19                         CMP #25
0C528 D0 04                         BNE +
0C52A A9 00                             LDA #$00
0C52C 85 42                             STA current_level
0C52E                               +
0C52E                               
0C52E                               ;; Tell the game to load the level screen on the next loop.
0C52E A9 81                         LDA #LOAD_GAME_SCREEN
0C530 85 38                         STA screen_mode
0C532                           
0C532                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C532 4C 8D C0                      JMP lbl_MainGameLoop0C535                           
0C535                           
0C535                           ;; Subroutines
0C535                           .include "include/subroutines.asm"
0C535                           
0C535                           ;; RNG
0C535                           .include "subroutine/GetRandomNumber.asm"
0C535                           
0C535                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C535                           ;;
0C535                           ;; subroutine/GetRandomNumber.asm
0C535                           ;;
0C535                           ;; Simple and fast random number generator by White Flame.
0C535                           ;;
0C535                           ;; Set random_seed to an arbitrary number to randomize between
0C535                           ;; gaming sessions, for instance using the frame timer upon
0C535                           ;; pressing START on the intro screen.
0C535                           ;;
0C535                           ;;     ;; IF START PRESSED:
0C535                           ;;     LDA frame_counter
0C535                           ;;     STA random_seed
0C535                           ;;
0C535                           ;; Source:
0C535                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C535                           ;;
0C535                           ;;
0C535                           
0C535                           sub_GetRandomNumber:
0C535                               ;; Force EOR if random_seed is zero
0C535 A5 16                         LDA random_seed
0C537 F0 05                         BEQ +doEor
0C539                           
0C539                               ;; Shift left, and EOR if the high bit is set
0C539 0A                            ASL
0C53A F0 04                         BEQ +noEor
0C53C 90 02                         BCC +noEor
0C53E                           
0C53E                           +doEor:
0C53E 49 1D                         EOR #$1D
0C540                           
0C540                           +noEor:
0C540 85 16                         STA random_seed
0C542                           
0C542 60                            RTS
0C543                           
0C543                           
0C543                           ;; Read controller input
0C543                           .include "subroutine/ReadController.asm"
0C543                           
0C543                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C543                           ;;
0C543                           ;; subroutine/ReadController.asm
0C543                           ;;
0C543                           ;; Subroutine that polls the controller and stores the input
0C543                           ;; buttons in a variable. This version only handles controller
0C543                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C543                           ;;
0C543                           ;;
0C543                           
0C543                           sub_ReadController:
0C543                           
0C543                               ;; Set strobe bit
0C543 A9 01                         LDA #$01
0C545 8D 16 40                      STA JOYPAD_1
0C548                           
0C548                               ;; Set up ring timer
0C548 85 0F                         STA buttons_held
0C54A                           
0C54A                               ;; Clear strobe bit
0C54A 4A                            LSR
0C54B 8D 16 40                      STA JOYPAD_1
0C54E                           
0C54E                               ;; Loop through button presses
0C54E                               -
0C54E AD 16 40                          LDA JOYPAD_1
0C551 4A                                LSR
0C552 26 0F                             ROL buttons_held
0C554                           
0C554                               ;; Check if ring timer is done
0C554 90 F8                         BCC -
0C556                           
0C556                               ;; Return from subroutine
0C556 60                            RTS
0C557                           
0C557                           
0C557                           ;; vBlank/NMI wait
0C557                           .include "subroutine/WaitForNMI.asm"
0C557                           
0C557                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C557                           ;;
0C557                           ;; subroutine/WaitForVBlank.asm
0C557                           ;;
0C557                           ;; Subroutine that essentially pauses script execution until
0C557                           ;; vBlank happens.
0C557                           ;;
0C557                           ;;
0C557                           
0C557                           sub_WaitForNMI:
0C557 A9 01                         LDA #$01
0C559 85 53                         STA check_nmi
0C55B                               -
0C55B A5 53                             LDA check_nmi
0C55D D0 FC                         BNE -
0C55F 60                            RTS
0C560                           
0C560                           .include "subroutine/WaitForVBlank.asm"
0C560                           
0C560                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C560                           ;;
0C560                           ;; subroutine/WaitForVBlank.asm
0C560                           ;;
0C560                           ;; Subroutine that essentially pauses script execution until
0C560                           ;; vBlank happens.
0C560                           ;;
0C560                           ;;
0C560                           
0C560                           sub_WaitForVBlank:
0C560 2C 02 20                      BIT $2002
0C563 10 FB                         BPL sub_WaitForVBlank
0C565 60                            RTS
0C566                           
0C566                           
0C566                           ;; Game specific subroutines
0C566                           .include "game/include/subroutines.asm"
0C566                           
0C566                           ;; additional game-specific subroutines go here
0C566                           
0C566                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C566                           
0C566                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C566                           ;;
0C566                           ;;  sub_AddAccumulatorToScore.asm
0C566                           ;;
0C566                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C566                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C566                           ;;  actual score.
0C566                           ;;
0C566                           ;;
0C566                           
0C566                           
0C566                           sub_AddAccumulatorToScore:
0C566                           
0C566                               ;; Clear old add_to_score
0C566 A2 05                         LDX #$05
0C568 A0 00                         LDY #$00
0C56A                               -
0C56A 94 26                             STY add_to_score,x
0C56C CA                                DEX
0C56D 10 FB                         BPL -
0C56F                           
0C56F                               ;; Set accumulator to add_to_score variables
0C56F                               ;; Check and update 100s
0C56F                               -checkHundreds:
0C56F C9 64                             CMP #100
0C571 90 08                             BCC +checkTens
0C573 38                                    SEC
0C574 E9 64                                 SBC #100
0C576 E6 29                                 INC add_to_score+3
0C578 4C 6F C5                              JMP -checkHundreds
0C57B                                   +checkTens:
0C57B                           
0C57B                               ;; Check and update 10s
0C57B                               -checkTens:
0C57B C9 0A                             CMP #10
0C57D 90 08                             BCC +setOnes
0C57F 38                                    SEC
0C580 E9 0A                                 SBC #10
0C582 E6 2A                                 INC add_to_score+4
0C584 4C 7B C5                              JMP -checkTens
0C587                                   +setOnes:
0C587                           
0C587                               ;; We're left with 1s
0C587 85 2B                         STA add_to_score+5
0C589                           
0C589                               ;; Byte for byte, add add_to_score to ball_score
0C589 A9 00                         LDA #$00
0C58B 85 39                         STA ppu_buffer_update
0C58D A4 3A                         LDY ppu_buffer_pointer
0C58F A2 05                         LDX #$05
0C591                               -
0C591 B5 26                             LDA add_to_score,x
0C593 18                                CLC
0C594 75 20                             ADC ball_score,x
0C596 C9 0A                             CMP #10
0C598 90 05                             BCC +
0C59A 38                                    SEC
0C59B E9 0A                                 SBC #10
0C59D F6 1F                                 INC ball_score-1,x
0C59F                                   +
0C59F                                   
0C59F                                   ;; Update new score digit
0C59F 95 20                             STA ball_score,x
0C5A1                           
0C5A1                                   ;; Update score tile in PPU
0C5A1 A9 20                             LDA #$20
0C5A3 99 00 03                          STA ppu_buffer,y
0C5A6 C8                                INY
0C5A7 8A                                TXA
0C5A8 18                                CLC
0C5A9 69 83                             ADC #$83
0C5AB 99 00 03                          STA ppu_buffer,y
0C5AE C8                                INY
0C5AF B5 20                             LDA ball_score,x
0C5B1 18                                CLC
0C5B2 69 01                             ADC #$01
0C5B4 99 00 03                          STA ppu_buffer,y
0C5B7 C8                                INY
0C5B8                           
0C5B8                                   ;; Check next digit (if any left)
0C5B8 CA                                DEX
0C5B9 30 03                             BMI +done
0C5BB 4C 91 C5                      JMP -
0C5BE                           
0C5BE                           +done:
0C5BE                               ;; Update PPU buffer pointer and status
0C5BE 84 3A                         STY ppu_buffer_pointer
0C5C0 A9 01                         LDA #$01
0C5C2 85 39                         STA ppu_buffer_update
0C5C4                           
0C5C4                               ;; Done: return 
0C5C4 60                            RTS
0C5C5                           
0C5C5                           .include "game/subroutine/BackgroundNoise.asm"
0C5C5                           
0C5C5                           ;; Play background noise
0C5C5                           sub_BackgroundNoise:
0C5C5 A9 32                         LDA #$32
0C5C7 8D 0C 40                      STA NOISE_VOLUME
0C5CA A9 0E                         LDA #$0E
0C5CC 8D 0E 40                      STA NOISE_PERIOD
0C5CF 85 47                         STA current_noise
0C5D1 60                            RTS
0C5D2                           
0C5D2                           .include "game/subroutine/BlindsEffect.asm"
0C5D2                           
0C5D2                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C5D2                           sub_BlindsEffect:
0C5D2                           
0C5D2                               ;; Set up loop fading
0C5D2 A9 00                         LDA #$00
0C5D4 85 07                         STA temp+7
0C5D6 A0 08                         LDY #$08
0C5D8                               -fadeLoop:
0C5D8 84 08                             STY temp+8
0C5DA                           
0C5DA                                   ;; Wait for NMI to pass
0C5DA 20 57 C5                          JSR sub_WaitForNMI
0C5DD                                   
0C5DD                                   ;; Now wait for No-sprite 0
0C5DD                                   -
0C5DD AD 02 20                              LDA PPU_STATUS
0C5E0 29 40                                 AND #SPRITE_0_HIT
0C5E2 D0 F9                             BNE -
0C5E4                               
0C5E4                                   ;; Now wait for Sprite 0
0C5E4                                   -
0C5E4 AD 02 20                              LDA PPU_STATUS
0C5E7 29 40                                 AND #SPRITE_0_HIT
0C5E9 F0 F9                             BEQ -
0C5EB                                   
0C5EB                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C5EB 20 53 D1                          JSR sub_Waste6
0C5EE 20 56 D1                          JSR sub_Waste5
0C5F1 20 59 D1                          JSR sub_Waste4
0C5F4 20 5C D1                          JSR sub_Waste3
0C5F7 20 62 D1                          JSR sub_Waste1
0C5FA 20 65 D1                          JSR sub_Waste0
0C5FD                                   
0C5FD                                   
0C5FD                                   ;; Setup tile row loop
0C5FD A0 16                             LDY #22
0C5FF                                   -tileLoop:
0C5FF                                   
0C5FF                                       ;; Disable drawing
0C5FF A5 12                                 LDA soft_ppu_mask
0C601 29 F7                                 AND #%11110111
0C603 8D 01 20                              STA PPU_MASK
0C606                                       
0C606                                       ;; Set up scanline loop
0C606 A2 08                                 LDX #$08
0C608                                       -scanlineLoop:
0C608 E4 08                                     CPX temp+8
0C60A D0 0A                                     BNE +wasteTime
0C60C                                           
0C60C                                           ;; Restore drawing
0C60C A5 12                                     LDA soft_ppu_mask
0C60E 09 08                                     ORA #%00001000
0C610 8D 01 20                                  STA PPU_MASK
0C613 4C 1C C6                                  JMP +wasteMoreTime
0C616                           
0C616                                           ;; Waste 12 frames
0C616                                           +wasteTime:
0C616 E6 55                                     INC void     ;+5
0C618 C6 55                                     DEC void     ;+5
0C61A 49 00                                     EOR #$00     ;+2
0C61C                                           
0C61C                                           ;; Waste about a scanline worth of frames
0C61C                                           +wasteMoreTime:
0C61C 20 5F D1                                  JSR sub_Waste2
0C61F 20 65 D1                                  JSR sub_Waste0
0C622 20 65 D1                                  JSR sub_Waste0
0C625 E6 55                                     INC void
0C627 49 00                                     EOR #$00
0C629 49 00                                     EOR #$00
0C62B CA                                        DEX
0C62C D0 DA                                 BNE -scanlineLoop
0C62E C6 55                                 DEC void
0C630 49 00                                 EOR #$00
0C632 88                                    DEY
0C633 D0 CA                             BNE -tileLoop
0C635                           
0C635 A4 08                             LDY temp+8
0C637                                   
0C637 E6 07                             INC temp+7
0C639 A5 07                             LDA temp+7
0C63B C9 02                             CMP #$02
0C63D D0 99                             BNE -fadeLoop
0C63F                           
0C63F A9 00                             LDA #$00
0C641 85 07                             STA temp+7
0C643 88                                DEY
0C644 D0 92                         BNE -fadeLoop
0C646                               
0C646 60                            RTS
0C647                           
0C647                           .include "game/subroutine/ClearScreen.asm"
0C647                           
0C647                           ;; Subroutine to clear the screen
0C647                           ;; If it's a game screen, add noise
0C647                           
0C647                           sub_ClearScreen:
0C647                               ;; Check of game screen or not
0C647 A5 38                         LDA screen_mode
0C649 29 03                         AND #CHECK_SCREEN_MODE
0C64B C9 01                         CMP #IS_GAME_SCREEN
0C64D F0 02                         BEQ +
0C64F A9 00                             LDA #$00
0C651                               +
0C651 85 01                         STA temp+1
0C653                               
0C653                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C653 2C 02 20                      BIT PPU_STATUS
0C656 A9 20                         LDA #$20
0C658 8D 06 20                      STA PPU_ADDR
0C65B A9 00                         LDA #$00
0C65D 8D 06 20                      STA PPU_ADDR
0C660                               
0C660                               ;; Set up tile to draw and loop
0C660 85 00                         STA temp
0C662 AA                            TAX
0C663 A8                            TAY
0C664                           
0C664                               -     
0C664                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C664 A5 00                             LDA temp
0C666 8D 07 20                          STA PPU_DATA
0C669                           
0C669                                   ;; Check if we should draw noise next. Noise is drawn if:
0C669                                   ;; - Screen mode is game screen
0C669                                   ;; - Y between #$06 and #$19 (inclusive)
0C669                                   ;; - X between #$02 and #$1D (inclusive)
0C669                                   
0C669                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C669 A5 01                             LDA temp+1
0C66B F0 1C                             BEQ +nextTileInRow
0C66D                                   
0C66D                                   ;; If Y < $6, skip the check
0C66D C0 06                             CPY #$06
0C66F 90 18                             BCC +nextTileInRow
0C671                                   
0C671                                   ;; If X < $1, skip the check
0C671 E0 01                             CPX #$01
0C673 90 14                             BCC +nextTileInRow
0C675                                   
0C675                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C675 E0 1D                             CPX #$1D
0C677 D0 04                             BNE +
0C679 A9 00                                 LDA #$00
0C67B 85 00                                 STA temp
0C67D                                   +
0C67D B0 0A                             BCS +nextTileInRow
0C67F                                   
0C67F                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C67F 20 35 C5                          JSR sub_GetRandomNumber
0C682 29 07                             AND #%00000111
0C684 18                                CLC
0C685 69 68                             ADC #$68
0C687 85 00                             STA temp
0C689                           
0C689                           +nextTileInRow:
0C689                                   
0C689                                   ;; Check if a row has been done. If not, draw the next
0C689 E8                                INX
0C68A E0 20                             CPX #$20
0C68C D0 D6                             BNE -
0C68E                                   
0C68E                                   ;; Go to the next row (if any left)
0C68E A2 00                             LDX #00
0C690 C8                                INY
0C691                                   
0C691                                   ;; If Y is 1A, skip noise tile check until done drawing
0C691 C0 1A                             CPY #$1A
0C693 D0 04                             BNE +
0C695 A9 00                                 LDA #$00
0C697 85 01                                 STA temp+1
0C699                                   +
0C699                                   
0C699 C0 1E                             CPY #$1E
0C69B D0 C7                         BNE -
0C69D                           
0C69D                               ;; Clear attribute table
0C69D A9 23                         LDA #$23
0C69F 8D 06 20                      STA PPU_ADDR
0C6A2 A9 C0                         LDA #$C0
0C6A4 8D 06 20                      STA PPU_ADDR
0C6A7 A9 00                         LDA #$00
0C6A9 A2 40                         LDX #$40
0C6AB                               -
0C6AB 8D 07 20                          STA PPU_DATA
0C6AE CA                                DEX
0C6AF D0 FA                         BNE -
0C6B1                               
0C6B1 60                            RTS
0C6B2                           
0C6B2                           .include "game/subroutine/ColorizeBall.asm"
0C6B2                           
0C6B2                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6B2                           ;;
0C6B2                           ;;  Subroutine: ColorizeBall
0C6B2                           ;;
0C6B2                           ;;  Applies the color set through ball_flags to the ball sprite.
0C6B2                           ;;  Expects ball_flags to be in the accumulator
0C6B2                           ;;
0C6B2                           
0C6B2                           
0C6B2                           sub_ColorizeBall:
0C6B2                           
0C6B2                               ;; Get color from ball_flags
0C6B2 4A                            LSR
0C6B3 4A                            LSR
0C6B4 4A                            LSR
0C6B5 4A                            LSR
0C6B6 4A                            LSR
0C6B7 AA                            TAX
0C6B8                           
0C6B8                               ;; Add new light color of ball to PPU palette
0C6B8 A9 3F                         LDA #$3F
0C6BA 85 00                         STA temp
0C6BC A9 11                         LDA #$11
0C6BE 85 01                         STA temp+1
0C6C0 BD CA D2                      LDA tbl_BallColorLight,x
0C6C3 85 02                         STA temp+2
0C6C5 20 66 D1                      JSR sub_WriteByteToPPUBuffer
0C6C8                               
0C6C8                               ;; Add new dark color of ball to PPU palette
0C6C8 E6 01                         INC temp+1
0C6CA BD C4 D2                      LDA tbl_BallColorDark,x
0C6CD 85 02                         STA temp+2
0C6CF 20 66 D1                      JSR sub_WriteByteToPPUBuffer
0C6D2                               
0C6D2 60                            RTS
0C6D3                           
0C6D3                           .include "game/subroutine/ColorsMatch.asm"
0C6D3                           
0C6D3                           ;; Subroutine to check if ball color matches colliding tile color
0C6D3                           
0C6D3                           sub_ColorsMatch:
0C6D3                               ;; Save tile color in temp variable
0C6D3 A5 43                         LDA colliding_tile
0C6D5 29 0E                         AND #%00001110
0C6D7 85 00                         STA temp
0C6D9                           
0C6D9                               ;; Get ball color
0C6D9 A5 37                         LDA ball_flags
0C6DB 29 E0                         AND #%11100000
0C6DD 4A                            LSR
0C6DE 4A                            LSR
0C6DF 4A                            LSR
0C6E0 4A                            LSR
0C6E1                           
0C6E1                               ;; Compare with tile color
0C6E1 C5 00                         CMP temp
0C6E3 60                            RTS
0C6E4                           
0C6E4                           .include "game/subroutine/ConvertXYToTileType.asm"
0C6E4                           
0C6E4                           ;; Subroutine to convert the ball's position to a tile type
0C6E4                           ;; - Expects temp to be y-position of ball within game area
0C6E4                           ;; - Expects temp+1 to be x-position of ball within game area
0C6E4                           ;; - Puts result in accumulator and zp variable
0C6E4                           ;; - Corrupts X-register
0C6E4                           
0C6E4                           sub_ConvertXYToTileType:
0C6E4 A5 01                         LDA temp+1
0C6E6 4A                            LSR
0C6E7 4A                            LSR
0C6E8 4A                            LSR
0C6E9 4A                            LSR
0C6EA 85 09                         STA temp+9
0C6EC A5 00                         LDA temp
0C6EE 29 F0                         AND #%11110000
0C6F0 18                            CLC
0C6F1 65 09                         ADC temp+9
0C6F3 85 09                         STA temp+9
0C6F5 AA                            TAX
0C6F6 BD 00 04                      LDA tile_type, x
0C6F9 85 43                         STA colliding_tile
0C6FB 60                            RTS
0C6FC                           
0C6FC                           .include "game/subroutine/DisableEnableRendering.asm"
0C6FC                           
0C6FC                           ;; Subroutines to disable or enable screen rendering
0C6FC                           
0C6FC                           sub_DisableRendering:
0C6FC                               ;; Force NMI skip, disable rendering
0C6FC A9 01                     	LDA #$01
0C6FE 85 14                     	STA force_skip_nmi
0C700 20 60 C5                      JSR sub_WaitForVBlank
0C703 A5 12                         LDA soft_ppu_mask
0C705 29 E7                         AND #%11100111
0C707 8D 01 20                      STA PPU_MASK
0C70A 85 12                         STA soft_ppu_mask
0C70C 20 60 C5                      JSR sub_WaitForVBlank
0C70F 60                            RTS
0C710                           
0C710                           sub_EnableRendering:
0C710                               ;; Enable rendering
0C710 A9 00                     	LDA #$00
0C712 8D 05 20                  	STA PPU_SCROLL
0C715 8D 05 20                  	STA PPU_SCROLL
0C718 20 60 C5                      JSR sub_WaitForVBlank
0C71B 85 14                     	STA force_skip_nmi
0C71D A5 12                         LDA soft_ppu_mask
0C71F 09 18                         ORA #%00011000
0C721 85 12                         STA soft_ppu_mask
0C723 8D 01 20                      STA PPU_MASK
0C726 20 60 C5                      JSR sub_WaitForVBlank
0C729 60                            RTS
0C72A                           
0C72A                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C72A                           
0C72A                           ;; Draw a tile from the logo on the intro screen
0C72A                           sub_drawIntroScreenLogoTile:
0C72A B9 AC D1                      LDA tbl_IntroScreenLogoChr,y
0C72D C9 60                         CMP #$60
0C72F D0 08                         BNE +
0C731 20 35 C5                          JSR sub_GetRandomNumber
0C734 29 07                             AND #$07
0C736 18                                CLC
0C737 69 60                             ADC #$60
0C739                               +
0C739 8D 07 20                      STA PPU_DATA
0C73C 60                            RTS
0C73D                           
0C73D                           .include "game/subroutine/DrawMoveTile.asm"
0C73D                           
0C73D                           ;; Draw the move tile as follows:
0C73D                           ;;
0C73D                           ;;  1 2
0C73D                           ;;  3 4 5
0C73D                           ;;    6 7
0C73D                           ;;
0C73D                           ;; (1,2,3,4) is the move block itself
0C73D                           ;; (5,6,7) are shades unless that tile is solid
0C73D                           
0C73D                           ;; X holds the move block sprite slot
0C73D                           
0C73D                           sub_DrawMoveTile:
0C73D                           
0C73D                               ;; Get tile type index from sprite x and y values
0C73D                               ;; and store it in a temp variable
0C73D BD 78 03                      LDA move_block_x,x
0C740 18                            CLC
0C741 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C743 4A                            LSR
0C744 4A                            LSR
0C745 4A                            LSR
0C746 4A                            LSR
0C747 85 09                         STA temp+9
0C749 BD 7C 03                      LDA move_block_y,x
0C74C 18                            CLC
0C74D 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C74F 29 F0                         AND #%11110000
0C751 18                            CLC
0C752 65 09                         ADC temp+9
0C754 85 09                         STA temp+9
0C756 A8                            TAY
0C757                               
0C757                               ;; Add move tile data on the new tile location
0C757 BD 84 03                      LDA move_block_tile_type,x
0C75A 99 00 04                      STA tile_type,y
0C75D                           
0C75D                               ;; Draw the original tile type in the ppu buffer
0C75D                               ;; - get PPU address to write to (temp, temp+1)
0C75D 8A                            TXA
0C75E 48                            PHA
0C75F A6 09                         LDX temp+9
0C761 20 1B CA                      JSR sub_GetPPUAddrFromYXIndex
0C764 68                            PLA
0C765 AA                            TAX
0C766                               
0C766                               ;; - based on color, select tile 42 or 4A for top left
0C766 BD 88 03                      LDA move_block_flags,x
0C769 4A                            LSR
0C76A 4A                            LSR
0C76B 4A                            LSR
0C76C 4A                            LSR
0C76D 4A                            LSR
0C76E A8                            TAY
0C76F B9 87 DA                      LDA tbl_MoveBlockTopLeftTile,y
0C772 85 08                         STA temp+8
0C774                               
0C774                               ;; - save palette ID in temp+6
0C774 98                            TYA
0C775 4A                            LSR
0C776 85 06                         STA temp+6
0C778                               
0C778                               ;; Prepare PPU buffer
0C778 A4 3A                         LDY ppu_buffer_pointer
0C77A A9 00                         LDA #$00
0C77C 85 39                         STA ppu_buffer_update
0C77E                               
0C77E                               ;; Draw tile 1 (top left tile of move block)
0C77E 20 5F C8                      JSR sub_DrawTileTemp018
0C781                           
0C781                               
0C781                               ;; Draw tile 2 (top right tile of move block)
0C781 E6 01                         INC temp+1
0C783 E6 08                         INC temp+8
0C785 20 5F C8                      JSR sub_DrawTileTemp018
0C788                           
0C788                               ;; Draw tile 3 (bottom left tile of move block)
0C788 A5 01                         LDA temp+1
0C78A 18                            CLC
0C78B 69 1F                         ADC #$1F
0C78D 85 01                         STA temp+1
0C78F A5 00                         LDA temp
0C791 69 00                         ADC #$00
0C793 85 00                         STA temp
0C795 A5 08                         LDA temp+8
0C797 18                            CLC
0C798 69 0F                         ADC #$0F
0C79A 85 08                         STA temp+8
0C79C 20 5F C8                      JSR sub_DrawTileTemp018
0C79F                           
0C79F                               ;; Draw tile 4 (bottom right tile of move block)
0C79F E6 01                         INC temp+1
0C7A1 E6 08                         INC temp+8
0C7A3 20 5F C8                      JSR sub_DrawTileTemp018
0C7A6                           
0C7A6                               ;; Load tile type offset in X register
0C7A6 8A                            TXA
0C7A7 48                            PHA
0C7A8 A6 09                         LDX temp+9
0C7AA                               
0C7AA                               ;; Load shade tile in temp+8
0C7AA A9 00                         LDA #$00
0C7AC 85 08                         STA temp+8
0C7AE                           
0C7AE                               ;; Draw tile 5 (right shade) unless tile is solid
0C7AE E6 01                         INC temp+1
0C7B0                               
0C7B0 8A                            TXA
0C7B1 29 0F                         AND #%00001111
0C7B3 C9 0D                         CMP #$0D
0C7B5 F0 0A                         BEQ +nextTile
0C7B7                           
0C7B7 BD 01 04                      LDA tile_type+1,x
0C7BA 29 01                         AND #%00000001
0C7BC D0 03                         BNE +nextTile
0C7BE                               
0C7BE 20 5F C8                      JSR sub_DrawTileTemp018
0C7C1                               
0C7C1                           
0C7C1                           +nextTile:
0C7C1                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C7C1 A5 01                         LDA temp+1
0C7C3 18                            CLC
0C7C4 69 1F                         ADC #$1F
0C7C6 85 01                         STA temp+1
0C7C8 A5 00                         LDA temp
0C7CA 69 00                         ADC #$00
0C7CC 85 00                         STA temp
0C7CE                           
0C7CE 8A                            TXA
0C7CF 29 F0                         AND #%11110000
0C7D1 C9 90                         CMP #$90
0C7D3 F0 0A                         BEQ +nextTile
0C7D5                           
0C7D5 BD 10 04                      LDA tile_type+16,x
0C7D8 29 01                         AND #%00000001
0C7DA D0 03                         BNE +nextTile
0C7DC                               
0C7DC 20 5F C8                      JSR sub_DrawTileTemp018
0C7DF                           
0C7DF                               
0C7DF                           +nextTile:
0C7DF                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C7DF E6 01                         INC temp+1
0C7E1                           
0C7E1 8A                            TXA
0C7E2 29 F0                         AND #%11110000
0C7E4 C9 90                         CMP #$90
0C7E6 F0 11                         BEQ +setTileAttributes
0C7E8                               
0C7E8 8A                            TXA
0C7E9 29 0F                         AND #%00001111
0C7EB C9 0D                         CMP #$0D
0C7ED F0 0A                         BEQ +setTileAttributes
0C7EF                               
0C7EF BD 11 04                      LDA tile_type+17,x
0C7F2 29 01                         AND #%00000001
0C7F4 D0 03                         BNE +setTileAttributes
0C7F6                               
0C7F6 20 5F C8                      JSR sub_DrawTileTemp018
0C7F9                               
0C7F9                           
0C7F9                           +setTileAttributes:
0C7F9                               ;; Update attribute table accordingly through ppu buffer
0C7F9                               ;; - PPU buffer high byte
0C7F9 20 D7 D0                      JSR sub_SetTileAttributeAddress
0C7FC                           
0C7FC 8A                            TXA
0C7FD 29 10                         AND #%00010000
0C7FF F0 05                         BEQ +        
0C801 A9 F0                             LDA #%11110000
0C803 4C 08 C8                          JMP ++
0C806                               +
0C806 A9 0F                         LDA #%00001111
0C808                               ++
0C808 85 02                         STA temp+2
0C80A                               
0C80A 8A                            TXA
0C80B 29 01                         AND #%00000001
0C80D F0 07                         BEQ +
0C80F A5 02                             LDA temp+2
0C811 09 CC                             ORA #%11001100
0C813 4C 1A C8                          JMP ++
0C816                               +
0C816 A5 02                         LDA temp+2
0C818 09 33                         ORA #%00110011
0C81A                               ++
0C81A 85 02                         STA temp+2
0C81C                               
0C81C C9 FC                         CMP #%11111100
0C81E F0 22                         BEQ +continue
0C820                               
0C820 C9 F3                         CMP #%11110011
0C822 D0 09                         BNE +
0C824 A5 06                             LDA temp+6
0C826 0A                                ASL
0C827 0A                                ASL
0C828 85 06                             STA temp+6
0C82A 4C 42 C8                          JMP +continue
0C82D                               +
0C82D                               
0C82D C9 CF                         CMP #%11001111
0C82F D0 0A                         BNE +
0C831 A6 06                             LDX temp+6
0C833 BD 28 DA                          LDA tbl_Times16,x
0C836 85 06                             STA temp+6
0C838 4C 42 C8                          JMP +continue
0C83B                               +
0C83B                               
0C83B A6 06                         LDX temp+6
0C83D BD 38 DA                      LDA tbl_Times64,x
0C840 85 06                         STA temp+6
0C842                                   
0C842                           +continue:
0C842 A5 00                         LDA temp
0C844 38                            SEC
0C845 E9 C0                         SBC #$C0
0C847 AA                            TAX
0C848 BD A0 04                      LDA tile_attributes,x
0C84B 25 02                         AND temp+2
0C84D 05 06                         ORA temp+6
0C84F 9D A0 04                      STA tile_attributes,x
0C852 99 00 03                      STA ppu_buffer,y
0C855 C8                            INY
0C856                           
0C856                               ;; Restore original X
0C856 68                            PLA
0C857 AA                            TAX
0C858                               
0C858                               ;; Update PPU buffer
0C858 84 3A                         STY ppu_buffer_pointer
0C85A A9 01                         LDA #$01
0C85C 85 39                         STA ppu_buffer_update
0C85E                           
0C85E                               ;; Return
0C85E 60                            RTS
0C85F                           
0C85F                           .include "game/subroutine/DrawTileTemp018.asm"
0C85F                           
0C85F                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C85F                           
0C85F                           sub_DrawTileTemp018:
0C85F A5 00                         LDA temp
0C861 99 00 03                      STA ppu_buffer,y
0C864 C8                            INY
0C865 A5 01                         LDA temp+1
0C867 99 00 03                      STA ppu_buffer,y
0C86A C8                            INY
0C86B A5 08                         LDA temp+8
0C86D 99 00 03                      STA ppu_buffer,y
0C870 C8                            INY
0C871 60                            RTS
0C872                           
0C872                           .include "game/subroutine/EvaluateTileType.asm"
0C872                           
0C872                           ;; Subroutine to evaluate the colliding tile type and take its
0C872                           ;; corresponding action (move block, kill player, ...)
0C872                           ;; - Expects X-register to be the tile_type offset
0C872                           ;; - Uses zp variable colliding_tile
0C872                           
0C872                           sub_EvaluateTileType:
0C872                           
0C872                               ;; Check if collided tile is a color block
0C872 A5 43                         LDA colliding_tile
0C874 29 80                         AND #IS_COLOR_BLOCK
0C876 D0 03                         BNE +
0C878 4C E1 C8                          JMP +checkIfPaintBlock
0C87B                               +
0C87B                               
0C87B                               ;; It's a color block. Check if the colors match
0C87B 20 D3 C6                      JSR sub_ColorsMatch
0C87E F0 06                         BEQ +
0C880                                   ;; Colors don't match
0C880                                   ;; Play bounce sound effect
0C880 A2 02                             LDX #SFX_BOUNCE
0C882 20 52 CF                          JSR sub_PreloadSfxFromX
0C885                                   
0C885                                   ;; Return
0C885 60                                RTS
0C886                               +
0C886                           
0C886                               ;; Colors match; destroy color block
0C886                               
0C886                               ;; Convert the metatile offset value (which is in the X register)
0C886                               ;; to its corresponding address in PPU
0C886 20 1B CA                      JSR sub_GetPPUAddrFromYXIndex
0C889                           
0C889                               ;; Remove color block from screen by drawing a total
0C889                               ;; of 7 tiles over it (shade included)
0C889 20 61 CF                      JSR sub_RemoveBlockFromScreen
0C88C                               
0C88C                               ;; - Load destruction animation on tile
0C88C                               ;; Get most recent slot for explosion    
0C88C 8A                            TXA
0C88D 85 02                         STA temp+2
0C88F A6 3B                         LDX explosion_pointer
0C891                           
0C891                               ;; If 0, use max pointer value
0C891 D0 02                         BNE +
0C893 A2 04                             LDX #MAX_ANIMATIONS
0C895                               +
0C895                           
0C895                               ;; Decrease pointer by one
0C895 CA                            DEX
0C896 86 3B                         STX explosion_pointer
0C898                           
0C898                               ;; Load explosion data into RAM
0C898 A9 00                         LDA #$00
0C89A 9D 64 03                      STA explosion_currentframe,x
0C89D                           
0C89D A9 04                         LDA #ANIMATION_SPEED
0C89F 9D 60 03                      STA explosion_timer,x
0C8A2                           
0C8A2 A5 02                         LDA temp+2
0C8A4 29 0F                         AND #%00001111
0C8A6 A8                            TAY
0C8A7 B9 28 DA                      LDA tbl_Times16,y
0C8AA 18                            CLC
0C8AB 69 0E                         ADC #$0E
0C8AD 9D 6C 03                      STA explosion_x,x
0C8B0                           
0C8B0 A5 02                         LDA temp+2
0C8B2 29 F0                         AND #%11110000
0C8B4 18                            CLC
0C8B5 69 29                         ADC #$29
0C8B7 9D 70 03                      STA explosion_y,x
0C8BA                           
0C8BA A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C8BC 9D 68 03                      STA explosion_attributes,x
0C8BF A9 01                         LDA #$01
0C8C1 9D 74 03                      STA explosion_active,x
0C8C4                           
0C8C4 A5 02                         LDA temp+2
0C8C6 AA                            TAX
0C8C7                               
0C8C7                               
0C8C7                               ;; - Write #$00 in tile type ram (makes not-solid)
0C8C7 A9 00                         LDA #$00
0C8C9 9D 00 04                      STA tile_type, x
0C8CC                           
0C8CC                           
0C8CC                               ;; Add (80 + level number) to score
0C8CC A5 42                         LDA current_level
0C8CE 18                            CLC
0C8CF 69 51                         ADC #81
0C8D1 20 66 C5                      JSR sub_AddAccumulatorToScore
0C8D4                           
0C8D4                           
0C8D4                               ;; Play thud sound effect
0C8D4 A2 01                         LDX #SFX_THUD
0C8D6 20 52 CF                      JSR sub_PreloadSfxFromX
0C8D9                           
0C8D9                           
0C8D9                               ;; - If there are no color blocks left:
0C8D9                               ;;   - Initiate level-win state
0C8D9 C6 44                         DEC blocks_left
0C8DB D0 03                         BNE +
0C8DD 4C 7F C4                          JMP lbl_LevelWin
0C8E0                               +
0C8E0                               
0C8E0 60                            RTS
0C8E1                           
0C8E1                           
0C8E1                           
0C8E1                           +checkIfPaintBlock:
0C8E1                           
0C8E1                               ;; Check if collided tile is a paint block
0C8E1 A5 43                         LDA colliding_tile
0C8E3 29 20                         AND #IS_PAINT_BLOCK
0C8E5 F0 1E                         BEQ +checkIfDeathBlock
0C8E7                                   ;; It's a paint block. Update ball color
0C8E7                                   ;; Save x-register
0C8E7 8A                                TXA
0C8E8 48                                PHA
0C8E9                           
0C8E9                                   ;; Get tile color
0C8E9 A5 43                             LDA colliding_tile
0C8EB 29 0E                             AND #%00001110
0C8ED 0A                                ASL
0C8EE 0A                                ASL
0C8EF 0A                                ASL
0C8F0 0A                                ASL
0C8F1 85 00                             STA temp
0C8F3                           
0C8F3                                   ;; Apply tile color to ball
0C8F3 A5 37                             LDA ball_flags
0C8F5 29 1F                             AND #%00011111
0C8F7 05 00                             ORA temp
0C8F9 85 37                             STA ball_flags
0C8FB 20 B2 C6                          JSR sub_ColorizeBall
0C8FE                           
0C8FE                                   ;; Play paint sound effect
0C8FE A9 10                             LDA #$10
0C900 85 50                             STA sfx_timer+2
0C902                           
0C902                                   ;; Restore x-register
0C902 68                                PLA
0C903 AA                                TAX
0C904                           
0C904                                   ;; Return
0C904 60                                RTS
0C905                                   
0C905                                   
0C905                                   
0C905                           +checkIfDeathBlock:
0C905                           
0C905                               ;; Check if collided tile is a death block
0C905 A5 43                         LDA colliding_tile
0C907 29 10                         AND #IS_DEATH_BLOCK
0C909 F0 3D                         BEQ +checkIfMoveBlock
0C90B                           
0C90B                           ;; Also, when the player presses select during gameplay,
0C90B                           ;; insta-selfdestruct the ball.
0C90B                           sub_Selfdestruct:
0C90B                           
0C90B                                   ;; It is a death block
0C90B                                   ;; Freeze and kill player
0C90B A5 37                             LDA ball_flags
0C90D 09 05                             ORA #%00000101
0C90F 85 37                             STA ball_flags
0C911                                   
0C911                                   ;; Get free explosion slot
0C911 A6 3B                             LDX explosion_pointer
0C913 D0 02                             BNE +
0C915 A2 04                                 LDX #MAX_ANIMATIONS
0C917                                   +
0C917 CA                                DEX
0C918 86 3B                             STX explosion_pointer
0C91A                           
0C91A                                   ;; Load explosion data into RAM
0C91A A9 00                             LDA #$00
0C91C 9D 64 03                          STA explosion_currentframe,x
0C91F                           
0C91F A9 04                             LDA #ANIMATION_SPEED
0C921 9D 60 03                          STA explosion_timer,x
0C924                           
0C924 A5 17                             LDA ball_xpos_hi
0C926 38                                SEC
0C927 E9 08                             SBC #$08
0C929 9D 6C 03                          STA explosion_x,x
0C92C                           
0C92C A5 19                             LDA ball_ypos_hi
0C92E 38                                SEC
0C92F E9 06                             SBC #$06
0C931 9D 70 03                          STA explosion_y,x
0C934                           
0C934 A9 01                             LDA #$01
0C936 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C939 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C93C 85 4B                             STA noise_muted             ; mute background noise
0C93E                                   
0C93E                                   ;; Play explosion sound effect
0C93E A2 00                             LDX #SFX_EXPLOSION
0C940 20 52 CF                          JSR sub_PreloadSfxFromX
0C943                           
0C943                                   ;; Set kill timer
0C943 A9 60                             LDA #$60
0C945 85 40                             STA kill_timer
0C947                           
0C947                                   ;; Return
0C947 60                                RTS
0C948                           
0C948                           
0C948                           
0C948                           +checkIfMoveBlock:
0C948                           
0C948                               ;; Check if collided tile is a move block
0C948 A5 43                         LDA colliding_tile
0C94A 29 40                         AND #IS_MOVE_BLOCK
0C94C D0 06                         BNE +
0C94E                                   ;; Tile is not a move block
0C94E                                   ;; Therefore, it is a solid wall
0C94E                                   
0C94E                                   ;; Play bounce sound effect
0C94E A2 02                             LDX #SFX_BOUNCE
0C950 20 52 CF                          JSR sub_PreloadSfxFromX
0C953                           
0C953                                   ;; Return
0C953 60                                RTS
0C954                               +
0C954                           
0C954                               ;; It is a move block. Check if colors match
0C954 20 D3 C6                      JSR sub_ColorsMatch
0C957 F0 06                         BEQ +
0C959                                   ;; Colors do not match
0C959                                   ;; Play bounce sound effect
0C959 A2 02                             LDX #SFX_BOUNCE
0C95B 20 52 CF                          JSR sub_PreloadSfxFromX
0C95E                           
0C95E                                   ;; Return
0C95E 60                                RTS
0C95F                               +
0C95F                           
0C95F                               ;; Colors match
0C95F                               ;; - Check if next tile is within the playground
0C95F                               ;; (push X onto stack as well)
0C95F 8A                            TXA
0C960 48                            PHA
0C961 18                            CLC
0C962 65 36                         ADC move_block_space_to_check
0C964 AA                            TAX
0C965                               
0C965 29 0F                         AND #%00001111
0C967 C9 0E                         CMP #$0E
0C969 90 03                         BCC +
0C96B 4C E3 C9                          JMP +dontMoveBlock
0C96E                               +
0C96E 8A                            TXA
0C96F 29 F0                         AND #%11110000
0C971 C9 A0                         CMP #$A0
0C973 D0 03                         BNE +
0C975 4C E3 C9                          JMP +dontMoveBlock
0C978                               +
0C978 C9 F0                         CMP #$F0
0C97A D0 03                         BNE +
0C97C 4C E3 C9                          JMP +dontMoveBlock
0C97F                               +
0C97F                               
0C97F                               ;; Check if the next tile is solid
0C97F BD 00 04                      LDA tile_type,x
0C982 29 01                         AND #TILE_IS_SOLID
0C984 F0 03                         BEQ +
0C986 4C E3 C9                          JMP +dontMoveBlock
0C989                               +
0C989                               
0C989                               ;; Move block has room to move
0C989                               ;; Pull original X from stack
0C989 68                            PLA
0C98A AA                            TAX        
0C98B                               
0C98B                               ;; Add the tiles that need updating to ppu buffer, and
0C98B                               ;; update attribute table accordingly through ppu buffer
0C98B 20 1B CA                      JSR sub_GetPPUAddrFromYXIndex
0C98E 20 61 CF                      JSR sub_RemoveBlockFromScreen
0C991                           
0C991                               ;; Store original tile type in temp variable
0C991 BD 00 04                      LDA tile_type,x
0C994 85 08                         STA temp+8
0C996                           
0C996                               ;; Write #$00 in tile type ram (makes not-solid)
0C996 A9 00                         LDA #$00
0C998 9D 00 04                      STA tile_type,x
0C99B                           
0C99B                               ;; Add move tile sprite over the original tile
0C99B                               ;; - Store x in temp variable
0C99B 86 03                         STX temp+3
0C99D                               
0C99D                               ;; - Update move block pointer
0C99D A6 3C                         LDX move_block_pointer
0C99F D0 02                         BNE +
0C9A1 A2 04                             LDX #MAX_ANIMATIONS
0C9A3                               +
0C9A3 CA                            DEX
0C9A4 86 3C                         STX move_block_pointer
0C9A6                           
0C9A6                               ;; = Set move block tile type
0C9A6 A5 08                         LDA temp+8
0C9A8 9D 84 03                      STA move_block_tile_type,x
0C9AB                           
0C9AB                               ;; - Set move block X position
0C9AB A5 03                         LDA temp+3
0C9AD 29 0F                         AND #%00001111
0C9AF A8                            TAY
0C9B0 C8                            INY
0C9B1 B9 28 DA                      LDA tbl_Times16,y
0C9B4 9D 78 03                      STA move_block_x,x
0C9B7                               
0C9B7                               ;; - Set move block Y position
0C9B7 A5 03                         LDA temp+3
0C9B9 29 F0                         AND #%11110000
0C9BB 18                            CLC
0C9BC 69 30                         ADC #$30
0C9BE 9D 7C 03                      STA move_block_y,x
0C9C1 DE 7C 03                      DEC move_block_y,x
0C9C4                               
0C9C4                               ;; - Set timer to 16 (+1) frames
0C9C4 A9 11                         LDA #$11
0C9C6 9D 80 03                      STA move_block_timer,x
0C9C9                               
0C9C9                               ;; - Set move direction
0C9C9 A5 36                         LDA move_block_space_to_check
0C9CB 29 81                         AND #%10000001
0C9CD 18                            CLC
0C9CE 2A                            ROL
0C9CF 69 00                         ADC #$00
0C9D1 85 04                         STA temp+4
0C9D3                               
0C9D3                               ;; - Set block color as ball color and add direction
0C9D3 A5 37                         LDA ball_flags
0C9D5 29 E0                         AND #BALL_COLOR
0C9D7 05 04                         ORA temp+4
0C9D9 9D 88 03                      STA move_block_flags,x
0C9DC                               
0C9DC                               ;; - Restore original X
0C9DC A6 03                         LDX temp+3
0C9DE                               
0C9DE                               ;; - Initiate move sound effect
0C9DE A9 18                         LDA #$18
0C9E0 85 4F                         STA sfx_timer+1
0C9E2                           
0C9E2                               ;; Return
0C9E2 60                            RTS
0C9E3                           
0C9E3                           
0C9E3                           ;; Do not move the move block
0C9E3                           +dontMoveBlock:
0C9E3                           
0C9E3                               ;; Play bounce sound effect
0C9E3 A2 02                         LDX #SFX_BOUNCE
0C9E5 20 52 CF                      JSR sub_PreloadSfxFromX
0C9E8                           
0C9E8                               ;; Restore X from stack
0C9E8 68                            PLA
0C9E9 AA                            TAX
0C9EA                               
0C9EA                               ;; Return
0C9EA 60                            RTS
0C9EB                           
0C9EB                           .include "game/subroutine/FlashEffect.asm"
0C9EB                           
0C9EB                           ;; Apply flashing light effect to background color
0C9EB                           sub_FlashEffect:
0C9EB A2 00                         LDX #$00
0C9ED 86 01                         STX temp+1
0C9EF A9 3F                         LDA #$3F
0C9F1 85 00                         STA temp
0C9F3                           
0C9F3                               -flashLoop:
0C9F3 BD 98 DA                          LDA tbl_BackgroundFade,x
0C9F6 85 02                             STA temp+2
0C9F8 20 66 D1                          JSR sub_WriteByteToPPUBuffer
0C9FB A9 0D                             LDA #$0D
0C9FD 85 01                             STA temp+1
0C9FF 20 66 D1                          JSR sub_WriteByteToPPUBuffer
0CA02 A9 19                             LDA #$19
0CA04 85 01                             STA temp+1
0CA06 20 66 D1                          JSR sub_WriteByteToPPUBuffer
0CA09 A9 00                             LDA #$00
0CA0B 85 01                             STA temp+1
0CA0D A0 03                             LDY #$03
0CA0F                                   -
0CA0F 20 57 C5                              JSR sub_WaitForNMI
0CA12 88                                    DEY
0CA13 D0 FA                             BNE -
0CA15 E8                                INX
0CA16 E0 0A                             CPX #$0A
0CA18 D0 D9                         BNE -flashLoop
0CA1A                               
0CA1A 60                            RTS
0CA1B                           
0CA1B                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0CA1B                           
0CA1B                           ;; Get the PPU address from YX index
0CA1B                           ;; - Expects YX index (aka tile offset) to be in the X register
0CA1B                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0CA1B                           
0CA1B                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0CA1B                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0CA1B                           
0CA1B                           sub_GetPPUAddrFromYXIndex:
0CA1B 8A                            TXA
0CA1C 29 C0                         AND #%11000000
0CA1E 18                            CLC
0CA1F 2A                            ROL
0CA20 2A                            ROL
0CA21 2A                            ROL
0CA22 69 20                         ADC #$20
0CA24 85 00                         STA temp
0CA26                               
0CA26 8A                            TXA
0CA27 29 0F                         AND #%00001111
0CA29 0A                            ASL
0CA2A 85 01                         STA temp+1
0CA2C                               
0CA2C 8A                            TXA
0CA2D 29 30                         AND #%00110000
0CA2F 0A                            ASL
0CA30 0A                            ASL
0CA31 18                            CLC
0CA32 65 01                         ADC temp+1
0CA34 85 01                         STA temp+1
0CA36                               
0CA36 A5 00                         LDA temp
0CA38 69 00                         ADC #$00
0CA3A 85 00                         STA temp
0CA3C                               
0CA3C A5 01                         LDA temp+1
0CA3E 18                            CLC
0CA3F 69 C2                         ADC #$C2
0CA41 85 01                         STA temp+1
0CA43                               
0CA43 A5 00                         LDA temp
0CA45 69 00                         ADC #$00
0CA47 85 00                         STA temp
0CA49                           
0CA49 60                            RTS
0CA4A                           
0CA4A                           .include "game/subroutine/InitiateNudge.asm"
0CA4A                           
0CA4A                           ;; Tell ball to nudge
0CA4A                           sub_InitiateNudge:
0CA4A 85 37                         STA ball_flags
0CA4C A9 06                         LDA #NUDGE_FRAMES
0CA4E 85 3E                         STA nudge_timer
0CA50 60                            RTS
0CA51                           
0CA51                           .include "game/subroutine/JumpToPointer.asm"
0CA51                           
0CA51                           ;; Helper subroutine to JSR to a variable pointer address
0CA51                           sub_JumpToPointer:
0CA51 6C 0C 00                      JMP (pointer)
0CA54                               ;RTS must be handled by the routine (pointer) jumps to
0CA54                           
0CA54                           .include "game/subroutine/LoadAnimations.asm"
0CA54                           
0CA54                           sub_LoadAnimations:
0CA54                           
0CA54                               ;; Set up loop
0CA54 A2 00                         LDX #$00
0CA56                               -loop_load_animation:
0CA56                                   ;; Check if current animation is active. If not, goto next
0CA56 BD 74 03                          LDA explosion_active,x
0CA59 D0 03                             BNE +
0CA5B 4C E6 CA                              JMP +next
0CA5E                                   +
0CA5E                           
0CA5E                                   ;; Check the explosion framecounter
0CA5E BD 60 03                          LDA explosion_timer,x
0CA61 D0 17                             BNE +
0CA63                                       ;; Frametimer is 0
0CA63                                       ;; Reset to animation speed
0CA63 A9 04                                 LDA #ANIMATION_SPEED
0CA65 9D 60 03                              STA explosion_timer,x
0CA68                           
0CA68                                       ;; Set next animation frame, and check if we're done yet
0CA68 FE 64 03                              INC explosion_currentframe,x
0CA6B BD 64 03                              LDA explosion_currentframe,x
0CA6E C9 0A                                 CMP #ANIM_SLIDES
0CA70 D0 08                                 BNE +
0CA72                           
0CA72                                       ;; If we're done, inactivate current explosion, go to the next one
0CA72 A9 00                                 LDA #$00
0CA74 9D 74 03                              STA explosion_active,x
0CA77 4C E6 CA                              JMP +next
0CA7A                                   +
0CA7A                           
0CA7A                                   ;; Load (x,y) position in temp variables
0CA7A BD 6C 03                          LDA explosion_x,x
0CA7D 85 01                             STA temp+1
0CA7F 85 03                             STA temp+3
0CA81 BD 70 03                          LDA explosion_y,x
0CA84 85 02                             STA temp+2
0CA86                           
0CA86                                   ;; Load attribute in temp variable
0CA86 BD 68 03                          LDA explosion_attributes,x
0CA89 85 04                             STA temp+4
0CA8B                           
0CA8B                                   ;; Load current frame into Y-register
0CA8B BC 64 03                          LDY explosion_currentframe,x
0CA8E                           
0CA8E                                   ;; Load current frame ROM address from table
0CA8E B9 BA D2                          LDA explosion_anim_lo,y
0CA91 85 0C                             STA pointer
0CA93 B9 B0 D2                          LDA explosion_anim_hi,y
0CA96 85 0D                             STA pointer+1
0CA98                           
0CA98                                   ;; Save x-register on stack
0CA98 8A                                TXA
0CA99 48                                PHA
0CA9A                           
0CA9A                                   ;; Load sprites into sprite RAM
0CA9A A6 3D                             LDX sprite_ram_pointer
0CA9C A0 00                             LDY #$00
0CA9E                           
0CA9E                                   ;; Prepare (x,y) offset for loop
0CA9E 84 00                             STY temp
0CAA0                           
0CAA0                                   -loop_load_sprite:
0CAA0                                   
0CAA0                                       ;; Do not draw empty sprites
0CAA0 B1 0C                                 LDA (pointer),y
0CAA2 F0 18                                 BEQ +nextSprite
0CAA4                                   
0CAA4                                           ;; Add y-position to sprite ram buffer
0CAA4 A5 02                                     LDA temp+2
0CAA6 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAA9 E8                                        INX
0CAAA                           
0CAAA                                           ;; Get tile number from frame ROM address, and
0CAAA                                           ;; add it to sprite ram buffer
0CAAA B1 0C                                     LDA (pointer),y
0CAAC 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAAF E8                                        INX
0CAB0                           
0CAB0                                           ;; Add attribute data to sprite ram buffer
0CAB0 A5 04                                     LDA temp+4
0CAB2 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAB5 E8                                        INX
0CAB6                           
0CAB6                                           ;; Add x-position to sprite ram buffer
0CAB6 A5 03                                     LDA temp+3
0CAB8 9D 00 02                                  STA ADDR_SPRITERAM,x
0CABB E8                                        INX
0CABC                           
0CABC                                       +nextSprite:
0CABC                           
0CABC                                       ;; Check if all sprites are done
0CABC C8                                    INY
0CABD C0 09                                 CPY #SLIDE_SIZE
0CABF F0 21                                 BEQ +updateSpriteRamPointer
0CAC1                           
0CAC1                                       ;; Update x value
0CAC1 A5 03                                 LDA temp+3
0CAC3 18                                    CLC
0CAC4 69 08                                 ADC #$08
0CAC6 85 03                                 STA temp+3
0CAC8                           
0CAC8                                       ;; Update temp for x,y position
0CAC8 E6 00                                 INC temp
0CACA A5 00                                 LDA temp
0CACC C9 03                                 CMP #SLIDE_WIDTH
0CACE D0 0F                                 BNE +
0CAD0                                           ;; Row is done; reset x-position
0CAD0 A5 01                                     LDA temp+1
0CAD2 85 03                                     STA temp+3
0CAD4                           
0CAD4                                           ;; Update y-position
0CAD4 A5 02                                     LDA temp+2
0CAD6 18                                        CLC
0CAD7 69 08                                     ADC #$08
0CAD9 85 02                                     STA temp+2
0CADB                           
0CADB                                           ;; Reset row timer
0CADB A9 00                                     LDA #$00
0CADD 85 00                                     STA temp
0CADF                                       +
0CADF                           
0CADF 4C A0 CA                          JMP -loop_load_sprite
0CAE2                           
0CAE2                               +updateSpriteRamPointer:
0CAE2 86 3D                             STX sprite_ram_pointer
0CAE4                           
0CAE4                                   ;; Retrieve x-register from stack
0CAE4 68                                PLA
0CAE5 AA                                TAX
0CAE6                           
0CAE6                               +next:
0CAE6                                   ;; Check if all animations have been updated
0CAE6 E8                                INX
0CAE7 E0 04                             CPX #MAX_ANIMATIONS
0CAE9 F0 03                             BEQ +cleanUpSpriteRam
0CAEB                           
0CAEB 4C 56 CA                      JMP -loop_load_animation
0CAEE                           
0CAEE                           +cleanUpSpriteRam:
0CAEE A6 3D                         LDX sprite_ram_pointer
0CAF0 A9 EF                         LDA #$EF
0CAF2                               -
0CAF2 9D 00 02                          STA ADDR_SPRITERAM,x
0CAF5 E8                                INX
0CAF6 D0 FA                         BNE -
0CAF8                               
0CAF8 60                            RTS
0CAF9                               
0CAF9                           .include "game/subroutine/LoadGameScreen.asm"
0CAF9                           
0CAF9                           ;; Load the game screen, based on level number
0CAF9                           sub_LoadGameScreen:
0CAF9                           
0CAF9                               ;; Clear the screen
0CAF9 20 47 C6                      JSR sub_ClearScreen
0CAFC                               
0CAFC                               ;; Clear collision and attribute data; reset blocks left in the process
0CAFC A2 00                         LDX #$00
0CAFE 8A                            TXA
0CAFF 85 44                         STA blocks_left
0CB01                               -
0CB01 9D 00 04                          STA tile_type,x
0CB04 E8                                INX
0CB05 D0 FA                         BNE -
0CB07                               
0CB07                               ;; Get pointer from current level
0CB07 A6 42                         LDX current_level
0CB09 BD DA D9                      LDA tbl_lvl_layout_lo,x
0CB0C 85 0C                         STA pointer
0CB0E BD C0 D9                      LDA tbl_lvl_layout_hi,x
0CB11 85 0D                         STA pointer+1
0CB13                           
0CB13                               ;; Set up the loop
0CB13 A0 00                         LDY #$00
0CB15                           -drawRowColumnLoop:
0CB15                           
0CB15                               ;; Load (x,y) of current set of tiles
0CB15 B1 0C                         LDA (pointer),y
0CB17                           
0CB17                               ;; Check if level is done; if so, skip the loop
0CB17 C9 FF                         CMP #LEVEL_END
0CB19 D0 03                         BNE +
0CB1B 4C 64 CC                          JMP +doneLevelLoad
0CB1E                               +
0CB1E                           
0CB1E                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CB1E 85 00                         STA temp
0CB20 C8                            INY
0CB21 B1 0C                         LDA (pointer),y
0CB23 85 01                         STA temp+1
0CB25                               
0CB25                               ;; Convert (x,y) to PPU address
0CB25                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CB25 A5 00                         LDA temp
0CB27 29 0F                         AND #%00001111
0CB29 4A                            LSR
0CB2A 4A                            LSR
0CB2B 09 20                         ORA #$20
0CB2D 85 02                         STA temp+2
0CB2F                               
0CB2F                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CB2F A5 00                         LDA temp
0CB31 29 F0                         AND #%11110000
0CB33 4A                            LSR
0CB34 4A                            LSR
0CB35 4A                            LSR
0CB36 85 03                         STA temp+3
0CB38                               
0CB38 A5 00                         LDA temp
0CB3A 29 03                         AND #%00000011
0CB3C AA                            TAX
0CB3D BD 38 DA                      LDA tbl_Times64,x
0CB40 18                            CLC
0CB41 65 03                         ADC temp+3
0CB43 18                            CLC
0CB44 69 C2                         ADC #$C2
0CB46 85 03                         STA temp+3
0CB48                               
0CB48                               ;; Add carry to temp+2
0CB48 A5 02                         LDA temp+2
0CB4A 69 00                         ADC #$00
0CB4C 85 02                         STA temp+2
0CB4E                           
0CB4E                               ;; Convert tile data to loop count and tile type
0CB4E                               ;; temp+4 = color
0CB4E A5 01                         LDA temp+1
0CB50 29 07                         AND #%00000111
0CB52 85 04                         STA temp+4
0CB54                               
0CB54                               ;; If color = 7, this is a wall
0CB54 C9 07                         CMP #%00000111
0CB56 F0 12                         BEQ +wallHack
0CB58                                   
0CB58                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CB58 29 01                             AND #%00000001
0CB5A F0 02                             BEQ +
0CB5C A9 05                                 LDA #$05
0CB5E                                   +
0CB5E 85 07                             STA temp+7
0CB60                                
0CB60                                   ;; temp+5 = tile type
0CB60 A5 01                             LDA temp+1
0CB62 4A                                LSR
0CB63 4A                                LSR
0CB64 4A                                LSR
0CB65 29 03                             AND #%00000011
0CB67 4C 70 CB                          JMP +setTileType
0CB6A                               +wallHack:
0CB6A                               
0CB6A                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CB6A A9 00                         LDA #$00
0CB6C 85 07                         STA temp+7
0CB6E A9 04                         LDA #$04
0CB70                           
0CB70                           +setTileType:    
0CB70 85 05                         STA temp+5
0CB72                               
0CB72                               ;; X = tile offset
0CB72 18                            CLC
0CB73 65 07                         ADC temp+7
0CB75 AA                            TAX
0CB76                               
0CB76                               ;; temp+6 = number of tiles
0CB76 A5 01                         LDA temp+1
0CB78 29 60                         AND #%01100000
0CB7A 4A                            LSR
0CB7B 4A                            LSR
0CB7C 4A                            LSR
0CB7D 4A                            LSR
0CB7E 4A                            LSR
0CB7F 85 06                         STA temp+6
0CB81                               
0CB81                               ;; Translate (x,y) to (y,x) for tile RAM
0CB81 A5 00                         LDA temp
0CB83 0A                            ASL
0CB84 0A                            ASL
0CB85 0A                            ASL
0CB86 0A                            ASL
0CB87 85 08                         STA temp+8
0CB89 A5 00                         LDA temp
0CB8B 4A                            LSR
0CB8C 4A                            LSR
0CB8D 4A                            LSR
0CB8E 4A                            LSR
0CB8F 05 08                         ORA temp+8
0CB91 85 00                         STA temp
0CB93                               
0CB93                               ;; Set up loop
0CB93 98                            TYA
0CB94 48                            PHA
0CB95 A4 06                         LDY temp+6
0CB97                           
0CB97                               -drawTileLoop:
0CB97                                   ;; Write PPU address
0CB97 2C 02 20                          BIT PPU_STATUS
0CB9A A5 02                             LDA temp+2
0CB9C 8D 06 20                          STA PPU_ADDR
0CB9F A5 03                             LDA temp+3
0CBA1 8D 06 20                          STA PPU_ADDR
0CBA4                                   
0CBA4                                   ;; Write first and second tile
0CBA4 BD 3C DA                          LDA tbl_GametileTopLeft,x
0CBA7 8D 07 20                          STA PPU_DATA
0CBAA BD 46 DA                          LDA tbl_GametileTopRight,x
0CBAD 8D 07 20                          STA PPU_DATA
0CBB0                                   
0CBB0                                   ;; Update PPU address
0CBB0 2C 02 20                          BIT PPU_STATUS
0CBB3 A5 02                             LDA temp+2
0CBB5 8D 06 20                          STA PPU_ADDR
0CBB8 A5 03                             LDA temp+3
0CBBA 18                                CLC
0CBBB 69 20                             ADC #$20
0CBBD 8D 06 20                          STA PPU_ADDR
0CBC0                                   
0CBC0                                   ;; Write third and fourth tile
0CBC0 BD 50 DA                          LDA tbl_GametileBottomLeft,x
0CBC3 8D 07 20                          STA PPU_DATA
0CBC6 BD 5A DA                          LDA tbl_GametileBottomRight,x
0CBC9 8D 07 20                          STA PPU_DATA
0CBCC                           
0CBCC                                   ;; Push x-register to stack
0CBCC 8A                                TXA
0CBCD 48                                PHA
0CBCE                           
0CBCE                                   ;; Update tile RAM (aka collision table)
0CBCE A6 05                             LDX temp+5
0CBD0 BD 64 DA                          LDA tbl_GameTileRamByte,x
0CBD3 05 04                             ORA temp+4
0CBD5 0A                                ASL
0CBD6 09 01                             ORA #%00000001
0CBD8 A6 00                             LDX temp
0CBDA 9D 00 04                          STA tile_type,x
0CBDD                           
0CBDD                                   ;; Check if shade 1 should be drawn
0CBDD E8                                INX
0CBDE BD 00 04                          LDA tile_type,x
0CBE1 D0 05                             BNE +
0CBE3 A9 00                                 LDA #$00
0CBE5 8D 07 20                              STA PPU_DATA
0CBE8                                   +
0CBE8                                   
0CBE8                                   ;; Check if shade 2 should be drawn
0CBE8 A5 03                             LDA temp+3
0CBEA 18                                CLC
0CBEB 69 41                             ADC #$41
0CBED 85 03                             STA temp+3
0CBEF A5 02                             LDA temp+2
0CBF1 69 00                             ADC #$00
0CBF3 85 02                             STA temp+2
0CBF5                                   
0CBF5 8A                                TXA
0CBF6 18                                CLC
0CBF7 69 0F                             ADC #$0F
0CBF9 AA                                TAX
0CBFA                                   
0CBFA BD 00 04                          LDA tile_type,x
0CBFD D0 0F                             BNE +
0CBFF A5 02                                 LDA temp+2
0CC01 8D 06 20                              STA PPU_ADDR
0CC04 A5 03                                 LDA temp+3
0CC06 8D 06 20                              STA PPU_ADDR
0CC09 A9 00                                 LDA #$00
0CC0B 8D 07 20                              STA PPU_DATA
0CC0E                                   +
0CC0E                           
0CC0E                                   ;; Check if shade 3 should be drawn
0CC0E E8                                INX
0CC0F E6 03                             INC temp+3
0CC11 BD 00 04                          LDA tile_type,x
0CC14 D0 0F                             BNE +
0CC16 A5 02                                 LDA temp+2
0CC18 8D 06 20                              STA PPU_ADDR
0CC1B A5 03                                 LDA temp+3
0CC1D 8D 06 20                              STA PPU_ADDR
0CC20 A9 00                                 LDA #$00
0CC22 8D 07 20                              STA PPU_DATA
0CC25                                   +
0CC25                                   
0CC25                                   ;; Restore x-register from stack
0CC25 68                                PLA
0CC26 AA                                TAX
0CC27                                   
0CC27                                   ;; Reset pointer for next tile
0CC27 A5 03                             LDA temp+3
0CC29 38                                SEC
0CC2A E9 42                             SBC #$42
0CC2C 85 03                             STA temp+3
0CC2E A5 02                             LDA temp+2
0CC30 E9 00                             SBC #$00
0CC32 85 02                             STA temp+2
0CC34                                   
0CC34                                   ;; Draw next metatile in this loop (if any left)
0CC34 88                                DEY
0CC35 30 27                             BMI +doneDrawingRowColumn
0CC37                                   
0CC37                                   ;; Is it a row or a column?
0CC37 A5 01                             LDA temp+1
0CC39 10 17                             BPL +
0CC3B                                       ;; It is a column: move pointer down (+$40)
0CC3B A5 03                                 LDA temp+3
0CC3D 18                                    CLC
0CC3E 69 40                                 ADC #$40
0CC40 85 03                                 STA temp+3
0CC42 A5 02                                 LDA temp+2
0CC44 69 00                                 ADC #$00
0CC46 85 02                                 STA temp+2
0CC48                                       
0CC48                                       ;; Add 16 to temp (as a tile RAM pointer)
0CC48 A5 00                                 LDA temp
0CC4A 18                                    CLC
0CC4B 69 10                                 ADC #$10
0CC4D 85 00                                 STA temp
0CC4F 4C 5B CC                              JMP +drawNextTile
0CC52                                   +
0CC52                                   
0CC52                                   ;; It is a row: move pointer right (+$02)
0CC52 A5 03                             LDA temp+3
0CC54 18                                CLC
0CC55 69 02                             ADC #$02
0CC57 85 03                             STA temp+3
0CC59                                   
0CC59                                   ;; Add 1 to temp (as a tile RAM pointer)
0CC59 E6 00                             INC temp
0CC5B                           
0CC5B                               
0CC5B                               ;; Next tile in the row/column
0CC5B                                   +drawNextTile:
0CC5B 4C 97 CB                      JMP -drawTileLoop
0CC5E                           
0CC5E                               ;; Go to the next set of tiles
0CC5E                           +doneDrawingRowColumn:
0CC5E 68                            PLA
0CC5F A8                            TAY
0CC60 C8                            INY
0CC61 4C 15 CB                      JMP -drawRowColumnLoop
0CC64                           
0CC64                           ;; Level loading is done
0CC64                           +doneLevelLoad:
0CC64                           
0CC64                               ;; Count number of color blocks
0CC64 A2 A0                         LDX #160
0CC66                               -
0CC66 BD FF 03                          LDA tile_type-1,x
0CC69 29 80                             AND #%10000000
0CC6B F0 02                             BEQ +
0CC6D E6 44                                 INC blocks_left
0CC6F                                   +
0CC6F CA                                DEX
0CC70 D0 F4                         BNE -
0CC72                           
0CC72                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CC72 A9 20                         LDA #$20
0CC74 8D 06 20                      STA PPU_ADDR
0CC77 A9 A2                         LDA #$A2
0CC79 8D 06 20                      STA PPU_ADDR
0CC7C A9 35                         LDA #$35
0CC7E 20 B9 CE                      JSR sub_Draw28HorizontalTiles
0CC81                           
0CC81                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CC81 A9 23                         LDA #$23
0CC83 8D 06 20                      STA PPU_ADDR
0CC86 A9 42                         LDA #$42
0CC88 8D 06 20                      STA PPU_ADDR
0CC8B A9 31                         LDA #$31
0CC8D 20 B9 CE                      JSR sub_Draw28HorizontalTiles
0CC90                           
0CC90                               ;; Left & right game bounds
0CC90                               ;; Set PPU_ADDR and store in temp variables
0CC90 A9 20                         LDA #$20
0CC92 85 00                         STA temp
0CC94 8D 06 20                      STA PPU_ADDR
0CC97 A9 C1                         LDA #$C1
0CC99 85 01                         STA temp+1
0CC9B 8D 06 20                      STA PPU_ADDR
0CC9E                               
0CC9E                               ;; Set vertical bound tile and set up loop
0CC9E A0 33                         LDY #$33
0CCA0 A2 14                         LDX #20
0CCA2                               -
0CCA2                                   ;; Show left tile
0CCA2 8C 07 20                          STY PPU_DATA
0CCA5                                   
0CCA5                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CCA5 A5 00                             LDA temp
0CCA7 8D 06 20                          STA PPU_ADDR
0CCAA A5 01                             LDA temp+1
0CCAC 18                                CLC
0CCAD 69 1D                             ADC #29
0CCAF 85 01                             STA temp+1
0CCB1 8D 06 20                          STA PPU_ADDR
0CCB4                           
0CCB4                                   ;; Show right tile
0CCB4 8C 07 20                          STY PPU_DATA
0CCB7                           
0CCB7                                   ;; Check if we're done yet
0CCB7 CA                                DEX
0CCB8 F0 18                             BEQ +drawCorners
0CCBA                                   
0CCBA                                   ;; Not done yet: add 3 to low byte for next left bound
0CCBA A5 01                             LDA temp+1
0CCBC 18                                CLC
0CCBD 69 03                             ADC #3
0CCBF 85 01                             STA temp+1
0CCC1                                   
0CCC1                                   ;; Apply carry to high byte
0CCC1 A5 00                             LDA temp
0CCC3 69 00                             ADC #$00
0CCC5 85 00                             STA temp
0CCC7                                   
0CCC7                                   ;; Store next PPU_ADDR to draw at
0CCC7 8D 06 20                          STA PPU_ADDR
0CCCA A5 01                             LDA temp+1
0CCCC 8D 06 20                          STA PPU_ADDR
0CCCF 4C A2 CC                      JMP -
0CCD2                               
0CCD2                               
0CCD2                           
0CCD2                           +drawCorners:
0CCD2                               ;; Draw the corners of the playing field
0CCD2 A9 20                         LDA #$20
0CCD4 8D 06 20                      STA PPU_ADDR
0CCD7 A9 A1                         LDA #$A1
0CCD9 8D 06 20                      STA PPU_ADDR
0CCDC A9 39                         LDA #$39
0CCDE 8D 07 20                      STA PPU_DATA
0CCE1                           
0CCE1 A9 20                         LDA #$20
0CCE3 8D 06 20                      STA PPU_ADDR
0CCE6 A9 BE                         LDA #$BE
0CCE8 8D 06 20                      STA PPU_ADDR
0CCEB A9 3A                         LDA #$3A
0CCED 8D 07 20                      STA PPU_DATA
0CCF0                           
0CCF0 A9 23                         LDA #$23
0CCF2 8D 06 20                      STA PPU_ADDR
0CCF5 A9 41                         LDA #$41
0CCF7 8D 06 20                      STA PPU_ADDR
0CCFA A9 36                         LDA #$36
0CCFC 8D 07 20                      STA PPU_DATA
0CCFF                           
0CCFF A9 23                         LDA #$23
0CD01 8D 06 20                      STA PPU_ADDR
0CD04 A9 5E                         LDA #$5E
0CD06 8D 06 20                      STA PPU_ADDR
0CD09 A9 34                         LDA #$34
0CD0B 8D 07 20                      STA PPU_DATA
0CD0E                               
0CD0E                           
0CD0E                               ;; Draw the hud labels
0CD0E A9 20                         LDA #$20
0CD10 8D 06 20                      STA PPU_ADDR
0CD13 A9 62                         LDA #$62
0CD15 8D 06 20                      STA PPU_ADDR
0CD18 A2 00                         LDX #$00
0CD1A                               -
0CD1A BD 69 DA                          LDA tbl_HudText,x
0CD1D 8D 07 20                          STA PPU_DATA
0CD20 E8                                INX
0CD21 E0 1E                             CPX #$1E
0CD23 D0 F5                         BNE -
0CD25                           
0CD25                           
0CD25                               ;; Draw the current score
0CD25 A9 20                         LDA #$20
0CD27 8D 06 20                      STA PPU_ADDR
0CD2A A9 83                         LDA #$83
0CD2C 8D 06 20                      STA PPU_ADDR
0CD2F A2 00                         LDX #$00
0CD31                               -
0CD31 B5 20                             LDA ball_score,x
0CD33 18                                CLC
0CD34 69 01                             ADC #$01
0CD36 8D 07 20                          STA PPU_DATA
0CD39 E8                                INX
0CD3A E0 06                             CPX #$06
0CD3C D0 F3                         BNE -
0CD3E                           
0CD3E                           
0CD3E                               ;; Draw the level number
0CD3E                               ;; (with primitive HEX>DEC)
0CD3E A5 42                         LDA current_level
0CD40 18                            CLC
0CD41 69 01                         ADC #$01
0CD43 85 01                         STA temp+1
0CD45                               
0CD45 C9 14                         CMP #20
0CD47 B0 13                         BCS +tempIsTwo
0CD49                               
0CD49 C9 0A                         CMP #10
0CD4B B0 05                         BCS +tempIsOne
0CD4D                               
0CD4D A9 00                         LDA #$00
0CD4F 4C 63 CD                      JMP +setTemp
0CD52                               
0CD52                           +tempIsOne:
0CD52 38                            SEC
0CD53 E9 0A                         SBC #10
0CD55 85 01                         STA temp+1
0CD57 A9 01                         LDA #$01
0CD59 4C 63 CD                      JMP +setTemp
0CD5C                               
0CD5C                           +tempIsTwo:
0CD5C 38                            SEC
0CD5D E9 14                         SBC #20
0CD5F 85 01                         STA temp+1
0CD61 A9 02                         LDA #$02
0CD63                           
0CD63                           +setTemp:
0CD63 85 00                         STA temp
0CD65                               
0CD65 E6 00                         INC temp
0CD67 E6 01                         INC temp+1
0CD69                               
0CD69 A9 20                         LDA #$20
0CD6B 8D 06 20                      STA PPU_ADDR
0CD6E A9 8B                         LDA #$8B
0CD70 8D 06 20                      STA PPU_ADDR
0CD73 A5 00                         LDA temp
0CD75 8D 07 20                      STA PPU_DATA
0CD78 A5 01                         LDA temp+1
0CD7A 8D 07 20                      STA PPU_DATA
0CD7D                           
0CD7D                           
0CD7D                               ;; Draw lives (presumes lives to be capped at 9)
0CD7D A9 20                         LDA #$20
0CD7F 8D 06 20                      STA PPU_ADDR
0CD82 A9 92                         LDA #$92
0CD84 8D 06 20                      STA PPU_ADDR
0CD87 A6 1F                         LDX ball_lives
0CD89 E8                            INX
0CD8A 8E 07 20                      STX PPU_DATA
0CD8D                           
0CD8D                           
0CD8D                               ;; Set and draw bonus
0CD8D A9 07                         LDA #$07
0CD8F 85 2C                         STA ball_bonus
0CD91 A9 09                         LDA #$09
0CD93 85 2D                         STA ball_bonus+1
0CD95 85 2E                         STA ball_bonus+2
0CD97                               
0CD97 A9 20                         LDA #$20
0CD99 8D 06 20                      STA PPU_ADDR
0CD9C A9 9A                         LDA #$9A
0CD9E 8D 06 20                      STA PPU_ADDR
0CDA1 A2 00                         LDX #$00
0CDA3                               -
0CDA3 B5 2C                             LDA ball_bonus,x
0CDA5 18                                CLC
0CDA6 69 01                             ADC #$01
0CDA8 8D 07 20                          STA PPU_DATA
0CDAB E8                                INX
0CDAC E0 03                             CPX #$03
0CDAE D0 F3                         BNE -
0CDB0                           
0CDB0                           
0CDB0                               ;; Set attribute data to RAM
0CDB0                               
0CDB0                               ;; Byte 0-6 of attribute ram should be #%10100000
0CDB0 A2 00                         LDX #$00
0CDB2 A9 A0                         LDA #$A0
0CDB4                               -
0CDB4 9D A0 04                          STA tile_attributes,x
0CDB7 E8                                INX
0CDB8 E0 07                             CPX #$07
0CDBA D0 F8                         BNE -
0CDBC                               
0CDBC                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CDBC A9 E0                         LDA #$E0
0CDBE 9D A0 04                      STA tile_attributes,x
0CDC1 E8                            INX
0CDC2                           
0CDC2                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CDC2                           
0CDC2                           -attributeLoop:
0CDC2                               ;; Reset current attribute value
0CDC2 A9 00                         LDA #$00
0CDC4 85 02                         STA temp+2
0CDC6                           
0CDC6                               ;; Get first metatile in tile ram based on attribute index
0CDC6                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CDC6 8A                            TXA
0CDC7                           
0CDC7 38                            SEC
0CDC8 E9 08                         SBC #$08
0CDCA 85 01                         STA temp+1      ; attr - 8 (temp1)
0CDCC 0A                            ASL             ; * 2
0CDCD 85 00                         STA temp        ; temp = temp1 * 2
0CDCF                           
0CDCF A5 01                         LDA temp+1      ; temp1
0CDD1 29 F8                         AND #%11111000  ; rounded down to 8's
0CDD3 0A                            ASL             ; * 2
0CDD4 18                            CLC
0CDD5 65 00                         ADC temp        ; + temp1 * 2
0CDD7 85 00                         STA temp        ; first metatile
0CDD9                           
0CDD9                               ;; Store first metatile in y-register
0CDD9 A8                            TAY
0CDDA                           
0CDDA                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CDDA 8A                            TXA
0CDDB 29 07                         AND #%00000111
0CDDD C9 07                         CMP #%00000111
0CDDF F0 0B                         BEQ +
0CDE1                           
0CDE1                               ;; If X >= $30, don't apply bottom right metatile
0CDE1 E0 30                         CPX #$30
0CDE3 B0 07                         BCS +
0CDE5                               
0CDE5                               ;; Add metatile1 subpalette to attribute value
0CDE5 B9 00 04                      LDA tile_type,y
0CDE8 29 0C                         AND #%00001100
0CDEA 85 02                         STA temp+2
0CDEC                               +
0CDEC                           
0CDEC                           
0CDEC                               ;; Apply second metatile
0CDEC 88                            DEY
0CDED                           
0CDED                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CDED 8A                            TXA
0CDEE 29 07                         AND #%00000111
0CDF0 F0 10                         BEQ +
0CDF2                           
0CDF2                               ;; If X >= $30, don't apply bottom left metatile
0CDF2 E0 30                         CPX #$30
0CDF4 B0 0C                         BCS +
0CDF6                           
0CDF6                           
0CDF6                           
0CDF6                               ;; Add metatile2 subpalette to attribute value
0CDF6 B9 00 04                      LDA tile_type,y
0CDF9 29 0C                         AND #%00001100
0CDFB 4A                            LSR
0CDFC 4A                            LSR
0CDFD 05 02                         ORA temp+2
0CDFF 4C 04 CE                      JMP ++
0CE02                               +
0CE02 A5 02                         LDA temp+2
0CE04                               ++
0CE04 0A                            ASL
0CE05 0A                            ASL
0CE06 85 02                         STA temp+2
0CE08                           
0CE08                           
0CE08                               ;; Apply third metatile
0CE08 98                            TYA
0CE09 38                            SEC
0CE0A E9 0F                         SBC #$0F
0CE0C A8                            TAY
0CE0D                           
0CE0D                               ;; If X MOD 8 == 7, don't apply top right metatile
0CE0D 8A                            TXA
0CE0E 29 07                         AND #%00000111
0CE10 C9 07                         CMP #%00000111
0CE12 F0 11                         BEQ +
0CE14                           
0CE14                               ;; If X < $10, don't apply top right metatile
0CE14 8A                            TXA
0CE15 29 F0                         AND #%11110000
0CE17 F0 0C                         BEQ +
0CE19                           
0CE19                               ;; Add metatile3 subpalette to attribute value
0CE19 B9 00 04                      LDA tile_type,y
0CE1C 29 0C                         AND #%00001100
0CE1E 4A                            LSR
0CE1F 4A                            LSR
0CE20 05 02                         ORA temp+2
0CE22 4C 27 CE                      JMP ++
0CE25                               +
0CE25 A5 02                         LDA temp+2
0CE27                               ++
0CE27 0A                            ASL
0CE28 0A                            ASL
0CE29 85 02                         STA temp+2
0CE2B                           
0CE2B                           
0CE2B                               ;; Apply fourth metatile
0CE2B 88                            DEY
0CE2C                           
0CE2C                               ;; If X MOD 8 == 0, don't apply top left metatile
0CE2C 8A                            TXA
0CE2D 29 07                         AND #%00000111
0CE2F F0 11                         BEQ +
0CE31                           
0CE31                               ;; If X < $10, don't apply top left metatile
0CE31 8A                            TXA
0CE32 29 F0                         AND #%11110000
0CE34 F0 0C                         BEQ +
0CE36                           
0CE36                               ;; Add metatile4 subpalette to attribute value
0CE36 B9 00 04                      LDA tile_type,y
0CE39 29 0C                         AND #%00001100
0CE3B 4A                            LSR
0CE3C 4A                            LSR
0CE3D 05 02                         ORA temp+2
0CE3F 4C 44 CE                      JMP ++
0CE42                               +
0CE42 A5 02                         LDA temp+2
0CE44                               ++
0CE44 9D A0 04                      STA tile_attributes,x
0CE47                           
0CE47                               ;; Check the next attribute, if any left
0CE47 E8                            INX
0CE48 E0 38                         CPX #$38
0CE4A F0 03                         BEQ +
0CE4C 4C C2 CD                          JMP -attributeLoop
0CE4F                               +
0CE4F                           
0CE4F                               ;; Stream attribute RAM to PPU
0CE4F 2C 02 20                      BIT PPU_STATUS
0CE52 A9 23                         LDA #$23
0CE54 8D 06 20                      STA PPU_ADDR
0CE57 A9 C0                         LDA #$C0
0CE59 8D 06 20                      STA PPU_ADDR
0CE5C A2 00                         LDX #$00
0CE5E                               -
0CE5E BD A0 04                          LDA tile_attributes,x
0CE61 8D 07 20                          STA PPU_DATA
0CE64 E8                                INX
0CE65 E0 40                             CPX #$40
0CE67 D0 F5                         BNE -
0CE69                           
0CE69                               ;; Set initial ball position
0CE69 A6 42                         LDX current_level
0CE6B BD F4 D9                      LDA tbl_lvl_ball_startpos,x
0CE6E 29 F0                         AND #%11110000
0CE70 18                            CLC
0CE71 69 34                         ADC #$34
0CE73 85 19                         STA ball_ypos_hi
0CE75 BD F4 D9                      LDA tbl_lvl_ball_startpos,x
0CE78 0A                            ASL
0CE79 0A                            ASL
0CE7A 0A                            ASL
0CE7B 0A                            ASL
0CE7C 18                            CLC
0CE7D 69 14                         ADC #$14
0CE7F 85 17                         STA ball_xpos_hi
0CE81 A9 00                         LDA #$00
0CE83 85 18                         STA ball_xpos_lo
0CE85 85 1A                         STA ball_ypos_lo
0CE87                               
0CE87                               ;; Set initial ball color and direction
0CE87 BD 0E DA                      LDA tbl_lvl_ball_init,x
0CE8A 29 F0                         AND #%11110000
0CE8C 85 37                         STA ball_flags
0CE8E 20 B2 C6                      JSR sub_ColorizeBall
0CE91                               
0CE91                               ;; Reset bonus timer
0CE91 A9 08                         LDA #BONUS_FRAMES
0CE93 85 3F                         STA bonus_timer
0CE95                               
0CE95                               ;; Play background noise
0CE95 A9 08                         LDA #$08
0CE97 8D 15 40                      STA APU_STATUS
0CE9A 8D 0F 40                      STA NOISE_LENGTH
0CE9D A9 0E                         LDA #$0E
0CE9F 85 47                         STA current_noise
0CEA1 A9 00                         LDA #$00
0CEA3 85 45                         STA max_noise
0CEA5 85 48                         STA noise_timer
0CEA7 85 46                         STA sweep_noise
0CEA9 85 4B                         STA noise_muted
0CEAB 20 C5 C5                      JSR sub_BackgroundNoise
0CEAE                           
0CEAE                               ;; Freeze the ball
0CEAE A5 37                         LDA ball_flags
0CEB0 09 04                         ORA #FREEZE_BALL
0CEB2 85 37                         STA ball_flags
0CEB4                               
0CEB4                               ;; Start unfreeze timer
0CEB4 A9 30                         LDA #$30
0CEB6 85 41                         STA unfreeze_timer
0CEB8                           
0CEB8                               ;; Return
0CEB8 60                            RTS
0CEB9                           
0CEB9                           
0CEB9                           ;; Subroutine: draw 28 tiles in a row
0CEB9                           sub_Draw28HorizontalTiles:
0CEB9 A2 1C                         LDX #28
0CEBB                               -
0CEBB 8D 07 20                          STA PPU_DATA
0CEBE CA                                DEX
0CEBF D0 FA                         BNE -
0CEC1 60                            RTS
0CEC2                           
0CEC2                           .include "game/subroutine/LoadIntroScreen.asm"
0CEC2                           
0CEC2                           ;; Load the intro screen
0CEC2                           sub_LoadIntroScreen:
0CEC2                           
0CEC2                               ;; Load intro palette
0CEC2 2C 02 20                      BIT PPU_STATUS
0CEC5 A9 3F                         LDA #$3F
0CEC7 8D 06 20                      STA PPU_ADDR
0CECA A9 00                         LDA #$00
0CECC 8D 06 20                      STA PPU_ADDR
0CECF A2 00                         LDX #$00
0CED1                               -
0CED1 BD 8C D1                          LDA tbl_IntroScreenPalette,x
0CED4 8D 07 20                          STA PPU_DATA
0CED7 E8                                INX
0CED8 E0 20                             CPX #$20
0CEDA D0 F5                         BNE -
0CEDC                               
0CEDC                               ;; Put ball in the middle
0CEDC A9 7C                         LDA #$7C
0CEDE 85 17                         STA ball_xpos_hi
0CEE0 85 19                         STA ball_ypos_hi
0CEE2                           
0CEE2                               ;; Clear the screen
0CEE2 20 47 C6                      JSR sub_ClearScreen
0CEE5                           
0CEE5                               ;; Set up intro screen draw loop
0CEE5 A2 00                         LDX #$00
0CEE7                           
0CEE7                           -loop_IntroScreenData:
0CEE7                           
0CEE7                               ;; Get current byte from intro screen data
0CEE7 BD B4 D1                      LDA tbl_IntroScreenData,x
0CEEA                           
0CEEA                               ;; If current byte is #$3F, we're done drawing.
0CEEA C9 3F                         CMP #$3F
0CEEC D0 03                         BNE +
0CEEE 4C 3B CF                          JMP +goToEndIntroScreen
0CEF1                               +
0CEF1                           
0CEF1                               ;; If highest bits are %11, draw a plain tile
0CEF1 29 C0                         AND #%11000000
0CEF3 D0 03                         BNE +
0CEF5 4C 1B CF                          JMP +drawTile
0CEF8                               +
0CEF8                               
0CEF8                               ;; If highest bits are %01, set the PPU address
0CEF8                               ;; If not, draw two logo tiles
0CEF8 C9 40                         CMP #%01000000
0CEFA D0 03                         BNE +drawLogo
0CEFC 4C 25 CF                          JMP +setPpuAddr
0CEFF                           
0CEFF                           +drawLogo:
0CEFF                               ;; Get bits 0-2 and store in a temp variable
0CEFF BD B4 D1                      LDA tbl_IntroScreenData,x
0CF02 29 07                         AND #%00000111
0CF04 85 00                         STA temp
0CF06                               
0CF06                               ;; Get bits 3-5, shift over to get a value from 0-7
0CF06 BD B4 D1                      LDA tbl_IntroScreenData,x
0CF09 4A                            LSR
0CF0A 4A                            LSR
0CF0B 4A                            LSR
0CF0C 29 07                         AND #%00000111
0CF0E                               
0CF0E                               ;; Draw the tile that corresponds with that value
0CF0E A8                            TAY
0CF0F 20 2A C7                      JSR sub_drawIntroScreenLogoTile
0CF12                               
0CF12                               ;; Do the same for the value stored in temp
0CF12 A4 00                         LDY temp
0CF14 20 2A C7                      JSR sub_drawIntroScreenLogoTile
0CF17                           
0CF17                               ;; Next byte please
0CF17 E8                            INX
0CF18 4C E7 CE                      JMP -loop_IntroScreenData
0CF1B                           
0CF1B                           +drawTile:
0CF1B                               ;; Just draw the tile value on screen
0CF1B BD B4 D1                      LDA tbl_IntroScreenData,x
0CF1E 8D 07 20                      STA PPU_DATA
0CF21                               
0CF21                               ;; Next byte please
0CF21 E8                            INX
0CF22 4C E7 CE                      JMP -loop_IntroScreenData
0CF25                           
0CF25                           
0CF25                           +setPpuAddr:
0CF25                               ;; Reset the PPU latch
0CF25 2C 02 20                      BIT PPU_STATUS
0CF28                               
0CF28                               ;; Sanitize and write the high byte of the PPU address
0CF28 BD B4 D1                      LDA tbl_IntroScreenData,x
0CF2B 29 3F                         AND #%00111111
0CF2D 8D 06 20                      STA PPU_ADDR
0CF30                           
0CF30                               ;; Write the low byte of the PPU address
0CF30 E8                            INX
0CF31 BD B4 D1                      LDA tbl_IntroScreenData,x
0CF34 8D 06 20                      STA PPU_ADDR
0CF37                               
0CF37                               ;; PPU has been set up to draw tiles at the correct spot now.
0CF37                               
0CF37                               ;; Next byte please.
0CF37 E8                            INX
0CF38 4C E7 CE                      JMP -loop_IntroScreenData
0CF3B                           
0CF3B                           +goToEndIntroScreen:
0CF3B                           
0CF3B                               ;; To color the 1.LEVEL: line green, we need to update two
0CF3B                               ;; values in the PPU attribute data.
0CF3B 2C 02 20                      BIT PPU_STATUS
0CF3E A9 23                         LDA #$23
0CF40 8D 06 20                      STA PPU_ADDR
0CF43 A9 CB                         LDA #$CB
0CF45 8D 06 20                      STA PPU_ADDR
0CF48 A9 0A                         LDA #%00001010
0CF4A 8D 07 20                      STA PPU_DATA
0CF4D 8D 07 20                      STA PPU_DATA
0CF50                           
0CF50 60                            RTS
0CF51                           
0CF51                           .include "game/subroutine/LoadWinScreen.asm"
0CF51                           
0CF51                           ;; Load the win screen (in progress)
0CF51                           sub_LoadWinScreen:
0CF51 60                            RTS
0CF52                           
0CF52                           .include "game/subroutine/PreloadSfxFromX.asm"
0CF52                           
0CF52                           sub_PreloadSfxFromX:
0CF52                               
0CF52                               ;; Load sample X into sfx address (low byte)
0CF52 BD E7 DA                      LDA tbl_Sfx_lo,x
0CF55 85 4C                         STA sfx_address
0CF57                               
0CF57                               ;; Load sample X into sfx address (high byte)
0CF57 BD E4 DA                      LDA tbl_Sfx_hi,x
0CF5A 85 4D                         STA sfx_address+1
0CF5C                               
0CF5C                               ;; Start SFX timer
0CF5C A9 01                         LDA #$01
0CF5E 85 4E                         STA sfx_timer
0CF60                               
0CF60 60                            RTS
0CF61                               
0CF61                               0CF61                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CF61                           
0CF61                           ;; Remove a block from screen
0CF61                           sub_RemoveBlockFromScreen:
0CF61                           
0CF61                               ;; Get current buffer location
0CF61 A4 3A                         LDY ppu_buffer_pointer
0CF63                               
0CF63                               ;; TILE 1: if metatile on top left is solid, draw
0CF63                               ;; null tile, else draw random noise tile
0CF63 A9 00                         LDA #$00
0CF65 85 39                         STA ppu_buffer_update
0CF67                               
0CF67 A5 00                         LDA temp
0CF69 99 00 03                      STA ppu_buffer,y
0CF6C C8                            INY
0CF6D A5 01                         LDA temp+1
0CF6F 99 00 03                      STA ppu_buffer,y
0CF72 C8                            INY
0CF73                               
0CF73 8A                            TXA
0CF74 29 0F                         AND #%00001111
0CF76 F0 11                         BEQ +drawRandomTile
0CF78                           
0CF78 8A                            TXA
0CF79 29 F0                         AND #%11110000
0CF7B F0 0C                         BEQ +drawRandomTile
0CF7D                           
0CF7D BD EF 03                      LDA tile_type-17,x
0CF80 29 01                         AND #%00000001
0CF82 F0 05                         BEQ +drawRandomTile  
0CF84                           
0CF84                               ;; Draw a null tile
0CF84 A9 00                         LDA #$00
0CF86 4C 91 CF                      JMP +addToPPUBuffer
0CF89                               
0CF89                           +drawRandomTile:
0CF89                               ;; Draw a random tile
0CF89 20 35 C5                      JSR sub_GetRandomNumber
0CF8C 29 07                         AND #%00000111
0CF8E 18                            CLC
0CF8F 69 68                         ADC #$68
0CF91                               
0CF91                               ;; Add tile to ppu buffer
0CF91                           +addToPPUBuffer:
0CF91 99 00 03                      STA ppu_buffer,y
0CF94 C8                            INY
0CF95                           
0CF95                               ;; TILE 2: If metatile above is solid, draw null,
0CF95                               ;; else draw random noise.
0CF95 E6 01                         INC temp+1
0CF97 A5 00                         LDA temp
0CF99 99 00 03                      STA ppu_buffer,y
0CF9C C8                            INY
0CF9D A5 01                         LDA temp+1
0CF9F 99 00 03                      STA ppu_buffer,y
0CFA2 C8                            INY
0CFA3                               
0CFA3 8A                            TXA
0CFA4 29 F0                         AND #%11110000
0CFA6 F0 0C                         BEQ +drawRandomTile
0CFA8                               
0CFA8 BD F0 03                      LDA tile_type-16,x
0CFAB 29 01                         AND #%00000001
0CFAD F0 05                         BEQ +drawRandomTile
0CFAF                               
0CFAF A9 00                         LDA #%00
0CFB1 4C BC CF                      JMP +addToPPUBuffer
0CFB4                           
0CFB4                           +drawRandomTile:
0CFB4 20 35 C5                      JSR sub_GetRandomNumber
0CFB7 29 07                         AND #%00000111
0CFB9 18                            CLC
0CFBA 69 68                         ADC #$68
0CFBC                           
0CFBC                           +addToPPUBuffer:
0CFBC 99 00 03                      STA ppu_buffer,y
0CFBF C8                            INY
0CFC0                               
0CFC0                               ;; TILE 3 - If metatile left is solid, draw null,
0CFC0                               ;; else draw random noise.
0CFC0 A5 01                         LDA temp+1
0CFC2 18                            CLC
0CFC3 69 1F                         ADC #$1F
0CFC5 85 01                         STA temp+1
0CFC7 A5 00                         LDA temp
0CFC9 69 00                         ADC #$00
0CFCB 85 00                         STA temp
0CFCD 99 00 03                      STA ppu_buffer,y
0CFD0 C8                            INY
0CFD1 A5 01                         LDA temp+1
0CFD3 99 00 03                      STA ppu_buffer,y
0CFD6 C8                            INY
0CFD7                               
0CFD7 8A                            TXA
0CFD8 29 0F                         AND #%00001111
0CFDA F0 0C                         BEQ +drawRandomTile
0CFDC                               
0CFDC BD FF 03                      LDA tile_type-1,x
0CFDF 29 01                         AND #%00000001
0CFE1 F0 05                         BEQ +drawRandomTile
0CFE3                               
0CFE3 A9 00                         LDA #%00
0CFE5 4C F0 CF                      JMP +addToPPUBuffer
0CFE8                           
0CFE8                           +drawRandomTile:
0CFE8 20 35 C5                      JSR sub_GetRandomNumber
0CFEB 29 07                         AND #%00000111
0CFED 18                            CLC
0CFEE 69 68                         ADC #$68
0CFF0                               
0CFF0                           +addToPPUBuffer:
0CFF0 99 00 03                      STA ppu_buffer,y
0CFF3 C8                            INY
0CFF4                               
0CFF4                               ;; TILE 4 - Always random noise
0CFF4 E6 01                         INC temp+1
0CFF6 A5 00                         LDA temp
0CFF8 99 00 03                      STA ppu_buffer,y
0CFFB C8                            INY
0CFFC A5 01                         LDA temp+1
0CFFE 99 00 03                      STA ppu_buffer,y
0D001 C8                            INY
0D002 20 35 C5                      JSR sub_GetRandomNumber
0D005 29 07                         AND #%00000111
0D007 18                            CLC
0D008 69 68                         ADC #$68
0D00A 99 00 03                      STA ppu_buffer,y
0D00D C8                            INY
0D00E                           
0D00E                               ;; TILE 5 - If tile on the right is solid, skip,
0D00E                               ;; else draw random noise tile
0D00E E6 01                         INC temp+1
0D010                               
0D010 8A                            TXA
0D011 29 0F                         AND #%00001111
0D013 C9 0D                         CMP #$0D
0D015 F0 1F                         BEQ +skipTile
0D017                               
0D017 BD 01 04                      LDA tile_type+1,x
0D01A 29 01                         AND #%00000001
0D01C D0 18                         BNE +skipTile
0D01E A5 00                             LDA temp
0D020 99 00 03                          STA ppu_buffer,y
0D023 C8                                INY
0D024 A5 01                             LDA temp+1
0D026 99 00 03                          STA ppu_buffer,y
0D029 C8                                INY
0D02A 20 35 C5                          JSR sub_GetRandomNumber
0D02D 29 07                             AND #%00000111
0D02F 18                                CLC
0D030 69 68                             ADC #$68
0D032 99 00 03                          STA ppu_buffer,y
0D035 C8                                INY    
0D036                               +skipTile:
0D036                           
0D036                               ;; TILE 6 - If tile on bottom is solid, skip,
0D036                               ;; else draw random noise
0D036 A5 01                         LDA temp+1
0D038 18                            CLC
0D039 69 1F                         ADC #$1F
0D03B 85 01                         STA temp+1
0D03D A5 00                         LDA temp
0D03F 69 00                         ADC #$00
0D041 85 00                         STA temp
0D043                           
0D043 8A                            TXA
0D044 29 F0                         AND #%11110000
0D046 C9 90                         CMP #$90
0D048 F0 1F                         BEQ +skipTile
0D04A                           
0D04A BD 10 04                      LDA tile_type+16,x
0D04D 29 01                         AND #%00000001
0D04F D0 18                         BNE +skipTile
0D051 A5 00                             LDA temp
0D053 99 00 03                          STA ppu_buffer,y
0D056 C8                                INY
0D057 A5 01                             LDA temp+1
0D059 99 00 03                          STA ppu_buffer,y
0D05C C8                                INY
0D05D 20 35 C5                          JSR sub_GetRandomNumber
0D060 29 07                             AND #%00000111
0D062 18                                CLC
0D063 69 68                             ADC #$68
0D065 99 00 03                          STA ppu_buffer,y
0D068 C8                                INY    
0D069                               +skipTile:
0D069                               
0D069                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D069                               ;; else draw random noise
0D069 E6 01                         INC temp+1
0D06B                           
0D06B 8A                            TXA
0D06C 29 F0                         AND #%11110000
0D06E C9 90                         CMP #$90
0D070 F0 26                         BEQ +skipTile
0D072                               
0D072 8A                            TXA
0D073 29 0F                         AND #%00001111
0D075 C9 0D                         CMP #$0D
0D077 F0 1F                         BEQ +skipTile
0D079                               
0D079 BD 11 04                      LDA tile_type+17,x
0D07C 29 01                         AND #%00000001
0D07E D0 18                         BNE +skipTile
0D080 A5 00                             LDA temp
0D082 99 00 03                          STA ppu_buffer,y
0D085 C8                                INY
0D086 A5 01                             LDA temp+1
0D088 99 00 03                          STA ppu_buffer,y
0D08B C8                                INY
0D08C 20 35 C5                          JSR sub_GetRandomNumber
0D08F 29 07                             AND #%00000111
0D091 18                                CLC
0D092 69 68                             ADC #$68
0D094 99 00 03                          STA ppu_buffer,y
0D097 C8                                INY    
0D098                               +skipTile:   
0D098                           
0D098                           
0D098                               ;; Update attribute table accordingly through ppu buffer
0D098 20 D7 D0                      JSR sub_SetTileAttributeAddress
0D09B                               
0D09B 8A                            TXA
0D09C 29 10                         AND #%00010000
0D09E F0 05                         BEQ +
0D0A0 A9 F0                             LDA #%11110000
0D0A2 4C A7 D0                          JMP ++
0D0A5                               +
0D0A5 A9 0F                         LDA #%00001111
0D0A7                               ++
0D0A7 85 02                         STA temp+2
0D0A9                               
0D0A9 8A                            TXA
0D0AA 48                            PHA
0D0AB 29 01                         AND #%00000001
0D0AD F0 07                         BEQ +
0D0AF A5 02                             LDA temp+2
0D0B1 09 CC                             ORA #%11001100
0D0B3 4C BA D0                          JMP ++
0D0B6                               +
0D0B6 A5 02                         LDA temp+2
0D0B8 09 33                         ORA #%00110011
0D0BA                               ++
0D0BA 85 02                         STA temp+2
0D0BC                               
0D0BC A5 00                         LDA temp
0D0BE 38                            SEC
0D0BF E9 C0                         SBC #$C0
0D0C1 AA                            TAX
0D0C2 BD A0 04                      LDA tile_attributes,x
0D0C5 25 02                         AND temp+2
0D0C7 9D A0 04                      STA tile_attributes,x
0D0CA 99 00 03                      STA ppu_buffer,y
0D0CD C8                            INY
0D0CE 68                            PLA
0D0CF AA                            TAX
0D0D0                           
0D0D0                               ;; Tell PPU to update tiles and attributes next frame
0D0D0 84 3A                         STY ppu_buffer_pointer
0D0D2 A9 01                         LDA #$01
0D0D4 85 39                         STA ppu_buffer_update
0D0D6                            
0D0D6                               ;; We're done - return
0D0D6 60                            RTS
0D0D7                           
0D0D7                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D0D7                           
0D0D7                           ;; Set the correct tile attribute address based on game tile (x) 
0D0D7                           ;; into the correct ppu buffer slot (y)
0D0D7                           
0D0D7                           sub_SetTileAttributeAddress:
0D0D7 A9 23                         LDA #$23
0D0D9 99 00 03                      STA ppu_buffer,y
0D0DC C8                            INY
0D0DD                               
0D0DD 8A                            TXA
0D0DE 29 F0                         AND #%11110000
0D0E0 4A                            LSR
0D0E1 4A                            LSR
0D0E2 4A                            LSR
0D0E3 4A                            LSR
0D0E4 18                            CLC
0D0E5 69 01                         ADC #$01
0D0E7 4A                            LSR
0D0E8 0A                            ASL
0D0E9 0A                            ASL
0D0EA 0A                            ASL
0D0EB 18                            CLC
0D0EC 69 C8                         ADC #$C8
0D0EE 85 00                         STA temp
0D0F0 8A                            TXA
0D0F1 29 0F                         AND #%00001111
0D0F3 18                            CLC
0D0F4 69 01                         ADC #$01
0D0F6 4A                            LSR
0D0F7 18                            CLC
0D0F8 65 00                         ADC temp
0D0FA 85 00                         STA temp
0D0FC 99 00 03                      STA ppu_buffer,y
0D0FF C8                            INY
0D100                                  
0D100 60                            RTS
0D101                           
0D101                           .include "game/subroutine/SubtractXFromBonus.asm"
0D101                           
0D101                           sub_SubtractXFromBonus:
0D101 86 09                         STX temp+9
0D103 A5 2E                         LDA ball_bonus+2
0D105 38                            SEC
0D106 E5 09                         SBC temp+9
0D108 30 05                         BMI +
0D10A 85 2E                             STA ball_bonus+2
0D10C 4C 24 D1                          JMP +updateBonusOnScreen
0D10F                               +
0D10F                           
0D10F 18                            CLC
0D110 69 0A                         ADC #$0A
0D112 85 2E                         STA ball_bonus+2
0D114 C6 2D                         DEC ball_bonus+1
0D116 10 0C                         BPL +updateBonusOnScreen
0D118                           
0D118 A9 09                         LDA #$09
0D11A 85 2D                         STA ball_bonus+1
0D11C C6 2C                         DEC ball_bonus
0D11E 10 04                         BPL +updateBonusOnScreen
0D120                           
0D120 A9 00                         LDA #$00
0D122 85 2C                         STA ball_bonus
0D124                           
0D124                               +updateBonusOnScreen:
0D124 A9 20                         LDA #$20
0D126 85 00                         STA temp
0D128 A9 9C                         LDA #$9C
0D12A 85 01                         STA temp+1
0D12C A2 02                         LDX #$02
0D12E                               
0D12E                               -updateNextDigit:
0D12E B5 2C                             LDA ball_bonus,x
0D130 18                                CLC
0D131 69 01                             ADC #$01
0D133 85 02                             STA temp+2
0D135 20 66 D1                          JSR sub_WriteByteToPPUBuffer
0D138 C6 01                             DEC temp+1
0D13A CA                                DEX
0D13B 10 F1                         BPL -updateNextDigit
0D13D                           
0D13D 60                            RTS
0D13E                           
0D13E                           .include "game/subroutine/WaitXFrames.asm"
0D13E                           
0D13E                           sub_WaitXFrames:
0D13E                               
0D13E                               ;; Push X to stack
0D13E 8A                            TXA
0D13F 48                            PHA
0D140                               
0D140                               ;; Wait for NMI
0D140 20 57 C5                      JSR sub_WaitForNMI
0D143                           
0D143                               ;; Clear pointer, except for sprite-zero and ball
0D143 A9 08                         LDA #$08
0D145 85 3D                         STA sprite_ram_pointer
0D147                           
0D147                               ;; Load animations (if any)
0D147 20 54 CA                      JSR sub_LoadAnimations
0D14A                               
0D14A                               ;; Restore original X
0D14A 68                            PLA
0D14B AA                            TAX
0D14C                               
0D14C                               ;; Check if all X frames have passed
0D14C CA                            DEX
0D14D D0 EF                         BNE sub_WaitXFrames
0D14F                               
0D14F                               ;; Return
0D14F 60                            RTS
0D150                           
0D150                           .include "game/subroutine/Waste.asm"
0D150 20 53 D1                  sub_Waste7: JSR sub_Waste6
0D153 20 56 D1                  sub_Waste6: JSR sub_Waste5
0D156 20 59 D1                  sub_Waste5: JSR sub_Waste4
0D159 20 5C D1                  sub_Waste4: JSR sub_Waste3
0D15C 20 5F D1                  sub_Waste3: JSR sub_Waste2
0D15F 20 62 D1                  sub_Waste2: JSR sub_Waste1
0D162 20 65 D1                  sub_Waste1: JSR sub_Waste0
0D165 60                        sub_Waste0: RTS0D166                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D166                           
0D166                           ;; Write the byte in temp+2 and the ppu address (temp)
0D166                           ;; to a buffer, so NMI can update it before the next frame
0D166                           
0D166                           sub_WriteByteToPPUBuffer:
0D166                           
0D166                               ;; Prevent updating until full 3-byte buffer is filled,
0D166                               ;; so that graphics won't glitch out if NMI happens during
0D166                               ;; updating the buffer
0D166 A9 00                         LDA #$00
0D168 85 39                         STA ppu_buffer_update
0D16A                           
0D16A                               ;; Check if buffer full; if so, wait a frame and force update
0D16A A4 3A                         LDY ppu_buffer_pointer
0D16C C0 60                         CPY #$60
0D16E D0 05                         BNE +
0D170 E6 39                             INC ppu_buffer_update
0D172 20 60 C5                          JSR sub_WaitForVBlank
0D175                               +
0D175                           
0D175                               ;; Add ppu_addr high byte to buffer
0D175 A5 00                         LDA temp
0D177 99 00 03                      STA ppu_buffer,y
0D17A                           
0D17A                               ;; Add ppu_addr low byte to buffer
0D17A C8                            INY
0D17B A5 01                         LDA temp+1
0D17D 99 00 03                      STA ppu_buffer,y
0D180                           
0D180                               ;; Add ppu_data to buffer
0D180 C8                            INY
0D181 A5 02                         LDA temp+2
0D183 99 00 03                      STA ppu_buffer,y
0D186                           
0D186                               ;; Update buffer pointer
0D186 C8                            INY
0D187 84 3A                         STY ppu_buffer_pointer
0D189                           
0D189                               ;; Tell NMI to update next round
0D189 E6 39                         INC ppu_buffer_update
0D18B                           
0D18B                               ;; Return
0D18B 60                            RTS
0D18C                           
0D18C                           
0D18C                           
0D18C                           
0D18C                           ;; LUTs
0D18C                           .include "game/include/tables.asm"
0D18C                           
0D18C                           ;; Initial screen palette
0D18C                           tbl_IntroScreenPalette:
0D18C 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D190 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D194 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D198 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D19C                           
0D19C 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D1A0 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D1A4 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D1A8 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D1AC                           
0D1AC                           
0D1AC                           ;; Intro: mapping logo index to chr tile
0D1AC                           tbl_IntroScreenLogoChr:
0D1AC 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D1B4                           
0D1B4                           
0D1B4                           ;; Intro screen data
0D1B4                           tbl_IntroScreenData:
0D1B4                           
0D1B4                               ;; Set PPU address $20AC and draw
0D1B4 60 AC                         .db #$60, #$AC
0D1B6 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D1BE                           
0D1BE                               ;; Set PPU address $20CF and draw
0D1BE 60 CF                         .db #$60, #$CF
0D1C0 01 02                         .db #_0, #_1
0D1C2                               
0D1C2                               ;; Set PPU address $2122 and draw
0D1C2 61 22                         .db #$61, #$22
0D1C4 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D1CB 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D1D1 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D1D9 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D1DE                               
0D1DE                               ;; Set PPU address $2147 and draw
0D1DE 61 47                         .db #$61, #$47
0D1E0 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D1E7 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D1EB 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D1F1 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D1F7                               
0D1F7                               ;; Set PPU address $218B and draw
0D1F7 61 8B                         .db #$61, #$8B
0D1F9 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D1FF 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D204                               
0D204                               ;; Set PPU address $21E6 and draw
0D204 61 E6                         .db #$61, #$E6
0D206 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D20E 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D212 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D219                               
0D219                               ;; Set PPU address $222D and draw
0D219 62 2D                         .db #$62, #$2D
0D21B 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D221                               
0D221                               ;; Set PPU address $2281
0D221 62 81                         .db #$62, #$81
0D223                               
0D223                               ;; Draw the Crillion logo
0D223 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D227 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D22B C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D22F E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D233                               
0D233 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D237 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D23B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D23F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D243                               
0D243 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D247 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D24B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D24F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D253                           
0D253 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D257 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D25B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D25F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D263                               
0D263 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D267 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D26B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D26F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D273                           
0D273 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D277 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D27B C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D27F F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D282                           
0D282                               ;; End of intro
0D282 3F                            .db #$3F
0D283                           
0D283                           
0D283                           ;; Animation frames table
0D283                           .include "game/include/table/animation_frames.asm"
0D283                           
0D283                           ;; CHR tile-id's per slide of explosion
0D283                           explosion_slide0:
0D283 00 00 00                      .db #$00, #$00, #$00
0D286 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D289 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D28C                           
0D28C                           explosion_slide1:
0D28C 00 00 00                      .db #$00, #$00, #$00
0D28F 29 2A 2B                      .db #$29, #$2A, #$2B
0D292 39 3A 3B                      .db #$39, #$3A, #$3B
0D295                           
0D295                           explosion_slide2:
0D295 16 00 00                      .db #$16, #$00, #$00
0D298 26 27 28                      .db #$26, #$27, #$28
0D29B 36 37 38                      .db #$36, #$37, #$38
0D29E                           
0D29E                           explosion_slide3:
0D29E 00 14 15                      .db #$00, #$14, #$15
0D2A1 23 24 25                      .db #$23, #$24, #$25
0D2A4 33 34 35                      .db #$33, #$34, #$35
0D2A7                           
0D2A7                           explosion_slide4:
0D2A7 10 11 12                      .db #$10, #$11, #$12
0D2AA 20 21 22                      .db #$20, #$21, #$22
0D2AD 30 31 32                      .db #$30, #$31, #$32
0D2B0                           
0D2B0                           ;; High and low bytes of animation slides
0D2B0                           explosion_anim_hi:
0D2B0 D2                            .db >#explosion_slide0
0D2B1 D2                            .db >#explosion_slide1
0D2B2 D2                            .db >#explosion_slide2
0D2B3 D2                            .db >#explosion_slide3
0D2B4 D2                            .db >#explosion_slide4
0D2B5 D2                            .db >#explosion_slide4
0D2B6 D2                            .db >#explosion_slide3
0D2B7 D2                            .db >#explosion_slide2
0D2B8 D2                            .db >#explosion_slide1
0D2B9 D2                            .db >#explosion_slide0
0D2BA                           
0D2BA                           explosion_anim_lo:
0D2BA 83                            .db <#explosion_slide0
0D2BB 8C                            .db <#explosion_slide1
0D2BC 95                            .db <#explosion_slide2
0D2BD 9E                            .db <#explosion_slide3
0D2BE A7                            .db <#explosion_slide4
0D2BF A7                            .db <#explosion_slide4
0D2C0 9E                            .db <#explosion_slide3
0D2C1 95                            .db <#explosion_slide2
0D2C2 8C                            .db <#explosion_slide1
0D2C3 83                            .db <#explosion_slide0
0D2C4                           
0D2C4                           
0D2C4                           
0D2C4                           ;; Ball palette color table (CBRYGM)
0D2C4                           tbl_BallColorDark:
0D2C4 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D2CA                            
0D2CA                           tbl_BallColorLight:
0D2CA 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D2D0                           
0D2D0                               
0D2D0                           ;; Screen mode drawing routine addresses
0D2D0                           tbl_LoadScreenHi:
0D2D0 CE CA CF                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D2D3                           
0D2D3                           tbl_LoadScreenLo:
0D2D3 C2 F9 51                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D2D6                           
0D2D6                           
0D2D6                           ;; Level data
0D2D6                           .include "game/include/table/level_data.asm"
0D2D6                           
0D2D6                           ;; Level layout tables
0D2D6                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D2D6                           
0D2D6                           ifdef TESTING
0D2D6                           lvl_test:
0D2D6 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D2DE 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D2E6 FF                            .db #LEVEL_END
0D2E7                           endif
0D2E7                           
0D2E7                           lvl_layout_01:
0D2E7 61 21                         .db #$61, #%00100001
0D2E9 52 61                         .db #$52, #%01100001
0D2EB 43 65                         .db #$43, #%01100101
0D2ED 83 05                         .db #$83, #%00000101
0D2EF 93 15                         .db #$93, #%00010101
0D2F1 34 7A                         .db #$34, #%01111010
0D2F3 74 7A                         .db #$74, #%01111010
0D2F5 35 7A                         .db #$35, #%01111010
0D2F7 75 7A                         .db #$75, #%01111010
0D2F9 46 65                         .db #$46, #%01100101
0D2FB 86 25                         .db #$86, #%00100101
0D2FD 57 61                         .db #$57, #%01100001
0D2FF 68 21                         .db #$68, #%00100001
0D301 FF                            .db #LEVEL_END
0D302                           
0D302                           lvl_layout_02:
0D302 C0 0A                         .db #$C0, #%00001010
0D304 11 15                         .db #$11, #%00010101
0D306 21 62                         .db #$21, #%01100010
0D308 61 62                         .db #$61, #%01100010
0D30A A1 42                         .db #$A1, #%01000010
0D30C 12 67                         .db #$12, #%01100111
0D30E 52 67                         .db #$52, #%01100111
0D310 92 67                         .db #$92, #%01100111
0D312 C3 0D                         .db #$C3, #%00001101
0D314 14 11                         .db #$14, #%00010001
0D316 24 65                         .db #$24, #%01100101
0D318 64 65                         .db #$64, #%01100101
0D31A A4 45                         .db #$A4, #%01000101
0D31C 15 67                         .db #$15, #%01100111
0D31E 55 67                         .db #$55, #%01100111
0D320 95 67                         .db #$95, #%01100111
0D322 17 12                         .db #$17, #%00010010
0D324 27 61                         .db #$27, #%01100001
0D326 67 61                         .db #$67, #%01100001
0D328 A7 41                         .db #$A7, #%01000001
0D32A 38 7A                         .db #$38, #%01111010
0D32C 98 5A                         .db #$98, #%01011010
0D32E 18 27                         .db #$18, #%00100111
0D330 48 27                         .db #$48, #%00100111
0D332 78 27                         .db #$78, #%00100111
0D334 C8 07                         .db #$C8, #%00000111
0D336 FF                            .db #LEVEL_END
0D337                           
0D337                           lvl_layout_03:
0D337 00 7A                         .db #$00, #%01111010
0D339 40 7A                         .db #$40, #%01111010
0D33B 80 7A                         .db #$80, #%01111010
0D33D C0 1A                         .db #$C0, #%00011010
0D33F 10 A1                         .db #$10, #%10100001
0D341 13 E1                         .db #$13, #%11100001
0D343 17 C1                         .db #$17, #%11000001
0D345 30 C1                         .db #$30, #%11000001
0D347 34 C1                         .db #$34, #%11000001
0D349 38 A1                         .db #$38, #%10100001
0D34B 50 E1                         .db #$50, #%11100001
0D34D 55 81                         .db #$55, #%10000001
0D34F 57 C1                         .db #$57, #%11000001
0D351 70 C1                         .db #$70, #%11000001
0D353 73 A1                         .db #$73, #%10100001
0D355 76 E1                         .db #$76, #%11100001
0D357 90 E1                         .db #$90, #%11100001
0D359 95 81                         .db #$95, #%10000001
0D35B 97 C1                         .db #$97, #%11000001
0D35D B0 C1                         .db #$B0, #%11000001
0D35F B4 C1                         .db #$B4, #%11000001
0D361 B8 A1                         .db #$B8, #%10100001
0D363 D0 A1                         .db #$D0, #%10100001
0D365 D3 E1                         .db #$D3, #%11100001
0D367 D7 C1                         .db #$D7, #%11000001
0D369 FF                            .db #LEVEL_END
0D36A                           
0D36A                           lvl_layout_04:
0D36A 00 4C                         .db #$00, #%01001100
0D36C 40 6C                         .db #$40, #%01101100
0D36E 80 4C                         .db #$80, #%01001100
0D370 81 AC                         .db #$81, #%10101100
0D372 C1 2C                         .db #$C1, #%00101100
0D374 02 6C                         .db #$02, #%01101100
0D376 42 CC                         .db #$42, #%11001100
0D378 62 EC                         .db #$62, #%11101100
0D37A A2 CC                         .db #$A2, #%11001100
0D37C C3 CC                         .db #$C3, #%11001100
0D37E 04 4C                         .db #$04, #%01001100
0D380 84 2C                         .db #$84, #%00101100
0D382 25 AC                         .db #$25, #%10101100
0D384 85 AC                         .db #$85, #%10101100
0D386 06 AC                         .db #$06, #%10101100
0D388 36 CC                         .db #$36, #%11001100
0D38A 56 CC                         .db #$56, #%11001100
0D38C 66 EC                         .db #$66, #%11101100
0D38E 96 6C                         .db #$96, #%01101100
0D390 C7 AC                         .db #$C7, #%10101100
0D392 08 2C                         .db #$08, #%00101100
0D394 78 6C                         .db #$78, #%01101100
0D396 D8 0C                         .db #$D8, #%00001100
0D398 30 A1                         .db #$30, #%10100001
0D39A B0 21                         .db #$B0, #%00100001
0D39C 01 41                         .db #$01, #%01000001
0D39E 41 61                         .db #$41, #%01100001
0D3A0 91 A1                         .db #$91, #%10100001
0D3A2 A1 21                         .db #$A1, #%00100001
0D3A4 52 C1                         .db #$52, #%11000001
0D3A6 72 E1                         .db #$72, #%11100001
0D3A8 B2 C1                         .db #$B2, #%11000001
0D3AA C2 21                         .db #$C2, #%00100001
0D3AC 03 41                         .db #$03, #%01000001
0D3AE 33 C1                         .db #$33, #%11000001
0D3B0 83 21                         .db #$83, #%00100001
0D3B2 D3 E1                         .db #$D3, #%11100001
0D3B4 05 21                         .db #$05, #%00100001
0D3B6 45 E1                         .db #$45, #%11100001
0D3B8 A5 21                         .db #$A5, #%00100001
0D3BA 16 A1                         .db #$16, #%10100001
0D3BC 76 A1                         .db #$76, #%10100001
0D3BE 27 A1                         .db #$27, #%10100001
0D3C0 57 21                         .db #$57, #%00100001
0D3C2 87 41                         .db #$87, #%01000001
0D3C4 B7 A1                         .db #$B7, #%10100001
0D3C6 19 21                         .db #$19, #%00100001
0D3C8 39 41                         .db #$39, #%01000001
0D3CA 89 41                         .db #$89, #%01000001
0D3CC C9 21                         .db #$C9, #%00100001
0D3CE D0 1A                         .db #$D0, #%00011010
0D3D0 55 1A                         .db #$55, #%00011010
0D3D2 95 1A                         .db #$95, #%00011010
0D3D4 D7 1A                         .db #$D7, #%00011010
0D3D6 09 1A                         .db #$09, #%00011010
0D3D8 79 1A                         .db #$79, #%00011010
0D3DA FF                            .db #LEVEL_END
0D3DB                           
0D3DB                           lvl_layout_05:
0D3DB 40 0A                         .db #$40, #%00001010
0D3DD 70 1A                         .db #$70, #%00011010
0D3DF B0 42                         .db #$B0, #%01000010
0D3E1 41 A7                         .db #$41, #%10100111
0D3E3 B1 22                         .db #$B1, #%00100010
0D3E5 D1 15                         .db #$D1, #%00010101
0D3E7 22 0A                         .db #$22, #%00001010
0D3E9 52 05                         .db #$52, #%00000101
0D3EB B2 42                         .db #$B2, #%01000010
0D3ED 03 27                         .db #$03, #%00100111
0D3EF 33 67                         .db #$33, #%01100111
0D3F1 73 67                         .db #$73, #%01100111
0D3F3 B3 47                         .db #$B3, #%01000111
0D3F5 05 E5                         .db #$05, #%11100101
0D3F7 25 A5                         .db #$25, #%10100101
0D3F9 35 25                         .db #$35, #%00100101
0D3FB 65 45                         .db #$65, #%01000101
0D3FD A5 45                         .db #$A5, #%01000101
0D3FF 46 E5                         .db #$46, #%11100101
0D401 66 E5                         .db #$66, #%11100101
0D403 86 E5                         .db #$86, #%11100101
0D405 A6 E2                         .db #$A6, #%11100010
0D407 C6 E5                         .db #$C6, #%11100101
0D409 27 25                         .db #$27, #%00100101
0D40B 77 05                         .db #$77, #%00000101
0D40D B7 02                         .db #$B7, #%00000010
0D40F 09 05                         .db #$09, #%00000101
0D411 79 05                         .db #$79, #%00000101
0D413 B9 02                         .db #$B9, #%00000010
0D415 FF                            .db #LEVEL_END
0D416                           
0D416                           lvl_layout_06:
0D416 00 03                         .db #$00, #%00000011
0D418 20 03                         .db #$20, #%00000011
0D41A 40 03                         .db #$40, #%00000011
0D41C A0 03                         .db #$A0, #%00000011
0D41E C0 03                         .db #$C0, #%00000011
0D420 11 03                         .db #$11, #%00000011
0D422 31 03                         .db #$31, #%00000011
0D424 51 03                         .db #$51, #%00000011
0D426 91 03                         .db #$91, #%00000011
0D428 B1 03                         .db #$B1, #%00000011
0D42A D1 03                         .db #$D1, #%00000011
0D42C 02 03                         .db #$02, #%00000011
0D42E 22 03                         .db #$22, #%00000011
0D430 42 03                         .db #$42, #%00000011
0D432 A2 03                         .db #$A2, #%00000011
0D434 C2 03                         .db #$C2, #%00000011
0D436 13 03                         .db #$13, #%00000011
0D438 33 03                         .db #$33, #%00000011
0D43A 53 03                         .db #$53, #%00000011
0D43C 93 03                         .db #$93, #%00000011
0D43E B3 03                         .db #$B3, #%00000011
0D440 D3 03                         .db #$D3, #%00000011
0D442 04 03                         .db #$04, #%00000011
0D444 24 03                         .db #$24, #%00000011
0D446 44 03                         .db #$44, #%00000011
0D448 A4 03                         .db #$A4, #%00000011
0D44A C4 03                         .db #$C4, #%00000011
0D44C 15 03                         .db #$15, #%00000011
0D44E 35 03                         .db #$35, #%00000011
0D450 55 03                         .db #$55, #%00000011
0D452 95 03                         .db #$95, #%00000011
0D454 B5 03                         .db #$B5, #%00000011
0D456 D5 03                         .db #$D5, #%00000011
0D458 06 03                         .db #$06, #%00000011
0D45A 26 03                         .db #$26, #%00000011
0D45C 46 03                         .db #$46, #%00000011
0D45E A6 03                         .db #$A6, #%00000011
0D460 C6 03                         .db #$C6, #%00000011
0D462 17 03                         .db #$17, #%00000011
0D464 37 03                         .db #$37, #%00000011
0D466 57 03                         .db #$57, #%00000011
0D468 97 03                         .db #$97, #%00000011
0D46A B7 03                         .db #$B7, #%00000011
0D46C D7 03                         .db #$D7, #%00000011
0D46E 08 03                         .db #$08, #%00000011
0D470 28 03                         .db #$28, #%00000011
0D472 48 03                         .db #$48, #%00000011
0D474 A8 03                         .db #$A8, #%00000011
0D476 C8 03                         .db #$C8, #%00000011
0D478 19 03                         .db #$19, #%00000011
0D47A 39 03                         .db #$39, #%00000011
0D47C 59 03                         .db #$59, #%00000011
0D47E 99 03                         .db #$99, #%00000011
0D480 B9 03                         .db #$B9, #%00000011
0D482 D9 03                         .db #$D9, #%00000011
0D484 60 4B                         .db #$60, #%01001011
0D486 71 CB                         .db #$71, #%11001011
0D488 62 4B                         .db #$62, #%01001011
0D48A 64 4B                         .db #$64, #%01001011
0D48C 75 CB                         .db #$75, #%11001011
0D48E 66 4B                         .db #$66, #%01001011
0D490 68 4B                         .db #$68, #%01001011
0D492 79 0B                         .db #$79, #%00001011
0D494 70 03                         .db #$70, #%00000011
0D496 72 03                         .db #$72, #%00000011
0D498 74 03                         .db #$74, #%00000011
0D49A 76 03                         .db #$76, #%00000011
0D49C 78 03                         .db #$78, #%00000011
0D49E FF                            .db #LEVEL_END
0D49F                           
0D49F                           lvl_layout_07:
0D49F 00 11                         .db #$00, #%00010001
0D4A1 01 FA                         .db #$01, #%11111010
0D4A3 12 BA                         .db #$12, #%10111010
0D4A5 23 DA                         .db #$23, #%11011010
0D4A7 34 FA                         .db #$34, #%11111010
0D4A9 05 DA                         .db #$05, #%11011010
0D4AB 15 FA                         .db #$15, #%11111010
0D4AD 45 BA                         .db #$45, #%10111010
0D4AF 56 DA                         .db #$56, #%11011010
0D4B1 27 BA                         .db #$27, #%10111010
0D4B3 67 DA                         .db #$67, #%11011010
0D4B5 38 3A                         .db #$38, #%00111010
0D4B7 78 BA                         .db #$78, #%10111010
0D4B9 09 3A                         .db #$09, #%00111010
0D4BB 39 3A                         .db #$39, #%00111010
0D4BD 89 1A                         .db #$89, #%00011010
0D4BF B0 01                         .db #$B0, #%00000001
0D4C1 D0 01                         .db #$D0, #%00000001
0D4C3 A1 01                         .db #$A1, #%00000001
0D4C5 C1 11                         .db #$C1, #%00010001
0D4C7 B2 01                         .db #$B2, #%00000001
0D4C9 D2 01                         .db #$D2, #%00000001
0D4CB A3 01                         .db #$A3, #%00000001
0D4CD C3 01                         .db #$C3, #%00000001
0D4CF B4 01                         .db #$B4, #%00000001
0D4D1 D4 01                         .db #$D4, #%00000001
0D4D3 A5 01                         .db #$A5, #%00000001
0D4D5 C5 01                         .db #$C5, #%00000001
0D4D7 B6 01                         .db #$B6, #%00000001
0D4D9 D6 01                         .db #$D6, #%00000001
0D4DB A7 01                         .db #$A7, #%00000001
0D4DD C7 01                         .db #$C7, #%00000001
0D4DF FF                            .db #LEVEL_END
0D4E0                           
0D4E0                           lvl_layout_08:
0D4E0 40 B5                         .db #$40, #%10110101
0D4E2 31 0D                         .db #$31, #%00001101
0D4E4 61 10                         .db #$61, #%00010000
0D4E6 42 C7                         .db #$42, #%11000111
0D4E8 52 67                         .db #$52, #%01100111
0D4EA 63 C7                         .db #$63, #%11000111
0D4EC 83 E7                         .db #$83, #%11100111
0D4EE 05 07                         .db #$05, #%00000111
0D4F0 15 3A                         .db #$15, #%00111010
0D4F2 07 63                         .db #$07, #%01100011
0D4F4 27 13                         .db #$27, #%00010011
0D4F6 38 A5                         .db #$38, #%10100101
0D4F8 09 14                         .db #$09, #%00010100
0D4FA 19 05                         .db #$19, #%00000101
0D4FC D0 E0                         .db #$D0, #%11100000
0D4FE C2 A0                         .db #$C2, #%10100000
0D500 B3 E0                         .db #$B3, #%11100000
0D502 D5 E0                         .db #$D5, #%11100000
0D504 C6 E0                         .db #$C6, #%11100000
0D506 B0 C4                         .db #$B0, #%11000100
0D508 C0 A4                         .db #$C0, #%10100100
0D50A D1 A4                         .db #$D1, #%10100100
0D50C C4 24                         .db #$C4, #%00100100
0D50E C5 04                         .db #$C5, #%00000100
0D510 B7 44                         .db #$B7, #%01000100
0D512 B8 A4                         .db #$B8, #%10100100
0D514 D9 05                         .db #$D9, #%00000101
0D516 FF                            .db #LEVEL_END
0D517                           
0D517                           lvl_layout_09:
0D517 81 04                         .db #$81, #%00000100
0D519 D1 04                         .db #$D1, #%00000100
0D51B 32 C4                         .db #$32, #%11000100
0D51D A2 C4                         .db #$A2, #%11000100
0D51F C2 24                         .db #$C2, #%00100100
0D521 13 24                         .db #$13, #%00100100
0D523 53 04                         .db #$53, #%00000100
0D525 C3 27                         .db #$C3, #%00100111
0D527 15 6C                         .db #$15, #%01101100
0D529 55 6C                         .db #$55, #%01101100
0D52B 95 6C                         .db #$95, #%01101100
0D52D D5 0C                         .db #$D5, #%00001100
0D52F 27 C7                         .db #$27, #%11000111
0D531 47 C7                         .db #$47, #%11000111
0D533 67 C7                         .db #$67, #%11000111
0D535 87 C7                         .db #$87, #%11000111
0D537 A7 C7                         .db #$A7, #%11000111
0D539 C7 C7                         .db #$C7, #%11000111
0D53B 08 13                         .db #$08, #%00010011
0D53D 28 15                         .db #$28, #%00010101
0D53F 48 12                         .db #$48, #%00010010
0D541 68 15                         .db #$68, #%00010101
0D543 88 11                         .db #$88, #%00010001
0D545 A8 10                         .db #$A8, #%00010000
0D547 C8 14                         .db #$C8, #%00010100
0D549 09 07                         .db #$09, #%00000111
0D54B 19 03                         .db #$19, #%00000011
0D54D 39 05                         .db #$39, #%00000101
0D54F 59 02                         .db #$59, #%00000010
0D551 79 05                         .db #$79, #%00000101
0D553 99 01                         .db #$99, #%00000001
0D555 B9 00                         .db #$B9, #%00000000
0D557 D9 04                         .db #$D9, #%00000100
0D559 FF                            .db #LEVEL_END
0D55A                           
0D55A                           lvl_layout_10:
0D55A 00 02                         .db #$00, #%00000010
0D55C 10 C9                         .db #$10, #%11001001
0D55E 50 C9                         .db #$50, #%11001001
0D560 90 C9                         .db #$90, #%11001001
0D562 D0 C9                         .db #$D0, #%11001001
0D564 31 C9                         .db #$31, #%11001001
0D566 71 C9                         .db #$71, #%11001001
0D568 B1 C9                         .db #$B1, #%11001001
0D56A 13 C9                         .db #$13, #%11001001
0D56C 53 C9                         .db #$53, #%11001001
0D56E 93 C9                         .db #$93, #%11001001
0D570 D3 C9                         .db #$D3, #%11001001
0D572 34 C9                         .db #$34, #%11001001
0D574 74 C9                         .db #$74, #%11001001
0D576 B4 C9                         .db #$B4, #%11001001
0D578 16 C9                         .db #$16, #%11001001
0D57A 56 C9                         .db #$56, #%11001001
0D57C 96 C9                         .db #$96, #%11001001
0D57E D6 C9                         .db #$D6, #%11001001
0D580 37 C9                         .db #$37, #%11001001
0D582 77 C9                         .db #$77, #%11001001
0D584 B7 C9                         .db #$B7, #%11001001
0D586 D8 12                         .db #$D8, #%00010010
0D588 FF                            .db #LEVEL_END
0D589                           
0D589                           lvl_layout_11:
0D589 00 65                         .db #$00, #%01100101
0D58B 40 45                         .db #$40, #%01000101
0D58D 50 A7                         .db #$50, #%10100111
0D58F 80 05                         .db #$80, #%00000101
0D591 90 A7                         .db #$90, #%10100111
0D593 A0 65                         .db #$A0, #%01100101
0D595 01 43                         .db #$01, #%01000011
0D597 31 23                         .db #$31, #%00100011
0D599 61 A7                         .db #$61, #%10100111
0D59B 81 A7                         .db #$81, #%10100111
0D59D A1 63                         .db #$A1, #%01100011
0D59F 02 44                         .db #$02, #%01000100
0D5A1 32 44                         .db #$32, #%01000100
0D5A3 92 04                         .db #$92, #%00000100
0D5A5 A2 64                         .db #$A2, #%01100100
0D5A7 03 40                         .db #$03, #%01000000
0D5A9 33 40                         .db #$33, #%01000000
0D5AB 64 81                         .db #$64, #%10000001
0D5AD 84 82                         .db #$84, #%10000010
0D5AF 93 00                         .db #$93, #%00000000
0D5B1 A3 60                         .db #$A3, #%01100000
0D5B3 04 41                         .db #$04, #%01000001
0D5B5 34 41                         .db #$34, #%01000001
0D5B7 94 02                         .db #$94, #%00000010
0D5B9 A4 62                         .db #$A4, #%01100010
0D5BB 05 47                         .db #$05, #%01000111
0D5BD 35 67                         .db #$35, #%01100111
0D5BF 75 0A                         .db #$75, #%00001010
0D5C1 85 47                         .db #$85, #%01000111
0D5C3 B5 47                         .db #$B5, #%01000111
0D5C5 06 E7                         .db #$06, #%11100111
0D5C7 16 5A                         .db #$16, #%01011010
0D5C9 26 11                         .db #$26, #%00010001
0D5CB 46 13                         .db #$46, #%00010011
0D5CD 56 1A                         .db #$56, #%00011010
0D5CF 66 14                         .db #$66, #%00010100
0D5D1 86 10                         .db #$86, #%00010000
0D5D3 96 5A                         .db #$96, #%01011010
0D5D5 A6 12                         .db #$A6, #%00010010
0D5D7 C6 15                         .db #$C6, #%00010101
0D5D9 D6 E7                         .db #$D6, #%11100111
0D5DB FF                            .db #LEVEL_END
0D5DC                           
0D5DC                           lvl_layout_12:
0D5DC 00 00                         .db #$00, #%00000000
0D5DE 50 C0                         .db #$50, #%11000000
0D5E0 80 00                         .db #$80, #%00000000
0D5E2 61 00                         .db #$61, #%00000000
0D5E4 22 C0                         .db #$22, #%11000000
0D5E6 82 E0                         .db #$82, #%11100000
0D5E8 C2 E0                         .db #$C2, #%11100000
0D5EA A3 20                         .db #$A3, #%00100000
0D5EC C3 10                         .db #$C3, #%00010000
0D5EE 04 00                         .db #$04, #%00000000
0D5F0 54 20                         .db #$54, #%00100000
0D5F2 15 0A                         .db #$15, #%00001010
0D5F4 25 C0                         .db #$25, #%11000000
0D5F6 55 E0                         .db #$55, #%11100000
0D5F8 86 20                         .db #$86, #%00100000
0D5FA C6 E0                         .db #$C6, #%11100000
0D5FC C7 A0                         .db #$C7, #%10100000
0D5FE 88 00                         .db #$88, #%00000000
0D600 59 00                         .db #$59, #%00000000
0D602 89 20                         .db #$89, #%00100000
0D604 D9 1A                         .db #$D9, #%00011010
0D606 FF                            .db #LEVEL_END
0D607                           
0D607                           lvl_layout_13:
0D607 10 E0                         .db #$10, #%11100000
0D609 20 E0                         .db #$20, #%11100000
0D60B 30 E0                         .db #$30, #%11100000
0D60D 40 40                         .db #$40, #%01000000
0D60F 80 60                         .db #$80, #%01100000
0D611 C0 E0                         .db #$C0, #%11100000
0D613 D0 E0                         .db #$D0, #%11100000
0D615 41 40                         .db #$41, #%01000000
0D617 71 60                         .db #$71, #%01100000
0D619 52 60                         .db #$52, #%01100000
0D61B A2 20                         .db #$A2, #%00100000
0D61D 43 60                         .db #$43, #%01100000
0D61F 83 60                         .db #$83, #%01100000
0D621 14 74                         .db #$14, #%01110100
0D623 54 74                         .db #$54, #%01110100
0D625 94 74                         .db #$94, #%01110100
0D627 D4 14                         .db #$D4, #%00010100
0D629 15 0D                         .db #$15, #%00001101
0D62B 55 0D                         .db #$55, #%00001101
0D62D 95 0D                         .db #$95, #%00001101
0D62F D5 0D                         .db #$D5, #%00001101
0D631 26 0D                         .db #$26, #%00001101
0D633 46 0D                         .db #$46, #%00001101
0D635 66 0D                         .db #$66, #%00001101
0D637 86 0D                         .db #$86, #%00001101
0D639 A6 0D                         .db #$A6, #%00001101
0D63B C6 0D                         .db #$C6, #%00001101
0D63D 07 10                         .db #$07, #%00010000
0D63F 37 0D                         .db #$37, #%00001101
0D641 77 0D                         .db #$77, #%00001101
0D643 B7 0D                         .db #$B7, #%00001101
0D645 28 0D                         .db #$28, #%00001101
0D647 48 0D                         .db #$48, #%00001101
0D649 68 0D                         .db #$68, #%00001101
0D64B 88 0D                         .db #$88, #%00001101
0D64D A8 0D                         .db #$A8, #%00001101
0D64F C8 0D                         .db #$C8, #%00001101
0D651 19 0D                         .db #$19, #%00001101
0D653 59 0D                         .db #$59, #%00001101
0D655 99 0D                         .db #$99, #%00001101
0D657 D9 0D                         .db #$D9, #%00001101
0D659 FF                            .db #LEVEL_END
0D65A                           
0D65A                           lvl_layout_14:
0D65A 00 67                         .db #$00, #%01100111
0D65C 40 67                         .db #$40, #%01100111
0D65E 80 67                         .db #$80, #%01100111
0D660 C0 27                         .db #$C0, #%00100111
0D662 01 27                         .db #$01, #%00100111
0D664 31 C7                         .db #$31, #%11000111
0D666 51 C7                         .db #$51, #%11000111
0D668 71 C7                         .db #$71, #%11000111
0D66A 91 C7                         .db #$91, #%11000111
0D66C B1 C7                         .db #$B1, #%11000111
0D66E D1 07                         .db #$D1, #%00000111
0D670 02 E7                         .db #$02, #%11100111
0D672 06 E7                         .db #$06, #%11100111
0D674 13 07                         .db #$13, #%00000111
0D676 D3 07                         .db #$D3, #%00000111
0D678 15 07                         .db #$15, #%00000111
0D67A 35 07                         .db #$35, #%00000111
0D67C 55 07                         .db #$55, #%00000111
0D67E 75 07                         .db #$75, #%00000111
0D680 95 07                         .db #$95, #%00000111
0D682 B5 07                         .db #$B5, #%00000111
0D684 D5 07                         .db #$D5, #%00000111
0D686 17 07                         .db #$17, #%00000111
0D688 37 C7                         .db #$37, #%11000111
0D68A 57 C7                         .db #$57, #%11000111
0D68C 77 C7                         .db #$77, #%11000111
0D68E 97 C7                         .db #$97, #%11000111
0D690 B7 C7                         .db #$B7, #%11000111
0D692 D7 07                         .db #$D7, #%00000111
0D694 19 07                         .db #$19, #%00000111
0D696 D9 07                         .db #$D9, #%00000111
0D698 22 4C                         .db #$22, #%01001100
0D69A 62 4C                         .db #$62, #%01001100
0D69C A2 4C                         .db #$A2, #%01001100
0D69E 24 0C                         .db #$24, #%00001100
0D6A0 44 0C                         .db #$44, #%00001100
0D6A2 64 0C                         .db #$64, #%00001100
0D6A4 84 0C                         .db #$84, #%00001100
0D6A6 A4 0C                         .db #$A4, #%00001100
0D6A8 C4 0C                         .db #$C4, #%00001100
0D6AA 26 0C                         .db #$26, #%00001100
0D6AC 46 0C                         .db #$46, #%00001100
0D6AE 66 0C                         .db #$66, #%00001100
0D6B0 86 0C                         .db #$86, #%00001100
0D6B2 A6 0C                         .db #$A6, #%00001100
0D6B4 C6 0C                         .db #$C6, #%00001100
0D6B6 28 4C                         .db #$28, #%01001100
0D6B8 68 4C                         .db #$68, #%01001100
0D6BA A8 4C                         .db #$A8, #%01001100
0D6BC 32 04                         .db #$32, #%00000100
0D6BE 52 04                         .db #$52, #%00000100
0D6C0 72 04                         .db #$72, #%00000100
0D6C2 92 04                         .db #$92, #%00000100
0D6C4 B2 04                         .db #$B2, #%00000100
0D6C6 38 04                         .db #$38, #%00000100
0D6C8 58 04                         .db #$58, #%00000100
0D6CA 78 04                         .db #$78, #%00000100
0D6CC 98 04                         .db #$98, #%00000100
0D6CE B8 04                         .db #$B8, #%00000100
0D6D0 FF                            .db #LEVEL_END
0D6D1                           
0D6D1                           lvl_layout_15:
0D6D1 00 7A                         .db #$00, #%01111010
0D6D3 40 7A                         .db #$40, #%01111010
0D6D5 80 7A                         .db #$80, #%01111010
0D6D7 C0 3A                         .db #$C0, #%00111010
0D6D9 61 64                         .db #$61, #%01100100
0D6DB 05 E4                         .db #$05, #%11100100
0D6DD 15 64                         .db #$15, #%01100100
0D6DF 55 64                         .db #$55, #%01100100
0D6E1 95 64                         .db #$95, #%01100100
0D6E3 D5 E4                         .db #$D5, #%11100100
0D6E5 26 04                         .db #$26, #%00000100
0D6E7 46 44                         .db #$46, #%01000100
0D6E9 76 64                         .db #$76, #%01100100
0D6EB C6 04                         .db #$C6, #%00000100
0D6ED 17 04                         .db #$17, #%00000100
0D6EF 37 64                         .db #$37, #%01100100
0D6F1 77 44                         .db #$77, #%01000100
0D6F3 B7 04                         .db #$B7, #%00000100
0D6F5 18 64                         .db #$18, #%01100100
0D6F7 58 64                         .db #$58, #%01100100
0D6F9 98 64                         .db #$98, #%01100100
0D6FB FF                            .db #LEVEL_END
0D6FC                           
0D6FC                           lvl_layout_16:
0D6FC 10 E1                         .db #$10, #%11100001
0D6FE 20 9A                         .db #$20, #%10011010
0D700 30 E1                         .db #$30, #%11100001
0D702 40 E1                         .db #$40, #%11100001
0D704 50 E1                         .db #$50, #%11100001
0D706 60 C1                         .db #$60, #%11000001
0D708 70 E1                         .db #$70, #%11100001
0D70A 80 E1                         .db #$80, #%11100001
0D70C 90 E1                         .db #$90, #%11100001
0D70E A0 61                         .db #$A0, #%01100001
0D710 21 C1                         .db #$21, #%11000001
0D712 A1 1A                         .db #$A1, #%00011010
0D714 B1 41                         .db #$B1, #%01000001
0D716 A2 E1                         .db #$A2, #%11100001
0D718 B2 E1                         .db #$B2, #%11100001
0D71A C2 1A                         .db #$C2, #%00011010
0D71C D2 E1                         .db #$D2, #%11100001
0D71E 63 1A                         .db #$63, #%00011010
0D720 C3 C1                         .db #$C3, #%11000001
0D722 14 61                         .db #$14, #%01100001
0D724 54 61                         .db #$54, #%01100001
0D726 94 C1                         .db #$94, #%11000001
0D728 15 61                         .db #$15, #%01100001
0D72A 55 41                         .db #$55, #%01000001
0D72C 85 1A                         .db #$85, #%00011010
0D72E 16 41                         .db #$16, #%01000001
0D730 46 1A                         .db #$46, #%00011010
0D732 56 61                         .db #$56, #%01100001
0D734 A6 61                         .db #$A6, #%01100001
0D736 17 67                         .db #$17, #%01100111
0D738 57 67                         .db #$57, #%01100111
0D73A 97 67                         .db #$97, #%01100111
0D73C D7 07                         .db #$D7, #%00000111
0D73E 28 41                         .db #$28, #%01000001
0D740 58 61                         .db #$58, #%01100001
0D742 A8 41                         .db #$A8, #%01000001
0D744 18 11                         .db #$18, #%00010001
0D746 38 11                         .db #$38, #%00010001
0D748 98 11                         .db #$98, #%00010001
0D74A B8 11                         .db #$B8, #%00010001
0D74C D8 11                         .db #$D8, #%00010001
0D74E 59 09                         .db #$59, #%00001001
0D750 FF                            .db #LEVEL_END
0D751                           
0D751                           lvl_layout_17:
0D751 10 EA                         .db #$10, #%11101010
0D753 20 E2                         .db #$20, #%11100010
0D755 30 62                         .db #$30, #%01100010
0D757 70 02                         .db #$70, #%00000010
0D759 80 6A                         .db #$80, #%01101010
0D75B 90 22                         .db #$90, #%00100010
0D75D 01 AA                         .db #$01, #%10101010
0D75F 31 6A                         .db #$31, #%01101010
0D761 81 2A                         .db #$81, #%00101010
0D763 A1 02                         .db #$A1, #%00000010
0D765 C1 02                         .db #$C1, #%00000010
0D767 D1 0A                         .db #$D1, #%00001010
0D769 32 EA                         .db #$32, #%11101010
0D76B 42 6A                         .db #$42, #%01101010
0D76D 62 02                         .db #$62, #%00000010
0D76F 92 6A                         .db #$92, #%01101010
0D771 D2 E2                         .db #$D2, #%11100010
0D773 43 1A                         .db #$43, #%00011010
0D775 53 CA                         .db #$53, #%11001010
0D777 73 02                         .db #$73, #%00000010
0D779 83 4A                         .db #$83, #%01001010
0D77B B3 CA                         .db #$B3, #%11001010
0D77D C3 EA                         .db #$C3, #%11101010
0D77F 04 0A                         .db #$04, #%00001010
0D781 14 A2                         .db #$14, #%10100010
0D783 24 AA                         .db #$24, #%10101010
0D785 44 AA                         .db #$44, #%10101010
0D787 64 6A                         .db #$64, #%01101010
0D789 65 6A                         .db #$65, #%01101010
0D78B A5 AA                         .db #$A5, #%10101010
0D78D 06 EA                         .db #$06, #%11101010
0D78F 16 62                         .db #$16, #%01100010
0D791 66 22                         .db #$66, #%00100010
0D793 86 2A                         .db #$86, #%00101010
0D795 17 42                         .db #$17, #%01000010
0D797 47 12                         .db #$47, #%00010010
0D799 57 6A                         .db #$57, #%01101010
0D79B 97 4A                         .db #$97, #%01001010
0D79D A7 02                         .db #$A7, #%00000010
0D79F 18 02                         .db #$18, #%00000010
0D7A1 28 0A                         .db #$28, #%00001010
0D7A3 38 22                         .db #$38, #%00100010
0D7A5 68 2A                         .db #$68, #%00101010
0D7A7 88 62                         .db #$88, #%01100010
0D7A9 C8 0A                         .db #$C8, #%00001010
0D7AB D8 02                         .db #$D8, #%00000010
0D7AD 19 2A                         .db #$19, #%00101010
0D7AF 39 2A                         .db #$39, #%00101010
0D7B1 69 42                         .db #$69, #%01000010
0D7B3 99 2A                         .db #$99, #%00101010
0D7B5 B9 42                         .db #$B9, #%01000010
0D7B7 FF                            .db #LEVEL_END
0D7B8                           
0D7B8                           lvl_layout_18:
0D7B8 00 12                         .db #$00, #%00010010
0D7BA 40 1A                         .db #$40, #%00011010
0D7BC 50 11                         .db #$50, #%00010001
0D7BE 70 1A                         .db #$70, #%00011010
0D7C0 80 10                         .db #$80, #%00010000
0D7C2 D0 13                         .db #$D0, #%00010011
0D7C4 01 1A                         .db #$01, #%00011010
0D7C6 22 15                         .db #$22, #%00010101
0D7C8 A2 1A                         .db #$A2, #%00011010
0D7CA B2 14                         .db #$B2, #%00010100
0D7CC 03 67                         .db #$03, #%01100111
0D7CE 43 67                         .db #$43, #%01100111
0D7D0 83 67                         .db #$83, #%01100111
0D7D2 24 09                         .db #$24, #%00001001
0D7D4 74 0D                         .db #$74, #%00001101
0D7D6 C4 0A                         .db #$C4, #%00001010
0D7D8 05 A7                         .db #$05, #%10100111
0D7DA 45 27                         .db #$45, #%00100111
0D7DC 95 27                         .db #$95, #%00100111
0D7DE 16 C7                         .db #$16, #%11000111
0D7E0 36 67                         .db #$36, #%01100111
0D7E2 86 67                         .db #$86, #%01100111
0D7E4 D6 07                         .db #$D6, #%00000111
0D7E6 07 A3                         .db #$07, #%10100011
0D7E8 27 23                         .db #$27, #%00100011
0D7EA 47 C7                         .db #$47, #%11000111
0D7EC 57 A0                         .db #$57, #%10100000
0D7EE 67 A7                         .db #$67, #%10100111
0D7F0 77 20                         .db #$77, #%00100000
0D7F2 97 C7                         .db #$97, #%11000111
0D7F4 A7 A4                         .db #$A7, #%10100100
0D7F6 B7 A7                         .db #$B7, #%10100111
0D7F8 C7 24                         .db #$C7, #%00100100
0D7FA 28 0B                         .db #$28, #%00001011
0D7FC 38 A3                         .db #$38, #%10100011
0D7FE 78 08                         .db #$78, #%00001000
0D800 88 A0                         .db #$88, #%10100000
0D802 C8 0C                         .db #$C8, #%00001100
0D804 D8 A4                         .db #$D8, #%10100100
0D806 09 43                         .db #$09, #%01000011
0D808 59 40                         .db #$59, #%01000000
0D80A A9 44                         .db #$A9, #%01000100
0D80C FF                            .db #LEVEL_END
0D80D                           
0D80D                           lvl_layout_19:
0D80D 11 A8                         .db #$11, #%10101000
0D80F 21 68                         .db #$21, #%01101000
0D811 81 28                         .db #$81, #%00101000
0D813 B1 48                         .db #$B1, #%01001000
0D815 22 48                         .db #$22, #%01001000
0D817 62 68                         .db #$62, #%01101000
0D819 B2 28                         .db #$B2, #%00101000
0D81B 23 28                         .db #$23, #%00101000
0D81D 83 28                         .db #$83, #%00101000
0D81F B3 28                         .db #$B3, #%00101000
0D821 04 E8                         .db #$04, #%11101000
0D823 24 08                         .db #$24, #%00001000
0D825 44 08                         .db #$44, #%00001000
0D827 64 E8                         .db #$64, #%11101000
0D829 84 E8                         .db #$84, #%11101000
0D82B C4 A8                         .db #$C4, #%10101000
0D82D D4 E8                         .db #$D4, #%11101000
0D82F 15 48                         .db #$15, #%01001000
0D831 55 C8                         .db #$55, #%11001000
0D833 75 C8                         .db #$75, #%11001000
0D835 A5 08                         .db #$A5, #%00001000
0D837 36 08                         .db #$36, #%00001000
0D839 B6 08                         .db #$B6, #%00001000
0D83B 27 48                         .db #$27, #%01001000
0D83D 97 28                         .db #$97, #%00101000
0D83F C7 08                         .db #$C7, #%00001000
0D841 09 61                         .db #$09, #%01100001
0D843 19 11                         .db #$19, #%00010001
0D845 49 61                         .db #$49, #%01100001
0D847 89 31                         .db #$89, #%00110001
0D849 A9 61                         .db #$A9, #%01100001
0D84B FF                            .db #LEVEL_END
0D84C                           
0D84C                           lvl_layout_20:
0D84C 00 60                         .db #$00, #%01100000
0D84E 10 1A                         .db #$10, #%00011010
0D850 40 A7                         .db #$40, #%10100111
0D852 50 20                         .db #$50, #%00100000
0D854 70 1A                         .db #$70, #%00011010
0D856 80 40                         .db #$80, #%01000000
0D858 B0 1A                         .db #$B0, #%00011010
0D85A C0 20                         .db #$C0, #%00100000
0D85C 01 40                         .db #$01, #%01000000
0D85E 31 1A                         .db #$31, #%00011010
0D860 A1 40                         .db #$A1, #%01000000
0D862 D1 1A                         .db #$D1, #%00011010
0D864 43 67                         .db #$43, #%01100111
0D866 83 47                         .db #$83, #%01000111
0D868 44 A7                         .db #$44, #%10100111
0D86A 54 25                         .db #$54, #%00100101
0D86C 94 08                         .db #$94, #%00001000
0D86E A4 A7                         .db #$A4, #%10100111
0D870 55 05                         .db #$55, #%00000101
0D872 65 08                         .db #$65, #%00001000
0D874 06 27                         .db #$06, #%00100111
0D876 36 67                         .db #$36, #%01100111
0D878 76 28                         .db #$76, #%00101000
0D87A A6 27                         .db #$A6, #%00100111
0D87C D6 07                         .db #$D6, #%00000111
0D87E A7 A7                         .db #$A7, #%10100111
0D880 08 60                         .db #$08, #%01100000
0D882 09 60                         .db #$09, #%01100000
0D884 18 A7                         .db #$18, #%10100111
0D886 48 A7                         .db #$48, #%10100111
0D888 58 47                         .db #$58, #%01000111
0D88A 88 27                         .db #$88, #%00100111
0D88C B8 20                         .db #$B8, #%00100000
0D88E D8 1A                         .db #$D8, #%00011010
0D890 59 15                         .db #$59, #%00010101
0D892 69 60                         .db #$69, #%01100000
0D894 A9 60                         .db #$A9, #%01100000
0D896 FF                            .db #LEVEL_END
0D897                           
0D897                           lvl_layout_21:
0D897 00 13                         .db #$00, #%00010011
0D899 10 11                         .db #$10, #%00010001
0D89B 20 67                         .db #$20, #%01100111
0D89D 60 67                         .db #$60, #%01100111
0D89F A0 47                         .db #$A0, #%01000111
0D8A1 D0 15                         .db #$D0, #%00010101
0D8A3 32 63                         .db #$32, #%01100011
0D8A5 72 05                         .db #$72, #%00000101
0D8A7 82 43                         .db #$82, #%01000011
0D8A9 B2 43                         .db #$B2, #%01000011
0D8AB 33 03                         .db #$33, #%00000011
0D8AD 43 2A                         .db #$43, #%00101010
0D8AF 63 7A                         .db #$63, #%01111010
0D8B1 73 2A                         .db #$73, #%00101010
0D8B3 A3 7A                         .db #$A3, #%01111010
0D8B5 34 63                         .db #$34, #%01100011
0D8B7 74 63                         .db #$74, #%01100011
0D8B9 B4 43                         .db #$B4, #%01000011
0D8BB 06 63                         .db #$06, #%01100011
0D8BD 46 63                         .db #$46, #%01100011
0D8BF 86 63                         .db #$86, #%01100011
0D8C1 C6 C3                         .db #$C6, #%11000011
0D8C3 07 7A                         .db #$07, #%01111010
0D8C5 47 7A                         .db #$47, #%01111010
0D8C7 67 0A                         .db #$67, #%00001010
0D8C9 87 7A                         .db #$87, #%01111010
0D8CB 08 13                         .db #$08, #%00010011
0D8CD 18 43                         .db #$18, #%01000011
0D8CF 48 63                         .db #$48, #%01100011
0D8D1 88 63                         .db #$88, #%01100011
0D8D3 FF                            .db #LEVEL_END
0D8D4                           
0D8D4                           lvl_layout_22:
0D8D4 00 7A                         .db #$00, #%01111010
0D8D6 40 7A                         .db #$40, #%01111010
0D8D8 80 7A                         .db #$80, #%01111010
0D8DA C0 3A                         .db #$C0, #%00111010
0D8DC 13 67                         .db #$13, #%01100111
0D8DE 83 A7                         .db #$83, #%10100111
0D8E0 B3 07                         .db #$B3, #%00000111
0D8E2 14 07                         .db #$14, #%00000111
0D8E4 44 07                         .db #$44, #%00000111
0D8E6 A4 07                         .db #$A4, #%00000111
0D8E8 15 A5                         .db #$15, #%10100101
0D8EA 45 A5                         .db #$45, #%10100101
0D8EC 85 25                         .db #$85, #%00100101
0D8EE 86 05                         .db #$86, #%00000101
0D8F0 A6 05                         .db #$A6, #%00000101
0D8F2 17 11                         .db #$17, #%00010001
0D8F4 47 A1                         .db #$47, #%10100001
0D8F6 87 A1                         .db #$87, #%10100001
0D8F8 B7 A1                         .db #$B7, #%10100001
0D8FA 18 41                         .db #$18, #%01000001
0D8FC 68 01                         .db #$68, #%00000001
0D8FE D8 01                         .db #$D8, #%00000001
0D900 FF                            .db #LEVEL_END
0D901                           
0D901                           lvl_layout_23:
0D901 00 71                         .db #$00, #%01110001
0D903 40 11                         .db #$40, #%00010001
0D905 50 43                         .db #$50, #%01000011
0D907 80 D1                         .db #$80, #%11010001
0D909 90 E3                         .db #$90, #%11100011
0D90B A0 63                         .db #$A0, #%01100011
0D90D 01 63                         .db #$01, #%01100011
0D90F 41 63                         .db #$41, #%01100011
0D911 A1 63                         .db #$A1, #%01100011
0D913 02 63                         .db #$02, #%01100011
0D915 42 63                         .db #$42, #%01100011
0D917 62 11                         .db #$62, #%00010001
0D919 A2 67                         .db #$A2, #%01100111
0D91B 04 63                         .db #$04, #%01100011
0D91D 44 23                         .db #$44, #%00100011
0D91F 64 D1                         .db #$64, #%11010001
0D921 74 E3                         .db #$74, #%11100011
0D923 84 F1                         .db #$84, #%11110001
0D925 94 E3                         .db #$94, #%11100011
0D927 A4 C7                         .db #$A4, #%11000111
0D929 B4 23                         .db #$B4, #%00100011
0D92B 05 63                         .db #$05, #%01100011
0D92D 45 23                         .db #$45, #%00100011
0D92F 06 71                         .db #$06, #%01110001
0D931 46 11                         .db #$46, #%00010001
0D933 56 E3                         .db #$56, #%11100011
0D935 D6 07                         .db #$D6, #%00000111
0D937 17 D1                         .db #$17, #%11010001
0D939 27 43                         .db #$27, #%01000011
0D93B 67 D1                         .db #$67, #%11010001
0D93D A7 C7                         .db #$A7, #%11000111
0D93F C7 A7                         .db #$C7, #%10100111
0D941 D7 B3                         .db #$D7, #%10110011
0D943 28 43                         .db #$28, #%01000011
0D945 78 43                         .db #$78, #%01000011
0D947 29 43                         .db #$29, #%01000011
0D949 79 43                         .db #$79, #%01000011
0D94B FF                           .db #LEVEL_END
0D94C                           
0D94C                           lvl_layout_24:
0D94C 02 67                         .db #$02, #%01100111
0D94E 42 67                         .db #$42, #%01100111
0D950 82 67                         .db #$82, #%01100111
0D952 05 67                         .db #$05, #%01100111
0D954 45 67                         .db #$45, #%01100111
0D956 85 67                         .db #$85, #%01100111
0D958 08 67                         .db #$08, #%01100111
0D95A 48 67                         .db #$48, #%01100111
0D95C 88 67                         .db #$88, #%01100111
0D95E 30 E7                         .db #$30, #%11100111
0D960 70 E7                         .db #$70, #%11100111
0D962 B0 E7                         .db #$B0, #%11100111
0D964 34 E7                         .db #$34, #%11100111
0D966 74 E7                         .db #$74, #%11100111
0D968 B4 E7                         .db #$B4, #%11100111
0D96A 20 13                         .db #$20, #%00010011
0D96C 40 10                         .db #$40, #%00010000
0D96E 80 02                         .db #$80, #%00000010
0D970 41 05                         .db #$41, #%00000101
0D972 B1 09                         .db #$B1, #%00001001
0D974 02 09                         .db #$02, #%00001001
0D976 52 0C                         .db #$52, #%00001100
0D978 13 11                         .db #$13, #%00010001
0D97A 33 04                         .db #$33, #%00000100
0D97C 74 0C                         .db #$74, #%00001100
0D97E B4 08                         .db #$B4, #%00001000
0D980 15 09                         .db #$15, #%00001001
0D982 55 0C                         .db #$55, #%00001100
0D984 95 0C                         .db #$95, #%00001100
0D986 47 03                         .db #$47, #%00000011
0D988 A7 12                         .db #$A7, #%00010010
0D98A 18 15                         .db #$18, #%00010101
0D98C 09 05                         .db #$09, #%00000101
0D98E 19 03                         .db #$19, #%00000011
0D990 FF                            .db #LEVEL_END
0D991                           
0D991                           lvl_layout_25:
0D991 00 12                         .db #$00, #%00010010
0D993 10 63                         .db #$10, #%01100011
0D995 60 63                         .db #$60, #%01100011
0D997 A0 07                         .db #$A0, #%00000111
0D999 01 11                         .db #$01, #%00010001
0D99B A1 02                         .db #$A1, #%00000010
0D99D 02 67                         .db #$02, #%01100111
0D99F 42 07                         .db #$42, #%00000111
0D9A1 62 67                         .db #$62, #%01100111
0D9A3 A2 C7                         .db #$A2, #%11000111
0D9A5 03 61                         .db #$03, #%01100001
0D9A7 43 01                         .db #$43, #%00000001
0D9A9 63 61                         .db #$63, #%01100001
0D9AB A6 E7                         .db #$A6, #%11100111
0D9AD B6 47                         .db #$B6, #%01000111
0D9AF C6 01                         .db #$C6, #%00000001
0D9B1 B7 42                         .db #$B7, #%01000010
0D9B3 B8 42                         .db #$B8, #%01000010
0D9B5 C8 0A                         .db #$C8, #%00001010
0D9B7 09 7A                         .db #$09, #%01111010
0D9B9 49 7A                         .db #$49, #%01111010
0D9BB 89 3A                         .db #$89, #%00111010
0D9BD B9 42                         .db #$B9, #%01000010
0D9BF FF                            .db #LEVEL_END
0D9C0                           
0D9C0                           ;; Level layout address pointers
0D9C0                           tbl_lvl_layout_hi:
0D9C0                           ifdef TESTING
0D9C0 D2                            .db >#lvl_test
0D9C1                           endif
0D9C1 D2 D3 D3 D3 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D9C6 D4 D4 D4 D5 D5                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D9CB D5 D5 D6 D6 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D9D0 D6 D7 D7 D8 D8                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D9D5 D8 D8 D9 D9 D9                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D9DA                           
0D9DA                           tbl_lvl_layout_lo:
0D9DA                           ifdef TESTING
0D9DA D6                            .db <#lvl_test
0D9DB                           endif
0D9DB E7 02 37 6A DB                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D9E0 16 9F E0 17 5A                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D9E5 89 DC 07 5A D1                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D9EA FC 51 B8 0D 4C                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D9EF 97 D4 01 4C 91                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D9F4                           
0D9F4                           ;; Ball start position (#$YX)
0D9F4                           tbl_lvl_ball_startpos:
0D9F4                           ifdef TESTING
0D9F4 29                            .db #$29
0D9F5                           endif
0D9F5 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D9FA 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D9FF 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0DA04 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0DA09 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0DA0E                           
0DA0E                               
0DA0E                           ;; Ball start direction, color and tile score
0DA0E                           ;; #% ccc v tttt
0DA0E                           ;;    ||| | ++++-- tile score
0DA0E                           ;;    ||| +------- vertical direction, up (0) or down
0DA0E                           ;;    +++--------- color (CBRYGM)
0DA0E                           tbl_lvl_ball_init:
0DA0E                           ifdef TESTING
0DA0E 20                            .db #%00100000
0DA0F                           endif
0DA0F 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0DA14 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0DA19 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0DA1E 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0DA23 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0DA28                           
0DA28                           
0DA28                           
0DA28                           ;; Helper table to multiply values by 16
0DA28                           tbl_Times16:
0DA28 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0DA30 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0DA38                               
0DA38                           
0DA38                           ;; Helper table to multiply values by 64
0DA38                           tbl_Times64:
0DA38 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0DA3C                           
0DA3C                           
0DA3C                           ;; Metatile ID to CHR data mapper
0DA3C                           tbl_GametileTopLeft:
0DA3C 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0DA46                           
0DA46                           tbl_GametileTopRight:
0DA46 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0DA50                           
0DA50                           tbl_GametileBottomLeft:
0DA50 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0DA5A                           
0DA5A                           tbl_GametileBottomRight:
0DA5A 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DA64                           
0DA64                           ;; Metatile ID to RAM byte data mapper
0DA64                           tbl_GameTileRamByte:
0DA64 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DA69                           
0DA69                           ;; HUD text data (with opaque background tile for sprite zero)
0DA69                           tbl_HudText:
0DA69 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DA71 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DA78 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DA80 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DA87                           
0DA87                           ;; Move block top left tile based on color
0DA87                           tbl_MoveBlockTopLeftTile:
0DA87 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DA8E                           
0DA8E                           ;; Game over data
0DA8E                           tbl_GameOver:
0DA8E 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DA92 00 00                         .db #_SPACE, #_SPACE
0DA94 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DA98                           
0DA98                           ;; Background fade pallette table
0DA98                           tbl_BackgroundFade:
0DA98 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DAA2                           
0DAA2                           ;; Sound effects
0DAA2                           .include "game/include/table/sfx.asm"
0DAA2                           ;;
0DAA2                           ;; Explosion sound effects
0DAA2                           ;;
0DAA2                           ;;   #% ffff vvvv
0DAA2                           ;;      |||| ++++---- volume (0=low, 15=high)
0DAA2                           ;;      ++++-------- frequency (0=low, 15=high)
0DAA2                           ;;
0DAA2                           ;; #$FF = end of sfx
0DAA2                           ;;
0DAA2                           
0DAA2                           tbl_ExplosionSfx:
0DAA2 00                            .db #$00 ; buffer byte
0DAA3 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DAAB 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DAB3 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DABB 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DAC3 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DACB 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DAD0                           
0DAD0                           tbl_ThudSfx:
0DAD0 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DAD1 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DAD9 E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DADE                           
0DADE                           tbl_BounceSfx:
0DADE 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DADF 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DAE3                           
0DAE3 00                            .db #$00
0DAE4                           
0DAE4                           tbl_Sfx_hi:
0DAE4 DA DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DAE7                           
0DAE7                           tbl_Sfx_lo:
0DAE7 A2 D0 DE                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DAEA                           
0DAEA                           
0DAEA                           ;; Volume envelope for move sound effect (reversed)
0DAEA                           tbl_MoveSfxVolume:
0DAEA 70 70 72 73 7B 7C 7B 7B       .db #$70, #$70, #$72, #$73, #$7B, #$7C, #$7B, #$7B
0DAF2 79 79 78 77 76 76 75 75       .db #$79, #$79, #$78, #$77, #$76, #$76, #$75, #$75
0DAFA 74 74 73 73 73 73 72 71       .db #$74, #$74, #$73, #$73, #$73, #$73, #$72, #$71
0DB02                           
0DB02                           ;; Volume and frequency table for paint sound effect (reversed)
0DB02 00                        tbl_PaintSfxVolume: .db #$00
0DB03 B0 B1 B2 B3 B2 B4 B6 B3       .db #$B0, #$B1, #$B2, #$B3, #$B2, #$B4, #$B6, #$B3
0DB0B B6 B9 B5 B9 B5 B9 B5 B9       .db #$B6, #$B9, #$B5, #$B9, #$B5, #$B9, #$B5, #$B9
0DB13 00                        tbl_PaintSfxFreqHi: .db #$00
0DB14 08 08 08 08 08 08 08 08       .db #$08, #$08, #$08, #$08, #$08, #$08, #$08, #$08
0DB1C 08 09 08 09 09 09 09 09       .db #$08, #$09, #$08, #$09, #$09, #$09, #$09, #$09
0DB24 00                        tbl_PaintSfxFreqLo: .db #$00
0DB25 68 90 B8 E0 A4 CC F4 BC       .db #$68, #$90, #$B8, #$E0, #$A4, #$CC, #$F4, #$BC
0DB2D E4 0C F6 32 1A 56 44 80       .db #$E4, #$0C, #$F6, #$32, #$1A, #$56, #$44, #$800DB35                           
0DB35                           ;; Lookup table to convert bonus ticks to score
0DB35                           tbl_BonusToScore:
0DB35 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DB3F                           
0DB3F                           
0DB3F                           ;; NMI handler
0DB3F                           NMI:
0DB3F                               .include "interrupt/nmi.asm"
0DB3F                           
0DB3F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DB3F                           ;;
0DB3F                           ;; include/nmi.asm
0DB3F                           ;;
0DB3F                           ;; Non-maskable interrupt script. This script is being executed
0DB3F                           ;; when vBlank hits.
0DB3F                           ;;
0DB3F                           ;;
0DB3F                           
0DB3F                               ;; Preserve accumulator through stack
0DB3F 48                            PHA
0DB40                           
0DB40                               ;; Should NMI be skipped?
0DB40 A5 13                         LDA skip_nmi
0DB42 F0 03                         BEQ +
0DB44 4C 1B DD                          JMP +skip_nmi
0DB47                               +
0DB47                           
0DB47                               ;; When in NMI, skip additional NMI requests
0DB47 A9 01                         LDA #$01
0DB49 85 13                         STA skip_nmi
0DB4B                           
0DB4B                               ;; Preserve X, Y, and PC through stack
0DB4B 8A                            TXA
0DB4C 48                            PHA
0DB4D 98                            TYA
0DB4E 48                            PHA
0DB4F 08                            PHP
0DB50                               
0DB50                               ;; Check forced NMI skip
0DB50 A5 14                         LDA force_skip_nmi
0DB52 F0 03                         BEQ +
0DB54 4C 0A DD                          JMP +force_skip_nmi
0DB57                               +
0DB57                           
0DB57                               ;; Update PPU mask
0DB57                               ;LDA #$00
0DB57                               ;STA PPU_CTRL
0DB57 A5 12                         LDA soft_ppu_mask
0DB59 8D 01 20                      STA PPU_MASK
0DB5C                               
0DB5C                               
0DB5C                               ;; Additional PPU updates go here
0DB5C                               .include "game/interrupt/nmi.asm"
0DB5C                           
0DB5C                               ;; Check if ppu_buffer needs updating
0DB5C A5 39                         LDA ppu_buffer_update
0DB5E D0 03                         BNE +
0DB60 4C A2 DB                          JMP +no_ppu_buffer_update
0DB63                               +
0DB63                           
0DB63                               ;; Reset ppu control register and mask
0DB63 A2 00                         LDX #$00
0DB65 8E 00 20                      STX PPU_CTRL
0DB68 8E 01 20                      STX PPU_MASK
0DB6B                           
0DB6B                               ;; Set up loop
0DB6B                               -
0DB6B                                   ;; Reset hi/lo latch
0DB6B 2C 02 20                          BIT PPU_STATUS
0DB6E                           
0DB6E                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DB6E BD 00 03                          LDA ppu_buffer,x
0DB71 8D 06 20                          STA PPU_ADDR
0DB74 E8                                INX
0DB75 BD 00 03                          LDA ppu_buffer,x
0DB78 8D 06 20                          STA PPU_ADDR
0DB7B                           
0DB7B                                   ;; Write ppu_buffer data to PPU_ADDR
0DB7B E8                                INX
0DB7C BD 00 03                          LDA ppu_buffer,x
0DB7F 8D 07 20                          STA PPU_DATA
0DB82                           
0DB82                                   ;; Check if updating is done (eg. X is at pointer)
0DB82 E8                                INX
0DB83 E4 3A                             CPX ppu_buffer_pointer
0DB85 F0 03                             BEQ +
0DB87 4C 6B DB                      JMP -
0DB8A                           +
0DB8A                           
0DB8A                               ;; Reset ppu buffer update and pointer
0DB8A A9 00                         LDA #$00
0DB8C 85 39                         STA ppu_buffer_update
0DB8E 85 3A                         STA ppu_buffer_pointer
0DB90                               
0DB90                               ;; Reset scrolling position
0DB90 8D 05 20                      STA PPU_SCROLL
0DB93 8D 05 20                      STA PPU_SCROLL
0DB96                           
0DB96                               ;; Restore ppu control register and mask
0DB96 A9 90                         LDA #%10010000
0DB98 8D 00 20                      STA PPU_CTRL
0DB9B A5 12                         LDA soft_ppu_mask
0DB9D 8D 01 20                      STA PPU_MASK
0DBA0 A9 00                         LDA #$00
0DBA2                           
0DBA2                           ;; Continue other NMI stuff
0DBA2                           +no_ppu_buffer_update:
0DBA2                           
0DBA2                               ;; Reset sprite RAM, draw sprites
0DBA2 8D 03 20                      STA OAM_ADDR
0DBA5 A9 02                         LDA #$02
0DBA7 8D 14 40                      STA OAM_DMA
0DBAA                           
0DBAA                               ;; Decrease explosion and move block timers
0DBAA A0 04                         LDY #MAX_ANIMATIONS
0DBAC A2 00                         LDX #$00
0DBAE                               -
0DBAE BD 60 03                          LDA explosion_timer,x
0DBB1 F0 03                             BEQ +
0DBB3 DE 60 03                              DEC explosion_timer,x
0DBB6                                   +
0DBB6                           
0DBB6 BD 80 03                          LDA move_block_timer,x
0DBB9 F0 03                             BEQ +
0DBBB DE 80 03                              DEC move_block_timer,x
0DBBE                                   +
0DBBE                                   
0DBBE E8                                INX
0DBBF 88                                DEY
0DBC0 F0 03                             BEQ +done
0DBC2 4C AE DB                      JMP -
0DBC5                           +done:
0DBC5                           
0DBC5                               ;; Decrease nudge timer
0DBC5 A5 3E                         LDA nudge_timer
0DBC7 F0 02                         BEQ +
0DBC9 C6 3E                             DEC nudge_timer
0DBCB                               +
0DBCB                           
0DBCB                               ;; Decrease bonus timer
0DBCB A5 3F                         LDA bonus_timer
0DBCD F0 02                         BEQ +
0DBCF C6 3F                             DEC bonus_timer
0DBD1                               +
0DBD1                           
0DBD1                               ;; Decrease kill timer
0DBD1 A5 40                         LDA kill_timer
0DBD3 F0 02                         BEQ +
0DBD5 C6 40                             DEC kill_timer
0DBD7                               +
0DBD7                               
0DBD7                               ;; Decrease and handle unfreeze timer
0DBD7 A5 41                         LDA unfreeze_timer
0DBD9 F0 0A                         BEQ +
0DBDB C6 41                             DEC unfreeze_timer
0DBDD D0 06                             BNE +
0DBDF                                   
0DBDF A5 37                             LDA ball_flags
0DBE1 29 FB                             AND #UNFREEZE_BALL
0DBE3 85 37                             STA ball_flags
0DBE5                               +
0DBE5                           
0DBE5                               ;; Play background noise
0DBE5 A5 38                         LDA screen_mode
0DBE7 29 01                         AND #IS_GAME_SCREEN
0DBE9 F0 0C                         BEQ +
0DBEB                                   .include "game/include/main/background_sound.asm"
0DBEB                           
0DBEB                               ;; If noise is muted, no noise should play
0DBEB A5 4B                         LDA noise_muted
0DBED F0 08                         BEQ +
0DBEF A9 30                             LDA #$30
0DBF1 8D 0C 40                          STA NOISE_VOLUME
0DBF4 4C 5C DC                          JMP +endNoise
0DBF7                               +
0DBF7                               
0DBF7                               ;; At random times, set max_noise period to $03-$0A
0DBF7 A5 45                         LDA max_noise
0DBF9 D0 1D                         BNE +
0DBFB 20 35 C5                          JSR sub_GetRandomNumber
0DBFE 29 EF                             AND #%11101111
0DC00 D0 16                             BNE +
0DC02                                   
0DC02 A5 15                             LDA frame_counter
0DC04 85 16                             STA random_seed
0DC06 20 35 C5                          JSR sub_GetRandomNumber
0DC09 29 07                             AND #$07
0DC0B 69 03                             ADC #$03
0DC0D 85 45                             STA max_noise
0DC0F A9 01                             LDA #$01
0DC11 85 46                             STA sweep_noise
0DC13 A9 34                             LDA #$34
0DC15 8D 0C 40                          STA NOISE_VOLUME
0DC18                               +
0DC18                           
0DC18                               ;; if sweep noise = $00: constant noise
0DC18                               ;; else if sweep noise > $80: decrease pitch
0DC18                               ;; else: increase pitch
0DC18 A5 46                         LDA sweep_noise
0DC1A F0 18                         BEQ +constantNoise
0DC1C 30 2A                         BMI +decreaseNoise
0DC1E                           
0DC1E                           ;; Sweep noise up to max noise pitch
0DC1E                           +increaseNoise:
0DC1E C6 47                         DEC current_noise
0DC20 A5 47                         LDA current_noise
0DC22 8D 0E 40                      STA NOISE_PERIOD
0DC25 C5 45                         CMP max_noise
0DC27 D0 08                         BNE +
0DC29 A9 00                             LDA #$00
0DC2B 85 46                             STA sweep_noise
0DC2D A9 0A                             LDA #$0A
0DC2F 85 48                             STA noise_timer
0DC31                               +
0DC31 4C 5C DC                      JMP +endNoise
0DC34                           
0DC34                           ;; Keep noise at constant pitch
0DC34                           +constantNoise:
0DC34 A5 45                         LDA max_noise
0DC36 F0 24                         BEQ +endNoise
0DC38                           
0DC38 A5 48                         LDA noise_timer
0DC3A D0 07                         BNE +
0DC3C A9 80                             LDA #$80
0DC3E 85 46                             STA sweep_noise
0DC40 4C 5C DC                          JMP +endNoise
0DC43                               +
0DC43 C6 48                         DEC noise_timer
0DC45 4C 5C DC                      JMP +endNoise
0DC48                           
0DC48                           ;; Sweep noise down to initial pitch
0DC48                           +decreaseNoise:
0DC48 E6 47                         INC current_noise
0DC4A A5 47                         LDA current_noise
0DC4C 8D 0E 40                      STA NOISE_PERIOD
0DC4F C9 0E                         CMP #$0E
0DC51 D0 09                         BNE +endNoise
0DC53                           
0DC53 20 C5 C5                      JSR sub_BackgroundNoise
0DC56 A9 00                         LDA #$00
0DC58 85 45                         STA max_noise
0DC5A 85 46                         STA sweep_noise
0DC5C                           
0DC5C                           +endNoise:
0DC5C                           
0DC5C                               +
0DC5C                           
0DC5C                               ;; Play bonus to score bleeps
0DC5C                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DC5C                           
0DC5C                           ;; Random bleepy noises
0DC5C                           
0DC5C A5 49                         LDA do_beeps
0DC5E F0 2E                         BEQ +continue
0DC60                               
0DC60 C9 02                         CMP #$02
0DC62 D0 12                         BNE +beep
0DC64                              
0DC64                           +stopBeep:
0DC64 A9 00                         LDA #$00
0DC66 85 49                         STA do_beeps
0DC68 A9 08                         LDA #$08
0DC6A 8D 15 40                      STA APU_STATUS
0DC6D 8D 0F 40                      STA NOISE_LENGTH
0DC70 20 C5 C5                      JSR sub_BackgroundNoise
0DC73 4C 8E DC                      JMP +continue
0DC76                               
0DC76                           +beep:
0DC76 A9 01                         LDA #$01
0DC78 8D 15 40                      STA APU_STATUS
0DC7B A5 4A                         LDA soft_pulse1
0DC7D 8D 00 40                      STA PULSE1_VOLUME
0DC80 20 35 C5                      JSR sub_GetRandomNumber
0DC83 8D 02 40                      STA PULSE1_TIMER_LO
0DC86 20 35 C5                      JSR sub_GetRandomNumber
0DC89 29 01                         AND #$01
0DC8B 8D 03 40                      STA PULSE1_TIMER_HI
0DC8E                           
0DC8E                           +continue:
0DC8E                           
0DC8E                               
0DC8E                               ;; Play sound effect
0DC8E                               .include "game/include/main/nmi_sfx.asm"
0DC8E                           
0DC8E                               ;; Get current explosion sfx frame; if not set, skip this
0DC8E A4 4E                         LDY sfx_timer
0DC90 F0 1F                         BEQ +done
0DC92                               
0DC92                                   ;; Check if explosion sfx is done; if so, disable and skip
0DC92 B1 4C                             LDA (sfx_address),y
0DC94 D0 07                             BNE +
0DC96 A9 00                                 LDA #$00
0DC98 85 4E                                 STA sfx_timer
0DC9A 4C B1 DC                              JMP +done
0DC9D                                   +
0DC9D                                   
0DC9D                                   ;; Set low nibble as volume
0DC9D 29 0F                             AND #$0F
0DC9F 09 30                             ORA #$30
0DCA1 8D 0C 40                          STA NOISE_VOLUME
0DCA4                                   
0DCA4                                   ;; Set high nibble as frequency
0DCA4 B1 4C                             LDA (sfx_address),y
0DCA6 4A                                LSR
0DCA7 4A                                LSR
0DCA8 4A                                LSR
0DCA9 4A                                LSR
0DCAA 49 0F                             EOR #$0F
0DCAC 8D 0E 40                          STA NOISE_PERIOD
0DCAF                                   
0DCAF                                   ;; Next frame
0DCAF E6 4E                             INC sfx_timer
0DCB1                               +done:
0DCB1                           
0DCB1                           
0DCB1                               ;; Check move sfx
0DCB1 A4 4F                         LDY sfx_timer+1
0DCB3 F0 34                         BEQ +done
0DCB5                           
0DCB5 C6 4F                             DEC sfx_timer+1
0DCB7 C0 18                             CPY #$18
0DCB9 D0 0D                             BNE +
0DCBB                                       ;; Update APU status
0DCBB A9 09                                 LDA #$09
0DCBD 8D 15 40                              STA APU_STATUS
0DCC0 A9 8B                                 LDA #$8B
0DCC2 85 51                                 STA sfx_frequency
0DCC4 A9 0A                                 LDA #$0A
0DCC6 85 52                                 STA sfx_frequency+1
0DCC8                                   +
0DCC8                                   
0DCC8                                   ;; Set volume
0DCC8 B9 EA DA                          LDA tbl_MoveSfxVolume,y
0DCCB 8D 00 40                          STA PULSE1_VOLUME
0DCCE                                   
0DCCE 84 00                             STY temp
0DCD0 A9 18                             LDA #$18
0DCD2 38                                SEC
0DCD3 E5 00                             SBC temp
0DCD5 4A                                LSR
0DCD6 18                                CLC
0DCD7 69 03                             ADC #$03
0DCD9 65 51                             ADC sfx_frequency
0DCDB 85 51                             STA sfx_frequency
0DCDD 8D 02 40                          STA PULSE1_TIMER_LO
0DCE0 A5 52                             LDA sfx_frequency+1
0DCE2 69 00                             ADC #$00
0DCE4 85 52                             STA sfx_frequency+1
0DCE6 8D 03 40                          STA PULSE1_TIMER_HI
0DCE9                               +done:
0DCE9                           
0DCE9                           
0DCE9                               ;; Check paint sfx
0DCE9 A4 50                         LDY sfx_timer+2
0DCEB F0 1D                         BEQ +done
0DCED                           
0DCED C6 50                             DEC sfx_timer+2
0DCEF C0 10                             CPY #$10
0DCF1 D0 05                             BNE +
0DCF3                                       ;; Update APU status
0DCF3 A9 09                                 LDA #$09
0DCF5 8D 15 40                              STA APU_STATUS
0DCF8                                   +
0DCF8                                   
0DCF8                                   ;; Set volume
0DCF8 B9 02 DB                          LDA tbl_PaintSfxVolume,y
0DCFB 8D 00 40                          STA PULSE1_VOLUME
0DCFE B9 24 DB                          LDA tbl_PaintSfxFreqLo,y
0DD01 8D 02 40                          STA PULSE1_TIMER_LO
0DD04 B9 13 DB                          LDA tbl_PaintSfxFreqHi,y
0DD07 8D 03 40                          STA PULSE1_TIMER_HI
0DD0A                               +done:
0DD0A                               
0DD0A                           
0DD0A                           ;; This is what happens when we forced nmi skip
0DD0A                           +force_skip_nmi:
0DD0A                           
0DD0A                               ;; Increase frame timers
0DD0A E6 15                         INC frame_counter
0DD0C                           
0DD0C                               ;; reset sprites_update_position
0DD0C A9 00                         LDA #$00
0DD0E 85 35                         STA sprites_update_position
0DD10                           
0DD10                               ;; Don't skip next NMI request
0DD10 A9 00                         LDA #$00
0DD12 85 13                         STA skip_nmi
0DD14 85 53                         STA check_nmi
0DD16                           
0DD16                               ;; Restore X, Y and PC from stack
0DD16 28                            PLP
0DD17 68                            PLA
0DD18 A8                            TAY
0DD19 68                            PLA
0DD1A AA                            TAX
0DD1B                           
0DD1B                           +skip_nmi:
0DD1B                               ;; Restore accumulator from stack
0DD1B 68                            PLA
0DD1C                           
0DD1C                               ;; Return
0DD1C 40                            RTI
0DD1D                           
0DD1D                           
0DD1D                           ;; IRQ handler (empty)
0DD1D                           IRQ:
0DD1D                               .include "interrupt/irq.asm"
0DD1D                           
0DD1D 40                            RTI
0DD1E                           
0DD1E                           
0DD1E                           ;; Interrupt vectors
0DD1E 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 3F DB                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 1D DD                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
