	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$06
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           ball_update_position   .dsb 1
00036                           
00036                           
00036                           ;; Ball flags
00036                           ;; #% c c c v . f n a
00036                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00036                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00036                           ;;    | | | | | +------ ball is frozen (not moving)
00036                           ;;    | | | | +-------- (unused for now)
00036                           ;;    | | | +---------- ball moves up (0) or down (1)
00036                           ;;    +-+-+------------ ball color (1-6)
00036                           ball_flags             .dsb 1
00037                           
00037                           
00037                           ;; Screen mode
00037                           ;; #% u . . . . . t t
00037                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00037                           ;;    | +-+-+-+-+------------- unused
00037                           ;;    +----------------------- should the screen update
00037                           screen_mode            .dsb 1
00038                           
00038                           
00038                           
00038                           ;; PPU buffer variables
00038                           ppu_buffer_update      .dsb 1
00039                           ppu_buffer_pointer     .dsb 1
0003A                           
0003A                           ;; Pointer to keep track of the number of explosions
0003A                           explosion_pointer      .dsb 1
0003B                           
0003B                           ;; Sprite RAM pointer to keep track of sprites to update
0003B                           sprite_ram_pointer     .dsb 1
0003C                           
0003C                           ;; Counters (actually Timers, should refactor [@TODO])
0003C                           nudge_counter          .dsb 1
0003D                           bonus_counter          .dsb 1
0003E                           kill_counter           .dsb 1
0003F                           
0003F                           ;; Current level (doubles as level select variable)
0003F                           current_level          .dsb 1
00040                           
00040                           ;; Tile type the ball is currently colliding with
00040                           colliding_tile         .dsb 1
00041                           
00041                           ;; Number of blocks left on screen
00041                           blocks_left            .dsb 1
00042                           
00042                           ;; Sound control variables
00042                           max_noise              .dsb 1
00043                           sweep_noise            .dsb 1
00044                           current_noise          .dsb 1
00045                           noise_counter          .dsb 1
00046                           do_beeps               .dsb 1
00047                           
00047                           ;; Additional NMI check for timed PPU fade
00047                           check_nmi              .dsb 1
00048                               00048                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_framecounter    .dsb 4
00364                           
00364                               ;; _currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; _attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 7A C4                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 7A C4                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 37                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 3F                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3B                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 5D C4                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 37                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 37                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 44 CE                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 41 CE                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 A1 C5                      JSR sub_DisableRendering
0C08A 20 EC C6                      JSR sub_JumpToPointer
0C08D 20 B5 C5                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 37                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 37                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 37                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C 4D C3                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3B                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 89 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                           
0C0BE                               ;; Check if ball is frozen
0C0BE A5 36                         LDA ball_flags
0C0C0 29 04                         AND #BALL_IS_FROZEN
0C0C2 F0 03                         BEQ +
0C0C4 4C 89 C2                          JMP +skipBallMovement
0C0C7                               +
0C0C7                           
0C0C7                               ;; Move the ball
0C0C7                               .include "game/include/main/move_ball.asm"
0C0C7                           
0C0C7                               ;; Check if ball goes up or down
0C0C7 A5 36                         LDA ball_flags
0C0C9 29 10                         AND #BALL_MOVES_DOWN
0C0CB F0 2B                         BEQ +moveBallUp
0C0CD                           
0C0CD                           
0C0CD                           +moveBallDown:
0C0CD                               ;; update the low byte
0C0CD A5 1A                         LDA ball_ypos_lo
0C0CF 85 1C                         STA ball_ypos_lo_prev
0C0D1 18                            CLC
0C0D2 69 F0                         ADC #BALL_SPEED_LO
0C0D4 85 1A                         STA ball_ypos_lo
0C0D6                           
0C0D6                               ;; update the high byte with carry
0C0D6 A5 19                         LDA ball_ypos_hi
0C0D8 85 1B                         STA ball_ypos_hi_prev
0C0DA 69 01                         ADC #BALL_SPEED_HI
0C0DC 85 19                         STA ball_ypos_hi
0C0DE                               
0C0DE                               ;; Check bottom bound
0C0DE C9 C8                         CMP #BOUND_BOTTOM
0C0E0 90 3C                         BCC +checkHorizontalMovement
0C0E2 F0 3A                         BEQ +checkHorizontalMovement
0C0E4                           
0C0E4                           
0C0E4                               ;; Change ball direction to "up"
0C0E4 A9 C8                         LDA #BOUND_BOTTOM
0C0E6 38                            SEC
0C0E7 E9 01                         SBC #$01
0C0E9 85 19                         STA ball_ypos_hi
0C0EB A9 00                         LDA #$00
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF A5 36                         LDA ball_flags
0C0F1 29 EF                         AND #MOVE_BALL_UP
0C0F3 85 36                         STA ball_flags
0C0F5 4C 1E C1                      JMP +checkHorizontalMovement
0C0F8                           
0C0F8                           
0C0F8                           +moveBallUp:
0C0F8                               ;; update the low byte
0C0F8 A5 1A                         LDA ball_ypos_lo
0C0FA 85 1C                         STA ball_ypos_lo_prev
0C0FC 38                            SEC
0C0FD E9 F0                         SBC #BALL_SPEED_LO
0C0FF 85 1A                         STA ball_ypos_lo
0C101                           
0C101                               ;; update the high byte with carry
0C101 A5 19                         LDA ball_ypos_hi
0C103 85 1B                         STA ball_ypos_hi_prev
0C105 E9 01                         SBC #BALL_SPEED_HI
0C107 85 19                         STA ball_ypos_hi
0C109                               
0C109                               ;; Check top bound
0C109 C9 30                         CMP #BOUND_TOP
0C10B B0 11                         BCS +checkHorizontalMovement
0C10D                           
0C10D                               ;; Change ball direction to "down"
0C10D A9 30                         LDA #BOUND_TOP
0C10F 18                            CLC
0C110 69 01                         ADC #$01
0C112 85 19                         STA ball_ypos_hi
0C114 A9 00                         LDA #$00
0C116 85 1A                         STA ball_ypos_lo
0C118 A5 36                         LDA ball_flags
0C11A 09 10                         ORA #MOVE_BALL_DOWN
0C11C 85 36                         STA ball_flags
0C11E                           
0C11E                           
0C11E                           +checkHorizontalMovement:
0C11E                           
0C11E                               ;; Check if ball is being nudged
0C11E A5 3C                         LDA nudge_counter
0C120 D0 41                         BNE +doneBallMovement
0C122                           
0C122                               ;; Check if left button is held
0C122 A5 0F                         LDA buttons_held
0C124 29 02                         AND #BUTTON_LEFT
0C126 F0 1B                         BEQ +
0C128                                   ;; update the low byte
0C128 A5 18                             LDA ball_xpos_lo
0C12A 38                                SEC
0C12B E9 F0                             SBC #BALL_SPEED_LO
0C12D 85 18                             STA ball_xpos_lo
0C12F                           
0C12F                                   ;; update the high byte
0C12F A5 17                             LDA ball_xpos_hi
0C131 E9 01                             SBC #BALL_SPEED_HI
0C133 85 17                             STA ball_xpos_hi
0C135                                   
0C135                                   ;; Check left bound
0C135 C9 10                             CMP #BOUND_LEFT
0C137 B0 2A                             BCS +doneBallMovement
0C139                                   
0C139                                   ;; Set flag to nudge right and set nudge counter
0C139 A5 36                             LDA ball_flags
0C13B 09 02                             ORA #NUDGE_BALL_RIGHT
0C13D 20 E5 C6                          JSR sub_InitiateNudge
0C140                           
0C140 4C 63 C1                          JMP +doneBallMovement        
0C143                               +
0C143                           
0C143                               ;; Check if right button is held
0C143 A5 0F                         LDA buttons_held
0C145 29 01                         AND #BUTTON_RIGHT
0C147 F0 1A                         BEQ +
0C149                                   ;; update the low byte
0C149 A5 18                             LDA ball_xpos_lo
0C14B 18                                CLC
0C14C 69 F0                             ADC #BALL_SPEED_LO
0C14E 85 18                             STA ball_xpos_lo
0C150                           
0C150                                   ;; update the high byte
0C150 A5 17                             LDA ball_xpos_hi
0C152 69 01                             ADC #BALL_SPEED_HI
0C154 85 17                             STA ball_xpos_hi     
0C156                           
0C156                                  ;; Check right bound
0C156 C9 E8                             CMP #BOUND_RIGHT
0C158 90 09                             BCC +doneBallMovement
0C15A F0 07                             BEQ +doneBallMovement
0C15C                                   
0C15C                                   ;; Set flag to nudge left and set nudge timer
0C15C A5 36                             LDA ball_flags
0C15E 29 FD                             AND #NUDGE_BALL_LEFT
0C160 20 E5 C6                          JSR sub_InitiateNudge
0C163                               +
0C163                           
0C163                           
0C163                           +doneBallMovement:
0C163                           
0C163                               ;; Check nudge
0C163 A5 3C                         LDA nudge_counter
0C165 F0 23                         BEQ +doneBallNudging
0C167 A5 36                             LDA ball_flags
0C169 29 02                             AND #NUDGE_BALL_RIGHT
0C16B F0 10                             BEQ +nudgeBallLeft
0C16D                                   
0C16D                                       ;; update the low byte
0C16D A5 18                                 LDA ball_xpos_lo
0C16F 18                                    CLC
0C170 69 F0                                 ADC #BALL_SPEED_LO
0C172 85 18                                 STA ball_xpos_lo
0C174                           
0C174                                       ;; update the high byte
0C174 A5 17                                 LDA ball_xpos_hi
0C176 69 01                                 ADC #BALL_SPEED_HI
0C178 85 17                                 STA ball_xpos_hi  
0C17A 4C 8A C1                              JMP +doneBallNudging
0C17D                                   +nudgeBallLeft:
0C17D                                   
0C17D                                   ;; update the low byte
0C17D A5 18                             LDA ball_xpos_lo
0C17F 38                                SEC
0C180 E9 F0                             SBC #BALL_SPEED_LO
0C182 85 18                             STA ball_xpos_lo
0C184                           
0C184                                   ;; update the high byte
0C184 A5 17                             LDA ball_xpos_hi
0C186 E9 01                             SBC #BALL_SPEED_HI
0C188 85 17                             STA ball_xpos_hi
0C18A                               +doneBallNudging:
0C18A                           
0C18A                               ;; Don't update position again until next frame
0C18A E6 35                         INC ball_update_position
0C18C                           
0C18C                           +doneBallHandling:0C18C                               
0C18C                               ;; Do collision detection
0C18C                               .include "game/include/main/collision_detection.asm"
0C18C                           
0C18C                               ;; Get ball's x-left, x-center, x-right position
0C18C A5 17                         LDA ball_xpos_hi
0C18E 18                            CLC
0C18F 69 F0                         ADC #BALL_LEFT_WGA
0C191 85 2F                         STA ball_left
0C193 18                            CLC
0C194 69 04                         ADC #BALL_HALF_SIZE
0C196 85 30                         STA ball_center
0C198 18                            CLC
0C199 69 04                         ADC #BALL_HALF_SIZE
0C19B 85 31                         STA ball_right
0C19D                           
0C19D                               ;; Get ball's y-top, y-middle, y-bottom position
0C19D A5 19                         LDA ball_ypos_hi
0C19F 18                            CLC
0C1A0 69 D0                         ADC #BALL_TOP_WGA
0C1A2 85 32                         STA ball_top
0C1A4 18                            CLC
0C1A5 69 04                         ADC #BALL_HALF_SIZE
0C1A7 85 33                         STA ball_middle
0C1A9 18                            CLC
0C1AA 69 04                         ADC #BALL_HALF_SIZE
0C1AC 85 34                         STA ball_bottom
0C1AE                           
0C1AE                           +checkRightCollision:
0C1AE                               ;; Check if ball moves right
0C1AE                               ;; No need to check nudging here as that will never collide with a tile
0C1AE A5 0F                         LDA buttons_held
0C1B0 29 01                         AND #BUTTON_RIGHT
0C1B2 F0 1C                         BEQ +checkLeftCollision
0C1B4                           
0C1B4                               ;; Check tile at right position
0C1B4 A5 33                         LDA ball_middle
0C1B6 85 00                         STA temp
0C1B8 A5 31                         LDA ball_right
0C1BA 85 01                         STA temp+1
0C1BC 20 89 C5                      JSR sub_ConvertXYToTileType
0C1BF 29 01                         AND #TILE_IS_SOLID
0C1C1 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1C3                           
0C1C3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1C3 A5 36                         LDA ball_flags
0C1C5 29 FD                         AND #NUDGE_BALL_LEFT
0C1C7 20 E5 C6                      JSR sub_InitiateNudge
0C1CA 20 E2 C5                      JSR sub_EvaluateTileType
0C1CD 4C EF C1                      JMP +checkTopCollision
0C1D0                           
0C1D0                           +checkLeftCollision:
0C1D0                               ;; Check if ball moves right
0C1D0                               ;; No need to check nudging here as that will never collide with a tile
0C1D0 A5 0F                         LDA buttons_held
0C1D2 29 02                         AND #BUTTON_LEFT
0C1D4 F0 19                         BEQ +checkTopCollision
0C1D6                           
0C1D6                               ;; Check tile at right position
0C1D6 A5 33                         LDA ball_middle
0C1D8 85 00                         STA temp
0C1DA A5 2F                         LDA ball_left
0C1DC 85 01                         STA temp+1
0C1DE 20 89 C5                      JSR sub_ConvertXYToTileType
0C1E1 29 01                         AND #TILE_IS_SOLID
0C1E3 F0 0A                         BEQ +checkTopCollision
0C1E5                           
0C1E5                               ;; Tile is solid; nudge ball and evaluate tile type
0C1E5 A5 36                         LDA ball_flags
0C1E7 09 02                         ORA #NUDGE_BALL_RIGHT
0C1E9 20 E5 C6                      JSR sub_InitiateNudge
0C1EC 20 E2 C5                      JSR sub_EvaluateTileType
0C1EF                               
0C1EF                               
0C1EF                           +checkTopCollision:
0C1EF                               ;; Check if ball moves up
0C1EF A5 36                         LDA ball_flags
0C1F1 29 10                         AND #BALL_MOVES_DOWN
0C1F3 D0 23                         BNE +checkBottomCollision
0C1F5                           
0C1F5                               ;; Check tile at top position
0C1F5 A5 32                         LDA ball_top
0C1F7 85 00                         STA temp
0C1F9 A5 30                         LDA ball_center
0C1FB 85 01                         STA temp+1
0C1FD 20 89 C5                      JSR sub_ConvertXYToTileType
0C200 29 01                         AND #TILE_IS_SOLID
0C202 F0 34                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C204                           
0C204                               ;; Tile is solid; move ball down and evaluate tile type
0C204 A5 1C                         LDA ball_ypos_lo_prev
0C206 85 1A                         STA ball_ypos_lo
0C208 A5 1B                         LDA ball_ypos_hi_prev
0C20A 85 19                         STA ball_ypos_hi
0C20C A5 36                         LDA ball_flags
0C20E 09 10                         ORA #MOVE_BALL_DOWN
0C210 85 36                         STA ball_flags
0C212 20 E2 C5                      JSR sub_EvaluateTileType
0C215 4C 38 C2                      JMP +doneCheckingCollision
0C218                           
0C218                           +checkBottomCollision:
0C218                               ;; No movement check needed: since ball is not moving up, it must move down
0C218                           
0C218                               ;; Check tile at bottom position
0C218 A5 34                         LDA ball_bottom
0C21A 85 00                         STA temp
0C21C A5 30                         LDA ball_center
0C21E 85 01                         STA temp+1
0C220 20 89 C5                      JSR sub_ConvertXYToTileType
0C223 29 01                         AND #TILE_IS_SOLID
0C225 F0 11                         BEQ +doneCheckingCollision
0C227                           
0C227                               ;; Tile is solid; move ball up and evaluate tile type
0C227 A5 1C                         LDA ball_ypos_lo_prev
0C229 85 1A                         STA ball_ypos_lo
0C22B A5 1B                         LDA ball_ypos_hi_prev
0C22D 85 19                         STA ball_ypos_hi
0C22F A5 36                         LDA ball_flags
0C231 29 EF                         AND #MOVE_BALL_UP
0C233 85 36                         STA ball_flags
0C235 20 E2 C5                      JSR sub_EvaluateTileType
0C238                           
0C238                           +doneCheckingCollision:
0C238                           
0C238                               
0C238                               ;; Update bonus
0C238                               .include "game/include/main/update_bonus.asm"
0C238                           ;; update_bonus.asm
0C238                           
0C238                               ;; If bonus = 000, skip decreasing
0C238 A5 2C                         LDA ball_bonus
0C23A 18                            CLC
0C23B 65 2D                         ADC ball_bonus+1
0C23D 18                            CLC
0C23E 65 2E                         ADC ball_bonus+2
0C240 F0 33                         BEQ +done
0C242                           
0C242                               ;; Check if bonus counter is done yet
0C242 A5 3D                         LDA bonus_counter
0C244 D0 2F                         BNE +done
0C246                           
0C246                               ;; Bonus counter is done
0C246                               ;; Reset bonus counter
0C246 A9 06                         LDA #BONUS_FRAMES
0C248 85 3D                         STA bonus_counter
0C24A                               
0C24A                               ;; Subtract one from ball bonus ones
0C24A C6 2E                         DEC ball_bonus+2
0C24C                               
0C24C                               ;; Check if underflow
0C24C 10 0E                         BPL +updateBonusOnScreen
0C24E                           
0C24E                               ;; If underflow, set 9 and subtract one from bonus tens
0C24E A9 09                         LDA #$09
0C250 85 2E                         STA ball_bonus+2
0C252 C6 2D                         DEC ball_bonus+1
0C254                               
0C254                               ;; Check if underflow
0C254 10 06                         BPL +updateBonusOnScreen
0C256                           
0C256                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C256 A9 09                         LDA #$09
0C258 85 2D                         STA ball_bonus+1
0C25A C6 2C                         DEC ball_bonus
0C25C                           
0C25C                               ;;209A 209B 209C
0C25C                           +updateBonusOnScreen:
0C25C A9 20                         LDA #$20
0C25E 85 00                         STA temp
0C260 A9 9C                         LDA #$9C
0C262 85 01                         STA temp+1
0C264 A2 02                         LDX #$02
0C266                               
0C266                               -updateNextDigit:
0C266 B5 2C                             LDA ball_bonus,x
0C268 18                                CLC
0C269 69 01                             ADC #$01
0C26B 85 02                             STA temp+2
0C26D 20 D7 CC                          JSR sub_WriteByteToPPUBuffer
0C270 C6 01                             DEC temp+1
0C272 CA                                DEX
0C273 10 F1                         BPL -updateNextDigit
0C275                                   
0C275                           +done:0C275                               
0C275                               ;; Input test for beeps
0C275                               .include "game/test/input_beeps.asm"
0C275 A5 10                         LDA buttons_pressed
0C277 29 20                         AND #BUTTON_SELECT
0C279 F0 04                         BEQ +
0C27B A9 01                             LDA #$01
0C27D 85 46                             STA do_beeps
0C27F                               +
0C27F                               
0C27F A5 11                         LDA buttons_released
0C281 29 20                         AND #BUTTON_SELECT
0C283 F0 04                         BEQ +
0C285 A9 02                             LDA #$02
0C287 85 46                             STA do_beeps
0C289                               +0C289                           
0C289                           
0C289                           +skipBallMovement:
0C289                               ;; Testing timed PPU scroll concept
0C289                               .include "game/test/timed_ppuscroll_test.asm"
0C289                           ;; Timed updates (test)
0C289                           
0C289                               ;; If B button is pressed
0C289 A5 10                         LDA buttons_pressed
0C28B 29 10                         AND #BUTTON_START
0C28D D0 03                         BNE +
0C28F 4C 14 C3                          JMP +end
0C292                               +
0C292                           
0C292                           lbl_initiate_level_load:
0C292                               ;; Disable noise channel
0C292 A9 00                         LDA #$00
0C294 8D 15 40                      STA APU_STATUS
0C297 8D 0C 40                      STA NOISE_VOLUME
0C29A                               
0C29A                               ;; Set up loop fading
0C29A A9 00                         LDA #$00
0C29C 85 07                         STA temp+7
0C29E A0 08                         LDY #$08
0C2A0                               -fadeLoop:
0C2A0 84 08                             STY temp+8
0C2A2                           
0C2A2                                   ;; Wait for NMI to pass
0C2A2 20 71 C4                          JSR sub_WaitForNMI
0C2A5                                   
0C2A5                                   ;; Now wait for No-sprite 0
0C2A5                                   -
0C2A5 AD 02 20                              LDA PPU_STATUS
0C2A8 29 40                                 AND #SPRITE_0_HIT
0C2AA D0 F9                             BNE -
0C2AC                               
0C2AC                                   ;; Now wait for Sprite 0
0C2AC                                   -
0C2AC AD 02 20                              LDA PPU_STATUS
0C2AF 29 40                                 AND #SPRITE_0_HIT
0C2B1 F0 F9                             BEQ -
0C2B3                                       
0C2B3                                   ;; Setup tile row loop
0C2B3 A0 16                             LDY #22
0C2B5                                   -tileLoop:
0C2B5                                   
0C2B5                                       ;; Disable drawing
0C2B5 A5 12                                 LDA soft_ppu_mask
0C2B7 29 F7                                 AND #%11110111
0C2B9 8D 01 20                              STA PPU_MASK
0C2BC                                       
0C2BC                                       ;; Set up scanline loop
0C2BC A2 08                                 LDX #$08
0C2BE                                       -scanlineLoop:
0C2BE E4 08                                     CPX temp+8
0C2C0 D0 0A                                     BNE +wasteTime
0C2C2                                           
0C2C2                                           ;; Restore drawing
0C2C2 A5 12                                     LDA soft_ppu_mask
0C2C4 09 08                                     ORA #%00001000
0C2C6 8D 01 20                                  STA PPU_MASK
0C2C9 4C D2 C2                                  JMP +wasteMoreTime
0C2CC                           
0C2CC                                           ;; Waste 12 frames
0C2CC                                           +wasteTime:
0C2CC E6 09                                     INC temp+9   ;+5
0C2CE C6 09                                     DEC temp+9   ;+5
0C2D0 49 00                                     EOR #$00     ;+2
0C2D2                                           
0C2D2                                           ;; Waste about 100 frames
0C2D2                                           +wasteMoreTime:
0C2D2                                           
0C2D2 86 01                                     STX temp+1     ;  3 down, 97 to go
0C2D4 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C2D6                                           -wasteLoop:
0C2D6 EA                                            NOP
0C2D7 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C2D9 CA                                            DEX        ;  5+5L down,  95-5L to go
0C2DA D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C2DC                           
0C2DC A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C2DE CA                                        DEX            ;  9+8L down, 91-8L to go
0C2DF D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C2E1                           
0C2E1 88                                    DEY
0C2E2 D0 D1                             BNE -tileLoop
0C2E4                           
0C2E4 A4 08                             LDY temp+8
0C2E6                                   
0C2E6 E6 07                             INC temp+7
0C2E8 A5 07                             LDA temp+7
0C2EA C9 02                             CMP #$02
0C2EC D0 B2                             BNE -fadeLoop
0C2EE                           
0C2EE A9 00                             LDA #$00
0C2F0 85 07                             STA temp+7
0C2F2 88                                DEY
0C2F3 D0 AB                         BNE -fadeLoop
0C2F5                               
0C2F5                               ;; Load the next level if ball not dead
0C2F5 A5 36                         LDA ball_flags
0C2F7 29 01                         AND #BALL_IS_DEAD
0C2F9 D0 05                         BNE +
0C2FB E6 3F                             INC current_level
0C2FD 4C 06 C3                          JMP +loadLevel
0C300                               +
0C300                               
0C300                               ;; Revive ball
0C300 A5 36                         LDA ball_flags
0C302 29 FE                         AND #REVIVE_BALL
0C304 85 36                         STA ball_flags
0C306                           
0C306                           +loadLevel:
0C306 A5 3F                         LDA current_level
0C308 C9 19                         CMP #25
0C30A D0 04                         BNE +
0C30C A9 00                             LDA #$00
0C30E 85 3F                             STA current_level
0C310                               +
0C310                               
0C310 A9 81                         LDA #LOAD_GAME_SCREEN
0C312 85 37                         STA screen_mode
0C314                           
0C314                           
0C314                           +end:
0C314                           
0C314                               ;; Check if ball is dead
0C314 A5 36                         LDA ball_flags
0C316 29 01                         AND #BALL_IS_DEAD
0C318 F0 03                         BEQ +
0C31A 4C 3C C3                          JMP +ballIsDead
0C31D                               +
0C31D                               
0C31D                               ;; Add to sprite buffer
0C31D A6 3B                         LDX sprite_ram_pointer
0C31F A5 19                         LDA ball_ypos_hi
0C321 9D 00 02                      STA ADDR_SPRITERAM,x
0C324 E8                            INX
0C325 A9 01                         LDA #BALL_TILE_CHR
0C327 9D 00 02                      STA ADDR_SPRITERAM,x
0C32A E8                            INX
0C32B A9 00                         LDA #BALL_ATTR
0C32D 9D 00 02                      STA ADDR_SPRITERAM,x
0C330 E8                            INX
0C331 A5 17                         LDA ball_xpos_hi
0C333 9D 00 02                      STA ADDR_SPRITERAM,x
0C336 E8                            INX
0C337 86 3B                         STX sprite_ram_pointer
0C339 4C 99 C3                      JMP +doneScreenLoad
0C33C                           
0C33C                           
0C33C                           +ballIsDead:
0C33C                               ;; Check if kill counter has reset
0C33C A5 3E                         LDA kill_counter
0C33E F0 03                         BEQ +
0C340 4C 99 C3                          JMP +doneScreenLoad
0C343                               +
0C343                               
0C343                               ;; Take a live
0C343 C6 1F                         DEC ball_lives
0C345 D0 03                         BNE +
0C347                                   ;; If no lives left, reset game
0C347 4C 00 C0                          JMP RESET
0C34A                                   ;; Replace reset with game over sequence initiation [@TODO]
0C34A                               +
0C34A                               
0C34A                               ;; Reload current level
0C34A 4C 92 C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C34D                           
0C34D                           
0C34D                           +checkNextScreen:
0C34D                           
0C34D                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C34D                               ;; Upon pressing START, the selected level will start
0C34D                               .include "game/include/main/select_level.asm"
0C34D A5 10                         LDA buttons_pressed
0C34F 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C351 F0 3C                         BEQ +checkStartPress
0C353                           
0C353                                   ;; Select next level (1, 5, 9, 13, 17)
0C353 A5 3F                             LDA current_level
0C355 18                                CLC
0C356 69 04                             ADC #$04
0C358 C9 14                             CMP #$14
0C35A D0 02                             BNE +
0C35C A9 00                                 LDA #$00
0C35E                                   +
0C35E 85 3F                             STA current_level
0C360                                   
0C360                                   ;; Convert level number to two-byte value
0C360 A9 00                             LDA #$00
0C362 85 03                             STA temp+3
0C364 A5 3F                             LDA current_level
0C366 18                                CLC
0C367 69 01                             ADC #$01
0C369                           
0C369                               -
0C369 C9 0A                             CMP #$0A
0C36B 90 08                             BCC +
0C36D E6 03                                 INC temp+3
0C36F 38                                    SEC
0C370 E9 0A                                 SBC #$0A
0C372 4C 69 C3                              JMP -
0C375                                   +
0C375                           
0C375                                   ;; Add level number to PPU buffer
0C375 18                                CLC
0C376 69 01                             ADC #$01
0C378 85 02                             STA temp+2
0C37A A9 20                             LDA #$20
0C37C 85 00                             STA temp
0C37E A9 D0                             LDA #$D0
0C380 85 01                             STA temp+1
0C382 20 D7 CC                          JSR sub_WriteByteToPPUBuffer
0C385                                   
0C385 C6 01                             DEC temp+1
0C387 A4 03                             LDY temp+3
0C389 C8                                INY
0C38A 84 02                             STY temp+2
0C38C 20 D7 CC                          JSR sub_WriteByteToPPUBuffer
0C38F                                   
0C38F                               +checkStartPress:
0C38F                           
0C38F                           
0C38F                           
0C38F                               ;; If START button is pressed
0C38F A5 10                         LDA buttons_pressed
0C391 29 10                         AND #BUTTON_START
0C393 F0 04                         BEQ +
0C395                                   ;; Start the level
0C395 A9 81                             LDA #LOAD_GAME_SCREEN
0C397 85 37                             STA screen_mode
0C399                               +
0C399                           
0C399                           
0C399                           
0C399                           +doneScreenLoad:
0C399                           
0C399                               ;; Load animations (if any)
0C399                               .include "game/include/main/load_animations.asm"
0C399                               ;; Set up loop
0C399 A2 00                         LDX #$00
0C39B                               -loop_load_animation:
0C39B                                   ;; Check if current animation is active. If not, goto next
0C39B BD 74 03                          LDA explosion_active,x
0C39E D0 03                             BNE +
0C3A0 4C 3A C4                              JMP +next
0C3A3                                   +
0C3A3                           
0C3A3                                   ;; Check the explosion framecounter
0C3A3 BD 60 03                          LDA explosion_framecounter,x
0C3A6 D0 26                             BNE +
0C3A8                                       ;; Framecounter is 0
0C3A8                                       ;; Reset to animation speed
0C3A8 A9 04                                 LDA #ANIMATION_SPEED
0C3AA 9D 60 03                              STA explosion_framecounter,x
0C3AD                           
0C3AD                                       ;; Set next animation frame, and check if we're done yet
0C3AD FE 64 03                              INC explosion_currentframe,x
0C3B0 BD 64 03                              LDA explosion_currentframe,x
0C3B3 C9 0A                                 CMP #ANIM_SLIDES
0C3B5 D0 17                                 BNE +
0C3B7                           
0C3B7                                       ;; If we're done, inactivate current explosion, clean
0C3B7                                       ;; up sprite RAM and go to the next one
0C3B7 A9 00                                 LDA #$00
0C3B9 9D 74 03                              STA explosion_active,x
0C3BC                                       
0C3BC A9 09                                 LDA #SLIDE_SIZE
0C3BE 0A                                    ASL
0C3BF 0A                                    ASL
0C3C0 A8                                    TAY
0C3C1 A9 EF                                 LDA #$EF
0C3C3                                       -
0C3C3 88                                        DEY
0C3C4 99 00 02                                  STA ADDR_SPRITERAM,y
0C3C7 C0 00                                     CPY #00
0C3C9 D0 F8                                 BNE -
0C3CB                                       
0C3CB 4C 3A C4                              JMP +next
0C3CE                                   +
0C3CE                           
0C3CE                                   ;; Load (x,y) position in temp variables
0C3CE BD 6C 03                          LDA explosion_x,x
0C3D1 85 01                             STA temp+1
0C3D3 85 03                             STA temp+3
0C3D5 BD 70 03                          LDA explosion_y,x
0C3D8 85 02                             STA temp+2
0C3DA                           
0C3DA                                   ;; Load attribute in temp variable
0C3DA BD 68 03                          LDA explosion_attributes,x
0C3DD 85 04                             STA temp+4
0C3DF                           
0C3DF                                   ;; Load current frame into Y-register
0C3DF BC 64 03                          LDY explosion_currentframe,x
0C3E2                           
0C3E2                                   ;; Load current frame ROM address from table
0C3E2 B9 2B CE                          LDA explosion_anim_lo,y
0C3E5 85 0C                             STA pointer
0C3E7 B9 21 CE                          LDA explosion_anim_hi,y
0C3EA 85 0D                             STA pointer+1
0C3EC                           
0C3EC                                   ;; Save x-register on stack
0C3EC 8A                                TXA
0C3ED 48                                PHA
0C3EE                           
0C3EE                                   ;; Load sprites into sprite RAM
0C3EE A6 3B                             LDX sprite_ram_pointer
0C3F0 A0 00                             LDY #$00
0C3F2                           
0C3F2                                   ;; Prepare (x,y) offset for loop
0C3F2 84 00                             STY temp
0C3F4                           
0C3F4                                   -loop_load_sprite:
0C3F4                                   
0C3F4                                       ;; Do not draw empty sprites
0C3F4 B1 0C                                 LDA (pointer),y
0C3F6 F0 18                                 BEQ +nextSprite
0C3F8                                   
0C3F8                                           ;; Add y-position to sprite ram buffer
0C3F8 A5 02                                     LDA temp+2
0C3FA 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3FD E8                                        INX
0C3FE                           
0C3FE                                           ;; Get tile number from frame ROM address, and
0C3FE                                           ;; add it to sprite ram buffer
0C3FE B1 0C                                     LDA (pointer),y
0C400 9D 00 02                                  STA ADDR_SPRITERAM,x
0C403 E8                                        INX
0C404                           
0C404                                           ;; Add attribute data to sprite ram buffer
0C404 A5 04                                     LDA temp+4
0C406 9D 00 02                                  STA ADDR_SPRITERAM,x
0C409 E8                                        INX
0C40A                           
0C40A                                           ;; Add x-position to sprite ram buffer
0C40A A5 03                                     LDA temp+3
0C40C 9D 00 02                                  STA ADDR_SPRITERAM,x
0C40F E8                                        INX
0C410                           
0C410                                       +nextSprite:
0C410                           
0C410                                       ;; Check if all sprites are done
0C410 C8                                    INY
0C411 C0 09                                 CPY #SLIDE_SIZE
0C413 F0 21                                 BEQ +done
0C415                           
0C415                                       ;; Update x value
0C415 A5 03                                 LDA temp+3
0C417 18                                    CLC
0C418 69 08                                 ADC #$08
0C41A 85 03                                 STA temp+3
0C41C                           
0C41C                                       ;; Update temp for x,y position
0C41C E6 00                                 INC temp
0C41E A5 00                                 LDA temp
0C420 C9 03                                 CMP #SLIDE_WIDTH
0C422 D0 0F                                 BNE +
0C424                                           ;; Row is done; reset x-position
0C424 A5 01                                     LDA temp+1
0C426 85 03                                     STA temp+3
0C428                           
0C428                                           ;; Update y-position
0C428 A5 02                                     LDA temp+2
0C42A 18                                        CLC
0C42B 69 08                                     ADC #$08
0C42D 85 02                                     STA temp+2
0C42F                           
0C42F                                           ;; Reset row counter
0C42F A9 00                                     LDA #$00
0C431 85 00                                     STA temp
0C433                                       +
0C433                           
0C433 4C F4 C3                          JMP -loop_load_sprite
0C436                           
0C436                               +done:
0C436 86 3B                             STX sprite_ram_pointer
0C438                           
0C438                                   ;; Retrieve x-register from stack
0C438 68                                PLA
0C439 AA                                TAX
0C43A                           
0C43A                               +next:
0C43A                                   ;; Check if all animations have been updated
0C43A E8                                INX
0C43B E0 04                             CPX #MAX_ANIMATIONS
0C43D F0 03                             BEQ +done
0C43F                           
0C43F 4C 9B C3                      JMP -loop_load_animation
0C442                           +done:
0C442                           
0C442                               ;; Sprite clean-up
0C442 A6 3B                         LDX sprite_ram_pointer
0C444 A9 EF                         LDA #$EF
0C446                               -
0C446 9D 00 02                          STA ADDR_SPRITERAM,x
0C449 E8                                INX
0C44A D0 FA                         BNE -
0C44C 4C 57 C0                      JMP MainGameLoop
0C44F                           
0C44F                           ;; Subroutines
0C44F                           .include "include/subroutines.asm"
0C44F                           
0C44F                           ;; RNG
0C44F                           .include "subroutine/GetRandomNumber.asm"
0C44F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C44F                           ;;
0C44F                           ;; subroutine/GetRandomNumber.asm
0C44F                           ;;
0C44F                           ;; Simple and fast random number generator by White Flame.
0C44F                           ;;
0C44F                           ;; Set random_seed to an arbitrary number to randomize between
0C44F                           ;; gaming sessions, for instance using the frame counter upon
0C44F                           ;; pressing START on the intro screen.
0C44F                           ;;
0C44F                           ;;     ;; IF START PRESSED:
0C44F                           ;;     LDA frame_counter
0C44F                           ;;     STA random_seed
0C44F                           ;;
0C44F                           ;; Source:
0C44F                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C44F                           ;;
0C44F                           ;;
0C44F                           
0C44F                           sub_GetRandomNumber:
0C44F                               ;; Force EOR if random_seed is zero
0C44F A5 16                         LDA random_seed
0C451 F0 05                         BEQ +doEor
0C453                           
0C453                               ;; Shift left, and EOR if the high bit is set
0C453 0A                            ASL
0C454 F0 04                         BEQ +noEor
0C456 90 02                         BCC +noEor
0C458                           
0C458                           +doEor:
0C458 49 1D                         EOR #$1D
0C45A                           
0C45A                           +noEor:
0C45A 85 16                         STA random_seed
0C45C                           
0C45C 60                            RTS
0C45D                           
0C45D                           
0C45D                           ;; Read controller input
0C45D                           .include "subroutine/ReadController.asm"
0C45D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C45D                           ;;
0C45D                           ;; subroutine/ReadController.asm
0C45D                           ;;
0C45D                           ;; Subroutine that polls the controller and stores the input
0C45D                           ;; buttons in a variable. This version only handles controller
0C45D                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C45D                           ;;
0C45D                           ;;
0C45D                           
0C45D                           sub_ReadController:
0C45D                           
0C45D                               ;; Set strobe bit
0C45D A9 01                         LDA #$01
0C45F 8D 16 40                      STA JOYPAD_1
0C462                           
0C462                               ;; Set up ring counter
0C462 85 0F                         STA buttons_held
0C464                           
0C464                               ;; Clear strobe bit
0C464 4A                            LSR
0C465 8D 16 40                      STA JOYPAD_1
0C468                           
0C468                               ;; Loop through button presses
0C468                               -
0C468 AD 16 40                          LDA JOYPAD_1
0C46B 4A                                LSR
0C46C 26 0F                             ROL buttons_held
0C46E                           
0C46E                               ;; Check if ring counter is done
0C46E 90 F8                         BCC -
0C470                           
0C470                               ;; Return from subroutine
0C470 60                            RTS
0C471                           
0C471                           
0C471                           ;; vBlank/NMI wait
0C471                           .include "subroutine/WaitForNMI.asm"
0C471                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C471                           ;;
0C471                           ;; subroutine/WaitForVBlank.asm
0C471                           ;;
0C471                           ;; Subroutine that essentially pauses script execution until
0C471                           ;; vBlank happens.
0C471                           ;;
0C471                           ;;
0C471                           
0C471                           sub_WaitForNMI:
0C471 A9 01                         LDA #$01
0C473 85 47                         STA check_nmi
0C475                               -
0C475 A5 47                             LDA check_nmi
0C477 D0 FC                         BNE -
0C479 60                            RTS
0C47A                           
0C47A                           .include "subroutine/WaitForVBlank.asm"
0C47A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C47A                           ;;
0C47A                           ;; subroutine/WaitForVBlank.asm
0C47A                           ;;
0C47A                           ;; Subroutine that essentially pauses script execution until
0C47A                           ;; vBlank happens.
0C47A                           ;;
0C47A                           ;;
0C47A                           
0C47A                           sub_WaitForVBlank:
0C47A 2C 02 20                      BIT $2002
0C47D 10 FB                         BPL sub_WaitForVBlank
0C47F 60                            RTS
0C480                           
0C480                           
0C480                           ;; Game specific subroutines
0C480                           .include "game/include/subroutines.asm"
0C480                           ;; additional game-specific subroutines go here
0C480                           
0C480                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C480                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C480                           ;;
0C480                           ;;  sub_AddAccumulatorToScore.asm
0C480                           ;;
0C480                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C480                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C480                           ;;  actual score.
0C480                           ;;
0C480                           ;;
0C480                           
0C480                           
0C480                           sub_AddAccumulatorToScore:
0C480                           
0C480                               ;; Clear old add_to_score
0C480 A2 05                         LDX #$05
0C482 A0 00                         LDY #$00
0C484                               -
0C484 94 26                             STY add_to_score,x
0C486 CA                                DEX
0C487 10 FB                         BPL -
0C489                           
0C489                               ;; Set accumulator to add_to_score variables
0C489                               ;; Check and update 100s
0C489                               -checkHundreds:
0C489 C9 64                             CMP #100
0C48B 90 08                             BCC +checkTens
0C48D 38                                    SEC
0C48E E9 64                                 SBC #100
0C490 E6 29                                 INC add_to_score+3
0C492 4C 89 C4                              JMP -checkHundreds
0C495                                   +checkTens:
0C495                           
0C495                               ;; Check and update 10s
0C495                               -checkTens:
0C495 C9 0A                             CMP #10
0C497 90 08                             BCC +setOnes
0C499 38                                    SEC
0C49A E9 0A                                 SBC #10
0C49C E6 2A                                 INC add_to_score+4
0C49E 4C 95 C4                              JMP -checkTens
0C4A1                                   +setOnes:
0C4A1                           
0C4A1                               ;; We're left with 1s
0C4A1 85 2B                         STA add_to_score+5
0C4A3                           
0C4A3                               ;; Byte for byte, add add_to_score to ball_score
0C4A3 A9 00                         LDA #$00
0C4A5 85 38                         STA ppu_buffer_update
0C4A7 A4 39                         LDY ppu_buffer_pointer
0C4A9 A2 05                         LDX #$05
0C4AB                               -
0C4AB B5 26                             LDA add_to_score,x
0C4AD 18                                CLC
0C4AE 75 20                             ADC ball_score,x
0C4B0 C9 0A                             CMP #10
0C4B2 90 05                             BCC +
0C4B4 38                                    SEC
0C4B5 E9 0A                                 SBC #10
0C4B7 F6 1F                                 INC ball_score-1,x
0C4B9                                   +
0C4B9                                   
0C4B9                                   ;; Update new score digit
0C4B9 95 20                             STA ball_score,x
0C4BB                           
0C4BB                                   ;; Update score tile in PPU
0C4BB A9 20                             LDA #$20
0C4BD 99 00 03                          STA ppu_buffer,y
0C4C0 C8                                INY
0C4C1 8A                                TXA
0C4C2 18                                CLC
0C4C3 69 83                             ADC #$83
0C4C5 99 00 03                          STA ppu_buffer,y
0C4C8 C8                                INY
0C4C9 B5 20                             LDA ball_score,x
0C4CB 18                                CLC
0C4CC 69 01                             ADC #$01
0C4CE 99 00 03                          STA ppu_buffer,y
0C4D1 C8                                INY
0C4D2                           
0C4D2                                   ;; Check next digit (if any left)
0C4D2 CA                                DEX
0C4D3 30 03                             BMI +done
0C4D5 4C AB C4                      JMP -
0C4D8                           
0C4D8                           +done:
0C4D8                               ;; Update PPU buffer pointer and status
0C4D8 84 39                         STY ppu_buffer_pointer
0C4DA A9 01                         LDA #$01
0C4DC 85 38                         STA ppu_buffer_update
0C4DE                           
0C4DE                               ;; Done: return 
0C4DE 60                            RTS
0C4DF                           
0C4DF                           .include "game/subroutine/BackgroundNoise.asm"
0C4DF                           
0C4DF                           sub_BackgroundNoise:
0C4DF A9 32                         LDA #$32
0C4E1 8D 0C 40                      STA NOISE_VOLUME
0C4E4 A9 0E                         LDA #$0E
0C4E6 8D 0E 40                      STA NOISE_PERIOD
0C4E9 85 44                         STA current_noise
0C4EB 60                            RTS0C4EC                           .include "game/subroutine/ClearScreen.asm"
0C4EC                           ;; Subroutine to clear the screen
0C4EC                           ;; If it's a game screen, add noise
0C4EC                           
0C4EC                           sub_ClearScreen:
0C4EC                               ;; Check of game screen or not
0C4EC A5 37                         LDA screen_mode
0C4EE 29 03                         AND #CHECK_SCREEN_MODE
0C4F0 C9 01                         CMP #IS_GAME_SCREEN
0C4F2 F0 02                         BEQ +
0C4F4 A9 00                             LDA #$00
0C4F6                               +
0C4F6 85 01                         STA temp+1
0C4F8                               
0C4F8                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C4F8 2C 02 20                      BIT PPU_STATUS
0C4FB A9 20                         LDA #$20
0C4FD 8D 06 20                      STA PPU_ADDR
0C500 A9 00                         LDA #$00
0C502 8D 06 20                      STA PPU_ADDR
0C505                               
0C505                               ;; Set up tile to draw and loop
0C505 85 00                         STA temp
0C507 AA                            TAX
0C508 A8                            TAY
0C509                           
0C509                               -     
0C509                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C509 A5 00                             LDA temp
0C50B 8D 07 20                          STA PPU_DATA
0C50E                           
0C50E                                   ;; Check if we should draw noise next. Noise is drawn if:
0C50E                                   ;; - Screen mode is game screen
0C50E                                   ;; - Y between #$06 and #$19 (inclusive)
0C50E                                   ;; - X between #$02 and #$1D (inclusive)
0C50E                                   
0C50E                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C50E A5 01                             LDA temp+1
0C510 F0 1C                             BEQ +nextTileInRow
0C512                                   
0C512                                   ;; If Y < $6, skip the check
0C512 C0 06                             CPY #$06
0C514 90 18                             BCC +nextTileInRow
0C516                                   
0C516                                   ;; If X < $1, skip the check
0C516 E0 01                             CPX #$01
0C518 90 14                             BCC +nextTileInRow
0C51A                                   
0C51A                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C51A E0 1D                             CPX #$1D
0C51C D0 04                             BNE +
0C51E A9 00                                 LDA #$00
0C520 85 00                                 STA temp
0C522                                   +
0C522 B0 0A                             BCS +nextTileInRow
0C524                                   
0C524                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C524 20 4F C4                          JSR sub_GetRandomNumber
0C527 29 07                             AND #%00000111
0C529 18                                CLC
0C52A 69 68                             ADC #$68
0C52C 85 00                             STA temp
0C52E                           
0C52E                           +nextTileInRow:
0C52E                                   
0C52E                                   ;; Check if a row has been done. If not, draw the next
0C52E E8                                INX
0C52F E0 20                             CPX #$20
0C531 D0 D6                             BNE -
0C533                                   
0C533                                   ;; Go to the next row (if any left)
0C533 A2 00                             LDX #00
0C535 C8                                INY
0C536                                   
0C536                                   ;; If Y is 1A, skip noise tile check until done drawing
0C536 C0 1A                             CPY #$1A
0C538 D0 04                             BNE +
0C53A A9 00                                 LDA #$00
0C53C 85 01                                 STA temp+1
0C53E                                   +
0C53E                                   
0C53E C0 1E                             CPY #$1E
0C540 D0 C7                         BNE -
0C542                           
0C542                               ;; Clear attribute table
0C542 A9 23                         LDA #$23
0C544 8D 06 20                      STA PPU_ADDR
0C547 A9 C0                         LDA #$C0
0C549 8D 06 20                      STA PPU_ADDR
0C54C A9 00                         LDA #$00
0C54E A2 40                         LDX #$40
0C550                               -
0C550 8D 07 20                          STA PPU_DATA
0C553 CA                                DEX
0C554 D0 FA                         BNE -
0C556                               
0C556 60                            RTS0C557                           .include "game/subroutine/ColorizeBall.asm"
0C557                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C557                           ;;
0C557                           ;;  Subroutine: ColorizeBall
0C557                           ;;
0C557                           ;;  Applies the color set through ball_flags to the ball sprite.
0C557                           ;;
0C557                           ;;
0C557                           
0C557                           
0C557                           sub_ColorizeBall:
0C557                           
0C557                               ;; Get color from ball_flags
0C557 4A                            LSR
0C558 4A                            LSR
0C559 4A                            LSR
0C55A 4A                            LSR
0C55B 4A                            LSR
0C55C AA                            TAX
0C55D                           
0C55D                               ;; Add new light color of ball to PPU palette
0C55D A9 3F                         LDA #$3F
0C55F 85 00                         STA temp
0C561 A9 11                         LDA #$11
0C563 85 01                         STA temp+1
0C565 BD 3B CE                      LDA tbl_BallColorLight,x
0C568 85 02                         STA temp+2
0C56A 20 D7 CC                      JSR sub_WriteByteToPPUBuffer
0C56D                               
0C56D                               ;; Add new dark color of ball to PPU palette
0C56D E6 01                         INC temp+1
0C56F BD 35 CE                      LDA tbl_BallColorDark,x
0C572 85 02                         STA temp+2
0C574 20 D7 CC                      JSR sub_WriteByteToPPUBuffer
0C577                               
0C577 60                            RTS
0C578                           
0C578                           .include "game/subroutine/ColorsMatch.asm"
0C578                           
0C578                           ;; Subroutine to check if ball color matches colliding tile color
0C578                           
0C578                           sub_ColorsMatch:
0C578                               ;; Save tile color in temp variable
0C578 A5 40                         LDA colliding_tile
0C57A 29 0E                         AND #%00001110
0C57C 85 00                         STA temp
0C57E                           
0C57E                               ;; Get ball color
0C57E A5 36                         LDA ball_flags
0C580 29 E0                         AND #%11100000
0C582 4A                            LSR
0C583 4A                            LSR
0C584 4A                            LSR
0C585 4A                            LSR
0C586                           
0C586                               ;; Compare with tile color
0C586 C5 00                         CMP temp
0C588 60                            RTS
0C589                           
0C589                           .include "game/subroutine/ConvertXYToTileType.asm"
0C589                           
0C589                           ;; Subroutine to convert the ball's position to a tile type
0C589                           ;; - Expects temp to be y-position of ball within game area
0C589                           ;; - Expects temp+1 to be x-position of ball within game area
0C589                           ;; - Puts result in accumulator and zp variable
0C589                           ;; - Corrupts X-register
0C589                           
0C589                           sub_ConvertXYToTileType:
0C589 A5 01                         LDA temp+1
0C58B 4A                            LSR
0C58C 4A                            LSR
0C58D 4A                            LSR
0C58E 4A                            LSR
0C58F 85 09                         STA temp+9
0C591 A5 00                         LDA temp
0C593 29 F0                         AND #%11110000
0C595 18                            CLC
0C596 65 09                         ADC temp+9
0C598 85 09                         STA temp+9
0C59A AA                            TAX
0C59B BD 00 04                      LDA tile_type, x
0C59E 85 40                         STA colliding_tile
0C5A0 60                            RTS
0C5A1                           
0C5A1                           .include "game/subroutine/DisableEnableRendering.asm"
0C5A1                           sub_DisableRendering:
0C5A1                               ;; Force NMI skip, disable rendering
0C5A1 A9 01                     	LDA #$01
0C5A3 85 14                     	STA force_skip_nmi
0C5A5 20 7A C4                      JSR sub_WaitForVBlank
0C5A8 A5 12                         LDA soft_ppu_mask
0C5AA 29 E7                         AND #%11100111
0C5AC 8D 01 20                      STA PPU_MASK
0C5AF 85 12                         STA soft_ppu_mask
0C5B1 20 7A C4                      JSR sub_WaitForVBlank
0C5B4 60                            RTS
0C5B5                           
0C5B5                           sub_EnableRendering:
0C5B5                               ;; Enable rendering
0C5B5 A9 00                     	LDA #$00
0C5B7 8D 05 20                  	STA PPU_SCROLL
0C5BA 8D 05 20                  	STA PPU_SCROLL
0C5BD 20 7A C4                      JSR sub_WaitForVBlank
0C5C0 85 14                     	STA force_skip_nmi
0C5C2 A5 12                         LDA soft_ppu_mask
0C5C4 09 18                         ORA #%00011000
0C5C6 85 12                         STA soft_ppu_mask
0C5C8 8D 01 20                      STA PPU_MASK
0C5CB 20 7A C4                      JSR sub_WaitForVBlank
0C5CE 60                            RTS
0C5CF                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C5CF                           sub_drawIntroScreenLogoTile:
0C5CF B9 1D CD                      LDA tbl_IntroScreenLogoChr,y
0C5D2 C9 60                         CMP #$60
0C5D4 D0 08                         BNE +
0C5D6 20 4F C4                          JSR sub_GetRandomNumber
0C5D9 29 07                             AND #$07
0C5DB 18                                CLC
0C5DC 69 60                             ADC #$60
0C5DE                               +
0C5DE 8D 07 20                      STA PPU_DATA
0C5E1 60                            RTS
0C5E2                           .include "game/subroutine/EvaluateTileType.asm"
0C5E2                           
0C5E2                           ;; Subroutine to evaluate the colliding tile type and take its
0C5E2                           ;; corresponding action (move block, kill player, ...)
0C5E2                           ;; - Expects X-register to be the tile_type offset
0C5E2                           ;; - Uses zp variable colliding_tile
0C5E2                           
0C5E2                           sub_EvaluateTileType:
0C5E2                           
0C5E2                               ;; Check if collided tile is a color block
0C5E2 A5 40                         LDA colliding_tile
0C5E4 29 80                         AND #IS_COLOR_BLOCK
0C5E6 D0 03                         BNE +
0C5E8 4C 4A C6                          JMP +checkIfPaintBlock
0C5EB                               +
0C5EB                               
0C5EB                               ;; It's a color block. Check if the colors match
0C5EB 20 78 C5                      JSR sub_ColorsMatch
0C5EE F0 01                         BEQ +
0C5F0                                   ;; Colors don't match - return
0C5F0 60                                RTS
0C5F1                               +
0C5F1                           
0C5F1                               ;; Colors matchl destroy color block
0C5F1                               
0C5F1                               ;; Convert the metatile offset value (which is in the X register)
0C5F1                               ;; to its corresponding address in PPU
0C5F1 20 B6 C6                      JSR sub_GetPPUAddrFromYXIndex
0C5F4                           
0C5F4                           
0C5F4                               
0C5F4                               ;; Remove color block from screen by drawing a total
0C5F4                               ;; of 7 tiles over it (shade included)
0C5F4 20 3B CB                      JSR sub_RemoveBlockFromScreen
0C5F7                               
0C5F7                               ;; - Load destruction animation on tile
0C5F7                               ;; Get most recent slot for explosion    
0C5F7 8A                            TXA
0C5F8 85 02                         STA temp+2
0C5FA A6 3A                         LDX explosion_pointer
0C5FC                           
0C5FC                               ;; If 0, use max pointer value
0C5FC D0 02                         BNE +
0C5FE A2 04                             LDX #MAX_ANIMATIONS
0C600                               +
0C600                           
0C600                               ;; Decrease pointer by one
0C600 CA                            DEX
0C601 86 3A                         STX explosion_pointer
0C603                           
0C603                               ;; Load explosion data into RAM
0C603 A9 00                         LDA #$00
0C605 9D 64 03                      STA explosion_currentframe,x
0C608                           
0C608 A9 04                         LDA #ANIMATION_SPEED
0C60A 9D 60 03                      STA explosion_framecounter,x
0C60D                           
0C60D A5 02                         LDA temp+2
0C60F 29 0F                         AND #%00001111
0C611 A8                            TAY
0C612 B9 8A D5                      LDA tbl_Times16,y
0C615 18                            CLC
0C616 69 0E                         ADC #$0E
0C618 9D 6C 03                      STA explosion_x,x
0C61B                           
0C61B A5 02                         LDA temp+2
0C61D 29 F0                         AND #%11110000
0C61F 18                            CLC
0C620 69 29                         ADC #$29
0C622 9D 70 03                      STA explosion_y,x
0C625                           
0C625 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C627 9D 68 03                      STA explosion_attributes,x
0C62A A9 01                         LDA #$01
0C62C 9D 74 03                      STA explosion_active,x
0C62F                           
0C62F A5 02                         LDA temp+2
0C631 AA                            TAX
0C632                               
0C632                               
0C632                               ;; - Write #$00 in tile type ram (makes not-solid)
0C632 A9 00                         LDA #$00
0C634 9D 00 04                      STA tile_type, x
0C637                           
0C637                           
0C637                               ;; Add (80 + level number) to score
0C637 A5 3F                         LDA current_level
0C639 18                            CLC
0C63A 69 51                         ADC #81
0C63C 20 80 C4                      JSR sub_AddAccumulatorToScore
0C63F                           
0C63F                           
0C63F                               ;; - If there are no color blocks left:
0C63F                               ;;   - Freeze ball
0C63F                               ;;   - Initiate level-win state [@TODO]
0C63F C6 41                         DEC blocks_left
0C641 D0 06                         BNE +
0C643 A5 36                             LDA ball_flags
0C645 09 04                             ORA #FREEZE_BALL
0C647 85 36                             STA ball_flags
0C649                               +
0C649                               
0C649 60                            RTS
0C64A                           
0C64A                           +checkIfPaintBlock:
0C64A                           
0C64A                           
0C64A                               ;; Check if collided tile is a paint block
0C64A A5 40                         LDA colliding_tile
0C64C 29 20                         AND #IS_PAINT_BLOCK
0C64E F0 1A                         BEQ +checkIfDeathBlock
0C650                                   ;; It's a paint block. Update ball color
0C650                                   ;; Save x-register
0C650 8A                                TXA
0C651 48                                PHA
0C652                           
0C652                                   ;; Get tile color
0C652 A5 40                             LDA colliding_tile
0C654 29 0E                             AND #%00001110
0C656 0A                                ASL
0C657 0A                                ASL
0C658 0A                                ASL
0C659 0A                                ASL
0C65A 85 00                             STA temp
0C65C                           
0C65C                                   ;; Apply tile color to ball
0C65C A5 36                             LDA ball_flags
0C65E 29 1F                             AND #%00011111
0C660 05 00                             ORA temp
0C662 85 36                             STA ball_flags
0C664 20 57 C5                          JSR sub_ColorizeBall
0C667                           
0C667                                   ;; Restore x-register
0C667 68                                PLA
0C668 AA                                TAX
0C669                           
0C669                                   ;; Return
0C669 60                                RTS
0C66A                               +checkIfDeathBlock:
0C66A                           
0C66A                               ;; Check if collided tile is a death block
0C66A A5 40                         LDA colliding_tile
0C66C 29 10                         AND #IS_DEATH_BLOCK
0C66E F0 38                         BEQ +checkIfMoveBlock
0C670                           
0C670                                   ;; It is a death block
0C670                                   ;; Freeze and kill player
0C670 A5 36                             LDA ball_flags
0C672 09 05                             ORA #%00000101
0C674 85 36                             STA ball_flags
0C676                                   
0C676                                   ;; Get free explosion slot
0C676 A6 3A                             LDX explosion_pointer
0C678 D0 02                             BNE +
0C67A A2 04                                 LDX #MAX_ANIMATIONS
0C67C                                   +
0C67C CA                                DEX
0C67D 86 3A                             STX explosion_pointer
0C67F                           
0C67F                                   ;; Load explosion data into RAM
0C67F A9 00                             LDA #$00
0C681 9D 64 03                          STA explosion_currentframe,x
0C684                           
0C684 A9 04                             LDA #ANIMATION_SPEED
0C686 9D 60 03                          STA explosion_framecounter,x
0C689                           
0C689 A5 17                             LDA ball_xpos_hi
0C68B 38                                SEC
0C68C E9 08                             SBC #$08
0C68E 9D 6C 03                          STA explosion_x,x
0C691                           
0C691 A5 19                             LDA ball_ypos_hi
0C693 38                                SEC
0C694 E9 06                             SBC #$06
0C696 9D 70 03                          STA explosion_y,x
0C699                           
0C699 A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C69B 9D 68 03                          STA explosion_attributes,x
0C69E                           
0C69E A9 01                             LDA #$01
0C6A0 9D 74 03                          STA explosion_active,x
0C6A3                           
0C6A3                                   ;; Set kill counter
0C6A3 A9 60                             LDA #$60
0C6A5 85 3E                             STA kill_counter
0C6A7                           
0C6A7                                   ;; Return
0C6A7 60                                RTS
0C6A8                           
0C6A8                           
0C6A8                           +checkIfMoveBlock:
0C6A8                           
0C6A8                               ;; Check if collided tile is a move block
0C6A8 A5 40                         LDA colliding_tile
0C6AA 29 40                         AND #IS_MOVE_BLOCK
0C6AC F0 07                         BEQ +done
0C6AE                                   ;; It is a move block. Check if colors match
0C6AE 20 78 C5                          JSR sub_ColorsMatch
0C6B1 F0 01                             BEQ +
0C6B3                                       ;; Colors don't match - return
0C6B3 60                                    RTS
0C6B4                                   +
0C6B4                           
0C6B4                                   ;; Colors match.
0C6B4                                   ;; - Check if next tile is a solid
0C6B4                                   ;; - If not, move the tile:
0C6B4                                   ;;   - Add the tiles that need updating to ppu buffer
0C6B4                                   ;;   - Add move tile sprite over the original tile
0C6B4                                   ;;   - Initiate moving the sprite that way for 16px
0C6B4                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C6B4                                   ;;   - Update attribute table accordingly through ppu buffer
0C6B4                                   ;; - After moving the sprite, in a different routine:
0C6B4                                   ;;   - Add move tile data on the new tile location
0C6B4                                   ;;   - Write the original tile type data on new position in ram
0C6B4                                   ;;   - Destroy sprite
0C6B4                                   ;;   - Update attribute table accordingly through ppu buffer
0C6B4                                   ;; [@TODO]
0C6B4 60                                RTS
0C6B5                               +done:
0C6B5                           
0C6B5                               ;; Return
0C6B5 60                            RTS
0C6B6                           
0C6B6                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C6B6                           sub_GetPPUAddrFromYXIndex:
0C6B6                           
0C6B6                               ;; Get the PPU address from YX index
0C6B6                               ;; - Expects YX index (aka tile offset) to be in the X register
0C6B6                               ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C6B6                               
0C6B6                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C6B6                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C6B6                               
0C6B6 8A                            TXA
0C6B7 29 C0                         AND #%11000000
0C6B9 18                            CLC
0C6BA 2A                            ROL
0C6BB 2A                            ROL
0C6BC 2A                            ROL
0C6BD 69 20                         ADC #$20
0C6BF 85 00                         STA temp
0C6C1                               
0C6C1 8A                            TXA
0C6C2 29 0F                         AND #%00001111
0C6C4 0A                            ASL
0C6C5 85 01                         STA temp+1
0C6C7                               
0C6C7 8A                            TXA
0C6C8 29 30                         AND #%00110000
0C6CA 0A                            ASL
0C6CB 0A                            ASL
0C6CC 18                            CLC
0C6CD 65 01                         ADC temp+1
0C6CF 85 01                         STA temp+1
0C6D1                               
0C6D1 A5 00                         LDA temp
0C6D3 69 00                         ADC #$00
0C6D5 85 00                         STA temp
0C6D7                               
0C6D7 A5 01                         LDA temp+1
0C6D9 18                            CLC
0C6DA 69 C2                         ADC #$C2
0C6DC 85 01                         STA temp+1
0C6DE                               
0C6DE A5 00                         LDA temp
0C6E0 69 00                         ADC #$00
0C6E2 85 00                         STA temp
0C6E4                           
0C6E4 60                            RTS0C6E5                           .include "game/subroutine/InitiateNudge.asm"
0C6E5                           
0C6E5                           sub_InitiateNudge:
0C6E5 85 36                         STA ball_flags
0C6E7 A9 05                         LDA #NUDGE_FRAMES
0C6E9 85 3C                         STA nudge_counter
0C6EB 60                            RTS
0C6EC                           
0C6EC                           .include "game/subroutine/JumpToPointer.asm"
0C6EC                           sub_JumpToPointer:
0C6EC 6C 0C 00                      JMP (pointer)
0C6EF                               ;RTS must be handled by the routine (pointer) jumps to
0C6EF                           .include "game/subroutine/LoadGameScreen.asm"
0C6EF                           sub_LoadGameScreen:
0C6EF                           
0C6EF                               ;; Clear the screen
0C6EF 20 EC C4                      JSR sub_ClearScreen
0C6F2                               
0C6F2                               ;; Clear collision and attribute data; reset blocks left in the process
0C6F2 A2 00                         LDX #$00
0C6F4 8A                            TXA
0C6F5 85 41                         STA blocks_left
0C6F7                               -
0C6F7 9D 00 04                          STA tile_type,x
0C6FA E8                                INX
0C6FB D0 FA                         BNE -
0C6FD                               
0C6FD                               ;; Get pointer from current level
0C6FD A6 3F                         LDX current_level
0C6FF BD 3F D5                      LDA tbl_lvl_layout_lo,x
0C702 85 0C                         STA pointer
0C704 BD 26 D5                      LDA tbl_lvl_layout_hi,x
0C707 85 0D                         STA pointer+1
0C709                           
0C709                               ;; Set up the loop
0C709 A0 00                         LDY #$00
0C70B                           -drawRowColumnLoop:
0C70B                           
0C70B                               ;; Load (x,y) of current set of tiles
0C70B B1 0C                         LDA (pointer),y
0C70D                           
0C70D                               ;; Check if level is done; if so, skip the loop
0C70D C9 FF                         CMP #LEVEL_END
0C70F D0 03                         BNE +
0C711 4C 5A C8                          JMP +doneLevelLoad
0C714                               +
0C714                           
0C714                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C714 85 00                         STA temp
0C716 C8                            INY
0C717 B1 0C                         LDA (pointer),y
0C719 85 01                         STA temp+1
0C71B                               
0C71B                               ;; Convert (x,y) to PPU address
0C71B                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C71B A5 00                         LDA temp
0C71D 29 0F                         AND #%00001111
0C71F 4A                            LSR
0C720 4A                            LSR
0C721 09 20                         ORA #$20
0C723 85 02                         STA temp+2
0C725                               
0C725                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C725 A5 00                         LDA temp
0C727 29 F0                         AND #%11110000
0C729 4A                            LSR
0C72A 4A                            LSR
0C72B 4A                            LSR
0C72C 85 03                         STA temp+3
0C72E                               
0C72E A5 00                         LDA temp
0C730 29 03                         AND #%00000011
0C732 AA                            TAX
0C733 BD 9A D5                      LDA tbl_Times64,x
0C736 18                            CLC
0C737 65 03                         ADC temp+3
0C739 18                            CLC
0C73A 69 C2                         ADC #$C2
0C73C 85 03                         STA temp+3
0C73E                               
0C73E                               ;; Add carry to temp+2
0C73E A5 02                         LDA temp+2
0C740 69 00                         ADC #$00
0C742 85 02                         STA temp+2
0C744                           
0C744                               ;; Convert tile data to loop count and tile type
0C744                               ;; temp+4 = color
0C744 A5 01                         LDA temp+1
0C746 29 07                         AND #%00000111
0C748 85 04                         STA temp+4
0C74A                               
0C74A                               ;; If color = 7, this is a wall
0C74A C9 07                         CMP #%00000111
0C74C F0 12                         BEQ +wallHack
0C74E                                   
0C74E                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C74E 29 01                             AND #%00000001
0C750 F0 02                             BEQ +
0C752 A9 05                                 LDA #$05
0C754                                   +
0C754 85 07                             STA temp+7
0C756                                
0C756                                   ;; temp+5 = tile type
0C756 A5 01                             LDA temp+1
0C758 4A                                LSR
0C759 4A                                LSR
0C75A 4A                                LSR
0C75B 29 03                             AND #%00000011
0C75D 4C 66 C7                          JMP +setTileType
0C760                               +wallHack:
0C760                               
0C760                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C760 A9 00                         LDA #$00
0C762 85 07                         STA temp+7
0C764 A9 04                         LDA #$04
0C766                           
0C766                           +setTileType:    
0C766 85 05                         STA temp+5
0C768                               
0C768                               ;; X = tile offset
0C768 18                            CLC
0C769 65 07                         ADC temp+7
0C76B AA                            TAX
0C76C                               
0C76C                               ;; temp+6 = number of tiles
0C76C A5 01                         LDA temp+1
0C76E 29 60                         AND #%01100000
0C770 4A                            LSR
0C771 4A                            LSR
0C772 4A                            LSR
0C773 4A                            LSR
0C774 4A                            LSR
0C775 85 06                         STA temp+6
0C777                               
0C777                               ;; Translate (x,y) to (y,x) for tile RAM
0C777 A5 00                         LDA temp
0C779 0A                            ASL
0C77A 0A                            ASL
0C77B 0A                            ASL
0C77C 0A                            ASL
0C77D 85 08                         STA temp+8
0C77F A5 00                         LDA temp
0C781 4A                            LSR
0C782 4A                            LSR
0C783 4A                            LSR
0C784 4A                            LSR
0C785 05 08                         ORA temp+8
0C787 85 00                         STA temp
0C789                               
0C789                               ;; Set up loop
0C789 98                            TYA
0C78A 48                            PHA
0C78B A4 06                         LDY temp+6
0C78D                           
0C78D                               -drawTileLoop:
0C78D                                   ;; Write PPU address
0C78D 2C 02 20                          BIT PPU_STATUS
0C790 A5 02                             LDA temp+2
0C792 8D 06 20                          STA PPU_ADDR
0C795 A5 03                             LDA temp+3
0C797 8D 06 20                          STA PPU_ADDR
0C79A                                   
0C79A                                   ;; Write first and second tile
0C79A BD 9E D5                          LDA tbl_GametileTopLeft,x
0C79D 8D 07 20                          STA PPU_DATA
0C7A0 BD A8 D5                          LDA tbl_GametileTopRight,x
0C7A3 8D 07 20                          STA PPU_DATA
0C7A6                                   
0C7A6                                   ;; Update PPU address
0C7A6 2C 02 20                          BIT PPU_STATUS
0C7A9 A5 02                             LDA temp+2
0C7AB 8D 06 20                          STA PPU_ADDR
0C7AE A5 03                             LDA temp+3
0C7B0 18                                CLC
0C7B1 69 20                             ADC #$20
0C7B3 8D 06 20                          STA PPU_ADDR
0C7B6                                   
0C7B6                                   ;; Write third and fourth tile
0C7B6 BD B2 D5                          LDA tbl_GametileBottomLeft,x
0C7B9 8D 07 20                          STA PPU_DATA
0C7BC BD BC D5                          LDA tbl_GametileBottomRight,x
0C7BF 8D 07 20                          STA PPU_DATA
0C7C2                           
0C7C2                                   ;; Push x-register to stack
0C7C2 8A                                TXA
0C7C3 48                                PHA
0C7C4                           
0C7C4                                   ;; Update tile RAM (aka collision table)
0C7C4 A6 05                             LDX temp+5
0C7C6 BD C6 D5                          LDA tbl_GameTileRamByte,x
0C7C9 05 04                             ORA temp+4
0C7CB 0A                                ASL
0C7CC 09 01                             ORA #%00000001
0C7CE A6 00                             LDX temp
0C7D0 9D 00 04                          STA tile_type,x
0C7D3                           
0C7D3                                   ;; Check if shade 1 should be drawn
0C7D3 E8                                INX
0C7D4 BD 00 04                          LDA tile_type,x
0C7D7 D0 05                             BNE +
0C7D9 A9 00                                 LDA #$00
0C7DB 8D 07 20                              STA PPU_DATA
0C7DE                                   +
0C7DE                                   
0C7DE                                   ;; Check if shade 2 should be drawn
0C7DE A5 03                             LDA temp+3
0C7E0 18                                CLC
0C7E1 69 41                             ADC #$41
0C7E3 85 03                             STA temp+3
0C7E5 A5 02                             LDA temp+2
0C7E7 69 00                             ADC #$00
0C7E9 85 02                             STA temp+2
0C7EB                                   
0C7EB 8A                                TXA
0C7EC 18                                CLC
0C7ED 69 0F                             ADC #$0F
0C7EF AA                                TAX
0C7F0                                   
0C7F0 BD 00 04                          LDA tile_type,x
0C7F3 D0 0F                             BNE +
0C7F5 A5 02                                 LDA temp+2
0C7F7 8D 06 20                              STA PPU_ADDR
0C7FA A5 03                                 LDA temp+3
0C7FC 8D 06 20                              STA PPU_ADDR
0C7FF A9 00                                 LDA #$00
0C801 8D 07 20                              STA PPU_DATA
0C804                                   +
0C804                           
0C804                                   ;; Check if shade 3 should be drawn
0C804 E8                                INX
0C805 E6 03                             INC temp+3
0C807 BD 00 04                          LDA tile_type,x
0C80A D0 0F                             BNE +
0C80C A5 02                                 LDA temp+2
0C80E 8D 06 20                              STA PPU_ADDR
0C811 A5 03                                 LDA temp+3
0C813 8D 06 20                              STA PPU_ADDR
0C816 A9 00                                 LDA #$00
0C818 8D 07 20                              STA PPU_DATA
0C81B                                   +
0C81B                                   
0C81B                                   ;; Restore x-register from stack
0C81B 68                                PLA
0C81C AA                                TAX
0C81D                                   
0C81D                                   ;; Reset pointer for next tile
0C81D A5 03                             LDA temp+3
0C81F 38                                SEC
0C820 E9 42                             SBC #$42
0C822 85 03                             STA temp+3
0C824 A5 02                             LDA temp+2
0C826 E9 00                             SBC #$00
0C828 85 02                             STA temp+2
0C82A                                   
0C82A                                   ;; Draw next metatile in this loop (if any left)
0C82A 88                                DEY
0C82B 30 27                             BMI +doneDrawingRowColumn
0C82D                                   
0C82D                                   ;; Is it a row or a column?
0C82D A5 01                             LDA temp+1
0C82F 10 17                             BPL +
0C831                                       ;; It is a column: move pointer down (+$40)
0C831 A5 03                                 LDA temp+3
0C833 18                                    CLC
0C834 69 40                                 ADC #$40
0C836 85 03                                 STA temp+3
0C838 A5 02                                 LDA temp+2
0C83A 69 00                                 ADC #$00
0C83C 85 02                                 STA temp+2
0C83E                                       
0C83E                                       ;; Add 16 to temp (as a tile RAM pointer)
0C83E A5 00                                 LDA temp
0C840 18                                    CLC
0C841 69 10                                 ADC #$10
0C843 85 00                                 STA temp
0C845 4C 51 C8                              JMP +drawNextTile
0C848                                   +
0C848                                   
0C848                                   ;; It is a row: move pointer right (+$02)
0C848 A5 03                             LDA temp+3
0C84A 18                                CLC
0C84B 69 02                             ADC #$02
0C84D 85 03                             STA temp+3
0C84F                                   
0C84F                                   ;; Add 1 to temp (as a tile RAM pointer)
0C84F E6 00                             INC temp
0C851                           
0C851                               
0C851                               ;; Next tile in the row/column
0C851                                   +drawNextTile:
0C851 4C 8D C7                      JMP -drawTileLoop
0C854                           
0C854                               ;; Go to the next set of tiles
0C854                           +doneDrawingRowColumn:
0C854 68                            PLA
0C855 A8                            TAY
0C856 C8                            INY
0C857 4C 0B C7                      JMP -drawRowColumnLoop
0C85A                           
0C85A                           ;; Level loading is done
0C85A                           +doneLevelLoad:
0C85A                           
0C85A                               ;; Count number of color blocks
0C85A A2 A0                         LDX #160
0C85C                               -
0C85C BD FF 03                          LDA tile_type-1,x
0C85F 29 80                             AND #%10000000
0C861 F0 02                             BEQ +
0C863 E6 41                                 INC blocks_left
0C865                                   +
0C865 CA                                DEX
0C866 D0 F4                         BNE -
0C868                           
0C868                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C868 A9 20                         LDA #$20
0C86A 8D 06 20                      STA PPU_ADDR
0C86D A9 A2                         LDA #$A2
0C86F 8D 06 20                      STA PPU_ADDR
0C872 A9 35                         LDA #$35
0C874 20 A2 CA                      JSR sub_Draw28HorizontalTiles
0C877                           
0C877                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C877 A9 23                         LDA #$23
0C879 8D 06 20                      STA PPU_ADDR
0C87C A9 42                         LDA #$42
0C87E 8D 06 20                      STA PPU_ADDR
0C881 A9 31                         LDA #$31
0C883 20 A2 CA                      JSR sub_Draw28HorizontalTiles
0C886                           
0C886                               ;; Left & right game bounds
0C886                               ;; Set PPU_ADDR and store in temp variables
0C886 A9 20                         LDA #$20
0C888 85 00                         STA temp
0C88A 8D 06 20                      STA PPU_ADDR
0C88D A9 C1                         LDA #$C1
0C88F 85 01                         STA temp+1
0C891 8D 06 20                      STA PPU_ADDR
0C894                               
0C894                               ;; Set vertical bound tile and set up loop
0C894 A0 33                         LDY #$33
0C896 A2 14                         LDX #20
0C898                               -
0C898                                   ;; Show left tile
0C898 8C 07 20                          STY PPU_DATA
0C89B                                   
0C89B                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C89B A5 00                             LDA temp
0C89D 8D 06 20                          STA PPU_ADDR
0C8A0 A5 01                             LDA temp+1
0C8A2 18                                CLC
0C8A3 69 1D                             ADC #29
0C8A5 85 01                             STA temp+1
0C8A7 8D 06 20                          STA PPU_ADDR
0C8AA                           
0C8AA                                   ;; Show right tile
0C8AA 8C 07 20                          STY PPU_DATA
0C8AD                           
0C8AD                                   ;; Check if we're done yet
0C8AD CA                                DEX
0C8AE F0 18                             BEQ +drawCorners
0C8B0                                   
0C8B0                                   ;; Not done yet: add 3 to low byte for next left bound
0C8B0 A5 01                             LDA temp+1
0C8B2 18                                CLC
0C8B3 69 03                             ADC #3
0C8B5 85 01                             STA temp+1
0C8B7                                   
0C8B7                                   ;; Apply carry to high byte
0C8B7 A5 00                             LDA temp
0C8B9 69 00                             ADC #$00
0C8BB 85 00                             STA temp
0C8BD                                   
0C8BD                                   ;; Store next PPU_ADDR to draw at
0C8BD 8D 06 20                          STA PPU_ADDR
0C8C0 A5 01                             LDA temp+1
0C8C2 8D 06 20                          STA PPU_ADDR
0C8C5 4C 98 C8                      JMP -
0C8C8                               
0C8C8                               
0C8C8                           
0C8C8                           +drawCorners:
0C8C8                               ;; Draw the corners of the playing field
0C8C8 A9 20                         LDA #$20
0C8CA 8D 06 20                      STA PPU_ADDR
0C8CD A9 A1                         LDA #$A1
0C8CF 8D 06 20                      STA PPU_ADDR
0C8D2 A9 39                         LDA #$39
0C8D4 8D 07 20                      STA PPU_DATA
0C8D7                           
0C8D7 A9 20                         LDA #$20
0C8D9 8D 06 20                      STA PPU_ADDR
0C8DC A9 BE                         LDA #$BE
0C8DE 8D 06 20                      STA PPU_ADDR
0C8E1 A9 3A                         LDA #$3A
0C8E3 8D 07 20                      STA PPU_DATA
0C8E6                               ;; (added background tile for Sprite-0 hit)
0C8E6 A9 3F                         LDA #$3F
0C8E8 8D 07 20                      STA PPU_DATA
0C8EB                           
0C8EB A9 23                         LDA #$23
0C8ED 8D 06 20                      STA PPU_ADDR
0C8F0 A9 41                         LDA #$41
0C8F2 8D 06 20                      STA PPU_ADDR
0C8F5 A9 36                         LDA #$36
0C8F7 8D 07 20                      STA PPU_DATA
0C8FA                           
0C8FA A9 23                         LDA #$23
0C8FC 8D 06 20                      STA PPU_ADDR
0C8FF A9 5E                         LDA #$5E
0C901 8D 06 20                      STA PPU_ADDR
0C904 A9 34                         LDA #$34
0C906 8D 07 20                      STA PPU_DATA
0C909                           
0C909                           
0C909                               ;; Draw the hud labels
0C909 A9 20                         LDA #$20
0C90B 8D 06 20                      STA PPU_ADDR
0C90E A9 62                         LDA #$62
0C910 8D 06 20                      STA PPU_ADDR
0C913 A2 00                         LDX #$00
0C915                               -
0C915 BD CB D5                          LDA tbl_HudText,x
0C918 8D 07 20                          STA PPU_DATA
0C91B E8                                INX
0C91C E0 1C                             CPX #28
0C91E D0 F5                         BNE -
0C920                           
0C920                           
0C920                               ;; Draw the current score
0C920 A9 20                         LDA #$20
0C922 8D 06 20                      STA PPU_ADDR
0C925 A9 83                         LDA #$83
0C927 8D 06 20                      STA PPU_ADDR
0C92A A2 00                         LDX #$00
0C92C                               -
0C92C B5 20                             LDA ball_score,x
0C92E 18                                CLC
0C92F 69 01                             ADC #$01
0C931 8D 07 20                          STA PPU_DATA
0C934 E8                                INX
0C935 E0 06                             CPX #$06
0C937 D0 F3                         BNE -
0C939                           
0C939                           
0C939                               ;; Draw the level number
0C939                               ;; (with primitive HEX>DEC)
0C939 A5 3F                         LDA current_level
0C93B 18                            CLC
0C93C 69 01                         ADC #$01
0C93E 85 01                         STA temp+1
0C940                               
0C940 C9 14                         CMP #20
0C942 B0 13                         BCS +tempIsTwo
0C944                               
0C944 C9 0A                         CMP #10
0C946 B0 05                         BCS +tempIsOne
0C948                               
0C948 A9 00                         LDA #$00
0C94A 4C 5E C9                      JMP +setTemp
0C94D                               
0C94D                           +tempIsOne:
0C94D 38                            SEC
0C94E E9 0A                         SBC #10
0C950 85 01                         STA temp+1
0C952 A9 01                         LDA #$01
0C954 4C 5E C9                      JMP +setTemp
0C957                               
0C957                           +tempIsTwo:
0C957 38                            SEC
0C958 E9 14                         SBC #20
0C95A 85 01                         STA temp+1
0C95C A9 02                         LDA #$02
0C95E                           
0C95E                           +setTemp:
0C95E 85 00                         STA temp
0C960                               
0C960 E6 00                         INC temp
0C962 E6 01                         INC temp+1
0C964                               
0C964 A9 20                         LDA #$20
0C966 8D 06 20                      STA PPU_ADDR
0C969 A9 8B                         LDA #$8B
0C96B 8D 06 20                      STA PPU_ADDR
0C96E A5 00                         LDA temp
0C970 8D 07 20                      STA PPU_DATA
0C973 A5 01                         LDA temp+1
0C975 8D 07 20                      STA PPU_DATA
0C978                           
0C978                           
0C978                               ;; Draw lives (presumes lives to be capped at 9)
0C978 A9 20                         LDA #$20
0C97A 8D 06 20                      STA PPU_ADDR
0C97D A9 92                         LDA #$92
0C97F 8D 06 20                      STA PPU_ADDR
0C982 A6 1F                         LDX ball_lives
0C984 E8                            INX
0C985 8E 07 20                      STX PPU_DATA
0C988                           
0C988                           
0C988                               ;; Set and draw bonus
0C988 A9 07                         LDA #$07
0C98A 85 2C                         STA ball_bonus
0C98C A9 09                         LDA #$09
0C98E 85 2D                         STA ball_bonus+1
0C990 85 2E                         STA ball_bonus+2
0C992                               
0C992 A9 20                         LDA #$20
0C994 8D 06 20                      STA PPU_ADDR
0C997 A9 9A                         LDA #$9A
0C999 8D 06 20                      STA PPU_ADDR
0C99C A2 00                         LDX #$00
0C99E                               -
0C99E B5 2C                             LDA ball_bonus,x
0C9A0 18                                CLC
0C9A1 69 01                             ADC #$01
0C9A3 8D 07 20                          STA PPU_DATA
0C9A6 E8                                INX
0C9A7 E0 03                             CPX #$03
0C9A9 D0 F3                         BNE -
0C9AB                           
0C9AB                           
0C9AB                               ;; Set attribute data to RAM
0C9AB                               
0C9AB                               ;; Byte 0-7 of attribute ram should be #%10100000
0C9AB A2 00                         LDX #$00
0C9AD A9 A0                         LDA #$A0
0C9AF                               -
0C9AF 9D A0 04                          STA tile_attributes,x
0C9B2 E8                                INX
0C9B3 E0 08                             CPX #$08
0C9B5 D0 F8                         BNE -
0C9B7                           
0C9B7                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C9B7                           
0C9B7                           -attributeLoop:
0C9B7                               ;; Reset current attribute value
0C9B7 A9 00                         LDA #$00
0C9B9 85 02                         STA temp+2
0C9BB                           
0C9BB                               ;; Get first metatile in tile ram based on attribute index
0C9BB                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C9BB 8A                            TXA
0C9BC                           
0C9BC 38                            SEC
0C9BD E9 08                         SBC #$08
0C9BF 85 01                         STA temp+1      ; attr - 8 (temp1)
0C9C1 0A                            ASL             ; * 2
0C9C2 85 00                         STA temp        ; temp = temp1 * 2
0C9C4                           
0C9C4 A5 01                         LDA temp+1      ; temp1
0C9C6 29 F8                         AND #%11111000  ; rounded down to 8's
0C9C8 0A                            ASL             ; * 2
0C9C9 18                            CLC
0C9CA 65 00                         ADC temp        ; + temp1 * 2
0C9CC 85 00                         STA temp        ; first metatile
0C9CE                           
0C9CE                               ;; Store first metatile in y-register
0C9CE A8                            TAY
0C9CF                           
0C9CF                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C9CF 8A                            TXA
0C9D0 29 07                         AND #%00000111
0C9D2 C9 07                         CMP #%00000111
0C9D4 F0 0B                         BEQ +
0C9D6                           
0C9D6                               ;; If X >= $30, don't apply bottom right metatile
0C9D6 E0 30                         CPX #$30
0C9D8 B0 07                         BCS +
0C9DA                               
0C9DA                               ;; Add metatile1 subpalette to attribute value
0C9DA B9 00 04                      LDA tile_type,y
0C9DD 29 0C                         AND #%00001100
0C9DF 85 02                         STA temp+2
0C9E1                               +
0C9E1                           
0C9E1                           
0C9E1                               ;; Apply second metatile
0C9E1 88                            DEY
0C9E2                           
0C9E2                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C9E2 8A                            TXA
0C9E3 29 07                         AND #%00000111
0C9E5 F0 10                         BEQ +
0C9E7                           
0C9E7                               ;; If X >= $30, don't apply bottom left metatile
0C9E7 E0 30                         CPX #$30
0C9E9 B0 0C                         BCS +
0C9EB                           
0C9EB                           
0C9EB                           
0C9EB                               ;; Add metatile2 subpalette to attribute value
0C9EB B9 00 04                      LDA tile_type,y
0C9EE 29 0C                         AND #%00001100
0C9F0 4A                            LSR
0C9F1 4A                            LSR
0C9F2 05 02                         ORA temp+2
0C9F4 4C F9 C9                      JMP ++
0C9F7                               +
0C9F7 A5 02                         LDA temp+2
0C9F9                               ++
0C9F9 0A                            ASL
0C9FA 0A                            ASL
0C9FB 85 02                         STA temp+2
0C9FD                           
0C9FD                           
0C9FD                               ;; Apply third metatile
0C9FD 98                            TYA
0C9FE 38                            SEC
0C9FF E9 0F                         SBC #$0F
0CA01 A8                            TAY
0CA02                           
0CA02                               ;; If X MOD 8 == 7, don't apply top right metatile
0CA02 8A                            TXA
0CA03 29 07                         AND #%00000111
0CA05 C9 07                         CMP #%00000111
0CA07 F0 11                         BEQ +
0CA09                           
0CA09                               ;; If X < $10, don't apply top right metatile
0CA09 8A                            TXA
0CA0A 29 F0                         AND #%11110000
0CA0C F0 0C                         BEQ +
0CA0E                           
0CA0E                               ;; Add metatile3 subpalette to attribute value
0CA0E B9 00 04                      LDA tile_type,y
0CA11 29 0C                         AND #%00001100
0CA13 4A                            LSR
0CA14 4A                            LSR
0CA15 05 02                         ORA temp+2
0CA17 4C 1C CA                      JMP ++
0CA1A                               +
0CA1A A5 02                         LDA temp+2
0CA1C                               ++
0CA1C 0A                            ASL
0CA1D 0A                            ASL
0CA1E 85 02                         STA temp+2
0CA20                           
0CA20                           
0CA20                               ;; Apply fourth metatile
0CA20 88                            DEY
0CA21                           
0CA21                               ;; If X MOD 8 == 0, don't apply top left metatile
0CA21 8A                            TXA
0CA22 29 07                         AND #%00000111
0CA24 F0 11                         BEQ +
0CA26                           
0CA26                               ;; If X < $10, don't apply top left metatile
0CA26 8A                            TXA
0CA27 29 F0                         AND #%11110000
0CA29 F0 0C                         BEQ +
0CA2B                           
0CA2B                               ;; Add metatile4 subpalette to attribute value
0CA2B B9 00 04                      LDA tile_type,y
0CA2E 29 0C                         AND #%00001100
0CA30 4A                            LSR
0CA31 4A                            LSR
0CA32 05 02                         ORA temp+2
0CA34 4C 39 CA                      JMP ++
0CA37                               +
0CA37 A5 02                         LDA temp+2
0CA39                               ++
0CA39 9D A0 04                      STA tile_attributes,x
0CA3C                           
0CA3C                               ;; Check the next attribute, if any left
0CA3C E8                            INX
0CA3D E0 38                         CPX #$38
0CA3F F0 03                         BEQ +
0CA41 4C B7 C9                          JMP -attributeLoop
0CA44                               +
0CA44                           
0CA44                               ;; Stream attribute RAM to PPU
0CA44 2C 02 20                      BIT PPU_STATUS
0CA47 A9 23                         LDA #$23
0CA49 8D 06 20                      STA PPU_ADDR
0CA4C A9 C0                         LDA #$C0
0CA4E 8D 06 20                      STA PPU_ADDR
0CA51 A2 00                         LDX #$00
0CA53                               -
0CA53 BD A0 04                          LDA tile_attributes,x
0CA56 8D 07 20                          STA PPU_DATA
0CA59 E8                                INX
0CA5A E0 40                             CPX #$40
0CA5C D0 F5                         BNE -
0CA5E                           
0CA5E                               ;; Set initial ball position
0CA5E A6 3F                         LDX current_level
0CA60 BD 58 D5                      LDA tbl_lvl_ball_startpos,x
0CA63 29 F0                         AND #%11110000
0CA65 18                            CLC
0CA66 69 34                         ADC #$34
0CA68 85 19                         STA ball_ypos_hi
0CA6A BD 58 D5                      LDA tbl_lvl_ball_startpos,x
0CA6D 0A                            ASL
0CA6E 0A                            ASL
0CA6F 0A                            ASL
0CA70 0A                            ASL
0CA71 18                            CLC
0CA72 69 14                         ADC #$14
0CA74 85 17                         STA ball_xpos_hi
0CA76 A9 00                         LDA #$00
0CA78 85 18                         STA ball_xpos_lo
0CA7A 85 1A                         STA ball_ypos_lo
0CA7C                               
0CA7C                               ;; Set initial ball color and direction
0CA7C BD 71 D5                      LDA tbl_lvl_ball_init,x
0CA7F 29 F0                         AND #%11110000
0CA81 85 36                         STA ball_flags
0CA83 20 57 C5                      JSR sub_ColorizeBall
0CA86                               
0CA86                               ;; Reset bonus counter
0CA86 A9 06                         LDA #BONUS_FRAMES
0CA88 85 3D                         STA bonus_counter
0CA8A                               
0CA8A                               ;; Play background noise
0CA8A A9 08                         LDA #$08
0CA8C 8D 15 40                      STA APU_STATUS
0CA8F 8D 0F 40                      STA NOISE_LENGTH
0CA92 A9 0E                         LDA #$0E
0CA94 85 44                         STA current_noise
0CA96 A9 00                         LDA #$00
0CA98 85 42                         STA max_noise
0CA9A 85 45                         STA noise_counter
0CA9C 85 43                         STA sweep_noise
0CA9E 20 DF C4                      JSR sub_BackgroundNoise
0CAA1                           
0CAA1                               ;; Return
0CAA1 60                            RTS
0CAA2                           
0CAA2                           
0CAA2                           ;; Subroutine: draw 28 tiles in a row
0CAA2                           sub_Draw28HorizontalTiles:
0CAA2 A2 1C                         LDX #28
0CAA4                               -
0CAA4 8D 07 20                          STA PPU_DATA
0CAA7 CA                                DEX
0CAA8 D0 FA                         BNE -
0CAAA 60                            RTS0CAAB                           .include "game/subroutine/LoadIntroScreen.asm"
0CAAB                           sub_LoadIntroScreen:
0CAAB                           
0CAAB                               ;; Load intro palette
0CAAB 2C 02 20                      BIT PPU_STATUS
0CAAE A9 3F                         LDA #$3F
0CAB0 8D 06 20                      STA PPU_ADDR
0CAB3 A9 00                         LDA #$00
0CAB5 8D 06 20                      STA PPU_ADDR
0CAB8 A2 00                         LDX #$00
0CABA                               -
0CABA BD FD CC                          LDA tbl_IntroScreenPalette,x
0CABD 8D 07 20                          STA PPU_DATA
0CAC0 E8                                INX
0CAC1 E0 20                             CPX #$20
0CAC3 D0 F5                         BNE -
0CAC5                               
0CAC5                               ;; Put ball in the middle
0CAC5 A9 7C                         LDA #$7C
0CAC7 85 17                         STA ball_xpos_hi
0CAC9 85 19                         STA ball_ypos_hi
0CACB                           
0CACB                               ;; Clear the screen
0CACB 20 EC C4                      JSR sub_ClearScreen
0CACE                           
0CACE                               ;; Set up intro screen draw loop
0CACE A2 00                         LDX #$00
0CAD0                           
0CAD0                           -loop_IntroScreenData:
0CAD0                           
0CAD0                               ;; Get current byte from intro screen data
0CAD0 BD 25 CD                      LDA tbl_IntroScreenData,x
0CAD3                           
0CAD3                               ;; If current byte is #$3F, we're done drawing.
0CAD3 C9 3F                         CMP #$3F
0CAD5 D0 03                         BNE +
0CAD7 4C 24 CB                          JMP +goToEndIntroScreen
0CADA                               +
0CADA                           
0CADA                               ;; If highest bits are %11, draw a plain tile
0CADA 29 C0                         AND #%11000000
0CADC D0 03                         BNE +
0CADE 4C 04 CB                          JMP +drawTile
0CAE1                               +
0CAE1                               
0CAE1                               ;; If highest bits are %01, set the PPU address
0CAE1                               ;; If not, draw two logo tiles
0CAE1 C9 40                         CMP #%01000000
0CAE3 D0 03                         BNE +drawLogo
0CAE5 4C 0E CB                          JMP +setPpuAddr
0CAE8                           
0CAE8                           +drawLogo:
0CAE8                               ;; Get bits 0-2 and store in a temp variable
0CAE8 BD 25 CD                      LDA tbl_IntroScreenData,x
0CAEB 29 07                         AND #%00000111
0CAED 85 00                         STA temp
0CAEF                               
0CAEF                               ;; Get bits 3-5, shift over to get a value from 0-7
0CAEF BD 25 CD                      LDA tbl_IntroScreenData,x
0CAF2 4A                            LSR
0CAF3 4A                            LSR
0CAF4 4A                            LSR
0CAF5 29 07                         AND #%00000111
0CAF7                               
0CAF7                               ;; Draw the tile that corresponds with that value
0CAF7 A8                            TAY
0CAF8 20 CF C5                      JSR sub_drawIntroScreenLogoTile
0CAFB                               
0CAFB                               ;; Do the same for the value stored in temp
0CAFB A4 00                         LDY temp
0CAFD 20 CF C5                      JSR sub_drawIntroScreenLogoTile
0CB00                           
0CB00                               ;; Next byte please
0CB00 E8                            INX
0CB01 4C D0 CA                      JMP -loop_IntroScreenData
0CB04                           
0CB04                           +drawTile:
0CB04                               ;; Just draw the tile value on screen
0CB04 BD 25 CD                      LDA tbl_IntroScreenData,x
0CB07 8D 07 20                      STA PPU_DATA
0CB0A                               
0CB0A                               ;; Next byte please
0CB0A E8                            INX
0CB0B 4C D0 CA                      JMP -loop_IntroScreenData
0CB0E                           
0CB0E                           
0CB0E                           +setPpuAddr:
0CB0E                               ;; Reset the PPU latch
0CB0E 2C 02 20                      BIT PPU_STATUS
0CB11                               
0CB11                               ;; Sanitize and write the high byte of the PPU address
0CB11 BD 25 CD                      LDA tbl_IntroScreenData,x
0CB14 29 3F                         AND #%00111111
0CB16 8D 06 20                      STA PPU_ADDR
0CB19                           
0CB19                               ;; Write the low byte of the PPU address
0CB19 E8                            INX
0CB1A BD 25 CD                      LDA tbl_IntroScreenData,x
0CB1D 8D 06 20                      STA PPU_ADDR
0CB20                               
0CB20                               ;; PPU has been set up to draw tiles at the correct spot now.
0CB20                               
0CB20                               ;; Next byte please.
0CB20 E8                            INX
0CB21 4C D0 CA                      JMP -loop_IntroScreenData
0CB24                           
0CB24                           +goToEndIntroScreen:
0CB24                           
0CB24                               ;; To color the 1.LEVEL: line green, we need to update two
0CB24                               ;; values in the PPU attribute data.
0CB24 2C 02 20                      BIT PPU_STATUS
0CB27 A9 23                         LDA #$23
0CB29 8D 06 20                      STA PPU_ADDR
0CB2C A9 CB                         LDA #$CB
0CB2E 8D 06 20                      STA PPU_ADDR
0CB31 A9 0A                         LDA #%00001010
0CB33 8D 07 20                      STA PPU_DATA
0CB36 8D 07 20                      STA PPU_DATA
0CB39                           
0CB39 60                            RTS
0CB3A                           
0CB3A                           .include "game/subroutine/LoadWinScreen.asm"
0CB3A                           sub_LoadWinScreen:
0CB3A 60                            RTS
0CB3B                           
0CB3B                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CB3B                           sub_RemoveBlockFromScreen:
0CB3B                           
0CB3B                               ;; Get current buffer location
0CB3B A4 39                         LDY ppu_buffer_pointer
0CB3D                               
0CB3D                               ;; TILE 1: if metatile on top left is solid, draw
0CB3D                               ;; null tile, else draw random noise tile
0CB3D A9 00                         LDA #$00
0CB3F 85 38                         STA ppu_buffer_update
0CB41                               
0CB41 A5 00                         LDA temp
0CB43 99 00 03                      STA ppu_buffer,y
0CB46 C8                            INY
0CB47 A5 01                         LDA temp+1
0CB49 99 00 03                      STA ppu_buffer,y
0CB4C C8                            INY
0CB4D                               
0CB4D 8A                            TXA
0CB4E 29 0F                         AND #%00001111
0CB50 F0 11                         BEQ +drawRandomTile
0CB52                           
0CB52 8A                            TXA
0CB53 29 F0                         AND #%11110000
0CB55 F0 0C                         BEQ +drawRandomTile
0CB57                           
0CB57 BD EF 03                      LDA tile_type-17,x
0CB5A 29 01                         AND #%00000001
0CB5C F0 05                         BEQ +drawRandomTile  
0CB5E                           
0CB5E                               ;; Draw a null tile
0CB5E A9 00                         LDA #$00
0CB60 4C 6B CB                      JMP +addToPPUBuffer
0CB63                               
0CB63                           +drawRandomTile:
0CB63                               ;; Draw a random tile
0CB63 20 4F C4                      JSR sub_GetRandomNumber
0CB66 29 07                         AND #%00000111
0CB68 18                            CLC
0CB69 69 68                         ADC #$68
0CB6B                               
0CB6B                               ;; Add tile to ppu buffer
0CB6B                           +addToPPUBuffer:
0CB6B 99 00 03                      STA ppu_buffer,y
0CB6E C8                            INY
0CB6F                           
0CB6F                               ;; TILE 2: If metatile above is solid, draw null,
0CB6F                               ;; else draw random noise.
0CB6F E6 01                         INC temp+1
0CB71 A5 00                         LDA temp
0CB73 99 00 03                      STA ppu_buffer,y
0CB76 C8                            INY
0CB77 A5 01                         LDA temp+1
0CB79 99 00 03                      STA ppu_buffer,y
0CB7C C8                            INY
0CB7D                               
0CB7D 8A                            TXA
0CB7E 29 F0                         AND #%11110000
0CB80 F0 0C                         BEQ +drawRandomTile
0CB82                               
0CB82 BD F0 03                      LDA tile_type-16,x
0CB85 29 01                         AND #%00000001
0CB87 F0 05                         BEQ +drawRandomTile
0CB89                               
0CB89 A9 00                         LDA #%00
0CB8B 4C 96 CB                      JMP +addToPPUBuffer
0CB8E                           
0CB8E                           +drawRandomTile:
0CB8E 20 4F C4                      JSR sub_GetRandomNumber
0CB91 29 07                         AND #%00000111
0CB93 18                            CLC
0CB94 69 68                         ADC #$68
0CB96                           
0CB96                           +addToPPUBuffer:
0CB96 99 00 03                      STA ppu_buffer,y
0CB99 C8                            INY
0CB9A                               
0CB9A                               ;; TILE 3 - If metatile left is solid, draw null,
0CB9A                               ;; else draw random noise.
0CB9A A5 01                         LDA temp+1
0CB9C 18                            CLC
0CB9D 69 1F                         ADC #$1F
0CB9F 85 01                         STA temp+1
0CBA1 A5 00                         LDA temp
0CBA3 69 00                         ADC #$00
0CBA5 85 00                         STA temp
0CBA7 99 00 03                      STA ppu_buffer,y
0CBAA C8                            INY
0CBAB A5 01                         LDA temp+1
0CBAD 99 00 03                      STA ppu_buffer,y
0CBB0 C8                            INY
0CBB1                               
0CBB1 8A                            TXA
0CBB2 29 0F                         AND #%00001111
0CBB4 F0 0C                         BEQ +drawRandomTile
0CBB6                               
0CBB6 BD FF 03                      LDA tile_type-1,x
0CBB9 29 01                         AND #%00000001
0CBBB F0 05                         BEQ +drawRandomTile
0CBBD                               
0CBBD A9 00                         LDA #%00
0CBBF 4C CA CB                      JMP +addToPPUBuffer
0CBC2                           
0CBC2                           +drawRandomTile:
0CBC2 20 4F C4                      JSR sub_GetRandomNumber
0CBC5 29 07                         AND #%00000111
0CBC7 18                            CLC
0CBC8 69 68                         ADC #$68
0CBCA                               
0CBCA                           +addToPPUBuffer:
0CBCA 99 00 03                      STA ppu_buffer,y
0CBCD C8                            INY
0CBCE                               
0CBCE                               ;; TILE 4 - Always random noise
0CBCE E6 01                         INC temp+1
0CBD0 A5 00                         LDA temp
0CBD2 99 00 03                      STA ppu_buffer,y
0CBD5 C8                            INY
0CBD6 A5 01                         LDA temp+1
0CBD8 99 00 03                      STA ppu_buffer,y
0CBDB C8                            INY
0CBDC 20 4F C4                      JSR sub_GetRandomNumber
0CBDF 29 07                         AND #%00000111
0CBE1 18                            CLC
0CBE2 69 68                         ADC #$68
0CBE4 99 00 03                      STA ppu_buffer,y
0CBE7 C8                            INY
0CBE8                           
0CBE8                               ;; TILE 5 - If tile on the right is solid, skip,
0CBE8                               ;; else draw random noise tile
0CBE8 E6 01                         INC temp+1
0CBEA                               
0CBEA 8A                            TXA
0CBEB 29 0F                         AND #%00001111
0CBED C9 0D                         CMP #$0D
0CBEF F0 1F                         BEQ +skipTile
0CBF1                               
0CBF1 BD 01 04                      LDA tile_type+1,x
0CBF4 29 01                         AND #%00000001
0CBF6 D0 18                         BNE +skipTile
0CBF8 A5 00                             LDA temp
0CBFA 99 00 03                          STA ppu_buffer,y
0CBFD C8                                INY
0CBFE A5 01                             LDA temp+1
0CC00 99 00 03                          STA ppu_buffer,y
0CC03 C8                                INY
0CC04 20 4F C4                          JSR sub_GetRandomNumber
0CC07 29 07                             AND #%00000111
0CC09 18                                CLC
0CC0A 69 68                             ADC #$68
0CC0C 99 00 03                          STA ppu_buffer,y
0CC0F C8                                INY    
0CC10                               +skipTile:
0CC10                           
0CC10                               ;; TILE 6 - If tile on bottom is solid, skip,
0CC10                               ;; else draw random noise
0CC10 A5 01                         LDA temp+1
0CC12 18                            CLC
0CC13 69 1F                         ADC #$1F
0CC15 85 01                         STA temp+1
0CC17 A5 00                         LDA temp
0CC19 69 00                         ADC #$00
0CC1B 85 00                         STA temp
0CC1D                           
0CC1D 8A                            TXA
0CC1E 29 F0                         AND #%11110000
0CC20 C9 90                         CMP #$90
0CC22 F0 1F                         BEQ +skipTile
0CC24                           
0CC24 BD 10 04                      LDA tile_type+16,x
0CC27 29 01                         AND #%00000001
0CC29 D0 18                         BNE +skipTile
0CC2B A5 00                             LDA temp
0CC2D 99 00 03                          STA ppu_buffer,y
0CC30 C8                                INY
0CC31 A5 01                             LDA temp+1
0CC33 99 00 03                          STA ppu_buffer,y
0CC36 C8                                INY
0CC37 20 4F C4                          JSR sub_GetRandomNumber
0CC3A 29 07                             AND #%00000111
0CC3C 18                                CLC
0CC3D 69 68                             ADC #$68
0CC3F 99 00 03                          STA ppu_buffer,y
0CC42 C8                                INY    
0CC43                               +skipTile:
0CC43                               
0CC43                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CC43                               ;; else draw random noise
0CC43 E6 01                         INC temp+1
0CC45                           
0CC45 8A                            TXA
0CC46 29 F0                         AND #%11110000
0CC48 C9 90                         CMP #$90
0CC4A F0 26                         BEQ +skipTile
0CC4C                               
0CC4C 8A                            TXA
0CC4D 29 0F                         AND #%00001111
0CC4F C9 0D                         CMP #$0D
0CC51 F0 1F                         BEQ +skipTile
0CC53                               
0CC53 BD 11 04                      LDA tile_type+17,x
0CC56 29 01                         AND #%00000001
0CC58 D0 18                         BNE +skipTile
0CC5A A5 00                             LDA temp
0CC5C 99 00 03                          STA ppu_buffer,y
0CC5F C8                                INY
0CC60 A5 01                             LDA temp+1
0CC62 99 00 03                          STA ppu_buffer,y
0CC65 C8                                INY
0CC66 20 4F C4                          JSR sub_GetRandomNumber
0CC69 29 07                             AND #%00000111
0CC6B 18                                CLC
0CC6C 69 68                             ADC #$68
0CC6E 99 00 03                          STA ppu_buffer,y
0CC71 C8                                INY    
0CC72                               +skipTile:   
0CC72                           
0CC72                           
0CC72                               ;; Update attribute table accordingly through ppu buffer
0CC72 A9 23                         LDA #$23
0CC74 99 00 03                      STA ppu_buffer,y
0CC77 C8                            INY
0CC78                               
0CC78 8A                            TXA
0CC79 29 F0                         AND #%11110000
0CC7B 4A                            LSR
0CC7C 4A                            LSR
0CC7D 4A                            LSR
0CC7E 4A                            LSR
0CC7F 18                            CLC
0CC80 69 01                         ADC #1
0CC82 4A                            LSR
0CC83 0A                            ASL
0CC84 0A                            ASL
0CC85 0A                            ASL
0CC86 18                            CLC
0CC87 69 C8                         ADC #$C8
0CC89 85 00                         STA temp
0CC8B 8A                            TXA
0CC8C 29 0F                         AND #%00001111
0CC8E 18                            CLC
0CC8F 69 01                         ADC #$01
0CC91 4A                            LSR
0CC92 18                            CLC
0CC93 65 00                         ADC temp
0CC95 85 00                         STA temp
0CC97 99 00 03                      STA ppu_buffer,y
0CC9A C8                            INY
0CC9B                                  
0CC9B 8A                            TXA
0CC9C 29 10                         AND #%00010000
0CC9E F0 05                         BEQ +
0CCA0 A9 F0                             LDA #%11110000
0CCA2 4C A7 CC                          JMP ++
0CCA5                               +
0CCA5 A9 0F                         LDA #%00001111
0CCA7                               ++
0CCA7 85 02                         STA temp+2
0CCA9                               
0CCA9 8A                            TXA
0CCAA 48                            PHA
0CCAB 29 01                         AND #%00000001
0CCAD F0 07                         BEQ +
0CCAF A5 02                             LDA temp+2
0CCB1 09 CC                             ORA #%11001100
0CCB3 4C BA CC                          JMP ++
0CCB6                               +
0CCB6 A5 02                         LDA temp+2
0CCB8 09 33                         ORA #%00110011
0CCBA                               ++
0CCBA 85 02                         STA temp+2
0CCBC                               
0CCBC A5 00                         LDA temp
0CCBE 38                            SEC
0CCBF E9 C0                         SBC #$C0
0CCC1 AA                            TAX
0CCC2 BD A0 04                      LDA tile_attributes,x
0CCC5 25 02                         AND temp+2
0CCC7 9D A0 04                      STA tile_attributes,x
0CCCA 99 00 03                      STA ppu_buffer,y
0CCCD C8                            INY
0CCCE 68                            PLA
0CCCF AA                            TAX
0CCD0                           
0CCD0                           
0CCD0                               ;; Tell PPU to update tiles and attributes next frame
0CCD0 84 39                         STY ppu_buffer_pointer
0CCD2 A9 01                         LDA #$01
0CCD4 85 38                         STA ppu_buffer_update
0CCD6                            
0CCD6                               ;; We're done - return
0CCD6 60                            RTS0CCD7                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CCD7                           sub_WriteByteToPPUBuffer:
0CCD7                           
0CCD7                               ;; Prevent updating until full 3-byte buffer is filled,
0CCD7                               ;; so that graphics won't glitch out if NMI happens during
0CCD7                               ;; updating the buffer
0CCD7 A9 00                         LDA #$00
0CCD9 85 38                         STA ppu_buffer_update
0CCDB                           
0CCDB                               ;; Check if buffer full; if so, wait a frame and force update
0CCDB A4 39                         LDY ppu_buffer_pointer
0CCDD C0 30                         CPY #$30
0CCDF D0 05                         BNE +
0CCE1 E6 38                             INC ppu_buffer_update
0CCE3 20 7A C4                          JSR sub_WaitForVBlank
0CCE6                               +
0CCE6                           
0CCE6                               ;; Add ppu_addr high byte to buffer
0CCE6 A5 00                         LDA temp
0CCE8 99 00 03                      STA ppu_buffer,y
0CCEB                           
0CCEB                               ;; Add ppu_addr low byte to buffer
0CCEB C8                            INY
0CCEC A5 01                         LDA temp+1
0CCEE 99 00 03                      STA ppu_buffer,y
0CCF1                           
0CCF1                               ;; Add ppu_data to buffer
0CCF1 C8                            INY
0CCF2 A5 02                         LDA temp+2
0CCF4 99 00 03                      STA ppu_buffer,y
0CCF7                           
0CCF7                               ;; Update buffer pointer
0CCF7 C8                            INY
0CCF8 84 39                         STY ppu_buffer_pointer
0CCFA                           
0CCFA                               ;; Tell NMI to update next round
0CCFA E6 38                         INC ppu_buffer_update
0CCFC                           
0CCFC                               ;; Return
0CCFC 60                            RTS0CCFD                           
0CCFD                           ;; LUTs
0CCFD                           .include "game/include/tables.asm"
0CCFD                           
0CCFD                           ;; Initial screen palette
0CCFD                           tbl_IntroScreenPalette:
0CCFD 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CD01 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CD05 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CD09 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CD0D                           
0CD0D 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CD11 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CD15 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CD19 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CD1D                           
0CD1D                           
0CD1D                           ;; Intro: mapping logo index to chr tile
0CD1D                           tbl_IntroScreenLogoChr:
0CD1D 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CD25                           
0CD25                           
0CD25                           ;; Intro screen data
0CD25                           tbl_IntroScreenData:
0CD25                           
0CD25                               ;; Set PPU address $20AC and draw
0CD25 60 AC                         .db #$60, #$AC
0CD27 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CD2F                           
0CD2F                               ;; Set PPU address $20CF and draw
0CD2F 60 CF                         .db #$60, #$CF
0CD31 01 02                         .db #_0, #_1
0CD33                               
0CD33                               ;; Set PPU address $2122 and draw
0CD33 61 22                         .db #$61, #$22
0CD35 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CD3C 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CD42 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CD4A 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CD4F                               
0CD4F                               ;; Set PPU address $2147 and draw
0CD4F 61 47                         .db #$61, #$47
0CD51 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CD58 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CD5C 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CD62 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CD68                               
0CD68                               ;; Set PPU address $218B and draw
0CD68 61 8B                         .db #$61, #$8B
0CD6A 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CD70 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CD75                               
0CD75                               ;; Set PPU address $21E6 and draw
0CD75 61 E6                         .db #$61, #$E6
0CD77 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CD7F 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CD83 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CD8A                               
0CD8A                               ;; Set PPU address $222D and draw
0CD8A 62 2D                         .db #$62, #$2D
0CD8C 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CD92                               
0CD92                               ;; Set PPU address $2281
0CD92 62 81                         .db #$62, #$81
0CD94                               
0CD94                               ;; Draw the Crillion logo
0CD94 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CD98 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD9C C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CDA0 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CDA4                               
0CDA4 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CDA8 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDAC C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDB0 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDB4                               
0CDB4 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CDB8 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDBC C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDC0 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDC4                           
0CDC4 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CDC8 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDCC C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDD0 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDD4                               
0CDD4 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CDD8 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDDC C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDE0 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDE4                           
0CDE4 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CDE8 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CDEC C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CDF0 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CDF3                           
0CDF3                               ;; End of intro
0CDF3 3F                            .db #$3F
0CDF4                           
0CDF4                           
0CDF4                           ;; Animation frames table
0CDF4                           .include "game/include/table/animation_frames.asm"
0CDF4                           ;; CHR tile-id's per slide of explosion
0CDF4                           explosion_slide0:
0CDF4 00 00 00                      .db #$00, #$00, #$00
0CDF7 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CDFA 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CDFD                           
0CDFD                           explosion_slide1:
0CDFD 00 00 00                      .db #$00, #$00, #$00
0CE00 29 2A 2B                      .db #$29, #$2A, #$2B
0CE03 39 3A 3B                      .db #$39, #$3A, #$3B
0CE06                           
0CE06                           explosion_slide2:
0CE06 16 00 00                      .db #$16, #$00, #$00
0CE09 26 27 28                      .db #$26, #$27, #$28
0CE0C 36 37 38                      .db #$36, #$37, #$38
0CE0F                           
0CE0F                           explosion_slide3:
0CE0F 00 14 15                      .db #$00, #$14, #$15
0CE12 23 24 25                      .db #$23, #$24, #$25
0CE15 33 34 35                      .db #$33, #$34, #$35
0CE18                           
0CE18                           explosion_slide4:
0CE18 10 11 12                      .db #$10, #$11, #$12
0CE1B 20 21 22                      .db #$20, #$21, #$22
0CE1E 30 31 32                      .db #$30, #$31, #$32
0CE21                           
0CE21                           ;; High and low bytes of animation slides
0CE21                           explosion_anim_hi:
0CE21 CD                            .db >#explosion_slide0
0CE22 CD                            .db >#explosion_slide1
0CE23 CE                            .db >#explosion_slide2
0CE24 CE                            .db >#explosion_slide3
0CE25 CE                            .db >#explosion_slide4
0CE26 CE                            .db >#explosion_slide4
0CE27 CE                            .db >#explosion_slide3
0CE28 CE                            .db >#explosion_slide2
0CE29 CD                            .db >#explosion_slide1
0CE2A CD                            .db >#explosion_slide0
0CE2B                           
0CE2B                           explosion_anim_lo:
0CE2B F4                            .db <#explosion_slide0
0CE2C FD                            .db <#explosion_slide1
0CE2D 06                            .db <#explosion_slide2
0CE2E 0F                            .db <#explosion_slide3
0CE2F 18                            .db <#explosion_slide4
0CE30 18                            .db <#explosion_slide4
0CE31 0F                            .db <#explosion_slide3
0CE32 06                            .db <#explosion_slide2
0CE33 FD                            .db <#explosion_slide1
0CE34 F4                            .db <#explosion_slide0
0CE35                           
0CE35                           
0CE35                           
0CE35                           ;; Ball palette color table (CBRYGM)
0CE35                           tbl_BallColorDark:
0CE35 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CE3B                            
0CE3B                           tbl_BallColorLight:
0CE3B 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CE41                           
0CE41                               
0CE41                           ;; Screen mode drawing routine addresses
0CE41                           tbl_LoadScreenHi:
0CE41 CA C6 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CE44                           
0CE44                           tbl_LoadScreenLo:
0CE44 AB EF 3A                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CE47                           
0CE47                           
0CE47                           ;; Level data
0CE47                           .include "game/include/table/level_data.asm"
0CE47                           lvl_layout_01:
0CE47 61 21                         .db #$61, #%00100001
0CE49 52 61                         .db #$52, #%01100001
0CE4B 43 65                         .db #$43, #%01100101
0CE4D 83 05                         .db #$83, #%00000101
0CE4F 93 15                         .db #$93, #%00010101
0CE51 34 7A                         .db #$34, #%01111010
0CE53 74 7A                         .db #$74, #%01111010
0CE55 35 7A                         .db #$35, #%01111010
0CE57 75 7A                         .db #$75, #%01111010
0CE59 46 65                         .db #$46, #%01100101
0CE5B 86 25                         .db #$86, #%00100101
0CE5D 57 61                         .db #$57, #%01100001
0CE5F 68 21                         .db #$68, #%00100001
0CE61 FF                            .db #LEVEL_END
0CE62                           
0CE62                           lvl_layout_02:
0CE62 C0 0A                         .db #$C0, #%00001010
0CE64 11 15                         .db #$11, #%00010101
0CE66 21 62                         .db #$21, #%01100010
0CE68 61 62                         .db #$61, #%01100010
0CE6A A1 42                         .db #$A1, #%01000010
0CE6C 12 67                         .db #$12, #%01100111
0CE6E 52 67                         .db #$52, #%01100111
0CE70 92 67                         .db #$92, #%01100111
0CE72 C3 0D                         .db #$C3, #%00001101
0CE74 14 11                         .db #$14, #%00010001
0CE76 24 65                         .db #$24, #%01100101
0CE78 64 65                         .db #$64, #%01100101
0CE7A A4 45                         .db #$A4, #%01000101
0CE7C 15 67                         .db #$15, #%01100111
0CE7E 55 67                         .db #$55, #%01100111
0CE80 95 67                         .db #$95, #%01100111
0CE82 17 12                         .db #$17, #%00010010
0CE84 27 61                         .db #$27, #%01100001
0CE86 67 61                         .db #$67, #%01100001
0CE88 A7 41                         .db #$A7, #%01000001
0CE8A 38 7A                         .db #$38, #%01111010
0CE8C 98 5A                         .db #$98, #%01011010
0CE8E 18 27                         .db #$18, #%00100111
0CE90 48 27                         .db #$48, #%00100111
0CE92 78 27                         .db #$78, #%00100111
0CE94 C8 07                         .db #$C8, #%00000111
0CE96 FF                            .db #LEVEL_END
0CE97                           
0CE97                           lvl_layout_03:
0CE97 00 7A                         .db #$00, #%01111010
0CE99 40 7A                         .db #$40, #%01111010
0CE9B 80 7A                         .db #$80, #%01111010
0CE9D C0 1A                         .db #$C0, #%00011010
0CE9F 10 A1                         .db #$10, #%10100001
0CEA1 13 E1                         .db #$13, #%11100001
0CEA3 17 C1                         .db #$17, #%11000001
0CEA5 30 C1                         .db #$30, #%11000001
0CEA7 34 C1                         .db #$34, #%11000001
0CEA9 38 A1                         .db #$38, #%10100001
0CEAB 50 E1                         .db #$50, #%11100001
0CEAD 55 81                         .db #$55, #%10000001
0CEAF 57 C1                         .db #$57, #%11000001
0CEB1 70 C1                         .db #$70, #%11000001
0CEB3 73 A1                         .db #$73, #%10100001
0CEB5 76 E1                         .db #$76, #%11100001
0CEB7 90 E1                         .db #$90, #%11100001
0CEB9 95 81                         .db #$95, #%10000001
0CEBB 97 C1                         .db #$97, #%11000001
0CEBD B0 C1                         .db #$B0, #%11000001
0CEBF B4 C1                         .db #$B4, #%11000001
0CEC1 B8 A1                         .db #$B8, #%10100001
0CEC3 D0 A1                         .db #$D0, #%10100001
0CEC5 D3 E1                         .db #$D3, #%11100001
0CEC7 D7 C1                         .db #$D7, #%11000001
0CEC9 FF                            .db #LEVEL_END
0CECA                           
0CECA                           lvl_layout_04:
0CECA 00 4C                         .db #$00, #%01001100
0CECC 40 6C                         .db #$40, #%01101100
0CECE 80 4C                         .db #$80, #%01001100
0CED0 81 AC                         .db #$81, #%10101100
0CED2 C1 2C                         .db #$C1, #%00101100
0CED4 02 6C                         .db #$02, #%01101100
0CED6 42 CC                         .db #$42, #%11001100
0CED8 62 EC                         .db #$62, #%11101100
0CEDA A2 CC                         .db #$A2, #%11001100
0CEDC C3 CC                         .db #$C3, #%11001100
0CEDE 04 4C                         .db #$04, #%01001100
0CEE0 84 2C                         .db #$84, #%00101100
0CEE2 25 AC                         .db #$25, #%10101100
0CEE4 85 AC                         .db #$85, #%10101100
0CEE6 06 AC                         .db #$06, #%10101100
0CEE8 36 CC                         .db #$36, #%11001100
0CEEA 56 CC                         .db #$56, #%11001100
0CEEC 66 EC                         .db #$66, #%11101100
0CEEE 96 6C                         .db #$96, #%01101100
0CEF0 C7 AC                         .db #$C7, #%10101100
0CEF2 08 2C                         .db #$08, #%00101100
0CEF4 78 6C                         .db #$78, #%01101100
0CEF6 D8 0C                         .db #$D8, #%00001100
0CEF8 30 A1                         .db #$30, #%10100001
0CEFA B0 21                         .db #$B0, #%00100001
0CEFC 01 41                         .db #$01, #%01000001
0CEFE 41 61                         .db #$41, #%01100001
0CF00 91 A1                         .db #$91, #%10100001
0CF02 A1 21                         .db #$A1, #%00100001
0CF04 52 C1                         .db #$52, #%11000001
0CF06 72 E1                         .db #$72, #%11100001
0CF08 B2 C1                         .db #$B2, #%11000001
0CF0A C2 21                         .db #$C2, #%00100001
0CF0C 03 41                         .db #$03, #%01000001
0CF0E 33 C1                         .db #$33, #%11000001
0CF10 83 21                         .db #$83, #%00100001
0CF12 D3 E1                         .db #$D3, #%11100001
0CF14 05 21                         .db #$05, #%00100001
0CF16 45 E1                         .db #$45, #%11100001
0CF18 A5 21                         .db #$A5, #%00100001
0CF1A 16 A1                         .db #$16, #%10100001
0CF1C 76 A1                         .db #$76, #%10100001
0CF1E 27 A1                         .db #$27, #%10100001
0CF20 57 21                         .db #$57, #%00100001
0CF22 87 41                         .db #$87, #%01000001
0CF24 B7 A1                         .db #$B7, #%10100001
0CF26 19 21                         .db #$19, #%00100001
0CF28 39 41                         .db #$39, #%01000001
0CF2A 89 41                         .db #$89, #%01000001
0CF2C C9 21                         .db #$C9, #%00100001
0CF2E D0 1A                         .db #$D0, #%00011010
0CF30 55 1A                         .db #$55, #%00011010
0CF32 95 1A                         .db #$95, #%00011010
0CF34 D7 1A                         .db #$D7, #%00011010
0CF36 09 1A                         .db #$09, #%00011010
0CF38 79 1A                         .db #$79, #%00011010
0CF3A FF                            .db #LEVEL_END
0CF3B                           
0CF3B                           lvl_layout_05:
0CF3B 40 0A                         .db #$40, #%00001010
0CF3D 70 1A                         .db #$70, #%00011010
0CF3F B0 42                         .db #$B0, #%01000010
0CF41 41 A7                         .db #$41, #%10100111
0CF43 B1 22                         .db #$B1, #%00100010
0CF45 D1 15                         .db #$D1, #%00010101
0CF47 22 0A                         .db #$22, #%00001010
0CF49 52 05                         .db #$52, #%00000101
0CF4B B2 42                         .db #$B2, #%01000010
0CF4D 03 27                         .db #$03, #%00100111
0CF4F 33 67                         .db #$33, #%01100111
0CF51 73 67                         .db #$73, #%01100111
0CF53 B3 47                         .db #$B3, #%01000111
0CF55 05 E5                         .db #$05, #%11100101
0CF57 25 A5                         .db #$25, #%10100101
0CF59 35 25                         .db #$35, #%00100101
0CF5B 65 45                         .db #$65, #%01000101
0CF5D A5 45                         .db #$A5, #%01000101
0CF5F 46 E5                         .db #$46, #%11100101
0CF61 66 E5                         .db #$66, #%11100101
0CF63 86 E5                         .db #$86, #%11100101
0CF65 A6 E2                         .db #$A6, #%11100010
0CF67 C6 E5                         .db #$C6, #%11100101
0CF69 27 25                         .db #$27, #%00100101
0CF6B 77 05                         .db #$77, #%00000101
0CF6D B7 02                         .db #$B7, #%00000010
0CF6F 09 05                         .db #$09, #%00000101
0CF71 79 05                         .db #$79, #%00000101
0CF73 B9 02                         .db #$B9, #%00000010
0CF75 FF                            .db #LEVEL_END
0CF76                           
0CF76                           lvl_layout_06:
0CF76 00 03                         .db #$00, #%00000011
0CF78 20 03                         .db #$20, #%00000011
0CF7A 40 03                         .db #$40, #%00000011
0CF7C A0 03                         .db #$A0, #%00000011
0CF7E C0 03                         .db #$C0, #%00000011
0CF80 11 03                         .db #$11, #%00000011
0CF82 31 03                         .db #$31, #%00000011
0CF84 51 03                         .db #$51, #%00000011
0CF86 91 03                         .db #$91, #%00000011
0CF88 B1 03                         .db #$B1, #%00000011
0CF8A D1 03                         .db #$D1, #%00000011
0CF8C 02 03                         .db #$02, #%00000011
0CF8E 22 03                         .db #$22, #%00000011
0CF90 42 03                         .db #$42, #%00000011
0CF92 A2 03                         .db #$A2, #%00000011
0CF94 C2 03                         .db #$C2, #%00000011
0CF96 13 03                         .db #$13, #%00000011
0CF98 33 03                         .db #$33, #%00000011
0CF9A 53 03                         .db #$53, #%00000011
0CF9C 93 03                         .db #$93, #%00000011
0CF9E B3 03                         .db #$B3, #%00000011
0CFA0 D3 03                         .db #$D3, #%00000011
0CFA2 04 03                         .db #$04, #%00000011
0CFA4 24 03                         .db #$24, #%00000011
0CFA6 44 03                         .db #$44, #%00000011
0CFA8 A4 03                         .db #$A4, #%00000011
0CFAA C4 03                         .db #$C4, #%00000011
0CFAC 15 03                         .db #$15, #%00000011
0CFAE 35 03                         .db #$35, #%00000011
0CFB0 55 03                         .db #$55, #%00000011
0CFB2 95 03                         .db #$95, #%00000011
0CFB4 B5 03                         .db #$B5, #%00000011
0CFB6 D5 03                         .db #$D5, #%00000011
0CFB8 06 03                         .db #$06, #%00000011
0CFBA 26 03                         .db #$26, #%00000011
0CFBC 46 03                         .db #$46, #%00000011
0CFBE A6 03                         .db #$A6, #%00000011
0CFC0 C6 03                         .db #$C6, #%00000011
0CFC2 17 03                         .db #$17, #%00000011
0CFC4 37 03                         .db #$37, #%00000011
0CFC6 57 03                         .db #$57, #%00000011
0CFC8 97 03                         .db #$97, #%00000011
0CFCA B7 03                         .db #$B7, #%00000011
0CFCC D7 03                         .db #$D7, #%00000011
0CFCE 08 03                         .db #$08, #%00000011
0CFD0 28 03                         .db #$28, #%00000011
0CFD2 48 03                         .db #$48, #%00000011
0CFD4 A8 03                         .db #$A8, #%00000011
0CFD6 C8 03                         .db #$C8, #%00000011
0CFD8 19 03                         .db #$19, #%00000011
0CFDA 39 03                         .db #$39, #%00000011
0CFDC 59 03                         .db #$59, #%00000011
0CFDE 99 03                         .db #$99, #%00000011
0CFE0 B9 03                         .db #$B9, #%00000011
0CFE2 D9 03                         .db #$D9, #%00000011
0CFE4 60 4B                         .db #$60, #%01001011
0CFE6 71 CB                         .db #$71, #%11001011
0CFE8 62 4B                         .db #$62, #%01001011
0CFEA 64 4B                         .db #$64, #%01001011
0CFEC 75 CB                         .db #$75, #%11001011
0CFEE 66 4B                         .db #$66, #%01001011
0CFF0 68 4B                         .db #$68, #%01001011
0CFF2 79 0B                         .db #$79, #%00001011
0CFF4 70 03                         .db #$70, #%00000011
0CFF6 72 03                         .db #$72, #%00000011
0CFF8 74 03                         .db #$74, #%00000011
0CFFA 76 03                         .db #$76, #%00000011
0CFFC 78 03                         .db #$78, #%00000011
0CFFE FF                            .db #LEVEL_END
0CFFF                           
0CFFF                           lvl_layout_07:
0CFFF 00 11                         .db #$00, #%00010001
0D001 01 FA                         .db #$01, #%11111010
0D003 12 BA                         .db #$12, #%10111010
0D005 23 DA                         .db #$23, #%11011010
0D007 34 FA                         .db #$34, #%11111010
0D009 05 DA                         .db #$05, #%11011010
0D00B 15 FA                         .db #$15, #%11111010
0D00D 45 BA                         .db #$45, #%10111010
0D00F 56 DA                         .db #$56, #%11011010
0D011 27 BA                         .db #$27, #%10111010
0D013 67 DA                         .db #$67, #%11011010
0D015 38 3A                         .db #$38, #%00111010
0D017 78 BA                         .db #$78, #%10111010
0D019 09 3A                         .db #$09, #%00111010
0D01B 39 3A                         .db #$39, #%00111010
0D01D 89 1A                         .db #$89, #%00011010
0D01F B0 01                         .db #$B0, #%00000001
0D021 D0 01                         .db #$D0, #%00000001
0D023 A1 01                         .db #$A1, #%00000001
0D025 C1 11                         .db #$C1, #%00010001
0D027 B2 01                         .db #$B2, #%00000001
0D029 D2 01                         .db #$D2, #%00000001
0D02B A3 01                         .db #$A3, #%00000001
0D02D C3 01                         .db #$C3, #%00000001
0D02F B4 01                         .db #$B4, #%00000001
0D031 D4 01                         .db #$D4, #%00000001
0D033 A5 01                         .db #$A5, #%00000001
0D035 C5 01                         .db #$C5, #%00000001
0D037 B6 01                         .db #$B6, #%00000001
0D039 D6 01                         .db #$D6, #%00000001
0D03B A7 01                         .db #$A7, #%00000001
0D03D C7 01                         .db #$C7, #%00000001
0D03F FF                            .db #LEVEL_END
0D040                           
0D040                           lvl_layout_08:
0D040 40 B5                         .db #$40, #%10110101
0D042 31 0D                         .db #$31, #%00001101
0D044 61 10                         .db #$61, #%00010000
0D046 42 C7                         .db #$42, #%11000111
0D048 52 67                         .db #$52, #%01100111
0D04A 63 C7                         .db #$63, #%11000111
0D04C 83 E7                         .db #$83, #%11100111
0D04E 05 07                         .db #$05, #%00000111
0D050 15 3A                         .db #$15, #%00111010
0D052 07 63                         .db #$07, #%01100011
0D054 27 13                         .db #$27, #%00010011
0D056 38 A5                         .db #$38, #%10100101
0D058 09 14                         .db #$09, #%00010100
0D05A 19 05                         .db #$19, #%00000101
0D05C D0 E0                         .db #$D0, #%11100000
0D05E C2 A0                         .db #$C2, #%10100000
0D060 B3 E0                         .db #$B3, #%11100000
0D062 D5 E0                         .db #$D5, #%11100000
0D064 C6 E0                         .db #$C6, #%11100000
0D066 B0 C4                         .db #$B0, #%11000100
0D068 C0 A4                         .db #$C0, #%10100100
0D06A D1 A4                         .db #$D1, #%10100100
0D06C C4 24                         .db #$C4, #%00100100
0D06E C5 04                         .db #$C5, #%00000100
0D070 B7 44                         .db #$B7, #%01000100
0D072 B8 A4                         .db #$B8, #%10100100
0D074 D9 05                         .db #$D9, #%00000101
0D076 FF                            .db #LEVEL_END
0D077                           
0D077                           lvl_layout_09:
0D077 81 04                         .db #$81, #%00000100
0D079 D1 04                         .db #$D1, #%00000100
0D07B 32 C4                         .db #$32, #%11000100
0D07D A2 C4                         .db #$A2, #%11000100
0D07F C2 24                         .db #$C2, #%00100100
0D081 13 24                         .db #$13, #%00100100
0D083 53 04                         .db #$53, #%00000100
0D085 C3 27                         .db #$C3, #%00100111
0D087 15 6C                         .db #$15, #%01101100
0D089 55 6C                         .db #$55, #%01101100
0D08B 95 6C                         .db #$95, #%01101100
0D08D D5 0C                         .db #$D5, #%00001100
0D08F 27 C7                         .db #$27, #%11000111
0D091 47 C7                         .db #$47, #%11000111
0D093 67 C7                         .db #$67, #%11000111
0D095 87 C7                         .db #$87, #%11000111
0D097 A7 C7                         .db #$A7, #%11000111
0D099 C7 C7                         .db #$C7, #%11000111
0D09B 08 13                         .db #$08, #%00010011
0D09D 28 15                         .db #$28, #%00010101
0D09F 48 12                         .db #$48, #%00010010
0D0A1 68 15                         .db #$68, #%00010101
0D0A3 88 11                         .db #$88, #%00010001
0D0A5 A8 10                         .db #$A8, #%00010000
0D0A7 C8 14                         .db #$C8, #%00010100
0D0A9 09 07                         .db #$09, #%00000111
0D0AB 19 03                         .db #$19, #%00000011
0D0AD 39 05                         .db #$39, #%00000101
0D0AF 59 02                         .db #$59, #%00000010
0D0B1 79 05                         .db #$79, #%00000101
0D0B3 99 01                         .db #$99, #%00000001
0D0B5 B9 00                         .db #$B9, #%00000000
0D0B7 D9 04                         .db #$D9, #%00000100
0D0B9 FF                            .db #LEVEL_END
0D0BA                           
0D0BA                           lvl_layout_10:
0D0BA 00 02                         .db #$00, #%00000010
0D0BC 10 C9                         .db #$10, #%11001001
0D0BE 50 C9                         .db #$50, #%11001001
0D0C0 90 C9                         .db #$90, #%11001001
0D0C2 D0 C9                         .db #$D0, #%11001001
0D0C4 31 C9                         .db #$31, #%11001001
0D0C6 71 C9                         .db #$71, #%11001001
0D0C8 B1 C9                         .db #$B1, #%11001001
0D0CA 13 C9                         .db #$13, #%11001001
0D0CC 53 C9                         .db #$53, #%11001001
0D0CE 93 C9                         .db #$93, #%11001001
0D0D0 D3 C9                         .db #$D3, #%11001001
0D0D2 34 C9                         .db #$34, #%11001001
0D0D4 74 C9                         .db #$74, #%11001001
0D0D6 B4 C9                         .db #$B4, #%11001001
0D0D8 16 C9                         .db #$16, #%11001001
0D0DA 56 C9                         .db #$56, #%11001001
0D0DC 96 C9                         .db #$96, #%11001001
0D0DE D6 C9                         .db #$D6, #%11001001
0D0E0 37 C9                         .db #$37, #%11001001
0D0E2 77 C9                         .db #$77, #%11001001
0D0E4 B7 C9                         .db #$B7, #%11001001
0D0E6 D8 12                         .db #$D8, #%00010010
0D0E8 FF                            .db #LEVEL_END
0D0E9                           
0D0E9                           lvl_layout_11:
0D0E9 00 65                         .db #$00, #%01100101
0D0EB 40 45                         .db #$40, #%01000101
0D0ED 50 A7                         .db #$50, #%10100111
0D0EF 80 05                         .db #$80, #%00000101
0D0F1 90 A7                         .db #$90, #%10100111
0D0F3 A0 65                         .db #$A0, #%01100101
0D0F5 01 43                         .db #$01, #%01000011
0D0F7 31 23                         .db #$31, #%00100011
0D0F9 61 A7                         .db #$61, #%10100111
0D0FB 81 A7                         .db #$81, #%10100111
0D0FD A1 63                         .db #$A1, #%01100011
0D0FF 02 44                         .db #$02, #%01000100
0D101 32 44                         .db #$32, #%01000100
0D103 92 04                         .db #$92, #%00000100
0D105 A2 64                         .db #$A2, #%01100100
0D107 03 40                         .db #$03, #%01000000
0D109 33 40                         .db #$33, #%01000000
0D10B 63 A1                         .db #$63, #%10100001
0D10D 83 A2                         .db #$83, #%10100010
0D10F 93 00                         .db #$93, #%00000000
0D111 A3 60                         .db #$A3, #%01100000
0D113 04 41                         .db #$04, #%01000001
0D115 34 41                         .db #$34, #%01000001
0D117 94 02                         .db #$94, #%00000010
0D119 A4 62                         .db #$A4, #%01100010
0D11B 05 47                         .db #$05, #%01000111
0D11D 35 67                         .db #$35, #%01100111
0D11F 75 0A                         .db #$75, #%00001010
0D121 85 47                         .db #$85, #%01000111
0D123 B5 47                         .db #$B5, #%01000111
0D125 06 E7                         .db #$06, #%11100111
0D127 16 5A                         .db #$16, #%01011010
0D129 26 11                         .db #$26, #%00010001
0D12B 46 13                         .db #$46, #%00010011
0D12D 56 1A                         .db #$56, #%00011010
0D12F 66 14                         .db #$66, #%00010100
0D131 86 10                         .db #$86, #%00010000
0D133 96 5A                         .db #$96, #%01011010
0D135 A6 12                         .db #$A6, #%00010010
0D137 C6 15                         .db #$C6, #%00010101
0D139 D6 E7                         .db #$D6, #%11100111
0D13B FF                            .db #LEVEL_END
0D13C                           
0D13C                           lvl_layout_12:
0D13C 00 00                         .db #$00, #%00000000
0D13E 50 C0                         .db #$50, #%11000000
0D140 80 00                         .db #$80, #%00000000
0D142 61 00                         .db #$61, #%00000000
0D144 22 C0                         .db #$22, #%11000000
0D146 82 E0                         .db #$82, #%11100000
0D148 C2 E0                         .db #$C2, #%11100000
0D14A A3 20                         .db #$A3, #%00100000
0D14C C3 10                         .db #$C3, #%00010000
0D14E 04 00                         .db #$04, #%00000000
0D150 54 20                         .db #$54, #%00100000
0D152 15 0A                         .db #$15, #%00001010
0D154 25 C0                         .db #$25, #%11000000
0D156 55 E0                         .db #$55, #%11100000
0D158 86 20                         .db #$86, #%00100000
0D15A C6 E0                         .db #$C6, #%11100000
0D15C C7 A0                         .db #$C7, #%10100000
0D15E 88 00                         .db #$88, #%00000000
0D160 59 00                         .db #$59, #%00000000
0D162 89 20                         .db #$89, #%00100000
0D164 D9 1A                         .db #$D9, #%00011010
0D166 FF                            .db #LEVEL_END
0D167                           
0D167                           lvl_layout_13:
0D167 10 E0                         .db #$10, #%11100000
0D169 20 E0                         .db #$20, #%11100000
0D16B 30 E0                         .db #$30, #%11100000
0D16D 40 40                         .db #$40, #%01000000
0D16F 80 60                         .db #$80, #%01100000
0D171 C0 E0                         .db #$C0, #%11100000
0D173 D0 E0                         .db #$D0, #%11100000
0D175 41 40                         .db #$41, #%01000000
0D177 71 60                         .db #$71, #%01100000
0D179 52 60                         .db #$52, #%01100000
0D17B A2 20                         .db #$A2, #%00100000
0D17D 43 60                         .db #$43, #%01100000
0D17F 83 60                         .db #$83, #%01100000
0D181 14 74                         .db #$14, #%01110100
0D183 54 74                         .db #$54, #%01110100
0D185 94 74                         .db #$94, #%01110100
0D187 D4 14                         .db #$D4, #%00010100
0D189 15 0D                         .db #$15, #%00001101
0D18B 55 0D                         .db #$55, #%00001101
0D18D 95 0D                         .db #$95, #%00001101
0D18F D5 0D                         .db #$D5, #%00001101
0D191 26 0D                         .db #$26, #%00001101
0D193 46 0D                         .db #$46, #%00001101
0D195 66 0D                         .db #$66, #%00001101
0D197 86 0D                         .db #$86, #%00001101
0D199 A6 0D                         .db #$A6, #%00001101
0D19B C6 0D                         .db #$C6, #%00001101
0D19D 07 10                         .db #$07, #%00010000
0D19F 37 0D                         .db #$37, #%00001101
0D1A1 77 0D                         .db #$77, #%00001101
0D1A3 B7 0D                         .db #$B7, #%00001101
0D1A5 28 0D                         .db #$28, #%00001101
0D1A7 48 0D                         .db #$48, #%00001101
0D1A9 68 0D                         .db #$68, #%00001101
0D1AB 88 0D                         .db #$88, #%00001101
0D1AD A8 0D                         .db #$A8, #%00001101
0D1AF C8 0D                         .db #$C8, #%00001101
0D1B1 19 0D                         .db #$19, #%00001101
0D1B3 59 0D                         .db #$59, #%00001101
0D1B5 99 0D                         .db #$99, #%00001101
0D1B7 D9 0D                         .db #$D9, #%00001101
0D1B9 FF                            .db #LEVEL_END
0D1BA                           
0D1BA                           lvl_layout_14:
0D1BA 00 67                         .db #$00, #%01100111
0D1BC 40 67                         .db #$40, #%01100111
0D1BE 80 67                         .db #$80, #%01100111
0D1C0 C0 27                         .db #$C0, #%00100111
0D1C2 01 27                         .db #$01, #%00100111
0D1C4 31 C7                         .db #$31, #%11000111
0D1C6 51 C7                         .db #$51, #%11000111
0D1C8 71 C7                         .db #$71, #%11000111
0D1CA 91 C7                         .db #$91, #%11000111
0D1CC B1 C7                         .db #$B1, #%11000111
0D1CE D1 07                         .db #$D1, #%00000111
0D1D0 02 E7                         .db #$02, #%11100111
0D1D2 06 E7                         .db #$06, #%11100111
0D1D4 13 07                         .db #$13, #%00000111
0D1D6 D3 07                         .db #$D3, #%00000111
0D1D8 15 07                         .db #$15, #%00000111
0D1DA 35 07                         .db #$35, #%00000111
0D1DC 55 07                         .db #$55, #%00000111
0D1DE 75 07                         .db #$75, #%00000111
0D1E0 95 07                         .db #$95, #%00000111
0D1E2 B5 07                         .db #$B5, #%00000111
0D1E4 D5 07                         .db #$D5, #%00000111
0D1E6 17 07                         .db #$17, #%00000111
0D1E8 37 C7                         .db #$37, #%11000111
0D1EA 57 C7                         .db #$57, #%11000111
0D1EC 77 C7                         .db #$77, #%11000111
0D1EE 97 C7                         .db #$97, #%11000111
0D1F0 B7 C7                         .db #$B7, #%11000111
0D1F2 D7 07                         .db #$D7, #%00000111
0D1F4 19 07                         .db #$19, #%00000111
0D1F6 D9 07                         .db #$D9, #%00000111
0D1F8 22 4C                         .db #$22, #%01001100
0D1FA 62 4C                         .db #$62, #%01001100
0D1FC A2 4C                         .db #$A2, #%01001100
0D1FE 24 0C                         .db #$24, #%00001100
0D200 44 0C                         .db #$44, #%00001100
0D202 64 0C                         .db #$64, #%00001100
0D204 84 0C                         .db #$84, #%00001100
0D206 A4 0C                         .db #$A4, #%00001100
0D208 C4 0C                         .db #$C4, #%00001100
0D20A 26 0C                         .db #$26, #%00001100
0D20C 46 0C                         .db #$46, #%00001100
0D20E 66 0C                         .db #$66, #%00001100
0D210 86 0C                         .db #$86, #%00001100
0D212 A6 0C                         .db #$A6, #%00001100
0D214 C6 0C                         .db #$C6, #%00001100
0D216 28 4C                         .db #$28, #%01001100
0D218 68 4C                         .db #$68, #%01001100
0D21A A8 4C                         .db #$A8, #%01001100
0D21C 32 04                         .db #$32, #%00000100
0D21E 52 04                         .db #$52, #%00000100
0D220 72 04                         .db #$72, #%00000100
0D222 92 04                         .db #$92, #%00000100
0D224 B2 04                         .db #$B2, #%00000100
0D226 38 04                         .db #$38, #%00000100
0D228 58 04                         .db #$58, #%00000100
0D22A 78 04                         .db #$78, #%00000100
0D22C 98 04                         .db #$98, #%00000100
0D22E B8 04                         .db #$B8, #%00000100
0D230 FF                            .db #LEVEL_END
0D231                           
0D231                           lvl_layout_15:
0D231 00 7A                         .db #$00, #%01111010
0D233 40 7A                         .db #$40, #%01111010
0D235 80 7A                         .db #$80, #%01111010
0D237 C0 3A                         .db #$C0, #%00111010
0D239 41 04                         .db #$41, #%00000100
0D23B 61 04                         .db #$61, #%00000100
0D23D 81 04                         .db #$81, #%00000100
0D23F A1 04                         .db #$A1, #%00000100
0D241 05 E4                         .db #$05, #%11100100
0D243 15 64                         .db #$15, #%01100100
0D245 55 64                         .db #$55, #%01100100
0D247 95 64                         .db #$95, #%01100100
0D249 D5 E4                         .db #$D5, #%11100100
0D24B 26 04                         .db #$26, #%00000100
0D24D 46 44                         .db #$46, #%01000100
0D24F 76 64                         .db #$76, #%01100100
0D251 C6 04                         .db #$C6, #%00000100
0D253 17 04                         .db #$17, #%00000100
0D255 37 64                         .db #$37, #%01100100
0D257 77 44                         .db #$77, #%01000100
0D259 B7 04                         .db #$B7, #%00000100
0D25B 18 64                         .db #$18, #%01100100
0D25D 58 64                         .db #$58, #%01100100
0D25F 98 64                         .db #$98, #%01100100
0D261 FF                            .db #LEVEL_END
0D262                           
0D262                           lvl_layout_16:
0D262 10 E1                         .db #$10, #%11100001
0D264 20 9A                         .db #$20, #%10011010
0D266 30 E1                         .db #$30, #%11100001
0D268 40 E1                         .db #$40, #%11100001
0D26A 50 E1                         .db #$50, #%11100001
0D26C 60 C1                         .db #$60, #%11000001
0D26E 70 E1                         .db #$70, #%11100001
0D270 80 E1                         .db #$80, #%11100001
0D272 90 E1                         .db #$90, #%11100001
0D274 A0 61                         .db #$A0, #%01100001
0D276 21 C1                         .db #$21, #%11000001
0D278 A1 1A                         .db #$A1, #%00011010
0D27A B1 41                         .db #$B1, #%01000001
0D27C A2 E1                         .db #$A2, #%11100001
0D27E B2 E1                         .db #$B2, #%11100001
0D280 C2 1A                         .db #$C2, #%00011010
0D282 D2 E1                         .db #$D2, #%11100001
0D284 63 1A                         .db #$63, #%00011010
0D286 C3 C1                         .db #$C3, #%11000001
0D288 14 61                         .db #$14, #%01100001
0D28A 54 61                         .db #$54, #%01100001
0D28C 94 C1                         .db #$94, #%11000001
0D28E 15 61                         .db #$15, #%01100001
0D290 55 41                         .db #$55, #%01000001
0D292 85 1A                         .db #$85, #%00011010
0D294 16 41                         .db #$16, #%01000001
0D296 46 1A                         .db #$46, #%00011010
0D298 56 61                         .db #$56, #%01100001
0D29A A6 61                         .db #$A6, #%01100001
0D29C 17 67                         .db #$17, #%01100111
0D29E 57 67                         .db #$57, #%01100111
0D2A0 97 67                         .db #$97, #%01100111
0D2A2 D7 07                         .db #$D7, #%00000111
0D2A4 28 41                         .db #$28, #%01000001
0D2A6 58 61                         .db #$58, #%01100001
0D2A8 A8 41                         .db #$A8, #%01000001
0D2AA 18 11                         .db #$18, #%00010001
0D2AC 38 11                         .db #$38, #%00010001
0D2AE 98 11                         .db #$98, #%00010001
0D2B0 B8 11                         .db #$B8, #%00010001
0D2B2 D8 11                         .db #$D8, #%00010001
0D2B4 59 09                         .db #$59, #%00001001
0D2B6 FF                            .db #LEVEL_END
0D2B7                           
0D2B7                           lvl_layout_17:
0D2B7 10 EA                         .db #$10, #%11101010
0D2B9 20 E2                         .db #$20, #%11100010
0D2BB 30 62                         .db #$30, #%01100010
0D2BD 70 02                         .db #$70, #%00000010
0D2BF 80 6A                         .db #$80, #%01101010
0D2C1 90 22                         .db #$90, #%00100010
0D2C3 01 AA                         .db #$01, #%10101010
0D2C5 31 6A                         .db #$31, #%01101010
0D2C7 81 2A                         .db #$81, #%00101010
0D2C9 A1 02                         .db #$A1, #%00000010
0D2CB C1 02                         .db #$C1, #%00000010
0D2CD D1 0A                         .db #$D1, #%00001010
0D2CF 32 EA                         .db #$32, #%11101010
0D2D1 42 6A                         .db #$42, #%01101010
0D2D3 62 02                         .db #$62, #%00000010
0D2D5 92 6A                         .db #$92, #%01101010
0D2D7 D2 E2                         .db #$D2, #%11100010
0D2D9 43 1A                         .db #$43, #%00011010
0D2DB 53 CA                         .db #$53, #%11001010
0D2DD 73 02                         .db #$73, #%00000010
0D2DF 83 4A                         .db #$83, #%01001010
0D2E1 B3 CA                         .db #$B3, #%11001010
0D2E3 C3 EA                         .db #$C3, #%11101010
0D2E5 04 0A                         .db #$04, #%00001010
0D2E7 14 A2                         .db #$14, #%10100010
0D2E9 24 AA                         .db #$24, #%10101010
0D2EB 44 AA                         .db #$44, #%10101010
0D2ED 64 6A                         .db #$64, #%01101010
0D2EF 65 6A                         .db #$65, #%01101010
0D2F1 A5 AA                         .db #$A5, #%10101010
0D2F3 06 EA                         .db #$06, #%11101010
0D2F5 16 62                         .db #$16, #%01100010
0D2F7 66 22                         .db #$66, #%00100010
0D2F9 86 2A                         .db #$86, #%00101010
0D2FB 17 42                         .db #$17, #%01000010
0D2FD 47 12                         .db #$47, #%00010010
0D2FF 57 6A                         .db #$57, #%01101010
0D301 97 4A                         .db #$97, #%01001010
0D303 A7 02                         .db #$A7, #%00000010
0D305 18 02                         .db #$18, #%00000010
0D307 28 0A                         .db #$28, #%00001010
0D309 38 22                         .db #$38, #%00100010
0D30B 68 2A                         .db #$68, #%00101010
0D30D 88 62                         .db #$88, #%01100010
0D30F C8 0A                         .db #$C8, #%00001010
0D311 D8 02                         .db #$D8, #%00000010
0D313 19 2A                         .db #$19, #%00101010
0D315 39 2A                         .db #$39, #%00101010
0D317 69 42                         .db #$69, #%01000010
0D319 99 2A                         .db #$99, #%00101010
0D31B B9 42                         .db #$B9, #%01000010
0D31D FF                            .db #LEVEL_END
0D31E                           
0D31E                           lvl_layout_18:
0D31E 00 12                         .db #$00, #%00010010
0D320 40 1A                         .db #$40, #%00011010
0D322 50 11                         .db #$50, #%00010001
0D324 70 1A                         .db #$70, #%00011010
0D326 80 10                         .db #$80, #%00010000
0D328 D0 13                         .db #$D0, #%00010011
0D32A 01 1A                         .db #$01, #%00011010
0D32C 22 15                         .db #$22, #%00010101
0D32E A2 1A                         .db #$A2, #%00011010
0D330 B2 14                         .db #$B2, #%00010100
0D332 03 67                         .db #$03, #%01100111
0D334 43 67                         .db #$43, #%01100111
0D336 83 67                         .db #$83, #%01100111
0D338 24 09                         .db #$24, #%00001001
0D33A 74 0D                         .db #$74, #%00001101
0D33C C4 0A                         .db #$C4, #%00001010
0D33E 05 A7                         .db #$05, #%10100111
0D340 45 27                         .db #$45, #%00100111
0D342 95 27                         .db #$95, #%00100111
0D344 16 C7                         .db #$16, #%11000111
0D346 36 67                         .db #$36, #%01100111
0D348 86 67                         .db #$86, #%01100111
0D34A D6 07                         .db #$D6, #%00000111
0D34C 07 A3                         .db #$07, #%10100011
0D34E 27 23                         .db #$27, #%00100011
0D350 47 C7                         .db #$47, #%11000111
0D352 57 A0                         .db #$57, #%10100000
0D354 67 A7                         .db #$67, #%10100111
0D356 77 20                         .db #$77, #%00100000
0D358 97 C7                         .db #$97, #%11000111
0D35A A7 A4                         .db #$A7, #%10100100
0D35C B7 A7                         .db #$B7, #%10100111
0D35E C7 24                         .db #$C7, #%00100100
0D360 28 0B                         .db #$28, #%00001011
0D362 38 A3                         .db #$38, #%10100011
0D364 78 08                         .db #$78, #%00001000
0D366 88 A3                         .db #$88, #%10100011
0D368 C8 0C                         .db #$C8, #%00001100
0D36A D8 A4                         .db #$D8, #%10100100
0D36C 09 43                         .db #$09, #%01000011
0D36E 59 40                         .db #$59, #%01000000
0D370 A9 44                         .db #$A9, #%01000100
0D372 FF                            .db #LEVEL_END
0D373                           
0D373                           lvl_layout_19:
0D373 11 A8                         .db #$11, #%10101000
0D375 21 68                         .db #$21, #%01101000
0D377 81 28                         .db #$81, #%00101000
0D379 B1 48                         .db #$B1, #%01001000
0D37B 22 48                         .db #$22, #%01001000
0D37D 62 68                         .db #$62, #%01101000
0D37F B2 28                         .db #$B2, #%00101000
0D381 23 28                         .db #$23, #%00101000
0D383 83 28                         .db #$83, #%00101000
0D385 B3 28                         .db #$B3, #%00101000
0D387 04 E8                         .db #$04, #%11101000
0D389 24 08                         .db #$24, #%00001000
0D38B 44 08                         .db #$44, #%00001000
0D38D 64 E8                         .db #$64, #%11101000
0D38F 84 E8                         .db #$84, #%11101000
0D391 C4 A8                         .db #$C4, #%10101000
0D393 D4 E8                         .db #$D4, #%11101000
0D395 15 48                         .db #$15, #%01001000
0D397 55 C8                         .db #$55, #%11001000
0D399 75 C8                         .db #$75, #%11001000
0D39B A5 08                         .db #$A5, #%00001000
0D39D 36 08                         .db #$36, #%00001000
0D39F B6 08                         .db #$B6, #%00001000
0D3A1 27 48                         .db #$27, #%01001000
0D3A3 97 28                         .db #$97, #%00101000
0D3A5 C7 08                         .db #$C7, #%00001000
0D3A7 09 61                         .db #$09, #%01100001
0D3A9 19 11                         .db #$19, #%00010001
0D3AB 49 61                         .db #$49, #%01100001
0D3AD 89 31                         .db #$89, #%00110001
0D3AF A9 61                         .db #$A9, #%01100001
0D3B1 FF                            .db #LEVEL_END
0D3B2                           
0D3B2                           lvl_layout_20:
0D3B2 00 60                         .db #$00, #%01100000
0D3B4 10 1A                         .db #$10, #%00011010
0D3B6 40 A7                         .db #$40, #%10100111
0D3B8 50 20                         .db #$50, #%00100000
0D3BA 70 1A                         .db #$70, #%00011010
0D3BC 80 40                         .db #$80, #%01000000
0D3BE B0 1A                         .db #$B0, #%00011010
0D3C0 C0 20                         .db #$C0, #%00100000
0D3C2 01 40                         .db #$01, #%01000000
0D3C4 31 1A                         .db #$31, #%00011010
0D3C6 A1 40                         .db #$A1, #%01000000
0D3C8 D1 1A                         .db #$D1, #%00011010
0D3CA 43 67                         .db #$43, #%01100111
0D3CC 83 47                         .db #$83, #%01000111
0D3CE 44 A7                         .db #$44, #%10100111
0D3D0 54 25                         .db #$54, #%00100101
0D3D2 94 08                         .db #$94, #%00001000
0D3D4 A4 A7                         .db #$A4, #%10100111
0D3D6 55 05                         .db #$55, #%00000101
0D3D8 65 08                         .db #$65, #%00001000
0D3DA 06 27                         .db #$06, #%00100111
0D3DC 36 67                         .db #$36, #%01100111
0D3DE 76 28                         .db #$76, #%00101000
0D3E0 A6 27                         .db #$A6, #%00100111
0D3E2 D6 07                         .db #$D6, #%00000111
0D3E4 A7 A7                         .db #$A7, #%10100111
0D3E6 08 60                         .db #$08, #%01100000
0D3E8 09 60                         .db #$09, #%01100000
0D3EA 18 A7                         .db #$18, #%10100111
0D3EC 48 A7                         .db #$48, #%10100111
0D3EE 58 47                         .db #$58, #%01000111
0D3F0 88 27                         .db #$88, #%00100111
0D3F2 B8 20                         .db #$B8, #%00100000
0D3F4 D8 1A                         .db #$D8, #%00011010
0D3F6 59 15                         .db #$59, #%00010101
0D3F8 69 60                         .db #$69, #%01100000
0D3FA A9 60                         .db #$A9, #%01100000
0D3FC FF                            .db #LEVEL_END
0D3FD                           
0D3FD                           lvl_layout_21:
0D3FD 00 13                         .db #$00, #%00010011
0D3FF 10 11                         .db #$10, #%00010001
0D401 20 67                         .db #$20, #%01100111
0D403 60 67                         .db #$60, #%01100111
0D405 A0 47                         .db #$A0, #%01000111
0D407 D0 15                         .db #$D0, #%00010101
0D409 32 63                         .db #$32, #%01100011
0D40B 72 05                         .db #$72, #%00000101
0D40D 82 43                         .db #$82, #%01000011
0D40F B2 43                         .db #$B2, #%01000011
0D411 33 03                         .db #$33, #%00000011
0D413 43 2A                         .db #$43, #%00101010
0D415 63 7A                         .db #$63, #%01111010
0D417 73 2A                         .db #$73, #%00101010
0D419 A3 7A                         .db #$A3, #%01111010
0D41B 34 63                         .db #$34, #%01100011
0D41D 74 63                         .db #$74, #%01100011
0D41F B4 43                         .db #$B4, #%01000011
0D421 06 63                         .db #$06, #%01100011
0D423 46 63                         .db #$46, #%01100011
0D425 86 63                         .db #$86, #%01100011
0D427 C6 C3                         .db #$C6, #%11000011
0D429 07 7A                         .db #$07, #%01111010
0D42B 47 7A                         .db #$47, #%01111010
0D42D 67 0A                         .db #$67, #%00001010
0D42F 87 7A                         .db #$87, #%01111010
0D431 08 13                         .db #$08, #%00010011
0D433 18 43                         .db #$18, #%01000011
0D435 48 63                         .db #$48, #%01100011
0D437 88 63                         .db #$88, #%01100011
0D439 FF                            .db #LEVEL_END
0D43A                           
0D43A                           lvl_layout_22:
0D43A 00 7A                         .db #$00, #%01111010
0D43C 40 7A                         .db #$40, #%01111010
0D43E 80 7A                         .db #$80, #%01111010
0D440 C0 3A                         .db #$C0, #%00111010
0D442 13 67                         .db #$13, #%01100111
0D444 83 A7                         .db #$83, #%10100111
0D446 B3 07                         .db #$B3, #%00000111
0D448 14 07                         .db #$14, #%00000111
0D44A 44 07                         .db #$44, #%00000111
0D44C A4 07                         .db #$A4, #%00000111
0D44E 15 A5                         .db #$15, #%10100101
0D450 45 A5                         .db #$45, #%10100101
0D452 85 25                         .db #$85, #%00100101
0D454 86 05                         .db #$86, #%00000101
0D456 A6 05                         .db #$A6, #%00000101
0D458 17 11                         .db #$17, #%00010001
0D45A 47 A1                         .db #$47, #%10100001
0D45C 87 A1                         .db #$87, #%10100001
0D45E B7 A1                         .db #$B7, #%10100001
0D460 18 41                         .db #$18, #%01000001
0D462 68 01                         .db #$68, #%00000001
0D464 D8 01                         .db #$D8, #%00000001
0D466 FF                            .db #LEVEL_END
0D467                           
0D467                           lvl_layout_23:
0D467 00 71                         .db #$00, #%01110001
0D469 40 11                         .db #$40, #%00010001
0D46B 50 43                         .db #$50, #%01000011
0D46D 80 D1                         .db #$80, #%11010001
0D46F 90 E3                         .db #$90, #%11100011
0D471 A0 63                         .db #$A0, #%01100011
0D473 01 63                         .db #$01, #%01100011
0D475 41 63                         .db #$41, #%01100011
0D477 A1 63                         .db #$A1, #%01100011
0D479 02 63                         .db #$02, #%01100011
0D47B 42 63                         .db #$42, #%01100011
0D47D 62 11                         .db #$62, #%00010001
0D47F A2 67                         .db #$A2, #%01100111
0D481 04 63                         .db #$04, #%01100011
0D483 44 23                         .db #$44, #%00100011
0D485 64 D1                         .db #$64, #%11010001
0D487 74 E3                         .db #$74, #%11100011
0D489 84 F1                         .db #$84, #%11110001
0D48B 94 E3                         .db #$94, #%11100011
0D48D A4 C7                         .db #$A4, #%11000111
0D48F B4 23                         .db #$B4, #%00100011
0D491 05 63                         .db #$05, #%01100011
0D493 45 23                         .db #$45, #%00100011
0D495 06 71                         .db #$06, #%01110001
0D497 46 11                         .db #$46, #%00010001
0D499 56 E3                         .db #$56, #%11100011
0D49B D6 07                         .db #$D6, #%00000111
0D49D 17 D1                         .db #$17, #%11010001
0D49F 27 43                         .db #$27, #%01000011
0D4A1 67 D1                         .db #$67, #%11010001
0D4A3 A7 C7                         .db #$A7, #%11000111
0D4A5 C7 A7                         .db #$C7, #%10100111
0D4A7 D7 B3                         .db #$D7, #%10110011
0D4A9 28 43                         .db #$28, #%01000011
0D4AB 78 43                         .db #$78, #%01000011
0D4AD 29 43                         .db #$29, #%01000011
0D4AF 79 43                         .db #$79, #%01000011
0D4B1 FF                           .db #LEVEL_END
0D4B2                           
0D4B2                           lvl_layout_24:
0D4B2 02 67                         .db #$02, #%01100111
0D4B4 42 67                         .db #$42, #%01100111
0D4B6 82 67                         .db #$82, #%01100111
0D4B8 05 67                         .db #$05, #%01100111
0D4BA 45 67                         .db #$45, #%01100111
0D4BC 85 67                         .db #$85, #%01100111
0D4BE 08 67                         .db #$08, #%01100111
0D4C0 48 67                         .db #$48, #%01100111
0D4C2 88 67                         .db #$88, #%01100111
0D4C4 30 E7                         .db #$30, #%11100111
0D4C6 70 E7                         .db #$70, #%11100111
0D4C8 B0 E7                         .db #$B0, #%11100111
0D4CA 34 E7                         .db #$34, #%11100111
0D4CC 74 E7                         .db #$74, #%11100111
0D4CE B4 E7                         .db #$B4, #%11100111
0D4D0 20 13                         .db #$20, #%00010011
0D4D2 40 10                         .db #$40, #%00010000
0D4D4 80 02                         .db #$80, #%00000010
0D4D6 41 05                         .db #$41, #%00000101
0D4D8 B1 09                         .db #$B1, #%00001001
0D4DA 02 09                         .db #$02, #%00001001
0D4DC 52 0C                         .db #$52, #%00001100
0D4DE 13 11                         .db #$13, #%00010001
0D4E0 33 04                         .db #$33, #%00000100
0D4E2 74 0C                         .db #$74, #%00001100
0D4E4 B4 08                         .db #$B4, #%00001000
0D4E6 15 09                         .db #$15, #%00001001
0D4E8 55 0C                         .db #$55, #%00001100
0D4EA 95 0C                         .db #$95, #%00001100
0D4EC 47 03                         .db #$47, #%00000011
0D4EE A7 12                         .db #$A7, #%00010010
0D4F0 18 15                         .db #$18, #%00010101
0D4F2 09 05                         .db #$09, #%00000101
0D4F4 19 03                         .db #$19, #%00000011
0D4F6 FF                            .db #LEVEL_END
0D4F7                           
0D4F7                           lvl_layout_25:
0D4F7 00 12                         .db #$00, #%00010010
0D4F9 10 63                         .db #$10, #%01100011
0D4FB 60 63                         .db #$60, #%01100011
0D4FD A0 07                         .db #$A0, #%00000111
0D4FF 01 11                         .db #$01, #%00010001
0D501 A1 02                         .db #$A1, #%00000010
0D503 02 67                         .db #$02, #%01100111
0D505 42 07                         .db #$42, #%00000111
0D507 62 67                         .db #$62, #%01100111
0D509 A2 C7                         .db #$A2, #%11000111
0D50B 03 61                         .db #$03, #%01100001
0D50D 43 01                         .db #$43, #%00000001
0D50F 63 61                         .db #$63, #%01100001
0D511 A6 E7                         .db #$A6, #%11100111
0D513 B6 47                         .db #$B6, #%01000111
0D515 C6 01                         .db #$C6, #%00000001
0D517 B7 42                         .db #$B7, #%01000010
0D519 B8 42                         .db #$B8, #%01000010
0D51B C8 0A                         .db #$C8, #%00001010
0D51D 09 7A                         .db #$09, #%01111010
0D51F 49 7A                         .db #$49, #%01111010
0D521 89 3A                         .db #$89, #%00111010
0D523 B9 42                         .db #$B9, #%01000010
0D525 FF                            .db #LEVEL_END
0D526                           
0D526                           ;; Level layout address pointers
0D526                           tbl_lvl_layout_hi:
0D526 CE CE CE CE CF                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D52B CF CF D0 D0 D0                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D530 D0 D1 D1 D1 D2                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D535 D2 D2 D3 D3 D3                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D53A D3 D4 D4 D4 D4                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D53F                           
0D53F                           tbl_lvl_layout_lo:
0D53F 47 62 97 CA 3B                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D544 76 FF 40 77 BA                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D549 E9 3C 67 BA 31                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D54E 62 B7 1E 73 B2                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D553 FD 3A 67 B2 F7                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D558                           
0D558                           ;; Ball start position (#$YX)
0D558                           tbl_lvl_ball_startpos:
0D558 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D55D 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D562 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D567 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D56C 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D571                               
0D571                           ;; Ball start direction, color and tile score
0D571                           ;; #% ccc v tttt
0D571                           ;;    ||| | ++++-- tile score
0D571                           ;;    ||| +------- vertical direction, up (0) or down
0D571                           ;;    +++--------- color (CBRYGM)
0D571                           tbl_lvl_ball_init:
0D571 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D576 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D57B 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D580 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D585 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D58A                           
0D58A                           
0D58A                           
0D58A                           ;; Helper table to multiply values by 16
0D58A                           tbl_Times16:
0D58A 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D592 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D59A                               
0D59A                           
0D59A                           ;; Helper table to multiply values by 64
0D59A                           tbl_Times64:
0D59A 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D59E                           
0D59E                           
0D59E                           ;; Metatile ID to CHR data mapper
0D59E                           tbl_GametileTopLeft:
0D59E 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D5A8                           
0D5A8                           tbl_GametileTopRight:
0D5A8 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D5B2                           
0D5B2                           tbl_GametileBottomLeft:
0D5B2 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D5BC                           
0D5BC                           tbl_GametileBottomRight:
0D5BC 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D5C6                           
0D5C6                           ;; Metatile ID to RAM byte data mapper
0D5C6                           tbl_GameTileRamByte:
0D5C6 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D5CB                           
0D5CB                           ;; HUD text data
0D5CB                           tbl_HudText:
0D5CB 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D5D3 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D5DA 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D5E2 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D5E7                           
0D5E7                           ;; NMI handler
0D5E7                           NMI:
0D5E7                               .include "interrupt/nmi.asm"
0D5E7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D5E7                           ;;
0D5E7                           ;; include/nmi.asm
0D5E7                           ;;
0D5E7                           ;; Non-maskable interrupt script. This script is being executed
0D5E7                           ;; when vBlank hits.
0D5E7                           ;;
0D5E7                           ;;
0D5E7                           
0D5E7                               ;; Preserve accumulator through stack
0D5E7 48                            PHA
0D5E8                           
0D5E8                               ;; Should NMI be skipped?
0D5E8 A5 13                         LDA skip_nmi
0D5EA F0 03                         BEQ +
0D5EC 4C 25 D7                          JMP +skip_nmi
0D5EF                               +
0D5EF                           
0D5EF                               ;; When in NMI, skip additional NMI requests
0D5EF A9 01                         LDA #$01
0D5F1 85 13                         STA skip_nmi
0D5F3                           
0D5F3                               ;; Preserve X, Y, and PC through stack
0D5F3 8A                            TXA
0D5F4 48                            PHA
0D5F5 98                            TYA
0D5F6 48                            PHA
0D5F7 08                            PHP
0D5F8                               
0D5F8                               ;; Check forced NMI skip
0D5F8 A5 14                         LDA force_skip_nmi
0D5FA F0 03                         BEQ +
0D5FC 4C 14 D7                          JMP +force_skip_nmi
0D5FF                               +
0D5FF                           
0D5FF                               ;; Update PPU mask
0D5FF                               ;LDA #$00
0D5FF                               ;STA PPU_CTRL
0D5FF A5 12                         LDA soft_ppu_mask
0D601 8D 01 20                      STA PPU_MASK
0D604                               
0D604                               
0D604                               ;; Additional PPU updates go here
0D604                               .include "game/interrupt/nmi.asm"
0D604                           
0D604                               ;; Check if ppu_buffer needs updating
0D604 A5 38                         LDA ppu_buffer_update
0D606 D0 03                         BNE +
0D608 4C 4A D6                          JMP +no_ppu_buffer_update
0D60B                               +
0D60B                           
0D60B                               ;; Reset ppu control register and mask
0D60B A2 00                         LDX #$00
0D60D 8E 00 20                      STX PPU_CTRL
0D610 8E 01 20                      STX PPU_MASK
0D613                           
0D613                               ;; Set up loop
0D613                               -
0D613                                   ;; Reset hi/lo latch
0D613 2C 02 20                          BIT PPU_STATUS
0D616                           
0D616                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D616 BD 00 03                          LDA ppu_buffer,x
0D619 8D 06 20                          STA PPU_ADDR
0D61C E8                                INX
0D61D BD 00 03                          LDA ppu_buffer,x
0D620 8D 06 20                          STA PPU_ADDR
0D623                           
0D623                                   ;; Write ppu_buffer data to PPU_ADDR
0D623 E8                                INX
0D624 BD 00 03                          LDA ppu_buffer,x
0D627 8D 07 20                          STA PPU_DATA
0D62A                           
0D62A                                   ;; Check if updating is done (eg. X is at pointer)
0D62A E8                                INX
0D62B E4 39                             CPX ppu_buffer_pointer
0D62D F0 03                             BEQ +
0D62F 4C 13 D6                      JMP -
0D632                           +
0D632                           
0D632                               ;; Reset ppu buffer update and pointer
0D632 A9 00                         LDA #$00
0D634 85 38                         STA ppu_buffer_update
0D636 85 39                         STA ppu_buffer_pointer
0D638                               
0D638                               ;; Reset scrolling position
0D638 8D 05 20                      STA PPU_SCROLL
0D63B 8D 05 20                      STA PPU_SCROLL
0D63E                           
0D63E                               ;; Restore ppu control register and mask
0D63E A9 90                         LDA #%10010000
0D640 8D 00 20                      STA PPU_CTRL
0D643 A5 12                         LDA soft_ppu_mask
0D645 8D 01 20                      STA PPU_MASK
0D648 A9 00                         LDA #$00
0D64A                           
0D64A                           ;; Continue other NMI stuff
0D64A                           +no_ppu_buffer_update:
0D64A                           
0D64A                               ;; Reset sprite RAM, draw sprites
0D64A 8D 03 20                      STA OAM_ADDR
0D64D A9 02                         LDA #$02
0D64F 8D 14 40                      STA OAM_DMA
0D652                           
0D652                               ;; Decrease explosion frame counters
0D652 A0 04                         LDY #MAX_ANIMATIONS
0D654 A2 00                         LDX #$00
0D656                               -
0D656 BD 60 03                          LDA explosion_framecounter,x
0D659 F0 03                             BEQ +
0D65B DE 60 03                              DEC explosion_framecounter,x
0D65E                                   +
0D65E E8                                INX
0D65F 88                                DEY
0D660 F0 03                             BEQ +done        
0D662 4C 56 D6                      JMP -
0D665                           +done:
0D665                           
0D665                               ;; Decrease nudge counter
0D665 A5 3C                         LDA nudge_counter
0D667 F0 02                         BEQ +
0D669 C6 3C                             DEC nudge_counter
0D66B                               +
0D66B                           
0D66B                               ;; Decrease bonus counter
0D66B A5 3D                         LDA bonus_counter
0D66D F0 02                         BEQ +
0D66F C6 3D                             DEC bonus_counter
0D671                               +
0D671                           
0D671                               ;; Decrease kill counter
0D671 A5 3E                         LDA kill_counter
0D673 F0 02                         BEQ +
0D675 C6 3E                             DEC kill_counter
0D677                               +
0D677                           
0D677                               ;; Play background noise
0D677 A5 37                         LDA screen_mode
0D679 29 01                         AND #IS_GAME_SCREEN
0D67B F0 21                         BEQ +
0D67D                                   .include "game/include/main/background_sound.asm"
0D67D                               ;; At random times, set max_noise period to $03-$0A
0D67D A5 42                         LDA max_noise
0D67F D0 1D                         BNE +
0D681 20 4F C4                          JSR sub_GetRandomNumber
0D684 29 EF                             AND #%11101111
0D686 D0 16                             BNE +
0D688                                   
0D688 A5 15                             LDA frame_counter
0D68A 85 16                             STA random_seed
0D68C 20 4F C4                          JSR sub_GetRandomNumber
0D68F 29 07                             AND #$07
0D691 69 03                             ADC #$03
0D693 85 42                             STA max_noise
0D695 A9 01                             LDA #$01
0D697 85 43                             STA sweep_noise
0D699 A9 34                             LDA #$34
0D69B 8D 0C 40                          STA NOISE_VOLUME
0D69E                           
0D69E                               +
0D69E                           
0D69E                               ;; if sweep noise = $00: constant noise
0D69E                               ;; else if sweep noise > $80: decrease pitch
0D69E                               ;; else: increase pitch
0D69E A5 43                         LDA sweep_noise
0D6A0 F0 18                         BEQ +constantNoise
0D6A2 30 2A                         BMI +decreaseNoise
0D6A4                           
0D6A4                           ;; Sweep noise up to max noise pitch
0D6A4                           +increaseNoise:
0D6A4 C6 44                         DEC current_noise
0D6A6 A5 44                         LDA current_noise
0D6A8 8D 0E 40                      STA NOISE_PERIOD
0D6AB C5 42                         CMP max_noise
0D6AD D0 08                         BNE +
0D6AF A9 00                             LDA #$00
0D6B1 85 43                             STA sweep_noise
0D6B3 A9 0A                             LDA #$0A
0D6B5 85 45                             STA noise_counter
0D6B7                               +
0D6B7 4C E2 D6                      JMP +endNoise
0D6BA                           
0D6BA                           ;; Keep noise at constant pitch
0D6BA                           +constantNoise:
0D6BA A5 42                         LDA max_noise
0D6BC F0 24                         BEQ +endNoise
0D6BE                           
0D6BE A5 45                         LDA noise_counter
0D6C0 D0 07                         BNE +
0D6C2 A9 80                             LDA #$80
0D6C4 85 43                             STA sweep_noise
0D6C6 4C E2 D6                          JMP +endNoise
0D6C9                               +
0D6C9 C6 45                         DEC noise_counter
0D6CB 4C E2 D6                      JMP +endNoise
0D6CE                           
0D6CE                           ;; Sweep noise down to initial pitch
0D6CE                           +decreaseNoise:
0D6CE E6 44                         INC current_noise
0D6D0 A5 44                         LDA current_noise
0D6D2 8D 0E 40                      STA NOISE_PERIOD
0D6D5 C9 0E                         CMP #$0E
0D6D7 D0 09                         BNE +endNoise
0D6D9                           
0D6D9 20 DF C4                      JSR sub_BackgroundNoise
0D6DC A9 00                         LDA #$00
0D6DE 85 42                         STA max_noise
0D6E0 85 43                         STA sweep_noise
0D6E2                           
0D6E2                           +endNoise:
0D6E2                           
0D6E2                               +
0D6E2                           
0D6E2                               ;; Test: random bleeps
0D6E2                               .include "game/test/random_descending_bleeps.asm"
0D6E2                           ;; Random bleepy noises
0D6E2 A5 46                         LDA do_beeps
0D6E4 F0 2E                         BEQ +continue
0D6E6                               
0D6E6 C9 02                         CMP #$02
0D6E8 D0 12                         BNE +beep
0D6EA                              
0D6EA                           +stopBeep:
0D6EA A9 00                         LDA #$00
0D6EC 85 46                         STA do_beeps
0D6EE A9 08                         LDA #$08
0D6F0 8D 15 40                      STA APU_STATUS
0D6F3 8D 0F 40                      STA NOISE_LENGTH
0D6F6 20 DF C4                      JSR sub_BackgroundNoise
0D6F9 4C 14 D7                      JMP +continue
0D6FC                               
0D6FC                           +beep:
0D6FC A9 01                         LDA #$01
0D6FE 8D 15 40                      STA APU_STATUS
0D701 A9 B8                         LDA #$B8
0D703 8D 00 40                      STA PULSE1_VOLUME
0D706 20 4F C4                      JSR sub_GetRandomNumber
0D709 8D 02 40                      STA PULSE1_TIMER_LO
0D70C 20 4F C4                      JSR sub_GetRandomNumber
0D70F 29 01                         AND #$01
0D711 8D 03 40                      STA PULSE1_TIMER_HI
0D714                           
0D714                           +continue:0D714                               
0D714                           
0D714                           
0D714                           ;; This is what happens when we forced nmi skip
0D714                           +force_skip_nmi:
0D714                           
0D714                               ;; Increase frame counters
0D714 E6 15                         INC frame_counter
0D716                           
0D716                               ;; reset ball_update_position
0D716 A9 00                         LDA #$00
0D718 85 35                         STA ball_update_position
0D71A                           
0D71A                               ;; Don't skip next NMI request
0D71A A9 00                         LDA #$00
0D71C 85 13                         STA skip_nmi
0D71E 85 47                         STA check_nmi
0D720                           
0D720                               ;; Restore X, Y and PC from stack
0D720 28                            PLP
0D721 68                            PLA
0D722 A8                            TAY
0D723 68                            PLA
0D724 AA                            TAX
0D725                           
0D725                           +skip_nmi:
0D725                               ;; Restore accumulator from stack
0D725 68                            PLA
0D726                           
0D726                               ;; Return
0D726 40                            RTI
0D727                           
0D727                           ;; IRQ handler (empty)
0D727                           IRQ:
0D727                               .include "interrupt/irq.asm"
0D727 40                            RTI0D728                           
0D728                           ;; Interrupt vectors
0D728 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA E7 D5                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 27 D7                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
