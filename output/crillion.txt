                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_SPRITERAM = $0200
                                ADDR_OTHERRAM  = $0300
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Starting address for screen tile RAM
                                ADDR_SCREENTILERAM  = $0400
                                
                                
                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI = #$02
                                BALL_SPEED_LO = #$C0
                                BALL_TILE_CHR = #$01
                                BALL_ATTR     = #%00000000
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD     = #%00000001
                                KILL_BALL        = #%00000001
                                REVIVE_BALL      = #%11111110
                                NUDGE_BALL_RIGHT = #%00000010
                                NUDGE_BALL_LEFT  = #%11111101
                                BALL_MOVES_DOWN  = #%00000100
                                MOVE_BALL_DOWN   = #%00000100
                                MOVE_BALL_UP     = #%11111011
                                BALL_IS_FROZEN   = #%00010000
                                FREEZE_BALL      = #%00010000
                                UNFREEZE_BALL    = #%11101111
                                
                                
                                ;; Screen load helpers
                                LOAD_INTRO_SCREEN = #%10000000
                                LOAD_GAME_SCREEN  = #%10000001
                                LOAD_WIN_SCREEN   = #%10000010
                                IS_INTRO_SCREEN   = #%00000000
                                IS_GAME_SCREEN    = #%00000001
                                IS_WIN_SCREEN     = #%00000010
                                CHECK_SCREEN_MODE = #%00000011
                                
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$30
                                BOUND_BOTTOM    = #$C8
                                BOUND_LEFT      = #$10
                                BOUND_RIGHT     = #$E8
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                
                                ;; Max number of nudge frames
                                NUDGE_FRAMES    = #$04
                                
                                
                                ;; Helper constant for when a level is done loading
                                LEVEL_END       = #$FF
                                
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           
00025                           ;; Update-position check
00025                           ball_update_position   .dsb 1
00026                           
00026                           
00026                           ;; Ball flags
00026                           ;; #% c c c f . v n a
00026                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00026                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00026                           ;;    | | | | | +------ ball moves up (0) or down (1)
00026                           ;;    | | | | +-------- (unused for now)
00026                           ;;    | | | +---------- ball is frozen (not moving)
00026                           ;;    +-+-+------------ ball color (1-6)
00026                           ball_flags             .dsb 1
00027                           
00027                           
00027                           ;; Screen mode
00027                           ;; #% u . . . . . t t
00027                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00027                           ;;    | +-+-+-+-+------------- unused
00027                           ;;    +----------------------- should the screen update
00027                           screen_mode            .dsb 1
00028                           
00028                           
00028                           ;; Start level pointer
00028                           ;; You can start the game at level 1, 5, 9, 13 or 17.
00028                           ;; This is the pointer that tells you at which level to start.
00028                           startlevel_pointer     .dsb 1 
00029                           
00029                           
00029                           ;; PPU buffer variables
00029                           ppu_buffer_update      .dsb 1
0002A                           ppu_buffer_pointer     .dsb 1
0002B                           
0002B                           ;; Pointer to keep track of the number of explosions
0002B                           explosion_pointer      .dsb 1
0002C                           
0002C                           ;; Sprite RAM pointer to keep track of sprites to update
0002C                           sprite_ram_pointer     .dsb 1
0002D                           
0002D                           ;; Nudge counter
0002D                           nudge_counter          .dsb 1
0002E                           
0002E                           ;; Current level
0002E                           current_level          .dsb 1
0002F                           
0002F                               0002F                           .ende
                                
                                ;; Other RAM (must be ENUM'd within)
                                .include "ram/misc.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; ram/misc.asm
                                ;;
                                ;; List of additional, non-zeropage RAM variables. Currently
                                ;; empty, but will hold data like the OAM buffer and other,
                                ;; less-often accessed, global variables.
                                ;;
                                ;;
                                
                                
                                    ;; Game specific RAM variables
                                    .include "game/ram/misc.asm"
                                ;; miscellaneous (non-zeropage) ram variables go here
                                
                                .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
                                
                                
                                ;; screen tile data (14x10 metatiles)
                                .enum ADDR_SCREENTILERAM
00400                               tile_type                 .dsb 140
0048C                           .ende
                                
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 9B C2                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 9B C2                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 27                         STA screen_mode
0C04F                           
0C04F                           
0C04F                           ;; Main game loop
0C04F                           MainGameLoop:
0C04F                               .include "game/main.asm"
0C04F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C04F                           ;;
0C04F                           ;; game/main.asm
0C04F                           ;;
0C04F                           ;; The main game loop content.
0C04F                           ;;
0C04F                           ;;
0C04F                           
0C04F                               ;; Reset sprite pointer every game loop
0C04F A9 00                         LDA #$00
0C051 85 2C                         STA sprite_ram_pointer
0C053                           
0C053                               ;; Store previous buttons
0C053 A5 0F                         LDA buttons_held
0C055 85 0E                         STA buttons_prev
0C057                           
0C057                               ;; Read controller input
0C057 20 87 C2                      JSR sub_ReadController
0C05A                           
0C05A                               ;; Get buttons released
0C05A A5 0F                         LDA buttons_held
0C05C 49 FF                         EOR #$FF
0C05E 25 0E                         AND buttons_prev
0C060 85 11                         STA buttons_released
0C062                           
0C062                               ;; Set buttons pressed
0C062 A5 0E                         LDA buttons_prev
0C064 49 FF                         EOR #$FF
0C066 25 0F                         AND buttons_held
0C068 85 10                         STA buttons_pressed
0C06A                           
0C06A                               ;; Load screen?
0C06A A5 27                         LDA screen_mode
0C06C 29 80                         AND #%10000000
0C06E F0 1E                         BEQ +screenLoaded
0C070                           
0C070                               ;; Get screen type to load
0C070 A5 27                         LDA screen_mode
0C072 29 03                         AND #%00000011
0C074 A8                            TAY
0C075                               
0C075                               ;; Get address to load screen type from
0C075 B9 50 C6                      LDA tbl_LoadScreenLo,y
0C078 85 0C                         STA pointer
0C07A B9 4D C6                      LDA tbl_LoadScreenHi,y
0C07D 85 0D                         STA pointer+1
0C07F                           
0C07F                               ;; Load screen
0C07F 20 33 C3                      JSR sub_DisableRendering
0C082 20 71 C3                      JSR sub_JumpToPointer
0C085 20 47 C3                      JSR sub_EnableRendering
0C088                               
0C088                               ;; Don't load screen anymore next loop
0C088 A5 27                         LDA screen_mode
0C08A 29 7F                         AND #%01111111
0C08C 85 27                         STA screen_mode
0C08E                               
0C08E                           
0C08E                           +screenLoaded:
0C08E                           
0C08E                               ;; CONCEPT SCRIPTS
0C08E                               
0C08E                               ;; Upon pressing A, an explosion will happen on screen
0C08E                               .include "game/test/show_animation.asm"
0C08E                               ;; If A button is pressed, initiate explosion
0C08E A5 10                         LDA buttons_pressed
0C090 29 80                         AND #BUTTON_A
0C092 D0 03                         BNE +
0C094 4C C6 C0                          JMP +end
0C097                               +
0C097                           
0C097                               ;; Get most recent slot for explosion
0C097 A6 2B                         LDX explosion_pointer
0C099                           
0C099                               ;; If 0, use max pointer value
0C099 D0 02                         BNE +
0C09B A2 04                             LDX #MAX_ANIMATIONS
0C09D                               +
0C09D                           
0C09D                               ;; Decrease pointer by one
0C09D CA                            DEX
0C09E 86 2B                         STX explosion_pointer
0C0A0                           
0C0A0                               ;; Load explosion data into RAM
0C0A0 A9 00                         LDA #$00
0C0A2 9D 34 03                      STA explosion_currentframe,x
0C0A5 A9 04                         LDA #ANIMATION_SPEED
0C0A7 9D 30 03                      STA explosion_framecounter,x
0C0AA 20 79 C2                      JSR sub_GetRandomNumber
0C0AD                               ;AND #%11110000
0C0AD 9D 3C 03                      STA explosion_x,x
0C0B0 20 79 C2                      JSR sub_GetRandomNumber
0C0B3                               ;AND #%11110000
0C0B3 9D 40 03                      STA explosion_y,x
0C0B6 20 79 C2                      JSR sub_GetRandomNumber
0C0B9 29 02                         AND #%00000010
0C0BB 18                            CLC
0C0BC 69 01                         ADC #$01
0C0BE 9D 38 03                      STA explosion_attributes,x
0C0C1 A9 01                         LDA #$01
0C0C3 9D 44 03                      STA explosion_active,x
0C0C6                           
0C0C6                           
0C0C6                           +end:
0C0C6                           
0C0C6                               ;; Set up loop
0C0C6 A2 00                         LDX #$00
0C0C8                               -loop_load_animation:
0C0C8                                   ;; Check if current animation is active. If not, goto next
0C0C8 BD 44 03                          LDA explosion_active,x
0C0CB D0 03                             BNE +
0C0CD 4C 67 C1                              JMP +next
0C0D0                                   +
0C0D0                           
0C0D0                                   ;; Check the explosion framecounter
0C0D0 BD 30 03                          LDA explosion_framecounter,x
0C0D3 D0 26                             BNE +
0C0D5                                       ;; Framecounter is 0
0C0D5                                       ;; Reset to animation speed
0C0D5 A9 04                                 LDA #ANIMATION_SPEED
0C0D7 9D 30 03                              STA explosion_framecounter,x
0C0DA                           
0C0DA                                       ;; Set next animation frame, and check if we're done yet
0C0DA FE 34 03                              INC explosion_currentframe,x
0C0DD BD 34 03                              LDA explosion_currentframe,x
0C0E0 C9 0A                                 CMP #ANIM_SLIDES
0C0E2 D0 17                                 BNE +
0C0E4                           
0C0E4                                       ;; If we're done, inactivate current explosion, clean
0C0E4                                       ;; up sprite RAM and go to the next one
0C0E4 A9 00                                 LDA #$00
0C0E6 9D 44 03                              STA explosion_active,x
0C0E9                                       
0C0E9 A9 09                                 LDA #SLIDE_SIZE
0C0EB 0A                                    ASL
0C0EC 0A                                    ASL
0C0ED A8                                    TAY
0C0EE A9 EF                                 LDA #$EF
0C0F0                                       -
0C0F0 88                                        DEY
0C0F1 99 00 02                                  STA ADDR_SPRITERAM,y
0C0F4 C0 00                                     CPY #00
0C0F6 D0 F8                                 BNE -
0C0F8                                       
0C0F8 4C 67 C1                              JMP +next
0C0FB                                   +
0C0FB                           
0C0FB                                   ;; Load (x,y) position in temp variables
0C0FB BD 3C 03                          LDA explosion_x,x
0C0FE 85 01                             STA temp+1
0C100 85 03                             STA temp+3
0C102 BD 40 03                          LDA explosion_y,x
0C105 85 02                             STA temp+2
0C107                           
0C107                                   ;; Load attribute in temp variable
0C107 BD 38 03                          LDA explosion_attributes,x
0C10A 85 04                             STA temp+4
0C10C                           
0C10C                                   ;; Load current frame into Y-register
0C10C BC 34 03                          LDY explosion_currentframe,x
0C10F                           
0C10F                                   ;; Load current frame ROM address from table
0C10F B9 37 C6                          LDA explosion_anim_lo,y
0C112 85 0C                             STA pointer
0C114 B9 2D C6                          LDA explosion_anim_hi,y
0C117 85 0D                             STA pointer+1
0C119                           
0C119                                   ;; Save x-register on stack
0C119 8A                                TXA
0C11A 48                                PHA
0C11B                           
0C11B                                   ;; Load sprites into sprite RAM
0C11B A6 2C                             LDX sprite_ram_pointer
0C11D A0 00                             LDY #$00
0C11F                           
0C11F                                   ;; Prepare (x,y) offset for loop
0C11F 84 00                             STY temp
0C121                           
0C121                                   -loop_load_sprite:
0C121                                   
0C121                                       ;; Do not draw empty sprites
0C121 B1 0C                                 LDA (pointer),y
0C123 F0 18                                 BEQ +nextSprite
0C125                                   
0C125                                           ;; Add y-position to sprite ram buffer
0C125 A5 02                                     LDA temp+2
0C127 9D 00 02                                  STA ADDR_SPRITERAM,x
0C12A E8                                        INX
0C12B                           
0C12B                                           ;; Get tile number from frame ROM address, and
0C12B                                           ;; add it to sprite ram buffer
0C12B B1 0C                                     LDA (pointer),y
0C12D 9D 00 02                                  STA ADDR_SPRITERAM,x
0C130 E8                                        INX
0C131                           
0C131                                           ;; Add attribute data to sprite ram buffer
0C131 A5 04                                     LDA temp+4
0C133 9D 00 02                                  STA ADDR_SPRITERAM,x
0C136 E8                                        INX
0C137                           
0C137                                           ;; Add x-position to sprite ram buffer
0C137 A5 03                                     LDA temp+3
0C139 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13C E8                                        INX
0C13D                           
0C13D                                       +nextSprite:
0C13D                           
0C13D                                       ;; Check if all sprites are done
0C13D C8                                    INY
0C13E C0 09                                 CPY #SLIDE_SIZE
0C140 F0 21                                 BEQ +done
0C142                           
0C142                                       ;; Update x value
0C142 A5 03                                 LDA temp+3
0C144 18                                    CLC
0C145 69 08                                 ADC #$08
0C147 85 03                                 STA temp+3
0C149                           
0C149                                       ;; Update temp for x,y position
0C149 E6 00                                 INC temp
0C14B A5 00                                 LDA temp
0C14D C9 03                                 CMP #SLIDE_WIDTH
0C14F D0 0F                                 BNE +
0C151                                           ;; Row is done; reset x-position
0C151 A5 01                                     LDA temp+1
0C153 85 03                                     STA temp+3
0C155                           
0C155                                           ;; Update y-position
0C155 A5 02                                     LDA temp+2
0C157 18                                        CLC
0C158 69 08                                     ADC #$08
0C15A 85 02                                     STA temp+2
0C15C                           
0C15C                                           ;; Reset row counter
0C15C A9 00                                     LDA #$00
0C15E 85 00                                     STA temp
0C160                                       +
0C160                           
0C160 4C 21 C1                          JMP -loop_load_sprite
0C163                           
0C163                               +done:
0C163 86 2C                             STX sprite_ram_pointer
0C165                           
0C165                                   ;; Retrieve x-register from stack
0C165 68                                PLA
0C166 AA                                TAX
0C167                           
0C167                               +next:
0C167                                   ;; Check if all animations have been updated
0C167 E8                                INX
0C168 E0 04                             CPX #MAX_ANIMATIONS
0C16A F0 03                             BEQ +done
0C16C                           
0C16C 4C C8 C0                      JMP -loop_load_animation
0C16F                           +done:
0C16F                           
0C16F                               ;; On the game screen, the ball should move
0C16F A5 27                         LDA screen_mode
0C171 C9 01                         CMP #IS_GAME_SCREEN
0C173 F0 03                         BEQ +
0C175 4C 5E C2                          JMP ++
0C178                               +
0C178                               .include "game/test/move_ball.asm"
0C178                           
0C178                               ;; check if position should be updated (ie. has nmi happened yet)
0C178 A5 25                         LDA ball_update_position
0C17A F0 03                         BEQ +
0C17C 4C 42 C2                          JMP +skipBallMovement
0C17F                               +
0C17F                           
0C17F                               ;; Check if ball goes up or down
0C17F A5 26                         LDA ball_flags
0C181 29 04                         AND #BALL_MOVES_DOWN
0C183 F0 27                         BEQ +moveBallUp
0C185                           
0C185                           
0C185                           +moveBallDown:
0C185                               ;; update the low byte
0C185 A5 1A                         LDA ball_ypos_lo
0C187 18                            CLC
0C188 69 C0                         ADC #BALL_SPEED_LO
0C18A 85 1A                         STA ball_ypos_lo
0C18C                           
0C18C                               ;; update the high byte with carry
0C18C A5 19                         LDA ball_ypos_hi
0C18E 69 02                         ADC #BALL_SPEED_HI
0C190 85 19                         STA ball_ypos_hi
0C192                               
0C192                               ;; Check bottom bound
0C192 C9 C8                         CMP #BOUND_BOTTOM
0C194 90 38                         BCC +checkHorizontalMovement
0C196 F0 36                         BEQ +checkHorizontalMovement
0C198                           
0C198                               ;; Update ball color (test)
0C198 20 F8 C2                      JSR sub_ColorizeBall
0C19B                           
0C19B                               ;; Change ball direction to "up"
0C19B A9 C8                         LDA #BOUND_BOTTOM
0C19D 85 19                         STA ball_ypos_hi
0C19F A9 00                         LDA #$00
0C1A1 85 1A                         STA ball_ypos_lo
0C1A3 A5 26                         LDA ball_flags
0C1A5 29 FB                         AND #MOVE_BALL_UP
0C1A7 85 26                         STA ball_flags
0C1A9 4C CE C1                      JMP +checkHorizontalMovement
0C1AC                           
0C1AC                           
0C1AC                           +moveBallUp:
0C1AC                               ;; update the low byte
0C1AC A5 1A                         LDA ball_ypos_lo
0C1AE 38                            SEC
0C1AF E9 C0                         SBC #BALL_SPEED_LO
0C1B1 85 1A                         STA ball_ypos_lo
0C1B3                           
0C1B3                               ;; update the high byte with carry
0C1B3 A5 19                         LDA ball_ypos_hi
0C1B5 E9 02                         SBC #BALL_SPEED_HI
0C1B7 85 19                         STA ball_ypos_hi
0C1B9                               
0C1B9                               ;; Check top bound
0C1B9 C9 30                         CMP #BOUND_TOP
0C1BB B0 11                         BCS +checkHorizontalMovement
0C1BD                           
0C1BD                               ;; Change ball direction to "down"
0C1BD 20 F8 C2                      JSR sub_ColorizeBall
0C1C0 A9 30                         LDA #BOUND_TOP
0C1C2 85 19                         STA ball_ypos_hi
0C1C4 A9 00                         LDA #$00
0C1C6 85 1A                         STA ball_ypos_lo
0C1C8 A5 26                         LDA ball_flags
0C1CA 09 04                         ORA #MOVE_BALL_DOWN
0C1CC 85 26                         STA ball_flags
0C1CE                           
0C1CE                           
0C1CE                           +checkHorizontalMovement:
0C1CE                           
0C1CE                               ;; Check if ball is being nudged
0C1CE A5 2D                         LDA nudge_counter
0C1D0 D0 47                         BNE +doneBallMovement
0C1D2                           
0C1D2                               ;; Check if left button is held
0C1D2 A5 0F                         LDA buttons_held
0C1D4 29 02                         AND #BUTTON_LEFT
0C1D6 F0 1E                         BEQ +
0C1D8                                   ;; update the low byte
0C1D8 A5 18                             LDA ball_xpos_lo
0C1DA 38                                SEC
0C1DB E9 C0                             SBC #BALL_SPEED_LO
0C1DD 85 18                             STA ball_xpos_lo
0C1DF                           
0C1DF                                   ;; update the high byte
0C1DF A5 17                             LDA ball_xpos_hi
0C1E1 E9 02                             SBC #BALL_SPEED_HI
0C1E3 85 17                             STA ball_xpos_hi
0C1E5                                   
0C1E5                                   ;; Check left bound
0C1E5 C9 10                             CMP #BOUND_LEFT
0C1E7 B0 30                             BCS +doneBallMovement
0C1E9                                   
0C1E9                                   ;; Set flag to nudge right
0C1E9 A5 26                             LDA ball_flags
0C1EB 09 02                             ORA #NUDGE_BALL_RIGHT
0C1ED 85 26                             STA ball_flags
0C1EF                                   
0C1EF                                   ;; Set nudge timer
0C1EF A9 04                             LDA #NUDGE_FRAMES
0C1F1 85 2D                             STA nudge_counter
0C1F3                                   
0C1F3                           
0C1F3 4C 19 C2                          JMP +doneBallMovement        
0C1F6                               +
0C1F6                           
0C1F6                               ;; Check if right button is held
0C1F6 A5 0F                         LDA buttons_held
0C1F8 29 01                         AND #BUTTON_RIGHT
0C1FA F0 1D                         BEQ +
0C1FC                                   ;; update the low byte
0C1FC A5 18                             LDA ball_xpos_lo
0C1FE 18                                CLC
0C1FF 69 C0                             ADC #BALL_SPEED_LO
0C201 85 18                             STA ball_xpos_lo
0C203                           
0C203                                   ;; update the high byte
0C203 A5 17                             LDA ball_xpos_hi
0C205 69 02                             ADC #BALL_SPEED_HI
0C207 85 17                             STA ball_xpos_hi     
0C209                           
0C209                                  ;; Check right bound
0C209 C9 E8                             CMP #BOUND_RIGHT
0C20B 90 0C                             BCC +doneBallMovement
0C20D F0 0A                             BEQ +doneBallMovement
0C20F                                   
0C20F                                   ;; Set flag to nudge right
0C20F A5 26                             LDA ball_flags
0C211 29 FD                             AND #NUDGE_BALL_LEFT
0C213 85 26                             STA ball_flags
0C215                                   
0C215                                   ;; Set nudge timer
0C215 A9 04                             LDA #NUDGE_FRAMES
0C217 85 2D                             STA nudge_counter
0C219                               +
0C219                           
0C219                           
0C219                           +doneBallMovement:
0C219                           
0C219                               ;; Check nudge
0C219 A5 2D                         LDA nudge_counter
0C21B F0 23                         BEQ +doneBallNudging
0C21D A5 26                             LDA ball_flags
0C21F 29 02                             AND #NUDGE_BALL_RIGHT
0C221 F0 10                             BEQ +nudgeBallLeft
0C223                                   
0C223                                       ;; update the low byte
0C223 A5 18                                 LDA ball_xpos_lo
0C225 18                                    CLC
0C226 69 C0                                 ADC #BALL_SPEED_LO
0C228 85 18                                 STA ball_xpos_lo
0C22A                           
0C22A                                       ;; update the high byte
0C22A A5 17                                 LDA ball_xpos_hi
0C22C 69 02                                 ADC #BALL_SPEED_HI
0C22E 85 17                                 STA ball_xpos_hi  
0C230 4C 40 C2                              JMP +doneBallNudging
0C233                                   +nudgeBallLeft:
0C233                                   
0C233                                   ;; update the low byte
0C233 A5 18                             LDA ball_xpos_lo
0C235 38                                SEC
0C236 E9 C0                             SBC #BALL_SPEED_LO
0C238 85 18                             STA ball_xpos_lo
0C23A                           
0C23A                                   ;; update the high byte
0C23A A5 17                             LDA ball_xpos_hi
0C23C E9 02                             SBC #BALL_SPEED_HI
0C23E 85 17                             STA ball_xpos_hi
0C240                               +doneBallNudging:
0C240                           
0C240                               ;; Don't update position again until next frame
0C240 E6 25                         INC ball_update_position
0C242                           
0C242                           
0C242                           
0C242                           +skipBallMovement:
0C242                               ;; Add to sprite buffer
0C242 A6 2C                         LDX sprite_ram_pointer
0C244 A5 19                         LDA ball_ypos_hi
0C246 9D 00 02                      STA ADDR_SPRITERAM,x
0C249 E8                            INX
0C24A A9 01                         LDA #BALL_TILE_CHR
0C24C 9D 00 02                      STA ADDR_SPRITERAM,x
0C24F E8                            INX
0C250 A9 00                         LDA #BALL_ATTR
0C252 9D 00 02                      STA ADDR_SPRITERAM,x
0C255 E8                            INX
0C256 A5 17                         LDA ball_xpos_hi
0C258 9D 00 02                      STA ADDR_SPRITERAM,x
0C25B E8                            INX
0C25C 86 2C                         STX sprite_ram_pointer
0C25E                           
0C25E                               ++
0C25E                               
0C25E                               ;; Upon pressing START, level 3 design will be drawn
0C25E                               .include "game/test/load_level_three.asm"
0C25E                               ;; If START button is pressed
0C25E A5 10                         LDA buttons_pressed
0C260 29 10                         AND #BUTTON_START
0C262 F0 08                         BEQ +
0C264                                   ;; Load level 3 for testing purposes
0C264 A9 02                             LDA #$02
0C266 85 2E                             STA current_level
0C268 A9 81                             LDA #LOAD_GAME_SCREEN
0C26A 85 27                             STA screen_mode
0C26C                               +
0C26C                           
0C26C                           
0C26C                           
0C26C                               ;; Sprite clean-up
0C26C A6 2C                         LDX sprite_ram_pointer
0C26E A9 EF                         LDA #$EF
0C270                               -
0C270 9D 00 02                          STA ADDR_SPRITERAM,x
0C273 E8                                INX
0C274 D0 FA                         BNE -
0C276 4C 4F C0                      JMP MainGameLoop
0C279                           
0C279                           ;; Subroutines
0C279                           .include "include/subroutines.asm"
0C279                           
0C279                           ;; RNG
0C279                           .include "subroutine/GetRandomNumber.asm"
0C279                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C279                           ;;
0C279                           ;; subroutine/GetRandomNumber.asm
0C279                           ;;
0C279                           ;; Simple and fast random number generator by White Flame.
0C279                           ;;
0C279                           ;; Set random_seed to an arbitrary number to randomize between
0C279                           ;; gaming sessions, for instance using the frame counter upon
0C279                           ;; pressing START on the intro screen.
0C279                           ;;
0C279                           ;;     ;; IF START PRESSED:
0C279                           ;;     LDA frame_counter
0C279                           ;;     STA random_seed
0C279                           ;;
0C279                           ;; Source:
0C279                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C279                           ;;
0C279                           ;;
0C279                           
0C279                           sub_GetRandomNumber:
0C279                               ;; Force EOR if random_seed is zero
0C279 A5 16                         LDA random_seed
0C27B F0 05                         BEQ +doEor
0C27D                           
0C27D                               ;; Shift left, and EOR if the high bit is set
0C27D 0A                            ASL
0C27E F0 04                         BEQ +noEor
0C280 90 02                         BCC +noEor
0C282                           
0C282                           +doEor:
0C282 49 1D                         EOR #$1D
0C284                           
0C284                           +noEor:
0C284 85 16                         STA random_seed
0C286                           
0C286 60                            RTS
0C287                           
0C287                           
0C287                           ;; Read controller input
0C287                           .include "subroutine/ReadController.asm"
0C287                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C287                           ;;
0C287                           ;; subroutine/ReadController.asm
0C287                           ;;
0C287                           ;; Subroutine that polls the controller and stores the input
0C287                           ;; buttons in a variable. This version only handles controller
0C287                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C287                           ;;
0C287                           ;;
0C287                           
0C287                           sub_ReadController:
0C287                           
0C287                               ;; Set strobe bit
0C287 A9 01                         LDA #$01
0C289 8D 16 40                      STA JOYPAD_1
0C28C                           
0C28C                               ;; Set up ring counter
0C28C 85 0F                         STA buttons_held
0C28E                           
0C28E                               ;; Clear strobe bit
0C28E 4A                            LSR
0C28F 8D 16 40                      STA JOYPAD_1
0C292                           
0C292                               ;; Loop through button presses
0C292                               -
0C292 AD 16 40                          LDA JOYPAD_1
0C295 4A                                LSR
0C296 26 0F                             ROL buttons_held
0C298                           
0C298                               ;; Check if ring counter is done
0C298 90 F8                         BCC -
0C29A                           
0C29A                               ;; Return from subroutine
0C29A 60                            RTS
0C29B                           
0C29B                           
0C29B                           ;; vBlank wait
0C29B                           .include "subroutine/WaitForVBlank.asm"
0C29B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C29B                           ;;
0C29B                           ;; subroutine/WaitForVBlank.asm
0C29B                           ;;
0C29B                           ;; Subroutine that essentially pauses script execution until
0C29B                           ;; vBlank happens.
0C29B                           ;;
0C29B                           ;;
0C29B                           
0C29B                           sub_WaitForVBlank:
0C29B 2C 02 20                      BIT $2002
0C29E 10 FB                         BPL sub_WaitForVBlank
0C2A0 60                            RTS
0C2A1                           
0C2A1                           
0C2A1                           ;; Game specific subroutines
0C2A1                           .include "game/include/subroutines.asm"
0C2A1                           ;; additional game-specific subroutines go here
0C2A1                           
0C2A1                           .include "game/subroutine/ClearScreen.asm"
0C2A1                           ;; Subroutine to clear the screen
0C2A1                           ;; If it's a game screen, add noise
0C2A1                           
0C2A1                           sub_ClearScreen:
0C2A1                               ;; Check of game screen or not
0C2A1 A5 27                         LDA screen_mode
0C2A3 29 03                         AND #CHECK_SCREEN_MODE
0C2A5 C9 01                         CMP #IS_GAME_SCREEN
0C2A7 F0 02                         BEQ +
0C2A9 A9 00                             LDA #$00
0C2AB                               +
0C2AB 85 01                         STA temp+1
0C2AD                               
0C2AD                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C2AD 2C 02 20                      BIT PPU_STATUS
0C2B0 A9 20                         LDA #$20
0C2B2 8D 06 20                      STA PPU_ADDR
0C2B5 A9 00                         LDA #$00
0C2B7 8D 06 20                      STA PPU_ADDR
0C2BA                               
0C2BA                               ;; Set up tile to draw and loop
0C2BA 85 00                         STA temp
0C2BC AA                            TAX
0C2BD A8                            TAY
0C2BE                           
0C2BE                               -     
0C2BE                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C2BE A5 00                             LDA temp
0C2C0 8D 07 20                          STA PPU_DATA
0C2C3                           
0C2C3                                   ;; Check if we should draw noise next. Noise is drawn if:
0C2C3                                   ;; - Screen mode is game screen
0C2C3                                   ;; - Y between #$06 and #$19 (inclusive)
0C2C3                                   ;; - X between #$02 and #$1D (inclusive)
0C2C3                                   
0C2C3                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C2C3 A5 01                             LDA temp+1
0C2C5 F0 1C                             BEQ +nextTileInRow
0C2C7                                   
0C2C7                                   ;; If Y < $6, skip the check
0C2C7 C0 06                             CPY #$06
0C2C9 90 18                             BCC +nextTileInRow
0C2CB                                   
0C2CB                                   ;; If X < $1, skip the check
0C2CB E0 01                             CPX #$01
0C2CD 90 14                             BCC +nextTileInRow
0C2CF                                   
0C2CF                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C2CF E0 1D                             CPX #$1D
0C2D1 D0 04                             BNE +
0C2D3 A9 00                                 LDA #$00
0C2D5 85 00                                 STA temp
0C2D7                                   +
0C2D7 B0 0A                             BCS +nextTileInRow
0C2D9                                   
0C2D9                                   ;; Load a random noise tile
0C2D9 20 79 C2                          JSR sub_GetRandomNumber
0C2DC 29 0F                             AND #%00001111
0C2DE 18                                CLC
0C2DF 69 60                             ADC #$60
0C2E1 85 00                             STA temp
0C2E3                           
0C2E3                           +nextTileInRow:
0C2E3                                   
0C2E3                                   ;; Check if a row has been done. If not, draw the next
0C2E3 E8                                INX
0C2E4 E0 20                             CPX #$20
0C2E6 D0 D6                             BNE -
0C2E8                                   
0C2E8                                   ;; Go to the next row (if any left)
0C2E8 A2 00                             LDX #00
0C2EA C8                                INY
0C2EB                                   
0C2EB                                   ;; If Y is 1A, skip noise tile check until done drawing
0C2EB C0 1A                             CPY #$1A
0C2ED D0 04                             BNE +
0C2EF A9 00                                 LDA #$00
0C2F1 85 01                                 STA temp+1
0C2F3                                   +
0C2F3                                   
0C2F3 C0 1E                             CPY #$1E
0C2F5 D0 C7                             BNE -
0C2F7                           
0C2F7 60                            RTS0C2F8                           .include "game/subroutine/ColorizeBall.asm"
0C2F8                           sub_ColorizeBall:
0C2F8                           
0C2F8                               ;; Get next ball color in cycle
0C2F8 A5 26                         LDA ball_flags
0C2FA 4A                            LSR
0C2FB 4A                            LSR
0C2FC 4A                            LSR
0C2FD 4A                            LSR
0C2FE 4A                            LSR
0C2FF C9 05                         CMP #$05
0C301 D0 02                         BNE +
0C303 A9 FF                             LDA #$FF
0C305                               +
0C305 18                            CLC
0C306 69 01                         ADC #$01
0C308 AA                            TAX
0C309                           
0C309                               ;; Update color in ball flags
0C309 0A                            ASL
0C30A 0A                            ASL
0C30B 0A                            ASL
0C30C 0A                            ASL
0C30D 0A                            ASL
0C30E 85 00                         STA temp
0C310 A5 26                         LDA ball_flags
0C312 29 1F                         AND #%00011111
0C314 05 00                         ORA temp
0C316 85 26                         STA ball_flags
0C318                           
0C318                               ;; Add new light color of ball to PPU palette
0C318 A9 3F                         LDA #$3F
0C31A 85 00                         STA temp
0C31C A9 11                         LDA #$11
0C31E 85 01                         STA temp+1
0C320 BD 47 C6                      LDA tbl_BallColorLight,x
0C323 85 02                         STA temp+2
0C325 20 E3 C4                      JSR sub_WriteByteToPPUBuffer
0C328                               
0C328                               ;; Add new dark color of ball to PPU palette
0C328 E6 01                         INC temp+1
0C32A BD 41 C6                      LDA tbl_BallColorDark,x
0C32D 85 02                         STA temp+2
0C32F 20 E3 C4                      JSR sub_WriteByteToPPUBuffer
0C332                               
0C332 60                            RTS0C333                           .include "game/subroutine/DisableEnableRendering.asm"
0C333                           sub_DisableRendering:
0C333                               ;; Force NMI skip, disable rendering
0C333 A9 01                     	LDA #$01
0C335 85 14                     	STA force_skip_nmi
0C337 20 9B C2                      JSR sub_WaitForVBlank
0C33A A5 12                         LDA soft_ppu_mask
0C33C 29 E7                         AND #%11100111
0C33E 8D 01 20                      STA PPU_MASK
0C341 85 12                         STA soft_ppu_mask
0C343 20 9B C2                      JSR sub_WaitForVBlank
0C346 60                            RTS
0C347                           
0C347                           sub_EnableRendering:
0C347                               ;; Enable rendering
0C347 A5 12                         LDA soft_ppu_mask
0C349 09 18                         ORA #%00011000
0C34B 85 12                         STA soft_ppu_mask
0C34D 8D 01 20                      STA PPU_MASK
0C350 A9 00                     	LDA #$00
0C352 8D 05 20                  	STA PPU_SCROLL
0C355 8D 05 20                  	STA PPU_SCROLL
0C358 85 14                     	STA force_skip_nmi
0C35A 20 9B C2                      JSR sub_WaitForVBlank
0C35D 60                            RTS
0C35E                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C35E                           sub_drawIntroScreenLogoTile:
0C35E B9 29 C5                      LDA tbl_IntroScreenLogoChr,y
0C361 C9 60                         CMP #$60
0C363 D0 08                         BNE +
0C365 20 79 C2                          JSR sub_GetRandomNumber
0C368 29 07                             AND #$07
0C36A 18                                CLC
0C36B 69 60                             ADC #$60
0C36D                               +
0C36D 8D 07 20                      STA PPU_DATA
0C370 60                            RTS
0C371                           .include "game/subroutine/JumpToPointer.asm"
0C371                           sub_JumpToPointer:
0C371 6C 0C 00                      JMP (pointer)
0C374                               ;RTS must be handled by the routine (pointer) jumps to
0C374                           .include "game/subroutine/LoadGameScreen.asm"
0C374                           sub_LoadGameScreen:
0C374                           
0C374                               ;; Clear the screen
0C374 20 A1 C2                      JSR sub_ClearScreen
0C377                               
0C377                               
0C377                               ;; Get pointer from current level
0C377 A6 2E                         LDX current_level
0C379 BD 8F C6                      LDA tbl_lvl_layout_lo,x
0C37C 85 0C                         STA pointer
0C37E BD 8C C6                      LDA tbl_lvl_layout_hi,x
0C381 85 0D                         STA pointer+1
0C383                           
0C383                               ;; Set up the loop
0C383 A0 00                         LDY #$00
0C385                           -drawRowColumnLoop:
0C385                           
0C385                               ;; Load (x,y) of current set of tiles
0C385 B1 0C                         LDA (pointer),y
0C387                           
0C387                               ;; Check if level is done; if so, skip the loop
0C387 C9 FF                         CMP #LEVEL_END
0C389 D0 03                         BNE +
0C38B 4C 52 C4                          JMP +doneLevelLoad
0C38E                               +
0C38E                           
0C38E                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C38E 85 00                         STA temp
0C390 C8                            INY
0C391 B1 0C                         LDA (pointer),y
0C393 85 01                         STA temp+1
0C395                               
0C395                               ;; Convert (x,y) to PPU address
0C395                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C395 A5 00                         LDA temp
0C397 29 0F                         AND #%00001111
0C399 4A                            LSR
0C39A 4A                            LSR
0C39B 09 20                         ORA #$20
0C39D 85 02                         STA temp+2
0C39F                               
0C39F                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C39F A5 00                         LDA temp
0C3A1 29 F0                         AND #%11110000
0C3A3 4A                            LSR
0C3A4 4A                            LSR
0C3A5 4A                            LSR
0C3A6 85 03                         STA temp+3
0C3A8                               
0C3A8 A5 00                         LDA temp
0C3AA 29 03                         AND #%00000011
0C3AC AA                            TAX
0C3AD BD 92 C6                      LDA tbl_times64,x
0C3B0 18                            CLC
0C3B1 65 03                         ADC temp+3
0C3B3 18                            CLC
0C3B4 69 C2                         ADC #$C2
0C3B6 85 03                         STA temp+3
0C3B8                               
0C3B8                               ;; Add carry to temp+2
0C3B8 A5 02                         LDA temp+2
0C3BA 69 00                         ADC #$00
0C3BC 85 02                         STA temp+2
0C3BE                           
0C3BE                               ;; Convert tile data to loop count and tile type
0C3BE                               ;; temp+4 = color
0C3BE A5 01                         LDA temp+1
0C3C0 29 07                         AND #%00000111
0C3C2                               
0C3C2                               ;; If color = 7, this is a wall
0C3C2 C9 07                         CMP #%00000111
0C3C4 F0 14                         BEQ +wallHack
0C3C6 85 04                             STA temp+4
0C3C8                                   
0C3C8                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C3C8 29 01                             AND #%00000001
0C3CA F0 02                             BEQ +
0C3CC A9 05                                 LDA #$05
0C3CE                                   +
0C3CE 85 07                             STA temp+7
0C3D0                                
0C3D0                                   ;; temp+5 = tile type
0C3D0 A5 01                             LDA temp+1
0C3D2 4A                                LSR
0C3D3 4A                                LSR
0C3D4 4A                                LSR
0C3D5 29 03                             AND #%00000011
0C3D7 4C E2 C3                          JMP +setTileType
0C3DA                               +wallHack:
0C3DA                               
0C3DA                               ;; It's a wall! Set color and CHR offset to 0, and tile type to 4.
0C3DA A9 00                         LDA #$00
0C3DC 85 04                         STA temp+4
0C3DE 85 07                         STA temp+7
0C3E0 A9 04                         LDA #$04
0C3E2                           
0C3E2                           +setTileType:    
0C3E2 85 05                         STA temp+5
0C3E4                               
0C3E4                               ;; X = tile offset
0C3E4 18                            CLC
0C3E5 65 07                         ADC temp+7
0C3E7 AA                            TAX
0C3E8                               
0C3E8                               ;; temp+6 = number of tiles
0C3E8 A5 01                         LDA temp+1
0C3EA 29 60                         AND #%01100000
0C3EC 4A                            LSR
0C3ED 4A                            LSR
0C3EE 4A                            LSR
0C3EF 4A                            LSR
0C3F0 4A                            LSR
0C3F1 85 06                         STA temp+6
0C3F3                               
0C3F3                               ;; Set up loop
0C3F3 98                            TYA
0C3F4 48                            PHA
0C3F5 A4 06                         LDY temp+6
0C3F7                           
0C3F7                               -drawTileLoop:
0C3F7                                   ;; Write PPU address
0C3F7 2C 02 20                          BIT PPU_STATUS
0C3FA A5 02                             LDA temp+2
0C3FC 8D 06 20                          STA PPU_ADDR
0C3FF A5 03                             LDA temp+3
0C401 8D 06 20                          STA PPU_ADDR
0C404                                   
0C404                                   ;; Write first and second tile
0C404 BD 96 C6                          LDA tbl_gametile_top_left,x
0C407 8D 07 20                          STA PPU_DATA
0C40A BD A0 C6                          LDA tbl_gametile_top_right,x
0C40D 8D 07 20                          STA PPU_DATA
0C410                                   
0C410                                   ;; Update PPU address
0C410 2C 02 20                          BIT PPU_STATUS
0C413 A5 02                             LDA temp+2
0C415 8D 06 20                          STA PPU_ADDR
0C418 A5 03                             LDA temp+3
0C41A 69 20                             ADC #$20
0C41C 8D 06 20                          STA PPU_ADDR
0C41F                                   
0C41F                                   ;; Write third and fourth tile
0C41F BD AA C6                          LDA tbl_gametile_bottom_left,x
0C422 8D 07 20                          STA PPU_DATA
0C425 BD B4 C6                          LDA tbl_gametile_bottom_right,x
0C428 8D 07 20                          STA PPU_DATA
0C42B                                   
0C42B                                   ;;
0C42B                                   ;; @TODO: draw shades
0C42B                                   ;;
0C42B                                   
0C42B                                   ;; Draw next metatile in this loop (if any left)
0C42B 88                                DEY
0C42C 30 1E                             BMI +doneDrawingRowColumn
0C42E                                   
0C42E                                   ;; Is it a row or a column?
0C42E A5 01                             LDA temp+1
0C430 10 10                             BPL +
0C432                                       ;; It is a column: move pointer down (+$40)
0C432 A5 03                                 LDA temp+3
0C434 18                                    CLC
0C435 69 40                                 ADC #$40
0C437 85 03                                 STA temp+3
0C439 A5 02                                 LDA temp+2
0C43B 69 00                                 ADC #$00
0C43D 85 02                                 STA temp+2
0C43F 4C 49 C4                              JMP +drawNextTile
0C442                                   +
0C442                                   
0C442                                   ;; It is a column: move pointer right (+$02)
0C442 A5 03                             LDA temp+3
0C444 18                                CLC
0C445 69 02                             ADC #$02
0C447 85 03                             STA temp+3
0C449                                   
0C449                               
0C449                               ;; Next tile in the row/column
0C449                                   +drawNextTile:
0C449 4C F7 C3                      JMP -drawTileLoop
0C44C                           
0C44C                               ;; Go to the next set of tiles
0C44C                           +doneDrawingRowColumn:
0C44C 68                            PLA
0C44D A8                            TAY
0C44E C8                            INY
0C44F 4C 85 C3                      JMP -drawRowColumnLoop
0C452                           
0C452                           ;; Level loading is done
0C452                           +doneLevelLoad:
0C452                           
0C452                               ;;
0C452                               ;; @TODO: draw hud and game bounds
0C452                               ;;
0C452                           
0C452 60                            RTS
0C453                           
0C453                           .include "game/subroutine/LoadIntroScreen.asm"
0C453                           sub_LoadIntroScreen:
0C453                           
0C453                               ;; Load intro palette
0C453 2C 02 20                      BIT PPU_STATUS
0C456 A9 3F                         LDA #$3F
0C458 8D 06 20                      STA PPU_ADDR
0C45B A9 00                         LDA #$00
0C45D 8D 06 20                      STA PPU_ADDR
0C460 A2 00                         LDX #$00
0C462                               -
0C462 BD 09 C5                          LDA tbl_IntroScreenPalette,x
0C465 8D 07 20                          STA PPU_DATA
0C468 E8                                INX
0C469 E0 20                             CPX #$20
0C46B D0 F5                         BNE -
0C46D                               
0C46D                               ;; Put ball in the middle
0C46D A9 7C                         LDA #$7C
0C46F 85 17                         STA ball_xpos_hi
0C471 85 19                         STA ball_ypos_hi
0C473                           
0C473                               ;; Clear the screen
0C473 20 A1 C2                      JSR sub_ClearScreen
0C476                           
0C476                               ;; Set up intro screen draw loop
0C476 A2 00                         LDX #$00
0C478                           
0C478                           -loop_IntroScreenData:
0C478                           
0C478                               ;; Get current byte from intro screen data
0C478 BD 31 C5                      LDA tbl_IntroScreenData,x
0C47B                           
0C47B                               ;; If current byte is #$3F, we're done drawing.
0C47B C9 3F                         CMP #$3F
0C47D D0 03                         BNE +
0C47F 4C CC C4                          JMP +goToEndIntroScreen
0C482                               +
0C482                           
0C482                               ;; If highest bits are %11, draw a plain tile
0C482 29 C0                         AND #%11000000
0C484 D0 03                         BNE +
0C486 4C AC C4                          JMP +drawTile
0C489                               +
0C489                               
0C489                               ;; If highest bits are %01, set the PPU address
0C489                               ;; If not, draw two logo tiles
0C489 C9 40                         CMP #%01000000
0C48B D0 03                         BNE +drawLogo
0C48D 4C B6 C4                          JMP +setPpuAddr
0C490                           
0C490                           +drawLogo:
0C490                               ;; Get bits 0-2 and store in a temp variable
0C490 BD 31 C5                      LDA tbl_IntroScreenData,x
0C493 29 07                         AND #%00000111
0C495 85 00                         STA temp
0C497                               
0C497                               ;; Get bits 3-5, shift over to get a value from 0-7
0C497 BD 31 C5                      LDA tbl_IntroScreenData,x
0C49A 4A                            LSR
0C49B 4A                            LSR
0C49C 4A                            LSR
0C49D 29 07                         AND #%00000111
0C49F                               
0C49F                               ;; Draw the tile that corresponds with that value
0C49F A8                            TAY
0C4A0 20 5E C3                      JSR sub_drawIntroScreenLogoTile
0C4A3                               
0C4A3                               ;; Do the same for the value stored in temp
0C4A3 A4 00                         LDY temp
0C4A5 20 5E C3                      JSR sub_drawIntroScreenLogoTile
0C4A8                           
0C4A8                               ;; Next byte please
0C4A8 E8                            INX
0C4A9 4C 78 C4                      JMP -loop_IntroScreenData
0C4AC                           
0C4AC                           +drawTile:
0C4AC                               ;; Just draw the tile value on screen
0C4AC BD 31 C5                      LDA tbl_IntroScreenData,x
0C4AF 8D 07 20                      STA PPU_DATA
0C4B2                               
0C4B2                               ;; Next byte please
0C4B2 E8                            INX
0C4B3 4C 78 C4                      JMP -loop_IntroScreenData
0C4B6                           
0C4B6                           
0C4B6                           +setPpuAddr:
0C4B6                               ;; Reset the PPU latch
0C4B6 2C 02 20                      BIT PPU_STATUS
0C4B9                               
0C4B9                               ;; Sanitize and write the high byte of the PPU address
0C4B9 BD 31 C5                      LDA tbl_IntroScreenData,x
0C4BC 29 3F                         AND #%00111111
0C4BE 8D 06 20                      STA PPU_ADDR
0C4C1                           
0C4C1                               ;; Write the low byte of the PPU address
0C4C1 E8                            INX
0C4C2 BD 31 C5                      LDA tbl_IntroScreenData,x
0C4C5 8D 06 20                      STA PPU_ADDR
0C4C8                               
0C4C8                               ;; PPU has been set up to draw tiles at the correct spot now.
0C4C8                               
0C4C8                               ;; Next byte please.
0C4C8 E8                            INX
0C4C9 4C 78 C4                      JMP -loop_IntroScreenData
0C4CC                           
0C4CC                           +goToEndIntroScreen:
0C4CC                           
0C4CC                               ;; To color the 1.LEVEL: line green, we need to update two
0C4CC                               ;; values in the PPU attribute data.
0C4CC 2C 02 20                      BIT PPU_STATUS
0C4CF A9 23                         LDA #$23
0C4D1 8D 06 20                      STA PPU_ADDR
0C4D4 A9 CB                         LDA #$CB
0C4D6 8D 06 20                      STA PPU_ADDR
0C4D9 A9 0A                         LDA #%00001010
0C4DB 8D 07 20                      STA PPU_DATA
0C4DE 8D 07 20                      STA PPU_DATA
0C4E1                           
0C4E1 60                            RTS
0C4E2                           
0C4E2                           .include "game/subroutine/LoadWinScreen.asm"
0C4E2                           sub_LoadWinScreen:
0C4E2 60                            RTS
0C4E3                           
0C4E3                           .include "game/subroutine/WriteByteToPPU.asm"
0C4E3                           sub_WriteByteToPPUBuffer:
0C4E3                           
0C4E3                               ;; Prevent updating until full 3-byte buffer is filled,
0C4E3                               ;; so that graphics won't glitch out if NMI happens during
0C4E3                               ;; updating the buffer
0C4E3 A9 00                         LDA #$00
0C4E5 85 29                         STA ppu_buffer_update
0C4E7                           
0C4E7                               ;; Check if buffer full; if so, wait a frame and force update
0C4E7 A4 2A                         LDY ppu_buffer_pointer
0C4E9 C0 30                         CPY #$30
0C4EB D0 05                         BNE +
0C4ED E6 29                             INC ppu_buffer_update
0C4EF 20 9B C2                          JSR sub_WaitForVBlank
0C4F2                               +
0C4F2                           
0C4F2                               ;; Add ppu_addr high byte to buffer
0C4F2 A5 00                         LDA temp
0C4F4 99 00 03                      STA ppu_buffer,y
0C4F7                           
0C4F7                               ;; Add ppu_addr low byte to buffer
0C4F7 C8                            INY
0C4F8 A5 01                         LDA temp+1
0C4FA 99 00 03                      STA ppu_buffer,y
0C4FD                           
0C4FD                               ;; Add ppu_data to buffer
0C4FD C8                            INY
0C4FE A5 02                         LDA temp+2
0C500 99 00 03                      STA ppu_buffer,y
0C503                           
0C503                               ;; Update buffer pointer
0C503 C8                            INY
0C504 84 2A                         STY ppu_buffer_pointer
0C506                           
0C506                               ;; Tell NMI to update next round
0C506 E6 29                         INC ppu_buffer_update
0C508                           
0C508                               ;; Return
0C508 60                            RTS0C509                           
0C509                           
0C509                           ;; LUTs
0C509                           .include "game/include/tables.asm"
0C509                           
0C509                           ;; Intro screen palette
0C509                           tbl_IntroScreenPalette:
0C509 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C50D 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C511 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C515 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C519                           
0C519 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C51D 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C521 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C525 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C529                           
0C529                           
0C529                           ;; Intro: mapping logo index to chr tile
0C529                           tbl_IntroScreenLogoChr:
0C529 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C531                           
0C531                           
0C531                           ;; Intro screen data
0C531                           tbl_IntroScreenData:
0C531                           
0C531                               ;; Set PPU address $20AC
0C531 60 AC                         .db #$60, #$AC
0C533                               
0C533                               ;; Draw
0C533 02 26 16 0F 20 0F 16 27       .db #$02, #$26, #$16, #$0F, #$20, #$0F, #$16, #$27 ; 1.LEVEL:
0C53B                           
0C53B                               ;; Set PPU address $20CF
0C53B 60 CF                         .db #$60, #$CF
0C53D                               
0C53D                               ;; Draw
0C53D 01 02                         .db #$01, #$02                                     ; 01
0C53F                               
0C53F                               ;; Set PPU address $2122
0C53F 61 22                         .db #$61, #$22
0C541                               
0C541                               ;; Draw
0C541 0E 0F 1D 13 11 18 25          .db #$0E, #$0F, #$1D, #$13, #$11, #$18, #$25       ; DESIGN,
0C548 1D 19 1F 18 0E 25             .db #$1D, #$19, #$1F, #$18, #$0E, #$25             ; SOUND,
0C54E 11 1C 0B 1A 12 13 0D 1D       .db #$11, #$1C, #$0B, #$1A, #$12, #$13, #$0D, #$1D ; GRAPHICS
0C556 00 0B 18 0E 00                .db #$00, #$0B, #$18, #$0E, #$00                   ; _AND_
0C55B                               
0C55B                               ;; Set PPU address $2147
0C55B 61 47                         .db #$61, #$47
0C55D                               
0C55D                               ;; Draw
0C55D 1A 1C 19 11 1C 0B 17          .db #$1A, #$1C, #$19, #$11, #$1C, #$0B, #$17       ; PROGRAM
0C564 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C568 19 16 13 20 0F 1C             .db #$19, #$16, #$13, #$20, #$0F, #$1C             ; OLIVER
0C56E 00 15 13 1C 21 0B             .db #$00, #$15, #$13, #$1C, #$21, #$0B             ; _KIRWA
0C574                               
0C574                               ;; Set PPU address $218B
0C574 61 8B                         .db #$61, #$8B
0C576                               
0C576                               ;; Draw
0C576 28 00 02 0A 09 08             .db #$28, #$00, #$02, #$0A, #$09, #$08             ; C_1987
0C57C 25 02 0A 09 09                .db #$25, #$02, #$0A, #$09, #$09                   ; ,1988
0C581                               
0C581                               ;; Set PPU address $21E6
0C581 61 E6                         .db #$61, #$E6
0C583                               
0C583                               ;; Draw
0C583 18 0F 1D 00 1A 19 1C 1E       .db #$18, #$0F, #$1D, #$00, #$1A, #$19, #$1C, #$1E ; NES_PORT
0C58B 00 0C 23 00                   .db #$00, #$0C, #$23, #$00                         ; _BY_
0C58F 15 0F 20 13 18 09 02          .db #$15, #$0F, #$20, #$13, #$18, #$09, #$02       ; KEVIN81
0C596                               
0C596                               ;; Set PPU address $222D
0C596 62 2D                         .db #$62, #$2D
0C598                               
0C598                               ;; Draw
0C598 28 00 03 01 03 04             .db #$28, #$00, #$03, #$01, #$03, #$04             ; C_2023
0C59E                               
0C59E                               ;; Set PPU address $2281
0C59E 62 81                         .db #$62, #$81
0C5A0                               
0C5A0                               ;; Draw the Crillion logo
0C5A0 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C5A4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C5A8 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C5AC E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C5B0                               
0C5B0 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C5B4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C5B8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C5BC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C5C0                               
0C5C0 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C5C4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C5C8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C5CC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C5D0                           
0C5D0 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C5D4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C5D8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C5DC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C5E0                               
0C5E0 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C5E4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C5E8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C5EC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C5F0                           
0C5F0 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C5F4 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C5F8 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C5FC F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C5FF                           
0C5FF                               ;; End of intro
0C5FF 3F                            .db #$3F
0C600                           
0C600                           
0C600                           ;; test animation table
0C600                           .include "game/test/show_animation_table.asm"
0C600                           ;; CHR tile-id's per slide of explosion
0C600                           explosion_slide0:
0C600 00 00 00                      .db #$00, #$00, #$00
0C603 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C606 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C609                           
0C609                           explosion_slide1:
0C609 00 00 00                      .db #$00, #$00, #$00
0C60C 29 2A 2B                      .db #$29, #$2A, #$2B
0C60F 39 3A 3B                      .db #$39, #$3A, #$3B
0C612                           
0C612                           explosion_slide2:
0C612 16 00 00                      .db #$16, #$00, #$00
0C615 26 27 28                      .db #$26, #$27, #$28
0C618 36 37 38                      .db #$36, #$37, #$38
0C61B                           
0C61B                           explosion_slide3:
0C61B 00 14 15                      .db #$00, #$14, #$15
0C61E 23 24 25                      .db #$23, #$24, #$25
0C621 33 34 35                      .db #$33, #$34, #$35
0C624                           
0C624                           explosion_slide4:
0C624 10 11 12                      .db #$10, #$11, #$12
0C627 20 21 22                      .db #$20, #$21, #$22
0C62A 30 31 32                      .db #$30, #$31, #$32
0C62D                           
0C62D                           ;; High and low bytes of animation slides
0C62D                           explosion_anim_hi:
0C62D C6                            .db >#explosion_slide0
0C62E C6                            .db >#explosion_slide1
0C62F C6                            .db >#explosion_slide2
0C630 C6                            .db >#explosion_slide3
0C631 C6                            .db >#explosion_slide4
0C632 C6                            .db >#explosion_slide4
0C633 C6                            .db >#explosion_slide3
0C634 C6                            .db >#explosion_slide2
0C635 C6                            .db >#explosion_slide1
0C636 C6                            .db >#explosion_slide0
0C637                           
0C637                           explosion_anim_lo:
0C637 00                            .db <#explosion_slide0
0C638 09                            .db <#explosion_slide1
0C639 12                            .db <#explosion_slide2
0C63A 1B                            .db <#explosion_slide3
0C63B 24                            .db <#explosion_slide4
0C63C 24                            .db <#explosion_slide4
0C63D 1B                            .db <#explosion_slide3
0C63E 12                            .db <#explosion_slide2
0C63F 09                            .db <#explosion_slide1
0C640 00                            .db <#explosion_slide0
0C641                           
0C641                           
0C641                           
0C641                           ;; Ball palette color cycle
0C641                           tbl_BallColorDark:
0C641 12 14 16 27 28 19             .db #$12, #$14, #$16, #$27, #$28, #$19
0C647                            
0C647                           tbl_BallColorLight:
0C647 2C 24 25 37 20 2B             .db #$2C, #$24, #$25, #$37, #$20, #$2B
0C64D                           
0C64D                               
0C64D                           ;; Screen mode drawing routine addresses
0C64D                           tbl_LoadScreenHi:
0C64D C4 C3 C4                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C650                           
0C650                           tbl_LoadScreenLo:
0C650 53 74 E2                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C653                           
0C653                           
0C653                           ;; Test level data
0C653                           .include "game/test/level_data.asm"
0C653                           lvl_layout_1:
0C653 FF                            .db #LEVEL_END
0C654                           
0C654                           lvl_layout_2:
0C654 FF                            .db #LEVEL_END
0C655                           
0C655                           lvl_layout_3:
0C655                               ; one row of death blocks
0C655 00 78 40 78 80 78 C0 38       .db #$00, #%01111000, #$40, #%01111000, #$80, #%01111000, #$C0, #%00111000
0C65D                           
0C65D                               ; four sets of color blocks at the 2nd grid column
0C65D 10 A0 13 E0 16 C0 19 00       .db #$10, #%10100000, #$13, #%11100000, #$16, #%11000000, #$19, #%00000000
0C665                           
0C665                               ; three sets of color blocks at the 4th grid column
0C665 30 C0 34 C0 38 A0             .db #$30, #%11000000, #$34, #%11000000, #$38, #%10100000
0C66B                           
0C66B                               ; also for grid columns 6, 8, 10, 12 and 14
0C66B 50 E0 55 00 57 C0             .db #$50, #%11100000, #$55, #%00000000, #$57, #%11000000
0C671 70 E0 74 00 76 E0             .db #$70, #%11100000, #$74, #%00000000, #$76, #%11100000
0C677 90 E0 95 00 97 C0             .db #$90, #%11100000, #$95, #%00000000, #$97, #%11000000
0C67D B0 C0 B4 C0 B8 A0             .db #$B0, #%11000000, #$B4, #%11000000, #$B8, #%10100000
0C683 D0 A0 D3 E0 D6 C0 D9 00       .db #$D0, #%10100000, #$D3, #%11100000, #$D6, #%11000000, #$D9, #%00000000
0C68B                               
0C68B                               ;; end of level
0C68B FF                            .db #LEVEL_END
0C68C                           
0C68C                           
0C68C                           ;; Level layout address pointers
0C68C                           tbl_lvl_layout_hi:
0C68C C6 C6 C6                      .db >#lvl_layout_1, >#lvl_layout_2, >#lvl_layout_3
0C68F                           
0C68F                           tbl_lvl_layout_lo:
0C68F 53 54 55                      .db <#lvl_layout_1, <#lvl_layout_2, <#lvl_layout_3
0C692                           
0C692                           
0C692                           
0C692                           ;; Helper table to multiply values by 64
0C692                           tbl_times64:
0C692 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0C696                           
0C696                           
0C696                           ;; Metatile ID to CHR data mapper
0C696                           tbl_gametile_top_left:
0C696 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0C6A0                           
0C6A0                           tbl_gametile_top_right:
0C6A0 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0C6AA                           
0C6AA                           tbl_gametile_bottom_left:
0C6AA 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0C6B4                           
0C6B4                           tbl_gametile_bottom_right:
0C6B4 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$380C6BE                           
0C6BE                           ;; NMI handler
0C6BE                           NMI:
0C6BE                               .include "interrupt/nmi.asm"
0C6BE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6BE                           ;;
0C6BE                           ;; include/nmi.asm
0C6BE                           ;;
0C6BE                           ;; Non-maskable interrupt script. This script is being executed
0C6BE                           ;; when vBlank hits.
0C6BE                           ;;
0C6BE                           ;;
0C6BE                           
0C6BE                               ;; Preserve accumulator through stack
0C6BE 48                            PHA
0C6BF                           
0C6BF                               ;; Should NMI be skipped?
0C6BF A5 13                         LDA skip_nmi
0C6C1 F0 03                         BEQ +
0C6C3 4C 51 C7                          JMP +skip_nmi
0C6C6                               +
0C6C6                           
0C6C6                               ;; When in NMI, skip additional NMI requests
0C6C6 A9 01                         LDA #$01
0C6C8 85 13                         STA skip_nmi
0C6CA                           
0C6CA                               ;; Preserve X, Y, and PC through stack
0C6CA 8A                            TXA
0C6CB 48                            PHA
0C6CC 98                            TYA
0C6CD 48                            PHA
0C6CE 08                            PHP
0C6CF                               
0C6CF                               ;; Check forced NMI skip
0C6CF A5 14                         LDA force_skip_nmi
0C6D1 F0 03                         BEQ +
0C6D3 4C 42 C7                          JMP +force_skip_nmi
0C6D6                               +
0C6D6                           
0C6D6                               ;; Update PPU mask
0C6D6                               ;LDA #$00
0C6D6                               ;STA PPU_CTRL
0C6D6 A5 12                         LDA soft_ppu_mask
0C6D8 8D 01 20                      STA PPU_MASK
0C6DB                               
0C6DB                               
0C6DB                               ;; Additional PPU updates go here
0C6DB                               .include "game/test/tile_update_nmi.asm"
0C6DB                           
0C6DB                               ;; Check if ppu_buffer needs updating
0C6DB A5 29                         LDA ppu_buffer_update
0C6DD D0 03                         BNE +
0C6DF 4C 21 C7                          JMP +no_ppu_buffer_update
0C6E2                               +
0C6E2                           
0C6E2                               ;; Reset ppu control register and mask
0C6E2 A2 00                         LDX #$00
0C6E4 8E 00 20                      STX PPU_CTRL
0C6E7 8E 01 20                      STX PPU_MASK
0C6EA                           
0C6EA                               ;; Set up loop
0C6EA                               -
0C6EA                                   ;; Reset hi/lo latch
0C6EA 2C 02 20                          BIT PPU_STATUS
0C6ED                           
0C6ED                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0C6ED BD 00 03                          LDA ppu_buffer,x
0C6F0 8D 06 20                          STA PPU_ADDR
0C6F3 E8                                INX
0C6F4 BD 00 03                          LDA ppu_buffer,x
0C6F7 8D 06 20                          STA PPU_ADDR
0C6FA                           
0C6FA                                   ;; Write ppu_buffer data to PPU_ADDR
0C6FA E8                                INX
0C6FB BD 00 03                          LDA ppu_buffer,x
0C6FE 8D 07 20                          STA PPU_DATA
0C701                           
0C701                                   ;; Check if updating is done (eg. X is at pointer)
0C701 E8                                INX
0C702 E4 2A                             CPX ppu_buffer_pointer
0C704 F0 03                             BEQ +
0C706 4C EA C6                      JMP -
0C709                           +
0C709                           
0C709                               ;; Reset ppu buffer update and pointer
0C709 A9 00                         LDA #$00
0C70B 85 29                         STA ppu_buffer_update
0C70D 85 2A                         STA ppu_buffer_pointer
0C70F                               
0C70F                               ;; Reset scrolling position
0C70F 8D 05 20                      STA PPU_SCROLL
0C712 8D 05 20                      STA PPU_SCROLL
0C715                           
0C715                               ;; Restore ppu control register and mask
0C715 A9 90                         LDA #%10010000
0C717 8D 00 20                      STA PPU_CTRL
0C71A A5 12                         LDA soft_ppu_mask
0C71C 8D 01 20                      STA PPU_MASK
0C71F A9 00                         LDA #$00
0C721                           
0C721                           ;; Continue other NMI stuff
0C721                           +no_ppu_buffer_update:
0C721                               .include "game/test/show_animation_nmi.asm"
0C721                               ;; Reset sprite RAM, draw sprites
0C721 8D 03 20                      STA OAM_ADDR
0C724 A9 02                         LDA #$02
0C726 8D 14 40                      STA OAM_DMA
0C729                           
0C729 A0 04                         LDY #MAX_ANIMATIONS
0C72B A2 00                         LDX #$00
0C72D                               -
0C72D BD 30 03                          LDA explosion_framecounter,x
0C730 F0 03                             BEQ +
0C732 DE 30 03                              DEC explosion_framecounter,x
0C735                                   +
0C735 E8                                INX
0C736 88                                DEY
0C737 F0 03                             BEQ +done        
0C739 4C 2D C7                      JMP -
0C73C                           +done:
0C73C                               
0C73C A5 2D                         LDA nudge_counter
0C73E F0 02                         BEQ +
0C740 C6 2D                             DEC nudge_counter
0C742                               +
0C742                           
0C742                           ;; This is what happens when we forced nmi skip
0C742                           +force_skip_nmi:
0C742                           
0C742                               ;; Increase frame counters
0C742 E6 15                         INC frame_counter
0C744                           
0C744                               ;; reset ball_update_position
0C744 A9 00                         LDA #$00
0C746 85 25                         STA ball_update_position
0C748                           
0C748                               ;; Don't skip next NMI request
0C748 A9 00                         LDA #$00
0C74A 85 13                         STA skip_nmi
0C74C                           
0C74C                               ;; Restore X, Y and PC from stack
0C74C 28                            PLP
0C74D 68                            PLA
0C74E A8                            TAY
0C74F 68                            PLA
0C750 AA                            TAX
0C751                           
0C751                           +skip_nmi:
0C751                               ;; Restore accumulator from stack
0C751 68                            PLA
0C752                           
0C752                               ;; Return
0C752 40                            RTI
0C753                           
0C753                           ;; IRQ handler (empty)
0C753                           IRQ:
0C753                               .include "interrupt/irq.asm"
0C753 40                            RTI0C754                           
0C754                           ;; Interrupt vectors
0C754 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA BE C6                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 53 C7                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
