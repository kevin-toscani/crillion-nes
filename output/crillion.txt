	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$05
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU Noise registers
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           ball_update_position   .dsb 1
00036                           
00036                           
00036                           ;; Ball flags
00036                           ;; #% c c c v . f n a
00036                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00036                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00036                           ;;    | | | | | +------ ball is frozen (not moving)
00036                           ;;    | | | | +-------- (unused for now)
00036                           ;;    | | | +---------- ball moves up (0) or down (1)
00036                           ;;    +-+-+------------ ball color (1-6)
00036                           ball_flags             .dsb 1
00037                           
00037                           
00037                           ;; Screen mode
00037                           ;; #% u . . . . . t t
00037                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00037                           ;;    | +-+-+-+-+------------- unused
00037                           ;;    +----------------------- should the screen update
00037                           screen_mode            .dsb 1
00038                           
00038                           
00038                           
00038                           ;; PPU buffer variables
00038                           ppu_buffer_update      .dsb 1
00039                           ppu_buffer_pointer     .dsb 1
0003A                           
0003A                           ;; Pointer to keep track of the number of explosions
0003A                           explosion_pointer      .dsb 1
0003B                           
0003B                           ;; Sprite RAM pointer to keep track of sprites to update
0003B                           sprite_ram_pointer     .dsb 1
0003C                           
0003C                           ;; Nudge counter
0003C                           nudge_counter          .dsb 1
0003D                           
0003D                           ;; Current level (doubles as level select variable)
0003D                           current_level          .dsb 1
0003E                           
0003E                           ;; Tile type the ball is currently colliding with
0003E                           colliding_tile         .dsb 1
0003F                           
0003F                           ;; Background noise variables
0003F                           max_noise              .dsb 1
00040                           sweep_noise            .dsb 1
00041                           current_noise          .dsb 1
00042                           noise_counter          .dsb 1
00043                               00043                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 EB C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 EB C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 37                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 3D                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3B                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 D7 C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 37                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 37                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 58 CD                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 55 CD                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 12 C5                      JSR sub_DisableRendering
0C08A 20 B0 C7                      JSR sub_JumpToPointer
0C08D 20 26 C5                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 37                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 37                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 37                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C C7 C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3B                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C A8 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 36                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 2B                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 85 1C                         STA ball_ypos_lo_prev
0C0C8 18                            CLC
0C0C9 69 F0                         ADC #BALL_SPEED_LO
0C0CB 85 1A                         STA ball_ypos_lo
0C0CD                           
0C0CD                               ;; update the high byte with carry
0C0CD A5 19                         LDA ball_ypos_hi
0C0CF 85 1B                         STA ball_ypos_hi_prev
0C0D1 69 01                         ADC #BALL_SPEED_HI
0C0D3 85 19                         STA ball_ypos_hi
0C0D5                               
0C0D5                               ;; Check bottom bound
0C0D5 C9 C8                         CMP #BOUND_BOTTOM
0C0D7 90 3C                         BCC +checkHorizontalMovement
0C0D9 F0 3A                         BEQ +checkHorizontalMovement
0C0DB                           
0C0DB                           
0C0DB                               ;; Change ball direction to "up"
0C0DB A9 C8                         LDA #BOUND_BOTTOM
0C0DD 38                            SEC
0C0DE E9 01                         SBC #$01
0C0E0 85 19                         STA ball_ypos_hi
0C0E2 A9 00                         LDA #$00
0C0E4 85 1A                         STA ball_ypos_lo
0C0E6 A5 36                         LDA ball_flags
0C0E8 29 EF                         AND #MOVE_BALL_UP
0C0EA 85 36                         STA ball_flags
0C0EC 4C 15 C1                      JMP +checkHorizontalMovement
0C0EF                           
0C0EF                           
0C0EF                           +moveBallUp:
0C0EF                               ;; update the low byte
0C0EF A5 1A                         LDA ball_ypos_lo
0C0F1 85 1C                         STA ball_ypos_lo_prev
0C0F3 38                            SEC
0C0F4 E9 F0                         SBC #BALL_SPEED_LO
0C0F6 85 1A                         STA ball_ypos_lo
0C0F8                           
0C0F8                               ;; update the high byte with carry
0C0F8 A5 19                         LDA ball_ypos_hi
0C0FA 85 1B                         STA ball_ypos_hi_prev
0C0FC E9 01                         SBC #BALL_SPEED_HI
0C0FE 85 19                         STA ball_ypos_hi
0C100                               
0C100                               ;; Check top bound
0C100 C9 30                         CMP #BOUND_TOP
0C102 B0 11                         BCS +checkHorizontalMovement
0C104                           
0C104                               ;; Change ball direction to "down"
0C104 A9 30                         LDA #BOUND_TOP
0C106 18                            CLC
0C107 69 01                         ADC #$01
0C109 85 19                         STA ball_ypos_hi
0C10B A9 00                         LDA #$00
0C10D 85 1A                         STA ball_ypos_lo
0C10F A5 36                         LDA ball_flags
0C111 09 10                         ORA #MOVE_BALL_DOWN
0C113 85 36                         STA ball_flags
0C115                           
0C115                           
0C115                           +checkHorizontalMovement:
0C115                           
0C115                               ;; Check if ball is being nudged
0C115 A5 3C                         LDA nudge_counter
0C117 D0 41                         BNE +doneBallMovement
0C119                           
0C119                               ;; Check if left button is held
0C119 A5 0F                         LDA buttons_held
0C11B 29 02                         AND #BUTTON_LEFT
0C11D F0 1B                         BEQ +
0C11F                                   ;; update the low byte
0C11F A5 18                             LDA ball_xpos_lo
0C121 38                                SEC
0C122 E9 F0                             SBC #BALL_SPEED_LO
0C124 85 18                             STA ball_xpos_lo
0C126                           
0C126                                   ;; update the high byte
0C126 A5 17                             LDA ball_xpos_hi
0C128 E9 01                             SBC #BALL_SPEED_HI
0C12A 85 17                             STA ball_xpos_hi
0C12C                                   
0C12C                                   ;; Check left bound
0C12C C9 10                             CMP #BOUND_LEFT
0C12E B0 2A                             BCS +doneBallMovement
0C130                                   
0C130                                   ;; Set flag to nudge right and set nudge counter
0C130 A5 36                             LDA ball_flags
0C132 09 02                             ORA #NUDGE_BALL_RIGHT
0C134 20 A9 C7                          JSR sub_InitiateNudge
0C137                           
0C137 4C 5A C1                          JMP +doneBallMovement        
0C13A                               +
0C13A                           
0C13A                               ;; Check if right button is held
0C13A A5 0F                         LDA buttons_held
0C13C 29 01                         AND #BUTTON_RIGHT
0C13E F0 1A                         BEQ +
0C140                                   ;; update the low byte
0C140 A5 18                             LDA ball_xpos_lo
0C142 18                                CLC
0C143 69 F0                             ADC #BALL_SPEED_LO
0C145 85 18                             STA ball_xpos_lo
0C147                           
0C147                                   ;; update the high byte
0C147 A5 17                             LDA ball_xpos_hi
0C149 69 01                             ADC #BALL_SPEED_HI
0C14B 85 17                             STA ball_xpos_hi     
0C14D                           
0C14D                                  ;; Check right bound
0C14D C9 E8                             CMP #BOUND_RIGHT
0C14F 90 09                             BCC +doneBallMovement
0C151 F0 07                             BEQ +doneBallMovement
0C153                                   
0C153                                   ;; Set flag to nudge left and set nudge timer
0C153 A5 36                             LDA ball_flags
0C155 29 FD                             AND #NUDGE_BALL_LEFT
0C157 20 A9 C7                          JSR sub_InitiateNudge
0C15A                               +
0C15A                           
0C15A                           
0C15A                           +doneBallMovement:
0C15A                           
0C15A                               ;; Check nudge
0C15A A5 3C                         LDA nudge_counter
0C15C F0 23                         BEQ +doneBallNudging
0C15E A5 36                             LDA ball_flags
0C160 29 02                             AND #NUDGE_BALL_RIGHT
0C162 F0 10                             BEQ +nudgeBallLeft
0C164                                   
0C164                                       ;; update the low byte
0C164 A5 18                                 LDA ball_xpos_lo
0C166 18                                    CLC
0C167 69 F0                                 ADC #BALL_SPEED_LO
0C169 85 18                                 STA ball_xpos_lo
0C16B                           
0C16B                                       ;; update the high byte
0C16B A5 17                                 LDA ball_xpos_hi
0C16D 69 01                                 ADC #BALL_SPEED_HI
0C16F 85 17                                 STA ball_xpos_hi  
0C171 4C 81 C1                              JMP +doneBallNudging
0C174                                   +nudgeBallLeft:
0C174                                   
0C174                                   ;; update the low byte
0C174 A5 18                             LDA ball_xpos_lo
0C176 38                                SEC
0C177 E9 F0                             SBC #BALL_SPEED_LO
0C179 85 18                             STA ball_xpos_lo
0C17B                           
0C17B                                   ;; update the high byte
0C17B A5 17                             LDA ball_xpos_hi
0C17D E9 01                             SBC #BALL_SPEED_HI
0C17F 85 17                             STA ball_xpos_hi
0C181                               +doneBallNudging:
0C181                           
0C181                               ;; Don't update position again until next frame
0C181 E6 35                         INC ball_update_position
0C183                           
0C183                               
0C183                               ;; Do collision detection
0C183                               .include "game/include/main/collision_detection.asm"
0C183                           
0C183                               ;; Get ball's x-left, x-center, x-right position
0C183 A5 17                         LDA ball_xpos_hi
0C185 18                            CLC
0C186 69 F0                         ADC #BALL_LEFT_WGA
0C188 85 2F                         STA ball_left
0C18A 18                            CLC
0C18B 69 04                         ADC #BALL_HALF_SIZE
0C18D 85 30                         STA ball_center
0C18F 18                            CLC
0C190 69 04                         ADC #BALL_HALF_SIZE
0C192 85 31                         STA ball_right
0C194                           
0C194                               ;; Get ball's y-top, y-middle, y-bottom position
0C194 A5 19                         LDA ball_ypos_hi
0C196 18                            CLC
0C197 69 D0                         ADC #BALL_TOP_WGA
0C199 85 32                         STA ball_top
0C19B 18                            CLC
0C19C 69 04                         ADC #BALL_HALF_SIZE
0C19E 85 33                         STA ball_middle
0C1A0 18                            CLC
0C1A1 69 04                         ADC #BALL_HALF_SIZE
0C1A3 85 34                         STA ball_bottom
0C1A5                           
0C1A5                           +checkRightCollision:
0C1A5                               ;; Check if ball moves right
0C1A5                               ;; No need to check nudging here as that will never collide with a tile
0C1A5 A5 0F                         LDA buttons_held
0C1A7 29 01                         AND #BUTTON_RIGHT
0C1A9 F0 1C                         BEQ +checkLeftCollision
0C1AB                           
0C1AB                               ;; Check tile at right position
0C1AB A5 33                         LDA ball_middle
0C1AD 85 00                         STA temp
0C1AF A5 31                         LDA ball_right
0C1B1 85 01                         STA temp+1
0C1B3 20 FA C4                      JSR sub_ConvertXYToTileType
0C1B6 29 01                         AND #TILE_IS_SOLID
0C1B8 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1BA                           
0C1BA                               ;; Tile is solid; nudge ball and evaluate tile type
0C1BA A5 36                         LDA ball_flags
0C1BC 29 FD                         AND #NUDGE_BALL_LEFT
0C1BE 20 A9 C7                      JSR sub_InitiateNudge
0C1C1 20 53 C5                      JSR sub_EvaluateTileType
0C1C4 4C E6 C1                      JMP +checkTopCollision
0C1C7                           
0C1C7                           +checkLeftCollision:
0C1C7                               ;; Check if ball moves right
0C1C7                               ;; No need to check nudging here as that will never collide with a tile
0C1C7 A5 0F                         LDA buttons_held
0C1C9 29 02                         AND #BUTTON_LEFT
0C1CB F0 19                         BEQ +checkTopCollision
0C1CD                           
0C1CD                               ;; Check tile at right position
0C1CD A5 33                         LDA ball_middle
0C1CF 85 00                         STA temp
0C1D1 A5 2F                         LDA ball_left
0C1D3 85 01                         STA temp+1
0C1D5 20 FA C4                      JSR sub_ConvertXYToTileType
0C1D8 29 01                         AND #TILE_IS_SOLID
0C1DA F0 0A                         BEQ +checkTopCollision
0C1DC                           
0C1DC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1DC A5 36                         LDA ball_flags
0C1DE 09 02                         ORA #NUDGE_BALL_RIGHT
0C1E0 20 A9 C7                      JSR sub_InitiateNudge
0C1E3 20 53 C5                      JSR sub_EvaluateTileType
0C1E6                               
0C1E6                               
0C1E6                           +checkTopCollision:
0C1E6                               ;; Check if ball moves up
0C1E6 A5 36                         LDA ball_flags
0C1E8 29 10                         AND #BALL_MOVES_DOWN
0C1EA D0 23                         BNE +checkBottomCollision
0C1EC                           
0C1EC                               ;; Check tile at top position
0C1EC A5 32                         LDA ball_top
0C1EE 85 00                         STA temp
0C1F0 A5 30                         LDA ball_center
0C1F2 85 01                         STA temp+1
0C1F4 20 FA C4                      JSR sub_ConvertXYToTileType
0C1F7 29 01                         AND #TILE_IS_SOLID
0C1F9 F0 34                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1FB                           
0C1FB                               ;; Tile is solid; move ball down and evaluate tile type
0C1FB A5 1C                         LDA ball_ypos_lo_prev
0C1FD 85 1A                         STA ball_ypos_lo
0C1FF A5 1B                         LDA ball_ypos_hi_prev
0C201 85 19                         STA ball_ypos_hi
0C203 A5 36                         LDA ball_flags
0C205 09 10                         ORA #MOVE_BALL_DOWN
0C207 85 36                         STA ball_flags
0C209 20 53 C5                      JSR sub_EvaluateTileType
0C20C 4C 2F C2                      JMP +doneCheckingCollision
0C20F                           
0C20F                           +checkBottomCollision:
0C20F                               ;; No movement check needed: since ball is not moving up, it must move down
0C20F                           
0C20F                               ;; Check tile at bottom position
0C20F A5 34                         LDA ball_bottom
0C211 85 00                         STA temp
0C213 A5 30                         LDA ball_center
0C215 85 01                         STA temp+1
0C217 20 FA C4                      JSR sub_ConvertXYToTileType
0C21A 29 01                         AND #TILE_IS_SOLID
0C21C F0 11                         BEQ +doneCheckingCollision
0C21E                           
0C21E                               ;; Tile is solid; move ball up and evaluate tile type
0C21E A5 1C                         LDA ball_ypos_lo_prev
0C220 85 1A                         STA ball_ypos_lo
0C222 A5 1B                         LDA ball_ypos_hi_prev
0C224 85 19                         STA ball_ypos_hi
0C226 A5 36                         LDA ball_flags
0C228 29 EF                         AND #MOVE_BALL_UP
0C22A 85 36                         STA ball_flags
0C22C 20 53 C5                      JSR sub_EvaluateTileType
0C22F                           
0C22F                           +doneCheckingCollision:
0C22F                           
0C22F                           
0C22F                               ;; Testinging timed PPU scroll concept
0C22F                               .include "game/test/timed_ppuscroll_test.asm"
0C22F                           ;; Timed updates (test)
0C22F                           
0C22F                               ;; If B button is pressed
0C22F A5 10                         LDA buttons_pressed
0C231 29 10                         AND #BUTTON_START
0C233 F0 73                         BEQ +end
0C235                           
0C235                               ;; Disable noise channel
0C235 A9 00                         LDA #$00
0C237 8D 15 40                      STA APU_STATUS
0C23A 8D 0C 40                      STA NOISE_VOLUME
0C23D                               
0C23D                               ;; Set up loop fading
0C23D A9 00                         LDA #$00
0C23F 85 07                         STA temp+7
0C241 A0 08                         LDY #$08
0C243                               -fadeLoop:
0C243 84 08                             STY temp+8
0C245                           
0C245                                   ;; Wait for NMI to pass
0C245 20 EB C3                          JSR sub_WaitForVBlank
0C248                                   
0C248                                   ;; Now wait for No-sprite 0
0C248                                   -
0C248 AD 02 20                              LDA PPU_STATUS
0C24B 29 40                                 AND #SPRITE_0_HIT
0C24D D0 F9                             BNE -
0C24F                               
0C24F                                   ;; Now wait for Sprite 0
0C24F                                   -
0C24F AD 02 20                              LDA PPU_STATUS
0C252 29 40                                 AND #SPRITE_0_HIT
0C254 F0 F9                             BEQ -
0C256                                       
0C256                                   ;; Setup tile row loop
0C256 A0 16                             LDY #22
0C258                                   -tileLoop:
0C258                                   
0C258                                       ;; Disable drawing
0C258 A5 12                                 LDA soft_ppu_mask
0C25A 29 F7                                 AND #%11110111
0C25C 8D 01 20                              STA PPU_MASK
0C25F                                       
0C25F                                       ;; Set up scanline loop
0C25F A2 08                                 LDX #$08
0C261                                       -scanlineLoop:
0C261 E4 08                                     CPX temp+8
0C263 D0 0A                                     BNE +wasteTime
0C265                                           
0C265                                           ;; Restore drawing
0C265 A5 12                                     LDA soft_ppu_mask
0C267 09 08                                     ORA #%00001000
0C269 8D 01 20                                  STA PPU_MASK
0C26C 4C 75 C2                                  JMP +wasteMoreTime
0C26F                           
0C26F                                           ;; Waste 12 frames
0C26F                                           +wasteTime:
0C26F E6 09                                     INC temp+9   ;+5
0C271 C6 09                                     DEC temp+9   ;+5
0C273 49 00                                     EOR #$00     ;+2
0C275                                           
0C275                                           ;; Waste about 100 frames
0C275                                           +wasteMoreTime:
0C275                                           
0C275 86 01                                     STX temp+1     ;  3 down, 97 to go
0C277 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C279                                           -wasteLoop:
0C279 EA                                            NOP
0C27A 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C27C CA                                            DEX        ;  5+5L down,  95-5L to go
0C27D D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C27F                           
0C27F A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C281 CA                                        DEX            ;  9+8L down, 91-8L to go
0C282 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C284                           
0C284 88                                    DEY
0C285 D0 D1                             BNE -tileLoop
0C287                           
0C287 A4 08                             LDY temp+8
0C289                                   
0C289 E6 07                             INC temp+7
0C28B A5 07                             LDA temp+7
0C28D C9 02                             CMP #$02
0C28F D0 B2                             BNE -fadeLoop
0C291                           
0C291 A9 00                             LDA #$00
0C293 85 07                             STA temp+7
0C295 88                                DEY
0C296 D0 AB                         BNE -fadeLoop
0C298                               
0C298                               ;; Load the next level
0C298 E6 3D                         INC current_level
0C29A A5 3D                         LDA current_level
0C29C C9 19                         CMP #25
0C29E D0 04                         BNE +
0C2A0 A9 00                             LDA #$00
0C2A2 85 3D                             STA current_level
0C2A4                               +
0C2A4                               
0C2A4 A9 81                         LDA #LOAD_GAME_SCREEN
0C2A6 85 37                         STA screen_mode
0C2A8                           
0C2A8                           
0C2A8                           +end:
0C2A8                           
0C2A8                           
0C2A8                           +skipBallMovement:
0C2A8                               ;; Add to sprite buffer
0C2A8 A6 3B                         LDX sprite_ram_pointer
0C2AA A5 19                         LDA ball_ypos_hi
0C2AC 9D 00 02                      STA ADDR_SPRITERAM,x
0C2AF E8                            INX
0C2B0 A9 01                         LDA #BALL_TILE_CHR
0C2B2 9D 00 02                      STA ADDR_SPRITERAM,x
0C2B5 E8                            INX
0C2B6 A9 00                         LDA #BALL_ATTR
0C2B8 9D 00 02                      STA ADDR_SPRITERAM,x
0C2BB E8                            INX
0C2BC A5 17                         LDA ball_xpos_hi
0C2BE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2C1 E8                            INX
0C2C2 86 3B                         STX sprite_ram_pointer
0C2C4 4C 13 C3                      JMP +doneScreenLoad
0C2C7                           
0C2C7                           
0C2C7                           +checkNextScreen:
0C2C7                           
0C2C7                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C2C7                               ;; Upon pressing START, the selected level will start
0C2C7                               .include "game/include/main/select_level.asm"
0C2C7 A5 10                         LDA buttons_pressed
0C2C9 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C2CB F0 3C                         BEQ +checkStartPress
0C2CD                           
0C2CD                                   ;; Select next level (1, 5, 9, 13, 17)
0C2CD A5 3D                             LDA current_level
0C2CF 18                                CLC
0C2D0 69 04                             ADC #$04
0C2D2 C9 14                             CMP #$14
0C2D4 D0 02                             BNE +
0C2D6 A9 00                                 LDA #$00
0C2D8                                   +
0C2D8 85 3D                             STA current_level
0C2DA                                   
0C2DA                                   ;; Convert level number to two-byte value
0C2DA A9 00                             LDA #$00
0C2DC 85 03                             STA temp+3
0C2DE A5 3D                             LDA current_level
0C2E0 18                                CLC
0C2E1 69 01                             ADC #$01
0C2E3                           
0C2E3                               -
0C2E3 C9 0A                             CMP #$0A
0C2E5 90 08                             BCC +
0C2E7 E6 03                                 INC temp+3
0C2E9 38                                    SEC
0C2EA E9 0A                                 SBC #$0A
0C2EC 4C E3 C2                              JMP -
0C2EF                                   +
0C2EF                           
0C2EF                                   ;; Add level number to PPU buffer
0C2EF 18                                CLC
0C2F0 69 01                             ADC #$01
0C2F2 85 02                             STA temp+2
0C2F4 A9 20                             LDA #$20
0C2F6 85 00                             STA temp
0C2F8 A9 D0                             LDA #$D0
0C2FA 85 01                             STA temp+1
0C2FC 20 EB CB                          JSR sub_WriteByteToPPUBuffer
0C2FF                                   
0C2FF C6 01                             DEC temp+1
0C301 A4 03                             LDY temp+3
0C303 C8                                INY
0C304 84 02                             STY temp+2
0C306 20 EB CB                          JSR sub_WriteByteToPPUBuffer
0C309                                   
0C309                               +checkStartPress:
0C309                           
0C309                           
0C309                           
0C309                               ;; If START button is pressed
0C309 A5 10                         LDA buttons_pressed
0C30B 29 10                         AND #BUTTON_START
0C30D F0 04                         BEQ +
0C30F                                   ;; Start the level
0C30F A9 81                             LDA #LOAD_GAME_SCREEN
0C311 85 37                             STA screen_mode
0C313                               +
0C313                           
0C313                           
0C313                           
0C313                           +doneScreenLoad:
0C313                           
0C313                               ;; Load animations (if any)
0C313                               .include "game/include/main/load_animations.asm"
0C313                               ;; Set up loop
0C313 A2 00                         LDX #$00
0C315                               -loop_load_animation:
0C315                                   ;; Check if current animation is active. If not, goto next
0C315 BD 44 03                          LDA explosion_active,x
0C318 D0 03                             BNE +
0C31A 4C B4 C3                              JMP +next
0C31D                                   +
0C31D                           
0C31D                                   ;; Check the explosion framecounter
0C31D BD 30 03                          LDA explosion_framecounter,x
0C320 D0 26                             BNE +
0C322                                       ;; Framecounter is 0
0C322                                       ;; Reset to animation speed
0C322 A9 04                                 LDA #ANIMATION_SPEED
0C324 9D 30 03                              STA explosion_framecounter,x
0C327                           
0C327                                       ;; Set next animation frame, and check if we're done yet
0C327 FE 34 03                              INC explosion_currentframe,x
0C32A BD 34 03                              LDA explosion_currentframe,x
0C32D C9 0A                                 CMP #ANIM_SLIDES
0C32F D0 17                                 BNE +
0C331                           
0C331                                       ;; If we're done, inactivate current explosion, clean
0C331                                       ;; up sprite RAM and go to the next one
0C331 A9 00                                 LDA #$00
0C333 9D 44 03                              STA explosion_active,x
0C336                                       
0C336 A9 09                                 LDA #SLIDE_SIZE
0C338 0A                                    ASL
0C339 0A                                    ASL
0C33A A8                                    TAY
0C33B A9 EF                                 LDA #$EF
0C33D                                       -
0C33D 88                                        DEY
0C33E 99 00 02                                  STA ADDR_SPRITERAM,y
0C341 C0 00                                     CPY #00
0C343 D0 F8                                 BNE -
0C345                                       
0C345 4C B4 C3                              JMP +next
0C348                                   +
0C348                           
0C348                                   ;; Load (x,y) position in temp variables
0C348 BD 3C 03                          LDA explosion_x,x
0C34B 85 01                             STA temp+1
0C34D 85 03                             STA temp+3
0C34F BD 40 03                          LDA explosion_y,x
0C352 85 02                             STA temp+2
0C354                           
0C354                                   ;; Load attribute in temp variable
0C354 BD 38 03                          LDA explosion_attributes,x
0C357 85 04                             STA temp+4
0C359                           
0C359                                   ;; Load current frame into Y-register
0C359 BC 34 03                          LDY explosion_currentframe,x
0C35C                           
0C35C                                   ;; Load current frame ROM address from table
0C35C B9 3F CD                          LDA explosion_anim_lo,y
0C35F 85 0C                             STA pointer
0C361 B9 35 CD                          LDA explosion_anim_hi,y
0C364 85 0D                             STA pointer+1
0C366                           
0C366                                   ;; Save x-register on stack
0C366 8A                                TXA
0C367 48                                PHA
0C368                           
0C368                                   ;; Load sprites into sprite RAM
0C368 A6 3B                             LDX sprite_ram_pointer
0C36A A0 00                             LDY #$00
0C36C                           
0C36C                                   ;; Prepare (x,y) offset for loop
0C36C 84 00                             STY temp
0C36E                           
0C36E                                   -loop_load_sprite:
0C36E                                   
0C36E                                       ;; Do not draw empty sprites
0C36E B1 0C                                 LDA (pointer),y
0C370 F0 18                                 BEQ +nextSprite
0C372                                   
0C372                                           ;; Add y-position to sprite ram buffer
0C372 A5 02                                     LDA temp+2
0C374 9D 00 02                                  STA ADDR_SPRITERAM,x
0C377 E8                                        INX
0C378                           
0C378                                           ;; Get tile number from frame ROM address, and
0C378                                           ;; add it to sprite ram buffer
0C378 B1 0C                                     LDA (pointer),y
0C37A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C37D E8                                        INX
0C37E                           
0C37E                                           ;; Add attribute data to sprite ram buffer
0C37E A5 04                                     LDA temp+4
0C380 9D 00 02                                  STA ADDR_SPRITERAM,x
0C383 E8                                        INX
0C384                           
0C384                                           ;; Add x-position to sprite ram buffer
0C384 A5 03                                     LDA temp+3
0C386 9D 00 02                                  STA ADDR_SPRITERAM,x
0C389 E8                                        INX
0C38A                           
0C38A                                       +nextSprite:
0C38A                           
0C38A                                       ;; Check if all sprites are done
0C38A C8                                    INY
0C38B C0 09                                 CPY #SLIDE_SIZE
0C38D F0 21                                 BEQ +done
0C38F                           
0C38F                                       ;; Update x value
0C38F A5 03                                 LDA temp+3
0C391 18                                    CLC
0C392 69 08                                 ADC #$08
0C394 85 03                                 STA temp+3
0C396                           
0C396                                       ;; Update temp for x,y position
0C396 E6 00                                 INC temp
0C398 A5 00                                 LDA temp
0C39A C9 03                                 CMP #SLIDE_WIDTH
0C39C D0 0F                                 BNE +
0C39E                                           ;; Row is done; reset x-position
0C39E A5 01                                     LDA temp+1
0C3A0 85 03                                     STA temp+3
0C3A2                           
0C3A2                                           ;; Update y-position
0C3A2 A5 02                                     LDA temp+2
0C3A4 18                                        CLC
0C3A5 69 08                                     ADC #$08
0C3A7 85 02                                     STA temp+2
0C3A9                           
0C3A9                                           ;; Reset row counter
0C3A9 A9 00                                     LDA #$00
0C3AB 85 00                                     STA temp
0C3AD                                       +
0C3AD                           
0C3AD 4C 6E C3                          JMP -loop_load_sprite
0C3B0                           
0C3B0                               +done:
0C3B0 86 3B                             STX sprite_ram_pointer
0C3B2                           
0C3B2                                   ;; Retrieve x-register from stack
0C3B2 68                                PLA
0C3B3 AA                                TAX
0C3B4                           
0C3B4                               +next:
0C3B4                                   ;; Check if all animations have been updated
0C3B4 E8                                INX
0C3B5 E0 04                             CPX #MAX_ANIMATIONS
0C3B7 F0 03                             BEQ +done
0C3B9                           
0C3B9 4C 15 C3                      JMP -loop_load_animation
0C3BC                           +done:
0C3BC                           
0C3BC                               ;; Sprite clean-up
0C3BC A6 3B                         LDX sprite_ram_pointer
0C3BE A9 EF                         LDA #$EF
0C3C0                               -
0C3C0 9D 00 02                          STA ADDR_SPRITERAM,x
0C3C3 E8                                INX
0C3C4 D0 FA                         BNE -
0C3C6 4C 57 C0                      JMP MainGameLoop
0C3C9                           
0C3C9                           ;; Subroutines
0C3C9                           .include "include/subroutines.asm"
0C3C9                           
0C3C9                           ;; RNG
0C3C9                           .include "subroutine/GetRandomNumber.asm"
0C3C9                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3C9                           ;;
0C3C9                           ;; subroutine/GetRandomNumber.asm
0C3C9                           ;;
0C3C9                           ;; Simple and fast random number generator by White Flame.
0C3C9                           ;;
0C3C9                           ;; Set random_seed to an arbitrary number to randomize between
0C3C9                           ;; gaming sessions, for instance using the frame counter upon
0C3C9                           ;; pressing START on the intro screen.
0C3C9                           ;;
0C3C9                           ;;     ;; IF START PRESSED:
0C3C9                           ;;     LDA frame_counter
0C3C9                           ;;     STA random_seed
0C3C9                           ;;
0C3C9                           ;; Source:
0C3C9                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C3C9                           ;;
0C3C9                           ;;
0C3C9                           
0C3C9                           sub_GetRandomNumber:
0C3C9                               ;; Force EOR if random_seed is zero
0C3C9 A5 16                         LDA random_seed
0C3CB F0 05                         BEQ +doEor
0C3CD                           
0C3CD                               ;; Shift left, and EOR if the high bit is set
0C3CD 0A                            ASL
0C3CE F0 04                         BEQ +noEor
0C3D0 90 02                         BCC +noEor
0C3D2                           
0C3D2                           +doEor:
0C3D2 49 1D                         EOR #$1D
0C3D4                           
0C3D4                           +noEor:
0C3D4 85 16                         STA random_seed
0C3D6                           
0C3D6 60                            RTS
0C3D7                           
0C3D7                           
0C3D7                           ;; Read controller input
0C3D7                           .include "subroutine/ReadController.asm"
0C3D7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3D7                           ;;
0C3D7                           ;; subroutine/ReadController.asm
0C3D7                           ;;
0C3D7                           ;; Subroutine that polls the controller and stores the input
0C3D7                           ;; buttons in a variable. This version only handles controller
0C3D7                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C3D7                           ;;
0C3D7                           ;;
0C3D7                           
0C3D7                           sub_ReadController:
0C3D7                           
0C3D7                               ;; Set strobe bit
0C3D7 A9 01                         LDA #$01
0C3D9 8D 16 40                      STA JOYPAD_1
0C3DC                           
0C3DC                               ;; Set up ring counter
0C3DC 85 0F                         STA buttons_held
0C3DE                           
0C3DE                               ;; Clear strobe bit
0C3DE 4A                            LSR
0C3DF 8D 16 40                      STA JOYPAD_1
0C3E2                           
0C3E2                               ;; Loop through button presses
0C3E2                               -
0C3E2 AD 16 40                          LDA JOYPAD_1
0C3E5 4A                                LSR
0C3E6 26 0F                             ROL buttons_held
0C3E8                           
0C3E8                               ;; Check if ring counter is done
0C3E8 90 F8                         BCC -
0C3EA                           
0C3EA                               ;; Return from subroutine
0C3EA 60                            RTS
0C3EB                           
0C3EB                           
0C3EB                           ;; vBlank wait
0C3EB                           .include "subroutine/WaitForVBlank.asm"
0C3EB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3EB                           ;;
0C3EB                           ;; subroutine/WaitForVBlank.asm
0C3EB                           ;;
0C3EB                           ;; Subroutine that essentially pauses script execution until
0C3EB                           ;; vBlank happens.
0C3EB                           ;;
0C3EB                           ;;
0C3EB                           
0C3EB                           sub_WaitForVBlank:
0C3EB 2C 02 20                      BIT $2002
0C3EE 10 FB                         BPL sub_WaitForVBlank
0C3F0 60                            RTS
0C3F1                           
0C3F1                           
0C3F1                           ;; Game specific subroutines
0C3F1                           .include "game/include/subroutines.asm"
0C3F1                           ;; additional game-specific subroutines go here
0C3F1                           
0C3F1                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C3F1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3F1                           ;;
0C3F1                           ;;  sub_AddAccumulatorToScore.asm
0C3F1                           ;;
0C3F1                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C3F1                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C3F1                           ;;  actual score.
0C3F1                           ;;
0C3F1                           ;;
0C3F1                           
0C3F1                           
0C3F1                           sub_AddAccumulatorToScore:
0C3F1                           
0C3F1                               ;; Clear old add_to_score
0C3F1 A2 05                         LDX #$05
0C3F3 A0 00                         LDY #$00
0C3F5                               -
0C3F5 94 26                             STY add_to_score,x
0C3F7 CA                                DEX
0C3F8 10 FB                         BPL -
0C3FA                           
0C3FA                               ;; Set accumulator to add_to_score variables
0C3FA                               ;; Check and update 100s
0C3FA                               -checkHundreds:
0C3FA C9 64                             CMP #100
0C3FC 90 08                             BCC +checkTens
0C3FE 38                                    SEC
0C3FF E9 64                                 SBC #100
0C401 E6 29                                 INC add_to_score+3
0C403 4C FA C3                              JMP -checkHundreds
0C406                                   +checkTens:
0C406                           
0C406                               ;; Check and update 10s
0C406                               -checkTens:
0C406 C9 0A                             CMP #10
0C408 90 08                             BCC +setOnes
0C40A 38                                    SEC
0C40B E9 0A                                 SBC #10
0C40D E6 2A                                 INC add_to_score+4
0C40F 4C 06 C4                              JMP -checkTens
0C412                                   +setOnes:
0C412                           
0C412                               ;; We're left with 1s
0C412 85 2B                         STA add_to_score+5
0C414                           
0C414                               ;; Byte for byte, add add_to_score to ball_score
0C414 A9 00                         LDA #$00
0C416 85 38                         STA ppu_buffer_update
0C418 A4 39                         LDY ppu_buffer_pointer
0C41A A2 05                         LDX #$05
0C41C                               -
0C41C B5 26                             LDA add_to_score,x
0C41E 18                                CLC
0C41F 75 20                             ADC ball_score,x
0C421 C9 0A                             CMP #10
0C423 90 05                             BCC +
0C425 38                                    SEC
0C426 E9 0A                                 SBC #10
0C428 F6 1F                                 INC ball_score-1,x
0C42A                                   +
0C42A                                   
0C42A                                   ;; Update new score digit
0C42A 95 20                             STA ball_score,x
0C42C                           
0C42C                                   ;; Update score tile in PPU
0C42C A9 20                             LDA #$20
0C42E 99 00 03                          STA ppu_buffer,y
0C431 C8                                INY
0C432 8A                                TXA
0C433 18                                CLC
0C434 69 83                             ADC #$83
0C436 99 00 03                          STA ppu_buffer,y
0C439 C8                                INY
0C43A B5 20                             LDA ball_score,x
0C43C 18                                CLC
0C43D 69 01                             ADC #$01
0C43F 99 00 03                          STA ppu_buffer,y
0C442 C8                                INY
0C443                           
0C443                                   ;; Check next digit (if any left)
0C443 CA                                DEX
0C444 30 03                             BMI +done
0C446 4C 1C C4                      JMP -
0C449                           
0C449                           +done:
0C449                               ;; Update PPU buffer pointer and status
0C449 84 39                         STY ppu_buffer_pointer
0C44B A9 01                         LDA #$01
0C44D 85 38                         STA ppu_buffer_update
0C44F                           
0C44F                               ;; Done: return 
0C44F 60                            RTS
0C450                           
0C450                           .include "game/subroutine/BackgroundNoise.asm"
0C450                           
0C450                           sub_BackgroundNoise:
0C450 A9 32                         LDA #$32
0C452 8D 0C 40                      STA NOISE_VOLUME
0C455 A9 0E                         LDA #$0E
0C457 8D 0E 40                      STA NOISE_PERIOD
0C45A 85 41                         STA current_noise
0C45C 60                            RTS0C45D                           .include "game/subroutine/ClearScreen.asm"
0C45D                           ;; Subroutine to clear the screen
0C45D                           ;; If it's a game screen, add noise
0C45D                           
0C45D                           sub_ClearScreen:
0C45D                               ;; Check of game screen or not
0C45D A5 37                         LDA screen_mode
0C45F 29 03                         AND #CHECK_SCREEN_MODE
0C461 C9 01                         CMP #IS_GAME_SCREEN
0C463 F0 02                         BEQ +
0C465 A9 00                             LDA #$00
0C467                               +
0C467 85 01                         STA temp+1
0C469                               
0C469                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C469 2C 02 20                      BIT PPU_STATUS
0C46C A9 20                         LDA #$20
0C46E 8D 06 20                      STA PPU_ADDR
0C471 A9 00                         LDA #$00
0C473 8D 06 20                      STA PPU_ADDR
0C476                               
0C476                               ;; Set up tile to draw and loop
0C476 85 00                         STA temp
0C478 AA                            TAX
0C479 A8                            TAY
0C47A                           
0C47A                               -     
0C47A                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C47A A5 00                             LDA temp
0C47C 8D 07 20                          STA PPU_DATA
0C47F                           
0C47F                                   ;; Check if we should draw noise next. Noise is drawn if:
0C47F                                   ;; - Screen mode is game screen
0C47F                                   ;; - Y between #$06 and #$19 (inclusive)
0C47F                                   ;; - X between #$02 and #$1D (inclusive)
0C47F                                   
0C47F                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C47F A5 01                             LDA temp+1
0C481 F0 1C                             BEQ +nextTileInRow
0C483                                   
0C483                                   ;; If Y < $6, skip the check
0C483 C0 06                             CPY #$06
0C485 90 18                             BCC +nextTileInRow
0C487                                   
0C487                                   ;; If X < $1, skip the check
0C487 E0 01                             CPX #$01
0C489 90 14                             BCC +nextTileInRow
0C48B                                   
0C48B                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C48B E0 1D                             CPX #$1D
0C48D D0 04                             BNE +
0C48F A9 00                                 LDA #$00
0C491 85 00                                 STA temp
0C493                                   +
0C493 B0 0A                             BCS +nextTileInRow
0C495                                   
0C495                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C495 20 C9 C3                          JSR sub_GetRandomNumber
0C498 29 07                             AND #%00000111
0C49A 18                                CLC
0C49B 69 68                             ADC #$68
0C49D 85 00                             STA temp
0C49F                           
0C49F                           +nextTileInRow:
0C49F                                   
0C49F                                   ;; Check if a row has been done. If not, draw the next
0C49F E8                                INX
0C4A0 E0 20                             CPX #$20
0C4A2 D0 D6                             BNE -
0C4A4                                   
0C4A4                                   ;; Go to the next row (if any left)
0C4A4 A2 00                             LDX #00
0C4A6 C8                                INY
0C4A7                                   
0C4A7                                   ;; If Y is 1A, skip noise tile check until done drawing
0C4A7 C0 1A                             CPY #$1A
0C4A9 D0 04                             BNE +
0C4AB A9 00                                 LDA #$00
0C4AD 85 01                                 STA temp+1
0C4AF                                   +
0C4AF                                   
0C4AF C0 1E                             CPY #$1E
0C4B1 D0 C7                         BNE -
0C4B3                           
0C4B3                               ;; Clear attribute table
0C4B3 A9 23                         LDA #$23
0C4B5 8D 06 20                      STA PPU_ADDR
0C4B8 A9 C0                         LDA #$C0
0C4BA 8D 06 20                      STA PPU_ADDR
0C4BD A9 00                         LDA #$00
0C4BF A2 40                         LDX #$40
0C4C1                               -
0C4C1 8D 07 20                          STA PPU_DATA
0C4C4 CA                                DEX
0C4C5 D0 FA                         BNE -
0C4C7                               
0C4C7 60                            RTS0C4C8                           .include "game/subroutine/ColorizeBall.asm"
0C4C8                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4C8                           ;;
0C4C8                           ;;  Subroutine: ColorizeBall
0C4C8                           ;;
0C4C8                           ;;  Applies the color set through ball_flags to the ball sprite.
0C4C8                           ;;
0C4C8                           ;;
0C4C8                           
0C4C8                           
0C4C8                           sub_ColorizeBall:
0C4C8                           
0C4C8                               ;; Get color from ball_flags
0C4C8 4A                            LSR
0C4C9 4A                            LSR
0C4CA 4A                            LSR
0C4CB 4A                            LSR
0C4CC 4A                            LSR
0C4CD AA                            TAX
0C4CE                           
0C4CE                               ;; Add new light color of ball to PPU palette
0C4CE A9 3F                         LDA #$3F
0C4D0 85 00                         STA temp
0C4D2 A9 11                         LDA #$11
0C4D4 85 01                         STA temp+1
0C4D6 BD 4F CD                      LDA tbl_BallColorLight,x
0C4D9 85 02                         STA temp+2
0C4DB 20 EB CB                      JSR sub_WriteByteToPPUBuffer
0C4DE                               
0C4DE                               ;; Add new dark color of ball to PPU palette
0C4DE E6 01                         INC temp+1
0C4E0 BD 49 CD                      LDA tbl_BallColorDark,x
0C4E3 85 02                         STA temp+2
0C4E5 20 EB CB                      JSR sub_WriteByteToPPUBuffer
0C4E8                               
0C4E8 60                            RTS
0C4E9                           
0C4E9                           .include "game/subroutine/ColorsMatch.asm"
0C4E9                           
0C4E9                           ;; Subroutine to check if ball color matches colliding tile color
0C4E9                           
0C4E9                           sub_ColorsMatch:
0C4E9                               ;; Save tile color in temp variable
0C4E9 A5 3E                         LDA colliding_tile
0C4EB 29 0E                         AND #%00001110
0C4ED 85 00                         STA temp
0C4EF                           
0C4EF                               ;; Get ball color
0C4EF A5 36                         LDA ball_flags
0C4F1 29 E0                         AND #%11100000
0C4F3 4A                            LSR
0C4F4 4A                            LSR
0C4F5 4A                            LSR
0C4F6 4A                            LSR
0C4F7                           
0C4F7                               ;; Compare with tile color
0C4F7 C5 00                         CMP temp
0C4F9 60                            RTS
0C4FA                           
0C4FA                           .include "game/subroutine/ConvertXYToTileType.asm"
0C4FA                           
0C4FA                           ;; Subroutine to convert the ball's position to a tile type
0C4FA                           ;; - Expects temp to be y-position of ball within game area
0C4FA                           ;; - Expects temp+1 to be x-position of ball within game area
0C4FA                           ;; - Puts result in accumulator and zp variable
0C4FA                           ;; - Corrupts X-register
0C4FA                           
0C4FA                           sub_ConvertXYToTileType:
0C4FA A5 01                         LDA temp+1
0C4FC 4A                            LSR
0C4FD 4A                            LSR
0C4FE 4A                            LSR
0C4FF 4A                            LSR
0C500 85 09                         STA temp+9
0C502 A5 00                         LDA temp
0C504 29 F0                         AND #%11110000
0C506 18                            CLC
0C507 65 09                         ADC temp+9
0C509 85 09                         STA temp+9
0C50B AA                            TAX
0C50C BD 00 04                      LDA tile_type, x
0C50F 85 3E                         STA colliding_tile
0C511 60                            RTS
0C512                           
0C512                           .include "game/subroutine/DisableEnableRendering.asm"
0C512                           sub_DisableRendering:
0C512                               ;; Force NMI skip, disable rendering
0C512 A9 01                     	LDA #$01
0C514 85 14                     	STA force_skip_nmi
0C516 20 EB C3                      JSR sub_WaitForVBlank
0C519 A5 12                         LDA soft_ppu_mask
0C51B 29 E7                         AND #%11100111
0C51D 8D 01 20                      STA PPU_MASK
0C520 85 12                         STA soft_ppu_mask
0C522 20 EB C3                      JSR sub_WaitForVBlank
0C525 60                            RTS
0C526                           
0C526                           sub_EnableRendering:
0C526                               ;; Enable rendering
0C526 A9 00                     	LDA #$00
0C528 8D 05 20                  	STA PPU_SCROLL
0C52B 8D 05 20                  	STA PPU_SCROLL
0C52E 20 EB C3                      JSR sub_WaitForVBlank
0C531 85 14                     	STA force_skip_nmi
0C533 A5 12                         LDA soft_ppu_mask
0C535 09 18                         ORA #%00011000
0C537 85 12                         STA soft_ppu_mask
0C539 8D 01 20                      STA PPU_MASK
0C53C 20 EB C3                      JSR sub_WaitForVBlank
0C53F 60                            RTS
0C540                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C540                           sub_drawIntroScreenLogoTile:
0C540 B9 31 CC                      LDA tbl_IntroScreenLogoChr,y
0C543 C9 60                         CMP #$60
0C545 D0 08                         BNE +
0C547 20 C9 C3                          JSR sub_GetRandomNumber
0C54A 29 07                             AND #$07
0C54C 18                                CLC
0C54D 69 60                             ADC #$60
0C54F                               +
0C54F 8D 07 20                      STA PPU_DATA
0C552 60                            RTS
0C553                           .include "game/subroutine/EvaluateTileType.asm"
0C553                           
0C553                           ;; Subroutine to evaluate the colliding tile type and take its
0C553                           ;; corresponding action (move block, kill player, ...)
0C553                           ;; - Expects X-register to be the tile_type offset
0C553                           ;; - Uses zp variable colliding_tile
0C553                           
0C553                           sub_EvaluateTileType:
0C553                           
0C553                               ;; Check if collided tile is a color block
0C553 A5 3E                         LDA colliding_tile
0C555 29 80                         AND #IS_COLOR_BLOCK
0C557 D0 03                         BNE +
0C559 4C 74 C7                          JMP +checkIfPaintBlock
0C55C                               +
0C55C                               
0C55C                               ;; It's a color block. Check if the colors match
0C55C 20 E9 C4                      JSR sub_ColorsMatch
0C55F F0 01                         BEQ +
0C561                                   ;; Colors don't match - return
0C561 60                                RTS
0C562                               +
0C562                           
0C562                               ;; Colors match. Destroy color block
0C562 A4 39                         LDY ppu_buffer_pointer
0C564                               
0C564                               ;; (this will be a subroutine)
0C564                               ;; Get PPU address from YX index
0C564                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C564                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C564 8A                            TXA
0C565 29 C0                         AND #%11000000
0C567 18                            CLC
0C568 2A                            ROL
0C569 2A                            ROL
0C56A 2A                            ROL
0C56B 69 20                         ADC #$20
0C56D 85 00                         STA temp
0C56F 8A                            TXA
0C570 29 0F                         AND #%00001111
0C572 0A                            ASL
0C573 85 01                         STA temp+1
0C575 8A                            TXA
0C576 29 30                         AND #%00110000
0C578 0A                            ASL
0C579 0A                            ASL
0C57A 18                            CLC
0C57B 65 01                         ADC temp+1
0C57D 85 01                         STA temp+1
0C57F A5 00                         LDA temp
0C581 69 00                         ADC #$00
0C583 85 00                         STA temp
0C585 A5 01                         LDA temp+1
0C587 18                            CLC
0C588 69 C2                         ADC #$C2
0C58A 85 01                         STA temp+1
0C58C A5 00                         LDA temp
0C58E 69 00                         ADC #$00
0C590 85 00                         STA temp
0C592                           
0C592                               
0C592                               ;; (this will also be a subroutine eventually)
0C592                               ;; TILE 1: if metatile on top left is solid, draw
0C592                               ;; null tile, else draw random noise tile
0C592 A9 00                         LDA #$00
0C594 85 38                         STA ppu_buffer_update
0C596                               
0C596 A5 00                         LDA temp
0C598 99 00 03                      STA ppu_buffer,y
0C59B C8                            INY
0C59C A5 01                         LDA temp+1
0C59E 99 00 03                      STA ppu_buffer,y
0C5A1 C8                            INY
0C5A2                               
0C5A2 8A                            TXA
0C5A3 29 0F                         AND #%00001111
0C5A5 F0 11                         BEQ +drawRandomTile
0C5A7                           
0C5A7 8A                            TXA
0C5A8 29 F0                         AND #%11110000
0C5AA F0 0C                         BEQ +drawRandomTile
0C5AC                           
0C5AC BD EF 03                      LDA tile_type-17,x
0C5AF 29 01                         AND #%00000001
0C5B1 F0 05                         BEQ +drawRandomTile  
0C5B3                           
0C5B3                               ;; Draw a null tile
0C5B3 A9 00                         LDA #$00
0C5B5 4C C0 C5                      JMP +addToPPUBuffer
0C5B8                               
0C5B8                           +drawRandomTile:
0C5B8                               ;; Draw a random tile
0C5B8 20 C9 C3                      JSR sub_GetRandomNumber
0C5BB 29 07                         AND #%00000111
0C5BD 18                            CLC
0C5BE 69 68                         ADC #$68
0C5C0                               
0C5C0                               ;; Add tile to ppu buffer
0C5C0                           +addToPPUBuffer:
0C5C0 99 00 03                      STA ppu_buffer,y
0C5C3 C8                            INY
0C5C4                           
0C5C4                               ;; TILE 2: If metatile above is solid, draw null,
0C5C4                               ;; else draw random noise.
0C5C4 E6 01                         INC temp+1
0C5C6 A5 00                         LDA temp
0C5C8 99 00 03                      STA ppu_buffer,y
0C5CB C8                            INY
0C5CC A5 01                         LDA temp+1
0C5CE 99 00 03                      STA ppu_buffer,y
0C5D1 C8                            INY
0C5D2                               
0C5D2 8A                            TXA
0C5D3 29 F0                         AND #%11110000
0C5D5 F0 0C                         BEQ +drawRandomTile
0C5D7                               
0C5D7 BD F0 03                      LDA tile_type-16,x
0C5DA 29 01                         AND #%00000001
0C5DC F0 05                         BEQ +drawRandomTile
0C5DE                               
0C5DE A9 00                         LDA #%00
0C5E0 4C EB C5                      JMP +addToPPUBuffer
0C5E3                           
0C5E3                           +drawRandomTile:
0C5E3 20 C9 C3                      JSR sub_GetRandomNumber
0C5E6 29 07                         AND #%00000111
0C5E8 18                            CLC
0C5E9 69 68                         ADC #$68
0C5EB                           
0C5EB                           +addToPPUBuffer:
0C5EB 99 00 03                      STA ppu_buffer,y
0C5EE C8                            INY
0C5EF                               
0C5EF                               ;; TILE 3 - If metatile left is solid, draw null,
0C5EF                               ;; else draw random noise.
0C5EF A5 01                         LDA temp+1
0C5F1 18                            CLC
0C5F2 69 1F                         ADC #$1F
0C5F4 85 01                         STA temp+1
0C5F6 A5 00                         LDA temp
0C5F8 69 00                         ADC #$00
0C5FA 85 00                         STA temp
0C5FC 99 00 03                      STA ppu_buffer,y
0C5FF C8                            INY
0C600 A5 01                         LDA temp+1
0C602 99 00 03                      STA ppu_buffer,y
0C605 C8                            INY
0C606                               
0C606 8A                            TXA
0C607 29 0F                         AND #%00001111
0C609 F0 0C                         BEQ +drawRandomTile
0C60B                               
0C60B BD FF 03                      LDA tile_type-1,x
0C60E 29 01                         AND #%00000001
0C610 F0 05                         BEQ +drawRandomTile
0C612                               
0C612 A9 00                         LDA #%00
0C614 4C 1F C6                      JMP +addToPPUBuffer
0C617                           
0C617                           +drawRandomTile:
0C617 20 C9 C3                      JSR sub_GetRandomNumber
0C61A 29 07                         AND #%00000111
0C61C 18                            CLC
0C61D 69 68                         ADC #$68
0C61F                               
0C61F                           +addToPPUBuffer:
0C61F 99 00 03                      STA ppu_buffer,y
0C622 C8                            INY
0C623                               
0C623                               ;; TILE 4 - Always random noise
0C623 E6 01                         INC temp+1
0C625 A5 00                         LDA temp
0C627 99 00 03                      STA ppu_buffer,y
0C62A C8                            INY
0C62B A5 01                         LDA temp+1
0C62D 99 00 03                      STA ppu_buffer,y
0C630 C8                            INY
0C631 20 C9 C3                      JSR sub_GetRandomNumber
0C634 29 07                         AND #%00000111
0C636 18                            CLC
0C637 69 68                         ADC #$68
0C639 99 00 03                      STA ppu_buffer,y
0C63C C8                            INY
0C63D                           
0C63D                               ;; TILE 5 - If tile on the right is solid, skip,
0C63D                               ;; else draw random noise tile
0C63D E6 01                         INC temp+1
0C63F                               
0C63F 8A                            TXA
0C640 29 0F                         AND #%00001111
0C642 C9 0D                         CMP #$0D
0C644 F0 1F                         BEQ +skipTile
0C646                               
0C646 BD 01 04                      LDA tile_type+1,x
0C649 29 01                         AND #%00000001
0C64B D0 18                         BNE +skipTile
0C64D A5 00                             LDA temp
0C64F 99 00 03                          STA ppu_buffer,y
0C652 C8                                INY
0C653 A5 01                             LDA temp+1
0C655 99 00 03                          STA ppu_buffer,y
0C658 C8                                INY
0C659 20 C9 C3                          JSR sub_GetRandomNumber
0C65C 29 07                             AND #%00000111
0C65E 18                                CLC
0C65F 69 68                             ADC #$68
0C661 99 00 03                          STA ppu_buffer,y
0C664 C8                                INY    
0C665                               +skipTile:
0C665                           
0C665                               ;; TILE 6 - If tile on bottom is solid, skip,
0C665                               ;; else draw random noise
0C665 A5 01                         LDA temp+1
0C667 18                            CLC
0C668 69 1F                         ADC #$1F
0C66A 85 01                         STA temp+1
0C66C A5 00                         LDA temp
0C66E 69 00                         ADC #$00
0C670 85 00                         STA temp
0C672                           
0C672 8A                            TXA
0C673 29 F0                         AND #%11110000
0C675 C9 90                         CMP #$90
0C677 F0 1F                         BEQ +skipTile
0C679                           
0C679 BD 10 04                      LDA tile_type+16,x
0C67C 29 01                         AND #%00000001
0C67E D0 18                         BNE +skipTile
0C680 A5 00                             LDA temp
0C682 99 00 03                          STA ppu_buffer,y
0C685 C8                                INY
0C686 A5 01                             LDA temp+1
0C688 99 00 03                          STA ppu_buffer,y
0C68B C8                                INY
0C68C 20 C9 C3                          JSR sub_GetRandomNumber
0C68F 29 07                             AND #%00000111
0C691 18                                CLC
0C692 69 68                             ADC #$68
0C694 99 00 03                          STA ppu_buffer,y
0C697 C8                                INY    
0C698                               +skipTile:
0C698                               
0C698                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C698                               ;; else draw random noise
0C698 E6 01                         INC temp+1
0C69A                           
0C69A 8A                            TXA
0C69B 29 F0                         AND #%11110000
0C69D C9 90                         CMP #$90
0C69F F0 26                         BEQ +skipTile
0C6A1                               
0C6A1 8A                            TXA
0C6A2 29 0F                         AND #%00001111
0C6A4 C9 0D                         CMP #$0D
0C6A6 F0 1F                         BEQ +skipTile
0C6A8                               
0C6A8 BD 11 04                      LDA tile_type+17,x
0C6AB 29 01                         AND #%00000001
0C6AD D0 18                         BNE +skipTile
0C6AF A5 00                             LDA temp
0C6B1 99 00 03                          STA ppu_buffer,y
0C6B4 C8                                INY
0C6B5 A5 01                             LDA temp+1
0C6B7 99 00 03                          STA ppu_buffer,y
0C6BA C8                                INY
0C6BB 20 C9 C3                          JSR sub_GetRandomNumber
0C6BE 29 07                             AND #%00000111
0C6C0 18                                CLC
0C6C1 69 68                             ADC #$68
0C6C3 99 00 03                          STA ppu_buffer,y
0C6C6 C8                                INY    
0C6C7                               +skipTile:   
0C6C7                           
0C6C7                           
0C6C7                               ;; - Update attribute table accordingly through ppu buffer
0C6C7 A9 23                         LDA #$23
0C6C9 99 00 03                      STA ppu_buffer,y
0C6CC C8                            INY
0C6CD                               
0C6CD 8A                            TXA
0C6CE 29 F0                         AND #%11110000
0C6D0 4A                            LSR
0C6D1 4A                            LSR
0C6D2 4A                            LSR
0C6D3 4A                            LSR
0C6D4 18                            CLC
0C6D5 69 01                         ADC #1
0C6D7 4A                            LSR
0C6D8 0A                            ASL
0C6D9 0A                            ASL
0C6DA 0A                            ASL
0C6DB 18                            CLC
0C6DC 69 C8                         ADC #$C8
0C6DE 85 00                         STA temp
0C6E0 8A                            TXA
0C6E1 29 0F                         AND #%00001111
0C6E3 18                            CLC
0C6E4 69 01                         ADC #$01
0C6E6 4A                            LSR
0C6E7 18                            CLC
0C6E8 65 00                         ADC temp
0C6EA 85 00                         STA temp
0C6EC 99 00 03                      STA ppu_buffer,y
0C6EF C8                            INY
0C6F0                                  
0C6F0 8A                            TXA
0C6F1 29 10                         AND #%00010000
0C6F3 F0 05                         BEQ +
0C6F5 A9 F0                             LDA #%11110000
0C6F7 4C FC C6                          JMP ++
0C6FA                               +
0C6FA A9 0F                         LDA #%00001111
0C6FC                               ++
0C6FC 85 02                         STA temp+2
0C6FE                               
0C6FE 8A                            TXA
0C6FF 48                            PHA
0C700 29 01                         AND #%00000001
0C702 F0 07                         BEQ +
0C704 A5 02                             LDA temp+2
0C706 09 CC                             ORA #%11001100
0C708 4C 0F C7                          JMP ++
0C70B                               +
0C70B A5 02                         LDA temp+2
0C70D 09 33                         ORA #%00110011
0C70F                               ++
0C70F 85 02                         STA temp+2
0C711                               
0C711 A5 00                         LDA temp
0C713 38                            SEC
0C714 E9 C0                         SBC #$C0
0C716 AA                            TAX
0C717 BD A0 04                      LDA tile_attributes,x
0C71A 25 02                         AND temp+2
0C71C 9D A0 04                      STA tile_attributes,x
0C71F 99 00 03                      STA ppu_buffer,y
0C722 C8                            INY
0C723 68                            PLA
0C724 AA                            TAX
0C725                           
0C725                               ;; Tell PPU to update tiles and attributes next frame
0C725 84 39                         STY ppu_buffer_pointer
0C727 A9 01                         LDA #$01
0C729 85 38                         STA ppu_buffer_update
0C72B                            
0C72B                               
0C72B                               ;; - Load destruction animation on tile
0C72B                               ;; Get most recent slot for explosion    
0C72B 8A                            TXA
0C72C 85 02                         STA temp+2
0C72E A6 3A                         LDX explosion_pointer
0C730                           
0C730                               ;; If 0, use max pointer value
0C730 D0 02                         BNE +
0C732 A2 04                             LDX #MAX_ANIMATIONS
0C734                               +
0C734                           
0C734                               ;; Decrease pointer by one
0C734 CA                            DEX
0C735 86 3A                         STX explosion_pointer
0C737                           
0C737                               ;; Load explosion data into RAM
0C737 A9 00                         LDA #$00
0C739 9D 34 03                      STA explosion_currentframe,x
0C73C                           
0C73C A9 04                         LDA #ANIMATION_SPEED
0C73E 9D 30 03                      STA explosion_framecounter,x
0C741                           
0C741 A5 02                         LDA temp+2
0C743 29 0F                         AND #%00001111
0C745 A8                            TAY
0C746 B9 9E D4                      LDA tbl_Times16,y
0C749 18                            CLC
0C74A 69 0E                         ADC #$0E
0C74C 9D 3C 03                      STA explosion_x,x
0C74F                           
0C74F A5 02                         LDA temp+2
0C751 29 F0                         AND #%11110000
0C753 18                            CLC
0C754 69 29                         ADC #$29
0C756 9D 40 03                      STA explosion_y,x
0C759                           
0C759 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C75B 9D 38 03                      STA explosion_attributes,x
0C75E A9 01                         LDA #$01
0C760 9D 44 03                      STA explosion_active,x
0C763                           
0C763 A5 02                         LDA temp+2
0C765 AA                            TAX
0C766                               
0C766                               
0C766                               ;; - Write #$00 in tile type ram (makes not-solid)
0C766 A9 00                         LDA #$00
0C768 9D 00 04                      STA tile_type, x
0C76B                           
0C76B                           
0C76B                               ;; Add (80 + level number) to score
0C76B A5 3D                         LDA current_level
0C76D 18                            CLC
0C76E 69 51                         ADC #81
0C770 20 F1 C3                      JSR sub_AddAccumulatorToScore
0C773                           
0C773                           
0C773                               ;; - If there are no color blocks left:
0C773                               ;;   - Freeze ball
0C773                               ;;   - Initiate level-win state
0C773                               ;; [@TODO]
0C773                               
0C773 60                            RTS
0C774                           
0C774                           +checkIfPaintBlock:
0C774                           
0C774                           
0C774                               ;; Check if collided tile is a paint block
0C774 A5 3E                         LDA colliding_tile
0C776 29 20                         AND #IS_PAINT_BLOCK
0C778 F0 1A                         BEQ +checkIfDeathBlock
0C77A                                   ;; It's a paint block. Update ball color
0C77A                                   ;; Save x-register
0C77A 8A                                TXA
0C77B 48                                PHA
0C77C                           
0C77C                                   ;; Get tile color
0C77C A5 3E                             LDA colliding_tile
0C77E 29 0E                             AND #%00001110
0C780 0A                                ASL
0C781 0A                                ASL
0C782 0A                                ASL
0C783 0A                                ASL
0C784 85 00                             STA temp
0C786                           
0C786                                   ;; Apply tile color to ball
0C786 A5 36                             LDA ball_flags
0C788 29 1F                             AND #%00011111
0C78A 05 00                             ORA temp
0C78C 85 36                             STA ball_flags
0C78E 20 C8 C4                          JSR sub_ColorizeBall
0C791                           
0C791                                   ;; Restore x-register
0C791 68                                PLA
0C792 AA                                TAX
0C793                           
0C793                                   ;; Return
0C793 60                                RTS
0C794                               +checkIfDeathBlock:
0C794                           
0C794                               ;; Check if collided tile is a death block
0C794 A5 3E                         LDA colliding_tile
0C796 29 10                         AND #IS_DEATH_BLOCK
0C798 F0 01                         BEQ +checkIfMoveBlock
0C79A                                   ;; It is a death block. Kill player and return (@TODO)
0C79A                           ;        LDA ball_flags
0C79A                           ;        ORA #%00000101
0C79A                           ;        STA ball_flags
0C79A 60                                RTS
0C79B                               +checkIfMoveBlock:
0C79B                           
0C79B                               ;; Check if collided tile is a move block
0C79B A5 3E                         LDA colliding_tile
0C79D 29 40                         AND #IS_MOVE_BLOCK
0C79F F0 07                         BEQ +done
0C7A1                                   ;; It is a move block. Check if colors match
0C7A1 20 E9 C4                          JSR sub_ColorsMatch
0C7A4 F0 01                             BEQ +
0C7A6                                       ;; Colors don't match - return
0C7A6 60                                    RTS
0C7A7                                   +
0C7A7                           
0C7A7                                   ;; Colors match.
0C7A7                                   ;; - Check if next tile is a solid
0C7A7                                   ;; - If not, move the tile:
0C7A7                                   ;;   - Add the tiles that need updating to ppu buffer
0C7A7                                   ;;   - Add move tile sprite over the original tile
0C7A7                                   ;;   - Initiate moving the sprite that way for 16px
0C7A7                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C7A7                                   ;;   - Update attribute table accordingly through ppu buffer
0C7A7                                   ;; - After moving the sprite, in a different routine:
0C7A7                                   ;;   - Add move tile data on the new tile location
0C7A7                                   ;;   - Write the original tile type data on new position in ram
0C7A7                                   ;;   - Destroy sprite
0C7A7                                   ;;   - Update attribute table accordingly through ppu buffer
0C7A7                                   ;; (@TODO)
0C7A7 60                                RTS
0C7A8                               +done:
0C7A8                           
0C7A8                               ;; Return
0C7A8 60                            RTS
0C7A9                           
0C7A9                           .include "game/subroutine/InitiateNudge.asm"
0C7A9                           
0C7A9                           sub_InitiateNudge:
0C7A9 85 36                         STA ball_flags
0C7AB A9 05                         LDA #NUDGE_FRAMES
0C7AD 85 3C                         STA nudge_counter
0C7AF 60                            RTS
0C7B0                           
0C7B0                           .include "game/subroutine/JumpToPointer.asm"
0C7B0                           sub_JumpToPointer:
0C7B0 6C 0C 00                      JMP (pointer)
0C7B3                               ;RTS must be handled by the routine (pointer) jumps to
0C7B3                           .include "game/subroutine/LoadGameScreen.asm"
0C7B3                           sub_LoadGameScreen:
0C7B3                           
0C7B3                               ;; Clear the screen
0C7B3 20 5D C4                      JSR sub_ClearScreen
0C7B6                               
0C7B6                               ;; Clear collision and attribute data
0C7B6 A2 00                         LDX #$00
0C7B8 8A                            TXA
0C7B9                               -
0C7B9 9D 00 04                          STA tile_type,x
0C7BC E8                                INX
0C7BD D0 FA                         BNE -
0C7BF                               
0C7BF                               ;; Get pointer from current level
0C7BF A6 3D                         LDX current_level
0C7C1 BD 53 D4                      LDA tbl_lvl_layout_lo,x
0C7C4 85 0C                         STA pointer
0C7C6 BD 3A D4                      LDA tbl_lvl_layout_hi,x
0C7C9 85 0D                         STA pointer+1
0C7CB                           
0C7CB                               ;; Set up the loop
0C7CB A0 00                         LDY #$00
0C7CD                           -drawRowColumnLoop:
0C7CD                           
0C7CD                               ;; Load (x,y) of current set of tiles
0C7CD B1 0C                         LDA (pointer),y
0C7CF                           
0C7CF                               ;; Check if level is done; if so, skip the loop
0C7CF C9 FF                         CMP #LEVEL_END
0C7D1 D0 03                         BNE +
0C7D3 4C 1C C9                          JMP +doneLevelLoad
0C7D6                               +
0C7D6                           
0C7D6                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C7D6 85 00                         STA temp
0C7D8 C8                            INY
0C7D9 B1 0C                         LDA (pointer),y
0C7DB 85 01                         STA temp+1
0C7DD                               
0C7DD                               ;; Convert (x,y) to PPU address
0C7DD                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C7DD A5 00                         LDA temp
0C7DF 29 0F                         AND #%00001111
0C7E1 4A                            LSR
0C7E2 4A                            LSR
0C7E3 09 20                         ORA #$20
0C7E5 85 02                         STA temp+2
0C7E7                               
0C7E7                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C7E7 A5 00                         LDA temp
0C7E9 29 F0                         AND #%11110000
0C7EB 4A                            LSR
0C7EC 4A                            LSR
0C7ED 4A                            LSR
0C7EE 85 03                         STA temp+3
0C7F0                               
0C7F0 A5 00                         LDA temp
0C7F2 29 03                         AND #%00000011
0C7F4 AA                            TAX
0C7F5 BD AE D4                      LDA tbl_Times64,x
0C7F8 18                            CLC
0C7F9 65 03                         ADC temp+3
0C7FB 18                            CLC
0C7FC 69 C2                         ADC #$C2
0C7FE 85 03                         STA temp+3
0C800                               
0C800                               ;; Add carry to temp+2
0C800 A5 02                         LDA temp+2
0C802 69 00                         ADC #$00
0C804 85 02                         STA temp+2
0C806                           
0C806                               ;; Convert tile data to loop count and tile type
0C806                               ;; temp+4 = color
0C806 A5 01                         LDA temp+1
0C808 29 07                         AND #%00000111
0C80A 85 04                         STA temp+4
0C80C                               
0C80C                               ;; If color = 7, this is a wall
0C80C C9 07                         CMP #%00000111
0C80E F0 12                         BEQ +wallHack
0C810                                   
0C810                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C810 29 01                             AND #%00000001
0C812 F0 02                             BEQ +
0C814 A9 05                                 LDA #$05
0C816                                   +
0C816 85 07                             STA temp+7
0C818                                
0C818                                   ;; temp+5 = tile type
0C818 A5 01                             LDA temp+1
0C81A 4A                                LSR
0C81B 4A                                LSR
0C81C 4A                                LSR
0C81D 29 03                             AND #%00000011
0C81F 4C 28 C8                          JMP +setTileType
0C822                               +wallHack:
0C822                               
0C822                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C822 A9 00                         LDA #$00
0C824 85 07                         STA temp+7
0C826 A9 04                         LDA #$04
0C828                           
0C828                           +setTileType:    
0C828 85 05                         STA temp+5
0C82A                               
0C82A                               ;; X = tile offset
0C82A 18                            CLC
0C82B 65 07                         ADC temp+7
0C82D AA                            TAX
0C82E                               
0C82E                               ;; temp+6 = number of tiles
0C82E A5 01                         LDA temp+1
0C830 29 60                         AND #%01100000
0C832 4A                            LSR
0C833 4A                            LSR
0C834 4A                            LSR
0C835 4A                            LSR
0C836 4A                            LSR
0C837 85 06                         STA temp+6
0C839                               
0C839                               ;; Translate (x,y) to (y,x) for tile RAM
0C839 A5 00                         LDA temp
0C83B 0A                            ASL
0C83C 0A                            ASL
0C83D 0A                            ASL
0C83E 0A                            ASL
0C83F 85 08                         STA temp+8
0C841 A5 00                         LDA temp
0C843 4A                            LSR
0C844 4A                            LSR
0C845 4A                            LSR
0C846 4A                            LSR
0C847 05 08                         ORA temp+8
0C849 85 00                         STA temp
0C84B                               
0C84B                               ;; Set up loop
0C84B 98                            TYA
0C84C 48                            PHA
0C84D A4 06                         LDY temp+6
0C84F                           
0C84F                               -drawTileLoop:
0C84F                                   ;; Write PPU address
0C84F 2C 02 20                          BIT PPU_STATUS
0C852 A5 02                             LDA temp+2
0C854 8D 06 20                          STA PPU_ADDR
0C857 A5 03                             LDA temp+3
0C859 8D 06 20                          STA PPU_ADDR
0C85C                                   
0C85C                                   ;; Write first and second tile
0C85C BD B2 D4                          LDA tbl_GametileTopLeft,x
0C85F 8D 07 20                          STA PPU_DATA
0C862 BD BC D4                          LDA tbl_GametileTopRight,x
0C865 8D 07 20                          STA PPU_DATA
0C868                                   
0C868                                   ;; Update PPU address
0C868 2C 02 20                          BIT PPU_STATUS
0C86B A5 02                             LDA temp+2
0C86D 8D 06 20                          STA PPU_ADDR
0C870 A5 03                             LDA temp+3
0C872 18                                CLC
0C873 69 20                             ADC #$20
0C875 8D 06 20                          STA PPU_ADDR
0C878                                   
0C878                                   ;; Write third and fourth tile
0C878 BD C6 D4                          LDA tbl_GametileBottomLeft,x
0C87B 8D 07 20                          STA PPU_DATA
0C87E BD D0 D4                          LDA tbl_GametileBottomRight,x
0C881 8D 07 20                          STA PPU_DATA
0C884                           
0C884                                   ;; Push x-register to stack
0C884 8A                                TXA
0C885 48                                PHA
0C886                                   
0C886                                   ;; Update tile RAM (aka collision table)
0C886 A6 05                             LDX temp+5
0C888 BD DA D4                          LDA tbl_GameTileRamByte,x
0C88B 05 04                             ORA temp+4
0C88D 0A                                ASL
0C88E 09 01                             ORA #%00000001
0C890 A6 00                             LDX temp
0C892 9D 00 04                          STA tile_type,x
0C895                           
0C895                                   ;; Check if shade 1 should be drawn
0C895 E8                                INX
0C896 BD 00 04                          LDA tile_type,x
0C899 D0 05                             BNE +
0C89B A9 00                                 LDA #$00
0C89D 8D 07 20                              STA PPU_DATA
0C8A0                                   +
0C8A0                                   
0C8A0                                   ;; Check if shade 2 should be drawn
0C8A0 A5 03                             LDA temp+3
0C8A2 18                                CLC
0C8A3 69 41                             ADC #$41
0C8A5 85 03                             STA temp+3
0C8A7 A5 02                             LDA temp+2
0C8A9 69 00                             ADC #$00
0C8AB 85 02                             STA temp+2
0C8AD                                   
0C8AD 8A                                TXA
0C8AE 18                                CLC
0C8AF 69 0F                             ADC #$0F
0C8B1 AA                                TAX
0C8B2                                   
0C8B2 BD 00 04                          LDA tile_type,x
0C8B5 D0 0F                             BNE +
0C8B7 A5 02                                 LDA temp+2
0C8B9 8D 06 20                              STA PPU_ADDR
0C8BC A5 03                                 LDA temp+3
0C8BE 8D 06 20                              STA PPU_ADDR
0C8C1 A9 00                                 LDA #$00
0C8C3 8D 07 20                              STA PPU_DATA
0C8C6                                   +
0C8C6                           
0C8C6                                   ;; Check if shade 3 should be drawn
0C8C6 E8                                INX
0C8C7 E6 03                             INC temp+3
0C8C9 BD 00 04                          LDA tile_type,x
0C8CC D0 0F                             BNE +
0C8CE A5 02                                 LDA temp+2
0C8D0 8D 06 20                              STA PPU_ADDR
0C8D3 A5 03                                 LDA temp+3
0C8D5 8D 06 20                              STA PPU_ADDR
0C8D8 A9 00                                 LDA #$00
0C8DA 8D 07 20                              STA PPU_DATA
0C8DD                                   +
0C8DD                                   
0C8DD                                   ;; Restore x-register from stack
0C8DD 68                                PLA
0C8DE AA                                TAX
0C8DF                                   
0C8DF                                   ;; Reset pointer for next tile
0C8DF A5 03                             LDA temp+3
0C8E1 38                                SEC
0C8E2 E9 42                             SBC #$42
0C8E4 85 03                             STA temp+3
0C8E6 A5 02                             LDA temp+2
0C8E8 E9 00                             SBC #$00
0C8EA 85 02                             STA temp+2
0C8EC                                   
0C8EC                                   ;; Draw next metatile in this loop (if any left)
0C8EC 88                                DEY
0C8ED 30 27                             BMI +doneDrawingRowColumn
0C8EF                                   
0C8EF                                   ;; Is it a row or a column?
0C8EF A5 01                             LDA temp+1
0C8F1 10 17                             BPL +
0C8F3                                       ;; It is a column: move pointer down (+$40)
0C8F3 A5 03                                 LDA temp+3
0C8F5 18                                    CLC
0C8F6 69 40                                 ADC #$40
0C8F8 85 03                                 STA temp+3
0C8FA A5 02                                 LDA temp+2
0C8FC 69 00                                 ADC #$00
0C8FE 85 02                                 STA temp+2
0C900                                       
0C900                                       ;; Add 16 to temp (as a tile RAM pointer)
0C900 A5 00                                 LDA temp
0C902 18                                    CLC
0C903 69 10                                 ADC #$10
0C905 85 00                                 STA temp
0C907 4C 13 C9                              JMP +drawNextTile
0C90A                                   +
0C90A                                   
0C90A                                   ;; It is a row: move pointer right (+$02)
0C90A A5 03                             LDA temp+3
0C90C 18                                CLC
0C90D 69 02                             ADC #$02
0C90F 85 03                             STA temp+3
0C911                                   
0C911                                   ;; Add 1 to temp (as a tile RAM pointer)
0C911 E6 00                             INC temp
0C913                           
0C913                               
0C913                               ;; Next tile in the row/column
0C913                                   +drawNextTile:
0C913 4C 4F C8                      JMP -drawTileLoop
0C916                           
0C916                               ;; Go to the next set of tiles
0C916                           +doneDrawingRowColumn:
0C916 68                            PLA
0C917 A8                            TAY
0C918 C8                            INY
0C919 4C CD C7                      JMP -drawRowColumnLoop
0C91C                           
0C91C                           ;; Level loading is done
0C91C                           +doneLevelLoad:
0C91C                           
0C91C                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C91C A9 20                         LDA #$20
0C91E 8D 06 20                      STA PPU_ADDR
0C921 A9 A2                         LDA #$A2
0C923 8D 06 20                      STA PPU_ADDR
0C926 A9 35                         LDA #$35
0C928 20 52 CB                      JSR sub_Draw28HorizontalTiles
0C92B                           
0C92B                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C92B A9 23                         LDA #$23
0C92D 8D 06 20                      STA PPU_ADDR
0C930 A9 42                         LDA #$42
0C932 8D 06 20                      STA PPU_ADDR
0C935 A9 31                         LDA #$31
0C937 20 52 CB                      JSR sub_Draw28HorizontalTiles
0C93A                           
0C93A                               ;; Left & right game bounds
0C93A                               ;; Set PPU_ADDR and store in temp variables
0C93A A9 20                         LDA #$20
0C93C 85 00                         STA temp
0C93E 8D 06 20                      STA PPU_ADDR
0C941 A9 C1                         LDA #$C1
0C943 85 01                         STA temp+1
0C945 8D 06 20                      STA PPU_ADDR
0C948                               
0C948                               ;; Set vertical bound tile and set up loop
0C948 A0 33                         LDY #$33
0C94A A2 14                         LDX #20
0C94C                               -
0C94C                                   ;; Show left tile
0C94C 8C 07 20                          STY PPU_DATA
0C94F                                   
0C94F                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C94F A5 00                             LDA temp
0C951 8D 06 20                          STA PPU_ADDR
0C954 A5 01                             LDA temp+1
0C956 18                                CLC
0C957 69 1D                             ADC #29
0C959 85 01                             STA temp+1
0C95B 8D 06 20                          STA PPU_ADDR
0C95E                           
0C95E                                   ;; Show right tile
0C95E 8C 07 20                          STY PPU_DATA
0C961                           
0C961                                   ;; Check if we're done yet
0C961 CA                                DEX
0C962 F0 18                             BEQ +drawCorners
0C964                                   
0C964                                   ;; Not done yet: add 3 to low byte for next left bound
0C964 A5 01                             LDA temp+1
0C966 18                                CLC
0C967 69 03                             ADC #3
0C969 85 01                             STA temp+1
0C96B                                   
0C96B                                   ;; Apply carry to high byte
0C96B A5 00                             LDA temp
0C96D 69 00                             ADC #$00
0C96F 85 00                             STA temp
0C971                                   
0C971                                   ;; Store next PPU_ADDR to draw at
0C971 8D 06 20                          STA PPU_ADDR
0C974 A5 01                             LDA temp+1
0C976 8D 06 20                          STA PPU_ADDR
0C979 4C 4C C9                      JMP -
0C97C                               
0C97C                               
0C97C                           
0C97C                           +drawCorners:
0C97C                               ;; Draw the corners of the playing field
0C97C A9 20                         LDA #$20
0C97E 8D 06 20                      STA PPU_ADDR
0C981 A9 A1                         LDA #$A1
0C983 8D 06 20                      STA PPU_ADDR
0C986 A9 39                         LDA #$39
0C988 8D 07 20                      STA PPU_DATA
0C98B                           
0C98B A9 20                         LDA #$20
0C98D 8D 06 20                      STA PPU_ADDR
0C990 A9 BE                         LDA #$BE
0C992 8D 06 20                      STA PPU_ADDR
0C995 A9 3A                         LDA #$3A
0C997 8D 07 20                      STA PPU_DATA
0C99A                               ;; (added background tile for Sprite-0 hit)
0C99A A9 3F                         LDA #$3F
0C99C 8D 07 20                      STA PPU_DATA
0C99F                           
0C99F A9 23                         LDA #$23
0C9A1 8D 06 20                      STA PPU_ADDR
0C9A4 A9 41                         LDA #$41
0C9A6 8D 06 20                      STA PPU_ADDR
0C9A9 A9 36                         LDA #$36
0C9AB 8D 07 20                      STA PPU_DATA
0C9AE                           
0C9AE A9 23                         LDA #$23
0C9B0 8D 06 20                      STA PPU_ADDR
0C9B3 A9 5E                         LDA #$5E
0C9B5 8D 06 20                      STA PPU_ADDR
0C9B8 A9 34                         LDA #$34
0C9BA 8D 07 20                      STA PPU_DATA
0C9BD                           
0C9BD                           
0C9BD                               ;; Draw the hud labels
0C9BD A9 20                         LDA #$20
0C9BF 8D 06 20                      STA PPU_ADDR
0C9C2 A9 62                         LDA #$62
0C9C4 8D 06 20                      STA PPU_ADDR
0C9C7 A2 00                         LDX #$00
0C9C9                               -
0C9C9 BD DF D4                          LDA tbl_HudText,x
0C9CC 8D 07 20                          STA PPU_DATA
0C9CF E8                                INX
0C9D0 E0 1C                             CPX #28
0C9D2 D0 F5                         BNE -
0C9D4                           
0C9D4                           
0C9D4                               ;; Draw the current score
0C9D4 A9 20                         LDA #$20
0C9D6 8D 06 20                      STA PPU_ADDR
0C9D9 A9 83                         LDA #$83
0C9DB 8D 06 20                      STA PPU_ADDR
0C9DE A2 00                         LDX #$00
0C9E0                               -
0C9E0 B5 20                             LDA ball_score,x
0C9E2 18                                CLC
0C9E3 69 01                             ADC #$01
0C9E5 8D 07 20                          STA PPU_DATA
0C9E8 E8                                INX
0C9E9 E0 06                             CPX #$06
0C9EB D0 F3                         BNE -
0C9ED                           
0C9ED                           
0C9ED                               ;; Draw the level number
0C9ED                               ;; (with primitive HEX>DEC)
0C9ED A5 3D                         LDA current_level
0C9EF 18                            CLC
0C9F0 69 01                         ADC #$01
0C9F2 85 01                         STA temp+1
0C9F4                               
0C9F4 C9 14                         CMP #20
0C9F6 B0 13                         BCS +tempIsTwo
0C9F8                               
0C9F8 C9 0A                         CMP #10
0C9FA B0 05                         BCS +tempIsOne
0C9FC                               
0C9FC A9 00                         LDA #$00
0C9FE 4C 12 CA                      JMP +setTemp
0CA01                               
0CA01                           +tempIsOne:
0CA01 38                            SEC
0CA02 E9 0A                         SBC #10
0CA04 85 01                         STA temp+1
0CA06 A9 01                         LDA #$01
0CA08 4C 12 CA                      JMP +setTemp
0CA0B                               
0CA0B                           +tempIsTwo:
0CA0B 38                            SEC
0CA0C E9 14                         SBC #20
0CA0E 85 01                         STA temp+1
0CA10 A9 02                         LDA #$02
0CA12                           
0CA12                           +setTemp:
0CA12 85 00                         STA temp
0CA14                               
0CA14 E6 00                         INC temp
0CA16 E6 01                         INC temp+1
0CA18                               
0CA18 A9 20                         LDA #$20
0CA1A 8D 06 20                      STA PPU_ADDR
0CA1D A9 8B                         LDA #$8B
0CA1F 8D 06 20                      STA PPU_ADDR
0CA22 A5 00                         LDA temp
0CA24 8D 07 20                      STA PPU_DATA
0CA27 A5 01                         LDA temp+1
0CA29 8D 07 20                      STA PPU_DATA
0CA2C                           
0CA2C                           
0CA2C                               ;; Draw lives (presumes lives to be capped at 9)
0CA2C A9 20                         LDA #$20
0CA2E 8D 06 20                      STA PPU_ADDR
0CA31 A9 92                         LDA #$92
0CA33 8D 06 20                      STA PPU_ADDR
0CA36 A6 1F                         LDX ball_lives
0CA38 E8                            INX
0CA39 8E 07 20                      STX PPU_DATA
0CA3C                           
0CA3C                           
0CA3C                               ;; Set and draw bonus
0CA3C A9 07                         LDA #$07
0CA3E 85 2C                         STA ball_bonus
0CA40 A9 09                         LDA #$09
0CA42 85 2D                         STA ball_bonus+1
0CA44 85 2E                         STA ball_bonus+2
0CA46                               
0CA46 A9 20                         LDA #$20
0CA48 8D 06 20                      STA PPU_ADDR
0CA4B A9 9A                         LDA #$9A
0CA4D 8D 06 20                      STA PPU_ADDR
0CA50 A2 00                         LDX #$00
0CA52                               -
0CA52 B5 2C                             LDA ball_bonus,x
0CA54 18                                CLC
0CA55 69 01                             ADC #$01
0CA57 8D 07 20                          STA PPU_DATA
0CA5A E8                                INX
0CA5B E0 03                             CPX #$03
0CA5D D0 F3                         BNE -
0CA5F                           
0CA5F                           
0CA5F                               ;; Set attribute data to RAM
0CA5F                               
0CA5F                               ;; Byte 0-7 of attribute ram should be #%10100000
0CA5F A2 00                         LDX #$00
0CA61 A9 A0                         LDA #$A0
0CA63                               -
0CA63 9D A0 04                          STA tile_attributes,x
0CA66 E8                                INX
0CA67 E0 08                             CPX #$08
0CA69 D0 F8                         BNE -
0CA6B                           
0CA6B                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CA6B                           
0CA6B                           -attributeLoop:
0CA6B                               ;; Reset current attribute value
0CA6B A9 00                         LDA #$00
0CA6D 85 02                         STA temp+2
0CA6F                           
0CA6F                               ;; Get first metatile in tile ram based on attribute index
0CA6F                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CA6F 8A                            TXA
0CA70                           
0CA70 38                            SEC
0CA71 E9 08                         SBC #$08
0CA73 85 01                         STA temp+1      ; attr - 8 (temp1)
0CA75 0A                            ASL             ; * 2
0CA76 85 00                         STA temp        ; temp = temp1 * 2
0CA78                           
0CA78 A5 01                         LDA temp+1      ; temp1
0CA7A 29 F8                         AND #%11111000  ; rounded down to 8's
0CA7C 0A                            ASL             ; * 2
0CA7D 18                            CLC
0CA7E 65 00                         ADC temp        ; + temp1 * 2
0CA80 85 00                         STA temp        ; first metatile
0CA82                           
0CA82                               ;; Store first metatile in y-register
0CA82 A8                            TAY
0CA83                           
0CA83                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CA83 8A                            TXA
0CA84 29 07                         AND #%00000111
0CA86 C9 07                         CMP #%00000111
0CA88 F0 0B                         BEQ +
0CA8A                           
0CA8A                               ;; If X >= $30, don't apply bottom right metatile
0CA8A E0 30                         CPX #$30
0CA8C B0 07                         BCS +
0CA8E                               
0CA8E                               ;; Add metatile1 subpalette to attribute value
0CA8E B9 00 04                      LDA tile_type,y
0CA91 29 0C                         AND #%00001100
0CA93 85 02                         STA temp+2
0CA95                               +
0CA95                           
0CA95                           
0CA95                               ;; Apply second metatile
0CA95 88                            DEY
0CA96                           
0CA96                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CA96 8A                            TXA
0CA97 29 07                         AND #%00000111
0CA99 F0 10                         BEQ +
0CA9B                           
0CA9B                               ;; If X >= $30, don't apply bottom left metatile
0CA9B E0 30                         CPX #$30
0CA9D B0 0C                         BCS +
0CA9F                           
0CA9F                           
0CA9F                           
0CA9F                               ;; Add metatile2 subpalette to attribute value
0CA9F B9 00 04                      LDA tile_type,y
0CAA2 29 0C                         AND #%00001100
0CAA4 4A                            LSR
0CAA5 4A                            LSR
0CAA6 05 02                         ORA temp+2
0CAA8 4C AD CA                      JMP ++
0CAAB                               +
0CAAB A5 02                         LDA temp+2
0CAAD                               ++
0CAAD 0A                            ASL
0CAAE 0A                            ASL
0CAAF 85 02                         STA temp+2
0CAB1                           
0CAB1                           
0CAB1                               ;; Apply third metatile
0CAB1 98                            TYA
0CAB2 38                            SEC
0CAB3 E9 0F                         SBC #$0F
0CAB5 A8                            TAY
0CAB6                           
0CAB6                               ;; If X MOD 8 == 7, don't apply top right metatile
0CAB6 8A                            TXA
0CAB7 29 07                         AND #%00000111
0CAB9 C9 07                         CMP #%00000111
0CABB F0 11                         BEQ +
0CABD                           
0CABD                               ;; If X < $10, don't apply top right metatile
0CABD 8A                            TXA
0CABE 29 F0                         AND #%11110000
0CAC0 F0 0C                         BEQ +
0CAC2                           
0CAC2                               ;; Add metatile3 subpalette to attribute value
0CAC2 B9 00 04                      LDA tile_type,y
0CAC5 29 0C                         AND #%00001100
0CAC7 4A                            LSR
0CAC8 4A                            LSR
0CAC9 05 02                         ORA temp+2
0CACB 4C D0 CA                      JMP ++
0CACE                               +
0CACE A5 02                         LDA temp+2
0CAD0                               ++
0CAD0 0A                            ASL
0CAD1 0A                            ASL
0CAD2 85 02                         STA temp+2
0CAD4                           
0CAD4                           
0CAD4                               ;; Apply fourth metatile
0CAD4 88                            DEY
0CAD5                           
0CAD5                               ;; If X MOD 8 == 0, don't apply top left metatile
0CAD5 8A                            TXA
0CAD6 29 07                         AND #%00000111
0CAD8 F0 11                         BEQ +
0CADA                           
0CADA                               ;; If X < $10, don't apply top left metatile
0CADA 8A                            TXA
0CADB 29 F0                         AND #%11110000
0CADD F0 0C                         BEQ +
0CADF                           
0CADF                               ;; Add metatile4 subpalette to attribute value
0CADF B9 00 04                      LDA tile_type,y
0CAE2 29 0C                         AND #%00001100
0CAE4 4A                            LSR
0CAE5 4A                            LSR
0CAE6 05 02                         ORA temp+2
0CAE8 4C ED CA                      JMP ++
0CAEB                               +
0CAEB A5 02                         LDA temp+2
0CAED                               ++
0CAED 9D A0 04                      STA tile_attributes,x
0CAF0                           
0CAF0                               ;; Check the next attribute, if any left
0CAF0 E8                            INX
0CAF1 E0 38                         CPX #$38
0CAF3 F0 03                         BEQ +
0CAF5 4C 6B CA                          JMP -attributeLoop
0CAF8                               +
0CAF8                           
0CAF8                               ;; Stream attribute RAM to PPU
0CAF8 2C 02 20                      BIT PPU_STATUS
0CAFB A9 23                         LDA #$23
0CAFD 8D 06 20                      STA PPU_ADDR
0CB00 A9 C0                         LDA #$C0
0CB02 8D 06 20                      STA PPU_ADDR
0CB05 A2 00                         LDX #$00
0CB07                               -
0CB07 BD A0 04                          LDA tile_attributes,x
0CB0A 8D 07 20                          STA PPU_DATA
0CB0D E8                                INX
0CB0E E0 40                             CPX #$40
0CB10 D0 F5                         BNE -
0CB12                           
0CB12                               ;; Set initial ball position
0CB12 A6 3D                         LDX current_level
0CB14 BD 6C D4                      LDA tbl_lvl_ball_startpos,x
0CB17 29 F0                         AND #%11110000
0CB19 18                            CLC
0CB1A 69 34                         ADC #$34
0CB1C 85 19                         STA ball_ypos_hi
0CB1E BD 6C D4                      LDA tbl_lvl_ball_startpos,x
0CB21 0A                            ASL
0CB22 0A                            ASL
0CB23 0A                            ASL
0CB24 0A                            ASL
0CB25 18                            CLC
0CB26 69 14                         ADC #$14
0CB28 85 17                         STA ball_xpos_hi
0CB2A A9 00                         LDA #$00
0CB2C 85 18                         STA ball_xpos_lo
0CB2E 85 1A                         STA ball_ypos_lo
0CB30                               
0CB30                               ;; Set initial ball color and direction
0CB30 BD 85 D4                      LDA tbl_lvl_ball_init,x
0CB33 29 F0                         AND #%11110000
0CB35 85 36                         STA ball_flags
0CB37 20 C8 C4                      JSR sub_ColorizeBall
0CB3A                               
0CB3A                               ;; Play background noise
0CB3A A9 08                         LDA #$08
0CB3C 8D 15 40                      STA APU_STATUS
0CB3F 8D 0F 40                      STA NOISE_LENGTH
0CB42 A9 0E                         LDA #$0E
0CB44 85 41                         STA current_noise
0CB46 A9 00                         LDA #$00
0CB48 85 3F                         STA max_noise
0CB4A 85 42                         STA noise_counter
0CB4C 85 40                         STA sweep_noise
0CB4E 20 50 C4                      JSR sub_BackgroundNoise
0CB51                           
0CB51                               ;; Return
0CB51 60                            RTS
0CB52                           
0CB52                           
0CB52                           ;; Subroutine: draw 28 tiles in a row
0CB52                           sub_Draw28HorizontalTiles:
0CB52 A2 1C                         LDX #28
0CB54                               -
0CB54 8D 07 20                          STA PPU_DATA
0CB57 CA                                DEX
0CB58 D0 FA                         BNE -
0CB5A 60                            RTS0CB5B                           .include "game/subroutine/LoadIntroScreen.asm"
0CB5B                           sub_LoadIntroScreen:
0CB5B                           
0CB5B                               ;; Load intro palette
0CB5B 2C 02 20                      BIT PPU_STATUS
0CB5E A9 3F                         LDA #$3F
0CB60 8D 06 20                      STA PPU_ADDR
0CB63 A9 00                         LDA #$00
0CB65 8D 06 20                      STA PPU_ADDR
0CB68 A2 00                         LDX #$00
0CB6A                               -
0CB6A BD 11 CC                          LDA tbl_IntroScreenPalette,x
0CB6D 8D 07 20                          STA PPU_DATA
0CB70 E8                                INX
0CB71 E0 20                             CPX #$20
0CB73 D0 F5                         BNE -
0CB75                               
0CB75                               ;; Put ball in the middle
0CB75 A9 7C                         LDA #$7C
0CB77 85 17                         STA ball_xpos_hi
0CB79 85 19                         STA ball_ypos_hi
0CB7B                           
0CB7B                               ;; Clear the screen
0CB7B 20 5D C4                      JSR sub_ClearScreen
0CB7E                           
0CB7E                               ;; Set up intro screen draw loop
0CB7E A2 00                         LDX #$00
0CB80                           
0CB80                           -loop_IntroScreenData:
0CB80                           
0CB80                               ;; Get current byte from intro screen data
0CB80 BD 39 CC                      LDA tbl_IntroScreenData,x
0CB83                           
0CB83                               ;; If current byte is #$3F, we're done drawing.
0CB83 C9 3F                         CMP #$3F
0CB85 D0 03                         BNE +
0CB87 4C D4 CB                          JMP +goToEndIntroScreen
0CB8A                               +
0CB8A                           
0CB8A                               ;; If highest bits are %11, draw a plain tile
0CB8A 29 C0                         AND #%11000000
0CB8C D0 03                         BNE +
0CB8E 4C B4 CB                          JMP +drawTile
0CB91                               +
0CB91                               
0CB91                               ;; If highest bits are %01, set the PPU address
0CB91                               ;; If not, draw two logo tiles
0CB91 C9 40                         CMP #%01000000
0CB93 D0 03                         BNE +drawLogo
0CB95 4C BE CB                          JMP +setPpuAddr
0CB98                           
0CB98                           +drawLogo:
0CB98                               ;; Get bits 0-2 and store in a temp variable
0CB98 BD 39 CC                      LDA tbl_IntroScreenData,x
0CB9B 29 07                         AND #%00000111
0CB9D 85 00                         STA temp
0CB9F                               
0CB9F                               ;; Get bits 3-5, shift over to get a value from 0-7
0CB9F BD 39 CC                      LDA tbl_IntroScreenData,x
0CBA2 4A                            LSR
0CBA3 4A                            LSR
0CBA4 4A                            LSR
0CBA5 29 07                         AND #%00000111
0CBA7                               
0CBA7                               ;; Draw the tile that corresponds with that value
0CBA7 A8                            TAY
0CBA8 20 40 C5                      JSR sub_drawIntroScreenLogoTile
0CBAB                               
0CBAB                               ;; Do the same for the value stored in temp
0CBAB A4 00                         LDY temp
0CBAD 20 40 C5                      JSR sub_drawIntroScreenLogoTile
0CBB0                           
0CBB0                               ;; Next byte please
0CBB0 E8                            INX
0CBB1 4C 80 CB                      JMP -loop_IntroScreenData
0CBB4                           
0CBB4                           +drawTile:
0CBB4                               ;; Just draw the tile value on screen
0CBB4 BD 39 CC                      LDA tbl_IntroScreenData,x
0CBB7 8D 07 20                      STA PPU_DATA
0CBBA                               
0CBBA                               ;; Next byte please
0CBBA E8                            INX
0CBBB 4C 80 CB                      JMP -loop_IntroScreenData
0CBBE                           
0CBBE                           
0CBBE                           +setPpuAddr:
0CBBE                               ;; Reset the PPU latch
0CBBE 2C 02 20                      BIT PPU_STATUS
0CBC1                               
0CBC1                               ;; Sanitize and write the high byte of the PPU address
0CBC1 BD 39 CC                      LDA tbl_IntroScreenData,x
0CBC4 29 3F                         AND #%00111111
0CBC6 8D 06 20                      STA PPU_ADDR
0CBC9                           
0CBC9                               ;; Write the low byte of the PPU address
0CBC9 E8                            INX
0CBCA BD 39 CC                      LDA tbl_IntroScreenData,x
0CBCD 8D 06 20                      STA PPU_ADDR
0CBD0                               
0CBD0                               ;; PPU has been set up to draw tiles at the correct spot now.
0CBD0                               
0CBD0                               ;; Next byte please.
0CBD0 E8                            INX
0CBD1 4C 80 CB                      JMP -loop_IntroScreenData
0CBD4                           
0CBD4                           +goToEndIntroScreen:
0CBD4                           
0CBD4                               ;; To color the 1.LEVEL: line green, we need to update two
0CBD4                               ;; values in the PPU attribute data.
0CBD4 2C 02 20                      BIT PPU_STATUS
0CBD7 A9 23                         LDA #$23
0CBD9 8D 06 20                      STA PPU_ADDR
0CBDC A9 CB                         LDA #$CB
0CBDE 8D 06 20                      STA PPU_ADDR
0CBE1 A9 0A                         LDA #%00001010
0CBE3 8D 07 20                      STA PPU_DATA
0CBE6 8D 07 20                      STA PPU_DATA
0CBE9                           
0CBE9 60                            RTS
0CBEA                           
0CBEA                           .include "game/subroutine/LoadWinScreen.asm"
0CBEA                           sub_LoadWinScreen:
0CBEA 60                            RTS
0CBEB                           
0CBEB                           .include "game/subroutine/WriteByteToPPU.asm"
0CBEB                           sub_WriteByteToPPUBuffer:
0CBEB                           
0CBEB                               ;; Prevent updating until full 3-byte buffer is filled,
0CBEB                               ;; so that graphics won't glitch out if NMI happens during
0CBEB                               ;; updating the buffer
0CBEB A9 00                         LDA #$00
0CBED 85 38                         STA ppu_buffer_update
0CBEF                           
0CBEF                               ;; Check if buffer full; if so, wait a frame and force update
0CBEF A4 39                         LDY ppu_buffer_pointer
0CBF1 C0 30                         CPY #$30
0CBF3 D0 05                         BNE +
0CBF5 E6 38                             INC ppu_buffer_update
0CBF7 20 EB C3                          JSR sub_WaitForVBlank
0CBFA                               +
0CBFA                           
0CBFA                               ;; Add ppu_addr high byte to buffer
0CBFA A5 00                         LDA temp
0CBFC 99 00 03                      STA ppu_buffer,y
0CBFF                           
0CBFF                               ;; Add ppu_addr low byte to buffer
0CBFF C8                            INY
0CC00 A5 01                         LDA temp+1
0CC02 99 00 03                      STA ppu_buffer,y
0CC05                           
0CC05                               ;; Add ppu_data to buffer
0CC05 C8                            INY
0CC06 A5 02                         LDA temp+2
0CC08 99 00 03                      STA ppu_buffer,y
0CC0B                           
0CC0B                               ;; Update buffer pointer
0CC0B C8                            INY
0CC0C 84 39                         STY ppu_buffer_pointer
0CC0E                           
0CC0E                               ;; Tell NMI to update next round
0CC0E E6 38                         INC ppu_buffer_update
0CC10                           
0CC10                               ;; Return
0CC10 60                            RTS0CC11                           
0CC11                           
0CC11                           ;; LUTs
0CC11                           .include "game/include/tables.asm"
0CC11                           
0CC11                           ;; Initial screen palette
0CC11                           tbl_IntroScreenPalette:
0CC11 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CC15 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CC19 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CC1D 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CC21                           
0CC21 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CC25 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CC29 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CC2D 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CC31                           
0CC31                           
0CC31                           ;; Intro: mapping logo index to chr tile
0CC31                           tbl_IntroScreenLogoChr:
0CC31 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CC39                           
0CC39                           
0CC39                           ;; Intro screen data
0CC39                           tbl_IntroScreenData:
0CC39                           
0CC39                               ;; Set PPU address $20AC and draw
0CC39 60 AC                         .db #$60, #$AC
0CC3B 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CC43                           
0CC43                               ;; Set PPU address $20CF and draw
0CC43 60 CF                         .db #$60, #$CF
0CC45 01 02                         .db #_0, #_1
0CC47                               
0CC47                               ;; Set PPU address $2122 and draw
0CC47 61 22                         .db #$61, #$22
0CC49 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CC50 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CC56 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CC5E 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CC63                               
0CC63                               ;; Set PPU address $2147 and draw
0CC63 61 47                         .db #$61, #$47
0CC65 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CC6C 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CC70 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CC76 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CC7C                               
0CC7C                               ;; Set PPU address $218B and draw
0CC7C 61 8B                         .db #$61, #$8B
0CC7E 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CC84 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CC89                               
0CC89                               ;; Set PPU address $21E6 and draw
0CC89 61 E6                         .db #$61, #$E6
0CC8B 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CC93 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CC97 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CC9E                               
0CC9E                               ;; Set PPU address $222D and draw
0CC9E 62 2D                         .db #$62, #$2D
0CCA0 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CCA6                               
0CCA6                               ;; Set PPU address $2281
0CCA6 62 81                         .db #$62, #$81
0CCA8                               
0CCA8                               ;; Draw the Crillion logo
0CCA8 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CCAC C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCB0 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CCB4 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CCB8                               
0CCB8 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CCBC C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCC0 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CCC4 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CCC8                               
0CCC8 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CCCC C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCD0 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CCD4 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CCD8                           
0CCD8 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CCDC C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCE0 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CCE4 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CCE8                               
0CCE8 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CCEC C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCF0 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CCF4 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CCF8                           
0CCF8 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CCFC C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CD00 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CD04 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CD07                           
0CD07                               ;; End of intro
0CD07 3F                            .db #$3F
0CD08                           
0CD08                           
0CD08                           ;; Animation frames table
0CD08                           .include "game/include/table/animation_frames.asm"
0CD08                           ;; CHR tile-id's per slide of explosion
0CD08                           explosion_slide0:
0CD08 00 00 00                      .db #$00, #$00, #$00
0CD0B 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CD0E 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CD11                           
0CD11                           explosion_slide1:
0CD11 00 00 00                      .db #$00, #$00, #$00
0CD14 29 2A 2B                      .db #$29, #$2A, #$2B
0CD17 39 3A 3B                      .db #$39, #$3A, #$3B
0CD1A                           
0CD1A                           explosion_slide2:
0CD1A 16 00 00                      .db #$16, #$00, #$00
0CD1D 26 27 28                      .db #$26, #$27, #$28
0CD20 36 37 38                      .db #$36, #$37, #$38
0CD23                           
0CD23                           explosion_slide3:
0CD23 00 14 15                      .db #$00, #$14, #$15
0CD26 23 24 25                      .db #$23, #$24, #$25
0CD29 33 34 35                      .db #$33, #$34, #$35
0CD2C                           
0CD2C                           explosion_slide4:
0CD2C 10 11 12                      .db #$10, #$11, #$12
0CD2F 20 21 22                      .db #$20, #$21, #$22
0CD32 30 31 32                      .db #$30, #$31, #$32
0CD35                           
0CD35                           ;; High and low bytes of animation slides
0CD35                           explosion_anim_hi:
0CD35 CD                            .db >#explosion_slide0
0CD36 CD                            .db >#explosion_slide1
0CD37 CD                            .db >#explosion_slide2
0CD38 CD                            .db >#explosion_slide3
0CD39 CD                            .db >#explosion_slide4
0CD3A CD                            .db >#explosion_slide4
0CD3B CD                            .db >#explosion_slide3
0CD3C CD                            .db >#explosion_slide2
0CD3D CD                            .db >#explosion_slide1
0CD3E CD                            .db >#explosion_slide0
0CD3F                           
0CD3F                           explosion_anim_lo:
0CD3F 08                            .db <#explosion_slide0
0CD40 11                            .db <#explosion_slide1
0CD41 1A                            .db <#explosion_slide2
0CD42 23                            .db <#explosion_slide3
0CD43 2C                            .db <#explosion_slide4
0CD44 2C                            .db <#explosion_slide4
0CD45 23                            .db <#explosion_slide3
0CD46 1A                            .db <#explosion_slide2
0CD47 11                            .db <#explosion_slide1
0CD48 08                            .db <#explosion_slide0
0CD49                           
0CD49                           
0CD49                           
0CD49                           ;; Ball palette color table (CBRYGM)
0CD49                           tbl_BallColorDark:
0CD49 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CD4F                            
0CD4F                           tbl_BallColorLight:
0CD4F 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CD55                           
0CD55                               
0CD55                           ;; Screen mode drawing routine addresses
0CD55                           tbl_LoadScreenHi:
0CD55 CB C7 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CD58                           
0CD58                           tbl_LoadScreenLo:
0CD58 5B B3 EA                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CD5B                           
0CD5B                           
0CD5B                           ;; Level data
0CD5B                           .include "game/include/table/level_data.asm"
0CD5B                           lvl_layout_01:
0CD5B 61 21                         .db #$61, #%00100001
0CD5D 52 61                         .db #$52, #%01100001
0CD5F 43 65                         .db #$43, #%01100101
0CD61 83 05                         .db #$83, #%00000101
0CD63 93 15                         .db #$93, #%00010101
0CD65 34 7A                         .db #$34, #%01111010
0CD67 74 7A                         .db #$74, #%01111010
0CD69 35 7A                         .db #$35, #%01111010
0CD6B 75 7A                         .db #$75, #%01111010
0CD6D 46 65                         .db #$46, #%01100101
0CD6F 86 25                         .db #$86, #%00100101
0CD71 57 61                         .db #$57, #%01100001
0CD73 68 21                         .db #$68, #%00100001
0CD75 FF                            .db #LEVEL_END
0CD76                           
0CD76                           lvl_layout_02:
0CD76 C0 0A                         .db #$C0, #%00001010
0CD78 11 15                         .db #$11, #%00010101
0CD7A 21 62                         .db #$21, #%01100010
0CD7C 61 62                         .db #$61, #%01100010
0CD7E A1 42                         .db #$A1, #%01000010
0CD80 12 67                         .db #$12, #%01100111
0CD82 52 67                         .db #$52, #%01100111
0CD84 92 67                         .db #$92, #%01100111
0CD86 C3 0D                         .db #$C3, #%00001101
0CD88 14 11                         .db #$14, #%00010001
0CD8A 24 65                         .db #$24, #%01100101
0CD8C 64 65                         .db #$64, #%01100101
0CD8E A4 45                         .db #$A4, #%01000101
0CD90 15 67                         .db #$15, #%01100111
0CD92 55 67                         .db #$55, #%01100111
0CD94 95 67                         .db #$95, #%01100111
0CD96 17 12                         .db #$17, #%00010010
0CD98 27 61                         .db #$27, #%01100001
0CD9A 67 61                         .db #$67, #%01100001
0CD9C A7 41                         .db #$A7, #%01000001
0CD9E 38 7A                         .db #$38, #%01111010
0CDA0 98 5A                         .db #$98, #%01011010
0CDA2 18 27                         .db #$18, #%00100111
0CDA4 48 27                         .db #$48, #%00100111
0CDA6 78 27                         .db #$78, #%00100111
0CDA8 C8 07                         .db #$C8, #%00000111
0CDAA FF                            .db #LEVEL_END
0CDAB                           
0CDAB                           lvl_layout_03:
0CDAB 00 7A                         .db #$00, #%01111010
0CDAD 40 7A                         .db #$40, #%01111010
0CDAF 80 7A                         .db #$80, #%01111010
0CDB1 C0 1A                         .db #$C0, #%00011010
0CDB3 10 A1                         .db #$10, #%10100001
0CDB5 13 E1                         .db #$13, #%11100001
0CDB7 17 C1                         .db #$17, #%11000001
0CDB9 30 C1                         .db #$30, #%11000001
0CDBB 34 C1                         .db #$34, #%11000001
0CDBD 38 A1                         .db #$38, #%10100001
0CDBF 50 E1                         .db #$50, #%11100001
0CDC1 55 81                         .db #$55, #%10000001
0CDC3 57 C1                         .db #$57, #%11000001
0CDC5 70 C1                         .db #$70, #%11000001
0CDC7 73 A1                         .db #$73, #%10100001
0CDC9 76 E1                         .db #$76, #%11100001
0CDCB 90 E1                         .db #$90, #%11100001
0CDCD 95 81                         .db #$95, #%10000001
0CDCF 97 C1                         .db #$97, #%11000001
0CDD1 B0 C1                         .db #$B0, #%11000001
0CDD3 B4 C1                         .db #$B4, #%11000001
0CDD5 B8 A1                         .db #$B8, #%10100001
0CDD7 D0 A1                         .db #$D0, #%10100001
0CDD9 D3 E1                         .db #$D3, #%11100001
0CDDB D7 C1                         .db #$D7, #%11000001
0CDDD FF                            .db #LEVEL_END
0CDDE                           
0CDDE                           lvl_layout_04:
0CDDE 00 4C                         .db #$00, #%01001100
0CDE0 40 6C                         .db #$40, #%01101100
0CDE2 80 4C                         .db #$80, #%01001100
0CDE4 81 AC                         .db #$81, #%10101100
0CDE6 C1 2C                         .db #$C1, #%00101100
0CDE8 02 6C                         .db #$02, #%01101100
0CDEA 42 CC                         .db #$42, #%11001100
0CDEC 62 EC                         .db #$62, #%11101100
0CDEE A2 CC                         .db #$A2, #%11001100
0CDF0 C3 CC                         .db #$C3, #%11001100
0CDF2 04 4C                         .db #$04, #%01001100
0CDF4 84 2C                         .db #$84, #%00101100
0CDF6 25 AC                         .db #$25, #%10101100
0CDF8 85 AC                         .db #$85, #%10101100
0CDFA 06 AC                         .db #$06, #%10101100
0CDFC 36 CC                         .db #$36, #%11001100
0CDFE 56 CC                         .db #$56, #%11001100
0CE00 66 EC                         .db #$66, #%11101100
0CE02 96 6C                         .db #$96, #%01101100
0CE04 C7 AC                         .db #$C7, #%10101100
0CE06 08 2C                         .db #$08, #%00101100
0CE08 78 6C                         .db #$78, #%01101100
0CE0A D8 0C                         .db #$D8, #%00001100
0CE0C 30 A1                         .db #$30, #%10100001
0CE0E B0 21                         .db #$B0, #%00100001
0CE10 01 41                         .db #$01, #%01000001
0CE12 41 61                         .db #$41, #%01100001
0CE14 91 A1                         .db #$91, #%10100001
0CE16 A1 21                         .db #$A1, #%00100001
0CE18 52 C1                         .db #$52, #%11000001
0CE1A 72 E1                         .db #$72, #%11100001
0CE1C B2 C1                         .db #$B2, #%11000001
0CE1E C2 21                         .db #$C2, #%00100001
0CE20 03 41                         .db #$03, #%01000001
0CE22 33 C1                         .db #$33, #%11000001
0CE24 83 21                         .db #$83, #%00100001
0CE26 D3 E1                         .db #$D3, #%11100001
0CE28 05 21                         .db #$05, #%00100001
0CE2A 45 E1                         .db #$45, #%11100001
0CE2C A5 21                         .db #$A5, #%00100001
0CE2E 16 A1                         .db #$16, #%10100001
0CE30 76 A1                         .db #$76, #%10100001
0CE32 27 A1                         .db #$27, #%10100001
0CE34 57 01                         .db #$57, #%00000001
0CE36 87 41                         .db #$87, #%01000001
0CE38 B7 A1                         .db #$B7, #%10100001
0CE3A 19 21                         .db #$19, #%00100001
0CE3C 39 41                         .db #$39, #%01000001
0CE3E 89 41                         .db #$89, #%01000001
0CE40 C9 21                         .db #$C9, #%00100001
0CE42 D0 1A                         .db #$D0, #%00011010
0CE44 55 1A                         .db #$55, #%00011010
0CE46 95 1A                         .db #$95, #%00011010
0CE48 D7 1A                         .db #$D7, #%00011010
0CE4A 09 1A                         .db #$09, #%00011010
0CE4C 79 1A                         .db #$79, #%00011010
0CE4E FF                            .db #LEVEL_END
0CE4F                           
0CE4F                           lvl_layout_05:
0CE4F 40 0A                         .db #$40, #%00001010
0CE51 70 1A                         .db #$70, #%00011010
0CE53 B0 42                         .db #$B0, #%01000010
0CE55 41 A7                         .db #$41, #%10100111
0CE57 B1 22                         .db #$B1, #%00100010
0CE59 D1 15                         .db #$D1, #%00010101
0CE5B 22 0A                         .db #$22, #%00001010
0CE5D 52 05                         .db #$52, #%00000101
0CE5F B2 42                         .db #$B2, #%01000010
0CE61 03 27                         .db #$03, #%00100111
0CE63 33 67                         .db #$33, #%01100111
0CE65 73 67                         .db #$73, #%01100111
0CE67 B3 47                         .db #$B3, #%01000111
0CE69 05 E5                         .db #$05, #%11100101
0CE6B 25 A5                         .db #$25, #%10100101
0CE6D 35 25                         .db #$35, #%00100101
0CE6F 65 45                         .db #$65, #%01000101
0CE71 A5 45                         .db #$A5, #%01000101
0CE73 46 E5                         .db #$46, #%11100101
0CE75 66 E5                         .db #$66, #%11100101
0CE77 86 E5                         .db #$86, #%11100101
0CE79 A6 E2                         .db #$A6, #%11100010
0CE7B C6 E5                         .db #$C6, #%11100101
0CE7D 27 25                         .db #$27, #%00100101
0CE7F 77 05                         .db #$77, #%00000101
0CE81 B7 02                         .db #$B7, #%00000010
0CE83 09 05                         .db #$09, #%00000101
0CE85 79 05                         .db #$79, #%00000101
0CE87 B9 02                         .db #$B9, #%00000010
0CE89 FF                            .db #LEVEL_END
0CE8A                           
0CE8A                           lvl_layout_06:
0CE8A 00 03                         .db #$00, #%00000011
0CE8C 20 03                         .db #$20, #%00000011
0CE8E 40 03                         .db #$40, #%00000011
0CE90 A0 03                         .db #$A0, #%00000011
0CE92 C0 03                         .db #$C0, #%00000011
0CE94 11 03                         .db #$11, #%00000011
0CE96 31 03                         .db #$31, #%00000011
0CE98 51 03                         .db #$51, #%00000011
0CE9A 91 03                         .db #$91, #%00000011
0CE9C B1 03                         .db #$B1, #%00000011
0CE9E D1 03                         .db #$D1, #%00000011
0CEA0 02 03                         .db #$02, #%00000011
0CEA2 22 03                         .db #$22, #%00000011
0CEA4 42 03                         .db #$42, #%00000011
0CEA6 A2 03                         .db #$A2, #%00000011
0CEA8 C2 03                         .db #$C2, #%00000011
0CEAA 13 03                         .db #$13, #%00000011
0CEAC 33 03                         .db #$33, #%00000011
0CEAE 53 03                         .db #$53, #%00000011
0CEB0 93 03                         .db #$93, #%00000011
0CEB2 B3 03                         .db #$B3, #%00000011
0CEB4 D3 03                         .db #$D3, #%00000011
0CEB6 04 03                         .db #$04, #%00000011
0CEB8 24 03                         .db #$24, #%00000011
0CEBA 44 03                         .db #$44, #%00000011
0CEBC A4 03                         .db #$A4, #%00000011
0CEBE C4 03                         .db #$C4, #%00000011
0CEC0 15 03                         .db #$15, #%00000011
0CEC2 35 03                         .db #$35, #%00000011
0CEC4 55 03                         .db #$55, #%00000011
0CEC6 95 03                         .db #$95, #%00000011
0CEC8 B5 03                         .db #$B5, #%00000011
0CECA D5 03                         .db #$D5, #%00000011
0CECC 06 03                         .db #$06, #%00000011
0CECE 26 03                         .db #$26, #%00000011
0CED0 46 03                         .db #$46, #%00000011
0CED2 A6 03                         .db #$A6, #%00000011
0CED4 C6 03                         .db #$C6, #%00000011
0CED6 17 03                         .db #$17, #%00000011
0CED8 37 03                         .db #$37, #%00000011
0CEDA 57 03                         .db #$57, #%00000011
0CEDC 97 03                         .db #$97, #%00000011
0CEDE B7 03                         .db #$B7, #%00000011
0CEE0 D7 03                         .db #$D7, #%00000011
0CEE2 08 03                         .db #$08, #%00000011
0CEE4 28 03                         .db #$28, #%00000011
0CEE6 48 03                         .db #$48, #%00000011
0CEE8 A8 03                         .db #$A8, #%00000011
0CEEA C8 03                         .db #$C8, #%00000011
0CEEC 19 03                         .db #$19, #%00000011
0CEEE 39 03                         .db #$39, #%00000011
0CEF0 59 03                         .db #$59, #%00000011
0CEF2 99 03                         .db #$99, #%00000011
0CEF4 B9 03                         .db #$B9, #%00000011
0CEF6 D9 03                         .db #$D9, #%00000011
0CEF8 60 4B                         .db #$60, #%01001011
0CEFA 71 CB                         .db #$71, #%11001011
0CEFC 62 4B                         .db #$62, #%01001011
0CEFE 64 4B                         .db #$64, #%01001011
0CF00 75 CB                         .db #$75, #%11001011
0CF02 66 4B                         .db #$66, #%01001011
0CF04 68 4B                         .db #$68, #%01001011
0CF06 79 0B                         .db #$79, #%00001011
0CF08 70 03                         .db #$70, #%00000011
0CF0A 72 03                         .db #$72, #%00000011
0CF0C 74 03                         .db #$74, #%00000011
0CF0E 76 03                         .db #$76, #%00000011
0CF10 78 03                         .db #$78, #%00000011
0CF12 FF                            .db #LEVEL_END
0CF13                           
0CF13                           lvl_layout_07:
0CF13 00 11                         .db #$00, #%00010001
0CF15 01 FA                         .db #$01, #%11111010
0CF17 12 BA                         .db #$12, #%10111010
0CF19 23 DA                         .db #$23, #%11011010
0CF1B 34 FA                         .db #$34, #%11111010
0CF1D 05 DA                         .db #$05, #%11011010
0CF1F 15 FA                         .db #$15, #%11111010
0CF21 45 BA                         .db #$45, #%10111010
0CF23 56 DA                         .db #$56, #%11011010
0CF25 27 BA                         .db #$27, #%10111010
0CF27 67 DA                         .db #$67, #%11011010
0CF29 38 3A                         .db #$38, #%00111010
0CF2B 78 BA                         .db #$78, #%10111010
0CF2D 09 3A                         .db #$09, #%00111010
0CF2F 39 3A                         .db #$39, #%00111010
0CF31 89 1A                         .db #$89, #%00011010
0CF33 B0 01                         .db #$B0, #%00000001
0CF35 D0 01                         .db #$D0, #%00000001
0CF37 A1 01                         .db #$A1, #%00000001
0CF39 C1 11                         .db #$C1, #%00010001
0CF3B B2 01                         .db #$B2, #%00000001
0CF3D D2 01                         .db #$D2, #%00000001
0CF3F A3 01                         .db #$A3, #%00000001
0CF41 C3 01                         .db #$C3, #%00000001
0CF43 B4 01                         .db #$B4, #%00000001
0CF45 D4 01                         .db #$D4, #%00000001
0CF47 A5 01                         .db #$A5, #%00000001
0CF49 C5 01                         .db #$C5, #%00000001
0CF4B B6 01                         .db #$B6, #%00000001
0CF4D D6 01                         .db #$D6, #%00000001
0CF4F A7 01                         .db #$A7, #%00000001
0CF51 C7 01                         .db #$C7, #%00000001
0CF53 FF                            .db #LEVEL_END
0CF54                           
0CF54                           lvl_layout_08:
0CF54 40 B5                         .db #$40, #%10110101
0CF56 31 0D                         .db #$31, #%00001101
0CF58 61 10                         .db #$61, #%00010000
0CF5A 42 C7                         .db #$42, #%11000111
0CF5C 52 67                         .db #$52, #%01100111
0CF5E 63 C7                         .db #$63, #%11000111
0CF60 83 E7                         .db #$83, #%11100111
0CF62 05 07                         .db #$05, #%00000111
0CF64 15 3A                         .db #$15, #%00111010
0CF66 07 63                         .db #$07, #%01100011
0CF68 27 13                         .db #$27, #%00010011
0CF6A 38 A5                         .db #$38, #%10100101
0CF6C 09 14                         .db #$09, #%00010100
0CF6E 19 05                         .db #$19, #%00000101
0CF70 D0 E0                         .db #$D0, #%11100000
0CF72 C2 A0                         .db #$C2, #%10100000
0CF74 B3 E0                         .db #$B3, #%11100000
0CF76 D5 E0                         .db #$D5, #%11100000
0CF78 C6 E0                         .db #$C6, #%11100000
0CF7A B0 C4                         .db #$B0, #%11000100
0CF7C C0 A4                         .db #$C0, #%10100100
0CF7E D1 A4                         .db #$D1, #%10100100
0CF80 C4 24                         .db #$C4, #%00100100
0CF82 C5 04                         .db #$C5, #%00000100
0CF84 B7 44                         .db #$B7, #%01000100
0CF86 B8 A4                         .db #$B8, #%10100100
0CF88 D9 05                         .db #$D9, #%00000101
0CF8A FF                            .db #LEVEL_END
0CF8B                           
0CF8B                           lvl_layout_09:
0CF8B 81 04                         .db #$81, #%00000100
0CF8D D1 04                         .db #$D1, #%00000100
0CF8F 32 C4                         .db #$32, #%11000100
0CF91 A2 C4                         .db #$A2, #%11000100
0CF93 C2 24                         .db #$C2, #%00100100
0CF95 13 24                         .db #$13, #%00100100
0CF97 53 04                         .db #$53, #%00000100
0CF99 C3 27                         .db #$C3, #%00100111
0CF9B 15 6C                         .db #$15, #%01101100
0CF9D 55 6C                         .db #$55, #%01101100
0CF9F 95 6C                         .db #$95, #%01101100
0CFA1 D5 0C                         .db #$D5, #%00001100
0CFA3 27 C7                         .db #$27, #%11000111
0CFA5 47 C7                         .db #$47, #%11000111
0CFA7 67 C7                         .db #$67, #%11000111
0CFA9 87 C7                         .db #$87, #%11000111
0CFAB A7 C7                         .db #$A7, #%11000111
0CFAD C7 C7                         .db #$C7, #%11000111
0CFAF 08 13                         .db #$08, #%00010011
0CFB1 28 15                         .db #$28, #%00010101
0CFB3 48 12                         .db #$48, #%00010010
0CFB5 68 15                         .db #$68, #%00010101
0CFB7 88 11                         .db #$88, #%00010001
0CFB9 A8 10                         .db #$A8, #%00010000
0CFBB C8 14                         .db #$C8, #%00010100
0CFBD 09 07                         .db #$09, #%00000111
0CFBF 19 03                         .db #$19, #%00000011
0CFC1 39 05                         .db #$39, #%00000101
0CFC3 59 02                         .db #$59, #%00000010
0CFC5 79 05                         .db #$79, #%00000101
0CFC7 99 01                         .db #$99, #%00000001
0CFC9 B9 00                         .db #$B9, #%00000000
0CFCB D9 04                         .db #$D9, #%00000100
0CFCD FF                            .db #LEVEL_END
0CFCE                           
0CFCE                           lvl_layout_10:
0CFCE 00 02                         .db #$00, #%00000010
0CFD0 10 C9                         .db #$10, #%11001001
0CFD2 50 C9                         .db #$50, #%11001001
0CFD4 90 C9                         .db #$90, #%11001001
0CFD6 D0 C9                         .db #$D0, #%11001001
0CFD8 31 C9                         .db #$31, #%11001001
0CFDA 71 C9                         .db #$71, #%11001001
0CFDC B1 C9                         .db #$B1, #%11001001
0CFDE 13 C9                         .db #$13, #%11001001
0CFE0 53 C9                         .db #$53, #%11001001
0CFE2 93 C9                         .db #$93, #%11001001
0CFE4 D3 C9                         .db #$D3, #%11001001
0CFE6 34 C9                         .db #$34, #%11001001
0CFE8 74 C9                         .db #$74, #%11001001
0CFEA B4 C9                         .db #$B4, #%11001001
0CFEC 16 C9                         .db #$16, #%11001001
0CFEE 56 C9                         .db #$56, #%11001001
0CFF0 96 C9                         .db #$96, #%11001001
0CFF2 D6 C9                         .db #$D6, #%11001001
0CFF4 37 C9                         .db #$37, #%11001001
0CFF6 77 C9                         .db #$77, #%11001001
0CFF8 B7 C9                         .db #$B7, #%11001001
0CFFA D8 12                         .db #$D8, #%00010010
0CFFC FF                            .db #LEVEL_END
0CFFD                           
0CFFD                           lvl_layout_11:
0CFFD 00 65                         .db #$00, #%01100101
0CFFF 40 45                         .db #$40, #%01000101
0D001 50 A7                         .db #$50, #%10100111
0D003 80 05                         .db #$80, #%00000101
0D005 90 A7                         .db #$90, #%10100111
0D007 A0 65                         .db #$A0, #%01100101
0D009 01 43                         .db #$01, #%01000011
0D00B 31 23                         .db #$31, #%00100011
0D00D 61 A7                         .db #$61, #%10100111
0D00F 81 A7                         .db #$81, #%10100111
0D011 A1 63                         .db #$A1, #%01100011
0D013 02 44                         .db #$02, #%01000100
0D015 32 44                         .db #$32, #%01000100
0D017 92 04                         .db #$92, #%00000100
0D019 A2 64                         .db #$A2, #%01100100
0D01B 03 40                         .db #$03, #%01000000
0D01D 33 40                         .db #$33, #%01000000
0D01F 63 A1                         .db #$63, #%10100001
0D021 83 A2                         .db #$83, #%10100010
0D023 93 00                         .db #$93, #%00000000
0D025 A3 60                         .db #$A3, #%01100000
0D027 04 41                         .db #$04, #%01000001
0D029 34 41                         .db #$34, #%01000001
0D02B 94 02                         .db #$94, #%00000010
0D02D A4 62                         .db #$A4, #%01100010
0D02F 05 47                         .db #$05, #%01000111
0D031 35 67                         .db #$35, #%01100111
0D033 75 0A                         .db #$75, #%00001010
0D035 85 47                         .db #$85, #%01000111
0D037 B5 47                         .db #$B5, #%01000111
0D039 06 E7                         .db #$06, #%11100111
0D03B 16 5A                         .db #$16, #%01011010
0D03D 26 11                         .db #$26, #%00010001
0D03F 46 13                         .db #$46, #%00010011
0D041 56 1A                         .db #$56, #%00011010
0D043 66 14                         .db #$66, #%00010100
0D045 86 10                         .db #$86, #%00010000
0D047 96 5A                         .db #$96, #%01011010
0D049 A6 12                         .db #$A6, #%00010010
0D04B C6 15                         .db #$C6, #%00010101
0D04D D6 E7                         .db #$D6, #%11100111
0D04F FF                            .db #LEVEL_END
0D050                           
0D050                           lvl_layout_12:
0D050 00 00                         .db #$00, #%00000000
0D052 50 C0                         .db #$50, #%11000000
0D054 80 00                         .db #$80, #%00000000
0D056 61 00                         .db #$61, #%00000000
0D058 22 C0                         .db #$22, #%11000000
0D05A 82 E0                         .db #$82, #%11100000
0D05C C2 E0                         .db #$C2, #%11100000
0D05E A3 20                         .db #$A3, #%00100000
0D060 C3 10                         .db #$C3, #%00010000
0D062 04 00                         .db #$04, #%00000000
0D064 54 20                         .db #$54, #%00100000
0D066 15 0A                         .db #$15, #%00001010
0D068 25 C0                         .db #$25, #%11000000
0D06A 55 E0                         .db #$55, #%11100000
0D06C 86 20                         .db #$86, #%00100000
0D06E C6 E0                         .db #$C6, #%11100000
0D070 C7 A0                         .db #$C7, #%10100000
0D072 88 00                         .db #$88, #%00000000
0D074 59 00                         .db #$59, #%00000000
0D076 89 20                         .db #$89, #%00100000
0D078 D9 1A                         .db #$D9, #%00011010
0D07A FF                            .db #LEVEL_END
0D07B                           
0D07B                           lvl_layout_13:
0D07B 10 E0                         .db #$10, #%11100000
0D07D 20 E0                         .db #$20, #%11100000
0D07F 30 E0                         .db #$30, #%11100000
0D081 40 40                         .db #$40, #%01000000
0D083 80 60                         .db #$80, #%01100000
0D085 C0 E0                         .db #$C0, #%11100000
0D087 D0 E0                         .db #$D0, #%11100000
0D089 41 40                         .db #$41, #%01000000
0D08B 71 60                         .db #$71, #%01100000
0D08D 52 60                         .db #$52, #%01100000
0D08F A2 20                         .db #$A2, #%00100000
0D091 43 60                         .db #$43, #%01100000
0D093 83 60                         .db #$83, #%01100000
0D095 14 74                         .db #$14, #%01110100
0D097 54 74                         .db #$54, #%01110100
0D099 94 74                         .db #$94, #%01110100
0D09B D4 14                         .db #$D4, #%00010100
0D09D 15 0D                         .db #$15, #%00001101
0D09F 55 0D                         .db #$55, #%00001101
0D0A1 95 0D                         .db #$95, #%00001101
0D0A3 D5 0D                         .db #$D5, #%00001101
0D0A5 26 0D                         .db #$26, #%00001101
0D0A7 46 0D                         .db #$46, #%00001101
0D0A9 66 0D                         .db #$66, #%00001101
0D0AB 86 0D                         .db #$86, #%00001101
0D0AD A6 0D                         .db #$A6, #%00001101
0D0AF C6 0D                         .db #$C6, #%00001101
0D0B1 07 10                         .db #$07, #%00010000
0D0B3 37 0D                         .db #$37, #%00001101
0D0B5 77 0D                         .db #$77, #%00001101
0D0B7 B7 0D                         .db #$B7, #%00001101
0D0B9 28 0D                         .db #$28, #%00001101
0D0BB 48 0D                         .db #$48, #%00001101
0D0BD 68 0D                         .db #$68, #%00001101
0D0BF 88 0D                         .db #$88, #%00001101
0D0C1 A8 0D                         .db #$A8, #%00001101
0D0C3 C8 0D                         .db #$C8, #%00001101
0D0C5 19 0D                         .db #$19, #%00001101
0D0C7 59 0D                         .db #$59, #%00001101
0D0C9 99 0D                         .db #$99, #%00001101
0D0CB D9 0D                         .db #$D9, #%00001101
0D0CD FF                            .db #LEVEL_END
0D0CE                           
0D0CE                           lvl_layout_14:
0D0CE 00 67                         .db #$00, #%01100111
0D0D0 40 67                         .db #$40, #%01100111
0D0D2 80 67                         .db #$80, #%01100111
0D0D4 C0 27                         .db #$C0, #%00100111
0D0D6 01 27                         .db #$01, #%00100111
0D0D8 31 C7                         .db #$31, #%11000111
0D0DA 51 C7                         .db #$51, #%11000111
0D0DC 71 C7                         .db #$71, #%11000111
0D0DE 91 C7                         .db #$91, #%11000111
0D0E0 B1 C7                         .db #$B1, #%11000111
0D0E2 D1 07                         .db #$D1, #%00000111
0D0E4 02 E7                         .db #$02, #%11100111
0D0E6 06 E7                         .db #$06, #%11100111
0D0E8 13 07                         .db #$13, #%00000111
0D0EA D3 07                         .db #$D3, #%00000111
0D0EC 15 07                         .db #$15, #%00000111
0D0EE 35 07                         .db #$35, #%00000111
0D0F0 55 07                         .db #$55, #%00000111
0D0F2 75 07                         .db #$75, #%00000111
0D0F4 95 07                         .db #$95, #%00000111
0D0F6 B5 07                         .db #$B5, #%00000111
0D0F8 D5 07                         .db #$D5, #%00000111
0D0FA 17 07                         .db #$17, #%00000111
0D0FC 37 C7                         .db #$37, #%11000111
0D0FE 57 C7                         .db #$57, #%11000111
0D100 77 C7                         .db #$77, #%11000111
0D102 97 C7                         .db #$97, #%11000111
0D104 B7 C7                         .db #$B7, #%11000111
0D106 D7 07                         .db #$D7, #%00000111
0D108 19 07                         .db #$19, #%00000111
0D10A D9 07                         .db #$D9, #%00000111
0D10C 22 4C                         .db #$22, #%01001100
0D10E 62 4C                         .db #$62, #%01001100
0D110 A2 4C                         .db #$A2, #%01001100
0D112 24 0C                         .db #$24, #%00001100
0D114 44 0C                         .db #$44, #%00001100
0D116 64 0C                         .db #$64, #%00001100
0D118 84 0C                         .db #$84, #%00001100
0D11A A4 0C                         .db #$A4, #%00001100
0D11C C4 0C                         .db #$C4, #%00001100
0D11E 26 0C                         .db #$26, #%00001100
0D120 46 0C                         .db #$46, #%00001100
0D122 66 0C                         .db #$66, #%00001100
0D124 86 0C                         .db #$86, #%00001100
0D126 A6 0C                         .db #$A6, #%00001100
0D128 C6 0C                         .db #$C6, #%00001100
0D12A 28 4C                         .db #$28, #%01001100
0D12C 68 4C                         .db #$68, #%01001100
0D12E A8 4C                         .db #$A8, #%01001100
0D130 32 04                         .db #$32, #%00000100
0D132 52 04                         .db #$52, #%00000100
0D134 72 04                         .db #$72, #%00000100
0D136 92 04                         .db #$92, #%00000100
0D138 B2 04                         .db #$B2, #%00000100
0D13A 38 04                         .db #$38, #%00000100
0D13C 58 04                         .db #$58, #%00000100
0D13E 78 04                         .db #$78, #%00000100
0D140 98 04                         .db #$98, #%00000100
0D142 B8 04                         .db #$B8, #%00000100
0D144 FF                            .db #LEVEL_END
0D145                           
0D145                           lvl_layout_15:
0D145 00 7A                         .db #$00, #%01111010
0D147 40 7A                         .db #$40, #%01111010
0D149 80 7A                         .db #$80, #%01111010
0D14B C0 3A                         .db #$C0, #%00111010
0D14D 31 04                         .db #$31, #%00000100
0D14F 51 04                         .db #$51, #%00000100
0D151 81 04                         .db #$81, #%00000100
0D153 A1 04                         .db #$A1, #%00000100
0D155 05 E4                         .db #$05, #%11100100
0D157 15 64                         .db #$15, #%01100100
0D159 55 64                         .db #$55, #%01100100
0D15B 95 64                         .db #$95, #%01100100
0D15D D5 E4                         .db #$D5, #%11100100
0D15F 26 04                         .db #$26, #%00000100
0D161 46 44                         .db #$46, #%01000100
0D163 76 64                         .db #$76, #%01100100
0D165 C6 04                         .db #$C6, #%00000100
0D167 17 04                         .db #$17, #%00000100
0D169 37 64                         .db #$37, #%01100100
0D16B 77 44                         .db #$77, #%01000100
0D16D B7 04                         .db #$B7, #%00000100
0D16F 18 64                         .db #$18, #%01100100
0D171 58 64                         .db #$58, #%01100100
0D173 98 64                         .db #$98, #%01100100
0D175 FF                            .db #LEVEL_END
0D176                           
0D176                           lvl_layout_16:
0D176 10 E1                         .db #$10, #%11100001
0D178 20 9A                         .db #$20, #%10011010
0D17A 30 E1                         .db #$30, #%11100001
0D17C 40 E1                         .db #$40, #%11100001
0D17E 50 E1                         .db #$50, #%11100001
0D180 60 C1                         .db #$60, #%11000001
0D182 70 E1                         .db #$70, #%11100001
0D184 80 E1                         .db #$80, #%11100001
0D186 90 E1                         .db #$90, #%11100001
0D188 A0 61                         .db #$A0, #%01100001
0D18A 21 C1                         .db #$21, #%11000001
0D18C A1 1A                         .db #$A1, #%00011010
0D18E B1 41                         .db #$B1, #%01000001
0D190 A2 E1                         .db #$A2, #%11100001
0D192 B2 E1                         .db #$B2, #%11100001
0D194 C2 1A                         .db #$C2, #%00011010
0D196 D2 E1                         .db #$D2, #%11100001
0D198 63 1A                         .db #$63, #%00011010
0D19A C3 C1                         .db #$C3, #%11000001
0D19C 14 61                         .db #$14, #%01100001
0D19E 54 61                         .db #$54, #%01100001
0D1A0 94 C1                         .db #$94, #%11000001
0D1A2 15 61                         .db #$15, #%01100001
0D1A4 55 41                         .db #$55, #%01000001
0D1A6 85 1A                         .db #$85, #%00011010
0D1A8 16 41                         .db #$16, #%01000001
0D1AA 46 1A                         .db #$46, #%00011010
0D1AC 56 61                         .db #$56, #%01100001
0D1AE A6 61                         .db #$A6, #%01100001
0D1B0 17 67                         .db #$17, #%01100111
0D1B2 57 67                         .db #$57, #%01100111
0D1B4 97 67                         .db #$97, #%01100111
0D1B6 D7 07                         .db #$D7, #%00000111
0D1B8 28 41                         .db #$28, #%01000001
0D1BA 58 61                         .db #$58, #%01100001
0D1BC A8 41                         .db #$A8, #%01000001
0D1BE 18 11                         .db #$18, #%00010001
0D1C0 38 11                         .db #$38, #%00010001
0D1C2 98 11                         .db #$98, #%00010001
0D1C4 B8 11                         .db #$B8, #%00010001
0D1C6 D8 11                         .db #$D8, #%00010001
0D1C8 59 09                         .db #$59, #%00001001
0D1CA FF                            .db #LEVEL_END
0D1CB                           
0D1CB                           lvl_layout_17:
0D1CB 10 EA                         .db #$10, #%11101010
0D1CD 20 E2                         .db #$20, #%11100010
0D1CF 30 62                         .db #$30, #%01100010
0D1D1 70 02                         .db #$70, #%00000010
0D1D3 80 6A                         .db #$80, #%01101010
0D1D5 90 22                         .db #$90, #%00100010
0D1D7 01 AA                         .db #$01, #%10101010
0D1D9 31 6A                         .db #$31, #%01101010
0D1DB 81 2A                         .db #$81, #%00101010
0D1DD A1 02                         .db #$A1, #%00000010
0D1DF C1 02                         .db #$C1, #%00000010
0D1E1 D1 0A                         .db #$D1, #%00001010
0D1E3 32 EA                         .db #$32, #%11101010
0D1E5 42 6A                         .db #$42, #%01101010
0D1E7 62 02                         .db #$62, #%00000010
0D1E9 92 6A                         .db #$92, #%01101010
0D1EB D2 E2                         .db #$D2, #%11100010
0D1ED 43 1A                         .db #$43, #%00011010
0D1EF 53 CA                         .db #$53, #%11001010
0D1F1 73 02                         .db #$73, #%00000010
0D1F3 83 4A                         .db #$83, #%01001010
0D1F5 B3 CA                         .db #$B3, #%11001010
0D1F7 C3 EA                         .db #$C3, #%11101010
0D1F9 04 0A                         .db #$04, #%00001010
0D1FB 14 A2                         .db #$14, #%10100010
0D1FD 24 AA                         .db #$24, #%10101010
0D1FF 44 AA                         .db #$44, #%10101010
0D201 64 6A                         .db #$64, #%01101010
0D203 65 6A                         .db #$65, #%01101010
0D205 A5 AA                         .db #$A5, #%10101010
0D207 06 EA                         .db #$06, #%11101010
0D209 16 62                         .db #$16, #%01100010
0D20B 66 22                         .db #$66, #%00100010
0D20D 86 2A                         .db #$86, #%00101010
0D20F 17 42                         .db #$17, #%01000010
0D211 47 12                         .db #$47, #%00010010
0D213 57 6A                         .db #$57, #%01101010
0D215 97 4A                         .db #$97, #%01001010
0D217 A7 02                         .db #$A7, #%00000010
0D219 18 02                         .db #$18, #%00000010
0D21B 28 0A                         .db #$28, #%00001010
0D21D 38 22                         .db #$38, #%00100010
0D21F 68 2A                         .db #$68, #%00101010
0D221 88 62                         .db #$88, #%01100010
0D223 C8 0A                         .db #$C8, #%00001010
0D225 D8 02                         .db #$D8, #%00000010
0D227 19 2A                         .db #$19, #%00101010
0D229 39 2A                         .db #$39, #%00101010
0D22B 69 42                         .db #$69, #%01000010
0D22D 99 2A                         .db #$99, #%00101010
0D22F B9 42                         .db #$B9, #%01000010
0D231 FF                            .db #LEVEL_END
0D232                           
0D232                           lvl_layout_18:
0D232 00 12                         .db #$00, #%00010010
0D234 40 1A                         .db #$40, #%00011010
0D236 50 11                         .db #$50, #%00010001
0D238 70 1A                         .db #$70, #%00011010
0D23A 80 10                         .db #$80, #%00010000
0D23C D0 13                         .db #$D0, #%00010011
0D23E 01 1A                         .db #$01, #%00011010
0D240 22 15                         .db #$22, #%00010101
0D242 A2 1A                         .db #$A2, #%00011010
0D244 B2 14                         .db #$B2, #%00010100
0D246 03 67                         .db #$03, #%01100111
0D248 43 67                         .db #$43, #%01100111
0D24A 83 67                         .db #$83, #%01100111
0D24C 24 09                         .db #$24, #%00001001
0D24E 74 0D                         .db #$74, #%00001101
0D250 C4 0A                         .db #$C4, #%00001010
0D252 05 A7                         .db #$05, #%10100111
0D254 45 27                         .db #$45, #%00100111
0D256 95 27                         .db #$95, #%00100111
0D258 16 C7                         .db #$16, #%11000111
0D25A 36 67                         .db #$36, #%01100111
0D25C 86 67                         .db #$86, #%01100111
0D25E D6 07                         .db #$D6, #%00000111
0D260 07 A3                         .db #$07, #%10100011
0D262 27 23                         .db #$27, #%00100011
0D264 47 C7                         .db #$47, #%11000111
0D266 57 A0                         .db #$57, #%10100000
0D268 67 A7                         .db #$67, #%10100111
0D26A 77 20                         .db #$77, #%00100000
0D26C 97 C7                         .db #$97, #%11000111
0D26E A7 A4                         .db #$A7, #%10100100
0D270 B7 A7                         .db #$B7, #%10100111
0D272 C7 24                         .db #$C7, #%00100100
0D274 28 0B                         .db #$28, #%00001011
0D276 38 A3                         .db #$38, #%10100011
0D278 78 08                         .db #$78, #%00001000
0D27A 88 A3                         .db #$88, #%10100011
0D27C C8 0C                         .db #$C8, #%00001100
0D27E D8 A4                         .db #$D8, #%10100100
0D280 09 43                         .db #$09, #%01000011
0D282 59 40                         .db #$59, #%01000000
0D284 A9 44                         .db #$A9, #%01000100
0D286 FF                            .db #LEVEL_END
0D287                           
0D287                           lvl_layout_19:
0D287 11 A8                         .db #$11, #%10101000
0D289 21 68                         .db #$21, #%01101000
0D28B 81 28                         .db #$81, #%00101000
0D28D B1 48                         .db #$B1, #%01001000
0D28F 22 48                         .db #$22, #%01001000
0D291 62 68                         .db #$62, #%01101000
0D293 B2 28                         .db #$B2, #%00101000
0D295 23 28                         .db #$23, #%00101000
0D297 83 28                         .db #$83, #%00101000
0D299 B3 28                         .db #$B3, #%00101000
0D29B 04 E8                         .db #$04, #%11101000
0D29D 24 08                         .db #$24, #%00001000
0D29F 44 08                         .db #$44, #%00001000
0D2A1 64 E8                         .db #$64, #%11101000
0D2A3 84 E8                         .db #$84, #%11101000
0D2A5 C4 A8                         .db #$C4, #%10101000
0D2A7 D4 E8                         .db #$D4, #%11101000
0D2A9 15 48                         .db #$15, #%01001000
0D2AB 55 C8                         .db #$55, #%11001000
0D2AD 75 C8                         .db #$75, #%11001000
0D2AF A5 08                         .db #$A5, #%00001000
0D2B1 36 08                         .db #$36, #%00001000
0D2B3 B6 08                         .db #$B6, #%00001000
0D2B5 27 48                         .db #$27, #%01001000
0D2B7 97 28                         .db #$97, #%00101000
0D2B9 C7 08                         .db #$C7, #%00001000
0D2BB 09 61                         .db #$09, #%01100001
0D2BD 19 11                         .db #$19, #%00010001
0D2BF 49 61                         .db #$49, #%01100001
0D2C1 89 31                         .db #$89, #%00110001
0D2C3 A9 61                         .db #$A9, #%01100001
0D2C5 FF                            .db #LEVEL_END
0D2C6                           
0D2C6                           lvl_layout_20:
0D2C6 00 60                         .db #$00, #%01100000
0D2C8 10 1A                         .db #$10, #%00011010
0D2CA 40 A7                         .db #$40, #%10100111
0D2CC 50 20                         .db #$50, #%00100000
0D2CE 70 1A                         .db #$70, #%00011010
0D2D0 80 40                         .db #$80, #%01000000
0D2D2 B0 1A                         .db #$B0, #%00011010
0D2D4 C0 20                         .db #$C0, #%00100000
0D2D6 01 40                         .db #$01, #%01000000
0D2D8 31 1A                         .db #$31, #%00011010
0D2DA A1 40                         .db #$A1, #%01000000
0D2DC D1 1A                         .db #$D1, #%00011010
0D2DE 43 67                         .db #$43, #%01100111
0D2E0 83 47                         .db #$83, #%01000111
0D2E2 44 A7                         .db #$44, #%10100111
0D2E4 54 25                         .db #$54, #%00100101
0D2E6 94 08                         .db #$94, #%00001000
0D2E8 A4 A7                         .db #$A4, #%10100111
0D2EA 55 05                         .db #$55, #%00000101
0D2EC 65 08                         .db #$65, #%00001000
0D2EE 06 27                         .db #$06, #%00100111
0D2F0 36 67                         .db #$36, #%01100111
0D2F2 76 28                         .db #$76, #%00101000
0D2F4 A6 27                         .db #$A6, #%00100111
0D2F6 D6 07                         .db #$D6, #%00000111
0D2F8 A7 A7                         .db #$A7, #%10100111
0D2FA 08 60                         .db #$08, #%01100000
0D2FC 09 60                         .db #$09, #%01100000
0D2FE 18 A7                         .db #$18, #%10100111
0D300 48 A7                         .db #$48, #%10100111
0D302 58 47                         .db #$58, #%01000111
0D304 88 27                         .db #$88, #%00100111
0D306 B8 20                         .db #$B8, #%00100000
0D308 D8 1A                         .db #$D8, #%00011010
0D30A 59 15                         .db #$59, #%00010101
0D30C 69 60                         .db #$69, #%01100000
0D30E A9 60                         .db #$A9, #%01100000
0D310 FF                            .db #LEVEL_END
0D311                           
0D311                           lvl_layout_21:
0D311 00 13                         .db #$00, #%00010011
0D313 10 11                         .db #$10, #%00010001
0D315 20 67                         .db #$20, #%01100111
0D317 60 67                         .db #$60, #%01100111
0D319 A0 47                         .db #$A0, #%01000111
0D31B D0 15                         .db #$D0, #%00010101
0D31D 32 63                         .db #$32, #%01100011
0D31F 72 05                         .db #$72, #%00000101
0D321 82 43                         .db #$82, #%01000011
0D323 B2 43                         .db #$B2, #%01000011
0D325 33 03                         .db #$33, #%00000011
0D327 43 2A                         .db #$43, #%00101010
0D329 63 7A                         .db #$63, #%01111010
0D32B 73 2A                         .db #$73, #%00101010
0D32D A3 7A                         .db #$A3, #%01111010
0D32F 34 63                         .db #$34, #%01100011
0D331 74 63                         .db #$74, #%01100011
0D333 B4 43                         .db #$B4, #%01000011
0D335 06 63                         .db #$06, #%01100011
0D337 46 63                         .db #$46, #%01100011
0D339 86 63                         .db #$86, #%01100011
0D33B C6 C3                         .db #$C6, #%11000011
0D33D 07 7A                         .db #$07, #%01111010
0D33F 47 7A                         .db #$47, #%01111010
0D341 67 0A                         .db #$67, #%00001010
0D343 87 7A                         .db #$87, #%01111010
0D345 08 13                         .db #$08, #%00010011
0D347 18 43                         .db #$18, #%01000011
0D349 48 63                         .db #$48, #%01100011
0D34B 88 63                         .db #$88, #%01100011
0D34D FF                            .db #LEVEL_END
0D34E                           
0D34E                           lvl_layout_22:
0D34E 00 7A                         .db #$00, #%01111010
0D350 40 7A                         .db #$40, #%01111010
0D352 80 7A                         .db #$80, #%01111010
0D354 C0 3A                         .db #$C0, #%00111010
0D356 13 67                         .db #$13, #%01100111
0D358 83 A7                         .db #$83, #%10100111
0D35A B3 07                         .db #$B3, #%00000111
0D35C 14 07                         .db #$14, #%00000111
0D35E 44 07                         .db #$44, #%00000111
0D360 A4 07                         .db #$A4, #%00000111
0D362 15 A5                         .db #$15, #%10100101
0D364 45 A5                         .db #$45, #%10100101
0D366 85 25                         .db #$85, #%00100101
0D368 86 05                         .db #$86, #%00000101
0D36A A6 05                         .db #$A6, #%00000101
0D36C 17 11                         .db #$17, #%00010001
0D36E 47 A1                         .db #$47, #%10100001
0D370 87 A1                         .db #$87, #%10100001
0D372 B7 A1                         .db #$B7, #%10100001
0D374 18 41                         .db #$18, #%01000001
0D376 68 01                         .db #$68, #%00000001
0D378 D8 01                         .db #$D8, #%00000001
0D37A FF                            .db #LEVEL_END
0D37B                           
0D37B                           lvl_layout_23:
0D37B 00 71                         .db #$00, #%01110001
0D37D 40 11                         .db #$40, #%00010001
0D37F 50 43                         .db #$50, #%01000011
0D381 80 D1                         .db #$80, #%11010001
0D383 90 E3                         .db #$90, #%11100011
0D385 A0 63                         .db #$A0, #%01100011
0D387 01 63                         .db #$01, #%01100011
0D389 41 63                         .db #$41, #%01100011
0D38B A1 63                         .db #$A1, #%01100011
0D38D 02 63                         .db #$02, #%01100011
0D38F 42 63                         .db #$42, #%01100011
0D391 62 11                         .db #$62, #%00010001
0D393 A2 67                         .db #$A2, #%01100111
0D395 04 63                         .db #$04, #%01100011
0D397 44 23                         .db #$44, #%00100011
0D399 64 D1                         .db #$64, #%11010001
0D39B 74 E3                         .db #$74, #%11100011
0D39D 84 F1                         .db #$84, #%11110001
0D39F 94 E3                         .db #$94, #%11100011
0D3A1 A4 C7                         .db #$A4, #%11000111
0D3A3 B4 23                         .db #$B4, #%00100011
0D3A5 05 63                         .db #$05, #%01100011
0D3A7 45 23                         .db #$45, #%00100011
0D3A9 06 71                         .db #$06, #%01110001
0D3AB 46 11                         .db #$46, #%00010001
0D3AD 56 E3                         .db #$56, #%11100011
0D3AF D6 07                         .db #$D6, #%00000111
0D3B1 17 D1                         .db #$17, #%11010001
0D3B3 27 43                         .db #$27, #%01000011
0D3B5 67 D1                         .db #$67, #%11010001
0D3B7 A7 C7                         .db #$A7, #%11000111
0D3B9 C7 A7                         .db #$C7, #%10100111
0D3BB D7 B3                         .db #$D7, #%10110011
0D3BD 28 43                         .db #$28, #%01000011
0D3BF 78 43                         .db #$78, #%01000011
0D3C1 29 43                         .db #$29, #%01000011
0D3C3 79 43                         .db #$79, #%01000011
0D3C5 FF                           .db #LEVEL_END
0D3C6                           
0D3C6                           lvl_layout_24:
0D3C6 02 67                         .db #$02, #%01100111
0D3C8 42 67                         .db #$42, #%01100111
0D3CA 82 67                         .db #$82, #%01100111
0D3CC 05 67                         .db #$05, #%01100111
0D3CE 45 67                         .db #$45, #%01100111
0D3D0 85 67                         .db #$85, #%01100111
0D3D2 08 67                         .db #$08, #%01100111
0D3D4 48 67                         .db #$48, #%01100111
0D3D6 88 67                         .db #$88, #%01100111
0D3D8 30 E7                         .db #$30, #%11100111
0D3DA 70 E7                         .db #$70, #%11100111
0D3DC B0 E7                         .db #$B0, #%11100111
0D3DE 34 E7                         .db #$34, #%11100111
0D3E0 74 E7                         .db #$74, #%11100111
0D3E2 B4 E7                         .db #$B4, #%11100111
0D3E4 20 13                         .db #$20, #%00010011
0D3E6 40 10                         .db #$40, #%00010000
0D3E8 80 02                         .db #$80, #%00000010
0D3EA 41 05                         .db #$41, #%00000101
0D3EC B1 09                         .db #$B1, #%00001001
0D3EE 02 09                         .db #$02, #%00001001
0D3F0 52 0C                         .db #$52, #%00001100
0D3F2 13 11                         .db #$13, #%00010001
0D3F4 33 04                         .db #$33, #%00000100
0D3F6 74 0C                         .db #$74, #%00001100
0D3F8 B4 08                         .db #$B4, #%00001000
0D3FA 15 09                         .db #$15, #%00001001
0D3FC 55 0C                         .db #$55, #%00001100
0D3FE 95 0C                         .db #$95, #%00001100
0D400 47 03                         .db #$47, #%00000011
0D402 A7 12                         .db #$A7, #%00010010
0D404 18 15                         .db #$18, #%00010101
0D406 09 05                         .db #$09, #%00000101
0D408 19 03                         .db #$19, #%00000011
0D40A FF                            .db #LEVEL_END
0D40B                           
0D40B                           lvl_layout_25:
0D40B 00 12                         .db #$00, #%00010010
0D40D 10 63                         .db #$10, #%01100011
0D40F 60 63                         .db #$60, #%01100011
0D411 A0 07                         .db #$A0, #%00000111
0D413 01 11                         .db #$01, #%00010001
0D415 A1 02                         .db #$A1, #%00000010
0D417 02 67                         .db #$02, #%01100111
0D419 42 07                         .db #$42, #%00000111
0D41B 62 67                         .db #$62, #%01100111
0D41D A2 C7                         .db #$A2, #%11000111
0D41F 03 61                         .db #$03, #%01100001
0D421 43 01                         .db #$43, #%00000001
0D423 63 61                         .db #$63, #%01100001
0D425 A6 E7                         .db #$A6, #%11100111
0D427 B6 47                         .db #$B6, #%01000111
0D429 C6 01                         .db #$C6, #%00000001
0D42B B7 42                         .db #$B7, #%01000010
0D42D B8 42                         .db #$B8, #%01000010
0D42F C8 0A                         .db #$C8, #%00001010
0D431 09 7A                         .db #$09, #%01111010
0D433 49 7A                         .db #$49, #%01111010
0D435 89 3A                         .db #$89, #%00111010
0D437 B9 42                         .db #$B9, #%01000010
0D439 FF                            .db #LEVEL_END
0D43A                           
0D43A                           ;; Level layout address pointers
0D43A                           tbl_lvl_layout_hi:
0D43A CD CD CD CD CE                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D43F CE CF CF CF CF                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D444 CF D0 D0 D0 D1                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D449 D1 D1 D2 D2 D2                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D44E D3 D3 D3 D3 D4                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D453                           
0D453                           tbl_lvl_layout_lo:
0D453 5B 76 AB DE 4F                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D458 8A 13 54 8B CE                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D45D FD 50 7B CE 45                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D462 76 CB 32 87 C6                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D467 11 4E 7B C6 0B                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D46C                           
0D46C                           ;; Ball start position (#$YX)
0D46C                           tbl_lvl_ball_startpos:
0D46C 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D471 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D476 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D47B 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D480 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D485                               
0D485                           ;; Ball start direction, color and tile score
0D485                           ;; #% ccc v tttt
0D485                           ;;    ||| | ++++-- tile score
0D485                           ;;    ||| +------- vertical direction, up (0) or down
0D485                           ;;    +++--------- color (CBRYGM)
0D485                           tbl_lvl_ball_init:
0D485 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D48A 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D48F 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D494 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D499 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D49E                           
0D49E                           
0D49E                           
0D49E                           ;; Helper table to multiply values by 16
0D49E                           tbl_Times16:
0D49E 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D4A6 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D4AE                               
0D4AE                           
0D4AE                           ;; Helper table to multiply values by 64
0D4AE                           tbl_Times64:
0D4AE 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D4B2                           
0D4B2                           
0D4B2                           ;; Metatile ID to CHR data mapper
0D4B2                           tbl_GametileTopLeft:
0D4B2 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D4BC                           
0D4BC                           tbl_GametileTopRight:
0D4BC 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D4C6                           
0D4C6                           tbl_GametileBottomLeft:
0D4C6 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D4D0                           
0D4D0                           tbl_GametileBottomRight:
0D4D0 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D4DA                           
0D4DA                           ;; Metatile ID to RAM byte data mapper
0D4DA                           tbl_GameTileRamByte:
0D4DA 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D4DF                           
0D4DF                           ;; HUD text data
0D4DF                           tbl_HudText:
0D4DF 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D4E7 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D4EE 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D4F6 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D4FB                           
0D4FB                           ;; NMI handler
0D4FB                           NMI:
0D4FB                               .include "interrupt/nmi.asm"
0D4FB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D4FB                           ;;
0D4FB                           ;; include/nmi.asm
0D4FB                           ;;
0D4FB                           ;; Non-maskable interrupt script. This script is being executed
0D4FB                           ;; when vBlank hits.
0D4FB                           ;;
0D4FB                           ;;
0D4FB                           
0D4FB                               ;; Preserve accumulator through stack
0D4FB 48                            PHA
0D4FC                           
0D4FC                               ;; Should NMI be skipped?
0D4FC A5 13                         LDA skip_nmi
0D4FE F0 03                         BEQ +
0D500 4C F9 D5                          JMP +skip_nmi
0D503                               +
0D503                           
0D503                               ;; When in NMI, skip additional NMI requests
0D503 A9 01                         LDA #$01
0D505 85 13                         STA skip_nmi
0D507                           
0D507                               ;; Preserve X, Y, and PC through stack
0D507 8A                            TXA
0D508 48                            PHA
0D509 98                            TYA
0D50A 48                            PHA
0D50B 08                            PHP
0D50C                               
0D50C                               ;; Check forced NMI skip
0D50C A5 14                         LDA force_skip_nmi
0D50E F0 03                         BEQ +
0D510 4C EA D5                          JMP +force_skip_nmi
0D513                               +
0D513                           
0D513                               ;; Update PPU mask
0D513                               ;LDA #$00
0D513                               ;STA PPU_CTRL
0D513 A5 12                         LDA soft_ppu_mask
0D515 8D 01 20                      STA PPU_MASK
0D518                               
0D518                               
0D518                               ;; Additional PPU updates go here
0D518                               .include "game/interrupt/nmi.asm"
0D518                           
0D518                               ;; Check if ppu_buffer needs updating
0D518 A5 38                         LDA ppu_buffer_update
0D51A D0 03                         BNE +
0D51C 4C 5E D5                          JMP +no_ppu_buffer_update
0D51F                               +
0D51F                           
0D51F                               ;; Reset ppu control register and mask
0D51F A2 00                         LDX #$00
0D521 8E 00 20                      STX PPU_CTRL
0D524 8E 01 20                      STX PPU_MASK
0D527                           
0D527                               ;; Set up loop
0D527                               -
0D527                                   ;; Reset hi/lo latch
0D527 2C 02 20                          BIT PPU_STATUS
0D52A                           
0D52A                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D52A BD 00 03                          LDA ppu_buffer,x
0D52D 8D 06 20                          STA PPU_ADDR
0D530 E8                                INX
0D531 BD 00 03                          LDA ppu_buffer,x
0D534 8D 06 20                          STA PPU_ADDR
0D537                           
0D537                                   ;; Write ppu_buffer data to PPU_ADDR
0D537 E8                                INX
0D538 BD 00 03                          LDA ppu_buffer,x
0D53B 8D 07 20                          STA PPU_DATA
0D53E                           
0D53E                                   ;; Check if updating is done (eg. X is at pointer)
0D53E E8                                INX
0D53F E4 39                             CPX ppu_buffer_pointer
0D541 F0 03                             BEQ +
0D543 4C 27 D5                      JMP -
0D546                           +
0D546                           
0D546                               ;; Reset ppu buffer update and pointer
0D546 A9 00                         LDA #$00
0D548 85 38                         STA ppu_buffer_update
0D54A 85 39                         STA ppu_buffer_pointer
0D54C                               
0D54C                               ;; Reset scrolling position
0D54C 8D 05 20                      STA PPU_SCROLL
0D54F 8D 05 20                      STA PPU_SCROLL
0D552                           
0D552                               ;; Restore ppu control register and mask
0D552 A9 90                         LDA #%10010000
0D554 8D 00 20                      STA PPU_CTRL
0D557 A5 12                         LDA soft_ppu_mask
0D559 8D 01 20                      STA PPU_MASK
0D55C A9 00                         LDA #$00
0D55E                           
0D55E                           ;; Continue other NMI stuff
0D55E                           +no_ppu_buffer_update:
0D55E                           
0D55E                               ;; Reset sprite RAM, draw sprites
0D55E 8D 03 20                      STA OAM_ADDR
0D561 A9 02                         LDA #$02
0D563 8D 14 40                      STA OAM_DMA
0D566                           
0D566                               ;; Decrease explosion frame counters
0D566 A0 04                         LDY #MAX_ANIMATIONS
0D568 A2 00                         LDX #$00
0D56A                               -
0D56A BD 30 03                          LDA explosion_framecounter,x
0D56D F0 03                             BEQ +
0D56F DE 30 03                              DEC explosion_framecounter,x
0D572                                   +
0D572 E8                                INX
0D573 88                                DEY
0D574 F0 03                             BEQ +done        
0D576 4C 6A D5                      JMP -
0D579                           +done:
0D579                               
0D579                               ;; Decrease nudge counter
0D579 A5 3C                         LDA nudge_counter
0D57B F0 02                         BEQ +
0D57D C6 3C                             DEC nudge_counter
0D57F                               +
0D57F                               
0D57F                               ;; Test background noise
0D57F A5 37                         LDA screen_mode
0D581 29 01                         AND #IS_GAME_SCREEN
0D583 F0 21                         BEQ +
0D585                                   .include "game/include/main/background_sound.asm"
0D585                               ;; At random times, set max_noise period to $03-$0A
0D585 A5 3F                         LDA max_noise
0D587 D0 1D                         BNE +
0D589 20 C9 C3                          JSR sub_GetRandomNumber
0D58C 29 EF                             AND #%11101111
0D58E D0 16                             BNE +
0D590                                   
0D590 A5 15                             LDA frame_counter
0D592 85 16                             STA random_seed
0D594 20 C9 C3                          JSR sub_GetRandomNumber
0D597 29 07                             AND #$07
0D599 69 03                             ADC #$03
0D59B 85 3F                             STA max_noise
0D59D A9 01                             LDA #$01
0D59F 85 40                             STA sweep_noise
0D5A1 A9 34                             LDA #$34
0D5A3 8D 0C 40                          STA NOISE_VOLUME
0D5A6                           
0D5A6                               +
0D5A6                           
0D5A6                               ;; if sweep noise = $00: constant noise
0D5A6                               ;; else if sweep noise > $80: decrease pitch
0D5A6                               ;; else: inrease pitch
0D5A6 A5 40                         LDA sweep_noise
0D5A8 F0 18                         BEQ +constantNoise
0D5AA 30 2A                         BMI +decreaseNoise
0D5AC                           
0D5AC                           ;; Sweep noise up to max noise pitch
0D5AC                           +increaseNoise:
0D5AC C6 41                         DEC current_noise
0D5AE A5 41                         LDA current_noise
0D5B0 8D 0E 40                      STA NOISE_PERIOD
0D5B3 C5 3F                         CMP max_noise
0D5B5 D0 08                         BNE +
0D5B7 A9 00                             LDA #$00
0D5B9 85 40                             STA sweep_noise
0D5BB A9 0A                             LDA #$0A
0D5BD 85 42                             STA noise_counter
0D5BF                               +
0D5BF 4C EA D5                      JMP +endNoise
0D5C2                           
0D5C2                           ;; Keep noise at constant pitch
0D5C2                           +constantNoise:
0D5C2 A5 3F                         LDA max_noise
0D5C4 F0 24                         BEQ +endNoise
0D5C6                           
0D5C6 A5 42                         LDA noise_counter
0D5C8 D0 07                         BNE +
0D5CA A9 80                             LDA #$80
0D5CC 85 40                             STA sweep_noise
0D5CE 4C EA D5                          JMP +endNoise
0D5D1                               +
0D5D1 C6 42                         DEC noise_counter
0D5D3 4C EA D5                      JMP +endNoise
0D5D6                           
0D5D6                           ;; Sweep noise down to initial pitch
0D5D6                           +decreaseNoise:
0D5D6 E6 41                         INC current_noise
0D5D8 A5 41                         LDA current_noise
0D5DA 8D 0E 40                      STA NOISE_PERIOD
0D5DD C9 0E                         CMP #$0E
0D5DF D0 09                         BNE +endNoise
0D5E1                           
0D5E1 20 50 C4                      JSR sub_BackgroundNoise
0D5E4 A9 00                         LDA #$00
0D5E6 85 3F                         STA max_noise
0D5E8 85 40                         STA sweep_noise
0D5EA                           
0D5EA                           +endNoise:
0D5EA                           
0D5EA                               +
0D5EA                           
0D5EA                           ;; This is what happens when we forced nmi skip
0D5EA                           +force_skip_nmi:
0D5EA                           
0D5EA                               ;; Increase frame counters
0D5EA E6 15                         INC frame_counter
0D5EC                           
0D5EC                               ;; reset ball_update_position
0D5EC A9 00                         LDA #$00
0D5EE 85 35                         STA ball_update_position
0D5F0                           
0D5F0                               ;; Don't skip next NMI request
0D5F0 A9 00                         LDA #$00
0D5F2 85 13                         STA skip_nmi
0D5F4                           
0D5F4                               ;; Restore X, Y and PC from stack
0D5F4 28                            PLP
0D5F5 68                            PLA
0D5F6 A8                            TAY
0D5F7 68                            PLA
0D5F8 AA                            TAX
0D5F9                           
0D5F9                           +skip_nmi:
0D5F9                               ;; Restore accumulator from stack
0D5F9 68                            PLA
0D5FA                           
0D5FA                               ;; Return
0D5FA 40                            RTI
0D5FB                           
0D5FB                           ;; IRQ handler (empty)
0D5FB                           IRQ:
0D5FB                               .include "interrupt/irq.asm"
0D5FB 40                            RTI0D5FC                           
0D5FC                           ;; Interrupt vectors
0D5FC 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA FB D4                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE FB D5                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
