	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; Enable test mode
	                            ;; - Test mode adds a test level and allows the developer to start
	                            ;;   at any given level with any number of lives. Remove the line
	                            ;;   that starts with TESTING (or add a semicolon in front) to
	                            ;;   disable test mode.
	                            ;TESTING    =   1
	                            START_LEVEL =  19
	                            START_LIVES = 255
	                            
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Sentience (warm boot) check string
00000                               sentience       .dsb 5
00005                               
00005                               ;; High score variables (declared up high, so basic reset
00005                               ;; can skip over those)
00005                               hi_score        .dsb 6
0000B                               
0000B                               ;; Reserve ten temporary variables for use in subroutines.
0000B                               temp              .dsb 10
00015                           
00015                               ;; Reserve a two-byte temporary variable for use with
00015                               ;; 16-bit operations (like addresses)
00015                               temp16            .dsb 2
00017                           
00017                               ;; Two-byte variable to store a pointer address
00017                               pointer           .dsb 2
00019                           
00019                               ;; Variable to store button presses
00019                               buttons_prev      .dsb 1
0001A                               buttons_held      .dsb 1
0001B                               buttons_pressed   .dsb 1
0001C                               buttons_released  .dsb 1
0001D                           
0001D                               ;; PPU mask buffer variable, used to store the new value of
0001D                               ;; the PPU mask outside NMI
0001D                               soft_ppu_mask     .dsb 1
0001E                           
0001E                               ;; Variables to skip NMI handling
0001E                               skip_nmi          .dsb 1
0001F                               force_skip_nmi    .dsb 1
00020                           
00020                               ;; Counters and seeds
00020                               frame_counter     .dsb 1
00021                               random_seed       .dsb 1
00022                           
00022                               ;; Game specific variables
00022                               .include "game/ram/zp.asm"
00022                           
00022                           ;; Ball variables
00022                           ball_xpos_hi           .dsb 1
00023                           ball_xpos_lo           .dsb 1
00024                           ball_ypos_hi           .dsb 1
00025                           ball_ypos_lo           .dsb 1
00026                           ball_ypos_hi_prev      .dsb 1
00027                           ball_ypos_lo_prev      .dsb 1
00028                           ball_xpos_hi_prev      .dsb 1
00029                           ball_xpos_lo_prev      .dsb 1
0002A                           ball_lives             .dsb 1   ; number of lives left
0002B                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00031                           add_to_score           .dsb 6
00037                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0003A                           
0003A                           ;; Ball bounding box, relative to the screen
0003A                           ball_left              .dsb 1
0003B                           ball_center            .dsb 1
0003C                           ball_right             .dsb 1
0003D                           ball_top               .dsb 1
0003E                           ball_middle            .dsb 1
0003F                           ball_bottom            .dsb 1
00040                           
00040                           ;; Update-position check
00040                           sprites_update_position  .dsb 1
00041                           
00041                           ;; Lock block space helper variable
00041                           ;; When the ball hits a lock block, it should only move if the space
00041                           ;; where it moves to, is not solid. This variable holds the metatile
00041                           ;; offset of the position where the lock block should move to, so
00041                           ;; we can check if it is solid or not.
00041                           ;;
00041                           ;; UP:    #%11110000 #$F0
00041                           ;; DOWN:  #%00010000 #$10
00041                           ;; LEFT:  #%11111111 #$FF
00041                           ;; RIGHT: #%00000001 #$01
00041                           ;;        #%d......h
00041                           move_block_space_to_check  .dsb 1
00042                           
00042                           
00042                           ;; Ball flags
00042                           ;; #% c c c v . f n a
00042                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00042                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00042                           ;;    | | | | | +------ ball is frozen (not moving)
00042                           ;;    | | | | +-------- (unused for now)
00042                           ;;    | | | +---------- ball moves up (0) or down (1)
00042                           ;;    +-+-+------------ ball color (1-6)
00042                           ball_flags             .dsb 1
00043                           
00043                           
00043                           ;; Screen mode
00043                           ;; #% u . . . . . t t
00043                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00043                           ;;    | +-+-+-+-+------------- unused
00043                           ;;    +----------------------- should the screen update
00043                           screen_mode            .dsb 1
00044                           
00044                           
00044                           
00044                           ;; PPU buffer variables
00044                           ppu_buffer_update      .dsb 1
00045                           ppu_buffer_pointer     .dsb 1
00046                           
00046                           ;; Pointer to keep track of the number of explosions
00046                           explosion_pointer      .dsb 1
00047                           
00047                           ;; Pointer to keep track of the number of move blocks
00047                           move_block_pointer     .dsb 1
00048                           
00048                           ;; Sprite RAM pointer to keep track of sprites to update
00048                           sprite_ram_pointer     .dsb 1
00049                           
00049                           ;; Timers 
00049                           nudge_timer            .dsb 1
0004A                           bonus_timer            .dsb 1
0004B                           kill_timer             .dsb 1
0004C                           unfreeze_timer         .dsb 1
0004D                           
0004D                           ;; Current level (doubles as level select variable)
0004D                           current_level          .dsb 1
0004E                           
0004E                           ;; Tile type the ball is currently colliding with
0004E                           colliding_tile         .dsb 1
0004F                           
0004F                           ;; Number of blocks left on screen
0004F                           blocks_left            .dsb 1
00050                           
00050                           ;; Sound control variables
00050                           max_noise              .dsb 1
00051                           sweep_noise            .dsb 1
00052                           current_noise          .dsb 1
00053                           noise_timer            .dsb 1
00054                           do_beeps               .dsb 1
00055                           soft_pulse1            .dsb 1
00056                           noise_muted            .dsb 1
00057                           
00057                           ;; Sound effect variables
00057                           sfx_address            .dsb 2
00059                           sfx_timer              .dsb 3
0005C                           sfx_frequency          .dsb 2
0005E                           
0005E                           
0005E                           ;; Additional NMI check for timed PPU fade
0005E                           check_nmi              .dsb 1
0005F                           
0005F                           ;; The TV system this game is running on (0=ntsc, 1=pal, 2=dendy, 3=unknown)
0005F                           tv_system              .dsb 1
00060                           
00060                           ;; This variable should be used for absolutely nothing
00060                           void                   .dsb 1
00061                           
00061                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 A5 C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022                                   ;; Skip first eleven bytes
0C022                                   ;; (cold boot check and high score)
0C022 A9 00                             LDA #$00
0C024 E0 0B                             CPX #$0B
0C026 90 02                             BCC +
0C028 95 00                                 STA ADDR_ZEROPAGE,x
0C02A                                   +
0C02A 9D 00 01                          STA $0100,x
0C02D 9D 00 03                          STA $0300,x
0C030 9D 00 04                          STA $0400,x
0C033 9D 00 05                          STA $0500,x
0C036 9D 00 06                          STA $0600,x
0C039 9D 00 07                          STA $0700,x
0C03C                           
0C03C                                   ;; Clear next in line
0C03C E8                                INX
0C03D D0 DE                         BNE -clrMem
0C03F                           
0C03F                               ;; Wait for vBlank
0C03F 20 A5 C5                      JSR sub_WaitForVBlank
0C042                           
0C042                           	;; Turn on NMI, set foreground $0000, background $1000
0C042 A9 90                         LDA #%10010000
0C044 8D 00 20                      STA PPU_CTRL
0C047                               
0C047                               ;; Reset PPU scroll pointer
0C047 A0 00                         LDY #0
0C049 8C 05 20                      STY $2005
0C04C 8C 05 20                      STY $2005
0C04F                               
0C04F                               ;; Initialize game
0C04F                               .include "game/interrupt/reset.asm"
0C04F                           
0C04F                           ;; Softer reset
0C04F                           ;; After game over, the game JMPs here to prevent
0C04F                           ;; resetting the high score
0C04F                           
0C04F                           lbl_SoftReset:
0C04F                           
0C04F                               ;; Check for cold or warm boot, by comparing
0C04F                               ;; the 6-byte RAM and ROM sentience string.
0C04F A2 00                         LDX #$00
0C051 A0 00                         LDY #$00
0C053                               -
0C053 BD 97 DB                          LDA tbl_Sentient,x
0C056 D5 00                             CMP sentience,x
0C058 F0 01                             BEQ +
0C05A C8                                    INY
0C05B                                   +
0C05B 95 00                             STA sentience,x
0C05D E8                                INX
0C05E E0 05                             CPX #$05
0C060 D0 F1                         BNE -
0C062                           
0C062                               ;; If system is sentient (warm boot), Y is zero now.
0C062 C0 00                         CPY #$00
0C064 F0 10                         BEQ +
0C066                           
0C066                                   ;; System not sentient (cold boot)
0C066                                   ;; Set default hi score to 200.000
0C066 A9 02                             LDA #$02
0C068 85 05                             STA hi_score
0C06A A9 00                             LDA #$00
0C06C 85 06                             STA hi_score+1
0C06E 85 07                             STA hi_score+2
0C070 85 08                             STA hi_score+3
0C072 85 09                             STA hi_score+4
0C074 85 0A                             STA hi_score+5
0C076                               +
0C076                           
0C076                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C076                           ;;
0C076                           ;;  NES TV system detection code
0C076                           ;;  Copyright 2011 Damian Yerrick
0C076                           ;;  https://www.nesdev.org/wiki/Detect_TV_system
0C076                           ;;
0C076 A2 00                         LDX #$00
0C078 A0 00                         LDY #$00
0C07A A9 01                         LDA #$01
0C07C 85 5E                         STA check_nmi
0C07E                               -
0C07E C5 5E                             CMP check_nmi
0C080 F0 FC                         BEQ -
0C082 A9 01                         LDA #$01
0C084 85 5E                         STA check_nmi
0C086                               -
0C086 E8                                INX
0C087 D0 01                             BNE +
0C089 C8                                    INY
0C08A C5 5E                             + CMP check_nmi
0C08C F0 F8                         BEQ -
0C08E 98                            TYA
0C08F 38                            SEC
0C090 E9 0A                         SBC #$0A
0C092 C9 03                         CMP #$03
0C094 90 02                         BCC +
0C096 A9 03                             LDA #$03
0C098 85 5F                         + STA tv_system ; 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C09A                           ;;
0C09A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C09A                           
0C09A                           
0C09A                               ;; Tell game to load the intro screen
0C09A A9 80                         LDA #LOAD_INTRO_SCREEN
0C09C 85 43                         STA screen_mode
0C09E                           
0C09E                               ;; Set number of lives (5)
0C09E A9 05                         LDA #$05
0C0A0 85 2A                         STA ball_lives
0C0A2                           
0C0A2                               ;; Start at level 1
0C0A2 A9 00                         LDA #$00
0C0A4 85 2B                         STA ball_score
0C0A6 85 2C                         STA ball_score+1
0C0A8 85 2D                         STA ball_score+2
0C0AA 85 2E                         STA ball_score+3
0C0AC 85 2F                         STA ball_score+4
0C0AE 85 30                         STA ball_score+5
0C0B0                           
0C0B0                           ifdef TESTING
0C0B0                               LDA #START_LIVES
0C0B0                               STA ball_lives
0C0B0                               LDA #START_LEVEL
0C0B0                           endif
0C0B0                           
0C0B0 85 4D                         STA current_level
0C0B2                           
0C0B2                           
0C0B2                           
0C0B2                           ;; Main game loop
0C0B2                           lbl_MainGameLoop:
0C0B2 20 9C C5                      JSR sub_WaitForNMI ; align main loop
0C0B5                               .include "game/main.asm"
0C0B5                           
0C0B5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C0B5                           ;;
0C0B5                           ;; game/main.asm
0C0B5                           ;;
0C0B5                           ;; The main game loop content.
0C0B5                           ;;
0C0B5                           ;;
0C0B5                           
0C0B5                               ;; Reset sprite pointer every game loop
0C0B5 A9 00                         LDA #$00
0C0B7 85 48                         STA sprite_ram_pointer
0C0B9                           
0C0B9                               ;; Store previous buttons
0C0B9 A5 1A                         LDA buttons_held
0C0BB 85 19                         STA buttons_prev
0C0BD                           
0C0BD                               ;; Read controller input
0C0BD 20 88 C5                      JSR sub_ReadController
0C0C0                           
0C0C0                               ;; Get buttons released
0C0C0 A5 1A                         LDA buttons_held
0C0C2 49 FF                         EOR #$FF
0C0C4 25 19                         AND buttons_prev
0C0C6 85 1C                         STA buttons_released
0C0C8                           
0C0C8                               ;; Set buttons pressed
0C0C8 A5 19                         LDA buttons_prev
0C0CA 49 FF                         EOR #$FF
0C0CC 25 1A                         AND buttons_held
0C0CE 85 1B                         STA buttons_pressed
0C0D0                           
0C0D0                               ;; Load screen?
0C0D0 A5 43                         LDA screen_mode
0C0D2 29 80                         AND #%10000000
0C0D4 F0 1E                         BEQ +screenLoaded
0C0D6                           
0C0D6                               ;; Get screen type to load
0C0D6 A5 43                         LDA screen_mode
0C0D8 29 03                         AND #%00000011
0C0DA A8                            TAY
0C0DB                               
0C0DB                               ;; Get address to load screen type from
0C0DB B9 40 D3                      LDA tbl_LoadScreenLo,y
0C0DE 85 17                         STA pointer
0C0E0 B9 3D D3                      LDA tbl_LoadScreenHi,y
0C0E3 85 18                         STA pointer+1
0C0E5                           
0C0E5                               ;; Load screen
0C0E5 20 41 C7                      JSR sub_DisableRendering
0C0E8 20 96 CA                      JSR sub_JumpToPointer
0C0EB 20 55 C7                      JSR sub_EnableRendering
0C0EE                               
0C0EE                               ;; Don't load screen anymore next loop
0C0EE A5 43                         LDA screen_mode
0C0F0 29 7F                         AND #%01111111
0C0F2 85 43                         STA screen_mode
0C0F4                               
0C0F4                           
0C0F4                           +screenLoaded:
0C0F4                               ;; Check if we're on the game screen
0C0F4 A5 43                         LDA screen_mode
0C0F6 C9 01                         CMP #IS_GAME_SCREEN
0C0F8 F0 03                         BEQ +
0C0FA 4C 9D C3                          JMP +checkNextScreen
0C0FD                               +
0C0FD                           
0C0FD                               ;; Load sprite 0 in place
0C0FD A9 18                         LDA #$18
0C0FF 8D 00 02                      STA ADDR_SPRITERAM
0C102 A9 0F                         LDA #$0F
0C104 8D 01 02                      STA ADDR_SPRITERAM+1
0C107 A9 22                         LDA #$22
0C109 8D 02 02                      STA ADDR_SPRITERAM+2
0C10C A9 F8                         LDA #$F8
0C10E 8D 03 02                      STA ADDR_SPRITERAM+3
0C111 A9 04                         LDA #$04
0C113 85 48                         STA sprite_ram_pointer
0C115                           
0C115                               ;; We're on the game screen
0C115                               ;; Check if position should be updated (ie. has nmi happened yet)
0C115 A5 40                         LDA sprites_update_position
0C117 F0 03                         BEQ +
0C119 4C 03 C3                          JMP +skipSpriteMovement
0C11C                               +
0C11C                           
0C11C                               ;; Check if ball is frozen
0C11C A5 42                         LDA ball_flags
0C11E 29 04                         AND #BALL_IS_FROZEN
0C120 F0 03                         BEQ +
0C122 4C C2 C2                          JMP +skipBallMovement
0C125                               +
0C125                           
0C125                               ;; Move the ball
0C125                               .include "game/include/main/move_ball.asm"
0C125                           
0C125                               ;; Check if ball goes up or down
0C125 A5 42                         LDA ball_flags
0C127 29 10                         AND #BALL_MOVES_DOWN
0C129 F0 2B                         BEQ +moveBallUp
0C12B                           
0C12B                           
0C12B                           +moveBallDown:
0C12B                               ;; update the low byte
0C12B A5 25                         LDA ball_ypos_lo
0C12D 85 27                         STA ball_ypos_lo_prev
0C12F 18                            CLC
0C130 69 88                         ADC #BALL_SPEED_LO
0C132 85 25                         STA ball_ypos_lo
0C134                           
0C134                               ;; update the high byte with carry
0C134 A5 24                         LDA ball_ypos_hi
0C136 85 26                         STA ball_ypos_hi_prev
0C138 69 01                         ADC #BALL_SPEED_HI
0C13A 85 24                         STA ball_ypos_hi
0C13C                               
0C13C                               ;; Check bottom bound
0C13C C9 C8                         CMP #BOUND_BOTTOM
0C13E 90 3C                         BCC +checkHorizontalMovement
0C140 F0 3A                         BEQ +checkHorizontalMovement
0C142                           
0C142                           
0C142                               ;; Change ball direction to "up"
0C142 A9 C8                         LDA #BOUND_BOTTOM
0C144 38                            SEC
0C145 E9 01                         SBC #$01
0C147 85 24                         STA ball_ypos_hi
0C149 A9 00                         LDA #$00
0C14B 85 25                         STA ball_ypos_lo
0C14D A5 42                         LDA ball_flags
0C14F 29 EF                         AND #MOVE_BALL_UP
0C151 85 42                         STA ball_flags
0C153 4C 7C C1                      JMP +checkHorizontalMovement
0C156                           
0C156                           
0C156                           +moveBallUp:
0C156                               ;; update the low byte
0C156 A5 25                         LDA ball_ypos_lo
0C158 85 27                         STA ball_ypos_lo_prev
0C15A 38                            SEC
0C15B E9 88                         SBC #BALL_SPEED_LO
0C15D 85 25                         STA ball_ypos_lo
0C15F                           
0C15F                               ;; update the high byte with carry
0C15F A5 24                         LDA ball_ypos_hi
0C161 85 26                         STA ball_ypos_hi_prev
0C163 E9 01                         SBC #BALL_SPEED_HI
0C165 85 24                         STA ball_ypos_hi
0C167                               
0C167                               ;; Check top bound
0C167 C9 30                         CMP #BOUND_TOP
0C169 B0 11                         BCS +checkHorizontalMovement
0C16B                           
0C16B                               ;; Change ball direction to "down"
0C16B A9 30                         LDA #BOUND_TOP
0C16D 18                            CLC
0C16E 69 01                         ADC #$01
0C170 85 24                         STA ball_ypos_hi
0C172 A9 00                         LDA #$00
0C174 85 25                         STA ball_ypos_lo
0C176 A5 42                         LDA ball_flags
0C178 09 10                         ORA #MOVE_BALL_DOWN
0C17A 85 42                         STA ball_flags
0C17C                           
0C17C                           
0C17C                           +checkHorizontalMovement:
0C17C                           
0C17C                               ;; Check if ball is being nudged
0C17C A5 49                         LDA nudge_timer
0C17E D0 41                         BNE +doneBallMovement
0C180                           
0C180                               ;; Check if left button is held
0C180 A5 1A                         LDA buttons_held
0C182 29 02                         AND #BUTTON_LEFT
0C184 F0 1B                         BEQ +
0C186                                   ;; update the low byte
0C186 A5 23                             LDA ball_xpos_lo
0C188 38                                SEC
0C189 E9 88                             SBC #BALL_SPEED_LO
0C18B 85 23                             STA ball_xpos_lo
0C18D                           
0C18D                                   ;; update the high byte
0C18D A5 22                             LDA ball_xpos_hi
0C18F E9 01                             SBC #BALL_SPEED_HI
0C191 85 22                             STA ball_xpos_hi
0C193                                   
0C193                                   ;; Check left bound
0C193 C9 10                             CMP #BOUND_LEFT
0C195 B0 2A                             BCS +doneBallMovement
0C197                                   
0C197                                   ;; Set flag to nudge right and set nudge timer
0C197 A5 42                             LDA ball_flags
0C199 09 02                             ORA #NUDGE_BALL_RIGHT
0C19B 20 8F CA                          JSR sub_InitiateNudge
0C19E                           
0C19E 4C C1 C1                          JMP +doneBallMovement        
0C1A1                               +
0C1A1                           
0C1A1                               ;; Check if right button is held
0C1A1 A5 1A                         LDA buttons_held
0C1A3 29 01                         AND #BUTTON_RIGHT
0C1A5 F0 1A                         BEQ +
0C1A7                                   ;; update the low byte
0C1A7 A5 23                             LDA ball_xpos_lo
0C1A9 18                                CLC
0C1AA 69 88                             ADC #BALL_SPEED_LO
0C1AC 85 23                             STA ball_xpos_lo
0C1AE                           
0C1AE                                   ;; update the high byte
0C1AE A5 22                             LDA ball_xpos_hi
0C1B0 69 01                             ADC #BALL_SPEED_HI
0C1B2 85 22                             STA ball_xpos_hi     
0C1B4                           
0C1B4                                  ;; Check right bound
0C1B4 C9 E8                             CMP #BOUND_RIGHT
0C1B6 90 09                             BCC +doneBallMovement
0C1B8 F0 07                             BEQ +doneBallMovement
0C1BA                                   
0C1BA                                   ;; Set flag to nudge left and set nudge timer
0C1BA A5 42                             LDA ball_flags
0C1BC 29 FD                             AND #NUDGE_BALL_LEFT
0C1BE 20 8F CA                          JSR sub_InitiateNudge
0C1C1                               +
0C1C1                           
0C1C1                           
0C1C1                           +doneBallMovement:
0C1C1                           
0C1C1                               ;; Check nudge
0C1C1 A5 49                         LDA nudge_timer
0C1C3 F0 23                         BEQ +doneBallNudging
0C1C5 A5 42                             LDA ball_flags
0C1C7 29 02                             AND #NUDGE_BALL_RIGHT
0C1C9 F0 10                             BEQ +nudgeBallLeft
0C1CB                                   
0C1CB                                       ;; update the low byte
0C1CB A5 23                                 LDA ball_xpos_lo
0C1CD 18                                    CLC
0C1CE 69 88                                 ADC #BALL_SPEED_LO
0C1D0 85 23                                 STA ball_xpos_lo
0C1D2                           
0C1D2                                       ;; update the high byte
0C1D2 A5 22                                 LDA ball_xpos_hi
0C1D4 69 01                                 ADC #BALL_SPEED_HI
0C1D6 85 22                                 STA ball_xpos_hi  
0C1D8 4C E8 C1                              JMP +doneBallNudging
0C1DB                                   +nudgeBallLeft:
0C1DB                                   
0C1DB                                   ;; update the low byte
0C1DB A5 23                             LDA ball_xpos_lo
0C1DD 38                                SEC
0C1DE E9 88                             SBC #BALL_SPEED_LO
0C1E0 85 23                             STA ball_xpos_lo
0C1E2                           
0C1E2                                   ;; update the high byte
0C1E2 A5 22                             LDA ball_xpos_hi
0C1E4 E9 01                             SBC #BALL_SPEED_HI
0C1E6 85 22                             STA ball_xpos_hi
0C1E8                               +doneBallNudging:
0C1E8                           
0C1E8                               ;; Don't update position again until next frame
0C1E8                               ;; (moved to after move block routine)
0C1E8                           
0C1E8                           +doneBallHandling:
0C1E8                           
0C1E8                               
0C1E8                               ;; Do collision detection
0C1E8                               .include "game/include/main/collision_detection.asm"
0C1E8                           
0C1E8                               ;; Get ball's x-left, x-center, x-right position
0C1E8 A5 22                         LDA ball_xpos_hi
0C1EA 18                            CLC
0C1EB 69 F0                         ADC #BALL_LEFT_WGA
0C1ED 85 3A                         STA ball_left
0C1EF 18                            CLC
0C1F0 69 04                         ADC #BALL_HALF_SIZE
0C1F2 85 3B                         STA ball_center
0C1F4 18                            CLC
0C1F5 69 04                         ADC #BALL_HALF_SIZE
0C1F7 85 3C                         STA ball_right
0C1F9                           
0C1F9                               ;; Get ball's y-top, y-middle, y-bottom position
0C1F9 A5 24                         LDA ball_ypos_hi
0C1FB 18                            CLC
0C1FC 69 D0                         ADC #BALL_TOP_WGA
0C1FE 85 3D                         STA ball_top
0C200 18                            CLC
0C201 69 04                         ADC #BALL_HALF_SIZE
0C203 85 3E                         STA ball_middle
0C205 18                            CLC
0C206 69 04                         ADC #BALL_HALF_SIZE
0C208 85 3F                         STA ball_bottom
0C20A                           
0C20A                           +checkRightCollision:
0C20A                               ;; Check if ball moves right
0C20A                               ;; No need to check nudging here as that will never collide with a tile
0C20A A5 1A                         LDA buttons_held
0C20C 29 01                         AND #BUTTON_RIGHT
0C20E F0 20                         BEQ +checkLeftCollision
0C210                           
0C210                               ;; Check tile at right position
0C210 A5 3E                         LDA ball_middle
0C212 85 0B                         STA temp
0C214 A5 3C                         LDA ball_right
0C216 85 0C                         STA temp+1
0C218 20 29 C7                      JSR sub_ConvertXYToTileType
0C21B 29 01                         AND #TILE_IS_SOLID
0C21D F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C21F                           
0C21F                               ;; Nudge ball and evaluate tile type
0C21F A9 01                         LDA #$01
0C221 85 41                         STA move_block_space_to_check
0C223 A5 42                         LDA ball_flags
0C225 29 FD                         AND #NUDGE_BALL_LEFT
0C227 20 8F CA                      JSR sub_InitiateNudge
0C22A 20 B7 C8                      JSR sub_EvaluateTileType
0C22D 4C 53 C2                      JMP +checkTopCollision
0C230                           
0C230                           +checkLeftCollision:
0C230                               ;; Check if ball moves right
0C230                               ;; No need to check nudging here as that will never collide with a tile
0C230 A5 1A                         LDA buttons_held
0C232 29 02                         AND #BUTTON_LEFT
0C234 F0 1D                         BEQ +checkTopCollision
0C236                           
0C236                               ;; Check tile at right position
0C236 A5 3E                         LDA ball_middle
0C238 85 0B                         STA temp
0C23A A5 3A                         LDA ball_left
0C23C 85 0C                         STA temp+1
0C23E 20 29 C7                      JSR sub_ConvertXYToTileType
0C241 29 01                         AND #TILE_IS_SOLID
0C243 F0 0E                         BEQ +checkTopCollision
0C245                           
0C245                               ;; Tile is solid; nudge ball and evaluate tile type
0C245 A9 FF                         LDA #$FF
0C247 85 41                         STA move_block_space_to_check
0C249 A5 42                         LDA ball_flags
0C24B 09 02                         ORA #NUDGE_BALL_RIGHT
0C24D 20 8F CA                      JSR sub_InitiateNudge
0C250 20 B7 C8                      JSR sub_EvaluateTileType
0C253                               
0C253                               
0C253                           +checkTopCollision:
0C253                               ;; Check if ball moves up
0C253 A5 42                         LDA ball_flags
0C255 29 10                         AND #BALL_MOVES_DOWN
0C257 D0 27                         BNE +checkBottomCollision
0C259                           
0C259                               ;; Check tile at top position
0C259 A5 3D                         LDA ball_top
0C25B 85 0B                         STA temp
0C25D A5 3B                         LDA ball_center
0C25F 85 0C                         STA temp+1
0C261 20 29 C7                      JSR sub_ConvertXYToTileType
0C264 29 01                         AND #TILE_IS_SOLID
0C266 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C268                           
0C268                               ;; Tile is solid; move ball down and evaluate tile type
0C268 A5 27                         LDA ball_ypos_lo_prev
0C26A 85 25                         STA ball_ypos_lo
0C26C A5 26                         LDA ball_ypos_hi_prev
0C26E 85 24                         STA ball_ypos_hi
0C270 A5 42                         LDA ball_flags
0C272 09 10                         ORA #MOVE_BALL_DOWN
0C274 85 42                         STA ball_flags
0C276                           
0C276 A9 F0                         LDA #$F0 ; which is -16
0C278 85 41                         STA move_block_space_to_check
0C27A 20 B7 C8                      JSR sub_EvaluateTileType
0C27D 4C A4 C2                      JMP +doneCheckingCollision
0C280                           
0C280                           +checkBottomCollision:
0C280                               ;; No movement check needed: since ball is not moving up, it must move down
0C280                           
0C280                               ;; Check tile at bottom position
0C280 A5 3F                         LDA ball_bottom
0C282 85 0B                         STA temp
0C284 A5 3B                         LDA ball_center
0C286 85 0C                         STA temp+1
0C288 20 29 C7                      JSR sub_ConvertXYToTileType
0C28B 29 01                         AND #TILE_IS_SOLID
0C28D F0 15                         BEQ +doneCheckingCollision
0C28F                           
0C28F                               ;; Tile is solid; move ball up and evaluate tile type
0C28F A5 27                         LDA ball_ypos_lo_prev
0C291 85 25                         STA ball_ypos_lo
0C293 A5 26                         LDA ball_ypos_hi_prev
0C295 85 24                         STA ball_ypos_hi
0C297 A5 42                         LDA ball_flags
0C299 29 EF                         AND #MOVE_BALL_UP
0C29B 85 42                         STA ball_flags
0C29D                           
0C29D A9 10                         LDA #$10
0C29F 85 41                         STA move_block_space_to_check
0C2A1 20 B7 C8                      JSR sub_EvaluateTileType
0C2A4                           
0C2A4                           +doneCheckingCollision:
0C2A4                           
0C2A4                               
0C2A4                               ;; Update bonus
0C2A4                               .include "game/include/main/update_bonus.asm"
0C2A4                           
0C2A4                           ;; Update the bonus counter on screen
0C2A4                           
0C2A4                               ;; If bonus = 000, skip decreasing
0C2A4 A5 37                         LDA ball_bonus
0C2A6 05 38                         ORA ball_bonus+1
0C2A8 05 39                         ORA ball_bonus+2
0C2AA F0 0D                         BEQ +done
0C2AC                           
0C2AC                               ;; Check if bonus timer is done yet
0C2AC A5 4A                         LDA bonus_timer
0C2AE D0 09                         BNE +done
0C2B0                           
0C2B0                               ;; Bonus timer is done
0C2B0                               ;; Reset bonus timer
0C2B0 A9 08                         LDA #BONUS_FRAMES
0C2B2 85 4A                         STA bonus_timer
0C2B4                               
0C2B4                               ;; Subtract one from ball bonus ones
0C2B4 A2 01                         LDX #$01
0C2B6 20 60 D1                      JSR sub_SubtractXFromBonus
0C2B9                           
0C2B9                           +done:
0C2B9                           
0C2B9                           
0C2B9                               ;; Check if self-destruct
0C2B9 A5 1B                         LDA buttons_pressed
0C2BB 29 20                         AND #BUTTON_SELECT
0C2BD F0 03                         BEQ +
0C2BF 20 50 C9                          JSR sub_Selfdestruct
0C2C2                               +
0C2C2                           
0C2C2                           
0C2C2                           +skipBallMovement:
0C2C2                               ;; Move blocks a pixel up/down/left/right
0C2C2                               .include "game/include/main/move_blocks.asm"
0C2C2                           
0C2C2                               ;; Set up block loop
0C2C2 A2 04                         LDX #MAX_ANIMATIONS
0C2C4                           -moveBlocksLoop:
0C2C4 CA                            DEX
0C2C5                           
0C2C5                               ;; Check if block is still moving
0C2C5 BD 80 03                      LDA move_block_timer,x
0C2C8 F0 33                         BEQ +checkNext
0C2CA                               
0C2CA                               ;; Check if block is done moving
0C2CA C9 01                         CMP #$01
0C2CC D0 0B                         BNE +
0C2CE                                   ;; If so, draw a tile and remove the sprite
0C2CE 20 82 C7                          JSR sub_DrawMoveTile
0C2D1 A9 00                             LDA #$00
0C2D3 9D 80 03                          STA move_block_timer,x
0C2D6 4C FD C2                          JMP +checkNext
0C2D9                               +
0C2D9                               
0C2D9                               ;; Check in which direction the block is moving
0C2D9                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2D9 BD 88 03                      LDA move_block_flags,x
0C2DC 29 03                         AND #%00000011
0C2DE F0 14                         BEQ +movingDown
0C2E0 C9 01                         CMP #$01
0C2E2 F0 0A                         BEQ +movingUp
0C2E4 C9 02                         CMP #$02
0C2E6 F0 12                         BEQ +movingRight
0C2E8                               
0C2E8                               ;; Move block in correct direction
0C2E8                               +movingLeft:
0C2E8 DE 78 03                      DEC move_block_x,x
0C2EB 4C FD C2                      JMP +checkNext
0C2EE                           
0C2EE                               +movingUp:
0C2EE DE 7C 03                      DEC move_block_y,x
0C2F1 4C FD C2                      JMP +checkNext
0C2F4                           
0C2F4                               +movingDown:
0C2F4 FE 7C 03                      INC move_block_y,x
0C2F7 4C FD C2                      JMP +checkNext
0C2FA                           
0C2FA                               +movingRight:
0C2FA FE 78 03                      INC move_block_x,x
0C2FD                           
0C2FD                               ;; Check next block (if any left)
0C2FD                               +checkNext:
0C2FD E0 00                         CPX #$00
0C2FF D0 C3                         BNE -moveBlocksLoop
0C301                               
0C301                               ;; Don't update sprites
0C301 E6 40                         INC sprites_update_position
0C303                           
0C303                           
0C303                           +skipSpriteMovement:
0C303                               ;; Testing timed PPU scroll concept (disabled)
0C303                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C303                           
0C303                               ;; Check if ball is dead
0C303 A5 42                         LDA ball_flags
0C305 29 01                         AND #BALL_IS_DEAD
0C307 F0 03                         BEQ +
0C309 4C 2B C3                          JMP +ballIsDead
0C30C                               +
0C30C                               
0C30C                               ;; Add ball to sprite buffer
0C30C A6 48                         LDX sprite_ram_pointer
0C30E A5 24                         LDA ball_ypos_hi
0C310 9D 00 02                      STA ADDR_SPRITERAM,x
0C313 E8                            INX
0C314 A9 01                         LDA #BALL_TILE_CHR
0C316 9D 00 02                      STA ADDR_SPRITERAM,x
0C319 E8                            INX
0C31A A9 00                         LDA #BALL_ATTR
0C31C 9D 00 02                      STA ADDR_SPRITERAM,x
0C31F E8                            INX
0C320 A5 22                         LDA ball_xpos_hi
0C322 9D 00 02                      STA ADDR_SPRITERAM,x
0C325 E8                            INX
0C326 86 48                         STX sprite_ram_pointer
0C328 4C 3C C3                      JMP +drawBlocks
0C32B                           
0C32B                           +ballIsDead:
0C32B                               ;; Check if kill timer has reset
0C32B A5 4B                         LDA kill_timer
0C32D F0 03                         BEQ +
0C32F 4C 3C C3                          JMP +drawBlocks
0C332                               +
0C332                               
0C332                               ;; Take a live
0C332 C6 2A                         DEC ball_lives
0C334 D0 03                         BNE +
0C336                                   ;; If no lives left, initiate game over sequence
0C336 4C EF C3                          JMP lbl_GameOver
0C339                               +
0C339                               
0C339                               ;; Reload current level
0C339 4C 55 C5                      JMP lbl_InitiateLevelLoad
0C33C                           
0C33C                           
0C33C                           +drawBlocks:
0C33C                               ;; Draw moving block(s, if any)
0C33C                               .include "game/include/main/draw_blocks.asm"
0C33C                           
0C33C                           ;; Handle movement of move blocks
0C33C                           
0C33C                               ;; Set up a loop
0C33C A0 04                         LDY #MAX_ANIMATIONS
0C33E                           -drawBlocksLoop:
0C33E 88                            DEY
0C33F                           
0C33F                               ;; If timer is zero, check the next move block
0C33F B9 80 03                      LDA move_block_timer,y
0C342 F0 52                         BEQ +nextMoveBlock
0C344                               
0C344                               ;; Get current sprite pointer
0C344 A6 48                         LDX sprite_ram_pointer
0C346                           
0C346                               ;; Draw the sprites on screen
0C346 B9 7C 03                      LDA move_block_y,y
0C349 9D 00 02                      STA ADDR_SPRITERAM,x
0C34C 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C34F 18                            CLC
0C350 69 08                         ADC #$08
0C352 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C355 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C358 E8                            INX
0C359                           
0C359 A9 52                         LDA #$52 ; Top left chr id
0C35B 9D 00 02                      STA ADDR_SPRITERAM,x
0C35E A9 53                         LDA #$53 ; Top right chr id
0C360 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C363 A9 62                         LDA #$62 ; Bottom left chr id
0C365 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C368 A9 63                         LDA #$63 ; Bottom right chr id
0C36A 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C36D E8                            INX
0C36E                           
0C36E A9 00                         LDA #BALL_ATTR
0C370 9D 00 02                      STA ADDR_SPRITERAM,x
0C373 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C376 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C379 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C37C E8                            INX
0C37D                           
0C37D B9 78 03                      LDA move_block_x,y
0C380 9D 00 02                      STA ADDR_SPRITERAM,x
0C383 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C386 18                            CLC
0C387 69 08                         ADC #$08
0C389 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C38C 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C38F                           
0C38F                               ;; Update sprite RAM pointer
0C38F A5 48                         LDA sprite_ram_pointer
0C391 18                            CLC
0C392 69 10                         ADC #$10
0C394 85 48                         STA sprite_ram_pointer
0C396                           
0C396                           
0C396                           
0C396                           +nextMoveBlock:
0C396                               ;; Check the next move block
0C396 C0 00                         CPY #$00
0C398 D0 A4                         BNE -drawBlocksLoop
0C39A                           
0C39A 4C E9 C3                      JMP +doneScreenLoad
0C39D                           
0C39D                           
0C39D                           
0C39D                           +checkNextScreen:
0C39D                           
0C39D                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C39D                               ;; Upon pressing START, the selected level will start
0C39D                               .include "game/include/main/select_level.asm"
0C39D                           
0C39D                               ;; Change level number on start screen
0C39D A5 1B                         LDA buttons_pressed
0C39F 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3A1 F0 3C                         BEQ +checkStartPress
0C3A3                           
0C3A3                                   ;; Select next level (1, 5, 9, 13, 17)
0C3A3 A5 4D                             LDA current_level
0C3A5 18                                CLC
0C3A6 69 04                             ADC #$04
0C3A8 C9 14                             CMP #$14
0C3AA D0 02                             BNE +
0C3AC A9 00                                 LDA #$00
0C3AE                                   +
0C3AE 85 4D                             STA current_level
0C3B0                                   
0C3B0                                   ;; Convert level number to two-byte value
0C3B0 A9 00                             LDA #$00
0C3B2 85 0E                             STA temp+3
0C3B4 A5 4D                             LDA current_level
0C3B6 18                                CLC
0C3B7 69 01                             ADC #$01
0C3B9                           
0C3B9                               -
0C3B9 C9 0A                             CMP #$0A
0C3BB 90 08                             BCC +
0C3BD E6 0E                                 INC temp+3
0C3BF 38                                    SEC
0C3C0 E9 0A                                 SBC #$0A
0C3C2 4C B9 C3                              JMP -
0C3C5                                   +
0C3C5                           
0C3C5                                   ;; Add level number to PPU buffer
0C3C5 18                                CLC
0C3C6 69 01                             ADC #$01
0C3C8 85 0D                             STA temp+2
0C3CA A9 20                             LDA #$20
0C3CC 85 0B                             STA temp
0C3CE A9 C7                             LDA #$C7
0C3D0 85 0C                             STA temp+1
0C3D2 20 C5 D1                          JSR sub_WriteByteToPPUBuffer
0C3D5                                   
0C3D5 C6 0C                             DEC temp+1
0C3D7 A4 0E                             LDY temp+3
0C3D9 C8                                INY
0C3DA 84 0D                             STY temp+2
0C3DC 20 C5 D1                          JSR sub_WriteByteToPPUBuffer
0C3DF                                   
0C3DF                               +checkStartPress:
0C3DF                           
0C3DF                           
0C3DF                           
0C3DF                               ;; If START button is pressed
0C3DF A5 1B                         LDA buttons_pressed
0C3E1 29 10                         AND #BUTTON_START
0C3E3 F0 04                         BEQ +
0C3E5                                   ;; Start the level
0C3E5 A9 81                             LDA #LOAD_GAME_SCREEN
0C3E7 85 43                             STA screen_mode
0C3E9                               +
0C3E9                           
0C3E9                           
0C3E9                           
0C3E9                           +doneScreenLoad:
0C3E9                           
0C3E9                               ;; Load animations (if any)
0C3E9                               ;; and sprite clean-up
0C3E9 20 99 CA                      JSR sub_LoadAnimations
0C3EC                           
0C3EC 4C B2 C0                      JMP lbl_MainGameLoop
0C3EF                           
0C3EF                           ;; Following sequences are outside main game loop
0C3EF                           .include "game/include/main/game_over.asm"
0C3EF                           
0C3EF                           ;; Game over sequence
0C3EF                           lbl_GameOver:
0C3EF                           
0C3EF                               ;; Check if current score exceeds high score
0C3EF A2 00                         LDX #$00
0C3F1                               -checkHiScoreLoop:
0C3F1                           
0C3F1                                   ;; Compare ball score digit with high score digit
0C3F1 B5 2B                             LDA ball_score,x
0C3F3 D5 05                             CMP hi_score,x
0C3F5                           
0C3F5                                   ;; If the score digit is lower, the entire score must
0C3F5                                   ;; be lower, so we can skip checking the other digits
0C3F5 90 18                             BCC +hiScoreHandlingDone
0C3F7                           
0C3F7                                   ;; If the score digit is equal, check the next digit
0C3F7 F0 03                             BEQ +checkNextDigit
0C3F9                           
0C3F9                                   ;; If the score digit is higher, update the high score
0C3F9 4C 04 C4                          JMP +updateHighScore
0C3FC                           
0C3FC                                   ;; Check the next digit (if any digits are left)
0C3FC                                   +checkNextDigit:
0C3FC E8                                INX
0C3FD E0 06                             CPX #$06
0C3FF D0 F0                         BNE -checkHiScoreLoop
0C401                           
0C401                               ;; All digits are equal? What are the odds!
0C401                               ;; Either way, we don't have to update the high score,
0C401                               ;; although doing so won't do any harm, so if we need
0C401                               ;; three more bytes at the cost of a couple dozen
0C401                               ;; cycles, we can skip this jump.
0C401 4C 0F C4                      JMP +hiScoreHandlingDone
0C404                           
0C404                               ;; Transfer the ball score values to the high score values
0C404                               +updateHighScore:
0C404 A2 00                         LDX #$00
0C406                               -
0C406 B5 2B                             LDA ball_score,x
0C408 95 05                             STA hi_score,x
0C40A E8                                INX
0C40B E0 06                             CPX #$06
0C40D D0 F7                         BNE -
0C40F                           
0C40F                               ;; The high score has been handled now.
0C40F                               +hiScoreHandlingDone:
0C40F                               
0C40F                               ;; Disable noise channel
0C40F A9 00                         LDA #$00
0C411 8D 15 40                      STA APU_STATUS
0C414 8D 0C 40                      STA NOISE_VOLUME
0C417                               
0C417                               ;; Do blinds effect
0C417 20 17 C6                      JSR sub_BlindsEffect
0C41A                           
0C41A                               ;; Disable draw after HUD to disable screen
0C41A 20 9C C5                      JSR sub_WaitForNMI
0C41D                               -
0C41D AD 02 20                          LDA PPU_STATUS
0C420 29 40                             AND #SPRITE_0_HIT
0C422 D0 F9                         BNE -
0C424                               -
0C424 AD 02 20                          LDA PPU_STATUS
0C427 29 40                             AND #SPRITE_0_HIT
0C429 F0 F9                         BEQ -
0C42B 20 B2 D1                      JSR sub_Waste6
0C42E 20 B5 D1                      JSR sub_Waste5
0C431 20 B8 D1                      JSR sub_Waste4
0C434 20 BB D1                      JSR sub_Waste3
0C437 20 C1 D1                      JSR sub_Waste1
0C43A 20 C4 D1                      JSR sub_Waste0
0C43D A9 00                         LDA #$00
0C43F 8D 01 20                      STA PPU_MASK
0C442                               
0C442                               ;; Remove game area from view
0C442 2C 02 20                      BIT PPU_STATUS
0C445 A9 20                         LDA #$20
0C447 8D 06 20                      STA PPU_ADDR
0C44A A9 A0                         LDA #$A0
0C44C 8D 06 20                      STA PPU_ADDR
0C44F A9 00                         LDA #$00
0C451 A2 16                         LDX #$16
0C453                               -xLoop:
0C453 A0 20                             LDY #$20
0C455                                   -yLoop:
0C455 8D 07 20                              STA PPU_DATA
0C458 88                                    DEY
0C459 D0 FA                             BNE -yLoop
0C45B CA                                DEX
0C45C D0 F5                         BNE -xLoop
0C45E                               
0C45E                               ;; Set lives to 0
0C45E 2C 02 20                      BIT PPU_STATUS
0C461 A9 20                         LDA #$20
0C463 8D 06 20                      STA PPU_ADDR
0C466 A9 92                         LDA #$92
0C468 8D 06 20                      STA PPU_ADDR
0C46B A9 01                         LDA #$01
0C46D 8D 07 20                      STA PPU_DATA
0C470                               
0C470                               ;; Reset scroll
0C470 A9 00                         LDA #$00
0C472 8D 05 20                      STA PPU_SCROLL
0C475 8D 05 20                      STA PPU_SCROLL
0C478 20 9C C5                      JSR sub_WaitForNMI
0C47B                           
0C47B                               ;; Pause for a little while
0C47B A2 18                         LDX #$18
0C47D                               -
0C47D 20 9C C5                          JSR sub_WaitForNMI
0C480 CA                                DEX
0C481 D0 FA                         BNE -
0C483                                       
0C483                               ;; Do flash effect
0C483 20 30 CA                      JSR sub_FlashEffect
0C486                           
0C486                               ;; Draw GAME OVER tiles over game screen
0C486 A9 21                         LDA #$21
0C488 85 0B                         STA temp
0C48A A9 EB                         LDA #$EB
0C48C 85 0C                         STA temp+1
0C48E                           
0C48E A2 00                         LDX #$00
0C490                               -gameOverTileLoop:
0C490 BD E6 DA                          LDA tbl_GameOver,x
0C493 85 0D                             STA temp+2
0C495 20 C5 D1                          JSR sub_WriteByteToPPUBuffer
0C498 E6 0C                             INC temp+1
0C49A E8                                INX
0C49B E0 0A                             CPX #$0A
0C49D D0 F1                         BNE -gameOverTileLoop
0C49F                               
0C49F                               ;; Update GAME OVER attributes on game screen
0C49F A9 23                         LDA #$23
0C4A1 85 0B                         STA temp
0C4A3 A9 DA                         LDA #$DA
0C4A5 85 0C                         STA temp+1
0C4A7 A9 AA                         LDA #$AA
0C4A9 85 0D                         STA temp+2
0C4AB A2 04                         LDX #$04
0C4AD                               -
0C4AD 20 C5 D1                          JSR sub_WriteByteToPPUBuffer
0C4B0 E6 0C                             INC temp+1
0C4B2 CA                                DEX
0C4B3 D0 F8                         BNE -
0C4B5 20 9C C5                      JSR sub_WaitForNMI
0C4B8                               
0C4B8                              
0C4B8                               ;; If player score is larger than high score
0C4B8                               ;; Overwrite high score with player score
0C4B8                               ;; [@TODO]
0C4B8                               
0C4B8                               
0C4B8                               ;; If player presses either A or START, (soft) reset the game
0C4B8                               -checkController:
0C4B8 20 88 C5                          JSR sub_ReadController
0C4BB A5 1A                             LDA buttons_held
0C4BD 29 90                             AND #%10010000
0C4BF F0 F7                         BEQ -checkController
0C4C1 4C 4F C0                      JMP lbl_SoftReset
0C4C4                           
0C4C4                           .include "game/include/main/level_win.asm"
0C4C4                           
0C4C4                           ;; Handling of level win state
0C4C4                           lbl_LevelWin:
0C4C4                           
0C4C4                               ;; Freeze the ball
0C4C4 A5 42                         LDA ball_flags
0C4C6 09 04                         ORA #FREEZE_BALL
0C4C8 85 42                         STA ball_flags
0C4CA                           
0C4CA                               ;; Disable noise channel
0C4CA A9 01                         LDA #$01
0C4CC 85 56                         STA noise_muted
0C4CE                               
0C4CE                               ;; Wait a few frames
0C4CE A2 18                         LDX #$18
0C4D0 20 9D D1                      JSR sub_WaitXFrames
0C4D3                           
0C4D3                               ;; Set null tile color to yellow
0C4D3 A9 3F                         LDA #$3F
0C4D5 85 0B                         STA temp
0C4D7 A9 02                         LDA #$02
0C4D9 85 0C                         STA temp+1
0C4DB A9 38                         LDA #$38
0C4DD 85 0D                         STA temp+2
0C4DF 20 C5 D1                      JSR sub_WriteByteToPPUBuffer
0C4E2                               
0C4E2                               ;; Quick and dirty way to remove ball from screen
0C4E2 A9 EF                         LDA #$EF
0C4E4 8D 04 02                      STA ADDR_SPRITERAM+4
0C4E7 8D 05 02                      STA ADDR_SPRITERAM+5
0C4EA 8D 06 02                      STA ADDR_SPRITERAM+6
0C4ED 8D 07 02                      STA ADDR_SPRITERAM+7
0C4F0                               
0C4F0                               ;; Initiate frequency beeps (@TODO)
0C4F0                               
0C4F0                               ;; Wait a few frames
0C4F0 A2 10                         LDX #$10
0C4F2 20 9D D1                      JSR sub_WaitXFrames
0C4F5                               
0C4F5                               ;; Restore null tile color to dark blue
0C4F5 A9 3F                         LDA #$3F
0C4F7 85 0B                         STA temp
0C4F9 A9 02                         LDA #$02
0C4FB 85 0C                         STA temp+1
0C4FD A9 12                         LDA #$12
0C4FF 85 0D                         STA temp+2
0C501 20 C5 D1                      JSR sub_WriteByteToPPUBuffer
0C504                           
0C504                               ;; Wait a few frames
0C504 A2 2D                         LDX #$2D
0C506 20 9D D1                      JSR sub_WaitXFrames
0C509                               
0C509                           
0C509                               ;; Play the end level sweep sound effect, and
0C509                               ;; initiate bonus score routine
0C509 A9 B8                         LDA #$B8
0C50B 85 55                         STA soft_pulse1
0C50D                           
0C50D A9 01                         LDA #$01
0C50F 8D 15 40                      STA APU_STATUS
0C512 85 54                         STA do_beeps
0C514                           
0C514                               -bonusPointsLoop:
0C514                                   ;; Check how many bonus points to subtract
0C514                                   ;; (either the max, or what's left)
0C514 A5 37                             LDA ball_bonus
0C516 05 38                             ORA ball_bonus+1
0C518 D0 06                             BNE +fullBonus
0C51A A5 39                             LDA ball_bonus+2
0C51C C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C51E 90 02                             BCC +partBonus
0C520                           
0C520                                   +fullBonus:
0C520 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C522                                   +partBonus:
0C522                           
0C522                                   ;; Put value that's added to score on the stack
0C522 AA                                TAX
0C523 BD 8D DB                          LDA tbl_BonusToScore,x
0C526 48                                PHA
0C527                           
0C527                                   ;; Subtract X-register from bonus
0C527 20 60 D1                          JSR sub_SubtractXFromBonus
0C52A                           
0C52A                                   ;; Get value from stack and add it to the score
0C52A 68                                PLA
0C52B 20 AB C5                          JSR sub_AddAccumulatorToScore
0C52E                           
0C52E                                   ;; Wait for NMI twice
0C52E 20 9C C5                          JSR sub_WaitForNMI
0C531 20 9C C5                          JSR sub_WaitForNMI
0C534                           
0C534                                   ;; Check if bonus countdown is done
0C534 A5 37                             LDA ball_bonus
0C536 05 38                             ORA ball_bonus+1
0C538 05 39                             ORA ball_bonus+2
0C53A D0 D8                         BNE -bonusPointsLoop
0C53C                           
0C53C                               ;; fade out the beeping
0C53C A2 08                         LDX #$08
0C53E                               -fadeOutLoop:
0C53E 20 9C C5                          JSR sub_WaitForNMI
0C541 20 9C C5                          JSR sub_WaitForNMI
0C544 C6 55                             DEC soft_pulse1
0C546 CA                                DEX
0C547 D0 F5                         BNE -fadeOutLoop
0C549                           
0C549                               ;; Stop random beeping
0C549 A9 02                         LDA #$02
0C54B 85 54                         STA do_beeps
0C54D                               
0C54D                               ;; Wait a few frames
0C54D A2 30                         LDX #$30
0C54F 20 9D D1                      JSR sub_WaitXFrames
0C552                           
0C552                               ;; Load next level
0C552 4C 55 C5                      JMP lbl_InitiateLevelLoad
0C555                               
0C555                           .include "game/include/main/initiate_level_load.asm"
0C555                           
0C555                           ;; Load level
0C555                           lbl_InitiateLevelLoad:
0C555                               
0C555                               ;; Blind out the screen
0C555 20 17 C6                      JSR sub_BlindsEffect
0C558                               
0C558                               ;; If ball is dead, (re)load current level
0C558                               ;; If ball is alive, load next level
0C558 A5 42                         LDA ball_flags
0C55A 29 01                         AND #BALL_IS_DEAD
0C55C D0 05                         BNE +
0C55E E6 4D                             INC current_level
0C560 4C 69 C5                          JMP +loadLevel
0C563                               +
0C563                               
0C563                               ;; Revive ball
0C563 A5 42                         LDA ball_flags
0C565 29 FE                         AND #REVIVE_BALL
0C567 85 42                         STA ball_flags
0C569                           
0C569                           +loadLevel:
0C569                               ;; This loops back to level 1 after level 25* for now,
0C569                               ;; as a proper game ending is yet to be introduced.
0C569                               ;; *26 in test mode
0C569 A5 4D                         LDA current_level
0C56B                               ifdef TESTING
0C56B                                   CMP #26
0C56B                               else
0C56B C9 19                             CMP #25
0C56D                               endif
0C56D D0 04                         BNE +
0C56F A9 00                             LDA #$00
0C571 85 4D                             STA current_level
0C573                               +
0C573                               
0C573                               ;; Tell the game to load the level screen on the next loop.
0C573 A9 81                         LDA #LOAD_GAME_SCREEN
0C575 85 43                         STA screen_mode
0C577                           
0C577                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C577 4C B2 C0                      JMP lbl_MainGameLoop0C57A                           
0C57A                           
0C57A                           ;; Subroutines
0C57A                           .include "include/subroutines.asm"
0C57A                           
0C57A                           ;; RNG
0C57A                           .include "subroutine/GetRandomNumber.asm"
0C57A                           
0C57A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C57A                           ;;
0C57A                           ;; subroutine/GetRandomNumber.asm
0C57A                           ;;
0C57A                           ;; Simple and fast random number generator by White Flame.
0C57A                           ;;
0C57A                           ;; Set random_seed to an arbitrary number to randomize between
0C57A                           ;; gaming sessions, for instance using the frame timer upon
0C57A                           ;; pressing START on the intro screen.
0C57A                           ;;
0C57A                           ;;     ;; IF START PRESSED:
0C57A                           ;;     LDA frame_counter
0C57A                           ;;     STA random_seed
0C57A                           ;;
0C57A                           ;; Source:
0C57A                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C57A                           ;;
0C57A                           ;;
0C57A                           
0C57A                           sub_GetRandomNumber:
0C57A                               ;; Force EOR if random_seed is zero
0C57A A5 21                         LDA random_seed
0C57C F0 05                         BEQ +doEor
0C57E                           
0C57E                               ;; Shift left, and EOR if the high bit is set
0C57E 0A                            ASL
0C57F F0 04                         BEQ +noEor
0C581 90 02                         BCC +noEor
0C583                           
0C583                           +doEor:
0C583 49 1D                         EOR #$1D
0C585                           
0C585                           +noEor:
0C585 85 21                         STA random_seed
0C587                           
0C587 60                            RTS
0C588                           
0C588                           
0C588                           ;; Read controller input
0C588                           .include "subroutine/ReadController.asm"
0C588                           
0C588                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C588                           ;;
0C588                           ;; subroutine/ReadController.asm
0C588                           ;;
0C588                           ;; Subroutine that polls the controller and stores the input
0C588                           ;; buttons in a variable. This version only handles controller
0C588                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C588                           ;;
0C588                           ;;
0C588                           
0C588                           sub_ReadController:
0C588                           
0C588                               ;; Set strobe bit
0C588 A9 01                         LDA #$01
0C58A 8D 16 40                      STA JOYPAD_1
0C58D                           
0C58D                               ;; Set up ring timer
0C58D 85 1A                         STA buttons_held
0C58F                           
0C58F                               ;; Clear strobe bit
0C58F 4A                            LSR
0C590 8D 16 40                      STA JOYPAD_1
0C593                           
0C593                               ;; Loop through button presses
0C593                               -
0C593 AD 16 40                          LDA JOYPAD_1
0C596 4A                                LSR
0C597 26 1A                             ROL buttons_held
0C599                           
0C599                               ;; Check if ring timer is done
0C599 90 F8                         BCC -
0C59B                           
0C59B                               ;; Return from subroutine
0C59B 60                            RTS
0C59C                           
0C59C                           
0C59C                           ;; vBlank/NMI wait
0C59C                           .include "subroutine/WaitForNMI.asm"
0C59C                           
0C59C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C59C                           ;;
0C59C                           ;; subroutine/WaitForVBlank.asm
0C59C                           ;;
0C59C                           ;; Subroutine that essentially pauses script execution until
0C59C                           ;; vBlank happens.
0C59C                           ;;
0C59C                           ;;
0C59C                           
0C59C                           sub_WaitForNMI:
0C59C A9 01                         LDA #$01
0C59E 85 5E                         STA check_nmi
0C5A0                               -
0C5A0 A5 5E                             LDA check_nmi
0C5A2 D0 FC                         BNE -
0C5A4 60                            RTS
0C5A5                           
0C5A5                           .include "subroutine/WaitForVBlank.asm"
0C5A5                           
0C5A5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5A5                           ;;
0C5A5                           ;; subroutine/WaitForVBlank.asm
0C5A5                           ;;
0C5A5                           ;; Subroutine that essentially pauses script execution until
0C5A5                           ;; vBlank happens.
0C5A5                           ;;
0C5A5                           ;;
0C5A5                           
0C5A5                           sub_WaitForVBlank:
0C5A5 2C 02 20                      BIT $2002
0C5A8 10 FB                         BPL sub_WaitForVBlank
0C5AA 60                            RTS
0C5AB                           
0C5AB                           
0C5AB                           ;; Game specific subroutines
0C5AB                           .include "game/include/subroutines.asm"
0C5AB                           
0C5AB                           ;; additional game-specific subroutines go here
0C5AB                           
0C5AB                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C5AB                           
0C5AB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5AB                           ;;
0C5AB                           ;;  sub_AddAccumulatorToScore.asm
0C5AB                           ;;
0C5AB                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C5AB                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C5AB                           ;;  actual score.
0C5AB                           ;;
0C5AB                           ;;
0C5AB                           
0C5AB                           
0C5AB                           sub_AddAccumulatorToScore:
0C5AB                           
0C5AB                               ;; Clear old add_to_score
0C5AB A2 05                         LDX #$05
0C5AD A0 00                         LDY #$00
0C5AF                               -
0C5AF 94 31                             STY add_to_score,x
0C5B1 CA                                DEX
0C5B2 10 FB                         BPL -
0C5B4                           
0C5B4                               ;; Set accumulator to add_to_score variables
0C5B4                               ;; Check and update 100s
0C5B4                               -checkHundreds:
0C5B4 C9 64                             CMP #100
0C5B6 90 08                             BCC +checkTens
0C5B8 38                                    SEC
0C5B9 E9 64                                 SBC #100
0C5BB E6 34                                 INC add_to_score+3
0C5BD 4C B4 C5                              JMP -checkHundreds
0C5C0                                   +checkTens:
0C5C0                           
0C5C0                               ;; Check and update 10s
0C5C0                               -checkTens:
0C5C0 C9 0A                             CMP #10
0C5C2 90 08                             BCC +setOnes
0C5C4 38                                    SEC
0C5C5 E9 0A                                 SBC #10
0C5C7 E6 35                                 INC add_to_score+4
0C5C9 4C C0 C5                              JMP -checkTens
0C5CC                                   +setOnes:
0C5CC                           
0C5CC                               ;; We're left with 1s
0C5CC 85 36                         STA add_to_score+5
0C5CE                           
0C5CE                               ;; Byte for byte, add add_to_score to ball_score
0C5CE A9 00                         LDA #$00
0C5D0 85 44                         STA ppu_buffer_update
0C5D2 A4 45                         LDY ppu_buffer_pointer
0C5D4 A2 05                         LDX #$05
0C5D6                               -
0C5D6 B5 31                             LDA add_to_score,x
0C5D8 18                                CLC
0C5D9 75 2B                             ADC ball_score,x
0C5DB C9 0A                             CMP #10
0C5DD 90 05                             BCC +
0C5DF 38                                    SEC
0C5E0 E9 0A                                 SBC #10
0C5E2 F6 2A                                 INC ball_score-1,x
0C5E4                                   +
0C5E4                                   
0C5E4                                   ;; Update new score digit
0C5E4 95 2B                             STA ball_score,x
0C5E6                           
0C5E6                                   ;; Update score tile in PPU
0C5E6 A9 20                             LDA #$20
0C5E8 99 00 03                          STA ppu_buffer,y
0C5EB C8                                INY
0C5EC 8A                                TXA
0C5ED 18                                CLC
0C5EE 69 83                             ADC #$83
0C5F0 99 00 03                          STA ppu_buffer,y
0C5F3 C8                                INY
0C5F4 B5 2B                             LDA ball_score,x
0C5F6 18                                CLC
0C5F7 69 01                             ADC #$01
0C5F9 99 00 03                          STA ppu_buffer,y
0C5FC C8                                INY
0C5FD                           
0C5FD                                   ;; Check next digit (if any left)
0C5FD CA                                DEX
0C5FE 30 03                             BMI +done
0C600 4C D6 C5                      JMP -
0C603                           
0C603                           +done:
0C603                               ;; Update PPU buffer pointer and status
0C603 84 45                         STY ppu_buffer_pointer
0C605 A9 01                         LDA #$01
0C607 85 44                         STA ppu_buffer_update
0C609                           
0C609                               ;; Done: return 
0C609 60                            RTS
0C60A                           
0C60A                           .include "game/subroutine/BackgroundNoise.asm"
0C60A                           
0C60A                           ;; Play background noise
0C60A                           sub_BackgroundNoise:
0C60A A9 32                         LDA #$32
0C60C 8D 0C 40                      STA NOISE_VOLUME
0C60F A9 0E                         LDA #$0E
0C611 8D 0E 40                      STA NOISE_PERIOD
0C614 85 52                         STA current_noise
0C616 60                            RTS
0C617                           
0C617                           .include "game/subroutine/BlindsEffect.asm"
0C617                           
0C617                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C617                           sub_BlindsEffect:
0C617                           
0C617                               ;; Set up loop fading
0C617 A9 00                         LDA #$00
0C619 85 12                         STA temp+7
0C61B A0 08                         LDY #$08
0C61D                               -fadeLoop:
0C61D 84 13                             STY temp+8
0C61F                           
0C61F                                   ;; Wait for NMI to pass
0C61F 20 9C C5                          JSR sub_WaitForNMI
0C622                                   
0C622                                   ;; Now wait for No-sprite 0
0C622                                   -
0C622 AD 02 20                              LDA PPU_STATUS
0C625 29 40                                 AND #SPRITE_0_HIT
0C627 D0 F9                             BNE -
0C629                               
0C629                                   ;; Now wait for Sprite 0
0C629                                   -
0C629 AD 02 20                              LDA PPU_STATUS
0C62C 29 40                                 AND #SPRITE_0_HIT
0C62E F0 F9                             BEQ -
0C630                                   
0C630                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C630 20 B2 D1                          JSR sub_Waste6
0C633 20 B5 D1                          JSR sub_Waste5
0C636 20 B8 D1                          JSR sub_Waste4
0C639 20 BB D1                          JSR sub_Waste3
0C63C 20 C1 D1                          JSR sub_Waste1
0C63F 20 C4 D1                          JSR sub_Waste0
0C642                                   
0C642                                   
0C642                                   ;; Setup tile row loop
0C642 A0 16                             LDY #22
0C644                                   -tileLoop:
0C644                                   
0C644                                       ;; Disable drawing
0C644 A5 1D                                 LDA soft_ppu_mask
0C646 29 F7                                 AND #%11110111
0C648 8D 01 20                              STA PPU_MASK
0C64B                                       
0C64B                                       ;; Set up scanline loop
0C64B A2 08                                 LDX #$08
0C64D                                       -scanlineLoop:
0C64D E4 13                                     CPX temp+8
0C64F D0 0A                                     BNE +wasteTime
0C651                                           
0C651                                           ;; Restore drawing
0C651 A5 1D                                     LDA soft_ppu_mask
0C653 09 08                                     ORA #%00001000
0C655 8D 01 20                                  STA PPU_MASK
0C658 4C 61 C6                                  JMP +wasteMoreTime
0C65B                           
0C65B                                           ;; Waste 12 frames
0C65B                                           +wasteTime:
0C65B E6 60                                     INC void     ;+5
0C65D C6 60                                     DEC void     ;+5
0C65F 49 00                                     EOR #$00     ;+2
0C661                                           
0C661                                           ;; Waste about a scanline worth of frames
0C661                                           +wasteMoreTime:
0C661 20 BE D1                                  JSR sub_Waste2
0C664 20 C4 D1                                  JSR sub_Waste0
0C667 20 C4 D1                                  JSR sub_Waste0
0C66A E6 60                                     INC void
0C66C 49 00                                     EOR #$00
0C66E 49 00                                     EOR #$00
0C670 CA                                        DEX
0C671 D0 DA                                 BNE -scanlineLoop
0C673 C6 60                                 DEC void
0C675 49 00                                 EOR #$00
0C677 88                                    DEY
0C678 D0 CA                             BNE -tileLoop
0C67A                           
0C67A A4 13                             LDY temp+8
0C67C                                   
0C67C E6 12                             INC temp+7
0C67E A5 12                             LDA temp+7
0C680 C9 02                             CMP #$02
0C682 D0 99                             BNE -fadeLoop
0C684                           
0C684 A9 00                             LDA #$00
0C686 85 12                             STA temp+7
0C688 88                                DEY
0C689 D0 92                         BNE -fadeLoop
0C68B                               
0C68B 60                            RTS
0C68C                           
0C68C                           .include "game/subroutine/ClearScreen.asm"
0C68C                           
0C68C                           ;; Subroutine to clear the screen
0C68C                           ;; If it's a game screen, add noise
0C68C                           
0C68C                           sub_ClearScreen:
0C68C                               ;; Check of game screen or not
0C68C A5 43                         LDA screen_mode
0C68E 29 03                         AND #CHECK_SCREEN_MODE
0C690 C9 01                         CMP #IS_GAME_SCREEN
0C692 F0 02                         BEQ +
0C694 A9 00                             LDA #$00
0C696                               +
0C696 85 0C                         STA temp+1
0C698                               
0C698                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C698 2C 02 20                      BIT PPU_STATUS
0C69B A9 20                         LDA #$20
0C69D 8D 06 20                      STA PPU_ADDR
0C6A0 A9 00                         LDA #$00
0C6A2 8D 06 20                      STA PPU_ADDR
0C6A5                               
0C6A5                               ;; Set up tile to draw and loop
0C6A5 85 0B                         STA temp
0C6A7 AA                            TAX
0C6A8 A8                            TAY
0C6A9                           
0C6A9                               -     
0C6A9                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C6A9 A5 0B                             LDA temp
0C6AB 8D 07 20                          STA PPU_DATA
0C6AE                           
0C6AE                                   ;; Check if we should draw noise next. Noise is drawn if:
0C6AE                                   ;; - Screen mode is game screen
0C6AE                                   ;; - Y between #$06 and #$19 (inclusive)
0C6AE                                   ;; - X between #$02 and #$1D (inclusive)
0C6AE                                   
0C6AE                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C6AE A5 0C                             LDA temp+1
0C6B0 F0 1C                             BEQ +nextTileInRow
0C6B2                                   
0C6B2                                   ;; If Y < $6, skip the check
0C6B2 C0 06                             CPY #$06
0C6B4 90 18                             BCC +nextTileInRow
0C6B6                                   
0C6B6                                   ;; If X < $1, skip the check
0C6B6 E0 01                             CPX #$01
0C6B8 90 14                             BCC +nextTileInRow
0C6BA                                   
0C6BA                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C6BA E0 1D                             CPX #$1D
0C6BC D0 04                             BNE +
0C6BE A9 00                                 LDA #$00
0C6C0 85 0B                                 STA temp
0C6C2                                   +
0C6C2 B0 0A                             BCS +nextTileInRow
0C6C4                                   
0C6C4                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C6C4 20 7A C5                          JSR sub_GetRandomNumber
0C6C7 29 07                             AND #%00000111
0C6C9 18                                CLC
0C6CA 69 68                             ADC #$68
0C6CC 85 0B                             STA temp
0C6CE                           
0C6CE                           +nextTileInRow:
0C6CE                                   
0C6CE                                   ;; Check if a row has been done. If not, draw the next
0C6CE E8                                INX
0C6CF E0 20                             CPX #$20
0C6D1 D0 D6                             BNE -
0C6D3                                   
0C6D3                                   ;; Go to the next row (if any left)
0C6D3 A2 00                             LDX #00
0C6D5 C8                                INY
0C6D6                                   
0C6D6                                   ;; If Y is 1A, skip noise tile check until done drawing
0C6D6 C0 1A                             CPY #$1A
0C6D8 D0 04                             BNE +
0C6DA A9 00                                 LDA #$00
0C6DC 85 0C                                 STA temp+1
0C6DE                                   +
0C6DE                                   
0C6DE C0 1E                             CPY #$1E
0C6E0 D0 C7                         BNE -
0C6E2                           
0C6E2                               ;; Clear attribute table
0C6E2 A9 23                         LDA #$23
0C6E4 8D 06 20                      STA PPU_ADDR
0C6E7 A9 C0                         LDA #$C0
0C6E9 8D 06 20                      STA PPU_ADDR
0C6EC A9 00                         LDA #$00
0C6EE A2 40                         LDX #$40
0C6F0                               -
0C6F0 8D 07 20                          STA PPU_DATA
0C6F3 CA                                DEX
0C6F4 D0 FA                         BNE -
0C6F6                               
0C6F6 60                            RTS
0C6F7                           
0C6F7                           .include "game/subroutine/ColorizeBall.asm"
0C6F7                           
0C6F7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6F7                           ;;
0C6F7                           ;;  Subroutine: ColorizeBall
0C6F7                           ;;
0C6F7                           ;;  Applies the color set through ball_flags to the ball sprite.
0C6F7                           ;;  Expects ball_flags to be in the accumulator
0C6F7                           ;;
0C6F7                           
0C6F7                           
0C6F7                           sub_ColorizeBall:
0C6F7                           
0C6F7                               ;; Get color from ball_flags
0C6F7 4A                            LSR
0C6F8 4A                            LSR
0C6F9 4A                            LSR
0C6FA 4A                            LSR
0C6FB 4A                            LSR
0C6FC AA                            TAX
0C6FD                           
0C6FD                               ;; Add new light color of ball to PPU palette
0C6FD A9 3F                         LDA #$3F
0C6FF 85 0B                         STA temp
0C701 A9 11                         LDA #$11
0C703 85 0C                         STA temp+1
0C705 BD 37 D3                      LDA tbl_BallColorLight,x
0C708 85 0D                         STA temp+2
0C70A 20 C5 D1                      JSR sub_WriteByteToPPUBuffer
0C70D                               
0C70D                               ;; Add new dark color of ball to PPU palette
0C70D E6 0C                         INC temp+1
0C70F BD 31 D3                      LDA tbl_BallColorDark,x
0C712 85 0D                         STA temp+2
0C714 20 C5 D1                      JSR sub_WriteByteToPPUBuffer
0C717                               
0C717 60                            RTS
0C718                           
0C718                           .include "game/subroutine/ColorsMatch.asm"
0C718                           
0C718                           ;; Subroutine to check if ball color matches colliding tile color
0C718                           
0C718                           sub_ColorsMatch:
0C718                               ;; Save tile color in temp variable
0C718 A5 4E                         LDA colliding_tile
0C71A 29 0E                         AND #%00001110
0C71C 85 0B                         STA temp
0C71E                           
0C71E                               ;; Get ball color
0C71E A5 42                         LDA ball_flags
0C720 29 E0                         AND #%11100000
0C722 4A                            LSR
0C723 4A                            LSR
0C724 4A                            LSR
0C725 4A                            LSR
0C726                           
0C726                               ;; Compare with tile color
0C726 C5 0B                         CMP temp
0C728 60                            RTS
0C729                           
0C729                           .include "game/subroutine/ConvertXYToTileType.asm"
0C729                           
0C729                           ;; Subroutine to convert the ball's position to a tile type
0C729                           ;; - Expects temp to be y-position of ball within game area
0C729                           ;; - Expects temp+1 to be x-position of ball within game area
0C729                           ;; - Puts result in accumulator and zp variable
0C729                           ;; - Corrupts X-register
0C729                           
0C729                           sub_ConvertXYToTileType:
0C729 A5 0C                         LDA temp+1
0C72B 4A                            LSR
0C72C 4A                            LSR
0C72D 4A                            LSR
0C72E 4A                            LSR
0C72F 85 14                         STA temp+9
0C731 A5 0B                         LDA temp
0C733 29 F0                         AND #%11110000
0C735 18                            CLC
0C736 65 14                         ADC temp+9
0C738 85 14                         STA temp+9
0C73A AA                            TAX
0C73B BD 00 04                      LDA tile_type, x
0C73E 85 4E                         STA colliding_tile
0C740 60                            RTS
0C741                           
0C741                           .include "game/subroutine/DisableEnableRendering.asm"
0C741                           
0C741                           ;; Subroutines to disable or enable screen rendering
0C741                           
0C741                           sub_DisableRendering:
0C741                               ;; Force NMI skip, disable rendering
0C741 A9 01                     	LDA #$01
0C743 85 1F                     	STA force_skip_nmi
0C745 20 A5 C5                      JSR sub_WaitForVBlank
0C748 A5 1D                         LDA soft_ppu_mask
0C74A 29 E7                         AND #%11100111
0C74C 8D 01 20                      STA PPU_MASK
0C74F 85 1D                         STA soft_ppu_mask
0C751 20 A5 C5                      JSR sub_WaitForVBlank
0C754 60                            RTS
0C755                           
0C755                           sub_EnableRendering:
0C755                               ;; Enable rendering
0C755 A9 00                     	LDA #$00
0C757 8D 05 20                  	STA PPU_SCROLL
0C75A 8D 05 20                  	STA PPU_SCROLL
0C75D 20 A5 C5                      JSR sub_WaitForVBlank
0C760 85 1F                     	STA force_skip_nmi
0C762 A5 1D                         LDA soft_ppu_mask
0C764 09 18                         ORA #%00011000
0C766 85 1D                         STA soft_ppu_mask
0C768 8D 01 20                      STA PPU_MASK
0C76B 20 A5 C5                      JSR sub_WaitForVBlank
0C76E 60                            RTS
0C76F                           
0C76F                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C76F                           
0C76F                           ;; Draw a tile from the logo on the intro screen
0C76F                           sub_drawIntroScreenLogoTile:
0C76F B9 0B D2                      LDA tbl_IntroScreenLogoChr,y
0C772 C9 60                         CMP #$60
0C774 D0 08                         BNE +
0C776 20 7A C5                          JSR sub_GetRandomNumber
0C779 29 07                             AND #$07
0C77B 18                                CLC
0C77C 69 60                             ADC #$60
0C77E                               +
0C77E 8D 07 20                      STA PPU_DATA
0C781 60                            RTS
0C782                           
0C782                           .include "game/subroutine/DrawMoveTile.asm"
0C782                           
0C782                           ;; Draw the move tile as follows:
0C782                           ;;
0C782                           ;;  1 2
0C782                           ;;  3 4 5
0C782                           ;;    6 7
0C782                           ;;
0C782                           ;; (1,2,3,4) is the move block itself
0C782                           ;; (5,6,7) are shades unless that tile is solid
0C782                           
0C782                           ;; X holds the move block sprite slot
0C782                           
0C782                           sub_DrawMoveTile:
0C782                           
0C782                               ;; Get tile type index from sprite x and y values
0C782                               ;; and store it in a temp variable
0C782 BD 78 03                      LDA move_block_x,x
0C785 18                            CLC
0C786 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C788 4A                            LSR
0C789 4A                            LSR
0C78A 4A                            LSR
0C78B 4A                            LSR
0C78C 85 14                         STA temp+9
0C78E BD 7C 03                      LDA move_block_y,x
0C791 18                            CLC
0C792 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C794 29 F0                         AND #%11110000
0C796 18                            CLC
0C797 65 14                         ADC temp+9
0C799 85 14                         STA temp+9
0C79B A8                            TAY
0C79C                               
0C79C                               ;; Add move tile data on the new tile location
0C79C BD 84 03                      LDA move_block_tile_type,x
0C79F 99 00 04                      STA tile_type,y
0C7A2                           
0C7A2                               ;; Draw the original tile type in the ppu buffer
0C7A2                               ;; - get PPU address to write to (temp, temp+1)
0C7A2 8A                            TXA
0C7A3 48                            PHA
0C7A4 A6 14                         LDX temp+9
0C7A6 20 60 CA                      JSR sub_GetPPUAddrFromYXIndex
0C7A9 68                            PLA
0C7AA AA                            TAX
0C7AB                               
0C7AB                               ;; - based on color, select tile 42 or 4A for top left
0C7AB BD 88 03                      LDA move_block_flags,x
0C7AE 4A                            LSR
0C7AF 4A                            LSR
0C7B0 4A                            LSR
0C7B1 4A                            LSR
0C7B2 4A                            LSR
0C7B3 A8                            TAY
0C7B4 B9 DF DA                      LDA tbl_MoveBlockTopLeftTile,y
0C7B7 85 13                         STA temp+8
0C7B9                               
0C7B9                               ;; - save palette ID in temp+6
0C7B9 98                            TYA
0C7BA 4A                            LSR
0C7BB 85 11                         STA temp+6
0C7BD                               
0C7BD                               ;; Prepare PPU buffer
0C7BD A4 45                         LDY ppu_buffer_pointer
0C7BF A9 00                         LDA #$00
0C7C1 85 44                         STA ppu_buffer_update
0C7C3                               
0C7C3                               ;; Draw tile 1 (top left tile of move block)
0C7C3 20 A4 C8                      JSR sub_DrawTileTemp018
0C7C6                           
0C7C6                               
0C7C6                               ;; Draw tile 2 (top right tile of move block)
0C7C6 E6 0C                         INC temp+1
0C7C8 E6 13                         INC temp+8
0C7CA 20 A4 C8                      JSR sub_DrawTileTemp018
0C7CD                           
0C7CD                               ;; Draw tile 3 (bottom left tile of move block)
0C7CD A5 0C                         LDA temp+1
0C7CF 18                            CLC
0C7D0 69 1F                         ADC #$1F
0C7D2 85 0C                         STA temp+1
0C7D4 A5 0B                         LDA temp
0C7D6 69 00                         ADC #$00
0C7D8 85 0B                         STA temp
0C7DA A5 13                         LDA temp+8
0C7DC 18                            CLC
0C7DD 69 0F                         ADC #$0F
0C7DF 85 13                         STA temp+8
0C7E1 20 A4 C8                      JSR sub_DrawTileTemp018
0C7E4                           
0C7E4                               ;; Draw tile 4 (bottom right tile of move block)
0C7E4 E6 0C                         INC temp+1
0C7E6 E6 13                         INC temp+8
0C7E8 20 A4 C8                      JSR sub_DrawTileTemp018
0C7EB                           
0C7EB                               ;; Load tile type offset in X register
0C7EB 8A                            TXA
0C7EC 48                            PHA
0C7ED A6 14                         LDX temp+9
0C7EF                               
0C7EF                               ;; Load shade tile in temp+8
0C7EF A9 00                         LDA #$00
0C7F1 85 13                         STA temp+8
0C7F3                           
0C7F3                               ;; Draw tile 5 (right shade) unless tile is solid
0C7F3 E6 0C                         INC temp+1
0C7F5                               
0C7F5 8A                            TXA
0C7F6 29 0F                         AND #%00001111
0C7F8 C9 0D                         CMP #$0D
0C7FA F0 0A                         BEQ +nextTile
0C7FC                           
0C7FC BD 01 04                      LDA tile_type+1,x
0C7FF 29 01                         AND #%00000001
0C801 D0 03                         BNE +nextTile
0C803                               
0C803 20 A4 C8                      JSR sub_DrawTileTemp018
0C806                               
0C806                           
0C806                           +nextTile:
0C806                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C806 A5 0C                         LDA temp+1
0C808 18                            CLC
0C809 69 1F                         ADC #$1F
0C80B 85 0C                         STA temp+1
0C80D A5 0B                         LDA temp
0C80F 69 00                         ADC #$00
0C811 85 0B                         STA temp
0C813                           
0C813 8A                            TXA
0C814 29 F0                         AND #%11110000
0C816 C9 90                         CMP #$90
0C818 F0 0A                         BEQ +nextTile
0C81A                           
0C81A BD 10 04                      LDA tile_type+16,x
0C81D 29 01                         AND #%00000001
0C81F D0 03                         BNE +nextTile
0C821                               
0C821 20 A4 C8                      JSR sub_DrawTileTemp018
0C824                           
0C824                               
0C824                           +nextTile:
0C824                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C824 E6 0C                         INC temp+1
0C826                           
0C826 8A                            TXA
0C827 29 F0                         AND #%11110000
0C829 C9 90                         CMP #$90
0C82B F0 11                         BEQ +setTileAttributes
0C82D                               
0C82D 8A                            TXA
0C82E 29 0F                         AND #%00001111
0C830 C9 0D                         CMP #$0D
0C832 F0 0A                         BEQ +setTileAttributes
0C834                               
0C834 BD 11 04                      LDA tile_type+17,x
0C837 29 01                         AND #%00000001
0C839 D0 03                         BNE +setTileAttributes
0C83B                               
0C83B 20 A4 C8                      JSR sub_DrawTileTemp018
0C83E                               
0C83E                           
0C83E                           +setTileAttributes:
0C83E                               ;; Update attribute table accordingly through ppu buffer
0C83E                               ;; - PPU buffer high byte
0C83E 20 36 D1                      JSR sub_SetTileAttributeAddress
0C841                           
0C841 8A                            TXA
0C842 29 10                         AND #%00010000
0C844 F0 05                         BEQ +        
0C846 A9 F0                             LDA #%11110000
0C848 4C 4D C8                          JMP ++
0C84B                               +
0C84B A9 0F                         LDA #%00001111
0C84D                               ++
0C84D 85 0D                         STA temp+2
0C84F                               
0C84F 8A                            TXA
0C850 29 01                         AND #%00000001
0C852 F0 07                         BEQ +
0C854 A5 0D                             LDA temp+2
0C856 09 CC                             ORA #%11001100
0C858 4C 5F C8                          JMP ++
0C85B                               +
0C85B A5 0D                         LDA temp+2
0C85D 09 33                         ORA #%00110011
0C85F                               ++
0C85F 85 0D                         STA temp+2
0C861                               
0C861 C9 FC                         CMP #%11111100
0C863 F0 22                         BEQ +continue
0C865                               
0C865 C9 F3                         CMP #%11110011
0C867 D0 09                         BNE +
0C869 A5 11                             LDA temp+6
0C86B 0A                                ASL
0C86C 0A                                ASL
0C86D 85 11                             STA temp+6
0C86F 4C 87 C8                          JMP +continue
0C872                               +
0C872                               
0C872 C9 CF                         CMP #%11001111
0C874 D0 0A                         BNE +
0C876 A6 11                             LDX temp+6
0C878 BD 80 DA                          LDA tbl_Times16,x
0C87B 85 11                             STA temp+6
0C87D 4C 87 C8                          JMP +continue
0C880                               +
0C880                               
0C880 A6 11                         LDX temp+6
0C882 BD 90 DA                      LDA tbl_Times64,x
0C885 85 11                         STA temp+6
0C887                                   
0C887                           +continue:
0C887 A5 0B                         LDA temp
0C889 38                            SEC
0C88A E9 C0                         SBC #$C0
0C88C AA                            TAX
0C88D BD A0 04                      LDA tile_attributes,x
0C890 25 0D                         AND temp+2
0C892 05 11                         ORA temp+6
0C894 9D A0 04                      STA tile_attributes,x
0C897 99 00 03                      STA ppu_buffer,y
0C89A C8                            INY
0C89B                           
0C89B                               ;; Restore original X
0C89B 68                            PLA
0C89C AA                            TAX
0C89D                               
0C89D                               ;; Update PPU buffer
0C89D 84 45                         STY ppu_buffer_pointer
0C89F A9 01                         LDA #$01
0C8A1 85 44                         STA ppu_buffer_update
0C8A3                           
0C8A3                               ;; Return
0C8A3 60                            RTS
0C8A4                           
0C8A4                           .include "game/subroutine/DrawTileTemp018.asm"
0C8A4                           
0C8A4                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C8A4                           
0C8A4                           sub_DrawTileTemp018:
0C8A4 A5 0B                         LDA temp
0C8A6 99 00 03                      STA ppu_buffer,y
0C8A9 C8                            INY
0C8AA A5 0C                         LDA temp+1
0C8AC 99 00 03                      STA ppu_buffer,y
0C8AF C8                            INY
0C8B0 A5 13                         LDA temp+8
0C8B2 99 00 03                      STA ppu_buffer,y
0C8B5 C8                            INY
0C8B6 60                            RTS
0C8B7                           
0C8B7                           .include "game/subroutine/EvaluateTileType.asm"
0C8B7                           
0C8B7                           ;; Subroutine to evaluate the colliding tile type and take its
0C8B7                           ;; corresponding action (move block, kill player, ...)
0C8B7                           ;; - Expects X-register to be the tile_type offset
0C8B7                           ;; - Uses zp variable colliding_tile
0C8B7                           
0C8B7                           sub_EvaluateTileType:
0C8B7                           
0C8B7                               ;; Check if collided tile is a color block
0C8B7 A5 4E                         LDA colliding_tile
0C8B9 29 80                         AND #IS_COLOR_BLOCK
0C8BB D0 03                         BNE +
0C8BD 4C 26 C9                          JMP +checkIfPaintBlock
0C8C0                               +
0C8C0                               
0C8C0                               ;; It's a color block. Check if the colors match
0C8C0 20 18 C7                      JSR sub_ColorsMatch
0C8C3 F0 06                         BEQ +
0C8C5                                   ;; Colors don't match
0C8C5                                   ;; Play bounce sound effect
0C8C5 A2 02                             LDX #SFX_BOUNCE
0C8C7 20 B1 CF                          JSR sub_PreloadSfxFromX
0C8CA                                   
0C8CA                                   ;; Return
0C8CA 60                                RTS
0C8CB                               +
0C8CB                           
0C8CB                               ;; Colors match; destroy color block
0C8CB                               
0C8CB                               ;; Convert the metatile offset value (which is in the X register)
0C8CB                               ;; to its corresponding address in PPU
0C8CB 20 60 CA                      JSR sub_GetPPUAddrFromYXIndex
0C8CE                           
0C8CE                               ;; Remove color block from screen by drawing a total
0C8CE                               ;; of 7 tiles over it (shade included)
0C8CE 20 C0 CF                      JSR sub_RemoveBlockFromScreen
0C8D1                               
0C8D1                               ;; - Load destruction animation on tile
0C8D1                               ;; Get most recent slot for explosion    
0C8D1 8A                            TXA
0C8D2 85 0D                         STA temp+2
0C8D4 A6 46                         LDX explosion_pointer
0C8D6                           
0C8D6                               ;; If 0, use max pointer value
0C8D6 D0 02                         BNE +
0C8D8 A2 04                             LDX #MAX_ANIMATIONS
0C8DA                               +
0C8DA                           
0C8DA                               ;; Decrease pointer by one
0C8DA CA                            DEX
0C8DB 86 46                         STX explosion_pointer
0C8DD                           
0C8DD                               ;; Load explosion data into RAM
0C8DD A9 00                         LDA #$00
0C8DF 9D 64 03                      STA explosion_currentframe,x
0C8E2                           
0C8E2 A9 04                         LDA #ANIMATION_SPEED
0C8E4 9D 60 03                      STA explosion_timer,x
0C8E7                           
0C8E7 A5 0D                         LDA temp+2
0C8E9 29 0F                         AND #%00001111
0C8EB A8                            TAY
0C8EC B9 80 DA                      LDA tbl_Times16,y
0C8EF 18                            CLC
0C8F0 69 0E                         ADC #$0E
0C8F2 9D 6C 03                      STA explosion_x,x
0C8F5                           
0C8F5 A5 0D                         LDA temp+2
0C8F7 29 F0                         AND #%11110000
0C8F9 18                            CLC
0C8FA 69 29                         ADC #$29
0C8FC 9D 70 03                      STA explosion_y,x
0C8FF                           
0C8FF A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C901 9D 68 03                      STA explosion_attributes,x
0C904 A9 01                         LDA #$01
0C906 9D 74 03                      STA explosion_active,x
0C909                           
0C909 A5 0D                         LDA temp+2
0C90B AA                            TAX
0C90C                               
0C90C                               
0C90C                               ;; - Write #$00 in tile type ram (makes not-solid)
0C90C A9 00                         LDA #$00
0C90E 9D 00 04                      STA tile_type, x
0C911                           
0C911                           
0C911                               ;; Add (80 + level number) to score
0C911 A5 4D                         LDA current_level
0C913 18                            CLC
0C914 69 51                         ADC #81
0C916 20 AB C5                      JSR sub_AddAccumulatorToScore
0C919                           
0C919                           
0C919                               ;; Play thud sound effect
0C919 A2 01                         LDX #SFX_THUD
0C91B 20 B1 CF                      JSR sub_PreloadSfxFromX
0C91E                           
0C91E                           
0C91E                               ;; - If there are no color blocks left:
0C91E                               ;;   - Initiate level-win state
0C91E C6 4F                         DEC blocks_left
0C920 D0 03                         BNE +
0C922 4C C4 C4                          JMP lbl_LevelWin
0C925                               +
0C925                               
0C925 60                            RTS
0C926                           
0C926                           
0C926                           
0C926                           +checkIfPaintBlock:
0C926                           
0C926                               ;; Check if collided tile is a paint block
0C926 A5 4E                         LDA colliding_tile
0C928 29 20                         AND #IS_PAINT_BLOCK
0C92A F0 1E                         BEQ +checkIfDeathBlock
0C92C                                   ;; It's a paint block. Update ball color
0C92C                                   ;; Save x-register
0C92C 8A                                TXA
0C92D 48                                PHA
0C92E                           
0C92E                                   ;; Get tile color
0C92E A5 4E                             LDA colliding_tile
0C930 29 0E                             AND #%00001110
0C932 0A                                ASL
0C933 0A                                ASL
0C934 0A                                ASL
0C935 0A                                ASL
0C936 85 0B                             STA temp
0C938                           
0C938                                   ;; Apply tile color to ball
0C938 A5 42                             LDA ball_flags
0C93A 29 1F                             AND #%00011111
0C93C 05 0B                             ORA temp
0C93E 85 42                             STA ball_flags
0C940 20 F7 C6                          JSR sub_ColorizeBall
0C943                           
0C943                                   ;; Play paint sound effect
0C943 A9 10                             LDA #$10
0C945 85 5B                             STA sfx_timer+2
0C947                           
0C947                                   ;; Restore x-register
0C947 68                                PLA
0C948 AA                                TAX
0C949                           
0C949                                   ;; Return
0C949 60                                RTS
0C94A                                   
0C94A                                   
0C94A                                   
0C94A                           +checkIfDeathBlock:
0C94A                           
0C94A                               ;; Check if collided tile is a death block
0C94A A5 4E                         LDA colliding_tile
0C94C 29 10                         AND #IS_DEATH_BLOCK
0C94E F0 3D                         BEQ +checkIfMoveBlock
0C950                           
0C950                           ;; Also, when the player presses select during gameplay,
0C950                           ;; insta-selfdestruct the ball.
0C950                           sub_Selfdestruct:
0C950                           
0C950                                   ;; It is a death block
0C950                                   ;; Freeze and kill player
0C950 A5 42                             LDA ball_flags
0C952 09 05                             ORA #%00000101
0C954 85 42                             STA ball_flags
0C956                                   
0C956                                   ;; Get free explosion slot
0C956 A6 46                             LDX explosion_pointer
0C958 D0 02                             BNE +
0C95A A2 04                                 LDX #MAX_ANIMATIONS
0C95C                                   +
0C95C CA                                DEX
0C95D 86 46                             STX explosion_pointer
0C95F                           
0C95F                                   ;; Load explosion data into RAM
0C95F A9 00                             LDA #$00
0C961 9D 64 03                          STA explosion_currentframe,x
0C964                           
0C964 A9 04                             LDA #ANIMATION_SPEED
0C966 9D 60 03                          STA explosion_timer,x
0C969                           
0C969 A5 22                             LDA ball_xpos_hi
0C96B 38                                SEC
0C96C E9 08                             SBC #$08
0C96E 9D 6C 03                          STA explosion_x,x
0C971                           
0C971 A5 24                             LDA ball_ypos_hi
0C973 38                                SEC
0C974 E9 06                             SBC #$06
0C976 9D 70 03                          STA explosion_y,x
0C979                           
0C979 A9 01                             LDA #$01
0C97B 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C97E 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C981 85 56                             STA noise_muted             ; mute background noise
0C983                                   
0C983                                   ;; Play explosion sound effect
0C983 A2 00                             LDX #SFX_EXPLOSION
0C985 20 B1 CF                          JSR sub_PreloadSfxFromX
0C988                           
0C988                                   ;; Set kill timer
0C988 A9 60                             LDA #$60
0C98A 85 4B                             STA kill_timer
0C98C                           
0C98C                                   ;; Return
0C98C 60                                RTS
0C98D                           
0C98D                           
0C98D                           
0C98D                           +checkIfMoveBlock:
0C98D                           
0C98D                               ;; Check if collided tile is a move block
0C98D A5 4E                         LDA colliding_tile
0C98F 29 40                         AND #IS_MOVE_BLOCK
0C991 D0 06                         BNE +
0C993                                   ;; Tile is not a move block
0C993                                   ;; Therefore, it is a solid wall
0C993                                   
0C993                                   ;; Play bounce sound effect
0C993 A2 02                             LDX #SFX_BOUNCE
0C995 20 B1 CF                          JSR sub_PreloadSfxFromX
0C998                           
0C998                                   ;; Return
0C998 60                                RTS
0C999                               +
0C999                           
0C999                               ;; It is a move block. Check if colors match
0C999 20 18 C7                      JSR sub_ColorsMatch
0C99C F0 06                         BEQ +
0C99E                                   ;; Colors do not match
0C99E                                   ;; Play bounce sound effect
0C99E A2 02                             LDX #SFX_BOUNCE
0C9A0 20 B1 CF                          JSR sub_PreloadSfxFromX
0C9A3                           
0C9A3                                   ;; Return
0C9A3 60                                RTS
0C9A4                               +
0C9A4                           
0C9A4                               ;; Colors match
0C9A4                               ;; - Check if next tile is within the playground
0C9A4                               ;; (push X onto stack as well)
0C9A4 8A                            TXA
0C9A5 48                            PHA
0C9A6 18                            CLC
0C9A7 65 41                         ADC move_block_space_to_check
0C9A9 AA                            TAX
0C9AA                               
0C9AA 29 0F                         AND #%00001111
0C9AC C9 0E                         CMP #$0E
0C9AE 90 03                         BCC +
0C9B0 4C 28 CA                          JMP +dontMoveBlock
0C9B3                               +
0C9B3 8A                            TXA
0C9B4 29 F0                         AND #%11110000
0C9B6 C9 A0                         CMP #$A0
0C9B8 D0 03                         BNE +
0C9BA 4C 28 CA                          JMP +dontMoveBlock
0C9BD                               +
0C9BD C9 F0                         CMP #$F0
0C9BF D0 03                         BNE +
0C9C1 4C 28 CA                          JMP +dontMoveBlock
0C9C4                               +
0C9C4                               
0C9C4                               ;; Check if the next tile is solid
0C9C4 BD 00 04                      LDA tile_type,x
0C9C7 29 01                         AND #TILE_IS_SOLID
0C9C9 F0 03                         BEQ +
0C9CB 4C 28 CA                          JMP +dontMoveBlock
0C9CE                               +
0C9CE                               
0C9CE                               ;; Move block has room to move
0C9CE                               ;; Pull original X from stack
0C9CE 68                            PLA
0C9CF AA                            TAX        
0C9D0                               
0C9D0                               ;; Add the tiles that need updating to ppu buffer, and
0C9D0                               ;; update attribute table accordingly through ppu buffer
0C9D0 20 60 CA                      JSR sub_GetPPUAddrFromYXIndex
0C9D3 20 C0 CF                      JSR sub_RemoveBlockFromScreen
0C9D6                           
0C9D6                               ;; Store original tile type in temp variable
0C9D6 BD 00 04                      LDA tile_type,x
0C9D9 85 13                         STA temp+8
0C9DB                           
0C9DB                               ;; Write #$00 in tile type ram (makes not-solid)
0C9DB A9 00                         LDA #$00
0C9DD 9D 00 04                      STA tile_type,x
0C9E0                           
0C9E0                               ;; Add move tile sprite over the original tile
0C9E0                               ;; - Store x in temp variable
0C9E0 86 0E                         STX temp+3
0C9E2                               
0C9E2                               ;; - Update move block pointer
0C9E2 A6 47                         LDX move_block_pointer
0C9E4 D0 02                         BNE +
0C9E6 A2 04                             LDX #MAX_ANIMATIONS
0C9E8                               +
0C9E8 CA                            DEX
0C9E9 86 47                         STX move_block_pointer
0C9EB                           
0C9EB                               ;; = Set move block tile type
0C9EB A5 13                         LDA temp+8
0C9ED 9D 84 03                      STA move_block_tile_type,x
0C9F0                           
0C9F0                               ;; - Set move block X position
0C9F0 A5 0E                         LDA temp+3
0C9F2 29 0F                         AND #%00001111
0C9F4 A8                            TAY
0C9F5 C8                            INY
0C9F6 B9 80 DA                      LDA tbl_Times16,y
0C9F9 9D 78 03                      STA move_block_x,x
0C9FC                               
0C9FC                               ;; - Set move block Y position
0C9FC A5 0E                         LDA temp+3
0C9FE 29 F0                         AND #%11110000
0CA00 18                            CLC
0CA01 69 30                         ADC #$30
0CA03 9D 7C 03                      STA move_block_y,x
0CA06 DE 7C 03                      DEC move_block_y,x
0CA09                               
0CA09                               ;; - Set timer to 16 (+1) frames
0CA09 A9 11                         LDA #$11
0CA0B 9D 80 03                      STA move_block_timer,x
0CA0E                               
0CA0E                               ;; - Set move direction
0CA0E A5 41                         LDA move_block_space_to_check
0CA10 29 81                         AND #%10000001
0CA12 18                            CLC
0CA13 2A                            ROL
0CA14 69 00                         ADC #$00
0CA16 85 0F                         STA temp+4
0CA18                               
0CA18                               ;; - Set block color as ball color and add direction
0CA18 A5 42                         LDA ball_flags
0CA1A 29 E0                         AND #BALL_COLOR
0CA1C 05 0F                         ORA temp+4
0CA1E 9D 88 03                      STA move_block_flags,x
0CA21                               
0CA21                               ;; - Restore original X
0CA21 A6 0E                         LDX temp+3
0CA23                               
0CA23                               ;; - Initiate move sound effect
0CA23 A9 18                         LDA #$18
0CA25 85 5A                         STA sfx_timer+1
0CA27                           
0CA27                               ;; Return
0CA27 60                            RTS
0CA28                           
0CA28                           
0CA28                           ;; Do not move the move block
0CA28                           +dontMoveBlock:
0CA28                           
0CA28                               ;; Play bounce sound effect
0CA28 A2 02                         LDX #SFX_BOUNCE
0CA2A 20 B1 CF                      JSR sub_PreloadSfxFromX
0CA2D                           
0CA2D                               ;; Restore X from stack
0CA2D 68                            PLA
0CA2E AA                            TAX
0CA2F                               
0CA2F                               ;; Return
0CA2F 60                            RTS
0CA30                           
0CA30                           .include "game/subroutine/FlashEffect.asm"
0CA30                           
0CA30                           ;; Apply flashing light effect to background color
0CA30                           sub_FlashEffect:
0CA30 A2 00                         LDX #$00
0CA32 86 0C                         STX temp+1
0CA34 A9 3F                         LDA #$3F
0CA36 85 0B                         STA temp
0CA38                           
0CA38                               -flashLoop:
0CA38 BD F0 DA                          LDA tbl_BackgroundFade,x
0CA3B 85 0D                             STA temp+2
0CA3D 20 C5 D1                          JSR sub_WriteByteToPPUBuffer
0CA40 A9 0D                             LDA #$0D
0CA42 85 0C                             STA temp+1
0CA44 20 C5 D1                          JSR sub_WriteByteToPPUBuffer
0CA47 A9 19                             LDA #$19
0CA49 85 0C                             STA temp+1
0CA4B 20 C5 D1                          JSR sub_WriteByteToPPUBuffer
0CA4E A9 00                             LDA #$00
0CA50 85 0C                             STA temp+1
0CA52 A0 03                             LDY #$03
0CA54                                   -
0CA54 20 9C C5                              JSR sub_WaitForNMI
0CA57 88                                    DEY
0CA58 D0 FA                             BNE -
0CA5A E8                                INX
0CA5B E0 0A                             CPX #$0A
0CA5D D0 D9                         BNE -flashLoop
0CA5F                               
0CA5F 60                            RTS
0CA60                           
0CA60                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0CA60                           
0CA60                           ;; Get the PPU address from YX index
0CA60                           ;; - Expects YX index (aka tile offset) to be in the X register
0CA60                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0CA60                           
0CA60                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0CA60                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0CA60                           
0CA60                           sub_GetPPUAddrFromYXIndex:
0CA60 8A                            TXA
0CA61 29 C0                         AND #%11000000
0CA63 18                            CLC
0CA64 2A                            ROL
0CA65 2A                            ROL
0CA66 2A                            ROL
0CA67 69 20                         ADC #$20
0CA69 85 0B                         STA temp
0CA6B                               
0CA6B 8A                            TXA
0CA6C 29 0F                         AND #%00001111
0CA6E 0A                            ASL
0CA6F 85 0C                         STA temp+1
0CA71                               
0CA71 8A                            TXA
0CA72 29 30                         AND #%00110000
0CA74 0A                            ASL
0CA75 0A                            ASL
0CA76 18                            CLC
0CA77 65 0C                         ADC temp+1
0CA79 85 0C                         STA temp+1
0CA7B                               
0CA7B A5 0B                         LDA temp
0CA7D 69 00                         ADC #$00
0CA7F 85 0B                         STA temp
0CA81                               
0CA81 A5 0C                         LDA temp+1
0CA83 18                            CLC
0CA84 69 C2                         ADC #$C2
0CA86 85 0C                         STA temp+1
0CA88                               
0CA88 A5 0B                         LDA temp
0CA8A 69 00                         ADC #$00
0CA8C 85 0B                         STA temp
0CA8E                           
0CA8E 60                            RTS
0CA8F                           
0CA8F                           .include "game/subroutine/InitiateNudge.asm"
0CA8F                           
0CA8F                           ;; Tell ball to nudge
0CA8F                           sub_InitiateNudge:
0CA8F 85 42                         STA ball_flags
0CA91 A9 06                         LDA #NUDGE_FRAMES
0CA93 85 49                         STA nudge_timer
0CA95 60                            RTS
0CA96                           
0CA96                           .include "game/subroutine/JumpToPointer.asm"
0CA96                           
0CA96                           ;; Helper subroutine to JSR to a variable pointer address
0CA96                           sub_JumpToPointer:
0CA96 6C 17 00                      JMP (pointer)
0CA99                               ;RTS must be handled by the routine (pointer) jumps to
0CA99                           
0CA99                           .include "game/subroutine/LoadAnimations.asm"
0CA99                           
0CA99                           sub_LoadAnimations:
0CA99                           
0CA99                               ;; Set up loop
0CA99 A2 00                         LDX #$00
0CA9B                               -loop_load_animation:
0CA9B                                   ;; Check if current animation is active. If not, goto next
0CA9B BD 74 03                          LDA explosion_active,x
0CA9E D0 03                             BNE +
0CAA0 4C 2B CB                              JMP +next
0CAA3                                   +
0CAA3                           
0CAA3                                   ;; Check the explosion framecounter
0CAA3 BD 60 03                          LDA explosion_timer,x
0CAA6 D0 17                             BNE +
0CAA8                                       ;; Frametimer is 0
0CAA8                                       ;; Reset to animation speed
0CAA8 A9 04                                 LDA #ANIMATION_SPEED
0CAAA 9D 60 03                              STA explosion_timer,x
0CAAD                           
0CAAD                                       ;; Set next animation frame, and check if we're done yet
0CAAD FE 64 03                              INC explosion_currentframe,x
0CAB0 BD 64 03                              LDA explosion_currentframe,x
0CAB3 C9 0A                                 CMP #ANIM_SLIDES
0CAB5 D0 08                                 BNE +
0CAB7                           
0CAB7                                       ;; If we're done, inactivate current explosion, go to the next one
0CAB7 A9 00                                 LDA #$00
0CAB9 9D 74 03                              STA explosion_active,x
0CABC 4C 2B CB                              JMP +next
0CABF                                   +
0CABF                           
0CABF                                   ;; Load (x,y) position in temp variables
0CABF BD 6C 03                          LDA explosion_x,x
0CAC2 85 0C                             STA temp+1
0CAC4 85 0E                             STA temp+3
0CAC6 BD 70 03                          LDA explosion_y,x
0CAC9 85 0D                             STA temp+2
0CACB                           
0CACB                                   ;; Load attribute in temp variable
0CACB BD 68 03                          LDA explosion_attributes,x
0CACE 85 0F                             STA temp+4
0CAD0                           
0CAD0                                   ;; Load current frame into Y-register
0CAD0 BC 64 03                          LDY explosion_currentframe,x
0CAD3                           
0CAD3                                   ;; Load current frame ROM address from table
0CAD3 B9 27 D3                          LDA explosion_anim_lo,y
0CAD6 85 17                             STA pointer
0CAD8 B9 1D D3                          LDA explosion_anim_hi,y
0CADB 85 18                             STA pointer+1
0CADD                           
0CADD                                   ;; Save x-register on stack
0CADD 8A                                TXA
0CADE 48                                PHA
0CADF                           
0CADF                                   ;; Load sprites into sprite RAM
0CADF A6 48                             LDX sprite_ram_pointer
0CAE1 A0 00                             LDY #$00
0CAE3                           
0CAE3                                   ;; Prepare (x,y) offset for loop
0CAE3 84 0B                             STY temp
0CAE5                           
0CAE5                                   -loop_load_sprite:
0CAE5                                   
0CAE5                                       ;; Do not draw empty sprites
0CAE5 B1 17                                 LDA (pointer),y
0CAE7 F0 18                                 BEQ +nextSprite
0CAE9                                   
0CAE9                                           ;; Add y-position to sprite ram buffer
0CAE9 A5 0D                                     LDA temp+2
0CAEB 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAEE E8                                        INX
0CAEF                           
0CAEF                                           ;; Get tile number from frame ROM address, and
0CAEF                                           ;; add it to sprite ram buffer
0CAEF B1 17                                     LDA (pointer),y
0CAF1 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAF4 E8                                        INX
0CAF5                           
0CAF5                                           ;; Add attribute data to sprite ram buffer
0CAF5 A5 0F                                     LDA temp+4
0CAF7 9D 00 02                                  STA ADDR_SPRITERAM,x
0CAFA E8                                        INX
0CAFB                           
0CAFB                                           ;; Add x-position to sprite ram buffer
0CAFB A5 0E                                     LDA temp+3
0CAFD 9D 00 02                                  STA ADDR_SPRITERAM,x
0CB00 E8                                        INX
0CB01                           
0CB01                                       +nextSprite:
0CB01                           
0CB01                                       ;; Check if all sprites are done
0CB01 C8                                    INY
0CB02 C0 09                                 CPY #SLIDE_SIZE
0CB04 F0 21                                 BEQ +updateSpriteRamPointer
0CB06                           
0CB06                                       ;; Update x value
0CB06 A5 0E                                 LDA temp+3
0CB08 18                                    CLC
0CB09 69 08                                 ADC #$08
0CB0B 85 0E                                 STA temp+3
0CB0D                           
0CB0D                                       ;; Update temp for x,y position
0CB0D E6 0B                                 INC temp
0CB0F A5 0B                                 LDA temp
0CB11 C9 03                                 CMP #SLIDE_WIDTH
0CB13 D0 0F                                 BNE +
0CB15                                           ;; Row is done; reset x-position
0CB15 A5 0C                                     LDA temp+1
0CB17 85 0E                                     STA temp+3
0CB19                           
0CB19                                           ;; Update y-position
0CB19 A5 0D                                     LDA temp+2
0CB1B 18                                        CLC
0CB1C 69 08                                     ADC #$08
0CB1E 85 0D                                     STA temp+2
0CB20                           
0CB20                                           ;; Reset row timer
0CB20 A9 00                                     LDA #$00
0CB22 85 0B                                     STA temp
0CB24                                       +
0CB24                           
0CB24 4C E5 CA                          JMP -loop_load_sprite
0CB27                           
0CB27                               +updateSpriteRamPointer:
0CB27 86 48                             STX sprite_ram_pointer
0CB29                           
0CB29                                   ;; Retrieve x-register from stack
0CB29 68                                PLA
0CB2A AA                                TAX
0CB2B                           
0CB2B                               +next:
0CB2B                                   ;; Check if all animations have been updated
0CB2B E8                                INX
0CB2C E0 04                             CPX #MAX_ANIMATIONS
0CB2E F0 03                             BEQ +cleanUpSpriteRam
0CB30                           
0CB30 4C 9B CA                      JMP -loop_load_animation
0CB33                           
0CB33                           +cleanUpSpriteRam:
0CB33 A6 48                         LDX sprite_ram_pointer
0CB35 A9 EF                         LDA #$EF
0CB37                               -
0CB37 9D 00 02                          STA ADDR_SPRITERAM,x
0CB3A E8                                INX
0CB3B D0 FA                         BNE -
0CB3D                               
0CB3D 60                            RTS
0CB3E                               
0CB3E                           .include "game/subroutine/LoadGameScreen.asm"
0CB3E                           
0CB3E                           ;; Load the game screen, based on level number
0CB3E                           sub_LoadGameScreen:
0CB3E                           
0CB3E                               ;; Clear the screen
0CB3E 20 8C C6                      JSR sub_ClearScreen
0CB41                               
0CB41                               ;; Clear collision and attribute data; reset blocks left in the process
0CB41 A2 00                         LDX #$00
0CB43 8A                            TXA
0CB44 85 4F                         STA blocks_left
0CB46                               -
0CB46 9D 00 04                          STA tile_type,x
0CB49 E8                                INX
0CB4A D0 FA                         BNE -
0CB4C                               
0CB4C                               ;; Get pointer from current level
0CB4C A6 4D                         LDX current_level
0CB4E BD 35 DA                      LDA tbl_lvl_layout_lo,x
0CB51 85 17                         STA pointer
0CB53 BD 1C DA                      LDA tbl_lvl_layout_hi,x
0CB56 85 18                         STA pointer+1
0CB58                           
0CB58                               ;; Set up the loop
0CB58 A0 00                         LDY #$00
0CB5A                           -drawRowColumnLoop:
0CB5A                           
0CB5A                               ;; Load (x,y) of current set of tiles
0CB5A B1 17                         LDA (pointer),y
0CB5C                           
0CB5C                               ;; Check if level is done; if so, skip the loop
0CB5C C9 FF                         CMP #LEVEL_END
0CB5E D0 03                         BNE +
0CB60 4C A9 CC                          JMP +doneLevelLoad
0CB63                               +
0CB63                           
0CB63                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CB63 85 0B                         STA temp
0CB65 C8                            INY
0CB66 B1 17                         LDA (pointer),y
0CB68 85 0C                         STA temp+1
0CB6A                               
0CB6A                               ;; Convert (x,y) to PPU address
0CB6A                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CB6A A5 0B                         LDA temp
0CB6C 29 0F                         AND #%00001111
0CB6E 4A                            LSR
0CB6F 4A                            LSR
0CB70 09 20                         ORA #$20
0CB72 85 0D                         STA temp+2
0CB74                               
0CB74                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CB74 A5 0B                         LDA temp
0CB76 29 F0                         AND #%11110000
0CB78 4A                            LSR
0CB79 4A                            LSR
0CB7A 4A                            LSR
0CB7B 85 0E                         STA temp+3
0CB7D                               
0CB7D A5 0B                         LDA temp
0CB7F 29 03                         AND #%00000011
0CB81 AA                            TAX
0CB82 BD 90 DA                      LDA tbl_Times64,x
0CB85 18                            CLC
0CB86 65 0E                         ADC temp+3
0CB88 18                            CLC
0CB89 69 C2                         ADC #$C2
0CB8B 85 0E                         STA temp+3
0CB8D                               
0CB8D                               ;; Add carry to temp+2
0CB8D A5 0D                         LDA temp+2
0CB8F 69 00                         ADC #$00
0CB91 85 0D                         STA temp+2
0CB93                           
0CB93                               ;; Convert tile data to loop count and tile type
0CB93                               ;; temp+4 = color
0CB93 A5 0C                         LDA temp+1
0CB95 29 07                         AND #%00000111
0CB97 85 0F                         STA temp+4
0CB99                               
0CB99                               ;; If color = 7, this is a wall
0CB99 C9 07                         CMP #%00000111
0CB9B F0 12                         BEQ +wallHack
0CB9D                                   
0CB9D                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CB9D 29 01                             AND #%00000001
0CB9F F0 02                             BEQ +
0CBA1 A9 05                                 LDA #$05
0CBA3                                   +
0CBA3 85 12                             STA temp+7
0CBA5                                
0CBA5                                   ;; temp+5 = tile type
0CBA5 A5 0C                             LDA temp+1
0CBA7 4A                                LSR
0CBA8 4A                                LSR
0CBA9 4A                                LSR
0CBAA 29 03                             AND #%00000011
0CBAC 4C B5 CB                          JMP +setTileType
0CBAF                               +wallHack:
0CBAF                               
0CBAF                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CBAF A9 00                         LDA #$00
0CBB1 85 12                         STA temp+7
0CBB3 A9 04                         LDA #$04
0CBB5                           
0CBB5                           +setTileType:    
0CBB5 85 10                         STA temp+5
0CBB7                               
0CBB7                               ;; X = tile offset
0CBB7 18                            CLC
0CBB8 65 12                         ADC temp+7
0CBBA AA                            TAX
0CBBB                               
0CBBB                               ;; temp+6 = number of tiles
0CBBB A5 0C                         LDA temp+1
0CBBD 29 60                         AND #%01100000
0CBBF 4A                            LSR
0CBC0 4A                            LSR
0CBC1 4A                            LSR
0CBC2 4A                            LSR
0CBC3 4A                            LSR
0CBC4 85 11                         STA temp+6
0CBC6                               
0CBC6                               ;; Translate (x,y) to (y,x) for tile RAM
0CBC6 A5 0B                         LDA temp
0CBC8 0A                            ASL
0CBC9 0A                            ASL
0CBCA 0A                            ASL
0CBCB 0A                            ASL
0CBCC 85 13                         STA temp+8
0CBCE A5 0B                         LDA temp
0CBD0 4A                            LSR
0CBD1 4A                            LSR
0CBD2 4A                            LSR
0CBD3 4A                            LSR
0CBD4 05 13                         ORA temp+8
0CBD6 85 0B                         STA temp
0CBD8                               
0CBD8                               ;; Set up loop
0CBD8 98                            TYA
0CBD9 48                            PHA
0CBDA A4 11                         LDY temp+6
0CBDC                           
0CBDC                               -drawTileLoop:
0CBDC                                   ;; Write PPU address
0CBDC 2C 02 20                          BIT PPU_STATUS
0CBDF A5 0D                             LDA temp+2
0CBE1 8D 06 20                          STA PPU_ADDR
0CBE4 A5 0E                             LDA temp+3
0CBE6 8D 06 20                          STA PPU_ADDR
0CBE9                                   
0CBE9                                   ;; Write first and second tile
0CBE9 BD 94 DA                          LDA tbl_GametileTopLeft,x
0CBEC 8D 07 20                          STA PPU_DATA
0CBEF BD 9E DA                          LDA tbl_GametileTopRight,x
0CBF2 8D 07 20                          STA PPU_DATA
0CBF5                                   
0CBF5                                   ;; Update PPU address
0CBF5 2C 02 20                          BIT PPU_STATUS
0CBF8 A5 0D                             LDA temp+2
0CBFA 8D 06 20                          STA PPU_ADDR
0CBFD A5 0E                             LDA temp+3
0CBFF 18                                CLC
0CC00 69 20                             ADC #$20
0CC02 8D 06 20                          STA PPU_ADDR
0CC05                                   
0CC05                                   ;; Write third and fourth tile
0CC05 BD A8 DA                          LDA tbl_GametileBottomLeft,x
0CC08 8D 07 20                          STA PPU_DATA
0CC0B BD B2 DA                          LDA tbl_GametileBottomRight,x
0CC0E 8D 07 20                          STA PPU_DATA
0CC11                           
0CC11                                   ;; Push x-register to stack
0CC11 8A                                TXA
0CC12 48                                PHA
0CC13                           
0CC13                                   ;; Update tile RAM (aka collision table)
0CC13 A6 10                             LDX temp+5
0CC15 BD BC DA                          LDA tbl_GameTileRamByte,x
0CC18 05 0F                             ORA temp+4
0CC1A 0A                                ASL
0CC1B 09 01                             ORA #%00000001
0CC1D A6 0B                             LDX temp
0CC1F 9D 00 04                          STA tile_type,x
0CC22                           
0CC22                                   ;; Check if shade 1 should be drawn
0CC22 E8                                INX
0CC23 BD 00 04                          LDA tile_type,x
0CC26 D0 05                             BNE +
0CC28 A9 00                                 LDA #$00
0CC2A 8D 07 20                              STA PPU_DATA
0CC2D                                   +
0CC2D                                   
0CC2D                                   ;; Check if shade 2 should be drawn
0CC2D A5 0E                             LDA temp+3
0CC2F 18                                CLC
0CC30 69 41                             ADC #$41
0CC32 85 0E                             STA temp+3
0CC34 A5 0D                             LDA temp+2
0CC36 69 00                             ADC #$00
0CC38 85 0D                             STA temp+2
0CC3A                                   
0CC3A 8A                                TXA
0CC3B 18                                CLC
0CC3C 69 0F                             ADC #$0F
0CC3E AA                                TAX
0CC3F                                   
0CC3F BD 00 04                          LDA tile_type,x
0CC42 D0 0F                             BNE +
0CC44 A5 0D                                 LDA temp+2
0CC46 8D 06 20                              STA PPU_ADDR
0CC49 A5 0E                                 LDA temp+3
0CC4B 8D 06 20                              STA PPU_ADDR
0CC4E A9 00                                 LDA #$00
0CC50 8D 07 20                              STA PPU_DATA
0CC53                                   +
0CC53                           
0CC53                                   ;; Check if shade 3 should be drawn
0CC53 E8                                INX
0CC54 E6 0E                             INC temp+3
0CC56 BD 00 04                          LDA tile_type,x
0CC59 D0 0F                             BNE +
0CC5B A5 0D                                 LDA temp+2
0CC5D 8D 06 20                              STA PPU_ADDR
0CC60 A5 0E                                 LDA temp+3
0CC62 8D 06 20                              STA PPU_ADDR
0CC65 A9 00                                 LDA #$00
0CC67 8D 07 20                              STA PPU_DATA
0CC6A                                   +
0CC6A                                   
0CC6A                                   ;; Restore x-register from stack
0CC6A 68                                PLA
0CC6B AA                                TAX
0CC6C                                   
0CC6C                                   ;; Reset pointer for next tile
0CC6C A5 0E                             LDA temp+3
0CC6E 38                                SEC
0CC6F E9 42                             SBC #$42
0CC71 85 0E                             STA temp+3
0CC73 A5 0D                             LDA temp+2
0CC75 E9 00                             SBC #$00
0CC77 85 0D                             STA temp+2
0CC79                                   
0CC79                                   ;; Draw next metatile in this loop (if any left)
0CC79 88                                DEY
0CC7A 30 27                             BMI +doneDrawingRowColumn
0CC7C                                   
0CC7C                                   ;; Is it a row or a column?
0CC7C A5 0C                             LDA temp+1
0CC7E 10 17                             BPL +
0CC80                                       ;; It is a column: move pointer down (+$40)
0CC80 A5 0E                                 LDA temp+3
0CC82 18                                    CLC
0CC83 69 40                                 ADC #$40
0CC85 85 0E                                 STA temp+3
0CC87 A5 0D                                 LDA temp+2
0CC89 69 00                                 ADC #$00
0CC8B 85 0D                                 STA temp+2
0CC8D                                       
0CC8D                                       ;; Add 16 to temp (as a tile RAM pointer)
0CC8D A5 0B                                 LDA temp
0CC8F 18                                    CLC
0CC90 69 10                                 ADC #$10
0CC92 85 0B                                 STA temp
0CC94 4C A0 CC                              JMP +drawNextTile
0CC97                                   +
0CC97                                   
0CC97                                   ;; It is a row: move pointer right (+$02)
0CC97 A5 0E                             LDA temp+3
0CC99 18                                CLC
0CC9A 69 02                             ADC #$02
0CC9C 85 0E                             STA temp+3
0CC9E                                   
0CC9E                                   ;; Add 1 to temp (as a tile RAM pointer)
0CC9E E6 0B                             INC temp
0CCA0                           
0CCA0                               
0CCA0                               ;; Next tile in the row/column
0CCA0                                   +drawNextTile:
0CCA0 4C DC CB                      JMP -drawTileLoop
0CCA3                           
0CCA3                               ;; Go to the next set of tiles
0CCA3                           +doneDrawingRowColumn:
0CCA3 68                            PLA
0CCA4 A8                            TAY
0CCA5 C8                            INY
0CCA6 4C 5A CB                      JMP -drawRowColumnLoop
0CCA9                           
0CCA9                           ;; Level loading is done
0CCA9                           +doneLevelLoad:
0CCA9                           
0CCA9                               ;; Count number of color blocks
0CCA9 A2 A0                         LDX #160
0CCAB                               -
0CCAB BD FF 03                          LDA tile_type-1,x
0CCAE 29 80                             AND #%10000000
0CCB0 F0 02                             BEQ +
0CCB2 E6 4F                                 INC blocks_left
0CCB4                                   +
0CCB4 CA                                DEX
0CCB5 D0 F4                         BNE -
0CCB7                           
0CCB7                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CCB7 A9 20                         LDA #$20
0CCB9 8D 06 20                      STA PPU_ADDR
0CCBC A9 A2                         LDA #$A2
0CCBE 8D 06 20                      STA PPU_ADDR
0CCC1 A9 35                         LDA #$35
0CCC3 20 FE CE                      JSR sub_Draw28HorizontalTiles
0CCC6                           
0CCC6                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CCC6 A9 23                         LDA #$23
0CCC8 8D 06 20                      STA PPU_ADDR
0CCCB A9 42                         LDA #$42
0CCCD 8D 06 20                      STA PPU_ADDR
0CCD0 A9 31                         LDA #$31
0CCD2 20 FE CE                      JSR sub_Draw28HorizontalTiles
0CCD5                           
0CCD5                               ;; Left & right game bounds
0CCD5                               ;; Set PPU_ADDR and store in temp variables
0CCD5 A9 20                         LDA #$20
0CCD7 85 0B                         STA temp
0CCD9 8D 06 20                      STA PPU_ADDR
0CCDC A9 C1                         LDA #$C1
0CCDE 85 0C                         STA temp+1
0CCE0 8D 06 20                      STA PPU_ADDR
0CCE3                               
0CCE3                               ;; Set vertical bound tile and set up loop
0CCE3 A0 33                         LDY #$33
0CCE5 A2 14                         LDX #20
0CCE7                               -
0CCE7                                   ;; Show left tile
0CCE7 8C 07 20                          STY PPU_DATA
0CCEA                                   
0CCEA                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CCEA A5 0B                             LDA temp
0CCEC 8D 06 20                          STA PPU_ADDR
0CCEF A5 0C                             LDA temp+1
0CCF1 18                                CLC
0CCF2 69 1D                             ADC #29
0CCF4 85 0C                             STA temp+1
0CCF6 8D 06 20                          STA PPU_ADDR
0CCF9                           
0CCF9                                   ;; Show right tile
0CCF9 8C 07 20                          STY PPU_DATA
0CCFC                           
0CCFC                                   ;; Check if we're done yet
0CCFC CA                                DEX
0CCFD F0 18                             BEQ +drawCorners
0CCFF                                   
0CCFF                                   ;; Not done yet: add 3 to low byte for next left bound
0CCFF A5 0C                             LDA temp+1
0CD01 18                                CLC
0CD02 69 03                             ADC #3
0CD04 85 0C                             STA temp+1
0CD06                                   
0CD06                                   ;; Apply carry to high byte
0CD06 A5 0B                             LDA temp
0CD08 69 00                             ADC #$00
0CD0A 85 0B                             STA temp
0CD0C                                   
0CD0C                                   ;; Store next PPU_ADDR to draw at
0CD0C 8D 06 20                          STA PPU_ADDR
0CD0F A5 0C                             LDA temp+1
0CD11 8D 06 20                          STA PPU_ADDR
0CD14 4C E7 CC                      JMP -
0CD17                               
0CD17                               
0CD17                           
0CD17                           +drawCorners:
0CD17                               ;; Draw the corners of the playing field
0CD17 A9 20                         LDA #$20
0CD19 8D 06 20                      STA PPU_ADDR
0CD1C A9 A1                         LDA #$A1
0CD1E 8D 06 20                      STA PPU_ADDR
0CD21 A9 39                         LDA #$39
0CD23 8D 07 20                      STA PPU_DATA
0CD26                           
0CD26 A9 20                         LDA #$20
0CD28 8D 06 20                      STA PPU_ADDR
0CD2B A9 BE                         LDA #$BE
0CD2D 8D 06 20                      STA PPU_ADDR
0CD30 A9 3A                         LDA #$3A
0CD32 8D 07 20                      STA PPU_DATA
0CD35                           
0CD35 A9 23                         LDA #$23
0CD37 8D 06 20                      STA PPU_ADDR
0CD3A A9 41                         LDA #$41
0CD3C 8D 06 20                      STA PPU_ADDR
0CD3F A9 36                         LDA #$36
0CD41 8D 07 20                      STA PPU_DATA
0CD44                           
0CD44 A9 23                         LDA #$23
0CD46 8D 06 20                      STA PPU_ADDR
0CD49 A9 5E                         LDA #$5E
0CD4B 8D 06 20                      STA PPU_ADDR
0CD4E A9 34                         LDA #$34
0CD50 8D 07 20                      STA PPU_DATA
0CD53                               
0CD53                           
0CD53                               ;; Draw the hud labels
0CD53 A9 20                         LDA #$20
0CD55 8D 06 20                      STA PPU_ADDR
0CD58 A9 62                         LDA #$62
0CD5A 8D 06 20                      STA PPU_ADDR
0CD5D A2 00                         LDX #$00
0CD5F                               -
0CD5F BD C1 DA                          LDA tbl_HudText,x
0CD62 8D 07 20                          STA PPU_DATA
0CD65 E8                                INX
0CD66 E0 1E                             CPX #$1E
0CD68 D0 F5                         BNE -
0CD6A                           
0CD6A                           
0CD6A                               ;; Draw the current score
0CD6A A9 20                         LDA #$20
0CD6C 8D 06 20                      STA PPU_ADDR
0CD6F A9 83                         LDA #$83
0CD71 8D 06 20                      STA PPU_ADDR
0CD74 A2 00                         LDX #$00
0CD76                               -
0CD76 B5 2B                             LDA ball_score,x
0CD78 18                                CLC
0CD79 69 01                             ADC #$01
0CD7B 8D 07 20                          STA PPU_DATA
0CD7E E8                                INX
0CD7F E0 06                             CPX #$06
0CD81 D0 F3                         BNE -
0CD83                           
0CD83                           
0CD83                               ;; Draw the level number
0CD83                               ;; (with primitive HEX>DEC)
0CD83 A5 4D                         LDA current_level
0CD85 18                            CLC
0CD86 69 01                         ADC #$01
0CD88 85 0C                         STA temp+1
0CD8A                               
0CD8A C9 14                         CMP #20
0CD8C B0 13                         BCS +tempIsTwo
0CD8E                               
0CD8E C9 0A                         CMP #10
0CD90 B0 05                         BCS +tempIsOne
0CD92                               
0CD92 A9 00                         LDA #$00
0CD94 4C A8 CD                      JMP +setTemp
0CD97                               
0CD97                           +tempIsOne:
0CD97 38                            SEC
0CD98 E9 0A                         SBC #10
0CD9A 85 0C                         STA temp+1
0CD9C A9 01                         LDA #$01
0CD9E 4C A8 CD                      JMP +setTemp
0CDA1                               
0CDA1                           +tempIsTwo:
0CDA1 38                            SEC
0CDA2 E9 14                         SBC #20
0CDA4 85 0C                         STA temp+1
0CDA6 A9 02                         LDA #$02
0CDA8                           
0CDA8                           +setTemp:
0CDA8 85 0B                         STA temp
0CDAA                               
0CDAA E6 0B                         INC temp
0CDAC E6 0C                         INC temp+1
0CDAE                               
0CDAE A9 20                         LDA #$20
0CDB0 8D 06 20                      STA PPU_ADDR
0CDB3 A9 8B                         LDA #$8B
0CDB5 8D 06 20                      STA PPU_ADDR
0CDB8 A5 0B                         LDA temp
0CDBA 8D 07 20                      STA PPU_DATA
0CDBD A5 0C                         LDA temp+1
0CDBF 8D 07 20                      STA PPU_DATA
0CDC2                           
0CDC2                           
0CDC2                               ;; Draw lives (presumes lives to be capped at 9)
0CDC2 A9 20                         LDA #$20
0CDC4 8D 06 20                      STA PPU_ADDR
0CDC7 A9 92                         LDA #$92
0CDC9 8D 06 20                      STA PPU_ADDR
0CDCC A6 2A                         LDX ball_lives
0CDCE E8                            INX
0CDCF 8E 07 20                      STX PPU_DATA
0CDD2                           
0CDD2                           
0CDD2                               ;; Set and draw bonus
0CDD2 A9 07                         LDA #$07
0CDD4 85 37                         STA ball_bonus
0CDD6 A9 09                         LDA #$09
0CDD8 85 38                         STA ball_bonus+1
0CDDA 85 39                         STA ball_bonus+2
0CDDC                               
0CDDC A9 20                         LDA #$20
0CDDE 8D 06 20                      STA PPU_ADDR
0CDE1 A9 9A                         LDA #$9A
0CDE3 8D 06 20                      STA PPU_ADDR
0CDE6 A2 00                         LDX #$00
0CDE8                               -
0CDE8 B5 37                             LDA ball_bonus,x
0CDEA 18                                CLC
0CDEB 69 01                             ADC #$01
0CDED 8D 07 20                          STA PPU_DATA
0CDF0 E8                                INX
0CDF1 E0 03                             CPX #$03
0CDF3 D0 F3                         BNE -
0CDF5                           
0CDF5                           
0CDF5                               ;; Set attribute data to RAM
0CDF5                               
0CDF5                               ;; Byte 0-6 of attribute ram should be #%10100000
0CDF5 A2 00                         LDX #$00
0CDF7 A9 A0                         LDA #$A0
0CDF9                               -
0CDF9 9D A0 04                          STA tile_attributes,x
0CDFC E8                                INX
0CDFD E0 07                             CPX #$07
0CDFF D0 F8                         BNE -
0CE01                               
0CE01                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CE01 A9 E0                         LDA #$E0
0CE03 9D A0 04                      STA tile_attributes,x
0CE06 E8                            INX
0CE07                           
0CE07                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CE07                           
0CE07                           -attributeLoop:
0CE07                               ;; Reset current attribute value
0CE07 A9 00                         LDA #$00
0CE09 85 0D                         STA temp+2
0CE0B                           
0CE0B                               ;; Get first metatile in tile ram based on attribute index
0CE0B                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CE0B 8A                            TXA
0CE0C                           
0CE0C 38                            SEC
0CE0D E9 08                         SBC #$08
0CE0F 85 0C                         STA temp+1      ; attr - 8 (temp1)
0CE11 0A                            ASL             ; * 2
0CE12 85 0B                         STA temp        ; temp = temp1 * 2
0CE14                           
0CE14 A5 0C                         LDA temp+1      ; temp1
0CE16 29 F8                         AND #%11111000  ; rounded down to 8's
0CE18 0A                            ASL             ; * 2
0CE19 18                            CLC
0CE1A 65 0B                         ADC temp        ; + temp1 * 2
0CE1C 85 0B                         STA temp        ; first metatile
0CE1E                           
0CE1E                               ;; Store first metatile in y-register
0CE1E A8                            TAY
0CE1F                           
0CE1F                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CE1F 8A                            TXA
0CE20 29 07                         AND #%00000111
0CE22 C9 07                         CMP #%00000111
0CE24 F0 0B                         BEQ +
0CE26                           
0CE26                               ;; If X >= $30, don't apply bottom right metatile
0CE26 E0 30                         CPX #$30
0CE28 B0 07                         BCS +
0CE2A                               
0CE2A                               ;; Add metatile1 subpalette to attribute value
0CE2A B9 00 04                      LDA tile_type,y
0CE2D 29 0C                         AND #%00001100
0CE2F 85 0D                         STA temp+2
0CE31                               +
0CE31                           
0CE31                           
0CE31                               ;; Apply second metatile
0CE31 88                            DEY
0CE32                           
0CE32                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CE32 8A                            TXA
0CE33 29 07                         AND #%00000111
0CE35 F0 10                         BEQ +
0CE37                           
0CE37                               ;; If X >= $30, don't apply bottom left metatile
0CE37 E0 30                         CPX #$30
0CE39 B0 0C                         BCS +
0CE3B                           
0CE3B                           
0CE3B                           
0CE3B                               ;; Add metatile2 subpalette to attribute value
0CE3B B9 00 04                      LDA tile_type,y
0CE3E 29 0C                         AND #%00001100
0CE40 4A                            LSR
0CE41 4A                            LSR
0CE42 05 0D                         ORA temp+2
0CE44 4C 49 CE                      JMP ++
0CE47                               +
0CE47 A5 0D                         LDA temp+2
0CE49                               ++
0CE49 0A                            ASL
0CE4A 0A                            ASL
0CE4B 85 0D                         STA temp+2
0CE4D                           
0CE4D                           
0CE4D                               ;; Apply third metatile
0CE4D 98                            TYA
0CE4E 38                            SEC
0CE4F E9 0F                         SBC #$0F
0CE51 A8                            TAY
0CE52                           
0CE52                               ;; If X MOD 8 == 7, don't apply top right metatile
0CE52 8A                            TXA
0CE53 29 07                         AND #%00000111
0CE55 C9 07                         CMP #%00000111
0CE57 F0 11                         BEQ +
0CE59                           
0CE59                               ;; If X < $10, don't apply top right metatile
0CE59 8A                            TXA
0CE5A 29 F0                         AND #%11110000
0CE5C F0 0C                         BEQ +
0CE5E                           
0CE5E                               ;; Add metatile3 subpalette to attribute value
0CE5E B9 00 04                      LDA tile_type,y
0CE61 29 0C                         AND #%00001100
0CE63 4A                            LSR
0CE64 4A                            LSR
0CE65 05 0D                         ORA temp+2
0CE67 4C 6C CE                      JMP ++
0CE6A                               +
0CE6A A5 0D                         LDA temp+2
0CE6C                               ++
0CE6C 0A                            ASL
0CE6D 0A                            ASL
0CE6E 85 0D                         STA temp+2
0CE70                           
0CE70                           
0CE70                               ;; Apply fourth metatile
0CE70 88                            DEY
0CE71                           
0CE71                               ;; If X MOD 8 == 0, don't apply top left metatile
0CE71 8A                            TXA
0CE72 29 07                         AND #%00000111
0CE74 F0 11                         BEQ +
0CE76                           
0CE76                               ;; If X < $10, don't apply top left metatile
0CE76 8A                            TXA
0CE77 29 F0                         AND #%11110000
0CE79 F0 0C                         BEQ +
0CE7B                           
0CE7B                               ;; Add metatile4 subpalette to attribute value
0CE7B B9 00 04                      LDA tile_type,y
0CE7E 29 0C                         AND #%00001100
0CE80 4A                            LSR
0CE81 4A                            LSR
0CE82 05 0D                         ORA temp+2
0CE84 4C 89 CE                      JMP ++
0CE87                               +
0CE87 A5 0D                         LDA temp+2
0CE89                               ++
0CE89 9D A0 04                      STA tile_attributes,x
0CE8C                           
0CE8C                               ;; Check the next attribute, if any left
0CE8C E8                            INX
0CE8D E0 38                         CPX #$38
0CE8F F0 03                         BEQ +
0CE91 4C 07 CE                          JMP -attributeLoop
0CE94                               +
0CE94                           
0CE94                               ;; Stream attribute RAM to PPU
0CE94 2C 02 20                      BIT PPU_STATUS
0CE97 A9 23                         LDA #$23
0CE99 8D 06 20                      STA PPU_ADDR
0CE9C A9 C0                         LDA #$C0
0CE9E 8D 06 20                      STA PPU_ADDR
0CEA1 A2 00                         LDX #$00
0CEA3                               -
0CEA3 BD A0 04                          LDA tile_attributes,x
0CEA6 8D 07 20                          STA PPU_DATA
0CEA9 E8                                INX
0CEAA E0 40                             CPX #$40
0CEAC D0 F5                         BNE -
0CEAE                           
0CEAE                               ;; Set initial ball position
0CEAE A6 4D                         LDX current_level
0CEB0 BD 4E DA                      LDA tbl_lvl_ball_startpos,x
0CEB3 29 F0                         AND #%11110000
0CEB5 18                            CLC
0CEB6 69 34                         ADC #$34
0CEB8 85 24                         STA ball_ypos_hi
0CEBA BD 4E DA                      LDA tbl_lvl_ball_startpos,x
0CEBD 0A                            ASL
0CEBE 0A                            ASL
0CEBF 0A                            ASL
0CEC0 0A                            ASL
0CEC1 18                            CLC
0CEC2 69 14                         ADC #$14
0CEC4 85 22                         STA ball_xpos_hi
0CEC6 A9 00                         LDA #$00
0CEC8 85 23                         STA ball_xpos_lo
0CECA 85 25                         STA ball_ypos_lo
0CECC                               
0CECC                               ;; Set initial ball color and direction
0CECC BD 67 DA                      LDA tbl_lvl_ball_init,x
0CECF 29 F0                         AND #%11110000
0CED1 85 42                         STA ball_flags
0CED3 20 F7 C6                      JSR sub_ColorizeBall
0CED6                               
0CED6                               ;; Reset bonus timer
0CED6 A9 08                         LDA #BONUS_FRAMES
0CED8 85 4A                         STA bonus_timer
0CEDA                               
0CEDA                               ;; Play background noise
0CEDA A9 08                         LDA #$08
0CEDC 8D 15 40                      STA APU_STATUS
0CEDF 8D 0F 40                      STA NOISE_LENGTH
0CEE2 A9 0E                         LDA #$0E
0CEE4 85 52                         STA current_noise
0CEE6 A9 00                         LDA #$00
0CEE8 85 50                         STA max_noise
0CEEA 85 53                         STA noise_timer
0CEEC 85 51                         STA sweep_noise
0CEEE 85 56                         STA noise_muted
0CEF0 20 0A C6                      JSR sub_BackgroundNoise
0CEF3                           
0CEF3                               ;; Freeze the ball
0CEF3 A5 42                         LDA ball_flags
0CEF5 09 04                         ORA #FREEZE_BALL
0CEF7 85 42                         STA ball_flags
0CEF9                               
0CEF9                               ;; Start unfreeze timer
0CEF9 A9 30                         LDA #$30
0CEFB 85 4C                         STA unfreeze_timer
0CEFD                           
0CEFD                               ;; Return
0CEFD 60                            RTS
0CEFE                           
0CEFE                           
0CEFE                           ;; Subroutine: draw 28 tiles in a row
0CEFE                           sub_Draw28HorizontalTiles:
0CEFE A2 1C                         LDX #28
0CF00                               -
0CF00 8D 07 20                          STA PPU_DATA
0CF03 CA                                DEX
0CF04 D0 FA                         BNE -
0CF06 60                            RTS
0CF07                           
0CF07                           .include "game/subroutine/LoadIntroScreen.asm"
0CF07                           
0CF07                           ;; Load the intro screen
0CF07                           sub_LoadIntroScreen:
0CF07                           
0CF07                               ;; Load intro palette
0CF07 2C 02 20                      BIT PPU_STATUS
0CF0A A9 3F                         LDA #$3F
0CF0C 8D 06 20                      STA PPU_ADDR
0CF0F A9 00                         LDA #$00
0CF11 8D 06 20                      STA PPU_ADDR
0CF14 A2 00                         LDX #$00
0CF16                               -
0CF16 BD EB D1                          LDA tbl_IntroScreenPalette,x
0CF19 8D 07 20                          STA PPU_DATA
0CF1C E8                                INX
0CF1D E0 20                             CPX #$20
0CF1F D0 F5                         BNE -
0CF21                               
0CF21                               ;; Put ball in the middle
0CF21 A9 7C                         LDA #$7C
0CF23 85 22                         STA ball_xpos_hi
0CF25 85 24                         STA ball_ypos_hi
0CF27                           
0CF27                               ;; Clear the screen
0CF27 20 8C C6                      JSR sub_ClearScreen
0CF2A                           
0CF2A                               ;; Set up intro screen draw loop
0CF2A A2 00                         LDX #$00
0CF2C                           
0CF2C                           -loop_IntroScreenData:
0CF2C                           
0CF2C                               ;; Get current byte from intro screen data
0CF2C BD 13 D2                      LDA tbl_IntroScreenData,x
0CF2F                           
0CF2F                               ;; If current byte is #$3E, draw high score
0CF2F C9 3E                         CMP #$3E
0CF31 D0 14                         BNE +
0CF33 A0 00                             LDY #$00
0CF35                                   -
0CF35 B9 05 00                              LDA hi_score,y
0CF38 18                                    CLC
0CF39 69 01                                 ADC #1
0CF3B 8D 07 20                              STA PPU_DATA
0CF3E C8                                    INY
0CF3F C0 06                                 CPY #$06
0CF41 D0 F2                             BNE -
0CF43 E8                                INX
0CF44 4C 2C CF                          JMP -loop_IntroScreenData
0CF47                               +
0CF47                           
0CF47                               ;; If current byte is #$3F, we're done drawing.
0CF47 C9 3F                         CMP #$3F
0CF49 D0 03                         BNE +
0CF4B 4C 98 CF                          JMP +goToEndIntroScreen
0CF4E                               +
0CF4E                           
0CF4E                               ;; If highest bits are %11, draw a plain tile
0CF4E 29 C0                         AND #%11000000
0CF50 D0 03                         BNE +
0CF52 4C 78 CF                          JMP +drawTile
0CF55                               +
0CF55                               
0CF55                               ;; If highest bits are %01, set the PPU address
0CF55                               ;; If not, draw two logo tiles
0CF55 C9 40                         CMP #%01000000
0CF57 D0 03                         BNE +drawLogo
0CF59 4C 82 CF                          JMP +setPpuAddr
0CF5C                           
0CF5C                           +drawLogo:
0CF5C                               ;; Get bits 0-2 and store in a temp variable
0CF5C BD 13 D2                      LDA tbl_IntroScreenData,x
0CF5F 29 07                         AND #%00000111
0CF61 85 0B                         STA temp
0CF63                               
0CF63                               ;; Get bits 3-5, shift over to get a value from 0-7
0CF63 BD 13 D2                      LDA tbl_IntroScreenData,x
0CF66 4A                            LSR
0CF67 4A                            LSR
0CF68 4A                            LSR
0CF69 29 07                         AND #%00000111
0CF6B                               
0CF6B                               ;; Draw the tile that corresponds with that value
0CF6B A8                            TAY
0CF6C 20 6F C7                      JSR sub_drawIntroScreenLogoTile
0CF6F                               
0CF6F                               ;; Do the same for the value stored in temp
0CF6F A4 0B                         LDY temp
0CF71 20 6F C7                      JSR sub_drawIntroScreenLogoTile
0CF74                           
0CF74                               ;; Next byte please
0CF74 E8                            INX
0CF75 4C 2C CF                      JMP -loop_IntroScreenData
0CF78                           
0CF78                           +drawTile:
0CF78                               ;; Just draw the tile value on screen
0CF78 BD 13 D2                      LDA tbl_IntroScreenData,x
0CF7B 8D 07 20                      STA PPU_DATA
0CF7E                               
0CF7E                               ;; Next byte please
0CF7E E8                            INX
0CF7F 4C 2C CF                      JMP -loop_IntroScreenData
0CF82                           
0CF82                           
0CF82                           +setPpuAddr:
0CF82                               ;; Reset the PPU latch
0CF82 2C 02 20                      BIT PPU_STATUS
0CF85                               
0CF85                               ;; Sanitize and write the high byte of the PPU address
0CF85 BD 13 D2                      LDA tbl_IntroScreenData,x
0CF88 29 3F                         AND #%00111111
0CF8A 8D 06 20                      STA PPU_ADDR
0CF8D                           
0CF8D                               ;; Write the low byte of the PPU address
0CF8D E8                            INX
0CF8E BD 13 D2                      LDA tbl_IntroScreenData,x
0CF91 8D 06 20                      STA PPU_ADDR
0CF94                               
0CF94                               ;; PPU has been set up to draw tiles at the correct spot now.
0CF94                               
0CF94                               ;; Next byte please.
0CF94 E8                            INX
0CF95 4C 2C CF                      JMP -loop_IntroScreenData
0CF98                           
0CF98                           +goToEndIntroScreen:
0CF98                           
0CF98                               ;; To color the 1.LEVEL: line green, we need to update two
0CF98                               ;; values in the PPU attribute data.
0CF98 A0 08                         LDY #$08
0CF9A 2C 02 20                      BIT PPU_STATUS
0CF9D A9 23                         LDA #$23
0CF9F 8D 06 20                      STA PPU_ADDR
0CFA2 A9 C8                         LDA #$C8
0CFA4 8D 06 20                      STA PPU_ADDR
0CFA7 A9 0A                         LDA #%00001010
0CFA9                               -
0CFA9 8D 07 20                          STA PPU_DATA
0CFAC 88                                DEY
0CFAD D0 FA                         BNE -
0CFAF                           
0CFAF 60                            RTS
0CFB0                           
0CFB0                           .include "game/subroutine/LoadWinScreen.asm"
0CFB0                           
0CFB0                           ;; Load the win screen (in progress)
0CFB0                           sub_LoadWinScreen:
0CFB0 60                            RTS
0CFB1                           
0CFB1                           .include "game/subroutine/PreloadSfxFromX.asm"
0CFB1                           
0CFB1                           sub_PreloadSfxFromX:
0CFB1                               
0CFB1                               ;; Load sample X into sfx address (low byte)
0CFB1 BD 3F DB                      LDA tbl_Sfx_lo,x
0CFB4 85 57                         STA sfx_address
0CFB6                               
0CFB6                               ;; Load sample X into sfx address (high byte)
0CFB6 BD 3C DB                      LDA tbl_Sfx_hi,x
0CFB9 85 58                         STA sfx_address+1
0CFBB                               
0CFBB                               ;; Start SFX timer
0CFBB A9 01                         LDA #$01
0CFBD 85 59                         STA sfx_timer
0CFBF                               
0CFBF 60                            RTS
0CFC0                               
0CFC0                               0CFC0                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CFC0                           
0CFC0                           ;; Remove a block from screen
0CFC0                           sub_RemoveBlockFromScreen:
0CFC0                           
0CFC0                               ;; Get current buffer location
0CFC0 A4 45                         LDY ppu_buffer_pointer
0CFC2                               
0CFC2                               ;; TILE 1: if metatile on top left is solid, draw
0CFC2                               ;; null tile, else draw random noise tile
0CFC2 A9 00                         LDA #$00
0CFC4 85 44                         STA ppu_buffer_update
0CFC6                               
0CFC6 A5 0B                         LDA temp
0CFC8 99 00 03                      STA ppu_buffer,y
0CFCB C8                            INY
0CFCC A5 0C                         LDA temp+1
0CFCE 99 00 03                      STA ppu_buffer,y
0CFD1 C8                            INY
0CFD2                               
0CFD2 8A                            TXA
0CFD3 29 0F                         AND #%00001111
0CFD5 F0 11                         BEQ +drawRandomTile
0CFD7                           
0CFD7 8A                            TXA
0CFD8 29 F0                         AND #%11110000
0CFDA F0 0C                         BEQ +drawRandomTile
0CFDC                           
0CFDC BD EF 03                      LDA tile_type-17,x
0CFDF 29 01                         AND #%00000001
0CFE1 F0 05                         BEQ +drawRandomTile  
0CFE3                           
0CFE3                               ;; Draw a null tile
0CFE3 A9 00                         LDA #$00
0CFE5 4C F0 CF                      JMP +addToPPUBuffer
0CFE8                               
0CFE8                           +drawRandomTile:
0CFE8                               ;; Draw a random tile
0CFE8 20 7A C5                      JSR sub_GetRandomNumber
0CFEB 29 07                         AND #%00000111
0CFED 18                            CLC
0CFEE 69 68                         ADC #$68
0CFF0                               
0CFF0                               ;; Add tile to ppu buffer
0CFF0                           +addToPPUBuffer:
0CFF0 99 00 03                      STA ppu_buffer,y
0CFF3 C8                            INY
0CFF4                           
0CFF4                               ;; TILE 2: If metatile above is solid, draw null,
0CFF4                               ;; else draw random noise.
0CFF4 E6 0C                         INC temp+1
0CFF6 A5 0B                         LDA temp
0CFF8 99 00 03                      STA ppu_buffer,y
0CFFB C8                            INY
0CFFC A5 0C                         LDA temp+1
0CFFE 99 00 03                      STA ppu_buffer,y
0D001 C8                            INY
0D002                               
0D002 8A                            TXA
0D003 29 F0                         AND #%11110000
0D005 F0 0C                         BEQ +drawRandomTile
0D007                               
0D007 BD F0 03                      LDA tile_type-16,x
0D00A 29 01                         AND #%00000001
0D00C F0 05                         BEQ +drawRandomTile
0D00E                               
0D00E A9 00                         LDA #%00
0D010 4C 1B D0                      JMP +addToPPUBuffer
0D013                           
0D013                           +drawRandomTile:
0D013 20 7A C5                      JSR sub_GetRandomNumber
0D016 29 07                         AND #%00000111
0D018 18                            CLC
0D019 69 68                         ADC #$68
0D01B                           
0D01B                           +addToPPUBuffer:
0D01B 99 00 03                      STA ppu_buffer,y
0D01E C8                            INY
0D01F                               
0D01F                               ;; TILE 3 - If metatile left is solid, draw null,
0D01F                               ;; else draw random noise.
0D01F A5 0C                         LDA temp+1
0D021 18                            CLC
0D022 69 1F                         ADC #$1F
0D024 85 0C                         STA temp+1
0D026 A5 0B                         LDA temp
0D028 69 00                         ADC #$00
0D02A 85 0B                         STA temp
0D02C 99 00 03                      STA ppu_buffer,y
0D02F C8                            INY
0D030 A5 0C                         LDA temp+1
0D032 99 00 03                      STA ppu_buffer,y
0D035 C8                            INY
0D036                               
0D036 8A                            TXA
0D037 29 0F                         AND #%00001111
0D039 F0 0C                         BEQ +drawRandomTile
0D03B                               
0D03B BD FF 03                      LDA tile_type-1,x
0D03E 29 01                         AND #%00000001
0D040 F0 05                         BEQ +drawRandomTile
0D042                               
0D042 A9 00                         LDA #%00
0D044 4C 4F D0                      JMP +addToPPUBuffer
0D047                           
0D047                           +drawRandomTile:
0D047 20 7A C5                      JSR sub_GetRandomNumber
0D04A 29 07                         AND #%00000111
0D04C 18                            CLC
0D04D 69 68                         ADC #$68
0D04F                               
0D04F                           +addToPPUBuffer:
0D04F 99 00 03                      STA ppu_buffer,y
0D052 C8                            INY
0D053                               
0D053                               ;; TILE 4 - Always random noise
0D053 E6 0C                         INC temp+1
0D055 A5 0B                         LDA temp
0D057 99 00 03                      STA ppu_buffer,y
0D05A C8                            INY
0D05B A5 0C                         LDA temp+1
0D05D 99 00 03                      STA ppu_buffer,y
0D060 C8                            INY
0D061 20 7A C5                      JSR sub_GetRandomNumber
0D064 29 07                         AND #%00000111
0D066 18                            CLC
0D067 69 68                         ADC #$68
0D069 99 00 03                      STA ppu_buffer,y
0D06C C8                            INY
0D06D                           
0D06D                               ;; TILE 5 - If tile on the right is solid, skip,
0D06D                               ;; else draw random noise tile
0D06D E6 0C                         INC temp+1
0D06F                               
0D06F 8A                            TXA
0D070 29 0F                         AND #%00001111
0D072 C9 0D                         CMP #$0D
0D074 F0 1F                         BEQ +skipTile
0D076                               
0D076 BD 01 04                      LDA tile_type+1,x
0D079 29 01                         AND #%00000001
0D07B D0 18                         BNE +skipTile
0D07D A5 0B                             LDA temp
0D07F 99 00 03                          STA ppu_buffer,y
0D082 C8                                INY
0D083 A5 0C                             LDA temp+1
0D085 99 00 03                          STA ppu_buffer,y
0D088 C8                                INY
0D089 20 7A C5                          JSR sub_GetRandomNumber
0D08C 29 07                             AND #%00000111
0D08E 18                                CLC
0D08F 69 68                             ADC #$68
0D091 99 00 03                          STA ppu_buffer,y
0D094 C8                                INY    
0D095                               +skipTile:
0D095                           
0D095                               ;; TILE 6 - If tile on bottom is solid, skip,
0D095                               ;; else draw random noise
0D095 A5 0C                         LDA temp+1
0D097 18                            CLC
0D098 69 1F                         ADC #$1F
0D09A 85 0C                         STA temp+1
0D09C A5 0B                         LDA temp
0D09E 69 00                         ADC #$00
0D0A0 85 0B                         STA temp
0D0A2                           
0D0A2 8A                            TXA
0D0A3 29 F0                         AND #%11110000
0D0A5 C9 90                         CMP #$90
0D0A7 F0 1F                         BEQ +skipTile
0D0A9                           
0D0A9 BD 10 04                      LDA tile_type+16,x
0D0AC 29 01                         AND #%00000001
0D0AE D0 18                         BNE +skipTile
0D0B0 A5 0B                             LDA temp
0D0B2 99 00 03                          STA ppu_buffer,y
0D0B5 C8                                INY
0D0B6 A5 0C                             LDA temp+1
0D0B8 99 00 03                          STA ppu_buffer,y
0D0BB C8                                INY
0D0BC 20 7A C5                          JSR sub_GetRandomNumber
0D0BF 29 07                             AND #%00000111
0D0C1 18                                CLC
0D0C2 69 68                             ADC #$68
0D0C4 99 00 03                          STA ppu_buffer,y
0D0C7 C8                                INY    
0D0C8                               +skipTile:
0D0C8                               
0D0C8                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D0C8                               ;; else draw random noise
0D0C8 E6 0C                         INC temp+1
0D0CA                           
0D0CA 8A                            TXA
0D0CB 29 F0                         AND #%11110000
0D0CD C9 90                         CMP #$90
0D0CF F0 26                         BEQ +skipTile
0D0D1                               
0D0D1 8A                            TXA
0D0D2 29 0F                         AND #%00001111
0D0D4 C9 0D                         CMP #$0D
0D0D6 F0 1F                         BEQ +skipTile
0D0D8                               
0D0D8 BD 11 04                      LDA tile_type+17,x
0D0DB 29 01                         AND #%00000001
0D0DD D0 18                         BNE +skipTile
0D0DF A5 0B                             LDA temp
0D0E1 99 00 03                          STA ppu_buffer,y
0D0E4 C8                                INY
0D0E5 A5 0C                             LDA temp+1
0D0E7 99 00 03                          STA ppu_buffer,y
0D0EA C8                                INY
0D0EB 20 7A C5                          JSR sub_GetRandomNumber
0D0EE 29 07                             AND #%00000111
0D0F0 18                                CLC
0D0F1 69 68                             ADC #$68
0D0F3 99 00 03                          STA ppu_buffer,y
0D0F6 C8                                INY    
0D0F7                               +skipTile:   
0D0F7                           
0D0F7                           
0D0F7                               ;; Update attribute table accordingly through ppu buffer
0D0F7 20 36 D1                      JSR sub_SetTileAttributeAddress
0D0FA                               
0D0FA 8A                            TXA
0D0FB 29 10                         AND #%00010000
0D0FD F0 05                         BEQ +
0D0FF A9 F0                             LDA #%11110000
0D101 4C 06 D1                          JMP ++
0D104                               +
0D104 A9 0F                         LDA #%00001111
0D106                               ++
0D106 85 0D                         STA temp+2
0D108                               
0D108 8A                            TXA
0D109 48                            PHA
0D10A 29 01                         AND #%00000001
0D10C F0 07                         BEQ +
0D10E A5 0D                             LDA temp+2
0D110 09 CC                             ORA #%11001100
0D112 4C 19 D1                          JMP ++
0D115                               +
0D115 A5 0D                         LDA temp+2
0D117 09 33                         ORA #%00110011
0D119                               ++
0D119 85 0D                         STA temp+2
0D11B                               
0D11B A5 0B                         LDA temp
0D11D 38                            SEC
0D11E E9 C0                         SBC #$C0
0D120 AA                            TAX
0D121 BD A0 04                      LDA tile_attributes,x
0D124 25 0D                         AND temp+2
0D126 9D A0 04                      STA tile_attributes,x
0D129 99 00 03                      STA ppu_buffer,y
0D12C C8                            INY
0D12D 68                            PLA
0D12E AA                            TAX
0D12F                           
0D12F                               ;; Tell PPU to update tiles and attributes next frame
0D12F 84 45                         STY ppu_buffer_pointer
0D131 A9 01                         LDA #$01
0D133 85 44                         STA ppu_buffer_update
0D135                            
0D135                               ;; We're done - return
0D135 60                            RTS
0D136                           
0D136                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D136                           
0D136                           ;; Set the correct tile attribute address based on game tile (x) 
0D136                           ;; into the correct ppu buffer slot (y)
0D136                           
0D136                           sub_SetTileAttributeAddress:
0D136 A9 23                         LDA #$23
0D138 99 00 03                      STA ppu_buffer,y
0D13B C8                            INY
0D13C                               
0D13C 8A                            TXA
0D13D 29 F0                         AND #%11110000
0D13F 4A                            LSR
0D140 4A                            LSR
0D141 4A                            LSR
0D142 4A                            LSR
0D143 18                            CLC
0D144 69 01                         ADC #$01
0D146 4A                            LSR
0D147 0A                            ASL
0D148 0A                            ASL
0D149 0A                            ASL
0D14A 18                            CLC
0D14B 69 C8                         ADC #$C8
0D14D 85 0B                         STA temp
0D14F 8A                            TXA
0D150 29 0F                         AND #%00001111
0D152 18                            CLC
0D153 69 01                         ADC #$01
0D155 4A                            LSR
0D156 18                            CLC
0D157 65 0B                         ADC temp
0D159 85 0B                         STA temp
0D15B 99 00 03                      STA ppu_buffer,y
0D15E C8                            INY
0D15F                                  
0D15F 60                            RTS
0D160                           
0D160                           .include "game/subroutine/SubtractXFromBonus.asm"
0D160                           
0D160                           sub_SubtractXFromBonus:
0D160 86 14                         STX temp+9
0D162 A5 39                         LDA ball_bonus+2
0D164 38                            SEC
0D165 E5 14                         SBC temp+9
0D167 30 05                         BMI +
0D169 85 39                             STA ball_bonus+2
0D16B 4C 83 D1                          JMP +updateBonusOnScreen
0D16E                               +
0D16E                           
0D16E 18                            CLC
0D16F 69 0A                         ADC #$0A
0D171 85 39                         STA ball_bonus+2
0D173 C6 38                         DEC ball_bonus+1
0D175 10 0C                         BPL +updateBonusOnScreen
0D177                           
0D177 A9 09                         LDA #$09
0D179 85 38                         STA ball_bonus+1
0D17B C6 37                         DEC ball_bonus
0D17D 10 04                         BPL +updateBonusOnScreen
0D17F                           
0D17F A9 00                         LDA #$00
0D181 85 37                         STA ball_bonus
0D183                           
0D183                               +updateBonusOnScreen:
0D183 A9 20                         LDA #$20
0D185 85 0B                         STA temp
0D187 A9 9C                         LDA #$9C
0D189 85 0C                         STA temp+1
0D18B A2 02                         LDX #$02
0D18D                               
0D18D                               -updateNextDigit:
0D18D B5 37                             LDA ball_bonus,x
0D18F 18                                CLC
0D190 69 01                             ADC #$01
0D192 85 0D                             STA temp+2
0D194 20 C5 D1                          JSR sub_WriteByteToPPUBuffer
0D197 C6 0C                             DEC temp+1
0D199 CA                                DEX
0D19A 10 F1                         BPL -updateNextDigit
0D19C                           
0D19C 60                            RTS
0D19D                           
0D19D                           .include "game/subroutine/WaitXFrames.asm"
0D19D                           
0D19D                           sub_WaitXFrames:
0D19D                               
0D19D                               ;; Push X to stack
0D19D 8A                            TXA
0D19E 48                            PHA
0D19F                               
0D19F                               ;; Wait for NMI
0D19F 20 9C C5                      JSR sub_WaitForNMI
0D1A2                           
0D1A2                               ;; Clear pointer, except for sprite-zero and ball
0D1A2 A9 08                         LDA #$08
0D1A4 85 48                         STA sprite_ram_pointer
0D1A6                           
0D1A6                               ;; Load animations (if any)
0D1A6 20 99 CA                      JSR sub_LoadAnimations
0D1A9                               
0D1A9                               ;; Restore original X
0D1A9 68                            PLA
0D1AA AA                            TAX
0D1AB                               
0D1AB                               ;; Check if all X frames have passed
0D1AB CA                            DEX
0D1AC D0 EF                         BNE sub_WaitXFrames
0D1AE                               
0D1AE                               ;; Return
0D1AE 60                            RTS
0D1AF                           
0D1AF                           .include "game/subroutine/Waste.asm"
0D1AF 20 B2 D1                  sub_Waste7: JSR sub_Waste6
0D1B2 20 B5 D1                  sub_Waste6: JSR sub_Waste5
0D1B5 20 B8 D1                  sub_Waste5: JSR sub_Waste4
0D1B8 20 BB D1                  sub_Waste4: JSR sub_Waste3
0D1BB 20 BE D1                  sub_Waste3: JSR sub_Waste2
0D1BE 20 C1 D1                  sub_Waste2: JSR sub_Waste1
0D1C1 20 C4 D1                  sub_Waste1: JSR sub_Waste0
0D1C4 60                        sub_Waste0: RTS0D1C5                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D1C5                           
0D1C5                           ;; Write the byte in temp+2 and the ppu address (temp)
0D1C5                           ;; to a buffer, so NMI can update it before the next frame
0D1C5                           
0D1C5                           sub_WriteByteToPPUBuffer:
0D1C5                           
0D1C5                               ;; Prevent updating until full 3-byte buffer is filled,
0D1C5                               ;; so that graphics won't glitch out if NMI happens during
0D1C5                               ;; updating the buffer
0D1C5 A9 00                         LDA #$00
0D1C7 85 44                         STA ppu_buffer_update
0D1C9                           
0D1C9                               ;; Check if buffer full; if so, wait a frame and force update
0D1C9 A4 45                         LDY ppu_buffer_pointer
0D1CB C0 60                         CPY #$60
0D1CD D0 05                         BNE +
0D1CF E6 44                             INC ppu_buffer_update
0D1D1 20 A5 C5                          JSR sub_WaitForVBlank
0D1D4                               +
0D1D4                           
0D1D4                               ;; Add ppu_addr high byte to buffer
0D1D4 A5 0B                         LDA temp
0D1D6 99 00 03                      STA ppu_buffer,y
0D1D9                           
0D1D9                               ;; Add ppu_addr low byte to buffer
0D1D9 C8                            INY
0D1DA A5 0C                         LDA temp+1
0D1DC 99 00 03                      STA ppu_buffer,y
0D1DF                           
0D1DF                               ;; Add ppu_data to buffer
0D1DF C8                            INY
0D1E0 A5 0D                         LDA temp+2
0D1E2 99 00 03                      STA ppu_buffer,y
0D1E5                           
0D1E5                               ;; Update buffer pointer
0D1E5 C8                            INY
0D1E6 84 45                         STY ppu_buffer_pointer
0D1E8                           
0D1E8                               ;; Tell NMI to update next round
0D1E8 E6 44                         INC ppu_buffer_update
0D1EA                           
0D1EA                               ;; Return
0D1EA 60                            RTS
0D1EB                           
0D1EB                           
0D1EB                           
0D1EB                           
0D1EB                           ;; LUTs
0D1EB                           .include "game/include/tables.asm"
0D1EB                           
0D1EB                           ;; Initial screen palette
0D1EB                           tbl_IntroScreenPalette:
0D1EB 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D1EF 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D1F3 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D1F7 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D1FB                           
0D1FB 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D1FF 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D203 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D207 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D20B                           
0D20B                           
0D20B                           ;; Intro: mapping logo index to chr tile
0D20B                           tbl_IntroScreenLogoChr:
0D20B 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D213                           
0D213                           
0D213                           ;; Intro screen data
0D213                           tbl_IntroScreenData:
0D213                           
0D213                               ;; Set PPU address $20A3 and draw
0D213 60 A3                         .db #$60, #$A3
0D215 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D21D                           
0D21D                               ;; Set PPU address $20C6 and draw
0D21D 60 C6                         .db #$60, #$C6
0D21F 01 02                         .db #_0, #_1    
0D221                           
0D221                               ;; Set PPU address $20B4 and draw
0D221 60 B4                         .db #$60, #$B4
0D223 12 13 00 1D 0D 19 1C 0F..     .db #_H, #_I, #_SPACE, #_S, #_C, #_O, #_R, #_E, #_COLON
0D22C                           
0D22C                               ;; Set PPU address $20D6 and draw high score
0D22C 60 D6 3E                      .db #$60, #$D6, #$3E
0D22F                           
0D22F                               
0D22F                               ;; Set PPU address $2122 and draw
0D22F 61 22                         .db #$61, #$22
0D231 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D238 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D23E 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D246 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D24B                               
0D24B                               ;; Set PPU address $2147 and draw
0D24B 61 47                         .db #$61, #$47
0D24D 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D254 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D258 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D25E 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D264                               
0D264                               ;; Set PPU address $218B and draw
0D264 61 8B                         .db #$61, #$8B
0D266 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D26C 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D271                               
0D271                               ;; Set PPU address $21E6 and draw
0D271 61 E6                         .db #$61, #$E6
0D273 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D27B 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D27F 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D286                               
0D286                               ;; Set PPU address $222D and draw
0D286 62 2D                         .db #$62, #$2D
0D288 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D28E                               
0D28E                               ;; Set PPU address $2281
0D28E 62 81                         .db #$62, #$81
0D290                               
0D290                               ;; Draw the Crillion logo
0D290 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D294 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D298 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D29C E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D2A0                               
0D2A0 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D2A4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D2A8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D2AC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D2B0                               
0D2B0 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D2B4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D2B8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D2BC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D2C0                           
0D2C0 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D2C4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D2C8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D2CC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D2D0                               
0D2D0 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D2D4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D2D8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D2DC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D2E0                           
0D2E0 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D2E4 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D2E8 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D2EC F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D2EF                           
0D2EF                               ;; End of intro
0D2EF 3F                            .db #$3F
0D2F0                           
0D2F0                           
0D2F0                           ;; Animation frames table
0D2F0                           .include "game/include/table/animation_frames.asm"
0D2F0                           
0D2F0                           ;; CHR tile-id's per slide of explosion
0D2F0                           explosion_slide0:
0D2F0 00 00 00                      .db #$00, #$00, #$00
0D2F3 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D2F6 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D2F9                           
0D2F9                           explosion_slide1:
0D2F9 00 00 00                      .db #$00, #$00, #$00
0D2FC 29 2A 2B                      .db #$29, #$2A, #$2B
0D2FF 39 3A 3B                      .db #$39, #$3A, #$3B
0D302                           
0D302                           explosion_slide2:
0D302 16 00 00                      .db #$16, #$00, #$00
0D305 26 27 28                      .db #$26, #$27, #$28
0D308 36 37 38                      .db #$36, #$37, #$38
0D30B                           
0D30B                           explosion_slide3:
0D30B 00 14 15                      .db #$00, #$14, #$15
0D30E 23 24 25                      .db #$23, #$24, #$25
0D311 33 34 35                      .db #$33, #$34, #$35
0D314                           
0D314                           explosion_slide4:
0D314 10 11 12                      .db #$10, #$11, #$12
0D317 20 21 22                      .db #$20, #$21, #$22
0D31A 30 31 32                      .db #$30, #$31, #$32
0D31D                           
0D31D                           ;; High and low bytes of animation slides
0D31D                           explosion_anim_hi:
0D31D D2                            .db >#explosion_slide0
0D31E D2                            .db >#explosion_slide1
0D31F D3                            .db >#explosion_slide2
0D320 D3                            .db >#explosion_slide3
0D321 D3                            .db >#explosion_slide4
0D322 D3                            .db >#explosion_slide4
0D323 D3                            .db >#explosion_slide3
0D324 D3                            .db >#explosion_slide2
0D325 D2                            .db >#explosion_slide1
0D326 D2                            .db >#explosion_slide0
0D327                           
0D327                           explosion_anim_lo:
0D327 F0                            .db <#explosion_slide0
0D328 F9                            .db <#explosion_slide1
0D329 02                            .db <#explosion_slide2
0D32A 0B                            .db <#explosion_slide3
0D32B 14                            .db <#explosion_slide4
0D32C 14                            .db <#explosion_slide4
0D32D 0B                            .db <#explosion_slide3
0D32E 02                            .db <#explosion_slide2
0D32F F9                            .db <#explosion_slide1
0D330 F0                            .db <#explosion_slide0
0D331                           
0D331                           
0D331                           
0D331                           ;; Ball palette color table (CBRYGM)
0D331                           tbl_BallColorDark:
0D331 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D337                            
0D337                           tbl_BallColorLight:
0D337 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D33D                           
0D33D                               
0D33D                           ;; Screen mode drawing routine addresses
0D33D                           tbl_LoadScreenHi:
0D33D CF CB CF                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D340                           
0D340                           tbl_LoadScreenLo:
0D340 07 3E B0                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D343                           
0D343                           
0D343                           ;; Level data
0D343                           .include "game/include/table/level_data.asm"
0D343                           
0D343                           ;; Level layout tables
0D343                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D343                           
0D343                           ifdef TESTING
0D343                           lvl_test:
0D343                               .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D343                               .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D343                               .db #LEVEL_END
0D343                           endif
0D343                           
0D343                           lvl_layout_01:
0D343 61 21                         .db #$61, #%00100001
0D345 52 61                         .db #$52, #%01100001
0D347 43 65                         .db #$43, #%01100101
0D349 83 05                         .db #$83, #%00000101
0D34B 93 15                         .db #$93, #%00010101
0D34D 34 7A                         .db #$34, #%01111010
0D34F 74 7A                         .db #$74, #%01111010
0D351 35 7A                         .db #$35, #%01111010
0D353 75 7A                         .db #$75, #%01111010
0D355 46 65                         .db #$46, #%01100101
0D357 86 25                         .db #$86, #%00100101
0D359 57 61                         .db #$57, #%01100001
0D35B 68 21                         .db #$68, #%00100001
0D35D FF                            .db #LEVEL_END
0D35E                           
0D35E                           lvl_layout_02:
0D35E C0 0A                         .db #$C0, #%00001010
0D360 11 15                         .db #$11, #%00010101
0D362 21 62                         .db #$21, #%01100010
0D364 61 62                         .db #$61, #%01100010
0D366 A1 42                         .db #$A1, #%01000010
0D368 12 67                         .db #$12, #%01100111
0D36A 52 67                         .db #$52, #%01100111
0D36C 92 67                         .db #$92, #%01100111
0D36E C3 0D                         .db #$C3, #%00001101
0D370 14 11                         .db #$14, #%00010001
0D372 24 65                         .db #$24, #%01100101
0D374 64 65                         .db #$64, #%01100101
0D376 A4 45                         .db #$A4, #%01000101
0D378 15 67                         .db #$15, #%01100111
0D37A 55 67                         .db #$55, #%01100111
0D37C 95 67                         .db #$95, #%01100111
0D37E 17 12                         .db #$17, #%00010010
0D380 27 61                         .db #$27, #%01100001
0D382 67 61                         .db #$67, #%01100001
0D384 A7 41                         .db #$A7, #%01000001
0D386 38 7A                         .db #$38, #%01111010
0D388 98 5A                         .db #$98, #%01011010
0D38A 18 27                         .db #$18, #%00100111
0D38C 48 27                         .db #$48, #%00100111
0D38E 78 27                         .db #$78, #%00100111
0D390 C8 07                         .db #$C8, #%00000111
0D392 FF                            .db #LEVEL_END
0D393                           
0D393                           lvl_layout_03:
0D393 00 7A                         .db #$00, #%01111010
0D395 40 7A                         .db #$40, #%01111010
0D397 80 7A                         .db #$80, #%01111010
0D399 C0 1A                         .db #$C0, #%00011010
0D39B 10 A1                         .db #$10, #%10100001
0D39D 13 E1                         .db #$13, #%11100001
0D39F 17 C1                         .db #$17, #%11000001
0D3A1 30 C1                         .db #$30, #%11000001
0D3A3 34 C1                         .db #$34, #%11000001
0D3A5 38 A1                         .db #$38, #%10100001
0D3A7 50 E1                         .db #$50, #%11100001
0D3A9 55 81                         .db #$55, #%10000001
0D3AB 57 C1                         .db #$57, #%11000001
0D3AD 70 C1                         .db #$70, #%11000001
0D3AF 73 A1                         .db #$73, #%10100001
0D3B1 76 E1                         .db #$76, #%11100001
0D3B3 90 E1                         .db #$90, #%11100001
0D3B5 95 81                         .db #$95, #%10000001
0D3B7 97 C1                         .db #$97, #%11000001
0D3B9 B0 C1                         .db #$B0, #%11000001
0D3BB B4 C1                         .db #$B4, #%11000001
0D3BD B8 A1                         .db #$B8, #%10100001
0D3BF D0 A1                         .db #$D0, #%10100001
0D3C1 D3 E1                         .db #$D3, #%11100001
0D3C3 D7 C1                         .db #$D7, #%11000001
0D3C5 FF                            .db #LEVEL_END
0D3C6                           
0D3C6                           lvl_layout_04:
0D3C6 00 4C                         .db #$00, #%01001100
0D3C8 40 6C                         .db #$40, #%01101100
0D3CA 80 4C                         .db #$80, #%01001100
0D3CC 81 AC                         .db #$81, #%10101100
0D3CE C1 2C                         .db #$C1, #%00101100
0D3D0 02 6C                         .db #$02, #%01101100
0D3D2 42 CC                         .db #$42, #%11001100
0D3D4 62 EC                         .db #$62, #%11101100
0D3D6 A2 CC                         .db #$A2, #%11001100
0D3D8 C3 CC                         .db #$C3, #%11001100
0D3DA 04 4C                         .db #$04, #%01001100
0D3DC 84 2C                         .db #$84, #%00101100
0D3DE 25 AC                         .db #$25, #%10101100
0D3E0 85 AC                         .db #$85, #%10101100
0D3E2 06 AC                         .db #$06, #%10101100
0D3E4 36 CC                         .db #$36, #%11001100
0D3E6 56 CC                         .db #$56, #%11001100
0D3E8 66 EC                         .db #$66, #%11101100
0D3EA 96 6C                         .db #$96, #%01101100
0D3EC C7 AC                         .db #$C7, #%10101100
0D3EE 08 2C                         .db #$08, #%00101100
0D3F0 78 6C                         .db #$78, #%01101100
0D3F2 D8 0C                         .db #$D8, #%00001100
0D3F4 30 A1                         .db #$30, #%10100001
0D3F6 B0 21                         .db #$B0, #%00100001
0D3F8 01 41                         .db #$01, #%01000001
0D3FA 41 61                         .db #$41, #%01100001
0D3FC 91 A1                         .db #$91, #%10100001
0D3FE A1 21                         .db #$A1, #%00100001
0D400 52 C1                         .db #$52, #%11000001
0D402 72 E1                         .db #$72, #%11100001
0D404 B2 C1                         .db #$B2, #%11000001
0D406 C2 21                         .db #$C2, #%00100001
0D408 03 41                         .db #$03, #%01000001
0D40A 33 C1                         .db #$33, #%11000001
0D40C 83 21                         .db #$83, #%00100001
0D40E D3 E1                         .db #$D3, #%11100001
0D410 05 21                         .db #$05, #%00100001
0D412 45 E1                         .db #$45, #%11100001
0D414 A5 21                         .db #$A5, #%00100001
0D416 16 A1                         .db #$16, #%10100001
0D418 76 A1                         .db #$76, #%10100001
0D41A 27 A1                         .db #$27, #%10100001
0D41C 57 21                         .db #$57, #%00100001
0D41E 87 41                         .db #$87, #%01000001
0D420 B7 A1                         .db #$B7, #%10100001
0D422 19 21                         .db #$19, #%00100001
0D424 39 41                         .db #$39, #%01000001
0D426 89 41                         .db #$89, #%01000001
0D428 C9 21                         .db #$C9, #%00100001
0D42A D0 1A                         .db #$D0, #%00011010
0D42C 55 1A                         .db #$55, #%00011010
0D42E 95 1A                         .db #$95, #%00011010
0D430 D7 1A                         .db #$D7, #%00011010
0D432 09 1A                         .db #$09, #%00011010
0D434 79 1A                         .db #$79, #%00011010
0D436 FF                            .db #LEVEL_END
0D437                           
0D437                           lvl_layout_05:
0D437 40 0A                         .db #$40, #%00001010
0D439 70 1A                         .db #$70, #%00011010
0D43B B0 42                         .db #$B0, #%01000010
0D43D 41 A7                         .db #$41, #%10100111
0D43F B1 22                         .db #$B1, #%00100010
0D441 D1 15                         .db #$D1, #%00010101
0D443 22 0A                         .db #$22, #%00001010
0D445 52 05                         .db #$52, #%00000101
0D447 B2 42                         .db #$B2, #%01000010
0D449 03 27                         .db #$03, #%00100111
0D44B 33 67                         .db #$33, #%01100111
0D44D 73 67                         .db #$73, #%01100111
0D44F B3 47                         .db #$B3, #%01000111
0D451 05 E5                         .db #$05, #%11100101
0D453 25 A5                         .db #$25, #%10100101
0D455 35 25                         .db #$35, #%00100101
0D457 65 45                         .db #$65, #%01000101
0D459 A5 45                         .db #$A5, #%01000101
0D45B 46 E5                         .db #$46, #%11100101
0D45D 66 E5                         .db #$66, #%11100101
0D45F 86 E5                         .db #$86, #%11100101
0D461 A6 E2                         .db #$A6, #%11100010
0D463 C6 E5                         .db #$C6, #%11100101
0D465 27 25                         .db #$27, #%00100101
0D467 77 05                         .db #$77, #%00000101
0D469 B7 02                         .db #$B7, #%00000010
0D46B 09 05                         .db #$09, #%00000101
0D46D 79 05                         .db #$79, #%00000101
0D46F B9 02                         .db #$B9, #%00000010
0D471 FF                            .db #LEVEL_END
0D472                           
0D472                           lvl_layout_06:
0D472 00 03                         .db #$00, #%00000011
0D474 20 03                         .db #$20, #%00000011
0D476 40 03                         .db #$40, #%00000011
0D478 A0 03                         .db #$A0, #%00000011
0D47A C0 03                         .db #$C0, #%00000011
0D47C 11 03                         .db #$11, #%00000011
0D47E 31 03                         .db #$31, #%00000011
0D480 51 03                         .db #$51, #%00000011
0D482 91 03                         .db #$91, #%00000011
0D484 B1 03                         .db #$B1, #%00000011
0D486 D1 03                         .db #$D1, #%00000011
0D488 02 03                         .db #$02, #%00000011
0D48A 22 03                         .db #$22, #%00000011
0D48C 42 03                         .db #$42, #%00000011
0D48E A2 03                         .db #$A2, #%00000011
0D490 C2 03                         .db #$C2, #%00000011
0D492 13 03                         .db #$13, #%00000011
0D494 33 03                         .db #$33, #%00000011
0D496 53 03                         .db #$53, #%00000011
0D498 93 03                         .db #$93, #%00000011
0D49A B3 03                         .db #$B3, #%00000011
0D49C D3 03                         .db #$D3, #%00000011
0D49E 04 03                         .db #$04, #%00000011
0D4A0 24 03                         .db #$24, #%00000011
0D4A2 44 03                         .db #$44, #%00000011
0D4A4 A4 03                         .db #$A4, #%00000011
0D4A6 C4 03                         .db #$C4, #%00000011
0D4A8 15 03                         .db #$15, #%00000011
0D4AA 35 03                         .db #$35, #%00000011
0D4AC 55 03                         .db #$55, #%00000011
0D4AE 95 03                         .db #$95, #%00000011
0D4B0 B5 03                         .db #$B5, #%00000011
0D4B2 D5 03                         .db #$D5, #%00000011
0D4B4 06 03                         .db #$06, #%00000011
0D4B6 26 03                         .db #$26, #%00000011
0D4B8 46 03                         .db #$46, #%00000011
0D4BA A6 03                         .db #$A6, #%00000011
0D4BC C6 03                         .db #$C6, #%00000011
0D4BE 17 03                         .db #$17, #%00000011
0D4C0 37 03                         .db #$37, #%00000011
0D4C2 57 03                         .db #$57, #%00000011
0D4C4 97 03                         .db #$97, #%00000011
0D4C6 B7 03                         .db #$B7, #%00000011
0D4C8 D7 03                         .db #$D7, #%00000011
0D4CA 08 03                         .db #$08, #%00000011
0D4CC 28 03                         .db #$28, #%00000011
0D4CE 48 03                         .db #$48, #%00000011
0D4D0 A8 03                         .db #$A8, #%00000011
0D4D2 C8 03                         .db #$C8, #%00000011
0D4D4 19 03                         .db #$19, #%00000011
0D4D6 39 03                         .db #$39, #%00000011
0D4D8 59 03                         .db #$59, #%00000011
0D4DA 99 03                         .db #$99, #%00000011
0D4DC B9 03                         .db #$B9, #%00000011
0D4DE D9 03                         .db #$D9, #%00000011
0D4E0 60 4B                         .db #$60, #%01001011
0D4E2 71 CB                         .db #$71, #%11001011
0D4E4 62 4B                         .db #$62, #%01001011
0D4E6 64 4B                         .db #$64, #%01001011
0D4E8 75 CB                         .db #$75, #%11001011
0D4EA 66 4B                         .db #$66, #%01001011
0D4EC 68 4B                         .db #$68, #%01001011
0D4EE 79 0B                         .db #$79, #%00001011
0D4F0 70 03                         .db #$70, #%00000011
0D4F2 72 03                         .db #$72, #%00000011
0D4F4 74 03                         .db #$74, #%00000011
0D4F6 76 03                         .db #$76, #%00000011
0D4F8 78 03                         .db #$78, #%00000011
0D4FA FF                            .db #LEVEL_END
0D4FB                           
0D4FB                           lvl_layout_07:
0D4FB 00 11                         .db #$00, #%00010001
0D4FD 01 FA                         .db #$01, #%11111010
0D4FF 12 BA                         .db #$12, #%10111010
0D501 23 DA                         .db #$23, #%11011010
0D503 34 FA                         .db #$34, #%11111010
0D505 05 DA                         .db #$05, #%11011010
0D507 15 FA                         .db #$15, #%11111010
0D509 45 BA                         .db #$45, #%10111010
0D50B 56 DA                         .db #$56, #%11011010
0D50D 27 BA                         .db #$27, #%10111010
0D50F 67 DA                         .db #$67, #%11011010
0D511 38 3A                         .db #$38, #%00111010
0D513 78 BA                         .db #$78, #%10111010
0D515 09 3A                         .db #$09, #%00111010
0D517 39 3A                         .db #$39, #%00111010
0D519 89 1A                         .db #$89, #%00011010
0D51B B0 01                         .db #$B0, #%00000001
0D51D D0 01                         .db #$D0, #%00000001
0D51F A1 01                         .db #$A1, #%00000001
0D521 C1 11                         .db #$C1, #%00010001
0D523 B2 01                         .db #$B2, #%00000001
0D525 D2 01                         .db #$D2, #%00000001
0D527 A3 01                         .db #$A3, #%00000001
0D529 C3 01                         .db #$C3, #%00000001
0D52B B4 01                         .db #$B4, #%00000001
0D52D D4 01                         .db #$D4, #%00000001
0D52F A5 01                         .db #$A5, #%00000001
0D531 C5 01                         .db #$C5, #%00000001
0D533 B6 01                         .db #$B6, #%00000001
0D535 D6 01                         .db #$D6, #%00000001
0D537 A7 01                         .db #$A7, #%00000001
0D539 C7 01                         .db #$C7, #%00000001
0D53B FF                            .db #LEVEL_END
0D53C                           
0D53C                           lvl_layout_08:
0D53C 40 B5                         .db #$40, #%10110101
0D53E 31 0D                         .db #$31, #%00001101
0D540 61 10                         .db #$61, #%00010000
0D542 42 C7                         .db #$42, #%11000111
0D544 52 67                         .db #$52, #%01100111
0D546 63 C7                         .db #$63, #%11000111
0D548 83 E7                         .db #$83, #%11100111
0D54A 05 07                         .db #$05, #%00000111
0D54C 15 3A                         .db #$15, #%00111010
0D54E 07 63                         .db #$07, #%01100011
0D550 27 13                         .db #$27, #%00010011
0D552 38 A5                         .db #$38, #%10100101
0D554 09 14                         .db #$09, #%00010100
0D556 19 05                         .db #$19, #%00000101
0D558 D0 E0                         .db #$D0, #%11100000
0D55A C2 A0                         .db #$C2, #%10100000
0D55C B3 E0                         .db #$B3, #%11100000
0D55E D5 E0                         .db #$D5, #%11100000
0D560 C6 E0                         .db #$C6, #%11100000
0D562 B0 C4                         .db #$B0, #%11000100
0D564 C0 A4                         .db #$C0, #%10100100
0D566 D1 A4                         .db #$D1, #%10100100
0D568 C4 24                         .db #$C4, #%00100100
0D56A C5 04                         .db #$C5, #%00000100
0D56C B7 44                         .db #$B7, #%01000100
0D56E B8 A4                         .db #$B8, #%10100100
0D570 D9 05                         .db #$D9, #%00000101
0D572 FF                            .db #LEVEL_END
0D573                           
0D573                           lvl_layout_09:
0D573 81 04                         .db #$81, #%00000100
0D575 D1 04                         .db #$D1, #%00000100
0D577 32 C4                         .db #$32, #%11000100
0D579 A2 C4                         .db #$A2, #%11000100
0D57B C2 24                         .db #$C2, #%00100100
0D57D 13 24                         .db #$13, #%00100100
0D57F 53 04                         .db #$53, #%00000100
0D581 C3 27                         .db #$C3, #%00100111
0D583 15 6C                         .db #$15, #%01101100
0D585 55 6C                         .db #$55, #%01101100
0D587 95 6C                         .db #$95, #%01101100
0D589 D5 0C                         .db #$D5, #%00001100
0D58B 27 C7                         .db #$27, #%11000111
0D58D 47 C7                         .db #$47, #%11000111
0D58F 67 C7                         .db #$67, #%11000111
0D591 87 C7                         .db #$87, #%11000111
0D593 A7 C7                         .db #$A7, #%11000111
0D595 C7 C7                         .db #$C7, #%11000111
0D597 08 13                         .db #$08, #%00010011
0D599 28 15                         .db #$28, #%00010101
0D59B 48 12                         .db #$48, #%00010010
0D59D 68 15                         .db #$68, #%00010101
0D59F 88 11                         .db #$88, #%00010001
0D5A1 A8 10                         .db #$A8, #%00010000
0D5A3 C8 14                         .db #$C8, #%00010100
0D5A5 09 07                         .db #$09, #%00000111
0D5A7 19 03                         .db #$19, #%00000011
0D5A9 39 05                         .db #$39, #%00000101
0D5AB 59 02                         .db #$59, #%00000010
0D5AD 79 05                         .db #$79, #%00000101
0D5AF 99 01                         .db #$99, #%00000001
0D5B1 B9 00                         .db #$B9, #%00000000
0D5B3 D9 04                         .db #$D9, #%00000100
0D5B5 FF                            .db #LEVEL_END
0D5B6                           
0D5B6                           lvl_layout_10:
0D5B6 00 02                         .db #$00, #%00000010
0D5B8 10 C9                         .db #$10, #%11001001
0D5BA 50 C9                         .db #$50, #%11001001
0D5BC 90 C9                         .db #$90, #%11001001
0D5BE D0 C9                         .db #$D0, #%11001001
0D5C0 31 C9                         .db #$31, #%11001001
0D5C2 71 C9                         .db #$71, #%11001001
0D5C4 B1 C9                         .db #$B1, #%11001001
0D5C6 13 C9                         .db #$13, #%11001001
0D5C8 53 C9                         .db #$53, #%11001001
0D5CA 93 C9                         .db #$93, #%11001001
0D5CC D3 C9                         .db #$D3, #%11001001
0D5CE 34 C9                         .db #$34, #%11001001
0D5D0 74 C9                         .db #$74, #%11001001
0D5D2 B4 C9                         .db #$B4, #%11001001
0D5D4 16 C9                         .db #$16, #%11001001
0D5D6 56 C9                         .db #$56, #%11001001
0D5D8 96 C9                         .db #$96, #%11001001
0D5DA D6 C9                         .db #$D6, #%11001001
0D5DC 37 C9                         .db #$37, #%11001001
0D5DE 77 C9                         .db #$77, #%11001001
0D5E0 B7 C9                         .db #$B7, #%11001001
0D5E2 D8 12                         .db #$D8, #%00010010
0D5E4 FF                            .db #LEVEL_END
0D5E5                           
0D5E5                           lvl_layout_11:
0D5E5 00 65                         .db #$00, #%01100101
0D5E7 40 45                         .db #$40, #%01000101
0D5E9 50 A7                         .db #$50, #%10100111
0D5EB 80 05                         .db #$80, #%00000101
0D5ED 90 A7                         .db #$90, #%10100111
0D5EF A0 65                         .db #$A0, #%01100101
0D5F1 01 43                         .db #$01, #%01000011
0D5F3 31 23                         .db #$31, #%00100011
0D5F5 61 A7                         .db #$61, #%10100111
0D5F7 81 A7                         .db #$81, #%10100111
0D5F9 A1 63                         .db #$A1, #%01100011
0D5FB 02 44                         .db #$02, #%01000100
0D5FD 32 44                         .db #$32, #%01000100
0D5FF 92 04                         .db #$92, #%00000100
0D601 A2 64                         .db #$A2, #%01100100
0D603 03 40                         .db #$03, #%01000000
0D605 33 40                         .db #$33, #%01000000
0D607 64 81                         .db #$64, #%10000001
0D609 84 82                         .db #$84, #%10000010
0D60B 93 00                         .db #$93, #%00000000
0D60D A3 60                         .db #$A3, #%01100000
0D60F 04 41                         .db #$04, #%01000001
0D611 34 41                         .db #$34, #%01000001
0D613 94 02                         .db #$94, #%00000010
0D615 A4 62                         .db #$A4, #%01100010
0D617 05 47                         .db #$05, #%01000111
0D619 35 67                         .db #$35, #%01100111
0D61B 75 0A                         .db #$75, #%00001010
0D61D 85 47                         .db #$85, #%01000111
0D61F B5 47                         .db #$B5, #%01000111
0D621 06 E7                         .db #$06, #%11100111
0D623 16 5A                         .db #$16, #%01011010
0D625 26 11                         .db #$26, #%00010001
0D627 46 13                         .db #$46, #%00010011
0D629 56 1A                         .db #$56, #%00011010
0D62B 66 14                         .db #$66, #%00010100
0D62D 86 10                         .db #$86, #%00010000
0D62F 96 5A                         .db #$96, #%01011010
0D631 A6 12                         .db #$A6, #%00010010
0D633 C6 15                         .db #$C6, #%00010101
0D635 D6 E7                         .db #$D6, #%11100111
0D637 FF                            .db #LEVEL_END
0D638                           
0D638                           lvl_layout_12:
0D638 00 00                         .db #$00, #%00000000
0D63A 50 C0                         .db #$50, #%11000000
0D63C 80 00                         .db #$80, #%00000000
0D63E 61 00                         .db #$61, #%00000000
0D640 22 C0                         .db #$22, #%11000000
0D642 82 E0                         .db #$82, #%11100000
0D644 C2 E0                         .db #$C2, #%11100000
0D646 A3 20                         .db #$A3, #%00100000
0D648 C3 10                         .db #$C3, #%00010000
0D64A 04 00                         .db #$04, #%00000000
0D64C 54 20                         .db #$54, #%00100000
0D64E 15 0A                         .db #$15, #%00001010
0D650 25 C0                         .db #$25, #%11000000
0D652 55 E0                         .db #$55, #%11100000
0D654 86 20                         .db #$86, #%00100000
0D656 C6 E0                         .db #$C6, #%11100000
0D658 C7 A0                         .db #$C7, #%10100000
0D65A 88 00                         .db #$88, #%00000000
0D65C 59 00                         .db #$59, #%00000000
0D65E 89 20                         .db #$89, #%00100000
0D660 D9 1A                         .db #$D9, #%00011010
0D662 FF                            .db #LEVEL_END
0D663                           
0D663                           lvl_layout_13:
0D663 10 E0                         .db #$10, #%11100000
0D665 20 E0                         .db #$20, #%11100000
0D667 30 E0                         .db #$30, #%11100000
0D669 40 40                         .db #$40, #%01000000
0D66B 80 60                         .db #$80, #%01100000
0D66D C0 E0                         .db #$C0, #%11100000
0D66F D0 E0                         .db #$D0, #%11100000
0D671 41 40                         .db #$41, #%01000000
0D673 71 60                         .db #$71, #%01100000
0D675 52 60                         .db #$52, #%01100000
0D677 A2 20                         .db #$A2, #%00100000
0D679 43 60                         .db #$43, #%01100000
0D67B 83 60                         .db #$83, #%01100000
0D67D 14 74                         .db #$14, #%01110100
0D67F 54 74                         .db #$54, #%01110100
0D681 94 74                         .db #$94, #%01110100
0D683 D4 14                         .db #$D4, #%00010100
0D685 15 0D                         .db #$15, #%00001101
0D687 55 0D                         .db #$55, #%00001101
0D689 95 0D                         .db #$95, #%00001101
0D68B D5 0D                         .db #$D5, #%00001101
0D68D 26 0D                         .db #$26, #%00001101
0D68F 46 0D                         .db #$46, #%00001101
0D691 66 0D                         .db #$66, #%00001101
0D693 86 0D                         .db #$86, #%00001101
0D695 A6 0D                         .db #$A6, #%00001101
0D697 C6 0D                         .db #$C6, #%00001101
0D699 07 10                         .db #$07, #%00010000
0D69B 37 0D                         .db #$37, #%00001101
0D69D 77 0D                         .db #$77, #%00001101
0D69F B7 0D                         .db #$B7, #%00001101
0D6A1 28 0D                         .db #$28, #%00001101
0D6A3 48 0D                         .db #$48, #%00001101
0D6A5 68 0D                         .db #$68, #%00001101
0D6A7 88 0D                         .db #$88, #%00001101
0D6A9 A8 0D                         .db #$A8, #%00001101
0D6AB C8 0D                         .db #$C8, #%00001101
0D6AD 19 0D                         .db #$19, #%00001101
0D6AF 59 0D                         .db #$59, #%00001101
0D6B1 99 0D                         .db #$99, #%00001101
0D6B3 D9 0D                         .db #$D9, #%00001101
0D6B5 FF                            .db #LEVEL_END
0D6B6                           
0D6B6                           lvl_layout_14:
0D6B6 00 67                         .db #$00, #%01100111
0D6B8 40 67                         .db #$40, #%01100111
0D6BA 80 67                         .db #$80, #%01100111
0D6BC C0 27                         .db #$C0, #%00100111
0D6BE 01 27                         .db #$01, #%00100111
0D6C0 31 C7                         .db #$31, #%11000111
0D6C2 51 C7                         .db #$51, #%11000111
0D6C4 71 C7                         .db #$71, #%11000111
0D6C6 91 C7                         .db #$91, #%11000111
0D6C8 B1 C7                         .db #$B1, #%11000111
0D6CA D1 07                         .db #$D1, #%00000111
0D6CC 02 E7                         .db #$02, #%11100111
0D6CE 06 E7                         .db #$06, #%11100111
0D6D0 13 07                         .db #$13, #%00000111
0D6D2 D3 07                         .db #$D3, #%00000111
0D6D4 15 07                         .db #$15, #%00000111
0D6D6 35 07                         .db #$35, #%00000111
0D6D8 55 07                         .db #$55, #%00000111
0D6DA 75 07                         .db #$75, #%00000111
0D6DC 95 07                         .db #$95, #%00000111
0D6DE B5 07                         .db #$B5, #%00000111
0D6E0 D5 07                         .db #$D5, #%00000111
0D6E2 17 07                         .db #$17, #%00000111
0D6E4 37 C7                         .db #$37, #%11000111
0D6E6 57 C7                         .db #$57, #%11000111
0D6E8 77 C7                         .db #$77, #%11000111
0D6EA 97 C7                         .db #$97, #%11000111
0D6EC B7 C7                         .db #$B7, #%11000111
0D6EE D7 07                         .db #$D7, #%00000111
0D6F0 19 07                         .db #$19, #%00000111
0D6F2 D9 07                         .db #$D9, #%00000111
0D6F4 22 4C                         .db #$22, #%01001100
0D6F6 62 4C                         .db #$62, #%01001100
0D6F8 A2 4C                         .db #$A2, #%01001100
0D6FA 24 0C                         .db #$24, #%00001100
0D6FC 44 0C                         .db #$44, #%00001100
0D6FE 64 0C                         .db #$64, #%00001100
0D700 84 0C                         .db #$84, #%00001100
0D702 A4 0C                         .db #$A4, #%00001100
0D704 C4 0C                         .db #$C4, #%00001100
0D706 26 0C                         .db #$26, #%00001100
0D708 46 0C                         .db #$46, #%00001100
0D70A 66 0C                         .db #$66, #%00001100
0D70C 86 0C                         .db #$86, #%00001100
0D70E A6 0C                         .db #$A6, #%00001100
0D710 C6 0C                         .db #$C6, #%00001100
0D712 28 4C                         .db #$28, #%01001100
0D714 68 4C                         .db #$68, #%01001100
0D716 A8 4C                         .db #$A8, #%01001100
0D718 32 04                         .db #$32, #%00000100
0D71A 52 04                         .db #$52, #%00000100
0D71C 72 04                         .db #$72, #%00000100
0D71E 92 04                         .db #$92, #%00000100
0D720 B2 04                         .db #$B2, #%00000100
0D722 38 04                         .db #$38, #%00000100
0D724 58 04                         .db #$58, #%00000100
0D726 78 04                         .db #$78, #%00000100
0D728 98 04                         .db #$98, #%00000100
0D72A B8 04                         .db #$B8, #%00000100
0D72C FF                            .db #LEVEL_END
0D72D                           
0D72D                           lvl_layout_15:
0D72D 00 7A                         .db #$00, #%01111010
0D72F 40 7A                         .db #$40, #%01111010
0D731 80 7A                         .db #$80, #%01111010
0D733 C0 3A                         .db #$C0, #%00111010
0D735 61 64                         .db #$61, #%01100100
0D737 05 E4                         .db #$05, #%11100100
0D739 15 64                         .db #$15, #%01100100
0D73B 55 64                         .db #$55, #%01100100
0D73D 95 64                         .db #$95, #%01100100
0D73F D5 E4                         .db #$D5, #%11100100
0D741 26 04                         .db #$26, #%00000100
0D743 46 44                         .db #$46, #%01000100
0D745 76 64                         .db #$76, #%01100100
0D747 C6 04                         .db #$C6, #%00000100
0D749 17 04                         .db #$17, #%00000100
0D74B 37 64                         .db #$37, #%01100100
0D74D 77 44                         .db #$77, #%01000100
0D74F B7 04                         .db #$B7, #%00000100
0D751 18 64                         .db #$18, #%01100100
0D753 58 64                         .db #$58, #%01100100
0D755 98 64                         .db #$98, #%01100100
0D757 FF                            .db #LEVEL_END
0D758                           
0D758                           lvl_layout_16:
0D758 10 E1                         .db #$10, #%11100001
0D75A 20 9A                         .db #$20, #%10011010
0D75C 30 E1                         .db #$30, #%11100001
0D75E 40 E1                         .db #$40, #%11100001
0D760 50 E1                         .db #$50, #%11100001
0D762 60 C1                         .db #$60, #%11000001
0D764 70 E1                         .db #$70, #%11100001
0D766 80 E1                         .db #$80, #%11100001
0D768 90 E1                         .db #$90, #%11100001
0D76A A0 61                         .db #$A0, #%01100001
0D76C 21 C1                         .db #$21, #%11000001
0D76E A1 1A                         .db #$A1, #%00011010
0D770 B1 41                         .db #$B1, #%01000001
0D772 A2 E1                         .db #$A2, #%11100001
0D774 B2 E1                         .db #$B2, #%11100001
0D776 C2 1A                         .db #$C2, #%00011010
0D778 D2 E1                         .db #$D2, #%11100001
0D77A 63 1A                         .db #$63, #%00011010
0D77C C3 C1                         .db #$C3, #%11000001
0D77E 14 61                         .db #$14, #%01100001
0D780 54 61                         .db #$54, #%01100001
0D782 94 C1                         .db #$94, #%11000001
0D784 15 61                         .db #$15, #%01100001
0D786 55 41                         .db #$55, #%01000001
0D788 85 1A                         .db #$85, #%00011010
0D78A 16 41                         .db #$16, #%01000001
0D78C 46 1A                         .db #$46, #%00011010
0D78E 56 61                         .db #$56, #%01100001
0D790 A6 61                         .db #$A6, #%01100001
0D792 17 67                         .db #$17, #%01100111
0D794 57 67                         .db #$57, #%01100111
0D796 97 67                         .db #$97, #%01100111
0D798 D7 07                         .db #$D7, #%00000111
0D79A 28 41                         .db #$28, #%01000001
0D79C 58 61                         .db #$58, #%01100001
0D79E A8 41                         .db #$A8, #%01000001
0D7A0 18 11                         .db #$18, #%00010001
0D7A2 38 11                         .db #$38, #%00010001
0D7A4 98 11                         .db #$98, #%00010001
0D7A6 B8 11                         .db #$B8, #%00010001
0D7A8 D8 11                         .db #$D8, #%00010001
0D7AA 59 09                         .db #$59, #%00001001
0D7AC FF                            .db #LEVEL_END
0D7AD                           
0D7AD                           lvl_layout_17:
0D7AD 10 EA                         .db #$10, #%11101010
0D7AF 20 E2                         .db #$20, #%11100010
0D7B1 30 62                         .db #$30, #%01100010
0D7B3 70 02                         .db #$70, #%00000010
0D7B5 80 6A                         .db #$80, #%01101010
0D7B7 90 22                         .db #$90, #%00100010
0D7B9 01 AA                         .db #$01, #%10101010
0D7BB 31 6A                         .db #$31, #%01101010
0D7BD 81 2A                         .db #$81, #%00101010
0D7BF A1 02                         .db #$A1, #%00000010
0D7C1 C1 02                         .db #$C1, #%00000010
0D7C3 D1 0A                         .db #$D1, #%00001010
0D7C5 32 EA                         .db #$32, #%11101010
0D7C7 42 6A                         .db #$42, #%01101010
0D7C9 62 02                         .db #$62, #%00000010
0D7CB 92 6A                         .db #$92, #%01101010
0D7CD D2 E2                         .db #$D2, #%11100010
0D7CF 43 1A                         .db #$43, #%00011010
0D7D1 53 CA                         .db #$53, #%11001010
0D7D3 73 02                         .db #$73, #%00000010
0D7D5 83 4A                         .db #$83, #%01001010
0D7D7 B3 CA                         .db #$B3, #%11001010
0D7D9 C3 EA                         .db #$C3, #%11101010
0D7DB 04 0A                         .db #$04, #%00001010
0D7DD 14 A2                         .db #$14, #%10100010
0D7DF 24 AA                         .db #$24, #%10101010
0D7E1 44 AA                         .db #$44, #%10101010
0D7E3 64 6A                         .db #$64, #%01101010
0D7E5 65 6A                         .db #$65, #%01101010
0D7E7 A5 AA                         .db #$A5, #%10101010
0D7E9 06 EA                         .db #$06, #%11101010
0D7EB 16 62                         .db #$16, #%01100010
0D7ED 56 42                         .db #$56, #%01000010
0D7EF 86 2A                         .db #$86, #%00101010
0D7F1 17 42                         .db #$17, #%01000010
0D7F3 47 12                         .db #$47, #%00010010
0D7F5 57 6A                         .db #$57, #%01101010
0D7F7 97 4A                         .db #$97, #%01001010
0D7F9 A7 02                         .db #$A7, #%00000010
0D7FB 18 02                         .db #$18, #%00000010
0D7FD 28 0A                         .db #$28, #%00001010
0D7FF 38 22                         .db #$38, #%00100010
0D801 68 2A                         .db #$68, #%00101010
0D803 88 62                         .db #$88, #%01100010
0D805 C8 0A                         .db #$C8, #%00001010
0D807 D8 02                         .db #$D8, #%00000010
0D809 19 2A                         .db #$19, #%00101010
0D80B 39 2A                         .db #$39, #%00101010
0D80D 69 42                         .db #$69, #%01000010
0D80F 99 2A                         .db #$99, #%00101010
0D811 B9 42                         .db #$B9, #%01000010
0D813 FF                            .db #LEVEL_END
0D814                           
0D814                           lvl_layout_18:
0D814 00 12                         .db #$00, #%00010010
0D816 40 1A                         .db #$40, #%00011010
0D818 50 11                         .db #$50, #%00010001
0D81A 70 1A                         .db #$70, #%00011010
0D81C 80 10                         .db #$80, #%00010000
0D81E D0 13                         .db #$D0, #%00010011
0D820 01 1A                         .db #$01, #%00011010
0D822 22 15                         .db #$22, #%00010101
0D824 A2 1A                         .db #$A2, #%00011010
0D826 B2 14                         .db #$B2, #%00010100
0D828 03 67                         .db #$03, #%01100111
0D82A 43 67                         .db #$43, #%01100111
0D82C 83 67                         .db #$83, #%01100111
0D82E 24 09                         .db #$24, #%00001001
0D830 74 0D                         .db #$74, #%00001101
0D832 C4 0A                         .db #$C4, #%00001010
0D834 05 A7                         .db #$05, #%10100111
0D836 45 27                         .db #$45, #%00100111
0D838 95 27                         .db #$95, #%00100111
0D83A 16 C7                         .db #$16, #%11000111
0D83C 36 67                         .db #$36, #%01100111
0D83E 86 67                         .db #$86, #%01100111
0D840 D6 07                         .db #$D6, #%00000111
0D842 07 A3                         .db #$07, #%10100011
0D844 27 23                         .db #$27, #%00100011
0D846 47 C7                         .db #$47, #%11000111
0D848 57 A0                         .db #$57, #%10100000
0D84A 67 A7                         .db #$67, #%10100111
0D84C 77 20                         .db #$77, #%00100000
0D84E 97 C7                         .db #$97, #%11000111
0D850 A7 A4                         .db #$A7, #%10100100
0D852 B7 A7                         .db #$B7, #%10100111
0D854 C7 24                         .db #$C7, #%00100100
0D856 28 0B                         .db #$28, #%00001011
0D858 38 A3                         .db #$38, #%10100011
0D85A 78 08                         .db #$78, #%00001000
0D85C 88 A0                         .db #$88, #%10100000
0D85E C8 0C                         .db #$C8, #%00001100
0D860 D8 A4                         .db #$D8, #%10100100
0D862 09 43                         .db #$09, #%01000011
0D864 59 40                         .db #$59, #%01000000
0D866 A9 44                         .db #$A9, #%01000100
0D868 FF                            .db #LEVEL_END
0D869                           
0D869                           lvl_layout_19:
0D869 11 A8                         .db #$11, #%10101000
0D86B 21 68                         .db #$21, #%01101000
0D86D 81 28                         .db #$81, #%00101000
0D86F B1 48                         .db #$B1, #%01001000
0D871 22 48                         .db #$22, #%01001000
0D873 62 68                         .db #$62, #%01101000
0D875 B2 28                         .db #$B2, #%00101000
0D877 23 28                         .db #$23, #%00101000
0D879 83 28                         .db #$83, #%00101000
0D87B B3 28                         .db #$B3, #%00101000
0D87D 04 E8                         .db #$04, #%11101000
0D87F 24 08                         .db #$24, #%00001000
0D881 44 08                         .db #$44, #%00001000
0D883 64 E8                         .db #$64, #%11101000
0D885 84 E8                         .db #$84, #%11101000
0D887 C4 A8                         .db #$C4, #%10101000
0D889 D4 E8                         .db #$D4, #%11101000
0D88B 15 48                         .db #$15, #%01001000
0D88D 55 C8                         .db #$55, #%11001000
0D88F 75 C8                         .db #$75, #%11001000
0D891 A5 08                         .db #$A5, #%00001000
0D893 36 08                         .db #$36, #%00001000
0D895 B6 08                         .db #$B6, #%00001000
0D897 27 48                         .db #$27, #%01001000
0D899 97 28                         .db #$97, #%00101000
0D89B C7 08                         .db #$C7, #%00001000
0D89D 09 61                         .db #$09, #%01100001
0D89F 19 11                         .db #$19, #%00010001
0D8A1 49 61                         .db #$49, #%01100001
0D8A3 89 31                         .db #$89, #%00110001
0D8A5 A9 61                         .db #$A9, #%01100001
0D8A7 FF                            .db #LEVEL_END
0D8A8                           
0D8A8                           lvl_layout_20:
0D8A8 00 60                         .db #$00, #%01100000
0D8AA 10 1A                         .db #$10, #%00011010
0D8AC 40 A7                         .db #$40, #%10100111
0D8AE 50 20                         .db #$50, #%00100000
0D8B0 70 1A                         .db #$70, #%00011010
0D8B2 80 40                         .db #$80, #%01000000
0D8B4 B0 1A                         .db #$B0, #%00011010
0D8B6 C0 20                         .db #$C0, #%00100000
0D8B8 01 40                         .db #$01, #%01000000
0D8BA 31 1A                         .db #$31, #%00011010
0D8BC A1 40                         .db #$A1, #%01000000
0D8BE D1 1A                         .db #$D1, #%00011010
0D8C0 43 67                         .db #$43, #%01100111
0D8C2 83 47                         .db #$83, #%01000111
0D8C4 44 A7                         .db #$44, #%10100111
0D8C6 54 25                         .db #$54, #%00100101
0D8C8 94 08                         .db #$94, #%00001000
0D8CA A4 A7                         .db #$A4, #%10100111
0D8CC 55 05                         .db #$55, #%00000101
0D8CE 65 08                         .db #$65, #%00001000
0D8D0 06 27                         .db #$06, #%00100111
0D8D2 36 67                         .db #$36, #%01100111
0D8D4 76 28                         .db #$76, #%00101000
0D8D6 A6 27                         .db #$A6, #%00100111
0D8D8 D6 07                         .db #$D6, #%00000111
0D8DA A7 A7                         .db #$A7, #%10100111
0D8DC 08 60                         .db #$08, #%01100000
0D8DE 09 60                         .db #$09, #%01100000
0D8E0 18 A7                         .db #$18, #%10100111
0D8E2 48 A7                         .db #$48, #%10100111
0D8E4 58 47                         .db #$58, #%01000111
0D8E6 88 27                         .db #$88, #%00100111
0D8E8 B8 20                         .db #$B8, #%00100000
0D8EA D8 1A                         .db #$D8, #%00011010
0D8EC 59 15                         .db #$59, #%00010101
0D8EE 69 60                         .db #$69, #%01100000
0D8F0 A9 60                         .db #$A9, #%01100000
0D8F2 FF                            .db #LEVEL_END
0D8F3                           
0D8F3                           lvl_layout_21:
0D8F3 00 13                         .db #$00, #%00010011
0D8F5 10 11                         .db #$10, #%00010001
0D8F7 20 67                         .db #$20, #%01100111
0D8F9 60 67                         .db #$60, #%01100111
0D8FB A0 47                         .db #$A0, #%01000111
0D8FD D0 15                         .db #$D0, #%00010101
0D8FF 32 63                         .db #$32, #%01100011
0D901 72 05                         .db #$72, #%00000101
0D903 82 43                         .db #$82, #%01000011
0D905 B2 43                         .db #$B2, #%01000011
0D907 33 03                         .db #$33, #%00000011
0D909 43 2A                         .db #$43, #%00101010
0D90B 63 7A                         .db #$63, #%01111010
0D90D 73 2A                         .db #$73, #%00101010
0D90F A3 7A                         .db #$A3, #%01111010
0D911 34 63                         .db #$34, #%01100011
0D913 74 63                         .db #$74, #%01100011
0D915 B4 43                         .db #$B4, #%01000011
0D917 06 63                         .db #$06, #%01100011
0D919 46 63                         .db #$46, #%01100011
0D91B 86 63                         .db #$86, #%01100011
0D91D C6 C3                         .db #$C6, #%11000011
0D91F 07 7A                         .db #$07, #%01111010
0D921 47 7A                         .db #$47, #%01111010
0D923 67 0A                         .db #$67, #%00001010
0D925 87 7A                         .db #$87, #%01111010
0D927 08 13                         .db #$08, #%00010011
0D929 18 43                         .db #$18, #%01000011
0D92B 48 63                         .db #$48, #%01100011
0D92D 88 63                         .db #$88, #%01100011
0D92F FF                            .db #LEVEL_END
0D930                           
0D930                           lvl_layout_22:
0D930 00 7A                         .db #$00, #%01111010
0D932 40 7A                         .db #$40, #%01111010
0D934 80 7A                         .db #$80, #%01111010
0D936 C0 3A                         .db #$C0, #%00111010
0D938 13 67                         .db #$13, #%01100111
0D93A 83 A7                         .db #$83, #%10100111
0D93C B3 07                         .db #$B3, #%00000111
0D93E 14 07                         .db #$14, #%00000111
0D940 44 07                         .db #$44, #%00000111
0D942 A4 07                         .db #$A4, #%00000111
0D944 15 A5                         .db #$15, #%10100101
0D946 45 A5                         .db #$45, #%10100101
0D948 85 25                         .db #$85, #%00100101
0D94A 86 05                         .db #$86, #%00000101
0D94C A6 05                         .db #$A6, #%00000101
0D94E 17 11                         .db #$17, #%00010001
0D950 47 A1                         .db #$47, #%10100001
0D952 87 A1                         .db #$87, #%10100001
0D954 B7 A1                         .db #$B7, #%10100001
0D956 18 41                         .db #$18, #%01000001
0D958 68 01                         .db #$68, #%00000001
0D95A D8 01                         .db #$D8, #%00000001
0D95C FF                            .db #LEVEL_END
0D95D                           
0D95D                           lvl_layout_23:
0D95D 00 71                         .db #$00, #%01110001
0D95F 40 11                         .db #$40, #%00010001
0D961 50 43                         .db #$50, #%01000011
0D963 80 D1                         .db #$80, #%11010001
0D965 90 E3                         .db #$90, #%11100011
0D967 A0 63                         .db #$A0, #%01100011
0D969 01 63                         .db #$01, #%01100011
0D96B 41 63                         .db #$41, #%01100011
0D96D A1 63                         .db #$A1, #%01100011
0D96F 02 63                         .db #$02, #%01100011
0D971 42 63                         .db #$42, #%01100011
0D973 62 11                         .db #$62, #%00010001
0D975 A2 67                         .db #$A2, #%01100111
0D977 04 63                         .db #$04, #%01100011
0D979 44 23                         .db #$44, #%00100011
0D97B 64 D1                         .db #$64, #%11010001
0D97D 74 E3                         .db #$74, #%11100011
0D97F 84 F1                         .db #$84, #%11110001
0D981 94 E3                         .db #$94, #%11100011
0D983 A4 C7                         .db #$A4, #%11000111
0D985 B4 23                         .db #$B4, #%00100011
0D987 05 63                         .db #$05, #%01100011
0D989 45 23                         .db #$45, #%00100011
0D98B 06 71                         .db #$06, #%01110001
0D98D 46 11                         .db #$46, #%00010001
0D98F 56 E3                         .db #$56, #%11100011
0D991 D6 07                         .db #$D6, #%00000111
0D993 17 D1                         .db #$17, #%11010001
0D995 27 43                         .db #$27, #%01000011
0D997 67 D1                         .db #$67, #%11010001
0D999 A7 C7                         .db #$A7, #%11000111
0D99B C7 A7                         .db #$C7, #%10100111
0D99D D7 B3                         .db #$D7, #%10110011
0D99F 28 43                         .db #$28, #%01000011
0D9A1 78 43                         .db #$78, #%01000011
0D9A3 29 43                         .db #$29, #%01000011
0D9A5 79 43                         .db #$79, #%01000011
0D9A7 FF                           .db #LEVEL_END
0D9A8                           
0D9A8                           lvl_layout_24:
0D9A8 02 67                         .db #$02, #%01100111
0D9AA 42 67                         .db #$42, #%01100111
0D9AC 82 67                         .db #$82, #%01100111
0D9AE 05 67                         .db #$05, #%01100111
0D9B0 45 67                         .db #$45, #%01100111
0D9B2 85 67                         .db #$85, #%01100111
0D9B4 08 67                         .db #$08, #%01100111
0D9B6 48 67                         .db #$48, #%01100111
0D9B8 88 67                         .db #$88, #%01100111
0D9BA 30 E7                         .db #$30, #%11100111
0D9BC 70 E7                         .db #$70, #%11100111
0D9BE B0 E7                         .db #$B0, #%11100111
0D9C0 34 E7                         .db #$34, #%11100111
0D9C2 74 E7                         .db #$74, #%11100111
0D9C4 B4 E7                         .db #$B4, #%11100111
0D9C6 20 13                         .db #$20, #%00010011
0D9C8 40 10                         .db #$40, #%00010000
0D9CA 80 02                         .db #$80, #%00000010
0D9CC 41 05                         .db #$41, #%00000101
0D9CE B1 09                         .db #$B1, #%00001001
0D9D0 02 09                         .db #$02, #%00001001
0D9D2 52 0C                         .db #$52, #%00001100
0D9D4 13 11                         .db #$13, #%00010001
0D9D6 33 04                         .db #$33, #%00000100
0D9D8 74 0C                         .db #$74, #%00001100
0D9DA B4 08                         .db #$B4, #%00001000
0D9DC 15 09                         .db #$15, #%00001001
0D9DE 55 0C                         .db #$55, #%00001100
0D9E0 95 0C                         .db #$95, #%00001100
0D9E2 47 03                         .db #$47, #%00000011
0D9E4 A7 12                         .db #$A7, #%00010010
0D9E6 18 15                         .db #$18, #%00010101
0D9E8 09 05                         .db #$09, #%00000101
0D9EA 19 03                         .db #$19, #%00000011
0D9EC FF                            .db #LEVEL_END
0D9ED                           
0D9ED                           lvl_layout_25:
0D9ED 00 12                         .db #$00, #%00010010
0D9EF 10 63                         .db #$10, #%01100011
0D9F1 60 63                         .db #$60, #%01100011
0D9F3 A0 07                         .db #$A0, #%00000111
0D9F5 01 11                         .db #$01, #%00010001
0D9F7 A1 02                         .db #$A1, #%00000010
0D9F9 02 67                         .db #$02, #%01100111
0D9FB 42 07                         .db #$42, #%00000111
0D9FD 62 67                         .db #$62, #%01100111
0D9FF A2 C7                         .db #$A2, #%11000111
0DA01 03 61                         .db #$03, #%01100001
0DA03 43 01                         .db #$43, #%00000001
0DA05 63 61                         .db #$63, #%01100001
0DA07 A6 E7                         .db #$A6, #%11100111
0DA09 B6 47                         .db #$B6, #%01000111
0DA0B C6 01                         .db #$C6, #%00000001
0DA0D B7 42                         .db #$B7, #%01000010
0DA0F B8 42                         .db #$B8, #%01000010
0DA11 C8 0A                         .db #$C8, #%00001010
0DA13 09 7A                         .db #$09, #%01111010
0DA15 49 7A                         .db #$49, #%01111010
0DA17 89 3A                         .db #$89, #%00111010
0DA19 B9 42                         .db #$B9, #%01000010
0DA1B FF                            .db #LEVEL_END
0DA1C                           
0DA1C                           ;; Level layout address pointers
0DA1C                           tbl_lvl_layout_hi:
0DA1C                           ifdef TESTING
0DA1C                               .db >#lvl_test
0DA1C                           endif
0DA1C D3 D3 D3 D3 D4                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0DA21 D4 D4 D5 D5 D5                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0DA26 D5 D6 D6 D6 D7                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0DA2B D7 D7 D8 D8 D8                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0DA30 D8 D9 D9 D9 D9                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0DA35                           
0DA35                           tbl_lvl_layout_lo:
0DA35                           ifdef TESTING
0DA35                               .db <#lvl_test
0DA35                           endif
0DA35 43 5E 93 C6 37                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0DA3A 72 FB 3C 73 B6                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0DA3F E5 38 63 B6 2D                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0DA44 58 AD 14 69 A8                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0DA49 F3 30 5D A8 ED                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0DA4E                           
0DA4E                           ;; Ball start position (#$YX)
0DA4E                           tbl_lvl_ball_startpos:
0DA4E                           ifdef TESTING
0DA4E                               .db #$29
0DA4E                           endif
0DA4E 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0DA53 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0DA58 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0DA5D 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0DA62 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0DA67                           
0DA67                               
0DA67                           ;; Ball start direction, color and tile score
0DA67                           ;; #% ccc v tttt
0DA67                           ;;    ||| | ++++-- tile score
0DA67                           ;;    ||| +------- vertical direction, up (0) or down
0DA67                           ;;    +++--------- color (CBRYGM)
0DA67                           tbl_lvl_ball_init:
0DA67                           ifdef TESTING
0DA67                               .db #%00100000
0DA67                           endif
0DA67 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0DA6C 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0DA71 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0DA76 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0DA7B 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0DA80                           
0DA80                           
0DA80                           
0DA80                           ;; Helper table to multiply values by 16
0DA80                           tbl_Times16:
0DA80 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0DA88 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0DA90                               
0DA90                           
0DA90                           ;; Helper table to multiply values by 64
0DA90                           tbl_Times64:
0DA90 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0DA94                           
0DA94                           
0DA94                           ;; Metatile ID to CHR data mapper
0DA94                           tbl_GametileTopLeft:
0DA94 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0DA9E                           
0DA9E                           tbl_GametileTopRight:
0DA9E 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0DAA8                           
0DAA8                           tbl_GametileBottomLeft:
0DAA8 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0DAB2                           
0DAB2                           tbl_GametileBottomRight:
0DAB2 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DABC                           
0DABC                           ;; Metatile ID to RAM byte data mapper
0DABC                           tbl_GameTileRamByte:
0DABC 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DAC1                           
0DAC1                           ;; HUD text data (with opaque background tile for sprite zero)
0DAC1                           tbl_HudText:
0DAC1 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DAC9 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DAD0 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DAD8 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DADF                           
0DADF                           ;; Move block top left tile based on color
0DADF                           tbl_MoveBlockTopLeftTile:
0DADF 42 4A 42 4A 42 4A 42          .db #$42, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DAE6                           
0DAE6                           ;; Game over data
0DAE6                           tbl_GameOver:
0DAE6 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DAEA 00 00                         .db #_SPACE, #_SPACE
0DAEC 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DAF0                           
0DAF0                           ;; Background fade pallette table
0DAF0                           tbl_BackgroundFade:
0DAF0 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DAFA                           
0DAFA                           ;; Sound effects
0DAFA                           .include "game/include/table/sfx.asm"
0DAFA                           ;;
0DAFA                           ;; Explosion sound effects
0DAFA                           ;;
0DAFA                           ;;   #% ffff vvvv
0DAFA                           ;;      |||| ++++---- volume (0=low, 15=high)
0DAFA                           ;;      ++++-------- frequency (0=low, 15=high)
0DAFA                           ;;
0DAFA                           ;; #$FF = end of sfx
0DAFA                           ;;
0DAFA                           
0DAFA                           tbl_ExplosionSfx:
0DAFA 00                            .db #$00 ; buffer byte
0DAFB 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DB03 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DB0B 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DB13 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DB1B 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DB23 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DB28                           
0DB28                           tbl_ThudSfx:
0DB28 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DB29 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DB31 E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DB36                           
0DB36                           tbl_BounceSfx:
0DB36 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DB37 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DB3B                           
0DB3B 00                            .db #$00
0DB3C                           
0DB3C                           tbl_Sfx_hi:
0DB3C DA DB DB                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DB3F                           
0DB3F                           tbl_Sfx_lo:
0DB3F FA 28 36                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DB42                           
0DB42                           
0DB42                           ;; Volume envelope for move sound effect (reversed)
0DB42                           tbl_MoveSfxVolume:
0DB42 70 70 72 73 7B 7C 7B 7B       .db #$70, #$70, #$72, #$73, #$7B, #$7C, #$7B, #$7B
0DB4A 79 79 78 77 76 76 75 75       .db #$79, #$79, #$78, #$77, #$76, #$76, #$75, #$75
0DB52 74 74 73 73 73 73 72 71       .db #$74, #$74, #$73, #$73, #$73, #$73, #$72, #$71
0DB5A                           
0DB5A                           ;; Volume and frequency table for paint sound effect (reversed)
0DB5A 00                        tbl_PaintSfxVolume: .db #$00
0DB5B B0 B1 B2 B3 B2 B4 B6 B3       .db #$B0, #$B1, #$B2, #$B3, #$B2, #$B4, #$B6, #$B3
0DB63 B6 B9 B5 B9 B5 B9 B5 B9       .db #$B6, #$B9, #$B5, #$B9, #$B5, #$B9, #$B5, #$B9
0DB6B 00                        tbl_PaintSfxFreqHi: .db #$00
0DB6C 08 08 08 08 08 08 08 08       .db #$08, #$08, #$08, #$08, #$08, #$08, #$08, #$08
0DB74 08 09 08 09 09 09 09 09       .db #$08, #$09, #$08, #$09, #$09, #$09, #$09, #$09
0DB7C 00                        tbl_PaintSfxFreqLo: .db #$00
0DB7D 68 90 B8 E0 A4 CC F4 BC       .db #$68, #$90, #$B8, #$E0, #$A4, #$CC, #$F4, #$BC
0DB85 E4 0C F6 32 1A 56 44 80       .db #$E4, #$0C, #$F6, #$32, #$1A, #$56, #$44, #$800DB8D                           
0DB8D                           ;; Lookup table to convert bonus ticks to score
0DB8D                           tbl_BonusToScore:
0DB8D 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DB97                           
0DB97                           ;; Check string for sentience (warm boot)
0DB97 C0 FF EE 54 07            tbl_Sentient: .db #$C0, #$FF, #$EE, #$54, #$070DB9C                           
0DB9C                           ;; NMI handler
0DB9C                           NMI:
0DB9C                               .include "interrupt/nmi.asm"
0DB9C                           
0DB9C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DB9C                           ;;
0DB9C                           ;; include/nmi.asm
0DB9C                           ;;
0DB9C                           ;; Non-maskable interrupt script. This script is being executed
0DB9C                           ;; when vBlank hits.
0DB9C                           ;;
0DB9C                           ;;
0DB9C                           
0DB9C                               ;; Preserve accumulator through stack
0DB9C 48                            PHA
0DB9D                           
0DB9D                               ;; Should NMI be skipped?
0DB9D A5 1E                         LDA skip_nmi
0DB9F F0 03                         BEQ +
0DBA1 4C 78 DD                          JMP +skip_nmi
0DBA4                               +
0DBA4                           
0DBA4                               ;; When in NMI, skip additional NMI requests
0DBA4 A9 01                         LDA #$01
0DBA6 85 1E                         STA skip_nmi
0DBA8                           
0DBA8                               ;; Preserve X, Y, and PC through stack
0DBA8 8A                            TXA
0DBA9 48                            PHA
0DBAA 98                            TYA
0DBAB 48                            PHA
0DBAC 08                            PHP
0DBAD                               
0DBAD                               ;; Check forced NMI skip
0DBAD A5 1F                         LDA force_skip_nmi
0DBAF F0 03                         BEQ +
0DBB1 4C 67 DD                          JMP +force_skip_nmi
0DBB4                               +
0DBB4                           
0DBB4                               ;; Update PPU mask
0DBB4                               ;LDA #$00
0DBB4                               ;STA PPU_CTRL
0DBB4 A5 1D                         LDA soft_ppu_mask
0DBB6 8D 01 20                      STA PPU_MASK
0DBB9                               
0DBB9                               
0DBB9                               ;; Additional PPU updates go here
0DBB9                               .include "game/interrupt/nmi.asm"
0DBB9                           
0DBB9                               ;; Check if ppu_buffer needs updating
0DBB9 A5 44                         LDA ppu_buffer_update
0DBBB D0 03                         BNE +
0DBBD 4C FF DB                          JMP +no_ppu_buffer_update
0DBC0                               +
0DBC0                           
0DBC0                               ;; Reset ppu control register and mask
0DBC0 A2 00                         LDX #$00
0DBC2 8E 00 20                      STX PPU_CTRL
0DBC5 8E 01 20                      STX PPU_MASK
0DBC8                           
0DBC8                               ;; Set up loop
0DBC8                               -
0DBC8                                   ;; Reset hi/lo latch
0DBC8 2C 02 20                          BIT PPU_STATUS
0DBCB                           
0DBCB                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DBCB BD 00 03                          LDA ppu_buffer,x
0DBCE 8D 06 20                          STA PPU_ADDR
0DBD1 E8                                INX
0DBD2 BD 00 03                          LDA ppu_buffer,x
0DBD5 8D 06 20                          STA PPU_ADDR
0DBD8                           
0DBD8                                   ;; Write ppu_buffer data to PPU_ADDR
0DBD8 E8                                INX
0DBD9 BD 00 03                          LDA ppu_buffer,x
0DBDC 8D 07 20                          STA PPU_DATA
0DBDF                           
0DBDF                                   ;; Check if updating is done (eg. X is at pointer)
0DBDF E8                                INX
0DBE0 E4 45                             CPX ppu_buffer_pointer
0DBE2 F0 03                             BEQ +
0DBE4 4C C8 DB                      JMP -
0DBE7                           +
0DBE7                           
0DBE7                               ;; Reset ppu buffer update and pointer
0DBE7 A9 00                         LDA #$00
0DBE9 85 44                         STA ppu_buffer_update
0DBEB 85 45                         STA ppu_buffer_pointer
0DBED                               
0DBED                               ;; Reset scrolling position
0DBED 8D 05 20                      STA PPU_SCROLL
0DBF0 8D 05 20                      STA PPU_SCROLL
0DBF3                           
0DBF3                               ;; Restore ppu control register and mask
0DBF3 A9 90                         LDA #%10010000
0DBF5 8D 00 20                      STA PPU_CTRL
0DBF8 A5 1D                         LDA soft_ppu_mask
0DBFA 8D 01 20                      STA PPU_MASK
0DBFD A9 00                         LDA #$00
0DBFF                           
0DBFF                           ;; Continue other NMI stuff
0DBFF                           +no_ppu_buffer_update:
0DBFF                           
0DBFF                               ;; Reset sprite RAM, draw sprites
0DBFF 8D 03 20                      STA OAM_ADDR
0DC02 A9 02                         LDA #$02
0DC04 8D 14 40                      STA OAM_DMA
0DC07                           
0DC07                               ;; Decrease explosion and move block timers
0DC07 A0 04                         LDY #MAX_ANIMATIONS
0DC09 A2 00                         LDX #$00
0DC0B                               -
0DC0B BD 60 03                          LDA explosion_timer,x
0DC0E F0 03                             BEQ +
0DC10 DE 60 03                              DEC explosion_timer,x
0DC13                                   +
0DC13                           
0DC13 BD 80 03                          LDA move_block_timer,x
0DC16 F0 03                             BEQ +
0DC18 DE 80 03                              DEC move_block_timer,x
0DC1B                                   +
0DC1B                                   
0DC1B E8                                INX
0DC1C 88                                DEY
0DC1D F0 03                             BEQ +done
0DC1F 4C 0B DC                      JMP -
0DC22                           +done:
0DC22                           
0DC22                               ;; Decrease nudge timer
0DC22 A5 49                         LDA nudge_timer
0DC24 F0 02                         BEQ +
0DC26 C6 49                             DEC nudge_timer
0DC28                               +
0DC28                           
0DC28                               ;; Decrease bonus timer
0DC28 A5 4A                         LDA bonus_timer
0DC2A F0 02                         BEQ +
0DC2C C6 4A                             DEC bonus_timer
0DC2E                               +
0DC2E                           
0DC2E                               ;; Decrease kill timer
0DC2E A5 4B                         LDA kill_timer
0DC30 F0 02                         BEQ +
0DC32 C6 4B                             DEC kill_timer
0DC34                               +
0DC34                               
0DC34                               ;; Decrease and handle unfreeze timer
0DC34 A5 4C                         LDA unfreeze_timer
0DC36 F0 0A                         BEQ +
0DC38 C6 4C                             DEC unfreeze_timer
0DC3A D0 06                             BNE +
0DC3C                                   
0DC3C A5 42                             LDA ball_flags
0DC3E 29 FB                             AND #UNFREEZE_BALL
0DC40 85 42                             STA ball_flags
0DC42                               +
0DC42                           
0DC42                               ;; Play background noise
0DC42 A5 43                         LDA screen_mode
0DC44 29 01                         AND #IS_GAME_SCREEN
0DC46 F0 0C                         BEQ +
0DC48                                   .include "game/include/main/background_sound.asm"
0DC48                           
0DC48                               ;; If noise is muted, no noise should play
0DC48 A5 56                         LDA noise_muted
0DC4A F0 08                         BEQ +
0DC4C A9 30                             LDA #$30
0DC4E 8D 0C 40                          STA NOISE_VOLUME
0DC51 4C B9 DC                          JMP +endNoise
0DC54                               +
0DC54                               
0DC54                               ;; At random times, set max_noise period to $03-$0A
0DC54 A5 50                         LDA max_noise
0DC56 D0 1D                         BNE +
0DC58 20 7A C5                          JSR sub_GetRandomNumber
0DC5B 29 EF                             AND #%11101111
0DC5D D0 16                             BNE +
0DC5F                                   
0DC5F A5 20                             LDA frame_counter
0DC61 85 21                             STA random_seed
0DC63 20 7A C5                          JSR sub_GetRandomNumber
0DC66 29 07                             AND #$07
0DC68 69 03                             ADC #$03
0DC6A 85 50                             STA max_noise
0DC6C A9 01                             LDA #$01
0DC6E 85 51                             STA sweep_noise
0DC70 A9 34                             LDA #$34
0DC72 8D 0C 40                          STA NOISE_VOLUME
0DC75                               +
0DC75                           
0DC75                               ;; if sweep noise = $00: constant noise
0DC75                               ;; else if sweep noise > $80: decrease pitch
0DC75                               ;; else: increase pitch
0DC75 A5 51                         LDA sweep_noise
0DC77 F0 18                         BEQ +constantNoise
0DC79 30 2A                         BMI +decreaseNoise
0DC7B                           
0DC7B                           ;; Sweep noise up to max noise pitch
0DC7B                           +increaseNoise:
0DC7B C6 52                         DEC current_noise
0DC7D A5 52                         LDA current_noise
0DC7F 8D 0E 40                      STA NOISE_PERIOD
0DC82 C5 50                         CMP max_noise
0DC84 D0 08                         BNE +
0DC86 A9 00                             LDA #$00
0DC88 85 51                             STA sweep_noise
0DC8A A9 0A                             LDA #$0A
0DC8C 85 53                             STA noise_timer
0DC8E                               +
0DC8E 4C B9 DC                      JMP +endNoise
0DC91                           
0DC91                           ;; Keep noise at constant pitch
0DC91                           +constantNoise:
0DC91 A5 50                         LDA max_noise
0DC93 F0 24                         BEQ +endNoise
0DC95                           
0DC95 A5 53                         LDA noise_timer
0DC97 D0 07                         BNE +
0DC99 A9 80                             LDA #$80
0DC9B 85 51                             STA sweep_noise
0DC9D 4C B9 DC                          JMP +endNoise
0DCA0                               +
0DCA0 C6 53                         DEC noise_timer
0DCA2 4C B9 DC                      JMP +endNoise
0DCA5                           
0DCA5                           ;; Sweep noise down to initial pitch
0DCA5                           +decreaseNoise:
0DCA5 E6 52                         INC current_noise
0DCA7 A5 52                         LDA current_noise
0DCA9 8D 0E 40                      STA NOISE_PERIOD
0DCAC C9 0E                         CMP #$0E
0DCAE D0 09                         BNE +endNoise
0DCB0                           
0DCB0 20 0A C6                      JSR sub_BackgroundNoise
0DCB3 A9 00                         LDA #$00
0DCB5 85 50                         STA max_noise
0DCB7 85 51                         STA sweep_noise
0DCB9                           
0DCB9                           +endNoise:
0DCB9                           
0DCB9                               +
0DCB9                           
0DCB9                               ;; Play bonus to score bleeps
0DCB9                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DCB9                           
0DCB9                           ;; Random bleepy noises
0DCB9                           
0DCB9 A5 54                         LDA do_beeps
0DCBB F0 2E                         BEQ +continue
0DCBD                               
0DCBD C9 02                         CMP #$02
0DCBF D0 12                         BNE +beep
0DCC1                              
0DCC1                           +stopBeep:
0DCC1 A9 00                         LDA #$00
0DCC3 85 54                         STA do_beeps
0DCC5 A9 08                         LDA #$08
0DCC7 8D 15 40                      STA APU_STATUS
0DCCA 8D 0F 40                      STA NOISE_LENGTH
0DCCD 20 0A C6                      JSR sub_BackgroundNoise
0DCD0 4C EB DC                      JMP +continue
0DCD3                               
0DCD3                           +beep:
0DCD3 A9 01                         LDA #$01
0DCD5 8D 15 40                      STA APU_STATUS
0DCD8 A5 55                         LDA soft_pulse1
0DCDA 8D 00 40                      STA PULSE1_VOLUME
0DCDD 20 7A C5                      JSR sub_GetRandomNumber
0DCE0 8D 02 40                      STA PULSE1_TIMER_LO
0DCE3 20 7A C5                      JSR sub_GetRandomNumber
0DCE6 29 01                         AND #$01
0DCE8 8D 03 40                      STA PULSE1_TIMER_HI
0DCEB                           
0DCEB                           +continue:
0DCEB                           
0DCEB                               
0DCEB                               ;; Play sound effect
0DCEB                               .include "game/include/main/nmi_sfx.asm"
0DCEB                           
0DCEB                               ;; Get current explosion sfx frame; if not set, skip this
0DCEB A4 59                         LDY sfx_timer
0DCED F0 1F                         BEQ +done
0DCEF                               
0DCEF                                   ;; Check if explosion sfx is done; if so, disable and skip
0DCEF B1 57                             LDA (sfx_address),y
0DCF1 D0 07                             BNE +
0DCF3 A9 00                                 LDA #$00
0DCF5 85 59                                 STA sfx_timer
0DCF7 4C 0E DD                              JMP +done
0DCFA                                   +
0DCFA                                   
0DCFA                                   ;; Set low nibble as volume
0DCFA 29 0F                             AND #$0F
0DCFC 09 30                             ORA #$30
0DCFE 8D 0C 40                          STA NOISE_VOLUME
0DD01                                   
0DD01                                   ;; Set high nibble as frequency
0DD01 B1 57                             LDA (sfx_address),y
0DD03 4A                                LSR
0DD04 4A                                LSR
0DD05 4A                                LSR
0DD06 4A                                LSR
0DD07 49 0F                             EOR #$0F
0DD09 8D 0E 40                          STA NOISE_PERIOD
0DD0C                                   
0DD0C                                   ;; Next frame
0DD0C E6 59                             INC sfx_timer
0DD0E                               +done:
0DD0E                           
0DD0E                           
0DD0E                               ;; Check move sfx
0DD0E A4 5A                         LDY sfx_timer+1
0DD10 F0 34                         BEQ +done
0DD12                           
0DD12 C6 5A                             DEC sfx_timer+1
0DD14 C0 18                             CPY #$18
0DD16 D0 0D                             BNE +
0DD18                                       ;; Update APU status
0DD18 A9 09                                 LDA #$09
0DD1A 8D 15 40                              STA APU_STATUS
0DD1D A9 8B                                 LDA #$8B
0DD1F 85 5C                                 STA sfx_frequency
0DD21 A9 0A                                 LDA #$0A
0DD23 85 5D                                 STA sfx_frequency+1
0DD25                                   +
0DD25                                   
0DD25                                   ;; Set volume
0DD25 B9 42 DB                          LDA tbl_MoveSfxVolume,y
0DD28 8D 00 40                          STA PULSE1_VOLUME
0DD2B                                   
0DD2B 84 0B                             STY temp
0DD2D A9 18                             LDA #$18
0DD2F 38                                SEC
0DD30 E5 0B                             SBC temp
0DD32 4A                                LSR
0DD33 18                                CLC
0DD34 69 03                             ADC #$03
0DD36 65 5C                             ADC sfx_frequency
0DD38 85 5C                             STA sfx_frequency
0DD3A 8D 02 40                          STA PULSE1_TIMER_LO
0DD3D A5 5D                             LDA sfx_frequency+1
0DD3F 69 00                             ADC #$00
0DD41 85 5D                             STA sfx_frequency+1
0DD43 8D 03 40                          STA PULSE1_TIMER_HI
0DD46                               +done:
0DD46                           
0DD46                           
0DD46                               ;; Check paint sfx
0DD46 A4 5B                         LDY sfx_timer+2
0DD48 F0 1D                         BEQ +done
0DD4A                           
0DD4A C6 5B                             DEC sfx_timer+2
0DD4C C0 10                             CPY #$10
0DD4E D0 05                             BNE +
0DD50                                       ;; Update APU status
0DD50 A9 09                                 LDA #$09
0DD52 8D 15 40                              STA APU_STATUS
0DD55                                   +
0DD55                                   
0DD55                                   ;; Set volume
0DD55 B9 5A DB                          LDA tbl_PaintSfxVolume,y
0DD58 8D 00 40                          STA PULSE1_VOLUME
0DD5B B9 7C DB                          LDA tbl_PaintSfxFreqLo,y
0DD5E 8D 02 40                          STA PULSE1_TIMER_LO
0DD61 B9 6B DB                          LDA tbl_PaintSfxFreqHi,y
0DD64 8D 03 40                          STA PULSE1_TIMER_HI
0DD67                               +done:
0DD67                               
0DD67                           
0DD67                           ;; This is what happens when we forced nmi skip
0DD67                           +force_skip_nmi:
0DD67                           
0DD67                               ;; Increase frame timers
0DD67 E6 20                         INC frame_counter
0DD69                           
0DD69                               ;; reset sprites_update_position
0DD69 A9 00                         LDA #$00
0DD6B 85 40                         STA sprites_update_position
0DD6D                           
0DD6D                               ;; Don't skip next NMI request
0DD6D A9 00                         LDA #$00
0DD6F 85 1E                         STA skip_nmi
0DD71 85 5E                         STA check_nmi
0DD73                           
0DD73                               ;; Restore X, Y and PC from stack
0DD73 28                            PLP
0DD74 68                            PLA
0DD75 A8                            TAY
0DD76 68                            PLA
0DD77 AA                            TAX
0DD78                           
0DD78                           +skip_nmi:
0DD78                               ;; Restore accumulator from stack
0DD78 68                            PLA
0DD79                           
0DD79                               ;; Return
0DD79 40                            RTI
0DD7A                           
0DD7A                           
0DD7A                           ;; IRQ handler (empty)
0DD7A                           IRQ:
0DD7A                               .include "interrupt/irq.asm"
0DD7A                           
0DD7A 40                            RTI
0DD7B                           
0DD7B                           
0DD7B                           ;; Interrupt vectors
0DD7B 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 9C DB                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 7A DD                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
