	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$C0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$05
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                               00036                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 95 C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 95 C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 81 C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 77 CC                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 74 CC                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 50 C4                      JSR sub_DisableRendering
0C08A 20 E6 C6                      JSR sub_JumpToPointer
0C08D 20 64 C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 2D                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C A7 C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 32                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 2B                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 88 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 2C                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 27                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 18                            CLC
0C0C7 69 C0                         ADC #BALL_SPEED_LO
0C0C9 85 1A                         STA ball_ypos_lo
0C0CB                           
0C0CB                               ;; update the high byte with carry
0C0CB A5 19                         LDA ball_ypos_hi
0C0CD 69 01                         ADC #BALL_SPEED_HI
0C0CF 85 19                         STA ball_ypos_hi
0C0D1                               
0C0D1                               ;; Check bottom bound
0C0D1 C9 C8                         CMP #BOUND_BOTTOM
0C0D3 90 38                         BCC +checkHorizontalMovement
0C0D5 F0 36                         BEQ +checkHorizontalMovement
0C0D7                           
0C0D7                           
0C0D7                               ;; Change ball direction to "up"
0C0D7 A9 C8                         LDA #BOUND_BOTTOM
0C0D9 38                            SEC
0C0DA E9 01                         SBC #$01
0C0DC 85 19                         STA ball_ypos_hi
0C0DE A9 00                         LDA #$00
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2 A5 2C                         LDA ball_flags
0C0E4 29 EF                         AND #MOVE_BALL_UP
0C0E6 85 2C                         STA ball_flags
0C0E8 4C 0D C1                      JMP +checkHorizontalMovement
0C0EB                           
0C0EB                           
0C0EB                           +moveBallUp:
0C0EB                               ;; update the low byte
0C0EB A5 1A                         LDA ball_ypos_lo
0C0ED 38                            SEC
0C0EE E9 C0                         SBC #BALL_SPEED_LO
0C0F0 85 1A                         STA ball_ypos_lo
0C0F2                           
0C0F2                               ;; update the high byte with carry
0C0F2 A5 19                         LDA ball_ypos_hi
0C0F4 E9 01                         SBC #BALL_SPEED_HI
0C0F6 85 19                         STA ball_ypos_hi
0C0F8                               
0C0F8                               ;; Check top bound
0C0F8 C9 30                         CMP #BOUND_TOP
0C0FA B0 11                         BCS +checkHorizontalMovement
0C0FC                           
0C0FC                               ;; Change ball direction to "down"
0C0FC A9 30                         LDA #BOUND_TOP
0C0FE 18                            CLC
0C0FF 69 01                         ADC #$01
0C101 85 19                         STA ball_ypos_hi
0C103 A9 00                         LDA #$00
0C105 85 1A                         STA ball_ypos_lo
0C107 A5 2C                         LDA ball_flags
0C109 09 10                         ORA #MOVE_BALL_DOWN
0C10B 85 2C                         STA ball_flags
0C10D                           
0C10D                           
0C10D                           +checkHorizontalMovement:
0C10D                           
0C10D                               ;; Check if ball is being nudged
0C10D A5 33                         LDA nudge_counter
0C10F D0 41                         BNE +doneBallMovement
0C111                           
0C111                               ;; Check if left button is held
0C111 A5 0F                         LDA buttons_held
0C113 29 02                         AND #BUTTON_LEFT
0C115 F0 1B                         BEQ +
0C117                                   ;; update the low byte
0C117 A5 18                             LDA ball_xpos_lo
0C119 38                                SEC
0C11A E9 C0                             SBC #BALL_SPEED_LO
0C11C 85 18                             STA ball_xpos_lo
0C11E                           
0C11E                                   ;; update the high byte
0C11E A5 17                             LDA ball_xpos_hi
0C120 E9 01                             SBC #BALL_SPEED_HI
0C122 85 17                             STA ball_xpos_hi
0C124                                   
0C124                                   ;; Check left bound
0C124 C9 10                             CMP #BOUND_LEFT
0C126 B0 2A                             BCS +doneBallMovement
0C128                                   
0C128                                   ;; Set flag to nudge right and set nudge counter
0C128 A5 2C                             LDA ball_flags
0C12A 09 02                             ORA #NUDGE_BALL_RIGHT
0C12C 20 DF C6                          JSR sub_InitiateNudge
0C12F                           
0C12F 4C 52 C1                          JMP +doneBallMovement        
0C132                               +
0C132                           
0C132                               ;; Check if right button is held
0C132 A5 0F                         LDA buttons_held
0C134 29 01                         AND #BUTTON_RIGHT
0C136 F0 1A                         BEQ +
0C138                                   ;; update the low byte
0C138 A5 18                             LDA ball_xpos_lo
0C13A 18                                CLC
0C13B 69 C0                             ADC #BALL_SPEED_LO
0C13D 85 18                             STA ball_xpos_lo
0C13F                           
0C13F                                   ;; update the high byte
0C13F A5 17                             LDA ball_xpos_hi
0C141 69 01                             ADC #BALL_SPEED_HI
0C143 85 17                             STA ball_xpos_hi     
0C145                           
0C145                                  ;; Check right bound
0C145 C9 E8                             CMP #BOUND_RIGHT
0C147 90 09                             BCC +doneBallMovement
0C149 F0 07                             BEQ +doneBallMovement
0C14B                                   
0C14B                                   ;; Set flag to nudge left and set nudge timer
0C14B A5 2C                             LDA ball_flags
0C14D 29 FD                             AND #NUDGE_BALL_LEFT
0C14F 20 DF C6                          JSR sub_InitiateNudge
0C152                               +
0C152                           
0C152                           
0C152                           +doneBallMovement:
0C152                           
0C152                               ;; Check nudge
0C152 A5 33                         LDA nudge_counter
0C154 F0 23                         BEQ +doneBallNudging
0C156 A5 2C                             LDA ball_flags
0C158 29 02                             AND #NUDGE_BALL_RIGHT
0C15A F0 10                             BEQ +nudgeBallLeft
0C15C                                   
0C15C                                       ;; update the low byte
0C15C A5 18                                 LDA ball_xpos_lo
0C15E 18                                    CLC
0C15F 69 C0                                 ADC #BALL_SPEED_LO
0C161 85 18                                 STA ball_xpos_lo
0C163                           
0C163                                       ;; update the high byte
0C163 A5 17                                 LDA ball_xpos_hi
0C165 69 01                                 ADC #BALL_SPEED_HI
0C167 85 17                                 STA ball_xpos_hi  
0C169 4C 79 C1                              JMP +doneBallNudging
0C16C                                   +nudgeBallLeft:
0C16C                                   
0C16C                                   ;; update the low byte
0C16C A5 18                             LDA ball_xpos_lo
0C16E 38                                SEC
0C16F E9 C0                             SBC #BALL_SPEED_LO
0C171 85 18                             STA ball_xpos_lo
0C173                           
0C173                                   ;; update the high byte
0C173 A5 17                             LDA ball_xpos_hi
0C175 E9 01                             SBC #BALL_SPEED_HI
0C177 85 17                             STA ball_xpos_hi
0C179                               +doneBallNudging:
0C179                           
0C179                               ;; Don't update position again until next frame
0C179 E6 2B                         INC ball_update_position
0C17B                           
0C17B                               
0C17B                               ;; Do collision detection
0C17B                               .include "game/include/main/collision_detection.asm"
0C17B                           
0C17B                               ;; Get ball's x-left, x-center, x-right position
0C17B A5 17                         LDA ball_xpos_hi
0C17D 18                            CLC
0C17E 69 F0                         ADC #BALL_LEFT_WGA
0C180 85 25                         STA ball_left
0C182 18                            CLC
0C183 69 04                         ADC #BALL_HALF_SIZE
0C185 85 26                         STA ball_center
0C187 18                            CLC
0C188 69 04                         ADC #BALL_HALF_SIZE
0C18A 85 27                         STA ball_right
0C18C                           
0C18C                               ;; Get ball's y-top, y-middle, y-bottom position
0C18C A5 19                         LDA ball_ypos_hi
0C18E 18                            CLC
0C18F 69 D0                         ADC #BALL_TOP_WGA
0C191 85 28                         STA ball_top
0C193 18                            CLC
0C194 69 04                         ADC #BALL_HALF_SIZE
0C196 85 29                         STA ball_middle
0C198 18                            CLC
0C199 69 04                         ADC #BALL_HALF_SIZE
0C19B 85 2A                         STA ball_bottom
0C19D                           
0C19D                           +checkRightCollision:
0C19D                               ;; Check if ball moves right
0C19D                               ;; No need to check nudging here as that will never collide with a tile
0C19D A5 0F                         LDA buttons_held
0C19F 29 01                         AND #BUTTON_RIGHT
0C1A1 F0 1C                         BEQ +checkLeftCollision
0C1A3                           
0C1A3                               ;; Check tile at right position
0C1A3 A5 29                         LDA ball_middle
0C1A5 85 00                         STA temp
0C1A7 A5 27                         LDA ball_right
0C1A9 85 01                         STA temp+1
0C1AB 20 38 C4                      JSR sub_ConvertXYToTileType
0C1AE 29 01                         AND #TILE_IS_SOLID
0C1B0 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1B2                           
0C1B2                               ;; Tile is solid; nudge ball and evaluate tile type
0C1B2 A5 2C                         LDA ball_flags
0C1B4 29 FD                         AND #NUDGE_BALL_LEFT
0C1B6 20 DF C6                      JSR sub_InitiateNudge
0C1B9 20 91 C4                      JSR sub_EvaluateTileType
0C1BC 4C DE C1                      JMP +checkTopCollision
0C1BF                           
0C1BF                           +checkLeftCollision:
0C1BF                               ;; Check if ball moves right
0C1BF                               ;; No need to check nudging here as that will never collide with a tile
0C1BF A5 0F                         LDA buttons_held
0C1C1 29 02                         AND #BUTTON_LEFT
0C1C3 F0 19                         BEQ +checkTopCollision
0C1C5                           
0C1C5                               ;; Check tile at right position
0C1C5 A5 29                         LDA ball_middle
0C1C7 85 00                         STA temp
0C1C9 A5 25                         LDA ball_left
0C1CB 85 01                         STA temp+1
0C1CD 20 38 C4                      JSR sub_ConvertXYToTileType
0C1D0 29 01                         AND #TILE_IS_SOLID
0C1D2 F0 0A                         BEQ +checkTopCollision
0C1D4                           
0C1D4                               ;; Tile is solid; nudge ball and evaluate tile type
0C1D4 A5 2C                         LDA ball_flags
0C1D6 09 02                         ORA #NUDGE_BALL_RIGHT
0C1D8 20 DF C6                      JSR sub_InitiateNudge
0C1DB 20 91 C4                      JSR sub_EvaluateTileType
0C1DE                               
0C1DE                               
0C1DE                           +checkTopCollision:
0C1DE                               ;; Check if ball moves up
0C1DE A5 2C                         LDA ball_flags
0C1E0 29 10                         AND #BALL_MOVES_DOWN
0C1E2 D0 1B                         BNE +checkBottomCollision
0C1E4                           
0C1E4                               ;; Check tile at top position
0C1E4 A5 28                         LDA ball_top
0C1E6 85 00                         STA temp
0C1E8 A5 26                         LDA ball_center
0C1EA 85 01                         STA temp+1
0C1EC 20 38 C4                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1F3                           
0C1F3                               ;; Tile is solid; move ball down and evaluate tile type
0C1F3 A5 2C                         LDA ball_flags
0C1F5 09 10                         ORA #MOVE_BALL_DOWN
0C1F7 85 2C                         STA ball_flags
0C1F9 20 91 C4                      JSR sub_EvaluateTileType
0C1FC 4C 17 C2                      JMP +doneCheckingCollision
0C1FF                           
0C1FF                           +checkBottomCollision:
0C1FF                               ;; No movement check needed: since ball is not moving up, it must move down
0C1FF                           
0C1FF                               ;; Check tile at bottom position
0C1FF A5 2A                         LDA ball_bottom
0C201 85 00                         STA temp
0C203 A5 26                         LDA ball_center
0C205 85 01                         STA temp+1
0C207 20 38 C4                      JSR sub_ConvertXYToTileType
0C20A 29 01                         AND #TILE_IS_SOLID
0C20C F0 09                         BEQ +doneCheckingCollision
0C20E                           
0C20E                               ;; Tile is solid; move ball up and evaluate tile type
0C20E A5 2C                         LDA ball_flags
0C210 29 EF                         AND #MOVE_BALL_UP
0C212 85 2C                         STA ball_flags
0C214 20 91 C4                      JSR sub_EvaluateTileType
0C217                           
0C217                           +doneCheckingCollision:
0C217                           
0C217                           
0C217                               ;; Testinging timed PPU scroll concept
0C217                               .include "game/test/timed_ppuscroll_test.asm"
0C217                           ;; Timed updates (test)
0C217                           
0C217                               ;; If B button is pressed
0C217 A5 10                         LDA buttons_pressed
0C219 29 10                         AND #BUTTON_START
0C21B F0 6B                         BEQ +end
0C21D                               
0C21D                               ;; Set up loop fading
0C21D A9 00                         LDA #$00
0C21F 85 07                         STA temp+7
0C221 A0 08                         LDY #$08
0C223                               -fadeLoop:
0C223 84 08                             STY temp+8
0C225                           
0C225                                   ;; Wait for NMI to pass
0C225 20 95 C3                          JSR sub_WaitForVBlank
0C228                                   
0C228                                   ;; Now wait for No-sprite 0
0C228                                   -
0C228 AD 02 20                              LDA PPU_STATUS
0C22B 29 40                                 AND #SPRITE_0_HIT
0C22D D0 F9                             BNE -
0C22F                               
0C22F                                   ;; Now wait for Sprite 0
0C22F                                   -
0C22F AD 02 20                              LDA PPU_STATUS
0C232 29 40                                 AND #SPRITE_0_HIT
0C234 F0 F9                             BEQ -
0C236                                       
0C236                                   ;; Setup tile row loop
0C236 A0 16                             LDY #22
0C238                                   -tileLoop:
0C238                                   
0C238                                       ;; Disable drawing
0C238 A5 12                                 LDA soft_ppu_mask
0C23A 29 F7                                 AND #%11110111
0C23C 8D 01 20                              STA PPU_MASK
0C23F                                       
0C23F                                       ;; Set up scanline loop
0C23F A2 08                                 LDX #$08
0C241                                       -scanlineLoop:
0C241 E4 08                                     CPX temp+8
0C243 D0 0A                                     BNE +wasteTime
0C245                                           
0C245                                           ;; Restore drawing
0C245 A5 12                                     LDA soft_ppu_mask
0C247 09 08                                     ORA #%00001000
0C249 8D 01 20                                  STA PPU_MASK
0C24C 4C 55 C2                                  JMP +wasteMoreTime
0C24F                           
0C24F                                           ;; Waste 12 frames
0C24F                                           +wasteTime:
0C24F E6 09                                     INC temp+9   ;+5
0C251 C6 09                                     DEC temp+9   ;+5
0C253 49 00                                     EOR #$00     ;+2
0C255                                           
0C255                                           ;; Waste about 100 frames
0C255                                           +wasteMoreTime:
0C255                                           
0C255 86 01                                     STX temp+1     ;  3 down, 97 to go
0C257 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C259                                           -wasteLoop:
0C259 EA                                            NOP
0C25A 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C25C CA                                            DEX        ;  5+5L down,  95-5L to go
0C25D D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C25F                           
0C25F A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C261 CA                                        DEX            ;  9+8L down, 91-8L to go
0C262 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C264                           
0C264 88                                    DEY
0C265 D0 D1                             BNE -tileLoop
0C267                           
0C267 A4 08                             LDY temp+8
0C269                                   
0C269 E6 07                             INC temp+7
0C26B A5 07                             LDA temp+7
0C26D C9 02                             CMP #$02
0C26F D0 B2                             BNE -fadeLoop
0C271                           
0C271 A9 00                             LDA #$00
0C273 85 07                             STA temp+7
0C275 88                                DEY
0C276 D0 AB                         BNE -fadeLoop
0C278                               
0C278                               ;; Load the next level
0C278 E6 34                         INC current_level
0C27A A5 34                         LDA current_level
0C27C C9 19                         CMP #25
0C27E D0 04                         BNE +
0C280 A9 00                             LDA #$00
0C282 85 34                             STA current_level
0C284                               +
0C284                               
0C284 A9 81                         LDA #LOAD_GAME_SCREEN
0C286 85 2D                         STA screen_mode
0C288                           
0C288                           
0C288                           +end:
0C288                           
0C288                           
0C288                           +skipBallMovement:
0C288                               ;; Add to sprite buffer
0C288 A6 32                         LDX sprite_ram_pointer
0C28A A5 19                         LDA ball_ypos_hi
0C28C 9D 00 02                      STA ADDR_SPRITERAM,x
0C28F E8                            INX
0C290 A9 01                         LDA #BALL_TILE_CHR
0C292 9D 00 02                      STA ADDR_SPRITERAM,x
0C295 E8                            INX
0C296 A9 00                         LDA #BALL_ATTR
0C298 9D 00 02                      STA ADDR_SPRITERAM,x
0C29B E8                            INX
0C29C A5 17                         LDA ball_xpos_hi
0C29E 9D 00 02                      STA ADDR_SPRITERAM,x
0C2A1 E8                            INX
0C2A2 86 32                         STX sprite_ram_pointer
0C2A4 4C BD C2                      JMP +doneScreenLoad
0C2A7                           
0C2A7                           
0C2A7                           +checkNextScreen:
0C2A7                           
0C2A7                               ;; Upon pressing START, (next level) design will be drawn
0C2A7                               .include "game/test/load_next_level.asm"
0C2A7                               ;; If START button is pressed
0C2A7 A5 10                         LDA buttons_pressed
0C2A9 29 10                         AND #BUTTON_START
0C2AB F0 10                         BEQ +continue
0C2AD                                   ;; Load the next level
0C2AD E6 34                             INC current_level
0C2AF A5 34                             LDA current_level
0C2B1 C9 19                             CMP #25
0C2B3 D0 04                             BNE +
0C2B5 A9 00                                 LDA #$00
0C2B7 85 34                                 STA current_level
0C2B9                                   +
0C2B9                                   
0C2B9 A9 81                             LDA #LOAD_GAME_SCREEN
0C2BB 85 2D                             STA screen_mode
0C2BD                           
0C2BD                               +continue:
0C2BD                           
0C2BD                           
0C2BD                           +doneScreenLoad:
0C2BD                           
0C2BD                               ;; Load animations (if any)
0C2BD                               .include "game/include/main/load_animations.asm"
0C2BD                               ;; Set up loop
0C2BD A2 00                         LDX #$00
0C2BF                               -loop_load_animation:
0C2BF                                   ;; Check if current animation is active. If not, goto next
0C2BF BD 44 03                          LDA explosion_active,x
0C2C2 D0 03                             BNE +
0C2C4 4C 5E C3                              JMP +next
0C2C7                                   +
0C2C7                           
0C2C7                                   ;; Check the explosion framecounter
0C2C7 BD 30 03                          LDA explosion_framecounter,x
0C2CA D0 26                             BNE +
0C2CC                                       ;; Framecounter is 0
0C2CC                                       ;; Reset to animation speed
0C2CC A9 04                                 LDA #ANIMATION_SPEED
0C2CE 9D 30 03                              STA explosion_framecounter,x
0C2D1                           
0C2D1                                       ;; Set next animation frame, and check if we're done yet
0C2D1 FE 34 03                              INC explosion_currentframe,x
0C2D4 BD 34 03                              LDA explosion_currentframe,x
0C2D7 C9 0A                                 CMP #ANIM_SLIDES
0C2D9 D0 17                                 BNE +
0C2DB                           
0C2DB                                       ;; If we're done, inactivate current explosion, clean
0C2DB                                       ;; up sprite RAM and go to the next one
0C2DB A9 00                                 LDA #$00
0C2DD 9D 44 03                              STA explosion_active,x
0C2E0                                       
0C2E0 A9 09                                 LDA #SLIDE_SIZE
0C2E2 0A                                    ASL
0C2E3 0A                                    ASL
0C2E4 A8                                    TAY
0C2E5 A9 EF                                 LDA #$EF
0C2E7                                       -
0C2E7 88                                        DEY
0C2E8 99 00 02                                  STA ADDR_SPRITERAM,y
0C2EB C0 00                                     CPY #00
0C2ED D0 F8                                 BNE -
0C2EF                                       
0C2EF 4C 5E C3                              JMP +next
0C2F2                                   +
0C2F2                           
0C2F2                                   ;; Load (x,y) position in temp variables
0C2F2 BD 3C 03                          LDA explosion_x,x
0C2F5 85 01                             STA temp+1
0C2F7 85 03                             STA temp+3
0C2F9 BD 40 03                          LDA explosion_y,x
0C2FC 85 02                             STA temp+2
0C2FE                           
0C2FE                                   ;; Load attribute in temp variable
0C2FE BD 38 03                          LDA explosion_attributes,x
0C301 85 04                             STA temp+4
0C303                           
0C303                                   ;; Load current frame into Y-register
0C303 BC 34 03                          LDY explosion_currentframe,x
0C306                           
0C306                                   ;; Load current frame ROM address from table
0C306 B9 5E CC                          LDA explosion_anim_lo,y
0C309 85 0C                             STA pointer
0C30B B9 54 CC                          LDA explosion_anim_hi,y
0C30E 85 0D                             STA pointer+1
0C310                           
0C310                                   ;; Save x-register on stack
0C310 8A                                TXA
0C311 48                                PHA
0C312                           
0C312                                   ;; Load sprites into sprite RAM
0C312 A6 32                             LDX sprite_ram_pointer
0C314 A0 00                             LDY #$00
0C316                           
0C316                                   ;; Prepare (x,y) offset for loop
0C316 84 00                             STY temp
0C318                           
0C318                                   -loop_load_sprite:
0C318                                   
0C318                                       ;; Do not draw empty sprites
0C318 B1 0C                                 LDA (pointer),y
0C31A F0 18                                 BEQ +nextSprite
0C31C                                   
0C31C                                           ;; Add y-position to sprite ram buffer
0C31C A5 02                                     LDA temp+2
0C31E 9D 00 02                                  STA ADDR_SPRITERAM,x
0C321 E8                                        INX
0C322                           
0C322                                           ;; Get tile number from frame ROM address, and
0C322                                           ;; add it to sprite ram buffer
0C322 B1 0C                                     LDA (pointer),y
0C324 9D 00 02                                  STA ADDR_SPRITERAM,x
0C327 E8                                        INX
0C328                           
0C328                                           ;; Add attribute data to sprite ram buffer
0C328 A5 04                                     LDA temp+4
0C32A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C32D E8                                        INX
0C32E                           
0C32E                                           ;; Add x-position to sprite ram buffer
0C32E A5 03                                     LDA temp+3
0C330 9D 00 02                                  STA ADDR_SPRITERAM,x
0C333 E8                                        INX
0C334                           
0C334                                       +nextSprite:
0C334                           
0C334                                       ;; Check if all sprites are done
0C334 C8                                    INY
0C335 C0 09                                 CPY #SLIDE_SIZE
0C337 F0 21                                 BEQ +done
0C339                           
0C339                                       ;; Update x value
0C339 A5 03                                 LDA temp+3
0C33B 18                                    CLC
0C33C 69 08                                 ADC #$08
0C33E 85 03                                 STA temp+3
0C340                           
0C340                                       ;; Update temp for x,y position
0C340 E6 00                                 INC temp
0C342 A5 00                                 LDA temp
0C344 C9 03                                 CMP #SLIDE_WIDTH
0C346 D0 0F                                 BNE +
0C348                                           ;; Row is done; reset x-position
0C348 A5 01                                     LDA temp+1
0C34A 85 03                                     STA temp+3
0C34C                           
0C34C                                           ;; Update y-position
0C34C A5 02                                     LDA temp+2
0C34E 18                                        CLC
0C34F 69 08                                     ADC #$08
0C351 85 02                                     STA temp+2
0C353                           
0C353                                           ;; Reset row counter
0C353 A9 00                                     LDA #$00
0C355 85 00                                     STA temp
0C357                                       +
0C357                           
0C357 4C 18 C3                          JMP -loop_load_sprite
0C35A                           
0C35A                               +done:
0C35A 86 32                             STX sprite_ram_pointer
0C35C                           
0C35C                                   ;; Retrieve x-register from stack
0C35C 68                                PLA
0C35D AA                                TAX
0C35E                           
0C35E                               +next:
0C35E                                   ;; Check if all animations have been updated
0C35E E8                                INX
0C35F E0 04                             CPX #MAX_ANIMATIONS
0C361 F0 03                             BEQ +done
0C363                           
0C363 4C BF C2                      JMP -loop_load_animation
0C366                           +done:
0C366                           
0C366                               ;; Sprite clean-up
0C366 A6 32                         LDX sprite_ram_pointer
0C368 A9 EF                         LDA #$EF
0C36A                               -
0C36A 9D 00 02                          STA ADDR_SPRITERAM,x
0C36D E8                                INX
0C36E D0 FA                         BNE -
0C370 4C 57 C0                      JMP MainGameLoop
0C373                           
0C373                           ;; Subroutines
0C373                           .include "include/subroutines.asm"
0C373                           
0C373                           ;; RNG
0C373                           .include "subroutine/GetRandomNumber.asm"
0C373                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C373                           ;;
0C373                           ;; subroutine/GetRandomNumber.asm
0C373                           ;;
0C373                           ;; Simple and fast random number generator by White Flame.
0C373                           ;;
0C373                           ;; Set random_seed to an arbitrary number to randomize between
0C373                           ;; gaming sessions, for instance using the frame counter upon
0C373                           ;; pressing START on the intro screen.
0C373                           ;;
0C373                           ;;     ;; IF START PRESSED:
0C373                           ;;     LDA frame_counter
0C373                           ;;     STA random_seed
0C373                           ;;
0C373                           ;; Source:
0C373                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C373                           ;;
0C373                           ;;
0C373                           
0C373                           sub_GetRandomNumber:
0C373                               ;; Force EOR if random_seed is zero
0C373 A5 16                         LDA random_seed
0C375 F0 05                         BEQ +doEor
0C377                           
0C377                               ;; Shift left, and EOR if the high bit is set
0C377 0A                            ASL
0C378 F0 04                         BEQ +noEor
0C37A 90 02                         BCC +noEor
0C37C                           
0C37C                           +doEor:
0C37C 49 1D                         EOR #$1D
0C37E                           
0C37E                           +noEor:
0C37E 85 16                         STA random_seed
0C380                           
0C380 60                            RTS
0C381                           
0C381                           
0C381                           ;; Read controller input
0C381                           .include "subroutine/ReadController.asm"
0C381                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C381                           ;;
0C381                           ;; subroutine/ReadController.asm
0C381                           ;;
0C381                           ;; Subroutine that polls the controller and stores the input
0C381                           ;; buttons in a variable. This version only handles controller
0C381                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C381                           ;;
0C381                           ;;
0C381                           
0C381                           sub_ReadController:
0C381                           
0C381                               ;; Set strobe bit
0C381 A9 01                         LDA #$01
0C383 8D 16 40                      STA JOYPAD_1
0C386                           
0C386                               ;; Set up ring counter
0C386 85 0F                         STA buttons_held
0C388                           
0C388                               ;; Clear strobe bit
0C388 4A                            LSR
0C389 8D 16 40                      STA JOYPAD_1
0C38C                           
0C38C                               ;; Loop through button presses
0C38C                               -
0C38C AD 16 40                          LDA JOYPAD_1
0C38F 4A                                LSR
0C390 26 0F                             ROL buttons_held
0C392                           
0C392                               ;; Check if ring counter is done
0C392 90 F8                         BCC -
0C394                           
0C394                               ;; Return from subroutine
0C394 60                            RTS
0C395                           
0C395                           
0C395                           ;; vBlank wait
0C395                           .include "subroutine/WaitForVBlank.asm"
0C395                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C395                           ;;
0C395                           ;; subroutine/WaitForVBlank.asm
0C395                           ;;
0C395                           ;; Subroutine that essentially pauses script execution until
0C395                           ;; vBlank happens.
0C395                           ;;
0C395                           ;;
0C395                           
0C395                           sub_WaitForVBlank:
0C395 2C 02 20                      BIT $2002
0C398 10 FB                         BPL sub_WaitForVBlank
0C39A 60                            RTS
0C39B                           
0C39B                           
0C39B                           ;; Game specific subroutines
0C39B                           .include "game/include/subroutines.asm"
0C39B                           ;; additional game-specific subroutines go here
0C39B                           
0C39B                           .include "game/subroutine/ClearScreen.asm"
0C39B                           ;; Subroutine to clear the screen
0C39B                           ;; If it's a game screen, add noise
0C39B                           
0C39B                           sub_ClearScreen:
0C39B                               ;; Check of game screen or not
0C39B A5 2D                         LDA screen_mode
0C39D 29 03                         AND #CHECK_SCREEN_MODE
0C39F C9 01                         CMP #IS_GAME_SCREEN
0C3A1 F0 02                         BEQ +
0C3A3 A9 00                             LDA #$00
0C3A5                               +
0C3A5 85 01                         STA temp+1
0C3A7                               
0C3A7                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C3A7 2C 02 20                      BIT PPU_STATUS
0C3AA A9 20                         LDA #$20
0C3AC 8D 06 20                      STA PPU_ADDR
0C3AF A9 00                         LDA #$00
0C3B1 8D 06 20                      STA PPU_ADDR
0C3B4                               
0C3B4                               ;; Set up tile to draw and loop
0C3B4 85 00                         STA temp
0C3B6 AA                            TAX
0C3B7 A8                            TAY
0C3B8                           
0C3B8                               -     
0C3B8                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C3B8 A5 00                             LDA temp
0C3BA 8D 07 20                          STA PPU_DATA
0C3BD                           
0C3BD                                   ;; Check if we should draw noise next. Noise is drawn if:
0C3BD                                   ;; - Screen mode is game screen
0C3BD                                   ;; - Y between #$06 and #$19 (inclusive)
0C3BD                                   ;; - X between #$02 and #$1D (inclusive)
0C3BD                                   
0C3BD                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C3BD A5 01                             LDA temp+1
0C3BF F0 1C                             BEQ +nextTileInRow
0C3C1                                   
0C3C1                                   ;; If Y < $6, skip the check
0C3C1 C0 06                             CPY #$06
0C3C3 90 18                             BCC +nextTileInRow
0C3C5                                   
0C3C5                                   ;; If X < $1, skip the check
0C3C5 E0 01                             CPX #$01
0C3C7 90 14                             BCC +nextTileInRow
0C3C9                                   
0C3C9                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C3C9 E0 1D                             CPX #$1D
0C3CB D0 04                             BNE +
0C3CD A9 00                                 LDA #$00
0C3CF 85 00                                 STA temp
0C3D1                                   +
0C3D1 B0 0A                             BCS +nextTileInRow
0C3D3                                   
0C3D3                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C3D3 20 73 C3                          JSR sub_GetRandomNumber
0C3D6 29 07                             AND #%00000111
0C3D8 18                                CLC
0C3D9 69 68                             ADC #$68
0C3DB 85 00                             STA temp
0C3DD                           
0C3DD                           +nextTileInRow:
0C3DD                                   
0C3DD                                   ;; Check if a row has been done. If not, draw the next
0C3DD E8                                INX
0C3DE E0 20                             CPX #$20
0C3E0 D0 D6                             BNE -
0C3E2                                   
0C3E2                                   ;; Go to the next row (if any left)
0C3E2 A2 00                             LDX #00
0C3E4 C8                                INY
0C3E5                                   
0C3E5                                   ;; If Y is 1A, skip noise tile check until done drawing
0C3E5 C0 1A                             CPY #$1A
0C3E7 D0 04                             BNE +
0C3E9 A9 00                                 LDA #$00
0C3EB 85 01                                 STA temp+1
0C3ED                                   +
0C3ED                                   
0C3ED C0 1E                             CPY #$1E
0C3EF D0 C7                         BNE -
0C3F1                           
0C3F1                               ;; Clear attribute table
0C3F1 A9 23                         LDA #$23
0C3F3 8D 06 20                      STA PPU_ADDR
0C3F6 A9 C0                         LDA #$C0
0C3F8 8D 06 20                      STA PPU_ADDR
0C3FB A9 00                         LDA #$00
0C3FD A2 40                         LDX #$40
0C3FF                               -
0C3FF 8D 07 20                          STA PPU_DATA
0C402 CA                                DEX
0C403 D0 FA                         BNE -
0C405                               
0C405 60                            RTS0C406                           .include "game/subroutine/ColorizeBall.asm"
0C406                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C406                           ;;
0C406                           ;;  Subroutine: ColorizeBall
0C406                           ;;
0C406                           ;;  Applies the color set through ball_flags to the ball sprite.
0C406                           ;;
0C406                           ;;
0C406                           
0C406                           
0C406                           sub_ColorizeBall:
0C406                           
0C406                               ;; Get color from ball_flags
0C406 4A                            LSR
0C407 4A                            LSR
0C408 4A                            LSR
0C409 4A                            LSR
0C40A 4A                            LSR
0C40B AA                            TAX
0C40C                           
0C40C                               ;; Add new light color of ball to PPU palette
0C40C A9 3F                         LDA #$3F
0C40E 85 00                         STA temp
0C410 A9 11                         LDA #$11
0C412 85 01                         STA temp+1
0C414 BD 6E CC                      LDA tbl_BallColorLight,x
0C417 85 02                         STA temp+2
0C419 20 0A CB                      JSR sub_WriteByteToPPUBuffer
0C41C                               
0C41C                               ;; Add new dark color of ball to PPU palette
0C41C E6 01                         INC temp+1
0C41E BD 68 CC                      LDA tbl_BallColorDark,x
0C421 85 02                         STA temp+2
0C423 20 0A CB                      JSR sub_WriteByteToPPUBuffer
0C426                               
0C426 60                            RTS
0C427                           
0C427                           .include "game/subroutine/ColorsMatch.asm"
0C427                           
0C427                           ;; Subroutine to check if ball color matches colliding tile color
0C427                           
0C427                           sub_ColorsMatch:
0C427                               ;; Save tile color in temp variable
0C427 A5 35                         LDA colliding_tile
0C429 29 0E                         AND #%00001110
0C42B 85 00                         STA temp
0C42D                           
0C42D                               ;; Get ball color
0C42D A5 2C                         LDA ball_flags
0C42F 29 E0                         AND #%11100000
0C431 4A                            LSR
0C432 4A                            LSR
0C433 4A                            LSR
0C434 4A                            LSR
0C435                           
0C435                               ;; Compare with tile color
0C435 C5 00                         CMP temp
0C437 60                            RTS
0C438                           
0C438                           .include "game/subroutine/ConvertXYToTileType.asm"
0C438                           
0C438                           ;; Subroutine to convert the ball's position to a tile type
0C438                           ;; - Expects temp to be y-position of ball within game area
0C438                           ;; - Expects temp+1 to be x-position of ball within game area
0C438                           ;; - Puts result in accumulator and zp variable
0C438                           ;; - Corrupts X-register
0C438                           
0C438                           sub_ConvertXYToTileType:
0C438 A5 01                         LDA temp+1
0C43A 4A                            LSR
0C43B 4A                            LSR
0C43C 4A                            LSR
0C43D 4A                            LSR
0C43E 85 09                         STA temp+9
0C440 A5 00                         LDA temp
0C442 29 F0                         AND #%11110000
0C444 18                            CLC
0C445 65 09                         ADC temp+9
0C447 85 09                         STA temp+9
0C449 AA                            TAX
0C44A BD 00 04                      LDA tile_type, x
0C44D 85 35                         STA colliding_tile
0C44F 60                            RTS
0C450                           
0C450                           .include "game/subroutine/DisableEnableRendering.asm"
0C450                           sub_DisableRendering:
0C450                               ;; Force NMI skip, disable rendering
0C450 A9 01                     	LDA #$01
0C452 85 14                     	STA force_skip_nmi
0C454 20 95 C3                      JSR sub_WaitForVBlank
0C457 A5 12                         LDA soft_ppu_mask
0C459 29 E7                         AND #%11100111
0C45B 8D 01 20                      STA PPU_MASK
0C45E 85 12                         STA soft_ppu_mask
0C460 20 95 C3                      JSR sub_WaitForVBlank
0C463 60                            RTS
0C464                           
0C464                           sub_EnableRendering:
0C464                               ;; Enable rendering
0C464 A9 00                     	LDA #$00
0C466 8D 05 20                  	STA PPU_SCROLL
0C469 8D 05 20                  	STA PPU_SCROLL
0C46C 20 95 C3                      JSR sub_WaitForVBlank
0C46F 85 14                     	STA force_skip_nmi
0C471 A5 12                         LDA soft_ppu_mask
0C473 09 18                         ORA #%00011000
0C475 85 12                         STA soft_ppu_mask
0C477 8D 01 20                      STA PPU_MASK
0C47A 20 95 C3                      JSR sub_WaitForVBlank
0C47D 60                            RTS
0C47E                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C47E                           sub_drawIntroScreenLogoTile:
0C47E B9 50 CB                      LDA tbl_IntroScreenLogoChr,y
0C481 C9 60                         CMP #$60
0C483 D0 08                         BNE +
0C485 20 73 C3                          JSR sub_GetRandomNumber
0C488 29 07                             AND #$07
0C48A 18                                CLC
0C48B 69 60                             ADC #$60
0C48D                               +
0C48D 8D 07 20                      STA PPU_DATA
0C490 60                            RTS
0C491                           .include "game/subroutine/EvaluateTileType.asm"
0C491                           
0C491                           ;; Subroutine to evaluate the colliding tile type and take its
0C491                           ;; corresponding action (move block, kill player, ...)
0C491                           ;; - Expects X-register to be the tile_type offset
0C491                           ;; - Uses zp variable colliding_tile
0C491                           
0C491                           sub_EvaluateTileType:
0C491                           
0C491                               ;; Check if collided tile is a color block
0C491 A5 35                         LDA colliding_tile
0C493 29 80                         AND #IS_COLOR_BLOCK
0C495 D0 03                         BNE +
0C497 4C AA C6                          JMP +checkIfPaintBlock
0C49A                               +
0C49A                               
0C49A                               ;; It's a color block. Check if the colors match
0C49A 20 27 C4                      JSR sub_ColorsMatch
0C49D F0 01                         BEQ +
0C49F                                   ;; Colors don't match - return
0C49F 60                                RTS
0C4A0                               +
0C4A0                           
0C4A0                               ;; Colors match. Destroy color block
0C4A0 A4 30                         LDY ppu_buffer_pointer
0C4A2                               
0C4A2                               ;; (this will be a subroutine)
0C4A2                               ;; Get PPU address from YX index
0C4A2                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C4A2                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C4A2 8A                            TXA
0C4A3 29 C0                         AND #%11000000
0C4A5 18                            CLC
0C4A6 2A                            ROL
0C4A7 2A                            ROL
0C4A8 2A                            ROL
0C4A9 69 20                         ADC #$20
0C4AB 85 00                         STA temp
0C4AD 8A                            TXA
0C4AE 29 0F                         AND #%00001111
0C4B0 0A                            ASL
0C4B1 85 01                         STA temp+1
0C4B3 8A                            TXA
0C4B4 29 30                         AND #%00110000
0C4B6 0A                            ASL
0C4B7 0A                            ASL
0C4B8 18                            CLC
0C4B9 65 01                         ADC temp+1
0C4BB 85 01                         STA temp+1
0C4BD A5 00                         LDA temp
0C4BF 69 00                         ADC #$00
0C4C1 85 00                         STA temp
0C4C3 A5 01                         LDA temp+1
0C4C5 18                            CLC
0C4C6 69 C2                         ADC #$C2
0C4C8 85 01                         STA temp+1
0C4CA A5 00                         LDA temp
0C4CC 69 00                         ADC #$00
0C4CE 85 00                         STA temp
0C4D0                           
0C4D0                               
0C4D0                               ;; (this will also be a subroutine eventually)
0C4D0                               ;; TILE 1: if metatile on top left is solid, draw
0C4D0                               ;; null tile, else draw random noise tile
0C4D0 A9 00                         LDA #%00
0C4D2 85 2F                         STA ppu_buffer_update
0C4D4                               
0C4D4 A5 00                         LDA temp
0C4D6 99 00 03                      STA ppu_buffer,y
0C4D9 C8                            INY
0C4DA A5 01                         LDA temp+1
0C4DC 99 00 03                      STA ppu_buffer,y
0C4DF C8                            INY
0C4E0                               
0C4E0 8A                            TXA
0C4E1 29 0F                         AND #%00001111
0C4E3 F0 11                         BEQ +drawRandomTile
0C4E5                           
0C4E5 8A                            TXA
0C4E6 29 F0                         AND #%11110000
0C4E8 F0 0C                         BEQ +drawRandomTile
0C4EA                           
0C4EA BD EF 03                      LDA tile_type-17,x
0C4ED 29 01                         AND #%00000001
0C4EF F0 05                         BEQ +drawRandomTile  
0C4F1                           
0C4F1                               ;; Draw a null tile
0C4F1 A9 00                         LDA #$00
0C4F3 4C FE C4                      JMP +addToPPUBuffer
0C4F6                               
0C4F6                           +drawRandomTile:
0C4F6                               ;; Draw a random tile
0C4F6 20 73 C3                      JSR sub_GetRandomNumber
0C4F9 29 07                         AND #%00000111
0C4FB 18                            CLC
0C4FC 69 68                         ADC #$68
0C4FE                               
0C4FE                               ;; Add tile to ppu buffer
0C4FE                           +addToPPUBuffer:
0C4FE 99 00 03                      STA ppu_buffer,y
0C501 C8                            INY
0C502                           
0C502                               ;; TILE 2: If metatile above is solid, draw null,
0C502                               ;; else draw random noise.
0C502 E6 01                         INC temp+1
0C504 A5 00                         LDA temp
0C506 99 00 03                      STA ppu_buffer,y
0C509 C8                            INY
0C50A A5 01                         LDA temp+1
0C50C 99 00 03                      STA ppu_buffer,y
0C50F C8                            INY
0C510                               
0C510 8A                            TXA
0C511 29 F0                         AND #%11110000
0C513 F0 0C                         BEQ +drawRandomTile
0C515                               
0C515 BD F0 03                      LDA tile_type-16,x
0C518 29 01                         AND #%00000001
0C51A F0 05                         BEQ +drawRandomTile
0C51C                               
0C51C A9 00                         LDA #%00
0C51E 4C 29 C5                      JMP +addToPPUBuffer
0C521                           
0C521                           +drawRandomTile:
0C521 20 73 C3                      JSR sub_GetRandomNumber
0C524 29 07                         AND #%00000111
0C526 18                            CLC
0C527 69 68                         ADC #$68
0C529                           
0C529                           +addToPPUBuffer:
0C529 99 00 03                      STA ppu_buffer,y
0C52C C8                            INY
0C52D                               
0C52D                               ;; TILE 3 - If metatile left is solid, draw null,
0C52D                               ;; else draw random noise.
0C52D A5 01                         LDA temp+1
0C52F 18                            CLC
0C530 69 1F                         ADC #$1F
0C532 85 01                         STA temp+1
0C534 A5 00                         LDA temp
0C536 69 00                         ADC #$00
0C538 85 00                         STA temp
0C53A 99 00 03                      STA ppu_buffer,y
0C53D C8                            INY
0C53E A5 01                         LDA temp+1
0C540 99 00 03                      STA ppu_buffer,y
0C543 C8                            INY
0C544                               
0C544 8A                            TXA
0C545 29 0F                         AND #%00001111
0C547 F0 0C                         BEQ +drawRandomTile
0C549                               
0C549 BD FF 03                      LDA tile_type-1,x
0C54C 29 01                         AND #%00000001
0C54E F0 05                         BEQ +drawRandomTile
0C550                               
0C550 A9 00                         LDA #%00
0C552 4C 5D C5                      JMP +addToPPUBuffer
0C555                           
0C555                           +drawRandomTile:
0C555 20 73 C3                      JSR sub_GetRandomNumber
0C558 29 07                         AND #%00000111
0C55A 18                            CLC
0C55B 69 68                         ADC #$68
0C55D                               
0C55D                           +addToPPUBuffer:
0C55D 99 00 03                      STA ppu_buffer,y
0C560 C8                            INY
0C561                               
0C561                               ;; TILE 4 - Always random noise
0C561 E6 01                         INC temp+1
0C563 A5 00                         LDA temp
0C565 99 00 03                      STA ppu_buffer,y
0C568 C8                            INY
0C569 A5 01                         LDA temp+1
0C56B 99 00 03                      STA ppu_buffer,y
0C56E C8                            INY
0C56F 20 73 C3                      JSR sub_GetRandomNumber
0C572 29 07                         AND #%00000111
0C574 18                            CLC
0C575 69 68                         ADC #$68
0C577 99 00 03                      STA ppu_buffer,y
0C57A C8                            INY
0C57B                           
0C57B                               ;; TILE 5 - If tile on the right is solid, skip,
0C57B                               ;; else draw random noise tile
0C57B E6 01                         INC temp+1
0C57D                               
0C57D 8A                            TXA
0C57E 29 0F                         AND #%00001111
0C580 C9 0D                         CMP #$0D
0C582 F0 1F                         BEQ +skipTile
0C584                               
0C584 BD 01 04                      LDA tile_type+1,x
0C587 29 01                         AND #%00000001
0C589 D0 18                         BNE +skipTile
0C58B A5 00                             LDA temp
0C58D 99 00 03                          STA ppu_buffer,y
0C590 C8                                INY
0C591 A5 01                             LDA temp+1
0C593 99 00 03                          STA ppu_buffer,y
0C596 C8                                INY
0C597 20 73 C3                          JSR sub_GetRandomNumber
0C59A 29 07                             AND #%00000111
0C59C 18                                CLC
0C59D 69 68                             ADC #$68
0C59F 99 00 03                          STA ppu_buffer,y
0C5A2 C8                                INY    
0C5A3                               +skipTile:
0C5A3                           
0C5A3                               ;; TILE 6 - If tile on bottom is solid, skip,
0C5A3                               ;; else draw random noise
0C5A3 A5 01                         LDA temp+1
0C5A5 18                            CLC
0C5A6 69 1F                         ADC #$1F
0C5A8 85 01                         STA temp+1
0C5AA A5 00                         LDA temp
0C5AC 69 00                         ADC #$00
0C5AE 85 00                         STA temp
0C5B0                           
0C5B0 8A                            TXA
0C5B1 29 F0                         AND #%11110000
0C5B3 C9 90                         CMP #$90
0C5B5 F0 1F                         BEQ +skipTile
0C5B7                           
0C5B7 BD 10 04                      LDA tile_type+16,x
0C5BA 29 01                         AND #%00000001
0C5BC D0 18                         BNE +skipTile
0C5BE A5 00                             LDA temp
0C5C0 99 00 03                          STA ppu_buffer,y
0C5C3 C8                                INY
0C5C4 A5 01                             LDA temp+1
0C5C6 99 00 03                          STA ppu_buffer,y
0C5C9 C8                                INY
0C5CA 20 73 C3                          JSR sub_GetRandomNumber
0C5CD 29 07                             AND #%00000111
0C5CF 18                                CLC
0C5D0 69 68                             ADC #$68
0C5D2 99 00 03                          STA ppu_buffer,y
0C5D5 C8                                INY    
0C5D6                               +skipTile:
0C5D6                               
0C5D6                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C5D6                               ;; else draw random noise
0C5D6 E6 01                         INC temp+1
0C5D8                           
0C5D8 8A                            TXA
0C5D9 29 F0                         AND #%11110000
0C5DB C9 90                         CMP #$90
0C5DD F0 26                         BEQ +skipTile
0C5DF                               
0C5DF 8A                            TXA
0C5E0 29 0F                         AND #%00001111
0C5E2 C9 0D                         CMP #$0D
0C5E4 F0 1F                         BEQ +skipTile
0C5E6                               
0C5E6 BD 11 04                      LDA tile_type+17,x
0C5E9 29 01                         AND #%00000001
0C5EB D0 18                         BNE +skipTile
0C5ED A5 00                             LDA temp
0C5EF 99 00 03                          STA ppu_buffer,y
0C5F2 C8                                INY
0C5F3 A5 01                             LDA temp+1
0C5F5 99 00 03                          STA ppu_buffer,y
0C5F8 C8                                INY
0C5F9 20 73 C3                          JSR sub_GetRandomNumber
0C5FC 29 07                             AND #%00000111
0C5FE 18                                CLC
0C5FF 69 68                             ADC #$68
0C601 99 00 03                          STA ppu_buffer,y
0C604 C8                                INY    
0C605                               +skipTile:   
0C605                           
0C605                           
0C605                               ;; - Update attribute table accordingly through ppu buffer
0C605 A9 23                         LDA #$23
0C607 99 00 03                      STA ppu_buffer,y
0C60A C8                            INY
0C60B                               
0C60B 8A                            TXA
0C60C 29 F0                         AND #%11110000
0C60E 4A                            LSR
0C60F 4A                            LSR
0C610 4A                            LSR
0C611 4A                            LSR
0C612 18                            CLC
0C613 69 01                         ADC #1
0C615 4A                            LSR
0C616 0A                            ASL
0C617 0A                            ASL
0C618 0A                            ASL
0C619 18                            CLC
0C61A 69 C8                         ADC #$C8
0C61C 85 00                         STA temp
0C61E 8A                            TXA
0C61F 29 0F                         AND #%00001111
0C621 18                            CLC
0C622 69 01                         ADC #$01
0C624 4A                            LSR
0C625 18                            CLC
0C626 65 00                         ADC temp
0C628 85 00                         STA temp
0C62A 99 00 03                      STA ppu_buffer,y
0C62D C8                            INY
0C62E                                  
0C62E 8A                            TXA
0C62F 29 10                         AND #%00010000
0C631 F0 05                         BEQ +
0C633 A9 F0                             LDA #%11110000
0C635 4C 3A C6                          JMP ++
0C638                               +
0C638 A9 0F                         LDA #%00001111
0C63A                               ++
0C63A 85 02                         STA temp+2
0C63C                               
0C63C 8A                            TXA
0C63D 48                            PHA
0C63E 29 01                         AND #%00000001
0C640 F0 07                         BEQ +
0C642 A5 02                             LDA temp+2
0C644 09 CC                             ORA #%11001100
0C646 4C 4D C6                          JMP ++
0C649                               +
0C649 A5 02                         LDA temp+2
0C64B 09 33                         ORA #%00110011
0C64D                               ++
0C64D 85 02                         STA temp+2
0C64F                               
0C64F A5 00                         LDA temp
0C651 38                            SEC
0C652 E9 C0                         SBC #$C0
0C654 AA                            TAX
0C655 BD A0 04                      LDA tile_attributes,x
0C658 25 02                         AND temp+2
0C65A 9D A0 04                      STA tile_attributes,x
0C65D 99 00 03                      STA ppu_buffer,y
0C660 C8                            INY
0C661 68                            PLA
0C662 AA                            TAX
0C663                           
0C663                               ;; Tell PPU to update tiles and attributes next frame
0C663 84 30                         STY ppu_buffer_pointer
0C665 A9 01                         LDA #$01
0C667 85 2F                         STA ppu_buffer_update
0C669                            
0C669                               
0C669                               ;; - Load destruction animation on tile
0C669                               ;; Get most recent slot for explosion    
0C669 8A                            TXA
0C66A 85 02                         STA temp+2
0C66C A6 31                         LDX explosion_pointer
0C66E                           
0C66E                               ;; If 0, use max pointer value
0C66E D0 02                         BNE +
0C670 A2 04                             LDX #MAX_ANIMATIONS
0C672                               +
0C672                           
0C672                               ;; Decrease pointer by one
0C672 CA                            DEX
0C673 86 31                         STX explosion_pointer
0C675                           
0C675                               ;; Load explosion data into RAM
0C675 A9 00                         LDA #$00
0C677 9D 34 03                      STA explosion_currentframe,x
0C67A                           
0C67A A9 04                         LDA #ANIMATION_SPEED
0C67C 9D 30 03                      STA explosion_framecounter,x
0C67F                           
0C67F A5 02                         LDA temp+2
0C681 29 0F                         AND #%00001111
0C683 A8                            TAY
0C684 B9 BD D3                      LDA tbl_Times16,y
0C687 18                            CLC
0C688 69 0E                         ADC #$0E
0C68A 9D 3C 03                      STA explosion_x,x
0C68D                           
0C68D A5 02                         LDA temp+2
0C68F 29 F0                         AND #%11110000
0C691 18                            CLC
0C692 69 29                         ADC #$29
0C694 9D 40 03                      STA explosion_y,x
0C697                           
0C697 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C699 9D 38 03                      STA explosion_attributes,x
0C69C A9 01                         LDA #$01
0C69E 9D 44 03                      STA explosion_active,x
0C6A1                           
0C6A1 A5 02                         LDA temp+2
0C6A3 AA                            TAX
0C6A4                               
0C6A4                               
0C6A4                               ;; - Write #$00 in tile type ram (makes not-solid)
0C6A4 A9 00                         LDA #$00
0C6A6 9D 00 04                      STA tile_type, x
0C6A9                              
0C6A9                               
0C6A9                               ;; - If there are no color blocks left:
0C6A9                               ;;   - Freeze ball
0C6A9                               ;;   - Initiate level-win state
0C6A9                               ;; [@TODO]
0C6A9                               
0C6A9 60                            RTS
0C6AA                           
0C6AA                           +checkIfPaintBlock:
0C6AA                           
0C6AA                           
0C6AA                               ;; Check if collided tile is a paint block
0C6AA A5 35                         LDA colliding_tile
0C6AC 29 20                         AND #IS_PAINT_BLOCK
0C6AE F0 1A                         BEQ +checkIfDeathBlock
0C6B0                                   ;; It's a paint block. Update ball color
0C6B0                                   ;; Save x-register
0C6B0 8A                                TXA
0C6B1 48                                PHA
0C6B2                           
0C6B2                                   ;; Get tile color
0C6B2 A5 35                             LDA colliding_tile
0C6B4 29 0E                             AND #%00001110
0C6B6 0A                                ASL
0C6B7 0A                                ASL
0C6B8 0A                                ASL
0C6B9 0A                                ASL
0C6BA 85 00                             STA temp
0C6BC                           
0C6BC                                   ;; Apply tile color to ball
0C6BC A5 2C                             LDA ball_flags
0C6BE 29 1F                             AND #%00011111
0C6C0 05 00                             ORA temp
0C6C2 85 2C                             STA ball_flags
0C6C4 20 06 C4                          JSR sub_ColorizeBall
0C6C7                           
0C6C7                                   ;; Restore x-register
0C6C7 68                                PLA
0C6C8 AA                                TAX
0C6C9                           
0C6C9                                   ;; Return
0C6C9 60                                RTS
0C6CA                               +checkIfDeathBlock:
0C6CA                           
0C6CA                               ;; Check if collided tile is a death block
0C6CA A5 35                         LDA colliding_tile
0C6CC 29 10                         AND #IS_DEATH_BLOCK
0C6CE F0 01                         BEQ +checkIfMoveBlock
0C6D0                                   ;; It is a death block. Kill player and return (@TODO)
0C6D0                           ;        LDA ball_flags
0C6D0                           ;        ORA #%00000101
0C6D0                           ;        STA ball_flags
0C6D0 60                                RTS
0C6D1                               +checkIfMoveBlock:
0C6D1                           
0C6D1                               ;; Check if collided tile is a move block
0C6D1 A5 35                         LDA colliding_tile
0C6D3 29 40                         AND #IS_MOVE_BLOCK
0C6D5 F0 07                         BEQ +done
0C6D7                                   ;; It is a move block. Check if colors match
0C6D7 20 27 C4                          JSR sub_ColorsMatch
0C6DA F0 01                             BEQ +
0C6DC                                       ;; Colors don't match - return
0C6DC 60                                    RTS
0C6DD                                   +
0C6DD                           
0C6DD                                   ;; Colors match.
0C6DD                                   ;; - Check if next tile is a solid
0C6DD                                   ;; - If not, move the tile:
0C6DD                                   ;;   - Add the tiles that need updating to ppu buffer
0C6DD                                   ;;   - Add move tile sprite over the original tile
0C6DD                                   ;;   - Initiate moving the sprite that way for 16px
0C6DD                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C6DD                                   ;;   - Update attribute table accordingly through ppu buffer
0C6DD                                   ;; - After moving the sprite, in a different routine:
0C6DD                                   ;;   - Add move tile data on the new tile location
0C6DD                                   ;;   - Write the original tile type data on new position in ram
0C6DD                                   ;;   - Destroy sprite
0C6DD                                   ;;   - Update attribute table accordingly through ppu buffer
0C6DD                                   ;; (@TODO)
0C6DD 60                                RTS
0C6DE                               +done:
0C6DE                           
0C6DE                               ;; Return
0C6DE 60                            RTS
0C6DF                           
0C6DF                           .include "game/subroutine/InitiateNudge.asm"
0C6DF                           
0C6DF                           sub_InitiateNudge:
0C6DF 85 2C                         STA ball_flags
0C6E1 A9 05                         LDA #NUDGE_FRAMES
0C6E3 85 33                         STA nudge_counter
0C6E5 60                            RTS
0C6E6                           
0C6E6                           .include "game/subroutine/JumpToPointer.asm"
0C6E6                           sub_JumpToPointer:
0C6E6 6C 0C 00                      JMP (pointer)
0C6E9                               ;RTS must be handled by the routine (pointer) jumps to
0C6E9                           .include "game/subroutine/LoadGameScreen.asm"
0C6E9                           sub_LoadGameScreen:
0C6E9                           
0C6E9                               ;; Clear the screen
0C6E9 20 9B C3                      JSR sub_ClearScreen
0C6EC                               
0C6EC                               ;; Clear collision and attribute data
0C6EC A2 00                         LDX #$00
0C6EE 8A                            TXA
0C6EF                               -
0C6EF 9D 00 04                          STA tile_type,x
0C6F2 E8                                INX
0C6F3 D0 FA                         BNE -
0C6F5                               
0C6F5                               ;; Get pointer from current level
0C6F5 A6 34                         LDX current_level
0C6F7 BD 72 D3                      LDA tbl_lvl_layout_lo,x
0C6FA 85 0C                         STA pointer
0C6FC BD 59 D3                      LDA tbl_lvl_layout_hi,x
0C6FF 85 0D                         STA pointer+1
0C701                           
0C701                               ;; Set up the loop
0C701 A0 00                         LDY #$00
0C703                           -drawRowColumnLoop:
0C703                           
0C703                               ;; Load (x,y) of current set of tiles
0C703 B1 0C                         LDA (pointer),y
0C705                           
0C705                               ;; Check if level is done; if so, skip the loop
0C705 C9 FF                         CMP #LEVEL_END
0C707 D0 03                         BNE +
0C709 4C 52 C8                          JMP +doneLevelLoad
0C70C                               +
0C70C                           
0C70C                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C70C 85 00                         STA temp
0C70E C8                            INY
0C70F B1 0C                         LDA (pointer),y
0C711 85 01                         STA temp+1
0C713                               
0C713                               ;; Convert (x,y) to PPU address
0C713                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C713 A5 00                         LDA temp
0C715 29 0F                         AND #%00001111
0C717 4A                            LSR
0C718 4A                            LSR
0C719 09 20                         ORA #$20
0C71B 85 02                         STA temp+2
0C71D                               
0C71D                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C71D A5 00                         LDA temp
0C71F 29 F0                         AND #%11110000
0C721 4A                            LSR
0C722 4A                            LSR
0C723 4A                            LSR
0C724 85 03                         STA temp+3
0C726                               
0C726 A5 00                         LDA temp
0C728 29 03                         AND #%00000011
0C72A AA                            TAX
0C72B BD CD D3                      LDA tbl_Times64,x
0C72E 18                            CLC
0C72F 65 03                         ADC temp+3
0C731 18                            CLC
0C732 69 C2                         ADC #$C2
0C734 85 03                         STA temp+3
0C736                               
0C736                               ;; Add carry to temp+2
0C736 A5 02                         LDA temp+2
0C738 69 00                         ADC #$00
0C73A 85 02                         STA temp+2
0C73C                           
0C73C                               ;; Convert tile data to loop count and tile type
0C73C                               ;; temp+4 = color
0C73C A5 01                         LDA temp+1
0C73E 29 07                         AND #%00000111
0C740 85 04                         STA temp+4
0C742                               
0C742                               ;; If color = 7, this is a wall
0C742 C9 07                         CMP #%00000111
0C744 F0 12                         BEQ +wallHack
0C746                                   
0C746                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C746 29 01                             AND #%00000001
0C748 F0 02                             BEQ +
0C74A A9 05                                 LDA #$05
0C74C                                   +
0C74C 85 07                             STA temp+7
0C74E                                
0C74E                                   ;; temp+5 = tile type
0C74E A5 01                             LDA temp+1
0C750 4A                                LSR
0C751 4A                                LSR
0C752 4A                                LSR
0C753 29 03                             AND #%00000011
0C755 4C 5E C7                          JMP +setTileType
0C758                               +wallHack:
0C758                               
0C758                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C758 A9 00                         LDA #$00
0C75A 85 07                         STA temp+7
0C75C A9 04                         LDA #$04
0C75E                           
0C75E                           +setTileType:    
0C75E 85 05                         STA temp+5
0C760                               
0C760                               ;; X = tile offset
0C760 18                            CLC
0C761 65 07                         ADC temp+7
0C763 AA                            TAX
0C764                               
0C764                               ;; temp+6 = number of tiles
0C764 A5 01                         LDA temp+1
0C766 29 60                         AND #%01100000
0C768 4A                            LSR
0C769 4A                            LSR
0C76A 4A                            LSR
0C76B 4A                            LSR
0C76C 4A                            LSR
0C76D 85 06                         STA temp+6
0C76F                               
0C76F                               ;; Translate (x,y) to (y,x) for tile RAM
0C76F A5 00                         LDA temp
0C771 0A                            ASL
0C772 0A                            ASL
0C773 0A                            ASL
0C774 0A                            ASL
0C775 85 08                         STA temp+8
0C777 A5 00                         LDA temp
0C779 4A                            LSR
0C77A 4A                            LSR
0C77B 4A                            LSR
0C77C 4A                            LSR
0C77D 05 08                         ORA temp+8
0C77F 85 00                         STA temp
0C781                               
0C781                               ;; Set up loop
0C781 98                            TYA
0C782 48                            PHA
0C783 A4 06                         LDY temp+6
0C785                           
0C785                               -drawTileLoop:
0C785                                   ;; Write PPU address
0C785 2C 02 20                          BIT PPU_STATUS
0C788 A5 02                             LDA temp+2
0C78A 8D 06 20                          STA PPU_ADDR
0C78D A5 03                             LDA temp+3
0C78F 8D 06 20                          STA PPU_ADDR
0C792                                   
0C792                                   ;; Write first and second tile
0C792 BD D1 D3                          LDA tbl_GametileTopLeft,x
0C795 8D 07 20                          STA PPU_DATA
0C798 BD DB D3                          LDA tbl_GametileTopRight,x
0C79B 8D 07 20                          STA PPU_DATA
0C79E                                   
0C79E                                   ;; Update PPU address
0C79E 2C 02 20                          BIT PPU_STATUS
0C7A1 A5 02                             LDA temp+2
0C7A3 8D 06 20                          STA PPU_ADDR
0C7A6 A5 03                             LDA temp+3
0C7A8 18                                CLC
0C7A9 69 20                             ADC #$20
0C7AB 8D 06 20                          STA PPU_ADDR
0C7AE                                   
0C7AE                                   ;; Write third and fourth tile
0C7AE BD E5 D3                          LDA tbl_GametileBottomLeft,x
0C7B1 8D 07 20                          STA PPU_DATA
0C7B4 BD EF D3                          LDA tbl_GametileBottomRight,x
0C7B7 8D 07 20                          STA PPU_DATA
0C7BA                           
0C7BA                                   ;; Push x-register to stack
0C7BA 8A                                TXA
0C7BB 48                                PHA
0C7BC                                   
0C7BC                                   ;; Update tile RAM (aka collision table)
0C7BC A6 05                             LDX temp+5
0C7BE BD F9 D3                          LDA tbl_GameTileRamByte,x
0C7C1 05 04                             ORA temp+4
0C7C3 0A                                ASL
0C7C4 09 01                             ORA #%00000001
0C7C6 A6 00                             LDX temp
0C7C8 9D 00 04                          STA tile_type,x
0C7CB                           
0C7CB                                   ;; Check if shade 1 should be drawn
0C7CB E8                                INX
0C7CC BD 00 04                          LDA tile_type,x
0C7CF D0 05                             BNE +
0C7D1 A9 00                                 LDA #$00
0C7D3 8D 07 20                              STA PPU_DATA
0C7D6                                   +
0C7D6                                   
0C7D6                                   ;; Check if shade 2 should be drawn
0C7D6 A5 03                             LDA temp+3
0C7D8 18                                CLC
0C7D9 69 41                             ADC #$41
0C7DB 85 03                             STA temp+3
0C7DD A5 02                             LDA temp+2
0C7DF 69 00                             ADC #$00
0C7E1 85 02                             STA temp+2
0C7E3                                   
0C7E3 8A                                TXA
0C7E4 18                                CLC
0C7E5 69 0F                             ADC #$0F
0C7E7 AA                                TAX
0C7E8                                   
0C7E8 BD 00 04                          LDA tile_type,x
0C7EB D0 0F                             BNE +
0C7ED A5 02                                 LDA temp+2
0C7EF 8D 06 20                              STA PPU_ADDR
0C7F2 A5 03                                 LDA temp+3
0C7F4 8D 06 20                              STA PPU_ADDR
0C7F7 A9 00                                 LDA #$00
0C7F9 8D 07 20                              STA PPU_DATA
0C7FC                                   +
0C7FC                           
0C7FC                                   ;; Check if shade 3 should be drawn
0C7FC E8                                INX
0C7FD E6 03                             INC temp+3
0C7FF BD 00 04                          LDA tile_type,x
0C802 D0 0F                             BNE +
0C804 A5 02                                 LDA temp+2
0C806 8D 06 20                              STA PPU_ADDR
0C809 A5 03                                 LDA temp+3
0C80B 8D 06 20                              STA PPU_ADDR
0C80E A9 00                                 LDA #$00
0C810 8D 07 20                              STA PPU_DATA
0C813                                   +
0C813                                   
0C813                                   ;; Restore x-register from stack
0C813 68                                PLA
0C814 AA                                TAX
0C815                                   
0C815                                   ;; Reset pointer for next tile
0C815 A5 03                             LDA temp+3
0C817 38                                SEC
0C818 E9 42                             SBC #$42
0C81A 85 03                             STA temp+3
0C81C A5 02                             LDA temp+2
0C81E E9 00                             SBC #$00
0C820 85 02                             STA temp+2
0C822                                   
0C822                                   ;; Draw next metatile in this loop (if any left)
0C822 88                                DEY
0C823 30 27                             BMI +doneDrawingRowColumn
0C825                                   
0C825                                   ;; Is it a row or a column?
0C825 A5 01                             LDA temp+1
0C827 10 17                             BPL +
0C829                                       ;; It is a column: move pointer down (+$40)
0C829 A5 03                                 LDA temp+3
0C82B 18                                    CLC
0C82C 69 40                                 ADC #$40
0C82E 85 03                                 STA temp+3
0C830 A5 02                                 LDA temp+2
0C832 69 00                                 ADC #$00
0C834 85 02                                 STA temp+2
0C836                                       
0C836                                       ;; Add 16 to temp (as a tile RAM pointer)
0C836 A5 00                                 LDA temp
0C838 18                                    CLC
0C839 69 10                                 ADC #$10
0C83B 85 00                                 STA temp
0C83D 4C 49 C8                              JMP +drawNextTile
0C840                                   +
0C840                                   
0C840                                   ;; It is a row: move pointer right (+$02)
0C840 A5 03                             LDA temp+3
0C842 18                                CLC
0C843 69 02                             ADC #$02
0C845 85 03                             STA temp+3
0C847                                   
0C847                                   ;; Add 1 to temp (as a tile RAM pointer)
0C847 E6 00                             INC temp
0C849                           
0C849                               
0C849                               ;; Next tile in the row/column
0C849                                   +drawNextTile:
0C849 4C 85 C7                      JMP -drawTileLoop
0C84C                           
0C84C                               ;; Go to the next set of tiles
0C84C                           +doneDrawingRowColumn:
0C84C 68                            PLA
0C84D A8                            TAY
0C84E C8                            INY
0C84F 4C 03 C7                      JMP -drawRowColumnLoop
0C852                           
0C852                           ;; Level loading is done
0C852                           +doneLevelLoad:
0C852                           
0C852                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C852 A9 20                         LDA #$20
0C854 8D 06 20                      STA PPU_ADDR
0C857 A9 A2                         LDA #$A2
0C859 8D 06 20                      STA PPU_ADDR
0C85C A9 35                         LDA #$35
0C85E 20 71 CA                      JSR sub_Draw28HorizontalTiles
0C861                           
0C861                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C861 A9 23                         LDA #$23
0C863 8D 06 20                      STA PPU_ADDR
0C866 A9 42                         LDA #$42
0C868 8D 06 20                      STA PPU_ADDR
0C86B A9 31                         LDA #$31
0C86D 20 71 CA                      JSR sub_Draw28HorizontalTiles
0C870                           
0C870                               ;; Left & right game bounds
0C870                               ;; Set PPU_ADDR and store in temp variables
0C870 A9 20                         LDA #$20
0C872 85 00                         STA temp
0C874 8D 06 20                      STA PPU_ADDR
0C877 A9 C1                         LDA #$C1
0C879 85 01                         STA temp+1
0C87B 8D 06 20                      STA PPU_ADDR
0C87E                               
0C87E                               ;; Set vertical bound tile and set up loop
0C87E A0 33                         LDY #$33
0C880 A2 14                         LDX #20
0C882                               -
0C882                                   ;; Show left tile
0C882 8C 07 20                          STY PPU_DATA
0C885                                   
0C885                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C885 A5 00                             LDA temp
0C887 8D 06 20                          STA PPU_ADDR
0C88A A5 01                             LDA temp+1
0C88C 18                                CLC
0C88D 69 1D                             ADC #29
0C88F 85 01                             STA temp+1
0C891 8D 06 20                          STA PPU_ADDR
0C894                           
0C894                                   ;; Show right tile
0C894 8C 07 20                          STY PPU_DATA
0C897                           
0C897                                   ;; Check if we're done yet
0C897 CA                                DEX
0C898 F0 18                             BEQ +drawCorners
0C89A                                   
0C89A                                   ;; Not done yet: add 3 to low byte for next left bound
0C89A A5 01                             LDA temp+1
0C89C 18                                CLC
0C89D 69 03                             ADC #3
0C89F 85 01                             STA temp+1
0C8A1                                   
0C8A1                                   ;; Apply carry to high byte
0C8A1 A5 00                             LDA temp
0C8A3 69 00                             ADC #$00
0C8A5 85 00                             STA temp
0C8A7                                   
0C8A7                                   ;; Store next PPU_ADDR to draw at
0C8A7 8D 06 20                          STA PPU_ADDR
0C8AA A5 01                             LDA temp+1
0C8AC 8D 06 20                          STA PPU_ADDR
0C8AF 4C 82 C8                      JMP -
0C8B2                               
0C8B2                               
0C8B2                           
0C8B2                           +drawCorners:
0C8B2                               ;; Draw the corners of the playing field
0C8B2 A9 20                         LDA #$20
0C8B4 8D 06 20                      STA PPU_ADDR
0C8B7 A9 A1                         LDA #$A1
0C8B9 8D 06 20                      STA PPU_ADDR
0C8BC A9 39                         LDA #$39
0C8BE 8D 07 20                      STA PPU_DATA
0C8C1                           
0C8C1 A9 20                         LDA #$20
0C8C3 8D 06 20                      STA PPU_ADDR
0C8C6 A9 BE                         LDA #$BE
0C8C8 8D 06 20                      STA PPU_ADDR
0C8CB A9 3A                         LDA #$3A
0C8CD 8D 07 20                      STA PPU_DATA
0C8D0                               ;; (added background tile for Sprite-0 hit)
0C8D0 A9 3F                         LDA #$3F
0C8D2 8D 07 20                      STA PPU_DATA
0C8D5                           
0C8D5 A9 23                         LDA #$23
0C8D7 8D 06 20                      STA PPU_ADDR
0C8DA A9 41                         LDA #$41
0C8DC 8D 06 20                      STA PPU_ADDR
0C8DF A9 36                         LDA #$36
0C8E1 8D 07 20                      STA PPU_DATA
0C8E4                           
0C8E4 A9 23                         LDA #$23
0C8E6 8D 06 20                      STA PPU_ADDR
0C8E9 A9 5E                         LDA #$5E
0C8EB 8D 06 20                      STA PPU_ADDR
0C8EE A9 34                         LDA #$34
0C8F0 8D 07 20                      STA PPU_DATA
0C8F3                           
0C8F3                           
0C8F3                               ;; Draw the hud labels
0C8F3 A9 20                         LDA #$20
0C8F5 8D 06 20                      STA PPU_ADDR
0C8F8 A9 62                         LDA #$62
0C8FA 8D 06 20                      STA PPU_ADDR
0C8FD A2 00                         LDX #$00
0C8FF                               -
0C8FF BD FE D3                          LDA tbl_HudText,x
0C902 8D 07 20                          STA PPU_DATA
0C905 E8                                INX
0C906 E0 1C                             CPX #28
0C908 D0 F5                         BNE -
0C90A                           
0C90A                           
0C90A                               ;; Draw the current score
0C90A A9 20                         LDA #$20
0C90C 8D 06 20                      STA PPU_ADDR
0C90F A9 83                         LDA #$83
0C911 8D 06 20                      STA PPU_ADDR
0C914 A2 00                         LDX #$00
0C916                               -
0C916 B5 1C                             LDA ball_score,x
0C918 18                                CLC
0C919 69 01                             ADC #$01
0C91B 8D 07 20                          STA PPU_DATA
0C91E E8                                INX
0C91F E0 06                             CPX #$06
0C921 D0 F3                         BNE -
0C923                           
0C923                           
0C923                               ;; Draw the level number
0C923                               ;; (with primitive HEX>DEC)
0C923 A5 34                         LDA current_level
0C925 18                            CLC
0C926 69 01                         ADC #$01
0C928 85 01                         STA temp+1
0C92A                               
0C92A C9 14                         CMP #20
0C92C B0 13                         BCS +tempIsTwo
0C92E                               
0C92E C9 0A                         CMP #10
0C930 B0 05                         BCS +tempIsOne
0C932                               
0C932 A9 00                         LDA #$00
0C934 4C 48 C9                      JMP +setTemp
0C937                               
0C937                           +tempIsOne:
0C937 38                            SEC
0C938 E9 0A                         SBC #10
0C93A 85 01                         STA temp+1
0C93C A9 01                         LDA #$01
0C93E 4C 48 C9                      JMP +setTemp
0C941                               
0C941                           +tempIsTwo:
0C941 38                            SEC
0C942 E9 14                         SBC #20
0C944 85 01                         STA temp+1
0C946 A9 02                         LDA #$02
0C948                           
0C948                           +setTemp:
0C948 85 00                         STA temp
0C94A                               
0C94A E6 00                         INC temp
0C94C E6 01                         INC temp+1
0C94E                               
0C94E A9 20                         LDA #$20
0C950 8D 06 20                      STA PPU_ADDR
0C953 A9 8B                         LDA #$8B
0C955 8D 06 20                      STA PPU_ADDR
0C958 A5 00                         LDA temp
0C95A 8D 07 20                      STA PPU_DATA
0C95D A5 01                         LDA temp+1
0C95F 8D 07 20                      STA PPU_DATA
0C962                           
0C962                           
0C962                               ;; Draw lives (presumes lives to be capped at 9)
0C962 A9 20                         LDA #$20
0C964 8D 06 20                      STA PPU_ADDR
0C967 A9 92                         LDA #$92
0C969 8D 06 20                      STA PPU_ADDR
0C96C A6 1B                         LDX ball_lives
0C96E E8                            INX
0C96F 8E 07 20                      STX PPU_DATA
0C972                           
0C972                           
0C972                               ;; Set and draw bonus
0C972 A9 07                         LDA #$07
0C974 85 22                         STA ball_bonus
0C976 A9 09                         LDA #$09
0C978 85 23                         STA ball_bonus+1
0C97A 85 24                         STA ball_bonus+2
0C97C                               
0C97C A9 20                         LDA #$20
0C97E 8D 06 20                      STA PPU_ADDR
0C981 A9 9A                         LDA #$9A
0C983 8D 06 20                      STA PPU_ADDR
0C986 A2 00                         LDX #$00
0C988                               -
0C988 B5 22                             LDA ball_bonus,x
0C98A 18                                CLC
0C98B 69 01                             ADC #$01
0C98D 8D 07 20                          STA PPU_DATA
0C990 E8                                INX
0C991 E0 03                             CPX #$03
0C993 D0 F3                         BNE -
0C995                           
0C995                           
0C995                               ;; Set attribute data to RAM
0C995                               
0C995                               ;; Byte 0-7 of attribute ram should be #%10100000
0C995 A2 00                         LDX #$00
0C997 A9 A0                         LDA #$A0
0C999                               -
0C999 9D A0 04                          STA tile_attributes,x
0C99C E8                                INX
0C99D E0 08                             CPX #$08
0C99F D0 F8                         BNE -
0C9A1                           
0C9A1                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C9A1                           
0C9A1                           -attributeLoop:
0C9A1                               ;; Reset current attribute value
0C9A1 A9 00                         LDA #$00
0C9A3 85 02                         STA temp+2
0C9A5                           
0C9A5                               ;; Get first metatile in tile ram based on attribute index
0C9A5                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C9A5 8A                            TXA
0C9A6                           
0C9A6 38                            SEC
0C9A7 E9 08                         SBC #$08
0C9A9 85 01                         STA temp+1      ; attr - 8 (temp1)
0C9AB 0A                            ASL             ; * 2
0C9AC 85 00                         STA temp        ; temp = temp1 * 2
0C9AE                           
0C9AE A5 01                         LDA temp+1      ; temp1
0C9B0 29 F8                         AND #%11111000  ; rounded down to 8's
0C9B2 0A                            ASL             ; * 2
0C9B3 18                            CLC
0C9B4 65 00                         ADC temp        ; + temp1 * 2
0C9B6 85 00                         STA temp        ; first metatile
0C9B8                           
0C9B8                               ;; Store first metatile in y-register
0C9B8 A8                            TAY
0C9B9                           
0C9B9                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C9B9 8A                            TXA
0C9BA 29 07                         AND #%00000111
0C9BC C9 07                         CMP #%00000111
0C9BE F0 0B                         BEQ +
0C9C0                           
0C9C0                               ;; If X >= $30, don't apply bottom right metatile
0C9C0 E0 30                         CPX #$30
0C9C2 B0 07                         BCS +
0C9C4                               
0C9C4                               ;; Add metatile1 subpalette to attribute value
0C9C4 B9 00 04                      LDA tile_type,y
0C9C7 29 0C                         AND #%00001100
0C9C9 85 02                         STA temp+2
0C9CB                               +
0C9CB                           
0C9CB                           
0C9CB                               ;; Apply second metatile
0C9CB 88                            DEY
0C9CC                           
0C9CC                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C9CC 8A                            TXA
0C9CD 29 07                         AND #%00000111
0C9CF F0 10                         BEQ +
0C9D1                           
0C9D1                               ;; If X >= $30, don't apply bottom left metatile
0C9D1 E0 30                         CPX #$30
0C9D3 B0 0C                         BCS +
0C9D5                           
0C9D5                           
0C9D5                           
0C9D5                               ;; Add metatile2 subpalette to attribute value
0C9D5 B9 00 04                      LDA tile_type,y
0C9D8 29 0C                         AND #%00001100
0C9DA 4A                            LSR
0C9DB 4A                            LSR
0C9DC 05 02                         ORA temp+2
0C9DE 4C E3 C9                      JMP ++
0C9E1                               +
0C9E1 A5 02                         LDA temp+2
0C9E3                               ++
0C9E3 0A                            ASL
0C9E4 0A                            ASL
0C9E5 85 02                         STA temp+2
0C9E7                           
0C9E7                           
0C9E7                               ;; Apply third metatile
0C9E7 98                            TYA
0C9E8 38                            SEC
0C9E9 E9 0F                         SBC #$0F
0C9EB A8                            TAY
0C9EC                           
0C9EC                               ;; If X MOD 8 == 7, don't apply top right metatile
0C9EC 8A                            TXA
0C9ED 29 07                         AND #%00000111
0C9EF C9 07                         CMP #%00000111
0C9F1 F0 11                         BEQ +
0C9F3                           
0C9F3                               ;; If X < $10, don't apply top right metatile
0C9F3 8A                            TXA
0C9F4 29 F0                         AND #%11110000
0C9F6 F0 0C                         BEQ +
0C9F8                           
0C9F8                               ;; Add metatile3 subpalette to attribute value
0C9F8 B9 00 04                      LDA tile_type,y
0C9FB 29 0C                         AND #%00001100
0C9FD 4A                            LSR
0C9FE 4A                            LSR
0C9FF 05 02                         ORA temp+2
0CA01 4C 06 CA                      JMP ++
0CA04                               +
0CA04 A5 02                         LDA temp+2
0CA06                               ++
0CA06 0A                            ASL
0CA07 0A                            ASL
0CA08 85 02                         STA temp+2
0CA0A                           
0CA0A                           
0CA0A                               ;; Apply fourth metatile
0CA0A 88                            DEY
0CA0B                           
0CA0B                               ;; If X MOD 8 == 0, don't apply top left metatile
0CA0B 8A                            TXA
0CA0C 29 07                         AND #%00000111
0CA0E F0 11                         BEQ +
0CA10                           
0CA10                               ;; If X < $10, don't apply top left metatile
0CA10 8A                            TXA
0CA11 29 F0                         AND #%11110000
0CA13 F0 0C                         BEQ +
0CA15                           
0CA15                               ;; Add metatile4 subpalette to attribute value
0CA15 B9 00 04                      LDA tile_type,y
0CA18 29 0C                         AND #%00001100
0CA1A 4A                            LSR
0CA1B 4A                            LSR
0CA1C 05 02                         ORA temp+2
0CA1E 4C 23 CA                      JMP ++
0CA21                               +
0CA21 A5 02                         LDA temp+2
0CA23                               ++
0CA23 9D A0 04                      STA tile_attributes,x
0CA26                           
0CA26                               ;; Check the next attribute, if any left
0CA26 E8                            INX
0CA27 E0 38                         CPX #$38
0CA29 F0 03                         BEQ +
0CA2B 4C A1 C9                          JMP -attributeLoop
0CA2E                               +
0CA2E                           
0CA2E                               ;; Stream attribute RAM to PPU
0CA2E 2C 02 20                      BIT PPU_STATUS
0CA31 A9 23                         LDA #$23
0CA33 8D 06 20                      STA PPU_ADDR
0CA36 A9 C0                         LDA #$C0
0CA38 8D 06 20                      STA PPU_ADDR
0CA3B A2 00                         LDX #$00
0CA3D                               -
0CA3D BD A0 04                          LDA tile_attributes,x
0CA40 8D 07 20                          STA PPU_DATA
0CA43 E8                                INX
0CA44 E0 40                             CPX #$40
0CA46 D0 F5                         BNE -
0CA48                           
0CA48                               ;; Set initial ball position
0CA48 A6 34                         LDX current_level
0CA4A BD 8B D3                      LDA tbl_lvl_ball_startpos,x
0CA4D 29 F0                         AND #%11110000
0CA4F 18                            CLC
0CA50 69 34                         ADC #$34
0CA52 85 19                         STA ball_ypos_hi
0CA54 BD 8B D3                      LDA tbl_lvl_ball_startpos,x
0CA57 0A                            ASL
0CA58 0A                            ASL
0CA59 0A                            ASL
0CA5A 0A                            ASL
0CA5B 18                            CLC
0CA5C 69 14                         ADC #$14
0CA5E 85 17                         STA ball_xpos_hi
0CA60 A9 00                         LDA #$00
0CA62 85 18                         STA ball_xpos_lo
0CA64 85 1A                         STA ball_ypos_lo
0CA66                               
0CA66                               ;; Set initial ball color and direction
0CA66 BD A4 D3                      LDA tbl_lvl_ball_init,x
0CA69 29 F0                         AND #%11110000
0CA6B 85 2C                         STA ball_flags
0CA6D 20 06 C4                      JSR sub_ColorizeBall
0CA70                               
0CA70                               ;; Return
0CA70 60                            RTS
0CA71                           
0CA71                           
0CA71                           ;; Subroutine: draw 28 tiles in a row
0CA71                           sub_Draw28HorizontalTiles:
0CA71 A2 1C                         LDX #28
0CA73                               -
0CA73 8D 07 20                          STA PPU_DATA
0CA76 CA                                DEX
0CA77 D0 FA                         BNE -
0CA79 60                            RTS0CA7A                           .include "game/subroutine/LoadIntroScreen.asm"
0CA7A                           sub_LoadIntroScreen:
0CA7A                           
0CA7A                               ;; Load intro palette
0CA7A 2C 02 20                      BIT PPU_STATUS
0CA7D A9 3F                         LDA #$3F
0CA7F 8D 06 20                      STA PPU_ADDR
0CA82 A9 00                         LDA #$00
0CA84 8D 06 20                      STA PPU_ADDR
0CA87 A2 00                         LDX #$00
0CA89                               -
0CA89 BD 30 CB                          LDA tbl_IntroScreenPalette,x
0CA8C 8D 07 20                          STA PPU_DATA
0CA8F E8                                INX
0CA90 E0 20                             CPX #$20
0CA92 D0 F5                         BNE -
0CA94                               
0CA94                               ;; Put ball in the middle
0CA94 A9 7C                         LDA #$7C
0CA96 85 17                         STA ball_xpos_hi
0CA98 85 19                         STA ball_ypos_hi
0CA9A                           
0CA9A                               ;; Clear the screen
0CA9A 20 9B C3                      JSR sub_ClearScreen
0CA9D                           
0CA9D                               ;; Set up intro screen draw loop
0CA9D A2 00                         LDX #$00
0CA9F                           
0CA9F                           -loop_IntroScreenData:
0CA9F                           
0CA9F                               ;; Get current byte from intro screen data
0CA9F BD 58 CB                      LDA tbl_IntroScreenData,x
0CAA2                           
0CAA2                               ;; If current byte is #$3F, we're done drawing.
0CAA2 C9 3F                         CMP #$3F
0CAA4 D0 03                         BNE +
0CAA6 4C F3 CA                          JMP +goToEndIntroScreen
0CAA9                               +
0CAA9                           
0CAA9                               ;; If highest bits are %11, draw a plain tile
0CAA9 29 C0                         AND #%11000000
0CAAB D0 03                         BNE +
0CAAD 4C D3 CA                          JMP +drawTile
0CAB0                               +
0CAB0                               
0CAB0                               ;; If highest bits are %01, set the PPU address
0CAB0                               ;; If not, draw two logo tiles
0CAB0 C9 40                         CMP #%01000000
0CAB2 D0 03                         BNE +drawLogo
0CAB4 4C DD CA                          JMP +setPpuAddr
0CAB7                           
0CAB7                           +drawLogo:
0CAB7                               ;; Get bits 0-2 and store in a temp variable
0CAB7 BD 58 CB                      LDA tbl_IntroScreenData,x
0CABA 29 07                         AND #%00000111
0CABC 85 00                         STA temp
0CABE                               
0CABE                               ;; Get bits 3-5, shift over to get a value from 0-7
0CABE BD 58 CB                      LDA tbl_IntroScreenData,x
0CAC1 4A                            LSR
0CAC2 4A                            LSR
0CAC3 4A                            LSR
0CAC4 29 07                         AND #%00000111
0CAC6                               
0CAC6                               ;; Draw the tile that corresponds with that value
0CAC6 A8                            TAY
0CAC7 20 7E C4                      JSR sub_drawIntroScreenLogoTile
0CACA                               
0CACA                               ;; Do the same for the value stored in temp
0CACA A4 00                         LDY temp
0CACC 20 7E C4                      JSR sub_drawIntroScreenLogoTile
0CACF                           
0CACF                               ;; Next byte please
0CACF E8                            INX
0CAD0 4C 9F CA                      JMP -loop_IntroScreenData
0CAD3                           
0CAD3                           +drawTile:
0CAD3                               ;; Just draw the tile value on screen
0CAD3 BD 58 CB                      LDA tbl_IntroScreenData,x
0CAD6 8D 07 20                      STA PPU_DATA
0CAD9                               
0CAD9                               ;; Next byte please
0CAD9 E8                            INX
0CADA 4C 9F CA                      JMP -loop_IntroScreenData
0CADD                           
0CADD                           
0CADD                           +setPpuAddr:
0CADD                               ;; Reset the PPU latch
0CADD 2C 02 20                      BIT PPU_STATUS
0CAE0                               
0CAE0                               ;; Sanitize and write the high byte of the PPU address
0CAE0 BD 58 CB                      LDA tbl_IntroScreenData,x
0CAE3 29 3F                         AND #%00111111
0CAE5 8D 06 20                      STA PPU_ADDR
0CAE8                           
0CAE8                               ;; Write the low byte of the PPU address
0CAE8 E8                            INX
0CAE9 BD 58 CB                      LDA tbl_IntroScreenData,x
0CAEC 8D 06 20                      STA PPU_ADDR
0CAEF                               
0CAEF                               ;; PPU has been set up to draw tiles at the correct spot now.
0CAEF                               
0CAEF                               ;; Next byte please.
0CAEF E8                            INX
0CAF0 4C 9F CA                      JMP -loop_IntroScreenData
0CAF3                           
0CAF3                           +goToEndIntroScreen:
0CAF3                           
0CAF3                               ;; To color the 1.LEVEL: line green, we need to update two
0CAF3                               ;; values in the PPU attribute data.
0CAF3 2C 02 20                      BIT PPU_STATUS
0CAF6 A9 23                         LDA #$23
0CAF8 8D 06 20                      STA PPU_ADDR
0CAFB A9 CB                         LDA #$CB
0CAFD 8D 06 20                      STA PPU_ADDR
0CB00 A9 0A                         LDA #%00001010
0CB02 8D 07 20                      STA PPU_DATA
0CB05 8D 07 20                      STA PPU_DATA
0CB08                           
0CB08 60                            RTS
0CB09                           
0CB09                           .include "game/subroutine/LoadWinScreen.asm"
0CB09                           sub_LoadWinScreen:
0CB09 60                            RTS
0CB0A                           
0CB0A                           .include "game/subroutine/WriteByteToPPU.asm"
0CB0A                           sub_WriteByteToPPUBuffer:
0CB0A                           
0CB0A                               ;; Prevent updating until full 3-byte buffer is filled,
0CB0A                               ;; so that graphics won't glitch out if NMI happens during
0CB0A                               ;; updating the buffer
0CB0A A9 00                         LDA #$00
0CB0C 85 2F                         STA ppu_buffer_update
0CB0E                           
0CB0E                               ;; Check if buffer full; if so, wait a frame and force update
0CB0E A4 30                         LDY ppu_buffer_pointer
0CB10 C0 30                         CPY #$30
0CB12 D0 05                         BNE +
0CB14 E6 2F                             INC ppu_buffer_update
0CB16 20 95 C3                          JSR sub_WaitForVBlank
0CB19                               +
0CB19                           
0CB19                               ;; Add ppu_addr high byte to buffer
0CB19 A5 00                         LDA temp
0CB1B 99 00 03                      STA ppu_buffer,y
0CB1E                           
0CB1E                               ;; Add ppu_addr low byte to buffer
0CB1E C8                            INY
0CB1F A5 01                         LDA temp+1
0CB21 99 00 03                      STA ppu_buffer,y
0CB24                           
0CB24                               ;; Add ppu_data to buffer
0CB24 C8                            INY
0CB25 A5 02                         LDA temp+2
0CB27 99 00 03                      STA ppu_buffer,y
0CB2A                           
0CB2A                               ;; Update buffer pointer
0CB2A C8                            INY
0CB2B 84 30                         STY ppu_buffer_pointer
0CB2D                           
0CB2D                               ;; Tell NMI to update next round
0CB2D E6 2F                         INC ppu_buffer_update
0CB2F                           
0CB2F                               ;; Return
0CB2F 60                            RTS0CB30                           
0CB30                           
0CB30                           ;; LUTs
0CB30                           .include "game/include/tables.asm"
0CB30                           
0CB30                           ;; Initial screen palette
0CB30                           tbl_IntroScreenPalette:
0CB30 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CB34 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CB38 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CB3C 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CB40                           
0CB40 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CB44 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CB48 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CB4C 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CB50                           
0CB50                           
0CB50                           ;; Intro: mapping logo index to chr tile
0CB50                           tbl_IntroScreenLogoChr:
0CB50 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CB58                           
0CB58                           
0CB58                           ;; Intro screen data
0CB58                           tbl_IntroScreenData:
0CB58                           
0CB58                               ;; Set PPU address $20AC and draw
0CB58 60 AC                         .db #$60, #$AC
0CB5A 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CB62                           
0CB62                               ;; Set PPU address $20CF and draw
0CB62 60 CF                         .db #$60, #$CF
0CB64 01 02                         .db #_0, #_1
0CB66                               
0CB66                               ;; Set PPU address $2122 and draw
0CB66 61 22                         .db #$61, #$22
0CB68 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CB6F 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CB75 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CB7D 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CB82                               
0CB82                               ;; Set PPU address $2147 and draw
0CB82 61 47                         .db #$61, #$47
0CB84 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CB8B 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CB8F 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CB95 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CB9B                               
0CB9B                               ;; Set PPU address $218B and draw
0CB9B 61 8B                         .db #$61, #$8B
0CB9D 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CBA3 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CBA8                               
0CBA8                               ;; Set PPU address $21E6 and draw
0CBA8 61 E6                         .db #$61, #$E6
0CBAA 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CBB2 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CBB6 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CBBD                               
0CBBD                               ;; Set PPU address $222D and draw
0CBBD 62 2D                         .db #$62, #$2D
0CBBF 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CBC5                               
0CBC5                               ;; Set PPU address $2281
0CBC5 62 81                         .db #$62, #$81
0CBC7                               
0CBC7                               ;; Draw the Crillion logo
0CBC7 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CBCB C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBCF C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CBD3 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CBD7                               
0CBD7 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CBDB C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBDF C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CBE3 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CBE7                               
0CBE7 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CBEB C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBEF C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CBF3 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CBF7                           
0CBF7 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CBFB C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CBFF C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC03 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC07                               
0CC07 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CC0B C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC0F C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC13 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC17                           
0CC17 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CC1B C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CC1F C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CC23 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CC26                           
0CC26                               ;; End of intro
0CC26 3F                            .db #$3F
0CC27                           
0CC27                           
0CC27                           ;; Animation frames table
0CC27                           .include "game/include/table/animation_frames.asm"
0CC27                           ;; CHR tile-id's per slide of explosion
0CC27                           explosion_slide0:
0CC27 00 00 00                      .db #$00, #$00, #$00
0CC2A 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CC2D 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CC30                           
0CC30                           explosion_slide1:
0CC30 00 00 00                      .db #$00, #$00, #$00
0CC33 29 2A 2B                      .db #$29, #$2A, #$2B
0CC36 39 3A 3B                      .db #$39, #$3A, #$3B
0CC39                           
0CC39                           explosion_slide2:
0CC39 16 00 00                      .db #$16, #$00, #$00
0CC3C 26 27 28                      .db #$26, #$27, #$28
0CC3F 36 37 38                      .db #$36, #$37, #$38
0CC42                           
0CC42                           explosion_slide3:
0CC42 00 14 15                      .db #$00, #$14, #$15
0CC45 23 24 25                      .db #$23, #$24, #$25
0CC48 33 34 35                      .db #$33, #$34, #$35
0CC4B                           
0CC4B                           explosion_slide4:
0CC4B 10 11 12                      .db #$10, #$11, #$12
0CC4E 20 21 22                      .db #$20, #$21, #$22
0CC51 30 31 32                      .db #$30, #$31, #$32
0CC54                           
0CC54                           ;; High and low bytes of animation slides
0CC54                           explosion_anim_hi:
0CC54 CC                            .db >#explosion_slide0
0CC55 CC                            .db >#explosion_slide1
0CC56 CC                            .db >#explosion_slide2
0CC57 CC                            .db >#explosion_slide3
0CC58 CC                            .db >#explosion_slide4
0CC59 CC                            .db >#explosion_slide4
0CC5A CC                            .db >#explosion_slide3
0CC5B CC                            .db >#explosion_slide2
0CC5C CC                            .db >#explosion_slide1
0CC5D CC                            .db >#explosion_slide0
0CC5E                           
0CC5E                           explosion_anim_lo:
0CC5E 27                            .db <#explosion_slide0
0CC5F 30                            .db <#explosion_slide1
0CC60 39                            .db <#explosion_slide2
0CC61 42                            .db <#explosion_slide3
0CC62 4B                            .db <#explosion_slide4
0CC63 4B                            .db <#explosion_slide4
0CC64 42                            .db <#explosion_slide3
0CC65 39                            .db <#explosion_slide2
0CC66 30                            .db <#explosion_slide1
0CC67 27                            .db <#explosion_slide0
0CC68                           
0CC68                           
0CC68                           
0CC68                           ;; Ball palette color table (CBRYGM)
0CC68                           tbl_BallColorDark:
0CC68 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CC6E                            
0CC6E                           tbl_BallColorLight:
0CC6E 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CC74                           
0CC74                               
0CC74                           ;; Screen mode drawing routine addresses
0CC74                           tbl_LoadScreenHi:
0CC74 CA C6 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CC77                           
0CC77                           tbl_LoadScreenLo:
0CC77 7A E9 09                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CC7A                           
0CC7A                           
0CC7A                           ;; Level data
0CC7A                           .include "game/include/table/level_data.asm"
0CC7A                           lvl_layout_01:
0CC7A 61 21                         .db #$61, #%00100001
0CC7C 52 61                         .db #$52, #%01100001
0CC7E 43 65                         .db #$43, #%01100101
0CC80 83 05                         .db #$83, #%00000101
0CC82 93 15                         .db #$93, #%00010101
0CC84 34 7A                         .db #$34, #%01111010
0CC86 74 7A                         .db #$74, #%01111010
0CC88 35 7A                         .db #$35, #%01111010
0CC8A 75 7A                         .db #$75, #%01111010
0CC8C 46 65                         .db #$46, #%01100101
0CC8E 86 25                         .db #$86, #%00100101
0CC90 57 61                         .db #$57, #%01100001
0CC92 68 21                         .db #$68, #%00100001
0CC94 FF                            .db #LEVEL_END
0CC95                           
0CC95                           lvl_layout_02:
0CC95 C0 0A                         .db #$C0, #%00001010
0CC97 11 15                         .db #$11, #%00010101
0CC99 21 62                         .db #$21, #%01100010
0CC9B 61 62                         .db #$61, #%01100010
0CC9D A1 42                         .db #$A1, #%01000010
0CC9F 12 67                         .db #$12, #%01100111
0CCA1 52 67                         .db #$52, #%01100111
0CCA3 92 67                         .db #$92, #%01100111
0CCA5 C3 0D                         .db #$C3, #%00001101
0CCA7 14 11                         .db #$14, #%00010001
0CCA9 24 65                         .db #$24, #%01100101
0CCAB 64 65                         .db #$64, #%01100101
0CCAD A4 45                         .db #$A4, #%01000101
0CCAF 15 67                         .db #$15, #%01100111
0CCB1 55 67                         .db #$55, #%01100111
0CCB3 95 67                         .db #$95, #%01100111
0CCB5 17 12                         .db #$17, #%00010010
0CCB7 27 61                         .db #$27, #%01100001
0CCB9 67 61                         .db #$67, #%01100001
0CCBB A7 41                         .db #$A7, #%01000001
0CCBD 38 7A                         .db #$38, #%01111010
0CCBF 98 5A                         .db #$98, #%01011010
0CCC1 18 27                         .db #$18, #%00100111
0CCC3 48 27                         .db #$48, #%00100111
0CCC5 78 27                         .db #$78, #%00100111
0CCC7 C8 07                         .db #$C8, #%00000111
0CCC9 FF                            .db #LEVEL_END
0CCCA                           
0CCCA                           lvl_layout_03:
0CCCA 00 7A                         .db #$00, #%01111010
0CCCC 40 7A                         .db #$40, #%01111010
0CCCE 80 7A                         .db #$80, #%01111010
0CCD0 C0 1A                         .db #$C0, #%00011010
0CCD2 10 A1                         .db #$10, #%10100001
0CCD4 13 E1                         .db #$13, #%11100001
0CCD6 17 C1                         .db #$17, #%11000001
0CCD8 30 C1                         .db #$30, #%11000001
0CCDA 34 C1                         .db #$34, #%11000001
0CCDC 38 A1                         .db #$38, #%10100001
0CCDE 50 E1                         .db #$50, #%11100001
0CCE0 55 81                         .db #$55, #%10000001
0CCE2 57 C1                         .db #$57, #%11000001
0CCE4 70 C1                         .db #$70, #%11000001
0CCE6 73 A1                         .db #$73, #%10100001
0CCE8 76 E1                         .db #$76, #%11100001
0CCEA 90 E1                         .db #$90, #%11100001
0CCEC 95 81                         .db #$95, #%10000001
0CCEE 97 C1                         .db #$97, #%11000001
0CCF0 B0 C1                         .db #$B0, #%11000001
0CCF2 B4 C1                         .db #$B4, #%11000001
0CCF4 B8 A1                         .db #$B8, #%10100001
0CCF6 D0 A1                         .db #$D0, #%10100001
0CCF8 D3 E1                         .db #$D3, #%11100001
0CCFA D7 C1                         .db #$D7, #%11000001
0CCFC FF                            .db #LEVEL_END
0CCFD                           
0CCFD                           lvl_layout_04:
0CCFD 00 4C                         .db #$00, #%01001100
0CCFF 40 6C                         .db #$40, #%01101100
0CD01 80 4C                         .db #$80, #%01001100
0CD03 81 AC                         .db #$81, #%10101100
0CD05 C1 2C                         .db #$C1, #%00101100
0CD07 02 6C                         .db #$02, #%01101100
0CD09 42 CC                         .db #$42, #%11001100
0CD0B 62 EC                         .db #$62, #%11101100
0CD0D A2 CC                         .db #$A2, #%11001100
0CD0F C3 CC                         .db #$C3, #%11001100
0CD11 04 4C                         .db #$04, #%01001100
0CD13 84 2C                         .db #$84, #%00101100
0CD15 25 AC                         .db #$25, #%10101100
0CD17 85 AC                         .db #$85, #%10101100
0CD19 06 AC                         .db #$06, #%10101100
0CD1B 36 CC                         .db #$36, #%11001100
0CD1D 56 CC                         .db #$56, #%11001100
0CD1F 66 EC                         .db #$66, #%11101100
0CD21 96 6C                         .db #$96, #%01101100
0CD23 C7 AC                         .db #$C7, #%10101100
0CD25 08 2C                         .db #$08, #%00101100
0CD27 78 6C                         .db #$78, #%01101100
0CD29 D8 0C                         .db #$D8, #%00001100
0CD2B 30 A1                         .db #$30, #%10100001
0CD2D B0 21                         .db #$B0, #%00100001
0CD2F 01 41                         .db #$01, #%01000001
0CD31 41 61                         .db #$41, #%01100001
0CD33 91 A1                         .db #$91, #%10100001
0CD35 A1 21                         .db #$A1, #%00100001
0CD37 52 C1                         .db #$52, #%11000001
0CD39 72 E1                         .db #$72, #%11100001
0CD3B B2 C1                         .db #$B2, #%11000001
0CD3D C2 21                         .db #$C2, #%00100001
0CD3F 03 41                         .db #$03, #%01000001
0CD41 33 C1                         .db #$33, #%11000001
0CD43 83 21                         .db #$83, #%00100001
0CD45 D3 E1                         .db #$D3, #%11100001
0CD47 05 21                         .db #$05, #%00100001
0CD49 45 E1                         .db #$45, #%11100001
0CD4B A5 21                         .db #$A5, #%00100001
0CD4D 16 A1                         .db #$16, #%10100001
0CD4F 76 A1                         .db #$76, #%10100001
0CD51 27 A1                         .db #$27, #%10100001
0CD53 57 01                         .db #$57, #%00000001
0CD55 87 41                         .db #$87, #%01000001
0CD57 B7 A1                         .db #$B7, #%10100001
0CD59 19 21                         .db #$19, #%00100001
0CD5B 39 41                         .db #$39, #%01000001
0CD5D 89 41                         .db #$89, #%01000001
0CD5F C9 21                         .db #$C9, #%00100001
0CD61 D0 1A                         .db #$D0, #%00011010
0CD63 55 1A                         .db #$55, #%00011010
0CD65 95 1A                         .db #$95, #%00011010
0CD67 D7 1A                         .db #$D7, #%00011010
0CD69 09 1A                         .db #$09, #%00011010
0CD6B 79 1A                         .db #$79, #%00011010
0CD6D FF                            .db #LEVEL_END
0CD6E                           
0CD6E                           lvl_layout_05:
0CD6E 40 0A                         .db #$40, #%00001010
0CD70 70 1A                         .db #$70, #%00011010
0CD72 B0 42                         .db #$B0, #%01000010
0CD74 41 A7                         .db #$41, #%10100111
0CD76 B1 22                         .db #$B1, #%00100010
0CD78 D1 15                         .db #$D1, #%00010101
0CD7A 22 0A                         .db #$22, #%00001010
0CD7C 52 05                         .db #$52, #%00000101
0CD7E B2 42                         .db #$B2, #%01000010
0CD80 03 27                         .db #$03, #%00100111
0CD82 33 67                         .db #$33, #%01100111
0CD84 73 67                         .db #$73, #%01100111
0CD86 B3 47                         .db #$B3, #%01000111
0CD88 05 E5                         .db #$05, #%11100101
0CD8A 25 A5                         .db #$25, #%10100101
0CD8C 35 25                         .db #$35, #%00100101
0CD8E 65 45                         .db #$65, #%01000101
0CD90 A5 45                         .db #$A5, #%01000101
0CD92 46 E5                         .db #$46, #%11100101
0CD94 66 E5                         .db #$66, #%11100101
0CD96 86 E5                         .db #$86, #%11100101
0CD98 A6 E2                         .db #$A6, #%11100010
0CD9A C6 E5                         .db #$C6, #%11100101
0CD9C 27 25                         .db #$27, #%00100101
0CD9E 77 05                         .db #$77, #%00000101
0CDA0 B7 02                         .db #$B7, #%00000010
0CDA2 09 05                         .db #$09, #%00000101
0CDA4 79 05                         .db #$79, #%00000101
0CDA6 B9 02                         .db #$B9, #%00000010
0CDA8 FF                            .db #LEVEL_END
0CDA9                           
0CDA9                           lvl_layout_06:
0CDA9 00 03                         .db #$00, #%00000011
0CDAB 20 03                         .db #$20, #%00000011
0CDAD 40 03                         .db #$40, #%00000011
0CDAF A0 03                         .db #$A0, #%00000011
0CDB1 C0 03                         .db #$C0, #%00000011
0CDB3 11 03                         .db #$11, #%00000011
0CDB5 31 03                         .db #$31, #%00000011
0CDB7 51 03                         .db #$51, #%00000011
0CDB9 91 03                         .db #$91, #%00000011
0CDBB B1 03                         .db #$B1, #%00000011
0CDBD D1 03                         .db #$D1, #%00000011
0CDBF 02 03                         .db #$02, #%00000011
0CDC1 22 03                         .db #$22, #%00000011
0CDC3 42 03                         .db #$42, #%00000011
0CDC5 A2 03                         .db #$A2, #%00000011
0CDC7 C2 03                         .db #$C2, #%00000011
0CDC9 13 03                         .db #$13, #%00000011
0CDCB 33 03                         .db #$33, #%00000011
0CDCD 53 03                         .db #$53, #%00000011
0CDCF 93 03                         .db #$93, #%00000011
0CDD1 B3 03                         .db #$B3, #%00000011
0CDD3 D3 03                         .db #$D3, #%00000011
0CDD5 04 03                         .db #$04, #%00000011
0CDD7 24 03                         .db #$24, #%00000011
0CDD9 44 03                         .db #$44, #%00000011
0CDDB A4 03                         .db #$A4, #%00000011
0CDDD C4 03                         .db #$C4, #%00000011
0CDDF 15 03                         .db #$15, #%00000011
0CDE1 35 03                         .db #$35, #%00000011
0CDE3 55 03                         .db #$55, #%00000011
0CDE5 95 03                         .db #$95, #%00000011
0CDE7 B5 03                         .db #$B5, #%00000011
0CDE9 D5 03                         .db #$D5, #%00000011
0CDEB 06 03                         .db #$06, #%00000011
0CDED 26 03                         .db #$26, #%00000011
0CDEF 46 03                         .db #$46, #%00000011
0CDF1 A6 03                         .db #$A6, #%00000011
0CDF3 C6 03                         .db #$C6, #%00000011
0CDF5 17 03                         .db #$17, #%00000011
0CDF7 37 03                         .db #$37, #%00000011
0CDF9 57 03                         .db #$57, #%00000011
0CDFB 97 03                         .db #$97, #%00000011
0CDFD B7 03                         .db #$B7, #%00000011
0CDFF D7 03                         .db #$D7, #%00000011
0CE01 08 03                         .db #$08, #%00000011
0CE03 28 03                         .db #$28, #%00000011
0CE05 48 03                         .db #$48, #%00000011
0CE07 A8 03                         .db #$A8, #%00000011
0CE09 C8 03                         .db #$C8, #%00000011
0CE0B 19 03                         .db #$19, #%00000011
0CE0D 39 03                         .db #$39, #%00000011
0CE0F 59 03                         .db #$59, #%00000011
0CE11 99 03                         .db #$99, #%00000011
0CE13 B9 03                         .db #$B9, #%00000011
0CE15 D9 03                         .db #$D9, #%00000011
0CE17 60 4B                         .db #$60, #%01001011
0CE19 71 CB                         .db #$71, #%11001011
0CE1B 62 4B                         .db #$62, #%01001011
0CE1D 64 4B                         .db #$64, #%01001011
0CE1F 75 CB                         .db #$75, #%11001011
0CE21 66 4B                         .db #$66, #%01001011
0CE23 68 4B                         .db #$68, #%01001011
0CE25 79 0B                         .db #$79, #%00001011
0CE27 70 03                         .db #$70, #%00000011
0CE29 72 03                         .db #$72, #%00000011
0CE2B 74 03                         .db #$74, #%00000011
0CE2D 76 03                         .db #$76, #%00000011
0CE2F 78 03                         .db #$78, #%00000011
0CE31 FF                            .db #LEVEL_END
0CE32                           
0CE32                           lvl_layout_07:
0CE32 00 11                         .db #$00, #%00010001
0CE34 01 FA                         .db #$01, #%11111010
0CE36 12 BA                         .db #$12, #%10111010
0CE38 23 DA                         .db #$23, #%11011010
0CE3A 34 FA                         .db #$34, #%11111010
0CE3C 05 DA                         .db #$05, #%11011010
0CE3E 15 FA                         .db #$15, #%11111010
0CE40 45 BA                         .db #$45, #%10111010
0CE42 56 DA                         .db #$56, #%11011010
0CE44 27 BA                         .db #$27, #%10111010
0CE46 67 DA                         .db #$67, #%11011010
0CE48 38 3A                         .db #$38, #%00111010
0CE4A 78 BA                         .db #$78, #%10111010
0CE4C 09 3A                         .db #$09, #%00111010
0CE4E 39 3A                         .db #$39, #%00111010
0CE50 89 1A                         .db #$89, #%00011010
0CE52 B0 01                         .db #$B0, #%00000001
0CE54 D0 01                         .db #$D0, #%00000001
0CE56 A1 01                         .db #$A1, #%00000001
0CE58 C1 11                         .db #$C1, #%00010001
0CE5A B2 01                         .db #$B2, #%00000001
0CE5C D2 01                         .db #$D2, #%00000001
0CE5E A3 01                         .db #$A3, #%00000001
0CE60 C3 01                         .db #$C3, #%00000001
0CE62 B4 01                         .db #$B4, #%00000001
0CE64 D4 01                         .db #$D4, #%00000001
0CE66 A5 01                         .db #$A5, #%00000001
0CE68 C5 01                         .db #$C5, #%00000001
0CE6A B6 01                         .db #$B6, #%00000001
0CE6C D6 01                         .db #$D6, #%00000001
0CE6E A7 01                         .db #$A7, #%00000001
0CE70 C7 01                         .db #$C7, #%00000001
0CE72 FF                            .db #LEVEL_END
0CE73                           
0CE73                           lvl_layout_08:
0CE73 40 B5                         .db #$40, #%10110101
0CE75 31 0D                         .db #$31, #%00001101
0CE77 61 10                         .db #$61, #%00010000
0CE79 42 C7                         .db #$42, #%11000111
0CE7B 52 67                         .db #$52, #%01100111
0CE7D 63 C7                         .db #$63, #%11000111
0CE7F 83 E7                         .db #$83, #%11100111
0CE81 05 07                         .db #$05, #%00000111
0CE83 15 3A                         .db #$15, #%00111010
0CE85 07 63                         .db #$07, #%01100011
0CE87 27 13                         .db #$27, #%00010011
0CE89 38 A5                         .db #$38, #%10100101
0CE8B 09 14                         .db #$09, #%00010100
0CE8D 19 05                         .db #$19, #%00000101
0CE8F D0 E0                         .db #$D0, #%11100000
0CE91 C2 A0                         .db #$C2, #%10100000
0CE93 B3 E0                         .db #$B3, #%11100000
0CE95 D5 E0                         .db #$D5, #%11100000
0CE97 C6 E0                         .db #$C6, #%11100000
0CE99 B0 C4                         .db #$B0, #%11000100
0CE9B C0 A4                         .db #$C0, #%10100100
0CE9D D1 A4                         .db #$D1, #%10100100
0CE9F C4 24                         .db #$C4, #%00100100
0CEA1 C5 04                         .db #$C5, #%00000100
0CEA3 B7 44                         .db #$B7, #%01000100
0CEA5 B8 A4                         .db #$B8, #%10100100
0CEA7 D9 05                         .db #$D9, #%00000101
0CEA9 FF                            .db #LEVEL_END
0CEAA                           
0CEAA                           lvl_layout_09:
0CEAA 81 04                         .db #$81, #%00000100
0CEAC D1 04                         .db #$D1, #%00000100
0CEAE 32 C4                         .db #$32, #%11000100
0CEB0 A2 C4                         .db #$A2, #%11000100
0CEB2 C2 24                         .db #$C2, #%00100100
0CEB4 13 24                         .db #$13, #%00100100
0CEB6 53 04                         .db #$53, #%00000100
0CEB8 C3 27                         .db #$C3, #%00100111
0CEBA 15 6C                         .db #$15, #%01101100
0CEBC 55 6C                         .db #$55, #%01101100
0CEBE 95 6C                         .db #$95, #%01101100
0CEC0 D5 0C                         .db #$D5, #%00001100
0CEC2 27 C7                         .db #$27, #%11000111
0CEC4 47 C7                         .db #$47, #%11000111
0CEC6 67 C7                         .db #$67, #%11000111
0CEC8 87 C7                         .db #$87, #%11000111
0CECA A7 C7                         .db #$A7, #%11000111
0CECC C7 C7                         .db #$C7, #%11000111
0CECE 08 13                         .db #$08, #%00010011
0CED0 28 15                         .db #$28, #%00010101
0CED2 48 12                         .db #$48, #%00010010
0CED4 68 15                         .db #$68, #%00010101
0CED6 88 11                         .db #$88, #%00010001
0CED8 A8 10                         .db #$A8, #%00010000
0CEDA C8 14                         .db #$C8, #%00010100
0CEDC 09 07                         .db #$09, #%00000111
0CEDE 19 03                         .db #$19, #%00000011
0CEE0 39 05                         .db #$39, #%00000101
0CEE2 59 02                         .db #$59, #%00000010
0CEE4 79 05                         .db #$79, #%00000101
0CEE6 99 01                         .db #$99, #%00000001
0CEE8 B9 00                         .db #$B9, #%00000000
0CEEA D9 04                         .db #$D9, #%00000100
0CEEC FF                            .db #LEVEL_END
0CEED                           
0CEED                           lvl_layout_10:
0CEED 00 02                         .db #$00, #%00000010
0CEEF 10 C9                         .db #$10, #%11001001
0CEF1 50 C9                         .db #$50, #%11001001
0CEF3 90 C9                         .db #$90, #%11001001
0CEF5 D0 C9                         .db #$D0, #%11001001
0CEF7 31 C9                         .db #$31, #%11001001
0CEF9 71 C9                         .db #$71, #%11001001
0CEFB B1 C9                         .db #$B1, #%11001001
0CEFD 13 C9                         .db #$13, #%11001001
0CEFF 53 C9                         .db #$53, #%11001001
0CF01 93 C9                         .db #$93, #%11001001
0CF03 D3 C9                         .db #$D3, #%11001001
0CF05 34 C9                         .db #$34, #%11001001
0CF07 74 C9                         .db #$74, #%11001001
0CF09 B4 C9                         .db #$B4, #%11001001
0CF0B 16 C9                         .db #$16, #%11001001
0CF0D 56 C9                         .db #$56, #%11001001
0CF0F 96 C9                         .db #$96, #%11001001
0CF11 D6 C9                         .db #$D6, #%11001001
0CF13 37 C9                         .db #$37, #%11001001
0CF15 77 C9                         .db #$77, #%11001001
0CF17 B7 C9                         .db #$B7, #%11001001
0CF19 D8 12                         .db #$D8, #%00010010
0CF1B FF                            .db #LEVEL_END
0CF1C                           
0CF1C                           lvl_layout_11:
0CF1C 00 65                         .db #$00, #%01100101
0CF1E 40 45                         .db #$40, #%01000101
0CF20 50 A7                         .db #$50, #%10100111
0CF22 80 05                         .db #$80, #%00000101
0CF24 90 A7                         .db #$90, #%10100111
0CF26 A0 65                         .db #$A0, #%01100101
0CF28 01 43                         .db #$01, #%01000011
0CF2A 31 23                         .db #$31, #%00100011
0CF2C 61 A7                         .db #$61, #%10100111
0CF2E 81 A7                         .db #$81, #%10100111
0CF30 A1 63                         .db #$A1, #%01100011
0CF32 02 44                         .db #$02, #%01000100
0CF34 32 44                         .db #$32, #%01000100
0CF36 92 04                         .db #$92, #%00000100
0CF38 A2 64                         .db #$A2, #%01100100
0CF3A 03 40                         .db #$03, #%01000000
0CF3C 33 40                         .db #$33, #%01000000
0CF3E 63 A1                         .db #$63, #%10100001
0CF40 83 A2                         .db #$83, #%10100010
0CF42 93 00                         .db #$93, #%00000000
0CF44 A3 60                         .db #$A3, #%01100000
0CF46 04 41                         .db #$04, #%01000001
0CF48 34 41                         .db #$34, #%01000001
0CF4A 94 02                         .db #$94, #%00000010
0CF4C A4 62                         .db #$A4, #%01100010
0CF4E 05 47                         .db #$05, #%01000111
0CF50 35 67                         .db #$35, #%01100111
0CF52 75 0A                         .db #$75, #%00001010
0CF54 85 47                         .db #$85, #%01000111
0CF56 B5 47                         .db #$B5, #%01000111
0CF58 06 E7                         .db #$06, #%11100111
0CF5A 16 5A                         .db #$16, #%01011010
0CF5C 26 11                         .db #$26, #%00010001
0CF5E 46 13                         .db #$46, #%00010011
0CF60 56 1A                         .db #$56, #%00011010
0CF62 66 14                         .db #$66, #%00010100
0CF64 86 10                         .db #$86, #%00010000
0CF66 96 5A                         .db #$96, #%01011010
0CF68 A6 12                         .db #$A6, #%00010010
0CF6A C6 15                         .db #$C6, #%00010101
0CF6C D6 E7                         .db #$D6, #%11100111
0CF6E FF                            .db #LEVEL_END
0CF6F                           
0CF6F                           lvl_layout_12:
0CF6F 00 00                         .db #$00, #%00000000
0CF71 50 C0                         .db #$50, #%11000000
0CF73 80 00                         .db #$80, #%00000000
0CF75 61 00                         .db #$61, #%00000000
0CF77 22 C0                         .db #$22, #%11000000
0CF79 82 E0                         .db #$82, #%11100000
0CF7B C2 E0                         .db #$C2, #%11100000
0CF7D A3 20                         .db #$A3, #%00100000
0CF7F C3 10                         .db #$C3, #%00010000
0CF81 04 00                         .db #$04, #%00000000
0CF83 54 20                         .db #$54, #%00100000
0CF85 15 0A                         .db #$15, #%00001010
0CF87 25 C0                         .db #$25, #%11000000
0CF89 55 E0                         .db #$55, #%11100000
0CF8B 86 20                         .db #$86, #%00100000
0CF8D C6 E0                         .db #$C6, #%11100000
0CF8F C7 A0                         .db #$C7, #%10100000
0CF91 88 00                         .db #$88, #%00000000
0CF93 59 00                         .db #$59, #%00000000
0CF95 89 20                         .db #$89, #%00100000
0CF97 D9 1A                         .db #$D9, #%00011010
0CF99 FF                            .db #LEVEL_END
0CF9A                           
0CF9A                           lvl_layout_13:
0CF9A 10 E0                         .db #$10, #%11100000
0CF9C 20 E0                         .db #$20, #%11100000
0CF9E 30 E0                         .db #$30, #%11100000
0CFA0 40 40                         .db #$40, #%01000000
0CFA2 80 60                         .db #$80, #%01100000
0CFA4 C0 E0                         .db #$C0, #%11100000
0CFA6 D0 E0                         .db #$D0, #%11100000
0CFA8 41 40                         .db #$41, #%01000000
0CFAA 71 60                         .db #$71, #%01100000
0CFAC 52 60                         .db #$52, #%01100000
0CFAE A2 20                         .db #$A2, #%00100000
0CFB0 43 60                         .db #$43, #%01100000
0CFB2 83 60                         .db #$83, #%01100000
0CFB4 14 74                         .db #$14, #%01110100
0CFB6 54 74                         .db #$54, #%01110100
0CFB8 94 74                         .db #$94, #%01110100
0CFBA D4 14                         .db #$D4, #%00010100
0CFBC 15 0D                         .db #$15, #%00001101
0CFBE 55 0D                         .db #$55, #%00001101
0CFC0 95 0D                         .db #$95, #%00001101
0CFC2 D5 0D                         .db #$D5, #%00001101
0CFC4 26 0D                         .db #$26, #%00001101
0CFC6 46 0D                         .db #$46, #%00001101
0CFC8 66 0D                         .db #$66, #%00001101
0CFCA 86 0D                         .db #$86, #%00001101
0CFCC A6 0D                         .db #$A6, #%00001101
0CFCE C6 0D                         .db #$C6, #%00001101
0CFD0 07 10                         .db #$07, #%00010000
0CFD2 37 0D                         .db #$37, #%00001101
0CFD4 77 0D                         .db #$77, #%00001101
0CFD6 B7 0D                         .db #$B7, #%00001101
0CFD8 28 0D                         .db #$28, #%00001101
0CFDA 48 0D                         .db #$48, #%00001101
0CFDC 68 0D                         .db #$68, #%00001101
0CFDE 88 0D                         .db #$88, #%00001101
0CFE0 A8 0D                         .db #$A8, #%00001101
0CFE2 C8 0D                         .db #$C8, #%00001101
0CFE4 19 0D                         .db #$19, #%00001101
0CFE6 59 0D                         .db #$59, #%00001101
0CFE8 99 0D                         .db #$99, #%00001101
0CFEA D9 0D                         .db #$D9, #%00001101
0CFEC FF                            .db #LEVEL_END
0CFED                           
0CFED                           lvl_layout_14:
0CFED 00 67                         .db #$00, #%01100111
0CFEF 40 67                         .db #$40, #%01100111
0CFF1 80 67                         .db #$80, #%01100111
0CFF3 C0 27                         .db #$C0, #%00100111
0CFF5 01 27                         .db #$01, #%00100111
0CFF7 31 C7                         .db #$31, #%11000111
0CFF9 51 C7                         .db #$51, #%11000111
0CFFB 71 C7                         .db #$71, #%11000111
0CFFD 91 C7                         .db #$91, #%11000111
0CFFF B1 C7                         .db #$B1, #%11000111
0D001 D1 07                         .db #$D1, #%00000111
0D003 02 E7                         .db #$02, #%11100111
0D005 06 E7                         .db #$06, #%11100111
0D007 13 07                         .db #$13, #%00000111
0D009 D3 07                         .db #$D3, #%00000111
0D00B 15 07                         .db #$15, #%00000111
0D00D 35 07                         .db #$35, #%00000111
0D00F 55 07                         .db #$55, #%00000111
0D011 75 07                         .db #$75, #%00000111
0D013 95 07                         .db #$95, #%00000111
0D015 B5 07                         .db #$B5, #%00000111
0D017 D5 07                         .db #$D5, #%00000111
0D019 17 07                         .db #$17, #%00000111
0D01B 37 C7                         .db #$37, #%11000111
0D01D 57 C7                         .db #$57, #%11000111
0D01F 77 C7                         .db #$77, #%11000111
0D021 97 C7                         .db #$97, #%11000111
0D023 B7 C7                         .db #$B7, #%11000111
0D025 D7 07                         .db #$D7, #%00000111
0D027 19 07                         .db #$19, #%00000111
0D029 D9 07                         .db #$D9, #%00000111
0D02B 22 4C                         .db #$22, #%01001100
0D02D 62 4C                         .db #$62, #%01001100
0D02F A2 4C                         .db #$A2, #%01001100
0D031 24 0C                         .db #$24, #%00001100
0D033 44 0C                         .db #$44, #%00001100
0D035 64 0C                         .db #$64, #%00001100
0D037 84 0C                         .db #$84, #%00001100
0D039 A4 0C                         .db #$A4, #%00001100
0D03B C4 0C                         .db #$C4, #%00001100
0D03D 26 0C                         .db #$26, #%00001100
0D03F 46 0C                         .db #$46, #%00001100
0D041 66 0C                         .db #$66, #%00001100
0D043 86 0C                         .db #$86, #%00001100
0D045 A6 0C                         .db #$A6, #%00001100
0D047 C6 0C                         .db #$C6, #%00001100
0D049 28 4C                         .db #$28, #%01001100
0D04B 68 4C                         .db #$68, #%01001100
0D04D A8 4C                         .db #$A8, #%01001100
0D04F 32 04                         .db #$32, #%00000100
0D051 52 04                         .db #$52, #%00000100
0D053 72 04                         .db #$72, #%00000100
0D055 92 04                         .db #$92, #%00000100
0D057 B2 04                         .db #$B2, #%00000100
0D059 38 04                         .db #$38, #%00000100
0D05B 58 04                         .db #$58, #%00000100
0D05D 78 04                         .db #$78, #%00000100
0D05F 98 04                         .db #$98, #%00000100
0D061 B8 04                         .db #$B8, #%00000100
0D063 FF                            .db #LEVEL_END
0D064                           
0D064                           lvl_layout_15:
0D064 00 7A                         .db #$00, #%01111010
0D066 40 7A                         .db #$40, #%01111010
0D068 80 7A                         .db #$80, #%01111010
0D06A C0 3A                         .db #$C0, #%00111010
0D06C 31 04                         .db #$31, #%00000100
0D06E 51 04                         .db #$51, #%00000100
0D070 81 04                         .db #$81, #%00000100
0D072 A1 04                         .db #$A1, #%00000100
0D074 05 E4                         .db #$05, #%11100100
0D076 15 64                         .db #$15, #%01100100
0D078 55 64                         .db #$55, #%01100100
0D07A 95 64                         .db #$95, #%01100100
0D07C D5 E4                         .db #$D5, #%11100100
0D07E 26 04                         .db #$26, #%00000100
0D080 46 44                         .db #$46, #%01000100
0D082 76 64                         .db #$76, #%01100100
0D084 C6 04                         .db #$C6, #%00000100
0D086 17 04                         .db #$17, #%00000100
0D088 37 64                         .db #$37, #%01100100
0D08A 77 44                         .db #$77, #%01000100
0D08C B7 04                         .db #$B7, #%00000100
0D08E 18 64                         .db #$18, #%01100100
0D090 58 64                         .db #$58, #%01100100
0D092 98 64                         .db #$98, #%01100100
0D094 FF                            .db #LEVEL_END
0D095                           
0D095                           lvl_layout_16:
0D095 10 E1                         .db #$10, #%11100001
0D097 20 9A                         .db #$20, #%10011010
0D099 30 E1                         .db #$30, #%11100001
0D09B 40 E1                         .db #$40, #%11100001
0D09D 50 E1                         .db #$50, #%11100001
0D09F 60 C1                         .db #$60, #%11000001
0D0A1 70 E1                         .db #$70, #%11100001
0D0A3 80 E1                         .db #$80, #%11100001
0D0A5 90 E1                         .db #$90, #%11100001
0D0A7 A0 61                         .db #$A0, #%01100001
0D0A9 21 C1                         .db #$21, #%11000001
0D0AB A1 1A                         .db #$A1, #%00011010
0D0AD B1 41                         .db #$B1, #%01000001
0D0AF A2 E1                         .db #$A2, #%11100001
0D0B1 B2 E1                         .db #$B2, #%11100001
0D0B3 C2 1A                         .db #$C2, #%00011010
0D0B5 D2 E1                         .db #$D2, #%11100001
0D0B7 63 1A                         .db #$63, #%00011010
0D0B9 C3 C1                         .db #$C3, #%11000001
0D0BB 14 61                         .db #$14, #%01100001
0D0BD 54 61                         .db #$54, #%01100001
0D0BF 94 C1                         .db #$94, #%11000001
0D0C1 15 61                         .db #$15, #%01100001
0D0C3 55 41                         .db #$55, #%01000001
0D0C5 85 1A                         .db #$85, #%00011010
0D0C7 16 41                         .db #$16, #%01000001
0D0C9 46 1A                         .db #$46, #%00011010
0D0CB 56 61                         .db #$56, #%01100001
0D0CD A6 61                         .db #$A6, #%01100001
0D0CF 17 67                         .db #$17, #%01100111
0D0D1 57 67                         .db #$57, #%01100111
0D0D3 97 67                         .db #$97, #%01100111
0D0D5 D7 07                         .db #$D7, #%00000111
0D0D7 28 41                         .db #$28, #%01000001
0D0D9 58 61                         .db #$58, #%01100001
0D0DB A8 41                         .db #$A8, #%01000001
0D0DD 18 11                         .db #$18, #%00010001
0D0DF 38 11                         .db #$38, #%00010001
0D0E1 98 11                         .db #$98, #%00010001
0D0E3 B8 11                         .db #$B8, #%00010001
0D0E5 D8 11                         .db #$D8, #%00010001
0D0E7 59 09                         .db #$59, #%00001001
0D0E9 FF                            .db #LEVEL_END
0D0EA                           
0D0EA                           lvl_layout_17:
0D0EA 10 EA                         .db #$10, #%11101010
0D0EC 20 E2                         .db #$20, #%11100010
0D0EE 30 62                         .db #$30, #%01100010
0D0F0 70 02                         .db #$70, #%00000010
0D0F2 80 6A                         .db #$80, #%01101010
0D0F4 90 22                         .db #$90, #%00100010
0D0F6 01 AA                         .db #$01, #%10101010
0D0F8 31 6A                         .db #$31, #%01101010
0D0FA 81 2A                         .db #$81, #%00101010
0D0FC A1 02                         .db #$A1, #%00000010
0D0FE C1 02                         .db #$C1, #%00000010
0D100 D1 0A                         .db #$D1, #%00001010
0D102 32 EA                         .db #$32, #%11101010
0D104 42 6A                         .db #$42, #%01101010
0D106 62 02                         .db #$62, #%00000010
0D108 92 6A                         .db #$92, #%01101010
0D10A D2 E2                         .db #$D2, #%11100010
0D10C 43 1A                         .db #$43, #%00011010
0D10E 53 CA                         .db #$53, #%11001010
0D110 73 02                         .db #$73, #%00000010
0D112 83 4A                         .db #$83, #%01001010
0D114 B3 CA                         .db #$B3, #%11001010
0D116 C3 EA                         .db #$C3, #%11101010
0D118 04 0A                         .db #$04, #%00001010
0D11A 14 A2                         .db #$14, #%10100010
0D11C 24 AA                         .db #$24, #%10101010
0D11E 44 AA                         .db #$44, #%10101010
0D120 64 6A                         .db #$64, #%01101010
0D122 65 6A                         .db #$65, #%01101010
0D124 A5 AA                         .db #$A5, #%10101010
0D126 06 EA                         .db #$06, #%11101010
0D128 16 62                         .db #$16, #%01100010
0D12A 66 22                         .db #$66, #%00100010
0D12C 86 2A                         .db #$86, #%00101010
0D12E 17 42                         .db #$17, #%01000010
0D130 47 12                         .db #$47, #%00010010
0D132 57 6A                         .db #$57, #%01101010
0D134 97 4A                         .db #$97, #%01001010
0D136 A7 02                         .db #$A7, #%00000010
0D138 18 02                         .db #$18, #%00000010
0D13A 28 0A                         .db #$28, #%00001010
0D13C 38 22                         .db #$38, #%00100010
0D13E 68 2A                         .db #$68, #%00101010
0D140 88 62                         .db #$88, #%01100010
0D142 C8 0A                         .db #$C8, #%00001010
0D144 D8 02                         .db #$D8, #%00000010
0D146 19 2A                         .db #$19, #%00101010
0D148 39 2A                         .db #$39, #%00101010
0D14A 69 42                         .db #$69, #%01000010
0D14C 99 2A                         .db #$99, #%00101010
0D14E B9 42                         .db #$B9, #%01000010
0D150 FF                            .db #LEVEL_END
0D151                           
0D151                           lvl_layout_18:
0D151 00 12                         .db #$00, #%00010010
0D153 40 1A                         .db #$40, #%00011010
0D155 50 11                         .db #$50, #%00010001
0D157 70 1A                         .db #$70, #%00011010
0D159 80 10                         .db #$80, #%00010000
0D15B D0 13                         .db #$D0, #%00010011
0D15D 01 1A                         .db #$01, #%00011010
0D15F 22 15                         .db #$22, #%00010101
0D161 A2 1A                         .db #$A2, #%00011010
0D163 B2 14                         .db #$B2, #%00010100
0D165 03 67                         .db #$03, #%01100111
0D167 43 67                         .db #$43, #%01100111
0D169 83 67                         .db #$83, #%01100111
0D16B 24 09                         .db #$24, #%00001001
0D16D 74 0D                         .db #$74, #%00001101
0D16F C4 0A                         .db #$C4, #%00001010
0D171 05 A7                         .db #$05, #%10100111
0D173 45 27                         .db #$45, #%00100111
0D175 95 27                         .db #$95, #%00100111
0D177 16 C7                         .db #$16, #%11000111
0D179 36 67                         .db #$36, #%01100111
0D17B 86 67                         .db #$86, #%01100111
0D17D D6 07                         .db #$D6, #%00000111
0D17F 07 A3                         .db #$07, #%10100011
0D181 27 23                         .db #$27, #%00100011
0D183 47 C7                         .db #$47, #%11000111
0D185 57 A0                         .db #$57, #%10100000
0D187 67 A7                         .db #$67, #%10100111
0D189 77 20                         .db #$77, #%00100000
0D18B 97 C7                         .db #$97, #%11000111
0D18D A7 A4                         .db #$A7, #%10100100
0D18F B7 A7                         .db #$B7, #%10100111
0D191 C7 24                         .db #$C7, #%00100100
0D193 28 0B                         .db #$28, #%00001011
0D195 38 A3                         .db #$38, #%10100011
0D197 78 08                         .db #$78, #%00001000
0D199 88 A3                         .db #$88, #%10100011
0D19B C8 0C                         .db #$C8, #%00001100
0D19D D8 A4                         .db #$D8, #%10100100
0D19F 09 43                         .db #$09, #%01000011
0D1A1 59 40                         .db #$59, #%01000000
0D1A3 A9 44                         .db #$A9, #%01000100
0D1A5 FF                            .db #LEVEL_END
0D1A6                           
0D1A6                           lvl_layout_19:
0D1A6 11 A8                         .db #$11, #%10101000
0D1A8 21 68                         .db #$21, #%01101000
0D1AA 81 28                         .db #$81, #%00101000
0D1AC B1 48                         .db #$B1, #%01001000
0D1AE 22 48                         .db #$22, #%01001000
0D1B0 62 68                         .db #$62, #%01101000
0D1B2 B2 28                         .db #$B2, #%00101000
0D1B4 23 28                         .db #$23, #%00101000
0D1B6 83 28                         .db #$83, #%00101000
0D1B8 B3 28                         .db #$B3, #%00101000
0D1BA 04 E8                         .db #$04, #%11101000
0D1BC 24 08                         .db #$24, #%00001000
0D1BE 44 08                         .db #$44, #%00001000
0D1C0 64 E8                         .db #$64, #%11101000
0D1C2 84 E8                         .db #$84, #%11101000
0D1C4 C4 A8                         .db #$C4, #%10101000
0D1C6 D4 E8                         .db #$D4, #%11101000
0D1C8 15 48                         .db #$15, #%01001000
0D1CA 55 C8                         .db #$55, #%11001000
0D1CC 75 C8                         .db #$75, #%11001000
0D1CE A5 08                         .db #$A5, #%00001000
0D1D0 36 08                         .db #$36, #%00001000
0D1D2 B6 08                         .db #$B6, #%00001000
0D1D4 27 48                         .db #$27, #%01001000
0D1D6 97 28                         .db #$97, #%00101000
0D1D8 C7 08                         .db #$C7, #%00001000
0D1DA 09 61                         .db #$09, #%01100001
0D1DC 19 11                         .db #$19, #%00010001
0D1DE 49 61                         .db #$49, #%01100001
0D1E0 89 31                         .db #$89, #%00110001
0D1E2 A9 61                         .db #$A9, #%01100001
0D1E4 FF                            .db #LEVEL_END
0D1E5                           
0D1E5                           lvl_layout_20:
0D1E5 00 60                         .db #$00, #%01100000
0D1E7 10 1A                         .db #$10, #%00011010
0D1E9 40 A7                         .db #$40, #%10100111
0D1EB 50 20                         .db #$50, #%00100000
0D1ED 70 1A                         .db #$70, #%00011010
0D1EF 80 40                         .db #$80, #%01000000
0D1F1 B0 1A                         .db #$B0, #%00011010
0D1F3 C0 20                         .db #$C0, #%00100000
0D1F5 01 40                         .db #$01, #%01000000
0D1F7 31 1A                         .db #$31, #%00011010
0D1F9 A1 40                         .db #$A1, #%01000000
0D1FB D1 1A                         .db #$D1, #%00011010
0D1FD 43 67                         .db #$43, #%01100111
0D1FF 83 47                         .db #$83, #%01000111
0D201 44 A7                         .db #$44, #%10100111
0D203 54 25                         .db #$54, #%00100101
0D205 94 08                         .db #$94, #%00001000
0D207 A4 A7                         .db #$A4, #%10100111
0D209 55 05                         .db #$55, #%00000101
0D20B 65 08                         .db #$65, #%00001000
0D20D 06 27                         .db #$06, #%00100111
0D20F 36 67                         .db #$36, #%01100111
0D211 76 28                         .db #$76, #%00101000
0D213 A6 27                         .db #$A6, #%00100111
0D215 D6 07                         .db #$D6, #%00000111
0D217 A7 A7                         .db #$A7, #%10100111
0D219 08 60                         .db #$08, #%01100000
0D21B 09 60                         .db #$09, #%01100000
0D21D 18 A7                         .db #$18, #%10100111
0D21F 48 A7                         .db #$48, #%10100111
0D221 58 47                         .db #$58, #%01000111
0D223 88 27                         .db #$88, #%00100111
0D225 B8 20                         .db #$B8, #%00100000
0D227 D8 1A                         .db #$D8, #%00011010
0D229 59 15                         .db #$59, #%00010101
0D22B 69 60                         .db #$69, #%01100000
0D22D A9 60                         .db #$A9, #%01100000
0D22F FF                            .db #LEVEL_END
0D230                           
0D230                           lvl_layout_21:
0D230 00 13                         .db #$00, #%00010011
0D232 10 11                         .db #$10, #%00010001
0D234 20 67                         .db #$20, #%01100111
0D236 60 67                         .db #$60, #%01100111
0D238 A0 47                         .db #$A0, #%01000111
0D23A D0 15                         .db #$D0, #%00010101
0D23C 32 63                         .db #$32, #%01100011
0D23E 72 05                         .db #$72, #%00000101
0D240 82 43                         .db #$82, #%01000011
0D242 B2 43                         .db #$B2, #%01000011
0D244 33 03                         .db #$33, #%00000011
0D246 43 2A                         .db #$43, #%00101010
0D248 63 7A                         .db #$63, #%01111010
0D24A 73 2A                         .db #$73, #%00101010
0D24C A3 7A                         .db #$A3, #%01111010
0D24E 34 63                         .db #$34, #%01100011
0D250 74 63                         .db #$74, #%01100011
0D252 B4 43                         .db #$B4, #%01000011
0D254 06 63                         .db #$06, #%01100011
0D256 46 63                         .db #$46, #%01100011
0D258 86 63                         .db #$86, #%01100011
0D25A C6 C3                         .db #$C6, #%11000011
0D25C 07 7A                         .db #$07, #%01111010
0D25E 47 7A                         .db #$47, #%01111010
0D260 67 0A                         .db #$67, #%00001010
0D262 87 7A                         .db #$87, #%01111010
0D264 08 13                         .db #$08, #%00010011
0D266 18 43                         .db #$18, #%01000011
0D268 48 63                         .db #$48, #%01100011
0D26A 88 63                         .db #$88, #%01100011
0D26C FF                            .db #LEVEL_END
0D26D                           
0D26D                           lvl_layout_22:
0D26D 00 7A                         .db #$00, #%01111010
0D26F 40 7A                         .db #$40, #%01111010
0D271 80 7A                         .db #$80, #%01111010
0D273 C0 3A                         .db #$C0, #%00111010
0D275 13 67                         .db #$13, #%01100111
0D277 83 A7                         .db #$83, #%10100111
0D279 B3 07                         .db #$B3, #%00000111
0D27B 14 07                         .db #$14, #%00000111
0D27D 44 07                         .db #$44, #%00000111
0D27F A4 07                         .db #$A4, #%00000111
0D281 15 A5                         .db #$15, #%10100101
0D283 45 A5                         .db #$45, #%10100101
0D285 85 25                         .db #$85, #%00100101
0D287 86 05                         .db #$86, #%00000101
0D289 A6 05                         .db #$A6, #%00000101
0D28B 17 11                         .db #$17, #%00010001
0D28D 47 A1                         .db #$47, #%10100001
0D28F 87 A1                         .db #$87, #%10100001
0D291 B7 A1                         .db #$B7, #%10100001
0D293 18 41                         .db #$18, #%01000001
0D295 68 01                         .db #$68, #%00000001
0D297 D8 01                         .db #$D8, #%00000001
0D299 FF                            .db #LEVEL_END
0D29A                           
0D29A                           lvl_layout_23:
0D29A 00 71                         .db #$00, #%01110001
0D29C 40 11                         .db #$40, #%00010001
0D29E 50 43                         .db #$50, #%01000011
0D2A0 80 D1                         .db #$80, #%11010001
0D2A2 90 E3                         .db #$90, #%11100011
0D2A4 A0 63                         .db #$A0, #%01100011
0D2A6 01 63                         .db #$01, #%01100011
0D2A8 41 63                         .db #$41, #%01100011
0D2AA A1 63                         .db #$A1, #%01100011
0D2AC 02 63                         .db #$02, #%01100011
0D2AE 42 63                         .db #$42, #%01100011
0D2B0 62 11                         .db #$62, #%00010001
0D2B2 A2 67                         .db #$A2, #%01100111
0D2B4 04 63                         .db #$04, #%01100011
0D2B6 44 23                         .db #$44, #%00100011
0D2B8 64 D1                         .db #$64, #%11010001
0D2BA 74 E3                         .db #$74, #%11100011
0D2BC 84 F1                         .db #$84, #%11110001
0D2BE 94 E3                         .db #$94, #%11100011
0D2C0 A4 C7                         .db #$A4, #%11000111
0D2C2 B4 23                         .db #$B4, #%00100011
0D2C4 05 63                         .db #$05, #%01100011
0D2C6 45 23                         .db #$45, #%00100011
0D2C8 06 71                         .db #$06, #%01110001
0D2CA 46 11                         .db #$46, #%00010001
0D2CC 56 E3                         .db #$56, #%11100011
0D2CE D6 07                         .db #$D6, #%00000111
0D2D0 17 D1                         .db #$17, #%11010001
0D2D2 27 43                         .db #$27, #%01000011
0D2D4 67 D1                         .db #$67, #%11010001
0D2D6 A7 C7                         .db #$A7, #%11000111
0D2D8 C7 A7                         .db #$C7, #%10100111
0D2DA D7 B3                         .db #$D7, #%10110011
0D2DC 28 43                         .db #$28, #%01000011
0D2DE 78 43                         .db #$78, #%01000011
0D2E0 29 43                         .db #$29, #%01000011
0D2E2 79 43                         .db #$79, #%01000011
0D2E4 FF                           .db #LEVEL_END
0D2E5                           
0D2E5                           lvl_layout_24:
0D2E5 02 67                         .db #$02, #%01100111
0D2E7 42 67                         .db #$42, #%01100111
0D2E9 82 67                         .db #$82, #%01100111
0D2EB 05 67                         .db #$05, #%01100111
0D2ED 45 67                         .db #$45, #%01100111
0D2EF 85 67                         .db #$85, #%01100111
0D2F1 08 67                         .db #$08, #%01100111
0D2F3 48 67                         .db #$48, #%01100111
0D2F5 88 67                         .db #$88, #%01100111
0D2F7 30 E7                         .db #$30, #%11100111
0D2F9 70 E7                         .db #$70, #%11100111
0D2FB B0 E7                         .db #$B0, #%11100111
0D2FD 34 E7                         .db #$34, #%11100111
0D2FF 74 E7                         .db #$74, #%11100111
0D301 B4 E7                         .db #$B4, #%11100111
0D303 20 13                         .db #$20, #%00010011
0D305 40 10                         .db #$40, #%00010000
0D307 80 02                         .db #$80, #%00000010
0D309 41 05                         .db #$41, #%00000101
0D30B B1 09                         .db #$B1, #%00001001
0D30D 02 09                         .db #$02, #%00001001
0D30F 52 0C                         .db #$52, #%00001100
0D311 13 11                         .db #$13, #%00010001
0D313 33 04                         .db #$33, #%00000100
0D315 74 0C                         .db #$74, #%00001100
0D317 B4 08                         .db #$B4, #%00001000
0D319 15 09                         .db #$15, #%00001001
0D31B 55 0C                         .db #$55, #%00001100
0D31D 95 0C                         .db #$95, #%00001100
0D31F 47 03                         .db #$47, #%00000011
0D321 A7 12                         .db #$A7, #%00010010
0D323 18 15                         .db #$18, #%00010101
0D325 09 05                         .db #$09, #%00000101
0D327 19 03                         .db #$19, #%00000011
0D329 FF                            .db #LEVEL_END
0D32A                           
0D32A                           lvl_layout_25:
0D32A 00 12                         .db #$00, #%00010010
0D32C 10 63                         .db #$10, #%01100011
0D32E 60 63                         .db #$60, #%01100011
0D330 A0 07                         .db #$A0, #%00000111
0D332 01 11                         .db #$01, #%00010001
0D334 A1 02                         .db #$A1, #%00000010
0D336 02 67                         .db #$02, #%01100111
0D338 42 07                         .db #$42, #%00000111
0D33A 62 67                         .db #$62, #%01100111
0D33C A2 C7                         .db #$A2, #%11000111
0D33E 03 61                         .db #$03, #%01100001
0D340 43 01                         .db #$43, #%00000001
0D342 63 61                         .db #$63, #%01100001
0D344 A6 E7                         .db #$A6, #%11100111
0D346 B6 47                         .db #$B6, #%01000111
0D348 C6 01                         .db #$C6, #%00000001
0D34A B7 42                         .db #$B7, #%01000010
0D34C B8 42                         .db #$B8, #%01000010
0D34E C8 0A                         .db #$C8, #%00001010
0D350 09 7A                         .db #$09, #%01111010
0D352 49 7A                         .db #$49, #%01111010
0D354 89 3A                         .db #$89, #%00111010
0D356 B9 42                         .db #$B9, #%01000010
0D358 FF                            .db #LEVEL_END
0D359                           
0D359                           ;; Level layout address pointers
0D359                           tbl_lvl_layout_hi:
0D359 CC CC CC CC CD                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D35E CD CE CE CE CE                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D363 CF CF CF CF D0                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D368 D0 D0 D1 D1 D1                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D36D D2 D2 D2 D2 D3                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D372                           
0D372                           tbl_lvl_layout_lo:
0D372 7A 95 CA FD 6E                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D377 A9 32 73 AA ED                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D37C 1C 6F 9A ED 64                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D381 95 EA 51 A6 E5                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D386 30 6D 9A E5 2A                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D38B                           
0D38B                           ;; Ball start position (#$YX)
0D38B                           tbl_lvl_ball_startpos:
0D38B 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D390 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D395 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D39A 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D39F 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D3A4                               
0D3A4                           ;; Ball start direction, color and tile score
0D3A4                           ;; #% ccc v tttt
0D3A4                           ;;    ||| | ++++-- tile score
0D3A4                           ;;    ||| +------- vertical direction, up (0) or down
0D3A4                           ;;    +++--------- color (CBRYGM)
0D3A4                           tbl_lvl_ball_init:
0D3A4 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D3A9 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D3AE 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D3B3 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D3B8 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D3BD                           
0D3BD                           
0D3BD                           
0D3BD                           ;; Helper table to multiply values by 16
0D3BD                           tbl_Times16:
0D3BD 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D3C5 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D3CD                               
0D3CD                           
0D3CD                           ;; Helper table to multiply values by 64
0D3CD                           tbl_Times64:
0D3CD 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D3D1                           
0D3D1                           
0D3D1                           ;; Metatile ID to CHR data mapper
0D3D1                           tbl_GametileTopLeft:
0D3D1 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D3DB                           
0D3DB                           tbl_GametileTopRight:
0D3DB 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D3E5                           
0D3E5                           tbl_GametileBottomLeft:
0D3E5 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D3EF                           
0D3EF                           tbl_GametileBottomRight:
0D3EF 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D3F9                           
0D3F9                           ;; Metatile ID to RAM byte data mapper
0D3F9                           tbl_GameTileRamByte:
0D3F9 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D3FE                           
0D3FE                           ;; HUD text data
0D3FE                           tbl_HudText:
0D3FE 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D406 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D40D 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D415 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D41A                           
0D41A                           ;; NMI handler
0D41A                           NMI:
0D41A                               .include "interrupt/nmi.asm"
0D41A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D41A                           ;;
0D41A                           ;; include/nmi.asm
0D41A                           ;;
0D41A                           ;; Non-maskable interrupt script. This script is being executed
0D41A                           ;; when vBlank hits.
0D41A                           ;;
0D41A                           ;;
0D41A                           
0D41A                               ;; Preserve accumulator through stack
0D41A 48                            PHA
0D41B                           
0D41B                               ;; Should NMI be skipped?
0D41B A5 13                         LDA skip_nmi
0D41D F0 03                         BEQ +
0D41F 4C AD D4                          JMP +skip_nmi
0D422                               +
0D422                           
0D422                               ;; When in NMI, skip additional NMI requests
0D422 A9 01                         LDA #$01
0D424 85 13                         STA skip_nmi
0D426                           
0D426                               ;; Preserve X, Y, and PC through stack
0D426 8A                            TXA
0D427 48                            PHA
0D428 98                            TYA
0D429 48                            PHA
0D42A 08                            PHP
0D42B                               
0D42B                               ;; Check forced NMI skip
0D42B A5 14                         LDA force_skip_nmi
0D42D F0 03                         BEQ +
0D42F 4C 9E D4                          JMP +force_skip_nmi
0D432                               +
0D432                           
0D432                               ;; Update PPU mask
0D432                               ;LDA #$00
0D432                               ;STA PPU_CTRL
0D432 A5 12                         LDA soft_ppu_mask
0D434 8D 01 20                      STA PPU_MASK
0D437                               
0D437                               
0D437                               ;; Additional PPU updates go here
0D437                               .include "game/interrupt/nmi.asm"
0D437                           
0D437                               ;; Check if ppu_buffer needs updating
0D437 A5 2F                         LDA ppu_buffer_update
0D439 D0 03                         BNE +
0D43B 4C 7D D4                          JMP +no_ppu_buffer_update
0D43E                               +
0D43E                           
0D43E                               ;; Reset ppu control register and mask
0D43E A2 00                         LDX #$00
0D440 8E 00 20                      STX PPU_CTRL
0D443 8E 01 20                      STX PPU_MASK
0D446                           
0D446                               ;; Set up loop
0D446                               -
0D446                                   ;; Reset hi/lo latch
0D446 2C 02 20                          BIT PPU_STATUS
0D449                           
0D449                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D449 BD 00 03                          LDA ppu_buffer,x
0D44C 8D 06 20                          STA PPU_ADDR
0D44F E8                                INX
0D450 BD 00 03                          LDA ppu_buffer,x
0D453 8D 06 20                          STA PPU_ADDR
0D456                           
0D456                                   ;; Write ppu_buffer data to PPU_ADDR
0D456 E8                                INX
0D457 BD 00 03                          LDA ppu_buffer,x
0D45A 8D 07 20                          STA PPU_DATA
0D45D                           
0D45D                                   ;; Check if updating is done (eg. X is at pointer)
0D45D E8                                INX
0D45E E4 30                             CPX ppu_buffer_pointer
0D460 F0 03                             BEQ +
0D462 4C 46 D4                      JMP -
0D465                           +
0D465                           
0D465                               ;; Reset ppu buffer update and pointer
0D465 A9 00                         LDA #$00
0D467 85 2F                         STA ppu_buffer_update
0D469 85 30                         STA ppu_buffer_pointer
0D46B                               
0D46B                               ;; Reset scrolling position
0D46B 8D 05 20                      STA PPU_SCROLL
0D46E 8D 05 20                      STA PPU_SCROLL
0D471                           
0D471                               ;; Restore ppu control register and mask
0D471 A9 90                         LDA #%10010000
0D473 8D 00 20                      STA PPU_CTRL
0D476 A5 12                         LDA soft_ppu_mask
0D478 8D 01 20                      STA PPU_MASK
0D47B A9 00                         LDA #$00
0D47D                           
0D47D                           ;; Continue other NMI stuff
0D47D                           +no_ppu_buffer_update:
0D47D                           
0D47D                               ;; Reset sprite RAM, draw sprites
0D47D 8D 03 20                      STA OAM_ADDR
0D480 A9 02                         LDA #$02
0D482 8D 14 40                      STA OAM_DMA
0D485                           
0D485                               ;; Decrease explosion frame counters
0D485 A0 04                         LDY #MAX_ANIMATIONS
0D487 A2 00                         LDX #$00
0D489                               -
0D489 BD 30 03                          LDA explosion_framecounter,x
0D48C F0 03                             BEQ +
0D48E DE 30 03                              DEC explosion_framecounter,x
0D491                                   +
0D491 E8                                INX
0D492 88                                DEY
0D493 F0 03                             BEQ +done        
0D495 4C 89 D4                      JMP -
0D498                           +done:
0D498                               
0D498                               ;; Decrease nudge counter
0D498 A5 33                         LDA nudge_counter
0D49A F0 02                         BEQ +
0D49C C6 33                             DEC nudge_counter
0D49E                               +
0D49E                           
0D49E                           ;; This is what happens when we forced nmi skip
0D49E                           +force_skip_nmi:
0D49E                           
0D49E                               ;; Increase frame counters
0D49E E6 15                         INC frame_counter
0D4A0                           
0D4A0                               ;; reset ball_update_position
0D4A0 A9 00                         LDA #$00
0D4A2 85 2B                         STA ball_update_position
0D4A4                           
0D4A4                               ;; Don't skip next NMI request
0D4A4 A9 00                         LDA #$00
0D4A6 85 13                         STA skip_nmi
0D4A8                           
0D4A8                               ;; Restore X, Y and PC from stack
0D4A8 28                            PLP
0D4A9 68                            PLA
0D4AA A8                            TAY
0D4AB 68                            PLA
0D4AC AA                            TAX
0D4AD                           
0D4AD                           +skip_nmi:
0D4AD                               ;; Restore accumulator from stack
0D4AD 68                            PLA
0D4AE                           
0D4AE                               ;; Return
0D4AE 40                            RTI
0D4AF                           
0D4AF                           ;; IRQ handler (empty)
0D4AF                           IRQ:
0D4AF                               .include "interrupt/irq.asm"
0D4AF 40                            RTI0D4B0                           
0D4B0                           ;; Interrupt vectors
0D4B0 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 1A D4                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE AF D4                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
