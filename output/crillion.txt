	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$06
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           ball_update_position   .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           lock_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Sprite RAM pointer to keep track of sprites to update
0003C                           sprite_ram_pointer     .dsb 1
0003D                           
0003D                           ;; Counters (actually Timers, should refactor [@TODO])
0003D                           nudge_counter          .dsb 1
0003E                           bonus_counter          .dsb 1
0003F                           kill_counter           .dsb 1
00040                           
00040                           ;; Current level (doubles as level select variable)
00040                           current_level          .dsb 1
00041                           
00041                           ;; Tile type the ball is currently colliding with
00041                           colliding_tile         .dsb 1
00042                           
00042                           ;; Number of blocks left on screen
00042                           blocks_left            .dsb 1
00043                           
00043                           ;; Sound control variables
00043                           max_noise              .dsb 1
00044                           sweep_noise            .dsb 1
00045                           current_noise          .dsb 1
00046                           noise_counter          .dsb 1
00047                           do_beeps               .dsb 1
00048                           
00048                           ;; Additional NMI check for timed PPU fade
00048                           check_nmi              .dsb 1
00049                               00049                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_framecounter    .dsb 4
00364                           
00364                               ;; _currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; _attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 8A C4                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 8A C4                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 40                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3C                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 6D C4                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 38                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 38                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 8E CE                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 8B CE                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 B1 C5                      JSR sub_DisableRendering
0C08A 20 36 C7                      JSR sub_JumpToPointer
0C08D 20 C5 C5                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 38                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 38                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 38                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C 5D C3                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3C                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 99 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                           
0C0BE                               ;; Check if ball is frozen
0C0BE A5 37                         LDA ball_flags
0C0C0 29 04                         AND #BALL_IS_FROZEN
0C0C2 F0 03                         BEQ +
0C0C4 4C 99 C2                          JMP +skipBallMovement
0C0C7                               +
0C0C7                           
0C0C7                               ;; Move the ball
0C0C7                               .include "game/include/main/move_ball.asm"
0C0C7                           
0C0C7                               ;; Check if ball goes up or down
0C0C7 A5 37                         LDA ball_flags
0C0C9 29 10                         AND #BALL_MOVES_DOWN
0C0CB F0 2B                         BEQ +moveBallUp
0C0CD                           
0C0CD                           
0C0CD                           +moveBallDown:
0C0CD                               ;; update the low byte
0C0CD A5 1A                         LDA ball_ypos_lo
0C0CF 85 1C                         STA ball_ypos_lo_prev
0C0D1 18                            CLC
0C0D2 69 F0                         ADC #BALL_SPEED_LO
0C0D4 85 1A                         STA ball_ypos_lo
0C0D6                           
0C0D6                               ;; update the high byte with carry
0C0D6 A5 19                         LDA ball_ypos_hi
0C0D8 85 1B                         STA ball_ypos_hi_prev
0C0DA 69 01                         ADC #BALL_SPEED_HI
0C0DC 85 19                         STA ball_ypos_hi
0C0DE                               
0C0DE                               ;; Check bottom bound
0C0DE C9 C8                         CMP #BOUND_BOTTOM
0C0E0 90 3C                         BCC +checkHorizontalMovement
0C0E2 F0 3A                         BEQ +checkHorizontalMovement
0C0E4                           
0C0E4                           
0C0E4                               ;; Change ball direction to "up"
0C0E4 A9 C8                         LDA #BOUND_BOTTOM
0C0E6 38                            SEC
0C0E7 E9 01                         SBC #$01
0C0E9 85 19                         STA ball_ypos_hi
0C0EB A9 00                         LDA #$00
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF A5 37                         LDA ball_flags
0C0F1 29 EF                         AND #MOVE_BALL_UP
0C0F3 85 37                         STA ball_flags
0C0F5 4C 1E C1                      JMP +checkHorizontalMovement
0C0F8                           
0C0F8                           
0C0F8                           +moveBallUp:
0C0F8                               ;; update the low byte
0C0F8 A5 1A                         LDA ball_ypos_lo
0C0FA 85 1C                         STA ball_ypos_lo_prev
0C0FC 38                            SEC
0C0FD E9 F0                         SBC #BALL_SPEED_LO
0C0FF 85 1A                         STA ball_ypos_lo
0C101                           
0C101                               ;; update the high byte with carry
0C101 A5 19                         LDA ball_ypos_hi
0C103 85 1B                         STA ball_ypos_hi_prev
0C105 E9 01                         SBC #BALL_SPEED_HI
0C107 85 19                         STA ball_ypos_hi
0C109                               
0C109                               ;; Check top bound
0C109 C9 30                         CMP #BOUND_TOP
0C10B B0 11                         BCS +checkHorizontalMovement
0C10D                           
0C10D                               ;; Change ball direction to "down"
0C10D A9 30                         LDA #BOUND_TOP
0C10F 18                            CLC
0C110 69 01                         ADC #$01
0C112 85 19                         STA ball_ypos_hi
0C114 A9 00                         LDA #$00
0C116 85 1A                         STA ball_ypos_lo
0C118 A5 37                         LDA ball_flags
0C11A 09 10                         ORA #MOVE_BALL_DOWN
0C11C 85 37                         STA ball_flags
0C11E                           
0C11E                           
0C11E                           +checkHorizontalMovement:
0C11E                           
0C11E                               ;; Check if ball is being nudged
0C11E A5 3D                         LDA nudge_counter
0C120 D0 41                         BNE +doneBallMovement
0C122                           
0C122                               ;; Check if left button is held
0C122 A5 0F                         LDA buttons_held
0C124 29 02                         AND #BUTTON_LEFT
0C126 F0 1B                         BEQ +
0C128                                   ;; update the low byte
0C128 A5 18                             LDA ball_xpos_lo
0C12A 38                                SEC
0C12B E9 F0                             SBC #BALL_SPEED_LO
0C12D 85 18                             STA ball_xpos_lo
0C12F                           
0C12F                                   ;; update the high byte
0C12F A5 17                             LDA ball_xpos_hi
0C131 E9 01                             SBC #BALL_SPEED_HI
0C133 85 17                             STA ball_xpos_hi
0C135                                   
0C135                                   ;; Check left bound
0C135 C9 10                             CMP #BOUND_LEFT
0C137 B0 2A                             BCS +doneBallMovement
0C139                                   
0C139                                   ;; Set flag to nudge right and set nudge counter
0C139 A5 37                             LDA ball_flags
0C13B 09 02                             ORA #NUDGE_BALL_RIGHT
0C13D 20 2F C7                          JSR sub_InitiateNudge
0C140                           
0C140 4C 63 C1                          JMP +doneBallMovement        
0C143                               +
0C143                           
0C143                               ;; Check if right button is held
0C143 A5 0F                         LDA buttons_held
0C145 29 01                         AND #BUTTON_RIGHT
0C147 F0 1A                         BEQ +
0C149                                   ;; update the low byte
0C149 A5 18                             LDA ball_xpos_lo
0C14B 18                                CLC
0C14C 69 F0                             ADC #BALL_SPEED_LO
0C14E 85 18                             STA ball_xpos_lo
0C150                           
0C150                                   ;; update the high byte
0C150 A5 17                             LDA ball_xpos_hi
0C152 69 01                             ADC #BALL_SPEED_HI
0C154 85 17                             STA ball_xpos_hi     
0C156                           
0C156                                  ;; Check right bound
0C156 C9 E8                             CMP #BOUND_RIGHT
0C158 90 09                             BCC +doneBallMovement
0C15A F0 07                             BEQ +doneBallMovement
0C15C                                   
0C15C                                   ;; Set flag to nudge left and set nudge timer
0C15C A5 37                             LDA ball_flags
0C15E 29 FD                             AND #NUDGE_BALL_LEFT
0C160 20 2F C7                          JSR sub_InitiateNudge
0C163                               +
0C163                           
0C163                           
0C163                           +doneBallMovement:
0C163                           
0C163                               ;; Check nudge
0C163 A5 3D                         LDA nudge_counter
0C165 F0 23                         BEQ +doneBallNudging
0C167 A5 37                             LDA ball_flags
0C169 29 02                             AND #NUDGE_BALL_RIGHT
0C16B F0 10                             BEQ +nudgeBallLeft
0C16D                                   
0C16D                                       ;; update the low byte
0C16D A5 18                                 LDA ball_xpos_lo
0C16F 18                                    CLC
0C170 69 F0                                 ADC #BALL_SPEED_LO
0C172 85 18                                 STA ball_xpos_lo
0C174                           
0C174                                       ;; update the high byte
0C174 A5 17                                 LDA ball_xpos_hi
0C176 69 01                                 ADC #BALL_SPEED_HI
0C178 85 17                                 STA ball_xpos_hi  
0C17A 4C 8A C1                              JMP +doneBallNudging
0C17D                                   +nudgeBallLeft:
0C17D                                   
0C17D                                   ;; update the low byte
0C17D A5 18                             LDA ball_xpos_lo
0C17F 38                                SEC
0C180 E9 F0                             SBC #BALL_SPEED_LO
0C182 85 18                             STA ball_xpos_lo
0C184                           
0C184                                   ;; update the high byte
0C184 A5 17                             LDA ball_xpos_hi
0C186 E9 01                             SBC #BALL_SPEED_HI
0C188 85 17                             STA ball_xpos_hi
0C18A                               +doneBallNudging:
0C18A                           
0C18A                               ;; Don't update position again until next frame
0C18A E6 35                         INC ball_update_position
0C18C                           
0C18C                           +doneBallHandling:0C18C                               
0C18C                               ;; Do collision detection
0C18C                               .include "game/include/main/collision_detection.asm"
0C18C                           
0C18C                               ;; Get ball's x-left, x-center, x-right position
0C18C A5 17                         LDA ball_xpos_hi
0C18E 18                            CLC
0C18F 69 F0                         ADC #BALL_LEFT_WGA
0C191 85 2F                         STA ball_left
0C193 18                            CLC
0C194 69 04                         ADC #BALL_HALF_SIZE
0C196 85 30                         STA ball_center
0C198 18                            CLC
0C199 69 04                         ADC #BALL_HALF_SIZE
0C19B 85 31                         STA ball_right
0C19D                           
0C19D                               ;; Get ball's y-top, y-middle, y-bottom position
0C19D A5 19                         LDA ball_ypos_hi
0C19F 18                            CLC
0C1A0 69 D0                         ADC #BALL_TOP_WGA
0C1A2 85 32                         STA ball_top
0C1A4 18                            CLC
0C1A5 69 04                         ADC #BALL_HALF_SIZE
0C1A7 85 33                         STA ball_middle
0C1A9 18                            CLC
0C1AA 69 04                         ADC #BALL_HALF_SIZE
0C1AC 85 34                         STA ball_bottom
0C1AE                           
0C1AE                           +checkRightCollision:
0C1AE                               ;; Check if ball moves right
0C1AE                               ;; No need to check nudging here as that will never collide with a tile
0C1AE A5 0F                         LDA buttons_held
0C1B0 29 01                         AND #BUTTON_RIGHT
0C1B2 F0 20                         BEQ +checkLeftCollision
0C1B4                           
0C1B4                               ;; Check tile at right position
0C1B4 A5 33                         LDA ball_middle
0C1B6 85 00                         STA temp
0C1B8 A5 31                         LDA ball_right
0C1BA 85 01                         STA temp+1
0C1BC 20 99 C5                      JSR sub_ConvertXYToTileType
0C1BF 29 01                         AND #TILE_IS_SOLID
0C1C1 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1C3                           
0C1C3                               ;; Nudge ball and evaluate tile type
0C1C3 A9 01                         LDA #$01
0C1C5 85 36                         STA lock_block_space_to_check
0C1C7 A5 37                         LDA ball_flags
0C1C9 29 FD                         AND #NUDGE_BALL_LEFT
0C1CB 20 2F C7                      JSR sub_InitiateNudge
0C1CE 20 F2 C5                      JSR sub_EvaluateTileType
0C1D1 4C F7 C1                      JMP +checkTopCollision
0C1D4                           
0C1D4                           +checkLeftCollision:
0C1D4                               ;; Check if ball moves right
0C1D4                               ;; No need to check nudging here as that will never collide with a tile
0C1D4 A5 0F                         LDA buttons_held
0C1D6 29 02                         AND #BUTTON_LEFT
0C1D8 F0 1D                         BEQ +checkTopCollision
0C1DA                           
0C1DA                               ;; Check tile at right position
0C1DA A5 33                         LDA ball_middle
0C1DC 85 00                         STA temp
0C1DE A5 2F                         LDA ball_left
0C1E0 85 01                         STA temp+1
0C1E2 20 99 C5                      JSR sub_ConvertXYToTileType
0C1E5 29 01                         AND #TILE_IS_SOLID
0C1E7 F0 0E                         BEQ +checkTopCollision
0C1E9                           
0C1E9                               ;; Tile is solid; nudge ball and evaluate tile type
0C1E9 A9 FF                         LDA #$FF
0C1EB 85 36                         STA lock_block_space_to_check
0C1ED A5 37                         LDA ball_flags
0C1EF 09 02                         ORA #NUDGE_BALL_RIGHT
0C1F1 20 2F C7                      JSR sub_InitiateNudge
0C1F4 20 F2 C5                      JSR sub_EvaluateTileType
0C1F7                               
0C1F7                               
0C1F7                           +checkTopCollision:
0C1F7                               ;; Check if ball moves up
0C1F7 A5 37                         LDA ball_flags
0C1F9 29 10                         AND #BALL_MOVES_DOWN
0C1FB D0 27                         BNE +checkBottomCollision
0C1FD                           
0C1FD                               ;; Check tile at top position
0C1FD A5 32                         LDA ball_top
0C1FF 85 00                         STA temp
0C201 A5 30                         LDA ball_center
0C203 85 01                         STA temp+1
0C205 20 99 C5                      JSR sub_ConvertXYToTileType
0C208 29 01                         AND #TILE_IS_SOLID
0C20A F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C20C                           
0C20C                               ;; Tile is solid; move ball down and evaluate tile type
0C20C A5 1C                         LDA ball_ypos_lo_prev
0C20E 85 1A                         STA ball_ypos_lo
0C210 A5 1B                         LDA ball_ypos_hi_prev
0C212 85 19                         STA ball_ypos_hi
0C214 A5 37                         LDA ball_flags
0C216 09 10                         ORA #MOVE_BALL_DOWN
0C218 85 37                         STA ball_flags
0C21A                           
0C21A A9 F0                         LDA #$F0 ; which is -16
0C21C 85 36                         STA lock_block_space_to_check
0C21E 20 F2 C5                      JSR sub_EvaluateTileType
0C221 4C 48 C2                      JMP +doneCheckingCollision
0C224                           
0C224                           +checkBottomCollision:
0C224                               ;; No movement check needed: since ball is not moving up, it must move down
0C224                           
0C224                               ;; Check tile at bottom position
0C224 A5 34                         LDA ball_bottom
0C226 85 00                         STA temp
0C228 A5 30                         LDA ball_center
0C22A 85 01                         STA temp+1
0C22C 20 99 C5                      JSR sub_ConvertXYToTileType
0C22F 29 01                         AND #TILE_IS_SOLID
0C231 F0 15                         BEQ +doneCheckingCollision
0C233                           
0C233                               ;; Tile is solid; move ball up and evaluate tile type
0C233 A5 1C                         LDA ball_ypos_lo_prev
0C235 85 1A                         STA ball_ypos_lo
0C237 A5 1B                         LDA ball_ypos_hi_prev
0C239 85 19                         STA ball_ypos_hi
0C23B A5 37                         LDA ball_flags
0C23D 29 EF                         AND #MOVE_BALL_UP
0C23F 85 37                         STA ball_flags
0C241                           
0C241 A9 10                         LDA #$10
0C243 85 36                         STA lock_block_space_to_check
0C245 20 F2 C5                      JSR sub_EvaluateTileType
0C248                           
0C248                           +doneCheckingCollision:
0C248                           
0C248                               
0C248                               ;; Update bonus
0C248                               .include "game/include/main/update_bonus.asm"
0C248                           ;; update_bonus.asm
0C248                           
0C248                               ;; If bonus = 000, skip decreasing
0C248 A5 2C                         LDA ball_bonus
0C24A 18                            CLC
0C24B 65 2D                         ADC ball_bonus+1
0C24D 18                            CLC
0C24E 65 2E                         ADC ball_bonus+2
0C250 F0 33                         BEQ +done
0C252                           
0C252                               ;; Check if bonus counter is done yet
0C252 A5 3E                         LDA bonus_counter
0C254 D0 2F                         BNE +done
0C256                           
0C256                               ;; Bonus counter is done
0C256                               ;; Reset bonus counter
0C256 A9 06                         LDA #BONUS_FRAMES
0C258 85 3E                         STA bonus_counter
0C25A                               
0C25A                               ;; Subtract one from ball bonus ones
0C25A C6 2E                         DEC ball_bonus+2
0C25C                               
0C25C                               ;; Check if underflow
0C25C 10 0E                         BPL +updateBonusOnScreen
0C25E                           
0C25E                               ;; If underflow, set 9 and subtract one from bonus tens
0C25E A9 09                         LDA #$09
0C260 85 2E                         STA ball_bonus+2
0C262 C6 2D                         DEC ball_bonus+1
0C264                               
0C264                               ;; Check if underflow
0C264 10 06                         BPL +updateBonusOnScreen
0C266                           
0C266                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C266 A9 09                         LDA #$09
0C268 85 2D                         STA ball_bonus+1
0C26A C6 2C                         DEC ball_bonus
0C26C                           
0C26C                               ;;209A 209B 209C
0C26C                           +updateBonusOnScreen:
0C26C A9 20                         LDA #$20
0C26E 85 00                         STA temp
0C270 A9 9C                         LDA #$9C
0C272 85 01                         STA temp+1
0C274 A2 02                         LDX #$02
0C276                               
0C276                               -updateNextDigit:
0C276 B5 2C                             LDA ball_bonus,x
0C278 18                                CLC
0C279 69 01                             ADC #$01
0C27B 85 02                             STA temp+2
0C27D 20 21 CD                          JSR sub_WriteByteToPPUBuffer
0C280 C6 01                             DEC temp+1
0C282 CA                                DEX
0C283 10 F1                         BPL -updateNextDigit
0C285                                   
0C285                           +done:0C285                               
0C285                               ;; Input test for beeps
0C285                               .include "game/test/input_beeps.asm"
0C285 A5 10                         LDA buttons_pressed
0C287 29 20                         AND #BUTTON_SELECT
0C289 F0 04                         BEQ +
0C28B A9 01                             LDA #$01
0C28D 85 47                             STA do_beeps
0C28F                               +
0C28F                               
0C28F A5 11                         LDA buttons_released
0C291 29 20                         AND #BUTTON_SELECT
0C293 F0 04                         BEQ +
0C295 A9 02                             LDA #$02
0C297 85 47                             STA do_beeps
0C299                               +0C299                           
0C299                           
0C299                           +skipBallMovement:
0C299                               ;; Testing timed PPU scroll concept
0C299                               .include "game/test/timed_ppuscroll_test.asm"
0C299                           ;; Timed updates (test)
0C299                           
0C299                               ;; If B button is pressed
0C299 A5 10                         LDA buttons_pressed
0C29B 29 10                         AND #BUTTON_START
0C29D D0 03                         BNE +
0C29F 4C 24 C3                          JMP +end
0C2A2                               +
0C2A2                           
0C2A2                           lbl_initiate_level_load:
0C2A2                               ;; Disable noise channel
0C2A2 A9 00                         LDA #$00
0C2A4 8D 15 40                      STA APU_STATUS
0C2A7 8D 0C 40                      STA NOISE_VOLUME
0C2AA                               
0C2AA                               ;; Set up loop fading
0C2AA A9 00                         LDA #$00
0C2AC 85 07                         STA temp+7
0C2AE A0 08                         LDY #$08
0C2B0                               -fadeLoop:
0C2B0 84 08                             STY temp+8
0C2B2                           
0C2B2                                   ;; Wait for NMI to pass
0C2B2 20 81 C4                          JSR sub_WaitForNMI
0C2B5                                   
0C2B5                                   ;; Now wait for No-sprite 0
0C2B5                                   -
0C2B5 AD 02 20                              LDA PPU_STATUS
0C2B8 29 40                                 AND #SPRITE_0_HIT
0C2BA D0 F9                             BNE -
0C2BC                               
0C2BC                                   ;; Now wait for Sprite 0
0C2BC                                   -
0C2BC AD 02 20                              LDA PPU_STATUS
0C2BF 29 40                                 AND #SPRITE_0_HIT
0C2C1 F0 F9                             BEQ -
0C2C3                                       
0C2C3                                   ;; Setup tile row loop
0C2C3 A0 16                             LDY #22
0C2C5                                   -tileLoop:
0C2C5                                   
0C2C5                                       ;; Disable drawing
0C2C5 A5 12                                 LDA soft_ppu_mask
0C2C7 29 F7                                 AND #%11110111
0C2C9 8D 01 20                              STA PPU_MASK
0C2CC                                       
0C2CC                                       ;; Set up scanline loop
0C2CC A2 08                                 LDX #$08
0C2CE                                       -scanlineLoop:
0C2CE E4 08                                     CPX temp+8
0C2D0 D0 0A                                     BNE +wasteTime
0C2D2                                           
0C2D2                                           ;; Restore drawing
0C2D2 A5 12                                     LDA soft_ppu_mask
0C2D4 09 08                                     ORA #%00001000
0C2D6 8D 01 20                                  STA PPU_MASK
0C2D9 4C E2 C2                                  JMP +wasteMoreTime
0C2DC                           
0C2DC                                           ;; Waste 12 frames
0C2DC                                           +wasteTime:
0C2DC E6 09                                     INC temp+9   ;+5
0C2DE C6 09                                     DEC temp+9   ;+5
0C2E0 49 00                                     EOR #$00     ;+2
0C2E2                                           
0C2E2                                           ;; Waste about 100 frames
0C2E2                                           +wasteMoreTime:
0C2E2                                           
0C2E2 86 01                                     STX temp+1     ;  3 down, 97 to go
0C2E4 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C2E6                                           -wasteLoop:
0C2E6 EA                                            NOP
0C2E7 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C2E9 CA                                            DEX        ;  5+5L down,  95-5L to go
0C2EA D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C2EC                           
0C2EC A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C2EE CA                                        DEX            ;  9+8L down, 91-8L to go
0C2EF D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C2F1                           
0C2F1 88                                    DEY
0C2F2 D0 D1                             BNE -tileLoop
0C2F4                           
0C2F4 A4 08                             LDY temp+8
0C2F6                                   
0C2F6 E6 07                             INC temp+7
0C2F8 A5 07                             LDA temp+7
0C2FA C9 02                             CMP #$02
0C2FC D0 B2                             BNE -fadeLoop
0C2FE                           
0C2FE A9 00                             LDA #$00
0C300 85 07                             STA temp+7
0C302 88                                DEY
0C303 D0 AB                         BNE -fadeLoop
0C305                               
0C305                               ;; Load the next level if ball not dead
0C305 A5 37                         LDA ball_flags
0C307 29 01                         AND #BALL_IS_DEAD
0C309 D0 05                         BNE +
0C30B E6 40                             INC current_level
0C30D 4C 16 C3                          JMP +loadLevel
0C310                               +
0C310                               
0C310                               ;; Revive ball
0C310 A5 37                         LDA ball_flags
0C312 29 FE                         AND #REVIVE_BALL
0C314 85 37                         STA ball_flags
0C316                           
0C316                           +loadLevel:
0C316 A5 40                         LDA current_level
0C318 C9 19                         CMP #25
0C31A D0 04                         BNE +
0C31C A9 00                             LDA #$00
0C31E 85 40                             STA current_level
0C320                               +
0C320                               
0C320 A9 81                         LDA #LOAD_GAME_SCREEN
0C322 85 38                         STA screen_mode
0C324                           
0C324                           
0C324                           +end:
0C324                           
0C324                               ;; Check if ball is dead
0C324 A5 37                         LDA ball_flags
0C326 29 01                         AND #BALL_IS_DEAD
0C328 F0 03                         BEQ +
0C32A 4C 4C C3                          JMP +ballIsDead
0C32D                               +
0C32D                               
0C32D                               ;; Add to sprite buffer
0C32D A6 3C                         LDX sprite_ram_pointer
0C32F A5 19                         LDA ball_ypos_hi
0C331 9D 00 02                      STA ADDR_SPRITERAM,x
0C334 E8                            INX
0C335 A9 01                         LDA #BALL_TILE_CHR
0C337 9D 00 02                      STA ADDR_SPRITERAM,x
0C33A E8                            INX
0C33B A9 00                         LDA #BALL_ATTR
0C33D 9D 00 02                      STA ADDR_SPRITERAM,x
0C340 E8                            INX
0C341 A5 17                         LDA ball_xpos_hi
0C343 9D 00 02                      STA ADDR_SPRITERAM,x
0C346 E8                            INX
0C347 86 3C                         STX sprite_ram_pointer
0C349 4C A9 C3                      JMP +doneScreenLoad
0C34C                           
0C34C                           
0C34C                           +ballIsDead:
0C34C                               ;; Check if kill counter has reset
0C34C A5 3F                         LDA kill_counter
0C34E F0 03                         BEQ +
0C350 4C A9 C3                          JMP +doneScreenLoad
0C353                               +
0C353                               
0C353                               ;; Take a live
0C353 C6 1F                         DEC ball_lives
0C355 D0 03                         BNE +
0C357                                   ;; If no lives left, reset game
0C357 4C 00 C0                          JMP RESET
0C35A                                   ;; Replace reset with game over sequence initiation [@TODO]
0C35A                               +
0C35A                               
0C35A                               ;; Reload current level
0C35A 4C A2 C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C35D                           
0C35D                           
0C35D                           +checkNextScreen:
0C35D                           
0C35D                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C35D                               ;; Upon pressing START, the selected level will start
0C35D                               .include "game/include/main/select_level.asm"
0C35D A5 10                         LDA buttons_pressed
0C35F 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C361 F0 3C                         BEQ +checkStartPress
0C363                           
0C363                                   ;; Select next level (1, 5, 9, 13, 17)
0C363 A5 40                             LDA current_level
0C365 18                                CLC
0C366 69 04                             ADC #$04
0C368 C9 14                             CMP #$14
0C36A D0 02                             BNE +
0C36C A9 00                                 LDA #$00
0C36E                                   +
0C36E 85 40                             STA current_level
0C370                                   
0C370                                   ;; Convert level number to two-byte value
0C370 A9 00                             LDA #$00
0C372 85 03                             STA temp+3
0C374 A5 40                             LDA current_level
0C376 18                                CLC
0C377 69 01                             ADC #$01
0C379                           
0C379                               -
0C379 C9 0A                             CMP #$0A
0C37B 90 08                             BCC +
0C37D E6 03                                 INC temp+3
0C37F 38                                    SEC
0C380 E9 0A                                 SBC #$0A
0C382 4C 79 C3                              JMP -
0C385                                   +
0C385                           
0C385                                   ;; Add level number to PPU buffer
0C385 18                                CLC
0C386 69 01                             ADC #$01
0C388 85 02                             STA temp+2
0C38A A9 20                             LDA #$20
0C38C 85 00                             STA temp
0C38E A9 D0                             LDA #$D0
0C390 85 01                             STA temp+1
0C392 20 21 CD                          JSR sub_WriteByteToPPUBuffer
0C395                                   
0C395 C6 01                             DEC temp+1
0C397 A4 03                             LDY temp+3
0C399 C8                                INY
0C39A 84 02                             STY temp+2
0C39C 20 21 CD                          JSR sub_WriteByteToPPUBuffer
0C39F                                   
0C39F                               +checkStartPress:
0C39F                           
0C39F                           
0C39F                           
0C39F                               ;; If START button is pressed
0C39F A5 10                         LDA buttons_pressed
0C3A1 29 10                         AND #BUTTON_START
0C3A3 F0 04                         BEQ +
0C3A5                                   ;; Start the level
0C3A5 A9 81                             LDA #LOAD_GAME_SCREEN
0C3A7 85 38                             STA screen_mode
0C3A9                               +
0C3A9                           
0C3A9                           
0C3A9                           
0C3A9                           +doneScreenLoad:
0C3A9                           
0C3A9                               ;; Load animations (if any)
0C3A9                               .include "game/include/main/load_animations.asm"
0C3A9                               ;; Set up loop
0C3A9 A2 00                         LDX #$00
0C3AB                               -loop_load_animation:
0C3AB                                   ;; Check if current animation is active. If not, goto next
0C3AB BD 74 03                          LDA explosion_active,x
0C3AE D0 03                             BNE +
0C3B0 4C 4A C4                              JMP +next
0C3B3                                   +
0C3B3                           
0C3B3                                   ;; Check the explosion framecounter
0C3B3 BD 60 03                          LDA explosion_framecounter,x
0C3B6 D0 26                             BNE +
0C3B8                                       ;; Framecounter is 0
0C3B8                                       ;; Reset to animation speed
0C3B8 A9 04                                 LDA #ANIMATION_SPEED
0C3BA 9D 60 03                              STA explosion_framecounter,x
0C3BD                           
0C3BD                                       ;; Set next animation frame, and check if we're done yet
0C3BD FE 64 03                              INC explosion_currentframe,x
0C3C0 BD 64 03                              LDA explosion_currentframe,x
0C3C3 C9 0A                                 CMP #ANIM_SLIDES
0C3C5 D0 17                                 BNE +
0C3C7                           
0C3C7                                       ;; If we're done, inactivate current explosion, clean
0C3C7                                       ;; up sprite RAM and go to the next one
0C3C7 A9 00                                 LDA #$00
0C3C9 9D 74 03                              STA explosion_active,x
0C3CC                                       
0C3CC A9 09                                 LDA #SLIDE_SIZE
0C3CE 0A                                    ASL
0C3CF 0A                                    ASL
0C3D0 A8                                    TAY
0C3D1 A9 EF                                 LDA #$EF
0C3D3                                       -
0C3D3 88                                        DEY
0C3D4 99 00 02                                  STA ADDR_SPRITERAM,y
0C3D7 C0 00                                     CPY #00
0C3D9 D0 F8                                 BNE -
0C3DB                                       
0C3DB 4C 4A C4                              JMP +next
0C3DE                                   +
0C3DE                           
0C3DE                                   ;; Load (x,y) position in temp variables
0C3DE BD 6C 03                          LDA explosion_x,x
0C3E1 85 01                             STA temp+1
0C3E3 85 03                             STA temp+3
0C3E5 BD 70 03                          LDA explosion_y,x
0C3E8 85 02                             STA temp+2
0C3EA                           
0C3EA                                   ;; Load attribute in temp variable
0C3EA BD 68 03                          LDA explosion_attributes,x
0C3ED 85 04                             STA temp+4
0C3EF                           
0C3EF                                   ;; Load current frame into Y-register
0C3EF BC 64 03                          LDY explosion_currentframe,x
0C3F2                           
0C3F2                                   ;; Load current frame ROM address from table
0C3F2 B9 75 CE                          LDA explosion_anim_lo,y
0C3F5 85 0C                             STA pointer
0C3F7 B9 6B CE                          LDA explosion_anim_hi,y
0C3FA 85 0D                             STA pointer+1
0C3FC                           
0C3FC                                   ;; Save x-register on stack
0C3FC 8A                                TXA
0C3FD 48                                PHA
0C3FE                           
0C3FE                                   ;; Load sprites into sprite RAM
0C3FE A6 3C                             LDX sprite_ram_pointer
0C400 A0 00                             LDY #$00
0C402                           
0C402                                   ;; Prepare (x,y) offset for loop
0C402 84 00                             STY temp
0C404                           
0C404                                   -loop_load_sprite:
0C404                                   
0C404                                       ;; Do not draw empty sprites
0C404 B1 0C                                 LDA (pointer),y
0C406 F0 18                                 BEQ +nextSprite
0C408                                   
0C408                                           ;; Add y-position to sprite ram buffer
0C408 A5 02                                     LDA temp+2
0C40A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C40D E8                                        INX
0C40E                           
0C40E                                           ;; Get tile number from frame ROM address, and
0C40E                                           ;; add it to sprite ram buffer
0C40E B1 0C                                     LDA (pointer),y
0C410 9D 00 02                                  STA ADDR_SPRITERAM,x
0C413 E8                                        INX
0C414                           
0C414                                           ;; Add attribute data to sprite ram buffer
0C414 A5 04                                     LDA temp+4
0C416 9D 00 02                                  STA ADDR_SPRITERAM,x
0C419 E8                                        INX
0C41A                           
0C41A                                           ;; Add x-position to sprite ram buffer
0C41A A5 03                                     LDA temp+3
0C41C 9D 00 02                                  STA ADDR_SPRITERAM,x
0C41F E8                                        INX
0C420                           
0C420                                       +nextSprite:
0C420                           
0C420                                       ;; Check if all sprites are done
0C420 C8                                    INY
0C421 C0 09                                 CPY #SLIDE_SIZE
0C423 F0 21                                 BEQ +done
0C425                           
0C425                                       ;; Update x value
0C425 A5 03                                 LDA temp+3
0C427 18                                    CLC
0C428 69 08                                 ADC #$08
0C42A 85 03                                 STA temp+3
0C42C                           
0C42C                                       ;; Update temp for x,y position
0C42C E6 00                                 INC temp
0C42E A5 00                                 LDA temp
0C430 C9 03                                 CMP #SLIDE_WIDTH
0C432 D0 0F                                 BNE +
0C434                                           ;; Row is done; reset x-position
0C434 A5 01                                     LDA temp+1
0C436 85 03                                     STA temp+3
0C438                           
0C438                                           ;; Update y-position
0C438 A5 02                                     LDA temp+2
0C43A 18                                        CLC
0C43B 69 08                                     ADC #$08
0C43D 85 02                                     STA temp+2
0C43F                           
0C43F                                           ;; Reset row counter
0C43F A9 00                                     LDA #$00
0C441 85 00                                     STA temp
0C443                                       +
0C443                           
0C443 4C 04 C4                          JMP -loop_load_sprite
0C446                           
0C446                               +done:
0C446 86 3C                             STX sprite_ram_pointer
0C448                           
0C448                                   ;; Retrieve x-register from stack
0C448 68                                PLA
0C449 AA                                TAX
0C44A                           
0C44A                               +next:
0C44A                                   ;; Check if all animations have been updated
0C44A E8                                INX
0C44B E0 04                             CPX #MAX_ANIMATIONS
0C44D F0 03                             BEQ +done
0C44F                           
0C44F 4C AB C3                      JMP -loop_load_animation
0C452                           +done:
0C452                           
0C452                               ;; Sprite clean-up
0C452 A6 3C                         LDX sprite_ram_pointer
0C454 A9 EF                         LDA #$EF
0C456                               -
0C456 9D 00 02                          STA ADDR_SPRITERAM,x
0C459 E8                                INX
0C45A D0 FA                         BNE -
0C45C 4C 57 C0                      JMP MainGameLoop
0C45F                           
0C45F                           ;; Subroutines
0C45F                           .include "include/subroutines.asm"
0C45F                           
0C45F                           ;; RNG
0C45F                           .include "subroutine/GetRandomNumber.asm"
0C45F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C45F                           ;;
0C45F                           ;; subroutine/GetRandomNumber.asm
0C45F                           ;;
0C45F                           ;; Simple and fast random number generator by White Flame.
0C45F                           ;;
0C45F                           ;; Set random_seed to an arbitrary number to randomize between
0C45F                           ;; gaming sessions, for instance using the frame counter upon
0C45F                           ;; pressing START on the intro screen.
0C45F                           ;;
0C45F                           ;;     ;; IF START PRESSED:
0C45F                           ;;     LDA frame_counter
0C45F                           ;;     STA random_seed
0C45F                           ;;
0C45F                           ;; Source:
0C45F                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C45F                           ;;
0C45F                           ;;
0C45F                           
0C45F                           sub_GetRandomNumber:
0C45F                               ;; Force EOR if random_seed is zero
0C45F A5 16                         LDA random_seed
0C461 F0 05                         BEQ +doEor
0C463                           
0C463                               ;; Shift left, and EOR if the high bit is set
0C463 0A                            ASL
0C464 F0 04                         BEQ +noEor
0C466 90 02                         BCC +noEor
0C468                           
0C468                           +doEor:
0C468 49 1D                         EOR #$1D
0C46A                           
0C46A                           +noEor:
0C46A 85 16                         STA random_seed
0C46C                           
0C46C 60                            RTS
0C46D                           
0C46D                           
0C46D                           ;; Read controller input
0C46D                           .include "subroutine/ReadController.asm"
0C46D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C46D                           ;;
0C46D                           ;; subroutine/ReadController.asm
0C46D                           ;;
0C46D                           ;; Subroutine that polls the controller and stores the input
0C46D                           ;; buttons in a variable. This version only handles controller
0C46D                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C46D                           ;;
0C46D                           ;;
0C46D                           
0C46D                           sub_ReadController:
0C46D                           
0C46D                               ;; Set strobe bit
0C46D A9 01                         LDA #$01
0C46F 8D 16 40                      STA JOYPAD_1
0C472                           
0C472                               ;; Set up ring counter
0C472 85 0F                         STA buttons_held
0C474                           
0C474                               ;; Clear strobe bit
0C474 4A                            LSR
0C475 8D 16 40                      STA JOYPAD_1
0C478                           
0C478                               ;; Loop through button presses
0C478                               -
0C478 AD 16 40                          LDA JOYPAD_1
0C47B 4A                                LSR
0C47C 26 0F                             ROL buttons_held
0C47E                           
0C47E                               ;; Check if ring counter is done
0C47E 90 F8                         BCC -
0C480                           
0C480                               ;; Return from subroutine
0C480 60                            RTS
0C481                           
0C481                           
0C481                           ;; vBlank/NMI wait
0C481                           .include "subroutine/WaitForNMI.asm"
0C481                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C481                           ;;
0C481                           ;; subroutine/WaitForVBlank.asm
0C481                           ;;
0C481                           ;; Subroutine that essentially pauses script execution until
0C481                           ;; vBlank happens.
0C481                           ;;
0C481                           ;;
0C481                           
0C481                           sub_WaitForNMI:
0C481 A9 01                         LDA #$01
0C483 85 48                         STA check_nmi
0C485                               -
0C485 A5 48                             LDA check_nmi
0C487 D0 FC                         BNE -
0C489 60                            RTS
0C48A                           
0C48A                           .include "subroutine/WaitForVBlank.asm"
0C48A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C48A                           ;;
0C48A                           ;; subroutine/WaitForVBlank.asm
0C48A                           ;;
0C48A                           ;; Subroutine that essentially pauses script execution until
0C48A                           ;; vBlank happens.
0C48A                           ;;
0C48A                           ;;
0C48A                           
0C48A                           sub_WaitForVBlank:
0C48A 2C 02 20                      BIT $2002
0C48D 10 FB                         BPL sub_WaitForVBlank
0C48F 60                            RTS
0C490                           
0C490                           
0C490                           ;; Game specific subroutines
0C490                           .include "game/include/subroutines.asm"
0C490                           ;; additional game-specific subroutines go here
0C490                           
0C490                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C490                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C490                           ;;
0C490                           ;;  sub_AddAccumulatorToScore.asm
0C490                           ;;
0C490                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C490                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C490                           ;;  actual score.
0C490                           ;;
0C490                           ;;
0C490                           
0C490                           
0C490                           sub_AddAccumulatorToScore:
0C490                           
0C490                               ;; Clear old add_to_score
0C490 A2 05                         LDX #$05
0C492 A0 00                         LDY #$00
0C494                               -
0C494 94 26                             STY add_to_score,x
0C496 CA                                DEX
0C497 10 FB                         BPL -
0C499                           
0C499                               ;; Set accumulator to add_to_score variables
0C499                               ;; Check and update 100s
0C499                               -checkHundreds:
0C499 C9 64                             CMP #100
0C49B 90 08                             BCC +checkTens
0C49D 38                                    SEC
0C49E E9 64                                 SBC #100
0C4A0 E6 29                                 INC add_to_score+3
0C4A2 4C 99 C4                              JMP -checkHundreds
0C4A5                                   +checkTens:
0C4A5                           
0C4A5                               ;; Check and update 10s
0C4A5                               -checkTens:
0C4A5 C9 0A                             CMP #10
0C4A7 90 08                             BCC +setOnes
0C4A9 38                                    SEC
0C4AA E9 0A                                 SBC #10
0C4AC E6 2A                                 INC add_to_score+4
0C4AE 4C A5 C4                              JMP -checkTens
0C4B1                                   +setOnes:
0C4B1                           
0C4B1                               ;; We're left with 1s
0C4B1 85 2B                         STA add_to_score+5
0C4B3                           
0C4B3                               ;; Byte for byte, add add_to_score to ball_score
0C4B3 A9 00                         LDA #$00
0C4B5 85 39                         STA ppu_buffer_update
0C4B7 A4 3A                         LDY ppu_buffer_pointer
0C4B9 A2 05                         LDX #$05
0C4BB                               -
0C4BB B5 26                             LDA add_to_score,x
0C4BD 18                                CLC
0C4BE 75 20                             ADC ball_score,x
0C4C0 C9 0A                             CMP #10
0C4C2 90 05                             BCC +
0C4C4 38                                    SEC
0C4C5 E9 0A                                 SBC #10
0C4C7 F6 1F                                 INC ball_score-1,x
0C4C9                                   +
0C4C9                                   
0C4C9                                   ;; Update new score digit
0C4C9 95 20                             STA ball_score,x
0C4CB                           
0C4CB                                   ;; Update score tile in PPU
0C4CB A9 20                             LDA #$20
0C4CD 99 00 03                          STA ppu_buffer,y
0C4D0 C8                                INY
0C4D1 8A                                TXA
0C4D2 18                                CLC
0C4D3 69 83                             ADC #$83
0C4D5 99 00 03                          STA ppu_buffer,y
0C4D8 C8                                INY
0C4D9 B5 20                             LDA ball_score,x
0C4DB 18                                CLC
0C4DC 69 01                             ADC #$01
0C4DE 99 00 03                          STA ppu_buffer,y
0C4E1 C8                                INY
0C4E2                           
0C4E2                                   ;; Check next digit (if any left)
0C4E2 CA                                DEX
0C4E3 30 03                             BMI +done
0C4E5 4C BB C4                      JMP -
0C4E8                           
0C4E8                           +done:
0C4E8                               ;; Update PPU buffer pointer and status
0C4E8 84 3A                         STY ppu_buffer_pointer
0C4EA A9 01                         LDA #$01
0C4EC 85 39                         STA ppu_buffer_update
0C4EE                           
0C4EE                               ;; Done: return 
0C4EE 60                            RTS
0C4EF                           
0C4EF                           .include "game/subroutine/BackgroundNoise.asm"
0C4EF                           
0C4EF                           sub_BackgroundNoise:
0C4EF A9 32                         LDA #$32
0C4F1 8D 0C 40                      STA NOISE_VOLUME
0C4F4 A9 0E                         LDA #$0E
0C4F6 8D 0E 40                      STA NOISE_PERIOD
0C4F9 85 45                         STA current_noise
0C4FB 60                            RTS0C4FC                           .include "game/subroutine/ClearScreen.asm"
0C4FC                           ;; Subroutine to clear the screen
0C4FC                           ;; If it's a game screen, add noise
0C4FC                           
0C4FC                           sub_ClearScreen:
0C4FC                               ;; Check of game screen or not
0C4FC A5 38                         LDA screen_mode
0C4FE 29 03                         AND #CHECK_SCREEN_MODE
0C500 C9 01                         CMP #IS_GAME_SCREEN
0C502 F0 02                         BEQ +
0C504 A9 00                             LDA #$00
0C506                               +
0C506 85 01                         STA temp+1
0C508                               
0C508                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C508 2C 02 20                      BIT PPU_STATUS
0C50B A9 20                         LDA #$20
0C50D 8D 06 20                      STA PPU_ADDR
0C510 A9 00                         LDA #$00
0C512 8D 06 20                      STA PPU_ADDR
0C515                               
0C515                               ;; Set up tile to draw and loop
0C515 85 00                         STA temp
0C517 AA                            TAX
0C518 A8                            TAY
0C519                           
0C519                               -     
0C519                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C519 A5 00                             LDA temp
0C51B 8D 07 20                          STA PPU_DATA
0C51E                           
0C51E                                   ;; Check if we should draw noise next. Noise is drawn if:
0C51E                                   ;; - Screen mode is game screen
0C51E                                   ;; - Y between #$06 and #$19 (inclusive)
0C51E                                   ;; - X between #$02 and #$1D (inclusive)
0C51E                                   
0C51E                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C51E A5 01                             LDA temp+1
0C520 F0 1C                             BEQ +nextTileInRow
0C522                                   
0C522                                   ;; If Y < $6, skip the check
0C522 C0 06                             CPY #$06
0C524 90 18                             BCC +nextTileInRow
0C526                                   
0C526                                   ;; If X < $1, skip the check
0C526 E0 01                             CPX #$01
0C528 90 14                             BCC +nextTileInRow
0C52A                                   
0C52A                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C52A E0 1D                             CPX #$1D
0C52C D0 04                             BNE +
0C52E A9 00                                 LDA #$00
0C530 85 00                                 STA temp
0C532                                   +
0C532 B0 0A                             BCS +nextTileInRow
0C534                                   
0C534                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C534 20 5F C4                          JSR sub_GetRandomNumber
0C537 29 07                             AND #%00000111
0C539 18                                CLC
0C53A 69 68                             ADC #$68
0C53C 85 00                             STA temp
0C53E                           
0C53E                           +nextTileInRow:
0C53E                                   
0C53E                                   ;; Check if a row has been done. If not, draw the next
0C53E E8                                INX
0C53F E0 20                             CPX #$20
0C541 D0 D6                             BNE -
0C543                                   
0C543                                   ;; Go to the next row (if any left)
0C543 A2 00                             LDX #00
0C545 C8                                INY
0C546                                   
0C546                                   ;; If Y is 1A, skip noise tile check until done drawing
0C546 C0 1A                             CPY #$1A
0C548 D0 04                             BNE +
0C54A A9 00                                 LDA #$00
0C54C 85 01                                 STA temp+1
0C54E                                   +
0C54E                                   
0C54E C0 1E                             CPY #$1E
0C550 D0 C7                         BNE -
0C552                           
0C552                               ;; Clear attribute table
0C552 A9 23                         LDA #$23
0C554 8D 06 20                      STA PPU_ADDR
0C557 A9 C0                         LDA #$C0
0C559 8D 06 20                      STA PPU_ADDR
0C55C A9 00                         LDA #$00
0C55E A2 40                         LDX #$40
0C560                               -
0C560 8D 07 20                          STA PPU_DATA
0C563 CA                                DEX
0C564 D0 FA                         BNE -
0C566                               
0C566 60                            RTS0C567                           .include "game/subroutine/ColorizeBall.asm"
0C567                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C567                           ;;
0C567                           ;;  Subroutine: ColorizeBall
0C567                           ;;
0C567                           ;;  Applies the color set through ball_flags to the ball sprite.
0C567                           ;;
0C567                           ;;
0C567                           
0C567                           
0C567                           sub_ColorizeBall:
0C567                           
0C567                               ;; Get color from ball_flags
0C567 4A                            LSR
0C568 4A                            LSR
0C569 4A                            LSR
0C56A 4A                            LSR
0C56B 4A                            LSR
0C56C AA                            TAX
0C56D                           
0C56D                               ;; Add new light color of ball to PPU palette
0C56D A9 3F                         LDA #$3F
0C56F 85 00                         STA temp
0C571 A9 11                         LDA #$11
0C573 85 01                         STA temp+1
0C575 BD 85 CE                      LDA tbl_BallColorLight,x
0C578 85 02                         STA temp+2
0C57A 20 21 CD                      JSR sub_WriteByteToPPUBuffer
0C57D                               
0C57D                               ;; Add new dark color of ball to PPU palette
0C57D E6 01                         INC temp+1
0C57F BD 7F CE                      LDA tbl_BallColorDark,x
0C582 85 02                         STA temp+2
0C584 20 21 CD                      JSR sub_WriteByteToPPUBuffer
0C587                               
0C587 60                            RTS
0C588                           
0C588                           .include "game/subroutine/ColorsMatch.asm"
0C588                           
0C588                           ;; Subroutine to check if ball color matches colliding tile color
0C588                           
0C588                           sub_ColorsMatch:
0C588                               ;; Save tile color in temp variable
0C588 A5 41                         LDA colliding_tile
0C58A 29 0E                         AND #%00001110
0C58C 85 00                         STA temp
0C58E                           
0C58E                               ;; Get ball color
0C58E A5 37                         LDA ball_flags
0C590 29 E0                         AND #%11100000
0C592 4A                            LSR
0C593 4A                            LSR
0C594 4A                            LSR
0C595 4A                            LSR
0C596                           
0C596                               ;; Compare with tile color
0C596 C5 00                         CMP temp
0C598 60                            RTS
0C599                           
0C599                           .include "game/subroutine/ConvertXYToTileType.asm"
0C599                           
0C599                           ;; Subroutine to convert the ball's position to a tile type
0C599                           ;; - Expects temp to be y-position of ball within game area
0C599                           ;; - Expects temp+1 to be x-position of ball within game area
0C599                           ;; - Puts result in accumulator and zp variable
0C599                           ;; - Corrupts X-register
0C599                           
0C599                           sub_ConvertXYToTileType:
0C599 A5 01                         LDA temp+1
0C59B 4A                            LSR
0C59C 4A                            LSR
0C59D 4A                            LSR
0C59E 4A                            LSR
0C59F 85 09                         STA temp+9
0C5A1 A5 00                         LDA temp
0C5A3 29 F0                         AND #%11110000
0C5A5 18                            CLC
0C5A6 65 09                         ADC temp+9
0C5A8 85 09                         STA temp+9
0C5AA AA                            TAX
0C5AB BD 00 04                      LDA tile_type, x
0C5AE 85 41                         STA colliding_tile
0C5B0 60                            RTS
0C5B1                           
0C5B1                           .include "game/subroutine/DisableEnableRendering.asm"
0C5B1                           sub_DisableRendering:
0C5B1                               ;; Force NMI skip, disable rendering
0C5B1 A9 01                     	LDA #$01
0C5B3 85 14                     	STA force_skip_nmi
0C5B5 20 8A C4                      JSR sub_WaitForVBlank
0C5B8 A5 12                         LDA soft_ppu_mask
0C5BA 29 E7                         AND #%11100111
0C5BC 8D 01 20                      STA PPU_MASK
0C5BF 85 12                         STA soft_ppu_mask
0C5C1 20 8A C4                      JSR sub_WaitForVBlank
0C5C4 60                            RTS
0C5C5                           
0C5C5                           sub_EnableRendering:
0C5C5                               ;; Enable rendering
0C5C5 A9 00                     	LDA #$00
0C5C7 8D 05 20                  	STA PPU_SCROLL
0C5CA 8D 05 20                  	STA PPU_SCROLL
0C5CD 20 8A C4                      JSR sub_WaitForVBlank
0C5D0 85 14                     	STA force_skip_nmi
0C5D2 A5 12                         LDA soft_ppu_mask
0C5D4 09 18                         ORA #%00011000
0C5D6 85 12                         STA soft_ppu_mask
0C5D8 8D 01 20                      STA PPU_MASK
0C5DB 20 8A C4                      JSR sub_WaitForVBlank
0C5DE 60                            RTS
0C5DF                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C5DF                           sub_drawIntroScreenLogoTile:
0C5DF B9 67 CD                      LDA tbl_IntroScreenLogoChr,y
0C5E2 C9 60                         CMP #$60
0C5E4 D0 08                         BNE +
0C5E6 20 5F C4                          JSR sub_GetRandomNumber
0C5E9 29 07                             AND #$07
0C5EB 18                                CLC
0C5EC 69 60                             ADC #$60
0C5EE                               +
0C5EE 8D 07 20                      STA PPU_DATA
0C5F1 60                            RTS
0C5F2                           .include "game/subroutine/EvaluateTileType.asm"
0C5F2                           ;; Subroutine to evaluate the colliding tile type and take its
0C5F2                           ;; corresponding action (move block, kill player, ...)
0C5F2                           ;; - Expects X-register to be the tile_type offset
0C5F2                           ;; - Uses zp variable colliding_tile
0C5F2                           
0C5F2                           sub_EvaluateTileType:
0C5F2                           
0C5F2                               ;; Check if collided tile is a color block
0C5F2 A5 41                         LDA colliding_tile
0C5F4 29 80                         AND #IS_COLOR_BLOCK
0C5F6 D0 03                         BNE +
0C5F8 4C 5A C6                          JMP +checkIfPaintBlock
0C5FB                               +
0C5FB                               
0C5FB                               ;; It's a color block. Check if the colors match
0C5FB 20 88 C5                      JSR sub_ColorsMatch
0C5FE F0 01                         BEQ +
0C600                                   ;; Colors don't match - return
0C600 60                                RTS
0C601                               +
0C601                           
0C601                               ;; Colors match; destroy color block
0C601                               
0C601                               ;; Convert the metatile offset value (which is in the X register)
0C601                               ;; to its corresponding address in PPU
0C601 20 00 C7                      JSR sub_GetPPUAddrFromYXIndex
0C604                           
0C604                           
0C604                               
0C604                               ;; Remove color block from screen by drawing a total
0C604                               ;; of 7 tiles over it (shade included)
0C604 20 85 CB                      JSR sub_RemoveBlockFromScreen
0C607                               
0C607                               ;; - Load destruction animation on tile
0C607                               ;; Get most recent slot for explosion    
0C607 8A                            TXA
0C608 85 02                         STA temp+2
0C60A A6 3B                         LDX explosion_pointer
0C60C                           
0C60C                               ;; If 0, use max pointer value
0C60C D0 02                         BNE +
0C60E A2 04                             LDX #MAX_ANIMATIONS
0C610                               +
0C610                           
0C610                               ;; Decrease pointer by one
0C610 CA                            DEX
0C611 86 3B                         STX explosion_pointer
0C613                           
0C613                               ;; Load explosion data into RAM
0C613 A9 00                         LDA #$00
0C615 9D 64 03                      STA explosion_currentframe,x
0C618                           
0C618 A9 04                         LDA #ANIMATION_SPEED
0C61A 9D 60 03                      STA explosion_framecounter,x
0C61D                           
0C61D A5 02                         LDA temp+2
0C61F 29 0F                         AND #%00001111
0C621 A8                            TAY
0C622 B9 D4 D5                      LDA tbl_Times16,y
0C625 18                            CLC
0C626 69 0E                         ADC #$0E
0C628 9D 6C 03                      STA explosion_x,x
0C62B                           
0C62B A5 02                         LDA temp+2
0C62D 29 F0                         AND #%11110000
0C62F 18                            CLC
0C630 69 29                         ADC #$29
0C632 9D 70 03                      STA explosion_y,x
0C635                           
0C635 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C637 9D 68 03                      STA explosion_attributes,x
0C63A A9 01                         LDA #$01
0C63C 9D 74 03                      STA explosion_active,x
0C63F                           
0C63F A5 02                         LDA temp+2
0C641 AA                            TAX
0C642                               
0C642                               
0C642                               ;; - Write #$00 in tile type ram (makes not-solid)
0C642 A9 00                         LDA #$00
0C644 9D 00 04                      STA tile_type, x
0C647                           
0C647                           
0C647                               ;; Add (80 + level number) to score
0C647 A5 40                         LDA current_level
0C649 18                            CLC
0C64A 69 51                         ADC #81
0C64C 20 90 C4                      JSR sub_AddAccumulatorToScore
0C64F                           
0C64F                           
0C64F                               ;; - If there are no color blocks left:
0C64F                               ;;   - Freeze ball
0C64F                               ;;   - Initiate level-win state [@TODO]
0C64F C6 42                         DEC blocks_left
0C651 D0 06                         BNE +
0C653 A5 37                             LDA ball_flags
0C655 09 04                             ORA #FREEZE_BALL
0C657 85 37                             STA ball_flags
0C659                               +
0C659                               
0C659 60                            RTS
0C65A                           
0C65A                           +checkIfPaintBlock:
0C65A                           
0C65A                           
0C65A                               ;; Check if collided tile is a paint block
0C65A A5 41                         LDA colliding_tile
0C65C 29 20                         AND #IS_PAINT_BLOCK
0C65E F0 1A                         BEQ +checkIfDeathBlock
0C660                                   ;; It's a paint block. Update ball color
0C660                                   ;; Save x-register
0C660 8A                                TXA
0C661 48                                PHA
0C662                           
0C662                                   ;; Get tile color
0C662 A5 41                             LDA colliding_tile
0C664 29 0E                             AND #%00001110
0C666 0A                                ASL
0C667 0A                                ASL
0C668 0A                                ASL
0C669 0A                                ASL
0C66A 85 00                             STA temp
0C66C                           
0C66C                                   ;; Apply tile color to ball
0C66C A5 37                             LDA ball_flags
0C66E 29 1F                             AND #%00011111
0C670 05 00                             ORA temp
0C672 85 37                             STA ball_flags
0C674 20 67 C5                          JSR sub_ColorizeBall
0C677                           
0C677                                   ;; Restore x-register
0C677 68                                PLA
0C678 AA                                TAX
0C679                           
0C679                                   ;; Return
0C679 60                                RTS
0C67A                               +checkIfDeathBlock:
0C67A                           
0C67A                               ;; Check if collided tile is a death block
0C67A A5 41                         LDA colliding_tile
0C67C 29 10                         AND #IS_DEATH_BLOCK
0C67E F0 38                         BEQ +checkIfMoveBlock
0C680                           
0C680                                   ;; It is a death block
0C680                                   ;; Freeze and kill player
0C680 A5 37                             LDA ball_flags
0C682 09 05                             ORA #%00000101
0C684 85 37                             STA ball_flags
0C686                                   
0C686                                   ;; Get free explosion slot
0C686 A6 3B                             LDX explosion_pointer
0C688 D0 02                             BNE +
0C68A A2 04                                 LDX #MAX_ANIMATIONS
0C68C                                   +
0C68C CA                                DEX
0C68D 86 3B                             STX explosion_pointer
0C68F                           
0C68F                                   ;; Load explosion data into RAM
0C68F A9 00                             LDA #$00
0C691 9D 64 03                          STA explosion_currentframe,x
0C694                           
0C694 A9 04                             LDA #ANIMATION_SPEED
0C696 9D 60 03                          STA explosion_framecounter,x
0C699                           
0C699 A5 17                             LDA ball_xpos_hi
0C69B 38                                SEC
0C69C E9 08                             SBC #$08
0C69E 9D 6C 03                          STA explosion_x,x
0C6A1                           
0C6A1 A5 19                             LDA ball_ypos_hi
0C6A3 38                                SEC
0C6A4 E9 06                             SBC #$06
0C6A6 9D 70 03                          STA explosion_y,x
0C6A9                           
0C6A9 A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C6AB 9D 68 03                          STA explosion_attributes,x
0C6AE                           
0C6AE A9 01                             LDA #$01
0C6B0 9D 74 03                          STA explosion_active,x
0C6B3                           
0C6B3                                   ;; Set kill counter
0C6B3 A9 60                             LDA #$60
0C6B5 85 3F                             STA kill_counter
0C6B7                           
0C6B7                                   ;; Return
0C6B7 60                                RTS
0C6B8                           
0C6B8                           
0C6B8                           +checkIfMoveBlock:
0C6B8                           
0C6B8                               ;; Check if collided tile is a move block
0C6B8 A5 41                         LDA colliding_tile
0C6BA 29 40                         AND #IS_MOVE_BLOCK
0C6BC D0 01                         BNE +
0C6BE 60                                RTS
0C6BF                               +
0C6BF                           
0C6BF                               ;; It is a move block. Check if colors match
0C6BF 20 88 C5                      JSR sub_ColorsMatch
0C6C2 F0 01                         BEQ +
0C6C4 60                                RTS
0C6C5                               +
0C6C5                           
0C6C5                               ;; Colors match
0C6C5                               ;; - Check if next tile is within the playground
0C6C5                               ;; (push X onto stack as well)
0C6C5 8A                            TXA
0C6C6 48                            PHA
0C6C7 18                            CLC
0C6C8 65 36                         ADC lock_block_space_to_check
0C6CA AA                            TAX
0C6CB                               
0C6CB 29 0F                         AND #%00001111
0C6CD C9 0E                         CMP #$0E
0C6CF 90 03                         BCC +
0C6D1 4C FD C6                          JMP +restoreX
0C6D4                               +
0C6D4 8A                            TXA
0C6D5 29 F0                         AND #%11110000
0C6D7 C9 A0                         CMP #$A0
0C6D9 D0 03                         BNE +
0C6DB 4C FD C6                          JMP +restoreX
0C6DE                               +
0C6DE C9 F0                         CMP #$F0
0C6E0 D0 03                         BNE +
0C6E2 4C FD C6                          JMP +restoreX
0C6E5                               +
0C6E5                               
0C6E5                               ;; Check if the next tile is solid
0C6E5 BD 00 04                      LDA tile_type,x
0C6E8 29 01                         AND #TILE_IS_SOLID
0C6EA F0 03                         BEQ +
0C6EC 4C FD C6                          JMP +restoreX
0C6EF                               +
0C6EF                               
0C6EF                               ;; Move block has room to move
0C6EF                               ;; Pull original X from stack
0C6EF 68                            PLA
0C6F0 AA                            TAX        
0C6F1                               
0C6F1                               ;; Move the tile:
0C6F1                               ;; - Add the tiles that need updating to ppu buffer, and
0C6F1                               ;;   update attribute table accordingly through ppu buffer
0C6F1 20 00 C7                      JSR sub_GetPPUAddrFromYXIndex
0C6F4 20 85 CB                      JSR sub_RemoveBlockFromScreen
0C6F7                           
0C6F7                           
0C6F7                               ;; [@TODO]
0C6F7                               ;; - Add move tile sprite over the original tile
0C6F7                               ;; - Initiate moving the sprite that way for 16px
0C6F7                           
0C6F7                           
0C6F7                               ;; - Write #$00 in tile type ram (makes not-solid)
0C6F7 A9 00                         LDA #$00
0C6F9 9D 00 04                      STA tile_type, x
0C6FC                           
0C6FC                           
0C6FC                               ;; - After moving the sprite, in a different routine:
0C6FC                               ;;   - Add move tile data on the new tile location
0C6FC                               ;;   - Write the original tile type data on new position in ram
0C6FC                               ;;   - Destroy sprite
0C6FC                               ;;   - Update attribute table accordingly through ppu buffer
0C6FC                               ;; [@TODO]
0C6FC                                   
0C6FC                                   
0C6FC                               ;; Return
0C6FC 60                            RTS
0C6FD                           
0C6FD                           
0C6FD                           ;; Pull X register from stack before returning
0C6FD                           +restoreX:
0C6FD 68                            PLA
0C6FE AA                            TAX
0C6FF 60                            RTS
0C700                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C700                           sub_GetPPUAddrFromYXIndex:
0C700                           
0C700                               ;; Get the PPU address from YX index
0C700                               ;; - Expects YX index (aka tile offset) to be in the X register
0C700                               ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C700                               
0C700                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C700                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C700                               
0C700 8A                            TXA
0C701 29 C0                         AND #%11000000
0C703 18                            CLC
0C704 2A                            ROL
0C705 2A                            ROL
0C706 2A                            ROL
0C707 69 20                         ADC #$20
0C709 85 00                         STA temp
0C70B                               
0C70B 8A                            TXA
0C70C 29 0F                         AND #%00001111
0C70E 0A                            ASL
0C70F 85 01                         STA temp+1
0C711                               
0C711 8A                            TXA
0C712 29 30                         AND #%00110000
0C714 0A                            ASL
0C715 0A                            ASL
0C716 18                            CLC
0C717 65 01                         ADC temp+1
0C719 85 01                         STA temp+1
0C71B                               
0C71B A5 00                         LDA temp
0C71D 69 00                         ADC #$00
0C71F 85 00                         STA temp
0C721                               
0C721 A5 01                         LDA temp+1
0C723 18                            CLC
0C724 69 C2                         ADC #$C2
0C726 85 01                         STA temp+1
0C728                               
0C728 A5 00                         LDA temp
0C72A 69 00                         ADC #$00
0C72C 85 00                         STA temp
0C72E                           
0C72E 60                            RTS0C72F                           .include "game/subroutine/InitiateNudge.asm"
0C72F                           
0C72F                           sub_InitiateNudge:
0C72F 85 37                         STA ball_flags
0C731 A9 05                         LDA #NUDGE_FRAMES
0C733 85 3D                         STA nudge_counter
0C735 60                            RTS
0C736                           
0C736                           .include "game/subroutine/JumpToPointer.asm"
0C736                           sub_JumpToPointer:
0C736 6C 0C 00                      JMP (pointer)
0C739                               ;RTS must be handled by the routine (pointer) jumps to
0C739                           .include "game/subroutine/LoadGameScreen.asm"
0C739                           sub_LoadGameScreen:
0C739                           
0C739                               ;; Clear the screen
0C739 20 FC C4                      JSR sub_ClearScreen
0C73C                               
0C73C                               ;; Clear collision and attribute data; reset blocks left in the process
0C73C A2 00                         LDX #$00
0C73E 8A                            TXA
0C73F 85 42                         STA blocks_left
0C741                               -
0C741 9D 00 04                          STA tile_type,x
0C744 E8                                INX
0C745 D0 FA                         BNE -
0C747                               
0C747                               ;; Get pointer from current level
0C747 A6 40                         LDX current_level
0C749 BD 89 D5                      LDA tbl_lvl_layout_lo,x
0C74C 85 0C                         STA pointer
0C74E BD 70 D5                      LDA tbl_lvl_layout_hi,x
0C751 85 0D                         STA pointer+1
0C753                           
0C753                               ;; Set up the loop
0C753 A0 00                         LDY #$00
0C755                           -drawRowColumnLoop:
0C755                           
0C755                               ;; Load (x,y) of current set of tiles
0C755 B1 0C                         LDA (pointer),y
0C757                           
0C757                               ;; Check if level is done; if so, skip the loop
0C757 C9 FF                         CMP #LEVEL_END
0C759 D0 03                         BNE +
0C75B 4C A4 C8                          JMP +doneLevelLoad
0C75E                               +
0C75E                           
0C75E                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C75E 85 00                         STA temp
0C760 C8                            INY
0C761 B1 0C                         LDA (pointer),y
0C763 85 01                         STA temp+1
0C765                               
0C765                               ;; Convert (x,y) to PPU address
0C765                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C765 A5 00                         LDA temp
0C767 29 0F                         AND #%00001111
0C769 4A                            LSR
0C76A 4A                            LSR
0C76B 09 20                         ORA #$20
0C76D 85 02                         STA temp+2
0C76F                               
0C76F                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C76F A5 00                         LDA temp
0C771 29 F0                         AND #%11110000
0C773 4A                            LSR
0C774 4A                            LSR
0C775 4A                            LSR
0C776 85 03                         STA temp+3
0C778                               
0C778 A5 00                         LDA temp
0C77A 29 03                         AND #%00000011
0C77C AA                            TAX
0C77D BD E4 D5                      LDA tbl_Times64,x
0C780 18                            CLC
0C781 65 03                         ADC temp+3
0C783 18                            CLC
0C784 69 C2                         ADC #$C2
0C786 85 03                         STA temp+3
0C788                               
0C788                               ;; Add carry to temp+2
0C788 A5 02                         LDA temp+2
0C78A 69 00                         ADC #$00
0C78C 85 02                         STA temp+2
0C78E                           
0C78E                               ;; Convert tile data to loop count and tile type
0C78E                               ;; temp+4 = color
0C78E A5 01                         LDA temp+1
0C790 29 07                         AND #%00000111
0C792 85 04                         STA temp+4
0C794                               
0C794                               ;; If color = 7, this is a wall
0C794 C9 07                         CMP #%00000111
0C796 F0 12                         BEQ +wallHack
0C798                                   
0C798                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C798 29 01                             AND #%00000001
0C79A F0 02                             BEQ +
0C79C A9 05                                 LDA #$05
0C79E                                   +
0C79E 85 07                             STA temp+7
0C7A0                                
0C7A0                                   ;; temp+5 = tile type
0C7A0 A5 01                             LDA temp+1
0C7A2 4A                                LSR
0C7A3 4A                                LSR
0C7A4 4A                                LSR
0C7A5 29 03                             AND #%00000011
0C7A7 4C B0 C7                          JMP +setTileType
0C7AA                               +wallHack:
0C7AA                               
0C7AA                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C7AA A9 00                         LDA #$00
0C7AC 85 07                         STA temp+7
0C7AE A9 04                         LDA #$04
0C7B0                           
0C7B0                           +setTileType:    
0C7B0 85 05                         STA temp+5
0C7B2                               
0C7B2                               ;; X = tile offset
0C7B2 18                            CLC
0C7B3 65 07                         ADC temp+7
0C7B5 AA                            TAX
0C7B6                               
0C7B6                               ;; temp+6 = number of tiles
0C7B6 A5 01                         LDA temp+1
0C7B8 29 60                         AND #%01100000
0C7BA 4A                            LSR
0C7BB 4A                            LSR
0C7BC 4A                            LSR
0C7BD 4A                            LSR
0C7BE 4A                            LSR
0C7BF 85 06                         STA temp+6
0C7C1                               
0C7C1                               ;; Translate (x,y) to (y,x) for tile RAM
0C7C1 A5 00                         LDA temp
0C7C3 0A                            ASL
0C7C4 0A                            ASL
0C7C5 0A                            ASL
0C7C6 0A                            ASL
0C7C7 85 08                         STA temp+8
0C7C9 A5 00                         LDA temp
0C7CB 4A                            LSR
0C7CC 4A                            LSR
0C7CD 4A                            LSR
0C7CE 4A                            LSR
0C7CF 05 08                         ORA temp+8
0C7D1 85 00                         STA temp
0C7D3                               
0C7D3                               ;; Set up loop
0C7D3 98                            TYA
0C7D4 48                            PHA
0C7D5 A4 06                         LDY temp+6
0C7D7                           
0C7D7                               -drawTileLoop:
0C7D7                                   ;; Write PPU address
0C7D7 2C 02 20                          BIT PPU_STATUS
0C7DA A5 02                             LDA temp+2
0C7DC 8D 06 20                          STA PPU_ADDR
0C7DF A5 03                             LDA temp+3
0C7E1 8D 06 20                          STA PPU_ADDR
0C7E4                                   
0C7E4                                   ;; Write first and second tile
0C7E4 BD E8 D5                          LDA tbl_GametileTopLeft,x
0C7E7 8D 07 20                          STA PPU_DATA
0C7EA BD F2 D5                          LDA tbl_GametileTopRight,x
0C7ED 8D 07 20                          STA PPU_DATA
0C7F0                                   
0C7F0                                   ;; Update PPU address
0C7F0 2C 02 20                          BIT PPU_STATUS
0C7F3 A5 02                             LDA temp+2
0C7F5 8D 06 20                          STA PPU_ADDR
0C7F8 A5 03                             LDA temp+3
0C7FA 18                                CLC
0C7FB 69 20                             ADC #$20
0C7FD 8D 06 20                          STA PPU_ADDR
0C800                                   
0C800                                   ;; Write third and fourth tile
0C800 BD FC D5                          LDA tbl_GametileBottomLeft,x
0C803 8D 07 20                          STA PPU_DATA
0C806 BD 06 D6                          LDA tbl_GametileBottomRight,x
0C809 8D 07 20                          STA PPU_DATA
0C80C                           
0C80C                                   ;; Push x-register to stack
0C80C 8A                                TXA
0C80D 48                                PHA
0C80E                           
0C80E                                   ;; Update tile RAM (aka collision table)
0C80E A6 05                             LDX temp+5
0C810 BD 10 D6                          LDA tbl_GameTileRamByte,x
0C813 05 04                             ORA temp+4
0C815 0A                                ASL
0C816 09 01                             ORA #%00000001
0C818 A6 00                             LDX temp
0C81A 9D 00 04                          STA tile_type,x
0C81D                           
0C81D                                   ;; Check if shade 1 should be drawn
0C81D E8                                INX
0C81E BD 00 04                          LDA tile_type,x
0C821 D0 05                             BNE +
0C823 A9 00                                 LDA #$00
0C825 8D 07 20                              STA PPU_DATA
0C828                                   +
0C828                                   
0C828                                   ;; Check if shade 2 should be drawn
0C828 A5 03                             LDA temp+3
0C82A 18                                CLC
0C82B 69 41                             ADC #$41
0C82D 85 03                             STA temp+3
0C82F A5 02                             LDA temp+2
0C831 69 00                             ADC #$00
0C833 85 02                             STA temp+2
0C835                                   
0C835 8A                                TXA
0C836 18                                CLC
0C837 69 0F                             ADC #$0F
0C839 AA                                TAX
0C83A                                   
0C83A BD 00 04                          LDA tile_type,x
0C83D D0 0F                             BNE +
0C83F A5 02                                 LDA temp+2
0C841 8D 06 20                              STA PPU_ADDR
0C844 A5 03                                 LDA temp+3
0C846 8D 06 20                              STA PPU_ADDR
0C849 A9 00                                 LDA #$00
0C84B 8D 07 20                              STA PPU_DATA
0C84E                                   +
0C84E                           
0C84E                                   ;; Check if shade 3 should be drawn
0C84E E8                                INX
0C84F E6 03                             INC temp+3
0C851 BD 00 04                          LDA tile_type,x
0C854 D0 0F                             BNE +
0C856 A5 02                                 LDA temp+2
0C858 8D 06 20                              STA PPU_ADDR
0C85B A5 03                                 LDA temp+3
0C85D 8D 06 20                              STA PPU_ADDR
0C860 A9 00                                 LDA #$00
0C862 8D 07 20                              STA PPU_DATA
0C865                                   +
0C865                                   
0C865                                   ;; Restore x-register from stack
0C865 68                                PLA
0C866 AA                                TAX
0C867                                   
0C867                                   ;; Reset pointer for next tile
0C867 A5 03                             LDA temp+3
0C869 38                                SEC
0C86A E9 42                             SBC #$42
0C86C 85 03                             STA temp+3
0C86E A5 02                             LDA temp+2
0C870 E9 00                             SBC #$00
0C872 85 02                             STA temp+2
0C874                                   
0C874                                   ;; Draw next metatile in this loop (if any left)
0C874 88                                DEY
0C875 30 27                             BMI +doneDrawingRowColumn
0C877                                   
0C877                                   ;; Is it a row or a column?
0C877 A5 01                             LDA temp+1
0C879 10 17                             BPL +
0C87B                                       ;; It is a column: move pointer down (+$40)
0C87B A5 03                                 LDA temp+3
0C87D 18                                    CLC
0C87E 69 40                                 ADC #$40
0C880 85 03                                 STA temp+3
0C882 A5 02                                 LDA temp+2
0C884 69 00                                 ADC #$00
0C886 85 02                                 STA temp+2
0C888                                       
0C888                                       ;; Add 16 to temp (as a tile RAM pointer)
0C888 A5 00                                 LDA temp
0C88A 18                                    CLC
0C88B 69 10                                 ADC #$10
0C88D 85 00                                 STA temp
0C88F 4C 9B C8                              JMP +drawNextTile
0C892                                   +
0C892                                   
0C892                                   ;; It is a row: move pointer right (+$02)
0C892 A5 03                             LDA temp+3
0C894 18                                CLC
0C895 69 02                             ADC #$02
0C897 85 03                             STA temp+3
0C899                                   
0C899                                   ;; Add 1 to temp (as a tile RAM pointer)
0C899 E6 00                             INC temp
0C89B                           
0C89B                               
0C89B                               ;; Next tile in the row/column
0C89B                                   +drawNextTile:
0C89B 4C D7 C7                      JMP -drawTileLoop
0C89E                           
0C89E                               ;; Go to the next set of tiles
0C89E                           +doneDrawingRowColumn:
0C89E 68                            PLA
0C89F A8                            TAY
0C8A0 C8                            INY
0C8A1 4C 55 C7                      JMP -drawRowColumnLoop
0C8A4                           
0C8A4                           ;; Level loading is done
0C8A4                           +doneLevelLoad:
0C8A4                           
0C8A4                               ;; Count number of color blocks
0C8A4 A2 A0                         LDX #160
0C8A6                               -
0C8A6 BD FF 03                          LDA tile_type-1,x
0C8A9 29 80                             AND #%10000000
0C8AB F0 02                             BEQ +
0C8AD E6 42                                 INC blocks_left
0C8AF                                   +
0C8AF CA                                DEX
0C8B0 D0 F4                         BNE -
0C8B2                           
0C8B2                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C8B2 A9 20                         LDA #$20
0C8B4 8D 06 20                      STA PPU_ADDR
0C8B7 A9 A2                         LDA #$A2
0C8B9 8D 06 20                      STA PPU_ADDR
0C8BC A9 35                         LDA #$35
0C8BE 20 EC CA                      JSR sub_Draw28HorizontalTiles
0C8C1                           
0C8C1                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C8C1 A9 23                         LDA #$23
0C8C3 8D 06 20                      STA PPU_ADDR
0C8C6 A9 42                         LDA #$42
0C8C8 8D 06 20                      STA PPU_ADDR
0C8CB A9 31                         LDA #$31
0C8CD 20 EC CA                      JSR sub_Draw28HorizontalTiles
0C8D0                           
0C8D0                               ;; Left & right game bounds
0C8D0                               ;; Set PPU_ADDR and store in temp variables
0C8D0 A9 20                         LDA #$20
0C8D2 85 00                         STA temp
0C8D4 8D 06 20                      STA PPU_ADDR
0C8D7 A9 C1                         LDA #$C1
0C8D9 85 01                         STA temp+1
0C8DB 8D 06 20                      STA PPU_ADDR
0C8DE                               
0C8DE                               ;; Set vertical bound tile and set up loop
0C8DE A0 33                         LDY #$33
0C8E0 A2 14                         LDX #20
0C8E2                               -
0C8E2                                   ;; Show left tile
0C8E2 8C 07 20                          STY PPU_DATA
0C8E5                                   
0C8E5                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C8E5 A5 00                             LDA temp
0C8E7 8D 06 20                          STA PPU_ADDR
0C8EA A5 01                             LDA temp+1
0C8EC 18                                CLC
0C8ED 69 1D                             ADC #29
0C8EF 85 01                             STA temp+1
0C8F1 8D 06 20                          STA PPU_ADDR
0C8F4                           
0C8F4                                   ;; Show right tile
0C8F4 8C 07 20                          STY PPU_DATA
0C8F7                           
0C8F7                                   ;; Check if we're done yet
0C8F7 CA                                DEX
0C8F8 F0 18                             BEQ +drawCorners
0C8FA                                   
0C8FA                                   ;; Not done yet: add 3 to low byte for next left bound
0C8FA A5 01                             LDA temp+1
0C8FC 18                                CLC
0C8FD 69 03                             ADC #3
0C8FF 85 01                             STA temp+1
0C901                                   
0C901                                   ;; Apply carry to high byte
0C901 A5 00                             LDA temp
0C903 69 00                             ADC #$00
0C905 85 00                             STA temp
0C907                                   
0C907                                   ;; Store next PPU_ADDR to draw at
0C907 8D 06 20                          STA PPU_ADDR
0C90A A5 01                             LDA temp+1
0C90C 8D 06 20                          STA PPU_ADDR
0C90F 4C E2 C8                      JMP -
0C912                               
0C912                               
0C912                           
0C912                           +drawCorners:
0C912                               ;; Draw the corners of the playing field
0C912 A9 20                         LDA #$20
0C914 8D 06 20                      STA PPU_ADDR
0C917 A9 A1                         LDA #$A1
0C919 8D 06 20                      STA PPU_ADDR
0C91C A9 39                         LDA #$39
0C91E 8D 07 20                      STA PPU_DATA
0C921                           
0C921 A9 20                         LDA #$20
0C923 8D 06 20                      STA PPU_ADDR
0C926 A9 BE                         LDA #$BE
0C928 8D 06 20                      STA PPU_ADDR
0C92B A9 3A                         LDA #$3A
0C92D 8D 07 20                      STA PPU_DATA
0C930                               ;; (added background tile for Sprite-0 hit)
0C930 A9 3F                         LDA #$3F
0C932 8D 07 20                      STA PPU_DATA
0C935                           
0C935 A9 23                         LDA #$23
0C937 8D 06 20                      STA PPU_ADDR
0C93A A9 41                         LDA #$41
0C93C 8D 06 20                      STA PPU_ADDR
0C93F A9 36                         LDA #$36
0C941 8D 07 20                      STA PPU_DATA
0C944                           
0C944 A9 23                         LDA #$23
0C946 8D 06 20                      STA PPU_ADDR
0C949 A9 5E                         LDA #$5E
0C94B 8D 06 20                      STA PPU_ADDR
0C94E A9 34                         LDA #$34
0C950 8D 07 20                      STA PPU_DATA
0C953                           
0C953                           
0C953                               ;; Draw the hud labels
0C953 A9 20                         LDA #$20
0C955 8D 06 20                      STA PPU_ADDR
0C958 A9 62                         LDA #$62
0C95A 8D 06 20                      STA PPU_ADDR
0C95D A2 00                         LDX #$00
0C95F                               -
0C95F BD 15 D6                          LDA tbl_HudText,x
0C962 8D 07 20                          STA PPU_DATA
0C965 E8                                INX
0C966 E0 1C                             CPX #28
0C968 D0 F5                         BNE -
0C96A                           
0C96A                           
0C96A                               ;; Draw the current score
0C96A A9 20                         LDA #$20
0C96C 8D 06 20                      STA PPU_ADDR
0C96F A9 83                         LDA #$83
0C971 8D 06 20                      STA PPU_ADDR
0C974 A2 00                         LDX #$00
0C976                               -
0C976 B5 20                             LDA ball_score,x
0C978 18                                CLC
0C979 69 01                             ADC #$01
0C97B 8D 07 20                          STA PPU_DATA
0C97E E8                                INX
0C97F E0 06                             CPX #$06
0C981 D0 F3                         BNE -
0C983                           
0C983                           
0C983                               ;; Draw the level number
0C983                               ;; (with primitive HEX>DEC)
0C983 A5 40                         LDA current_level
0C985 18                            CLC
0C986 69 01                         ADC #$01
0C988 85 01                         STA temp+1
0C98A                               
0C98A C9 14                         CMP #20
0C98C B0 13                         BCS +tempIsTwo
0C98E                               
0C98E C9 0A                         CMP #10
0C990 B0 05                         BCS +tempIsOne
0C992                               
0C992 A9 00                         LDA #$00
0C994 4C A8 C9                      JMP +setTemp
0C997                               
0C997                           +tempIsOne:
0C997 38                            SEC
0C998 E9 0A                         SBC #10
0C99A 85 01                         STA temp+1
0C99C A9 01                         LDA #$01
0C99E 4C A8 C9                      JMP +setTemp
0C9A1                               
0C9A1                           +tempIsTwo:
0C9A1 38                            SEC
0C9A2 E9 14                         SBC #20
0C9A4 85 01                         STA temp+1
0C9A6 A9 02                         LDA #$02
0C9A8                           
0C9A8                           +setTemp:
0C9A8 85 00                         STA temp
0C9AA                               
0C9AA E6 00                         INC temp
0C9AC E6 01                         INC temp+1
0C9AE                               
0C9AE A9 20                         LDA #$20
0C9B0 8D 06 20                      STA PPU_ADDR
0C9B3 A9 8B                         LDA #$8B
0C9B5 8D 06 20                      STA PPU_ADDR
0C9B8 A5 00                         LDA temp
0C9BA 8D 07 20                      STA PPU_DATA
0C9BD A5 01                         LDA temp+1
0C9BF 8D 07 20                      STA PPU_DATA
0C9C2                           
0C9C2                           
0C9C2                               ;; Draw lives (presumes lives to be capped at 9)
0C9C2 A9 20                         LDA #$20
0C9C4 8D 06 20                      STA PPU_ADDR
0C9C7 A9 92                         LDA #$92
0C9C9 8D 06 20                      STA PPU_ADDR
0C9CC A6 1F                         LDX ball_lives
0C9CE E8                            INX
0C9CF 8E 07 20                      STX PPU_DATA
0C9D2                           
0C9D2                           
0C9D2                               ;; Set and draw bonus
0C9D2 A9 07                         LDA #$07
0C9D4 85 2C                         STA ball_bonus
0C9D6 A9 09                         LDA #$09
0C9D8 85 2D                         STA ball_bonus+1
0C9DA 85 2E                         STA ball_bonus+2
0C9DC                               
0C9DC A9 20                         LDA #$20
0C9DE 8D 06 20                      STA PPU_ADDR
0C9E1 A9 9A                         LDA #$9A
0C9E3 8D 06 20                      STA PPU_ADDR
0C9E6 A2 00                         LDX #$00
0C9E8                               -
0C9E8 B5 2C                             LDA ball_bonus,x
0C9EA 18                                CLC
0C9EB 69 01                             ADC #$01
0C9ED 8D 07 20                          STA PPU_DATA
0C9F0 E8                                INX
0C9F1 E0 03                             CPX #$03
0C9F3 D0 F3                         BNE -
0C9F5                           
0C9F5                           
0C9F5                               ;; Set attribute data to RAM
0C9F5                               
0C9F5                               ;; Byte 0-7 of attribute ram should be #%10100000
0C9F5 A2 00                         LDX #$00
0C9F7 A9 A0                         LDA #$A0
0C9F9                               -
0C9F9 9D A0 04                          STA tile_attributes,x
0C9FC E8                                INX
0C9FD E0 08                             CPX #$08
0C9FF D0 F8                         BNE -
0CA01                           
0CA01                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CA01                           
0CA01                           -attributeLoop:
0CA01                               ;; Reset current attribute value
0CA01 A9 00                         LDA #$00
0CA03 85 02                         STA temp+2
0CA05                           
0CA05                               ;; Get first metatile in tile ram based on attribute index
0CA05                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CA05 8A                            TXA
0CA06                           
0CA06 38                            SEC
0CA07 E9 08                         SBC #$08
0CA09 85 01                         STA temp+1      ; attr - 8 (temp1)
0CA0B 0A                            ASL             ; * 2
0CA0C 85 00                         STA temp        ; temp = temp1 * 2
0CA0E                           
0CA0E A5 01                         LDA temp+1      ; temp1
0CA10 29 F8                         AND #%11111000  ; rounded down to 8's
0CA12 0A                            ASL             ; * 2
0CA13 18                            CLC
0CA14 65 00                         ADC temp        ; + temp1 * 2
0CA16 85 00                         STA temp        ; first metatile
0CA18                           
0CA18                               ;; Store first metatile in y-register
0CA18 A8                            TAY
0CA19                           
0CA19                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CA19 8A                            TXA
0CA1A 29 07                         AND #%00000111
0CA1C C9 07                         CMP #%00000111
0CA1E F0 0B                         BEQ +
0CA20                           
0CA20                               ;; If X >= $30, don't apply bottom right metatile
0CA20 E0 30                         CPX #$30
0CA22 B0 07                         BCS +
0CA24                               
0CA24                               ;; Add metatile1 subpalette to attribute value
0CA24 B9 00 04                      LDA tile_type,y
0CA27 29 0C                         AND #%00001100
0CA29 85 02                         STA temp+2
0CA2B                               +
0CA2B                           
0CA2B                           
0CA2B                               ;; Apply second metatile
0CA2B 88                            DEY
0CA2C                           
0CA2C                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CA2C 8A                            TXA
0CA2D 29 07                         AND #%00000111
0CA2F F0 10                         BEQ +
0CA31                           
0CA31                               ;; If X >= $30, don't apply bottom left metatile
0CA31 E0 30                         CPX #$30
0CA33 B0 0C                         BCS +
0CA35                           
0CA35                           
0CA35                           
0CA35                               ;; Add metatile2 subpalette to attribute value
0CA35 B9 00 04                      LDA tile_type,y
0CA38 29 0C                         AND #%00001100
0CA3A 4A                            LSR
0CA3B 4A                            LSR
0CA3C 05 02                         ORA temp+2
0CA3E 4C 43 CA                      JMP ++
0CA41                               +
0CA41 A5 02                         LDA temp+2
0CA43                               ++
0CA43 0A                            ASL
0CA44 0A                            ASL
0CA45 85 02                         STA temp+2
0CA47                           
0CA47                           
0CA47                               ;; Apply third metatile
0CA47 98                            TYA
0CA48 38                            SEC
0CA49 E9 0F                         SBC #$0F
0CA4B A8                            TAY
0CA4C                           
0CA4C                               ;; If X MOD 8 == 7, don't apply top right metatile
0CA4C 8A                            TXA
0CA4D 29 07                         AND #%00000111
0CA4F C9 07                         CMP #%00000111
0CA51 F0 11                         BEQ +
0CA53                           
0CA53                               ;; If X < $10, don't apply top right metatile
0CA53 8A                            TXA
0CA54 29 F0                         AND #%11110000
0CA56 F0 0C                         BEQ +
0CA58                           
0CA58                               ;; Add metatile3 subpalette to attribute value
0CA58 B9 00 04                      LDA tile_type,y
0CA5B 29 0C                         AND #%00001100
0CA5D 4A                            LSR
0CA5E 4A                            LSR
0CA5F 05 02                         ORA temp+2
0CA61 4C 66 CA                      JMP ++
0CA64                               +
0CA64 A5 02                         LDA temp+2
0CA66                               ++
0CA66 0A                            ASL
0CA67 0A                            ASL
0CA68 85 02                         STA temp+2
0CA6A                           
0CA6A                           
0CA6A                               ;; Apply fourth metatile
0CA6A 88                            DEY
0CA6B                           
0CA6B                               ;; If X MOD 8 == 0, don't apply top left metatile
0CA6B 8A                            TXA
0CA6C 29 07                         AND #%00000111
0CA6E F0 11                         BEQ +
0CA70                           
0CA70                               ;; If X < $10, don't apply top left metatile
0CA70 8A                            TXA
0CA71 29 F0                         AND #%11110000
0CA73 F0 0C                         BEQ +
0CA75                           
0CA75                               ;; Add metatile4 subpalette to attribute value
0CA75 B9 00 04                      LDA tile_type,y
0CA78 29 0C                         AND #%00001100
0CA7A 4A                            LSR
0CA7B 4A                            LSR
0CA7C 05 02                         ORA temp+2
0CA7E 4C 83 CA                      JMP ++
0CA81                               +
0CA81 A5 02                         LDA temp+2
0CA83                               ++
0CA83 9D A0 04                      STA tile_attributes,x
0CA86                           
0CA86                               ;; Check the next attribute, if any left
0CA86 E8                            INX
0CA87 E0 38                         CPX #$38
0CA89 F0 03                         BEQ +
0CA8B 4C 01 CA                          JMP -attributeLoop
0CA8E                               +
0CA8E                           
0CA8E                               ;; Stream attribute RAM to PPU
0CA8E 2C 02 20                      BIT PPU_STATUS
0CA91 A9 23                         LDA #$23
0CA93 8D 06 20                      STA PPU_ADDR
0CA96 A9 C0                         LDA #$C0
0CA98 8D 06 20                      STA PPU_ADDR
0CA9B A2 00                         LDX #$00
0CA9D                               -
0CA9D BD A0 04                          LDA tile_attributes,x
0CAA0 8D 07 20                          STA PPU_DATA
0CAA3 E8                                INX
0CAA4 E0 40                             CPX #$40
0CAA6 D0 F5                         BNE -
0CAA8                           
0CAA8                               ;; Set initial ball position
0CAA8 A6 40                         LDX current_level
0CAAA BD A2 D5                      LDA tbl_lvl_ball_startpos,x
0CAAD 29 F0                         AND #%11110000
0CAAF 18                            CLC
0CAB0 69 34                         ADC #$34
0CAB2 85 19                         STA ball_ypos_hi
0CAB4 BD A2 D5                      LDA tbl_lvl_ball_startpos,x
0CAB7 0A                            ASL
0CAB8 0A                            ASL
0CAB9 0A                            ASL
0CABA 0A                            ASL
0CABB 18                            CLC
0CABC 69 14                         ADC #$14
0CABE 85 17                         STA ball_xpos_hi
0CAC0 A9 00                         LDA #$00
0CAC2 85 18                         STA ball_xpos_lo
0CAC4 85 1A                         STA ball_ypos_lo
0CAC6                               
0CAC6                               ;; Set initial ball color and direction
0CAC6 BD BB D5                      LDA tbl_lvl_ball_init,x
0CAC9 29 F0                         AND #%11110000
0CACB 85 37                         STA ball_flags
0CACD 20 67 C5                      JSR sub_ColorizeBall
0CAD0                               
0CAD0                               ;; Reset bonus counter
0CAD0 A9 06                         LDA #BONUS_FRAMES
0CAD2 85 3E                         STA bonus_counter
0CAD4                               
0CAD4                               ;; Play background noise
0CAD4 A9 08                         LDA #$08
0CAD6 8D 15 40                      STA APU_STATUS
0CAD9 8D 0F 40                      STA NOISE_LENGTH
0CADC A9 0E                         LDA #$0E
0CADE 85 45                         STA current_noise
0CAE0 A9 00                         LDA #$00
0CAE2 85 43                         STA max_noise
0CAE4 85 46                         STA noise_counter
0CAE6 85 44                         STA sweep_noise
0CAE8 20 EF C4                      JSR sub_BackgroundNoise
0CAEB                           
0CAEB                               ;; Return
0CAEB 60                            RTS
0CAEC                           
0CAEC                           
0CAEC                           ;; Subroutine: draw 28 tiles in a row
0CAEC                           sub_Draw28HorizontalTiles:
0CAEC A2 1C                         LDX #28
0CAEE                               -
0CAEE 8D 07 20                          STA PPU_DATA
0CAF1 CA                                DEX
0CAF2 D0 FA                         BNE -
0CAF4 60                            RTS0CAF5                           .include "game/subroutine/LoadIntroScreen.asm"
0CAF5                           sub_LoadIntroScreen:
0CAF5                           
0CAF5                               ;; Load intro palette
0CAF5 2C 02 20                      BIT PPU_STATUS
0CAF8 A9 3F                         LDA #$3F
0CAFA 8D 06 20                      STA PPU_ADDR
0CAFD A9 00                         LDA #$00
0CAFF 8D 06 20                      STA PPU_ADDR
0CB02 A2 00                         LDX #$00
0CB04                               -
0CB04 BD 47 CD                          LDA tbl_IntroScreenPalette,x
0CB07 8D 07 20                          STA PPU_DATA
0CB0A E8                                INX
0CB0B E0 20                             CPX #$20
0CB0D D0 F5                         BNE -
0CB0F                               
0CB0F                               ;; Put ball in the middle
0CB0F A9 7C                         LDA #$7C
0CB11 85 17                         STA ball_xpos_hi
0CB13 85 19                         STA ball_ypos_hi
0CB15                           
0CB15                               ;; Clear the screen
0CB15 20 FC C4                      JSR sub_ClearScreen
0CB18                           
0CB18                               ;; Set up intro screen draw loop
0CB18 A2 00                         LDX #$00
0CB1A                           
0CB1A                           -loop_IntroScreenData:
0CB1A                           
0CB1A                               ;; Get current byte from intro screen data
0CB1A BD 6F CD                      LDA tbl_IntroScreenData,x
0CB1D                           
0CB1D                               ;; If current byte is #$3F, we're done drawing.
0CB1D C9 3F                         CMP #$3F
0CB1F D0 03                         BNE +
0CB21 4C 6E CB                          JMP +goToEndIntroScreen
0CB24                               +
0CB24                           
0CB24                               ;; If highest bits are %11, draw a plain tile
0CB24 29 C0                         AND #%11000000
0CB26 D0 03                         BNE +
0CB28 4C 4E CB                          JMP +drawTile
0CB2B                               +
0CB2B                               
0CB2B                               ;; If highest bits are %01, set the PPU address
0CB2B                               ;; If not, draw two logo tiles
0CB2B C9 40                         CMP #%01000000
0CB2D D0 03                         BNE +drawLogo
0CB2F 4C 58 CB                          JMP +setPpuAddr
0CB32                           
0CB32                           +drawLogo:
0CB32                               ;; Get bits 0-2 and store in a temp variable
0CB32 BD 6F CD                      LDA tbl_IntroScreenData,x
0CB35 29 07                         AND #%00000111
0CB37 85 00                         STA temp
0CB39                               
0CB39                               ;; Get bits 3-5, shift over to get a value from 0-7
0CB39 BD 6F CD                      LDA tbl_IntroScreenData,x
0CB3C 4A                            LSR
0CB3D 4A                            LSR
0CB3E 4A                            LSR
0CB3F 29 07                         AND #%00000111
0CB41                               
0CB41                               ;; Draw the tile that corresponds with that value
0CB41 A8                            TAY
0CB42 20 DF C5                      JSR sub_drawIntroScreenLogoTile
0CB45                               
0CB45                               ;; Do the same for the value stored in temp
0CB45 A4 00                         LDY temp
0CB47 20 DF C5                      JSR sub_drawIntroScreenLogoTile
0CB4A                           
0CB4A                               ;; Next byte please
0CB4A E8                            INX
0CB4B 4C 1A CB                      JMP -loop_IntroScreenData
0CB4E                           
0CB4E                           +drawTile:
0CB4E                               ;; Just draw the tile value on screen
0CB4E BD 6F CD                      LDA tbl_IntroScreenData,x
0CB51 8D 07 20                      STA PPU_DATA
0CB54                               
0CB54                               ;; Next byte please
0CB54 E8                            INX
0CB55 4C 1A CB                      JMP -loop_IntroScreenData
0CB58                           
0CB58                           
0CB58                           +setPpuAddr:
0CB58                               ;; Reset the PPU latch
0CB58 2C 02 20                      BIT PPU_STATUS
0CB5B                               
0CB5B                               ;; Sanitize and write the high byte of the PPU address
0CB5B BD 6F CD                      LDA tbl_IntroScreenData,x
0CB5E 29 3F                         AND #%00111111
0CB60 8D 06 20                      STA PPU_ADDR
0CB63                           
0CB63                               ;; Write the low byte of the PPU address
0CB63 E8                            INX
0CB64 BD 6F CD                      LDA tbl_IntroScreenData,x
0CB67 8D 06 20                      STA PPU_ADDR
0CB6A                               
0CB6A                               ;; PPU has been set up to draw tiles at the correct spot now.
0CB6A                               
0CB6A                               ;; Next byte please.
0CB6A E8                            INX
0CB6B 4C 1A CB                      JMP -loop_IntroScreenData
0CB6E                           
0CB6E                           +goToEndIntroScreen:
0CB6E                           
0CB6E                               ;; To color the 1.LEVEL: line green, we need to update two
0CB6E                               ;; values in the PPU attribute data.
0CB6E 2C 02 20                      BIT PPU_STATUS
0CB71 A9 23                         LDA #$23
0CB73 8D 06 20                      STA PPU_ADDR
0CB76 A9 CB                         LDA #$CB
0CB78 8D 06 20                      STA PPU_ADDR
0CB7B A9 0A                         LDA #%00001010
0CB7D 8D 07 20                      STA PPU_DATA
0CB80 8D 07 20                      STA PPU_DATA
0CB83                           
0CB83 60                            RTS
0CB84                           
0CB84                           .include "game/subroutine/LoadWinScreen.asm"
0CB84                           sub_LoadWinScreen:
0CB84 60                            RTS
0CB85                           
0CB85                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CB85                           sub_RemoveBlockFromScreen:
0CB85                           
0CB85                               ;; Get current buffer location
0CB85 A4 3A                         LDY ppu_buffer_pointer
0CB87                               
0CB87                               ;; TILE 1: if metatile on top left is solid, draw
0CB87                               ;; null tile, else draw random noise tile
0CB87 A9 00                         LDA #$00
0CB89 85 39                         STA ppu_buffer_update
0CB8B                               
0CB8B A5 00                         LDA temp
0CB8D 99 00 03                      STA ppu_buffer,y
0CB90 C8                            INY
0CB91 A5 01                         LDA temp+1
0CB93 99 00 03                      STA ppu_buffer,y
0CB96 C8                            INY
0CB97                               
0CB97 8A                            TXA
0CB98 29 0F                         AND #%00001111
0CB9A F0 11                         BEQ +drawRandomTile
0CB9C                           
0CB9C 8A                            TXA
0CB9D 29 F0                         AND #%11110000
0CB9F F0 0C                         BEQ +drawRandomTile
0CBA1                           
0CBA1 BD EF 03                      LDA tile_type-17,x
0CBA4 29 01                         AND #%00000001
0CBA6 F0 05                         BEQ +drawRandomTile  
0CBA8                           
0CBA8                               ;; Draw a null tile
0CBA8 A9 00                         LDA #$00
0CBAA 4C B5 CB                      JMP +addToPPUBuffer
0CBAD                               
0CBAD                           +drawRandomTile:
0CBAD                               ;; Draw a random tile
0CBAD 20 5F C4                      JSR sub_GetRandomNumber
0CBB0 29 07                         AND #%00000111
0CBB2 18                            CLC
0CBB3 69 68                         ADC #$68
0CBB5                               
0CBB5                               ;; Add tile to ppu buffer
0CBB5                           +addToPPUBuffer:
0CBB5 99 00 03                      STA ppu_buffer,y
0CBB8 C8                            INY
0CBB9                           
0CBB9                               ;; TILE 2: If metatile above is solid, draw null,
0CBB9                               ;; else draw random noise.
0CBB9 E6 01                         INC temp+1
0CBBB A5 00                         LDA temp
0CBBD 99 00 03                      STA ppu_buffer,y
0CBC0 C8                            INY
0CBC1 A5 01                         LDA temp+1
0CBC3 99 00 03                      STA ppu_buffer,y
0CBC6 C8                            INY
0CBC7                               
0CBC7 8A                            TXA
0CBC8 29 F0                         AND #%11110000
0CBCA F0 0C                         BEQ +drawRandomTile
0CBCC                               
0CBCC BD F0 03                      LDA tile_type-16,x
0CBCF 29 01                         AND #%00000001
0CBD1 F0 05                         BEQ +drawRandomTile
0CBD3                               
0CBD3 A9 00                         LDA #%00
0CBD5 4C E0 CB                      JMP +addToPPUBuffer
0CBD8                           
0CBD8                           +drawRandomTile:
0CBD8 20 5F C4                      JSR sub_GetRandomNumber
0CBDB 29 07                         AND #%00000111
0CBDD 18                            CLC
0CBDE 69 68                         ADC #$68
0CBE0                           
0CBE0                           +addToPPUBuffer:
0CBE0 99 00 03                      STA ppu_buffer,y
0CBE3 C8                            INY
0CBE4                               
0CBE4                               ;; TILE 3 - If metatile left is solid, draw null,
0CBE4                               ;; else draw random noise.
0CBE4 A5 01                         LDA temp+1
0CBE6 18                            CLC
0CBE7 69 1F                         ADC #$1F
0CBE9 85 01                         STA temp+1
0CBEB A5 00                         LDA temp
0CBED 69 00                         ADC #$00
0CBEF 85 00                         STA temp
0CBF1 99 00 03                      STA ppu_buffer,y
0CBF4 C8                            INY
0CBF5 A5 01                         LDA temp+1
0CBF7 99 00 03                      STA ppu_buffer,y
0CBFA C8                            INY
0CBFB                               
0CBFB 8A                            TXA
0CBFC 29 0F                         AND #%00001111
0CBFE F0 0C                         BEQ +drawRandomTile
0CC00                               
0CC00 BD FF 03                      LDA tile_type-1,x
0CC03 29 01                         AND #%00000001
0CC05 F0 05                         BEQ +drawRandomTile
0CC07                               
0CC07 A9 00                         LDA #%00
0CC09 4C 14 CC                      JMP +addToPPUBuffer
0CC0C                           
0CC0C                           +drawRandomTile:
0CC0C 20 5F C4                      JSR sub_GetRandomNumber
0CC0F 29 07                         AND #%00000111
0CC11 18                            CLC
0CC12 69 68                         ADC #$68
0CC14                               
0CC14                           +addToPPUBuffer:
0CC14 99 00 03                      STA ppu_buffer,y
0CC17 C8                            INY
0CC18                               
0CC18                               ;; TILE 4 - Always random noise
0CC18 E6 01                         INC temp+1
0CC1A A5 00                         LDA temp
0CC1C 99 00 03                      STA ppu_buffer,y
0CC1F C8                            INY
0CC20 A5 01                         LDA temp+1
0CC22 99 00 03                      STA ppu_buffer,y
0CC25 C8                            INY
0CC26 20 5F C4                      JSR sub_GetRandomNumber
0CC29 29 07                         AND #%00000111
0CC2B 18                            CLC
0CC2C 69 68                         ADC #$68
0CC2E 99 00 03                      STA ppu_buffer,y
0CC31 C8                            INY
0CC32                           
0CC32                               ;; TILE 5 - If tile on the right is solid, skip,
0CC32                               ;; else draw random noise tile
0CC32 E6 01                         INC temp+1
0CC34                               
0CC34 8A                            TXA
0CC35 29 0F                         AND #%00001111
0CC37 C9 0D                         CMP #$0D
0CC39 F0 1F                         BEQ +skipTile
0CC3B                               
0CC3B BD 01 04                      LDA tile_type+1,x
0CC3E 29 01                         AND #%00000001
0CC40 D0 18                         BNE +skipTile
0CC42 A5 00                             LDA temp
0CC44 99 00 03                          STA ppu_buffer,y
0CC47 C8                                INY
0CC48 A5 01                             LDA temp+1
0CC4A 99 00 03                          STA ppu_buffer,y
0CC4D C8                                INY
0CC4E 20 5F C4                          JSR sub_GetRandomNumber
0CC51 29 07                             AND #%00000111
0CC53 18                                CLC
0CC54 69 68                             ADC #$68
0CC56 99 00 03                          STA ppu_buffer,y
0CC59 C8                                INY    
0CC5A                               +skipTile:
0CC5A                           
0CC5A                               ;; TILE 6 - If tile on bottom is solid, skip,
0CC5A                               ;; else draw random noise
0CC5A A5 01                         LDA temp+1
0CC5C 18                            CLC
0CC5D 69 1F                         ADC #$1F
0CC5F 85 01                         STA temp+1
0CC61 A5 00                         LDA temp
0CC63 69 00                         ADC #$00
0CC65 85 00                         STA temp
0CC67                           
0CC67 8A                            TXA
0CC68 29 F0                         AND #%11110000
0CC6A C9 90                         CMP #$90
0CC6C F0 1F                         BEQ +skipTile
0CC6E                           
0CC6E BD 10 04                      LDA tile_type+16,x
0CC71 29 01                         AND #%00000001
0CC73 D0 18                         BNE +skipTile
0CC75 A5 00                             LDA temp
0CC77 99 00 03                          STA ppu_buffer,y
0CC7A C8                                INY
0CC7B A5 01                             LDA temp+1
0CC7D 99 00 03                          STA ppu_buffer,y
0CC80 C8                                INY
0CC81 20 5F C4                          JSR sub_GetRandomNumber
0CC84 29 07                             AND #%00000111
0CC86 18                                CLC
0CC87 69 68                             ADC #$68
0CC89 99 00 03                          STA ppu_buffer,y
0CC8C C8                                INY    
0CC8D                               +skipTile:
0CC8D                               
0CC8D                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CC8D                               ;; else draw random noise
0CC8D E6 01                         INC temp+1
0CC8F                           
0CC8F 8A                            TXA
0CC90 29 F0                         AND #%11110000
0CC92 C9 90                         CMP #$90
0CC94 F0 26                         BEQ +skipTile
0CC96                               
0CC96 8A                            TXA
0CC97 29 0F                         AND #%00001111
0CC99 C9 0D                         CMP #$0D
0CC9B F0 1F                         BEQ +skipTile
0CC9D                               
0CC9D BD 11 04                      LDA tile_type+17,x
0CCA0 29 01                         AND #%00000001
0CCA2 D0 18                         BNE +skipTile
0CCA4 A5 00                             LDA temp
0CCA6 99 00 03                          STA ppu_buffer,y
0CCA9 C8                                INY
0CCAA A5 01                             LDA temp+1
0CCAC 99 00 03                          STA ppu_buffer,y
0CCAF C8                                INY
0CCB0 20 5F C4                          JSR sub_GetRandomNumber
0CCB3 29 07                             AND #%00000111
0CCB5 18                                CLC
0CCB6 69 68                             ADC #$68
0CCB8 99 00 03                          STA ppu_buffer,y
0CCBB C8                                INY    
0CCBC                               +skipTile:   
0CCBC                           
0CCBC                           
0CCBC                               ;; Update attribute table accordingly through ppu buffer
0CCBC A9 23                         LDA #$23
0CCBE 99 00 03                      STA ppu_buffer,y
0CCC1 C8                            INY
0CCC2                               
0CCC2 8A                            TXA
0CCC3 29 F0                         AND #%11110000
0CCC5 4A                            LSR
0CCC6 4A                            LSR
0CCC7 4A                            LSR
0CCC8 4A                            LSR
0CCC9 18                            CLC
0CCCA 69 01                         ADC #1
0CCCC 4A                            LSR
0CCCD 0A                            ASL
0CCCE 0A                            ASL
0CCCF 0A                            ASL
0CCD0 18                            CLC
0CCD1 69 C8                         ADC #$C8
0CCD3 85 00                         STA temp
0CCD5 8A                            TXA
0CCD6 29 0F                         AND #%00001111
0CCD8 18                            CLC
0CCD9 69 01                         ADC #$01
0CCDB 4A                            LSR
0CCDC 18                            CLC
0CCDD 65 00                         ADC temp
0CCDF 85 00                         STA temp
0CCE1 99 00 03                      STA ppu_buffer,y
0CCE4 C8                            INY
0CCE5                                  
0CCE5 8A                            TXA
0CCE6 29 10                         AND #%00010000
0CCE8 F0 05                         BEQ +
0CCEA A9 F0                             LDA #%11110000
0CCEC 4C F1 CC                          JMP ++
0CCEF                               +
0CCEF A9 0F                         LDA #%00001111
0CCF1                               ++
0CCF1 85 02                         STA temp+2
0CCF3                               
0CCF3 8A                            TXA
0CCF4 48                            PHA
0CCF5 29 01                         AND #%00000001
0CCF7 F0 07                         BEQ +
0CCF9 A5 02                             LDA temp+2
0CCFB 09 CC                             ORA #%11001100
0CCFD 4C 04 CD                          JMP ++
0CD00                               +
0CD00 A5 02                         LDA temp+2
0CD02 09 33                         ORA #%00110011
0CD04                               ++
0CD04 85 02                         STA temp+2
0CD06                               
0CD06 A5 00                         LDA temp
0CD08 38                            SEC
0CD09 E9 C0                         SBC #$C0
0CD0B AA                            TAX
0CD0C BD A0 04                      LDA tile_attributes,x
0CD0F 25 02                         AND temp+2
0CD11 9D A0 04                      STA tile_attributes,x
0CD14 99 00 03                      STA ppu_buffer,y
0CD17 C8                            INY
0CD18 68                            PLA
0CD19 AA                            TAX
0CD1A                           
0CD1A                           
0CD1A                               ;; Tell PPU to update tiles and attributes next frame
0CD1A 84 3A                         STY ppu_buffer_pointer
0CD1C A9 01                         LDA #$01
0CD1E 85 39                         STA ppu_buffer_update
0CD20                            
0CD20                               ;; We're done - return
0CD20 60                            RTS0CD21                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CD21                           sub_WriteByteToPPUBuffer:
0CD21                           
0CD21                               ;; Prevent updating until full 3-byte buffer is filled,
0CD21                               ;; so that graphics won't glitch out if NMI happens during
0CD21                               ;; updating the buffer
0CD21 A9 00                         LDA #$00
0CD23 85 39                         STA ppu_buffer_update
0CD25                           
0CD25                               ;; Check if buffer full; if so, wait a frame and force update
0CD25 A4 3A                         LDY ppu_buffer_pointer
0CD27 C0 30                         CPY #$30
0CD29 D0 05                         BNE +
0CD2B E6 39                             INC ppu_buffer_update
0CD2D 20 8A C4                          JSR sub_WaitForVBlank
0CD30                               +
0CD30                           
0CD30                               ;; Add ppu_addr high byte to buffer
0CD30 A5 00                         LDA temp
0CD32 99 00 03                      STA ppu_buffer,y
0CD35                           
0CD35                               ;; Add ppu_addr low byte to buffer
0CD35 C8                            INY
0CD36 A5 01                         LDA temp+1
0CD38 99 00 03                      STA ppu_buffer,y
0CD3B                           
0CD3B                               ;; Add ppu_data to buffer
0CD3B C8                            INY
0CD3C A5 02                         LDA temp+2
0CD3E 99 00 03                      STA ppu_buffer,y
0CD41                           
0CD41                               ;; Update buffer pointer
0CD41 C8                            INY
0CD42 84 3A                         STY ppu_buffer_pointer
0CD44                           
0CD44                               ;; Tell NMI to update next round
0CD44 E6 39                         INC ppu_buffer_update
0CD46                           
0CD46                               ;; Return
0CD46 60                            RTS0CD47                           
0CD47                           ;; LUTs
0CD47                           .include "game/include/tables.asm"
0CD47                           
0CD47                           ;; Initial screen palette
0CD47                           tbl_IntroScreenPalette:
0CD47 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CD4B 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CD4F 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CD53 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CD57                           
0CD57 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CD5B 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CD5F 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CD63 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CD67                           
0CD67                           
0CD67                           ;; Intro: mapping logo index to chr tile
0CD67                           tbl_IntroScreenLogoChr:
0CD67 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CD6F                           
0CD6F                           
0CD6F                           ;; Intro screen data
0CD6F                           tbl_IntroScreenData:
0CD6F                           
0CD6F                               ;; Set PPU address $20AC and draw
0CD6F 60 AC                         .db #$60, #$AC
0CD71 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CD79                           
0CD79                               ;; Set PPU address $20CF and draw
0CD79 60 CF                         .db #$60, #$CF
0CD7B 01 02                         .db #_0, #_1
0CD7D                               
0CD7D                               ;; Set PPU address $2122 and draw
0CD7D 61 22                         .db #$61, #$22
0CD7F 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CD86 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CD8C 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CD94 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CD99                               
0CD99                               ;; Set PPU address $2147 and draw
0CD99 61 47                         .db #$61, #$47
0CD9B 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CDA2 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CDA6 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CDAC 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CDB2                               
0CDB2                               ;; Set PPU address $218B and draw
0CDB2 61 8B                         .db #$61, #$8B
0CDB4 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CDBA 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CDBF                               
0CDBF                               ;; Set PPU address $21E6 and draw
0CDBF 61 E6                         .db #$61, #$E6
0CDC1 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CDC9 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CDCD 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CDD4                               
0CDD4                               ;; Set PPU address $222D and draw
0CDD4 62 2D                         .db #$62, #$2D
0CDD6 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CDDC                               
0CDDC                               ;; Set PPU address $2281
0CDDC 62 81                         .db #$62, #$81
0CDDE                               
0CDDE                               ;; Draw the Crillion logo
0CDDE E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CDE2 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDE6 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CDEA E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CDEE                               
0CDEE D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CDF2 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDF6 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDFA D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDFE                               
0CDFE D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CE02 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CE06 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CE0A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CE0E                           
0CE0E D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CE12 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CE16 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CE1A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CE1E                               
0CE1E D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CE22 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CE26 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CE2A D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CE2E                           
0CE2E F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CE32 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CE36 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CE3A F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CE3D                           
0CE3D                               ;; End of intro
0CE3D 3F                            .db #$3F
0CE3E                           
0CE3E                           
0CE3E                           ;; Animation frames table
0CE3E                           .include "game/include/table/animation_frames.asm"
0CE3E                           ;; CHR tile-id's per slide of explosion
0CE3E                           explosion_slide0:
0CE3E 00 00 00                      .db #$00, #$00, #$00
0CE41 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CE44 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CE47                           
0CE47                           explosion_slide1:
0CE47 00 00 00                      .db #$00, #$00, #$00
0CE4A 29 2A 2B                      .db #$29, #$2A, #$2B
0CE4D 39 3A 3B                      .db #$39, #$3A, #$3B
0CE50                           
0CE50                           explosion_slide2:
0CE50 16 00 00                      .db #$16, #$00, #$00
0CE53 26 27 28                      .db #$26, #$27, #$28
0CE56 36 37 38                      .db #$36, #$37, #$38
0CE59                           
0CE59                           explosion_slide3:
0CE59 00 14 15                      .db #$00, #$14, #$15
0CE5C 23 24 25                      .db #$23, #$24, #$25
0CE5F 33 34 35                      .db #$33, #$34, #$35
0CE62                           
0CE62                           explosion_slide4:
0CE62 10 11 12                      .db #$10, #$11, #$12
0CE65 20 21 22                      .db #$20, #$21, #$22
0CE68 30 31 32                      .db #$30, #$31, #$32
0CE6B                           
0CE6B                           ;; High and low bytes of animation slides
0CE6B                           explosion_anim_hi:
0CE6B CE                            .db >#explosion_slide0
0CE6C CE                            .db >#explosion_slide1
0CE6D CE                            .db >#explosion_slide2
0CE6E CE                            .db >#explosion_slide3
0CE6F CE                            .db >#explosion_slide4
0CE70 CE                            .db >#explosion_slide4
0CE71 CE                            .db >#explosion_slide3
0CE72 CE                            .db >#explosion_slide2
0CE73 CE                            .db >#explosion_slide1
0CE74 CE                            .db >#explosion_slide0
0CE75                           
0CE75                           explosion_anim_lo:
0CE75 3E                            .db <#explosion_slide0
0CE76 47                            .db <#explosion_slide1
0CE77 50                            .db <#explosion_slide2
0CE78 59                            .db <#explosion_slide3
0CE79 62                            .db <#explosion_slide4
0CE7A 62                            .db <#explosion_slide4
0CE7B 59                            .db <#explosion_slide3
0CE7C 50                            .db <#explosion_slide2
0CE7D 47                            .db <#explosion_slide1
0CE7E 3E                            .db <#explosion_slide0
0CE7F                           
0CE7F                           
0CE7F                           
0CE7F                           ;; Ball palette color table (CBRYGM)
0CE7F                           tbl_BallColorDark:
0CE7F 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CE85                            
0CE85                           tbl_BallColorLight:
0CE85 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CE8B                           
0CE8B                               
0CE8B                           ;; Screen mode drawing routine addresses
0CE8B                           tbl_LoadScreenHi:
0CE8B CA C7 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CE8E                           
0CE8E                           tbl_LoadScreenLo:
0CE8E F5 39 84                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CE91                           
0CE91                           
0CE91                           ;; Level data
0CE91                           .include "game/include/table/level_data.asm"
0CE91                           lvl_layout_01:
0CE91 61 21                         .db #$61, #%00100001
0CE93 52 61                         .db #$52, #%01100001
0CE95 43 65                         .db #$43, #%01100101
0CE97 83 05                         .db #$83, #%00000101
0CE99 93 15                         .db #$93, #%00010101
0CE9B 34 7A                         .db #$34, #%01111010
0CE9D 74 7A                         .db #$74, #%01111010
0CE9F 35 7A                         .db #$35, #%01111010
0CEA1 75 7A                         .db #$75, #%01111010
0CEA3 46 65                         .db #$46, #%01100101
0CEA5 86 25                         .db #$86, #%00100101
0CEA7 57 61                         .db #$57, #%01100001
0CEA9 68 21                         .db #$68, #%00100001
0CEAB FF                            .db #LEVEL_END
0CEAC                           
0CEAC                           lvl_layout_02:
0CEAC C0 0A                         .db #$C0, #%00001010
0CEAE 11 15                         .db #$11, #%00010101
0CEB0 21 62                         .db #$21, #%01100010
0CEB2 61 62                         .db #$61, #%01100010
0CEB4 A1 42                         .db #$A1, #%01000010
0CEB6 12 67                         .db #$12, #%01100111
0CEB8 52 67                         .db #$52, #%01100111
0CEBA 92 67                         .db #$92, #%01100111
0CEBC C3 0D                         .db #$C3, #%00001101
0CEBE 14 11                         .db #$14, #%00010001
0CEC0 24 65                         .db #$24, #%01100101
0CEC2 64 65                         .db #$64, #%01100101
0CEC4 A4 45                         .db #$A4, #%01000101
0CEC6 15 67                         .db #$15, #%01100111
0CEC8 55 67                         .db #$55, #%01100111
0CECA 95 67                         .db #$95, #%01100111
0CECC 17 12                         .db #$17, #%00010010
0CECE 27 61                         .db #$27, #%01100001
0CED0 67 61                         .db #$67, #%01100001
0CED2 A7 41                         .db #$A7, #%01000001
0CED4 38 7A                         .db #$38, #%01111010
0CED6 98 5A                         .db #$98, #%01011010
0CED8 18 27                         .db #$18, #%00100111
0CEDA 48 27                         .db #$48, #%00100111
0CEDC 78 27                         .db #$78, #%00100111
0CEDE C8 07                         .db #$C8, #%00000111
0CEE0 FF                            .db #LEVEL_END
0CEE1                           
0CEE1                           lvl_layout_03:
0CEE1 00 7A                         .db #$00, #%01111010
0CEE3 40 7A                         .db #$40, #%01111010
0CEE5 80 7A                         .db #$80, #%01111010
0CEE7 C0 1A                         .db #$C0, #%00011010
0CEE9 10 A1                         .db #$10, #%10100001
0CEEB 13 E1                         .db #$13, #%11100001
0CEED 17 C1                         .db #$17, #%11000001
0CEEF 30 C1                         .db #$30, #%11000001
0CEF1 34 C1                         .db #$34, #%11000001
0CEF3 38 A1                         .db #$38, #%10100001
0CEF5 50 E1                         .db #$50, #%11100001
0CEF7 55 81                         .db #$55, #%10000001
0CEF9 57 C1                         .db #$57, #%11000001
0CEFB 70 C1                         .db #$70, #%11000001
0CEFD 73 A1                         .db #$73, #%10100001
0CEFF 76 E1                         .db #$76, #%11100001
0CF01 90 E1                         .db #$90, #%11100001
0CF03 95 81                         .db #$95, #%10000001
0CF05 97 C1                         .db #$97, #%11000001
0CF07 B0 C1                         .db #$B0, #%11000001
0CF09 B4 C1                         .db #$B4, #%11000001
0CF0B B8 A1                         .db #$B8, #%10100001
0CF0D D0 A1                         .db #$D0, #%10100001
0CF0F D3 E1                         .db #$D3, #%11100001
0CF11 D7 C1                         .db #$D7, #%11000001
0CF13 FF                            .db #LEVEL_END
0CF14                           
0CF14                           lvl_layout_04:
0CF14 00 4C                         .db #$00, #%01001100
0CF16 40 6C                         .db #$40, #%01101100
0CF18 80 4C                         .db #$80, #%01001100
0CF1A 81 AC                         .db #$81, #%10101100
0CF1C C1 2C                         .db #$C1, #%00101100
0CF1E 02 6C                         .db #$02, #%01101100
0CF20 42 CC                         .db #$42, #%11001100
0CF22 62 EC                         .db #$62, #%11101100
0CF24 A2 CC                         .db #$A2, #%11001100
0CF26 C3 CC                         .db #$C3, #%11001100
0CF28 04 4C                         .db #$04, #%01001100
0CF2A 84 2C                         .db #$84, #%00101100
0CF2C 25 AC                         .db #$25, #%10101100
0CF2E 85 AC                         .db #$85, #%10101100
0CF30 06 AC                         .db #$06, #%10101100
0CF32 36 CC                         .db #$36, #%11001100
0CF34 56 CC                         .db #$56, #%11001100
0CF36 66 EC                         .db #$66, #%11101100
0CF38 96 6C                         .db #$96, #%01101100
0CF3A C7 AC                         .db #$C7, #%10101100
0CF3C 08 2C                         .db #$08, #%00101100
0CF3E 78 6C                         .db #$78, #%01101100
0CF40 D8 0C                         .db #$D8, #%00001100
0CF42 30 A1                         .db #$30, #%10100001
0CF44 B0 21                         .db #$B0, #%00100001
0CF46 01 41                         .db #$01, #%01000001
0CF48 41 61                         .db #$41, #%01100001
0CF4A 91 A1                         .db #$91, #%10100001
0CF4C A1 21                         .db #$A1, #%00100001
0CF4E 52 C1                         .db #$52, #%11000001
0CF50 72 E1                         .db #$72, #%11100001
0CF52 B2 C1                         .db #$B2, #%11000001
0CF54 C2 21                         .db #$C2, #%00100001
0CF56 03 41                         .db #$03, #%01000001
0CF58 33 C1                         .db #$33, #%11000001
0CF5A 83 21                         .db #$83, #%00100001
0CF5C D3 E1                         .db #$D3, #%11100001
0CF5E 05 21                         .db #$05, #%00100001
0CF60 45 E1                         .db #$45, #%11100001
0CF62 A5 21                         .db #$A5, #%00100001
0CF64 16 A1                         .db #$16, #%10100001
0CF66 76 A1                         .db #$76, #%10100001
0CF68 27 A1                         .db #$27, #%10100001
0CF6A 57 21                         .db #$57, #%00100001
0CF6C 87 41                         .db #$87, #%01000001
0CF6E B7 A1                         .db #$B7, #%10100001
0CF70 19 21                         .db #$19, #%00100001
0CF72 39 41                         .db #$39, #%01000001
0CF74 89 41                         .db #$89, #%01000001
0CF76 C9 21                         .db #$C9, #%00100001
0CF78 D0 1A                         .db #$D0, #%00011010
0CF7A 55 1A                         .db #$55, #%00011010
0CF7C 95 1A                         .db #$95, #%00011010
0CF7E D7 1A                         .db #$D7, #%00011010
0CF80 09 1A                         .db #$09, #%00011010
0CF82 79 1A                         .db #$79, #%00011010
0CF84 FF                            .db #LEVEL_END
0CF85                           
0CF85                           lvl_layout_05:
0CF85 40 0A                         .db #$40, #%00001010
0CF87 70 1A                         .db #$70, #%00011010
0CF89 B0 42                         .db #$B0, #%01000010
0CF8B 41 A7                         .db #$41, #%10100111
0CF8D B1 22                         .db #$B1, #%00100010
0CF8F D1 15                         .db #$D1, #%00010101
0CF91 22 0A                         .db #$22, #%00001010
0CF93 52 05                         .db #$52, #%00000101
0CF95 B2 42                         .db #$B2, #%01000010
0CF97 03 27                         .db #$03, #%00100111
0CF99 33 67                         .db #$33, #%01100111
0CF9B 73 67                         .db #$73, #%01100111
0CF9D B3 47                         .db #$B3, #%01000111
0CF9F 05 E5                         .db #$05, #%11100101
0CFA1 25 A5                         .db #$25, #%10100101
0CFA3 35 25                         .db #$35, #%00100101
0CFA5 65 45                         .db #$65, #%01000101
0CFA7 A5 45                         .db #$A5, #%01000101
0CFA9 46 E5                         .db #$46, #%11100101
0CFAB 66 E5                         .db #$66, #%11100101
0CFAD 86 E5                         .db #$86, #%11100101
0CFAF A6 E2                         .db #$A6, #%11100010
0CFB1 C6 E5                         .db #$C6, #%11100101
0CFB3 27 25                         .db #$27, #%00100101
0CFB5 77 05                         .db #$77, #%00000101
0CFB7 B7 02                         .db #$B7, #%00000010
0CFB9 09 05                         .db #$09, #%00000101
0CFBB 79 05                         .db #$79, #%00000101
0CFBD B9 02                         .db #$B9, #%00000010
0CFBF FF                            .db #LEVEL_END
0CFC0                           
0CFC0                           lvl_layout_06:
0CFC0 00 03                         .db #$00, #%00000011
0CFC2 20 03                         .db #$20, #%00000011
0CFC4 40 03                         .db #$40, #%00000011
0CFC6 A0 03                         .db #$A0, #%00000011
0CFC8 C0 03                         .db #$C0, #%00000011
0CFCA 11 03                         .db #$11, #%00000011
0CFCC 31 03                         .db #$31, #%00000011
0CFCE 51 03                         .db #$51, #%00000011
0CFD0 91 03                         .db #$91, #%00000011
0CFD2 B1 03                         .db #$B1, #%00000011
0CFD4 D1 03                         .db #$D1, #%00000011
0CFD6 02 03                         .db #$02, #%00000011
0CFD8 22 03                         .db #$22, #%00000011
0CFDA 42 03                         .db #$42, #%00000011
0CFDC A2 03                         .db #$A2, #%00000011
0CFDE C2 03                         .db #$C2, #%00000011
0CFE0 13 03                         .db #$13, #%00000011
0CFE2 33 03                         .db #$33, #%00000011
0CFE4 53 03                         .db #$53, #%00000011
0CFE6 93 03                         .db #$93, #%00000011
0CFE8 B3 03                         .db #$B3, #%00000011
0CFEA D3 03                         .db #$D3, #%00000011
0CFEC 04 03                         .db #$04, #%00000011
0CFEE 24 03                         .db #$24, #%00000011
0CFF0 44 03                         .db #$44, #%00000011
0CFF2 A4 03                         .db #$A4, #%00000011
0CFF4 C4 03                         .db #$C4, #%00000011
0CFF6 15 03                         .db #$15, #%00000011
0CFF8 35 03                         .db #$35, #%00000011
0CFFA 55 03                         .db #$55, #%00000011
0CFFC 95 03                         .db #$95, #%00000011
0CFFE B5 03                         .db #$B5, #%00000011
0D000 D5 03                         .db #$D5, #%00000011
0D002 06 03                         .db #$06, #%00000011
0D004 26 03                         .db #$26, #%00000011
0D006 46 03                         .db #$46, #%00000011
0D008 A6 03                         .db #$A6, #%00000011
0D00A C6 03                         .db #$C6, #%00000011
0D00C 17 03                         .db #$17, #%00000011
0D00E 37 03                         .db #$37, #%00000011
0D010 57 03                         .db #$57, #%00000011
0D012 97 03                         .db #$97, #%00000011
0D014 B7 03                         .db #$B7, #%00000011
0D016 D7 03                         .db #$D7, #%00000011
0D018 08 03                         .db #$08, #%00000011
0D01A 28 03                         .db #$28, #%00000011
0D01C 48 03                         .db #$48, #%00000011
0D01E A8 03                         .db #$A8, #%00000011
0D020 C8 03                         .db #$C8, #%00000011
0D022 19 03                         .db #$19, #%00000011
0D024 39 03                         .db #$39, #%00000011
0D026 59 03                         .db #$59, #%00000011
0D028 99 03                         .db #$99, #%00000011
0D02A B9 03                         .db #$B9, #%00000011
0D02C D9 03                         .db #$D9, #%00000011
0D02E 60 4B                         .db #$60, #%01001011
0D030 71 CB                         .db #$71, #%11001011
0D032 62 4B                         .db #$62, #%01001011
0D034 64 4B                         .db #$64, #%01001011
0D036 75 CB                         .db #$75, #%11001011
0D038 66 4B                         .db #$66, #%01001011
0D03A 68 4B                         .db #$68, #%01001011
0D03C 79 0B                         .db #$79, #%00001011
0D03E 70 03                         .db #$70, #%00000011
0D040 72 03                         .db #$72, #%00000011
0D042 74 03                         .db #$74, #%00000011
0D044 76 03                         .db #$76, #%00000011
0D046 78 03                         .db #$78, #%00000011
0D048 FF                            .db #LEVEL_END
0D049                           
0D049                           lvl_layout_07:
0D049 00 11                         .db #$00, #%00010001
0D04B 01 FA                         .db #$01, #%11111010
0D04D 12 BA                         .db #$12, #%10111010
0D04F 23 DA                         .db #$23, #%11011010
0D051 34 FA                         .db #$34, #%11111010
0D053 05 DA                         .db #$05, #%11011010
0D055 15 FA                         .db #$15, #%11111010
0D057 45 BA                         .db #$45, #%10111010
0D059 56 DA                         .db #$56, #%11011010
0D05B 27 BA                         .db #$27, #%10111010
0D05D 67 DA                         .db #$67, #%11011010
0D05F 38 3A                         .db #$38, #%00111010
0D061 78 BA                         .db #$78, #%10111010
0D063 09 3A                         .db #$09, #%00111010
0D065 39 3A                         .db #$39, #%00111010
0D067 89 1A                         .db #$89, #%00011010
0D069 B0 01                         .db #$B0, #%00000001
0D06B D0 01                         .db #$D0, #%00000001
0D06D A1 01                         .db #$A1, #%00000001
0D06F C1 11                         .db #$C1, #%00010001
0D071 B2 01                         .db #$B2, #%00000001
0D073 D2 01                         .db #$D2, #%00000001
0D075 A3 01                         .db #$A3, #%00000001
0D077 C3 01                         .db #$C3, #%00000001
0D079 B4 01                         .db #$B4, #%00000001
0D07B D4 01                         .db #$D4, #%00000001
0D07D A5 01                         .db #$A5, #%00000001
0D07F C5 01                         .db #$C5, #%00000001
0D081 B6 01                         .db #$B6, #%00000001
0D083 D6 01                         .db #$D6, #%00000001
0D085 A7 01                         .db #$A7, #%00000001
0D087 C7 01                         .db #$C7, #%00000001
0D089 FF                            .db #LEVEL_END
0D08A                           
0D08A                           lvl_layout_08:
0D08A 40 B5                         .db #$40, #%10110101
0D08C 31 0D                         .db #$31, #%00001101
0D08E 61 10                         .db #$61, #%00010000
0D090 42 C7                         .db #$42, #%11000111
0D092 52 67                         .db #$52, #%01100111
0D094 63 C7                         .db #$63, #%11000111
0D096 83 E7                         .db #$83, #%11100111
0D098 05 07                         .db #$05, #%00000111
0D09A 15 3A                         .db #$15, #%00111010
0D09C 07 63                         .db #$07, #%01100011
0D09E 27 13                         .db #$27, #%00010011
0D0A0 38 A5                         .db #$38, #%10100101
0D0A2 09 14                         .db #$09, #%00010100
0D0A4 19 05                         .db #$19, #%00000101
0D0A6 D0 E0                         .db #$D0, #%11100000
0D0A8 C2 A0                         .db #$C2, #%10100000
0D0AA B3 E0                         .db #$B3, #%11100000
0D0AC D5 E0                         .db #$D5, #%11100000
0D0AE C6 E0                         .db #$C6, #%11100000
0D0B0 B0 C4                         .db #$B0, #%11000100
0D0B2 C0 A4                         .db #$C0, #%10100100
0D0B4 D1 A4                         .db #$D1, #%10100100
0D0B6 C4 24                         .db #$C4, #%00100100
0D0B8 C5 04                         .db #$C5, #%00000100
0D0BA B7 44                         .db #$B7, #%01000100
0D0BC B8 A4                         .db #$B8, #%10100100
0D0BE D9 05                         .db #$D9, #%00000101
0D0C0 FF                            .db #LEVEL_END
0D0C1                           
0D0C1                           lvl_layout_09:
0D0C1 81 04                         .db #$81, #%00000100
0D0C3 D1 04                         .db #$D1, #%00000100
0D0C5 32 C4                         .db #$32, #%11000100
0D0C7 A2 C4                         .db #$A2, #%11000100
0D0C9 C2 24                         .db #$C2, #%00100100
0D0CB 13 24                         .db #$13, #%00100100
0D0CD 53 04                         .db #$53, #%00000100
0D0CF C3 27                         .db #$C3, #%00100111
0D0D1 15 6C                         .db #$15, #%01101100
0D0D3 55 6C                         .db #$55, #%01101100
0D0D5 95 6C                         .db #$95, #%01101100
0D0D7 D5 0C                         .db #$D5, #%00001100
0D0D9 27 C7                         .db #$27, #%11000111
0D0DB 47 C7                         .db #$47, #%11000111
0D0DD 67 C7                         .db #$67, #%11000111
0D0DF 87 C7                         .db #$87, #%11000111
0D0E1 A7 C7                         .db #$A7, #%11000111
0D0E3 C7 C7                         .db #$C7, #%11000111
0D0E5 08 13                         .db #$08, #%00010011
0D0E7 28 15                         .db #$28, #%00010101
0D0E9 48 12                         .db #$48, #%00010010
0D0EB 68 15                         .db #$68, #%00010101
0D0ED 88 11                         .db #$88, #%00010001
0D0EF A8 10                         .db #$A8, #%00010000
0D0F1 C8 14                         .db #$C8, #%00010100
0D0F3 09 07                         .db #$09, #%00000111
0D0F5 19 03                         .db #$19, #%00000011
0D0F7 39 05                         .db #$39, #%00000101
0D0F9 59 02                         .db #$59, #%00000010
0D0FB 79 05                         .db #$79, #%00000101
0D0FD 99 01                         .db #$99, #%00000001
0D0FF B9 00                         .db #$B9, #%00000000
0D101 D9 04                         .db #$D9, #%00000100
0D103 FF                            .db #LEVEL_END
0D104                           
0D104                           lvl_layout_10:
0D104 00 02                         .db #$00, #%00000010
0D106 10 C9                         .db #$10, #%11001001
0D108 50 C9                         .db #$50, #%11001001
0D10A 90 C9                         .db #$90, #%11001001
0D10C D0 C9                         .db #$D0, #%11001001
0D10E 31 C9                         .db #$31, #%11001001
0D110 71 C9                         .db #$71, #%11001001
0D112 B1 C9                         .db #$B1, #%11001001
0D114 13 C9                         .db #$13, #%11001001
0D116 53 C9                         .db #$53, #%11001001
0D118 93 C9                         .db #$93, #%11001001
0D11A D3 C9                         .db #$D3, #%11001001
0D11C 34 C9                         .db #$34, #%11001001
0D11E 74 C9                         .db #$74, #%11001001
0D120 B4 C9                         .db #$B4, #%11001001
0D122 16 C9                         .db #$16, #%11001001
0D124 56 C9                         .db #$56, #%11001001
0D126 96 C9                         .db #$96, #%11001001
0D128 D6 C9                         .db #$D6, #%11001001
0D12A 37 C9                         .db #$37, #%11001001
0D12C 77 C9                         .db #$77, #%11001001
0D12E B7 C9                         .db #$B7, #%11001001
0D130 D8 12                         .db #$D8, #%00010010
0D132 FF                            .db #LEVEL_END
0D133                           
0D133                           lvl_layout_11:
0D133 00 65                         .db #$00, #%01100101
0D135 40 45                         .db #$40, #%01000101
0D137 50 A7                         .db #$50, #%10100111
0D139 80 05                         .db #$80, #%00000101
0D13B 90 A7                         .db #$90, #%10100111
0D13D A0 65                         .db #$A0, #%01100101
0D13F 01 43                         .db #$01, #%01000011
0D141 31 23                         .db #$31, #%00100011
0D143 61 A7                         .db #$61, #%10100111
0D145 81 A7                         .db #$81, #%10100111
0D147 A1 63                         .db #$A1, #%01100011
0D149 02 44                         .db #$02, #%01000100
0D14B 32 44                         .db #$32, #%01000100
0D14D 92 04                         .db #$92, #%00000100
0D14F A2 64                         .db #$A2, #%01100100
0D151 03 40                         .db #$03, #%01000000
0D153 33 40                         .db #$33, #%01000000
0D155 63 A1                         .db #$63, #%10100001
0D157 83 A2                         .db #$83, #%10100010
0D159 93 00                         .db #$93, #%00000000
0D15B A3 60                         .db #$A3, #%01100000
0D15D 04 41                         .db #$04, #%01000001
0D15F 34 41                         .db #$34, #%01000001
0D161 94 02                         .db #$94, #%00000010
0D163 A4 62                         .db #$A4, #%01100010
0D165 05 47                         .db #$05, #%01000111
0D167 35 67                         .db #$35, #%01100111
0D169 75 0A                         .db #$75, #%00001010
0D16B 85 47                         .db #$85, #%01000111
0D16D B5 47                         .db #$B5, #%01000111
0D16F 06 E7                         .db #$06, #%11100111
0D171 16 5A                         .db #$16, #%01011010
0D173 26 11                         .db #$26, #%00010001
0D175 46 13                         .db #$46, #%00010011
0D177 56 1A                         .db #$56, #%00011010
0D179 66 14                         .db #$66, #%00010100
0D17B 86 10                         .db #$86, #%00010000
0D17D 96 5A                         .db #$96, #%01011010
0D17F A6 12                         .db #$A6, #%00010010
0D181 C6 15                         .db #$C6, #%00010101
0D183 D6 E7                         .db #$D6, #%11100111
0D185 FF                            .db #LEVEL_END
0D186                           
0D186                           lvl_layout_12:
0D186 00 00                         .db #$00, #%00000000
0D188 50 C0                         .db #$50, #%11000000
0D18A 80 00                         .db #$80, #%00000000
0D18C 61 00                         .db #$61, #%00000000
0D18E 22 C0                         .db #$22, #%11000000
0D190 82 E0                         .db #$82, #%11100000
0D192 C2 E0                         .db #$C2, #%11100000
0D194 A3 20                         .db #$A3, #%00100000
0D196 C3 10                         .db #$C3, #%00010000
0D198 04 00                         .db #$04, #%00000000
0D19A 54 20                         .db #$54, #%00100000
0D19C 15 0A                         .db #$15, #%00001010
0D19E 25 C0                         .db #$25, #%11000000
0D1A0 55 E0                         .db #$55, #%11100000
0D1A2 86 20                         .db #$86, #%00100000
0D1A4 C6 E0                         .db #$C6, #%11100000
0D1A6 C7 A0                         .db #$C7, #%10100000
0D1A8 88 00                         .db #$88, #%00000000
0D1AA 59 00                         .db #$59, #%00000000
0D1AC 89 20                         .db #$89, #%00100000
0D1AE D9 1A                         .db #$D9, #%00011010
0D1B0 FF                            .db #LEVEL_END
0D1B1                           
0D1B1                           lvl_layout_13:
0D1B1 10 E0                         .db #$10, #%11100000
0D1B3 20 E0                         .db #$20, #%11100000
0D1B5 30 E0                         .db #$30, #%11100000
0D1B7 40 40                         .db #$40, #%01000000
0D1B9 80 60                         .db #$80, #%01100000
0D1BB C0 E0                         .db #$C0, #%11100000
0D1BD D0 E0                         .db #$D0, #%11100000
0D1BF 41 40                         .db #$41, #%01000000
0D1C1 71 60                         .db #$71, #%01100000
0D1C3 52 60                         .db #$52, #%01100000
0D1C5 A2 20                         .db #$A2, #%00100000
0D1C7 43 60                         .db #$43, #%01100000
0D1C9 83 60                         .db #$83, #%01100000
0D1CB 14 74                         .db #$14, #%01110100
0D1CD 54 74                         .db #$54, #%01110100
0D1CF 94 74                         .db #$94, #%01110100
0D1D1 D4 14                         .db #$D4, #%00010100
0D1D3 15 0D                         .db #$15, #%00001101
0D1D5 55 0D                         .db #$55, #%00001101
0D1D7 95 0D                         .db #$95, #%00001101
0D1D9 D5 0D                         .db #$D5, #%00001101
0D1DB 26 0D                         .db #$26, #%00001101
0D1DD 46 0D                         .db #$46, #%00001101
0D1DF 66 0D                         .db #$66, #%00001101
0D1E1 86 0D                         .db #$86, #%00001101
0D1E3 A6 0D                         .db #$A6, #%00001101
0D1E5 C6 0D                         .db #$C6, #%00001101
0D1E7 07 10                         .db #$07, #%00010000
0D1E9 37 0D                         .db #$37, #%00001101
0D1EB 77 0D                         .db #$77, #%00001101
0D1ED B7 0D                         .db #$B7, #%00001101
0D1EF 28 0D                         .db #$28, #%00001101
0D1F1 48 0D                         .db #$48, #%00001101
0D1F3 68 0D                         .db #$68, #%00001101
0D1F5 88 0D                         .db #$88, #%00001101
0D1F7 A8 0D                         .db #$A8, #%00001101
0D1F9 C8 0D                         .db #$C8, #%00001101
0D1FB 19 0D                         .db #$19, #%00001101
0D1FD 59 0D                         .db #$59, #%00001101
0D1FF 99 0D                         .db #$99, #%00001101
0D201 D9 0D                         .db #$D9, #%00001101
0D203 FF                            .db #LEVEL_END
0D204                           
0D204                           lvl_layout_14:
0D204 00 67                         .db #$00, #%01100111
0D206 40 67                         .db #$40, #%01100111
0D208 80 67                         .db #$80, #%01100111
0D20A C0 27                         .db #$C0, #%00100111
0D20C 01 27                         .db #$01, #%00100111
0D20E 31 C7                         .db #$31, #%11000111
0D210 51 C7                         .db #$51, #%11000111
0D212 71 C7                         .db #$71, #%11000111
0D214 91 C7                         .db #$91, #%11000111
0D216 B1 C7                         .db #$B1, #%11000111
0D218 D1 07                         .db #$D1, #%00000111
0D21A 02 E7                         .db #$02, #%11100111
0D21C 06 E7                         .db #$06, #%11100111
0D21E 13 07                         .db #$13, #%00000111
0D220 D3 07                         .db #$D3, #%00000111
0D222 15 07                         .db #$15, #%00000111
0D224 35 07                         .db #$35, #%00000111
0D226 55 07                         .db #$55, #%00000111
0D228 75 07                         .db #$75, #%00000111
0D22A 95 07                         .db #$95, #%00000111
0D22C B5 07                         .db #$B5, #%00000111
0D22E D5 07                         .db #$D5, #%00000111
0D230 17 07                         .db #$17, #%00000111
0D232 37 C7                         .db #$37, #%11000111
0D234 57 C7                         .db #$57, #%11000111
0D236 77 C7                         .db #$77, #%11000111
0D238 97 C7                         .db #$97, #%11000111
0D23A B7 C7                         .db #$B7, #%11000111
0D23C D7 07                         .db #$D7, #%00000111
0D23E 19 07                         .db #$19, #%00000111
0D240 D9 07                         .db #$D9, #%00000111
0D242 22 4C                         .db #$22, #%01001100
0D244 62 4C                         .db #$62, #%01001100
0D246 A2 4C                         .db #$A2, #%01001100
0D248 24 0C                         .db #$24, #%00001100
0D24A 44 0C                         .db #$44, #%00001100
0D24C 64 0C                         .db #$64, #%00001100
0D24E 84 0C                         .db #$84, #%00001100
0D250 A4 0C                         .db #$A4, #%00001100
0D252 C4 0C                         .db #$C4, #%00001100
0D254 26 0C                         .db #$26, #%00001100
0D256 46 0C                         .db #$46, #%00001100
0D258 66 0C                         .db #$66, #%00001100
0D25A 86 0C                         .db #$86, #%00001100
0D25C A6 0C                         .db #$A6, #%00001100
0D25E C6 0C                         .db #$C6, #%00001100
0D260 28 4C                         .db #$28, #%01001100
0D262 68 4C                         .db #$68, #%01001100
0D264 A8 4C                         .db #$A8, #%01001100
0D266 32 04                         .db #$32, #%00000100
0D268 52 04                         .db #$52, #%00000100
0D26A 72 04                         .db #$72, #%00000100
0D26C 92 04                         .db #$92, #%00000100
0D26E B2 04                         .db #$B2, #%00000100
0D270 38 04                         .db #$38, #%00000100
0D272 58 04                         .db #$58, #%00000100
0D274 78 04                         .db #$78, #%00000100
0D276 98 04                         .db #$98, #%00000100
0D278 B8 04                         .db #$B8, #%00000100
0D27A FF                            .db #LEVEL_END
0D27B                           
0D27B                           lvl_layout_15:
0D27B 00 7A                         .db #$00, #%01111010
0D27D 40 7A                         .db #$40, #%01111010
0D27F 80 7A                         .db #$80, #%01111010
0D281 C0 3A                         .db #$C0, #%00111010
0D283 41 04                         .db #$41, #%00000100
0D285 61 04                         .db #$61, #%00000100
0D287 81 04                         .db #$81, #%00000100
0D289 A1 04                         .db #$A1, #%00000100
0D28B 05 E4                         .db #$05, #%11100100
0D28D 15 64                         .db #$15, #%01100100
0D28F 55 64                         .db #$55, #%01100100
0D291 95 64                         .db #$95, #%01100100
0D293 D5 E4                         .db #$D5, #%11100100
0D295 26 04                         .db #$26, #%00000100
0D297 46 44                         .db #$46, #%01000100
0D299 76 64                         .db #$76, #%01100100
0D29B C6 04                         .db #$C6, #%00000100
0D29D 17 04                         .db #$17, #%00000100
0D29F 37 64                         .db #$37, #%01100100
0D2A1 77 44                         .db #$77, #%01000100
0D2A3 B7 04                         .db #$B7, #%00000100
0D2A5 18 64                         .db #$18, #%01100100
0D2A7 58 64                         .db #$58, #%01100100
0D2A9 98 64                         .db #$98, #%01100100
0D2AB FF                            .db #LEVEL_END
0D2AC                           
0D2AC                           lvl_layout_16:
0D2AC 10 E1                         .db #$10, #%11100001
0D2AE 20 9A                         .db #$20, #%10011010
0D2B0 30 E1                         .db #$30, #%11100001
0D2B2 40 E1                         .db #$40, #%11100001
0D2B4 50 E1                         .db #$50, #%11100001
0D2B6 60 C1                         .db #$60, #%11000001
0D2B8 70 E1                         .db #$70, #%11100001
0D2BA 80 E1                         .db #$80, #%11100001
0D2BC 90 E1                         .db #$90, #%11100001
0D2BE A0 61                         .db #$A0, #%01100001
0D2C0 21 C1                         .db #$21, #%11000001
0D2C2 A1 1A                         .db #$A1, #%00011010
0D2C4 B1 41                         .db #$B1, #%01000001
0D2C6 A2 E1                         .db #$A2, #%11100001
0D2C8 B2 E1                         .db #$B2, #%11100001
0D2CA C2 1A                         .db #$C2, #%00011010
0D2CC D2 E1                         .db #$D2, #%11100001
0D2CE 63 1A                         .db #$63, #%00011010
0D2D0 C3 C1                         .db #$C3, #%11000001
0D2D2 14 61                         .db #$14, #%01100001
0D2D4 54 61                         .db #$54, #%01100001
0D2D6 94 C1                         .db #$94, #%11000001
0D2D8 15 61                         .db #$15, #%01100001
0D2DA 55 41                         .db #$55, #%01000001
0D2DC 85 1A                         .db #$85, #%00011010
0D2DE 16 41                         .db #$16, #%01000001
0D2E0 46 1A                         .db #$46, #%00011010
0D2E2 56 61                         .db #$56, #%01100001
0D2E4 A6 61                         .db #$A6, #%01100001
0D2E6 17 67                         .db #$17, #%01100111
0D2E8 57 67                         .db #$57, #%01100111
0D2EA 97 67                         .db #$97, #%01100111
0D2EC D7 07                         .db #$D7, #%00000111
0D2EE 28 41                         .db #$28, #%01000001
0D2F0 58 61                         .db #$58, #%01100001
0D2F2 A8 41                         .db #$A8, #%01000001
0D2F4 18 11                         .db #$18, #%00010001
0D2F6 38 11                         .db #$38, #%00010001
0D2F8 98 11                         .db #$98, #%00010001
0D2FA B8 11                         .db #$B8, #%00010001
0D2FC D8 11                         .db #$D8, #%00010001
0D2FE 59 09                         .db #$59, #%00001001
0D300 FF                            .db #LEVEL_END
0D301                           
0D301                           lvl_layout_17:
0D301 10 EA                         .db #$10, #%11101010
0D303 20 E2                         .db #$20, #%11100010
0D305 30 62                         .db #$30, #%01100010
0D307 70 02                         .db #$70, #%00000010
0D309 80 6A                         .db #$80, #%01101010
0D30B 90 22                         .db #$90, #%00100010
0D30D 01 AA                         .db #$01, #%10101010
0D30F 31 6A                         .db #$31, #%01101010
0D311 81 2A                         .db #$81, #%00101010
0D313 A1 02                         .db #$A1, #%00000010
0D315 C1 02                         .db #$C1, #%00000010
0D317 D1 0A                         .db #$D1, #%00001010
0D319 32 EA                         .db #$32, #%11101010
0D31B 42 6A                         .db #$42, #%01101010
0D31D 62 02                         .db #$62, #%00000010
0D31F 92 6A                         .db #$92, #%01101010
0D321 D2 E2                         .db #$D2, #%11100010
0D323 43 1A                         .db #$43, #%00011010
0D325 53 CA                         .db #$53, #%11001010
0D327 73 02                         .db #$73, #%00000010
0D329 83 4A                         .db #$83, #%01001010
0D32B B3 CA                         .db #$B3, #%11001010
0D32D C3 EA                         .db #$C3, #%11101010
0D32F 04 0A                         .db #$04, #%00001010
0D331 14 A2                         .db #$14, #%10100010
0D333 24 AA                         .db #$24, #%10101010
0D335 44 AA                         .db #$44, #%10101010
0D337 64 6A                         .db #$64, #%01101010
0D339 65 6A                         .db #$65, #%01101010
0D33B A5 AA                         .db #$A5, #%10101010
0D33D 06 EA                         .db #$06, #%11101010
0D33F 16 62                         .db #$16, #%01100010
0D341 66 22                         .db #$66, #%00100010
0D343 86 2A                         .db #$86, #%00101010
0D345 17 42                         .db #$17, #%01000010
0D347 47 12                         .db #$47, #%00010010
0D349 57 6A                         .db #$57, #%01101010
0D34B 97 4A                         .db #$97, #%01001010
0D34D A7 02                         .db #$A7, #%00000010
0D34F 18 02                         .db #$18, #%00000010
0D351 28 0A                         .db #$28, #%00001010
0D353 38 22                         .db #$38, #%00100010
0D355 68 2A                         .db #$68, #%00101010
0D357 88 62                         .db #$88, #%01100010
0D359 C8 0A                         .db #$C8, #%00001010
0D35B D8 02                         .db #$D8, #%00000010
0D35D 19 2A                         .db #$19, #%00101010
0D35F 39 2A                         .db #$39, #%00101010
0D361 69 42                         .db #$69, #%01000010
0D363 99 2A                         .db #$99, #%00101010
0D365 B9 42                         .db #$B9, #%01000010
0D367 FF                            .db #LEVEL_END
0D368                           
0D368                           lvl_layout_18:
0D368 00 12                         .db #$00, #%00010010
0D36A 40 1A                         .db #$40, #%00011010
0D36C 50 11                         .db #$50, #%00010001
0D36E 70 1A                         .db #$70, #%00011010
0D370 80 10                         .db #$80, #%00010000
0D372 D0 13                         .db #$D0, #%00010011
0D374 01 1A                         .db #$01, #%00011010
0D376 22 15                         .db #$22, #%00010101
0D378 A2 1A                         .db #$A2, #%00011010
0D37A B2 14                         .db #$B2, #%00010100
0D37C 03 67                         .db #$03, #%01100111
0D37E 43 67                         .db #$43, #%01100111
0D380 83 67                         .db #$83, #%01100111
0D382 24 09                         .db #$24, #%00001001
0D384 74 0D                         .db #$74, #%00001101
0D386 C4 0A                         .db #$C4, #%00001010
0D388 05 A7                         .db #$05, #%10100111
0D38A 45 27                         .db #$45, #%00100111
0D38C 95 27                         .db #$95, #%00100111
0D38E 16 C7                         .db #$16, #%11000111
0D390 36 67                         .db #$36, #%01100111
0D392 86 67                         .db #$86, #%01100111
0D394 D6 07                         .db #$D6, #%00000111
0D396 07 A3                         .db #$07, #%10100011
0D398 27 23                         .db #$27, #%00100011
0D39A 47 C7                         .db #$47, #%11000111
0D39C 57 A0                         .db #$57, #%10100000
0D39E 67 A7                         .db #$67, #%10100111
0D3A0 77 20                         .db #$77, #%00100000
0D3A2 97 C7                         .db #$97, #%11000111
0D3A4 A7 A4                         .db #$A7, #%10100100
0D3A6 B7 A7                         .db #$B7, #%10100111
0D3A8 C7 24                         .db #$C7, #%00100100
0D3AA 28 0B                         .db #$28, #%00001011
0D3AC 38 A3                         .db #$38, #%10100011
0D3AE 78 08                         .db #$78, #%00001000
0D3B0 88 A3                         .db #$88, #%10100011
0D3B2 C8 0C                         .db #$C8, #%00001100
0D3B4 D8 A4                         .db #$D8, #%10100100
0D3B6 09 43                         .db #$09, #%01000011
0D3B8 59 40                         .db #$59, #%01000000
0D3BA A9 44                         .db #$A9, #%01000100
0D3BC FF                            .db #LEVEL_END
0D3BD                           
0D3BD                           lvl_layout_19:
0D3BD 11 A8                         .db #$11, #%10101000
0D3BF 21 68                         .db #$21, #%01101000
0D3C1 81 28                         .db #$81, #%00101000
0D3C3 B1 48                         .db #$B1, #%01001000
0D3C5 22 48                         .db #$22, #%01001000
0D3C7 62 68                         .db #$62, #%01101000
0D3C9 B2 28                         .db #$B2, #%00101000
0D3CB 23 28                         .db #$23, #%00101000
0D3CD 83 28                         .db #$83, #%00101000
0D3CF B3 28                         .db #$B3, #%00101000
0D3D1 04 E8                         .db #$04, #%11101000
0D3D3 24 08                         .db #$24, #%00001000
0D3D5 44 08                         .db #$44, #%00001000
0D3D7 64 E8                         .db #$64, #%11101000
0D3D9 84 E8                         .db #$84, #%11101000
0D3DB C4 A8                         .db #$C4, #%10101000
0D3DD D4 E8                         .db #$D4, #%11101000
0D3DF 15 48                         .db #$15, #%01001000
0D3E1 55 C8                         .db #$55, #%11001000
0D3E3 75 C8                         .db #$75, #%11001000
0D3E5 A5 08                         .db #$A5, #%00001000
0D3E7 36 08                         .db #$36, #%00001000
0D3E9 B6 08                         .db #$B6, #%00001000
0D3EB 27 48                         .db #$27, #%01001000
0D3ED 97 28                         .db #$97, #%00101000
0D3EF C7 08                         .db #$C7, #%00001000
0D3F1 09 61                         .db #$09, #%01100001
0D3F3 19 11                         .db #$19, #%00010001
0D3F5 49 61                         .db #$49, #%01100001
0D3F7 89 31                         .db #$89, #%00110001
0D3F9 A9 61                         .db #$A9, #%01100001
0D3FB FF                            .db #LEVEL_END
0D3FC                           
0D3FC                           lvl_layout_20:
0D3FC 00 60                         .db #$00, #%01100000
0D3FE 10 1A                         .db #$10, #%00011010
0D400 40 A7                         .db #$40, #%10100111
0D402 50 20                         .db #$50, #%00100000
0D404 70 1A                         .db #$70, #%00011010
0D406 80 40                         .db #$80, #%01000000
0D408 B0 1A                         .db #$B0, #%00011010
0D40A C0 20                         .db #$C0, #%00100000
0D40C 01 40                         .db #$01, #%01000000
0D40E 31 1A                         .db #$31, #%00011010
0D410 A1 40                         .db #$A1, #%01000000
0D412 D1 1A                         .db #$D1, #%00011010
0D414 43 67                         .db #$43, #%01100111
0D416 83 47                         .db #$83, #%01000111
0D418 44 A7                         .db #$44, #%10100111
0D41A 54 25                         .db #$54, #%00100101
0D41C 94 08                         .db #$94, #%00001000
0D41E A4 A7                         .db #$A4, #%10100111
0D420 55 05                         .db #$55, #%00000101
0D422 65 08                         .db #$65, #%00001000
0D424 06 27                         .db #$06, #%00100111
0D426 36 67                         .db #$36, #%01100111
0D428 76 28                         .db #$76, #%00101000
0D42A A6 27                         .db #$A6, #%00100111
0D42C D6 07                         .db #$D6, #%00000111
0D42E A7 A7                         .db #$A7, #%10100111
0D430 08 60                         .db #$08, #%01100000
0D432 09 60                         .db #$09, #%01100000
0D434 18 A7                         .db #$18, #%10100111
0D436 48 A7                         .db #$48, #%10100111
0D438 58 47                         .db #$58, #%01000111
0D43A 88 27                         .db #$88, #%00100111
0D43C B8 20                         .db #$B8, #%00100000
0D43E D8 1A                         .db #$D8, #%00011010
0D440 59 15                         .db #$59, #%00010101
0D442 69 60                         .db #$69, #%01100000
0D444 A9 60                         .db #$A9, #%01100000
0D446 FF                            .db #LEVEL_END
0D447                           
0D447                           lvl_layout_21:
0D447 00 13                         .db #$00, #%00010011
0D449 10 11                         .db #$10, #%00010001
0D44B 20 67                         .db #$20, #%01100111
0D44D 60 67                         .db #$60, #%01100111
0D44F A0 47                         .db #$A0, #%01000111
0D451 D0 15                         .db #$D0, #%00010101
0D453 32 63                         .db #$32, #%01100011
0D455 72 05                         .db #$72, #%00000101
0D457 82 43                         .db #$82, #%01000011
0D459 B2 43                         .db #$B2, #%01000011
0D45B 33 03                         .db #$33, #%00000011
0D45D 43 2A                         .db #$43, #%00101010
0D45F 63 7A                         .db #$63, #%01111010
0D461 73 2A                         .db #$73, #%00101010
0D463 A3 7A                         .db #$A3, #%01111010
0D465 34 63                         .db #$34, #%01100011
0D467 74 63                         .db #$74, #%01100011
0D469 B4 43                         .db #$B4, #%01000011
0D46B 06 63                         .db #$06, #%01100011
0D46D 46 63                         .db #$46, #%01100011
0D46F 86 63                         .db #$86, #%01100011
0D471 C6 C3                         .db #$C6, #%11000011
0D473 07 7A                         .db #$07, #%01111010
0D475 47 7A                         .db #$47, #%01111010
0D477 67 0A                         .db #$67, #%00001010
0D479 87 7A                         .db #$87, #%01111010
0D47B 08 13                         .db #$08, #%00010011
0D47D 18 43                         .db #$18, #%01000011
0D47F 48 63                         .db #$48, #%01100011
0D481 88 63                         .db #$88, #%01100011
0D483 FF                            .db #LEVEL_END
0D484                           
0D484                           lvl_layout_22:
0D484 00 7A                         .db #$00, #%01111010
0D486 40 7A                         .db #$40, #%01111010
0D488 80 7A                         .db #$80, #%01111010
0D48A C0 3A                         .db #$C0, #%00111010
0D48C 13 67                         .db #$13, #%01100111
0D48E 83 A7                         .db #$83, #%10100111
0D490 B3 07                         .db #$B3, #%00000111
0D492 14 07                         .db #$14, #%00000111
0D494 44 07                         .db #$44, #%00000111
0D496 A4 07                         .db #$A4, #%00000111
0D498 15 A5                         .db #$15, #%10100101
0D49A 45 A5                         .db #$45, #%10100101
0D49C 85 25                         .db #$85, #%00100101
0D49E 86 05                         .db #$86, #%00000101
0D4A0 A6 05                         .db #$A6, #%00000101
0D4A2 17 11                         .db #$17, #%00010001
0D4A4 47 A1                         .db #$47, #%10100001
0D4A6 87 A1                         .db #$87, #%10100001
0D4A8 B7 A1                         .db #$B7, #%10100001
0D4AA 18 41                         .db #$18, #%01000001
0D4AC 68 01                         .db #$68, #%00000001
0D4AE D8 01                         .db #$D8, #%00000001
0D4B0 FF                            .db #LEVEL_END
0D4B1                           
0D4B1                           lvl_layout_23:
0D4B1 00 71                         .db #$00, #%01110001
0D4B3 40 11                         .db #$40, #%00010001
0D4B5 50 43                         .db #$50, #%01000011
0D4B7 80 D1                         .db #$80, #%11010001
0D4B9 90 E3                         .db #$90, #%11100011
0D4BB A0 63                         .db #$A0, #%01100011
0D4BD 01 63                         .db #$01, #%01100011
0D4BF 41 63                         .db #$41, #%01100011
0D4C1 A1 63                         .db #$A1, #%01100011
0D4C3 02 63                         .db #$02, #%01100011
0D4C5 42 63                         .db #$42, #%01100011
0D4C7 62 11                         .db #$62, #%00010001
0D4C9 A2 67                         .db #$A2, #%01100111
0D4CB 04 63                         .db #$04, #%01100011
0D4CD 44 23                         .db #$44, #%00100011
0D4CF 64 D1                         .db #$64, #%11010001
0D4D1 74 E3                         .db #$74, #%11100011
0D4D3 84 F1                         .db #$84, #%11110001
0D4D5 94 E3                         .db #$94, #%11100011
0D4D7 A4 C7                         .db #$A4, #%11000111
0D4D9 B4 23                         .db #$B4, #%00100011
0D4DB 05 63                         .db #$05, #%01100011
0D4DD 45 23                         .db #$45, #%00100011
0D4DF 06 71                         .db #$06, #%01110001
0D4E1 46 11                         .db #$46, #%00010001
0D4E3 56 E3                         .db #$56, #%11100011
0D4E5 D6 07                         .db #$D6, #%00000111
0D4E7 17 D1                         .db #$17, #%11010001
0D4E9 27 43                         .db #$27, #%01000011
0D4EB 67 D1                         .db #$67, #%11010001
0D4ED A7 C7                         .db #$A7, #%11000111
0D4EF C7 A7                         .db #$C7, #%10100111
0D4F1 D7 B3                         .db #$D7, #%10110011
0D4F3 28 43                         .db #$28, #%01000011
0D4F5 78 43                         .db #$78, #%01000011
0D4F7 29 43                         .db #$29, #%01000011
0D4F9 79 43                         .db #$79, #%01000011
0D4FB FF                           .db #LEVEL_END
0D4FC                           
0D4FC                           lvl_layout_24:
0D4FC 02 67                         .db #$02, #%01100111
0D4FE 42 67                         .db #$42, #%01100111
0D500 82 67                         .db #$82, #%01100111
0D502 05 67                         .db #$05, #%01100111
0D504 45 67                         .db #$45, #%01100111
0D506 85 67                         .db #$85, #%01100111
0D508 08 67                         .db #$08, #%01100111
0D50A 48 67                         .db #$48, #%01100111
0D50C 88 67                         .db #$88, #%01100111
0D50E 30 E7                         .db #$30, #%11100111
0D510 70 E7                         .db #$70, #%11100111
0D512 B0 E7                         .db #$B0, #%11100111
0D514 34 E7                         .db #$34, #%11100111
0D516 74 E7                         .db #$74, #%11100111
0D518 B4 E7                         .db #$B4, #%11100111
0D51A 20 13                         .db #$20, #%00010011
0D51C 40 10                         .db #$40, #%00010000
0D51E 80 02                         .db #$80, #%00000010
0D520 41 05                         .db #$41, #%00000101
0D522 B1 09                         .db #$B1, #%00001001
0D524 02 09                         .db #$02, #%00001001
0D526 52 0C                         .db #$52, #%00001100
0D528 13 11                         .db #$13, #%00010001
0D52A 33 04                         .db #$33, #%00000100
0D52C 74 0C                         .db #$74, #%00001100
0D52E B4 08                         .db #$B4, #%00001000
0D530 15 09                         .db #$15, #%00001001
0D532 55 0C                         .db #$55, #%00001100
0D534 95 0C                         .db #$95, #%00001100
0D536 47 03                         .db #$47, #%00000011
0D538 A7 12                         .db #$A7, #%00010010
0D53A 18 15                         .db #$18, #%00010101
0D53C 09 05                         .db #$09, #%00000101
0D53E 19 03                         .db #$19, #%00000011
0D540 FF                            .db #LEVEL_END
0D541                           
0D541                           lvl_layout_25:
0D541 00 12                         .db #$00, #%00010010
0D543 10 63                         .db #$10, #%01100011
0D545 60 63                         .db #$60, #%01100011
0D547 A0 07                         .db #$A0, #%00000111
0D549 01 11                         .db #$01, #%00010001
0D54B A1 02                         .db #$A1, #%00000010
0D54D 02 67                         .db #$02, #%01100111
0D54F 42 07                         .db #$42, #%00000111
0D551 62 67                         .db #$62, #%01100111
0D553 A2 C7                         .db #$A2, #%11000111
0D555 03 61                         .db #$03, #%01100001
0D557 43 01                         .db #$43, #%00000001
0D559 63 61                         .db #$63, #%01100001
0D55B A6 E7                         .db #$A6, #%11100111
0D55D B6 47                         .db #$B6, #%01000111
0D55F C6 01                         .db #$C6, #%00000001
0D561 B7 42                         .db #$B7, #%01000010
0D563 B8 42                         .db #$B8, #%01000010
0D565 C8 0A                         .db #$C8, #%00001010
0D567 09 7A                         .db #$09, #%01111010
0D569 49 7A                         .db #$49, #%01111010
0D56B 89 3A                         .db #$89, #%00111010
0D56D B9 42                         .db #$B9, #%01000010
0D56F FF                            .db #LEVEL_END
0D570                           
0D570                           ;; Level layout address pointers
0D570                           tbl_lvl_layout_hi:
0D570 CE CE CE CF CF                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D575 CF D0 D0 D0 D1                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D57A D1 D1 D1 D2 D2                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D57F D2 D3 D3 D3 D3                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D584 D4 D4 D4 D4 D5                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D589                           
0D589                           tbl_lvl_layout_lo:
0D589 91 AC E1 14 85                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D58E C0 49 8A C1 04                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D593 33 86 B1 04 7B                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D598 AC 01 68 BD FC                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D59D 47 84 B1 FC 41                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D5A2                           
0D5A2                           ;; Ball start position (#$YX)
0D5A2                           tbl_lvl_ball_startpos:
0D5A2 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D5A7 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D5AC 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D5B1 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D5B6 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D5BB                               
0D5BB                           ;; Ball start direction, color and tile score
0D5BB                           ;; #% ccc v tttt
0D5BB                           ;;    ||| | ++++-- tile score
0D5BB                           ;;    ||| +------- vertical direction, up (0) or down
0D5BB                           ;;    +++--------- color (CBRYGM)
0D5BB                           tbl_lvl_ball_init:
0D5BB 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D5C0 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D5C5 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D5CA 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D5CF 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D5D4                           
0D5D4                           
0D5D4                           
0D5D4                           ;; Helper table to multiply values by 16
0D5D4                           tbl_Times16:
0D5D4 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D5DC 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D5E4                               
0D5E4                           
0D5E4                           ;; Helper table to multiply values by 64
0D5E4                           tbl_Times64:
0D5E4 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D5E8                           
0D5E8                           
0D5E8                           ;; Metatile ID to CHR data mapper
0D5E8                           tbl_GametileTopLeft:
0D5E8 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D5F2                           
0D5F2                           tbl_GametileTopRight:
0D5F2 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D5FC                           
0D5FC                           tbl_GametileBottomLeft:
0D5FC 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D606                           
0D606                           tbl_GametileBottomRight:
0D606 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D610                           
0D610                           ;; Metatile ID to RAM byte data mapper
0D610                           tbl_GameTileRamByte:
0D610 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D615                           
0D615                           ;; HUD text data
0D615                           tbl_HudText:
0D615 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D61D 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D624 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D62C 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D631                           
0D631                           ;; NMI handler
0D631                           NMI:
0D631                               .include "interrupt/nmi.asm"
0D631                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D631                           ;;
0D631                           ;; include/nmi.asm
0D631                           ;;
0D631                           ;; Non-maskable interrupt script. This script is being executed
0D631                           ;; when vBlank hits.
0D631                           ;;
0D631                           ;;
0D631                           
0D631                               ;; Preserve accumulator through stack
0D631 48                            PHA
0D632                           
0D632                               ;; Should NMI be skipped?
0D632 A5 13                         LDA skip_nmi
0D634 F0 03                         BEQ +
0D636 4C 6F D7                          JMP +skip_nmi
0D639                               +
0D639                           
0D639                               ;; When in NMI, skip additional NMI requests
0D639 A9 01                         LDA #$01
0D63B 85 13                         STA skip_nmi
0D63D                           
0D63D                               ;; Preserve X, Y, and PC through stack
0D63D 8A                            TXA
0D63E 48                            PHA
0D63F 98                            TYA
0D640 48                            PHA
0D641 08                            PHP
0D642                               
0D642                               ;; Check forced NMI skip
0D642 A5 14                         LDA force_skip_nmi
0D644 F0 03                         BEQ +
0D646 4C 5E D7                          JMP +force_skip_nmi
0D649                               +
0D649                           
0D649                               ;; Update PPU mask
0D649                               ;LDA #$00
0D649                               ;STA PPU_CTRL
0D649 A5 12                         LDA soft_ppu_mask
0D64B 8D 01 20                      STA PPU_MASK
0D64E                               
0D64E                               
0D64E                               ;; Additional PPU updates go here
0D64E                               .include "game/interrupt/nmi.asm"
0D64E                           
0D64E                               ;; Check if ppu_buffer needs updating
0D64E A5 39                         LDA ppu_buffer_update
0D650 D0 03                         BNE +
0D652 4C 94 D6                          JMP +no_ppu_buffer_update
0D655                               +
0D655                           
0D655                               ;; Reset ppu control register and mask
0D655 A2 00                         LDX #$00
0D657 8E 00 20                      STX PPU_CTRL
0D65A 8E 01 20                      STX PPU_MASK
0D65D                           
0D65D                               ;; Set up loop
0D65D                               -
0D65D                                   ;; Reset hi/lo latch
0D65D 2C 02 20                          BIT PPU_STATUS
0D660                           
0D660                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D660 BD 00 03                          LDA ppu_buffer,x
0D663 8D 06 20                          STA PPU_ADDR
0D666 E8                                INX
0D667 BD 00 03                          LDA ppu_buffer,x
0D66A 8D 06 20                          STA PPU_ADDR
0D66D                           
0D66D                                   ;; Write ppu_buffer data to PPU_ADDR
0D66D E8                                INX
0D66E BD 00 03                          LDA ppu_buffer,x
0D671 8D 07 20                          STA PPU_DATA
0D674                           
0D674                                   ;; Check if updating is done (eg. X is at pointer)
0D674 E8                                INX
0D675 E4 3A                             CPX ppu_buffer_pointer
0D677 F0 03                             BEQ +
0D679 4C 5D D6                      JMP -
0D67C                           +
0D67C                           
0D67C                               ;; Reset ppu buffer update and pointer
0D67C A9 00                         LDA #$00
0D67E 85 39                         STA ppu_buffer_update
0D680 85 3A                         STA ppu_buffer_pointer
0D682                               
0D682                               ;; Reset scrolling position
0D682 8D 05 20                      STA PPU_SCROLL
0D685 8D 05 20                      STA PPU_SCROLL
0D688                           
0D688                               ;; Restore ppu control register and mask
0D688 A9 90                         LDA #%10010000
0D68A 8D 00 20                      STA PPU_CTRL
0D68D A5 12                         LDA soft_ppu_mask
0D68F 8D 01 20                      STA PPU_MASK
0D692 A9 00                         LDA #$00
0D694                           
0D694                           ;; Continue other NMI stuff
0D694                           +no_ppu_buffer_update:
0D694                           
0D694                               ;; Reset sprite RAM, draw sprites
0D694 8D 03 20                      STA OAM_ADDR
0D697 A9 02                         LDA #$02
0D699 8D 14 40                      STA OAM_DMA
0D69C                           
0D69C                               ;; Decrease explosion frame counters
0D69C A0 04                         LDY #MAX_ANIMATIONS
0D69E A2 00                         LDX #$00
0D6A0                               -
0D6A0 BD 60 03                          LDA explosion_framecounter,x
0D6A3 F0 03                             BEQ +
0D6A5 DE 60 03                              DEC explosion_framecounter,x
0D6A8                                   +
0D6A8 E8                                INX
0D6A9 88                                DEY
0D6AA F0 03                             BEQ +done        
0D6AC 4C A0 D6                      JMP -
0D6AF                           +done:
0D6AF                           
0D6AF                               ;; Decrease nudge counter
0D6AF A5 3D                         LDA nudge_counter
0D6B1 F0 02                         BEQ +
0D6B3 C6 3D                             DEC nudge_counter
0D6B5                               +
0D6B5                           
0D6B5                               ;; Decrease bonus counter
0D6B5 A5 3E                         LDA bonus_counter
0D6B7 F0 02                         BEQ +
0D6B9 C6 3E                             DEC bonus_counter
0D6BB                               +
0D6BB                           
0D6BB                               ;; Decrease kill counter
0D6BB A5 3F                         LDA kill_counter
0D6BD F0 02                         BEQ +
0D6BF C6 3F                             DEC kill_counter
0D6C1                               +
0D6C1                           
0D6C1                               ;; Play background noise
0D6C1 A5 38                         LDA screen_mode
0D6C3 29 01                         AND #IS_GAME_SCREEN
0D6C5 F0 21                         BEQ +
0D6C7                                   .include "game/include/main/background_sound.asm"
0D6C7                               ;; At random times, set max_noise period to $03-$0A
0D6C7 A5 43                         LDA max_noise
0D6C9 D0 1D                         BNE +
0D6CB 20 5F C4                          JSR sub_GetRandomNumber
0D6CE 29 EF                             AND #%11101111
0D6D0 D0 16                             BNE +
0D6D2                                   
0D6D2 A5 15                             LDA frame_counter
0D6D4 85 16                             STA random_seed
0D6D6 20 5F C4                          JSR sub_GetRandomNumber
0D6D9 29 07                             AND #$07
0D6DB 69 03                             ADC #$03
0D6DD 85 43                             STA max_noise
0D6DF A9 01                             LDA #$01
0D6E1 85 44                             STA sweep_noise
0D6E3 A9 34                             LDA #$34
0D6E5 8D 0C 40                          STA NOISE_VOLUME
0D6E8                           
0D6E8                               +
0D6E8                           
0D6E8                               ;; if sweep noise = $00: constant noise
0D6E8                               ;; else if sweep noise > $80: decrease pitch
0D6E8                               ;; else: increase pitch
0D6E8 A5 44                         LDA sweep_noise
0D6EA F0 18                         BEQ +constantNoise
0D6EC 30 2A                         BMI +decreaseNoise
0D6EE                           
0D6EE                           ;; Sweep noise up to max noise pitch
0D6EE                           +increaseNoise:
0D6EE C6 45                         DEC current_noise
0D6F0 A5 45                         LDA current_noise
0D6F2 8D 0E 40                      STA NOISE_PERIOD
0D6F5 C5 43                         CMP max_noise
0D6F7 D0 08                         BNE +
0D6F9 A9 00                             LDA #$00
0D6FB 85 44                             STA sweep_noise
0D6FD A9 0A                             LDA #$0A
0D6FF 85 46                             STA noise_counter
0D701                               +
0D701 4C 2C D7                      JMP +endNoise
0D704                           
0D704                           ;; Keep noise at constant pitch
0D704                           +constantNoise:
0D704 A5 43                         LDA max_noise
0D706 F0 24                         BEQ +endNoise
0D708                           
0D708 A5 46                         LDA noise_counter
0D70A D0 07                         BNE +
0D70C A9 80                             LDA #$80
0D70E 85 44                             STA sweep_noise
0D710 4C 2C D7                          JMP +endNoise
0D713                               +
0D713 C6 46                         DEC noise_counter
0D715 4C 2C D7                      JMP +endNoise
0D718                           
0D718                           ;; Sweep noise down to initial pitch
0D718                           +decreaseNoise:
0D718 E6 45                         INC current_noise
0D71A A5 45                         LDA current_noise
0D71C 8D 0E 40                      STA NOISE_PERIOD
0D71F C9 0E                         CMP #$0E
0D721 D0 09                         BNE +endNoise
0D723                           
0D723 20 EF C4                      JSR sub_BackgroundNoise
0D726 A9 00                         LDA #$00
0D728 85 43                         STA max_noise
0D72A 85 44                         STA sweep_noise
0D72C                           
0D72C                           +endNoise:
0D72C                           
0D72C                               +
0D72C                           
0D72C                               ;; Test: random bleeps
0D72C                               .include "game/test/random_descending_bleeps.asm"
0D72C                           ;; Random bleepy noises
0D72C A5 47                         LDA do_beeps
0D72E F0 2E                         BEQ +continue
0D730                               
0D730 C9 02                         CMP #$02
0D732 D0 12                         BNE +beep
0D734                              
0D734                           +stopBeep:
0D734 A9 00                         LDA #$00
0D736 85 47                         STA do_beeps
0D738 A9 08                         LDA #$08
0D73A 8D 15 40                      STA APU_STATUS
0D73D 8D 0F 40                      STA NOISE_LENGTH
0D740 20 EF C4                      JSR sub_BackgroundNoise
0D743 4C 5E D7                      JMP +continue
0D746                               
0D746                           +beep:
0D746 A9 01                         LDA #$01
0D748 8D 15 40                      STA APU_STATUS
0D74B A9 B8                         LDA #$B8
0D74D 8D 00 40                      STA PULSE1_VOLUME
0D750 20 5F C4                      JSR sub_GetRandomNumber
0D753 8D 02 40                      STA PULSE1_TIMER_LO
0D756 20 5F C4                      JSR sub_GetRandomNumber
0D759 29 01                         AND #$01
0D75B 8D 03 40                      STA PULSE1_TIMER_HI
0D75E                           
0D75E                           +continue:0D75E                               
0D75E                           
0D75E                           
0D75E                           ;; This is what happens when we forced nmi skip
0D75E                           +force_skip_nmi:
0D75E                           
0D75E                               ;; Increase frame counters
0D75E E6 15                         INC frame_counter
0D760                           
0D760                               ;; reset ball_update_position
0D760 A9 00                         LDA #$00
0D762 85 35                         STA ball_update_position
0D764                           
0D764                               ;; Don't skip next NMI request
0D764 A9 00                         LDA #$00
0D766 85 13                         STA skip_nmi
0D768 85 48                         STA check_nmi
0D76A                           
0D76A                               ;; Restore X, Y and PC from stack
0D76A 28                            PLP
0D76B 68                            PLA
0D76C A8                            TAY
0D76D 68                            PLA
0D76E AA                            TAX
0D76F                           
0D76F                           +skip_nmi:
0D76F                               ;; Restore accumulator from stack
0D76F 68                            PLA
0D770                           
0D770                               ;; Return
0D770 40                            RTI
0D771                           
0D771                           ;; IRQ handler (empty)
0D771                           IRQ:
0D771                               .include "interrupt/irq.asm"
0D771 40                            RTI0D772                           
0D772                           ;; Interrupt vectors
0D772 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 31 D6                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 71 D7                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
