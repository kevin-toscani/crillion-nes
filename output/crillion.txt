	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; TEST MODE (comment to disable)
	                            TESTING = #1
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$74        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Counters 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           
00041                           ;; Current level (doubles as level select variable)
00041                           current_level          .dsb 1
00042                           
00042                           ;; Tile type the ball is currently colliding with
00042                           colliding_tile         .dsb 1
00043                           
00043                           ;; Number of blocks left on screen
00043                           blocks_left            .dsb 1
00044                           
00044                           ;; Sound control variables
00044                           max_noise              .dsb 1
00045                           sweep_noise            .dsb 1
00046                           current_noise          .dsb 1
00047                           noise_timer            .dsb 1
00048                           do_beeps               .dsb 1
00049                           soft_pulse1            .dsb 1
0004A                           
0004A                           ;; Sound effect variables
0004A                           sfx_address            .dsb 2
0004C                           sfx_timer              .dsb 1
0004D                           
0004D                           ;; Additional NMI check for timed PPU fade
0004D                           check_nmi              .dsb 1
0004E                           
0004E                           
0004E                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 9E C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 9E C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 41                         STA current_level
0C057 85 20                         STA ball_score
0C059 85 21                         STA ball_score+1
0C05B 85 22                         STA ball_score+2
0C05D 85 23                         STA ball_score+3
0C05F 85 24                         STA ball_score+4
0C061 85 25                         STA ball_score+5
0C063                           
0C063                           
0C063                           
0C063                           ;; Main game loop
0C063                           lbl_MainGameLoop:
0C063                               .include "game/main.asm"
0C063                           
0C063                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C063                           ;;
0C063                           ;; game/main.asm
0C063                           ;;
0C063                           ;; The main game loop content.
0C063                           ;;
0C063                           ;;
0C063                           
0C063                               ;; Reset sprite pointer every game loop
0C063 A9 00                         LDA #$00
0C065 85 3D                         STA sprite_ram_pointer
0C067                           
0C067                               ;; Store previous buttons
0C067 A5 0F                         LDA buttons_held
0C069 85 0E                         STA buttons_prev
0C06B                           
0C06B                               ;; Read controller input
0C06B 20 81 C5                      JSR sub_ReadController
0C06E                           
0C06E                               ;; Get buttons released
0C06E A5 0F                         LDA buttons_held
0C070 49 FF                         EOR #$FF
0C072 25 0E                         AND buttons_prev
0C074 85 11                         STA buttons_released
0C076                           
0C076                               ;; Set buttons pressed
0C076 A5 0E                         LDA buttons_prev
0C078 49 FF                         EOR #$FF
0C07A 25 0F                         AND buttons_held
0C07C 85 10                         STA buttons_pressed
0C07E                           
0C07E                               ;; Load screen?
0C07E A5 38                         LDA screen_mode
0C080 29 80                         AND #%10000000
0C082 F0 1E                         BEQ +screenLoaded
0C084                           
0C084                               ;; Get screen type to load
0C084 A5 38                         LDA screen_mode
0C086 29 03                         AND #%00000011
0C088 A8                            TAY
0C089                               
0C089                               ;; Get address to load screen type from
0C089 B9 10 D2                      LDA tbl_LoadScreenLo,y
0C08C 85 0C                         STA pointer
0C08E B9 0D D2                      LDA tbl_LoadScreenHi,y
0C091 85 0D                         STA pointer+1
0C093                           
0C093                               ;; Load screen
0C093 20 21 C7                      JSR sub_DisableRendering
0C096 20 61 CA                      JSR sub_JumpToPointer
0C099 20 35 C7                      JSR sub_EnableRendering
0C09C                               
0C09C                               ;; Don't load screen anymore next loop
0C09C A5 38                         LDA screen_mode
0C09E 29 7F                         AND #%01111111
0C0A0 85 38                         STA screen_mode
0C0A2                               
0C0A2                           
0C0A2                           +screenLoaded:
0C0A2                               ;; Check if we're on the game screen
0C0A2 A5 38                         LDA screen_mode
0C0A4 C9 01                         CMP #IS_GAME_SCREEN
0C0A6 F0 03                         BEQ +
0C0A8 4C 42 C3                          JMP +checkNextScreen
0C0AB                               +
0C0AB                           
0C0AB                               ;; Load sprite 0 in place
0C0AB A9 28                         LDA #$28
0C0AD 8D 00 02                      STA ADDR_SPRITERAM
0C0B0 A9 0F                         LDA #$0F
0C0B2 8D 01 02                      STA ADDR_SPRITERAM+1
0C0B5 A9 22                         LDA #$22
0C0B7 8D 02 02                      STA ADDR_SPRITERAM+2
0C0BA A9 F8                         LDA #$F8
0C0BC 8D 03 02                      STA ADDR_SPRITERAM+3
0C0BF A9 04                         LDA #$04
0C0C1 85 3D                         STA sprite_ram_pointer
0C0C3                           
0C0C3                               ;; We're on the game screen
0C0C3                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0C3 A5 35                         LDA sprites_update_position
0C0C5 F0 03                         BEQ +
0C0C7 4C A8 C2                          JMP +skipSpriteMovement
0C0CA                               +
0C0CA                           
0C0CA                               ;; Check if ball is frozen
0C0CA A5 37                         LDA ball_flags
0C0CC 29 04                         AND #BALL_IS_FROZEN
0C0CE F0 03                         BEQ +
0C0D0 4C 67 C2                          JMP +skipBallMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Move the ball
0C0D3                               .include "game/include/main/move_ball.asm"
0C0D3                           
0C0D3                               ;; Check if ball goes up or down
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 10                         AND #BALL_MOVES_DOWN
0C0D7 F0 2B                         BEQ +moveBallUp
0C0D9                           
0C0D9                           
0C0D9                           +moveBallDown:
0C0D9                               ;; update the low byte
0C0D9 A5 1A                         LDA ball_ypos_lo
0C0DB 85 1C                         STA ball_ypos_lo_prev
0C0DD 18                            CLC
0C0DE 69 74                         ADC #BALL_SPEED_LO
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2                           
0C0E2                               ;; update the high byte with carry
0C0E2 A5 19                         LDA ball_ypos_hi
0C0E4 85 1B                         STA ball_ypos_hi_prev
0C0E6 69 01                         ADC #BALL_SPEED_HI
0C0E8 85 19                         STA ball_ypos_hi
0C0EA                               
0C0EA                               ;; Check bottom bound
0C0EA C9 C8                         CMP #BOUND_BOTTOM
0C0EC 90 3C                         BCC +checkHorizontalMovement
0C0EE F0 3A                         BEQ +checkHorizontalMovement
0C0F0                           
0C0F0                           
0C0F0                               ;; Change ball direction to "up"
0C0F0 A9 C8                         LDA #BOUND_BOTTOM
0C0F2 38                            SEC
0C0F3 E9 01                         SBC #$01
0C0F5 85 19                         STA ball_ypos_hi
0C0F7 A9 00                         LDA #$00
0C0F9 85 1A                         STA ball_ypos_lo
0C0FB A5 37                         LDA ball_flags
0C0FD 29 EF                         AND #MOVE_BALL_UP
0C0FF 85 37                         STA ball_flags
0C101 4C 2A C1                      JMP +checkHorizontalMovement
0C104                           
0C104                           
0C104                           +moveBallUp:
0C104                               ;; update the low byte
0C104 A5 1A                         LDA ball_ypos_lo
0C106 85 1C                         STA ball_ypos_lo_prev
0C108 38                            SEC
0C109 E9 74                         SBC #BALL_SPEED_LO
0C10B 85 1A                         STA ball_ypos_lo
0C10D                           
0C10D                               ;; update the high byte with carry
0C10D A5 19                         LDA ball_ypos_hi
0C10F 85 1B                         STA ball_ypos_hi_prev
0C111 E9 01                         SBC #BALL_SPEED_HI
0C113 85 19                         STA ball_ypos_hi
0C115                               
0C115                               ;; Check top bound
0C115 C9 30                         CMP #BOUND_TOP
0C117 B0 11                         BCS +checkHorizontalMovement
0C119                           
0C119                               ;; Change ball direction to "down"
0C119 A9 30                         LDA #BOUND_TOP
0C11B 18                            CLC
0C11C 69 01                         ADC #$01
0C11E 85 19                         STA ball_ypos_hi
0C120 A9 00                         LDA #$00
0C122 85 1A                         STA ball_ypos_lo
0C124 A5 37                         LDA ball_flags
0C126 09 10                         ORA #MOVE_BALL_DOWN
0C128 85 37                         STA ball_flags
0C12A                           
0C12A                           
0C12A                           +checkHorizontalMovement:
0C12A                           
0C12A                               ;; Check if ball is being nudged
0C12A A5 3E                         LDA nudge_timer
0C12C D0 41                         BNE +doneBallMovement
0C12E                           
0C12E                               ;; Check if left button is held
0C12E A5 0F                         LDA buttons_held
0C130 29 02                         AND #BUTTON_LEFT
0C132 F0 1B                         BEQ +
0C134                                   ;; update the low byte
0C134 A5 18                             LDA ball_xpos_lo
0C136 38                                SEC
0C137 E9 74                             SBC #BALL_SPEED_LO
0C139 85 18                             STA ball_xpos_lo
0C13B                           
0C13B                                   ;; update the high byte
0C13B A5 17                             LDA ball_xpos_hi
0C13D E9 01                             SBC #BALL_SPEED_HI
0C13F 85 17                             STA ball_xpos_hi
0C141                                   
0C141                                   ;; Check left bound
0C141 C9 10                             CMP #BOUND_LEFT
0C143 B0 2A                             BCS +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge right and set nudge timer
0C145 A5 37                             LDA ball_flags
0C147 09 02                             ORA #NUDGE_BALL_RIGHT
0C149 20 5A CA                          JSR sub_InitiateNudge
0C14C                           
0C14C 4C 6F C1                          JMP +doneBallMovement        
0C14F                               +
0C14F                           
0C14F                               ;; Check if right button is held
0C14F A5 0F                         LDA buttons_held
0C151 29 01                         AND #BUTTON_RIGHT
0C153 F0 1A                         BEQ +
0C155                                   ;; update the low byte
0C155 A5 18                             LDA ball_xpos_lo
0C157 18                                CLC
0C158 69 74                             ADC #BALL_SPEED_LO
0C15A 85 18                             STA ball_xpos_lo
0C15C                           
0C15C                                   ;; update the high byte
0C15C A5 17                             LDA ball_xpos_hi
0C15E 69 01                             ADC #BALL_SPEED_HI
0C160 85 17                             STA ball_xpos_hi     
0C162                           
0C162                                  ;; Check right bound
0C162 C9 E8                             CMP #BOUND_RIGHT
0C164 90 09                             BCC +doneBallMovement
0C166 F0 07                             BEQ +doneBallMovement
0C168                                   
0C168                                   ;; Set flag to nudge left and set nudge timer
0C168 A5 37                             LDA ball_flags
0C16A 29 FD                             AND #NUDGE_BALL_LEFT
0C16C 20 5A CA                          JSR sub_InitiateNudge
0C16F                               +
0C16F                           
0C16F                           
0C16F                           +doneBallMovement:
0C16F                           
0C16F                               ;; Check nudge
0C16F A5 3E                         LDA nudge_timer
0C171 F0 23                         BEQ +doneBallNudging
0C173 A5 37                             LDA ball_flags
0C175 29 02                             AND #NUDGE_BALL_RIGHT
0C177 F0 10                             BEQ +nudgeBallLeft
0C179                                   
0C179                                       ;; update the low byte
0C179 A5 18                                 LDA ball_xpos_lo
0C17B 18                                    CLC
0C17C 69 74                                 ADC #BALL_SPEED_LO
0C17E 85 18                                 STA ball_xpos_lo
0C180                           
0C180                                       ;; update the high byte
0C180 A5 17                                 LDA ball_xpos_hi
0C182 69 01                                 ADC #BALL_SPEED_HI
0C184 85 17                                 STA ball_xpos_hi  
0C186 4C 96 C1                              JMP +doneBallNudging
0C189                                   +nudgeBallLeft:
0C189                                   
0C189                                   ;; update the low byte
0C189 A5 18                             LDA ball_xpos_lo
0C18B 38                                SEC
0C18C E9 74                             SBC #BALL_SPEED_LO
0C18E 85 18                             STA ball_xpos_lo
0C190                           
0C190                                   ;; update the high byte
0C190 A5 17                             LDA ball_xpos_hi
0C192 E9 01                             SBC #BALL_SPEED_HI
0C194 85 17                             STA ball_xpos_hi
0C196                               +doneBallNudging:
0C196                           
0C196                               ;; Don't update position again until next frame
0C196                               ;; (moved to after move block routine)
0C196                           
0C196                           +doneBallHandling:
0C196                           
0C196                               
0C196                               ;; Do collision detection
0C196                               .include "game/include/main/collision_detection.asm"
0C196                           
0C196                               ;; Get ball's x-left, x-center, x-right position
0C196 A5 17                         LDA ball_xpos_hi
0C198 18                            CLC
0C199 69 F0                         ADC #BALL_LEFT_WGA
0C19B 85 2F                         STA ball_left
0C19D 18                            CLC
0C19E 69 04                         ADC #BALL_HALF_SIZE
0C1A0 85 30                         STA ball_center
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 31                         STA ball_right
0C1A7                           
0C1A7                               ;; Get ball's y-top, y-middle, y-bottom position
0C1A7 A5 19                         LDA ball_ypos_hi
0C1A9 18                            CLC
0C1AA 69 D0                         ADC #BALL_TOP_WGA
0C1AC 85 32                         STA ball_top
0C1AE 18                            CLC
0C1AF 69 04                         ADC #BALL_HALF_SIZE
0C1B1 85 33                         STA ball_middle
0C1B3 18                            CLC
0C1B4 69 04                         ADC #BALL_HALF_SIZE
0C1B6 85 34                         STA ball_bottom
0C1B8                           
0C1B8                           +checkRightCollision:
0C1B8                               ;; Check if ball moves right
0C1B8                               ;; No need to check nudging here as that will never collide with a tile
0C1B8 A5 0F                         LDA buttons_held
0C1BA 29 01                         AND #BUTTON_RIGHT
0C1BC F0 20                         BEQ +checkLeftCollision
0C1BE                           
0C1BE                               ;; Check tile at right position
0C1BE A5 33                         LDA ball_middle
0C1C0 85 00                         STA temp
0C1C2 A5 31                         LDA ball_right
0C1C4 85 01                         STA temp+1
0C1C6 20 09 C7                      JSR sub_ConvertXYToTileType
0C1C9 29 01                         AND #TILE_IS_SOLID
0C1CB F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1CD                           
0C1CD                               ;; Nudge ball and evaluate tile type
0C1CD A9 01                         LDA #$01
0C1CF 85 36                         STA move_block_space_to_check
0C1D1 A5 37                         LDA ball_flags
0C1D3 29 FD                         AND #NUDGE_BALL_LEFT
0C1D5 20 5A CA                      JSR sub_InitiateNudge
0C1D8 20 97 C8                      JSR sub_EvaluateTileType
0C1DB 4C 01 C2                      JMP +checkTopCollision
0C1DE                           
0C1DE                           +checkLeftCollision:
0C1DE                               ;; Check if ball moves right
0C1DE                               ;; No need to check nudging here as that will never collide with a tile
0C1DE A5 0F                         LDA buttons_held
0C1E0 29 02                         AND #BUTTON_LEFT
0C1E2 F0 1D                         BEQ +checkTopCollision
0C1E4                           
0C1E4                               ;; Check tile at right position
0C1E4 A5 33                         LDA ball_middle
0C1E6 85 00                         STA temp
0C1E8 A5 2F                         LDA ball_left
0C1EA 85 01                         STA temp+1
0C1EC 20 09 C7                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 0E                         BEQ +checkTopCollision
0C1F3                           
0C1F3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1F3 A9 FF                         LDA #$FF
0C1F5 85 36                         STA move_block_space_to_check
0C1F7 A5 37                         LDA ball_flags
0C1F9 09 02                         ORA #NUDGE_BALL_RIGHT
0C1FB 20 5A CA                      JSR sub_InitiateNudge
0C1FE 20 97 C8                      JSR sub_EvaluateTileType
0C201                               
0C201                               
0C201                           +checkTopCollision:
0C201                               ;; Check if ball moves up
0C201 A5 37                         LDA ball_flags
0C203 29 10                         AND #BALL_MOVES_DOWN
0C205 D0 27                         BNE +checkBottomCollision
0C207                           
0C207                               ;; Check tile at top position
0C207 A5 32                         LDA ball_top
0C209 85 00                         STA temp
0C20B A5 30                         LDA ball_center
0C20D 85 01                         STA temp+1
0C20F 20 09 C7                      JSR sub_ConvertXYToTileType
0C212 29 01                         AND #TILE_IS_SOLID
0C214 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C216                           
0C216                               ;; Tile is solid; move ball down and evaluate tile type
0C216 A5 1C                         LDA ball_ypos_lo_prev
0C218 85 1A                         STA ball_ypos_lo
0C21A A5 1B                         LDA ball_ypos_hi_prev
0C21C 85 19                         STA ball_ypos_hi
0C21E A5 37                         LDA ball_flags
0C220 09 10                         ORA #MOVE_BALL_DOWN
0C222 85 37                         STA ball_flags
0C224                           
0C224 A9 F0                         LDA #$F0 ; which is -16
0C226 85 36                         STA move_block_space_to_check
0C228 20 97 C8                      JSR sub_EvaluateTileType
0C22B 4C 52 C2                      JMP +doneCheckingCollision
0C22E                           
0C22E                           +checkBottomCollision:
0C22E                               ;; No movement check needed: since ball is not moving up, it must move down
0C22E                           
0C22E                               ;; Check tile at bottom position
0C22E A5 34                         LDA ball_bottom
0C230 85 00                         STA temp
0C232 A5 30                         LDA ball_center
0C234 85 01                         STA temp+1
0C236 20 09 C7                      JSR sub_ConvertXYToTileType
0C239 29 01                         AND #TILE_IS_SOLID
0C23B F0 15                         BEQ +doneCheckingCollision
0C23D                           
0C23D                               ;; Tile is solid; move ball up and evaluate tile type
0C23D A5 1C                         LDA ball_ypos_lo_prev
0C23F 85 1A                         STA ball_ypos_lo
0C241 A5 1B                         LDA ball_ypos_hi_prev
0C243 85 19                         STA ball_ypos_hi
0C245 A5 37                         LDA ball_flags
0C247 29 EF                         AND #MOVE_BALL_UP
0C249 85 37                         STA ball_flags
0C24B                           
0C24B A9 10                         LDA #$10
0C24D 85 36                         STA move_block_space_to_check
0C24F 20 97 C8                      JSR sub_EvaluateTileType
0C252                           
0C252                           +doneCheckingCollision:
0C252                           
0C252                               
0C252                               ;; Update bonus
0C252                               .include "game/include/main/update_bonus.asm"
0C252                           
0C252                           ;; Update the bonus counter on screen
0C252                           
0C252                               ;; If bonus = 000, skip decreasing
0C252 A5 2C                         LDA ball_bonus
0C254 05 2D                         ORA ball_bonus+1
0C256 05 2E                         ORA ball_bonus+2
0C258 F0 0D                         BEQ +done
0C25A                           
0C25A                               ;; Check if bonus timer is done yet
0C25A A5 3F                         LDA bonus_timer
0C25C D0 09                         BNE +done
0C25E                           
0C25E                               ;; Bonus timer is done
0C25E                               ;; Reset bonus timer
0C25E A9 08                         LDA #BONUS_FRAMES
0C260 85 3F                         STA bonus_timer
0C262                               
0C262                               ;; Subtract one from ball bonus ones
0C262 A2 01                         LDX #$01
0C264 20 5F D0                      JSR sub_SubtractXFromBonus
0C267                           
0C267                           +done:
0C267                           
0C267                               
0C267                               ;; Input test for beeps (disabled)
0C267                               ;; .include "game/test/input_beeps.asm"
0C267                           
0C267                               ;; Input test for explosion sound effect (disabled)
0C267                               ;; .include "game/test/input_explosion.asm"
0C267                           
0C267                           
0C267                           +skipBallMovement:
0C267                               ;; Move blocks a pixel up/down/left/right
0C267                               .include "game/include/main/move_blocks.asm"
0C267                           
0C267                               ;; Set up block loop
0C267 A2 04                         LDX #MAX_ANIMATIONS
0C269                           -moveBlocksLoop:
0C269 CA                            DEX
0C26A                           
0C26A                               ;; Check if block is still moving
0C26A BD 80 03                      LDA move_block_timer,x
0C26D F0 33                         BEQ +checkNext
0C26F                               
0C26F                               ;; Check if block is done moving
0C26F C9 01                         CMP #$01
0C271 D0 0B                         BNE +
0C273                                   ;; If so, draw a tile and remove the sprite
0C273 20 62 C7                          JSR sub_DrawMoveTile
0C276 A9 00                             LDA #$00
0C278 9D 80 03                          STA move_block_timer,x
0C27B 4C A2 C2                          JMP +checkNext
0C27E                               +
0C27E                               
0C27E                               ;; Check in which direction the block is moving
0C27E                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C27E BD 88 03                      LDA move_block_flags,x
0C281 29 03                         AND #%00000011
0C283 F0 14                         BEQ +movingDown
0C285 C9 01                         CMP #$01
0C287 F0 0A                         BEQ +movingUp
0C289 C9 02                         CMP #$02
0C28B F0 12                         BEQ +movingRight
0C28D                               
0C28D                               ;; Move block in correct direction
0C28D                               +movingLeft:
0C28D DE 78 03                      DEC move_block_x,x
0C290 4C A2 C2                      JMP +checkNext
0C293                           
0C293                               +movingUp:
0C293 DE 7C 03                      DEC move_block_y,x
0C296 4C A2 C2                      JMP +checkNext
0C299                           
0C299                               +movingDown:
0C299 FE 7C 03                      INC move_block_y,x
0C29C 4C A2 C2                      JMP +checkNext
0C29F                           
0C29F                               +movingRight:
0C29F FE 78 03                      INC move_block_x,x
0C2A2                           
0C2A2                               ;; Check next block (if any left)
0C2A2                               +checkNext:
0C2A2 E0 00                         CPX #$00
0C2A4 D0 C3                         BNE -moveBlocksLoop
0C2A6                               
0C2A6                               ;; Don't update sprites
0C2A6 E6 35                         INC sprites_update_position
0C2A8                           
0C2A8                           
0C2A8                           +skipSpriteMovement:
0C2A8                               ;; Testing timed PPU scroll concept (disabled)
0C2A8                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2A8                           
0C2A8                               ;; Check if ball is dead
0C2A8 A5 37                         LDA ball_flags
0C2AA 29 01                         AND #BALL_IS_DEAD
0C2AC F0 03                         BEQ +
0C2AE 4C D0 C2                          JMP +ballIsDead
0C2B1                               +
0C2B1                               
0C2B1                               ;; Add ball to sprite buffer
0C2B1 A6 3D                         LDX sprite_ram_pointer
0C2B3 A5 19                         LDA ball_ypos_hi
0C2B5 9D 00 02                      STA ADDR_SPRITERAM,x
0C2B8 E8                            INX
0C2B9 A9 01                         LDA #BALL_TILE_CHR
0C2BB 9D 00 02                      STA ADDR_SPRITERAM,x
0C2BE E8                            INX
0C2BF A9 00                         LDA #BALL_ATTR
0C2C1 9D 00 02                      STA ADDR_SPRITERAM,x
0C2C4 E8                            INX
0C2C5 A5 17                         LDA ball_xpos_hi
0C2C7 9D 00 02                      STA ADDR_SPRITERAM,x
0C2CA E8                            INX
0C2CB 86 3D                         STX sprite_ram_pointer
0C2CD 4C E1 C2                      JMP +drawBlocks
0C2D0                           
0C2D0                           +ballIsDead:
0C2D0                               ;; Check if kill timer has reset
0C2D0 A5 40                         LDA kill_timer
0C2D2 F0 03                         BEQ +
0C2D4 4C E1 C2                          JMP +drawBlocks
0C2D7                               +
0C2D7                               
0C2D7                               ;; Take a live
0C2D7 C6 1F                         DEC ball_lives
0C2D9 D0 03                         BNE +
0C2DB                                   ;; If no lives left, initiate game over sequence
0C2DB 4C 44 C4                          JMP lbl_GameOver
0C2DE                               +
0C2DE                               
0C2DE                               ;; Reload current level
0C2DE 4C 4E C5                      JMP lbl_InitiateLevelLoad
0C2E1                           
0C2E1                           
0C2E1                           +drawBlocks:
0C2E1                               ;; Draw moving block(s, if any)
0C2E1                               .include "game/include/main/draw_blocks.asm"
0C2E1                           
0C2E1                           ;; Handle movement of move blocks
0C2E1                           
0C2E1                               ;; Set up a loop
0C2E1 A0 04                         LDY #MAX_ANIMATIONS
0C2E3                           -drawBlocksLoop:
0C2E3 88                            DEY
0C2E4                           
0C2E4                               ;; If timer is zero, check the next move block
0C2E4 B9 80 03                      LDA move_block_timer,y
0C2E7 F0 52                         BEQ +nextMoveBlock
0C2E9                               
0C2E9                               ;; Get current sprite pointer
0C2E9 A6 3D                         LDX sprite_ram_pointer
0C2EB                           
0C2EB                               ;; Draw the sprites on screen
0C2EB B9 7C 03                      LDA move_block_y,y
0C2EE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F1 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C2F4 18                            CLC
0C2F5 69 08                         ADC #$08
0C2F7 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C2FA 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C2FD E8                            INX
0C2FE                           
0C2FE A9 52                         LDA #$52 ; Top left chr id
0C300 9D 00 02                      STA ADDR_SPRITERAM,x
0C303 A9 53                         LDA #$53 ; Top right chr id
0C305 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C308 A9 62                         LDA #$62 ; Bottom left chr id
0C30A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C30D A9 63                         LDA #$63 ; Bottom right chr id
0C30F 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C312 E8                            INX
0C313                           
0C313 A9 00                         LDA #BALL_ATTR
0C315 9D 00 02                      STA ADDR_SPRITERAM,x
0C318 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C31B 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C31E 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C321 E8                            INX
0C322                           
0C322 B9 78 03                      LDA move_block_x,y
0C325 9D 00 02                      STA ADDR_SPRITERAM,x
0C328 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C32B 18                            CLC
0C32C 69 08                         ADC #$08
0C32E 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C331 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C334                           
0C334                               ;; Update sprite RAM pointer
0C334 A5 3D                         LDA sprite_ram_pointer
0C336 18                            CLC
0C337 69 10                         ADC #$10
0C339 85 3D                         STA sprite_ram_pointer
0C33B                           
0C33B                           
0C33B                           
0C33B                           +nextMoveBlock:
0C33B                               ;; Check the next move block
0C33B C0 00                         CPY #$00
0C33D D0 A4                         BNE -drawBlocksLoop
0C33F                           
0C33F 4C 8E C3                      JMP +doneScreenLoad
0C342                           
0C342                           
0C342                           
0C342                           +checkNextScreen:
0C342                           
0C342                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C342                               ;; Upon pressing START, the selected level will start
0C342                               .include "game/include/main/select_level.asm"
0C342                           
0C342                               ;; Change level number on start screen
0C342 A5 10                         LDA buttons_pressed
0C344 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C346 F0 3C                         BEQ +checkStartPress
0C348                           
0C348                                   ;; Select next level (1, 5, 9, 13, 17)
0C348 A5 41                             LDA current_level
0C34A 18                                CLC
0C34B 69 04                             ADC #$04
0C34D C9 14                             CMP #$14
0C34F D0 02                             BNE +
0C351 A9 00                                 LDA #$00
0C353                                   +
0C353 85 41                             STA current_level
0C355                                   
0C355                                   ;; Convert level number to two-byte value
0C355 A9 00                             LDA #$00
0C357 85 03                             STA temp+3
0C359 A5 41                             LDA current_level
0C35B 18                                CLC
0C35C 69 01                             ADC #$01
0C35E                           
0C35E                               -
0C35E C9 0A                             CMP #$0A
0C360 90 08                             BCC +
0C362 E6 03                                 INC temp+3
0C364 38                                    SEC
0C365 E9 0A                                 SBC #$0A
0C367 4C 5E C3                              JMP -
0C36A                                   +
0C36A                           
0C36A                                   ;; Add level number to PPU buffer
0C36A 18                                CLC
0C36B 69 01                             ADC #$01
0C36D 85 02                             STA temp+2
0C36F A9 20                             LDA #$20
0C371 85 00                             STA temp
0C373 A9 D0                             LDA #$D0
0C375 85 01                             STA temp+1
0C377 20 A3 D0                          JSR sub_WriteByteToPPUBuffer
0C37A                                   
0C37A C6 01                             DEC temp+1
0C37C A4 03                             LDY temp+3
0C37E C8                                INY
0C37F 84 02                             STY temp+2
0C381 20 A3 D0                          JSR sub_WriteByteToPPUBuffer
0C384                                   
0C384                               +checkStartPress:
0C384                           
0C384                           
0C384                           
0C384                               ;; If START button is pressed
0C384 A5 10                         LDA buttons_pressed
0C386 29 10                         AND #BUTTON_START
0C388 F0 04                         BEQ +
0C38A                                   ;; Start the level
0C38A A9 81                             LDA #LOAD_GAME_SCREEN
0C38C 85 38                             STA screen_mode
0C38E                               +
0C38E                           
0C38E                           
0C38E                           
0C38E                           +doneScreenLoad:
0C38E                           
0C38E                               ;; Load animations (if any)
0C38E                               .include "game/include/main/load_animations.asm"
0C38E                           
0C38E                               ;; Set up loop
0C38E A2 00                         LDX #$00
0C390                               -loop_load_animation:
0C390                                   ;; Check if current animation is active. If not, goto next
0C390 BD 74 03                          LDA explosion_active,x
0C393 D0 03                             BNE +
0C395 4C 2F C4                              JMP +next
0C398                                   +
0C398                           
0C398                                   ;; Check the explosion framecounter
0C398 BD 60 03                          LDA explosion_timer,x
0C39B D0 26                             BNE +
0C39D                                       ;; Frametimer is 0
0C39D                                       ;; Reset to animation speed
0C39D A9 04                                 LDA #ANIMATION_SPEED
0C39F 9D 60 03                              STA explosion_timer,x
0C3A2                           
0C3A2                                       ;; Set next animation frame, and check if we're done yet
0C3A2 FE 64 03                              INC explosion_currentframe,x
0C3A5 BD 64 03                              LDA explosion_currentframe,x
0C3A8 C9 0A                                 CMP #ANIM_SLIDES
0C3AA D0 17                                 BNE +
0C3AC                           
0C3AC                                       ;; If we're done, inactivate current explosion, clean
0C3AC                                       ;; up sprite RAM and go to the next one
0C3AC A9 00                                 LDA #$00
0C3AE 9D 74 03                              STA explosion_active,x
0C3B1                                       
0C3B1 A9 09                                 LDA #SLIDE_SIZE
0C3B3 0A                                    ASL
0C3B4 0A                                    ASL
0C3B5 A8                                    TAY
0C3B6 A9 EF                                 LDA #$EF
0C3B8                                       -
0C3B8 88                                        DEY
0C3B9 99 00 02                                  STA ADDR_SPRITERAM,y
0C3BC C0 00                                     CPY #00
0C3BE D0 F8                                 BNE -
0C3C0                                       
0C3C0 4C 2F C4                              JMP +next
0C3C3                                   +
0C3C3                           
0C3C3                                   ;; Load (x,y) position in temp variables
0C3C3 BD 6C 03                          LDA explosion_x,x
0C3C6 85 01                             STA temp+1
0C3C8 85 03                             STA temp+3
0C3CA BD 70 03                          LDA explosion_y,x
0C3CD 85 02                             STA temp+2
0C3CF                           
0C3CF                                   ;; Load attribute in temp variable
0C3CF BD 68 03                          LDA explosion_attributes,x
0C3D2 85 04                             STA temp+4
0C3D4                           
0C3D4                                   ;; Load current frame into Y-register
0C3D4 BC 64 03                          LDY explosion_currentframe,x
0C3D7                           
0C3D7                                   ;; Load current frame ROM address from table
0C3D7 B9 F7 D1                          LDA explosion_anim_lo,y
0C3DA 85 0C                             STA pointer
0C3DC B9 ED D1                          LDA explosion_anim_hi,y
0C3DF 85 0D                             STA pointer+1
0C3E1                           
0C3E1                                   ;; Save x-register on stack
0C3E1 8A                                TXA
0C3E2 48                                PHA
0C3E3                           
0C3E3                                   ;; Load sprites into sprite RAM
0C3E3 A6 3D                             LDX sprite_ram_pointer
0C3E5 A0 00                             LDY #$00
0C3E7                           
0C3E7                                   ;; Prepare (x,y) offset for loop
0C3E7 84 00                             STY temp
0C3E9                           
0C3E9                                   -loop_load_sprite:
0C3E9                                   
0C3E9                                       ;; Do not draw empty sprites
0C3E9 B1 0C                                 LDA (pointer),y
0C3EB F0 18                                 BEQ +nextSprite
0C3ED                                   
0C3ED                                           ;; Add y-position to sprite ram buffer
0C3ED A5 02                                     LDA temp+2
0C3EF 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3F2 E8                                        INX
0C3F3                           
0C3F3                                           ;; Get tile number from frame ROM address, and
0C3F3                                           ;; add it to sprite ram buffer
0C3F3 B1 0C                                     LDA (pointer),y
0C3F5 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3F8 E8                                        INX
0C3F9                           
0C3F9                                           ;; Add attribute data to sprite ram buffer
0C3F9 A5 04                                     LDA temp+4
0C3FB 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3FE E8                                        INX
0C3FF                           
0C3FF                                           ;; Add x-position to sprite ram buffer
0C3FF A5 03                                     LDA temp+3
0C401 9D 00 02                                  STA ADDR_SPRITERAM,x
0C404 E8                                        INX
0C405                           
0C405                                       +nextSprite:
0C405                           
0C405                                       ;; Check if all sprites are done
0C405 C8                                    INY
0C406 C0 09                                 CPY #SLIDE_SIZE
0C408 F0 21                                 BEQ +done
0C40A                           
0C40A                                       ;; Update x value
0C40A A5 03                                 LDA temp+3
0C40C 18                                    CLC
0C40D 69 08                                 ADC #$08
0C40F 85 03                                 STA temp+3
0C411                           
0C411                                       ;; Update temp for x,y position
0C411 E6 00                                 INC temp
0C413 A5 00                                 LDA temp
0C415 C9 03                                 CMP #SLIDE_WIDTH
0C417 D0 0F                                 BNE +
0C419                                           ;; Row is done; reset x-position
0C419 A5 01                                     LDA temp+1
0C41B 85 03                                     STA temp+3
0C41D                           
0C41D                                           ;; Update y-position
0C41D A5 02                                     LDA temp+2
0C41F 18                                        CLC
0C420 69 08                                     ADC #$08
0C422 85 02                                     STA temp+2
0C424                           
0C424                                           ;; Reset row timer
0C424 A9 00                                     LDA #$00
0C426 85 00                                     STA temp
0C428                                       +
0C428                           
0C428 4C E9 C3                          JMP -loop_load_sprite
0C42B                           
0C42B                               +done:
0C42B 86 3D                             STX sprite_ram_pointer
0C42D                           
0C42D                                   ;; Retrieve x-register from stack
0C42D 68                                PLA
0C42E AA                                TAX
0C42F                           
0C42F                               +next:
0C42F                                   ;; Check if all animations have been updated
0C42F E8                                INX
0C430 E0 04                             CPX #MAX_ANIMATIONS
0C432 F0 03                             BEQ +done
0C434                           
0C434 4C 90 C3                      JMP -loop_load_animation
0C437                           +done:
0C437                           
0C437                           
0C437                               ;; Sprite clean-up
0C437 A6 3D                         LDX sprite_ram_pointer
0C439 A9 EF                         LDA #$EF
0C43B                               -
0C43B 9D 00 02                          STA ADDR_SPRITERAM,x
0C43E E8                                INX
0C43F D0 FA                         BNE -
0C441                           
0C441 4C 63 C0                      JMP lbl_MainGameLoop
0C444                           
0C444                           ;; Following sequences are outside main game loop
0C444                           .include "game/include/main/game_over.asm"
0C444                           
0C444                           ;; Game over sequence
0C444                           lbl_GameOver:
0C444                           
0C444                               ;; Disable noise channel
0C444 A9 00                         LDA #$00
0C446 8D 15 40                      STA APU_STATUS
0C449 8D 0C 40                      STA NOISE_VOLUME
0C44C                               
0C44C                               ;; Do blinds effect
0C44C 20 10 C6                      JSR sub_BlindsEffect
0C44F                           
0C44F                               ;; Disable draw after HUD to disable screen
0C44F 20 95 C5                      JSR sub_WaitForNMI
0C452                               -
0C452 AD 02 20                          LDA PPU_STATUS
0C455 29 40                             AND #SPRITE_0_HIT
0C457 D0 F9                         BNE -
0C459                               -
0C459 AD 02 20                          LDA PPU_STATUS
0C45C 29 40                             AND #SPRITE_0_HIT
0C45E F0 F9                         BEQ -
0C460 A9 00                         LDA #$00
0C462 8D 01 20                      STA PPU_MASK
0C465                           
0C465                               ;; Remove game area from view
0C465 2C 02 20                      BIT PPU_STATUS
0C468 A9 20                         LDA #$20
0C46A 8D 06 20                      STA PPU_ADDR
0C46D A9 A0                         LDA #$A0
0C46F 8D 06 20                      STA PPU_ADDR
0C472 A9 00                         LDA #$00
0C474 A2 16                         LDX #$16
0C476                               -xLoop:
0C476 A0 20                             LDY #$20
0C478                                   -yLoop:
0C478 8D 07 20                              STA PPU_DATA
0C47B 88                                    DEY
0C47C D0 FA                             BNE -yLoop
0C47E CA                                DEX
0C47F D0 F5                         BNE -xLoop
0C481                               
0C481                               ;; Pause for a little while
0C481 A2 18                         LDX #$18
0C483                               -
0C483 20 95 C5                          JSR sub_WaitForNMI
0C486 CA                                DEX
0C487 D0 FA                         BNE -
0C489                                       
0C489                               ;; Do flash effect
0C489 20 0D CA                      JSR sub_FlashEffect
0C48C                           
0C48C                               ;; Draw GAME OVER tiles over game screen
0C48C A9 21                         LDA #$21
0C48E 85 00                         STA temp
0C490 A9 EB                         LDA #$EB
0C492 85 01                         STA temp+1
0C494                           
0C494 A2 00                         LDX #$00
0C496                               -gameOverTileLoop:
0C496 BD CF D9                          LDA tbl_GameOver,x
0C499 85 02                             STA temp+2
0C49B 20 A3 D0                          JSR sub_WriteByteToPPUBuffer
0C49E E6 01                             INC temp+1
0C4A0 E8                                INX
0C4A1 E0 0A                             CPX #$0A
0C4A3 D0 F1                         BNE -gameOverTileLoop
0C4A5                               
0C4A5                               ;; Update GAME OVER attributes on game screen
0C4A5 A9 23                         LDA #$23
0C4A7 85 00                         STA temp
0C4A9 A9 DA                         LDA #$DA
0C4AB 85 01                         STA temp+1
0C4AD A9 AA                         LDA #$AA
0C4AF 85 02                         STA temp+2
0C4B1 A2 04                         LDX #$04
0C4B3                               -
0C4B3 20 A3 D0                          JSR sub_WriteByteToPPUBuffer
0C4B6 E6 01                             INC temp+1
0C4B8 CA                                DEX
0C4B9 D0 F8                         BNE -
0C4BB 20 95 C5                      JSR sub_WaitForNMI
0C4BE                               
0C4BE                              
0C4BE                               ;; If player score is larger than high score
0C4BE                               ;; Overwrite high score with player score
0C4BE                               ;; [@TODO]
0C4BE                               
0C4BE                               
0C4BE                               ;; If player presses either A or START, (soft) reset the game
0C4BE                               -checkController:
0C4BE 20 81 C5                          JSR sub_ReadController
0C4C1 A5 0F                             LDA buttons_held
0C4C3 29 90                             AND #%10010000
0C4C5 F0 F7                         BEQ -checkController
0C4C7 4C 4B C0                      JMP lbl_SoftReset
0C4CA                           
0C4CA                           .include "game/include/main/level_win.asm"
0C4CA                           
0C4CA                           ;; Handling of level win state
0C4CA                           lbl_LevelWin:
0C4CA                           
0C4CA                               ;; Freeze the ball
0C4CA A5 37                         LDA ball_flags
0C4CC 09 04                         ORA #FREEZE_BALL
0C4CE 85 37                         STA ball_flags
0C4D0                           
0C4D0                               ;; Disable noise channel
0C4D0 A9 00                         LDA #$00
0C4D2 8D 0C 40                      STA NOISE_VOLUME
0C4D5                               
0C4D5                               ;; Wait a few frames
0C4D5 A2 18                         LDX #$18
0C4D7 20 9C D0                      JSR sub_WaitXFrames
0C4DA                           
0C4DA                               ;; Set null tile color to yellow
0C4DA A9 3F                         LDA #$3F
0C4DC 85 00                         STA temp
0C4DE A9 02                         LDA #$02
0C4E0 85 01                         STA temp+1
0C4E2 A9 38                         LDA #$38
0C4E4 85 02                         STA temp+2
0C4E6 20 A3 D0                      JSR sub_WriteByteToPPUBuffer
0C4E9                               
0C4E9                               ;; Initiate frequency beeps (@TODO)
0C4E9                               
0C4E9                               ;; Wait a few frames
0C4E9 A2 10                         LDX #$10
0C4EB 20 9C D0                      JSR sub_WaitXFrames
0C4EE                               
0C4EE                               ;; Restore null tile color to dark blue
0C4EE A9 3F                         LDA #$3F
0C4F0 85 00                         STA temp
0C4F2 A9 02                         LDA #$02
0C4F4 85 01                         STA temp+1
0C4F6 A9 12                         LDA #$12
0C4F8 85 02                         STA temp+2
0C4FA 20 A3 D0                      JSR sub_WriteByteToPPUBuffer
0C4FD                           
0C4FD                               ;; Wait a few frames
0C4FD A2 2D                         LDX #$2D
0C4FF 20 9C D0                      JSR sub_WaitXFrames
0C502                               
0C502                           
0C502                               ;; Play the end level sweep sound effect, and
0C502                               ;; initiate bonus score routine
0C502 A9 B8                         LDA #$B8
0C504 85 49                         STA soft_pulse1
0C506                           
0C506 A9 01                         LDA #$01
0C508 8D 15 40                      STA APU_STATUS
0C50B 85 48                         STA do_beeps
0C50D                           
0C50D                               -bonusPointsLoop:
0C50D                                   ;; Check how many bonus points to subtract
0C50D                                   ;; (either the max, or what's left)
0C50D A5 2C                             LDA ball_bonus
0C50F 05 2D                             ORA ball_bonus+1
0C511 D0 06                             BNE +fullBonus
0C513 A5 2E                             LDA ball_bonus+2
0C515 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C517 B0 02                             BCS +partBonus
0C519                                   +fullBonus:
0C519 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C51B                                   +partBonus:
0C51B                           
0C51B                                   ;; Put value that's added to score on the stack
0C51B AA                                TAX
0C51C BD 2B DA                          LDA tbl_BonusToScore,x
0C51F 48                                PHA
0C520                           
0C520                                   ;; Subtract X-register from bonus
0C520 20 5F D0                          JSR sub_SubtractXFromBonus
0C523                           
0C523                                   ;; Get value from stack and add it to the score
0C523 68                                PLA
0C524 20 A4 C5                          JSR sub_AddAccumulatorToScore
0C527                           
0C527                                   ;; Wait for NMI twice
0C527 20 95 C5                          JSR sub_WaitForNMI
0C52A 20 95 C5                          JSR sub_WaitForNMI
0C52D                           
0C52D                                   ;; Check if bonus countdown is done
0C52D A5 2C                             LDA ball_bonus
0C52F 05 2D                             ORA ball_bonus+1
0C531 05 2E                             ORA ball_bonus+2
0C533 D0 D8                         BNE -bonusPointsLoop
0C535                           
0C535                               ;; fade out the beeping
0C535 A2 08                         LDX #$08
0C537                               -fadeOutLoop:
0C537 20 95 C5                          JSR sub_WaitForNMI
0C53A 20 95 C5                          JSR sub_WaitForNMI
0C53D C6 49                             DEC soft_pulse1
0C53F CA                                DEX
0C540 D0 F5                         BNE -fadeOutLoop
0C542                           
0C542                               ;; Stop random beeping
0C542 A9 02                         LDA #$02
0C544 85 48                         STA do_beeps
0C546                           
0C546                           
0C546                               ;; Wait a few frames
0C546 A2 30                         LDX #$30
0C548 20 9C D0                      JSR sub_WaitXFrames
0C54B                           
0C54B                               ;; Load next level
0C54B 4C 4E C5                      JMP lbl_InitiateLevelLoad
0C54E                               
0C54E                           .include "game/include/main/initiate_level_load.asm"
0C54E                           
0C54E                           ;; Load level
0C54E                           lbl_InitiateLevelLoad:
0C54E                               
0C54E                               ;; Blind out the screen
0C54E 20 10 C6                      JSR sub_BlindsEffect
0C551                               
0C551                               ;; If ball is dead, (re)load current level
0C551                               ;; If ball is alive, load next level
0C551 A5 37                         LDA ball_flags
0C553 29 01                         AND #BALL_IS_DEAD
0C555 D0 05                         BNE +
0C557 E6 41                             INC current_level
0C559 4C 62 C5                          JMP +loadLevel
0C55C                               +
0C55C                               
0C55C                               ;; Revive ball
0C55C A5 37                         LDA ball_flags
0C55E 29 FE                         AND #REVIVE_BALL
0C560 85 37                         STA ball_flags
0C562                           
0C562                           +loadLevel:
0C562                               ;; This loops back to level 1 after level 25 for now,
0C562                               ;; as a proper game ending is yet to be introduced.
0C562 A5 41                         LDA current_level
0C564 C9 19                         CMP #25
0C566 D0 04                         BNE +
0C568 A9 00                             LDA #$00
0C56A 85 41                             STA current_level
0C56C                               +
0C56C                               
0C56C                               ;; Tell the game to load the level screen on the next loop.
0C56C A9 81                         LDA #LOAD_GAME_SCREEN
0C56E 85 38                         STA screen_mode
0C570                           
0C570                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C570 4C 63 C0                      JMP lbl_MainGameLoop0C573                           
0C573                           
0C573                           ;; Subroutines
0C573                           .include "include/subroutines.asm"
0C573                           
0C573                           ;; RNG
0C573                           .include "subroutine/GetRandomNumber.asm"
0C573                           
0C573                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C573                           ;;
0C573                           ;; subroutine/GetRandomNumber.asm
0C573                           ;;
0C573                           ;; Simple and fast random number generator by White Flame.
0C573                           ;;
0C573                           ;; Set random_seed to an arbitrary number to randomize between
0C573                           ;; gaming sessions, for instance using the frame timer upon
0C573                           ;; pressing START on the intro screen.
0C573                           ;;
0C573                           ;;     ;; IF START PRESSED:
0C573                           ;;     LDA frame_counter
0C573                           ;;     STA random_seed
0C573                           ;;
0C573                           ;; Source:
0C573                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C573                           ;;
0C573                           ;;
0C573                           
0C573                           sub_GetRandomNumber:
0C573                               ;; Force EOR if random_seed is zero
0C573 A5 16                         LDA random_seed
0C575 F0 05                         BEQ +doEor
0C577                           
0C577                               ;; Shift left, and EOR if the high bit is set
0C577 0A                            ASL
0C578 F0 04                         BEQ +noEor
0C57A 90 02                         BCC +noEor
0C57C                           
0C57C                           +doEor:
0C57C 49 1D                         EOR #$1D
0C57E                           
0C57E                           +noEor:
0C57E 85 16                         STA random_seed
0C580                           
0C580 60                            RTS
0C581                           
0C581                           
0C581                           ;; Read controller input
0C581                           .include "subroutine/ReadController.asm"
0C581                           
0C581                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C581                           ;;
0C581                           ;; subroutine/ReadController.asm
0C581                           ;;
0C581                           ;; Subroutine that polls the controller and stores the input
0C581                           ;; buttons in a variable. This version only handles controller
0C581                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C581                           ;;
0C581                           ;;
0C581                           
0C581                           sub_ReadController:
0C581                           
0C581                               ;; Set strobe bit
0C581 A9 01                         LDA #$01
0C583 8D 16 40                      STA JOYPAD_1
0C586                           
0C586                               ;; Set up ring timer
0C586 85 0F                         STA buttons_held
0C588                           
0C588                               ;; Clear strobe bit
0C588 4A                            LSR
0C589 8D 16 40                      STA JOYPAD_1
0C58C                           
0C58C                               ;; Loop through button presses
0C58C                               -
0C58C AD 16 40                          LDA JOYPAD_1
0C58F 4A                                LSR
0C590 26 0F                             ROL buttons_held
0C592                           
0C592                               ;; Check if ring timer is done
0C592 90 F8                         BCC -
0C594                           
0C594                               ;; Return from subroutine
0C594 60                            RTS
0C595                           
0C595                           
0C595                           ;; vBlank/NMI wait
0C595                           .include "subroutine/WaitForNMI.asm"
0C595                           
0C595                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C595                           ;;
0C595                           ;; subroutine/WaitForVBlank.asm
0C595                           ;;
0C595                           ;; Subroutine that essentially pauses script execution until
0C595                           ;; vBlank happens.
0C595                           ;;
0C595                           ;;
0C595                           
0C595                           sub_WaitForNMI:
0C595 A9 01                         LDA #$01
0C597 85 4D                         STA check_nmi
0C599                               -
0C599 A5 4D                             LDA check_nmi
0C59B D0 FC                         BNE -
0C59D 60                            RTS
0C59E                           
0C59E                           .include "subroutine/WaitForVBlank.asm"
0C59E                           
0C59E                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C59E                           ;;
0C59E                           ;; subroutine/WaitForVBlank.asm
0C59E                           ;;
0C59E                           ;; Subroutine that essentially pauses script execution until
0C59E                           ;; vBlank happens.
0C59E                           ;;
0C59E                           ;;
0C59E                           
0C59E                           sub_WaitForVBlank:
0C59E 2C 02 20                      BIT $2002
0C5A1 10 FB                         BPL sub_WaitForVBlank
0C5A3 60                            RTS
0C5A4                           
0C5A4                           
0C5A4                           ;; Game specific subroutines
0C5A4                           .include "game/include/subroutines.asm"
0C5A4                           
0C5A4                           ;; additional game-specific subroutines go here
0C5A4                           
0C5A4                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C5A4                           
0C5A4                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C5A4                           ;;
0C5A4                           ;;  sub_AddAccumulatorToScore.asm
0C5A4                           ;;
0C5A4                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C5A4                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C5A4                           ;;  actual score.
0C5A4                           ;;
0C5A4                           ;;
0C5A4                           
0C5A4                           
0C5A4                           sub_AddAccumulatorToScore:
0C5A4                           
0C5A4                               ;; Clear old add_to_score
0C5A4 A2 05                         LDX #$05
0C5A6 A0 00                         LDY #$00
0C5A8                               -
0C5A8 94 26                             STY add_to_score,x
0C5AA CA                                DEX
0C5AB 10 FB                         BPL -
0C5AD                           
0C5AD                               ;; Set accumulator to add_to_score variables
0C5AD                               ;; Check and update 100s
0C5AD                               -checkHundreds:
0C5AD C9 64                             CMP #100
0C5AF 90 08                             BCC +checkTens
0C5B1 38                                    SEC
0C5B2 E9 64                                 SBC #100
0C5B4 E6 29                                 INC add_to_score+3
0C5B6 4C AD C5                              JMP -checkHundreds
0C5B9                                   +checkTens:
0C5B9                           
0C5B9                               ;; Check and update 10s
0C5B9                               -checkTens:
0C5B9 C9 0A                             CMP #10
0C5BB 90 08                             BCC +setOnes
0C5BD 38                                    SEC
0C5BE E9 0A                                 SBC #10
0C5C0 E6 2A                                 INC add_to_score+4
0C5C2 4C B9 C5                              JMP -checkTens
0C5C5                                   +setOnes:
0C5C5                           
0C5C5                               ;; We're left with 1s
0C5C5 85 2B                         STA add_to_score+5
0C5C7                           
0C5C7                               ;; Byte for byte, add add_to_score to ball_score
0C5C7 A9 00                         LDA #$00
0C5C9 85 39                         STA ppu_buffer_update
0C5CB A4 3A                         LDY ppu_buffer_pointer
0C5CD A2 05                         LDX #$05
0C5CF                               -
0C5CF B5 26                             LDA add_to_score,x
0C5D1 18                                CLC
0C5D2 75 20                             ADC ball_score,x
0C5D4 C9 0A                             CMP #10
0C5D6 90 05                             BCC +
0C5D8 38                                    SEC
0C5D9 E9 0A                                 SBC #10
0C5DB F6 1F                                 INC ball_score-1,x
0C5DD                                   +
0C5DD                                   
0C5DD                                   ;; Update new score digit
0C5DD 95 20                             STA ball_score,x
0C5DF                           
0C5DF                                   ;; Update score tile in PPU
0C5DF A9 20                             LDA #$20
0C5E1 99 00 03                          STA ppu_buffer,y
0C5E4 C8                                INY
0C5E5 8A                                TXA
0C5E6 18                                CLC
0C5E7 69 83                             ADC #$83
0C5E9 99 00 03                          STA ppu_buffer,y
0C5EC C8                                INY
0C5ED B5 20                             LDA ball_score,x
0C5EF 18                                CLC
0C5F0 69 01                             ADC #$01
0C5F2 99 00 03                          STA ppu_buffer,y
0C5F5 C8                                INY
0C5F6                           
0C5F6                                   ;; Check next digit (if any left)
0C5F6 CA                                DEX
0C5F7 30 03                             BMI +done
0C5F9 4C CF C5                      JMP -
0C5FC                           
0C5FC                           +done:
0C5FC                               ;; Update PPU buffer pointer and status
0C5FC 84 3A                         STY ppu_buffer_pointer
0C5FE A9 01                         LDA #$01
0C600 85 39                         STA ppu_buffer_update
0C602                           
0C602                               ;; Done: return 
0C602 60                            RTS
0C603                           
0C603                           .include "game/subroutine/BackgroundNoise.asm"
0C603                           
0C603                           ;; Play background noise
0C603                           sub_BackgroundNoise:
0C603 A9 32                         LDA #$32
0C605 8D 0C 40                      STA NOISE_VOLUME
0C608 A9 0E                         LDA #$0E
0C60A 8D 0E 40                      STA NOISE_PERIOD
0C60D 85 46                         STA current_noise
0C60F 60                            RTS
0C610                           
0C610                           .include "game/subroutine/BlindsEffect.asm"
0C610                           
0C610                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C610                           sub_BlindsEffect:
0C610                           
0C610                               ;; Set up loop fading
0C610 A9 00                         LDA #$00
0C612 85 07                         STA temp+7
0C614 A0 08                         LDY #$08
0C616                               -fadeLoop:
0C616 84 08                             STY temp+8
0C618                           
0C618                                   ;; Wait for NMI to pass
0C618 20 95 C5                          JSR sub_WaitForNMI
0C61B                                   
0C61B                                   ;; Now wait for No-sprite 0
0C61B                                   -
0C61B AD 02 20                              LDA PPU_STATUS
0C61E 29 40                                 AND #SPRITE_0_HIT
0C620 D0 F9                             BNE -
0C622                               
0C622                                   ;; Now wait for Sprite 0
0C622                                   -
0C622 AD 02 20                              LDA PPU_STATUS
0C625 29 40                                 AND #SPRITE_0_HIT
0C627 F0 F9                             BEQ -
0C629                                       
0C629                                   ;; Setup tile row loop
0C629 A0 16                             LDY #22
0C62B                                   -tileLoop:
0C62B                                   
0C62B                                       ;; Disable drawing
0C62B A5 12                                 LDA soft_ppu_mask
0C62D 29 F7                                 AND #%11110111
0C62F 8D 01 20                              STA PPU_MASK
0C632                                       
0C632                                       ;; Set up scanline loop
0C632 A2 08                                 LDX #$08
0C634                                       -scanlineLoop:
0C634 E4 08                                     CPX temp+8
0C636 D0 0A                                     BNE +wasteTime
0C638                                           
0C638                                           ;; Restore drawing
0C638 A5 12                                     LDA soft_ppu_mask
0C63A 09 08                                     ORA #%00001000
0C63C 8D 01 20                                  STA PPU_MASK
0C63F 4C 48 C6                                  JMP +wasteMoreTime
0C642                           
0C642                                           ;; Waste 12 frames
0C642                                           +wasteTime:
0C642 E6 09                                     INC temp+9   ;+5
0C644 C6 09                                     DEC temp+9   ;+5
0C646 49 00                                     EOR #$00     ;+2
0C648                                           
0C648                                           ;; Waste about 100 frames
0C648                                           +wasteMoreTime:
0C648                                           
0C648 86 01                                     STX temp+1     ;  3 down, 97 to go
0C64A A2 09                                     LDX #$09       ;  5 down, 95 to go
0C64C                                           -wasteLoop:
0C64C EA                                            NOP
0C64D 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C64F CA                                            DEX        ;  5+5L down,  95-5L to go
0C650 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C652                           
0C652 A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C654 CA                                        DEX            ;  9+8L down, 91-8L to go
0C655 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C657                           
0C657 88                                    DEY
0C658 D0 D1                             BNE -tileLoop
0C65A                           
0C65A A4 08                             LDY temp+8
0C65C                                   
0C65C E6 07                             INC temp+7
0C65E A5 07                             LDA temp+7
0C660 C9 02                             CMP #$02
0C662 D0 B2                             BNE -fadeLoop
0C664                           
0C664 A9 00                             LDA #$00
0C666 85 07                             STA temp+7
0C668 88                                DEY
0C669 D0 AB                         BNE -fadeLoop
0C66B                               
0C66B 60                            RTS
0C66C                           
0C66C                           .include "game/subroutine/ClearScreen.asm"
0C66C                           
0C66C                           ;; Subroutine to clear the screen
0C66C                           ;; If it's a game screen, add noise
0C66C                           
0C66C                           sub_ClearScreen:
0C66C                               ;; Check of game screen or not
0C66C A5 38                         LDA screen_mode
0C66E 29 03                         AND #CHECK_SCREEN_MODE
0C670 C9 01                         CMP #IS_GAME_SCREEN
0C672 F0 02                         BEQ +
0C674 A9 00                             LDA #$00
0C676                               +
0C676 85 01                         STA temp+1
0C678                               
0C678                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C678 2C 02 20                      BIT PPU_STATUS
0C67B A9 20                         LDA #$20
0C67D 8D 06 20                      STA PPU_ADDR
0C680 A9 00                         LDA #$00
0C682 8D 06 20                      STA PPU_ADDR
0C685                               
0C685                               ;; Set up tile to draw and loop
0C685 85 00                         STA temp
0C687 AA                            TAX
0C688 A8                            TAY
0C689                           
0C689                               -     
0C689                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C689 A5 00                             LDA temp
0C68B 8D 07 20                          STA PPU_DATA
0C68E                           
0C68E                                   ;; Check if we should draw noise next. Noise is drawn if:
0C68E                                   ;; - Screen mode is game screen
0C68E                                   ;; - Y between #$06 and #$19 (inclusive)
0C68E                                   ;; - X between #$02 and #$1D (inclusive)
0C68E                                   
0C68E                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C68E A5 01                             LDA temp+1
0C690 F0 1C                             BEQ +nextTileInRow
0C692                                   
0C692                                   ;; If Y < $6, skip the check
0C692 C0 06                             CPY #$06
0C694 90 18                             BCC +nextTileInRow
0C696                                   
0C696                                   ;; If X < $1, skip the check
0C696 E0 01                             CPX #$01
0C698 90 14                             BCC +nextTileInRow
0C69A                                   
0C69A                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C69A E0 1D                             CPX #$1D
0C69C D0 04                             BNE +
0C69E A9 00                                 LDA #$00
0C6A0 85 00                                 STA temp
0C6A2                                   +
0C6A2 B0 0A                             BCS +nextTileInRow
0C6A4                                   
0C6A4                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C6A4 20 73 C5                          JSR sub_GetRandomNumber
0C6A7 29 07                             AND #%00000111
0C6A9 18                                CLC
0C6AA 69 68                             ADC #$68
0C6AC 85 00                             STA temp
0C6AE                           
0C6AE                           +nextTileInRow:
0C6AE                                   
0C6AE                                   ;; Check if a row has been done. If not, draw the next
0C6AE E8                                INX
0C6AF E0 20                             CPX #$20
0C6B1 D0 D6                             BNE -
0C6B3                                   
0C6B3                                   ;; Go to the next row (if any left)
0C6B3 A2 00                             LDX #00
0C6B5 C8                                INY
0C6B6                                   
0C6B6                                   ;; If Y is 1A, skip noise tile check until done drawing
0C6B6 C0 1A                             CPY #$1A
0C6B8 D0 04                             BNE +
0C6BA A9 00                                 LDA #$00
0C6BC 85 01                                 STA temp+1
0C6BE                                   +
0C6BE                                   
0C6BE C0 1E                             CPY #$1E
0C6C0 D0 C7                         BNE -
0C6C2                           
0C6C2                               ;; Clear attribute table
0C6C2 A9 23                         LDA #$23
0C6C4 8D 06 20                      STA PPU_ADDR
0C6C7 A9 C0                         LDA #$C0
0C6C9 8D 06 20                      STA PPU_ADDR
0C6CC A9 00                         LDA #$00
0C6CE A2 40                         LDX #$40
0C6D0                               -
0C6D0 8D 07 20                          STA PPU_DATA
0C6D3 CA                                DEX
0C6D4 D0 FA                         BNE -
0C6D6                               
0C6D6 60                            RTS
0C6D7                           
0C6D7                           .include "game/subroutine/ColorizeBall.asm"
0C6D7                           
0C6D7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6D7                           ;;
0C6D7                           ;;  Subroutine: ColorizeBall
0C6D7                           ;;
0C6D7                           ;;  Applies the color set through ball_flags to the ball sprite.
0C6D7                           ;;  Expects ball_flags to be in the accumulator
0C6D7                           ;;
0C6D7                           
0C6D7                           
0C6D7                           sub_ColorizeBall:
0C6D7                           
0C6D7                               ;; Get color from ball_flags
0C6D7 4A                            LSR
0C6D8 4A                            LSR
0C6D9 4A                            LSR
0C6DA 4A                            LSR
0C6DB 4A                            LSR
0C6DC AA                            TAX
0C6DD                           
0C6DD                               ;; Add new light color of ball to PPU palette
0C6DD A9 3F                         LDA #$3F
0C6DF 85 00                         STA temp
0C6E1 A9 11                         LDA #$11
0C6E3 85 01                         STA temp+1
0C6E5 BD 07 D2                      LDA tbl_BallColorLight,x
0C6E8 85 02                         STA temp+2
0C6EA 20 A3 D0                      JSR sub_WriteByteToPPUBuffer
0C6ED                               
0C6ED                               ;; Add new dark color of ball to PPU palette
0C6ED E6 01                         INC temp+1
0C6EF BD 01 D2                      LDA tbl_BallColorDark,x
0C6F2 85 02                         STA temp+2
0C6F4 20 A3 D0                      JSR sub_WriteByteToPPUBuffer
0C6F7                               
0C6F7 60                            RTS
0C6F8                           
0C6F8                           .include "game/subroutine/ColorsMatch.asm"
0C6F8                           
0C6F8                           ;; Subroutine to check if ball color matches colliding tile color
0C6F8                           
0C6F8                           sub_ColorsMatch:
0C6F8                               ;; Save tile color in temp variable
0C6F8 A5 42                         LDA colliding_tile
0C6FA 29 0E                         AND #%00001110
0C6FC 85 00                         STA temp
0C6FE                           
0C6FE                               ;; Get ball color
0C6FE A5 37                         LDA ball_flags
0C700 29 E0                         AND #%11100000
0C702 4A                            LSR
0C703 4A                            LSR
0C704 4A                            LSR
0C705 4A                            LSR
0C706                           
0C706                               ;; Compare with tile color
0C706 C5 00                         CMP temp
0C708 60                            RTS
0C709                           
0C709                           .include "game/subroutine/ConvertXYToTileType.asm"
0C709                           
0C709                           ;; Subroutine to convert the ball's position to a tile type
0C709                           ;; - Expects temp to be y-position of ball within game area
0C709                           ;; - Expects temp+1 to be x-position of ball within game area
0C709                           ;; - Puts result in accumulator and zp variable
0C709                           ;; - Corrupts X-register
0C709                           
0C709                           sub_ConvertXYToTileType:
0C709 A5 01                         LDA temp+1
0C70B 4A                            LSR
0C70C 4A                            LSR
0C70D 4A                            LSR
0C70E 4A                            LSR
0C70F 85 09                         STA temp+9
0C711 A5 00                         LDA temp
0C713 29 F0                         AND #%11110000
0C715 18                            CLC
0C716 65 09                         ADC temp+9
0C718 85 09                         STA temp+9
0C71A AA                            TAX
0C71B BD 00 04                      LDA tile_type, x
0C71E 85 42                         STA colliding_tile
0C720 60                            RTS
0C721                           
0C721                           .include "game/subroutine/DisableEnableRendering.asm"
0C721                           
0C721                           ;; Subroutines to disable or enable screen rendering
0C721                           
0C721                           sub_DisableRendering:
0C721                               ;; Force NMI skip, disable rendering
0C721 A9 01                     	LDA #$01
0C723 85 14                     	STA force_skip_nmi
0C725 20 9E C5                      JSR sub_WaitForVBlank
0C728 A5 12                         LDA soft_ppu_mask
0C72A 29 E7                         AND #%11100111
0C72C 8D 01 20                      STA PPU_MASK
0C72F 85 12                         STA soft_ppu_mask
0C731 20 9E C5                      JSR sub_WaitForVBlank
0C734 60                            RTS
0C735                           
0C735                           sub_EnableRendering:
0C735                               ;; Enable rendering
0C735 A9 00                     	LDA #$00
0C737 8D 05 20                  	STA PPU_SCROLL
0C73A 8D 05 20                  	STA PPU_SCROLL
0C73D 20 9E C5                      JSR sub_WaitForVBlank
0C740 85 14                     	STA force_skip_nmi
0C742 A5 12                         LDA soft_ppu_mask
0C744 09 18                         ORA #%00011000
0C746 85 12                         STA soft_ppu_mask
0C748 8D 01 20                      STA PPU_MASK
0C74B 20 9E C5                      JSR sub_WaitForVBlank
0C74E 60                            RTS
0C74F                           
0C74F                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C74F                           
0C74F                           ;; Draw a tile from the logo on the intro screen
0C74F                           sub_drawIntroScreenLogoTile:
0C74F B9 E9 D0                      LDA tbl_IntroScreenLogoChr,y
0C752 C9 60                         CMP #$60
0C754 D0 08                         BNE +
0C756 20 73 C5                          JSR sub_GetRandomNumber
0C759 29 07                             AND #$07
0C75B 18                                CLC
0C75C 69 60                             ADC #$60
0C75E                               +
0C75E 8D 07 20                      STA PPU_DATA
0C761 60                            RTS
0C762                           
0C762                           .include "game/subroutine/DrawMoveTile.asm"
0C762                           
0C762                           ;; Draw the move tile as follows:
0C762                           ;;
0C762                           ;;  1 2
0C762                           ;;  3 4 5
0C762                           ;;    6 7
0C762                           ;;
0C762                           ;; (1,2,3,4) is the move block itself
0C762                           ;; (5,6,7) are shades unless that tile is solid
0C762                           
0C762                           ;; X holds the move block sprite slot
0C762                           
0C762                           sub_DrawMoveTile:
0C762                           
0C762                               ;; Get tile type index from sprite x and y values
0C762                               ;; and store it in a temp variable
0C762 BD 78 03                      LDA move_block_x,x
0C765 18                            CLC
0C766 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C768 4A                            LSR
0C769 4A                            LSR
0C76A 4A                            LSR
0C76B 4A                            LSR
0C76C 85 09                         STA temp+9
0C76E BD 7C 03                      LDA move_block_y,x
0C771 18                            CLC
0C772 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C774 29 F0                         AND #%11110000
0C776 18                            CLC
0C777 65 09                         ADC temp+9
0C779 85 09                         STA temp+9
0C77B A8                            TAY
0C77C                               
0C77C                               ;; Add move tile data on the new tile location
0C77C BD 84 03                      LDA move_block_tile_type,x
0C77F 99 00 04                      STA tile_type,y
0C782                           
0C782                               ;; Draw the original tile type in the ppu buffer
0C782                               ;; - get PPU address to write to (temp, temp+1)
0C782 8A                            TXA
0C783 48                            PHA
0C784 A6 09                         LDX temp+9
0C786 20 2B CA                      JSR sub_GetPPUAddrFromYXIndex
0C789 68                            PLA
0C78A AA                            TAX
0C78B                               
0C78B                               ;; - based on color, select tile 42 or 4A for top left
0C78B BD 88 03                      LDA move_block_flags,x
0C78E 4A                            LSR
0C78F 4A                            LSR
0C790 4A                            LSR
0C791 4A                            LSR
0C792 4A                            LSR
0C793 A8                            TAY
0C794 B9 C8 D9                      LDA tbl_MoveBlockTopLeftTile,y
0C797 85 08                         STA temp+8
0C799                               
0C799                               ;; - save palette ID in temp+6
0C799 98                            TYA
0C79A 4A                            LSR
0C79B 85 06                         STA temp+6
0C79D                               
0C79D                               ;; Prepare PPU buffer
0C79D A4 3A                         LDY ppu_buffer_pointer
0C79F A9 00                         LDA #$00
0C7A1 85 39                         STA ppu_buffer_update
0C7A3                               
0C7A3                               ;; Draw tile 1 (top left tile of move block)
0C7A3 20 84 C8                      JSR sub_DrawTileTemp018
0C7A6                           
0C7A6                               
0C7A6                               ;; Draw tile 2 (top right tile of move block)
0C7A6 E6 01                         INC temp+1
0C7A8 E6 08                         INC temp+8
0C7AA 20 84 C8                      JSR sub_DrawTileTemp018
0C7AD                           
0C7AD                               ;; Draw tile 3 (bottom left tile of move block)
0C7AD A5 01                         LDA temp+1
0C7AF 18                            CLC
0C7B0 69 1F                         ADC #$1F
0C7B2 85 01                         STA temp+1
0C7B4 A5 00                         LDA temp
0C7B6 69 00                         ADC #$00
0C7B8 85 00                         STA temp
0C7BA A5 08                         LDA temp+8
0C7BC 18                            CLC
0C7BD 69 0F                         ADC #$0F
0C7BF 85 08                         STA temp+8
0C7C1 20 84 C8                      JSR sub_DrawTileTemp018
0C7C4                           
0C7C4                               ;; Draw tile 4 (bottom right tile of move block)
0C7C4 E6 01                         INC temp+1
0C7C6 E6 08                         INC temp+8
0C7C8 20 84 C8                      JSR sub_DrawTileTemp018
0C7CB                           
0C7CB                               ;; Load tile type offset in X register
0C7CB 8A                            TXA
0C7CC 48                            PHA
0C7CD A6 09                         LDX temp+9
0C7CF                               
0C7CF                               ;; Load shade tile in temp+8
0C7CF A9 00                         LDA #$00
0C7D1 85 08                         STA temp+8
0C7D3                           
0C7D3                               ;; Draw tile 5 (right shade) unless tile is solid
0C7D3 E6 01                         INC temp+1
0C7D5                               
0C7D5 8A                            TXA
0C7D6 29 0F                         AND #%00001111
0C7D8 C9 0D                         CMP #$0D
0C7DA F0 0A                         BEQ +nextTile
0C7DC                           
0C7DC BD 01 04                      LDA tile_type+1,x
0C7DF 29 01                         AND #%00000001
0C7E1 D0 03                         BNE +nextTile
0C7E3                               
0C7E3 20 84 C8                      JSR sub_DrawTileTemp018
0C7E6                               
0C7E6                           
0C7E6                           +nextTile:
0C7E6                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C7E6 A5 01                         LDA temp+1
0C7E8 18                            CLC
0C7E9 69 1F                         ADC #$1F
0C7EB 85 01                         STA temp+1
0C7ED A5 00                         LDA temp
0C7EF 69 00                         ADC #$00
0C7F1 85 00                         STA temp
0C7F3                           
0C7F3 8A                            TXA
0C7F4 29 F0                         AND #%11110000
0C7F6 C9 90                         CMP #$90
0C7F8 F0 0A                         BEQ +nextTile
0C7FA                           
0C7FA BD 10 04                      LDA tile_type+16,x
0C7FD 29 01                         AND #%00000001
0C7FF D0 03                         BNE +nextTile
0C801                               
0C801 20 84 C8                      JSR sub_DrawTileTemp018
0C804                           
0C804                               
0C804                           +nextTile:
0C804                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C804 E6 01                         INC temp+1
0C806                           
0C806 8A                            TXA
0C807 29 F0                         AND #%11110000
0C809 C9 90                         CMP #$90
0C80B F0 11                         BEQ +setTileAttributes
0C80D                               
0C80D 8A                            TXA
0C80E 29 0F                         AND #%00001111
0C810 C9 0D                         CMP #$0D
0C812 F0 0A                         BEQ +setTileAttributes
0C814                               
0C814 BD 11 04                      LDA tile_type+17,x
0C817 29 01                         AND #%00000001
0C819 D0 03                         BNE +setTileAttributes
0C81B                               
0C81B 20 84 C8                      JSR sub_DrawTileTemp018
0C81E                               
0C81E                           
0C81E                           +setTileAttributes:
0C81E                               ;; Update attribute table accordingly through ppu buffer
0C81E                               ;; - PPU buffer high byte
0C81E 20 35 D0                      JSR sub_SetTileAttributeAddress
0C821                           
0C821 8A                            TXA
0C822 29 10                         AND #%00010000
0C824 F0 05                         BEQ +        
0C826 A9 F0                             LDA #%11110000
0C828 4C 2D C8                          JMP ++
0C82B                               +
0C82B A9 0F                         LDA #%00001111
0C82D                               ++
0C82D 85 02                         STA temp+2
0C82F                               
0C82F 8A                            TXA
0C830 29 01                         AND #%00000001
0C832 F0 07                         BEQ +
0C834 A5 02                             LDA temp+2
0C836 09 CC                             ORA #%11001100
0C838 4C 3F C8                          JMP ++
0C83B                               +
0C83B A5 02                         LDA temp+2
0C83D 09 33                         ORA #%00110011
0C83F                               ++
0C83F 85 02                         STA temp+2
0C841                               
0C841 C9 FC                         CMP #%11111100
0C843 F0 22                         BEQ +continue
0C845                               
0C845 C9 F3                         CMP #%11110011
0C847 D0 09                         BNE +
0C849 A5 06                             LDA temp+6
0C84B 0A                                ASL
0C84C 0A                                ASL
0C84D 85 06                             STA temp+6
0C84F 4C 67 C8                          JMP +continue
0C852                               +
0C852                               
0C852 C9 CF                         CMP #%11001111
0C854 D0 0A                         BNE +
0C856 A6 06                             LDX temp+6
0C858 BD 6B D9                          LDA tbl_Times16,x
0C85B 85 06                             STA temp+6
0C85D 4C 67 C8                          JMP +continue
0C860                               +
0C860                               
0C860 A6 06                         LDX temp+6
0C862 BD 7B D9                      LDA tbl_Times64,x
0C865 85 06                         STA temp+6
0C867                                   
0C867                           +continue:
0C867 A5 00                         LDA temp
0C869 38                            SEC
0C86A E9 C0                         SBC #$C0
0C86C AA                            TAX
0C86D BD A0 04                      LDA tile_attributes,x
0C870 25 02                         AND temp+2
0C872 05 06                         ORA temp+6
0C874 9D A0 04                      STA tile_attributes,x
0C877 99 00 03                      STA ppu_buffer,y
0C87A C8                            INY
0C87B                           
0C87B                               ;; Restore original X
0C87B 68                            PLA
0C87C AA                            TAX
0C87D                               
0C87D                               ;; Update PPU buffer
0C87D 84 3A                         STY ppu_buffer_pointer
0C87F A9 01                         LDA #$01
0C881 85 39                         STA ppu_buffer_update
0C883                           
0C883                               ;; Return
0C883 60                            RTS
0C884                           
0C884                           .include "game/subroutine/DrawTileTemp018.asm"
0C884                           
0C884                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C884                           
0C884                           sub_DrawTileTemp018:
0C884 A5 00                         LDA temp
0C886 99 00 03                      STA ppu_buffer,y
0C889 C8                            INY
0C88A A5 01                         LDA temp+1
0C88C 99 00 03                      STA ppu_buffer,y
0C88F C8                            INY
0C890 A5 08                         LDA temp+8
0C892 99 00 03                      STA ppu_buffer,y
0C895 C8                            INY
0C896 60                            RTS
0C897                           
0C897                           .include "game/subroutine/EvaluateTileType.asm"
0C897                           
0C897                           ;; Subroutine to evaluate the colliding tile type and take its
0C897                           ;; corresponding action (move block, kill player, ...)
0C897                           ;; - Expects X-register to be the tile_type offset
0C897                           ;; - Uses zp variable colliding_tile
0C897                           
0C897                           sub_EvaluateTileType:
0C897                           
0C897                               ;; Check if collided tile is a color block
0C897 A5 42                         LDA colliding_tile
0C899 29 80                         AND #IS_COLOR_BLOCK
0C89B D0 03                         BNE +
0C89D 4C 06 C9                          JMP +checkIfPaintBlock
0C8A0                               +
0C8A0                               
0C8A0                               ;; It's a color block. Check if the colors match
0C8A0 20 F8 C6                      JSR sub_ColorsMatch
0C8A3 F0 06                         BEQ +
0C8A5                                   ;; Colors don't match
0C8A5                                   ;; Play bounce sound effect
0C8A5 A2 02                             LDX #SFX_BOUNCE
0C8A7 20 B0 CE                          JSR sub_PreloadSfxFromX
0C8AA                                   
0C8AA                                   ;; Return
0C8AA 60                                RTS
0C8AB                               +
0C8AB                           
0C8AB                               ;; Colors match; destroy color block
0C8AB                               
0C8AB                               ;; Convert the metatile offset value (which is in the X register)
0C8AB                               ;; to its corresponding address in PPU
0C8AB 20 2B CA                      JSR sub_GetPPUAddrFromYXIndex
0C8AE                           
0C8AE                               ;; Remove color block from screen by drawing a total
0C8AE                               ;; of 7 tiles over it (shade included)
0C8AE 20 BF CE                      JSR sub_RemoveBlockFromScreen
0C8B1                               
0C8B1                               ;; - Load destruction animation on tile
0C8B1                               ;; Get most recent slot for explosion    
0C8B1 8A                            TXA
0C8B2 85 02                         STA temp+2
0C8B4 A6 3B                         LDX explosion_pointer
0C8B6                           
0C8B6                               ;; If 0, use max pointer value
0C8B6 D0 02                         BNE +
0C8B8 A2 04                             LDX #MAX_ANIMATIONS
0C8BA                               +
0C8BA                           
0C8BA                               ;; Decrease pointer by one
0C8BA CA                            DEX
0C8BB 86 3B                         STX explosion_pointer
0C8BD                           
0C8BD                               ;; Load explosion data into RAM
0C8BD A9 00                         LDA #$00
0C8BF 9D 64 03                      STA explosion_currentframe,x
0C8C2                           
0C8C2 A9 04                         LDA #ANIMATION_SPEED
0C8C4 9D 60 03                      STA explosion_timer,x
0C8C7                           
0C8C7 A5 02                         LDA temp+2
0C8C9 29 0F                         AND #%00001111
0C8CB A8                            TAY
0C8CC B9 6B D9                      LDA tbl_Times16,y
0C8CF 18                            CLC
0C8D0 69 0E                         ADC #$0E
0C8D2 9D 6C 03                      STA explosion_x,x
0C8D5                           
0C8D5 A5 02                         LDA temp+2
0C8D7 29 F0                         AND #%11110000
0C8D9 18                            CLC
0C8DA 69 29                         ADC #$29
0C8DC 9D 70 03                      STA explosion_y,x
0C8DF                           
0C8DF A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C8E1 9D 68 03                      STA explosion_attributes,x
0C8E4 A9 01                         LDA #$01
0C8E6 9D 74 03                      STA explosion_active,x
0C8E9                           
0C8E9 A5 02                         LDA temp+2
0C8EB AA                            TAX
0C8EC                               
0C8EC                               
0C8EC                               ;; - Write #$00 in tile type ram (makes not-solid)
0C8EC A9 00                         LDA #$00
0C8EE 9D 00 04                      STA tile_type, x
0C8F1                           
0C8F1                           
0C8F1                               ;; Add (80 + level number) to score
0C8F1 A5 41                         LDA current_level
0C8F3 18                            CLC
0C8F4 69 51                         ADC #81
0C8F6 20 A4 C5                      JSR sub_AddAccumulatorToScore
0C8F9                           
0C8F9                           
0C8F9                               ;; Play thud sound effect
0C8F9 A2 01                         LDX #SFX_THUD
0C8FB 20 B0 CE                      JSR sub_PreloadSfxFromX
0C8FE                           
0C8FE                           
0C8FE                               ;; - If there are no color blocks left:
0C8FE                               ;;   - Initiate level-win state
0C8FE C6 43                         DEC blocks_left
0C900 D0 03                         BNE +
0C902 4C CA C4                          JMP lbl_LevelWin
0C905                               +
0C905                               
0C905 60                            RTS
0C906                           
0C906                           
0C906                           
0C906                           +checkIfPaintBlock:
0C906                           
0C906                               ;; Check if collided tile is a paint block
0C906 A5 42                         LDA colliding_tile
0C908 29 20                         AND #IS_PAINT_BLOCK
0C90A F0 1F                         BEQ +checkIfDeathBlock
0C90C                                   ;; It's a paint block. Update ball color
0C90C                                   ;; Save x-register
0C90C 8A                                TXA
0C90D 48                                PHA
0C90E                           
0C90E                                   ;; Get tile color
0C90E A5 42                             LDA colliding_tile
0C910 29 0E                             AND #%00001110
0C912 0A                                ASL
0C913 0A                                ASL
0C914 0A                                ASL
0C915 0A                                ASL
0C916 85 00                             STA temp
0C918                           
0C918                                   ;; Apply tile color to ball
0C918 A5 37                             LDA ball_flags
0C91A 29 1F                             AND #%00011111
0C91C 05 00                             ORA temp
0C91E 85 37                             STA ball_flags
0C920 20 D7 C6                          JSR sub_ColorizeBall
0C923                           
0C923                                   ;; Play bounce sound effect
0C923 A2 02                             LDX #SFX_BOUNCE
0C925 20 B0 CE                          JSR sub_PreloadSfxFromX
0C928                           
0C928                                   ;; Restore x-register
0C928 68                                PLA
0C929 AA                                TAX
0C92A                           
0C92A                                   ;; Return
0C92A 60                                RTS
0C92B                                   
0C92B                                   
0C92B                                   
0C92B                           +checkIfDeathBlock:
0C92B                           
0C92B                               ;; Check if collided tile is a death block
0C92B A5 42                         LDA colliding_tile
0C92D 29 10                         AND #IS_DEATH_BLOCK
0C92F F0 3D                         BEQ +checkIfMoveBlock
0C931                           
0C931                                   ;; It is a death block
0C931                                   ;; Freeze and kill player
0C931 A5 37                             LDA ball_flags
0C933 09 05                             ORA #%00000101
0C935 85 37                             STA ball_flags
0C937                                   
0C937                                   ;; Get free explosion slot
0C937 A6 3B                             LDX explosion_pointer
0C939 D0 02                             BNE +
0C93B A2 04                                 LDX #MAX_ANIMATIONS
0C93D                                   +
0C93D CA                                DEX
0C93E 86 3B                             STX explosion_pointer
0C940                           
0C940                                   ;; Load explosion data into RAM
0C940 A9 00                             LDA #$00
0C942 9D 64 03                          STA explosion_currentframe,x
0C945                           
0C945 A9 04                             LDA #ANIMATION_SPEED
0C947 9D 60 03                          STA explosion_timer,x
0C94A                           
0C94A A5 17                             LDA ball_xpos_hi
0C94C 38                                SEC
0C94D E9 08                             SBC #$08
0C94F 9D 6C 03                          STA explosion_x,x
0C952                           
0C952 A5 19                             LDA ball_ypos_hi
0C954 38                                SEC
0C955 E9 06                             SBC #$06
0C957 9D 70 03                          STA explosion_y,x
0C95A                           
0C95A A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C95C 9D 68 03                          STA explosion_attributes,x
0C95F                           
0C95F A9 01                             LDA #$01
0C961 9D 74 03                          STA explosion_active,x
0C964                                   
0C964                                   ;; Play explosion sound effect
0C964 A2 00                             LDX #SFX_EXPLOSION
0C966 20 B0 CE                          JSR sub_PreloadSfxFromX
0C969                           
0C969                                   ;; Set kill timer
0C969 A9 60                             LDA #$60
0C96B 85 40                             STA kill_timer
0C96D                           
0C96D                                   ;; Return
0C96D 60                                RTS
0C96E                           
0C96E                           
0C96E                           
0C96E                           +checkIfMoveBlock:
0C96E                           
0C96E                               ;; Check if collided tile is a move block
0C96E A5 42                         LDA colliding_tile
0C970 29 40                         AND #IS_MOVE_BLOCK
0C972 D0 06                         BNE +
0C974                                   ;; Tile is not a move block
0C974                                   ;; Therefore, it is a solid wall
0C974                                   
0C974                                   ;; Play bounce sound effect
0C974 A2 02                             LDX #SFX_BOUNCE
0C976 20 B0 CE                          JSR sub_PreloadSfxFromX
0C979                           
0C979                                   ;; Return
0C979 60                                RTS
0C97A                               +
0C97A                           
0C97A                               ;; It is a move block. Check if colors match
0C97A 20 F8 C6                      JSR sub_ColorsMatch
0C97D F0 06                         BEQ +
0C97F                                   ;; Colors do not match
0C97F                                   ;; Play bounce sound effect
0C97F A2 02                             LDX #SFX_BOUNCE
0C981 20 B0 CE                          JSR sub_PreloadSfxFromX
0C984                           
0C984                                   ;; Return
0C984 60                                RTS
0C985                               +
0C985                           
0C985                               ;; Colors match
0C985                               ;; - Check if next tile is within the playground
0C985                               ;; (push X onto stack as well)
0C985 8A                            TXA
0C986 48                            PHA
0C987 18                            CLC
0C988 65 36                         ADC move_block_space_to_check
0C98A AA                            TAX
0C98B                               
0C98B 29 0F                         AND #%00001111
0C98D C9 0E                         CMP #$0E
0C98F 90 03                         BCC +
0C991 4C 05 CA                          JMP +dontMoveBlock
0C994                               +
0C994 8A                            TXA
0C995 29 F0                         AND #%11110000
0C997 C9 A0                         CMP #$A0
0C999 D0 03                         BNE +
0C99B 4C 05 CA                          JMP +dontMoveBlock
0C99E                               +
0C99E C9 F0                         CMP #$F0
0C9A0 D0 03                         BNE +
0C9A2 4C 05 CA                          JMP +dontMoveBlock
0C9A5                               +
0C9A5                               
0C9A5                               ;; Check if the next tile is solid
0C9A5 BD 00 04                      LDA tile_type,x
0C9A8 29 01                         AND #TILE_IS_SOLID
0C9AA F0 03                         BEQ +
0C9AC 4C 05 CA                          JMP +dontMoveBlock
0C9AF                               +
0C9AF                               
0C9AF                               ;; Move block has room to move
0C9AF                               ;; Pull original X from stack
0C9AF 68                            PLA
0C9B0 AA                            TAX        
0C9B1                               
0C9B1                               ;; Add the tiles that need updating to ppu buffer, and
0C9B1                               ;; update attribute table accordingly through ppu buffer
0C9B1 20 2B CA                      JSR sub_GetPPUAddrFromYXIndex
0C9B4 20 BF CE                      JSR sub_RemoveBlockFromScreen
0C9B7                           
0C9B7                               ;; Store original tile type in temp variable
0C9B7 BD 00 04                      LDA tile_type,x
0C9BA 85 08                         STA temp+8
0C9BC                           
0C9BC                               ;; Write #$00 in tile type ram (makes not-solid)
0C9BC A9 00                         LDA #$00
0C9BE 9D 00 04                      STA tile_type,x
0C9C1                           
0C9C1                               ;; Add move tile sprite over the original tile
0C9C1                               ;; - Store x in temp variable
0C9C1 86 03                         STX temp+3
0C9C3                               
0C9C3                               ;; - Update move block pointer
0C9C3 A6 3C                         LDX move_block_pointer
0C9C5 D0 02                         BNE +
0C9C7 A2 04                             LDX #MAX_ANIMATIONS
0C9C9                               +
0C9C9 CA                            DEX
0C9CA 86 3C                         STX move_block_pointer
0C9CC                           
0C9CC                               ;; = Set move block tile type
0C9CC A5 08                         LDA temp+8
0C9CE 9D 84 03                      STA move_block_tile_type,x
0C9D1                           
0C9D1                               ;; - Set move block X position
0C9D1 A5 03                         LDA temp+3
0C9D3 29 0F                         AND #%00001111
0C9D5 A8                            TAY
0C9D6 C8                            INY
0C9D7 B9 6B D9                      LDA tbl_Times16,y
0C9DA 9D 78 03                      STA move_block_x,x
0C9DD                               
0C9DD                               ;; - Set move block Y position
0C9DD A5 03                         LDA temp+3
0C9DF 29 F0                         AND #%11110000
0C9E1 18                            CLC
0C9E2 69 30                         ADC #$30
0C9E4 9D 7C 03                      STA move_block_y,x
0C9E7 DE 7C 03                      DEC move_block_y,x
0C9EA                               
0C9EA                               ;; - Set timer to 16 (+1) frames
0C9EA A9 11                         LDA #$11
0C9EC 9D 80 03                      STA move_block_timer,x
0C9EF                               
0C9EF                               ;; - Set move direction
0C9EF A5 36                         LDA move_block_space_to_check
0C9F1 29 81                         AND #%10000001
0C9F3 18                            CLC
0C9F4 2A                            ROL
0C9F5 69 00                         ADC #$00
0C9F7 85 04                         STA temp+4
0C9F9                               
0C9F9                               ;; - Set block color as ball color and add direction
0C9F9 A5 37                         LDA ball_flags
0C9FB 29 E0                         AND #BALL_COLOR
0C9FD 05 04                         ORA temp+4
0C9FF 9D 88 03                      STA move_block_flags,x
0CA02                               
0CA02                               ;; - Restore original X
0CA02 A6 03                         LDX temp+3
0CA04                           
0CA04                               ;; Return
0CA04 60                            RTS
0CA05                           
0CA05                           
0CA05                           ;; Do not move the move block
0CA05                           +dontMoveBlock:
0CA05                           
0CA05                               ;; Play bounce sound effect
0CA05 A2 02                         LDX #SFX_BOUNCE
0CA07 20 B0 CE                      JSR sub_PreloadSfxFromX
0CA0A                           
0CA0A                               ;; Restore X from stack
0CA0A 68                            PLA
0CA0B AA                            TAX
0CA0C                               
0CA0C                               ;; Return
0CA0C 60                            RTS
0CA0D                           
0CA0D                           .include "game/subroutine/FlashEffect.asm"
0CA0D                           
0CA0D                           ;; Apply flashing light effect to background color
0CA0D                           sub_FlashEffect:
0CA0D A2 00                         LDX #$00
0CA0F 86 01                         STX temp+1
0CA11 A9 3F                         LDA #$3F
0CA13 85 00                         STA temp
0CA15                           
0CA15                               -flashLoop:
0CA15 BD D9 D9                          LDA tbl_BackgroundFade,x
0CA18 85 02                             STA temp+2
0CA1A 20 A3 D0                          JSR sub_WriteByteToPPUBuffer
0CA1D A0 03                             LDY #$03
0CA1F                                   -
0CA1F 20 95 C5                              JSR sub_WaitForNMI
0CA22 88                                    DEY
0CA23 D0 FA                             BNE -
0CA25 E8                                INX
0CA26 E0 0A                             CPX #$0A
0CA28 D0 EB                         BNE -flashLoop
0CA2A                               
0CA2A 60                            RTS
0CA2B                           
0CA2B                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0CA2B                           
0CA2B                           ;; Get the PPU address from YX index
0CA2B                           ;; - Expects YX index (aka tile offset) to be in the X register
0CA2B                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0CA2B                           
0CA2B                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0CA2B                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0CA2B                           
0CA2B                           sub_GetPPUAddrFromYXIndex:
0CA2B 8A                            TXA
0CA2C 29 C0                         AND #%11000000
0CA2E 18                            CLC
0CA2F 2A                            ROL
0CA30 2A                            ROL
0CA31 2A                            ROL
0CA32 69 20                         ADC #$20
0CA34 85 00                         STA temp
0CA36                               
0CA36 8A                            TXA
0CA37 29 0F                         AND #%00001111
0CA39 0A                            ASL
0CA3A 85 01                         STA temp+1
0CA3C                               
0CA3C 8A                            TXA
0CA3D 29 30                         AND #%00110000
0CA3F 0A                            ASL
0CA40 0A                            ASL
0CA41 18                            CLC
0CA42 65 01                         ADC temp+1
0CA44 85 01                         STA temp+1
0CA46                               
0CA46 A5 00                         LDA temp
0CA48 69 00                         ADC #$00
0CA4A 85 00                         STA temp
0CA4C                               
0CA4C A5 01                         LDA temp+1
0CA4E 18                            CLC
0CA4F 69 C2                         ADC #$C2
0CA51 85 01                         STA temp+1
0CA53                               
0CA53 A5 00                         LDA temp
0CA55 69 00                         ADC #$00
0CA57 85 00                         STA temp
0CA59                           
0CA59 60                            RTS
0CA5A                           
0CA5A                           .include "game/subroutine/InitiateNudge.asm"
0CA5A                           
0CA5A                           ;; Tell ball to nudge
0CA5A                           sub_InitiateNudge:
0CA5A 85 37                         STA ball_flags
0CA5C A9 05                         LDA #NUDGE_FRAMES
0CA5E 85 3E                         STA nudge_timer
0CA60 60                            RTS
0CA61                           
0CA61                           .include "game/subroutine/JumpToPointer.asm"
0CA61                           
0CA61                           ;; Helper subroutine to JSR to a variable pointer address
0CA61                           sub_JumpToPointer:
0CA61 6C 0C 00                      JMP (pointer)
0CA64                               ;RTS must be handled by the routine (pointer) jumps to
0CA64                           
0CA64                           .include "game/subroutine/LoadGameScreen.asm"
0CA64                           
0CA64                           ;; Load the game screen, based on level number
0CA64                           sub_LoadGameScreen:
0CA64                           
0CA64                               ;; Clear the screen
0CA64 20 6C C6                      JSR sub_ClearScreen
0CA67                               
0CA67                               ;; Clear collision and attribute data; reset blocks left in the process
0CA67 A2 00                         LDX #$00
0CA69 8A                            TXA
0CA6A 85 43                         STA blocks_left
0CA6C                               -
0CA6C 9D 00 04                          STA tile_type,x
0CA6F E8                                INX
0CA70 D0 FA                         BNE -
0CA72                               
0CA72                               ;; Get pointer from current level
0CA72 A6 41                         LDX current_level
0CA74 BD 1D D9                      LDA tbl_lvl_layout_lo,x
0CA77 85 0C                         STA pointer
0CA79 BD 03 D9                      LDA tbl_lvl_layout_hi,x
0CA7C 85 0D                         STA pointer+1
0CA7E                           
0CA7E                               ;; Set up the loop
0CA7E A0 00                         LDY #$00
0CA80                           -drawRowColumnLoop:
0CA80                           
0CA80                               ;; Load (x,y) of current set of tiles
0CA80 B1 0C                         LDA (pointer),y
0CA82                           
0CA82                               ;; Check if level is done; if so, skip the loop
0CA82 C9 FF                         CMP #LEVEL_END
0CA84 D0 03                         BNE +
0CA86 4C CF CB                          JMP +doneLevelLoad
0CA89                               +
0CA89                           
0CA89                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CA89 85 00                         STA temp
0CA8B C8                            INY
0CA8C B1 0C                         LDA (pointer),y
0CA8E 85 01                         STA temp+1
0CA90                               
0CA90                               ;; Convert (x,y) to PPU address
0CA90                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CA90 A5 00                         LDA temp
0CA92 29 0F                         AND #%00001111
0CA94 4A                            LSR
0CA95 4A                            LSR
0CA96 09 20                         ORA #$20
0CA98 85 02                         STA temp+2
0CA9A                               
0CA9A                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CA9A A5 00                         LDA temp
0CA9C 29 F0                         AND #%11110000
0CA9E 4A                            LSR
0CA9F 4A                            LSR
0CAA0 4A                            LSR
0CAA1 85 03                         STA temp+3
0CAA3                               
0CAA3 A5 00                         LDA temp
0CAA5 29 03                         AND #%00000011
0CAA7 AA                            TAX
0CAA8 BD 7B D9                      LDA tbl_Times64,x
0CAAB 18                            CLC
0CAAC 65 03                         ADC temp+3
0CAAE 18                            CLC
0CAAF 69 C2                         ADC #$C2
0CAB1 85 03                         STA temp+3
0CAB3                               
0CAB3                               ;; Add carry to temp+2
0CAB3 A5 02                         LDA temp+2
0CAB5 69 00                         ADC #$00
0CAB7 85 02                         STA temp+2
0CAB9                           
0CAB9                               ;; Convert tile data to loop count and tile type
0CAB9                               ;; temp+4 = color
0CAB9 A5 01                         LDA temp+1
0CABB 29 07                         AND #%00000111
0CABD 85 04                         STA temp+4
0CABF                               
0CABF                               ;; If color = 7, this is a wall
0CABF C9 07                         CMP #%00000111
0CAC1 F0 12                         BEQ +wallHack
0CAC3                                   
0CAC3                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CAC3 29 01                             AND #%00000001
0CAC5 F0 02                             BEQ +
0CAC7 A9 05                                 LDA #$05
0CAC9                                   +
0CAC9 85 07                             STA temp+7
0CACB                                
0CACB                                   ;; temp+5 = tile type
0CACB A5 01                             LDA temp+1
0CACD 4A                                LSR
0CACE 4A                                LSR
0CACF 4A                                LSR
0CAD0 29 03                             AND #%00000011
0CAD2 4C DB CA                          JMP +setTileType
0CAD5                               +wallHack:
0CAD5                               
0CAD5                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CAD5 A9 00                         LDA #$00
0CAD7 85 07                         STA temp+7
0CAD9 A9 04                         LDA #$04
0CADB                           
0CADB                           +setTileType:    
0CADB 85 05                         STA temp+5
0CADD                               
0CADD                               ;; X = tile offset
0CADD 18                            CLC
0CADE 65 07                         ADC temp+7
0CAE0 AA                            TAX
0CAE1                               
0CAE1                               ;; temp+6 = number of tiles
0CAE1 A5 01                         LDA temp+1
0CAE3 29 60                         AND #%01100000
0CAE5 4A                            LSR
0CAE6 4A                            LSR
0CAE7 4A                            LSR
0CAE8 4A                            LSR
0CAE9 4A                            LSR
0CAEA 85 06                         STA temp+6
0CAEC                               
0CAEC                               ;; Translate (x,y) to (y,x) for tile RAM
0CAEC A5 00                         LDA temp
0CAEE 0A                            ASL
0CAEF 0A                            ASL
0CAF0 0A                            ASL
0CAF1 0A                            ASL
0CAF2 85 08                         STA temp+8
0CAF4 A5 00                         LDA temp
0CAF6 4A                            LSR
0CAF7 4A                            LSR
0CAF8 4A                            LSR
0CAF9 4A                            LSR
0CAFA 05 08                         ORA temp+8
0CAFC 85 00                         STA temp
0CAFE                               
0CAFE                               ;; Set up loop
0CAFE 98                            TYA
0CAFF 48                            PHA
0CB00 A4 06                         LDY temp+6
0CB02                           
0CB02                               -drawTileLoop:
0CB02                                   ;; Write PPU address
0CB02 2C 02 20                          BIT PPU_STATUS
0CB05 A5 02                             LDA temp+2
0CB07 8D 06 20                          STA PPU_ADDR
0CB0A A5 03                             LDA temp+3
0CB0C 8D 06 20                          STA PPU_ADDR
0CB0F                                   
0CB0F                                   ;; Write first and second tile
0CB0F BD 7F D9                          LDA tbl_GametileTopLeft,x
0CB12 8D 07 20                          STA PPU_DATA
0CB15 BD 89 D9                          LDA tbl_GametileTopRight,x
0CB18 8D 07 20                          STA PPU_DATA
0CB1B                                   
0CB1B                                   ;; Update PPU address
0CB1B 2C 02 20                          BIT PPU_STATUS
0CB1E A5 02                             LDA temp+2
0CB20 8D 06 20                          STA PPU_ADDR
0CB23 A5 03                             LDA temp+3
0CB25 18                                CLC
0CB26 69 20                             ADC #$20
0CB28 8D 06 20                          STA PPU_ADDR
0CB2B                                   
0CB2B                                   ;; Write third and fourth tile
0CB2B BD 93 D9                          LDA tbl_GametileBottomLeft,x
0CB2E 8D 07 20                          STA PPU_DATA
0CB31 BD 9D D9                          LDA tbl_GametileBottomRight,x
0CB34 8D 07 20                          STA PPU_DATA
0CB37                           
0CB37                                   ;; Push x-register to stack
0CB37 8A                                TXA
0CB38 48                                PHA
0CB39                           
0CB39                                   ;; Update tile RAM (aka collision table)
0CB39 A6 05                             LDX temp+5
0CB3B BD A7 D9                          LDA tbl_GameTileRamByte,x
0CB3E 05 04                             ORA temp+4
0CB40 0A                                ASL
0CB41 09 01                             ORA #%00000001
0CB43 A6 00                             LDX temp
0CB45 9D 00 04                          STA tile_type,x
0CB48                           
0CB48                                   ;; Check if shade 1 should be drawn
0CB48 E8                                INX
0CB49 BD 00 04                          LDA tile_type,x
0CB4C D0 05                             BNE +
0CB4E A9 00                                 LDA #$00
0CB50 8D 07 20                              STA PPU_DATA
0CB53                                   +
0CB53                                   
0CB53                                   ;; Check if shade 2 should be drawn
0CB53 A5 03                             LDA temp+3
0CB55 18                                CLC
0CB56 69 41                             ADC #$41
0CB58 85 03                             STA temp+3
0CB5A A5 02                             LDA temp+2
0CB5C 69 00                             ADC #$00
0CB5E 85 02                             STA temp+2
0CB60                                   
0CB60 8A                                TXA
0CB61 18                                CLC
0CB62 69 0F                             ADC #$0F
0CB64 AA                                TAX
0CB65                                   
0CB65 BD 00 04                          LDA tile_type,x
0CB68 D0 0F                             BNE +
0CB6A A5 02                                 LDA temp+2
0CB6C 8D 06 20                              STA PPU_ADDR
0CB6F A5 03                                 LDA temp+3
0CB71 8D 06 20                              STA PPU_ADDR
0CB74 A9 00                                 LDA #$00
0CB76 8D 07 20                              STA PPU_DATA
0CB79                                   +
0CB79                           
0CB79                                   ;; Check if shade 3 should be drawn
0CB79 E8                                INX
0CB7A E6 03                             INC temp+3
0CB7C BD 00 04                          LDA tile_type,x
0CB7F D0 0F                             BNE +
0CB81 A5 02                                 LDA temp+2
0CB83 8D 06 20                              STA PPU_ADDR
0CB86 A5 03                                 LDA temp+3
0CB88 8D 06 20                              STA PPU_ADDR
0CB8B A9 00                                 LDA #$00
0CB8D 8D 07 20                              STA PPU_DATA
0CB90                                   +
0CB90                                   
0CB90                                   ;; Restore x-register from stack
0CB90 68                                PLA
0CB91 AA                                TAX
0CB92                                   
0CB92                                   ;; Reset pointer for next tile
0CB92 A5 03                             LDA temp+3
0CB94 38                                SEC
0CB95 E9 42                             SBC #$42
0CB97 85 03                             STA temp+3
0CB99 A5 02                             LDA temp+2
0CB9B E9 00                             SBC #$00
0CB9D 85 02                             STA temp+2
0CB9F                                   
0CB9F                                   ;; Draw next metatile in this loop (if any left)
0CB9F 88                                DEY
0CBA0 30 27                             BMI +doneDrawingRowColumn
0CBA2                                   
0CBA2                                   ;; Is it a row or a column?
0CBA2 A5 01                             LDA temp+1
0CBA4 10 17                             BPL +
0CBA6                                       ;; It is a column: move pointer down (+$40)
0CBA6 A5 03                                 LDA temp+3
0CBA8 18                                    CLC
0CBA9 69 40                                 ADC #$40
0CBAB 85 03                                 STA temp+3
0CBAD A5 02                                 LDA temp+2
0CBAF 69 00                                 ADC #$00
0CBB1 85 02                                 STA temp+2
0CBB3                                       
0CBB3                                       ;; Add 16 to temp (as a tile RAM pointer)
0CBB3 A5 00                                 LDA temp
0CBB5 18                                    CLC
0CBB6 69 10                                 ADC #$10
0CBB8 85 00                                 STA temp
0CBBA 4C C6 CB                              JMP +drawNextTile
0CBBD                                   +
0CBBD                                   
0CBBD                                   ;; It is a row: move pointer right (+$02)
0CBBD A5 03                             LDA temp+3
0CBBF 18                                CLC
0CBC0 69 02                             ADC #$02
0CBC2 85 03                             STA temp+3
0CBC4                                   
0CBC4                                   ;; Add 1 to temp (as a tile RAM pointer)
0CBC4 E6 00                             INC temp
0CBC6                           
0CBC6                               
0CBC6                               ;; Next tile in the row/column
0CBC6                                   +drawNextTile:
0CBC6 4C 02 CB                      JMP -drawTileLoop
0CBC9                           
0CBC9                               ;; Go to the next set of tiles
0CBC9                           +doneDrawingRowColumn:
0CBC9 68                            PLA
0CBCA A8                            TAY
0CBCB C8                            INY
0CBCC 4C 80 CA                      JMP -drawRowColumnLoop
0CBCF                           
0CBCF                           ;; Level loading is done
0CBCF                           +doneLevelLoad:
0CBCF                           
0CBCF                               ;; Count number of color blocks
0CBCF A2 A0                         LDX #160
0CBD1                               -
0CBD1 BD FF 03                          LDA tile_type-1,x
0CBD4 29 80                             AND #%10000000
0CBD6 F0 02                             BEQ +
0CBD8 E6 43                                 INC blocks_left
0CBDA                                   +
0CBDA CA                                DEX
0CBDB D0 F4                         BNE -
0CBDD                           
0CBDD                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CBDD A9 20                         LDA #$20
0CBDF 8D 06 20                      STA PPU_ADDR
0CBE2 A9 A2                         LDA #$A2
0CBE4 8D 06 20                      STA PPU_ADDR
0CBE7 A9 35                         LDA #$35
0CBE9 20 17 CE                      JSR sub_Draw28HorizontalTiles
0CBEC                           
0CBEC                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CBEC A9 23                         LDA #$23
0CBEE 8D 06 20                      STA PPU_ADDR
0CBF1 A9 42                         LDA #$42
0CBF3 8D 06 20                      STA PPU_ADDR
0CBF6 A9 31                         LDA #$31
0CBF8 20 17 CE                      JSR sub_Draw28HorizontalTiles
0CBFB                           
0CBFB                               ;; Left & right game bounds
0CBFB                               ;; Set PPU_ADDR and store in temp variables
0CBFB A9 20                         LDA #$20
0CBFD 85 00                         STA temp
0CBFF 8D 06 20                      STA PPU_ADDR
0CC02 A9 C1                         LDA #$C1
0CC04 85 01                         STA temp+1
0CC06 8D 06 20                      STA PPU_ADDR
0CC09                               
0CC09                               ;; Set vertical bound tile and set up loop
0CC09 A0 33                         LDY #$33
0CC0B A2 14                         LDX #20
0CC0D                               -
0CC0D                                   ;; Show left tile
0CC0D 8C 07 20                          STY PPU_DATA
0CC10                                   
0CC10                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CC10 A5 00                             LDA temp
0CC12 8D 06 20                          STA PPU_ADDR
0CC15 A5 01                             LDA temp+1
0CC17 18                                CLC
0CC18 69 1D                             ADC #29
0CC1A 85 01                             STA temp+1
0CC1C 8D 06 20                          STA PPU_ADDR
0CC1F                           
0CC1F                                   ;; Show right tile
0CC1F 8C 07 20                          STY PPU_DATA
0CC22                           
0CC22                                   ;; Check if we're done yet
0CC22 CA                                DEX
0CC23 F0 18                             BEQ +drawCorners
0CC25                                   
0CC25                                   ;; Not done yet: add 3 to low byte for next left bound
0CC25 A5 01                             LDA temp+1
0CC27 18                                CLC
0CC28 69 03                             ADC #3
0CC2A 85 01                             STA temp+1
0CC2C                                   
0CC2C                                   ;; Apply carry to high byte
0CC2C A5 00                             LDA temp
0CC2E 69 00                             ADC #$00
0CC30 85 00                             STA temp
0CC32                                   
0CC32                                   ;; Store next PPU_ADDR to draw at
0CC32 8D 06 20                          STA PPU_ADDR
0CC35 A5 01                             LDA temp+1
0CC37 8D 06 20                          STA PPU_ADDR
0CC3A 4C 0D CC                      JMP -
0CC3D                               
0CC3D                               
0CC3D                           
0CC3D                           +drawCorners:
0CC3D                               ;; Draw the corners of the playing field
0CC3D A9 20                         LDA #$20
0CC3F 8D 06 20                      STA PPU_ADDR
0CC42 A9 A1                         LDA #$A1
0CC44 8D 06 20                      STA PPU_ADDR
0CC47 A9 39                         LDA #$39
0CC49 8D 07 20                      STA PPU_DATA
0CC4C                           
0CC4C A9 20                         LDA #$20
0CC4E 8D 06 20                      STA PPU_ADDR
0CC51 A9 BE                         LDA #$BE
0CC53 8D 06 20                      STA PPU_ADDR
0CC56 A9 3A                         LDA #$3A
0CC58 8D 07 20                      STA PPU_DATA
0CC5B                               ;; (added background tile for Sprite-0 hit)
0CC5B A9 3F                         LDA #$3F
0CC5D 8D 07 20                      STA PPU_DATA
0CC60                           
0CC60 A9 23                         LDA #$23
0CC62 8D 06 20                      STA PPU_ADDR
0CC65 A9 41                         LDA #$41
0CC67 8D 06 20                      STA PPU_ADDR
0CC6A A9 36                         LDA #$36
0CC6C 8D 07 20                      STA PPU_DATA
0CC6F                           
0CC6F A9 23                         LDA #$23
0CC71 8D 06 20                      STA PPU_ADDR
0CC74 A9 5E                         LDA #$5E
0CC76 8D 06 20                      STA PPU_ADDR
0CC79 A9 34                         LDA #$34
0CC7B 8D 07 20                      STA PPU_DATA
0CC7E                           
0CC7E                           
0CC7E                               ;; Draw the hud labels
0CC7E A9 20                         LDA #$20
0CC80 8D 06 20                      STA PPU_ADDR
0CC83 A9 62                         LDA #$62
0CC85 8D 06 20                      STA PPU_ADDR
0CC88 A2 00                         LDX #$00
0CC8A                               -
0CC8A BD AC D9                          LDA tbl_HudText,x
0CC8D 8D 07 20                          STA PPU_DATA
0CC90 E8                                INX
0CC91 E0 1C                             CPX #28
0CC93 D0 F5                         BNE -
0CC95                           
0CC95                           
0CC95                               ;; Draw the current score
0CC95 A9 20                         LDA #$20
0CC97 8D 06 20                      STA PPU_ADDR
0CC9A A9 83                         LDA #$83
0CC9C 8D 06 20                      STA PPU_ADDR
0CC9F A2 00                         LDX #$00
0CCA1                               -
0CCA1 B5 20                             LDA ball_score,x
0CCA3 18                                CLC
0CCA4 69 01                             ADC #$01
0CCA6 8D 07 20                          STA PPU_DATA
0CCA9 E8                                INX
0CCAA E0 06                             CPX #$06
0CCAC D0 F3                         BNE -
0CCAE                           
0CCAE                           
0CCAE                               ;; Draw the level number
0CCAE                               ;; (with primitive HEX>DEC)
0CCAE A5 41                         LDA current_level
0CCB0 18                            CLC
0CCB1 69 01                         ADC #$01
0CCB3 85 01                         STA temp+1
0CCB5                               
0CCB5 C9 14                         CMP #20
0CCB7 B0 13                         BCS +tempIsTwo
0CCB9                               
0CCB9 C9 0A                         CMP #10
0CCBB B0 05                         BCS +tempIsOne
0CCBD                               
0CCBD A9 00                         LDA #$00
0CCBF 4C D3 CC                      JMP +setTemp
0CCC2                               
0CCC2                           +tempIsOne:
0CCC2 38                            SEC
0CCC3 E9 0A                         SBC #10
0CCC5 85 01                         STA temp+1
0CCC7 A9 01                         LDA #$01
0CCC9 4C D3 CC                      JMP +setTemp
0CCCC                               
0CCCC                           +tempIsTwo:
0CCCC 38                            SEC
0CCCD E9 14                         SBC #20
0CCCF 85 01                         STA temp+1
0CCD1 A9 02                         LDA #$02
0CCD3                           
0CCD3                           +setTemp:
0CCD3 85 00                         STA temp
0CCD5                               
0CCD5 E6 00                         INC temp
0CCD7 E6 01                         INC temp+1
0CCD9                               
0CCD9 A9 20                         LDA #$20
0CCDB 8D 06 20                      STA PPU_ADDR
0CCDE A9 8B                         LDA #$8B
0CCE0 8D 06 20                      STA PPU_ADDR
0CCE3 A5 00                         LDA temp
0CCE5 8D 07 20                      STA PPU_DATA
0CCE8 A5 01                         LDA temp+1
0CCEA 8D 07 20                      STA PPU_DATA
0CCED                           
0CCED                           
0CCED                               ;; Draw lives (presumes lives to be capped at 9)
0CCED A9 20                         LDA #$20
0CCEF 8D 06 20                      STA PPU_ADDR
0CCF2 A9 92                         LDA #$92
0CCF4 8D 06 20                      STA PPU_ADDR
0CCF7 A6 1F                         LDX ball_lives
0CCF9 E8                            INX
0CCFA 8E 07 20                      STX PPU_DATA
0CCFD                           
0CCFD                           
0CCFD                               ;; Set and draw bonus
0CCFD A9 07                         LDA #$07
0CCFF 85 2C                         STA ball_bonus
0CD01 A9 09                         LDA #$09
0CD03 85 2D                         STA ball_bonus+1
0CD05 85 2E                         STA ball_bonus+2
0CD07                               
0CD07 A9 20                         LDA #$20
0CD09 8D 06 20                      STA PPU_ADDR
0CD0C A9 9A                         LDA #$9A
0CD0E 8D 06 20                      STA PPU_ADDR
0CD11 A2 00                         LDX #$00
0CD13                               -
0CD13 B5 2C                             LDA ball_bonus,x
0CD15 18                                CLC
0CD16 69 01                             ADC #$01
0CD18 8D 07 20                          STA PPU_DATA
0CD1B E8                                INX
0CD1C E0 03                             CPX #$03
0CD1E D0 F3                         BNE -
0CD20                           
0CD20                           
0CD20                               ;; Set attribute data to RAM
0CD20                               
0CD20                               ;; Byte 0-7 of attribute ram should be #%10100000
0CD20 A2 00                         LDX #$00
0CD22 A9 A0                         LDA #$A0
0CD24                               -
0CD24 9D A0 04                          STA tile_attributes,x
0CD27 E8                                INX
0CD28 E0 08                             CPX #$08
0CD2A D0 F8                         BNE -
0CD2C                           
0CD2C                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CD2C                           
0CD2C                           -attributeLoop:
0CD2C                               ;; Reset current attribute value
0CD2C A9 00                         LDA #$00
0CD2E 85 02                         STA temp+2
0CD30                           
0CD30                               ;; Get first metatile in tile ram based on attribute index
0CD30                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CD30 8A                            TXA
0CD31                           
0CD31 38                            SEC
0CD32 E9 08                         SBC #$08
0CD34 85 01                         STA temp+1      ; attr - 8 (temp1)
0CD36 0A                            ASL             ; * 2
0CD37 85 00                         STA temp        ; temp = temp1 * 2
0CD39                           
0CD39 A5 01                         LDA temp+1      ; temp1
0CD3B 29 F8                         AND #%11111000  ; rounded down to 8's
0CD3D 0A                            ASL             ; * 2
0CD3E 18                            CLC
0CD3F 65 00                         ADC temp        ; + temp1 * 2
0CD41 85 00                         STA temp        ; first metatile
0CD43                           
0CD43                               ;; Store first metatile in y-register
0CD43 A8                            TAY
0CD44                           
0CD44                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CD44 8A                            TXA
0CD45 29 07                         AND #%00000111
0CD47 C9 07                         CMP #%00000111
0CD49 F0 0B                         BEQ +
0CD4B                           
0CD4B                               ;; If X >= $30, don't apply bottom right metatile
0CD4B E0 30                         CPX #$30
0CD4D B0 07                         BCS +
0CD4F                               
0CD4F                               ;; Add metatile1 subpalette to attribute value
0CD4F B9 00 04                      LDA tile_type,y
0CD52 29 0C                         AND #%00001100
0CD54 85 02                         STA temp+2
0CD56                               +
0CD56                           
0CD56                           
0CD56                               ;; Apply second metatile
0CD56 88                            DEY
0CD57                           
0CD57                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CD57 8A                            TXA
0CD58 29 07                         AND #%00000111
0CD5A F0 10                         BEQ +
0CD5C                           
0CD5C                               ;; If X >= $30, don't apply bottom left metatile
0CD5C E0 30                         CPX #$30
0CD5E B0 0C                         BCS +
0CD60                           
0CD60                           
0CD60                           
0CD60                               ;; Add metatile2 subpalette to attribute value
0CD60 B9 00 04                      LDA tile_type,y
0CD63 29 0C                         AND #%00001100
0CD65 4A                            LSR
0CD66 4A                            LSR
0CD67 05 02                         ORA temp+2
0CD69 4C 6E CD                      JMP ++
0CD6C                               +
0CD6C A5 02                         LDA temp+2
0CD6E                               ++
0CD6E 0A                            ASL
0CD6F 0A                            ASL
0CD70 85 02                         STA temp+2
0CD72                           
0CD72                           
0CD72                               ;; Apply third metatile
0CD72 98                            TYA
0CD73 38                            SEC
0CD74 E9 0F                         SBC #$0F
0CD76 A8                            TAY
0CD77                           
0CD77                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD77 8A                            TXA
0CD78 29 07                         AND #%00000111
0CD7A C9 07                         CMP #%00000111
0CD7C F0 11                         BEQ +
0CD7E                           
0CD7E                               ;; If X < $10, don't apply top right metatile
0CD7E 8A                            TXA
0CD7F 29 F0                         AND #%11110000
0CD81 F0 0C                         BEQ +
0CD83                           
0CD83                               ;; Add metatile3 subpalette to attribute value
0CD83 B9 00 04                      LDA tile_type,y
0CD86 29 0C                         AND #%00001100
0CD88 4A                            LSR
0CD89 4A                            LSR
0CD8A 05 02                         ORA temp+2
0CD8C 4C 91 CD                      JMP ++
0CD8F                               +
0CD8F A5 02                         LDA temp+2
0CD91                               ++
0CD91 0A                            ASL
0CD92 0A                            ASL
0CD93 85 02                         STA temp+2
0CD95                           
0CD95                           
0CD95                               ;; Apply fourth metatile
0CD95 88                            DEY
0CD96                           
0CD96                               ;; If X MOD 8 == 0, don't apply top left metatile
0CD96 8A                            TXA
0CD97 29 07                         AND #%00000111
0CD99 F0 11                         BEQ +
0CD9B                           
0CD9B                               ;; If X < $10, don't apply top left metatile
0CD9B 8A                            TXA
0CD9C 29 F0                         AND #%11110000
0CD9E F0 0C                         BEQ +
0CDA0                           
0CDA0                               ;; Add metatile4 subpalette to attribute value
0CDA0 B9 00 04                      LDA tile_type,y
0CDA3 29 0C                         AND #%00001100
0CDA5 4A                            LSR
0CDA6 4A                            LSR
0CDA7 05 02                         ORA temp+2
0CDA9 4C AE CD                      JMP ++
0CDAC                               +
0CDAC A5 02                         LDA temp+2
0CDAE                               ++
0CDAE 9D A0 04                      STA tile_attributes,x
0CDB1                           
0CDB1                               ;; Check the next attribute, if any left
0CDB1 E8                            INX
0CDB2 E0 38                         CPX #$38
0CDB4 F0 03                         BEQ +
0CDB6 4C 2C CD                          JMP -attributeLoop
0CDB9                               +
0CDB9                           
0CDB9                               ;; Stream attribute RAM to PPU
0CDB9 2C 02 20                      BIT PPU_STATUS
0CDBC A9 23                         LDA #$23
0CDBE 8D 06 20                      STA PPU_ADDR
0CDC1 A9 C0                         LDA #$C0
0CDC3 8D 06 20                      STA PPU_ADDR
0CDC6 A2 00                         LDX #$00
0CDC8                               -
0CDC8 BD A0 04                          LDA tile_attributes,x
0CDCB 8D 07 20                          STA PPU_DATA
0CDCE E8                                INX
0CDCF E0 40                             CPX #$40
0CDD1 D0 F5                         BNE -
0CDD3                           
0CDD3                               ;; Set initial ball position
0CDD3 A6 41                         LDX current_level
0CDD5 BD 37 D9                      LDA tbl_lvl_ball_startpos,x
0CDD8 29 F0                         AND #%11110000
0CDDA 18                            CLC
0CDDB 69 34                         ADC #$34
0CDDD 85 19                         STA ball_ypos_hi
0CDDF BD 37 D9                      LDA tbl_lvl_ball_startpos,x
0CDE2 0A                            ASL
0CDE3 0A                            ASL
0CDE4 0A                            ASL
0CDE5 0A                            ASL
0CDE6 18                            CLC
0CDE7 69 14                         ADC #$14
0CDE9 85 17                         STA ball_xpos_hi
0CDEB A9 00                         LDA #$00
0CDED 85 18                         STA ball_xpos_lo
0CDEF 85 1A                         STA ball_ypos_lo
0CDF1                               
0CDF1                               ;; Set initial ball color and direction
0CDF1 BD 51 D9                      LDA tbl_lvl_ball_init,x
0CDF4 29 F0                         AND #%11110000
0CDF6 85 37                         STA ball_flags
0CDF8 20 D7 C6                      JSR sub_ColorizeBall
0CDFB                               
0CDFB                               ;; Reset bonus timer
0CDFB A9 08                         LDA #BONUS_FRAMES
0CDFD 85 3F                         STA bonus_timer
0CDFF                               
0CDFF                               ;; Play background noise
0CDFF A9 08                         LDA #$08
0CE01 8D 15 40                      STA APU_STATUS
0CE04 8D 0F 40                      STA NOISE_LENGTH
0CE07 A9 0E                         LDA #$0E
0CE09 85 46                         STA current_noise
0CE0B A9 00                         LDA #$00
0CE0D 85 44                         STA max_noise
0CE0F 85 47                         STA noise_timer
0CE11 85 45                         STA sweep_noise
0CE13 20 03 C6                      JSR sub_BackgroundNoise
0CE16                           
0CE16                               ;; Return
0CE16 60                            RTS
0CE17                           
0CE17                           
0CE17                           ;; Subroutine: draw 28 tiles in a row
0CE17                           sub_Draw28HorizontalTiles:
0CE17 A2 1C                         LDX #28
0CE19                               -
0CE19 8D 07 20                          STA PPU_DATA
0CE1C CA                                DEX
0CE1D D0 FA                         BNE -
0CE1F 60                            RTS
0CE20                           
0CE20                           .include "game/subroutine/LoadIntroScreen.asm"
0CE20                           
0CE20                           ;; Load the intro screen
0CE20                           sub_LoadIntroScreen:
0CE20                           
0CE20                               ;; Load intro palette
0CE20 2C 02 20                      BIT PPU_STATUS
0CE23 A9 3F                         LDA #$3F
0CE25 8D 06 20                      STA PPU_ADDR
0CE28 A9 00                         LDA #$00
0CE2A 8D 06 20                      STA PPU_ADDR
0CE2D A2 00                         LDX #$00
0CE2F                               -
0CE2F BD C9 D0                          LDA tbl_IntroScreenPalette,x
0CE32 8D 07 20                          STA PPU_DATA
0CE35 E8                                INX
0CE36 E0 20                             CPX #$20
0CE38 D0 F5                         BNE -
0CE3A                               
0CE3A                               ;; Put ball in the middle
0CE3A A9 7C                         LDA #$7C
0CE3C 85 17                         STA ball_xpos_hi
0CE3E 85 19                         STA ball_ypos_hi
0CE40                           
0CE40                               ;; Clear the screen
0CE40 20 6C C6                      JSR sub_ClearScreen
0CE43                           
0CE43                               ;; Set up intro screen draw loop
0CE43 A2 00                         LDX #$00
0CE45                           
0CE45                           -loop_IntroScreenData:
0CE45                           
0CE45                               ;; Get current byte from intro screen data
0CE45 BD F1 D0                      LDA tbl_IntroScreenData,x
0CE48                           
0CE48                               ;; If current byte is #$3F, we're done drawing.
0CE48 C9 3F                         CMP #$3F
0CE4A D0 03                         BNE +
0CE4C 4C 99 CE                          JMP +goToEndIntroScreen
0CE4F                               +
0CE4F                           
0CE4F                               ;; If highest bits are %11, draw a plain tile
0CE4F 29 C0                         AND #%11000000
0CE51 D0 03                         BNE +
0CE53 4C 79 CE                          JMP +drawTile
0CE56                               +
0CE56                               
0CE56                               ;; If highest bits are %01, set the PPU address
0CE56                               ;; If not, draw two logo tiles
0CE56 C9 40                         CMP #%01000000
0CE58 D0 03                         BNE +drawLogo
0CE5A 4C 83 CE                          JMP +setPpuAddr
0CE5D                           
0CE5D                           +drawLogo:
0CE5D                               ;; Get bits 0-2 and store in a temp variable
0CE5D BD F1 D0                      LDA tbl_IntroScreenData,x
0CE60 29 07                         AND #%00000111
0CE62 85 00                         STA temp
0CE64                               
0CE64                               ;; Get bits 3-5, shift over to get a value from 0-7
0CE64 BD F1 D0                      LDA tbl_IntroScreenData,x
0CE67 4A                            LSR
0CE68 4A                            LSR
0CE69 4A                            LSR
0CE6A 29 07                         AND #%00000111
0CE6C                               
0CE6C                               ;; Draw the tile that corresponds with that value
0CE6C A8                            TAY
0CE6D 20 4F C7                      JSR sub_drawIntroScreenLogoTile
0CE70                               
0CE70                               ;; Do the same for the value stored in temp
0CE70 A4 00                         LDY temp
0CE72 20 4F C7                      JSR sub_drawIntroScreenLogoTile
0CE75                           
0CE75                               ;; Next byte please
0CE75 E8                            INX
0CE76 4C 45 CE                      JMP -loop_IntroScreenData
0CE79                           
0CE79                           +drawTile:
0CE79                               ;; Just draw the tile value on screen
0CE79 BD F1 D0                      LDA tbl_IntroScreenData,x
0CE7C 8D 07 20                      STA PPU_DATA
0CE7F                               
0CE7F                               ;; Next byte please
0CE7F E8                            INX
0CE80 4C 45 CE                      JMP -loop_IntroScreenData
0CE83                           
0CE83                           
0CE83                           +setPpuAddr:
0CE83                               ;; Reset the PPU latch
0CE83 2C 02 20                      BIT PPU_STATUS
0CE86                               
0CE86                               ;; Sanitize and write the high byte of the PPU address
0CE86 BD F1 D0                      LDA tbl_IntroScreenData,x
0CE89 29 3F                         AND #%00111111
0CE8B 8D 06 20                      STA PPU_ADDR
0CE8E                           
0CE8E                               ;; Write the low byte of the PPU address
0CE8E E8                            INX
0CE8F BD F1 D0                      LDA tbl_IntroScreenData,x
0CE92 8D 06 20                      STA PPU_ADDR
0CE95                               
0CE95                               ;; PPU has been set up to draw tiles at the correct spot now.
0CE95                               
0CE95                               ;; Next byte please.
0CE95 E8                            INX
0CE96 4C 45 CE                      JMP -loop_IntroScreenData
0CE99                           
0CE99                           +goToEndIntroScreen:
0CE99                           
0CE99                               ;; To color the 1.LEVEL: line green, we need to update two
0CE99                               ;; values in the PPU attribute data.
0CE99 2C 02 20                      BIT PPU_STATUS
0CE9C A9 23                         LDA #$23
0CE9E 8D 06 20                      STA PPU_ADDR
0CEA1 A9 CB                         LDA #$CB
0CEA3 8D 06 20                      STA PPU_ADDR
0CEA6 A9 0A                         LDA #%00001010
0CEA8 8D 07 20                      STA PPU_DATA
0CEAB 8D 07 20                      STA PPU_DATA
0CEAE                           
0CEAE 60                            RTS
0CEAF                           
0CEAF                           .include "game/subroutine/LoadWinScreen.asm"
0CEAF                           
0CEAF                           ;; Load the win screen (in progress)
0CEAF                           sub_LoadWinScreen:
0CEAF 60                            RTS
0CEB0                           
0CEB0                           .include "game/subroutine/PreloadSfxFromX.asm"
0CEB0                           
0CEB0                           sub_PreloadSfxFromX:
0CEB0                               
0CEB0                               ;; Load sample X into sfx address (low byte)
0CEB0 BD 28 DA                      LDA tbl_Sfx_lo,x
0CEB3 85 4A                         STA sfx_address
0CEB5                               
0CEB5                               ;; Load sample X into sfx address (high byte)
0CEB5 BD 25 DA                      LDA tbl_Sfx_hi,x
0CEB8 85 4B                         STA sfx_address+1
0CEBA                               
0CEBA                               ;; Start SFX timer
0CEBA A9 01                         LDA #$01
0CEBC 85 4C                         STA sfx_timer
0CEBE                               
0CEBE 60                            RTS
0CEBF                               
0CEBF                               0CEBF                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CEBF                           
0CEBF                           ;; Remove a block from screen
0CEBF                           sub_RemoveBlockFromScreen:
0CEBF                           
0CEBF                               ;; Get current buffer location
0CEBF A4 3A                         LDY ppu_buffer_pointer
0CEC1                               
0CEC1                               ;; TILE 1: if metatile on top left is solid, draw
0CEC1                               ;; null tile, else draw random noise tile
0CEC1 A9 00                         LDA #$00
0CEC3 85 39                         STA ppu_buffer_update
0CEC5                               
0CEC5 A5 00                         LDA temp
0CEC7 99 00 03                      STA ppu_buffer,y
0CECA C8                            INY
0CECB A5 01                         LDA temp+1
0CECD 99 00 03                      STA ppu_buffer,y
0CED0 C8                            INY
0CED1                               
0CED1 8A                            TXA
0CED2 29 0F                         AND #%00001111
0CED4 F0 11                         BEQ +drawRandomTile
0CED6                           
0CED6 8A                            TXA
0CED7 29 F0                         AND #%11110000
0CED9 F0 0C                         BEQ +drawRandomTile
0CEDB                           
0CEDB BD EF 03                      LDA tile_type-17,x
0CEDE 29 01                         AND #%00000001
0CEE0 F0 05                         BEQ +drawRandomTile  
0CEE2                           
0CEE2                               ;; Draw a null tile
0CEE2 A9 00                         LDA #$00
0CEE4 4C EF CE                      JMP +addToPPUBuffer
0CEE7                               
0CEE7                           +drawRandomTile:
0CEE7                               ;; Draw a random tile
0CEE7 20 73 C5                      JSR sub_GetRandomNumber
0CEEA 29 07                         AND #%00000111
0CEEC 18                            CLC
0CEED 69 68                         ADC #$68
0CEEF                               
0CEEF                               ;; Add tile to ppu buffer
0CEEF                           +addToPPUBuffer:
0CEEF 99 00 03                      STA ppu_buffer,y
0CEF2 C8                            INY
0CEF3                           
0CEF3                               ;; TILE 2: If metatile above is solid, draw null,
0CEF3                               ;; else draw random noise.
0CEF3 E6 01                         INC temp+1
0CEF5 A5 00                         LDA temp
0CEF7 99 00 03                      STA ppu_buffer,y
0CEFA C8                            INY
0CEFB A5 01                         LDA temp+1
0CEFD 99 00 03                      STA ppu_buffer,y
0CF00 C8                            INY
0CF01                               
0CF01 8A                            TXA
0CF02 29 F0                         AND #%11110000
0CF04 F0 0C                         BEQ +drawRandomTile
0CF06                               
0CF06 BD F0 03                      LDA tile_type-16,x
0CF09 29 01                         AND #%00000001
0CF0B F0 05                         BEQ +drawRandomTile
0CF0D                               
0CF0D A9 00                         LDA #%00
0CF0F 4C 1A CF                      JMP +addToPPUBuffer
0CF12                           
0CF12                           +drawRandomTile:
0CF12 20 73 C5                      JSR sub_GetRandomNumber
0CF15 29 07                         AND #%00000111
0CF17 18                            CLC
0CF18 69 68                         ADC #$68
0CF1A                           
0CF1A                           +addToPPUBuffer:
0CF1A 99 00 03                      STA ppu_buffer,y
0CF1D C8                            INY
0CF1E                               
0CF1E                               ;; TILE 3 - If metatile left is solid, draw null,
0CF1E                               ;; else draw random noise.
0CF1E A5 01                         LDA temp+1
0CF20 18                            CLC
0CF21 69 1F                         ADC #$1F
0CF23 85 01                         STA temp+1
0CF25 A5 00                         LDA temp
0CF27 69 00                         ADC #$00
0CF29 85 00                         STA temp
0CF2B 99 00 03                      STA ppu_buffer,y
0CF2E C8                            INY
0CF2F A5 01                         LDA temp+1
0CF31 99 00 03                      STA ppu_buffer,y
0CF34 C8                            INY
0CF35                               
0CF35 8A                            TXA
0CF36 29 0F                         AND #%00001111
0CF38 F0 0C                         BEQ +drawRandomTile
0CF3A                               
0CF3A BD FF 03                      LDA tile_type-1,x
0CF3D 29 01                         AND #%00000001
0CF3F F0 05                         BEQ +drawRandomTile
0CF41                               
0CF41 A9 00                         LDA #%00
0CF43 4C 4E CF                      JMP +addToPPUBuffer
0CF46                           
0CF46                           +drawRandomTile:
0CF46 20 73 C5                      JSR sub_GetRandomNumber
0CF49 29 07                         AND #%00000111
0CF4B 18                            CLC
0CF4C 69 68                         ADC #$68
0CF4E                               
0CF4E                           +addToPPUBuffer:
0CF4E 99 00 03                      STA ppu_buffer,y
0CF51 C8                            INY
0CF52                               
0CF52                               ;; TILE 4 - Always random noise
0CF52 E6 01                         INC temp+1
0CF54 A5 00                         LDA temp
0CF56 99 00 03                      STA ppu_buffer,y
0CF59 C8                            INY
0CF5A A5 01                         LDA temp+1
0CF5C 99 00 03                      STA ppu_buffer,y
0CF5F C8                            INY
0CF60 20 73 C5                      JSR sub_GetRandomNumber
0CF63 29 07                         AND #%00000111
0CF65 18                            CLC
0CF66 69 68                         ADC #$68
0CF68 99 00 03                      STA ppu_buffer,y
0CF6B C8                            INY
0CF6C                           
0CF6C                               ;; TILE 5 - If tile on the right is solid, skip,
0CF6C                               ;; else draw random noise tile
0CF6C E6 01                         INC temp+1
0CF6E                               
0CF6E 8A                            TXA
0CF6F 29 0F                         AND #%00001111
0CF71 C9 0D                         CMP #$0D
0CF73 F0 1F                         BEQ +skipTile
0CF75                               
0CF75 BD 01 04                      LDA tile_type+1,x
0CF78 29 01                         AND #%00000001
0CF7A D0 18                         BNE +skipTile
0CF7C A5 00                             LDA temp
0CF7E 99 00 03                          STA ppu_buffer,y
0CF81 C8                                INY
0CF82 A5 01                             LDA temp+1
0CF84 99 00 03                          STA ppu_buffer,y
0CF87 C8                                INY
0CF88 20 73 C5                          JSR sub_GetRandomNumber
0CF8B 29 07                             AND #%00000111
0CF8D 18                                CLC
0CF8E 69 68                             ADC #$68
0CF90 99 00 03                          STA ppu_buffer,y
0CF93 C8                                INY    
0CF94                               +skipTile:
0CF94                           
0CF94                               ;; TILE 6 - If tile on bottom is solid, skip,
0CF94                               ;; else draw random noise
0CF94 A5 01                         LDA temp+1
0CF96 18                            CLC
0CF97 69 1F                         ADC #$1F
0CF99 85 01                         STA temp+1
0CF9B A5 00                         LDA temp
0CF9D 69 00                         ADC #$00
0CF9F 85 00                         STA temp
0CFA1                           
0CFA1 8A                            TXA
0CFA2 29 F0                         AND #%11110000
0CFA4 C9 90                         CMP #$90
0CFA6 F0 1F                         BEQ +skipTile
0CFA8                           
0CFA8 BD 10 04                      LDA tile_type+16,x
0CFAB 29 01                         AND #%00000001
0CFAD D0 18                         BNE +skipTile
0CFAF A5 00                             LDA temp
0CFB1 99 00 03                          STA ppu_buffer,y
0CFB4 C8                                INY
0CFB5 A5 01                             LDA temp+1
0CFB7 99 00 03                          STA ppu_buffer,y
0CFBA C8                                INY
0CFBB 20 73 C5                          JSR sub_GetRandomNumber
0CFBE 29 07                             AND #%00000111
0CFC0 18                                CLC
0CFC1 69 68                             ADC #$68
0CFC3 99 00 03                          STA ppu_buffer,y
0CFC6 C8                                INY    
0CFC7                               +skipTile:
0CFC7                               
0CFC7                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CFC7                               ;; else draw random noise
0CFC7 E6 01                         INC temp+1
0CFC9                           
0CFC9 8A                            TXA
0CFCA 29 F0                         AND #%11110000
0CFCC C9 90                         CMP #$90
0CFCE F0 26                         BEQ +skipTile
0CFD0                               
0CFD0 8A                            TXA
0CFD1 29 0F                         AND #%00001111
0CFD3 C9 0D                         CMP #$0D
0CFD5 F0 1F                         BEQ +skipTile
0CFD7                               
0CFD7 BD 11 04                      LDA tile_type+17,x
0CFDA 29 01                         AND #%00000001
0CFDC D0 18                         BNE +skipTile
0CFDE A5 00                             LDA temp
0CFE0 99 00 03                          STA ppu_buffer,y
0CFE3 C8                                INY
0CFE4 A5 01                             LDA temp+1
0CFE6 99 00 03                          STA ppu_buffer,y
0CFE9 C8                                INY
0CFEA 20 73 C5                          JSR sub_GetRandomNumber
0CFED 29 07                             AND #%00000111
0CFEF 18                                CLC
0CFF0 69 68                             ADC #$68
0CFF2 99 00 03                          STA ppu_buffer,y
0CFF5 C8                                INY    
0CFF6                               +skipTile:   
0CFF6                           
0CFF6                           
0CFF6                               ;; Update attribute table accordingly through ppu buffer
0CFF6 20 35 D0                      JSR sub_SetTileAttributeAddress
0CFF9                               
0CFF9 8A                            TXA
0CFFA 29 10                         AND #%00010000
0CFFC F0 05                         BEQ +
0CFFE A9 F0                             LDA #%11110000
0D000 4C 05 D0                          JMP ++
0D003                               +
0D003 A9 0F                         LDA #%00001111
0D005                               ++
0D005 85 02                         STA temp+2
0D007                               
0D007 8A                            TXA
0D008 48                            PHA
0D009 29 01                         AND #%00000001
0D00B F0 07                         BEQ +
0D00D A5 02                             LDA temp+2
0D00F 09 CC                             ORA #%11001100
0D011 4C 18 D0                          JMP ++
0D014                               +
0D014 A5 02                         LDA temp+2
0D016 09 33                         ORA #%00110011
0D018                               ++
0D018 85 02                         STA temp+2
0D01A                               
0D01A A5 00                         LDA temp
0D01C 38                            SEC
0D01D E9 C0                         SBC #$C0
0D01F AA                            TAX
0D020 BD A0 04                      LDA tile_attributes,x
0D023 25 02                         AND temp+2
0D025 9D A0 04                      STA tile_attributes,x
0D028 99 00 03                      STA ppu_buffer,y
0D02B C8                            INY
0D02C 68                            PLA
0D02D AA                            TAX
0D02E                           
0D02E                               ;; Tell PPU to update tiles and attributes next frame
0D02E 84 3A                         STY ppu_buffer_pointer
0D030 A9 01                         LDA #$01
0D032 85 39                         STA ppu_buffer_update
0D034                            
0D034                               ;; We're done - return
0D034 60                            RTS
0D035                           
0D035                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D035                           
0D035                           ;; Set the correct tile attribute address based on game tile (x) 
0D035                           ;; into the correct ppu buffer slot (y)
0D035                           
0D035                           sub_SetTileAttributeAddress:
0D035 A9 23                         LDA #$23
0D037 99 00 03                      STA ppu_buffer,y
0D03A C8                            INY
0D03B                               
0D03B 8A                            TXA
0D03C 29 F0                         AND #%11110000
0D03E 4A                            LSR
0D03F 4A                            LSR
0D040 4A                            LSR
0D041 4A                            LSR
0D042 18                            CLC
0D043 69 01                         ADC #$01
0D045 4A                            LSR
0D046 0A                            ASL
0D047 0A                            ASL
0D048 0A                            ASL
0D049 18                            CLC
0D04A 69 C8                         ADC #$C8
0D04C 85 00                         STA temp
0D04E 8A                            TXA
0D04F 29 0F                         AND #%00001111
0D051 18                            CLC
0D052 69 01                         ADC #$01
0D054 4A                            LSR
0D055 18                            CLC
0D056 65 00                         ADC temp
0D058 85 00                         STA temp
0D05A 99 00 03                      STA ppu_buffer,y
0D05D C8                            INY
0D05E                                  
0D05E 60                            RTS
0D05F                           
0D05F                           .include "game/subroutine/SubtractXFromBonus.asm"
0D05F                           
0D05F                           sub_SubtractXFromBonus:
0D05F 86 09                         STX temp+9
0D061 A5 2E                         LDA ball_bonus+2
0D063 38                            SEC
0D064 E5 09                         SBC temp+9
0D066 30 05                         BMI +
0D068 85 2E                             STA ball_bonus+2
0D06A 4C 82 D0                          JMP +updateBonusOnScreen
0D06D                               +
0D06D                           
0D06D 18                            CLC
0D06E 69 0A                         ADC #$0A
0D070 85 2E                         STA ball_bonus+2
0D072 C6 2D                         DEC ball_bonus+1
0D074 10 0C                         BPL +updateBonusOnScreen
0D076                           
0D076 A9 09                         LDA #$09
0D078 85 2D                         STA ball_bonus+1
0D07A C6 2C                         DEC ball_bonus
0D07C 10 04                         BPL +updateBonusOnScreen
0D07E                           
0D07E A9 00                         LDA #$00
0D080 85 2C                         STA ball_bonus
0D082                           
0D082                               +updateBonusOnScreen:
0D082 A9 20                         LDA #$20
0D084 85 00                         STA temp
0D086 A9 9C                         LDA #$9C
0D088 85 01                         STA temp+1
0D08A A2 02                         LDX #$02
0D08C                               
0D08C                               -updateNextDigit:
0D08C B5 2C                             LDA ball_bonus,x
0D08E 18                                CLC
0D08F 69 01                             ADC #$01
0D091 85 02                             STA temp+2
0D093 20 A3 D0                          JSR sub_WriteByteToPPUBuffer
0D096 C6 01                             DEC temp+1
0D098 CA                                DEX
0D099 10 F1                         BPL -updateNextDigit
0D09B                           
0D09B 60                            RTS
0D09C                           
0D09C                           .include "game/subroutine/WaitXFrames.asm"
0D09C                           
0D09C                           sub_WaitXFrames:
0D09C 20 95 C5                      JSR sub_WaitForNMI
0D09F CA                            DEX
0D0A0 D0 FA                         BNE sub_WaitXFrames
0D0A2                           
0D0A2 60                            RTS
0D0A3                           
0D0A3                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D0A3                           
0D0A3                           ;; Write the byte in temp+2 and the ppu address (temp)
0D0A3                           ;; to a buffer, so NMI can update it before the next frame
0D0A3                           
0D0A3                           sub_WriteByteToPPUBuffer:
0D0A3                           
0D0A3                               ;; Prevent updating until full 3-byte buffer is filled,
0D0A3                               ;; so that graphics won't glitch out if NMI happens during
0D0A3                               ;; updating the buffer
0D0A3 A9 00                         LDA #$00
0D0A5 85 39                         STA ppu_buffer_update
0D0A7                           
0D0A7                               ;; Check if buffer full; if so, wait a frame and force update
0D0A7 A4 3A                         LDY ppu_buffer_pointer
0D0A9 C0 60                         CPY #$60
0D0AB D0 05                         BNE +
0D0AD E6 39                             INC ppu_buffer_update
0D0AF 20 9E C5                          JSR sub_WaitForVBlank
0D0B2                               +
0D0B2                           
0D0B2                               ;; Add ppu_addr high byte to buffer
0D0B2 A5 00                         LDA temp
0D0B4 99 00 03                      STA ppu_buffer,y
0D0B7                           
0D0B7                               ;; Add ppu_addr low byte to buffer
0D0B7 C8                            INY
0D0B8 A5 01                         LDA temp+1
0D0BA 99 00 03                      STA ppu_buffer,y
0D0BD                           
0D0BD                               ;; Add ppu_data to buffer
0D0BD C8                            INY
0D0BE A5 02                         LDA temp+2
0D0C0 99 00 03                      STA ppu_buffer,y
0D0C3                           
0D0C3                               ;; Update buffer pointer
0D0C3 C8                            INY
0D0C4 84 3A                         STY ppu_buffer_pointer
0D0C6                           
0D0C6                               ;; Tell NMI to update next round
0D0C6 E6 39                         INC ppu_buffer_update
0D0C8                           
0D0C8                               ;; Return
0D0C8 60                            RTS
0D0C9                           
0D0C9                           
0D0C9                           
0D0C9                           
0D0C9                           ;; LUTs
0D0C9                           .include "game/include/tables.asm"
0D0C9                           
0D0C9                           ;; Initial screen palette
0D0C9                           tbl_IntroScreenPalette:
0D0C9 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D0CD 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D0D1 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D0D5 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D0D9                           
0D0D9 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D0DD 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D0E1 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D0E5 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D0E9                           
0D0E9                           
0D0E9                           ;; Intro: mapping logo index to chr tile
0D0E9                           tbl_IntroScreenLogoChr:
0D0E9 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D0F1                           
0D0F1                           
0D0F1                           ;; Intro screen data
0D0F1                           tbl_IntroScreenData:
0D0F1                           
0D0F1                               ;; Set PPU address $20AC and draw
0D0F1 60 AC                         .db #$60, #$AC
0D0F3 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D0FB                           
0D0FB                               ;; Set PPU address $20CF and draw
0D0FB 60 CF                         .db #$60, #$CF
0D0FD 01 02                         .db #_0, #_1
0D0FF                               
0D0FF                               ;; Set PPU address $2122 and draw
0D0FF 61 22                         .db #$61, #$22
0D101 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D108 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D10E 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D116 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D11B                               
0D11B                               ;; Set PPU address $2147 and draw
0D11B 61 47                         .db #$61, #$47
0D11D 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D124 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D128 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D12E 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D134                               
0D134                               ;; Set PPU address $218B and draw
0D134 61 8B                         .db #$61, #$8B
0D136 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D13C 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D141                               
0D141                               ;; Set PPU address $21E6 and draw
0D141 61 E6                         .db #$61, #$E6
0D143 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D14B 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D14F 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D156                               
0D156                               ;; Set PPU address $222D and draw
0D156 62 2D                         .db #$62, #$2D
0D158 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D15E                               
0D15E                               ;; Set PPU address $2281
0D15E 62 81                         .db #$62, #$81
0D160                               
0D160                               ;; Draw the Crillion logo
0D160 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D164 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D168 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D16C E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D170                               
0D170 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D174 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D178 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D17C D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D180                               
0D180 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D184 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D188 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D18C D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D190                           
0D190 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D194 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D198 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D19C D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1A0                               
0D1A0 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1A4 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1A8 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1AC D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1B0                           
0D1B0 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D1B4 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D1B8 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D1BC F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D1BF                           
0D1BF                               ;; End of intro
0D1BF 3F                            .db #$3F
0D1C0                           
0D1C0                           
0D1C0                           ;; Animation frames table
0D1C0                           .include "game/include/table/animation_frames.asm"
0D1C0                           
0D1C0                           ;; CHR tile-id's per slide of explosion
0D1C0                           explosion_slide0:
0D1C0 00 00 00                      .db #$00, #$00, #$00
0D1C3 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D1C6 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D1C9                           
0D1C9                           explosion_slide1:
0D1C9 00 00 00                      .db #$00, #$00, #$00
0D1CC 29 2A 2B                      .db #$29, #$2A, #$2B
0D1CF 39 3A 3B                      .db #$39, #$3A, #$3B
0D1D2                           
0D1D2                           explosion_slide2:
0D1D2 16 00 00                      .db #$16, #$00, #$00
0D1D5 26 27 28                      .db #$26, #$27, #$28
0D1D8 36 37 38                      .db #$36, #$37, #$38
0D1DB                           
0D1DB                           explosion_slide3:
0D1DB 00 14 15                      .db #$00, #$14, #$15
0D1DE 23 24 25                      .db #$23, #$24, #$25
0D1E1 33 34 35                      .db #$33, #$34, #$35
0D1E4                           
0D1E4                           explosion_slide4:
0D1E4 10 11 12                      .db #$10, #$11, #$12
0D1E7 20 21 22                      .db #$20, #$21, #$22
0D1EA 30 31 32                      .db #$30, #$31, #$32
0D1ED                           
0D1ED                           ;; High and low bytes of animation slides
0D1ED                           explosion_anim_hi:
0D1ED D1                            .db >#explosion_slide0
0D1EE D1                            .db >#explosion_slide1
0D1EF D1                            .db >#explosion_slide2
0D1F0 D1                            .db >#explosion_slide3
0D1F1 D1                            .db >#explosion_slide4
0D1F2 D1                            .db >#explosion_slide4
0D1F3 D1                            .db >#explosion_slide3
0D1F4 D1                            .db >#explosion_slide2
0D1F5 D1                            .db >#explosion_slide1
0D1F6 D1                            .db >#explosion_slide0
0D1F7                           
0D1F7                           explosion_anim_lo:
0D1F7 C0                            .db <#explosion_slide0
0D1F8 C9                            .db <#explosion_slide1
0D1F9 D2                            .db <#explosion_slide2
0D1FA DB                            .db <#explosion_slide3
0D1FB E4                            .db <#explosion_slide4
0D1FC E4                            .db <#explosion_slide4
0D1FD DB                            .db <#explosion_slide3
0D1FE D2                            .db <#explosion_slide2
0D1FF C9                            .db <#explosion_slide1
0D200 C0                            .db <#explosion_slide0
0D201                           
0D201                           
0D201                           
0D201                           ;; Ball palette color table (CBRYGM)
0D201                           tbl_BallColorDark:
0D201 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D207                            
0D207                           tbl_BallColorLight:
0D207 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D20D                           
0D20D                               
0D20D                           ;; Screen mode drawing routine addresses
0D20D                           tbl_LoadScreenHi:
0D20D CE CA CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D210                           
0D210                           tbl_LoadScreenLo:
0D210 20 64 AF                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D213                           
0D213                           
0D213                           ;; Level data
0D213                           .include "game/include/table/level_data.asm"
0D213                           
0D213                           ;; Level layout tables
0D213                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D213                           
0D213                           ifdef TESTING
0D213                           lvl_test:
0D213 64 27 64 01 11 11 C1 13       .db #$64, #%00100111, #$64, #%00000001, #$11, #%00010001, #$C1, #%00010011
0D21B 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D223 FF                            .db #LEVEL_END
0D224                           endif
0D224                           
0D224                           lvl_layout_01:
0D224 61 21                         .db #$61, #%00100001
0D226 52 61                         .db #$52, #%01100001
0D228 43 65                         .db #$43, #%01100101
0D22A 83 05                         .db #$83, #%00000101
0D22C 93 15                         .db #$93, #%00010101
0D22E 34 7A                         .db #$34, #%01111010
0D230 74 7A                         .db #$74, #%01111010
0D232 35 7A                         .db #$35, #%01111010
0D234 75 7A                         .db #$75, #%01111010
0D236 46 65                         .db #$46, #%01100101
0D238 86 25                         .db #$86, #%00100101
0D23A 57 61                         .db #$57, #%01100001
0D23C 68 21                         .db #$68, #%00100001
0D23E FF                            .db #LEVEL_END
0D23F                           
0D23F                           lvl_layout_02:
0D23F C0 0A                         .db #$C0, #%00001010
0D241 11 15                         .db #$11, #%00010101
0D243 21 62                         .db #$21, #%01100010
0D245 61 62                         .db #$61, #%01100010
0D247 A1 42                         .db #$A1, #%01000010
0D249 12 67                         .db #$12, #%01100111
0D24B 52 67                         .db #$52, #%01100111
0D24D 92 67                         .db #$92, #%01100111
0D24F C3 0D                         .db #$C3, #%00001101
0D251 14 11                         .db #$14, #%00010001
0D253 24 65                         .db #$24, #%01100101
0D255 64 65                         .db #$64, #%01100101
0D257 A4 45                         .db #$A4, #%01000101
0D259 15 67                         .db #$15, #%01100111
0D25B 55 67                         .db #$55, #%01100111
0D25D 95 67                         .db #$95, #%01100111
0D25F 17 12                         .db #$17, #%00010010
0D261 27 61                         .db #$27, #%01100001
0D263 67 61                         .db #$67, #%01100001
0D265 A7 41                         .db #$A7, #%01000001
0D267 38 7A                         .db #$38, #%01111010
0D269 98 5A                         .db #$98, #%01011010
0D26B 18 27                         .db #$18, #%00100111
0D26D 48 27                         .db #$48, #%00100111
0D26F 78 27                         .db #$78, #%00100111
0D271 C8 07                         .db #$C8, #%00000111
0D273 FF                            .db #LEVEL_END
0D274                           
0D274                           lvl_layout_03:
0D274 00 7A                         .db #$00, #%01111010
0D276 40 7A                         .db #$40, #%01111010
0D278 80 7A                         .db #$80, #%01111010
0D27A C0 1A                         .db #$C0, #%00011010
0D27C 10 A1                         .db #$10, #%10100001
0D27E 13 E1                         .db #$13, #%11100001
0D280 17 C1                         .db #$17, #%11000001
0D282 30 C1                         .db #$30, #%11000001
0D284 34 C1                         .db #$34, #%11000001
0D286 38 A1                         .db #$38, #%10100001
0D288 50 E1                         .db #$50, #%11100001
0D28A 55 81                         .db #$55, #%10000001
0D28C 57 C1                         .db #$57, #%11000001
0D28E 70 C1                         .db #$70, #%11000001
0D290 73 A1                         .db #$73, #%10100001
0D292 76 E1                         .db #$76, #%11100001
0D294 90 E1                         .db #$90, #%11100001
0D296 95 81                         .db #$95, #%10000001
0D298 97 C1                         .db #$97, #%11000001
0D29A B0 C1                         .db #$B0, #%11000001
0D29C B4 C1                         .db #$B4, #%11000001
0D29E B8 A1                         .db #$B8, #%10100001
0D2A0 D0 A1                         .db #$D0, #%10100001
0D2A2 D3 E1                         .db #$D3, #%11100001
0D2A4 D7 C1                         .db #$D7, #%11000001
0D2A6 FF                            .db #LEVEL_END
0D2A7                           
0D2A7                           lvl_layout_04:
0D2A7 00 4C                         .db #$00, #%01001100
0D2A9 40 6C                         .db #$40, #%01101100
0D2AB 80 4C                         .db #$80, #%01001100
0D2AD 81 AC                         .db #$81, #%10101100
0D2AF C1 2C                         .db #$C1, #%00101100
0D2B1 02 6C                         .db #$02, #%01101100
0D2B3 42 CC                         .db #$42, #%11001100
0D2B5 62 EC                         .db #$62, #%11101100
0D2B7 A2 CC                         .db #$A2, #%11001100
0D2B9 C3 CC                         .db #$C3, #%11001100
0D2BB 04 4C                         .db #$04, #%01001100
0D2BD 84 2C                         .db #$84, #%00101100
0D2BF 25 AC                         .db #$25, #%10101100
0D2C1 85 AC                         .db #$85, #%10101100
0D2C3 06 AC                         .db #$06, #%10101100
0D2C5 36 CC                         .db #$36, #%11001100
0D2C7 56 CC                         .db #$56, #%11001100
0D2C9 66 EC                         .db #$66, #%11101100
0D2CB 96 6C                         .db #$96, #%01101100
0D2CD C7 AC                         .db #$C7, #%10101100
0D2CF 08 2C                         .db #$08, #%00101100
0D2D1 78 6C                         .db #$78, #%01101100
0D2D3 D8 0C                         .db #$D8, #%00001100
0D2D5 30 A1                         .db #$30, #%10100001
0D2D7 B0 21                         .db #$B0, #%00100001
0D2D9 01 41                         .db #$01, #%01000001
0D2DB 41 61                         .db #$41, #%01100001
0D2DD 91 A1                         .db #$91, #%10100001
0D2DF A1 21                         .db #$A1, #%00100001
0D2E1 52 C1                         .db #$52, #%11000001
0D2E3 72 E1                         .db #$72, #%11100001
0D2E5 B2 C1                         .db #$B2, #%11000001
0D2E7 C2 21                         .db #$C2, #%00100001
0D2E9 03 41                         .db #$03, #%01000001
0D2EB 33 C1                         .db #$33, #%11000001
0D2ED 83 21                         .db #$83, #%00100001
0D2EF D3 E1                         .db #$D3, #%11100001
0D2F1 05 21                         .db #$05, #%00100001
0D2F3 45 E1                         .db #$45, #%11100001
0D2F5 A5 21                         .db #$A5, #%00100001
0D2F7 16 A1                         .db #$16, #%10100001
0D2F9 76 A1                         .db #$76, #%10100001
0D2FB 27 A1                         .db #$27, #%10100001
0D2FD 57 21                         .db #$57, #%00100001
0D2FF 87 41                         .db #$87, #%01000001
0D301 B7 A1                         .db #$B7, #%10100001
0D303 19 21                         .db #$19, #%00100001
0D305 39 41                         .db #$39, #%01000001
0D307 89 41                         .db #$89, #%01000001
0D309 C9 21                         .db #$C9, #%00100001
0D30B D0 1A                         .db #$D0, #%00011010
0D30D 55 1A                         .db #$55, #%00011010
0D30F 95 1A                         .db #$95, #%00011010
0D311 D7 1A                         .db #$D7, #%00011010
0D313 09 1A                         .db #$09, #%00011010
0D315 79 1A                         .db #$79, #%00011010
0D317 FF                            .db #LEVEL_END
0D318                           
0D318                           lvl_layout_05:
0D318 40 0A                         .db #$40, #%00001010
0D31A 70 1A                         .db #$70, #%00011010
0D31C B0 42                         .db #$B0, #%01000010
0D31E 41 A7                         .db #$41, #%10100111
0D320 B1 22                         .db #$B1, #%00100010
0D322 D1 15                         .db #$D1, #%00010101
0D324 22 0A                         .db #$22, #%00001010
0D326 52 05                         .db #$52, #%00000101
0D328 B2 42                         .db #$B2, #%01000010
0D32A 03 27                         .db #$03, #%00100111
0D32C 33 67                         .db #$33, #%01100111
0D32E 73 67                         .db #$73, #%01100111
0D330 B3 47                         .db #$B3, #%01000111
0D332 05 E5                         .db #$05, #%11100101
0D334 25 A5                         .db #$25, #%10100101
0D336 35 25                         .db #$35, #%00100101
0D338 65 45                         .db #$65, #%01000101
0D33A A5 45                         .db #$A5, #%01000101
0D33C 46 E5                         .db #$46, #%11100101
0D33E 66 E5                         .db #$66, #%11100101
0D340 86 E5                         .db #$86, #%11100101
0D342 A6 E2                         .db #$A6, #%11100010
0D344 C6 E5                         .db #$C6, #%11100101
0D346 27 25                         .db #$27, #%00100101
0D348 77 05                         .db #$77, #%00000101
0D34A B7 02                         .db #$B7, #%00000010
0D34C 09 05                         .db #$09, #%00000101
0D34E 79 05                         .db #$79, #%00000101
0D350 B9 02                         .db #$B9, #%00000010
0D352 FF                            .db #LEVEL_END
0D353                           
0D353                           lvl_layout_06:
0D353 00 03                         .db #$00, #%00000011
0D355 20 03                         .db #$20, #%00000011
0D357 40 03                         .db #$40, #%00000011
0D359 A0 03                         .db #$A0, #%00000011
0D35B C0 03                         .db #$C0, #%00000011
0D35D 11 03                         .db #$11, #%00000011
0D35F 31 03                         .db #$31, #%00000011
0D361 51 03                         .db #$51, #%00000011
0D363 91 03                         .db #$91, #%00000011
0D365 B1 03                         .db #$B1, #%00000011
0D367 D1 03                         .db #$D1, #%00000011
0D369 02 03                         .db #$02, #%00000011
0D36B 22 03                         .db #$22, #%00000011
0D36D 42 03                         .db #$42, #%00000011
0D36F A2 03                         .db #$A2, #%00000011
0D371 C2 03                         .db #$C2, #%00000011
0D373 13 03                         .db #$13, #%00000011
0D375 33 03                         .db #$33, #%00000011
0D377 53 03                         .db #$53, #%00000011
0D379 93 03                         .db #$93, #%00000011
0D37B B3 03                         .db #$B3, #%00000011
0D37D D3 03                         .db #$D3, #%00000011
0D37F 04 03                         .db #$04, #%00000011
0D381 24 03                         .db #$24, #%00000011
0D383 44 03                         .db #$44, #%00000011
0D385 A4 03                         .db #$A4, #%00000011
0D387 C4 03                         .db #$C4, #%00000011
0D389 15 03                         .db #$15, #%00000011
0D38B 35 03                         .db #$35, #%00000011
0D38D 55 03                         .db #$55, #%00000011
0D38F 95 03                         .db #$95, #%00000011
0D391 B5 03                         .db #$B5, #%00000011
0D393 D5 03                         .db #$D5, #%00000011
0D395 06 03                         .db #$06, #%00000011
0D397 26 03                         .db #$26, #%00000011
0D399 46 03                         .db #$46, #%00000011
0D39B A6 03                         .db #$A6, #%00000011
0D39D C6 03                         .db #$C6, #%00000011
0D39F 17 03                         .db #$17, #%00000011
0D3A1 37 03                         .db #$37, #%00000011
0D3A3 57 03                         .db #$57, #%00000011
0D3A5 97 03                         .db #$97, #%00000011
0D3A7 B7 03                         .db #$B7, #%00000011
0D3A9 D7 03                         .db #$D7, #%00000011
0D3AB 08 03                         .db #$08, #%00000011
0D3AD 28 03                         .db #$28, #%00000011
0D3AF 48 03                         .db #$48, #%00000011
0D3B1 A8 03                         .db #$A8, #%00000011
0D3B3 C8 03                         .db #$C8, #%00000011
0D3B5 19 03                         .db #$19, #%00000011
0D3B7 39 03                         .db #$39, #%00000011
0D3B9 59 03                         .db #$59, #%00000011
0D3BB 99 03                         .db #$99, #%00000011
0D3BD B9 03                         .db #$B9, #%00000011
0D3BF D9 03                         .db #$D9, #%00000011
0D3C1 60 4B                         .db #$60, #%01001011
0D3C3 71 CB                         .db #$71, #%11001011
0D3C5 62 4B                         .db #$62, #%01001011
0D3C7 64 4B                         .db #$64, #%01001011
0D3C9 75 CB                         .db #$75, #%11001011
0D3CB 66 4B                         .db #$66, #%01001011
0D3CD 68 4B                         .db #$68, #%01001011
0D3CF 79 0B                         .db #$79, #%00001011
0D3D1 70 03                         .db #$70, #%00000011
0D3D3 72 03                         .db #$72, #%00000011
0D3D5 74 03                         .db #$74, #%00000011
0D3D7 76 03                         .db #$76, #%00000011
0D3D9 78 03                         .db #$78, #%00000011
0D3DB FF                            .db #LEVEL_END
0D3DC                           
0D3DC                           lvl_layout_07:
0D3DC 00 11                         .db #$00, #%00010001
0D3DE 01 FA                         .db #$01, #%11111010
0D3E0 12 BA                         .db #$12, #%10111010
0D3E2 23 DA                         .db #$23, #%11011010
0D3E4 34 FA                         .db #$34, #%11111010
0D3E6 05 DA                         .db #$05, #%11011010
0D3E8 15 FA                         .db #$15, #%11111010
0D3EA 45 BA                         .db #$45, #%10111010
0D3EC 56 DA                         .db #$56, #%11011010
0D3EE 27 BA                         .db #$27, #%10111010
0D3F0 67 DA                         .db #$67, #%11011010
0D3F2 38 3A                         .db #$38, #%00111010
0D3F4 78 BA                         .db #$78, #%10111010
0D3F6 09 3A                         .db #$09, #%00111010
0D3F8 39 3A                         .db #$39, #%00111010
0D3FA 89 1A                         .db #$89, #%00011010
0D3FC B0 01                         .db #$B0, #%00000001
0D3FE D0 01                         .db #$D0, #%00000001
0D400 A1 01                         .db #$A1, #%00000001
0D402 C1 11                         .db #$C1, #%00010001
0D404 B2 01                         .db #$B2, #%00000001
0D406 D2 01                         .db #$D2, #%00000001
0D408 A3 01                         .db #$A3, #%00000001
0D40A C3 01                         .db #$C3, #%00000001
0D40C B4 01                         .db #$B4, #%00000001
0D40E D4 01                         .db #$D4, #%00000001
0D410 A5 01                         .db #$A5, #%00000001
0D412 C5 01                         .db #$C5, #%00000001
0D414 B6 01                         .db #$B6, #%00000001
0D416 D6 01                         .db #$D6, #%00000001
0D418 A7 01                         .db #$A7, #%00000001
0D41A C7 01                         .db #$C7, #%00000001
0D41C FF                            .db #LEVEL_END
0D41D                           
0D41D                           lvl_layout_08:
0D41D 40 B5                         .db #$40, #%10110101
0D41F 31 0D                         .db #$31, #%00001101
0D421 61 10                         .db #$61, #%00010000
0D423 42 C7                         .db #$42, #%11000111
0D425 52 67                         .db #$52, #%01100111
0D427 63 C7                         .db #$63, #%11000111
0D429 83 E7                         .db #$83, #%11100111
0D42B 05 07                         .db #$05, #%00000111
0D42D 15 3A                         .db #$15, #%00111010
0D42F 07 63                         .db #$07, #%01100011
0D431 27 13                         .db #$27, #%00010011
0D433 38 A5                         .db #$38, #%10100101
0D435 09 14                         .db #$09, #%00010100
0D437 19 05                         .db #$19, #%00000101
0D439 D0 E0                         .db #$D0, #%11100000
0D43B C2 A0                         .db #$C2, #%10100000
0D43D B3 E0                         .db #$B3, #%11100000
0D43F D5 E0                         .db #$D5, #%11100000
0D441 C6 E0                         .db #$C6, #%11100000
0D443 B0 C4                         .db #$B0, #%11000100
0D445 C0 A4                         .db #$C0, #%10100100
0D447 D1 A4                         .db #$D1, #%10100100
0D449 C4 24                         .db #$C4, #%00100100
0D44B C5 04                         .db #$C5, #%00000100
0D44D B7 44                         .db #$B7, #%01000100
0D44F B8 A4                         .db #$B8, #%10100100
0D451 D9 05                         .db #$D9, #%00000101
0D453 FF                            .db #LEVEL_END
0D454                           
0D454                           lvl_layout_09:
0D454 81 04                         .db #$81, #%00000100
0D456 D1 04                         .db #$D1, #%00000100
0D458 32 C4                         .db #$32, #%11000100
0D45A A2 C4                         .db #$A2, #%11000100
0D45C C2 24                         .db #$C2, #%00100100
0D45E 13 24                         .db #$13, #%00100100
0D460 53 04                         .db #$53, #%00000100
0D462 C3 27                         .db #$C3, #%00100111
0D464 15 6C                         .db #$15, #%01101100
0D466 55 6C                         .db #$55, #%01101100
0D468 95 6C                         .db #$95, #%01101100
0D46A D5 0C                         .db #$D5, #%00001100
0D46C 27 C7                         .db #$27, #%11000111
0D46E 47 C7                         .db #$47, #%11000111
0D470 67 C7                         .db #$67, #%11000111
0D472 87 C7                         .db #$87, #%11000111
0D474 A7 C7                         .db #$A7, #%11000111
0D476 C7 C7                         .db #$C7, #%11000111
0D478 08 13                         .db #$08, #%00010011
0D47A 28 15                         .db #$28, #%00010101
0D47C 48 12                         .db #$48, #%00010010
0D47E 68 15                         .db #$68, #%00010101
0D480 88 11                         .db #$88, #%00010001
0D482 A8 10                         .db #$A8, #%00010000
0D484 C8 14                         .db #$C8, #%00010100
0D486 09 07                         .db #$09, #%00000111
0D488 19 03                         .db #$19, #%00000011
0D48A 39 05                         .db #$39, #%00000101
0D48C 59 02                         .db #$59, #%00000010
0D48E 79 05                         .db #$79, #%00000101
0D490 99 01                         .db #$99, #%00000001
0D492 B9 00                         .db #$B9, #%00000000
0D494 D9 04                         .db #$D9, #%00000100
0D496 FF                            .db #LEVEL_END
0D497                           
0D497                           lvl_layout_10:
0D497 00 02                         .db #$00, #%00000010
0D499 10 C9                         .db #$10, #%11001001
0D49B 50 C9                         .db #$50, #%11001001
0D49D 90 C9                         .db #$90, #%11001001
0D49F D0 C9                         .db #$D0, #%11001001
0D4A1 31 C9                         .db #$31, #%11001001
0D4A3 71 C9                         .db #$71, #%11001001
0D4A5 B1 C9                         .db #$B1, #%11001001
0D4A7 13 C9                         .db #$13, #%11001001
0D4A9 53 C9                         .db #$53, #%11001001
0D4AB 93 C9                         .db #$93, #%11001001
0D4AD D3 C9                         .db #$D3, #%11001001
0D4AF 34 C9                         .db #$34, #%11001001
0D4B1 74 C9                         .db #$74, #%11001001
0D4B3 B4 C9                         .db #$B4, #%11001001
0D4B5 16 C9                         .db #$16, #%11001001
0D4B7 56 C9                         .db #$56, #%11001001
0D4B9 96 C9                         .db #$96, #%11001001
0D4BB D6 C9                         .db #$D6, #%11001001
0D4BD 37 C9                         .db #$37, #%11001001
0D4BF 77 C9                         .db #$77, #%11001001
0D4C1 B7 C9                         .db #$B7, #%11001001
0D4C3 D8 12                         .db #$D8, #%00010010
0D4C5 FF                            .db #LEVEL_END
0D4C6                           
0D4C6                           lvl_layout_11:
0D4C6 00 65                         .db #$00, #%01100101
0D4C8 40 45                         .db #$40, #%01000101
0D4CA 50 A7                         .db #$50, #%10100111
0D4CC 80 05                         .db #$80, #%00000101
0D4CE 90 A7                         .db #$90, #%10100111
0D4D0 A0 65                         .db #$A0, #%01100101
0D4D2 01 43                         .db #$01, #%01000011
0D4D4 31 23                         .db #$31, #%00100011
0D4D6 61 A7                         .db #$61, #%10100111
0D4D8 81 A7                         .db #$81, #%10100111
0D4DA A1 63                         .db #$A1, #%01100011
0D4DC 02 44                         .db #$02, #%01000100
0D4DE 32 44                         .db #$32, #%01000100
0D4E0 92 04                         .db #$92, #%00000100
0D4E2 A2 64                         .db #$A2, #%01100100
0D4E4 03 40                         .db #$03, #%01000000
0D4E6 33 40                         .db #$33, #%01000000
0D4E8 63 A1                         .db #$63, #%10100001
0D4EA 83 A2                         .db #$83, #%10100010
0D4EC 93 00                         .db #$93, #%00000000
0D4EE A3 60                         .db #$A3, #%01100000
0D4F0 04 41                         .db #$04, #%01000001
0D4F2 34 41                         .db #$34, #%01000001
0D4F4 94 02                         .db #$94, #%00000010
0D4F6 A4 62                         .db #$A4, #%01100010
0D4F8 05 47                         .db #$05, #%01000111
0D4FA 35 67                         .db #$35, #%01100111
0D4FC 75 0A                         .db #$75, #%00001010
0D4FE 85 47                         .db #$85, #%01000111
0D500 B5 47                         .db #$B5, #%01000111
0D502 06 E7                         .db #$06, #%11100111
0D504 16 5A                         .db #$16, #%01011010
0D506 26 11                         .db #$26, #%00010001
0D508 46 13                         .db #$46, #%00010011
0D50A 56 1A                         .db #$56, #%00011010
0D50C 66 14                         .db #$66, #%00010100
0D50E 86 10                         .db #$86, #%00010000
0D510 96 5A                         .db #$96, #%01011010
0D512 A6 12                         .db #$A6, #%00010010
0D514 C6 15                         .db #$C6, #%00010101
0D516 D6 E7                         .db #$D6, #%11100111
0D518 FF                            .db #LEVEL_END
0D519                           
0D519                           lvl_layout_12:
0D519 00 00                         .db #$00, #%00000000
0D51B 50 C0                         .db #$50, #%11000000
0D51D 80 00                         .db #$80, #%00000000
0D51F 61 00                         .db #$61, #%00000000
0D521 22 C0                         .db #$22, #%11000000
0D523 82 E0                         .db #$82, #%11100000
0D525 C2 E0                         .db #$C2, #%11100000
0D527 A3 20                         .db #$A3, #%00100000
0D529 C3 10                         .db #$C3, #%00010000
0D52B 04 00                         .db #$04, #%00000000
0D52D 54 20                         .db #$54, #%00100000
0D52F 15 0A                         .db #$15, #%00001010
0D531 25 C0                         .db #$25, #%11000000
0D533 55 E0                         .db #$55, #%11100000
0D535 86 20                         .db #$86, #%00100000
0D537 C6 E0                         .db #$C6, #%11100000
0D539 C7 A0                         .db #$C7, #%10100000
0D53B 88 00                         .db #$88, #%00000000
0D53D 59 00                         .db #$59, #%00000000
0D53F 89 20                         .db #$89, #%00100000
0D541 D9 1A                         .db #$D9, #%00011010
0D543 FF                            .db #LEVEL_END
0D544                           
0D544                           lvl_layout_13:
0D544 10 E0                         .db #$10, #%11100000
0D546 20 E0                         .db #$20, #%11100000
0D548 30 E0                         .db #$30, #%11100000
0D54A 40 40                         .db #$40, #%01000000
0D54C 80 60                         .db #$80, #%01100000
0D54E C0 E0                         .db #$C0, #%11100000
0D550 D0 E0                         .db #$D0, #%11100000
0D552 41 40                         .db #$41, #%01000000
0D554 71 60                         .db #$71, #%01100000
0D556 52 60                         .db #$52, #%01100000
0D558 A2 20                         .db #$A2, #%00100000
0D55A 43 60                         .db #$43, #%01100000
0D55C 83 60                         .db #$83, #%01100000
0D55E 14 74                         .db #$14, #%01110100
0D560 54 74                         .db #$54, #%01110100
0D562 94 74                         .db #$94, #%01110100
0D564 D4 14                         .db #$D4, #%00010100
0D566 15 0D                         .db #$15, #%00001101
0D568 55 0D                         .db #$55, #%00001101
0D56A 95 0D                         .db #$95, #%00001101
0D56C D5 0D                         .db #$D5, #%00001101
0D56E 26 0D                         .db #$26, #%00001101
0D570 46 0D                         .db #$46, #%00001101
0D572 66 0D                         .db #$66, #%00001101
0D574 86 0D                         .db #$86, #%00001101
0D576 A6 0D                         .db #$A6, #%00001101
0D578 C6 0D                         .db #$C6, #%00001101
0D57A 07 10                         .db #$07, #%00010000
0D57C 37 0D                         .db #$37, #%00001101
0D57E 77 0D                         .db #$77, #%00001101
0D580 B7 0D                         .db #$B7, #%00001101
0D582 28 0D                         .db #$28, #%00001101
0D584 48 0D                         .db #$48, #%00001101
0D586 68 0D                         .db #$68, #%00001101
0D588 88 0D                         .db #$88, #%00001101
0D58A A8 0D                         .db #$A8, #%00001101
0D58C C8 0D                         .db #$C8, #%00001101
0D58E 19 0D                         .db #$19, #%00001101
0D590 59 0D                         .db #$59, #%00001101
0D592 99 0D                         .db #$99, #%00001101
0D594 D9 0D                         .db #$D9, #%00001101
0D596 FF                            .db #LEVEL_END
0D597                           
0D597                           lvl_layout_14:
0D597 00 67                         .db #$00, #%01100111
0D599 40 67                         .db #$40, #%01100111
0D59B 80 67                         .db #$80, #%01100111
0D59D C0 27                         .db #$C0, #%00100111
0D59F 01 27                         .db #$01, #%00100111
0D5A1 31 C7                         .db #$31, #%11000111
0D5A3 51 C7                         .db #$51, #%11000111
0D5A5 71 C7                         .db #$71, #%11000111
0D5A7 91 C7                         .db #$91, #%11000111
0D5A9 B1 C7                         .db #$B1, #%11000111
0D5AB D1 07                         .db #$D1, #%00000111
0D5AD 02 E7                         .db #$02, #%11100111
0D5AF 06 E7                         .db #$06, #%11100111
0D5B1 13 07                         .db #$13, #%00000111
0D5B3 D3 07                         .db #$D3, #%00000111
0D5B5 15 07                         .db #$15, #%00000111
0D5B7 35 07                         .db #$35, #%00000111
0D5B9 55 07                         .db #$55, #%00000111
0D5BB 75 07                         .db #$75, #%00000111
0D5BD 95 07                         .db #$95, #%00000111
0D5BF B5 07                         .db #$B5, #%00000111
0D5C1 D5 07                         .db #$D5, #%00000111
0D5C3 17 07                         .db #$17, #%00000111
0D5C5 37 C7                         .db #$37, #%11000111
0D5C7 57 C7                         .db #$57, #%11000111
0D5C9 77 C7                         .db #$77, #%11000111
0D5CB 97 C7                         .db #$97, #%11000111
0D5CD B7 C7                         .db #$B7, #%11000111
0D5CF D7 07                         .db #$D7, #%00000111
0D5D1 19 07                         .db #$19, #%00000111
0D5D3 D9 07                         .db #$D9, #%00000111
0D5D5 22 4C                         .db #$22, #%01001100
0D5D7 62 4C                         .db #$62, #%01001100
0D5D9 A2 4C                         .db #$A2, #%01001100
0D5DB 24 0C                         .db #$24, #%00001100
0D5DD 44 0C                         .db #$44, #%00001100
0D5DF 64 0C                         .db #$64, #%00001100
0D5E1 84 0C                         .db #$84, #%00001100
0D5E3 A4 0C                         .db #$A4, #%00001100
0D5E5 C4 0C                         .db #$C4, #%00001100
0D5E7 26 0C                         .db #$26, #%00001100
0D5E9 46 0C                         .db #$46, #%00001100
0D5EB 66 0C                         .db #$66, #%00001100
0D5ED 86 0C                         .db #$86, #%00001100
0D5EF A6 0C                         .db #$A6, #%00001100
0D5F1 C6 0C                         .db #$C6, #%00001100
0D5F3 28 4C                         .db #$28, #%01001100
0D5F5 68 4C                         .db #$68, #%01001100
0D5F7 A8 4C                         .db #$A8, #%01001100
0D5F9 32 04                         .db #$32, #%00000100
0D5FB 52 04                         .db #$52, #%00000100
0D5FD 72 04                         .db #$72, #%00000100
0D5FF 92 04                         .db #$92, #%00000100
0D601 B2 04                         .db #$B2, #%00000100
0D603 38 04                         .db #$38, #%00000100
0D605 58 04                         .db #$58, #%00000100
0D607 78 04                         .db #$78, #%00000100
0D609 98 04                         .db #$98, #%00000100
0D60B B8 04                         .db #$B8, #%00000100
0D60D FF                            .db #LEVEL_END
0D60E                           
0D60E                           lvl_layout_15:
0D60E 00 7A                         .db #$00, #%01111010
0D610 40 7A                         .db #$40, #%01111010
0D612 80 7A                         .db #$80, #%01111010
0D614 C0 3A                         .db #$C0, #%00111010
0D616 41 04                         .db #$41, #%00000100
0D618 61 04                         .db #$61, #%00000100
0D61A 81 04                         .db #$81, #%00000100
0D61C A1 04                         .db #$A1, #%00000100
0D61E 05 E4                         .db #$05, #%11100100
0D620 15 64                         .db #$15, #%01100100
0D622 55 64                         .db #$55, #%01100100
0D624 95 64                         .db #$95, #%01100100
0D626 D5 E4                         .db #$D5, #%11100100
0D628 26 04                         .db #$26, #%00000100
0D62A 46 44                         .db #$46, #%01000100
0D62C 76 64                         .db #$76, #%01100100
0D62E C6 04                         .db #$C6, #%00000100
0D630 17 04                         .db #$17, #%00000100
0D632 37 64                         .db #$37, #%01100100
0D634 77 44                         .db #$77, #%01000100
0D636 B7 04                         .db #$B7, #%00000100
0D638 18 64                         .db #$18, #%01100100
0D63A 58 64                         .db #$58, #%01100100
0D63C 98 64                         .db #$98, #%01100100
0D63E FF                            .db #LEVEL_END
0D63F                           
0D63F                           lvl_layout_16:
0D63F 10 E1                         .db #$10, #%11100001
0D641 20 9A                         .db #$20, #%10011010
0D643 30 E1                         .db #$30, #%11100001
0D645 40 E1                         .db #$40, #%11100001
0D647 50 E1                         .db #$50, #%11100001
0D649 60 C1                         .db #$60, #%11000001
0D64B 70 E1                         .db #$70, #%11100001
0D64D 80 E1                         .db #$80, #%11100001
0D64F 90 E1                         .db #$90, #%11100001
0D651 A0 61                         .db #$A0, #%01100001
0D653 21 C1                         .db #$21, #%11000001
0D655 A1 1A                         .db #$A1, #%00011010
0D657 B1 41                         .db #$B1, #%01000001
0D659 A2 E1                         .db #$A2, #%11100001
0D65B B2 E1                         .db #$B2, #%11100001
0D65D C2 1A                         .db #$C2, #%00011010
0D65F D2 E1                         .db #$D2, #%11100001
0D661 63 1A                         .db #$63, #%00011010
0D663 C3 C1                         .db #$C3, #%11000001
0D665 14 61                         .db #$14, #%01100001
0D667 54 61                         .db #$54, #%01100001
0D669 94 C1                         .db #$94, #%11000001
0D66B 15 61                         .db #$15, #%01100001
0D66D 55 41                         .db #$55, #%01000001
0D66F 85 1A                         .db #$85, #%00011010
0D671 16 41                         .db #$16, #%01000001
0D673 46 1A                         .db #$46, #%00011010
0D675 56 61                         .db #$56, #%01100001
0D677 A6 61                         .db #$A6, #%01100001
0D679 17 67                         .db #$17, #%01100111
0D67B 57 67                         .db #$57, #%01100111
0D67D 97 67                         .db #$97, #%01100111
0D67F D7 07                         .db #$D7, #%00000111
0D681 28 41                         .db #$28, #%01000001
0D683 58 61                         .db #$58, #%01100001
0D685 A8 41                         .db #$A8, #%01000001
0D687 18 11                         .db #$18, #%00010001
0D689 38 11                         .db #$38, #%00010001
0D68B 98 11                         .db #$98, #%00010001
0D68D B8 11                         .db #$B8, #%00010001
0D68F D8 11                         .db #$D8, #%00010001
0D691 59 09                         .db #$59, #%00001001
0D693 FF                            .db #LEVEL_END
0D694                           
0D694                           lvl_layout_17:
0D694 10 EA                         .db #$10, #%11101010
0D696 20 E2                         .db #$20, #%11100010
0D698 30 62                         .db #$30, #%01100010
0D69A 70 02                         .db #$70, #%00000010
0D69C 80 6A                         .db #$80, #%01101010
0D69E 90 22                         .db #$90, #%00100010
0D6A0 01 AA                         .db #$01, #%10101010
0D6A2 31 6A                         .db #$31, #%01101010
0D6A4 81 2A                         .db #$81, #%00101010
0D6A6 A1 02                         .db #$A1, #%00000010
0D6A8 C1 02                         .db #$C1, #%00000010
0D6AA D1 0A                         .db #$D1, #%00001010
0D6AC 32 EA                         .db #$32, #%11101010
0D6AE 42 6A                         .db #$42, #%01101010
0D6B0 62 02                         .db #$62, #%00000010
0D6B2 92 6A                         .db #$92, #%01101010
0D6B4 D2 E2                         .db #$D2, #%11100010
0D6B6 43 1A                         .db #$43, #%00011010
0D6B8 53 CA                         .db #$53, #%11001010
0D6BA 73 02                         .db #$73, #%00000010
0D6BC 83 4A                         .db #$83, #%01001010
0D6BE B3 CA                         .db #$B3, #%11001010
0D6C0 C3 EA                         .db #$C3, #%11101010
0D6C2 04 0A                         .db #$04, #%00001010
0D6C4 14 A2                         .db #$14, #%10100010
0D6C6 24 AA                         .db #$24, #%10101010
0D6C8 44 AA                         .db #$44, #%10101010
0D6CA 64 6A                         .db #$64, #%01101010
0D6CC 65 6A                         .db #$65, #%01101010
0D6CE A5 AA                         .db #$A5, #%10101010
0D6D0 06 EA                         .db #$06, #%11101010
0D6D2 16 62                         .db #$16, #%01100010
0D6D4 66 22                         .db #$66, #%00100010
0D6D6 86 2A                         .db #$86, #%00101010
0D6D8 17 42                         .db #$17, #%01000010
0D6DA 47 12                         .db #$47, #%00010010
0D6DC 57 6A                         .db #$57, #%01101010
0D6DE 97 4A                         .db #$97, #%01001010
0D6E0 A7 02                         .db #$A7, #%00000010
0D6E2 18 02                         .db #$18, #%00000010
0D6E4 28 0A                         .db #$28, #%00001010
0D6E6 38 22                         .db #$38, #%00100010
0D6E8 68 2A                         .db #$68, #%00101010
0D6EA 88 62                         .db #$88, #%01100010
0D6EC C8 0A                         .db #$C8, #%00001010
0D6EE D8 02                         .db #$D8, #%00000010
0D6F0 19 2A                         .db #$19, #%00101010
0D6F2 39 2A                         .db #$39, #%00101010
0D6F4 69 42                         .db #$69, #%01000010
0D6F6 99 2A                         .db #$99, #%00101010
0D6F8 B9 42                         .db #$B9, #%01000010
0D6FA FF                            .db #LEVEL_END
0D6FB                           
0D6FB                           lvl_layout_18:
0D6FB 00 12                         .db #$00, #%00010010
0D6FD 40 1A                         .db #$40, #%00011010
0D6FF 50 11                         .db #$50, #%00010001
0D701 70 1A                         .db #$70, #%00011010
0D703 80 10                         .db #$80, #%00010000
0D705 D0 13                         .db #$D0, #%00010011
0D707 01 1A                         .db #$01, #%00011010
0D709 22 15                         .db #$22, #%00010101
0D70B A2 1A                         .db #$A2, #%00011010
0D70D B2 14                         .db #$B2, #%00010100
0D70F 03 67                         .db #$03, #%01100111
0D711 43 67                         .db #$43, #%01100111
0D713 83 67                         .db #$83, #%01100111
0D715 24 09                         .db #$24, #%00001001
0D717 74 0D                         .db #$74, #%00001101
0D719 C4 0A                         .db #$C4, #%00001010
0D71B 05 A7                         .db #$05, #%10100111
0D71D 45 27                         .db #$45, #%00100111
0D71F 95 27                         .db #$95, #%00100111
0D721 16 C7                         .db #$16, #%11000111
0D723 36 67                         .db #$36, #%01100111
0D725 86 67                         .db #$86, #%01100111
0D727 D6 07                         .db #$D6, #%00000111
0D729 07 A3                         .db #$07, #%10100011
0D72B 27 23                         .db #$27, #%00100011
0D72D 47 C7                         .db #$47, #%11000111
0D72F 57 A0                         .db #$57, #%10100000
0D731 67 A7                         .db #$67, #%10100111
0D733 77 20                         .db #$77, #%00100000
0D735 97 C7                         .db #$97, #%11000111
0D737 A7 A4                         .db #$A7, #%10100100
0D739 B7 A7                         .db #$B7, #%10100111
0D73B C7 24                         .db #$C7, #%00100100
0D73D 28 0B                         .db #$28, #%00001011
0D73F 38 A3                         .db #$38, #%10100011
0D741 78 08                         .db #$78, #%00001000
0D743 88 A0                         .db #$88, #%10100000
0D745 C8 0C                         .db #$C8, #%00001100
0D747 D8 A4                         .db #$D8, #%10100100
0D749 09 43                         .db #$09, #%01000011
0D74B 59 40                         .db #$59, #%01000000
0D74D A9 44                         .db #$A9, #%01000100
0D74F FF                            .db #LEVEL_END
0D750                           
0D750                           lvl_layout_19:
0D750 11 A8                         .db #$11, #%10101000
0D752 21 68                         .db #$21, #%01101000
0D754 81 28                         .db #$81, #%00101000
0D756 B1 48                         .db #$B1, #%01001000
0D758 22 48                         .db #$22, #%01001000
0D75A 62 68                         .db #$62, #%01101000
0D75C B2 28                         .db #$B2, #%00101000
0D75E 23 28                         .db #$23, #%00101000
0D760 83 28                         .db #$83, #%00101000
0D762 B3 28                         .db #$B3, #%00101000
0D764 04 E8                         .db #$04, #%11101000
0D766 24 08                         .db #$24, #%00001000
0D768 44 08                         .db #$44, #%00001000
0D76A 64 E8                         .db #$64, #%11101000
0D76C 84 E8                         .db #$84, #%11101000
0D76E C4 A8                         .db #$C4, #%10101000
0D770 D4 E8                         .db #$D4, #%11101000
0D772 15 48                         .db #$15, #%01001000
0D774 55 C8                         .db #$55, #%11001000
0D776 75 C8                         .db #$75, #%11001000
0D778 A5 08                         .db #$A5, #%00001000
0D77A 36 08                         .db #$36, #%00001000
0D77C B6 08                         .db #$B6, #%00001000
0D77E 27 48                         .db #$27, #%01001000
0D780 97 28                         .db #$97, #%00101000
0D782 C7 08                         .db #$C7, #%00001000
0D784 09 61                         .db #$09, #%01100001
0D786 19 11                         .db #$19, #%00010001
0D788 49 61                         .db #$49, #%01100001
0D78A 89 31                         .db #$89, #%00110001
0D78C A9 61                         .db #$A9, #%01100001
0D78E FF                            .db #LEVEL_END
0D78F                           
0D78F                           lvl_layout_20:
0D78F 00 60                         .db #$00, #%01100000
0D791 10 1A                         .db #$10, #%00011010
0D793 40 A7                         .db #$40, #%10100111
0D795 50 20                         .db #$50, #%00100000
0D797 70 1A                         .db #$70, #%00011010
0D799 80 40                         .db #$80, #%01000000
0D79B B0 1A                         .db #$B0, #%00011010
0D79D C0 20                         .db #$C0, #%00100000
0D79F 01 40                         .db #$01, #%01000000
0D7A1 31 1A                         .db #$31, #%00011010
0D7A3 A1 40                         .db #$A1, #%01000000
0D7A5 D1 1A                         .db #$D1, #%00011010
0D7A7 43 67                         .db #$43, #%01100111
0D7A9 83 47                         .db #$83, #%01000111
0D7AB 44 A7                         .db #$44, #%10100111
0D7AD 54 25                         .db #$54, #%00100101
0D7AF 94 08                         .db #$94, #%00001000
0D7B1 A4 A7                         .db #$A4, #%10100111
0D7B3 55 05                         .db #$55, #%00000101
0D7B5 65 08                         .db #$65, #%00001000
0D7B7 06 27                         .db #$06, #%00100111
0D7B9 36 67                         .db #$36, #%01100111
0D7BB 76 28                         .db #$76, #%00101000
0D7BD A6 27                         .db #$A6, #%00100111
0D7BF D6 07                         .db #$D6, #%00000111
0D7C1 A7 A7                         .db #$A7, #%10100111
0D7C3 08 60                         .db #$08, #%01100000
0D7C5 09 60                         .db #$09, #%01100000
0D7C7 18 A7                         .db #$18, #%10100111
0D7C9 48 A7                         .db #$48, #%10100111
0D7CB 58 47                         .db #$58, #%01000111
0D7CD 88 27                         .db #$88, #%00100111
0D7CF B8 20                         .db #$B8, #%00100000
0D7D1 D8 1A                         .db #$D8, #%00011010
0D7D3 59 15                         .db #$59, #%00010101
0D7D5 69 60                         .db #$69, #%01100000
0D7D7 A9 60                         .db #$A9, #%01100000
0D7D9 FF                            .db #LEVEL_END
0D7DA                           
0D7DA                           lvl_layout_21:
0D7DA 00 13                         .db #$00, #%00010011
0D7DC 10 11                         .db #$10, #%00010001
0D7DE 20 67                         .db #$20, #%01100111
0D7E0 60 67                         .db #$60, #%01100111
0D7E2 A0 47                         .db #$A0, #%01000111
0D7E4 D0 15                         .db #$D0, #%00010101
0D7E6 32 63                         .db #$32, #%01100011
0D7E8 72 05                         .db #$72, #%00000101
0D7EA 82 43                         .db #$82, #%01000011
0D7EC B2 43                         .db #$B2, #%01000011
0D7EE 33 03                         .db #$33, #%00000011
0D7F0 43 2A                         .db #$43, #%00101010
0D7F2 63 7A                         .db #$63, #%01111010
0D7F4 73 2A                         .db #$73, #%00101010
0D7F6 A3 7A                         .db #$A3, #%01111010
0D7F8 34 63                         .db #$34, #%01100011
0D7FA 74 63                         .db #$74, #%01100011
0D7FC B4 43                         .db #$B4, #%01000011
0D7FE 06 63                         .db #$06, #%01100011
0D800 46 63                         .db #$46, #%01100011
0D802 86 63                         .db #$86, #%01100011
0D804 C6 C3                         .db #$C6, #%11000011
0D806 07 7A                         .db #$07, #%01111010
0D808 47 7A                         .db #$47, #%01111010
0D80A 67 0A                         .db #$67, #%00001010
0D80C 87 7A                         .db #$87, #%01111010
0D80E 08 13                         .db #$08, #%00010011
0D810 18 43                         .db #$18, #%01000011
0D812 48 63                         .db #$48, #%01100011
0D814 88 63                         .db #$88, #%01100011
0D816 FF                            .db #LEVEL_END
0D817                           
0D817                           lvl_layout_22:
0D817 00 7A                         .db #$00, #%01111010
0D819 40 7A                         .db #$40, #%01111010
0D81B 80 7A                         .db #$80, #%01111010
0D81D C0 3A                         .db #$C0, #%00111010
0D81F 13 67                         .db #$13, #%01100111
0D821 83 A7                         .db #$83, #%10100111
0D823 B3 07                         .db #$B3, #%00000111
0D825 14 07                         .db #$14, #%00000111
0D827 44 07                         .db #$44, #%00000111
0D829 A4 07                         .db #$A4, #%00000111
0D82B 15 A5                         .db #$15, #%10100101
0D82D 45 A5                         .db #$45, #%10100101
0D82F 85 25                         .db #$85, #%00100101
0D831 86 05                         .db #$86, #%00000101
0D833 A6 05                         .db #$A6, #%00000101
0D835 17 11                         .db #$17, #%00010001
0D837 47 A1                         .db #$47, #%10100001
0D839 87 A1                         .db #$87, #%10100001
0D83B B7 A1                         .db #$B7, #%10100001
0D83D 18 41                         .db #$18, #%01000001
0D83F 68 01                         .db #$68, #%00000001
0D841 D8 01                         .db #$D8, #%00000001
0D843 FF                            .db #LEVEL_END
0D844                           
0D844                           lvl_layout_23:
0D844 00 71                         .db #$00, #%01110001
0D846 40 11                         .db #$40, #%00010001
0D848 50 43                         .db #$50, #%01000011
0D84A 80 D1                         .db #$80, #%11010001
0D84C 90 E3                         .db #$90, #%11100011
0D84E A0 63                         .db #$A0, #%01100011
0D850 01 63                         .db #$01, #%01100011
0D852 41 63                         .db #$41, #%01100011
0D854 A1 63                         .db #$A1, #%01100011
0D856 02 63                         .db #$02, #%01100011
0D858 42 63                         .db #$42, #%01100011
0D85A 62 11                         .db #$62, #%00010001
0D85C A2 67                         .db #$A2, #%01100111
0D85E 04 63                         .db #$04, #%01100011
0D860 44 23                         .db #$44, #%00100011
0D862 64 D1                         .db #$64, #%11010001
0D864 74 E3                         .db #$74, #%11100011
0D866 84 F1                         .db #$84, #%11110001
0D868 94 E3                         .db #$94, #%11100011
0D86A A4 C7                         .db #$A4, #%11000111
0D86C B4 23                         .db #$B4, #%00100011
0D86E 05 63                         .db #$05, #%01100011
0D870 45 23                         .db #$45, #%00100011
0D872 06 71                         .db #$06, #%01110001
0D874 46 11                         .db #$46, #%00010001
0D876 56 E3                         .db #$56, #%11100011
0D878 D6 07                         .db #$D6, #%00000111
0D87A 17 D1                         .db #$17, #%11010001
0D87C 27 43                         .db #$27, #%01000011
0D87E 67 D1                         .db #$67, #%11010001
0D880 A7 C7                         .db #$A7, #%11000111
0D882 C7 A7                         .db #$C7, #%10100111
0D884 D7 B3                         .db #$D7, #%10110011
0D886 28 43                         .db #$28, #%01000011
0D888 78 43                         .db #$78, #%01000011
0D88A 29 43                         .db #$29, #%01000011
0D88C 79 43                         .db #$79, #%01000011
0D88E FF                           .db #LEVEL_END
0D88F                           
0D88F                           lvl_layout_24:
0D88F 02 67                         .db #$02, #%01100111
0D891 42 67                         .db #$42, #%01100111
0D893 82 67                         .db #$82, #%01100111
0D895 05 67                         .db #$05, #%01100111
0D897 45 67                         .db #$45, #%01100111
0D899 85 67                         .db #$85, #%01100111
0D89B 08 67                         .db #$08, #%01100111
0D89D 48 67                         .db #$48, #%01100111
0D89F 88 67                         .db #$88, #%01100111
0D8A1 30 E7                         .db #$30, #%11100111
0D8A3 70 E7                         .db #$70, #%11100111
0D8A5 B0 E7                         .db #$B0, #%11100111
0D8A7 34 E7                         .db #$34, #%11100111
0D8A9 74 E7                         .db #$74, #%11100111
0D8AB B4 E7                         .db #$B4, #%11100111
0D8AD 20 13                         .db #$20, #%00010011
0D8AF 40 10                         .db #$40, #%00010000
0D8B1 80 02                         .db #$80, #%00000010
0D8B3 41 05                         .db #$41, #%00000101
0D8B5 B1 09                         .db #$B1, #%00001001
0D8B7 02 09                         .db #$02, #%00001001
0D8B9 52 0C                         .db #$52, #%00001100
0D8BB 13 11                         .db #$13, #%00010001
0D8BD 33 04                         .db #$33, #%00000100
0D8BF 74 0C                         .db #$74, #%00001100
0D8C1 B4 08                         .db #$B4, #%00001000
0D8C3 15 09                         .db #$15, #%00001001
0D8C5 55 0C                         .db #$55, #%00001100
0D8C7 95 0C                         .db #$95, #%00001100
0D8C9 47 03                         .db #$47, #%00000011
0D8CB A7 12                         .db #$A7, #%00010010
0D8CD 18 15                         .db #$18, #%00010101
0D8CF 09 05                         .db #$09, #%00000101
0D8D1 19 03                         .db #$19, #%00000011
0D8D3 FF                            .db #LEVEL_END
0D8D4                           
0D8D4                           lvl_layout_25:
0D8D4 00 12                         .db #$00, #%00010010
0D8D6 10 63                         .db #$10, #%01100011
0D8D8 60 63                         .db #$60, #%01100011
0D8DA A0 07                         .db #$A0, #%00000111
0D8DC 01 11                         .db #$01, #%00010001
0D8DE A1 02                         .db #$A1, #%00000010
0D8E0 02 67                         .db #$02, #%01100111
0D8E2 42 07                         .db #$42, #%00000111
0D8E4 62 67                         .db #$62, #%01100111
0D8E6 A2 C7                         .db #$A2, #%11000111
0D8E8 03 61                         .db #$03, #%01100001
0D8EA 43 01                         .db #$43, #%00000001
0D8EC 63 61                         .db #$63, #%01100001
0D8EE A6 E7                         .db #$A6, #%11100111
0D8F0 B6 47                         .db #$B6, #%01000111
0D8F2 C6 01                         .db #$C6, #%00000001
0D8F4 B7 42                         .db #$B7, #%01000010
0D8F6 B8 42                         .db #$B8, #%01000010
0D8F8 C8 0A                         .db #$C8, #%00001010
0D8FA 09 7A                         .db #$09, #%01111010
0D8FC 49 7A                         .db #$49, #%01111010
0D8FE 89 3A                         .db #$89, #%00111010
0D900 B9 42                         .db #$B9, #%01000010
0D902 FF                            .db #LEVEL_END
0D903                           
0D903                           ;; Level layout address pointers
0D903                           tbl_lvl_layout_hi:
0D903                           ifdef TESTING
0D903 D2                            .db >#lvl_test
0D904                           endif
0D904 D2 D2 D2 D2 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D909 D3 D3 D4 D4 D4                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D90E D4 D5 D5 D5 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D913 D6 D6 D6 D7 D7                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D918 D7 D8 D8 D8 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D91D                           
0D91D                           tbl_lvl_layout_lo:
0D91D                           ifdef TESTING
0D91D 13                            .db <#lvl_test
0D91E                           endif
0D91E 24 3F 74 A7 18                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D923 53 DC 1D 54 97                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D928 C6 19 44 97 0E                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D92D 3F 94 FB 50 8F                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D932 DA 17 44 8F D4                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D937                           
0D937                           ;; Ball start position (#$YX)
0D937                           tbl_lvl_ball_startpos:
0D937                           ifdef TESTING
0D937 29                            .db #$29
0D938                           endif
0D938 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D93D 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D942 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D947 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D94C 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D951                           
0D951                               
0D951                           ;; Ball start direction, color and tile score
0D951                           ;; #% ccc v tttt
0D951                           ;;    ||| | ++++-- tile score
0D951                           ;;    ||| +------- vertical direction, up (0) or down
0D951                           ;;    +++--------- color (CBRYGM)
0D951                           tbl_lvl_ball_init:
0D951                           ifdef TESTING
0D951 20                            .db #%00100000
0D952                           endif
0D952 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D957 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D95C 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D961 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D966 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D96B                           
0D96B                           
0D96B                           
0D96B                           ;; Helper table to multiply values by 16
0D96B                           tbl_Times16:
0D96B 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D973 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D97B                               
0D97B                           
0D97B                           ;; Helper table to multiply values by 64
0D97B                           tbl_Times64:
0D97B 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D97F                           
0D97F                           
0D97F                           ;; Metatile ID to CHR data mapper
0D97F                           tbl_GametileTopLeft:
0D97F 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D989                           
0D989                           tbl_GametileTopRight:
0D989 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D993                           
0D993                           tbl_GametileBottomLeft:
0D993 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D99D                           
0D99D                           tbl_GametileBottomRight:
0D99D 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D9A7                           
0D9A7                           ;; Metatile ID to RAM byte data mapper
0D9A7                           tbl_GameTileRamByte:
0D9A7 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D9AC                           
0D9AC                           ;; HUD text data
0D9AC                           tbl_HudText:
0D9AC 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D9B4 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D9BB 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D9C3 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D9C8                           
0D9C8                           ;; Move block top left tile based on color
0D9C8                           tbl_MoveBlockTopLeftTile:
0D9C8 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D9CF                           
0D9CF                           ;; Game over data
0D9CF                           tbl_GameOver:
0D9CF 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D9D3 00 00                         .db #_SPACE, #_SPACE
0D9D5 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0D9D9                           
0D9D9                           ;; Background fade pallette table
0D9D9                           tbl_BackgroundFade:
0D9D9 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0D9E3                           
0D9E3                           ;; Sound effects
0D9E3                           .include "game/include/table/sfx.asm"
0D9E3                           ;;
0D9E3                           ;; Explosion sound effects
0D9E3                           ;;
0D9E3                           ;;   #% ffff vvvv
0D9E3                           ;;      |||| ++++---- volume (0=low, 15=high)
0D9E3                           ;;      ++++-------- frequency (0=low, 15=high)
0D9E3                           ;;
0D9E3                           ;; #$FF = end of sfx
0D9E3                           ;;
0D9E3                           
0D9E3                           tbl_ExplosionSfx:
0D9E3 00                            .db #$00 ; buffer byte
0D9E4 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0D9EC 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0D9F4 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0D9FC 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DA04 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DA0C 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DA11                           
0DA11                           tbl_ThudSfx:
0DA11 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA12 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DA1A E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DA1F                           
0DA1F                           tbl_BounceSfx:
0DA1F 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA20 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DA24                           
0DA24 00                            .db #$00
0DA25                           tbl_Sfx_hi:
0DA25 D9 DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DA28                           
0DA28                           tbl_Sfx_lo:
0DA28 E3 11 1F                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DA2B                           
0DA2B                           ;; Lookup table to convert bonus ticks to score
0DA2B                           tbl_BonusToScore:
0DA2B 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DA35                           
0DA35                           
0DA35                           ;; NMI handler
0DA35                           NMI:
0DA35                               .include "interrupt/nmi.asm"
0DA35                           
0DA35                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DA35                           ;;
0DA35                           ;; include/nmi.asm
0DA35                           ;;
0DA35                           ;; Non-maskable interrupt script. This script is being executed
0DA35                           ;; when vBlank hits.
0DA35                           ;;
0DA35                           ;;
0DA35                           
0DA35                               ;; Preserve accumulator through stack
0DA35 48                            PHA
0DA36                           
0DA36                               ;; Should NMI be skipped?
0DA36 A5 13                         LDA skip_nmi
0DA38 F0 03                         BEQ +
0DA3A 4C AC DB                          JMP +skip_nmi
0DA3D                               +
0DA3D                           
0DA3D                               ;; When in NMI, skip additional NMI requests
0DA3D A9 01                         LDA #$01
0DA3F 85 13                         STA skip_nmi
0DA41                           
0DA41                               ;; Preserve X, Y, and PC through stack
0DA41 8A                            TXA
0DA42 48                            PHA
0DA43 98                            TYA
0DA44 48                            PHA
0DA45 08                            PHP
0DA46                               
0DA46                               ;; Check forced NMI skip
0DA46 A5 14                         LDA force_skip_nmi
0DA48 F0 03                         BEQ +
0DA4A 4C 9B DB                          JMP +force_skip_nmi
0DA4D                               +
0DA4D                           
0DA4D                               ;; Update PPU mask
0DA4D                               ;LDA #$00
0DA4D                               ;STA PPU_CTRL
0DA4D A5 12                         LDA soft_ppu_mask
0DA4F 8D 01 20                      STA PPU_MASK
0DA52                               
0DA52                               
0DA52                               ;; Additional PPU updates go here
0DA52                               .include "game/interrupt/nmi.asm"
0DA52                           
0DA52                               ;; Check if ppu_buffer needs updating
0DA52 A5 39                         LDA ppu_buffer_update
0DA54 D0 03                         BNE +
0DA56 4C 98 DA                          JMP +no_ppu_buffer_update
0DA59                               +
0DA59                           
0DA59                               ;; Reset ppu control register and mask
0DA59 A2 00                         LDX #$00
0DA5B 8E 00 20                      STX PPU_CTRL
0DA5E 8E 01 20                      STX PPU_MASK
0DA61                           
0DA61                               ;; Set up loop
0DA61                               -
0DA61                                   ;; Reset hi/lo latch
0DA61 2C 02 20                          BIT PPU_STATUS
0DA64                           
0DA64                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DA64 BD 00 03                          LDA ppu_buffer,x
0DA67 8D 06 20                          STA PPU_ADDR
0DA6A E8                                INX
0DA6B BD 00 03                          LDA ppu_buffer,x
0DA6E 8D 06 20                          STA PPU_ADDR
0DA71                           
0DA71                                   ;; Write ppu_buffer data to PPU_ADDR
0DA71 E8                                INX
0DA72 BD 00 03                          LDA ppu_buffer,x
0DA75 8D 07 20                          STA PPU_DATA
0DA78                           
0DA78                                   ;; Check if updating is done (eg. X is at pointer)
0DA78 E8                                INX
0DA79 E4 3A                             CPX ppu_buffer_pointer
0DA7B F0 03                             BEQ +
0DA7D 4C 61 DA                      JMP -
0DA80                           +
0DA80                           
0DA80                               ;; Reset ppu buffer update and pointer
0DA80 A9 00                         LDA #$00
0DA82 85 39                         STA ppu_buffer_update
0DA84 85 3A                         STA ppu_buffer_pointer
0DA86                               
0DA86                               ;; Reset scrolling position
0DA86 8D 05 20                      STA PPU_SCROLL
0DA89 8D 05 20                      STA PPU_SCROLL
0DA8C                           
0DA8C                               ;; Restore ppu control register and mask
0DA8C A9 90                         LDA #%10010000
0DA8E 8D 00 20                      STA PPU_CTRL
0DA91 A5 12                         LDA soft_ppu_mask
0DA93 8D 01 20                      STA PPU_MASK
0DA96 A9 00                         LDA #$00
0DA98                           
0DA98                           ;; Continue other NMI stuff
0DA98                           +no_ppu_buffer_update:
0DA98                           
0DA98                               ;; Reset sprite RAM, draw sprites
0DA98 8D 03 20                      STA OAM_ADDR
0DA9B A9 02                         LDA #$02
0DA9D 8D 14 40                      STA OAM_DMA
0DAA0                           
0DAA0                               ;; Decrease explosion and move block timers
0DAA0 A0 04                         LDY #MAX_ANIMATIONS
0DAA2 A2 00                         LDX #$00
0DAA4                               -
0DAA4 BD 60 03                          LDA explosion_timer,x
0DAA7 F0 03                             BEQ +
0DAA9 DE 60 03                              DEC explosion_timer,x
0DAAC                                   +
0DAAC                           
0DAAC BD 80 03                          LDA move_block_timer,x
0DAAF F0 03                             BEQ +
0DAB1 DE 80 03                              DEC move_block_timer,x
0DAB4                                   +
0DAB4                                   
0DAB4 E8                                INX
0DAB5 88                                DEY
0DAB6 F0 03                             BEQ +done
0DAB8 4C A4 DA                      JMP -
0DABB                           +done:
0DABB                           
0DABB                               ;; Decrease nudge timer
0DABB A5 3E                         LDA nudge_timer
0DABD F0 02                         BEQ +
0DABF C6 3E                             DEC nudge_timer
0DAC1                               +
0DAC1                           
0DAC1                               ;; Decrease bonus timer
0DAC1 A5 3F                         LDA bonus_timer
0DAC3 F0 02                         BEQ +
0DAC5 C6 3F                             DEC bonus_timer
0DAC7                               +
0DAC7                           
0DAC7                               ;; Decrease kill timer
0DAC7 A5 40                         LDA kill_timer
0DAC9 F0 02                         BEQ +
0DACB C6 40                             DEC kill_timer
0DACD                               +
0DACD                           
0DACD                               ;; Play background noise
0DACD A5 38                         LDA screen_mode
0DACF 29 01                         AND #IS_GAME_SCREEN
0DAD1 F0 0E                         BEQ +
0DAD3                                   .include "game/include/main/background_sound.asm"
0DAD3                           
0DAD3                               ;; If ball is frozen, no background sound should play
0DAD3 A5 37                         LDA ball_flags
0DAD5 29 04                         AND #BALL_IS_FROZEN
0DAD7 F0 08                         BEQ +
0DAD9 A9 30                             LDA #$30
0DADB 8D 0C 40                          STA NOISE_VOLUME
0DADE 4C 46 DB                          JMP +endNoise
0DAE1                               +
0DAE1                               
0DAE1                               ;; At random times, set max_noise period to $03-$0A
0DAE1 A5 44                         LDA max_noise
0DAE3 D0 1D                         BNE +
0DAE5 20 73 C5                          JSR sub_GetRandomNumber
0DAE8 29 EF                             AND #%11101111
0DAEA D0 16                             BNE +
0DAEC                                   
0DAEC A5 15                             LDA frame_counter
0DAEE 85 16                             STA random_seed
0DAF0 20 73 C5                          JSR sub_GetRandomNumber
0DAF3 29 07                             AND #$07
0DAF5 69 03                             ADC #$03
0DAF7 85 44                             STA max_noise
0DAF9 A9 01                             LDA #$01
0DAFB 85 45                             STA sweep_noise
0DAFD A9 34                             LDA #$34
0DAFF 8D 0C 40                          STA NOISE_VOLUME
0DB02                           
0DB02                               +
0DB02                           
0DB02                               ;; if sweep noise = $00: constant noise
0DB02                               ;; else if sweep noise > $80: decrease pitch
0DB02                               ;; else: increase pitch
0DB02 A5 45                         LDA sweep_noise
0DB04 F0 18                         BEQ +constantNoise
0DB06 30 2A                         BMI +decreaseNoise
0DB08                           
0DB08                           ;; Sweep noise up to max noise pitch
0DB08                           +increaseNoise:
0DB08 C6 46                         DEC current_noise
0DB0A A5 46                         LDA current_noise
0DB0C 8D 0E 40                      STA NOISE_PERIOD
0DB0F C5 44                         CMP max_noise
0DB11 D0 08                         BNE +
0DB13 A9 00                             LDA #$00
0DB15 85 45                             STA sweep_noise
0DB17 A9 0A                             LDA #$0A
0DB19 85 47                             STA noise_timer
0DB1B                               +
0DB1B 4C 46 DB                      JMP +endNoise
0DB1E                           
0DB1E                           ;; Keep noise at constant pitch
0DB1E                           +constantNoise:
0DB1E A5 44                         LDA max_noise
0DB20 F0 24                         BEQ +endNoise
0DB22                           
0DB22 A5 47                         LDA noise_timer
0DB24 D0 07                         BNE +
0DB26 A9 80                             LDA #$80
0DB28 85 45                             STA sweep_noise
0DB2A 4C 46 DB                          JMP +endNoise
0DB2D                               +
0DB2D C6 47                         DEC noise_timer
0DB2F 4C 46 DB                      JMP +endNoise
0DB32                           
0DB32                           ;; Sweep noise down to initial pitch
0DB32                           +decreaseNoise:
0DB32 E6 46                         INC current_noise
0DB34 A5 46                         LDA current_noise
0DB36 8D 0E 40                      STA NOISE_PERIOD
0DB39 C9 0E                         CMP #$0E
0DB3B D0 09                         BNE +endNoise
0DB3D                           
0DB3D 20 03 C6                      JSR sub_BackgroundNoise
0DB40 A9 00                         LDA #$00
0DB42 85 44                         STA max_noise
0DB44 85 45                         STA sweep_noise
0DB46                           
0DB46                           +endNoise:
0DB46                           
0DB46                               +
0DB46                           
0DB46                               ;; Play bonus to score bleeps
0DB46                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DB46                           
0DB46                           ;; Random bleepy noises
0DB46                           
0DB46 A5 48                         LDA do_beeps
0DB48 F0 2E                         BEQ +continue
0DB4A                               
0DB4A C9 02                         CMP #$02
0DB4C D0 12                         BNE +beep
0DB4E                              
0DB4E                           +stopBeep:
0DB4E A9 00                         LDA #$00
0DB50 85 48                         STA do_beeps
0DB52 A9 08                         LDA #$08
0DB54 8D 15 40                      STA APU_STATUS
0DB57 8D 0F 40                      STA NOISE_LENGTH
0DB5A 20 03 C6                      JSR sub_BackgroundNoise
0DB5D 4C 78 DB                      JMP +continue
0DB60                               
0DB60                           +beep:
0DB60 A9 01                         LDA #$01
0DB62 8D 15 40                      STA APU_STATUS
0DB65 A5 49                         LDA soft_pulse1
0DB67 8D 00 40                      STA PULSE1_VOLUME
0DB6A 20 73 C5                      JSR sub_GetRandomNumber
0DB6D 8D 02 40                      STA PULSE1_TIMER_LO
0DB70 20 73 C5                      JSR sub_GetRandomNumber
0DB73 29 01                         AND #$01
0DB75 8D 03 40                      STA PULSE1_TIMER_HI
0DB78                           
0DB78                           +continue:
0DB78                           
0DB78                               
0DB78                               ;; Play sound effect
0DB78                               .include "game/include/main/nmi_sfx.asm"
0DB78                           
0DB78                               ;; Get current explosion sfx frame; if not set, skip this
0DB78 A4 4C                         LDY sfx_timer
0DB7A F0 1F                         BEQ +done
0DB7C                               
0DB7C                                   ;; Check if explosion sfx is done; if so, disable and skip
0DB7C B1 4A                             LDA (sfx_address),y
0DB7E D0 07                             BNE +
0DB80 A9 00                                 LDA #$00
0DB82 85 4C                                 STA sfx_timer
0DB84 4C 9B DB                              JMP +done
0DB87                                   +
0DB87                                   
0DB87                                   ;; Set low nibble as volume
0DB87 29 0F                             AND #$0F
0DB89 09 30                             ORA #$30
0DB8B 8D 0C 40                          STA NOISE_VOLUME
0DB8E                                   
0DB8E                                   ;; Set high nibble as frequency
0DB8E B1 4A                             LDA (sfx_address),y
0DB90 4A                                LSR
0DB91 4A                                LSR
0DB92 4A                                LSR
0DB93 4A                                LSR
0DB94 49 0F                             EOR #$0F
0DB96 8D 0E 40                          STA NOISE_PERIOD
0DB99                                   
0DB99                                   ;; Next frame
0DB99 E6 4C                             INC sfx_timer
0DB9B                               +done
0DB9B                           
0DB9B                               
0DB9B                           
0DB9B                           ;; This is what happens when we forced nmi skip
0DB9B                           +force_skip_nmi:
0DB9B                           
0DB9B                               ;; Increase frame timers
0DB9B E6 15                         INC frame_counter
0DB9D                           
0DB9D                               ;; reset sprites_update_position
0DB9D A9 00                         LDA #$00
0DB9F 85 35                         STA sprites_update_position
0DBA1                           
0DBA1                               ;; Don't skip next NMI request
0DBA1 A9 00                         LDA #$00
0DBA3 85 13                         STA skip_nmi
0DBA5 85 4D                         STA check_nmi
0DBA7                           
0DBA7                               ;; Restore X, Y and PC from stack
0DBA7 28                            PLP
0DBA8 68                            PLA
0DBA9 A8                            TAY
0DBAA 68                            PLA
0DBAB AA                            TAX
0DBAC                           
0DBAC                           +skip_nmi:
0DBAC                               ;; Restore accumulator from stack
0DBAC 68                            PLA
0DBAD                           
0DBAD                               ;; Return
0DBAD 40                            RTI
0DBAE                           
0DBAE                           
0DBAE                           ;; IRQ handler (empty)
0DBAE                           IRQ:
0DBAE                               .include "interrupt/irq.asm"
0DBAE                           
0DBAE 40                            RTI
0DBAF                           
0DBAF                           
0DBAF                           ;; Interrupt vectors
0DBAF 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 35 DA                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE AE DB                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
