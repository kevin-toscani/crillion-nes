	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$06
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           ball_update_position   .dsb 1
00036                           
00036                           
00036                           ;; Ball flags
00036                           ;; #% c c c v . f n a
00036                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00036                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00036                           ;;    | | | | | +------ ball is frozen (not moving)
00036                           ;;    | | | | +-------- (unused for now)
00036                           ;;    | | | +---------- ball moves up (0) or down (1)
00036                           ;;    +-+-+------------ ball color (1-6)
00036                           ball_flags             .dsb 1
00037                           
00037                           
00037                           ;; Screen mode
00037                           ;; #% u . . . . . t t
00037                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00037                           ;;    | +-+-+-+-+------------- unused
00037                           ;;    +----------------------- should the screen update
00037                           screen_mode            .dsb 1
00038                           
00038                           
00038                           
00038                           ;; PPU buffer variables
00038                           ppu_buffer_update      .dsb 1
00039                           ppu_buffer_pointer     .dsb 1
0003A                           
0003A                           ;; Pointer to keep track of the number of explosions
0003A                           explosion_pointer      .dsb 1
0003B                           
0003B                           ;; Sprite RAM pointer to keep track of sprites to update
0003B                           sprite_ram_pointer     .dsb 1
0003C                           
0003C                           ;; Counters (actually Timers, should refactor [@TODO])
0003C                           nudge_counter          .dsb 1
0003D                           bonus_counter          .dsb 1
0003E                           kill_counter           .dsb 1
0003F                           
0003F                           ;; Current level (doubles as level select variable)
0003F                           current_level          .dsb 1
00040                           
00040                           ;; Tile type the ball is currently colliding with
00040                           colliding_tile         .dsb 1
00041                           
00041                           ;; Number of blocks left on screen
00041                           blocks_left            .dsb 1
00042                           
00042                           ;; Sound control variables
00042                           max_noise              .dsb 1
00043                           sweep_noise            .dsb 1
00044                           current_noise          .dsb 1
00045                           noise_counter          .dsb 1
00046                           do_beeps               .dsb 1
00047                           
00047                           ;; Additional NMI check for timed PPU fade
00047                           check_nmi              .dsb 1
00048                               00048                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_framecounter    .dsb 4
00364                           
00364                               ;; _currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; _attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 7A C4                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 7A C4                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 37                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 3F                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3B                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 5D C4                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 37                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 37                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 32 CE                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 2F CE                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 A1 C5                      JSR sub_DisableRendering
0C08A 20 80 C8                      JSR sub_JumpToPointer
0C08D 20 B5 C5                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 37                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 37                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 37                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C 4D C3                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3B                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C 89 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                           
0C0BE                               ;; Check if ball is frozen
0C0BE A5 36                         LDA ball_flags
0C0C0 29 04                         AND #BALL_IS_FROZEN
0C0C2 F0 03                         BEQ +
0C0C4 4C 89 C2                          JMP +skipBallMovement
0C0C7                               +
0C0C7                           
0C0C7                               ;; Move the ball
0C0C7                               .include "game/include/main/move_ball.asm"
0C0C7                           
0C0C7                               ;; Check if ball goes up or down
0C0C7 A5 36                         LDA ball_flags
0C0C9 29 10                         AND #BALL_MOVES_DOWN
0C0CB F0 2B                         BEQ +moveBallUp
0C0CD                           
0C0CD                           
0C0CD                           +moveBallDown:
0C0CD                               ;; update the low byte
0C0CD A5 1A                         LDA ball_ypos_lo
0C0CF 85 1C                         STA ball_ypos_lo_prev
0C0D1 18                            CLC
0C0D2 69 F0                         ADC #BALL_SPEED_LO
0C0D4 85 1A                         STA ball_ypos_lo
0C0D6                           
0C0D6                               ;; update the high byte with carry
0C0D6 A5 19                         LDA ball_ypos_hi
0C0D8 85 1B                         STA ball_ypos_hi_prev
0C0DA 69 01                         ADC #BALL_SPEED_HI
0C0DC 85 19                         STA ball_ypos_hi
0C0DE                               
0C0DE                               ;; Check bottom bound
0C0DE C9 C8                         CMP #BOUND_BOTTOM
0C0E0 90 3C                         BCC +checkHorizontalMovement
0C0E2 F0 3A                         BEQ +checkHorizontalMovement
0C0E4                           
0C0E4                           
0C0E4                               ;; Change ball direction to "up"
0C0E4 A9 C8                         LDA #BOUND_BOTTOM
0C0E6 38                            SEC
0C0E7 E9 01                         SBC #$01
0C0E9 85 19                         STA ball_ypos_hi
0C0EB A9 00                         LDA #$00
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF A5 36                         LDA ball_flags
0C0F1 29 EF                         AND #MOVE_BALL_UP
0C0F3 85 36                         STA ball_flags
0C0F5 4C 1E C1                      JMP +checkHorizontalMovement
0C0F8                           
0C0F8                           
0C0F8                           +moveBallUp:
0C0F8                               ;; update the low byte
0C0F8 A5 1A                         LDA ball_ypos_lo
0C0FA 85 1C                         STA ball_ypos_lo_prev
0C0FC 38                            SEC
0C0FD E9 F0                         SBC #BALL_SPEED_LO
0C0FF 85 1A                         STA ball_ypos_lo
0C101                           
0C101                               ;; update the high byte with carry
0C101 A5 19                         LDA ball_ypos_hi
0C103 85 1B                         STA ball_ypos_hi_prev
0C105 E9 01                         SBC #BALL_SPEED_HI
0C107 85 19                         STA ball_ypos_hi
0C109                               
0C109                               ;; Check top bound
0C109 C9 30                         CMP #BOUND_TOP
0C10B B0 11                         BCS +checkHorizontalMovement
0C10D                           
0C10D                               ;; Change ball direction to "down"
0C10D A9 30                         LDA #BOUND_TOP
0C10F 18                            CLC
0C110 69 01                         ADC #$01
0C112 85 19                         STA ball_ypos_hi
0C114 A9 00                         LDA #$00
0C116 85 1A                         STA ball_ypos_lo
0C118 A5 36                         LDA ball_flags
0C11A 09 10                         ORA #MOVE_BALL_DOWN
0C11C 85 36                         STA ball_flags
0C11E                           
0C11E                           
0C11E                           +checkHorizontalMovement:
0C11E                           
0C11E                               ;; Check if ball is being nudged
0C11E A5 3C                         LDA nudge_counter
0C120 D0 41                         BNE +doneBallMovement
0C122                           
0C122                               ;; Check if left button is held
0C122 A5 0F                         LDA buttons_held
0C124 29 02                         AND #BUTTON_LEFT
0C126 F0 1B                         BEQ +
0C128                                   ;; update the low byte
0C128 A5 18                             LDA ball_xpos_lo
0C12A 38                                SEC
0C12B E9 F0                             SBC #BALL_SPEED_LO
0C12D 85 18                             STA ball_xpos_lo
0C12F                           
0C12F                                   ;; update the high byte
0C12F A5 17                             LDA ball_xpos_hi
0C131 E9 01                             SBC #BALL_SPEED_HI
0C133 85 17                             STA ball_xpos_hi
0C135                                   
0C135                                   ;; Check left bound
0C135 C9 10                             CMP #BOUND_LEFT
0C137 B0 2A                             BCS +doneBallMovement
0C139                                   
0C139                                   ;; Set flag to nudge right and set nudge counter
0C139 A5 36                             LDA ball_flags
0C13B 09 02                             ORA #NUDGE_BALL_RIGHT
0C13D 20 79 C8                          JSR sub_InitiateNudge
0C140                           
0C140 4C 63 C1                          JMP +doneBallMovement        
0C143                               +
0C143                           
0C143                               ;; Check if right button is held
0C143 A5 0F                         LDA buttons_held
0C145 29 01                         AND #BUTTON_RIGHT
0C147 F0 1A                         BEQ +
0C149                                   ;; update the low byte
0C149 A5 18                             LDA ball_xpos_lo
0C14B 18                                CLC
0C14C 69 F0                             ADC #BALL_SPEED_LO
0C14E 85 18                             STA ball_xpos_lo
0C150                           
0C150                                   ;; update the high byte
0C150 A5 17                             LDA ball_xpos_hi
0C152 69 01                             ADC #BALL_SPEED_HI
0C154 85 17                             STA ball_xpos_hi     
0C156                           
0C156                                  ;; Check right bound
0C156 C9 E8                             CMP #BOUND_RIGHT
0C158 90 09                             BCC +doneBallMovement
0C15A F0 07                             BEQ +doneBallMovement
0C15C                                   
0C15C                                   ;; Set flag to nudge left and set nudge timer
0C15C A5 36                             LDA ball_flags
0C15E 29 FD                             AND #NUDGE_BALL_LEFT
0C160 20 79 C8                          JSR sub_InitiateNudge
0C163                               +
0C163                           
0C163                           
0C163                           +doneBallMovement:
0C163                           
0C163                               ;; Check nudge
0C163 A5 3C                         LDA nudge_counter
0C165 F0 23                         BEQ +doneBallNudging
0C167 A5 36                             LDA ball_flags
0C169 29 02                             AND #NUDGE_BALL_RIGHT
0C16B F0 10                             BEQ +nudgeBallLeft
0C16D                                   
0C16D                                       ;; update the low byte
0C16D A5 18                                 LDA ball_xpos_lo
0C16F 18                                    CLC
0C170 69 F0                                 ADC #BALL_SPEED_LO
0C172 85 18                                 STA ball_xpos_lo
0C174                           
0C174                                       ;; update the high byte
0C174 A5 17                                 LDA ball_xpos_hi
0C176 69 01                                 ADC #BALL_SPEED_HI
0C178 85 17                                 STA ball_xpos_hi  
0C17A 4C 8A C1                              JMP +doneBallNudging
0C17D                                   +nudgeBallLeft:
0C17D                                   
0C17D                                   ;; update the low byte
0C17D A5 18                             LDA ball_xpos_lo
0C17F 38                                SEC
0C180 E9 F0                             SBC #BALL_SPEED_LO
0C182 85 18                             STA ball_xpos_lo
0C184                           
0C184                                   ;; update the high byte
0C184 A5 17                             LDA ball_xpos_hi
0C186 E9 01                             SBC #BALL_SPEED_HI
0C188 85 17                             STA ball_xpos_hi
0C18A                               +doneBallNudging:
0C18A                           
0C18A                               ;; Don't update position again until next frame
0C18A E6 35                         INC ball_update_position
0C18C                           
0C18C                           +doneBallHandling:0C18C                               
0C18C                               ;; Do collision detection
0C18C                               .include "game/include/main/collision_detection.asm"
0C18C                           
0C18C                               ;; Get ball's x-left, x-center, x-right position
0C18C A5 17                         LDA ball_xpos_hi
0C18E 18                            CLC
0C18F 69 F0                         ADC #BALL_LEFT_WGA
0C191 85 2F                         STA ball_left
0C193 18                            CLC
0C194 69 04                         ADC #BALL_HALF_SIZE
0C196 85 30                         STA ball_center
0C198 18                            CLC
0C199 69 04                         ADC #BALL_HALF_SIZE
0C19B 85 31                         STA ball_right
0C19D                           
0C19D                               ;; Get ball's y-top, y-middle, y-bottom position
0C19D A5 19                         LDA ball_ypos_hi
0C19F 18                            CLC
0C1A0 69 D0                         ADC #BALL_TOP_WGA
0C1A2 85 32                         STA ball_top
0C1A4 18                            CLC
0C1A5 69 04                         ADC #BALL_HALF_SIZE
0C1A7 85 33                         STA ball_middle
0C1A9 18                            CLC
0C1AA 69 04                         ADC #BALL_HALF_SIZE
0C1AC 85 34                         STA ball_bottom
0C1AE                           
0C1AE                           +checkRightCollision:
0C1AE                               ;; Check if ball moves right
0C1AE                               ;; No need to check nudging here as that will never collide with a tile
0C1AE A5 0F                         LDA buttons_held
0C1B0 29 01                         AND #BUTTON_RIGHT
0C1B2 F0 1C                         BEQ +checkLeftCollision
0C1B4                           
0C1B4                               ;; Check tile at right position
0C1B4 A5 33                         LDA ball_middle
0C1B6 85 00                         STA temp
0C1B8 A5 31                         LDA ball_right
0C1BA 85 01                         STA temp+1
0C1BC 20 89 C5                      JSR sub_ConvertXYToTileType
0C1BF 29 01                         AND #TILE_IS_SOLID
0C1C1 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1C3                           
0C1C3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1C3 A5 36                         LDA ball_flags
0C1C5 29 FD                         AND #NUDGE_BALL_LEFT
0C1C7 20 79 C8                      JSR sub_InitiateNudge
0C1CA 20 E2 C5                      JSR sub_EvaluateTileType
0C1CD 4C EF C1                      JMP +checkTopCollision
0C1D0                           
0C1D0                           +checkLeftCollision:
0C1D0                               ;; Check if ball moves right
0C1D0                               ;; No need to check nudging here as that will never collide with a tile
0C1D0 A5 0F                         LDA buttons_held
0C1D2 29 02                         AND #BUTTON_LEFT
0C1D4 F0 19                         BEQ +checkTopCollision
0C1D6                           
0C1D6                               ;; Check tile at right position
0C1D6 A5 33                         LDA ball_middle
0C1D8 85 00                         STA temp
0C1DA A5 2F                         LDA ball_left
0C1DC 85 01                         STA temp+1
0C1DE 20 89 C5                      JSR sub_ConvertXYToTileType
0C1E1 29 01                         AND #TILE_IS_SOLID
0C1E3 F0 0A                         BEQ +checkTopCollision
0C1E5                           
0C1E5                               ;; Tile is solid; nudge ball and evaluate tile type
0C1E5 A5 36                         LDA ball_flags
0C1E7 09 02                         ORA #NUDGE_BALL_RIGHT
0C1E9 20 79 C8                      JSR sub_InitiateNudge
0C1EC 20 E2 C5                      JSR sub_EvaluateTileType
0C1EF                               
0C1EF                               
0C1EF                           +checkTopCollision:
0C1EF                               ;; Check if ball moves up
0C1EF A5 36                         LDA ball_flags
0C1F1 29 10                         AND #BALL_MOVES_DOWN
0C1F3 D0 23                         BNE +checkBottomCollision
0C1F5                           
0C1F5                               ;; Check tile at top position
0C1F5 A5 32                         LDA ball_top
0C1F7 85 00                         STA temp
0C1F9 A5 30                         LDA ball_center
0C1FB 85 01                         STA temp+1
0C1FD 20 89 C5                      JSR sub_ConvertXYToTileType
0C200 29 01                         AND #TILE_IS_SOLID
0C202 F0 34                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C204                           
0C204                               ;; Tile is solid; move ball down and evaluate tile type
0C204 A5 1C                         LDA ball_ypos_lo_prev
0C206 85 1A                         STA ball_ypos_lo
0C208 A5 1B                         LDA ball_ypos_hi_prev
0C20A 85 19                         STA ball_ypos_hi
0C20C A5 36                         LDA ball_flags
0C20E 09 10                         ORA #MOVE_BALL_DOWN
0C210 85 36                         STA ball_flags
0C212 20 E2 C5                      JSR sub_EvaluateTileType
0C215 4C 38 C2                      JMP +doneCheckingCollision
0C218                           
0C218                           +checkBottomCollision:
0C218                               ;; No movement check needed: since ball is not moving up, it must move down
0C218                           
0C218                               ;; Check tile at bottom position
0C218 A5 34                         LDA ball_bottom
0C21A 85 00                         STA temp
0C21C A5 30                         LDA ball_center
0C21E 85 01                         STA temp+1
0C220 20 89 C5                      JSR sub_ConvertXYToTileType
0C223 29 01                         AND #TILE_IS_SOLID
0C225 F0 11                         BEQ +doneCheckingCollision
0C227                           
0C227                               ;; Tile is solid; move ball up and evaluate tile type
0C227 A5 1C                         LDA ball_ypos_lo_prev
0C229 85 1A                         STA ball_ypos_lo
0C22B A5 1B                         LDA ball_ypos_hi_prev
0C22D 85 19                         STA ball_ypos_hi
0C22F A5 36                         LDA ball_flags
0C231 29 EF                         AND #MOVE_BALL_UP
0C233 85 36                         STA ball_flags
0C235 20 E2 C5                      JSR sub_EvaluateTileType
0C238                           
0C238                           +doneCheckingCollision:
0C238                           
0C238                               
0C238                               ;; Update bonus
0C238                               .include "game/include/main/update_bonus.asm"
0C238                           ;; update_bonus.asm
0C238                           
0C238                               ;; If bonus = 000, skip decreasing
0C238 A5 2C                         LDA ball_bonus
0C23A 18                            CLC
0C23B 65 2D                         ADC ball_bonus+1
0C23D 18                            CLC
0C23E 65 2E                         ADC ball_bonus+2
0C240 F0 33                         BEQ +done
0C242                           
0C242                               ;; Check if bonus counter is done yet
0C242 A5 3D                         LDA bonus_counter
0C244 D0 2F                         BNE +done
0C246                           
0C246                               ;; Bonus counter is done
0C246                               ;; Reset bonus counter
0C246 A9 06                         LDA #BONUS_FRAMES
0C248 85 3D                         STA bonus_counter
0C24A                               
0C24A                               ;; Subtract one from ball bonus ones
0C24A C6 2E                         DEC ball_bonus+2
0C24C                               
0C24C                               ;; Check if underflow
0C24C 10 0E                         BPL +updateBonusOnScreen
0C24E                           
0C24E                               ;; If underflow, set 9 and subtract one from bonus tens
0C24E A9 09                         LDA #$09
0C250 85 2E                         STA ball_bonus+2
0C252 C6 2D                         DEC ball_bonus+1
0C254                               
0C254                               ;; Check if underflow
0C254 10 06                         BPL +updateBonusOnScreen
0C256                           
0C256                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C256 A9 09                         LDA #$09
0C258 85 2D                         STA ball_bonus+1
0C25A C6 2C                         DEC ball_bonus
0C25C                           
0C25C                               ;;209A 209B 209C
0C25C                           +updateBonusOnScreen:
0C25C A9 20                         LDA #$20
0C25E 85 00                         STA temp
0C260 A9 9C                         LDA #$9C
0C262 85 01                         STA temp+1
0C264 A2 02                         LDX #$02
0C266                               
0C266                               -updateNextDigit:
0C266 B5 2C                             LDA ball_bonus,x
0C268 18                                CLC
0C269 69 01                             ADC #$01
0C26B 85 02                             STA temp+2
0C26D 20 C5 CC                          JSR sub_WriteByteToPPUBuffer
0C270 C6 01                             DEC temp+1
0C272 CA                                DEX
0C273 10 F1                         BPL -updateNextDigit
0C275                                   
0C275                           +done:0C275                               
0C275                               ;; Input test for beeps
0C275                               .include "game/test/input_beeps.asm"
0C275 A5 10                         LDA buttons_pressed
0C277 29 20                         AND #BUTTON_SELECT
0C279 F0 04                         BEQ +
0C27B A9 01                             LDA #$01
0C27D 85 46                             STA do_beeps
0C27F                               +
0C27F                               
0C27F A5 11                         LDA buttons_released
0C281 29 20                         AND #BUTTON_SELECT
0C283 F0 04                         BEQ +
0C285 A9 02                             LDA #$02
0C287 85 46                             STA do_beeps
0C289                               +0C289                           
0C289                           
0C289                           +skipBallMovement:
0C289                               ;; Testing timed PPU scroll concept
0C289                               .include "game/test/timed_ppuscroll_test.asm"
0C289                           ;; Timed updates (test)
0C289                           
0C289                               ;; If B button is pressed
0C289 A5 10                         LDA buttons_pressed
0C28B 29 10                         AND #BUTTON_START
0C28D D0 03                         BNE +
0C28F 4C 14 C3                          JMP +end
0C292                               +
0C292                           
0C292                           lbl_initiate_level_load:
0C292                               ;; Disable noise channel
0C292 A9 00                         LDA #$00
0C294 8D 15 40                      STA APU_STATUS
0C297 8D 0C 40                      STA NOISE_VOLUME
0C29A                               
0C29A                               ;; Set up loop fading
0C29A A9 00                         LDA #$00
0C29C 85 07                         STA temp+7
0C29E A0 08                         LDY #$08
0C2A0                               -fadeLoop:
0C2A0 84 08                             STY temp+8
0C2A2                           
0C2A2                                   ;; Wait for NMI to pass
0C2A2 20 71 C4                          JSR sub_WaitForNMI
0C2A5                                   
0C2A5                                   ;; Now wait for No-sprite 0
0C2A5                                   -
0C2A5 AD 02 20                              LDA PPU_STATUS
0C2A8 29 40                                 AND #SPRITE_0_HIT
0C2AA D0 F9                             BNE -
0C2AC                               
0C2AC                                   ;; Now wait for Sprite 0
0C2AC                                   -
0C2AC AD 02 20                              LDA PPU_STATUS
0C2AF 29 40                                 AND #SPRITE_0_HIT
0C2B1 F0 F9                             BEQ -
0C2B3                                       
0C2B3                                   ;; Setup tile row loop
0C2B3 A0 16                             LDY #22
0C2B5                                   -tileLoop:
0C2B5                                   
0C2B5                                       ;; Disable drawing
0C2B5 A5 12                                 LDA soft_ppu_mask
0C2B7 29 F7                                 AND #%11110111
0C2B9 8D 01 20                              STA PPU_MASK
0C2BC                                       
0C2BC                                       ;; Set up scanline loop
0C2BC A2 08                                 LDX #$08
0C2BE                                       -scanlineLoop:
0C2BE E4 08                                     CPX temp+8
0C2C0 D0 0A                                     BNE +wasteTime
0C2C2                                           
0C2C2                                           ;; Restore drawing
0C2C2 A5 12                                     LDA soft_ppu_mask
0C2C4 09 08                                     ORA #%00001000
0C2C6 8D 01 20                                  STA PPU_MASK
0C2C9 4C D2 C2                                  JMP +wasteMoreTime
0C2CC                           
0C2CC                                           ;; Waste 12 frames
0C2CC                                           +wasteTime:
0C2CC E6 09                                     INC temp+9   ;+5
0C2CE C6 09                                     DEC temp+9   ;+5
0C2D0 49 00                                     EOR #$00     ;+2
0C2D2                                           
0C2D2                                           ;; Waste about 100 frames
0C2D2                                           +wasteMoreTime:
0C2D2                                           
0C2D2 86 01                                     STX temp+1     ;  3 down, 97 to go
0C2D4 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C2D6                                           -wasteLoop:
0C2D6 EA                                            NOP
0C2D7 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C2D9 CA                                            DEX        ;  5+5L down,  95-5L to go
0C2DA D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C2DC                           
0C2DC A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C2DE CA                                        DEX            ;  9+8L down, 91-8L to go
0C2DF D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C2E1                           
0C2E1 88                                    DEY
0C2E2 D0 D1                             BNE -tileLoop
0C2E4                           
0C2E4 A4 08                             LDY temp+8
0C2E6                                   
0C2E6 E6 07                             INC temp+7
0C2E8 A5 07                             LDA temp+7
0C2EA C9 02                             CMP #$02
0C2EC D0 B2                             BNE -fadeLoop
0C2EE                           
0C2EE A9 00                             LDA #$00
0C2F0 85 07                             STA temp+7
0C2F2 88                                DEY
0C2F3 D0 AB                         BNE -fadeLoop
0C2F5                               
0C2F5                               ;; Load the next level if ball not dead
0C2F5 A5 36                         LDA ball_flags
0C2F7 29 01                         AND #BALL_IS_DEAD
0C2F9 D0 05                         BNE +
0C2FB E6 3F                             INC current_level
0C2FD 4C 06 C3                          JMP +loadLevel
0C300                               +
0C300                               
0C300                               ;; Revive ball
0C300 A5 36                         LDA ball_flags
0C302 29 FE                         AND #REVIVE_BALL
0C304 85 36                         STA ball_flags
0C306                           
0C306                           +loadLevel:
0C306 A5 3F                         LDA current_level
0C308 C9 19                         CMP #25
0C30A D0 04                         BNE +
0C30C A9 00                             LDA #$00
0C30E 85 3F                             STA current_level
0C310                               +
0C310                               
0C310 A9 81                         LDA #LOAD_GAME_SCREEN
0C312 85 37                         STA screen_mode
0C314                           
0C314                           
0C314                           +end:
0C314                           
0C314                               ;; Check if ball is dead
0C314 A5 36                         LDA ball_flags
0C316 29 01                         AND #BALL_IS_DEAD
0C318 F0 03                         BEQ +
0C31A 4C 3C C3                          JMP +ballIsDead
0C31D                               +
0C31D                               
0C31D                               ;; Add to sprite buffer
0C31D A6 3B                         LDX sprite_ram_pointer
0C31F A5 19                         LDA ball_ypos_hi
0C321 9D 00 02                      STA ADDR_SPRITERAM,x
0C324 E8                            INX
0C325 A9 01                         LDA #BALL_TILE_CHR
0C327 9D 00 02                      STA ADDR_SPRITERAM,x
0C32A E8                            INX
0C32B A9 00                         LDA #BALL_ATTR
0C32D 9D 00 02                      STA ADDR_SPRITERAM,x
0C330 E8                            INX
0C331 A5 17                         LDA ball_xpos_hi
0C333 9D 00 02                      STA ADDR_SPRITERAM,x
0C336 E8                            INX
0C337 86 3B                         STX sprite_ram_pointer
0C339 4C 99 C3                      JMP +doneScreenLoad
0C33C                           
0C33C                           
0C33C                           +ballIsDead:
0C33C                               ;; Check if kill counter has reset
0C33C A5 3E                         LDA kill_counter
0C33E F0 03                         BEQ +
0C340 4C 99 C3                          JMP +doneScreenLoad
0C343                               +
0C343                               
0C343                               ;; Take a live
0C343 C6 1F                         DEC ball_lives
0C345 D0 03                         BNE +
0C347                                   ;; If no lives left, reset game
0C347 4C 00 C0                          JMP RESET
0C34A                                   ;; Replace reset with game over sequence initiation [@TODO]
0C34A                               +
0C34A                               
0C34A                               ;; Reload current level
0C34A 4C 92 C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C34D                           
0C34D                           
0C34D                           +checkNextScreen:
0C34D                           
0C34D                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C34D                               ;; Upon pressing START, the selected level will start
0C34D                               .include "game/include/main/select_level.asm"
0C34D A5 10                         LDA buttons_pressed
0C34F 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C351 F0 3C                         BEQ +checkStartPress
0C353                           
0C353                                   ;; Select next level (1, 5, 9, 13, 17)
0C353 A5 3F                             LDA current_level
0C355 18                                CLC
0C356 69 04                             ADC #$04
0C358 C9 14                             CMP #$14
0C35A D0 02                             BNE +
0C35C A9 00                                 LDA #$00
0C35E                                   +
0C35E 85 3F                             STA current_level
0C360                                   
0C360                                   ;; Convert level number to two-byte value
0C360 A9 00                             LDA #$00
0C362 85 03                             STA temp+3
0C364 A5 3F                             LDA current_level
0C366 18                                CLC
0C367 69 01                             ADC #$01
0C369                           
0C369                               -
0C369 C9 0A                             CMP #$0A
0C36B 90 08                             BCC +
0C36D E6 03                                 INC temp+3
0C36F 38                                    SEC
0C370 E9 0A                                 SBC #$0A
0C372 4C 69 C3                              JMP -
0C375                                   +
0C375                           
0C375                                   ;; Add level number to PPU buffer
0C375 18                                CLC
0C376 69 01                             ADC #$01
0C378 85 02                             STA temp+2
0C37A A9 20                             LDA #$20
0C37C 85 00                             STA temp
0C37E A9 D0                             LDA #$D0
0C380 85 01                             STA temp+1
0C382 20 C5 CC                          JSR sub_WriteByteToPPUBuffer
0C385                                   
0C385 C6 01                             DEC temp+1
0C387 A4 03                             LDY temp+3
0C389 C8                                INY
0C38A 84 02                             STY temp+2
0C38C 20 C5 CC                          JSR sub_WriteByteToPPUBuffer
0C38F                                   
0C38F                               +checkStartPress:
0C38F                           
0C38F                           
0C38F                           
0C38F                               ;; If START button is pressed
0C38F A5 10                         LDA buttons_pressed
0C391 29 10                         AND #BUTTON_START
0C393 F0 04                         BEQ +
0C395                                   ;; Start the level
0C395 A9 81                             LDA #LOAD_GAME_SCREEN
0C397 85 37                             STA screen_mode
0C399                               +
0C399                           
0C399                           
0C399                           
0C399                           +doneScreenLoad:
0C399                           
0C399                               ;; Load animations (if any)
0C399                               .include "game/include/main/load_animations.asm"
0C399                               ;; Set up loop
0C399 A2 00                         LDX #$00
0C39B                               -loop_load_animation:
0C39B                                   ;; Check if current animation is active. If not, goto next
0C39B BD 74 03                          LDA explosion_active,x
0C39E D0 03                             BNE +
0C3A0 4C 3A C4                              JMP +next
0C3A3                                   +
0C3A3                           
0C3A3                                   ;; Check the explosion framecounter
0C3A3 BD 60 03                          LDA explosion_framecounter,x
0C3A6 D0 26                             BNE +
0C3A8                                       ;; Framecounter is 0
0C3A8                                       ;; Reset to animation speed
0C3A8 A9 04                                 LDA #ANIMATION_SPEED
0C3AA 9D 60 03                              STA explosion_framecounter,x
0C3AD                           
0C3AD                                       ;; Set next animation frame, and check if we're done yet
0C3AD FE 64 03                              INC explosion_currentframe,x
0C3B0 BD 64 03                              LDA explosion_currentframe,x
0C3B3 C9 0A                                 CMP #ANIM_SLIDES
0C3B5 D0 17                                 BNE +
0C3B7                           
0C3B7                                       ;; If we're done, inactivate current explosion, clean
0C3B7                                       ;; up sprite RAM and go to the next one
0C3B7 A9 00                                 LDA #$00
0C3B9 9D 74 03                              STA explosion_active,x
0C3BC                                       
0C3BC A9 09                                 LDA #SLIDE_SIZE
0C3BE 0A                                    ASL
0C3BF 0A                                    ASL
0C3C0 A8                                    TAY
0C3C1 A9 EF                                 LDA #$EF
0C3C3                                       -
0C3C3 88                                        DEY
0C3C4 99 00 02                                  STA ADDR_SPRITERAM,y
0C3C7 C0 00                                     CPY #00
0C3C9 D0 F8                                 BNE -
0C3CB                                       
0C3CB 4C 3A C4                              JMP +next
0C3CE                                   +
0C3CE                           
0C3CE                                   ;; Load (x,y) position in temp variables
0C3CE BD 6C 03                          LDA explosion_x,x
0C3D1 85 01                             STA temp+1
0C3D3 85 03                             STA temp+3
0C3D5 BD 70 03                          LDA explosion_y,x
0C3D8 85 02                             STA temp+2
0C3DA                           
0C3DA                                   ;; Load attribute in temp variable
0C3DA BD 68 03                          LDA explosion_attributes,x
0C3DD 85 04                             STA temp+4
0C3DF                           
0C3DF                                   ;; Load current frame into Y-register
0C3DF BC 64 03                          LDY explosion_currentframe,x
0C3E2                           
0C3E2                                   ;; Load current frame ROM address from table
0C3E2 B9 19 CE                          LDA explosion_anim_lo,y
0C3E5 85 0C                             STA pointer
0C3E7 B9 0F CE                          LDA explosion_anim_hi,y
0C3EA 85 0D                             STA pointer+1
0C3EC                           
0C3EC                                   ;; Save x-register on stack
0C3EC 8A                                TXA
0C3ED 48                                PHA
0C3EE                           
0C3EE                                   ;; Load sprites into sprite RAM
0C3EE A6 3B                             LDX sprite_ram_pointer
0C3F0 A0 00                             LDY #$00
0C3F2                           
0C3F2                                   ;; Prepare (x,y) offset for loop
0C3F2 84 00                             STY temp
0C3F4                           
0C3F4                                   -loop_load_sprite:
0C3F4                                   
0C3F4                                       ;; Do not draw empty sprites
0C3F4 B1 0C                                 LDA (pointer),y
0C3F6 F0 18                                 BEQ +nextSprite
0C3F8                                   
0C3F8                                           ;; Add y-position to sprite ram buffer
0C3F8 A5 02                                     LDA temp+2
0C3FA 9D 00 02                                  STA ADDR_SPRITERAM,x
0C3FD E8                                        INX
0C3FE                           
0C3FE                                           ;; Get tile number from frame ROM address, and
0C3FE                                           ;; add it to sprite ram buffer
0C3FE B1 0C                                     LDA (pointer),y
0C400 9D 00 02                                  STA ADDR_SPRITERAM,x
0C403 E8                                        INX
0C404                           
0C404                                           ;; Add attribute data to sprite ram buffer
0C404 A5 04                                     LDA temp+4
0C406 9D 00 02                                  STA ADDR_SPRITERAM,x
0C409 E8                                        INX
0C40A                           
0C40A                                           ;; Add x-position to sprite ram buffer
0C40A A5 03                                     LDA temp+3
0C40C 9D 00 02                                  STA ADDR_SPRITERAM,x
0C40F E8                                        INX
0C410                           
0C410                                       +nextSprite:
0C410                           
0C410                                       ;; Check if all sprites are done
0C410 C8                                    INY
0C411 C0 09                                 CPY #SLIDE_SIZE
0C413 F0 21                                 BEQ +done
0C415                           
0C415                                       ;; Update x value
0C415 A5 03                                 LDA temp+3
0C417 18                                    CLC
0C418 69 08                                 ADC #$08
0C41A 85 03                                 STA temp+3
0C41C                           
0C41C                                       ;; Update temp for x,y position
0C41C E6 00                                 INC temp
0C41E A5 00                                 LDA temp
0C420 C9 03                                 CMP #SLIDE_WIDTH
0C422 D0 0F                                 BNE +
0C424                                           ;; Row is done; reset x-position
0C424 A5 01                                     LDA temp+1
0C426 85 03                                     STA temp+3
0C428                           
0C428                                           ;; Update y-position
0C428 A5 02                                     LDA temp+2
0C42A 18                                        CLC
0C42B 69 08                                     ADC #$08
0C42D 85 02                                     STA temp+2
0C42F                           
0C42F                                           ;; Reset row counter
0C42F A9 00                                     LDA #$00
0C431 85 00                                     STA temp
0C433                                       +
0C433                           
0C433 4C F4 C3                          JMP -loop_load_sprite
0C436                           
0C436                               +done:
0C436 86 3B                             STX sprite_ram_pointer
0C438                           
0C438                                   ;; Retrieve x-register from stack
0C438 68                                PLA
0C439 AA                                TAX
0C43A                           
0C43A                               +next:
0C43A                                   ;; Check if all animations have been updated
0C43A E8                                INX
0C43B E0 04                             CPX #MAX_ANIMATIONS
0C43D F0 03                             BEQ +done
0C43F                           
0C43F 4C 9B C3                      JMP -loop_load_animation
0C442                           +done:
0C442                           
0C442                               ;; Sprite clean-up
0C442 A6 3B                         LDX sprite_ram_pointer
0C444 A9 EF                         LDA #$EF
0C446                               -
0C446 9D 00 02                          STA ADDR_SPRITERAM,x
0C449 E8                                INX
0C44A D0 FA                         BNE -
0C44C 4C 57 C0                      JMP MainGameLoop
0C44F                           
0C44F                           ;; Subroutines
0C44F                           .include "include/subroutines.asm"
0C44F                           
0C44F                           ;; RNG
0C44F                           .include "subroutine/GetRandomNumber.asm"
0C44F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C44F                           ;;
0C44F                           ;; subroutine/GetRandomNumber.asm
0C44F                           ;;
0C44F                           ;; Simple and fast random number generator by White Flame.
0C44F                           ;;
0C44F                           ;; Set random_seed to an arbitrary number to randomize between
0C44F                           ;; gaming sessions, for instance using the frame counter upon
0C44F                           ;; pressing START on the intro screen.
0C44F                           ;;
0C44F                           ;;     ;; IF START PRESSED:
0C44F                           ;;     LDA frame_counter
0C44F                           ;;     STA random_seed
0C44F                           ;;
0C44F                           ;; Source:
0C44F                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C44F                           ;;
0C44F                           ;;
0C44F                           
0C44F                           sub_GetRandomNumber:
0C44F                               ;; Force EOR if random_seed is zero
0C44F A5 16                         LDA random_seed
0C451 F0 05                         BEQ +doEor
0C453                           
0C453                               ;; Shift left, and EOR if the high bit is set
0C453 0A                            ASL
0C454 F0 04                         BEQ +noEor
0C456 90 02                         BCC +noEor
0C458                           
0C458                           +doEor:
0C458 49 1D                         EOR #$1D
0C45A                           
0C45A                           +noEor:
0C45A 85 16                         STA random_seed
0C45C                           
0C45C 60                            RTS
0C45D                           
0C45D                           
0C45D                           ;; Read controller input
0C45D                           .include "subroutine/ReadController.asm"
0C45D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C45D                           ;;
0C45D                           ;; subroutine/ReadController.asm
0C45D                           ;;
0C45D                           ;; Subroutine that polls the controller and stores the input
0C45D                           ;; buttons in a variable. This version only handles controller
0C45D                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C45D                           ;;
0C45D                           ;;
0C45D                           
0C45D                           sub_ReadController:
0C45D                           
0C45D                               ;; Set strobe bit
0C45D A9 01                         LDA #$01
0C45F 8D 16 40                      STA JOYPAD_1
0C462                           
0C462                               ;; Set up ring counter
0C462 85 0F                         STA buttons_held
0C464                           
0C464                               ;; Clear strobe bit
0C464 4A                            LSR
0C465 8D 16 40                      STA JOYPAD_1
0C468                           
0C468                               ;; Loop through button presses
0C468                               -
0C468 AD 16 40                          LDA JOYPAD_1
0C46B 4A                                LSR
0C46C 26 0F                             ROL buttons_held
0C46E                           
0C46E                               ;; Check if ring counter is done
0C46E 90 F8                         BCC -
0C470                           
0C470                               ;; Return from subroutine
0C470 60                            RTS
0C471                           
0C471                           
0C471                           ;; vBlank/NMI wait
0C471                           .include "subroutine/WaitForNMI.asm"
0C471                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C471                           ;;
0C471                           ;; subroutine/WaitForVBlank.asm
0C471                           ;;
0C471                           ;; Subroutine that essentially pauses script execution until
0C471                           ;; vBlank happens.
0C471                           ;;
0C471                           ;;
0C471                           
0C471                           sub_WaitForNMI:
0C471 A9 01                         LDA #$01
0C473 85 47                         STA check_nmi
0C475                               -
0C475 A5 47                             LDA check_nmi
0C477 D0 FC                         BNE -
0C479 60                            RTS
0C47A                           
0C47A                           .include "subroutine/WaitForVBlank.asm"
0C47A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C47A                           ;;
0C47A                           ;; subroutine/WaitForVBlank.asm
0C47A                           ;;
0C47A                           ;; Subroutine that essentially pauses script execution until
0C47A                           ;; vBlank happens.
0C47A                           ;;
0C47A                           ;;
0C47A                           
0C47A                           sub_WaitForVBlank:
0C47A 2C 02 20                      BIT $2002
0C47D 10 FB                         BPL sub_WaitForVBlank
0C47F 60                            RTS
0C480                           
0C480                           
0C480                           ;; Game specific subroutines
0C480                           .include "game/include/subroutines.asm"
0C480                           ;; additional game-specific subroutines go here
0C480                           
0C480                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C480                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C480                           ;;
0C480                           ;;  sub_AddAccumulatorToScore.asm
0C480                           ;;
0C480                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C480                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C480                           ;;  actual score.
0C480                           ;;
0C480                           ;;
0C480                           
0C480                           
0C480                           sub_AddAccumulatorToScore:
0C480                           
0C480                               ;; Clear old add_to_score
0C480 A2 05                         LDX #$05
0C482 A0 00                         LDY #$00
0C484                               -
0C484 94 26                             STY add_to_score,x
0C486 CA                                DEX
0C487 10 FB                         BPL -
0C489                           
0C489                               ;; Set accumulator to add_to_score variables
0C489                               ;; Check and update 100s
0C489                               -checkHundreds:
0C489 C9 64                             CMP #100
0C48B 90 08                             BCC +checkTens
0C48D 38                                    SEC
0C48E E9 64                                 SBC #100
0C490 E6 29                                 INC add_to_score+3
0C492 4C 89 C4                              JMP -checkHundreds
0C495                                   +checkTens:
0C495                           
0C495                               ;; Check and update 10s
0C495                               -checkTens:
0C495 C9 0A                             CMP #10
0C497 90 08                             BCC +setOnes
0C499 38                                    SEC
0C49A E9 0A                                 SBC #10
0C49C E6 2A                                 INC add_to_score+4
0C49E 4C 95 C4                              JMP -checkTens
0C4A1                                   +setOnes:
0C4A1                           
0C4A1                               ;; We're left with 1s
0C4A1 85 2B                         STA add_to_score+5
0C4A3                           
0C4A3                               ;; Byte for byte, add add_to_score to ball_score
0C4A3 A9 00                         LDA #$00
0C4A5 85 38                         STA ppu_buffer_update
0C4A7 A4 39                         LDY ppu_buffer_pointer
0C4A9 A2 05                         LDX #$05
0C4AB                               -
0C4AB B5 26                             LDA add_to_score,x
0C4AD 18                                CLC
0C4AE 75 20                             ADC ball_score,x
0C4B0 C9 0A                             CMP #10
0C4B2 90 05                             BCC +
0C4B4 38                                    SEC
0C4B5 E9 0A                                 SBC #10
0C4B7 F6 1F                                 INC ball_score-1,x
0C4B9                                   +
0C4B9                                   
0C4B9                                   ;; Update new score digit
0C4B9 95 20                             STA ball_score,x
0C4BB                           
0C4BB                                   ;; Update score tile in PPU
0C4BB A9 20                             LDA #$20
0C4BD 99 00 03                          STA ppu_buffer,y
0C4C0 C8                                INY
0C4C1 8A                                TXA
0C4C2 18                                CLC
0C4C3 69 83                             ADC #$83
0C4C5 99 00 03                          STA ppu_buffer,y
0C4C8 C8                                INY
0C4C9 B5 20                             LDA ball_score,x
0C4CB 18                                CLC
0C4CC 69 01                             ADC #$01
0C4CE 99 00 03                          STA ppu_buffer,y
0C4D1 C8                                INY
0C4D2                           
0C4D2                                   ;; Check next digit (if any left)
0C4D2 CA                                DEX
0C4D3 30 03                             BMI +done
0C4D5 4C AB C4                      JMP -
0C4D8                           
0C4D8                           +done:
0C4D8                               ;; Update PPU buffer pointer and status
0C4D8 84 39                         STY ppu_buffer_pointer
0C4DA A9 01                         LDA #$01
0C4DC 85 38                         STA ppu_buffer_update
0C4DE                           
0C4DE                               ;; Done: return 
0C4DE 60                            RTS
0C4DF                           
0C4DF                           .include "game/subroutine/BackgroundNoise.asm"
0C4DF                           
0C4DF                           sub_BackgroundNoise:
0C4DF A9 32                         LDA #$32
0C4E1 8D 0C 40                      STA NOISE_VOLUME
0C4E4 A9 0E                         LDA #$0E
0C4E6 8D 0E 40                      STA NOISE_PERIOD
0C4E9 85 44                         STA current_noise
0C4EB 60                            RTS0C4EC                           .include "game/subroutine/ClearScreen.asm"
0C4EC                           ;; Subroutine to clear the screen
0C4EC                           ;; If it's a game screen, add noise
0C4EC                           
0C4EC                           sub_ClearScreen:
0C4EC                               ;; Check of game screen or not
0C4EC A5 37                         LDA screen_mode
0C4EE 29 03                         AND #CHECK_SCREEN_MODE
0C4F0 C9 01                         CMP #IS_GAME_SCREEN
0C4F2 F0 02                         BEQ +
0C4F4 A9 00                             LDA #$00
0C4F6                               +
0C4F6 85 01                         STA temp+1
0C4F8                               
0C4F8                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C4F8 2C 02 20                      BIT PPU_STATUS
0C4FB A9 20                         LDA #$20
0C4FD 8D 06 20                      STA PPU_ADDR
0C500 A9 00                         LDA #$00
0C502 8D 06 20                      STA PPU_ADDR
0C505                               
0C505                               ;; Set up tile to draw and loop
0C505 85 00                         STA temp
0C507 AA                            TAX
0C508 A8                            TAY
0C509                           
0C509                               -     
0C509                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C509 A5 00                             LDA temp
0C50B 8D 07 20                          STA PPU_DATA
0C50E                           
0C50E                                   ;; Check if we should draw noise next. Noise is drawn if:
0C50E                                   ;; - Screen mode is game screen
0C50E                                   ;; - Y between #$06 and #$19 (inclusive)
0C50E                                   ;; - X between #$02 and #$1D (inclusive)
0C50E                                   
0C50E                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C50E A5 01                             LDA temp+1
0C510 F0 1C                             BEQ +nextTileInRow
0C512                                   
0C512                                   ;; If Y < $6, skip the check
0C512 C0 06                             CPY #$06
0C514 90 18                             BCC +nextTileInRow
0C516                                   
0C516                                   ;; If X < $1, skip the check
0C516 E0 01                             CPX #$01
0C518 90 14                             BCC +nextTileInRow
0C51A                                   
0C51A                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C51A E0 1D                             CPX #$1D
0C51C D0 04                             BNE +
0C51E A9 00                                 LDA #$00
0C520 85 00                                 STA temp
0C522                                   +
0C522 B0 0A                             BCS +nextTileInRow
0C524                                   
0C524                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C524 20 4F C4                          JSR sub_GetRandomNumber
0C527 29 07                             AND #%00000111
0C529 18                                CLC
0C52A 69 68                             ADC #$68
0C52C 85 00                             STA temp
0C52E                           
0C52E                           +nextTileInRow:
0C52E                                   
0C52E                                   ;; Check if a row has been done. If not, draw the next
0C52E E8                                INX
0C52F E0 20                             CPX #$20
0C531 D0 D6                             BNE -
0C533                                   
0C533                                   ;; Go to the next row (if any left)
0C533 A2 00                             LDX #00
0C535 C8                                INY
0C536                                   
0C536                                   ;; If Y is 1A, skip noise tile check until done drawing
0C536 C0 1A                             CPY #$1A
0C538 D0 04                             BNE +
0C53A A9 00                                 LDA #$00
0C53C 85 01                                 STA temp+1
0C53E                                   +
0C53E                                   
0C53E C0 1E                             CPY #$1E
0C540 D0 C7                         BNE -
0C542                           
0C542                               ;; Clear attribute table
0C542 A9 23                         LDA #$23
0C544 8D 06 20                      STA PPU_ADDR
0C547 A9 C0                         LDA #$C0
0C549 8D 06 20                      STA PPU_ADDR
0C54C A9 00                         LDA #$00
0C54E A2 40                         LDX #$40
0C550                               -
0C550 8D 07 20                          STA PPU_DATA
0C553 CA                                DEX
0C554 D0 FA                         BNE -
0C556                               
0C556 60                            RTS0C557                           .include "game/subroutine/ColorizeBall.asm"
0C557                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C557                           ;;
0C557                           ;;  Subroutine: ColorizeBall
0C557                           ;;
0C557                           ;;  Applies the color set through ball_flags to the ball sprite.
0C557                           ;;
0C557                           ;;
0C557                           
0C557                           
0C557                           sub_ColorizeBall:
0C557                           
0C557                               ;; Get color from ball_flags
0C557 4A                            LSR
0C558 4A                            LSR
0C559 4A                            LSR
0C55A 4A                            LSR
0C55B 4A                            LSR
0C55C AA                            TAX
0C55D                           
0C55D                               ;; Add new light color of ball to PPU palette
0C55D A9 3F                         LDA #$3F
0C55F 85 00                         STA temp
0C561 A9 11                         LDA #$11
0C563 85 01                         STA temp+1
0C565 BD 29 CE                      LDA tbl_BallColorLight,x
0C568 85 02                         STA temp+2
0C56A 20 C5 CC                      JSR sub_WriteByteToPPUBuffer
0C56D                               
0C56D                               ;; Add new dark color of ball to PPU palette
0C56D E6 01                         INC temp+1
0C56F BD 23 CE                      LDA tbl_BallColorDark,x
0C572 85 02                         STA temp+2
0C574 20 C5 CC                      JSR sub_WriteByteToPPUBuffer
0C577                               
0C577 60                            RTS
0C578                           
0C578                           .include "game/subroutine/ColorsMatch.asm"
0C578                           
0C578                           ;; Subroutine to check if ball color matches colliding tile color
0C578                           
0C578                           sub_ColorsMatch:
0C578                               ;; Save tile color in temp variable
0C578 A5 40                         LDA colliding_tile
0C57A 29 0E                         AND #%00001110
0C57C 85 00                         STA temp
0C57E                           
0C57E                               ;; Get ball color
0C57E A5 36                         LDA ball_flags
0C580 29 E0                         AND #%11100000
0C582 4A                            LSR
0C583 4A                            LSR
0C584 4A                            LSR
0C585 4A                            LSR
0C586                           
0C586                               ;; Compare with tile color
0C586 C5 00                         CMP temp
0C588 60                            RTS
0C589                           
0C589                           .include "game/subroutine/ConvertXYToTileType.asm"
0C589                           
0C589                           ;; Subroutine to convert the ball's position to a tile type
0C589                           ;; - Expects temp to be y-position of ball within game area
0C589                           ;; - Expects temp+1 to be x-position of ball within game area
0C589                           ;; - Puts result in accumulator and zp variable
0C589                           ;; - Corrupts X-register
0C589                           
0C589                           sub_ConvertXYToTileType:
0C589 A5 01                         LDA temp+1
0C58B 4A                            LSR
0C58C 4A                            LSR
0C58D 4A                            LSR
0C58E 4A                            LSR
0C58F 85 09                         STA temp+9
0C591 A5 00                         LDA temp
0C593 29 F0                         AND #%11110000
0C595 18                            CLC
0C596 65 09                         ADC temp+9
0C598 85 09                         STA temp+9
0C59A AA                            TAX
0C59B BD 00 04                      LDA tile_type, x
0C59E 85 40                         STA colliding_tile
0C5A0 60                            RTS
0C5A1                           
0C5A1                           .include "game/subroutine/DisableEnableRendering.asm"
0C5A1                           sub_DisableRendering:
0C5A1                               ;; Force NMI skip, disable rendering
0C5A1 A9 01                     	LDA #$01
0C5A3 85 14                     	STA force_skip_nmi
0C5A5 20 7A C4                      JSR sub_WaitForVBlank
0C5A8 A5 12                         LDA soft_ppu_mask
0C5AA 29 E7                         AND #%11100111
0C5AC 8D 01 20                      STA PPU_MASK
0C5AF 85 12                         STA soft_ppu_mask
0C5B1 20 7A C4                      JSR sub_WaitForVBlank
0C5B4 60                            RTS
0C5B5                           
0C5B5                           sub_EnableRendering:
0C5B5                               ;; Enable rendering
0C5B5 A9 00                     	LDA #$00
0C5B7 8D 05 20                  	STA PPU_SCROLL
0C5BA 8D 05 20                  	STA PPU_SCROLL
0C5BD 20 7A C4                      JSR sub_WaitForVBlank
0C5C0 85 14                     	STA force_skip_nmi
0C5C2 A5 12                         LDA soft_ppu_mask
0C5C4 09 18                         ORA #%00011000
0C5C6 85 12                         STA soft_ppu_mask
0C5C8 8D 01 20                      STA PPU_MASK
0C5CB 20 7A C4                      JSR sub_WaitForVBlank
0C5CE 60                            RTS
0C5CF                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C5CF                           sub_drawIntroScreenLogoTile:
0C5CF B9 0B CD                      LDA tbl_IntroScreenLogoChr,y
0C5D2 C9 60                         CMP #$60
0C5D4 D0 08                         BNE +
0C5D6 20 4F C4                          JSR sub_GetRandomNumber
0C5D9 29 07                             AND #$07
0C5DB 18                                CLC
0C5DC 69 60                             ADC #$60
0C5DE                               +
0C5DE 8D 07 20                      STA PPU_DATA
0C5E1 60                            RTS
0C5E2                           .include "game/subroutine/EvaluateTileType.asm"
0C5E2                           
0C5E2                           ;; Subroutine to evaluate the colliding tile type and take its
0C5E2                           ;; corresponding action (move block, kill player, ...)
0C5E2                           ;; - Expects X-register to be the tile_type offset
0C5E2                           ;; - Uses zp variable colliding_tile
0C5E2                           
0C5E2                           sub_EvaluateTileType:
0C5E2                           
0C5E2                               ;; Check if collided tile is a color block
0C5E2 A5 40                         LDA colliding_tile
0C5E4 29 80                         AND #IS_COLOR_BLOCK
0C5E6 D0 03                         BNE +
0C5E8 4C 0D C8                          JMP +checkIfPaintBlock
0C5EB                               +
0C5EB                               
0C5EB                               ;; It's a color block. Check if the colors match
0C5EB 20 78 C5                      JSR sub_ColorsMatch
0C5EE F0 01                         BEQ +
0C5F0                                   ;; Colors don't match - return
0C5F0 60                                RTS
0C5F1                               +
0C5F1                           
0C5F1                               ;; Colors match. Destroy color block
0C5F1 A4 39                         LDY ppu_buffer_pointer
0C5F3                               
0C5F3                               ;; (this should be a subroutine)
0C5F3                               ;; Get PPU address from YX index
0C5F3                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C5F3                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C5F3 8A                            TXA
0C5F4 29 C0                         AND #%11000000
0C5F6 18                            CLC
0C5F7 2A                            ROL
0C5F8 2A                            ROL
0C5F9 2A                            ROL
0C5FA 69 20                         ADC #$20
0C5FC 85 00                         STA temp
0C5FE 8A                            TXA
0C5FF 29 0F                         AND #%00001111
0C601 0A                            ASL
0C602 85 01                         STA temp+1
0C604 8A                            TXA
0C605 29 30                         AND #%00110000
0C607 0A                            ASL
0C608 0A                            ASL
0C609 18                            CLC
0C60A 65 01                         ADC temp+1
0C60C 85 01                         STA temp+1
0C60E A5 00                         LDA temp
0C610 69 00                         ADC #$00
0C612 85 00                         STA temp
0C614 A5 01                         LDA temp+1
0C616 18                            CLC
0C617 69 C2                         ADC #$C2
0C619 85 01                         STA temp+1
0C61B A5 00                         LDA temp
0C61D 69 00                         ADC #$00
0C61F 85 00                         STA temp
0C621                           
0C621                               
0C621                               ;; (this should also be a subroutine eventually)
0C621                               ;; TILE 1: if metatile on top left is solid, draw
0C621                               ;; null tile, else draw random noise tile
0C621 A9 00                         LDA #$00
0C623 85 38                         STA ppu_buffer_update
0C625                               
0C625 A5 00                         LDA temp
0C627 99 00 03                      STA ppu_buffer,y
0C62A C8                            INY
0C62B A5 01                         LDA temp+1
0C62D 99 00 03                      STA ppu_buffer,y
0C630 C8                            INY
0C631                               
0C631 8A                            TXA
0C632 29 0F                         AND #%00001111
0C634 F0 11                         BEQ +drawRandomTile
0C636                           
0C636 8A                            TXA
0C637 29 F0                         AND #%11110000
0C639 F0 0C                         BEQ +drawRandomTile
0C63B                           
0C63B BD EF 03                      LDA tile_type-17,x
0C63E 29 01                         AND #%00000001
0C640 F0 05                         BEQ +drawRandomTile  
0C642                           
0C642                               ;; Draw a null tile
0C642 A9 00                         LDA #$00
0C644 4C 4F C6                      JMP +addToPPUBuffer
0C647                               
0C647                           +drawRandomTile:
0C647                               ;; Draw a random tile
0C647 20 4F C4                      JSR sub_GetRandomNumber
0C64A 29 07                         AND #%00000111
0C64C 18                            CLC
0C64D 69 68                         ADC #$68
0C64F                               
0C64F                               ;; Add tile to ppu buffer
0C64F                           +addToPPUBuffer:
0C64F 99 00 03                      STA ppu_buffer,y
0C652 C8                            INY
0C653                           
0C653                               ;; TILE 2: If metatile above is solid, draw null,
0C653                               ;; else draw random noise.
0C653 E6 01                         INC temp+1
0C655 A5 00                         LDA temp
0C657 99 00 03                      STA ppu_buffer,y
0C65A C8                            INY
0C65B A5 01                         LDA temp+1
0C65D 99 00 03                      STA ppu_buffer,y
0C660 C8                            INY
0C661                               
0C661 8A                            TXA
0C662 29 F0                         AND #%11110000
0C664 F0 0C                         BEQ +drawRandomTile
0C666                               
0C666 BD F0 03                      LDA tile_type-16,x
0C669 29 01                         AND #%00000001
0C66B F0 05                         BEQ +drawRandomTile
0C66D                               
0C66D A9 00                         LDA #%00
0C66F 4C 7A C6                      JMP +addToPPUBuffer
0C672                           
0C672                           +drawRandomTile:
0C672 20 4F C4                      JSR sub_GetRandomNumber
0C675 29 07                         AND #%00000111
0C677 18                            CLC
0C678 69 68                         ADC #$68
0C67A                           
0C67A                           +addToPPUBuffer:
0C67A 99 00 03                      STA ppu_buffer,y
0C67D C8                            INY
0C67E                               
0C67E                               ;; TILE 3 - If metatile left is solid, draw null,
0C67E                               ;; else draw random noise.
0C67E A5 01                         LDA temp+1
0C680 18                            CLC
0C681 69 1F                         ADC #$1F
0C683 85 01                         STA temp+1
0C685 A5 00                         LDA temp
0C687 69 00                         ADC #$00
0C689 85 00                         STA temp
0C68B 99 00 03                      STA ppu_buffer,y
0C68E C8                            INY
0C68F A5 01                         LDA temp+1
0C691 99 00 03                      STA ppu_buffer,y
0C694 C8                            INY
0C695                               
0C695 8A                            TXA
0C696 29 0F                         AND #%00001111
0C698 F0 0C                         BEQ +drawRandomTile
0C69A                               
0C69A BD FF 03                      LDA tile_type-1,x
0C69D 29 01                         AND #%00000001
0C69F F0 05                         BEQ +drawRandomTile
0C6A1                               
0C6A1 A9 00                         LDA #%00
0C6A3 4C AE C6                      JMP +addToPPUBuffer
0C6A6                           
0C6A6                           +drawRandomTile:
0C6A6 20 4F C4                      JSR sub_GetRandomNumber
0C6A9 29 07                         AND #%00000111
0C6AB 18                            CLC
0C6AC 69 68                         ADC #$68
0C6AE                               
0C6AE                           +addToPPUBuffer:
0C6AE 99 00 03                      STA ppu_buffer,y
0C6B1 C8                            INY
0C6B2                               
0C6B2                               ;; TILE 4 - Always random noise
0C6B2 E6 01                         INC temp+1
0C6B4 A5 00                         LDA temp
0C6B6 99 00 03                      STA ppu_buffer,y
0C6B9 C8                            INY
0C6BA A5 01                         LDA temp+1
0C6BC 99 00 03                      STA ppu_buffer,y
0C6BF C8                            INY
0C6C0 20 4F C4                      JSR sub_GetRandomNumber
0C6C3 29 07                         AND #%00000111
0C6C5 18                            CLC
0C6C6 69 68                         ADC #$68
0C6C8 99 00 03                      STA ppu_buffer,y
0C6CB C8                            INY
0C6CC                           
0C6CC                               ;; TILE 5 - If tile on the right is solid, skip,
0C6CC                               ;; else draw random noise tile
0C6CC E6 01                         INC temp+1
0C6CE                               
0C6CE 8A                            TXA
0C6CF 29 0F                         AND #%00001111
0C6D1 C9 0D                         CMP #$0D
0C6D3 F0 1F                         BEQ +skipTile
0C6D5                               
0C6D5 BD 01 04                      LDA tile_type+1,x
0C6D8 29 01                         AND #%00000001
0C6DA D0 18                         BNE +skipTile
0C6DC A5 00                             LDA temp
0C6DE 99 00 03                          STA ppu_buffer,y
0C6E1 C8                                INY
0C6E2 A5 01                             LDA temp+1
0C6E4 99 00 03                          STA ppu_buffer,y
0C6E7 C8                                INY
0C6E8 20 4F C4                          JSR sub_GetRandomNumber
0C6EB 29 07                             AND #%00000111
0C6ED 18                                CLC
0C6EE 69 68                             ADC #$68
0C6F0 99 00 03                          STA ppu_buffer,y
0C6F3 C8                                INY    
0C6F4                               +skipTile:
0C6F4                           
0C6F4                               ;; TILE 6 - If tile on bottom is solid, skip,
0C6F4                               ;; else draw random noise
0C6F4 A5 01                         LDA temp+1
0C6F6 18                            CLC
0C6F7 69 1F                         ADC #$1F
0C6F9 85 01                         STA temp+1
0C6FB A5 00                         LDA temp
0C6FD 69 00                         ADC #$00
0C6FF 85 00                         STA temp
0C701                           
0C701 8A                            TXA
0C702 29 F0                         AND #%11110000
0C704 C9 90                         CMP #$90
0C706 F0 1F                         BEQ +skipTile
0C708                           
0C708 BD 10 04                      LDA tile_type+16,x
0C70B 29 01                         AND #%00000001
0C70D D0 18                         BNE +skipTile
0C70F A5 00                             LDA temp
0C711 99 00 03                          STA ppu_buffer,y
0C714 C8                                INY
0C715 A5 01                             LDA temp+1
0C717 99 00 03                          STA ppu_buffer,y
0C71A C8                                INY
0C71B 20 4F C4                          JSR sub_GetRandomNumber
0C71E 29 07                             AND #%00000111
0C720 18                                CLC
0C721 69 68                             ADC #$68
0C723 99 00 03                          STA ppu_buffer,y
0C726 C8                                INY    
0C727                               +skipTile:
0C727                               
0C727                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C727                               ;; else draw random noise
0C727 E6 01                         INC temp+1
0C729                           
0C729 8A                            TXA
0C72A 29 F0                         AND #%11110000
0C72C C9 90                         CMP #$90
0C72E F0 26                         BEQ +skipTile
0C730                               
0C730 8A                            TXA
0C731 29 0F                         AND #%00001111
0C733 C9 0D                         CMP #$0D
0C735 F0 1F                         BEQ +skipTile
0C737                               
0C737 BD 11 04                      LDA tile_type+17,x
0C73A 29 01                         AND #%00000001
0C73C D0 18                         BNE +skipTile
0C73E A5 00                             LDA temp
0C740 99 00 03                          STA ppu_buffer,y
0C743 C8                                INY
0C744 A5 01                             LDA temp+1
0C746 99 00 03                          STA ppu_buffer,y
0C749 C8                                INY
0C74A 20 4F C4                          JSR sub_GetRandomNumber
0C74D 29 07                             AND #%00000111
0C74F 18                                CLC
0C750 69 68                             ADC #$68
0C752 99 00 03                          STA ppu_buffer,y
0C755 C8                                INY    
0C756                               +skipTile:   
0C756                           
0C756                           
0C756                               ;; - Update attribute table accordingly through ppu buffer
0C756 A9 23                         LDA #$23
0C758 99 00 03                      STA ppu_buffer,y
0C75B C8                            INY
0C75C                               
0C75C 8A                            TXA
0C75D 29 F0                         AND #%11110000
0C75F 4A                            LSR
0C760 4A                            LSR
0C761 4A                            LSR
0C762 4A                            LSR
0C763 18                            CLC
0C764 69 01                         ADC #1
0C766 4A                            LSR
0C767 0A                            ASL
0C768 0A                            ASL
0C769 0A                            ASL
0C76A 18                            CLC
0C76B 69 C8                         ADC #$C8
0C76D 85 00                         STA temp
0C76F 8A                            TXA
0C770 29 0F                         AND #%00001111
0C772 18                            CLC
0C773 69 01                         ADC #$01
0C775 4A                            LSR
0C776 18                            CLC
0C777 65 00                         ADC temp
0C779 85 00                         STA temp
0C77B 99 00 03                      STA ppu_buffer,y
0C77E C8                            INY
0C77F                                  
0C77F 8A                            TXA
0C780 29 10                         AND #%00010000
0C782 F0 05                         BEQ +
0C784 A9 F0                             LDA #%11110000
0C786 4C 8B C7                          JMP ++
0C789                               +
0C789 A9 0F                         LDA #%00001111
0C78B                               ++
0C78B 85 02                         STA temp+2
0C78D                               
0C78D 8A                            TXA
0C78E 48                            PHA
0C78F 29 01                         AND #%00000001
0C791 F0 07                         BEQ +
0C793 A5 02                             LDA temp+2
0C795 09 CC                             ORA #%11001100
0C797 4C 9E C7                          JMP ++
0C79A                               +
0C79A A5 02                         LDA temp+2
0C79C 09 33                         ORA #%00110011
0C79E                               ++
0C79E 85 02                         STA temp+2
0C7A0                               
0C7A0 A5 00                         LDA temp
0C7A2 38                            SEC
0C7A3 E9 C0                         SBC #$C0
0C7A5 AA                            TAX
0C7A6 BD A0 04                      LDA tile_attributes,x
0C7A9 25 02                         AND temp+2
0C7AB 9D A0 04                      STA tile_attributes,x
0C7AE 99 00 03                      STA ppu_buffer,y
0C7B1 C8                            INY
0C7B2 68                            PLA
0C7B3 AA                            TAX
0C7B4                           
0C7B4                               ;; Tell PPU to update tiles and attributes next frame
0C7B4 84 39                         STY ppu_buffer_pointer
0C7B6 A9 01                         LDA #$01
0C7B8 85 38                         STA ppu_buffer_update
0C7BA                            
0C7BA                               
0C7BA                               ;; - Load destruction animation on tile
0C7BA                               ;; Get most recent slot for explosion    
0C7BA 8A                            TXA
0C7BB 85 02                         STA temp+2
0C7BD A6 3A                         LDX explosion_pointer
0C7BF                           
0C7BF                               ;; If 0, use max pointer value
0C7BF D0 02                         BNE +
0C7C1 A2 04                             LDX #MAX_ANIMATIONS
0C7C3                               +
0C7C3                           
0C7C3                               ;; Decrease pointer by one
0C7C3 CA                            DEX
0C7C4 86 3A                         STX explosion_pointer
0C7C6                           
0C7C6                               ;; Load explosion data into RAM
0C7C6 A9 00                         LDA #$00
0C7C8 9D 64 03                      STA explosion_currentframe,x
0C7CB                           
0C7CB A9 04                         LDA #ANIMATION_SPEED
0C7CD 9D 60 03                      STA explosion_framecounter,x
0C7D0                           
0C7D0 A5 02                         LDA temp+2
0C7D2 29 0F                         AND #%00001111
0C7D4 A8                            TAY
0C7D5 B9 78 D5                      LDA tbl_Times16,y
0C7D8 18                            CLC
0C7D9 69 0E                         ADC #$0E
0C7DB 9D 6C 03                      STA explosion_x,x
0C7DE                           
0C7DE A5 02                         LDA temp+2
0C7E0 29 F0                         AND #%11110000
0C7E2 18                            CLC
0C7E3 69 29                         ADC #$29
0C7E5 9D 70 03                      STA explosion_y,x
0C7E8                           
0C7E8 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C7EA 9D 68 03                      STA explosion_attributes,x
0C7ED A9 01                         LDA #$01
0C7EF 9D 74 03                      STA explosion_active,x
0C7F2                           
0C7F2 A5 02                         LDA temp+2
0C7F4 AA                            TAX
0C7F5                               
0C7F5                               
0C7F5                               ;; - Write #$00 in tile type ram (makes not-solid)
0C7F5 A9 00                         LDA #$00
0C7F7 9D 00 04                      STA tile_type, x
0C7FA                           
0C7FA                           
0C7FA                               ;; Add (80 + level number) to score
0C7FA A5 3F                         LDA current_level
0C7FC 18                            CLC
0C7FD 69 51                         ADC #81
0C7FF 20 80 C4                      JSR sub_AddAccumulatorToScore
0C802                           
0C802                           
0C802                               ;; - If there are no color blocks left:
0C802                               ;;   - Freeze ball
0C802                               ;;   - Initiate level-win state [@TODO]
0C802 C6 41                         DEC blocks_left
0C804 D0 06                         BNE +
0C806 A5 36                             LDA ball_flags
0C808 09 04                             ORA #FREEZE_BALL
0C80A 85 36                             STA ball_flags
0C80C                               +
0C80C                               
0C80C 60                            RTS
0C80D                           
0C80D                           +checkIfPaintBlock:
0C80D                           
0C80D                           
0C80D                               ;; Check if collided tile is a paint block
0C80D A5 40                         LDA colliding_tile
0C80F 29 20                         AND #IS_PAINT_BLOCK
0C811 F0 1A                         BEQ +checkIfDeathBlock
0C813                                   ;; It's a paint block. Update ball color
0C813                                   ;; Save x-register
0C813 8A                                TXA
0C814 48                                PHA
0C815                           
0C815                                   ;; Get tile color
0C815 A5 40                             LDA colliding_tile
0C817 29 0E                             AND #%00001110
0C819 0A                                ASL
0C81A 0A                                ASL
0C81B 0A                                ASL
0C81C 0A                                ASL
0C81D 85 00                             STA temp
0C81F                           
0C81F                                   ;; Apply tile color to ball
0C81F A5 36                             LDA ball_flags
0C821 29 1F                             AND #%00011111
0C823 05 00                             ORA temp
0C825 85 36                             STA ball_flags
0C827 20 57 C5                          JSR sub_ColorizeBall
0C82A                           
0C82A                                   ;; Restore x-register
0C82A 68                                PLA
0C82B AA                                TAX
0C82C                           
0C82C                                   ;; Return
0C82C 60                                RTS
0C82D                               +checkIfDeathBlock:
0C82D                           
0C82D                               ;; Check if collided tile is a death block
0C82D A5 40                         LDA colliding_tile
0C82F 29 10                         AND #IS_DEATH_BLOCK
0C831 F0 38                         BEQ +checkIfMoveBlock
0C833                           
0C833                                   ;; It is a death block
0C833                                   ;; Freeze and kill player
0C833 A5 36                             LDA ball_flags
0C835 09 05                             ORA #%00000101
0C837 85 36                             STA ball_flags
0C839                                   
0C839                                   ;; Get free explosion slot
0C839 A6 3A                             LDX explosion_pointer
0C83B D0 02                             BNE +
0C83D A2 04                                 LDX #MAX_ANIMATIONS
0C83F                                   +
0C83F CA                                DEX
0C840 86 3A                             STX explosion_pointer
0C842                           
0C842                                   ;; Load explosion data into RAM
0C842 A9 00                             LDA #$00
0C844 9D 64 03                          STA explosion_currentframe,x
0C847                           
0C847 A9 04                             LDA #ANIMATION_SPEED
0C849 9D 60 03                          STA explosion_framecounter,x
0C84C                           
0C84C A5 17                             LDA ball_xpos_hi
0C84E 38                                SEC
0C84F E9 08                             SBC #$08
0C851 9D 6C 03                          STA explosion_x,x
0C854                           
0C854 A5 19                             LDA ball_ypos_hi
0C856 38                                SEC
0C857 E9 06                             SBC #$06
0C859 9D 70 03                          STA explosion_y,x
0C85C                           
0C85C A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C85E 9D 68 03                          STA explosion_attributes,x
0C861                           
0C861 A9 01                             LDA #$01
0C863 9D 74 03                          STA explosion_active,x
0C866                           
0C866                                   ;; Set kill counter
0C866 A9 60                             LDA #$60
0C868 85 3E                             STA kill_counter
0C86A                           
0C86A                                   ;; Return
0C86A 60                                RTS
0C86B                           
0C86B                           
0C86B                           +checkIfMoveBlock:
0C86B                           
0C86B                               ;; Check if collided tile is a move block
0C86B A5 40                         LDA colliding_tile
0C86D 29 40                         AND #IS_MOVE_BLOCK
0C86F F0 07                         BEQ +done
0C871                                   ;; It is a move block. Check if colors match
0C871 20 78 C5                          JSR sub_ColorsMatch
0C874 F0 01                             BEQ +
0C876                                       ;; Colors don't match - return
0C876 60                                    RTS
0C877                                   +
0C877                           
0C877                                   ;; Colors match.
0C877                                   ;; - Check if next tile is a solid
0C877                                   ;; - If not, move the tile:
0C877                                   ;;   - Add the tiles that need updating to ppu buffer
0C877                                   ;;   - Add move tile sprite over the original tile
0C877                                   ;;   - Initiate moving the sprite that way for 16px
0C877                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C877                                   ;;   - Update attribute table accordingly through ppu buffer
0C877                                   ;; - After moving the sprite, in a different routine:
0C877                                   ;;   - Add move tile data on the new tile location
0C877                                   ;;   - Write the original tile type data on new position in ram
0C877                                   ;;   - Destroy sprite
0C877                                   ;;   - Update attribute table accordingly through ppu buffer
0C877                                   ;; [@TODO]
0C877 60                                RTS
0C878                               +done:
0C878                           
0C878                               ;; Return
0C878 60                            RTS
0C879                           
0C879                           .include "game/subroutine/InitiateNudge.asm"
0C879                           
0C879                           sub_InitiateNudge:
0C879 85 36                         STA ball_flags
0C87B A9 05                         LDA #NUDGE_FRAMES
0C87D 85 3C                         STA nudge_counter
0C87F 60                            RTS
0C880                           
0C880                           .include "game/subroutine/JumpToPointer.asm"
0C880                           sub_JumpToPointer:
0C880 6C 0C 00                      JMP (pointer)
0C883                               ;RTS must be handled by the routine (pointer) jumps to
0C883                           .include "game/subroutine/LoadGameScreen.asm"
0C883                           sub_LoadGameScreen:
0C883                           
0C883                               ;; Clear the screen
0C883 20 EC C4                      JSR sub_ClearScreen
0C886                               
0C886                               ;; Clear collision and attribute data; reset blocks left in the process
0C886 A2 00                         LDX #$00
0C888 8A                            TXA
0C889 85 41                         STA blocks_left
0C88B                               -
0C88B 9D 00 04                          STA tile_type,x
0C88E E8                                INX
0C88F D0 FA                         BNE -
0C891                               
0C891                               ;; Get pointer from current level
0C891 A6 3F                         LDX current_level
0C893 BD 2D D5                      LDA tbl_lvl_layout_lo,x
0C896 85 0C                         STA pointer
0C898 BD 14 D5                      LDA tbl_lvl_layout_hi,x
0C89B 85 0D                         STA pointer+1
0C89D                           
0C89D                               ;; Set up the loop
0C89D A0 00                         LDY #$00
0C89F                           -drawRowColumnLoop:
0C89F                           
0C89F                               ;; Load (x,y) of current set of tiles
0C89F B1 0C                         LDA (pointer),y
0C8A1                           
0C8A1                               ;; Check if level is done; if so, skip the loop
0C8A1 C9 FF                         CMP #LEVEL_END
0C8A3 D0 03                         BNE +
0C8A5 4C F2 C9                          JMP +doneLevelLoad
0C8A8                               +
0C8A8                           
0C8A8                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C8A8 85 00                         STA temp
0C8AA C8                            INY
0C8AB B1 0C                         LDA (pointer),y
0C8AD 85 01                         STA temp+1
0C8AF                               
0C8AF                               ;; Convert (x,y) to PPU address
0C8AF                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C8AF A5 00                         LDA temp
0C8B1 29 0F                         AND #%00001111
0C8B3 4A                            LSR
0C8B4 4A                            LSR
0C8B5 09 20                         ORA #$20
0C8B7 85 02                         STA temp+2
0C8B9                               
0C8B9                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C8B9 A5 00                         LDA temp
0C8BB 29 F0                         AND #%11110000
0C8BD 4A                            LSR
0C8BE 4A                            LSR
0C8BF 4A                            LSR
0C8C0 85 03                         STA temp+3
0C8C2                               
0C8C2 A5 00                         LDA temp
0C8C4 29 03                         AND #%00000011
0C8C6 AA                            TAX
0C8C7 BD 88 D5                      LDA tbl_Times64,x
0C8CA 18                            CLC
0C8CB 65 03                         ADC temp+3
0C8CD 18                            CLC
0C8CE 69 C2                         ADC #$C2
0C8D0 85 03                         STA temp+3
0C8D2                               
0C8D2                               ;; Add carry to temp+2
0C8D2 A5 02                         LDA temp+2
0C8D4 69 00                         ADC #$00
0C8D6 85 02                         STA temp+2
0C8D8                           
0C8D8                               ;; Convert tile data to loop count and tile type
0C8D8                               ;; temp+4 = color
0C8D8 A5 01                         LDA temp+1
0C8DA 29 07                         AND #%00000111
0C8DC 85 04                         STA temp+4
0C8DE                               
0C8DE                               ;; If color = 7, this is a wall
0C8DE C9 07                         CMP #%00000111
0C8E0 F0 12                         BEQ +wallHack
0C8E2                                   
0C8E2                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C8E2 29 01                             AND #%00000001
0C8E4 F0 02                             BEQ +
0C8E6 A9 05                                 LDA #$05
0C8E8                                   +
0C8E8 85 07                             STA temp+7
0C8EA                                
0C8EA                                   ;; temp+5 = tile type
0C8EA A5 01                             LDA temp+1
0C8EC 4A                                LSR
0C8ED 4A                                LSR
0C8EE 4A                                LSR
0C8EF 29 03                             AND #%00000011
0C8F1 4C FA C8                          JMP +setTileType
0C8F4                               +wallHack:
0C8F4                               
0C8F4                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C8F4 A9 00                         LDA #$00
0C8F6 85 07                         STA temp+7
0C8F8 A9 04                         LDA #$04
0C8FA                           
0C8FA                           +setTileType:    
0C8FA 85 05                         STA temp+5
0C8FC                               
0C8FC                               ;; X = tile offset
0C8FC 18                            CLC
0C8FD 65 07                         ADC temp+7
0C8FF AA                            TAX
0C900                               
0C900                               ;; temp+6 = number of tiles
0C900 A5 01                         LDA temp+1
0C902 29 60                         AND #%01100000
0C904 4A                            LSR
0C905 4A                            LSR
0C906 4A                            LSR
0C907 4A                            LSR
0C908 4A                            LSR
0C909 85 06                         STA temp+6
0C90B                               
0C90B                               ;; Translate (x,y) to (y,x) for tile RAM
0C90B A5 00                         LDA temp
0C90D 0A                            ASL
0C90E 0A                            ASL
0C90F 0A                            ASL
0C910 0A                            ASL
0C911 85 08                         STA temp+8
0C913 A5 00                         LDA temp
0C915 4A                            LSR
0C916 4A                            LSR
0C917 4A                            LSR
0C918 4A                            LSR
0C919 05 08                         ORA temp+8
0C91B 85 00                         STA temp
0C91D                               
0C91D                               ;; Set up loop
0C91D 98                            TYA
0C91E 48                            PHA
0C91F A4 06                         LDY temp+6
0C921                           
0C921                               -drawTileLoop:
0C921                                   ;; Write PPU address
0C921 2C 02 20                          BIT PPU_STATUS
0C924 A5 02                             LDA temp+2
0C926 8D 06 20                          STA PPU_ADDR
0C929 A5 03                             LDA temp+3
0C92B 8D 06 20                          STA PPU_ADDR
0C92E                                   
0C92E                                   ;; Write first and second tile
0C92E BD 8C D5                          LDA tbl_GametileTopLeft,x
0C931 8D 07 20                          STA PPU_DATA
0C934 BD 96 D5                          LDA tbl_GametileTopRight,x
0C937 8D 07 20                          STA PPU_DATA
0C93A                                   
0C93A                                   ;; Update PPU address
0C93A 2C 02 20                          BIT PPU_STATUS
0C93D A5 02                             LDA temp+2
0C93F 8D 06 20                          STA PPU_ADDR
0C942 A5 03                             LDA temp+3
0C944 18                                CLC
0C945 69 20                             ADC #$20
0C947 8D 06 20                          STA PPU_ADDR
0C94A                                   
0C94A                                   ;; Write third and fourth tile
0C94A BD A0 D5                          LDA tbl_GametileBottomLeft,x
0C94D 8D 07 20                          STA PPU_DATA
0C950 BD AA D5                          LDA tbl_GametileBottomRight,x
0C953 8D 07 20                          STA PPU_DATA
0C956                           
0C956                                   ;; Push x-register to stack
0C956 8A                                TXA
0C957 48                                PHA
0C958                           
0C958                                   ;; If current block is color block, add one to blocks left
0C958 A6 05                             LDX temp+5
0C95A D0 02                             BNE +
0C95C E6 41                                 INC blocks_left
0C95E                                   +
0C95E                           
0C95E                                   ;; Update tile RAM (aka collision table)
0C95E BD B4 D5                          LDA tbl_GameTileRamByte,x
0C961 05 04                             ORA temp+4
0C963 0A                                ASL
0C964 09 01                             ORA #%00000001
0C966 A6 00                             LDX temp
0C968 9D 00 04                          STA tile_type,x
0C96B                           
0C96B                                   ;; Check if shade 1 should be drawn
0C96B E8                                INX
0C96C BD 00 04                          LDA tile_type,x
0C96F D0 05                             BNE +
0C971 A9 00                                 LDA #$00
0C973 8D 07 20                              STA PPU_DATA
0C976                                   +
0C976                                   
0C976                                   ;; Check if shade 2 should be drawn
0C976 A5 03                             LDA temp+3
0C978 18                                CLC
0C979 69 41                             ADC #$41
0C97B 85 03                             STA temp+3
0C97D A5 02                             LDA temp+2
0C97F 69 00                             ADC #$00
0C981 85 02                             STA temp+2
0C983                                   
0C983 8A                                TXA
0C984 18                                CLC
0C985 69 0F                             ADC #$0F
0C987 AA                                TAX
0C988                                   
0C988 BD 00 04                          LDA tile_type,x
0C98B D0 0F                             BNE +
0C98D A5 02                                 LDA temp+2
0C98F 8D 06 20                              STA PPU_ADDR
0C992 A5 03                                 LDA temp+3
0C994 8D 06 20                              STA PPU_ADDR
0C997 A9 00                                 LDA #$00
0C999 8D 07 20                              STA PPU_DATA
0C99C                                   +
0C99C                           
0C99C                                   ;; Check if shade 3 should be drawn
0C99C E8                                INX
0C99D E6 03                             INC temp+3
0C99F BD 00 04                          LDA tile_type,x
0C9A2 D0 0F                             BNE +
0C9A4 A5 02                                 LDA temp+2
0C9A6 8D 06 20                              STA PPU_ADDR
0C9A9 A5 03                                 LDA temp+3
0C9AB 8D 06 20                              STA PPU_ADDR
0C9AE A9 00                                 LDA #$00
0C9B0 8D 07 20                              STA PPU_DATA
0C9B3                                   +
0C9B3                                   
0C9B3                                   ;; Restore x-register from stack
0C9B3 68                                PLA
0C9B4 AA                                TAX
0C9B5                                   
0C9B5                                   ;; Reset pointer for next tile
0C9B5 A5 03                             LDA temp+3
0C9B7 38                                SEC
0C9B8 E9 42                             SBC #$42
0C9BA 85 03                             STA temp+3
0C9BC A5 02                             LDA temp+2
0C9BE E9 00                             SBC #$00
0C9C0 85 02                             STA temp+2
0C9C2                                   
0C9C2                                   ;; Draw next metatile in this loop (if any left)
0C9C2 88                                DEY
0C9C3 30 27                             BMI +doneDrawingRowColumn
0C9C5                                   
0C9C5                                   ;; Is it a row or a column?
0C9C5 A5 01                             LDA temp+1
0C9C7 10 17                             BPL +
0C9C9                                       ;; It is a column: move pointer down (+$40)
0C9C9 A5 03                                 LDA temp+3
0C9CB 18                                    CLC
0C9CC 69 40                                 ADC #$40
0C9CE 85 03                                 STA temp+3
0C9D0 A5 02                                 LDA temp+2
0C9D2 69 00                                 ADC #$00
0C9D4 85 02                                 STA temp+2
0C9D6                                       
0C9D6                                       ;; Add 16 to temp (as a tile RAM pointer)
0C9D6 A5 00                                 LDA temp
0C9D8 18                                    CLC
0C9D9 69 10                                 ADC #$10
0C9DB 85 00                                 STA temp
0C9DD 4C E9 C9                              JMP +drawNextTile
0C9E0                                   +
0C9E0                                   
0C9E0                                   ;; It is a row: move pointer right (+$02)
0C9E0 A5 03                             LDA temp+3
0C9E2 18                                CLC
0C9E3 69 02                             ADC #$02
0C9E5 85 03                             STA temp+3
0C9E7                                   
0C9E7                                   ;; Add 1 to temp (as a tile RAM pointer)
0C9E7 E6 00                             INC temp
0C9E9                           
0C9E9                               
0C9E9                               ;; Next tile in the row/column
0C9E9                                   +drawNextTile:
0C9E9 4C 21 C9                      JMP -drawTileLoop
0C9EC                           
0C9EC                               ;; Go to the next set of tiles
0C9EC                           +doneDrawingRowColumn:
0C9EC 68                            PLA
0C9ED A8                            TAY
0C9EE C8                            INY
0C9EF 4C 9F C8                      JMP -drawRowColumnLoop
0C9F2                           
0C9F2                           ;; Level loading is done
0C9F2                           +doneLevelLoad:
0C9F2                           
0C9F2                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C9F2 A9 20                         LDA #$20
0C9F4 8D 06 20                      STA PPU_ADDR
0C9F7 A9 A2                         LDA #$A2
0C9F9 8D 06 20                      STA PPU_ADDR
0C9FC A9 35                         LDA #$35
0C9FE 20 2C CC                      JSR sub_Draw28HorizontalTiles
0CA01                           
0CA01                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CA01 A9 23                         LDA #$23
0CA03 8D 06 20                      STA PPU_ADDR
0CA06 A9 42                         LDA #$42
0CA08 8D 06 20                      STA PPU_ADDR
0CA0B A9 31                         LDA #$31
0CA0D 20 2C CC                      JSR sub_Draw28HorizontalTiles
0CA10                           
0CA10                               ;; Left & right game bounds
0CA10                               ;; Set PPU_ADDR and store in temp variables
0CA10 A9 20                         LDA #$20
0CA12 85 00                         STA temp
0CA14 8D 06 20                      STA PPU_ADDR
0CA17 A9 C1                         LDA #$C1
0CA19 85 01                         STA temp+1
0CA1B 8D 06 20                      STA PPU_ADDR
0CA1E                               
0CA1E                               ;; Set vertical bound tile and set up loop
0CA1E A0 33                         LDY #$33
0CA20 A2 14                         LDX #20
0CA22                               -
0CA22                                   ;; Show left tile
0CA22 8C 07 20                          STY PPU_DATA
0CA25                                   
0CA25                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CA25 A5 00                             LDA temp
0CA27 8D 06 20                          STA PPU_ADDR
0CA2A A5 01                             LDA temp+1
0CA2C 18                                CLC
0CA2D 69 1D                             ADC #29
0CA2F 85 01                             STA temp+1
0CA31 8D 06 20                          STA PPU_ADDR
0CA34                           
0CA34                                   ;; Show right tile
0CA34 8C 07 20                          STY PPU_DATA
0CA37                           
0CA37                                   ;; Check if we're done yet
0CA37 CA                                DEX
0CA38 F0 18                             BEQ +drawCorners
0CA3A                                   
0CA3A                                   ;; Not done yet: add 3 to low byte for next left bound
0CA3A A5 01                             LDA temp+1
0CA3C 18                                CLC
0CA3D 69 03                             ADC #3
0CA3F 85 01                             STA temp+1
0CA41                                   
0CA41                                   ;; Apply carry to high byte
0CA41 A5 00                             LDA temp
0CA43 69 00                             ADC #$00
0CA45 85 00                             STA temp
0CA47                                   
0CA47                                   ;; Store next PPU_ADDR to draw at
0CA47 8D 06 20                          STA PPU_ADDR
0CA4A A5 01                             LDA temp+1
0CA4C 8D 06 20                          STA PPU_ADDR
0CA4F 4C 22 CA                      JMP -
0CA52                               
0CA52                               
0CA52                           
0CA52                           +drawCorners:
0CA52                               ;; Draw the corners of the playing field
0CA52 A9 20                         LDA #$20
0CA54 8D 06 20                      STA PPU_ADDR
0CA57 A9 A1                         LDA #$A1
0CA59 8D 06 20                      STA PPU_ADDR
0CA5C A9 39                         LDA #$39
0CA5E 8D 07 20                      STA PPU_DATA
0CA61                           
0CA61 A9 20                         LDA #$20
0CA63 8D 06 20                      STA PPU_ADDR
0CA66 A9 BE                         LDA #$BE
0CA68 8D 06 20                      STA PPU_ADDR
0CA6B A9 3A                         LDA #$3A
0CA6D 8D 07 20                      STA PPU_DATA
0CA70                               ;; (added background tile for Sprite-0 hit)
0CA70 A9 3F                         LDA #$3F
0CA72 8D 07 20                      STA PPU_DATA
0CA75                           
0CA75 A9 23                         LDA #$23
0CA77 8D 06 20                      STA PPU_ADDR
0CA7A A9 41                         LDA #$41
0CA7C 8D 06 20                      STA PPU_ADDR
0CA7F A9 36                         LDA #$36
0CA81 8D 07 20                      STA PPU_DATA
0CA84                           
0CA84 A9 23                         LDA #$23
0CA86 8D 06 20                      STA PPU_ADDR
0CA89 A9 5E                         LDA #$5E
0CA8B 8D 06 20                      STA PPU_ADDR
0CA8E A9 34                         LDA #$34
0CA90 8D 07 20                      STA PPU_DATA
0CA93                           
0CA93                           
0CA93                               ;; Draw the hud labels
0CA93 A9 20                         LDA #$20
0CA95 8D 06 20                      STA PPU_ADDR
0CA98 A9 62                         LDA #$62
0CA9A 8D 06 20                      STA PPU_ADDR
0CA9D A2 00                         LDX #$00
0CA9F                               -
0CA9F BD B9 D5                          LDA tbl_HudText,x
0CAA2 8D 07 20                          STA PPU_DATA
0CAA5 E8                                INX
0CAA6 E0 1C                             CPX #28
0CAA8 D0 F5                         BNE -
0CAAA                           
0CAAA                           
0CAAA                               ;; Draw the current score
0CAAA A9 20                         LDA #$20
0CAAC 8D 06 20                      STA PPU_ADDR
0CAAF A9 83                         LDA #$83
0CAB1 8D 06 20                      STA PPU_ADDR
0CAB4 A2 00                         LDX #$00
0CAB6                               -
0CAB6 B5 20                             LDA ball_score,x
0CAB8 18                                CLC
0CAB9 69 01                             ADC #$01
0CABB 8D 07 20                          STA PPU_DATA
0CABE E8                                INX
0CABF E0 06                             CPX #$06
0CAC1 D0 F3                         BNE -
0CAC3                           
0CAC3                           
0CAC3                               ;; Draw the level number
0CAC3                               ;; (with primitive HEX>DEC)
0CAC3 A5 3F                         LDA current_level
0CAC5 18                            CLC
0CAC6 69 01                         ADC #$01
0CAC8 85 01                         STA temp+1
0CACA                               
0CACA C9 14                         CMP #20
0CACC B0 13                         BCS +tempIsTwo
0CACE                               
0CACE C9 0A                         CMP #10
0CAD0 B0 05                         BCS +tempIsOne
0CAD2                               
0CAD2 A9 00                         LDA #$00
0CAD4 4C E8 CA                      JMP +setTemp
0CAD7                               
0CAD7                           +tempIsOne:
0CAD7 38                            SEC
0CAD8 E9 0A                         SBC #10
0CADA 85 01                         STA temp+1
0CADC A9 01                         LDA #$01
0CADE 4C E8 CA                      JMP +setTemp
0CAE1                               
0CAE1                           +tempIsTwo:
0CAE1 38                            SEC
0CAE2 E9 14                         SBC #20
0CAE4 85 01                         STA temp+1
0CAE6 A9 02                         LDA #$02
0CAE8                           
0CAE8                           +setTemp:
0CAE8 85 00                         STA temp
0CAEA                               
0CAEA E6 00                         INC temp
0CAEC E6 01                         INC temp+1
0CAEE                               
0CAEE A9 20                         LDA #$20
0CAF0 8D 06 20                      STA PPU_ADDR
0CAF3 A9 8B                         LDA #$8B
0CAF5 8D 06 20                      STA PPU_ADDR
0CAF8 A5 00                         LDA temp
0CAFA 8D 07 20                      STA PPU_DATA
0CAFD A5 01                         LDA temp+1
0CAFF 8D 07 20                      STA PPU_DATA
0CB02                           
0CB02                           
0CB02                               ;; Draw lives (presumes lives to be capped at 9)
0CB02 A9 20                         LDA #$20
0CB04 8D 06 20                      STA PPU_ADDR
0CB07 A9 92                         LDA #$92
0CB09 8D 06 20                      STA PPU_ADDR
0CB0C A6 1F                         LDX ball_lives
0CB0E E8                            INX
0CB0F 8E 07 20                      STX PPU_DATA
0CB12                           
0CB12                           
0CB12                               ;; Set and draw bonus
0CB12 A9 07                         LDA #$07
0CB14 85 2C                         STA ball_bonus
0CB16 A9 09                         LDA #$09
0CB18 85 2D                         STA ball_bonus+1
0CB1A 85 2E                         STA ball_bonus+2
0CB1C                               
0CB1C A9 20                         LDA #$20
0CB1E 8D 06 20                      STA PPU_ADDR
0CB21 A9 9A                         LDA #$9A
0CB23 8D 06 20                      STA PPU_ADDR
0CB26 A2 00                         LDX #$00
0CB28                               -
0CB28 B5 2C                             LDA ball_bonus,x
0CB2A 18                                CLC
0CB2B 69 01                             ADC #$01
0CB2D 8D 07 20                          STA PPU_DATA
0CB30 E8                                INX
0CB31 E0 03                             CPX #$03
0CB33 D0 F3                         BNE -
0CB35                           
0CB35                           
0CB35                               ;; Set attribute data to RAM
0CB35                               
0CB35                               ;; Byte 0-7 of attribute ram should be #%10100000
0CB35 A2 00                         LDX #$00
0CB37 A9 A0                         LDA #$A0
0CB39                               -
0CB39 9D A0 04                          STA tile_attributes,x
0CB3C E8                                INX
0CB3D E0 08                             CPX #$08
0CB3F D0 F8                         BNE -
0CB41                           
0CB41                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CB41                           
0CB41                           -attributeLoop:
0CB41                               ;; Reset current attribute value
0CB41 A9 00                         LDA #$00
0CB43 85 02                         STA temp+2
0CB45                           
0CB45                               ;; Get first metatile in tile ram based on attribute index
0CB45                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CB45 8A                            TXA
0CB46                           
0CB46 38                            SEC
0CB47 E9 08                         SBC #$08
0CB49 85 01                         STA temp+1      ; attr - 8 (temp1)
0CB4B 0A                            ASL             ; * 2
0CB4C 85 00                         STA temp        ; temp = temp1 * 2
0CB4E                           
0CB4E A5 01                         LDA temp+1      ; temp1
0CB50 29 F8                         AND #%11111000  ; rounded down to 8's
0CB52 0A                            ASL             ; * 2
0CB53 18                            CLC
0CB54 65 00                         ADC temp        ; + temp1 * 2
0CB56 85 00                         STA temp        ; first metatile
0CB58                           
0CB58                               ;; Store first metatile in y-register
0CB58 A8                            TAY
0CB59                           
0CB59                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CB59 8A                            TXA
0CB5A 29 07                         AND #%00000111
0CB5C C9 07                         CMP #%00000111
0CB5E F0 0B                         BEQ +
0CB60                           
0CB60                               ;; If X >= $30, don't apply bottom right metatile
0CB60 E0 30                         CPX #$30
0CB62 B0 07                         BCS +
0CB64                               
0CB64                               ;; Add metatile1 subpalette to attribute value
0CB64 B9 00 04                      LDA tile_type,y
0CB67 29 0C                         AND #%00001100
0CB69 85 02                         STA temp+2
0CB6B                               +
0CB6B                           
0CB6B                           
0CB6B                               ;; Apply second metatile
0CB6B 88                            DEY
0CB6C                           
0CB6C                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CB6C 8A                            TXA
0CB6D 29 07                         AND #%00000111
0CB6F F0 10                         BEQ +
0CB71                           
0CB71                               ;; If X >= $30, don't apply bottom left metatile
0CB71 E0 30                         CPX #$30
0CB73 B0 0C                         BCS +
0CB75                           
0CB75                           
0CB75                           
0CB75                               ;; Add metatile2 subpalette to attribute value
0CB75 B9 00 04                      LDA tile_type,y
0CB78 29 0C                         AND #%00001100
0CB7A 4A                            LSR
0CB7B 4A                            LSR
0CB7C 05 02                         ORA temp+2
0CB7E 4C 83 CB                      JMP ++
0CB81                               +
0CB81 A5 02                         LDA temp+2
0CB83                               ++
0CB83 0A                            ASL
0CB84 0A                            ASL
0CB85 85 02                         STA temp+2
0CB87                           
0CB87                           
0CB87                               ;; Apply third metatile
0CB87 98                            TYA
0CB88 38                            SEC
0CB89 E9 0F                         SBC #$0F
0CB8B A8                            TAY
0CB8C                           
0CB8C                               ;; If X MOD 8 == 7, don't apply top right metatile
0CB8C 8A                            TXA
0CB8D 29 07                         AND #%00000111
0CB8F C9 07                         CMP #%00000111
0CB91 F0 11                         BEQ +
0CB93                           
0CB93                               ;; If X < $10, don't apply top right metatile
0CB93 8A                            TXA
0CB94 29 F0                         AND #%11110000
0CB96 F0 0C                         BEQ +
0CB98                           
0CB98                               ;; Add metatile3 subpalette to attribute value
0CB98 B9 00 04                      LDA tile_type,y
0CB9B 29 0C                         AND #%00001100
0CB9D 4A                            LSR
0CB9E 4A                            LSR
0CB9F 05 02                         ORA temp+2
0CBA1 4C A6 CB                      JMP ++
0CBA4                               +
0CBA4 A5 02                         LDA temp+2
0CBA6                               ++
0CBA6 0A                            ASL
0CBA7 0A                            ASL
0CBA8 85 02                         STA temp+2
0CBAA                           
0CBAA                           
0CBAA                               ;; Apply fourth metatile
0CBAA 88                            DEY
0CBAB                           
0CBAB                               ;; If X MOD 8 == 0, don't apply top left metatile
0CBAB 8A                            TXA
0CBAC 29 07                         AND #%00000111
0CBAE F0 11                         BEQ +
0CBB0                           
0CBB0                               ;; If X < $10, don't apply top left metatile
0CBB0 8A                            TXA
0CBB1 29 F0                         AND #%11110000
0CBB3 F0 0C                         BEQ +
0CBB5                           
0CBB5                               ;; Add metatile4 subpalette to attribute value
0CBB5 B9 00 04                      LDA tile_type,y
0CBB8 29 0C                         AND #%00001100
0CBBA 4A                            LSR
0CBBB 4A                            LSR
0CBBC 05 02                         ORA temp+2
0CBBE 4C C3 CB                      JMP ++
0CBC1                               +
0CBC1 A5 02                         LDA temp+2
0CBC3                               ++
0CBC3 9D A0 04                      STA tile_attributes,x
0CBC6                           
0CBC6                               ;; Check the next attribute, if any left
0CBC6 E8                            INX
0CBC7 E0 38                         CPX #$38
0CBC9 F0 03                         BEQ +
0CBCB 4C 41 CB                          JMP -attributeLoop
0CBCE                               +
0CBCE                           
0CBCE                               ;; Stream attribute RAM to PPU
0CBCE 2C 02 20                      BIT PPU_STATUS
0CBD1 A9 23                         LDA #$23
0CBD3 8D 06 20                      STA PPU_ADDR
0CBD6 A9 C0                         LDA #$C0
0CBD8 8D 06 20                      STA PPU_ADDR
0CBDB A2 00                         LDX #$00
0CBDD                               -
0CBDD BD A0 04                          LDA tile_attributes,x
0CBE0 8D 07 20                          STA PPU_DATA
0CBE3 E8                                INX
0CBE4 E0 40                             CPX #$40
0CBE6 D0 F5                         BNE -
0CBE8                           
0CBE8                               ;; Set initial ball position
0CBE8 A6 3F                         LDX current_level
0CBEA BD 46 D5                      LDA tbl_lvl_ball_startpos,x
0CBED 29 F0                         AND #%11110000
0CBEF 18                            CLC
0CBF0 69 34                         ADC #$34
0CBF2 85 19                         STA ball_ypos_hi
0CBF4 BD 46 D5                      LDA tbl_lvl_ball_startpos,x
0CBF7 0A                            ASL
0CBF8 0A                            ASL
0CBF9 0A                            ASL
0CBFA 0A                            ASL
0CBFB 18                            CLC
0CBFC 69 14                         ADC #$14
0CBFE 85 17                         STA ball_xpos_hi
0CC00 A9 00                         LDA #$00
0CC02 85 18                         STA ball_xpos_lo
0CC04 85 1A                         STA ball_ypos_lo
0CC06                               
0CC06                               ;; Set initial ball color and direction
0CC06 BD 5F D5                      LDA tbl_lvl_ball_init,x
0CC09 29 F0                         AND #%11110000
0CC0B 85 36                         STA ball_flags
0CC0D 20 57 C5                      JSR sub_ColorizeBall
0CC10                               
0CC10                               ;; Reset bonus counter
0CC10 A9 06                         LDA #BONUS_FRAMES
0CC12 85 3D                         STA bonus_counter
0CC14                               
0CC14                               ;; Play background noise
0CC14 A9 08                         LDA #$08
0CC16 8D 15 40                      STA APU_STATUS
0CC19 8D 0F 40                      STA NOISE_LENGTH
0CC1C A9 0E                         LDA #$0E
0CC1E 85 44                         STA current_noise
0CC20 A9 00                         LDA #$00
0CC22 85 42                         STA max_noise
0CC24 85 45                         STA noise_counter
0CC26 85 43                         STA sweep_noise
0CC28 20 DF C4                      JSR sub_BackgroundNoise
0CC2B                           
0CC2B                               ;; Return
0CC2B 60                            RTS
0CC2C                           
0CC2C                           
0CC2C                           ;; Subroutine: draw 28 tiles in a row
0CC2C                           sub_Draw28HorizontalTiles:
0CC2C A2 1C                         LDX #28
0CC2E                               -
0CC2E 8D 07 20                          STA PPU_DATA
0CC31 CA                                DEX
0CC32 D0 FA                         BNE -
0CC34 60                            RTS0CC35                           .include "game/subroutine/LoadIntroScreen.asm"
0CC35                           sub_LoadIntroScreen:
0CC35                           
0CC35                               ;; Load intro palette
0CC35 2C 02 20                      BIT PPU_STATUS
0CC38 A9 3F                         LDA #$3F
0CC3A 8D 06 20                      STA PPU_ADDR
0CC3D A9 00                         LDA #$00
0CC3F 8D 06 20                      STA PPU_ADDR
0CC42 A2 00                         LDX #$00
0CC44                               -
0CC44 BD EB CC                          LDA tbl_IntroScreenPalette,x
0CC47 8D 07 20                          STA PPU_DATA
0CC4A E8                                INX
0CC4B E0 20                             CPX #$20
0CC4D D0 F5                         BNE -
0CC4F                               
0CC4F                               ;; Put ball in the middle
0CC4F A9 7C                         LDA #$7C
0CC51 85 17                         STA ball_xpos_hi
0CC53 85 19                         STA ball_ypos_hi
0CC55                           
0CC55                               ;; Clear the screen
0CC55 20 EC C4                      JSR sub_ClearScreen
0CC58                           
0CC58                               ;; Set up intro screen draw loop
0CC58 A2 00                         LDX #$00
0CC5A                           
0CC5A                           -loop_IntroScreenData:
0CC5A                           
0CC5A                               ;; Get current byte from intro screen data
0CC5A BD 13 CD                      LDA tbl_IntroScreenData,x
0CC5D                           
0CC5D                               ;; If current byte is #$3F, we're done drawing.
0CC5D C9 3F                         CMP #$3F
0CC5F D0 03                         BNE +
0CC61 4C AE CC                          JMP +goToEndIntroScreen
0CC64                               +
0CC64                           
0CC64                               ;; If highest bits are %11, draw a plain tile
0CC64 29 C0                         AND #%11000000
0CC66 D0 03                         BNE +
0CC68 4C 8E CC                          JMP +drawTile
0CC6B                               +
0CC6B                               
0CC6B                               ;; If highest bits are %01, set the PPU address
0CC6B                               ;; If not, draw two logo tiles
0CC6B C9 40                         CMP #%01000000
0CC6D D0 03                         BNE +drawLogo
0CC6F 4C 98 CC                          JMP +setPpuAddr
0CC72                           
0CC72                           +drawLogo:
0CC72                               ;; Get bits 0-2 and store in a temp variable
0CC72 BD 13 CD                      LDA tbl_IntroScreenData,x
0CC75 29 07                         AND #%00000111
0CC77 85 00                         STA temp
0CC79                               
0CC79                               ;; Get bits 3-5, shift over to get a value from 0-7
0CC79 BD 13 CD                      LDA tbl_IntroScreenData,x
0CC7C 4A                            LSR
0CC7D 4A                            LSR
0CC7E 4A                            LSR
0CC7F 29 07                         AND #%00000111
0CC81                               
0CC81                               ;; Draw the tile that corresponds with that value
0CC81 A8                            TAY
0CC82 20 CF C5                      JSR sub_drawIntroScreenLogoTile
0CC85                               
0CC85                               ;; Do the same for the value stored in temp
0CC85 A4 00                         LDY temp
0CC87 20 CF C5                      JSR sub_drawIntroScreenLogoTile
0CC8A                           
0CC8A                               ;; Next byte please
0CC8A E8                            INX
0CC8B 4C 5A CC                      JMP -loop_IntroScreenData
0CC8E                           
0CC8E                           +drawTile:
0CC8E                               ;; Just draw the tile value on screen
0CC8E BD 13 CD                      LDA tbl_IntroScreenData,x
0CC91 8D 07 20                      STA PPU_DATA
0CC94                               
0CC94                               ;; Next byte please
0CC94 E8                            INX
0CC95 4C 5A CC                      JMP -loop_IntroScreenData
0CC98                           
0CC98                           
0CC98                           +setPpuAddr:
0CC98                               ;; Reset the PPU latch
0CC98 2C 02 20                      BIT PPU_STATUS
0CC9B                               
0CC9B                               ;; Sanitize and write the high byte of the PPU address
0CC9B BD 13 CD                      LDA tbl_IntroScreenData,x
0CC9E 29 3F                         AND #%00111111
0CCA0 8D 06 20                      STA PPU_ADDR
0CCA3                           
0CCA3                               ;; Write the low byte of the PPU address
0CCA3 E8                            INX
0CCA4 BD 13 CD                      LDA tbl_IntroScreenData,x
0CCA7 8D 06 20                      STA PPU_ADDR
0CCAA                               
0CCAA                               ;; PPU has been set up to draw tiles at the correct spot now.
0CCAA                               
0CCAA                               ;; Next byte please.
0CCAA E8                            INX
0CCAB 4C 5A CC                      JMP -loop_IntroScreenData
0CCAE                           
0CCAE                           +goToEndIntroScreen:
0CCAE                           
0CCAE                               ;; To color the 1.LEVEL: line green, we need to update two
0CCAE                               ;; values in the PPU attribute data.
0CCAE 2C 02 20                      BIT PPU_STATUS
0CCB1 A9 23                         LDA #$23
0CCB3 8D 06 20                      STA PPU_ADDR
0CCB6 A9 CB                         LDA #$CB
0CCB8 8D 06 20                      STA PPU_ADDR
0CCBB A9 0A                         LDA #%00001010
0CCBD 8D 07 20                      STA PPU_DATA
0CCC0 8D 07 20                      STA PPU_DATA
0CCC3                           
0CCC3 60                            RTS
0CCC4                           
0CCC4                           .include "game/subroutine/LoadWinScreen.asm"
0CCC4                           sub_LoadWinScreen:
0CCC4 60                            RTS
0CCC5                           
0CCC5                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CCC5                           sub_WriteByteToPPUBuffer:
0CCC5                           
0CCC5                               ;; Prevent updating until full 3-byte buffer is filled,
0CCC5                               ;; so that graphics won't glitch out if NMI happens during
0CCC5                               ;; updating the buffer
0CCC5 A9 00                         LDA #$00
0CCC7 85 38                         STA ppu_buffer_update
0CCC9                           
0CCC9                               ;; Check if buffer full; if so, wait a frame and force update
0CCC9 A4 39                         LDY ppu_buffer_pointer
0CCCB C0 30                         CPY #$30
0CCCD D0 05                         BNE +
0CCCF E6 38                             INC ppu_buffer_update
0CCD1 20 7A C4                          JSR sub_WaitForVBlank
0CCD4                               +
0CCD4                           
0CCD4                               ;; Add ppu_addr high byte to buffer
0CCD4 A5 00                         LDA temp
0CCD6 99 00 03                      STA ppu_buffer,y
0CCD9                           
0CCD9                               ;; Add ppu_addr low byte to buffer
0CCD9 C8                            INY
0CCDA A5 01                         LDA temp+1
0CCDC 99 00 03                      STA ppu_buffer,y
0CCDF                           
0CCDF                               ;; Add ppu_data to buffer
0CCDF C8                            INY
0CCE0 A5 02                         LDA temp+2
0CCE2 99 00 03                      STA ppu_buffer,y
0CCE5                           
0CCE5                               ;; Update buffer pointer
0CCE5 C8                            INY
0CCE6 84 39                         STY ppu_buffer_pointer
0CCE8                           
0CCE8                               ;; Tell NMI to update next round
0CCE8 E6 38                         INC ppu_buffer_update
0CCEA                           
0CCEA                               ;; Return
0CCEA 60                            RTS0CCEB                           
0CCEB                           
0CCEB                           ;; LUTs
0CCEB                           .include "game/include/tables.asm"
0CCEB                           
0CCEB                           ;; Initial screen palette
0CCEB                           tbl_IntroScreenPalette:
0CCEB 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CCEF 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CCF3 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CCF7 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CCFB                           
0CCFB 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CCFF 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CD03 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CD07 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CD0B                           
0CD0B                           
0CD0B                           ;; Intro: mapping logo index to chr tile
0CD0B                           tbl_IntroScreenLogoChr:
0CD0B 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CD13                           
0CD13                           
0CD13                           ;; Intro screen data
0CD13                           tbl_IntroScreenData:
0CD13                           
0CD13                               ;; Set PPU address $20AC and draw
0CD13 60 AC                         .db #$60, #$AC
0CD15 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CD1D                           
0CD1D                               ;; Set PPU address $20CF and draw
0CD1D 60 CF                         .db #$60, #$CF
0CD1F 01 02                         .db #_0, #_1
0CD21                               
0CD21                               ;; Set PPU address $2122 and draw
0CD21 61 22                         .db #$61, #$22
0CD23 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CD2A 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CD30 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CD38 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CD3D                               
0CD3D                               ;; Set PPU address $2147 and draw
0CD3D 61 47                         .db #$61, #$47
0CD3F 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CD46 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CD4A 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CD50 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CD56                               
0CD56                               ;; Set PPU address $218B and draw
0CD56 61 8B                         .db #$61, #$8B
0CD58 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CD5E 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CD63                               
0CD63                               ;; Set PPU address $21E6 and draw
0CD63 61 E6                         .db #$61, #$E6
0CD65 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CD6D 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CD71 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CD78                               
0CD78                               ;; Set PPU address $222D and draw
0CD78 62 2D                         .db #$62, #$2D
0CD7A 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CD80                               
0CD80                               ;; Set PPU address $2281
0CD80 62 81                         .db #$62, #$81
0CD82                               
0CD82                               ;; Draw the Crillion logo
0CD82 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CD86 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD8A C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CD8E E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CD92                               
0CD92 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CD96 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CD9A C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CD9E D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDA2                               
0CDA2 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CDA6 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDAA C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDAE D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDB2                           
0CDB2 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CDB6 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDBA C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDBE D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDC2                               
0CDC2 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CDC6 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CDCA C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CDCE D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CDD2                           
0CDD2 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CDD6 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CDDA C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CDDE F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CDE1                           
0CDE1                               ;; End of intro
0CDE1 3F                            .db #$3F
0CDE2                           
0CDE2                           
0CDE2                           ;; Animation frames table
0CDE2                           .include "game/include/table/animation_frames.asm"
0CDE2                           ;; CHR tile-id's per slide of explosion
0CDE2                           explosion_slide0:
0CDE2 00 00 00                      .db #$00, #$00, #$00
0CDE5 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CDE8 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CDEB                           
0CDEB                           explosion_slide1:
0CDEB 00 00 00                      .db #$00, #$00, #$00
0CDEE 29 2A 2B                      .db #$29, #$2A, #$2B
0CDF1 39 3A 3B                      .db #$39, #$3A, #$3B
0CDF4                           
0CDF4                           explosion_slide2:
0CDF4 16 00 00                      .db #$16, #$00, #$00
0CDF7 26 27 28                      .db #$26, #$27, #$28
0CDFA 36 37 38                      .db #$36, #$37, #$38
0CDFD                           
0CDFD                           explosion_slide3:
0CDFD 00 14 15                      .db #$00, #$14, #$15
0CE00 23 24 25                      .db #$23, #$24, #$25
0CE03 33 34 35                      .db #$33, #$34, #$35
0CE06                           
0CE06                           explosion_slide4:
0CE06 10 11 12                      .db #$10, #$11, #$12
0CE09 20 21 22                      .db #$20, #$21, #$22
0CE0C 30 31 32                      .db #$30, #$31, #$32
0CE0F                           
0CE0F                           ;; High and low bytes of animation slides
0CE0F                           explosion_anim_hi:
0CE0F CD                            .db >#explosion_slide0
0CE10 CD                            .db >#explosion_slide1
0CE11 CD                            .db >#explosion_slide2
0CE12 CD                            .db >#explosion_slide3
0CE13 CE                            .db >#explosion_slide4
0CE14 CE                            .db >#explosion_slide4
0CE15 CD                            .db >#explosion_slide3
0CE16 CD                            .db >#explosion_slide2
0CE17 CD                            .db >#explosion_slide1
0CE18 CD                            .db >#explosion_slide0
0CE19                           
0CE19                           explosion_anim_lo:
0CE19 E2                            .db <#explosion_slide0
0CE1A EB                            .db <#explosion_slide1
0CE1B F4                            .db <#explosion_slide2
0CE1C FD                            .db <#explosion_slide3
0CE1D 06                            .db <#explosion_slide4
0CE1E 06                            .db <#explosion_slide4
0CE1F FD                            .db <#explosion_slide3
0CE20 F4                            .db <#explosion_slide2
0CE21 EB                            .db <#explosion_slide1
0CE22 E2                            .db <#explosion_slide0
0CE23                           
0CE23                           
0CE23                           
0CE23                           ;; Ball palette color table (CBRYGM)
0CE23                           tbl_BallColorDark:
0CE23 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CE29                            
0CE29                           tbl_BallColorLight:
0CE29 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CE2F                           
0CE2F                               
0CE2F                           ;; Screen mode drawing routine addresses
0CE2F                           tbl_LoadScreenHi:
0CE2F CC C8 CC                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CE32                           
0CE32                           tbl_LoadScreenLo:
0CE32 35 83 C4                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CE35                           
0CE35                           
0CE35                           ;; Level data
0CE35                           .include "game/include/table/level_data.asm"
0CE35                           lvl_layout_01:
0CE35 61 21                         .db #$61, #%00100001
0CE37 52 61                         .db #$52, #%01100001
0CE39 43 65                         .db #$43, #%01100101
0CE3B 83 05                         .db #$83, #%00000101
0CE3D 93 15                         .db #$93, #%00010101
0CE3F 34 7A                         .db #$34, #%01111010
0CE41 74 7A                         .db #$74, #%01111010
0CE43 35 7A                         .db #$35, #%01111010
0CE45 75 7A                         .db #$75, #%01111010
0CE47 46 65                         .db #$46, #%01100101
0CE49 86 25                         .db #$86, #%00100101
0CE4B 57 61                         .db #$57, #%01100001
0CE4D 68 21                         .db #$68, #%00100001
0CE4F FF                            .db #LEVEL_END
0CE50                           
0CE50                           lvl_layout_02:
0CE50 C0 0A                         .db #$C0, #%00001010
0CE52 11 15                         .db #$11, #%00010101
0CE54 21 62                         .db #$21, #%01100010
0CE56 61 62                         .db #$61, #%01100010
0CE58 A1 42                         .db #$A1, #%01000010
0CE5A 12 67                         .db #$12, #%01100111
0CE5C 52 67                         .db #$52, #%01100111
0CE5E 92 67                         .db #$92, #%01100111
0CE60 C3 0D                         .db #$C3, #%00001101
0CE62 14 11                         .db #$14, #%00010001
0CE64 24 65                         .db #$24, #%01100101
0CE66 64 65                         .db #$64, #%01100101
0CE68 A4 45                         .db #$A4, #%01000101
0CE6A 15 67                         .db #$15, #%01100111
0CE6C 55 67                         .db #$55, #%01100111
0CE6E 95 67                         .db #$95, #%01100111
0CE70 17 12                         .db #$17, #%00010010
0CE72 27 61                         .db #$27, #%01100001
0CE74 67 61                         .db #$67, #%01100001
0CE76 A7 41                         .db #$A7, #%01000001
0CE78 38 7A                         .db #$38, #%01111010
0CE7A 98 5A                         .db #$98, #%01011010
0CE7C 18 27                         .db #$18, #%00100111
0CE7E 48 27                         .db #$48, #%00100111
0CE80 78 27                         .db #$78, #%00100111
0CE82 C8 07                         .db #$C8, #%00000111
0CE84 FF                            .db #LEVEL_END
0CE85                           
0CE85                           lvl_layout_03:
0CE85 00 7A                         .db #$00, #%01111010
0CE87 40 7A                         .db #$40, #%01111010
0CE89 80 7A                         .db #$80, #%01111010
0CE8B C0 1A                         .db #$C0, #%00011010
0CE8D 10 A1                         .db #$10, #%10100001
0CE8F 13 E1                         .db #$13, #%11100001
0CE91 17 C1                         .db #$17, #%11000001
0CE93 30 C1                         .db #$30, #%11000001
0CE95 34 C1                         .db #$34, #%11000001
0CE97 38 A1                         .db #$38, #%10100001
0CE99 50 E1                         .db #$50, #%11100001
0CE9B 55 81                         .db #$55, #%10000001
0CE9D 57 C1                         .db #$57, #%11000001
0CE9F 70 C1                         .db #$70, #%11000001
0CEA1 73 A1                         .db #$73, #%10100001
0CEA3 76 E1                         .db #$76, #%11100001
0CEA5 90 E1                         .db #$90, #%11100001
0CEA7 95 81                         .db #$95, #%10000001
0CEA9 97 C1                         .db #$97, #%11000001
0CEAB B0 C1                         .db #$B0, #%11000001
0CEAD B4 C1                         .db #$B4, #%11000001
0CEAF B8 A1                         .db #$B8, #%10100001
0CEB1 D0 A1                         .db #$D0, #%10100001
0CEB3 D3 E1                         .db #$D3, #%11100001
0CEB5 D7 C1                         .db #$D7, #%11000001
0CEB7 FF                            .db #LEVEL_END
0CEB8                           
0CEB8                           lvl_layout_04:
0CEB8 00 4C                         .db #$00, #%01001100
0CEBA 40 6C                         .db #$40, #%01101100
0CEBC 80 4C                         .db #$80, #%01001100
0CEBE 81 AC                         .db #$81, #%10101100
0CEC0 C1 2C                         .db #$C1, #%00101100
0CEC2 02 6C                         .db #$02, #%01101100
0CEC4 42 CC                         .db #$42, #%11001100
0CEC6 62 EC                         .db #$62, #%11101100
0CEC8 A2 CC                         .db #$A2, #%11001100
0CECA C3 CC                         .db #$C3, #%11001100
0CECC 04 4C                         .db #$04, #%01001100
0CECE 84 2C                         .db #$84, #%00101100
0CED0 25 AC                         .db #$25, #%10101100
0CED2 85 AC                         .db #$85, #%10101100
0CED4 06 AC                         .db #$06, #%10101100
0CED6 36 CC                         .db #$36, #%11001100
0CED8 56 CC                         .db #$56, #%11001100
0CEDA 66 EC                         .db #$66, #%11101100
0CEDC 96 6C                         .db #$96, #%01101100
0CEDE C7 AC                         .db #$C7, #%10101100
0CEE0 08 2C                         .db #$08, #%00101100
0CEE2 78 6C                         .db #$78, #%01101100
0CEE4 D8 0C                         .db #$D8, #%00001100
0CEE6 30 A1                         .db #$30, #%10100001
0CEE8 B0 21                         .db #$B0, #%00100001
0CEEA 01 41                         .db #$01, #%01000001
0CEEC 41 61                         .db #$41, #%01100001
0CEEE 91 A1                         .db #$91, #%10100001
0CEF0 A1 21                         .db #$A1, #%00100001
0CEF2 52 C1                         .db #$52, #%11000001
0CEF4 72 E1                         .db #$72, #%11100001
0CEF6 B2 C1                         .db #$B2, #%11000001
0CEF8 C2 21                         .db #$C2, #%00100001
0CEFA 03 41                         .db #$03, #%01000001
0CEFC 33 C1                         .db #$33, #%11000001
0CEFE 83 21                         .db #$83, #%00100001
0CF00 D3 E1                         .db #$D3, #%11100001
0CF02 05 21                         .db #$05, #%00100001
0CF04 45 E1                         .db #$45, #%11100001
0CF06 A5 21                         .db #$A5, #%00100001
0CF08 16 A1                         .db #$16, #%10100001
0CF0A 76 A1                         .db #$76, #%10100001
0CF0C 27 A1                         .db #$27, #%10100001
0CF0E 57 01                         .db #$57, #%00000001
0CF10 87 41                         .db #$87, #%01000001
0CF12 B7 A1                         .db #$B7, #%10100001
0CF14 19 21                         .db #$19, #%00100001
0CF16 39 41                         .db #$39, #%01000001
0CF18 89 41                         .db #$89, #%01000001
0CF1A C9 21                         .db #$C9, #%00100001
0CF1C D0 1A                         .db #$D0, #%00011010
0CF1E 55 1A                         .db #$55, #%00011010
0CF20 95 1A                         .db #$95, #%00011010
0CF22 D7 1A                         .db #$D7, #%00011010
0CF24 09 1A                         .db #$09, #%00011010
0CF26 79 1A                         .db #$79, #%00011010
0CF28 FF                            .db #LEVEL_END
0CF29                           
0CF29                           lvl_layout_05:
0CF29 40 0A                         .db #$40, #%00001010
0CF2B 70 1A                         .db #$70, #%00011010
0CF2D B0 42                         .db #$B0, #%01000010
0CF2F 41 A7                         .db #$41, #%10100111
0CF31 B1 22                         .db #$B1, #%00100010
0CF33 D1 15                         .db #$D1, #%00010101
0CF35 22 0A                         .db #$22, #%00001010
0CF37 52 05                         .db #$52, #%00000101
0CF39 B2 42                         .db #$B2, #%01000010
0CF3B 03 27                         .db #$03, #%00100111
0CF3D 33 67                         .db #$33, #%01100111
0CF3F 73 67                         .db #$73, #%01100111
0CF41 B3 47                         .db #$B3, #%01000111
0CF43 05 E5                         .db #$05, #%11100101
0CF45 25 A5                         .db #$25, #%10100101
0CF47 35 25                         .db #$35, #%00100101
0CF49 65 45                         .db #$65, #%01000101
0CF4B A5 45                         .db #$A5, #%01000101
0CF4D 46 E5                         .db #$46, #%11100101
0CF4F 66 E5                         .db #$66, #%11100101
0CF51 86 E5                         .db #$86, #%11100101
0CF53 A6 E2                         .db #$A6, #%11100010
0CF55 C6 E5                         .db #$C6, #%11100101
0CF57 27 25                         .db #$27, #%00100101
0CF59 77 05                         .db #$77, #%00000101
0CF5B B7 02                         .db #$B7, #%00000010
0CF5D 09 05                         .db #$09, #%00000101
0CF5F 79 05                         .db #$79, #%00000101
0CF61 B9 02                         .db #$B9, #%00000010
0CF63 FF                            .db #LEVEL_END
0CF64                           
0CF64                           lvl_layout_06:
0CF64 00 03                         .db #$00, #%00000011
0CF66 20 03                         .db #$20, #%00000011
0CF68 40 03                         .db #$40, #%00000011
0CF6A A0 03                         .db #$A0, #%00000011
0CF6C C0 03                         .db #$C0, #%00000011
0CF6E 11 03                         .db #$11, #%00000011
0CF70 31 03                         .db #$31, #%00000011
0CF72 51 03                         .db #$51, #%00000011
0CF74 91 03                         .db #$91, #%00000011
0CF76 B1 03                         .db #$B1, #%00000011
0CF78 D1 03                         .db #$D1, #%00000011
0CF7A 02 03                         .db #$02, #%00000011
0CF7C 22 03                         .db #$22, #%00000011
0CF7E 42 03                         .db #$42, #%00000011
0CF80 A2 03                         .db #$A2, #%00000011
0CF82 C2 03                         .db #$C2, #%00000011
0CF84 13 03                         .db #$13, #%00000011
0CF86 33 03                         .db #$33, #%00000011
0CF88 53 03                         .db #$53, #%00000011
0CF8A 93 03                         .db #$93, #%00000011
0CF8C B3 03                         .db #$B3, #%00000011
0CF8E D3 03                         .db #$D3, #%00000011
0CF90 04 03                         .db #$04, #%00000011
0CF92 24 03                         .db #$24, #%00000011
0CF94 44 03                         .db #$44, #%00000011
0CF96 A4 03                         .db #$A4, #%00000011
0CF98 C4 03                         .db #$C4, #%00000011
0CF9A 15 03                         .db #$15, #%00000011
0CF9C 35 03                         .db #$35, #%00000011
0CF9E 55 03                         .db #$55, #%00000011
0CFA0 95 03                         .db #$95, #%00000011
0CFA2 B5 03                         .db #$B5, #%00000011
0CFA4 D5 03                         .db #$D5, #%00000011
0CFA6 06 03                         .db #$06, #%00000011
0CFA8 26 03                         .db #$26, #%00000011
0CFAA 46 03                         .db #$46, #%00000011
0CFAC A6 03                         .db #$A6, #%00000011
0CFAE C6 03                         .db #$C6, #%00000011
0CFB0 17 03                         .db #$17, #%00000011
0CFB2 37 03                         .db #$37, #%00000011
0CFB4 57 03                         .db #$57, #%00000011
0CFB6 97 03                         .db #$97, #%00000011
0CFB8 B7 03                         .db #$B7, #%00000011
0CFBA D7 03                         .db #$D7, #%00000011
0CFBC 08 03                         .db #$08, #%00000011
0CFBE 28 03                         .db #$28, #%00000011
0CFC0 48 03                         .db #$48, #%00000011
0CFC2 A8 03                         .db #$A8, #%00000011
0CFC4 C8 03                         .db #$C8, #%00000011
0CFC6 19 03                         .db #$19, #%00000011
0CFC8 39 03                         .db #$39, #%00000011
0CFCA 59 03                         .db #$59, #%00000011
0CFCC 99 03                         .db #$99, #%00000011
0CFCE B9 03                         .db #$B9, #%00000011
0CFD0 D9 03                         .db #$D9, #%00000011
0CFD2 60 4B                         .db #$60, #%01001011
0CFD4 71 CB                         .db #$71, #%11001011
0CFD6 62 4B                         .db #$62, #%01001011
0CFD8 64 4B                         .db #$64, #%01001011
0CFDA 75 CB                         .db #$75, #%11001011
0CFDC 66 4B                         .db #$66, #%01001011
0CFDE 68 4B                         .db #$68, #%01001011
0CFE0 79 0B                         .db #$79, #%00001011
0CFE2 70 03                         .db #$70, #%00000011
0CFE4 72 03                         .db #$72, #%00000011
0CFE6 74 03                         .db #$74, #%00000011
0CFE8 76 03                         .db #$76, #%00000011
0CFEA 78 03                         .db #$78, #%00000011
0CFEC FF                            .db #LEVEL_END
0CFED                           
0CFED                           lvl_layout_07:
0CFED 00 11                         .db #$00, #%00010001
0CFEF 01 FA                         .db #$01, #%11111010
0CFF1 12 BA                         .db #$12, #%10111010
0CFF3 23 DA                         .db #$23, #%11011010
0CFF5 34 FA                         .db #$34, #%11111010
0CFF7 05 DA                         .db #$05, #%11011010
0CFF9 15 FA                         .db #$15, #%11111010
0CFFB 45 BA                         .db #$45, #%10111010
0CFFD 56 DA                         .db #$56, #%11011010
0CFFF 27 BA                         .db #$27, #%10111010
0D001 67 DA                         .db #$67, #%11011010
0D003 38 3A                         .db #$38, #%00111010
0D005 78 BA                         .db #$78, #%10111010
0D007 09 3A                         .db #$09, #%00111010
0D009 39 3A                         .db #$39, #%00111010
0D00B 89 1A                         .db #$89, #%00011010
0D00D B0 01                         .db #$B0, #%00000001
0D00F D0 01                         .db #$D0, #%00000001
0D011 A1 01                         .db #$A1, #%00000001
0D013 C1 11                         .db #$C1, #%00010001
0D015 B2 01                         .db #$B2, #%00000001
0D017 D2 01                         .db #$D2, #%00000001
0D019 A3 01                         .db #$A3, #%00000001
0D01B C3 01                         .db #$C3, #%00000001
0D01D B4 01                         .db #$B4, #%00000001
0D01F D4 01                         .db #$D4, #%00000001
0D021 A5 01                         .db #$A5, #%00000001
0D023 C5 01                         .db #$C5, #%00000001
0D025 B6 01                         .db #$B6, #%00000001
0D027 D6 01                         .db #$D6, #%00000001
0D029 A7 01                         .db #$A7, #%00000001
0D02B C7 01                         .db #$C7, #%00000001
0D02D FF                            .db #LEVEL_END
0D02E                           
0D02E                           lvl_layout_08:
0D02E 40 B5                         .db #$40, #%10110101
0D030 31 0D                         .db #$31, #%00001101
0D032 61 10                         .db #$61, #%00010000
0D034 42 C7                         .db #$42, #%11000111
0D036 52 67                         .db #$52, #%01100111
0D038 63 C7                         .db #$63, #%11000111
0D03A 83 E7                         .db #$83, #%11100111
0D03C 05 07                         .db #$05, #%00000111
0D03E 15 3A                         .db #$15, #%00111010
0D040 07 63                         .db #$07, #%01100011
0D042 27 13                         .db #$27, #%00010011
0D044 38 A5                         .db #$38, #%10100101
0D046 09 14                         .db #$09, #%00010100
0D048 19 05                         .db #$19, #%00000101
0D04A D0 E0                         .db #$D0, #%11100000
0D04C C2 A0                         .db #$C2, #%10100000
0D04E B3 E0                         .db #$B3, #%11100000
0D050 D5 E0                         .db #$D5, #%11100000
0D052 C6 E0                         .db #$C6, #%11100000
0D054 B0 C4                         .db #$B0, #%11000100
0D056 C0 A4                         .db #$C0, #%10100100
0D058 D1 A4                         .db #$D1, #%10100100
0D05A C4 24                         .db #$C4, #%00100100
0D05C C5 04                         .db #$C5, #%00000100
0D05E B7 44                         .db #$B7, #%01000100
0D060 B8 A4                         .db #$B8, #%10100100
0D062 D9 05                         .db #$D9, #%00000101
0D064 FF                            .db #LEVEL_END
0D065                           
0D065                           lvl_layout_09:
0D065 81 04                         .db #$81, #%00000100
0D067 D1 04                         .db #$D1, #%00000100
0D069 32 C4                         .db #$32, #%11000100
0D06B A2 C4                         .db #$A2, #%11000100
0D06D C2 24                         .db #$C2, #%00100100
0D06F 13 24                         .db #$13, #%00100100
0D071 53 04                         .db #$53, #%00000100
0D073 C3 27                         .db #$C3, #%00100111
0D075 15 6C                         .db #$15, #%01101100
0D077 55 6C                         .db #$55, #%01101100
0D079 95 6C                         .db #$95, #%01101100
0D07B D5 0C                         .db #$D5, #%00001100
0D07D 27 C7                         .db #$27, #%11000111
0D07F 47 C7                         .db #$47, #%11000111
0D081 67 C7                         .db #$67, #%11000111
0D083 87 C7                         .db #$87, #%11000111
0D085 A7 C7                         .db #$A7, #%11000111
0D087 C7 C7                         .db #$C7, #%11000111
0D089 08 13                         .db #$08, #%00010011
0D08B 28 15                         .db #$28, #%00010101
0D08D 48 12                         .db #$48, #%00010010
0D08F 68 15                         .db #$68, #%00010101
0D091 88 11                         .db #$88, #%00010001
0D093 A8 10                         .db #$A8, #%00010000
0D095 C8 14                         .db #$C8, #%00010100
0D097 09 07                         .db #$09, #%00000111
0D099 19 03                         .db #$19, #%00000011
0D09B 39 05                         .db #$39, #%00000101
0D09D 59 02                         .db #$59, #%00000010
0D09F 79 05                         .db #$79, #%00000101
0D0A1 99 01                         .db #$99, #%00000001
0D0A3 B9 00                         .db #$B9, #%00000000
0D0A5 D9 04                         .db #$D9, #%00000100
0D0A7 FF                            .db #LEVEL_END
0D0A8                           
0D0A8                           lvl_layout_10:
0D0A8 00 02                         .db #$00, #%00000010
0D0AA 10 C9                         .db #$10, #%11001001
0D0AC 50 C9                         .db #$50, #%11001001
0D0AE 90 C9                         .db #$90, #%11001001
0D0B0 D0 C9                         .db #$D0, #%11001001
0D0B2 31 C9                         .db #$31, #%11001001
0D0B4 71 C9                         .db #$71, #%11001001
0D0B6 B1 C9                         .db #$B1, #%11001001
0D0B8 13 C9                         .db #$13, #%11001001
0D0BA 53 C9                         .db #$53, #%11001001
0D0BC 93 C9                         .db #$93, #%11001001
0D0BE D3 C9                         .db #$D3, #%11001001
0D0C0 34 C9                         .db #$34, #%11001001
0D0C2 74 C9                         .db #$74, #%11001001
0D0C4 B4 C9                         .db #$B4, #%11001001
0D0C6 16 C9                         .db #$16, #%11001001
0D0C8 56 C9                         .db #$56, #%11001001
0D0CA 96 C9                         .db #$96, #%11001001
0D0CC D6 C9                         .db #$D6, #%11001001
0D0CE 37 C9                         .db #$37, #%11001001
0D0D0 77 C9                         .db #$77, #%11001001
0D0D2 B7 C9                         .db #$B7, #%11001001
0D0D4 D8 12                         .db #$D8, #%00010010
0D0D6 FF                            .db #LEVEL_END
0D0D7                           
0D0D7                           lvl_layout_11:
0D0D7 00 65                         .db #$00, #%01100101
0D0D9 40 45                         .db #$40, #%01000101
0D0DB 50 A7                         .db #$50, #%10100111
0D0DD 80 05                         .db #$80, #%00000101
0D0DF 90 A7                         .db #$90, #%10100111
0D0E1 A0 65                         .db #$A0, #%01100101
0D0E3 01 43                         .db #$01, #%01000011
0D0E5 31 23                         .db #$31, #%00100011
0D0E7 61 A7                         .db #$61, #%10100111
0D0E9 81 A7                         .db #$81, #%10100111
0D0EB A1 63                         .db #$A1, #%01100011
0D0ED 02 44                         .db #$02, #%01000100
0D0EF 32 44                         .db #$32, #%01000100
0D0F1 92 04                         .db #$92, #%00000100
0D0F3 A2 64                         .db #$A2, #%01100100
0D0F5 03 40                         .db #$03, #%01000000
0D0F7 33 40                         .db #$33, #%01000000
0D0F9 63 A1                         .db #$63, #%10100001
0D0FB 83 A2                         .db #$83, #%10100010
0D0FD 93 00                         .db #$93, #%00000000
0D0FF A3 60                         .db #$A3, #%01100000
0D101 04 41                         .db #$04, #%01000001
0D103 34 41                         .db #$34, #%01000001
0D105 94 02                         .db #$94, #%00000010
0D107 A4 62                         .db #$A4, #%01100010
0D109 05 47                         .db #$05, #%01000111
0D10B 35 67                         .db #$35, #%01100111
0D10D 75 0A                         .db #$75, #%00001010
0D10F 85 47                         .db #$85, #%01000111
0D111 B5 47                         .db #$B5, #%01000111
0D113 06 E7                         .db #$06, #%11100111
0D115 16 5A                         .db #$16, #%01011010
0D117 26 11                         .db #$26, #%00010001
0D119 46 13                         .db #$46, #%00010011
0D11B 56 1A                         .db #$56, #%00011010
0D11D 66 14                         .db #$66, #%00010100
0D11F 86 10                         .db #$86, #%00010000
0D121 96 5A                         .db #$96, #%01011010
0D123 A6 12                         .db #$A6, #%00010010
0D125 C6 15                         .db #$C6, #%00010101
0D127 D6 E7                         .db #$D6, #%11100111
0D129 FF                            .db #LEVEL_END
0D12A                           
0D12A                           lvl_layout_12:
0D12A 00 00                         .db #$00, #%00000000
0D12C 50 C0                         .db #$50, #%11000000
0D12E 80 00                         .db #$80, #%00000000
0D130 61 00                         .db #$61, #%00000000
0D132 22 C0                         .db #$22, #%11000000
0D134 82 E0                         .db #$82, #%11100000
0D136 C2 E0                         .db #$C2, #%11100000
0D138 A3 20                         .db #$A3, #%00100000
0D13A C3 10                         .db #$C3, #%00010000
0D13C 04 00                         .db #$04, #%00000000
0D13E 54 20                         .db #$54, #%00100000
0D140 15 0A                         .db #$15, #%00001010
0D142 25 C0                         .db #$25, #%11000000
0D144 55 E0                         .db #$55, #%11100000
0D146 86 20                         .db #$86, #%00100000
0D148 C6 E0                         .db #$C6, #%11100000
0D14A C7 A0                         .db #$C7, #%10100000
0D14C 88 00                         .db #$88, #%00000000
0D14E 59 00                         .db #$59, #%00000000
0D150 89 20                         .db #$89, #%00100000
0D152 D9 1A                         .db #$D9, #%00011010
0D154 FF                            .db #LEVEL_END
0D155                           
0D155                           lvl_layout_13:
0D155 10 E0                         .db #$10, #%11100000
0D157 20 E0                         .db #$20, #%11100000
0D159 30 E0                         .db #$30, #%11100000
0D15B 40 40                         .db #$40, #%01000000
0D15D 80 60                         .db #$80, #%01100000
0D15F C0 E0                         .db #$C0, #%11100000
0D161 D0 E0                         .db #$D0, #%11100000
0D163 41 40                         .db #$41, #%01000000
0D165 71 60                         .db #$71, #%01100000
0D167 52 60                         .db #$52, #%01100000
0D169 A2 20                         .db #$A2, #%00100000
0D16B 43 60                         .db #$43, #%01100000
0D16D 83 60                         .db #$83, #%01100000
0D16F 14 74                         .db #$14, #%01110100
0D171 54 74                         .db #$54, #%01110100
0D173 94 74                         .db #$94, #%01110100
0D175 D4 14                         .db #$D4, #%00010100
0D177 15 0D                         .db #$15, #%00001101
0D179 55 0D                         .db #$55, #%00001101
0D17B 95 0D                         .db #$95, #%00001101
0D17D D5 0D                         .db #$D5, #%00001101
0D17F 26 0D                         .db #$26, #%00001101
0D181 46 0D                         .db #$46, #%00001101
0D183 66 0D                         .db #$66, #%00001101
0D185 86 0D                         .db #$86, #%00001101
0D187 A6 0D                         .db #$A6, #%00001101
0D189 C6 0D                         .db #$C6, #%00001101
0D18B 07 10                         .db #$07, #%00010000
0D18D 37 0D                         .db #$37, #%00001101
0D18F 77 0D                         .db #$77, #%00001101
0D191 B7 0D                         .db #$B7, #%00001101
0D193 28 0D                         .db #$28, #%00001101
0D195 48 0D                         .db #$48, #%00001101
0D197 68 0D                         .db #$68, #%00001101
0D199 88 0D                         .db #$88, #%00001101
0D19B A8 0D                         .db #$A8, #%00001101
0D19D C8 0D                         .db #$C8, #%00001101
0D19F 19 0D                         .db #$19, #%00001101
0D1A1 59 0D                         .db #$59, #%00001101
0D1A3 99 0D                         .db #$99, #%00001101
0D1A5 D9 0D                         .db #$D9, #%00001101
0D1A7 FF                            .db #LEVEL_END
0D1A8                           
0D1A8                           lvl_layout_14:
0D1A8 00 67                         .db #$00, #%01100111
0D1AA 40 67                         .db #$40, #%01100111
0D1AC 80 67                         .db #$80, #%01100111
0D1AE C0 27                         .db #$C0, #%00100111
0D1B0 01 27                         .db #$01, #%00100111
0D1B2 31 C7                         .db #$31, #%11000111
0D1B4 51 C7                         .db #$51, #%11000111
0D1B6 71 C7                         .db #$71, #%11000111
0D1B8 91 C7                         .db #$91, #%11000111
0D1BA B1 C7                         .db #$B1, #%11000111
0D1BC D1 07                         .db #$D1, #%00000111
0D1BE 02 E7                         .db #$02, #%11100111
0D1C0 06 E7                         .db #$06, #%11100111
0D1C2 13 07                         .db #$13, #%00000111
0D1C4 D3 07                         .db #$D3, #%00000111
0D1C6 15 07                         .db #$15, #%00000111
0D1C8 35 07                         .db #$35, #%00000111
0D1CA 55 07                         .db #$55, #%00000111
0D1CC 75 07                         .db #$75, #%00000111
0D1CE 95 07                         .db #$95, #%00000111
0D1D0 B5 07                         .db #$B5, #%00000111
0D1D2 D5 07                         .db #$D5, #%00000111
0D1D4 17 07                         .db #$17, #%00000111
0D1D6 37 C7                         .db #$37, #%11000111
0D1D8 57 C7                         .db #$57, #%11000111
0D1DA 77 C7                         .db #$77, #%11000111
0D1DC 97 C7                         .db #$97, #%11000111
0D1DE B7 C7                         .db #$B7, #%11000111
0D1E0 D7 07                         .db #$D7, #%00000111
0D1E2 19 07                         .db #$19, #%00000111
0D1E4 D9 07                         .db #$D9, #%00000111
0D1E6 22 4C                         .db #$22, #%01001100
0D1E8 62 4C                         .db #$62, #%01001100
0D1EA A2 4C                         .db #$A2, #%01001100
0D1EC 24 0C                         .db #$24, #%00001100
0D1EE 44 0C                         .db #$44, #%00001100
0D1F0 64 0C                         .db #$64, #%00001100
0D1F2 84 0C                         .db #$84, #%00001100
0D1F4 A4 0C                         .db #$A4, #%00001100
0D1F6 C4 0C                         .db #$C4, #%00001100
0D1F8 26 0C                         .db #$26, #%00001100
0D1FA 46 0C                         .db #$46, #%00001100
0D1FC 66 0C                         .db #$66, #%00001100
0D1FE 86 0C                         .db #$86, #%00001100
0D200 A6 0C                         .db #$A6, #%00001100
0D202 C6 0C                         .db #$C6, #%00001100
0D204 28 4C                         .db #$28, #%01001100
0D206 68 4C                         .db #$68, #%01001100
0D208 A8 4C                         .db #$A8, #%01001100
0D20A 32 04                         .db #$32, #%00000100
0D20C 52 04                         .db #$52, #%00000100
0D20E 72 04                         .db #$72, #%00000100
0D210 92 04                         .db #$92, #%00000100
0D212 B2 04                         .db #$B2, #%00000100
0D214 38 04                         .db #$38, #%00000100
0D216 58 04                         .db #$58, #%00000100
0D218 78 04                         .db #$78, #%00000100
0D21A 98 04                         .db #$98, #%00000100
0D21C B8 04                         .db #$B8, #%00000100
0D21E FF                            .db #LEVEL_END
0D21F                           
0D21F                           lvl_layout_15:
0D21F 00 7A                         .db #$00, #%01111010
0D221 40 7A                         .db #$40, #%01111010
0D223 80 7A                         .db #$80, #%01111010
0D225 C0 3A                         .db #$C0, #%00111010
0D227 31 04                         .db #$31, #%00000100
0D229 51 04                         .db #$51, #%00000100
0D22B 81 04                         .db #$81, #%00000100
0D22D A1 04                         .db #$A1, #%00000100
0D22F 05 E4                         .db #$05, #%11100100
0D231 15 64                         .db #$15, #%01100100
0D233 55 64                         .db #$55, #%01100100
0D235 95 64                         .db #$95, #%01100100
0D237 D5 E4                         .db #$D5, #%11100100
0D239 26 04                         .db #$26, #%00000100
0D23B 46 44                         .db #$46, #%01000100
0D23D 76 64                         .db #$76, #%01100100
0D23F C6 04                         .db #$C6, #%00000100
0D241 17 04                         .db #$17, #%00000100
0D243 37 64                         .db #$37, #%01100100
0D245 77 44                         .db #$77, #%01000100
0D247 B7 04                         .db #$B7, #%00000100
0D249 18 64                         .db #$18, #%01100100
0D24B 58 64                         .db #$58, #%01100100
0D24D 98 64                         .db #$98, #%01100100
0D24F FF                            .db #LEVEL_END
0D250                           
0D250                           lvl_layout_16:
0D250 10 E1                         .db #$10, #%11100001
0D252 20 9A                         .db #$20, #%10011010
0D254 30 E1                         .db #$30, #%11100001
0D256 40 E1                         .db #$40, #%11100001
0D258 50 E1                         .db #$50, #%11100001
0D25A 60 C1                         .db #$60, #%11000001
0D25C 70 E1                         .db #$70, #%11100001
0D25E 80 E1                         .db #$80, #%11100001
0D260 90 E1                         .db #$90, #%11100001
0D262 A0 61                         .db #$A0, #%01100001
0D264 21 C1                         .db #$21, #%11000001
0D266 A1 1A                         .db #$A1, #%00011010
0D268 B1 41                         .db #$B1, #%01000001
0D26A A2 E1                         .db #$A2, #%11100001
0D26C B2 E1                         .db #$B2, #%11100001
0D26E C2 1A                         .db #$C2, #%00011010
0D270 D2 E1                         .db #$D2, #%11100001
0D272 63 1A                         .db #$63, #%00011010
0D274 C3 C1                         .db #$C3, #%11000001
0D276 14 61                         .db #$14, #%01100001
0D278 54 61                         .db #$54, #%01100001
0D27A 94 C1                         .db #$94, #%11000001
0D27C 15 61                         .db #$15, #%01100001
0D27E 55 41                         .db #$55, #%01000001
0D280 85 1A                         .db #$85, #%00011010
0D282 16 41                         .db #$16, #%01000001
0D284 46 1A                         .db #$46, #%00011010
0D286 56 61                         .db #$56, #%01100001
0D288 A6 61                         .db #$A6, #%01100001
0D28A 17 67                         .db #$17, #%01100111
0D28C 57 67                         .db #$57, #%01100111
0D28E 97 67                         .db #$97, #%01100111
0D290 D7 07                         .db #$D7, #%00000111
0D292 28 41                         .db #$28, #%01000001
0D294 58 61                         .db #$58, #%01100001
0D296 A8 41                         .db #$A8, #%01000001
0D298 18 11                         .db #$18, #%00010001
0D29A 38 11                         .db #$38, #%00010001
0D29C 98 11                         .db #$98, #%00010001
0D29E B8 11                         .db #$B8, #%00010001
0D2A0 D8 11                         .db #$D8, #%00010001
0D2A2 59 09                         .db #$59, #%00001001
0D2A4 FF                            .db #LEVEL_END
0D2A5                           
0D2A5                           lvl_layout_17:
0D2A5 10 EA                         .db #$10, #%11101010
0D2A7 20 E2                         .db #$20, #%11100010
0D2A9 30 62                         .db #$30, #%01100010
0D2AB 70 02                         .db #$70, #%00000010
0D2AD 80 6A                         .db #$80, #%01101010
0D2AF 90 22                         .db #$90, #%00100010
0D2B1 01 AA                         .db #$01, #%10101010
0D2B3 31 6A                         .db #$31, #%01101010
0D2B5 81 2A                         .db #$81, #%00101010
0D2B7 A1 02                         .db #$A1, #%00000010
0D2B9 C1 02                         .db #$C1, #%00000010
0D2BB D1 0A                         .db #$D1, #%00001010
0D2BD 32 EA                         .db #$32, #%11101010
0D2BF 42 6A                         .db #$42, #%01101010
0D2C1 62 02                         .db #$62, #%00000010
0D2C3 92 6A                         .db #$92, #%01101010
0D2C5 D2 E2                         .db #$D2, #%11100010
0D2C7 43 1A                         .db #$43, #%00011010
0D2C9 53 CA                         .db #$53, #%11001010
0D2CB 73 02                         .db #$73, #%00000010
0D2CD 83 4A                         .db #$83, #%01001010
0D2CF B3 CA                         .db #$B3, #%11001010
0D2D1 C3 EA                         .db #$C3, #%11101010
0D2D3 04 0A                         .db #$04, #%00001010
0D2D5 14 A2                         .db #$14, #%10100010
0D2D7 24 AA                         .db #$24, #%10101010
0D2D9 44 AA                         .db #$44, #%10101010
0D2DB 64 6A                         .db #$64, #%01101010
0D2DD 65 6A                         .db #$65, #%01101010
0D2DF A5 AA                         .db #$A5, #%10101010
0D2E1 06 EA                         .db #$06, #%11101010
0D2E3 16 62                         .db #$16, #%01100010
0D2E5 66 22                         .db #$66, #%00100010
0D2E7 86 2A                         .db #$86, #%00101010
0D2E9 17 42                         .db #$17, #%01000010
0D2EB 47 12                         .db #$47, #%00010010
0D2ED 57 6A                         .db #$57, #%01101010
0D2EF 97 4A                         .db #$97, #%01001010
0D2F1 A7 02                         .db #$A7, #%00000010
0D2F3 18 02                         .db #$18, #%00000010
0D2F5 28 0A                         .db #$28, #%00001010
0D2F7 38 22                         .db #$38, #%00100010
0D2F9 68 2A                         .db #$68, #%00101010
0D2FB 88 62                         .db #$88, #%01100010
0D2FD C8 0A                         .db #$C8, #%00001010
0D2FF D8 02                         .db #$D8, #%00000010
0D301 19 2A                         .db #$19, #%00101010
0D303 39 2A                         .db #$39, #%00101010
0D305 69 42                         .db #$69, #%01000010
0D307 99 2A                         .db #$99, #%00101010
0D309 B9 42                         .db #$B9, #%01000010
0D30B FF                            .db #LEVEL_END
0D30C                           
0D30C                           lvl_layout_18:
0D30C 00 12                         .db #$00, #%00010010
0D30E 40 1A                         .db #$40, #%00011010
0D310 50 11                         .db #$50, #%00010001
0D312 70 1A                         .db #$70, #%00011010
0D314 80 10                         .db #$80, #%00010000
0D316 D0 13                         .db #$D0, #%00010011
0D318 01 1A                         .db #$01, #%00011010
0D31A 22 15                         .db #$22, #%00010101
0D31C A2 1A                         .db #$A2, #%00011010
0D31E B2 14                         .db #$B2, #%00010100
0D320 03 67                         .db #$03, #%01100111
0D322 43 67                         .db #$43, #%01100111
0D324 83 67                         .db #$83, #%01100111
0D326 24 09                         .db #$24, #%00001001
0D328 74 0D                         .db #$74, #%00001101
0D32A C4 0A                         .db #$C4, #%00001010
0D32C 05 A7                         .db #$05, #%10100111
0D32E 45 27                         .db #$45, #%00100111
0D330 95 27                         .db #$95, #%00100111
0D332 16 C7                         .db #$16, #%11000111
0D334 36 67                         .db #$36, #%01100111
0D336 86 67                         .db #$86, #%01100111
0D338 D6 07                         .db #$D6, #%00000111
0D33A 07 A3                         .db #$07, #%10100011
0D33C 27 23                         .db #$27, #%00100011
0D33E 47 C7                         .db #$47, #%11000111
0D340 57 A0                         .db #$57, #%10100000
0D342 67 A7                         .db #$67, #%10100111
0D344 77 20                         .db #$77, #%00100000
0D346 97 C7                         .db #$97, #%11000111
0D348 A7 A4                         .db #$A7, #%10100100
0D34A B7 A7                         .db #$B7, #%10100111
0D34C C7 24                         .db #$C7, #%00100100
0D34E 28 0B                         .db #$28, #%00001011
0D350 38 A3                         .db #$38, #%10100011
0D352 78 08                         .db #$78, #%00001000
0D354 88 A3                         .db #$88, #%10100011
0D356 C8 0C                         .db #$C8, #%00001100
0D358 D8 A4                         .db #$D8, #%10100100
0D35A 09 43                         .db #$09, #%01000011
0D35C 59 40                         .db #$59, #%01000000
0D35E A9 44                         .db #$A9, #%01000100
0D360 FF                            .db #LEVEL_END
0D361                           
0D361                           lvl_layout_19:
0D361 11 A8                         .db #$11, #%10101000
0D363 21 68                         .db #$21, #%01101000
0D365 81 28                         .db #$81, #%00101000
0D367 B1 48                         .db #$B1, #%01001000
0D369 22 48                         .db #$22, #%01001000
0D36B 62 68                         .db #$62, #%01101000
0D36D B2 28                         .db #$B2, #%00101000
0D36F 23 28                         .db #$23, #%00101000
0D371 83 28                         .db #$83, #%00101000
0D373 B3 28                         .db #$B3, #%00101000
0D375 04 E8                         .db #$04, #%11101000
0D377 24 08                         .db #$24, #%00001000
0D379 44 08                         .db #$44, #%00001000
0D37B 64 E8                         .db #$64, #%11101000
0D37D 84 E8                         .db #$84, #%11101000
0D37F C4 A8                         .db #$C4, #%10101000
0D381 D4 E8                         .db #$D4, #%11101000
0D383 15 48                         .db #$15, #%01001000
0D385 55 C8                         .db #$55, #%11001000
0D387 75 C8                         .db #$75, #%11001000
0D389 A5 08                         .db #$A5, #%00001000
0D38B 36 08                         .db #$36, #%00001000
0D38D B6 08                         .db #$B6, #%00001000
0D38F 27 48                         .db #$27, #%01001000
0D391 97 28                         .db #$97, #%00101000
0D393 C7 08                         .db #$C7, #%00001000
0D395 09 61                         .db #$09, #%01100001
0D397 19 11                         .db #$19, #%00010001
0D399 49 61                         .db #$49, #%01100001
0D39B 89 31                         .db #$89, #%00110001
0D39D A9 61                         .db #$A9, #%01100001
0D39F FF                            .db #LEVEL_END
0D3A0                           
0D3A0                           lvl_layout_20:
0D3A0 00 60                         .db #$00, #%01100000
0D3A2 10 1A                         .db #$10, #%00011010
0D3A4 40 A7                         .db #$40, #%10100111
0D3A6 50 20                         .db #$50, #%00100000
0D3A8 70 1A                         .db #$70, #%00011010
0D3AA 80 40                         .db #$80, #%01000000
0D3AC B0 1A                         .db #$B0, #%00011010
0D3AE C0 20                         .db #$C0, #%00100000
0D3B0 01 40                         .db #$01, #%01000000
0D3B2 31 1A                         .db #$31, #%00011010
0D3B4 A1 40                         .db #$A1, #%01000000
0D3B6 D1 1A                         .db #$D1, #%00011010
0D3B8 43 67                         .db #$43, #%01100111
0D3BA 83 47                         .db #$83, #%01000111
0D3BC 44 A7                         .db #$44, #%10100111
0D3BE 54 25                         .db #$54, #%00100101
0D3C0 94 08                         .db #$94, #%00001000
0D3C2 A4 A7                         .db #$A4, #%10100111
0D3C4 55 05                         .db #$55, #%00000101
0D3C6 65 08                         .db #$65, #%00001000
0D3C8 06 27                         .db #$06, #%00100111
0D3CA 36 67                         .db #$36, #%01100111
0D3CC 76 28                         .db #$76, #%00101000
0D3CE A6 27                         .db #$A6, #%00100111
0D3D0 D6 07                         .db #$D6, #%00000111
0D3D2 A7 A7                         .db #$A7, #%10100111
0D3D4 08 60                         .db #$08, #%01100000
0D3D6 09 60                         .db #$09, #%01100000
0D3D8 18 A7                         .db #$18, #%10100111
0D3DA 48 A7                         .db #$48, #%10100111
0D3DC 58 47                         .db #$58, #%01000111
0D3DE 88 27                         .db #$88, #%00100111
0D3E0 B8 20                         .db #$B8, #%00100000
0D3E2 D8 1A                         .db #$D8, #%00011010
0D3E4 59 15                         .db #$59, #%00010101
0D3E6 69 60                         .db #$69, #%01100000
0D3E8 A9 60                         .db #$A9, #%01100000
0D3EA FF                            .db #LEVEL_END
0D3EB                           
0D3EB                           lvl_layout_21:
0D3EB 00 13                         .db #$00, #%00010011
0D3ED 10 11                         .db #$10, #%00010001
0D3EF 20 67                         .db #$20, #%01100111
0D3F1 60 67                         .db #$60, #%01100111
0D3F3 A0 47                         .db #$A0, #%01000111
0D3F5 D0 15                         .db #$D0, #%00010101
0D3F7 32 63                         .db #$32, #%01100011
0D3F9 72 05                         .db #$72, #%00000101
0D3FB 82 43                         .db #$82, #%01000011
0D3FD B2 43                         .db #$B2, #%01000011
0D3FF 33 03                         .db #$33, #%00000011
0D401 43 2A                         .db #$43, #%00101010
0D403 63 7A                         .db #$63, #%01111010
0D405 73 2A                         .db #$73, #%00101010
0D407 A3 7A                         .db #$A3, #%01111010
0D409 34 63                         .db #$34, #%01100011
0D40B 74 63                         .db #$74, #%01100011
0D40D B4 43                         .db #$B4, #%01000011
0D40F 06 63                         .db #$06, #%01100011
0D411 46 63                         .db #$46, #%01100011
0D413 86 63                         .db #$86, #%01100011
0D415 C6 C3                         .db #$C6, #%11000011
0D417 07 7A                         .db #$07, #%01111010
0D419 47 7A                         .db #$47, #%01111010
0D41B 67 0A                         .db #$67, #%00001010
0D41D 87 7A                         .db #$87, #%01111010
0D41F 08 13                         .db #$08, #%00010011
0D421 18 43                         .db #$18, #%01000011
0D423 48 63                         .db #$48, #%01100011
0D425 88 63                         .db #$88, #%01100011
0D427 FF                            .db #LEVEL_END
0D428                           
0D428                           lvl_layout_22:
0D428 00 7A                         .db #$00, #%01111010
0D42A 40 7A                         .db #$40, #%01111010
0D42C 80 7A                         .db #$80, #%01111010
0D42E C0 3A                         .db #$C0, #%00111010
0D430 13 67                         .db #$13, #%01100111
0D432 83 A7                         .db #$83, #%10100111
0D434 B3 07                         .db #$B3, #%00000111
0D436 14 07                         .db #$14, #%00000111
0D438 44 07                         .db #$44, #%00000111
0D43A A4 07                         .db #$A4, #%00000111
0D43C 15 A5                         .db #$15, #%10100101
0D43E 45 A5                         .db #$45, #%10100101
0D440 85 25                         .db #$85, #%00100101
0D442 86 05                         .db #$86, #%00000101
0D444 A6 05                         .db #$A6, #%00000101
0D446 17 11                         .db #$17, #%00010001
0D448 47 A1                         .db #$47, #%10100001
0D44A 87 A1                         .db #$87, #%10100001
0D44C B7 A1                         .db #$B7, #%10100001
0D44E 18 41                         .db #$18, #%01000001
0D450 68 01                         .db #$68, #%00000001
0D452 D8 01                         .db #$D8, #%00000001
0D454 FF                            .db #LEVEL_END
0D455                           
0D455                           lvl_layout_23:
0D455 00 71                         .db #$00, #%01110001
0D457 40 11                         .db #$40, #%00010001
0D459 50 43                         .db #$50, #%01000011
0D45B 80 D1                         .db #$80, #%11010001
0D45D 90 E3                         .db #$90, #%11100011
0D45F A0 63                         .db #$A0, #%01100011
0D461 01 63                         .db #$01, #%01100011
0D463 41 63                         .db #$41, #%01100011
0D465 A1 63                         .db #$A1, #%01100011
0D467 02 63                         .db #$02, #%01100011
0D469 42 63                         .db #$42, #%01100011
0D46B 62 11                         .db #$62, #%00010001
0D46D A2 67                         .db #$A2, #%01100111
0D46F 04 63                         .db #$04, #%01100011
0D471 44 23                         .db #$44, #%00100011
0D473 64 D1                         .db #$64, #%11010001
0D475 74 E3                         .db #$74, #%11100011
0D477 84 F1                         .db #$84, #%11110001
0D479 94 E3                         .db #$94, #%11100011
0D47B A4 C7                         .db #$A4, #%11000111
0D47D B4 23                         .db #$B4, #%00100011
0D47F 05 63                         .db #$05, #%01100011
0D481 45 23                         .db #$45, #%00100011
0D483 06 71                         .db #$06, #%01110001
0D485 46 11                         .db #$46, #%00010001
0D487 56 E3                         .db #$56, #%11100011
0D489 D6 07                         .db #$D6, #%00000111
0D48B 17 D1                         .db #$17, #%11010001
0D48D 27 43                         .db #$27, #%01000011
0D48F 67 D1                         .db #$67, #%11010001
0D491 A7 C7                         .db #$A7, #%11000111
0D493 C7 A7                         .db #$C7, #%10100111
0D495 D7 B3                         .db #$D7, #%10110011
0D497 28 43                         .db #$28, #%01000011
0D499 78 43                         .db #$78, #%01000011
0D49B 29 43                         .db #$29, #%01000011
0D49D 79 43                         .db #$79, #%01000011
0D49F FF                           .db #LEVEL_END
0D4A0                           
0D4A0                           lvl_layout_24:
0D4A0 02 67                         .db #$02, #%01100111
0D4A2 42 67                         .db #$42, #%01100111
0D4A4 82 67                         .db #$82, #%01100111
0D4A6 05 67                         .db #$05, #%01100111
0D4A8 45 67                         .db #$45, #%01100111
0D4AA 85 67                         .db #$85, #%01100111
0D4AC 08 67                         .db #$08, #%01100111
0D4AE 48 67                         .db #$48, #%01100111
0D4B0 88 67                         .db #$88, #%01100111
0D4B2 30 E7                         .db #$30, #%11100111
0D4B4 70 E7                         .db #$70, #%11100111
0D4B6 B0 E7                         .db #$B0, #%11100111
0D4B8 34 E7                         .db #$34, #%11100111
0D4BA 74 E7                         .db #$74, #%11100111
0D4BC B4 E7                         .db #$B4, #%11100111
0D4BE 20 13                         .db #$20, #%00010011
0D4C0 40 10                         .db #$40, #%00010000
0D4C2 80 02                         .db #$80, #%00000010
0D4C4 41 05                         .db #$41, #%00000101
0D4C6 B1 09                         .db #$B1, #%00001001
0D4C8 02 09                         .db #$02, #%00001001
0D4CA 52 0C                         .db #$52, #%00001100
0D4CC 13 11                         .db #$13, #%00010001
0D4CE 33 04                         .db #$33, #%00000100
0D4D0 74 0C                         .db #$74, #%00001100
0D4D2 B4 08                         .db #$B4, #%00001000
0D4D4 15 09                         .db #$15, #%00001001
0D4D6 55 0C                         .db #$55, #%00001100
0D4D8 95 0C                         .db #$95, #%00001100
0D4DA 47 03                         .db #$47, #%00000011
0D4DC A7 12                         .db #$A7, #%00010010
0D4DE 18 15                         .db #$18, #%00010101
0D4E0 09 05                         .db #$09, #%00000101
0D4E2 19 03                         .db #$19, #%00000011
0D4E4 FF                            .db #LEVEL_END
0D4E5                           
0D4E5                           lvl_layout_25:
0D4E5 00 12                         .db #$00, #%00010010
0D4E7 10 63                         .db #$10, #%01100011
0D4E9 60 63                         .db #$60, #%01100011
0D4EB A0 07                         .db #$A0, #%00000111
0D4ED 01 11                         .db #$01, #%00010001
0D4EF A1 02                         .db #$A1, #%00000010
0D4F1 02 67                         .db #$02, #%01100111
0D4F3 42 07                         .db #$42, #%00000111
0D4F5 62 67                         .db #$62, #%01100111
0D4F7 A2 C7                         .db #$A2, #%11000111
0D4F9 03 61                         .db #$03, #%01100001
0D4FB 43 01                         .db #$43, #%00000001
0D4FD 63 61                         .db #$63, #%01100001
0D4FF A6 E7                         .db #$A6, #%11100111
0D501 B6 47                         .db #$B6, #%01000111
0D503 C6 01                         .db #$C6, #%00000001
0D505 B7 42                         .db #$B7, #%01000010
0D507 B8 42                         .db #$B8, #%01000010
0D509 C8 0A                         .db #$C8, #%00001010
0D50B 09 7A                         .db #$09, #%01111010
0D50D 49 7A                         .db #$49, #%01111010
0D50F 89 3A                         .db #$89, #%00111010
0D511 B9 42                         .db #$B9, #%01000010
0D513 FF                            .db #LEVEL_END
0D514                           
0D514                           ;; Level layout address pointers
0D514                           tbl_lvl_layout_hi:
0D514 CE CE CE CE CF                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D519 CF CF D0 D0 D0                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D51E D0 D1 D1 D1 D2                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D523 D2 D2 D3 D3 D3                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D528 D3 D4 D4 D4 D4                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D52D                           
0D52D                           tbl_lvl_layout_lo:
0D52D 35 50 85 B8 29                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D532 64 ED 2E 65 A8                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D537 D7 2A 55 A8 1F                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D53C 50 A5 0C 61 A0                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D541 EB 28 55 A0 E5                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D546                           
0D546                           ;; Ball start position (#$YX)
0D546                           tbl_lvl_ball_startpos:
0D546 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D54B 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D550 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D555 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D55A 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D55F                               
0D55F                           ;; Ball start direction, color and tile score
0D55F                           ;; #% ccc v tttt
0D55F                           ;;    ||| | ++++-- tile score
0D55F                           ;;    ||| +------- vertical direction, up (0) or down
0D55F                           ;;    +++--------- color (CBRYGM)
0D55F                           tbl_lvl_ball_init:
0D55F 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D564 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D569 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D56E 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D573 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D578                           
0D578                           
0D578                           
0D578                           ;; Helper table to multiply values by 16
0D578                           tbl_Times16:
0D578 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D580 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D588                               
0D588                           
0D588                           ;; Helper table to multiply values by 64
0D588                           tbl_Times64:
0D588 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D58C                           
0D58C                           
0D58C                           ;; Metatile ID to CHR data mapper
0D58C                           tbl_GametileTopLeft:
0D58C 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D596                           
0D596                           tbl_GametileTopRight:
0D596 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D5A0                           
0D5A0                           tbl_GametileBottomLeft:
0D5A0 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D5AA                           
0D5AA                           tbl_GametileBottomRight:
0D5AA 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D5B4                           
0D5B4                           ;; Metatile ID to RAM byte data mapper
0D5B4                           tbl_GameTileRamByte:
0D5B4 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D5B9                           
0D5B9                           ;; HUD text data
0D5B9                           tbl_HudText:
0D5B9 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D5C1 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D5C8 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D5D0 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D5D5                           
0D5D5                           ;; NMI handler
0D5D5                           NMI:
0D5D5                               .include "interrupt/nmi.asm"
0D5D5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D5D5                           ;;
0D5D5                           ;; include/nmi.asm
0D5D5                           ;;
0D5D5                           ;; Non-maskable interrupt script. This script is being executed
0D5D5                           ;; when vBlank hits.
0D5D5                           ;;
0D5D5                           ;;
0D5D5                           
0D5D5                               ;; Preserve accumulator through stack
0D5D5 48                            PHA
0D5D6                           
0D5D6                               ;; Should NMI be skipped?
0D5D6 A5 13                         LDA skip_nmi
0D5D8 F0 03                         BEQ +
0D5DA 4C 13 D7                          JMP +skip_nmi
0D5DD                               +
0D5DD                           
0D5DD                               ;; When in NMI, skip additional NMI requests
0D5DD A9 01                         LDA #$01
0D5DF 85 13                         STA skip_nmi
0D5E1                           
0D5E1                               ;; Preserve X, Y, and PC through stack
0D5E1 8A                            TXA
0D5E2 48                            PHA
0D5E3 98                            TYA
0D5E4 48                            PHA
0D5E5 08                            PHP
0D5E6                               
0D5E6                               ;; Check forced NMI skip
0D5E6 A5 14                         LDA force_skip_nmi
0D5E8 F0 03                         BEQ +
0D5EA 4C 02 D7                          JMP +force_skip_nmi
0D5ED                               +
0D5ED                           
0D5ED                               ;; Update PPU mask
0D5ED                               ;LDA #$00
0D5ED                               ;STA PPU_CTRL
0D5ED A5 12                         LDA soft_ppu_mask
0D5EF 8D 01 20                      STA PPU_MASK
0D5F2                               
0D5F2                               
0D5F2                               ;; Additional PPU updates go here
0D5F2                               .include "game/interrupt/nmi.asm"
0D5F2                           
0D5F2                               ;; Check if ppu_buffer needs updating
0D5F2 A5 38                         LDA ppu_buffer_update
0D5F4 D0 03                         BNE +
0D5F6 4C 38 D6                          JMP +no_ppu_buffer_update
0D5F9                               +
0D5F9                           
0D5F9                               ;; Reset ppu control register and mask
0D5F9 A2 00                         LDX #$00
0D5FB 8E 00 20                      STX PPU_CTRL
0D5FE 8E 01 20                      STX PPU_MASK
0D601                           
0D601                               ;; Set up loop
0D601                               -
0D601                                   ;; Reset hi/lo latch
0D601 2C 02 20                          BIT PPU_STATUS
0D604                           
0D604                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D604 BD 00 03                          LDA ppu_buffer,x
0D607 8D 06 20                          STA PPU_ADDR
0D60A E8                                INX
0D60B BD 00 03                          LDA ppu_buffer,x
0D60E 8D 06 20                          STA PPU_ADDR
0D611                           
0D611                                   ;; Write ppu_buffer data to PPU_ADDR
0D611 E8                                INX
0D612 BD 00 03                          LDA ppu_buffer,x
0D615 8D 07 20                          STA PPU_DATA
0D618                           
0D618                                   ;; Check if updating is done (eg. X is at pointer)
0D618 E8                                INX
0D619 E4 39                             CPX ppu_buffer_pointer
0D61B F0 03                             BEQ +
0D61D 4C 01 D6                      JMP -
0D620                           +
0D620                           
0D620                               ;; Reset ppu buffer update and pointer
0D620 A9 00                         LDA #$00
0D622 85 38                         STA ppu_buffer_update
0D624 85 39                         STA ppu_buffer_pointer
0D626                               
0D626                               ;; Reset scrolling position
0D626 8D 05 20                      STA PPU_SCROLL
0D629 8D 05 20                      STA PPU_SCROLL
0D62C                           
0D62C                               ;; Restore ppu control register and mask
0D62C A9 90                         LDA #%10010000
0D62E 8D 00 20                      STA PPU_CTRL
0D631 A5 12                         LDA soft_ppu_mask
0D633 8D 01 20                      STA PPU_MASK
0D636 A9 00                         LDA #$00
0D638                           
0D638                           ;; Continue other NMI stuff
0D638                           +no_ppu_buffer_update:
0D638                           
0D638                               ;; Reset sprite RAM, draw sprites
0D638 8D 03 20                      STA OAM_ADDR
0D63B A9 02                         LDA #$02
0D63D 8D 14 40                      STA OAM_DMA
0D640                           
0D640                               ;; Decrease explosion frame counters
0D640 A0 04                         LDY #MAX_ANIMATIONS
0D642 A2 00                         LDX #$00
0D644                               -
0D644 BD 60 03                          LDA explosion_framecounter,x
0D647 F0 03                             BEQ +
0D649 DE 60 03                              DEC explosion_framecounter,x
0D64C                                   +
0D64C E8                                INX
0D64D 88                                DEY
0D64E F0 03                             BEQ +done        
0D650 4C 44 D6                      JMP -
0D653                           +done:
0D653                           
0D653                               ;; Decrease nudge counter
0D653 A5 3C                         LDA nudge_counter
0D655 F0 02                         BEQ +
0D657 C6 3C                             DEC nudge_counter
0D659                               +
0D659                           
0D659                               ;; Decrease bonus counter
0D659 A5 3D                         LDA bonus_counter
0D65B F0 02                         BEQ +
0D65D C6 3D                             DEC bonus_counter
0D65F                               +
0D65F                           
0D65F                               ;; Decrease kill counter
0D65F A5 3E                         LDA kill_counter
0D661 F0 02                         BEQ +
0D663 C6 3E                             DEC kill_counter
0D665                               +
0D665                           
0D665                               ;; Play background noise
0D665 A5 37                         LDA screen_mode
0D667 29 01                         AND #IS_GAME_SCREEN
0D669 F0 21                         BEQ +
0D66B                                   .include "game/include/main/background_sound.asm"
0D66B                               ;; At random times, set max_noise period to $03-$0A
0D66B A5 42                         LDA max_noise
0D66D D0 1D                         BNE +
0D66F 20 4F C4                          JSR sub_GetRandomNumber
0D672 29 EF                             AND #%11101111
0D674 D0 16                             BNE +
0D676                                   
0D676 A5 15                             LDA frame_counter
0D678 85 16                             STA random_seed
0D67A 20 4F C4                          JSR sub_GetRandomNumber
0D67D 29 07                             AND #$07
0D67F 69 03                             ADC #$03
0D681 85 42                             STA max_noise
0D683 A9 01                             LDA #$01
0D685 85 43                             STA sweep_noise
0D687 A9 34                             LDA #$34
0D689 8D 0C 40                          STA NOISE_VOLUME
0D68C                           
0D68C                               +
0D68C                           
0D68C                               ;; if sweep noise = $00: constant noise
0D68C                               ;; else if sweep noise > $80: decrease pitch
0D68C                               ;; else: increase pitch
0D68C A5 43                         LDA sweep_noise
0D68E F0 18                         BEQ +constantNoise
0D690 30 2A                         BMI +decreaseNoise
0D692                           
0D692                           ;; Sweep noise up to max noise pitch
0D692                           +increaseNoise:
0D692 C6 44                         DEC current_noise
0D694 A5 44                         LDA current_noise
0D696 8D 0E 40                      STA NOISE_PERIOD
0D699 C5 42                         CMP max_noise
0D69B D0 08                         BNE +
0D69D A9 00                             LDA #$00
0D69F 85 43                             STA sweep_noise
0D6A1 A9 0A                             LDA #$0A
0D6A3 85 45                             STA noise_counter
0D6A5                               +
0D6A5 4C D0 D6                      JMP +endNoise
0D6A8                           
0D6A8                           ;; Keep noise at constant pitch
0D6A8                           +constantNoise:
0D6A8 A5 42                         LDA max_noise
0D6AA F0 24                         BEQ +endNoise
0D6AC                           
0D6AC A5 45                         LDA noise_counter
0D6AE D0 07                         BNE +
0D6B0 A9 80                             LDA #$80
0D6B2 85 43                             STA sweep_noise
0D6B4 4C D0 D6                          JMP +endNoise
0D6B7                               +
0D6B7 C6 45                         DEC noise_counter
0D6B9 4C D0 D6                      JMP +endNoise
0D6BC                           
0D6BC                           ;; Sweep noise down to initial pitch
0D6BC                           +decreaseNoise:
0D6BC E6 44                         INC current_noise
0D6BE A5 44                         LDA current_noise
0D6C0 8D 0E 40                      STA NOISE_PERIOD
0D6C3 C9 0E                         CMP #$0E
0D6C5 D0 09                         BNE +endNoise
0D6C7                           
0D6C7 20 DF C4                      JSR sub_BackgroundNoise
0D6CA A9 00                         LDA #$00
0D6CC 85 42                         STA max_noise
0D6CE 85 43                         STA sweep_noise
0D6D0                           
0D6D0                           +endNoise:
0D6D0                           
0D6D0                               +
0D6D0                           
0D6D0                               ;; Test: random bleeps
0D6D0                               .include "game/test/random_descending_bleeps.asm"
0D6D0                           ;; Random bleepy noises
0D6D0 A5 46                         LDA do_beeps
0D6D2 F0 2E                         BEQ +continue
0D6D4                               
0D6D4 C9 02                         CMP #$02
0D6D6 D0 12                         BNE +beep
0D6D8                              
0D6D8                           +stopBeep:
0D6D8 A9 00                         LDA #$00
0D6DA 85 46                         STA do_beeps
0D6DC A9 08                         LDA #$08
0D6DE 8D 15 40                      STA APU_STATUS
0D6E1 8D 0F 40                      STA NOISE_LENGTH
0D6E4 20 DF C4                      JSR sub_BackgroundNoise
0D6E7 4C 02 D7                      JMP +continue
0D6EA                               
0D6EA                           +beep:
0D6EA A9 01                         LDA #$01
0D6EC 8D 15 40                      STA APU_STATUS
0D6EF A9 B8                         LDA #$B8
0D6F1 8D 00 40                      STA PULSE1_VOLUME
0D6F4 20 4F C4                      JSR sub_GetRandomNumber
0D6F7 8D 02 40                      STA PULSE1_TIMER_LO
0D6FA 20 4F C4                      JSR sub_GetRandomNumber
0D6FD 29 01                         AND #$01
0D6FF 8D 03 40                      STA PULSE1_TIMER_HI
0D702                           
0D702                           +continue:0D702                               
0D702                           
0D702                           
0D702                           ;; This is what happens when we forced nmi skip
0D702                           +force_skip_nmi:
0D702                           
0D702                               ;; Increase frame counters
0D702 E6 15                         INC frame_counter
0D704                           
0D704                               ;; reset ball_update_position
0D704 A9 00                         LDA #$00
0D706 85 35                         STA ball_update_position
0D708                           
0D708                               ;; Don't skip next NMI request
0D708 A9 00                         LDA #$00
0D70A 85 13                         STA skip_nmi
0D70C 85 47                         STA check_nmi
0D70E                           
0D70E                               ;; Restore X, Y and PC from stack
0D70E 28                            PLP
0D70F 68                            PLA
0D710 A8                            TAY
0D711 68                            PLA
0D712 AA                            TAX
0D713                           
0D713                           +skip_nmi:
0D713                               ;; Restore accumulator from stack
0D713 68                            PLA
0D714                           
0D714                               ;; Return
0D714 40                            RTI
0D715                           
0D715                           ;; IRQ handler (empty)
0D715                           IRQ:
0D715                               .include "interrupt/irq.asm"
0D715 40                            RTI0D716                           
0D716                           ;; Interrupt vectors
0D716 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA D5 D5                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 15 D7                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
