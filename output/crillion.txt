	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$06
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Counters 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           
00041                           ;; Current level (doubles as level select variable)
00041                           current_level          .dsb 1
00042                           
00042                           ;; Tile type the ball is currently colliding with
00042                           colliding_tile         .dsb 1
00043                           
00043                           ;; Number of blocks left on screen
00043                           blocks_left            .dsb 1
00044                           
00044                           ;; Sound control variables
00044                           max_noise              .dsb 1
00045                           sweep_noise            .dsb 1
00046                           current_noise          .dsb 1
00047                           noise_timer            .dsb 1
00048                           do_beeps               .dsb 1
00049                           
00049                           ;; Additional NMI check for timed PPU fade
00049                           check_nmi              .dsb 1
0004A                               0004A                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 57 C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 57 C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 41                         STA current_level
0C057 85 20                         STA ball_score
0C059 85 21                         STA ball_score+1
0C05B 85 22                         STA ball_score+2
0C05D 85 23                         STA ball_score+3
0C05F 85 24                         STA ball_score+4
0C061 85 25                         STA ball_score+5
0C063                           
0C063                           
0C063                           ;; Main game loop
0C063                           MainGameLoop:
0C063                               .include "game/main.asm"
0C063                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C063                           ;;
0C063                           ;; game/main.asm
0C063                           ;;
0C063                           ;; The main game loop content.
0C063                           ;;
0C063                           ;;
0C063                           
0C063                               ;; Reset sprite pointer every game loop
0C063 A9 00                         LDA #$00
0C065 85 3D                         STA sprite_ram_pointer
0C067                           
0C067                               ;; Store previous buttons
0C067 A5 0F                         LDA buttons_held
0C069 85 0E                         STA buttons_prev
0C06B                           
0C06B                               ;; Read controller input
0C06B 20 3A C5                      JSR sub_ReadController
0C06E                           
0C06E                               ;; Get buttons released
0C06E A5 0F                         LDA buttons_held
0C070 49 FF                         EOR #$FF
0C072 25 0E                         AND buttons_prev
0C074 85 11                         STA buttons_released
0C076                           
0C076                               ;; Set buttons pressed
0C076 A5 0E                         LDA buttons_prev
0C078 49 FF                         EOR #$FF
0C07A 25 0F                         AND buttons_held
0C07C 85 10                         STA buttons_pressed
0C07E                           
0C07E                               ;; Load screen?
0C07E A5 38                         LDA screen_mode
0C080 29 80                         AND #%10000000
0C082 F0 1E                         BEQ +screenLoaded
0C084                           
0C084                               ;; Get screen type to load
0C084 A5 38                         LDA screen_mode
0C086 29 03                         AND #%00000011
0C088 A8                            TAY
0C089                               
0C089                               ;; Get address to load screen type from
0C089 B9 56 D1                      LDA tbl_LoadScreenLo,y
0C08C 85 0C                         STA pointer
0C08E B9 53 D1                      LDA tbl_LoadScreenHi,y
0C091 85 0D                         STA pointer+1
0C093                           
0C093                               ;; Load screen
0C093 20 DA C6                      JSR sub_DisableRendering
0C096 20 FA C9                      JSR sub_JumpToPointer
0C099 20 EE C6                      JSR sub_EnableRendering
0C09C                               
0C09C                               ;; Don't load screen anymore next loop
0C09C A5 38                         LDA screen_mode
0C09E 29 7F                         AND #%01111111
0C0A0 85 38                         STA screen_mode
0C0A2                               
0C0A2                           
0C0A2                           +screenLoaded:
0C0A2                           
0C0A2                               ;; Check if we're on the game screen
0C0A2 A5 38                         LDA screen_mode
0C0A4 C9 01                         CMP #IS_GAME_SCREEN
0C0A6 F0 03                         BEQ +
0C0A8 4C B1 C3                          JMP +checkNextScreen
0C0AB                               +
0C0AB                           
0C0AB                               ;; Load sprite 0 in place
0C0AB A9 28                         LDA #$28
0C0AD 8D 00 02                      STA ADDR_SPRITERAM
0C0B0 A9 0F                         LDA #$0F
0C0B2 8D 01 02                      STA ADDR_SPRITERAM+1
0C0B5 A9 22                         LDA #$22
0C0B7 8D 02 02                      STA ADDR_SPRITERAM+2
0C0BA A9 F8                         LDA #$F8
0C0BC 8D 03 02                      STA ADDR_SPRITERAM+3
0C0BF A9 04                         LDA #$04
0C0C1 85 3D                         STA sprite_ram_pointer
0C0C3                           
0C0C3                               ;; We're on the game screen
0C0C3                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0C3 A5 35                         LDA sprites_update_position
0C0C5 F0 03                         BEQ +
0C0C7 4C E4 C2                          JMP +skipSpriteMovement
0C0CA                               +
0C0CA                           
0C0CA                               ;; Check if ball is frozen
0C0CA A5 37                         LDA ball_flags
0C0CC 29 04                         AND #BALL_IS_FROZEN
0C0CE F0 03                         BEQ +
0C0D0 4C A3 C2                          JMP +skipBallMovement
0C0D3                               +
0C0D3                           
0C0D3                               ;; Move the ball
0C0D3                               .include "game/include/main/move_ball.asm"
0C0D3                           
0C0D3                               ;; Check if ball goes up or down
0C0D3 A5 37                         LDA ball_flags
0C0D5 29 10                         AND #BALL_MOVES_DOWN
0C0D7 F0 2B                         BEQ +moveBallUp
0C0D9                           
0C0D9                           
0C0D9                           +moveBallDown:
0C0D9                               ;; update the low byte
0C0D9 A5 1A                         LDA ball_ypos_lo
0C0DB 85 1C                         STA ball_ypos_lo_prev
0C0DD 18                            CLC
0C0DE 69 F0                         ADC #BALL_SPEED_LO
0C0E0 85 1A                         STA ball_ypos_lo
0C0E2                           
0C0E2                               ;; update the high byte with carry
0C0E2 A5 19                         LDA ball_ypos_hi
0C0E4 85 1B                         STA ball_ypos_hi_prev
0C0E6 69 01                         ADC #BALL_SPEED_HI
0C0E8 85 19                         STA ball_ypos_hi
0C0EA                               
0C0EA                               ;; Check bottom bound
0C0EA C9 C8                         CMP #BOUND_BOTTOM
0C0EC 90 3C                         BCC +checkHorizontalMovement
0C0EE F0 3A                         BEQ +checkHorizontalMovement
0C0F0                           
0C0F0                           
0C0F0                               ;; Change ball direction to "up"
0C0F0 A9 C8                         LDA #BOUND_BOTTOM
0C0F2 38                            SEC
0C0F3 E9 01                         SBC #$01
0C0F5 85 19                         STA ball_ypos_hi
0C0F7 A9 00                         LDA #$00
0C0F9 85 1A                         STA ball_ypos_lo
0C0FB A5 37                         LDA ball_flags
0C0FD 29 EF                         AND #MOVE_BALL_UP
0C0FF 85 37                         STA ball_flags
0C101 4C 2A C1                      JMP +checkHorizontalMovement
0C104                           
0C104                           
0C104                           +moveBallUp:
0C104                               ;; update the low byte
0C104 A5 1A                         LDA ball_ypos_lo
0C106 85 1C                         STA ball_ypos_lo_prev
0C108 38                            SEC
0C109 E9 F0                         SBC #BALL_SPEED_LO
0C10B 85 1A                         STA ball_ypos_lo
0C10D                           
0C10D                               ;; update the high byte with carry
0C10D A5 19                         LDA ball_ypos_hi
0C10F 85 1B                         STA ball_ypos_hi_prev
0C111 E9 01                         SBC #BALL_SPEED_HI
0C113 85 19                         STA ball_ypos_hi
0C115                               
0C115                               ;; Check top bound
0C115 C9 30                         CMP #BOUND_TOP
0C117 B0 11                         BCS +checkHorizontalMovement
0C119                           
0C119                               ;; Change ball direction to "down"
0C119 A9 30                         LDA #BOUND_TOP
0C11B 18                            CLC
0C11C 69 01                         ADC #$01
0C11E 85 19                         STA ball_ypos_hi
0C120 A9 00                         LDA #$00
0C122 85 1A                         STA ball_ypos_lo
0C124 A5 37                         LDA ball_flags
0C126 09 10                         ORA #MOVE_BALL_DOWN
0C128 85 37                         STA ball_flags
0C12A                           
0C12A                           
0C12A                           +checkHorizontalMovement:
0C12A                           
0C12A                               ;; Check if ball is being nudged
0C12A A5 3E                         LDA nudge_timer
0C12C D0 41                         BNE +doneBallMovement
0C12E                           
0C12E                               ;; Check if left button is held
0C12E A5 0F                         LDA buttons_held
0C130 29 02                         AND #BUTTON_LEFT
0C132 F0 1B                         BEQ +
0C134                                   ;; update the low byte
0C134 A5 18                             LDA ball_xpos_lo
0C136 38                                SEC
0C137 E9 F0                             SBC #BALL_SPEED_LO
0C139 85 18                             STA ball_xpos_lo
0C13B                           
0C13B                                   ;; update the high byte
0C13B A5 17                             LDA ball_xpos_hi
0C13D E9 01                             SBC #BALL_SPEED_HI
0C13F 85 17                             STA ball_xpos_hi
0C141                                   
0C141                                   ;; Check left bound
0C141 C9 10                             CMP #BOUND_LEFT
0C143 B0 2A                             BCS +doneBallMovement
0C145                                   
0C145                                   ;; Set flag to nudge right and set nudge timer
0C145 A5 37                             LDA ball_flags
0C147 09 02                             ORA #NUDGE_BALL_RIGHT
0C149 20 F3 C9                          JSR sub_InitiateNudge
0C14C                           
0C14C 4C 6F C1                          JMP +doneBallMovement        
0C14F                               +
0C14F                           
0C14F                               ;; Check if right button is held
0C14F A5 0F                         LDA buttons_held
0C151 29 01                         AND #BUTTON_RIGHT
0C153 F0 1A                         BEQ +
0C155                                   ;; update the low byte
0C155 A5 18                             LDA ball_xpos_lo
0C157 18                                CLC
0C158 69 F0                             ADC #BALL_SPEED_LO
0C15A 85 18                             STA ball_xpos_lo
0C15C                           
0C15C                                   ;; update the high byte
0C15C A5 17                             LDA ball_xpos_hi
0C15E 69 01                             ADC #BALL_SPEED_HI
0C160 85 17                             STA ball_xpos_hi     
0C162                           
0C162                                  ;; Check right bound
0C162 C9 E8                             CMP #BOUND_RIGHT
0C164 90 09                             BCC +doneBallMovement
0C166 F0 07                             BEQ +doneBallMovement
0C168                                   
0C168                                   ;; Set flag to nudge left and set nudge timer
0C168 A5 37                             LDA ball_flags
0C16A 29 FD                             AND #NUDGE_BALL_LEFT
0C16C 20 F3 C9                          JSR sub_InitiateNudge
0C16F                               +
0C16F                           
0C16F                           
0C16F                           +doneBallMovement:
0C16F                           
0C16F                               ;; Check nudge
0C16F A5 3E                         LDA nudge_timer
0C171 F0 23                         BEQ +doneBallNudging
0C173 A5 37                             LDA ball_flags
0C175 29 02                             AND #NUDGE_BALL_RIGHT
0C177 F0 10                             BEQ +nudgeBallLeft
0C179                                   
0C179                                       ;; update the low byte
0C179 A5 18                                 LDA ball_xpos_lo
0C17B 18                                    CLC
0C17C 69 F0                                 ADC #BALL_SPEED_LO
0C17E 85 18                                 STA ball_xpos_lo
0C180                           
0C180                                       ;; update the high byte
0C180 A5 17                                 LDA ball_xpos_hi
0C182 69 01                                 ADC #BALL_SPEED_HI
0C184 85 17                                 STA ball_xpos_hi  
0C186 4C 96 C1                              JMP +doneBallNudging
0C189                                   +nudgeBallLeft:
0C189                                   
0C189                                   ;; update the low byte
0C189 A5 18                             LDA ball_xpos_lo
0C18B 38                                SEC
0C18C E9 F0                             SBC #BALL_SPEED_LO
0C18E 85 18                             STA ball_xpos_lo
0C190                           
0C190                                   ;; update the high byte
0C190 A5 17                             LDA ball_xpos_hi
0C192 E9 01                             SBC #BALL_SPEED_HI
0C194 85 17                             STA ball_xpos_hi
0C196                               +doneBallNudging:
0C196                           
0C196                               ;; Don't update position again until next frame
0C196                               ;; (moved to after move block routine)
0C196                           
0C196                           +doneBallHandling:0C196                               
0C196                               ;; Do collision detection
0C196                               .include "game/include/main/collision_detection.asm"
0C196                           
0C196                               ;; Get ball's x-left, x-center, x-right position
0C196 A5 17                         LDA ball_xpos_hi
0C198 18                            CLC
0C199 69 F0                         ADC #BALL_LEFT_WGA
0C19B 85 2F                         STA ball_left
0C19D 18                            CLC
0C19E 69 04                         ADC #BALL_HALF_SIZE
0C1A0 85 30                         STA ball_center
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 31                         STA ball_right
0C1A7                           
0C1A7                               ;; Get ball's y-top, y-middle, y-bottom position
0C1A7 A5 19                         LDA ball_ypos_hi
0C1A9 18                            CLC
0C1AA 69 D0                         ADC #BALL_TOP_WGA
0C1AC 85 32                         STA ball_top
0C1AE 18                            CLC
0C1AF 69 04                         ADC #BALL_HALF_SIZE
0C1B1 85 33                         STA ball_middle
0C1B3 18                            CLC
0C1B4 69 04                         ADC #BALL_HALF_SIZE
0C1B6 85 34                         STA ball_bottom
0C1B8                           
0C1B8                           +checkRightCollision:
0C1B8                               ;; Check if ball moves right
0C1B8                               ;; No need to check nudging here as that will never collide with a tile
0C1B8 A5 0F                         LDA buttons_held
0C1BA 29 01                         AND #BUTTON_RIGHT
0C1BC F0 20                         BEQ +checkLeftCollision
0C1BE                           
0C1BE                               ;; Check tile at right position
0C1BE A5 33                         LDA ball_middle
0C1C0 85 00                         STA temp
0C1C2 A5 31                         LDA ball_right
0C1C4 85 01                         STA temp+1
0C1C6 20 C2 C6                      JSR sub_ConvertXYToTileType
0C1C9 29 01                         AND #TILE_IS_SOLID
0C1CB F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1CD                           
0C1CD                               ;; Nudge ball and evaluate tile type
0C1CD A9 01                         LDA #$01
0C1CF 85 36                         STA move_block_space_to_check
0C1D1 A5 37                         LDA ball_flags
0C1D3 29 FD                         AND #NUDGE_BALL_LEFT
0C1D5 20 F3 C9                      JSR sub_InitiateNudge
0C1D8 20 50 C8                      JSR sub_EvaluateTileType
0C1DB 4C 01 C2                      JMP +checkTopCollision
0C1DE                           
0C1DE                           +checkLeftCollision:
0C1DE                               ;; Check if ball moves right
0C1DE                               ;; No need to check nudging here as that will never collide with a tile
0C1DE A5 0F                         LDA buttons_held
0C1E0 29 02                         AND #BUTTON_LEFT
0C1E2 F0 1D                         BEQ +checkTopCollision
0C1E4                           
0C1E4                               ;; Check tile at right position
0C1E4 A5 33                         LDA ball_middle
0C1E6 85 00                         STA temp
0C1E8 A5 2F                         LDA ball_left
0C1EA 85 01                         STA temp+1
0C1EC 20 C2 C6                      JSR sub_ConvertXYToTileType
0C1EF 29 01                         AND #TILE_IS_SOLID
0C1F1 F0 0E                         BEQ +checkTopCollision
0C1F3                           
0C1F3                               ;; Tile is solid; nudge ball and evaluate tile type
0C1F3 A9 FF                         LDA #$FF
0C1F5 85 36                         STA move_block_space_to_check
0C1F7 A5 37                         LDA ball_flags
0C1F9 09 02                         ORA #NUDGE_BALL_RIGHT
0C1FB 20 F3 C9                      JSR sub_InitiateNudge
0C1FE 20 50 C8                      JSR sub_EvaluateTileType
0C201                               
0C201                               
0C201                           +checkTopCollision:
0C201                               ;; Check if ball moves up
0C201 A5 37                         LDA ball_flags
0C203 29 10                         AND #BALL_MOVES_DOWN
0C205 D0 27                         BNE +checkBottomCollision
0C207                           
0C207                               ;; Check tile at top position
0C207 A5 32                         LDA ball_top
0C209 85 00                         STA temp
0C20B A5 30                         LDA ball_center
0C20D 85 01                         STA temp+1
0C20F 20 C2 C6                      JSR sub_ConvertXYToTileType
0C212 29 01                         AND #TILE_IS_SOLID
0C214 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C216                           
0C216                               ;; Tile is solid; move ball down and evaluate tile type
0C216 A5 1C                         LDA ball_ypos_lo_prev
0C218 85 1A                         STA ball_ypos_lo
0C21A A5 1B                         LDA ball_ypos_hi_prev
0C21C 85 19                         STA ball_ypos_hi
0C21E A5 37                         LDA ball_flags
0C220 09 10                         ORA #MOVE_BALL_DOWN
0C222 85 37                         STA ball_flags
0C224                           
0C224 A9 F0                         LDA #$F0 ; which is -16
0C226 85 36                         STA move_block_space_to_check
0C228 20 50 C8                      JSR sub_EvaluateTileType
0C22B 4C 52 C2                      JMP +doneCheckingCollision
0C22E                           
0C22E                           +checkBottomCollision:
0C22E                               ;; No movement check needed: since ball is not moving up, it must move down
0C22E                           
0C22E                               ;; Check tile at bottom position
0C22E A5 34                         LDA ball_bottom
0C230 85 00                         STA temp
0C232 A5 30                         LDA ball_center
0C234 85 01                         STA temp+1
0C236 20 C2 C6                      JSR sub_ConvertXYToTileType
0C239 29 01                         AND #TILE_IS_SOLID
0C23B F0 15                         BEQ +doneCheckingCollision
0C23D                           
0C23D                               ;; Tile is solid; move ball up and evaluate tile type
0C23D A5 1C                         LDA ball_ypos_lo_prev
0C23F 85 1A                         STA ball_ypos_lo
0C241 A5 1B                         LDA ball_ypos_hi_prev
0C243 85 19                         STA ball_ypos_hi
0C245 A5 37                         LDA ball_flags
0C247 29 EF                         AND #MOVE_BALL_UP
0C249 85 37                         STA ball_flags
0C24B                           
0C24B A9 10                         LDA #$10
0C24D 85 36                         STA move_block_space_to_check
0C24F 20 50 C8                      JSR sub_EvaluateTileType
0C252                           
0C252                           +doneCheckingCollision:
0C252                           
0C252                               
0C252                               ;; Update bonus
0C252                               .include "game/include/main/update_bonus.asm"
0C252                           ;; update_bonus.asm
0C252                           
0C252                               ;; If bonus = 000, skip decreasing
0C252 A5 2C                         LDA ball_bonus
0C254 18                            CLC
0C255 65 2D                         ADC ball_bonus+1
0C257 18                            CLC
0C258 65 2E                         ADC ball_bonus+2
0C25A F0 33                         BEQ +done
0C25C                           
0C25C                               ;; Check if bonus timer is done yet
0C25C A5 3F                         LDA bonus_timer
0C25E D0 2F                         BNE +done
0C260                           
0C260                               ;; Bonus timer is done
0C260                               ;; Reset bonus timer
0C260 A9 06                         LDA #BONUS_FRAMES
0C262 85 3F                         STA bonus_timer
0C264                               
0C264                               ;; Subtract one from ball bonus ones
0C264 C6 2E                         DEC ball_bonus+2
0C266                               
0C266                               ;; Check if underflow
0C266 10 0E                         BPL +updateBonusOnScreen
0C268                           
0C268                               ;; If underflow, set 9 and subtract one from bonus tens
0C268 A9 09                         LDA #$09
0C26A 85 2E                         STA ball_bonus+2
0C26C C6 2D                         DEC ball_bonus+1
0C26E                               
0C26E                               ;; Check if underflow
0C26E 10 06                         BPL +updateBonusOnScreen
0C270                           
0C270                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C270 A9 09                         LDA #$09
0C272 85 2D                         STA ball_bonus+1
0C274 C6 2C                         DEC ball_bonus
0C276                           
0C276                               ;;209A 209B 209C
0C276                           +updateBonusOnScreen:
0C276 A9 20                         LDA #$20
0C278 85 00                         STA temp
0C27A A9 9C                         LDA #$9C
0C27C 85 01                         STA temp+1
0C27E A2 02                         LDX #$02
0C280                               
0C280                               -updateNextDigit:
0C280 B5 2C                             LDA ball_bonus,x
0C282 18                                CLC
0C283 69 01                             ADC #$01
0C285 85 02                             STA temp+2
0C287 20 E9 CF                          JSR sub_WriteByteToPPUBuffer
0C28A C6 01                             DEC temp+1
0C28C CA                                DEX
0C28D 10 F1                         BPL -updateNextDigit
0C28F                                   
0C28F                           +done:0C28F                               
0C28F                               ;; Input test for beeps
0C28F                               .include "game/test/input_beeps.asm"
0C28F A5 10                         LDA buttons_pressed
0C291 29 20                         AND #BUTTON_SELECT
0C293 F0 04                         BEQ +
0C295 A9 01                             LDA #$01
0C297 85 48                             STA do_beeps
0C299                               +
0C299                               
0C299 A5 11                         LDA buttons_released
0C29B 29 20                         AND #BUTTON_SELECT
0C29D F0 04                         BEQ +
0C29F A9 02                             LDA #$02
0C2A1 85 48                             STA do_beeps
0C2A3                               +0C2A3                           
0C2A3                           
0C2A3                           +skipBallMovement:
0C2A3                               ;; Move blocks a pixel up/down/left/right
0C2A3                               .include "game/include/main/move_blocks.asm"
0C2A3                           
0C2A3                               ;; Set up block loop
0C2A3 A2 04                         LDX #MAX_ANIMATIONS
0C2A5                           -moveBlocksLoop:
0C2A5 CA                            DEX
0C2A6                           
0C2A6                               ;; Check if block is still moving
0C2A6 BD 80 03                      LDA move_block_timer,x
0C2A9 F0 33                         BEQ +checkNext
0C2AB                               
0C2AB                               ;; Check if block is done moving
0C2AB C9 01                         CMP #$01
0C2AD D0 0B                         BNE +
0C2AF                                   ;; If so, draw a tile and remove the sprite
0C2AF 20 1B C7                          JSR sub_DrawMoveTile
0C2B2 A9 00                             LDA #$00
0C2B4 9D 80 03                          STA move_block_timer,x
0C2B7 4C DE C2                          JMP +checkNext
0C2BA                               +
0C2BA                               
0C2BA                               ;; Check in which direction the block is moving
0C2BA                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2BA BD 88 03                      LDA move_block_flags,x
0C2BD 29 03                         AND #%00000011
0C2BF F0 14                         BEQ +movingDown
0C2C1 C9 01                         CMP #$01
0C2C3 F0 0A                         BEQ +movingUp
0C2C5 C9 02                         CMP #$02
0C2C7 F0 12                         BEQ +movingRight
0C2C9                               
0C2C9                               ;; Move block in correct direction
0C2C9                               +movingLeft:
0C2C9 DE 78 03                      DEC move_block_x,x
0C2CC 4C DE C2                      JMP +checkNext
0C2CF                           
0C2CF                               +movingUp:
0C2CF DE 7C 03                      DEC move_block_y,x
0C2D2 4C DE C2                      JMP +checkNext
0C2D5                           
0C2D5                               +movingDown:
0C2D5 FE 7C 03                      INC move_block_y,x
0C2D8 4C DE C2                      JMP +checkNext
0C2DB                           
0C2DB                               +movingRight:
0C2DB FE 78 03                      INC move_block_x,x
0C2DE                           
0C2DE                               ;; Check next block (if any left)
0C2DE                               +checkNext:
0C2DE E0 00                         CPX #$00
0C2E0 D0 C3                         BNE -moveBlocksLoop
0C2E2                               
0C2E2                               ;; Don't update sprites
0C2E2 E6 35                         INC sprites_update_position
0C2E4                           
0C2E4                           +skipSpriteMovement:
0C2E4                               ;; Testing timed PPU scroll concept
0C2E4                               .include "game/test/timed_ppuscroll_test.asm"
0C2E4                           ;; Timed updates (test)
0C2E4                           
0C2E4                               ;; If B button is pressed
0C2E4 A5 10                         LDA buttons_pressed
0C2E6 29 10                         AND #BUTTON_START
0C2E8 D0 03                         BNE +
0C2EA 4C 17 C3                          JMP +end
0C2ED                               +
0C2ED                           
0C2ED                           lbl_initiate_level_load:
0C2ED                               ;; Disable noise channel
0C2ED A9 00                         LDA #$00
0C2EF 8D 15 40                      STA APU_STATUS
0C2F2 8D 0C 40                      STA NOISE_VOLUME
0C2F5                               
0C2F5 20 C9 C5                      JSR sub_BlindsEffect
0C2F8                               
0C2F8                               ;; Load the next level if ball not dead
0C2F8 A5 37                         LDA ball_flags
0C2FA 29 01                         AND #BALL_IS_DEAD
0C2FC D0 05                         BNE +
0C2FE E6 41                             INC current_level
0C300 4C 09 C3                          JMP +loadLevel
0C303                               +
0C303                               
0C303                               ;; Revive ball
0C303 A5 37                         LDA ball_flags
0C305 29 FE                         AND #REVIVE_BALL
0C307 85 37                         STA ball_flags
0C309                           
0C309                           +loadLevel:
0C309 A5 41                         LDA current_level
0C30B C9 19                         CMP #25
0C30D D0 04                         BNE +
0C30F A9 00                             LDA #$00
0C311 85 41                             STA current_level
0C313                               +
0C313                               
0C313 A9 81                         LDA #LOAD_GAME_SCREEN
0C315 85 38                         STA screen_mode
0C317                           
0C317                           
0C317                           +end:
0C317                           
0C317                               ;; Check if ball is dead
0C317 A5 37                         LDA ball_flags
0C319 29 01                         AND #BALL_IS_DEAD
0C31B F0 03                         BEQ +
0C31D 4C 3F C3                          JMP +ballIsDead
0C320                               +
0C320                               
0C320                               ;; Add ball to sprite buffer
0C320 A6 3D                         LDX sprite_ram_pointer
0C322 A5 19                         LDA ball_ypos_hi
0C324 9D 00 02                      STA ADDR_SPRITERAM,x
0C327 E8                            INX
0C328 A9 01                         LDA #BALL_TILE_CHR
0C32A 9D 00 02                      STA ADDR_SPRITERAM,x
0C32D E8                            INX
0C32E A9 00                         LDA #BALL_ATTR
0C330 9D 00 02                      STA ADDR_SPRITERAM,x
0C333 E8                            INX
0C334 A5 17                         LDA ball_xpos_hi
0C336 9D 00 02                      STA ADDR_SPRITERAM,x
0C339 E8                            INX
0C33A 86 3D                         STX sprite_ram_pointer
0C33C 4C 50 C3                      JMP +drawBlocks
0C33F                           
0C33F                           +ballIsDead:
0C33F                               ;; Check if kill timer has reset
0C33F A5 40                         LDA kill_timer
0C341 F0 03                         BEQ +
0C343 4C 50 C3                          JMP +drawBlocks
0C346                               +
0C346                               
0C346                               ;; Take a live
0C346 C6 1F                         DEC ball_lives
0C348 D0 03                         BNE +
0C34A                                   ;; If no lives left, initiate game over sequence
0C34A 4C B3 C4                          JMP lbl_GameOver
0C34D                               +
0C34D                               
0C34D                               ;; Reload current level
0C34D 4C ED C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C350                           
0C350                           
0C350                           +drawBlocks:
0C350                               ;; Draw moving block(s, if any)
0C350                               .include "game/include/main/draw_blocks.asm"
0C350                           ;; Handle movement of move blocks
0C350                           
0C350                               ;; Set up a loop
0C350 A0 04                         LDY #MAX_ANIMATIONS
0C352                           -drawBlocksLoop:
0C352 88                            DEY
0C353                           
0C353                               ;; If timer is zero, check the next move block
0C353 B9 80 03                      LDA move_block_timer,y
0C356 F0 52                         BEQ +nextMoveBlock
0C358                               
0C358                               ;; Get current sprite pointer
0C358 A6 3D                         LDX sprite_ram_pointer
0C35A                           
0C35A                               ;; Draw the sprites on screen
0C35A B9 7C 03                      LDA move_block_y,y
0C35D 9D 00 02                      STA ADDR_SPRITERAM,x
0C360 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C363 18                            CLC
0C364 69 08                         ADC #$08
0C366 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C369 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C36C E8                            INX
0C36D                           
0C36D A9 52                         LDA #$52 ; Top left chr id
0C36F 9D 00 02                      STA ADDR_SPRITERAM,x
0C372 A9 53                         LDA #$53 ; Top right chr id
0C374 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C377 A9 62                         LDA #$62 ; Bottom left chr id
0C379 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C37C A9 63                         LDA #$63 ; Bottom right chr id
0C37E 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C381 E8                            INX
0C382                           
0C382 A9 00                         LDA #BALL_ATTR
0C384 9D 00 02                      STA ADDR_SPRITERAM,x
0C387 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C38A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C38D 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C390 E8                            INX
0C391                           
0C391 B9 78 03                      LDA move_block_x,y
0C394 9D 00 02                      STA ADDR_SPRITERAM,x
0C397 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C39A 18                            CLC
0C39B 69 08                         ADC #$08
0C39D 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3A0 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3A3                           
0C3A3                               ;; Update sprite RAM pointer
0C3A3 A5 3D                         LDA sprite_ram_pointer
0C3A5 18                            CLC
0C3A6 69 10                         ADC #$10
0C3A8 85 3D                         STA sprite_ram_pointer
0C3AA                           
0C3AA                           
0C3AA                           
0C3AA                           +nextMoveBlock:
0C3AA                               ;; Check the next move block
0C3AA C0 00                         CPY #$00
0C3AC D0 A4                         BNE -drawBlocksLoop
0C3AE                           
0C3AE 4C FD C3                      JMP +doneScreenLoad
0C3B1                           
0C3B1                           
0C3B1                           
0C3B1                           +checkNextScreen:
0C3B1                           
0C3B1                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C3B1                               ;; Upon pressing START, the selected level will start
0C3B1                               .include "game/include/main/select_level.asm"
0C3B1 A5 10                         LDA buttons_pressed
0C3B3 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3B5 F0 3C                         BEQ +checkStartPress
0C3B7                           
0C3B7                                   ;; Select next level (1, 5, 9, 13, 17)
0C3B7 A5 41                             LDA current_level
0C3B9 18                                CLC
0C3BA 69 04                             ADC #$04
0C3BC C9 14                             CMP #$14
0C3BE D0 02                             BNE +
0C3C0 A9 00                                 LDA #$00
0C3C2                                   +
0C3C2 85 41                             STA current_level
0C3C4                                   
0C3C4                                   ;; Convert level number to two-byte value
0C3C4 A9 00                             LDA #$00
0C3C6 85 03                             STA temp+3
0C3C8 A5 41                             LDA current_level
0C3CA 18                                CLC
0C3CB 69 01                             ADC #$01
0C3CD                           
0C3CD                               -
0C3CD C9 0A                             CMP #$0A
0C3CF 90 08                             BCC +
0C3D1 E6 03                                 INC temp+3
0C3D3 38                                    SEC
0C3D4 E9 0A                                 SBC #$0A
0C3D6 4C CD C3                              JMP -
0C3D9                                   +
0C3D9                           
0C3D9                                   ;; Add level number to PPU buffer
0C3D9 18                                CLC
0C3DA 69 01                             ADC #$01
0C3DC 85 02                             STA temp+2
0C3DE A9 20                             LDA #$20
0C3E0 85 00                             STA temp
0C3E2 A9 D0                             LDA #$D0
0C3E4 85 01                             STA temp+1
0C3E6 20 E9 CF                          JSR sub_WriteByteToPPUBuffer
0C3E9                                   
0C3E9 C6 01                             DEC temp+1
0C3EB A4 03                             LDY temp+3
0C3ED C8                                INY
0C3EE 84 02                             STY temp+2
0C3F0 20 E9 CF                          JSR sub_WriteByteToPPUBuffer
0C3F3                                   
0C3F3                               +checkStartPress:
0C3F3                           
0C3F3                           
0C3F3                           
0C3F3                               ;; If START button is pressed
0C3F3 A5 10                         LDA buttons_pressed
0C3F5 29 10                         AND #BUTTON_START
0C3F7 F0 04                         BEQ +
0C3F9                                   ;; Start the level
0C3F9 A9 81                             LDA #LOAD_GAME_SCREEN
0C3FB 85 38                             STA screen_mode
0C3FD                               +
0C3FD                           
0C3FD                           
0C3FD                           
0C3FD                           +doneScreenLoad:
0C3FD                           
0C3FD                               ;; Load animations (if any)
0C3FD                               .include "game/include/main/load_animations.asm"
0C3FD                               ;; Set up loop
0C3FD A2 00                         LDX #$00
0C3FF                               -loop_load_animation:
0C3FF                                   ;; Check if current animation is active. If not, goto next
0C3FF BD 74 03                          LDA explosion_active,x
0C402 D0 03                             BNE +
0C404 4C 9E C4                              JMP +next
0C407                                   +
0C407                           
0C407                                   ;; Check the explosion framecounter
0C407 BD 60 03                          LDA explosion_timer,x
0C40A D0 26                             BNE +
0C40C                                       ;; Frametimer is 0
0C40C                                       ;; Reset to animation speed
0C40C A9 04                                 LDA #ANIMATION_SPEED
0C40E 9D 60 03                              STA explosion_timer,x
0C411                           
0C411                                       ;; Set next animation frame, and check if we're done yet
0C411 FE 64 03                              INC explosion_currentframe,x
0C414 BD 64 03                              LDA explosion_currentframe,x
0C417 C9 0A                                 CMP #ANIM_SLIDES
0C419 D0 17                                 BNE +
0C41B                           
0C41B                                       ;; If we're done, inactivate current explosion, clean
0C41B                                       ;; up sprite RAM and go to the next one
0C41B A9 00                                 LDA #$00
0C41D 9D 74 03                              STA explosion_active,x
0C420                                       
0C420 A9 09                                 LDA #SLIDE_SIZE
0C422 0A                                    ASL
0C423 0A                                    ASL
0C424 A8                                    TAY
0C425 A9 EF                                 LDA #$EF
0C427                                       -
0C427 88                                        DEY
0C428 99 00 02                                  STA ADDR_SPRITERAM,y
0C42B C0 00                                     CPY #00
0C42D D0 F8                                 BNE -
0C42F                                       
0C42F 4C 9E C4                              JMP +next
0C432                                   +
0C432                           
0C432                                   ;; Load (x,y) position in temp variables
0C432 BD 6C 03                          LDA explosion_x,x
0C435 85 01                             STA temp+1
0C437 85 03                             STA temp+3
0C439 BD 70 03                          LDA explosion_y,x
0C43C 85 02                             STA temp+2
0C43E                           
0C43E                                   ;; Load attribute in temp variable
0C43E BD 68 03                          LDA explosion_attributes,x
0C441 85 04                             STA temp+4
0C443                           
0C443                                   ;; Load current frame into Y-register
0C443 BC 64 03                          LDY explosion_currentframe,x
0C446                           
0C446                                   ;; Load current frame ROM address from table
0C446 B9 3D D1                          LDA explosion_anim_lo,y
0C449 85 0C                             STA pointer
0C44B B9 33 D1                          LDA explosion_anim_hi,y
0C44E 85 0D                             STA pointer+1
0C450                           
0C450                                   ;; Save x-register on stack
0C450 8A                                TXA
0C451 48                                PHA
0C452                           
0C452                                   ;; Load sprites into sprite RAM
0C452 A6 3D                             LDX sprite_ram_pointer
0C454 A0 00                             LDY #$00
0C456                           
0C456                                   ;; Prepare (x,y) offset for loop
0C456 84 00                             STY temp
0C458                           
0C458                                   -loop_load_sprite:
0C458                                   
0C458                                       ;; Do not draw empty sprites
0C458 B1 0C                                 LDA (pointer),y
0C45A F0 18                                 BEQ +nextSprite
0C45C                                   
0C45C                                           ;; Add y-position to sprite ram buffer
0C45C A5 02                                     LDA temp+2
0C45E 9D 00 02                                  STA ADDR_SPRITERAM,x
0C461 E8                                        INX
0C462                           
0C462                                           ;; Get tile number from frame ROM address, and
0C462                                           ;; add it to sprite ram buffer
0C462 B1 0C                                     LDA (pointer),y
0C464 9D 00 02                                  STA ADDR_SPRITERAM,x
0C467 E8                                        INX
0C468                           
0C468                                           ;; Add attribute data to sprite ram buffer
0C468 A5 04                                     LDA temp+4
0C46A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C46D E8                                        INX
0C46E                           
0C46E                                           ;; Add x-position to sprite ram buffer
0C46E A5 03                                     LDA temp+3
0C470 9D 00 02                                  STA ADDR_SPRITERAM,x
0C473 E8                                        INX
0C474                           
0C474                                       +nextSprite:
0C474                           
0C474                                       ;; Check if all sprites are done
0C474 C8                                    INY
0C475 C0 09                                 CPY #SLIDE_SIZE
0C477 F0 21                                 BEQ +done
0C479                           
0C479                                       ;; Update x value
0C479 A5 03                                 LDA temp+3
0C47B 18                                    CLC
0C47C 69 08                                 ADC #$08
0C47E 85 03                                 STA temp+3
0C480                           
0C480                                       ;; Update temp for x,y position
0C480 E6 00                                 INC temp
0C482 A5 00                                 LDA temp
0C484 C9 03                                 CMP #SLIDE_WIDTH
0C486 D0 0F                                 BNE +
0C488                                           ;; Row is done; reset x-position
0C488 A5 01                                     LDA temp+1
0C48A 85 03                                     STA temp+3
0C48C                           
0C48C                                           ;; Update y-position
0C48C A5 02                                     LDA temp+2
0C48E 18                                        CLC
0C48F 69 08                                     ADC #$08
0C491 85 02                                     STA temp+2
0C493                           
0C493                                           ;; Reset row timer
0C493 A9 00                                     LDA #$00
0C495 85 00                                     STA temp
0C497                                       +
0C497                           
0C497 4C 58 C4                          JMP -loop_load_sprite
0C49A                           
0C49A                               +done:
0C49A 86 3D                             STX sprite_ram_pointer
0C49C                           
0C49C                                   ;; Retrieve x-register from stack
0C49C 68                                PLA
0C49D AA                                TAX
0C49E                           
0C49E                               +next:
0C49E                                   ;; Check if all animations have been updated
0C49E E8                                INX
0C49F E0 04                             CPX #MAX_ANIMATIONS
0C4A1 F0 03                             BEQ +done
0C4A3                           
0C4A3 4C FF C3                      JMP -loop_load_animation
0C4A6                           +done:
0C4A6                           
0C4A6                               ;; Sprite clean-up
0C4A6 A6 3D                         LDX sprite_ram_pointer
0C4A8 A9 EF                         LDA #$EF
0C4AA                               -
0C4AA 9D 00 02                          STA ADDR_SPRITERAM,x
0C4AD E8                                INX
0C4AE D0 FA                         BNE -
0C4B0 4C 63 C0                      JMP MainGameLoop
0C4B3                           
0C4B3                           ;; Game over sequence is outside main game loop
0C4B3                           .include "game/include/main/game_over.asm"
0C4B3                           lbl_GameOver:
0C4B3                           
0C4B3                               ;; Do blinds effect
0C4B3 20 C9 C5                      JSR sub_BlindsEffect
0C4B6                           
0C4B6                           
0C4B6                               ;; Disable draw after HUD to disable screen
0C4B6 20 4E C5                      JSR sub_WaitForNMI
0C4B9                               -
0C4B9 AD 02 20                          LDA PPU_STATUS
0C4BC 29 40                             AND #SPRITE_0_HIT
0C4BE D0 F9                         BNE -
0C4C0                               -
0C4C0 AD 02 20                          LDA PPU_STATUS
0C4C3 29 40                             AND #SPRITE_0_HIT
0C4C5 F0 F9                         BEQ -
0C4C7 A9 00                         LDA #$00
0C4C9 8D 01 20                      STA PPU_MASK
0C4CC                           
0C4CC                           
0C4CC                               ;; Remove game area from view
0C4CC 2C 02 20                      BIT PPU_STATUS
0C4CF A9 20                         LDA #$20
0C4D1 8D 06 20                      STA PPU_ADDR
0C4D4 A9 A0                         LDA #$A0
0C4D6 8D 06 20                      STA PPU_ADDR
0C4D9 A9 00                         LDA #$00
0C4DB A2 16                         LDX #$16
0C4DD                               -xLoop:
0C4DD A0 20                             LDY #$20
0C4DF                                   -yLoop:
0C4DF 8D 07 20                              STA PPU_DATA
0C4E2 88                                    DEY
0C4E3 D0 FA                             BNE -yLoop
0C4E5 CA                                DEX
0C4E6 D0 F5                         BNE -xLoop
0C4E8 20 4E C5                      JSR sub_WaitForNMI
0C4EB                           
0C4EB                                       
0C4EB                               ;; Do flash effect
0C4EB 20 A6 C9                      JSR sub_FlashEffect
0C4EE                           
0C4EE                           
0C4EE                               ;; Draw GAME OVER tiles over game screen
0C4EE A9 21                         LDA #$21
0C4F0 85 00                         STA temp
0C4F2 A9 EB                         LDA #$EB
0C4F4 85 01                         STA temp+1
0C4F6                           
0C4F6 A2 00                         LDX #$00
0C4F8                               -gameOverTileLoop:
0C4F8 BD 00 D9                          LDA tbl_GameOver,x
0C4FB 85 02                             STA temp+2
0C4FD 20 E9 CF                          JSR sub_WriteByteToPPUBuffer
0C500 E6 01                             INC temp+1
0C502 E8                                INX
0C503 E0 0A                             CPX #$0A
0C505 D0 F1                         BNE -gameOverTileLoop
0C507                               
0C507                               
0C507                               ;; Update GAME OVER attributes on game screen
0C507 A9 23                         LDA #$23
0C509 85 00                         STA temp
0C50B A9 DA                         LDA #$DA
0C50D 85 01                         STA temp+1
0C50F A9 AA                         LDA #$AA
0C511 85 02                         STA temp+2
0C513 A2 04                         LDX #$04
0C515                               -
0C515 20 E9 CF                          JSR sub_WriteByteToPPUBuffer
0C518 E6 01                             INC temp+1
0C51A CA                                DEX
0C51B D0 F8                         BNE -
0C51D 20 4E C5                      JSR sub_WaitForNMI
0C520                               
0C520                               
0C520                               ;; If player score is larger than high score
0C520                               ;; Overwrite high score with player score
0C520                               ;; [@TODO]
0C520                               
0C520                               
0C520                               ;; If player presses either A or START, (soft) reset the game
0C520                               -checkController:
0C520 20 3A C5                          JSR sub_ReadController
0C523 A5 0F                             LDA buttons_held
0C525 29 90                             AND #%10010000
0C527 F0 F7                         BEQ -checkController
0C529 4C 4B C0                      JMP lbl_SoftReset
0C52C                           
0C52C                           ;; Subroutines
0C52C                           .include "include/subroutines.asm"
0C52C                           
0C52C                           ;; RNG
0C52C                           .include "subroutine/GetRandomNumber.asm"
0C52C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C52C                           ;;
0C52C                           ;; subroutine/GetRandomNumber.asm
0C52C                           ;;
0C52C                           ;; Simple and fast random number generator by White Flame.
0C52C                           ;;
0C52C                           ;; Set random_seed to an arbitrary number to randomize between
0C52C                           ;; gaming sessions, for instance using the frame timer upon
0C52C                           ;; pressing START on the intro screen.
0C52C                           ;;
0C52C                           ;;     ;; IF START PRESSED:
0C52C                           ;;     LDA frame_counter
0C52C                           ;;     STA random_seed
0C52C                           ;;
0C52C                           ;; Source:
0C52C                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C52C                           ;;
0C52C                           ;;
0C52C                           
0C52C                           sub_GetRandomNumber:
0C52C                               ;; Force EOR if random_seed is zero
0C52C A5 16                         LDA random_seed
0C52E F0 05                         BEQ +doEor
0C530                           
0C530                               ;; Shift left, and EOR if the high bit is set
0C530 0A                            ASL
0C531 F0 04                         BEQ +noEor
0C533 90 02                         BCC +noEor
0C535                           
0C535                           +doEor:
0C535 49 1D                         EOR #$1D
0C537                           
0C537                           +noEor:
0C537 85 16                         STA random_seed
0C539                           
0C539 60                            RTS
0C53A                           
0C53A                           
0C53A                           ;; Read controller input
0C53A                           .include "subroutine/ReadController.asm"
0C53A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C53A                           ;;
0C53A                           ;; subroutine/ReadController.asm
0C53A                           ;;
0C53A                           ;; Subroutine that polls the controller and stores the input
0C53A                           ;; buttons in a variable. This version only handles controller
0C53A                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C53A                           ;;
0C53A                           ;;
0C53A                           
0C53A                           sub_ReadController:
0C53A                           
0C53A                               ;; Set strobe bit
0C53A A9 01                         LDA #$01
0C53C 8D 16 40                      STA JOYPAD_1
0C53F                           
0C53F                               ;; Set up ring timer
0C53F 85 0F                         STA buttons_held
0C541                           
0C541                               ;; Clear strobe bit
0C541 4A                            LSR
0C542 8D 16 40                      STA JOYPAD_1
0C545                           
0C545                               ;; Loop through button presses
0C545                               -
0C545 AD 16 40                          LDA JOYPAD_1
0C548 4A                                LSR
0C549 26 0F                             ROL buttons_held
0C54B                           
0C54B                               ;; Check if ring timer is done
0C54B 90 F8                         BCC -
0C54D                           
0C54D                               ;; Return from subroutine
0C54D 60                            RTS
0C54E                           
0C54E                           
0C54E                           ;; vBlank/NMI wait
0C54E                           .include "subroutine/WaitForNMI.asm"
0C54E                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C54E                           ;;
0C54E                           ;; subroutine/WaitForVBlank.asm
0C54E                           ;;
0C54E                           ;; Subroutine that essentially pauses script execution until
0C54E                           ;; vBlank happens.
0C54E                           ;;
0C54E                           ;;
0C54E                           
0C54E                           sub_WaitForNMI:
0C54E A9 01                         LDA #$01
0C550 85 49                         STA check_nmi
0C552                               -
0C552 A5 49                             LDA check_nmi
0C554 D0 FC                         BNE -
0C556 60                            RTS
0C557                           
0C557                           .include "subroutine/WaitForVBlank.asm"
0C557                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C557                           ;;
0C557                           ;; subroutine/WaitForVBlank.asm
0C557                           ;;
0C557                           ;; Subroutine that essentially pauses script execution until
0C557                           ;; vBlank happens.
0C557                           ;;
0C557                           ;;
0C557                           
0C557                           sub_WaitForVBlank:
0C557 2C 02 20                      BIT $2002
0C55A 10 FB                         BPL sub_WaitForVBlank
0C55C 60                            RTS
0C55D                           
0C55D                           
0C55D                           ;; Game specific subroutines
0C55D                           .include "game/include/subroutines.asm"
0C55D                           ;; additional game-specific subroutines go here
0C55D                           
0C55D                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C55D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C55D                           ;;
0C55D                           ;;  sub_AddAccumulatorToScore.asm
0C55D                           ;;
0C55D                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C55D                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C55D                           ;;  actual score.
0C55D                           ;;
0C55D                           ;;
0C55D                           
0C55D                           
0C55D                           sub_AddAccumulatorToScore:
0C55D                           
0C55D                               ;; Clear old add_to_score
0C55D A2 05                         LDX #$05
0C55F A0 00                         LDY #$00
0C561                               -
0C561 94 26                             STY add_to_score,x
0C563 CA                                DEX
0C564 10 FB                         BPL -
0C566                           
0C566                               ;; Set accumulator to add_to_score variables
0C566                               ;; Check and update 100s
0C566                               -checkHundreds:
0C566 C9 64                             CMP #100
0C568 90 08                             BCC +checkTens
0C56A 38                                    SEC
0C56B E9 64                                 SBC #100
0C56D E6 29                                 INC add_to_score+3
0C56F 4C 66 C5                              JMP -checkHundreds
0C572                                   +checkTens:
0C572                           
0C572                               ;; Check and update 10s
0C572                               -checkTens:
0C572 C9 0A                             CMP #10
0C574 90 08                             BCC +setOnes
0C576 38                                    SEC
0C577 E9 0A                                 SBC #10
0C579 E6 2A                                 INC add_to_score+4
0C57B 4C 72 C5                              JMP -checkTens
0C57E                                   +setOnes:
0C57E                           
0C57E                               ;; We're left with 1s
0C57E 85 2B                         STA add_to_score+5
0C580                           
0C580                               ;; Byte for byte, add add_to_score to ball_score
0C580 A9 00                         LDA #$00
0C582 85 39                         STA ppu_buffer_update
0C584 A4 3A                         LDY ppu_buffer_pointer
0C586 A2 05                         LDX #$05
0C588                               -
0C588 B5 26                             LDA add_to_score,x
0C58A 18                                CLC
0C58B 75 20                             ADC ball_score,x
0C58D C9 0A                             CMP #10
0C58F 90 05                             BCC +
0C591 38                                    SEC
0C592 E9 0A                                 SBC #10
0C594 F6 1F                                 INC ball_score-1,x
0C596                                   +
0C596                                   
0C596                                   ;; Update new score digit
0C596 95 20                             STA ball_score,x
0C598                           
0C598                                   ;; Update score tile in PPU
0C598 A9 20                             LDA #$20
0C59A 99 00 03                          STA ppu_buffer,y
0C59D C8                                INY
0C59E 8A                                TXA
0C59F 18                                CLC
0C5A0 69 83                             ADC #$83
0C5A2 99 00 03                          STA ppu_buffer,y
0C5A5 C8                                INY
0C5A6 B5 20                             LDA ball_score,x
0C5A8 18                                CLC
0C5A9 69 01                             ADC #$01
0C5AB 99 00 03                          STA ppu_buffer,y
0C5AE C8                                INY
0C5AF                           
0C5AF                                   ;; Check next digit (if any left)
0C5AF CA                                DEX
0C5B0 30 03                             BMI +done
0C5B2 4C 88 C5                      JMP -
0C5B5                           
0C5B5                           +done:
0C5B5                               ;; Update PPU buffer pointer and status
0C5B5 84 3A                         STY ppu_buffer_pointer
0C5B7 A9 01                         LDA #$01
0C5B9 85 39                         STA ppu_buffer_update
0C5BB                           
0C5BB                               ;; Done: return 
0C5BB 60                            RTS
0C5BC                           
0C5BC                           .include "game/subroutine/BackgroundNoise.asm"
0C5BC                           
0C5BC                           sub_BackgroundNoise:
0C5BC A9 32                         LDA #$32
0C5BE 8D 0C 40                      STA NOISE_VOLUME
0C5C1 A9 0E                         LDA #$0E
0C5C3 8D 0E 40                      STA NOISE_PERIOD
0C5C6 85 46                         STA current_noise
0C5C8 60                            RTS0C5C9                           .include "game/subroutine/BlindsEffect.asm"
0C5C9                           
0C5C9                           sub_BlindsEffect:
0C5C9                           
0C5C9                               ;; Set up loop fading
0C5C9 A9 00                         LDA #$00
0C5CB 85 07                         STA temp+7
0C5CD A0 08                         LDY #$08
0C5CF                               -fadeLoop:
0C5CF 84 08                             STY temp+8
0C5D1                           
0C5D1                                   ;; Wait for NMI to pass
0C5D1 20 4E C5                          JSR sub_WaitForNMI
0C5D4                                   
0C5D4                                   ;; Now wait for No-sprite 0
0C5D4                                   -
0C5D4 AD 02 20                              LDA PPU_STATUS
0C5D7 29 40                                 AND #SPRITE_0_HIT
0C5D9 D0 F9                             BNE -
0C5DB                               
0C5DB                                   ;; Now wait for Sprite 0
0C5DB                                   -
0C5DB AD 02 20                              LDA PPU_STATUS
0C5DE 29 40                                 AND #SPRITE_0_HIT
0C5E0 F0 F9                             BEQ -
0C5E2                                       
0C5E2                                   ;; Setup tile row loop
0C5E2 A0 16                             LDY #22
0C5E4                                   -tileLoop:
0C5E4                                   
0C5E4                                       ;; Disable drawing
0C5E4 A5 12                                 LDA soft_ppu_mask
0C5E6 29 F7                                 AND #%11110111
0C5E8 8D 01 20                              STA PPU_MASK
0C5EB                                       
0C5EB                                       ;; Set up scanline loop
0C5EB A2 08                                 LDX #$08
0C5ED                                       -scanlineLoop:
0C5ED E4 08                                     CPX temp+8
0C5EF D0 0A                                     BNE +wasteTime
0C5F1                                           
0C5F1                                           ;; Restore drawing
0C5F1 A5 12                                     LDA soft_ppu_mask
0C5F3 09 08                                     ORA #%00001000
0C5F5 8D 01 20                                  STA PPU_MASK
0C5F8 4C 01 C6                                  JMP +wasteMoreTime
0C5FB                           
0C5FB                                           ;; Waste 12 frames
0C5FB                                           +wasteTime:
0C5FB E6 09                                     INC temp+9   ;+5
0C5FD C6 09                                     DEC temp+9   ;+5
0C5FF 49 00                                     EOR #$00     ;+2
0C601                                           
0C601                                           ;; Waste about 100 frames
0C601                                           +wasteMoreTime:
0C601                                           
0C601 86 01                                     STX temp+1     ;  3 down, 97 to go
0C603 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C605                                           -wasteLoop:
0C605 EA                                            NOP
0C606 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C608 CA                                            DEX        ;  5+5L down,  95-5L to go
0C609 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C60B                           
0C60B A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C60D CA                                        DEX            ;  9+8L down, 91-8L to go
0C60E D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C610                           
0C610 88                                    DEY
0C611 D0 D1                             BNE -tileLoop
0C613                           
0C613 A4 08                             LDY temp+8
0C615                                   
0C615 E6 07                             INC temp+7
0C617 A5 07                             LDA temp+7
0C619 C9 02                             CMP #$02
0C61B D0 B2                             BNE -fadeLoop
0C61D                           
0C61D A9 00                             LDA #$00
0C61F 85 07                             STA temp+7
0C621 88                                DEY
0C622 D0 AB                         BNE -fadeLoop
0C624                               
0C624 60                            RTS
0C625                           .include "game/subroutine/ClearScreen.asm"
0C625                           ;; Subroutine to clear the screen
0C625                           ;; If it's a game screen, add noise
0C625                           
0C625                           sub_ClearScreen:
0C625                               ;; Check of game screen or not
0C625 A5 38                         LDA screen_mode
0C627 29 03                         AND #CHECK_SCREEN_MODE
0C629 C9 01                         CMP #IS_GAME_SCREEN
0C62B F0 02                         BEQ +
0C62D A9 00                             LDA #$00
0C62F                               +
0C62F 85 01                         STA temp+1
0C631                               
0C631                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C631 2C 02 20                      BIT PPU_STATUS
0C634 A9 20                         LDA #$20
0C636 8D 06 20                      STA PPU_ADDR
0C639 A9 00                         LDA #$00
0C63B 8D 06 20                      STA PPU_ADDR
0C63E                               
0C63E                               ;; Set up tile to draw and loop
0C63E 85 00                         STA temp
0C640 AA                            TAX
0C641 A8                            TAY
0C642                           
0C642                               -     
0C642                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C642 A5 00                             LDA temp
0C644 8D 07 20                          STA PPU_DATA
0C647                           
0C647                                   ;; Check if we should draw noise next. Noise is drawn if:
0C647                                   ;; - Screen mode is game screen
0C647                                   ;; - Y between #$06 and #$19 (inclusive)
0C647                                   ;; - X between #$02 and #$1D (inclusive)
0C647                                   
0C647                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C647 A5 01                             LDA temp+1
0C649 F0 1C                             BEQ +nextTileInRow
0C64B                                   
0C64B                                   ;; If Y < $6, skip the check
0C64B C0 06                             CPY #$06
0C64D 90 18                             BCC +nextTileInRow
0C64F                                   
0C64F                                   ;; If X < $1, skip the check
0C64F E0 01                             CPX #$01
0C651 90 14                             BCC +nextTileInRow
0C653                                   
0C653                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C653 E0 1D                             CPX #$1D
0C655 D0 04                             BNE +
0C657 A9 00                                 LDA #$00
0C659 85 00                                 STA temp
0C65B                                   +
0C65B B0 0A                             BCS +nextTileInRow
0C65D                                   
0C65D                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C65D 20 2C C5                          JSR sub_GetRandomNumber
0C660 29 07                             AND #%00000111
0C662 18                                CLC
0C663 69 68                             ADC #$68
0C665 85 00                             STA temp
0C667                           
0C667                           +nextTileInRow:
0C667                                   
0C667                                   ;; Check if a row has been done. If not, draw the next
0C667 E8                                INX
0C668 E0 20                             CPX #$20
0C66A D0 D6                             BNE -
0C66C                                   
0C66C                                   ;; Go to the next row (if any left)
0C66C A2 00                             LDX #00
0C66E C8                                INY
0C66F                                   
0C66F                                   ;; If Y is 1A, skip noise tile check until done drawing
0C66F C0 1A                             CPY #$1A
0C671 D0 04                             BNE +
0C673 A9 00                                 LDA #$00
0C675 85 01                                 STA temp+1
0C677                                   +
0C677                                   
0C677 C0 1E                             CPY #$1E
0C679 D0 C7                         BNE -
0C67B                           
0C67B                               ;; Clear attribute table
0C67B A9 23                         LDA #$23
0C67D 8D 06 20                      STA PPU_ADDR
0C680 A9 C0                         LDA #$C0
0C682 8D 06 20                      STA PPU_ADDR
0C685 A9 00                         LDA #$00
0C687 A2 40                         LDX #$40
0C689                               -
0C689 8D 07 20                          STA PPU_DATA
0C68C CA                                DEX
0C68D D0 FA                         BNE -
0C68F                               
0C68F 60                            RTS0C690                           .include "game/subroutine/ColorizeBall.asm"
0C690                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C690                           ;;
0C690                           ;;  Subroutine: ColorizeBall
0C690                           ;;
0C690                           ;;  Applies the color set through ball_flags to the ball sprite.
0C690                           ;;  Expects ball_flags to be in the accumulator
0C690                           ;;
0C690                           
0C690                           
0C690                           sub_ColorizeBall:
0C690                           
0C690                               ;; Get color from ball_flags
0C690 4A                            LSR
0C691 4A                            LSR
0C692 4A                            LSR
0C693 4A                            LSR
0C694 4A                            LSR
0C695 AA                            TAX
0C696                           
0C696                               ;; Add new light color of ball to PPU palette
0C696 A9 3F                         LDA #$3F
0C698 85 00                         STA temp
0C69A A9 11                         LDA #$11
0C69C 85 01                         STA temp+1
0C69E BD 4D D1                      LDA tbl_BallColorLight,x
0C6A1 85 02                         STA temp+2
0C6A3 20 E9 CF                      JSR sub_WriteByteToPPUBuffer
0C6A6                               
0C6A6                               ;; Add new dark color of ball to PPU palette
0C6A6 E6 01                         INC temp+1
0C6A8 BD 47 D1                      LDA tbl_BallColorDark,x
0C6AB 85 02                         STA temp+2
0C6AD 20 E9 CF                      JSR sub_WriteByteToPPUBuffer
0C6B0                               
0C6B0 60                            RTS
0C6B1                           
0C6B1                           .include "game/subroutine/ColorsMatch.asm"
0C6B1                           
0C6B1                           ;; Subroutine to check if ball color matches colliding tile color
0C6B1                           
0C6B1                           sub_ColorsMatch:
0C6B1                               ;; Save tile color in temp variable
0C6B1 A5 42                         LDA colliding_tile
0C6B3 29 0E                         AND #%00001110
0C6B5 85 00                         STA temp
0C6B7                           
0C6B7                               ;; Get ball color
0C6B7 A5 37                         LDA ball_flags
0C6B9 29 E0                         AND #%11100000
0C6BB 4A                            LSR
0C6BC 4A                            LSR
0C6BD 4A                            LSR
0C6BE 4A                            LSR
0C6BF                           
0C6BF                               ;; Compare with tile color
0C6BF C5 00                         CMP temp
0C6C1 60                            RTS
0C6C2                           
0C6C2                           .include "game/subroutine/ConvertXYToTileType.asm"
0C6C2                           
0C6C2                           ;; Subroutine to convert the ball's position to a tile type
0C6C2                           ;; - Expects temp to be y-position of ball within game area
0C6C2                           ;; - Expects temp+1 to be x-position of ball within game area
0C6C2                           ;; - Puts result in accumulator and zp variable
0C6C2                           ;; - Corrupts X-register
0C6C2                           
0C6C2                           sub_ConvertXYToTileType:
0C6C2 A5 01                         LDA temp+1
0C6C4 4A                            LSR
0C6C5 4A                            LSR
0C6C6 4A                            LSR
0C6C7 4A                            LSR
0C6C8 85 09                         STA temp+9
0C6CA A5 00                         LDA temp
0C6CC 29 F0                         AND #%11110000
0C6CE 18                            CLC
0C6CF 65 09                         ADC temp+9
0C6D1 85 09                         STA temp+9
0C6D3 AA                            TAX
0C6D4 BD 00 04                      LDA tile_type, x
0C6D7 85 42                         STA colliding_tile
0C6D9 60                            RTS
0C6DA                           
0C6DA                           .include "game/subroutine/DisableEnableRendering.asm"
0C6DA                           sub_DisableRendering:
0C6DA                               ;; Force NMI skip, disable rendering
0C6DA A9 01                     	LDA #$01
0C6DC 85 14                     	STA force_skip_nmi
0C6DE 20 57 C5                      JSR sub_WaitForVBlank
0C6E1 A5 12                         LDA soft_ppu_mask
0C6E3 29 E7                         AND #%11100111
0C6E5 8D 01 20                      STA PPU_MASK
0C6E8 85 12                         STA soft_ppu_mask
0C6EA 20 57 C5                      JSR sub_WaitForVBlank
0C6ED 60                            RTS
0C6EE                           
0C6EE                           sub_EnableRendering:
0C6EE                               ;; Enable rendering
0C6EE A9 00                     	LDA #$00
0C6F0 8D 05 20                  	STA PPU_SCROLL
0C6F3 8D 05 20                  	STA PPU_SCROLL
0C6F6 20 57 C5                      JSR sub_WaitForVBlank
0C6F9 85 14                     	STA force_skip_nmi
0C6FB A5 12                         LDA soft_ppu_mask
0C6FD 09 18                         ORA #%00011000
0C6FF 85 12                         STA soft_ppu_mask
0C701 8D 01 20                      STA PPU_MASK
0C704 20 57 C5                      JSR sub_WaitForVBlank
0C707 60                            RTS
0C708                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C708                           sub_drawIntroScreenLogoTile:
0C708 B9 2F D0                      LDA tbl_IntroScreenLogoChr,y
0C70B C9 60                         CMP #$60
0C70D D0 08                         BNE +
0C70F 20 2C C5                          JSR sub_GetRandomNumber
0C712 29 07                             AND #$07
0C714 18                                CLC
0C715 69 60                             ADC #$60
0C717                               +
0C717 8D 07 20                      STA PPU_DATA
0C71A 60                            RTS
0C71B                           .include "game/subroutine/DrawMoveTile.asm"
0C71B                           ;; Draw the move tile as follows:
0C71B                           ;;
0C71B                           ;;  1 2
0C71B                           ;;  3 4 5
0C71B                           ;;    6 7
0C71B                           ;;
0C71B                           ;; (1,2,3,4) is the move block itself
0C71B                           ;; (5,6,7) are shades unless that tile is solid
0C71B                           
0C71B                           ;; X holds the move block sprite slot
0C71B                           
0C71B                           sub_DrawMoveTile:
0C71B                           
0C71B                               ;; Get tile type index from sprite x and y values
0C71B                               ;; and store it in a temp variable
0C71B BD 78 03                      LDA move_block_x,x
0C71E 18                            CLC
0C71F 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C721 4A                            LSR
0C722 4A                            LSR
0C723 4A                            LSR
0C724 4A                            LSR
0C725 85 09                         STA temp+9
0C727 BD 7C 03                      LDA move_block_y,x
0C72A 18                            CLC
0C72B 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C72D 29 F0                         AND #%11110000
0C72F 18                            CLC
0C730 65 09                         ADC temp+9
0C732 85 09                         STA temp+9
0C734 A8                            TAY
0C735                               
0C735                               ;; Add move tile data on the new tile location
0C735 BD 84 03                      LDA move_block_tile_type,x
0C738 99 00 04                      STA tile_type,y
0C73B                           
0C73B                               ;; Draw the original tile type in the ppu buffer
0C73B                               ;; - get PPU address to write to (temp, temp+1)
0C73B 8A                            TXA
0C73C 48                            PHA
0C73D A6 09                         LDX temp+9
0C73F 20 C4 C9                      JSR sub_GetPPUAddrFromYXIndex
0C742 68                            PLA
0C743 AA                            TAX
0C744                               
0C744                               ;; - based on color, select tile 42 or 4A for top left
0C744 BD 88 03                      LDA move_block_flags,x
0C747 4A                            LSR
0C748 4A                            LSR
0C749 4A                            LSR
0C74A 4A                            LSR
0C74B 4A                            LSR
0C74C A8                            TAY
0C74D B9 F9 D8                      LDA tbl_MoveBlockTopLeftTile,y
0C750 85 08                         STA temp+8
0C752                               
0C752                               ;; - save palette ID in temp+6
0C752 98                            TYA
0C753 4A                            LSR
0C754 85 06                         STA temp+6
0C756                               
0C756                               ;; Prepare PPU buffer
0C756 A4 3A                         LDY ppu_buffer_pointer
0C758 A9 00                         LDA #$00
0C75A 85 39                         STA ppu_buffer_update
0C75C                               
0C75C                               ;; Draw tile 1 (top left tile of move block)
0C75C 20 3D C8                      JSR sub_DrawTileTemp018
0C75F                           
0C75F                               
0C75F                               ;; Draw tile 2 (top right tile of move block)
0C75F E6 01                         INC temp+1
0C761 E6 08                         INC temp+8
0C763 20 3D C8                      JSR sub_DrawTileTemp018
0C766                           
0C766                               ;; Draw tile 3 (bottom left tile of move block)
0C766 A5 01                         LDA temp+1
0C768 18                            CLC
0C769 69 1F                         ADC #$1F
0C76B 85 01                         STA temp+1
0C76D A5 00                         LDA temp
0C76F 69 00                         ADC #$00
0C771 85 00                         STA temp
0C773 A5 08                         LDA temp+8
0C775 18                            CLC
0C776 69 0F                         ADC #$0F
0C778 85 08                         STA temp+8
0C77A 20 3D C8                      JSR sub_DrawTileTemp018
0C77D                           
0C77D                               ;; Draw tile 4 (bottom right tile of move block)
0C77D E6 01                         INC temp+1
0C77F E6 08                         INC temp+8
0C781 20 3D C8                      JSR sub_DrawTileTemp018
0C784                           
0C784                               ;; Load tile type offset in X register
0C784 8A                            TXA
0C785 48                            PHA
0C786 A6 09                         LDX temp+9
0C788                               
0C788                               ;; Load shade tile in temp+8
0C788 A9 00                         LDA #$00
0C78A 85 08                         STA temp+8
0C78C                           
0C78C                               ;; Draw tile 5 (right shade) unless tile is solid
0C78C E6 01                         INC temp+1
0C78E                               
0C78E 8A                            TXA
0C78F 29 0F                         AND #%00001111
0C791 C9 0D                         CMP #$0D
0C793 F0 0A                         BEQ +nextTile
0C795                           
0C795 BD 01 04                      LDA tile_type+1,x
0C798 29 01                         AND #%00000001
0C79A D0 03                         BNE +nextTile
0C79C                               
0C79C 20 3D C8                      JSR sub_DrawTileTemp018
0C79F                               
0C79F                           
0C79F                           +nextTile:
0C79F                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C79F A5 01                         LDA temp+1
0C7A1 18                            CLC
0C7A2 69 1F                         ADC #$1F
0C7A4 85 01                         STA temp+1
0C7A6 A5 00                         LDA temp
0C7A8 69 00                         ADC #$00
0C7AA 85 00                         STA temp
0C7AC                           
0C7AC 8A                            TXA
0C7AD 29 F0                         AND #%11110000
0C7AF C9 90                         CMP #$90
0C7B1 F0 0A                         BEQ +nextTile
0C7B3                           
0C7B3 BD 10 04                      LDA tile_type+16,x
0C7B6 29 01                         AND #%00000001
0C7B8 D0 03                         BNE +nextTile
0C7BA                               
0C7BA 20 3D C8                      JSR sub_DrawTileTemp018
0C7BD                           
0C7BD                               
0C7BD                           +nextTile:
0C7BD                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C7BD E6 01                         INC temp+1
0C7BF                           
0C7BF 8A                            TXA
0C7C0 29 F0                         AND #%11110000
0C7C2 C9 90                         CMP #$90
0C7C4 F0 11                         BEQ +setTileAttributes
0C7C6                               
0C7C6 8A                            TXA
0C7C7 29 0F                         AND #%00001111
0C7C9 C9 0D                         CMP #$0D
0C7CB F0 0A                         BEQ +setTileAttributes
0C7CD                               
0C7CD BD 11 04                      LDA tile_type+17,x
0C7D0 29 01                         AND #%00000001
0C7D2 D0 03                         BNE +setTileAttributes
0C7D4                               
0C7D4 20 3D C8                      JSR sub_DrawTileTemp018
0C7D7                               
0C7D7                           
0C7D7                           +setTileAttributes:
0C7D7                               ;; Update attribute table accordingly through ppu buffer
0C7D7                               ;; - PPU buffer high byte
0C7D7 20 BF CF                      JSR sub_SetTileAttributeAddress
0C7DA                           
0C7DA 8A                            TXA
0C7DB 29 10                         AND #%00010000
0C7DD F0 05                         BEQ +        
0C7DF A9 F0                             LDA #%11110000
0C7E1 4C E6 C7                          JMP ++
0C7E4                               +
0C7E4 A9 0F                         LDA #%00001111
0C7E6                               ++
0C7E6 85 02                         STA temp+2
0C7E8                               
0C7E8 8A                            TXA
0C7E9 29 01                         AND #%00000001
0C7EB F0 07                         BEQ +
0C7ED A5 02                             LDA temp+2
0C7EF 09 CC                             ORA #%11001100
0C7F1 4C F8 C7                          JMP ++
0C7F4                               +
0C7F4 A5 02                         LDA temp+2
0C7F6 09 33                         ORA #%00110011
0C7F8                               ++
0C7F8 85 02                         STA temp+2
0C7FA                               
0C7FA C9 FC                         CMP #%11111100
0C7FC F0 22                         BEQ +continue
0C7FE                               
0C7FE C9 F3                         CMP #%11110011
0C800 D0 09                         BNE +
0C802 A5 06                             LDA temp+6
0C804 0A                                ASL
0C805 0A                                ASL
0C806 85 06                             STA temp+6
0C808 4C 20 C8                          JMP +continue
0C80B                               +
0C80B                               
0C80B C9 CF                         CMP #%11001111
0C80D D0 0A                         BNE +
0C80F A6 06                             LDX temp+6
0C811 BD 9C D8                          LDA tbl_Times16,x
0C814 85 06                             STA temp+6
0C816 4C 20 C8                          JMP +continue
0C819                               +
0C819                               
0C819 A6 06                         LDX temp+6
0C81B BD AC D8                      LDA tbl_Times64,x
0C81E 85 06                         STA temp+6
0C820                                   
0C820                           +continue:
0C820 A5 00                         LDA temp
0C822 38                            SEC
0C823 E9 C0                         SBC #$C0
0C825 AA                            TAX
0C826 BD A0 04                      LDA tile_attributes,x
0C829 25 02                         AND temp+2
0C82B 05 06                         ORA temp+6
0C82D 9D A0 04                      STA tile_attributes,x
0C830 99 00 03                      STA ppu_buffer,y
0C833 C8                            INY
0C834                           
0C834                               ;; Restore original X
0C834 68                            PLA
0C835 AA                            TAX
0C836                               
0C836                               ;; Update PPU buffer
0C836 84 3A                         STY ppu_buffer_pointer
0C838 A9 01                         LDA #$01
0C83A 85 39                         STA ppu_buffer_update
0C83C                           
0C83C                               ;; Return
0C83C 60                            RTS
0C83D                           .include "game/subroutine/DrawTileTemp018.asm"
0C83D                           
0C83D                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C83D                           
0C83D                           sub_DrawTileTemp018:
0C83D A5 00                         LDA temp
0C83F 99 00 03                      STA ppu_buffer,y
0C842 C8                            INY
0C843 A5 01                         LDA temp+1
0C845 99 00 03                      STA ppu_buffer,y
0C848 C8                            INY
0C849 A5 08                         LDA temp+8
0C84B 99 00 03                      STA ppu_buffer,y
0C84E C8                            INY
0C84F 60                            RTS
0C850                           .include "game/subroutine/EvaluateTileType.asm"
0C850                           ;; Subroutine to evaluate the colliding tile type and take its
0C850                           ;; corresponding action (move block, kill player, ...)
0C850                           ;; - Expects X-register to be the tile_type offset
0C850                           ;; - Uses zp variable colliding_tile
0C850                           
0C850                           sub_EvaluateTileType:
0C850                           
0C850                               ;; Check if collided tile is a color block
0C850 A5 42                         LDA colliding_tile
0C852 29 80                         AND #IS_COLOR_BLOCK
0C854 D0 03                         BNE +
0C856 4C B8 C8                          JMP +checkIfPaintBlock
0C859                               +
0C859                               
0C859                               ;; It's a color block. Check if the colors match
0C859 20 B1 C6                      JSR sub_ColorsMatch
0C85C F0 01                         BEQ +
0C85E                                   ;; Colors don't match - return
0C85E 60                                RTS
0C85F                               +
0C85F                           
0C85F                               ;; Colors match; destroy color block
0C85F                               
0C85F                               ;; Convert the metatile offset value (which is in the X register)
0C85F                               ;; to its corresponding address in PPU
0C85F 20 C4 C9                      JSR sub_GetPPUAddrFromYXIndex
0C862                           
0C862                               ;; Remove color block from screen by drawing a total
0C862                               ;; of 7 tiles over it (shade included)
0C862 20 49 CE                      JSR sub_RemoveBlockFromScreen
0C865                               
0C865                               ;; - Load destruction animation on tile
0C865                               ;; Get most recent slot for explosion    
0C865 8A                            TXA
0C866 85 02                         STA temp+2
0C868 A6 3B                         LDX explosion_pointer
0C86A                           
0C86A                               ;; If 0, use max pointer value
0C86A D0 02                         BNE +
0C86C A2 04                             LDX #MAX_ANIMATIONS
0C86E                               +
0C86E                           
0C86E                               ;; Decrease pointer by one
0C86E CA                            DEX
0C86F 86 3B                         STX explosion_pointer
0C871                           
0C871                               ;; Load explosion data into RAM
0C871 A9 00                         LDA #$00
0C873 9D 64 03                      STA explosion_currentframe,x
0C876                           
0C876 A9 04                         LDA #ANIMATION_SPEED
0C878 9D 60 03                      STA explosion_timer,x
0C87B                           
0C87B A5 02                         LDA temp+2
0C87D 29 0F                         AND #%00001111
0C87F A8                            TAY
0C880 B9 9C D8                      LDA tbl_Times16,y
0C883 18                            CLC
0C884 69 0E                         ADC #$0E
0C886 9D 6C 03                      STA explosion_x,x
0C889                           
0C889 A5 02                         LDA temp+2
0C88B 29 F0                         AND #%11110000
0C88D 18                            CLC
0C88E 69 29                         ADC #$29
0C890 9D 70 03                      STA explosion_y,x
0C893                           
0C893 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C895 9D 68 03                      STA explosion_attributes,x
0C898 A9 01                         LDA #$01
0C89A 9D 74 03                      STA explosion_active,x
0C89D                           
0C89D A5 02                         LDA temp+2
0C89F AA                            TAX
0C8A0                               
0C8A0                               
0C8A0                               ;; - Write #$00 in tile type ram (makes not-solid)
0C8A0 A9 00                         LDA #$00
0C8A2 9D 00 04                      STA tile_type, x
0C8A5                           
0C8A5                           
0C8A5                               ;; Add (80 + level number) to score
0C8A5 A5 41                         LDA current_level
0C8A7 18                            CLC
0C8A8 69 51                         ADC #81
0C8AA 20 5D C5                      JSR sub_AddAccumulatorToScore
0C8AD                           
0C8AD                           
0C8AD                               ;; - If there are no color blocks left:
0C8AD                               ;;   - Freeze ball
0C8AD                               ;;   - Initiate level-win state [@TODO]
0C8AD C6 43                         DEC blocks_left
0C8AF D0 06                         BNE +
0C8B1 A5 37                             LDA ball_flags
0C8B3 09 04                             ORA #FREEZE_BALL
0C8B5 85 37                             STA ball_flags
0C8B7                               +
0C8B7                               
0C8B7 60                            RTS
0C8B8                           
0C8B8                           +checkIfPaintBlock:
0C8B8                           
0C8B8                           
0C8B8                               ;; Check if collided tile is a paint block
0C8B8 A5 42                         LDA colliding_tile
0C8BA 29 20                         AND #IS_PAINT_BLOCK
0C8BC F0 1A                         BEQ +checkIfDeathBlock
0C8BE                                   ;; It's a paint block. Update ball color
0C8BE                                   ;; Save x-register
0C8BE 8A                                TXA
0C8BF 48                                PHA
0C8C0                           
0C8C0                                   ;; Get tile color
0C8C0 A5 42                             LDA colliding_tile
0C8C2 29 0E                             AND #%00001110
0C8C4 0A                                ASL
0C8C5 0A                                ASL
0C8C6 0A                                ASL
0C8C7 0A                                ASL
0C8C8 85 00                             STA temp
0C8CA                           
0C8CA                                   ;; Apply tile color to ball
0C8CA A5 37                             LDA ball_flags
0C8CC 29 1F                             AND #%00011111
0C8CE 05 00                             ORA temp
0C8D0 85 37                             STA ball_flags
0C8D2 20 90 C6                          JSR sub_ColorizeBall
0C8D5                           
0C8D5                                   ;; Restore x-register
0C8D5 68                                PLA
0C8D6 AA                                TAX
0C8D7                           
0C8D7                                   ;; Return
0C8D7 60                                RTS
0C8D8                               +checkIfDeathBlock:
0C8D8                           
0C8D8                               ;; Check if collided tile is a death block
0C8D8 A5 42                         LDA colliding_tile
0C8DA 29 10                         AND #IS_DEATH_BLOCK
0C8DC F0 38                         BEQ +checkIfMoveBlock
0C8DE                           
0C8DE                                   ;; It is a death block
0C8DE                                   ;; Freeze and kill player
0C8DE A5 37                             LDA ball_flags
0C8E0 09 05                             ORA #%00000101
0C8E2 85 37                             STA ball_flags
0C8E4                                   
0C8E4                                   ;; Get free explosion slot
0C8E4 A6 3B                             LDX explosion_pointer
0C8E6 D0 02                             BNE +
0C8E8 A2 04                                 LDX #MAX_ANIMATIONS
0C8EA                                   +
0C8EA CA                                DEX
0C8EB 86 3B                             STX explosion_pointer
0C8ED                           
0C8ED                                   ;; Load explosion data into RAM
0C8ED A9 00                             LDA #$00
0C8EF 9D 64 03                          STA explosion_currentframe,x
0C8F2                           
0C8F2 A9 04                             LDA #ANIMATION_SPEED
0C8F4 9D 60 03                          STA explosion_timer,x
0C8F7                           
0C8F7 A5 17                             LDA ball_xpos_hi
0C8F9 38                                SEC
0C8FA E9 08                             SBC #$08
0C8FC 9D 6C 03                          STA explosion_x,x
0C8FF                           
0C8FF A5 19                             LDA ball_ypos_hi
0C901 38                                SEC
0C902 E9 06                             SBC #$06
0C904 9D 70 03                          STA explosion_y,x
0C907                           
0C907 A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C909 9D 68 03                          STA explosion_attributes,x
0C90C                           
0C90C A9 01                             LDA #$01
0C90E 9D 74 03                          STA explosion_active,x
0C911                           
0C911                                   ;; Set kill timer
0C911 A9 60                             LDA #$60
0C913 85 40                             STA kill_timer
0C915                           
0C915                                   ;; Return
0C915 60                                RTS
0C916                           
0C916                           
0C916                           +checkIfMoveBlock:
0C916                           
0C916                               ;; Check if collided tile is a move block
0C916 A5 42                         LDA colliding_tile
0C918 29 40                         AND #IS_MOVE_BLOCK
0C91A D0 01                         BNE +
0C91C 60                                RTS
0C91D                               +
0C91D                           
0C91D                               ;; It is a move block. Check if colors match
0C91D 20 B1 C6                      JSR sub_ColorsMatch
0C920 F0 01                         BEQ +
0C922 60                                RTS
0C923                               +
0C923                           
0C923                               ;; Colors match
0C923                               ;; - Check if next tile is within the playground
0C923                               ;; (push X onto stack as well)
0C923 8A                            TXA
0C924 48                            PHA
0C925 18                            CLC
0C926 65 36                         ADC move_block_space_to_check
0C928 AA                            TAX
0C929                               
0C929 29 0F                         AND #%00001111
0C92B C9 0E                         CMP #$0E
0C92D 90 03                         BCC +
0C92F 4C A3 C9                          JMP +restoreX
0C932                               +
0C932 8A                            TXA
0C933 29 F0                         AND #%11110000
0C935 C9 A0                         CMP #$A0
0C937 D0 03                         BNE +
0C939 4C A3 C9                          JMP +restoreX
0C93C                               +
0C93C C9 F0                         CMP #$F0
0C93E D0 03                         BNE +
0C940 4C A3 C9                          JMP +restoreX
0C943                               +
0C943                               
0C943                               ;; Check if the next tile is solid
0C943 BD 00 04                      LDA tile_type,x
0C946 29 01                         AND #TILE_IS_SOLID
0C948 F0 03                         BEQ +
0C94A 4C A3 C9                          JMP +restoreX
0C94D                               +
0C94D                               
0C94D                               ;; Move block has room to move
0C94D                               ;; Pull original X from stack
0C94D 68                            PLA
0C94E AA                            TAX        
0C94F                               
0C94F                               ;; Add the tiles that need updating to ppu buffer, and
0C94F                               ;; update attribute table accordingly through ppu buffer
0C94F 20 C4 C9                      JSR sub_GetPPUAddrFromYXIndex
0C952 20 49 CE                      JSR sub_RemoveBlockFromScreen
0C955                           
0C955                               ;; Store original tile type in temp variable
0C955 BD 00 04                      LDA tile_type,x
0C958 85 08                         STA temp+8
0C95A                           
0C95A                               ;; Write #$00 in tile type ram (makes not-solid)
0C95A A9 00                         LDA #$00
0C95C 9D 00 04                      STA tile_type,x
0C95F                           
0C95F                               ;; Add move tile sprite over the original tile
0C95F                               ;; - Store x in temp variable
0C95F 86 03                         STX temp+3
0C961                               
0C961                               ;; - Update move block pointer
0C961 A6 3C                         LDX move_block_pointer
0C963 D0 02                         BNE +
0C965 A2 04                             LDX #MAX_ANIMATIONS
0C967                               +
0C967 CA                            DEX
0C968 86 3C                         STX move_block_pointer
0C96A                           
0C96A                               ;; = Set move block tile type
0C96A A5 08                         LDA temp+8
0C96C 9D 84 03                      STA move_block_tile_type,x
0C96F                           
0C96F                               ;; - Set move block X position
0C96F A5 03                         LDA temp+3
0C971 29 0F                         AND #%00001111
0C973 A8                            TAY
0C974 C8                            INY
0C975 B9 9C D8                      LDA tbl_Times16,y
0C978 9D 78 03                      STA move_block_x,x
0C97B                               
0C97B                               ;; - Set move block Y position
0C97B A5 03                         LDA temp+3
0C97D 29 F0                         AND #%11110000
0C97F 18                            CLC
0C980 69 30                         ADC #$30
0C982 9D 7C 03                      STA move_block_y,x
0C985 DE 7C 03                      DEC move_block_y,x
0C988                               
0C988                               ;; - Set timer to 16 (+1) frames
0C988 A9 11                         LDA #$11
0C98A 9D 80 03                      STA move_block_timer,x
0C98D                               
0C98D                               ;; - Set move direction
0C98D A5 36                         LDA move_block_space_to_check
0C98F 29 81                         AND #%10000001
0C991 18                            CLC
0C992 2A                            ROL
0C993 69 00                         ADC #$00
0C995 85 04                         STA temp+4
0C997                               
0C997                               ;; - Set block color as ball color and add direction
0C997 A5 37                         LDA ball_flags
0C999 29 E0                         AND #BALL_COLOR
0C99B 05 04                         ORA temp+4
0C99D 9D 88 03                      STA move_block_flags,x
0C9A0                               
0C9A0                               ;; - Restore original X
0C9A0 A6 03                         LDX temp+3
0C9A2                           
0C9A2                               ;; Return
0C9A2 60                            RTS
0C9A3                           
0C9A3                           
0C9A3                           ;; Pull X register from stack before returning
0C9A3                           +restoreX:
0C9A3 68                            PLA
0C9A4 AA                            TAX
0C9A5 60                            RTS
0C9A6                           .include "game/subroutine/FlashEffect.asm"
0C9A6                           sub_FlashEffect:
0C9A6 A2 00                         LDX #$00
0C9A8 86 01                         STX temp+1
0C9AA A9 3F                         LDA #$3F
0C9AC 85 00                         STA temp
0C9AE                           
0C9AE                               -flashLoop:
0C9AE BD 0A D9                          LDA tbl_BackgroundFade,x
0C9B1 85 02                             STA temp+2
0C9B3 20 E9 CF                          JSR sub_WriteByteToPPUBuffer
0C9B6 A0 03                             LDY #$03
0C9B8                                   -
0C9B8 20 4E C5                              JSR sub_WaitForNMI
0C9BB 88                                    DEY
0C9BC D0 FA                             BNE -
0C9BE E8                                INX
0C9BF E0 0A                             CPX #$0A
0C9C1 D0 EB                         BNE -flashLoop
0C9C3                               
0C9C3 60                            RTS0C9C4                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C9C4                           sub_GetPPUAddrFromYXIndex:
0C9C4                           
0C9C4                               ;; Get the PPU address from YX index
0C9C4                               ;; - Expects YX index (aka tile offset) to be in the X register
0C9C4                               ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C9C4                               
0C9C4                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C9C4                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C9C4                               
0C9C4 8A                            TXA
0C9C5 29 C0                         AND #%11000000
0C9C7 18                            CLC
0C9C8 2A                            ROL
0C9C9 2A                            ROL
0C9CA 2A                            ROL
0C9CB 69 20                         ADC #$20
0C9CD 85 00                         STA temp
0C9CF                               
0C9CF 8A                            TXA
0C9D0 29 0F                         AND #%00001111
0C9D2 0A                            ASL
0C9D3 85 01                         STA temp+1
0C9D5                               
0C9D5 8A                            TXA
0C9D6 29 30                         AND #%00110000
0C9D8 0A                            ASL
0C9D9 0A                            ASL
0C9DA 18                            CLC
0C9DB 65 01                         ADC temp+1
0C9DD 85 01                         STA temp+1
0C9DF                               
0C9DF A5 00                         LDA temp
0C9E1 69 00                         ADC #$00
0C9E3 85 00                         STA temp
0C9E5                               
0C9E5 A5 01                         LDA temp+1
0C9E7 18                            CLC
0C9E8 69 C2                         ADC #$C2
0C9EA 85 01                         STA temp+1
0C9EC                               
0C9EC A5 00                         LDA temp
0C9EE 69 00                         ADC #$00
0C9F0 85 00                         STA temp
0C9F2                           
0C9F2 60                            RTS0C9F3                           .include "game/subroutine/InitiateNudge.asm"
0C9F3                           
0C9F3                           sub_InitiateNudge:
0C9F3 85 37                         STA ball_flags
0C9F5 A9 05                         LDA #NUDGE_FRAMES
0C9F7 85 3E                         STA nudge_timer
0C9F9 60                            RTS
0C9FA                           
0C9FA                           .include "game/subroutine/JumpToPointer.asm"
0C9FA                           sub_JumpToPointer:
0C9FA 6C 0C 00                      JMP (pointer)
0C9FD                               ;RTS must be handled by the routine (pointer) jumps to
0C9FD                           .include "game/subroutine/LoadGameScreen.asm"
0C9FD                           sub_LoadGameScreen:
0C9FD                           
0C9FD                               ;; Clear the screen
0C9FD 20 25 C6                      JSR sub_ClearScreen
0CA00                               
0CA00                               ;; Clear collision and attribute data; reset blocks left in the process
0CA00 A2 00                         LDX #$00
0CA02 8A                            TXA
0CA03 85 43                         STA blocks_left
0CA05                               -
0CA05 9D 00 04                          STA tile_type,x
0CA08 E8                                INX
0CA09 D0 FA                         BNE -
0CA0B                               
0CA0B                               ;; Get pointer from current level
0CA0B A6 41                         LDX current_level
0CA0D BD 51 D8                      LDA tbl_lvl_layout_lo,x
0CA10 85 0C                         STA pointer
0CA12 BD 38 D8                      LDA tbl_lvl_layout_hi,x
0CA15 85 0D                         STA pointer+1
0CA17                           
0CA17                               ;; Set up the loop
0CA17 A0 00                         LDY #$00
0CA19                           -drawRowColumnLoop:
0CA19                           
0CA19                               ;; Load (x,y) of current set of tiles
0CA19 B1 0C                         LDA (pointer),y
0CA1B                           
0CA1B                               ;; Check if level is done; if so, skip the loop
0CA1B C9 FF                         CMP #LEVEL_END
0CA1D D0 03                         BNE +
0CA1F 4C 68 CB                          JMP +doneLevelLoad
0CA22                               +
0CA22                           
0CA22                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CA22 85 00                         STA temp
0CA24 C8                            INY
0CA25 B1 0C                         LDA (pointer),y
0CA27 85 01                         STA temp+1
0CA29                               
0CA29                               ;; Convert (x,y) to PPU address
0CA29                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CA29 A5 00                         LDA temp
0CA2B 29 0F                         AND #%00001111
0CA2D 4A                            LSR
0CA2E 4A                            LSR
0CA2F 09 20                         ORA #$20
0CA31 85 02                         STA temp+2
0CA33                               
0CA33                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CA33 A5 00                         LDA temp
0CA35 29 F0                         AND #%11110000
0CA37 4A                            LSR
0CA38 4A                            LSR
0CA39 4A                            LSR
0CA3A 85 03                         STA temp+3
0CA3C                               
0CA3C A5 00                         LDA temp
0CA3E 29 03                         AND #%00000011
0CA40 AA                            TAX
0CA41 BD AC D8                      LDA tbl_Times64,x
0CA44 18                            CLC
0CA45 65 03                         ADC temp+3
0CA47 18                            CLC
0CA48 69 C2                         ADC #$C2
0CA4A 85 03                         STA temp+3
0CA4C                               
0CA4C                               ;; Add carry to temp+2
0CA4C A5 02                         LDA temp+2
0CA4E 69 00                         ADC #$00
0CA50 85 02                         STA temp+2
0CA52                           
0CA52                               ;; Convert tile data to loop count and tile type
0CA52                               ;; temp+4 = color
0CA52 A5 01                         LDA temp+1
0CA54 29 07                         AND #%00000111
0CA56 85 04                         STA temp+4
0CA58                               
0CA58                               ;; If color = 7, this is a wall
0CA58 C9 07                         CMP #%00000111
0CA5A F0 12                         BEQ +wallHack
0CA5C                                   
0CA5C                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CA5C 29 01                             AND #%00000001
0CA5E F0 02                             BEQ +
0CA60 A9 05                                 LDA #$05
0CA62                                   +
0CA62 85 07                             STA temp+7
0CA64                                
0CA64                                   ;; temp+5 = tile type
0CA64 A5 01                             LDA temp+1
0CA66 4A                                LSR
0CA67 4A                                LSR
0CA68 4A                                LSR
0CA69 29 03                             AND #%00000011
0CA6B 4C 74 CA                          JMP +setTileType
0CA6E                               +wallHack:
0CA6E                               
0CA6E                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CA6E A9 00                         LDA #$00
0CA70 85 07                         STA temp+7
0CA72 A9 04                         LDA #$04
0CA74                           
0CA74                           +setTileType:    
0CA74 85 05                         STA temp+5
0CA76                               
0CA76                               ;; X = tile offset
0CA76 18                            CLC
0CA77 65 07                         ADC temp+7
0CA79 AA                            TAX
0CA7A                               
0CA7A                               ;; temp+6 = number of tiles
0CA7A A5 01                         LDA temp+1
0CA7C 29 60                         AND #%01100000
0CA7E 4A                            LSR
0CA7F 4A                            LSR
0CA80 4A                            LSR
0CA81 4A                            LSR
0CA82 4A                            LSR
0CA83 85 06                         STA temp+6
0CA85                               
0CA85                               ;; Translate (x,y) to (y,x) for tile RAM
0CA85 A5 00                         LDA temp
0CA87 0A                            ASL
0CA88 0A                            ASL
0CA89 0A                            ASL
0CA8A 0A                            ASL
0CA8B 85 08                         STA temp+8
0CA8D A5 00                         LDA temp
0CA8F 4A                            LSR
0CA90 4A                            LSR
0CA91 4A                            LSR
0CA92 4A                            LSR
0CA93 05 08                         ORA temp+8
0CA95 85 00                         STA temp
0CA97                               
0CA97                               ;; Set up loop
0CA97 98                            TYA
0CA98 48                            PHA
0CA99 A4 06                         LDY temp+6
0CA9B                           
0CA9B                               -drawTileLoop:
0CA9B                                   ;; Write PPU address
0CA9B 2C 02 20                          BIT PPU_STATUS
0CA9E A5 02                             LDA temp+2
0CAA0 8D 06 20                          STA PPU_ADDR
0CAA3 A5 03                             LDA temp+3
0CAA5 8D 06 20                          STA PPU_ADDR
0CAA8                                   
0CAA8                                   ;; Write first and second tile
0CAA8 BD B0 D8                          LDA tbl_GametileTopLeft,x
0CAAB 8D 07 20                          STA PPU_DATA
0CAAE BD BA D8                          LDA tbl_GametileTopRight,x
0CAB1 8D 07 20                          STA PPU_DATA
0CAB4                                   
0CAB4                                   ;; Update PPU address
0CAB4 2C 02 20                          BIT PPU_STATUS
0CAB7 A5 02                             LDA temp+2
0CAB9 8D 06 20                          STA PPU_ADDR
0CABC A5 03                             LDA temp+3
0CABE 18                                CLC
0CABF 69 20                             ADC #$20
0CAC1 8D 06 20                          STA PPU_ADDR
0CAC4                                   
0CAC4                                   ;; Write third and fourth tile
0CAC4 BD C4 D8                          LDA tbl_GametileBottomLeft,x
0CAC7 8D 07 20                          STA PPU_DATA
0CACA BD CE D8                          LDA tbl_GametileBottomRight,x
0CACD 8D 07 20                          STA PPU_DATA
0CAD0                           
0CAD0                                   ;; Push x-register to stack
0CAD0 8A                                TXA
0CAD1 48                                PHA
0CAD2                           
0CAD2                                   ;; Update tile RAM (aka collision table)
0CAD2 A6 05                             LDX temp+5
0CAD4 BD D8 D8                          LDA tbl_GameTileRamByte,x
0CAD7 05 04                             ORA temp+4
0CAD9 0A                                ASL
0CADA 09 01                             ORA #%00000001
0CADC A6 00                             LDX temp
0CADE 9D 00 04                          STA tile_type,x
0CAE1                           
0CAE1                                   ;; Check if shade 1 should be drawn
0CAE1 E8                                INX
0CAE2 BD 00 04                          LDA tile_type,x
0CAE5 D0 05                             BNE +
0CAE7 A9 00                                 LDA #$00
0CAE9 8D 07 20                              STA PPU_DATA
0CAEC                                   +
0CAEC                                   
0CAEC                                   ;; Check if shade 2 should be drawn
0CAEC A5 03                             LDA temp+3
0CAEE 18                                CLC
0CAEF 69 41                             ADC #$41
0CAF1 85 03                             STA temp+3
0CAF3 A5 02                             LDA temp+2
0CAF5 69 00                             ADC #$00
0CAF7 85 02                             STA temp+2
0CAF9                                   
0CAF9 8A                                TXA
0CAFA 18                                CLC
0CAFB 69 0F                             ADC #$0F
0CAFD AA                                TAX
0CAFE                                   
0CAFE BD 00 04                          LDA tile_type,x
0CB01 D0 0F                             BNE +
0CB03 A5 02                                 LDA temp+2
0CB05 8D 06 20                              STA PPU_ADDR
0CB08 A5 03                                 LDA temp+3
0CB0A 8D 06 20                              STA PPU_ADDR
0CB0D A9 00                                 LDA #$00
0CB0F 8D 07 20                              STA PPU_DATA
0CB12                                   +
0CB12                           
0CB12                                   ;; Check if shade 3 should be drawn
0CB12 E8                                INX
0CB13 E6 03                             INC temp+3
0CB15 BD 00 04                          LDA tile_type,x
0CB18 D0 0F                             BNE +
0CB1A A5 02                                 LDA temp+2
0CB1C 8D 06 20                              STA PPU_ADDR
0CB1F A5 03                                 LDA temp+3
0CB21 8D 06 20                              STA PPU_ADDR
0CB24 A9 00                                 LDA #$00
0CB26 8D 07 20                              STA PPU_DATA
0CB29                                   +
0CB29                                   
0CB29                                   ;; Restore x-register from stack
0CB29 68                                PLA
0CB2A AA                                TAX
0CB2B                                   
0CB2B                                   ;; Reset pointer for next tile
0CB2B A5 03                             LDA temp+3
0CB2D 38                                SEC
0CB2E E9 42                             SBC #$42
0CB30 85 03                             STA temp+3
0CB32 A5 02                             LDA temp+2
0CB34 E9 00                             SBC #$00
0CB36 85 02                             STA temp+2
0CB38                                   
0CB38                                   ;; Draw next metatile in this loop (if any left)
0CB38 88                                DEY
0CB39 30 27                             BMI +doneDrawingRowColumn
0CB3B                                   
0CB3B                                   ;; Is it a row or a column?
0CB3B A5 01                             LDA temp+1
0CB3D 10 17                             BPL +
0CB3F                                       ;; It is a column: move pointer down (+$40)
0CB3F A5 03                                 LDA temp+3
0CB41 18                                    CLC
0CB42 69 40                                 ADC #$40
0CB44 85 03                                 STA temp+3
0CB46 A5 02                                 LDA temp+2
0CB48 69 00                                 ADC #$00
0CB4A 85 02                                 STA temp+2
0CB4C                                       
0CB4C                                       ;; Add 16 to temp (as a tile RAM pointer)
0CB4C A5 00                                 LDA temp
0CB4E 18                                    CLC
0CB4F 69 10                                 ADC #$10
0CB51 85 00                                 STA temp
0CB53 4C 5F CB                              JMP +drawNextTile
0CB56                                   +
0CB56                                   
0CB56                                   ;; It is a row: move pointer right (+$02)
0CB56 A5 03                             LDA temp+3
0CB58 18                                CLC
0CB59 69 02                             ADC #$02
0CB5B 85 03                             STA temp+3
0CB5D                                   
0CB5D                                   ;; Add 1 to temp (as a tile RAM pointer)
0CB5D E6 00                             INC temp
0CB5F                           
0CB5F                               
0CB5F                               ;; Next tile in the row/column
0CB5F                                   +drawNextTile:
0CB5F 4C 9B CA                      JMP -drawTileLoop
0CB62                           
0CB62                               ;; Go to the next set of tiles
0CB62                           +doneDrawingRowColumn:
0CB62 68                            PLA
0CB63 A8                            TAY
0CB64 C8                            INY
0CB65 4C 19 CA                      JMP -drawRowColumnLoop
0CB68                           
0CB68                           ;; Level loading is done
0CB68                           +doneLevelLoad:
0CB68                           
0CB68                               ;; Count number of color blocks
0CB68 A2 A0                         LDX #160
0CB6A                               -
0CB6A BD FF 03                          LDA tile_type-1,x
0CB6D 29 80                             AND #%10000000
0CB6F F0 02                             BEQ +
0CB71 E6 43                                 INC blocks_left
0CB73                                   +
0CB73 CA                                DEX
0CB74 D0 F4                         BNE -
0CB76                           
0CB76                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CB76 A9 20                         LDA #$20
0CB78 8D 06 20                      STA PPU_ADDR
0CB7B A9 A2                         LDA #$A2
0CB7D 8D 06 20                      STA PPU_ADDR
0CB80 A9 35                         LDA #$35
0CB82 20 B0 CD                      JSR sub_Draw28HorizontalTiles
0CB85                           
0CB85                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CB85 A9 23                         LDA #$23
0CB87 8D 06 20                      STA PPU_ADDR
0CB8A A9 42                         LDA #$42
0CB8C 8D 06 20                      STA PPU_ADDR
0CB8F A9 31                         LDA #$31
0CB91 20 B0 CD                      JSR sub_Draw28HorizontalTiles
0CB94                           
0CB94                               ;; Left & right game bounds
0CB94                               ;; Set PPU_ADDR and store in temp variables
0CB94 A9 20                         LDA #$20
0CB96 85 00                         STA temp
0CB98 8D 06 20                      STA PPU_ADDR
0CB9B A9 C1                         LDA #$C1
0CB9D 85 01                         STA temp+1
0CB9F 8D 06 20                      STA PPU_ADDR
0CBA2                               
0CBA2                               ;; Set vertical bound tile and set up loop
0CBA2 A0 33                         LDY #$33
0CBA4 A2 14                         LDX #20
0CBA6                               -
0CBA6                                   ;; Show left tile
0CBA6 8C 07 20                          STY PPU_DATA
0CBA9                                   
0CBA9                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CBA9 A5 00                             LDA temp
0CBAB 8D 06 20                          STA PPU_ADDR
0CBAE A5 01                             LDA temp+1
0CBB0 18                                CLC
0CBB1 69 1D                             ADC #29
0CBB3 85 01                             STA temp+1
0CBB5 8D 06 20                          STA PPU_ADDR
0CBB8                           
0CBB8                                   ;; Show right tile
0CBB8 8C 07 20                          STY PPU_DATA
0CBBB                           
0CBBB                                   ;; Check if we're done yet
0CBBB CA                                DEX
0CBBC F0 18                             BEQ +drawCorners
0CBBE                                   
0CBBE                                   ;; Not done yet: add 3 to low byte for next left bound
0CBBE A5 01                             LDA temp+1
0CBC0 18                                CLC
0CBC1 69 03                             ADC #3
0CBC3 85 01                             STA temp+1
0CBC5                                   
0CBC5                                   ;; Apply carry to high byte
0CBC5 A5 00                             LDA temp
0CBC7 69 00                             ADC #$00
0CBC9 85 00                             STA temp
0CBCB                                   
0CBCB                                   ;; Store next PPU_ADDR to draw at
0CBCB 8D 06 20                          STA PPU_ADDR
0CBCE A5 01                             LDA temp+1
0CBD0 8D 06 20                          STA PPU_ADDR
0CBD3 4C A6 CB                      JMP -
0CBD6                               
0CBD6                               
0CBD6                           
0CBD6                           +drawCorners:
0CBD6                               ;; Draw the corners of the playing field
0CBD6 A9 20                         LDA #$20
0CBD8 8D 06 20                      STA PPU_ADDR
0CBDB A9 A1                         LDA #$A1
0CBDD 8D 06 20                      STA PPU_ADDR
0CBE0 A9 39                         LDA #$39
0CBE2 8D 07 20                      STA PPU_DATA
0CBE5                           
0CBE5 A9 20                         LDA #$20
0CBE7 8D 06 20                      STA PPU_ADDR
0CBEA A9 BE                         LDA #$BE
0CBEC 8D 06 20                      STA PPU_ADDR
0CBEF A9 3A                         LDA #$3A
0CBF1 8D 07 20                      STA PPU_DATA
0CBF4                               ;; (added background tile for Sprite-0 hit)
0CBF4 A9 3F                         LDA #$3F
0CBF6 8D 07 20                      STA PPU_DATA
0CBF9                           
0CBF9 A9 23                         LDA #$23
0CBFB 8D 06 20                      STA PPU_ADDR
0CBFE A9 41                         LDA #$41
0CC00 8D 06 20                      STA PPU_ADDR
0CC03 A9 36                         LDA #$36
0CC05 8D 07 20                      STA PPU_DATA
0CC08                           
0CC08 A9 23                         LDA #$23
0CC0A 8D 06 20                      STA PPU_ADDR
0CC0D A9 5E                         LDA #$5E
0CC0F 8D 06 20                      STA PPU_ADDR
0CC12 A9 34                         LDA #$34
0CC14 8D 07 20                      STA PPU_DATA
0CC17                           
0CC17                           
0CC17                               ;; Draw the hud labels
0CC17 A9 20                         LDA #$20
0CC19 8D 06 20                      STA PPU_ADDR
0CC1C A9 62                         LDA #$62
0CC1E 8D 06 20                      STA PPU_ADDR
0CC21 A2 00                         LDX #$00
0CC23                               -
0CC23 BD DD D8                          LDA tbl_HudText,x
0CC26 8D 07 20                          STA PPU_DATA
0CC29 E8                                INX
0CC2A E0 1C                             CPX #28
0CC2C D0 F5                         BNE -
0CC2E                           
0CC2E                           
0CC2E                               ;; Draw the current score
0CC2E A9 20                         LDA #$20
0CC30 8D 06 20                      STA PPU_ADDR
0CC33 A9 83                         LDA #$83
0CC35 8D 06 20                      STA PPU_ADDR
0CC38 A2 00                         LDX #$00
0CC3A                               -
0CC3A B5 20                             LDA ball_score,x
0CC3C 18                                CLC
0CC3D 69 01                             ADC #$01
0CC3F 8D 07 20                          STA PPU_DATA
0CC42 E8                                INX
0CC43 E0 06                             CPX #$06
0CC45 D0 F3                         BNE -
0CC47                           
0CC47                           
0CC47                               ;; Draw the level number
0CC47                               ;; (with primitive HEX>DEC)
0CC47 A5 41                         LDA current_level
0CC49 18                            CLC
0CC4A 69 01                         ADC #$01
0CC4C 85 01                         STA temp+1
0CC4E                               
0CC4E C9 14                         CMP #20
0CC50 B0 13                         BCS +tempIsTwo
0CC52                               
0CC52 C9 0A                         CMP #10
0CC54 B0 05                         BCS +tempIsOne
0CC56                               
0CC56 A9 00                         LDA #$00
0CC58 4C 6C CC                      JMP +setTemp
0CC5B                               
0CC5B                           +tempIsOne:
0CC5B 38                            SEC
0CC5C E9 0A                         SBC #10
0CC5E 85 01                         STA temp+1
0CC60 A9 01                         LDA #$01
0CC62 4C 6C CC                      JMP +setTemp
0CC65                               
0CC65                           +tempIsTwo:
0CC65 38                            SEC
0CC66 E9 14                         SBC #20
0CC68 85 01                         STA temp+1
0CC6A A9 02                         LDA #$02
0CC6C                           
0CC6C                           +setTemp:
0CC6C 85 00                         STA temp
0CC6E                               
0CC6E E6 00                         INC temp
0CC70 E6 01                         INC temp+1
0CC72                               
0CC72 A9 20                         LDA #$20
0CC74 8D 06 20                      STA PPU_ADDR
0CC77 A9 8B                         LDA #$8B
0CC79 8D 06 20                      STA PPU_ADDR
0CC7C A5 00                         LDA temp
0CC7E 8D 07 20                      STA PPU_DATA
0CC81 A5 01                         LDA temp+1
0CC83 8D 07 20                      STA PPU_DATA
0CC86                           
0CC86                           
0CC86                               ;; Draw lives (presumes lives to be capped at 9)
0CC86 A9 20                         LDA #$20
0CC88 8D 06 20                      STA PPU_ADDR
0CC8B A9 92                         LDA #$92
0CC8D 8D 06 20                      STA PPU_ADDR
0CC90 A6 1F                         LDX ball_lives
0CC92 E8                            INX
0CC93 8E 07 20                      STX PPU_DATA
0CC96                           
0CC96                           
0CC96                               ;; Set and draw bonus
0CC96 A9 07                         LDA #$07
0CC98 85 2C                         STA ball_bonus
0CC9A A9 09                         LDA #$09
0CC9C 85 2D                         STA ball_bonus+1
0CC9E 85 2E                         STA ball_bonus+2
0CCA0                               
0CCA0 A9 20                         LDA #$20
0CCA2 8D 06 20                      STA PPU_ADDR
0CCA5 A9 9A                         LDA #$9A
0CCA7 8D 06 20                      STA PPU_ADDR
0CCAA A2 00                         LDX #$00
0CCAC                               -
0CCAC B5 2C                             LDA ball_bonus,x
0CCAE 18                                CLC
0CCAF 69 01                             ADC #$01
0CCB1 8D 07 20                          STA PPU_DATA
0CCB4 E8                                INX
0CCB5 E0 03                             CPX #$03
0CCB7 D0 F3                         BNE -
0CCB9                           
0CCB9                           
0CCB9                               ;; Set attribute data to RAM
0CCB9                               
0CCB9                               ;; Byte 0-7 of attribute ram should be #%10100000
0CCB9 A2 00                         LDX #$00
0CCBB A9 A0                         LDA #$A0
0CCBD                               -
0CCBD 9D A0 04                          STA tile_attributes,x
0CCC0 E8                                INX
0CCC1 E0 08                             CPX #$08
0CCC3 D0 F8                         BNE -
0CCC5                           
0CCC5                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CCC5                           
0CCC5                           -attributeLoop:
0CCC5                               ;; Reset current attribute value
0CCC5 A9 00                         LDA #$00
0CCC7 85 02                         STA temp+2
0CCC9                           
0CCC9                               ;; Get first metatile in tile ram based on attribute index
0CCC9                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CCC9 8A                            TXA
0CCCA                           
0CCCA 38                            SEC
0CCCB E9 08                         SBC #$08
0CCCD 85 01                         STA temp+1      ; attr - 8 (temp1)
0CCCF 0A                            ASL             ; * 2
0CCD0 85 00                         STA temp        ; temp = temp1 * 2
0CCD2                           
0CCD2 A5 01                         LDA temp+1      ; temp1
0CCD4 29 F8                         AND #%11111000  ; rounded down to 8's
0CCD6 0A                            ASL             ; * 2
0CCD7 18                            CLC
0CCD8 65 00                         ADC temp        ; + temp1 * 2
0CCDA 85 00                         STA temp        ; first metatile
0CCDC                           
0CCDC                               ;; Store first metatile in y-register
0CCDC A8                            TAY
0CCDD                           
0CCDD                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CCDD 8A                            TXA
0CCDE 29 07                         AND #%00000111
0CCE0 C9 07                         CMP #%00000111
0CCE2 F0 0B                         BEQ +
0CCE4                           
0CCE4                               ;; If X >= $30, don't apply bottom right metatile
0CCE4 E0 30                         CPX #$30
0CCE6 B0 07                         BCS +
0CCE8                               
0CCE8                               ;; Add metatile1 subpalette to attribute value
0CCE8 B9 00 04                      LDA tile_type,y
0CCEB 29 0C                         AND #%00001100
0CCED 85 02                         STA temp+2
0CCEF                               +
0CCEF                           
0CCEF                           
0CCEF                               ;; Apply second metatile
0CCEF 88                            DEY
0CCF0                           
0CCF0                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CCF0 8A                            TXA
0CCF1 29 07                         AND #%00000111
0CCF3 F0 10                         BEQ +
0CCF5                           
0CCF5                               ;; If X >= $30, don't apply bottom left metatile
0CCF5 E0 30                         CPX #$30
0CCF7 B0 0C                         BCS +
0CCF9                           
0CCF9                           
0CCF9                           
0CCF9                               ;; Add metatile2 subpalette to attribute value
0CCF9 B9 00 04                      LDA tile_type,y
0CCFC 29 0C                         AND #%00001100
0CCFE 4A                            LSR
0CCFF 4A                            LSR
0CD00 05 02                         ORA temp+2
0CD02 4C 07 CD                      JMP ++
0CD05                               +
0CD05 A5 02                         LDA temp+2
0CD07                               ++
0CD07 0A                            ASL
0CD08 0A                            ASL
0CD09 85 02                         STA temp+2
0CD0B                           
0CD0B                           
0CD0B                               ;; Apply third metatile
0CD0B 98                            TYA
0CD0C 38                            SEC
0CD0D E9 0F                         SBC #$0F
0CD0F A8                            TAY
0CD10                           
0CD10                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD10 8A                            TXA
0CD11 29 07                         AND #%00000111
0CD13 C9 07                         CMP #%00000111
0CD15 F0 11                         BEQ +
0CD17                           
0CD17                               ;; If X < $10, don't apply top right metatile
0CD17 8A                            TXA
0CD18 29 F0                         AND #%11110000
0CD1A F0 0C                         BEQ +
0CD1C                           
0CD1C                               ;; Add metatile3 subpalette to attribute value
0CD1C B9 00 04                      LDA tile_type,y
0CD1F 29 0C                         AND #%00001100
0CD21 4A                            LSR
0CD22 4A                            LSR
0CD23 05 02                         ORA temp+2
0CD25 4C 2A CD                      JMP ++
0CD28                               +
0CD28 A5 02                         LDA temp+2
0CD2A                               ++
0CD2A 0A                            ASL
0CD2B 0A                            ASL
0CD2C 85 02                         STA temp+2
0CD2E                           
0CD2E                           
0CD2E                               ;; Apply fourth metatile
0CD2E 88                            DEY
0CD2F                           
0CD2F                               ;; If X MOD 8 == 0, don't apply top left metatile
0CD2F 8A                            TXA
0CD30 29 07                         AND #%00000111
0CD32 F0 11                         BEQ +
0CD34                           
0CD34                               ;; If X < $10, don't apply top left metatile
0CD34 8A                            TXA
0CD35 29 F0                         AND #%11110000
0CD37 F0 0C                         BEQ +
0CD39                           
0CD39                               ;; Add metatile4 subpalette to attribute value
0CD39 B9 00 04                      LDA tile_type,y
0CD3C 29 0C                         AND #%00001100
0CD3E 4A                            LSR
0CD3F 4A                            LSR
0CD40 05 02                         ORA temp+2
0CD42 4C 47 CD                      JMP ++
0CD45                               +
0CD45 A5 02                         LDA temp+2
0CD47                               ++
0CD47 9D A0 04                      STA tile_attributes,x
0CD4A                           
0CD4A                               ;; Check the next attribute, if any left
0CD4A E8                            INX
0CD4B E0 38                         CPX #$38
0CD4D F0 03                         BEQ +
0CD4F 4C C5 CC                          JMP -attributeLoop
0CD52                               +
0CD52                           
0CD52                               ;; Stream attribute RAM to PPU
0CD52 2C 02 20                      BIT PPU_STATUS
0CD55 A9 23                         LDA #$23
0CD57 8D 06 20                      STA PPU_ADDR
0CD5A A9 C0                         LDA #$C0
0CD5C 8D 06 20                      STA PPU_ADDR
0CD5F A2 00                         LDX #$00
0CD61                               -
0CD61 BD A0 04                          LDA tile_attributes,x
0CD64 8D 07 20                          STA PPU_DATA
0CD67 E8                                INX
0CD68 E0 40                             CPX #$40
0CD6A D0 F5                         BNE -
0CD6C                           
0CD6C                               ;; Set initial ball position
0CD6C A6 41                         LDX current_level
0CD6E BD 6A D8                      LDA tbl_lvl_ball_startpos,x
0CD71 29 F0                         AND #%11110000
0CD73 18                            CLC
0CD74 69 34                         ADC #$34
0CD76 85 19                         STA ball_ypos_hi
0CD78 BD 6A D8                      LDA tbl_lvl_ball_startpos,x
0CD7B 0A                            ASL
0CD7C 0A                            ASL
0CD7D 0A                            ASL
0CD7E 0A                            ASL
0CD7F 18                            CLC
0CD80 69 14                         ADC #$14
0CD82 85 17                         STA ball_xpos_hi
0CD84 A9 00                         LDA #$00
0CD86 85 18                         STA ball_xpos_lo
0CD88 85 1A                         STA ball_ypos_lo
0CD8A                               
0CD8A                               ;; Set initial ball color and direction
0CD8A BD 83 D8                      LDA tbl_lvl_ball_init,x
0CD8D 29 F0                         AND #%11110000
0CD8F 85 37                         STA ball_flags
0CD91 20 90 C6                      JSR sub_ColorizeBall
0CD94                               
0CD94                               ;; Reset bonus timer
0CD94 A9 06                         LDA #BONUS_FRAMES
0CD96 85 3F                         STA bonus_timer
0CD98                               
0CD98                               ;; Play background noise
0CD98 A9 08                         LDA #$08
0CD9A 8D 15 40                      STA APU_STATUS
0CD9D 8D 0F 40                      STA NOISE_LENGTH
0CDA0 A9 0E                         LDA #$0E
0CDA2 85 46                         STA current_noise
0CDA4 A9 00                         LDA #$00
0CDA6 85 44                         STA max_noise
0CDA8 85 47                         STA noise_timer
0CDAA 85 45                         STA sweep_noise
0CDAC 20 BC C5                      JSR sub_BackgroundNoise
0CDAF                           
0CDAF                               ;; Return
0CDAF 60                            RTS
0CDB0                           
0CDB0                           
0CDB0                           ;; Subroutine: draw 28 tiles in a row
0CDB0                           sub_Draw28HorizontalTiles:
0CDB0 A2 1C                         LDX #28
0CDB2                               -
0CDB2 8D 07 20                          STA PPU_DATA
0CDB5 CA                                DEX
0CDB6 D0 FA                         BNE -
0CDB8 60                            RTS0CDB9                           .include "game/subroutine/LoadIntroScreen.asm"
0CDB9                           sub_LoadIntroScreen:
0CDB9                           
0CDB9                               ;; Load intro palette
0CDB9 2C 02 20                      BIT PPU_STATUS
0CDBC A9 3F                         LDA #$3F
0CDBE 8D 06 20                      STA PPU_ADDR
0CDC1 A9 00                         LDA #$00
0CDC3 8D 06 20                      STA PPU_ADDR
0CDC6 A2 00                         LDX #$00
0CDC8                               -
0CDC8 BD 0F D0                          LDA tbl_IntroScreenPalette,x
0CDCB 8D 07 20                          STA PPU_DATA
0CDCE E8                                INX
0CDCF E0 20                             CPX #$20
0CDD1 D0 F5                         BNE -
0CDD3                               
0CDD3                               ;; Put ball in the middle
0CDD3 A9 7C                         LDA #$7C
0CDD5 85 17                         STA ball_xpos_hi
0CDD7 85 19                         STA ball_ypos_hi
0CDD9                           
0CDD9                               ;; Clear the screen
0CDD9 20 25 C6                      JSR sub_ClearScreen
0CDDC                           
0CDDC                               ;; Set up intro screen draw loop
0CDDC A2 00                         LDX #$00
0CDDE                           
0CDDE                           -loop_IntroScreenData:
0CDDE                           
0CDDE                               ;; Get current byte from intro screen data
0CDDE BD 37 D0                      LDA tbl_IntroScreenData,x
0CDE1                           
0CDE1                               ;; If current byte is #$3F, we're done drawing.
0CDE1 C9 3F                         CMP #$3F
0CDE3 D0 03                         BNE +
0CDE5 4C 32 CE                          JMP +goToEndIntroScreen
0CDE8                               +
0CDE8                           
0CDE8                               ;; If highest bits are %11, draw a plain tile
0CDE8 29 C0                         AND #%11000000
0CDEA D0 03                         BNE +
0CDEC 4C 12 CE                          JMP +drawTile
0CDEF                               +
0CDEF                               
0CDEF                               ;; If highest bits are %01, set the PPU address
0CDEF                               ;; If not, draw two logo tiles
0CDEF C9 40                         CMP #%01000000
0CDF1 D0 03                         BNE +drawLogo
0CDF3 4C 1C CE                          JMP +setPpuAddr
0CDF6                           
0CDF6                           +drawLogo:
0CDF6                               ;; Get bits 0-2 and store in a temp variable
0CDF6 BD 37 D0                      LDA tbl_IntroScreenData,x
0CDF9 29 07                         AND #%00000111
0CDFB 85 00                         STA temp
0CDFD                               
0CDFD                               ;; Get bits 3-5, shift over to get a value from 0-7
0CDFD BD 37 D0                      LDA tbl_IntroScreenData,x
0CE00 4A                            LSR
0CE01 4A                            LSR
0CE02 4A                            LSR
0CE03 29 07                         AND #%00000111
0CE05                               
0CE05                               ;; Draw the tile that corresponds with that value
0CE05 A8                            TAY
0CE06 20 08 C7                      JSR sub_drawIntroScreenLogoTile
0CE09                               
0CE09                               ;; Do the same for the value stored in temp
0CE09 A4 00                         LDY temp
0CE0B 20 08 C7                      JSR sub_drawIntroScreenLogoTile
0CE0E                           
0CE0E                               ;; Next byte please
0CE0E E8                            INX
0CE0F 4C DE CD                      JMP -loop_IntroScreenData
0CE12                           
0CE12                           +drawTile:
0CE12                               ;; Just draw the tile value on screen
0CE12 BD 37 D0                      LDA tbl_IntroScreenData,x
0CE15 8D 07 20                      STA PPU_DATA
0CE18                               
0CE18                               ;; Next byte please
0CE18 E8                            INX
0CE19 4C DE CD                      JMP -loop_IntroScreenData
0CE1C                           
0CE1C                           
0CE1C                           +setPpuAddr:
0CE1C                               ;; Reset the PPU latch
0CE1C 2C 02 20                      BIT PPU_STATUS
0CE1F                               
0CE1F                               ;; Sanitize and write the high byte of the PPU address
0CE1F BD 37 D0                      LDA tbl_IntroScreenData,x
0CE22 29 3F                         AND #%00111111
0CE24 8D 06 20                      STA PPU_ADDR
0CE27                           
0CE27                               ;; Write the low byte of the PPU address
0CE27 E8                            INX
0CE28 BD 37 D0                      LDA tbl_IntroScreenData,x
0CE2B 8D 06 20                      STA PPU_ADDR
0CE2E                               
0CE2E                               ;; PPU has been set up to draw tiles at the correct spot now.
0CE2E                               
0CE2E                               ;; Next byte please.
0CE2E E8                            INX
0CE2F 4C DE CD                      JMP -loop_IntroScreenData
0CE32                           
0CE32                           +goToEndIntroScreen:
0CE32                           
0CE32                               ;; To color the 1.LEVEL: line green, we need to update two
0CE32                               ;; values in the PPU attribute data.
0CE32 2C 02 20                      BIT PPU_STATUS
0CE35 A9 23                         LDA #$23
0CE37 8D 06 20                      STA PPU_ADDR
0CE3A A9 CB                         LDA #$CB
0CE3C 8D 06 20                      STA PPU_ADDR
0CE3F A9 0A                         LDA #%00001010
0CE41 8D 07 20                      STA PPU_DATA
0CE44 8D 07 20                      STA PPU_DATA
0CE47                           
0CE47 60                            RTS
0CE48                           
0CE48                           .include "game/subroutine/LoadWinScreen.asm"
0CE48                           sub_LoadWinScreen:
0CE48 60                            RTS
0CE49                           
0CE49                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CE49                           sub_RemoveBlockFromScreen:
0CE49                           
0CE49                               ;; Get current buffer location
0CE49 A4 3A                         LDY ppu_buffer_pointer
0CE4B                               
0CE4B                               ;; TILE 1: if metatile on top left is solid, draw
0CE4B                               ;; null tile, else draw random noise tile
0CE4B A9 00                         LDA #$00
0CE4D 85 39                         STA ppu_buffer_update
0CE4F                               
0CE4F A5 00                         LDA temp
0CE51 99 00 03                      STA ppu_buffer,y
0CE54 C8                            INY
0CE55 A5 01                         LDA temp+1
0CE57 99 00 03                      STA ppu_buffer,y
0CE5A C8                            INY
0CE5B                               
0CE5B 8A                            TXA
0CE5C 29 0F                         AND #%00001111
0CE5E F0 11                         BEQ +drawRandomTile
0CE60                           
0CE60 8A                            TXA
0CE61 29 F0                         AND #%11110000
0CE63 F0 0C                         BEQ +drawRandomTile
0CE65                           
0CE65 BD EF 03                      LDA tile_type-17,x
0CE68 29 01                         AND #%00000001
0CE6A F0 05                         BEQ +drawRandomTile  
0CE6C                           
0CE6C                               ;; Draw a null tile
0CE6C A9 00                         LDA #$00
0CE6E 4C 79 CE                      JMP +addToPPUBuffer
0CE71                               
0CE71                           +drawRandomTile:
0CE71                               ;; Draw a random tile
0CE71 20 2C C5                      JSR sub_GetRandomNumber
0CE74 29 07                         AND #%00000111
0CE76 18                            CLC
0CE77 69 68                         ADC #$68
0CE79                               
0CE79                               ;; Add tile to ppu buffer
0CE79                           +addToPPUBuffer:
0CE79 99 00 03                      STA ppu_buffer,y
0CE7C C8                            INY
0CE7D                           
0CE7D                               ;; TILE 2: If metatile above is solid, draw null,
0CE7D                               ;; else draw random noise.
0CE7D E6 01                         INC temp+1
0CE7F A5 00                         LDA temp
0CE81 99 00 03                      STA ppu_buffer,y
0CE84 C8                            INY
0CE85 A5 01                         LDA temp+1
0CE87 99 00 03                      STA ppu_buffer,y
0CE8A C8                            INY
0CE8B                               
0CE8B 8A                            TXA
0CE8C 29 F0                         AND #%11110000
0CE8E F0 0C                         BEQ +drawRandomTile
0CE90                               
0CE90 BD F0 03                      LDA tile_type-16,x
0CE93 29 01                         AND #%00000001
0CE95 F0 05                         BEQ +drawRandomTile
0CE97                               
0CE97 A9 00                         LDA #%00
0CE99 4C A4 CE                      JMP +addToPPUBuffer
0CE9C                           
0CE9C                           +drawRandomTile:
0CE9C 20 2C C5                      JSR sub_GetRandomNumber
0CE9F 29 07                         AND #%00000111
0CEA1 18                            CLC
0CEA2 69 68                         ADC #$68
0CEA4                           
0CEA4                           +addToPPUBuffer:
0CEA4 99 00 03                      STA ppu_buffer,y
0CEA7 C8                            INY
0CEA8                               
0CEA8                               ;; TILE 3 - If metatile left is solid, draw null,
0CEA8                               ;; else draw random noise.
0CEA8 A5 01                         LDA temp+1
0CEAA 18                            CLC
0CEAB 69 1F                         ADC #$1F
0CEAD 85 01                         STA temp+1
0CEAF A5 00                         LDA temp
0CEB1 69 00                         ADC #$00
0CEB3 85 00                         STA temp
0CEB5 99 00 03                      STA ppu_buffer,y
0CEB8 C8                            INY
0CEB9 A5 01                         LDA temp+1
0CEBB 99 00 03                      STA ppu_buffer,y
0CEBE C8                            INY
0CEBF                               
0CEBF 8A                            TXA
0CEC0 29 0F                         AND #%00001111
0CEC2 F0 0C                         BEQ +drawRandomTile
0CEC4                               
0CEC4 BD FF 03                      LDA tile_type-1,x
0CEC7 29 01                         AND #%00000001
0CEC9 F0 05                         BEQ +drawRandomTile
0CECB                               
0CECB A9 00                         LDA #%00
0CECD 4C D8 CE                      JMP +addToPPUBuffer
0CED0                           
0CED0                           +drawRandomTile:
0CED0 20 2C C5                      JSR sub_GetRandomNumber
0CED3 29 07                         AND #%00000111
0CED5 18                            CLC
0CED6 69 68                         ADC #$68
0CED8                               
0CED8                           +addToPPUBuffer:
0CED8 99 00 03                      STA ppu_buffer,y
0CEDB C8                            INY
0CEDC                               
0CEDC                               ;; TILE 4 - Always random noise
0CEDC E6 01                         INC temp+1
0CEDE A5 00                         LDA temp
0CEE0 99 00 03                      STA ppu_buffer,y
0CEE3 C8                            INY
0CEE4 A5 01                         LDA temp+1
0CEE6 99 00 03                      STA ppu_buffer,y
0CEE9 C8                            INY
0CEEA 20 2C C5                      JSR sub_GetRandomNumber
0CEED 29 07                         AND #%00000111
0CEEF 18                            CLC
0CEF0 69 68                         ADC #$68
0CEF2 99 00 03                      STA ppu_buffer,y
0CEF5 C8                            INY
0CEF6                           
0CEF6                               ;; TILE 5 - If tile on the right is solid, skip,
0CEF6                               ;; else draw random noise tile
0CEF6 E6 01                         INC temp+1
0CEF8                               
0CEF8 8A                            TXA
0CEF9 29 0F                         AND #%00001111
0CEFB C9 0D                         CMP #$0D
0CEFD F0 1F                         BEQ +skipTile
0CEFF                               
0CEFF BD 01 04                      LDA tile_type+1,x
0CF02 29 01                         AND #%00000001
0CF04 D0 18                         BNE +skipTile
0CF06 A5 00                             LDA temp
0CF08 99 00 03                          STA ppu_buffer,y
0CF0B C8                                INY
0CF0C A5 01                             LDA temp+1
0CF0E 99 00 03                          STA ppu_buffer,y
0CF11 C8                                INY
0CF12 20 2C C5                          JSR sub_GetRandomNumber
0CF15 29 07                             AND #%00000111
0CF17 18                                CLC
0CF18 69 68                             ADC #$68
0CF1A 99 00 03                          STA ppu_buffer,y
0CF1D C8                                INY    
0CF1E                               +skipTile:
0CF1E                           
0CF1E                               ;; TILE 6 - If tile on bottom is solid, skip,
0CF1E                               ;; else draw random noise
0CF1E A5 01                         LDA temp+1
0CF20 18                            CLC
0CF21 69 1F                         ADC #$1F
0CF23 85 01                         STA temp+1
0CF25 A5 00                         LDA temp
0CF27 69 00                         ADC #$00
0CF29 85 00                         STA temp
0CF2B                           
0CF2B 8A                            TXA
0CF2C 29 F0                         AND #%11110000
0CF2E C9 90                         CMP #$90
0CF30 F0 1F                         BEQ +skipTile
0CF32                           
0CF32 BD 10 04                      LDA tile_type+16,x
0CF35 29 01                         AND #%00000001
0CF37 D0 18                         BNE +skipTile
0CF39 A5 00                             LDA temp
0CF3B 99 00 03                          STA ppu_buffer,y
0CF3E C8                                INY
0CF3F A5 01                             LDA temp+1
0CF41 99 00 03                          STA ppu_buffer,y
0CF44 C8                                INY
0CF45 20 2C C5                          JSR sub_GetRandomNumber
0CF48 29 07                             AND #%00000111
0CF4A 18                                CLC
0CF4B 69 68                             ADC #$68
0CF4D 99 00 03                          STA ppu_buffer,y
0CF50 C8                                INY    
0CF51                               +skipTile:
0CF51                               
0CF51                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CF51                               ;; else draw random noise
0CF51 E6 01                         INC temp+1
0CF53                           
0CF53 8A                            TXA
0CF54 29 F0                         AND #%11110000
0CF56 C9 90                         CMP #$90
0CF58 F0 26                         BEQ +skipTile
0CF5A                               
0CF5A 8A                            TXA
0CF5B 29 0F                         AND #%00001111
0CF5D C9 0D                         CMP #$0D
0CF5F F0 1F                         BEQ +skipTile
0CF61                               
0CF61 BD 11 04                      LDA tile_type+17,x
0CF64 29 01                         AND #%00000001
0CF66 D0 18                         BNE +skipTile
0CF68 A5 00                             LDA temp
0CF6A 99 00 03                          STA ppu_buffer,y
0CF6D C8                                INY
0CF6E A5 01                             LDA temp+1
0CF70 99 00 03                          STA ppu_buffer,y
0CF73 C8                                INY
0CF74 20 2C C5                          JSR sub_GetRandomNumber
0CF77 29 07                             AND #%00000111
0CF79 18                                CLC
0CF7A 69 68                             ADC #$68
0CF7C 99 00 03                          STA ppu_buffer,y
0CF7F C8                                INY    
0CF80                               +skipTile:   
0CF80                           
0CF80                           
0CF80                               ;; Update attribute table accordingly through ppu buffer
0CF80 20 BF CF                      JSR sub_SetTileAttributeAddress
0CF83                               
0CF83 8A                            TXA
0CF84 29 10                         AND #%00010000
0CF86 F0 05                         BEQ +
0CF88 A9 F0                             LDA #%11110000
0CF8A 4C 8F CF                          JMP ++
0CF8D                               +
0CF8D A9 0F                         LDA #%00001111
0CF8F                               ++
0CF8F 85 02                         STA temp+2
0CF91                               
0CF91 8A                            TXA
0CF92 48                            PHA
0CF93 29 01                         AND #%00000001
0CF95 F0 07                         BEQ +
0CF97 A5 02                             LDA temp+2
0CF99 09 CC                             ORA #%11001100
0CF9B 4C A2 CF                          JMP ++
0CF9E                               +
0CF9E A5 02                         LDA temp+2
0CFA0 09 33                         ORA #%00110011
0CFA2                               ++
0CFA2 85 02                         STA temp+2
0CFA4                               
0CFA4 A5 00                         LDA temp
0CFA6 38                            SEC
0CFA7 E9 C0                         SBC #$C0
0CFA9 AA                            TAX
0CFAA BD A0 04                      LDA tile_attributes,x
0CFAD 25 02                         AND temp+2
0CFAF 9D A0 04                      STA tile_attributes,x
0CFB2 99 00 03                      STA ppu_buffer,y
0CFB5 C8                            INY
0CFB6 68                            PLA
0CFB7 AA                            TAX
0CFB8                           
0CFB8                               ;; Tell PPU to update tiles and attributes next frame
0CFB8 84 3A                         STY ppu_buffer_pointer
0CFBA A9 01                         LDA #$01
0CFBC 85 39                         STA ppu_buffer_update
0CFBE                            
0CFBE                               ;; We're done - return
0CFBE 60                            RTS0CFBF                           .include "game/subroutine/SetTileAttributeAddress.asm"
0CFBF                           
0CFBF                           sub_SetTileAttributeAddress:
0CFBF A9 23                         LDA #$23
0CFC1 99 00 03                      STA ppu_buffer,y
0CFC4 C8                            INY
0CFC5                               
0CFC5 8A                            TXA
0CFC6 29 F0                         AND #%11110000
0CFC8 4A                            LSR
0CFC9 4A                            LSR
0CFCA 4A                            LSR
0CFCB 4A                            LSR
0CFCC 18                            CLC
0CFCD 69 01                         ADC #1
0CFCF 4A                            LSR
0CFD0 0A                            ASL
0CFD1 0A                            ASL
0CFD2 0A                            ASL
0CFD3 18                            CLC
0CFD4 69 C8                         ADC #$C8
0CFD6 85 00                         STA temp
0CFD8 8A                            TXA
0CFD9 29 0F                         AND #%00001111
0CFDB 18                            CLC
0CFDC 69 01                         ADC #$01
0CFDE 4A                            LSR
0CFDF 18                            CLC
0CFE0 65 00                         ADC temp
0CFE2 85 00                         STA temp
0CFE4 99 00 03                      STA ppu_buffer,y
0CFE7 C8                            INY
0CFE8                                  
0CFE8 60                            RTS
0CFE9                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CFE9                           sub_WriteByteToPPUBuffer:
0CFE9                           
0CFE9                               ;; Prevent updating until full 3-byte buffer is filled,
0CFE9                               ;; so that graphics won't glitch out if NMI happens during
0CFE9                               ;; updating the buffer
0CFE9 A9 00                         LDA #$00
0CFEB 85 39                         STA ppu_buffer_update
0CFED                           
0CFED                               ;; Check if buffer full; if so, wait a frame and force update
0CFED A4 3A                         LDY ppu_buffer_pointer
0CFEF C0 60                         CPY #$60
0CFF1 D0 05                         BNE +
0CFF3 E6 39                             INC ppu_buffer_update
0CFF5 20 57 C5                          JSR sub_WaitForVBlank
0CFF8                               +
0CFF8                           
0CFF8                               ;; Add ppu_addr high byte to buffer
0CFF8 A5 00                         LDA temp
0CFFA 99 00 03                      STA ppu_buffer,y
0CFFD                           
0CFFD                               ;; Add ppu_addr low byte to buffer
0CFFD C8                            INY
0CFFE A5 01                         LDA temp+1
0D000 99 00 03                      STA ppu_buffer,y
0D003                           
0D003                               ;; Add ppu_data to buffer
0D003 C8                            INY
0D004 A5 02                         LDA temp+2
0D006 99 00 03                      STA ppu_buffer,y
0D009                           
0D009                               ;; Update buffer pointer
0D009 C8                            INY
0D00A 84 3A                         STY ppu_buffer_pointer
0D00C                           
0D00C                               ;; Tell NMI to update next round
0D00C E6 39                         INC ppu_buffer_update
0D00E                           
0D00E                               ;; Return
0D00E 60                            RTS0D00F                           
0D00F                           ;; LUTs
0D00F                           .include "game/include/tables.asm"
0D00F                           
0D00F                           ;; Initial screen palette
0D00F                           tbl_IntroScreenPalette:
0D00F 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D013 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D017 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D01B 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D01F                           
0D01F 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D023 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D027 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D02B 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D02F                           
0D02F                           
0D02F                           ;; Intro: mapping logo index to chr tile
0D02F                           tbl_IntroScreenLogoChr:
0D02F 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D037                           
0D037                           
0D037                           ;; Intro screen data
0D037                           tbl_IntroScreenData:
0D037                           
0D037                               ;; Set PPU address $20AC and draw
0D037 60 AC                         .db #$60, #$AC
0D039 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D041                           
0D041                               ;; Set PPU address $20CF and draw
0D041 60 CF                         .db #$60, #$CF
0D043 01 02                         .db #_0, #_1
0D045                               
0D045                               ;; Set PPU address $2122 and draw
0D045 61 22                         .db #$61, #$22
0D047 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D04E 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D054 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D05C 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D061                               
0D061                               ;; Set PPU address $2147 and draw
0D061 61 47                         .db #$61, #$47
0D063 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D06A 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D06E 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D074 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D07A                               
0D07A                               ;; Set PPU address $218B and draw
0D07A 61 8B                         .db #$61, #$8B
0D07C 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D082 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D087                               
0D087                               ;; Set PPU address $21E6 and draw
0D087 61 E6                         .db #$61, #$E6
0D089 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D091 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D095 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D09C                               
0D09C                               ;; Set PPU address $222D and draw
0D09C 62 2D                         .db #$62, #$2D
0D09E 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D0A4                               
0D0A4                               ;; Set PPU address $2281
0D0A4 62 81                         .db #$62, #$81
0D0A6                               
0D0A6                               ;; Draw the Crillion logo
0D0A6 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D0AA C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0AE C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D0B2 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D0B6                               
0D0B6 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D0BA C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0BE C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0C2 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0C6                               
0D0C6 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D0CA C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0CE C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0D2 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0D6                           
0D0D6 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D0DA C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0DE C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0E2 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0E6                               
0D0E6 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D0EA C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D0EE C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D0F2 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D0F6                           
0D0F6 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D0FA C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D0FE C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D102 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D105                           
0D105                               ;; End of intro
0D105 3F                            .db #$3F
0D106                           
0D106                           
0D106                           ;; Animation frames table
0D106                           .include "game/include/table/animation_frames.asm"
0D106                           ;; CHR tile-id's per slide of explosion
0D106                           explosion_slide0:
0D106 00 00 00                      .db #$00, #$00, #$00
0D109 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D10C 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D10F                           
0D10F                           explosion_slide1:
0D10F 00 00 00                      .db #$00, #$00, #$00
0D112 29 2A 2B                      .db #$29, #$2A, #$2B
0D115 39 3A 3B                      .db #$39, #$3A, #$3B
0D118                           
0D118                           explosion_slide2:
0D118 16 00 00                      .db #$16, #$00, #$00
0D11B 26 27 28                      .db #$26, #$27, #$28
0D11E 36 37 38                      .db #$36, #$37, #$38
0D121                           
0D121                           explosion_slide3:
0D121 00 14 15                      .db #$00, #$14, #$15
0D124 23 24 25                      .db #$23, #$24, #$25
0D127 33 34 35                      .db #$33, #$34, #$35
0D12A                           
0D12A                           explosion_slide4:
0D12A 10 11 12                      .db #$10, #$11, #$12
0D12D 20 21 22                      .db #$20, #$21, #$22
0D130 30 31 32                      .db #$30, #$31, #$32
0D133                           
0D133                           ;; High and low bytes of animation slides
0D133                           explosion_anim_hi:
0D133 D1                            .db >#explosion_slide0
0D134 D1                            .db >#explosion_slide1
0D135 D1                            .db >#explosion_slide2
0D136 D1                            .db >#explosion_slide3
0D137 D1                            .db >#explosion_slide4
0D138 D1                            .db >#explosion_slide4
0D139 D1                            .db >#explosion_slide3
0D13A D1                            .db >#explosion_slide2
0D13B D1                            .db >#explosion_slide1
0D13C D1                            .db >#explosion_slide0
0D13D                           
0D13D                           explosion_anim_lo:
0D13D 06                            .db <#explosion_slide0
0D13E 0F                            .db <#explosion_slide1
0D13F 18                            .db <#explosion_slide2
0D140 21                            .db <#explosion_slide3
0D141 2A                            .db <#explosion_slide4
0D142 2A                            .db <#explosion_slide4
0D143 21                            .db <#explosion_slide3
0D144 18                            .db <#explosion_slide2
0D145 0F                            .db <#explosion_slide1
0D146 06                            .db <#explosion_slide0
0D147                           
0D147                           
0D147                           
0D147                           ;; Ball palette color table (CBRYGM)
0D147                           tbl_BallColorDark:
0D147 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D14D                            
0D14D                           tbl_BallColorLight:
0D14D 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D153                           
0D153                               
0D153                           ;; Screen mode drawing routine addresses
0D153                           tbl_LoadScreenHi:
0D153 CD C9 CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D156                           
0D156                           tbl_LoadScreenLo:
0D156 B9 FD 48                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D159                           
0D159                           
0D159                           ;; Level data
0D159                           .include "game/include/table/level_data.asm"
0D159                           lvl_layout_01:
0D159 61 21                         .db #$61, #%00100001
0D15B 52 61                         .db #$52, #%01100001
0D15D 43 65                         .db #$43, #%01100101
0D15F 83 05                         .db #$83, #%00000101
0D161 93 15                         .db #$93, #%00010101
0D163 34 7A                         .db #$34, #%01111010
0D165 74 7A                         .db #$74, #%01111010
0D167 35 7A                         .db #$35, #%01111010
0D169 75 7A                         .db #$75, #%01111010
0D16B 46 65                         .db #$46, #%01100101
0D16D 86 25                         .db #$86, #%00100101
0D16F 57 61                         .db #$57, #%01100001
0D171 68 21                         .db #$68, #%00100001
0D173 FF                            .db #LEVEL_END
0D174                           
0D174                           lvl_layout_02:
0D174 C0 0A                         .db #$C0, #%00001010
0D176 11 15                         .db #$11, #%00010101
0D178 21 62                         .db #$21, #%01100010
0D17A 61 62                         .db #$61, #%01100010
0D17C A1 42                         .db #$A1, #%01000010
0D17E 12 67                         .db #$12, #%01100111
0D180 52 67                         .db #$52, #%01100111
0D182 92 67                         .db #$92, #%01100111
0D184 C3 0D                         .db #$C3, #%00001101
0D186 14 11                         .db #$14, #%00010001
0D188 24 65                         .db #$24, #%01100101
0D18A 64 65                         .db #$64, #%01100101
0D18C A4 45                         .db #$A4, #%01000101
0D18E 15 67                         .db #$15, #%01100111
0D190 55 67                         .db #$55, #%01100111
0D192 95 67                         .db #$95, #%01100111
0D194 17 12                         .db #$17, #%00010010
0D196 27 61                         .db #$27, #%01100001
0D198 67 61                         .db #$67, #%01100001
0D19A A7 41                         .db #$A7, #%01000001
0D19C 38 7A                         .db #$38, #%01111010
0D19E 98 5A                         .db #$98, #%01011010
0D1A0 18 27                         .db #$18, #%00100111
0D1A2 48 27                         .db #$48, #%00100111
0D1A4 78 27                         .db #$78, #%00100111
0D1A6 C8 07                         .db #$C8, #%00000111
0D1A8 FF                            .db #LEVEL_END
0D1A9                           
0D1A9                           lvl_layout_03:
0D1A9 00 7A                         .db #$00, #%01111010
0D1AB 40 7A                         .db #$40, #%01111010
0D1AD 80 7A                         .db #$80, #%01111010
0D1AF C0 1A                         .db #$C0, #%00011010
0D1B1 10 A1                         .db #$10, #%10100001
0D1B3 13 E1                         .db #$13, #%11100001
0D1B5 17 C1                         .db #$17, #%11000001
0D1B7 30 C1                         .db #$30, #%11000001
0D1B9 34 C1                         .db #$34, #%11000001
0D1BB 38 A1                         .db #$38, #%10100001
0D1BD 50 E1                         .db #$50, #%11100001
0D1BF 55 81                         .db #$55, #%10000001
0D1C1 57 C1                         .db #$57, #%11000001
0D1C3 70 C1                         .db #$70, #%11000001
0D1C5 73 A1                         .db #$73, #%10100001
0D1C7 76 E1                         .db #$76, #%11100001
0D1C9 90 E1                         .db #$90, #%11100001
0D1CB 95 81                         .db #$95, #%10000001
0D1CD 97 C1                         .db #$97, #%11000001
0D1CF B0 C1                         .db #$B0, #%11000001
0D1D1 B4 C1                         .db #$B4, #%11000001
0D1D3 B8 A1                         .db #$B8, #%10100001
0D1D5 D0 A1                         .db #$D0, #%10100001
0D1D7 D3 E1                         .db #$D3, #%11100001
0D1D9 D7 C1                         .db #$D7, #%11000001
0D1DB FF                            .db #LEVEL_END
0D1DC                           
0D1DC                           lvl_layout_04:
0D1DC 00 4C                         .db #$00, #%01001100
0D1DE 40 6C                         .db #$40, #%01101100
0D1E0 80 4C                         .db #$80, #%01001100
0D1E2 81 AC                         .db #$81, #%10101100
0D1E4 C1 2C                         .db #$C1, #%00101100
0D1E6 02 6C                         .db #$02, #%01101100
0D1E8 42 CC                         .db #$42, #%11001100
0D1EA 62 EC                         .db #$62, #%11101100
0D1EC A2 CC                         .db #$A2, #%11001100
0D1EE C3 CC                         .db #$C3, #%11001100
0D1F0 04 4C                         .db #$04, #%01001100
0D1F2 84 2C                         .db #$84, #%00101100
0D1F4 25 AC                         .db #$25, #%10101100
0D1F6 85 AC                         .db #$85, #%10101100
0D1F8 06 AC                         .db #$06, #%10101100
0D1FA 36 CC                         .db #$36, #%11001100
0D1FC 56 CC                         .db #$56, #%11001100
0D1FE 66 EC                         .db #$66, #%11101100
0D200 96 6C                         .db #$96, #%01101100
0D202 C7 AC                         .db #$C7, #%10101100
0D204 08 2C                         .db #$08, #%00101100
0D206 78 6C                         .db #$78, #%01101100
0D208 D8 0C                         .db #$D8, #%00001100
0D20A 30 A1                         .db #$30, #%10100001
0D20C B0 21                         .db #$B0, #%00100001
0D20E 01 41                         .db #$01, #%01000001
0D210 41 61                         .db #$41, #%01100001
0D212 91 A1                         .db #$91, #%10100001
0D214 A1 21                         .db #$A1, #%00100001
0D216 52 C1                         .db #$52, #%11000001
0D218 72 E1                         .db #$72, #%11100001
0D21A B2 C1                         .db #$B2, #%11000001
0D21C C2 21                         .db #$C2, #%00100001
0D21E 03 41                         .db #$03, #%01000001
0D220 33 C1                         .db #$33, #%11000001
0D222 83 21                         .db #$83, #%00100001
0D224 D3 E1                         .db #$D3, #%11100001
0D226 05 21                         .db #$05, #%00100001
0D228 45 E1                         .db #$45, #%11100001
0D22A A5 21                         .db #$A5, #%00100001
0D22C 16 A1                         .db #$16, #%10100001
0D22E 76 A1                         .db #$76, #%10100001
0D230 27 A1                         .db #$27, #%10100001
0D232 57 21                         .db #$57, #%00100001
0D234 87 41                         .db #$87, #%01000001
0D236 B7 A1                         .db #$B7, #%10100001
0D238 19 21                         .db #$19, #%00100001
0D23A 39 41                         .db #$39, #%01000001
0D23C 89 41                         .db #$89, #%01000001
0D23E C9 21                         .db #$C9, #%00100001
0D240 D0 1A                         .db #$D0, #%00011010
0D242 55 1A                         .db #$55, #%00011010
0D244 95 1A                         .db #$95, #%00011010
0D246 D7 1A                         .db #$D7, #%00011010
0D248 09 1A                         .db #$09, #%00011010
0D24A 79 1A                         .db #$79, #%00011010
0D24C FF                            .db #LEVEL_END
0D24D                           
0D24D                           lvl_layout_05:
0D24D 40 0A                         .db #$40, #%00001010
0D24F 70 1A                         .db #$70, #%00011010
0D251 B0 42                         .db #$B0, #%01000010
0D253 41 A7                         .db #$41, #%10100111
0D255 B1 22                         .db #$B1, #%00100010
0D257 D1 15                         .db #$D1, #%00010101
0D259 22 0A                         .db #$22, #%00001010
0D25B 52 05                         .db #$52, #%00000101
0D25D B2 42                         .db #$B2, #%01000010
0D25F 03 27                         .db #$03, #%00100111
0D261 33 67                         .db #$33, #%01100111
0D263 73 67                         .db #$73, #%01100111
0D265 B3 47                         .db #$B3, #%01000111
0D267 05 E5                         .db #$05, #%11100101
0D269 25 A5                         .db #$25, #%10100101
0D26B 35 25                         .db #$35, #%00100101
0D26D 65 45                         .db #$65, #%01000101
0D26F A5 45                         .db #$A5, #%01000101
0D271 46 E5                         .db #$46, #%11100101
0D273 66 E5                         .db #$66, #%11100101
0D275 86 E5                         .db #$86, #%11100101
0D277 A6 E2                         .db #$A6, #%11100010
0D279 C6 E5                         .db #$C6, #%11100101
0D27B 27 25                         .db #$27, #%00100101
0D27D 77 05                         .db #$77, #%00000101
0D27F B7 02                         .db #$B7, #%00000010
0D281 09 05                         .db #$09, #%00000101
0D283 79 05                         .db #$79, #%00000101
0D285 B9 02                         .db #$B9, #%00000010
0D287 FF                            .db #LEVEL_END
0D288                           
0D288                           lvl_layout_06:
0D288 00 03                         .db #$00, #%00000011
0D28A 20 03                         .db #$20, #%00000011
0D28C 40 03                         .db #$40, #%00000011
0D28E A0 03                         .db #$A0, #%00000011
0D290 C0 03                         .db #$C0, #%00000011
0D292 11 03                         .db #$11, #%00000011
0D294 31 03                         .db #$31, #%00000011
0D296 51 03                         .db #$51, #%00000011
0D298 91 03                         .db #$91, #%00000011
0D29A B1 03                         .db #$B1, #%00000011
0D29C D1 03                         .db #$D1, #%00000011
0D29E 02 03                         .db #$02, #%00000011
0D2A0 22 03                         .db #$22, #%00000011
0D2A2 42 03                         .db #$42, #%00000011
0D2A4 A2 03                         .db #$A2, #%00000011
0D2A6 C2 03                         .db #$C2, #%00000011
0D2A8 13 03                         .db #$13, #%00000011
0D2AA 33 03                         .db #$33, #%00000011
0D2AC 53 03                         .db #$53, #%00000011
0D2AE 93 03                         .db #$93, #%00000011
0D2B0 B3 03                         .db #$B3, #%00000011
0D2B2 D3 03                         .db #$D3, #%00000011
0D2B4 04 03                         .db #$04, #%00000011
0D2B6 24 03                         .db #$24, #%00000011
0D2B8 44 03                         .db #$44, #%00000011
0D2BA A4 03                         .db #$A4, #%00000011
0D2BC C4 03                         .db #$C4, #%00000011
0D2BE 15 03                         .db #$15, #%00000011
0D2C0 35 03                         .db #$35, #%00000011
0D2C2 55 03                         .db #$55, #%00000011
0D2C4 95 03                         .db #$95, #%00000011
0D2C6 B5 03                         .db #$B5, #%00000011
0D2C8 D5 03                         .db #$D5, #%00000011
0D2CA 06 03                         .db #$06, #%00000011
0D2CC 26 03                         .db #$26, #%00000011
0D2CE 46 03                         .db #$46, #%00000011
0D2D0 A6 03                         .db #$A6, #%00000011
0D2D2 C6 03                         .db #$C6, #%00000011
0D2D4 17 03                         .db #$17, #%00000011
0D2D6 37 03                         .db #$37, #%00000011
0D2D8 57 03                         .db #$57, #%00000011
0D2DA 97 03                         .db #$97, #%00000011
0D2DC B7 03                         .db #$B7, #%00000011
0D2DE D7 03                         .db #$D7, #%00000011
0D2E0 08 03                         .db #$08, #%00000011
0D2E2 28 03                         .db #$28, #%00000011
0D2E4 48 03                         .db #$48, #%00000011
0D2E6 A8 03                         .db #$A8, #%00000011
0D2E8 C8 03                         .db #$C8, #%00000011
0D2EA 19 03                         .db #$19, #%00000011
0D2EC 39 03                         .db #$39, #%00000011
0D2EE 59 03                         .db #$59, #%00000011
0D2F0 99 03                         .db #$99, #%00000011
0D2F2 B9 03                         .db #$B9, #%00000011
0D2F4 D9 03                         .db #$D9, #%00000011
0D2F6 60 4B                         .db #$60, #%01001011
0D2F8 71 CB                         .db #$71, #%11001011
0D2FA 62 4B                         .db #$62, #%01001011
0D2FC 64 4B                         .db #$64, #%01001011
0D2FE 75 CB                         .db #$75, #%11001011
0D300 66 4B                         .db #$66, #%01001011
0D302 68 4B                         .db #$68, #%01001011
0D304 79 0B                         .db #$79, #%00001011
0D306 70 03                         .db #$70, #%00000011
0D308 72 03                         .db #$72, #%00000011
0D30A 74 03                         .db #$74, #%00000011
0D30C 76 03                         .db #$76, #%00000011
0D30E 78 03                         .db #$78, #%00000011
0D310 FF                            .db #LEVEL_END
0D311                           
0D311                           lvl_layout_07:
0D311 00 11                         .db #$00, #%00010001
0D313 01 FA                         .db #$01, #%11111010
0D315 12 BA                         .db #$12, #%10111010
0D317 23 DA                         .db #$23, #%11011010
0D319 34 FA                         .db #$34, #%11111010
0D31B 05 DA                         .db #$05, #%11011010
0D31D 15 FA                         .db #$15, #%11111010
0D31F 45 BA                         .db #$45, #%10111010
0D321 56 DA                         .db #$56, #%11011010
0D323 27 BA                         .db #$27, #%10111010
0D325 67 DA                         .db #$67, #%11011010
0D327 38 3A                         .db #$38, #%00111010
0D329 78 BA                         .db #$78, #%10111010
0D32B 09 3A                         .db #$09, #%00111010
0D32D 39 3A                         .db #$39, #%00111010
0D32F 89 1A                         .db #$89, #%00011010
0D331 B0 01                         .db #$B0, #%00000001
0D333 D0 01                         .db #$D0, #%00000001
0D335 A1 01                         .db #$A1, #%00000001
0D337 C1 11                         .db #$C1, #%00010001
0D339 B2 01                         .db #$B2, #%00000001
0D33B D2 01                         .db #$D2, #%00000001
0D33D A3 01                         .db #$A3, #%00000001
0D33F C3 01                         .db #$C3, #%00000001
0D341 B4 01                         .db #$B4, #%00000001
0D343 D4 01                         .db #$D4, #%00000001
0D345 A5 01                         .db #$A5, #%00000001
0D347 C5 01                         .db #$C5, #%00000001
0D349 B6 01                         .db #$B6, #%00000001
0D34B D6 01                         .db #$D6, #%00000001
0D34D A7 01                         .db #$A7, #%00000001
0D34F C7 01                         .db #$C7, #%00000001
0D351 FF                            .db #LEVEL_END
0D352                           
0D352                           lvl_layout_08:
0D352 40 B5                         .db #$40, #%10110101
0D354 31 0D                         .db #$31, #%00001101
0D356 61 10                         .db #$61, #%00010000
0D358 42 C7                         .db #$42, #%11000111
0D35A 52 67                         .db #$52, #%01100111
0D35C 63 C7                         .db #$63, #%11000111
0D35E 83 E7                         .db #$83, #%11100111
0D360 05 07                         .db #$05, #%00000111
0D362 15 3A                         .db #$15, #%00111010
0D364 07 63                         .db #$07, #%01100011
0D366 27 13                         .db #$27, #%00010011
0D368 38 A5                         .db #$38, #%10100101
0D36A 09 14                         .db #$09, #%00010100
0D36C 19 05                         .db #$19, #%00000101
0D36E D0 E0                         .db #$D0, #%11100000
0D370 C2 A0                         .db #$C2, #%10100000
0D372 B3 E0                         .db #$B3, #%11100000
0D374 D5 E0                         .db #$D5, #%11100000
0D376 C6 E0                         .db #$C6, #%11100000
0D378 B0 C4                         .db #$B0, #%11000100
0D37A C0 A4                         .db #$C0, #%10100100
0D37C D1 A4                         .db #$D1, #%10100100
0D37E C4 24                         .db #$C4, #%00100100
0D380 C5 04                         .db #$C5, #%00000100
0D382 B7 44                         .db #$B7, #%01000100
0D384 B8 A4                         .db #$B8, #%10100100
0D386 D9 05                         .db #$D9, #%00000101
0D388 FF                            .db #LEVEL_END
0D389                           
0D389                           lvl_layout_09:
0D389 81 04                         .db #$81, #%00000100
0D38B D1 04                         .db #$D1, #%00000100
0D38D 32 C4                         .db #$32, #%11000100
0D38F A2 C4                         .db #$A2, #%11000100
0D391 C2 24                         .db #$C2, #%00100100
0D393 13 24                         .db #$13, #%00100100
0D395 53 04                         .db #$53, #%00000100
0D397 C3 27                         .db #$C3, #%00100111
0D399 15 6C                         .db #$15, #%01101100
0D39B 55 6C                         .db #$55, #%01101100
0D39D 95 6C                         .db #$95, #%01101100
0D39F D5 0C                         .db #$D5, #%00001100
0D3A1 27 C7                         .db #$27, #%11000111
0D3A3 47 C7                         .db #$47, #%11000111
0D3A5 67 C7                         .db #$67, #%11000111
0D3A7 87 C7                         .db #$87, #%11000111
0D3A9 A7 C7                         .db #$A7, #%11000111
0D3AB C7 C7                         .db #$C7, #%11000111
0D3AD 08 13                         .db #$08, #%00010011
0D3AF 28 15                         .db #$28, #%00010101
0D3B1 48 12                         .db #$48, #%00010010
0D3B3 68 15                         .db #$68, #%00010101
0D3B5 88 11                         .db #$88, #%00010001
0D3B7 A8 10                         .db #$A8, #%00010000
0D3B9 C8 14                         .db #$C8, #%00010100
0D3BB 09 07                         .db #$09, #%00000111
0D3BD 19 03                         .db #$19, #%00000011
0D3BF 39 05                         .db #$39, #%00000101
0D3C1 59 02                         .db #$59, #%00000010
0D3C3 79 05                         .db #$79, #%00000101
0D3C5 99 01                         .db #$99, #%00000001
0D3C7 B9 00                         .db #$B9, #%00000000
0D3C9 D9 04                         .db #$D9, #%00000100
0D3CB FF                            .db #LEVEL_END
0D3CC                           
0D3CC                           lvl_layout_10:
0D3CC 00 02                         .db #$00, #%00000010
0D3CE 10 C9                         .db #$10, #%11001001
0D3D0 50 C9                         .db #$50, #%11001001
0D3D2 90 C9                         .db #$90, #%11001001
0D3D4 D0 C9                         .db #$D0, #%11001001
0D3D6 31 C9                         .db #$31, #%11001001
0D3D8 71 C9                         .db #$71, #%11001001
0D3DA B1 C9                         .db #$B1, #%11001001
0D3DC 13 C9                         .db #$13, #%11001001
0D3DE 53 C9                         .db #$53, #%11001001
0D3E0 93 C9                         .db #$93, #%11001001
0D3E2 D3 C9                         .db #$D3, #%11001001
0D3E4 34 C9                         .db #$34, #%11001001
0D3E6 74 C9                         .db #$74, #%11001001
0D3E8 B4 C9                         .db #$B4, #%11001001
0D3EA 16 C9                         .db #$16, #%11001001
0D3EC 56 C9                         .db #$56, #%11001001
0D3EE 96 C9                         .db #$96, #%11001001
0D3F0 D6 C9                         .db #$D6, #%11001001
0D3F2 37 C9                         .db #$37, #%11001001
0D3F4 77 C9                         .db #$77, #%11001001
0D3F6 B7 C9                         .db #$B7, #%11001001
0D3F8 D8 12                         .db #$D8, #%00010010
0D3FA FF                            .db #LEVEL_END
0D3FB                           
0D3FB                           lvl_layout_11:
0D3FB 00 65                         .db #$00, #%01100101
0D3FD 40 45                         .db #$40, #%01000101
0D3FF 50 A7                         .db #$50, #%10100111
0D401 80 05                         .db #$80, #%00000101
0D403 90 A7                         .db #$90, #%10100111
0D405 A0 65                         .db #$A0, #%01100101
0D407 01 43                         .db #$01, #%01000011
0D409 31 23                         .db #$31, #%00100011
0D40B 61 A7                         .db #$61, #%10100111
0D40D 81 A7                         .db #$81, #%10100111
0D40F A1 63                         .db #$A1, #%01100011
0D411 02 44                         .db #$02, #%01000100
0D413 32 44                         .db #$32, #%01000100
0D415 92 04                         .db #$92, #%00000100
0D417 A2 64                         .db #$A2, #%01100100
0D419 03 40                         .db #$03, #%01000000
0D41B 33 40                         .db #$33, #%01000000
0D41D 63 A1                         .db #$63, #%10100001
0D41F 83 A2                         .db #$83, #%10100010
0D421 93 00                         .db #$93, #%00000000
0D423 A3 60                         .db #$A3, #%01100000
0D425 04 41                         .db #$04, #%01000001
0D427 34 41                         .db #$34, #%01000001
0D429 94 02                         .db #$94, #%00000010
0D42B A4 62                         .db #$A4, #%01100010
0D42D 05 47                         .db #$05, #%01000111
0D42F 35 67                         .db #$35, #%01100111
0D431 75 0A                         .db #$75, #%00001010
0D433 85 47                         .db #$85, #%01000111
0D435 B5 47                         .db #$B5, #%01000111
0D437 06 E7                         .db #$06, #%11100111
0D439 16 5A                         .db #$16, #%01011010
0D43B 26 11                         .db #$26, #%00010001
0D43D 46 13                         .db #$46, #%00010011
0D43F 56 1A                         .db #$56, #%00011010
0D441 66 14                         .db #$66, #%00010100
0D443 86 10                         .db #$86, #%00010000
0D445 96 5A                         .db #$96, #%01011010
0D447 A6 12                         .db #$A6, #%00010010
0D449 C6 15                         .db #$C6, #%00010101
0D44B D6 E7                         .db #$D6, #%11100111
0D44D FF                            .db #LEVEL_END
0D44E                           
0D44E                           lvl_layout_12:
0D44E 00 00                         .db #$00, #%00000000
0D450 50 C0                         .db #$50, #%11000000
0D452 80 00                         .db #$80, #%00000000
0D454 61 00                         .db #$61, #%00000000
0D456 22 C0                         .db #$22, #%11000000
0D458 82 E0                         .db #$82, #%11100000
0D45A C2 E0                         .db #$C2, #%11100000
0D45C A3 20                         .db #$A3, #%00100000
0D45E C3 10                         .db #$C3, #%00010000
0D460 04 00                         .db #$04, #%00000000
0D462 54 20                         .db #$54, #%00100000
0D464 15 0A                         .db #$15, #%00001010
0D466 25 C0                         .db #$25, #%11000000
0D468 55 E0                         .db #$55, #%11100000
0D46A 86 20                         .db #$86, #%00100000
0D46C C6 E0                         .db #$C6, #%11100000
0D46E C7 A0                         .db #$C7, #%10100000
0D470 88 00                         .db #$88, #%00000000
0D472 59 00                         .db #$59, #%00000000
0D474 89 20                         .db #$89, #%00100000
0D476 D9 1A                         .db #$D9, #%00011010
0D478 FF                            .db #LEVEL_END
0D479                           
0D479                           lvl_layout_13:
0D479 10 E0                         .db #$10, #%11100000
0D47B 20 E0                         .db #$20, #%11100000
0D47D 30 E0                         .db #$30, #%11100000
0D47F 40 40                         .db #$40, #%01000000
0D481 80 60                         .db #$80, #%01100000
0D483 C0 E0                         .db #$C0, #%11100000
0D485 D0 E0                         .db #$D0, #%11100000
0D487 41 40                         .db #$41, #%01000000
0D489 71 60                         .db #$71, #%01100000
0D48B 52 60                         .db #$52, #%01100000
0D48D A2 20                         .db #$A2, #%00100000
0D48F 43 60                         .db #$43, #%01100000
0D491 83 60                         .db #$83, #%01100000
0D493 14 74                         .db #$14, #%01110100
0D495 54 74                         .db #$54, #%01110100
0D497 94 74                         .db #$94, #%01110100
0D499 D4 14                         .db #$D4, #%00010100
0D49B 15 0D                         .db #$15, #%00001101
0D49D 55 0D                         .db #$55, #%00001101
0D49F 95 0D                         .db #$95, #%00001101
0D4A1 D5 0D                         .db #$D5, #%00001101
0D4A3 26 0D                         .db #$26, #%00001101
0D4A5 46 0D                         .db #$46, #%00001101
0D4A7 66 0D                         .db #$66, #%00001101
0D4A9 86 0D                         .db #$86, #%00001101
0D4AB A6 0D                         .db #$A6, #%00001101
0D4AD C6 0D                         .db #$C6, #%00001101
0D4AF 07 10                         .db #$07, #%00010000
0D4B1 37 0D                         .db #$37, #%00001101
0D4B3 77 0D                         .db #$77, #%00001101
0D4B5 B7 0D                         .db #$B7, #%00001101
0D4B7 28 0D                         .db #$28, #%00001101
0D4B9 48 0D                         .db #$48, #%00001101
0D4BB 68 0D                         .db #$68, #%00001101
0D4BD 88 0D                         .db #$88, #%00001101
0D4BF A8 0D                         .db #$A8, #%00001101
0D4C1 C8 0D                         .db #$C8, #%00001101
0D4C3 19 0D                         .db #$19, #%00001101
0D4C5 59 0D                         .db #$59, #%00001101
0D4C7 99 0D                         .db #$99, #%00001101
0D4C9 D9 0D                         .db #$D9, #%00001101
0D4CB FF                            .db #LEVEL_END
0D4CC                           
0D4CC                           lvl_layout_14:
0D4CC 00 67                         .db #$00, #%01100111
0D4CE 40 67                         .db #$40, #%01100111
0D4D0 80 67                         .db #$80, #%01100111
0D4D2 C0 27                         .db #$C0, #%00100111
0D4D4 01 27                         .db #$01, #%00100111
0D4D6 31 C7                         .db #$31, #%11000111
0D4D8 51 C7                         .db #$51, #%11000111
0D4DA 71 C7                         .db #$71, #%11000111
0D4DC 91 C7                         .db #$91, #%11000111
0D4DE B1 C7                         .db #$B1, #%11000111
0D4E0 D1 07                         .db #$D1, #%00000111
0D4E2 02 E7                         .db #$02, #%11100111
0D4E4 06 E7                         .db #$06, #%11100111
0D4E6 13 07                         .db #$13, #%00000111
0D4E8 D3 07                         .db #$D3, #%00000111
0D4EA 15 07                         .db #$15, #%00000111
0D4EC 35 07                         .db #$35, #%00000111
0D4EE 55 07                         .db #$55, #%00000111
0D4F0 75 07                         .db #$75, #%00000111
0D4F2 95 07                         .db #$95, #%00000111
0D4F4 B5 07                         .db #$B5, #%00000111
0D4F6 D5 07                         .db #$D5, #%00000111
0D4F8 17 07                         .db #$17, #%00000111
0D4FA 37 C7                         .db #$37, #%11000111
0D4FC 57 C7                         .db #$57, #%11000111
0D4FE 77 C7                         .db #$77, #%11000111
0D500 97 C7                         .db #$97, #%11000111
0D502 B7 C7                         .db #$B7, #%11000111
0D504 D7 07                         .db #$D7, #%00000111
0D506 19 07                         .db #$19, #%00000111
0D508 D9 07                         .db #$D9, #%00000111
0D50A 22 4C                         .db #$22, #%01001100
0D50C 62 4C                         .db #$62, #%01001100
0D50E A2 4C                         .db #$A2, #%01001100
0D510 24 0C                         .db #$24, #%00001100
0D512 44 0C                         .db #$44, #%00001100
0D514 64 0C                         .db #$64, #%00001100
0D516 84 0C                         .db #$84, #%00001100
0D518 A4 0C                         .db #$A4, #%00001100
0D51A C4 0C                         .db #$C4, #%00001100
0D51C 26 0C                         .db #$26, #%00001100
0D51E 46 0C                         .db #$46, #%00001100
0D520 66 0C                         .db #$66, #%00001100
0D522 86 0C                         .db #$86, #%00001100
0D524 A6 0C                         .db #$A6, #%00001100
0D526 C6 0C                         .db #$C6, #%00001100
0D528 28 4C                         .db #$28, #%01001100
0D52A 68 4C                         .db #$68, #%01001100
0D52C A8 4C                         .db #$A8, #%01001100
0D52E 32 04                         .db #$32, #%00000100
0D530 52 04                         .db #$52, #%00000100
0D532 72 04                         .db #$72, #%00000100
0D534 92 04                         .db #$92, #%00000100
0D536 B2 04                         .db #$B2, #%00000100
0D538 38 04                         .db #$38, #%00000100
0D53A 58 04                         .db #$58, #%00000100
0D53C 78 04                         .db #$78, #%00000100
0D53E 98 04                         .db #$98, #%00000100
0D540 B8 04                         .db #$B8, #%00000100
0D542 FF                            .db #LEVEL_END
0D543                           
0D543                           lvl_layout_15:
0D543 00 7A                         .db #$00, #%01111010
0D545 40 7A                         .db #$40, #%01111010
0D547 80 7A                         .db #$80, #%01111010
0D549 C0 3A                         .db #$C0, #%00111010
0D54B 41 04                         .db #$41, #%00000100
0D54D 61 04                         .db #$61, #%00000100
0D54F 81 04                         .db #$81, #%00000100
0D551 A1 04                         .db #$A1, #%00000100
0D553 05 E4                         .db #$05, #%11100100
0D555 15 64                         .db #$15, #%01100100
0D557 55 64                         .db #$55, #%01100100
0D559 95 64                         .db #$95, #%01100100
0D55B D5 E4                         .db #$D5, #%11100100
0D55D 26 04                         .db #$26, #%00000100
0D55F 46 44                         .db #$46, #%01000100
0D561 76 64                         .db #$76, #%01100100
0D563 C6 04                         .db #$C6, #%00000100
0D565 17 04                         .db #$17, #%00000100
0D567 37 64                         .db #$37, #%01100100
0D569 77 44                         .db #$77, #%01000100
0D56B B7 04                         .db #$B7, #%00000100
0D56D 18 64                         .db #$18, #%01100100
0D56F 58 64                         .db #$58, #%01100100
0D571 98 64                         .db #$98, #%01100100
0D573 FF                            .db #LEVEL_END
0D574                           
0D574                           lvl_layout_16:
0D574 10 E1                         .db #$10, #%11100001
0D576 20 9A                         .db #$20, #%10011010
0D578 30 E1                         .db #$30, #%11100001
0D57A 40 E1                         .db #$40, #%11100001
0D57C 50 E1                         .db #$50, #%11100001
0D57E 60 C1                         .db #$60, #%11000001
0D580 70 E1                         .db #$70, #%11100001
0D582 80 E1                         .db #$80, #%11100001
0D584 90 E1                         .db #$90, #%11100001
0D586 A0 61                         .db #$A0, #%01100001
0D588 21 C1                         .db #$21, #%11000001
0D58A A1 1A                         .db #$A1, #%00011010
0D58C B1 41                         .db #$B1, #%01000001
0D58E A2 E1                         .db #$A2, #%11100001
0D590 B2 E1                         .db #$B2, #%11100001
0D592 C2 1A                         .db #$C2, #%00011010
0D594 D2 E1                         .db #$D2, #%11100001
0D596 63 1A                         .db #$63, #%00011010
0D598 C3 C1                         .db #$C3, #%11000001
0D59A 14 61                         .db #$14, #%01100001
0D59C 54 61                         .db #$54, #%01100001
0D59E 94 C1                         .db #$94, #%11000001
0D5A0 15 61                         .db #$15, #%01100001
0D5A2 55 41                         .db #$55, #%01000001
0D5A4 85 1A                         .db #$85, #%00011010
0D5A6 16 41                         .db #$16, #%01000001
0D5A8 46 1A                         .db #$46, #%00011010
0D5AA 56 61                         .db #$56, #%01100001
0D5AC A6 61                         .db #$A6, #%01100001
0D5AE 17 67                         .db #$17, #%01100111
0D5B0 57 67                         .db #$57, #%01100111
0D5B2 97 67                         .db #$97, #%01100111
0D5B4 D7 07                         .db #$D7, #%00000111
0D5B6 28 41                         .db #$28, #%01000001
0D5B8 58 61                         .db #$58, #%01100001
0D5BA A8 41                         .db #$A8, #%01000001
0D5BC 18 11                         .db #$18, #%00010001
0D5BE 38 11                         .db #$38, #%00010001
0D5C0 98 11                         .db #$98, #%00010001
0D5C2 B8 11                         .db #$B8, #%00010001
0D5C4 D8 11                         .db #$D8, #%00010001
0D5C6 59 09                         .db #$59, #%00001001
0D5C8 FF                            .db #LEVEL_END
0D5C9                           
0D5C9                           lvl_layout_17:
0D5C9 10 EA                         .db #$10, #%11101010
0D5CB 20 E2                         .db #$20, #%11100010
0D5CD 30 62                         .db #$30, #%01100010
0D5CF 70 02                         .db #$70, #%00000010
0D5D1 80 6A                         .db #$80, #%01101010
0D5D3 90 22                         .db #$90, #%00100010
0D5D5 01 AA                         .db #$01, #%10101010
0D5D7 31 6A                         .db #$31, #%01101010
0D5D9 81 2A                         .db #$81, #%00101010
0D5DB A1 02                         .db #$A1, #%00000010
0D5DD C1 02                         .db #$C1, #%00000010
0D5DF D1 0A                         .db #$D1, #%00001010
0D5E1 32 EA                         .db #$32, #%11101010
0D5E3 42 6A                         .db #$42, #%01101010
0D5E5 62 02                         .db #$62, #%00000010
0D5E7 92 6A                         .db #$92, #%01101010
0D5E9 D2 E2                         .db #$D2, #%11100010
0D5EB 43 1A                         .db #$43, #%00011010
0D5ED 53 CA                         .db #$53, #%11001010
0D5EF 73 02                         .db #$73, #%00000010
0D5F1 83 4A                         .db #$83, #%01001010
0D5F3 B3 CA                         .db #$B3, #%11001010
0D5F5 C3 EA                         .db #$C3, #%11101010
0D5F7 04 0A                         .db #$04, #%00001010
0D5F9 14 A2                         .db #$14, #%10100010
0D5FB 24 AA                         .db #$24, #%10101010
0D5FD 44 AA                         .db #$44, #%10101010
0D5FF 64 6A                         .db #$64, #%01101010
0D601 65 6A                         .db #$65, #%01101010
0D603 A5 AA                         .db #$A5, #%10101010
0D605 06 EA                         .db #$06, #%11101010
0D607 16 62                         .db #$16, #%01100010
0D609 66 22                         .db #$66, #%00100010
0D60B 86 2A                         .db #$86, #%00101010
0D60D 17 42                         .db #$17, #%01000010
0D60F 47 12                         .db #$47, #%00010010
0D611 57 6A                         .db #$57, #%01101010
0D613 97 4A                         .db #$97, #%01001010
0D615 A7 02                         .db #$A7, #%00000010
0D617 18 02                         .db #$18, #%00000010
0D619 28 0A                         .db #$28, #%00001010
0D61B 38 22                         .db #$38, #%00100010
0D61D 68 2A                         .db #$68, #%00101010
0D61F 88 62                         .db #$88, #%01100010
0D621 C8 0A                         .db #$C8, #%00001010
0D623 D8 02                         .db #$D8, #%00000010
0D625 19 2A                         .db #$19, #%00101010
0D627 39 2A                         .db #$39, #%00101010
0D629 69 42                         .db #$69, #%01000010
0D62B 99 2A                         .db #$99, #%00101010
0D62D B9 42                         .db #$B9, #%01000010
0D62F FF                            .db #LEVEL_END
0D630                           
0D630                           lvl_layout_18:
0D630 00 12                         .db #$00, #%00010010
0D632 40 1A                         .db #$40, #%00011010
0D634 50 11                         .db #$50, #%00010001
0D636 70 1A                         .db #$70, #%00011010
0D638 80 10                         .db #$80, #%00010000
0D63A D0 13                         .db #$D0, #%00010011
0D63C 01 1A                         .db #$01, #%00011010
0D63E 22 15                         .db #$22, #%00010101
0D640 A2 1A                         .db #$A2, #%00011010
0D642 B2 14                         .db #$B2, #%00010100
0D644 03 67                         .db #$03, #%01100111
0D646 43 67                         .db #$43, #%01100111
0D648 83 67                         .db #$83, #%01100111
0D64A 24 09                         .db #$24, #%00001001
0D64C 74 0D                         .db #$74, #%00001101
0D64E C4 0A                         .db #$C4, #%00001010
0D650 05 A7                         .db #$05, #%10100111
0D652 45 27                         .db #$45, #%00100111
0D654 95 27                         .db #$95, #%00100111
0D656 16 C7                         .db #$16, #%11000111
0D658 36 67                         .db #$36, #%01100111
0D65A 86 67                         .db #$86, #%01100111
0D65C D6 07                         .db #$D6, #%00000111
0D65E 07 A3                         .db #$07, #%10100011
0D660 27 23                         .db #$27, #%00100011
0D662 47 C7                         .db #$47, #%11000111
0D664 57 A0                         .db #$57, #%10100000
0D666 67 A7                         .db #$67, #%10100111
0D668 77 20                         .db #$77, #%00100000
0D66A 97 C7                         .db #$97, #%11000111
0D66C A7 A4                         .db #$A7, #%10100100
0D66E B7 A7                         .db #$B7, #%10100111
0D670 C7 24                         .db #$C7, #%00100100
0D672 28 0B                         .db #$28, #%00001011
0D674 38 A3                         .db #$38, #%10100011
0D676 78 08                         .db #$78, #%00001000
0D678 88 A0                         .db #$88, #%10100000
0D67A C8 0C                         .db #$C8, #%00001100
0D67C D8 A4                         .db #$D8, #%10100100
0D67E 09 43                         .db #$09, #%01000011
0D680 59 40                         .db #$59, #%01000000
0D682 A9 44                         .db #$A9, #%01000100
0D684 FF                            .db #LEVEL_END
0D685                           
0D685                           lvl_layout_19:
0D685 11 A8                         .db #$11, #%10101000
0D687 21 68                         .db #$21, #%01101000
0D689 81 28                         .db #$81, #%00101000
0D68B B1 48                         .db #$B1, #%01001000
0D68D 22 48                         .db #$22, #%01001000
0D68F 62 68                         .db #$62, #%01101000
0D691 B2 28                         .db #$B2, #%00101000
0D693 23 28                         .db #$23, #%00101000
0D695 83 28                         .db #$83, #%00101000
0D697 B3 28                         .db #$B3, #%00101000
0D699 04 E8                         .db #$04, #%11101000
0D69B 24 08                         .db #$24, #%00001000
0D69D 44 08                         .db #$44, #%00001000
0D69F 64 E8                         .db #$64, #%11101000
0D6A1 84 E8                         .db #$84, #%11101000
0D6A3 C4 A8                         .db #$C4, #%10101000
0D6A5 D4 E8                         .db #$D4, #%11101000
0D6A7 15 48                         .db #$15, #%01001000
0D6A9 55 C8                         .db #$55, #%11001000
0D6AB 75 C8                         .db #$75, #%11001000
0D6AD A5 08                         .db #$A5, #%00001000
0D6AF 36 08                         .db #$36, #%00001000
0D6B1 B6 08                         .db #$B6, #%00001000
0D6B3 27 48                         .db #$27, #%01001000
0D6B5 97 28                         .db #$97, #%00101000
0D6B7 C7 08                         .db #$C7, #%00001000
0D6B9 09 61                         .db #$09, #%01100001
0D6BB 19 11                         .db #$19, #%00010001
0D6BD 49 61                         .db #$49, #%01100001
0D6BF 89 31                         .db #$89, #%00110001
0D6C1 A9 61                         .db #$A9, #%01100001
0D6C3 FF                            .db #LEVEL_END
0D6C4                           
0D6C4                           lvl_layout_20:
0D6C4 00 60                         .db #$00, #%01100000
0D6C6 10 1A                         .db #$10, #%00011010
0D6C8 40 A7                         .db #$40, #%10100111
0D6CA 50 20                         .db #$50, #%00100000
0D6CC 70 1A                         .db #$70, #%00011010
0D6CE 80 40                         .db #$80, #%01000000
0D6D0 B0 1A                         .db #$B0, #%00011010
0D6D2 C0 20                         .db #$C0, #%00100000
0D6D4 01 40                         .db #$01, #%01000000
0D6D6 31 1A                         .db #$31, #%00011010
0D6D8 A1 40                         .db #$A1, #%01000000
0D6DA D1 1A                         .db #$D1, #%00011010
0D6DC 43 67                         .db #$43, #%01100111
0D6DE 83 47                         .db #$83, #%01000111
0D6E0 44 A7                         .db #$44, #%10100111
0D6E2 54 25                         .db #$54, #%00100101
0D6E4 94 08                         .db #$94, #%00001000
0D6E6 A4 A7                         .db #$A4, #%10100111
0D6E8 55 05                         .db #$55, #%00000101
0D6EA 65 08                         .db #$65, #%00001000
0D6EC 06 27                         .db #$06, #%00100111
0D6EE 36 67                         .db #$36, #%01100111
0D6F0 76 28                         .db #$76, #%00101000
0D6F2 A6 27                         .db #$A6, #%00100111
0D6F4 D6 07                         .db #$D6, #%00000111
0D6F6 A7 A7                         .db #$A7, #%10100111
0D6F8 08 60                         .db #$08, #%01100000
0D6FA 09 60                         .db #$09, #%01100000
0D6FC 18 A7                         .db #$18, #%10100111
0D6FE 48 A7                         .db #$48, #%10100111
0D700 58 47                         .db #$58, #%01000111
0D702 88 27                         .db #$88, #%00100111
0D704 B8 20                         .db #$B8, #%00100000
0D706 D8 1A                         .db #$D8, #%00011010
0D708 59 15                         .db #$59, #%00010101
0D70A 69 60                         .db #$69, #%01100000
0D70C A9 60                         .db #$A9, #%01100000
0D70E FF                            .db #LEVEL_END
0D70F                           
0D70F                           lvl_layout_21:
0D70F 00 13                         .db #$00, #%00010011
0D711 10 11                         .db #$10, #%00010001
0D713 20 67                         .db #$20, #%01100111
0D715 60 67                         .db #$60, #%01100111
0D717 A0 47                         .db #$A0, #%01000111
0D719 D0 15                         .db #$D0, #%00010101
0D71B 32 63                         .db #$32, #%01100011
0D71D 72 05                         .db #$72, #%00000101
0D71F 82 43                         .db #$82, #%01000011
0D721 B2 43                         .db #$B2, #%01000011
0D723 33 03                         .db #$33, #%00000011
0D725 43 2A                         .db #$43, #%00101010
0D727 63 7A                         .db #$63, #%01111010
0D729 73 2A                         .db #$73, #%00101010
0D72B A3 7A                         .db #$A3, #%01111010
0D72D 34 63                         .db #$34, #%01100011
0D72F 74 63                         .db #$74, #%01100011
0D731 B4 43                         .db #$B4, #%01000011
0D733 06 63                         .db #$06, #%01100011
0D735 46 63                         .db #$46, #%01100011
0D737 86 63                         .db #$86, #%01100011
0D739 C6 C3                         .db #$C6, #%11000011
0D73B 07 7A                         .db #$07, #%01111010
0D73D 47 7A                         .db #$47, #%01111010
0D73F 67 0A                         .db #$67, #%00001010
0D741 87 7A                         .db #$87, #%01111010
0D743 08 13                         .db #$08, #%00010011
0D745 18 43                         .db #$18, #%01000011
0D747 48 63                         .db #$48, #%01100011
0D749 88 63                         .db #$88, #%01100011
0D74B FF                            .db #LEVEL_END
0D74C                           
0D74C                           lvl_layout_22:
0D74C 00 7A                         .db #$00, #%01111010
0D74E 40 7A                         .db #$40, #%01111010
0D750 80 7A                         .db #$80, #%01111010
0D752 C0 3A                         .db #$C0, #%00111010
0D754 13 67                         .db #$13, #%01100111
0D756 83 A7                         .db #$83, #%10100111
0D758 B3 07                         .db #$B3, #%00000111
0D75A 14 07                         .db #$14, #%00000111
0D75C 44 07                         .db #$44, #%00000111
0D75E A4 07                         .db #$A4, #%00000111
0D760 15 A5                         .db #$15, #%10100101
0D762 45 A5                         .db #$45, #%10100101
0D764 85 25                         .db #$85, #%00100101
0D766 86 05                         .db #$86, #%00000101
0D768 A6 05                         .db #$A6, #%00000101
0D76A 17 11                         .db #$17, #%00010001
0D76C 47 A1                         .db #$47, #%10100001
0D76E 87 A1                         .db #$87, #%10100001
0D770 B7 A1                         .db #$B7, #%10100001
0D772 18 41                         .db #$18, #%01000001
0D774 68 01                         .db #$68, #%00000001
0D776 D8 01                         .db #$D8, #%00000001
0D778 FF                            .db #LEVEL_END
0D779                           
0D779                           lvl_layout_23:
0D779 00 71                         .db #$00, #%01110001
0D77B 40 11                         .db #$40, #%00010001
0D77D 50 43                         .db #$50, #%01000011
0D77F 80 D1                         .db #$80, #%11010001
0D781 90 E3                         .db #$90, #%11100011
0D783 A0 63                         .db #$A0, #%01100011
0D785 01 63                         .db #$01, #%01100011
0D787 41 63                         .db #$41, #%01100011
0D789 A1 63                         .db #$A1, #%01100011
0D78B 02 63                         .db #$02, #%01100011
0D78D 42 63                         .db #$42, #%01100011
0D78F 62 11                         .db #$62, #%00010001
0D791 A2 67                         .db #$A2, #%01100111
0D793 04 63                         .db #$04, #%01100011
0D795 44 23                         .db #$44, #%00100011
0D797 64 D1                         .db #$64, #%11010001
0D799 74 E3                         .db #$74, #%11100011
0D79B 84 F1                         .db #$84, #%11110001
0D79D 94 E3                         .db #$94, #%11100011
0D79F A4 C7                         .db #$A4, #%11000111
0D7A1 B4 23                         .db #$B4, #%00100011
0D7A3 05 63                         .db #$05, #%01100011
0D7A5 45 23                         .db #$45, #%00100011
0D7A7 06 71                         .db #$06, #%01110001
0D7A9 46 11                         .db #$46, #%00010001
0D7AB 56 E3                         .db #$56, #%11100011
0D7AD D6 07                         .db #$D6, #%00000111
0D7AF 17 D1                         .db #$17, #%11010001
0D7B1 27 43                         .db #$27, #%01000011
0D7B3 67 D1                         .db #$67, #%11010001
0D7B5 A7 C7                         .db #$A7, #%11000111
0D7B7 C7 A7                         .db #$C7, #%10100111
0D7B9 D7 B3                         .db #$D7, #%10110011
0D7BB 28 43                         .db #$28, #%01000011
0D7BD 78 43                         .db #$78, #%01000011
0D7BF 29 43                         .db #$29, #%01000011
0D7C1 79 43                         .db #$79, #%01000011
0D7C3 FF                           .db #LEVEL_END
0D7C4                           
0D7C4                           lvl_layout_24:
0D7C4 02 67                         .db #$02, #%01100111
0D7C6 42 67                         .db #$42, #%01100111
0D7C8 82 67                         .db #$82, #%01100111
0D7CA 05 67                         .db #$05, #%01100111
0D7CC 45 67                         .db #$45, #%01100111
0D7CE 85 67                         .db #$85, #%01100111
0D7D0 08 67                         .db #$08, #%01100111
0D7D2 48 67                         .db #$48, #%01100111
0D7D4 88 67                         .db #$88, #%01100111
0D7D6 30 E7                         .db #$30, #%11100111
0D7D8 70 E7                         .db #$70, #%11100111
0D7DA B0 E7                         .db #$B0, #%11100111
0D7DC 34 E7                         .db #$34, #%11100111
0D7DE 74 E7                         .db #$74, #%11100111
0D7E0 B4 E7                         .db #$B4, #%11100111
0D7E2 20 13                         .db #$20, #%00010011
0D7E4 40 10                         .db #$40, #%00010000
0D7E6 80 02                         .db #$80, #%00000010
0D7E8 41 05                         .db #$41, #%00000101
0D7EA B1 09                         .db #$B1, #%00001001
0D7EC 02 09                         .db #$02, #%00001001
0D7EE 52 0C                         .db #$52, #%00001100
0D7F0 13 11                         .db #$13, #%00010001
0D7F2 33 04                         .db #$33, #%00000100
0D7F4 74 0C                         .db #$74, #%00001100
0D7F6 B4 08                         .db #$B4, #%00001000
0D7F8 15 09                         .db #$15, #%00001001
0D7FA 55 0C                         .db #$55, #%00001100
0D7FC 95 0C                         .db #$95, #%00001100
0D7FE 47 03                         .db #$47, #%00000011
0D800 A7 12                         .db #$A7, #%00010010
0D802 18 15                         .db #$18, #%00010101
0D804 09 05                         .db #$09, #%00000101
0D806 19 03                         .db #$19, #%00000011
0D808 FF                            .db #LEVEL_END
0D809                           
0D809                           lvl_layout_25:
0D809 00 12                         .db #$00, #%00010010
0D80B 10 63                         .db #$10, #%01100011
0D80D 60 63                         .db #$60, #%01100011
0D80F A0 07                         .db #$A0, #%00000111
0D811 01 11                         .db #$01, #%00010001
0D813 A1 02                         .db #$A1, #%00000010
0D815 02 67                         .db #$02, #%01100111
0D817 42 07                         .db #$42, #%00000111
0D819 62 67                         .db #$62, #%01100111
0D81B A2 C7                         .db #$A2, #%11000111
0D81D 03 61                         .db #$03, #%01100001
0D81F 43 01                         .db #$43, #%00000001
0D821 63 61                         .db #$63, #%01100001
0D823 A6 E7                         .db #$A6, #%11100111
0D825 B6 47                         .db #$B6, #%01000111
0D827 C6 01                         .db #$C6, #%00000001
0D829 B7 42                         .db #$B7, #%01000010
0D82B B8 42                         .db #$B8, #%01000010
0D82D C8 0A                         .db #$C8, #%00001010
0D82F 09 7A                         .db #$09, #%01111010
0D831 49 7A                         .db #$49, #%01111010
0D833 89 3A                         .db #$89, #%00111010
0D835 B9 42                         .db #$B9, #%01000010
0D837 FF                            .db #LEVEL_END
0D838                           
0D838                           ;; Level layout address pointers
0D838                           tbl_lvl_layout_hi:
0D838 D1 D1 D1 D1 D2                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D83D D2 D3 D3 D3 D3                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D842 D3 D4 D4 D4 D5                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D847 D5 D5 D6 D6 D6                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D84C D7 D7 D7 D7 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D851                           
0D851                           tbl_lvl_layout_lo:
0D851 59 74 A9 DC 4D                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D856 88 11 52 89 CC                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D85B FB 4E 79 CC 43                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D860 74 C9 30 85 C4                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D865 0F 4C 79 C4 09                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D86A                           
0D86A                           ;; Ball start position (#$YX)
0D86A                           tbl_lvl_ball_startpos:
0D86A 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D86F 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D874 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D879 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D87E 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D883                               
0D883                           ;; Ball start direction, color and tile score
0D883                           ;; #% ccc v tttt
0D883                           ;;    ||| | ++++-- tile score
0D883                           ;;    ||| +------- vertical direction, up (0) or down
0D883                           ;;    +++--------- color (CBRYGM)
0D883                           tbl_lvl_ball_init:
0D883 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D888 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D88D 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D892 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D897 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D89C                           
0D89C                           
0D89C                           
0D89C                           ;; Helper table to multiply values by 16
0D89C                           tbl_Times16:
0D89C 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D8A4 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D8AC                               
0D8AC                           
0D8AC                           ;; Helper table to multiply values by 64
0D8AC                           tbl_Times64:
0D8AC 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D8B0                           
0D8B0                           
0D8B0                           ;; Metatile ID to CHR data mapper
0D8B0                           tbl_GametileTopLeft:
0D8B0 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D8BA                           
0D8BA                           tbl_GametileTopRight:
0D8BA 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D8C4                           
0D8C4                           tbl_GametileBottomLeft:
0D8C4 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D8CE                           
0D8CE                           tbl_GametileBottomRight:
0D8CE 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D8D8                           
0D8D8                           ;; Metatile ID to RAM byte data mapper
0D8D8                           tbl_GameTileRamByte:
0D8D8 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D8DD                           
0D8DD                           ;; HUD text data
0D8DD                           tbl_HudText:
0D8DD 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D8E5 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D8EC 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D8F4 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D8F9                           
0D8F9                           ;; Move block top left tile based on color
0D8F9                           tbl_MoveBlockTopLeftTile:
0D8F9 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D900                           
0D900                           ;; Game over data
0D900                           tbl_GameOver:
0D900 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D904 00 00                         .db #_SPACE, #_SPACE
0D906 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0D90A                           
0D90A                           tbl_BackgroundFade:
0D90A 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F0D914                           
0D914                           ;; NMI handler
0D914                           NMI:
0D914                               .include "interrupt/nmi.asm"
0D914                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D914                           ;;
0D914                           ;; include/nmi.asm
0D914                           ;;
0D914                           ;; Non-maskable interrupt script. This script is being executed
0D914                           ;; when vBlank hits.
0D914                           ;;
0D914                           ;;
0D914                           
0D914                               ;; Preserve accumulator through stack
0D914 48                            PHA
0D915                           
0D915                               ;; Should NMI be skipped?
0D915 A5 13                         LDA skip_nmi
0D917 F0 03                         BEQ +
0D919 4C 5A DA                          JMP +skip_nmi
0D91C                               +
0D91C                           
0D91C                               ;; When in NMI, skip additional NMI requests
0D91C A9 01                         LDA #$01
0D91E 85 13                         STA skip_nmi
0D920                           
0D920                               ;; Preserve X, Y, and PC through stack
0D920 8A                            TXA
0D921 48                            PHA
0D922 98                            TYA
0D923 48                            PHA
0D924 08                            PHP
0D925                               
0D925                               ;; Check forced NMI skip
0D925 A5 14                         LDA force_skip_nmi
0D927 F0 03                         BEQ +
0D929 4C 49 DA                          JMP +force_skip_nmi
0D92C                               +
0D92C                           
0D92C                               ;; Update PPU mask
0D92C                               ;LDA #$00
0D92C                               ;STA PPU_CTRL
0D92C A5 12                         LDA soft_ppu_mask
0D92E 8D 01 20                      STA PPU_MASK
0D931                               
0D931                               
0D931                               ;; Additional PPU updates go here
0D931                               .include "game/interrupt/nmi.asm"
0D931                           
0D931                               ;; Check if ppu_buffer needs updating
0D931 A5 39                         LDA ppu_buffer_update
0D933 D0 03                         BNE +
0D935 4C 77 D9                          JMP +no_ppu_buffer_update
0D938                               +
0D938                           
0D938                               ;; Reset ppu control register and mask
0D938 A2 00                         LDX #$00
0D93A 8E 00 20                      STX PPU_CTRL
0D93D 8E 01 20                      STX PPU_MASK
0D940                           
0D940                               ;; Set up loop
0D940                               -
0D940                                   ;; Reset hi/lo latch
0D940 2C 02 20                          BIT PPU_STATUS
0D943                           
0D943                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D943 BD 00 03                          LDA ppu_buffer,x
0D946 8D 06 20                          STA PPU_ADDR
0D949 E8                                INX
0D94A BD 00 03                          LDA ppu_buffer,x
0D94D 8D 06 20                          STA PPU_ADDR
0D950                           
0D950                                   ;; Write ppu_buffer data to PPU_ADDR
0D950 E8                                INX
0D951 BD 00 03                          LDA ppu_buffer,x
0D954 8D 07 20                          STA PPU_DATA
0D957                           
0D957                                   ;; Check if updating is done (eg. X is at pointer)
0D957 E8                                INX
0D958 E4 3A                             CPX ppu_buffer_pointer
0D95A F0 03                             BEQ +
0D95C 4C 40 D9                      JMP -
0D95F                           +
0D95F                           
0D95F                               ;; Reset ppu buffer update and pointer
0D95F A9 00                         LDA #$00
0D961 85 39                         STA ppu_buffer_update
0D963 85 3A                         STA ppu_buffer_pointer
0D965                               
0D965                               ;; Reset scrolling position
0D965 8D 05 20                      STA PPU_SCROLL
0D968 8D 05 20                      STA PPU_SCROLL
0D96B                           
0D96B                               ;; Restore ppu control register and mask
0D96B A9 90                         LDA #%10010000
0D96D 8D 00 20                      STA PPU_CTRL
0D970 A5 12                         LDA soft_ppu_mask
0D972 8D 01 20                      STA PPU_MASK
0D975 A9 00                         LDA #$00
0D977                           
0D977                           ;; Continue other NMI stuff
0D977                           +no_ppu_buffer_update:
0D977                           
0D977                               ;; Reset sprite RAM, draw sprites
0D977 8D 03 20                      STA OAM_ADDR
0D97A A9 02                         LDA #$02
0D97C 8D 14 40                      STA OAM_DMA
0D97F                           
0D97F                               ;; Decrease explosion and move block timers
0D97F A0 04                         LDY #MAX_ANIMATIONS
0D981 A2 00                         LDX #$00
0D983                               -
0D983 BD 60 03                          LDA explosion_timer,x
0D986 F0 03                             BEQ +
0D988 DE 60 03                              DEC explosion_timer,x
0D98B                                   +
0D98B                           
0D98B BD 80 03                          LDA move_block_timer,x
0D98E F0 03                             BEQ +
0D990 DE 80 03                              DEC move_block_timer,x
0D993                                   +
0D993                                   
0D993 E8                                INX
0D994 88                                DEY
0D995 F0 03                             BEQ +done
0D997 4C 83 D9                      JMP -
0D99A                           +done:
0D99A                           
0D99A                               ;; Decrease nudge timer
0D99A A5 3E                         LDA nudge_timer
0D99C F0 02                         BEQ +
0D99E C6 3E                             DEC nudge_timer
0D9A0                               +
0D9A0                           
0D9A0                               ;; Decrease bonus timer
0D9A0 A5 3F                         LDA bonus_timer
0D9A2 F0 02                         BEQ +
0D9A4 C6 3F                             DEC bonus_timer
0D9A6                               +
0D9A6                           
0D9A6                               ;; Decrease kill timer
0D9A6 A5 40                         LDA kill_timer
0D9A8 F0 02                         BEQ +
0D9AA C6 40                             DEC kill_timer
0D9AC                               +
0D9AC                           
0D9AC                               ;; Play background noise
0D9AC A5 38                         LDA screen_mode
0D9AE 29 01                         AND #IS_GAME_SCREEN
0D9B0 F0 21                         BEQ +
0D9B2                                   .include "game/include/main/background_sound.asm"
0D9B2                               ;; At random times, set max_noise period to $03-$0A
0D9B2 A5 44                         LDA max_noise
0D9B4 D0 1D                         BNE +
0D9B6 20 2C C5                          JSR sub_GetRandomNumber
0D9B9 29 EF                             AND #%11101111
0D9BB D0 16                             BNE +
0D9BD                                   
0D9BD A5 15                             LDA frame_counter
0D9BF 85 16                             STA random_seed
0D9C1 20 2C C5                          JSR sub_GetRandomNumber
0D9C4 29 07                             AND #$07
0D9C6 69 03                             ADC #$03
0D9C8 85 44                             STA max_noise
0D9CA A9 01                             LDA #$01
0D9CC 85 45                             STA sweep_noise
0D9CE A9 34                             LDA #$34
0D9D0 8D 0C 40                          STA NOISE_VOLUME
0D9D3                           
0D9D3                               +
0D9D3                           
0D9D3                               ;; if sweep noise = $00: constant noise
0D9D3                               ;; else if sweep noise > $80: decrease pitch
0D9D3                               ;; else: increase pitch
0D9D3 A5 45                         LDA sweep_noise
0D9D5 F0 18                         BEQ +constantNoise
0D9D7 30 2A                         BMI +decreaseNoise
0D9D9                           
0D9D9                           ;; Sweep noise up to max noise pitch
0D9D9                           +increaseNoise:
0D9D9 C6 46                         DEC current_noise
0D9DB A5 46                         LDA current_noise
0D9DD 8D 0E 40                      STA NOISE_PERIOD
0D9E0 C5 44                         CMP max_noise
0D9E2 D0 08                         BNE +
0D9E4 A9 00                             LDA #$00
0D9E6 85 45                             STA sweep_noise
0D9E8 A9 0A                             LDA #$0A
0D9EA 85 47                             STA noise_timer
0D9EC                               +
0D9EC 4C 17 DA                      JMP +endNoise
0D9EF                           
0D9EF                           ;; Keep noise at constant pitch
0D9EF                           +constantNoise:
0D9EF A5 44                         LDA max_noise
0D9F1 F0 24                         BEQ +endNoise
0D9F3                           
0D9F3 A5 47                         LDA noise_timer
0D9F5 D0 07                         BNE +
0D9F7 A9 80                             LDA #$80
0D9F9 85 45                             STA sweep_noise
0D9FB 4C 17 DA                          JMP +endNoise
0D9FE                               +
0D9FE C6 47                         DEC noise_timer
0DA00 4C 17 DA                      JMP +endNoise
0DA03                           
0DA03                           ;; Sweep noise down to initial pitch
0DA03                           +decreaseNoise:
0DA03 E6 46                         INC current_noise
0DA05 A5 46                         LDA current_noise
0DA07 8D 0E 40                      STA NOISE_PERIOD
0DA0A C9 0E                         CMP #$0E
0DA0C D0 09                         BNE +endNoise
0DA0E                           
0DA0E 20 BC C5                      JSR sub_BackgroundNoise
0DA11 A9 00                         LDA #$00
0DA13 85 44                         STA max_noise
0DA15 85 45                         STA sweep_noise
0DA17                           
0DA17                           +endNoise:
0DA17                           
0DA17                               +
0DA17                           
0DA17                               ;; Test: random bleeps
0DA17                               .include "game/test/random_descending_bleeps.asm"
0DA17                           ;; Random bleepy noises
0DA17 A5 48                         LDA do_beeps
0DA19 F0 2E                         BEQ +continue
0DA1B                               
0DA1B C9 02                         CMP #$02
0DA1D D0 12                         BNE +beep
0DA1F                              
0DA1F                           +stopBeep:
0DA1F A9 00                         LDA #$00
0DA21 85 48                         STA do_beeps
0DA23 A9 08                         LDA #$08
0DA25 8D 15 40                      STA APU_STATUS
0DA28 8D 0F 40                      STA NOISE_LENGTH
0DA2B 20 BC C5                      JSR sub_BackgroundNoise
0DA2E 4C 49 DA                      JMP +continue
0DA31                               
0DA31                           +beep:
0DA31 A9 01                         LDA #$01
0DA33 8D 15 40                      STA APU_STATUS
0DA36 A9 B8                         LDA #$B8
0DA38 8D 00 40                      STA PULSE1_VOLUME
0DA3B 20 2C C5                      JSR sub_GetRandomNumber
0DA3E 8D 02 40                      STA PULSE1_TIMER_LO
0DA41 20 2C C5                      JSR sub_GetRandomNumber
0DA44 29 01                         AND #$01
0DA46 8D 03 40                      STA PULSE1_TIMER_HI
0DA49                           
0DA49                           +continue:0DA49                               
0DA49                           
0DA49                           
0DA49                           ;; This is what happens when we forced nmi skip
0DA49                           +force_skip_nmi:
0DA49                           
0DA49                               ;; Increase frame timers
0DA49 E6 15                         INC frame_counter
0DA4B                           
0DA4B                               ;; reset sprites_update_position
0DA4B A9 00                         LDA #$00
0DA4D 85 35                         STA sprites_update_position
0DA4F                           
0DA4F                               ;; Don't skip next NMI request
0DA4F A9 00                         LDA #$00
0DA51 85 13                         STA skip_nmi
0DA53 85 49                         STA check_nmi
0DA55                           
0DA55                               ;; Restore X, Y and PC from stack
0DA55 28                            PLP
0DA56 68                            PLA
0DA57 A8                            TAY
0DA58 68                            PLA
0DA59 AA                            TAX
0DA5A                           
0DA5A                           +skip_nmi:
0DA5A                               ;; Restore accumulator from stack
0DA5A 68                            PLA
0DA5B                           
0DA5B                               ;; Return
0DA5B 40                            RTI
0DA5C                           
0DA5C                           ;; IRQ handler (empty)
0DA5C                           IRQ:
0DA5C                               .include "interrupt/irq.asm"
0DA5C 40                            RTI0DA5D                           
0DA5D                           ;; Interrupt vectors
0DA5D 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 14 D9                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 5C DA                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
