	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$05
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU Noise registers
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00029                           
00029                           ;; Ball bounding box, relative to the screen
00029                           ball_left              .dsb 1
0002A                           ball_center            .dsb 1
0002B                           ball_right             .dsb 1
0002C                           ball_top               .dsb 1
0002D                           ball_middle            .dsb 1
0002E                           ball_bottom            .dsb 1
0002F                           
0002F                           ;; Update-position check
0002F                           ball_update_position   .dsb 1
00030                           
00030                           
00030                           ;; Ball flags
00030                           ;; #% c c c v . f n a
00030                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00030                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00030                           ;;    | | | | | +------ ball is frozen (not moving)
00030                           ;;    | | | | +-------- (unused for now)
00030                           ;;    | | | +---------- ball moves up (0) or down (1)
00030                           ;;    +-+-+------------ ball color (1-6)
00030                           ball_flags             .dsb 1
00031                           
00031                           
00031                           ;; Screen mode
00031                           ;; #% u . . . . . t t
00031                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00031                           ;;    | +-+-+-+-+------------- unused
00031                           ;;    +----------------------- should the screen update
00031                           screen_mode            .dsb 1
00032                           
00032                           
00032                           
00032                           ;; PPU buffer variables
00032                           ppu_buffer_update      .dsb 1
00033                           ppu_buffer_pointer     .dsb 1
00034                           
00034                           ;; Pointer to keep track of the number of explosions
00034                           explosion_pointer      .dsb 1
00035                           
00035                           ;; Sprite RAM pointer to keep track of sprites to update
00035                           sprite_ram_pointer     .dsb 1
00036                           
00036                           ;; Nudge counter
00036                           nudge_counter          .dsb 1
00037                           
00037                           ;; Current level (doubles as level select variable)
00037                           current_level          .dsb 1
00038                           
00038                           ;; Tile type the ball is currently colliding with
00038                           colliding_tile         .dsb 1
00039                           
00039                           ;; Background noise variables
00039                           max_noise              .dsb 1
0003A                           sweep_noise            .dsb 1
0003B                           current_noise          .dsb 1
0003C                           noise_counter          .dsb 1
0003D                               0003D                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 EB C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 EB C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 31                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 37                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 35                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 D7 C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 31                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 31                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 F1 CC                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 EE CC                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 B3 C4                      JSR sub_DisableRendering
0C08A 20 49 C7                      JSR sub_JumpToPointer
0C08D 20 C7 C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 31                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 31                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 31                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C C7 C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 35                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 2F                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C A8 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 30                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 2B                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 85 1C                         STA ball_ypos_lo_prev
0C0C8 18                            CLC
0C0C9 69 F0                         ADC #BALL_SPEED_LO
0C0CB 85 1A                         STA ball_ypos_lo
0C0CD                           
0C0CD                               ;; update the high byte with carry
0C0CD A5 19                         LDA ball_ypos_hi
0C0CF 85 1B                         STA ball_ypos_hi_prev
0C0D1 69 01                         ADC #BALL_SPEED_HI
0C0D3 85 19                         STA ball_ypos_hi
0C0D5                               
0C0D5                               ;; Check bottom bound
0C0D5 C9 C8                         CMP #BOUND_BOTTOM
0C0D7 90 3C                         BCC +checkHorizontalMovement
0C0D9 F0 3A                         BEQ +checkHorizontalMovement
0C0DB                           
0C0DB                           
0C0DB                               ;; Change ball direction to "up"
0C0DB A9 C8                         LDA #BOUND_BOTTOM
0C0DD 38                            SEC
0C0DE E9 01                         SBC #$01
0C0E0 85 19                         STA ball_ypos_hi
0C0E2 A9 00                         LDA #$00
0C0E4 85 1A                         STA ball_ypos_lo
0C0E6 A5 30                         LDA ball_flags
0C0E8 29 EF                         AND #MOVE_BALL_UP
0C0EA 85 30                         STA ball_flags
0C0EC 4C 15 C1                      JMP +checkHorizontalMovement
0C0EF                           
0C0EF                           
0C0EF                           +moveBallUp:
0C0EF                               ;; update the low byte
0C0EF A5 1A                         LDA ball_ypos_lo
0C0F1 85 1C                         STA ball_ypos_lo_prev
0C0F3 38                            SEC
0C0F4 E9 F0                         SBC #BALL_SPEED_LO
0C0F6 85 1A                         STA ball_ypos_lo
0C0F8                           
0C0F8                               ;; update the high byte with carry
0C0F8 A5 19                         LDA ball_ypos_hi
0C0FA 85 1B                         STA ball_ypos_hi_prev
0C0FC E9 01                         SBC #BALL_SPEED_HI
0C0FE 85 19                         STA ball_ypos_hi
0C100                               
0C100                               ;; Check top bound
0C100 C9 30                         CMP #BOUND_TOP
0C102 B0 11                         BCS +checkHorizontalMovement
0C104                           
0C104                               ;; Change ball direction to "down"
0C104 A9 30                         LDA #BOUND_TOP
0C106 18                            CLC
0C107 69 01                         ADC #$01
0C109 85 19                         STA ball_ypos_hi
0C10B A9 00                         LDA #$00
0C10D 85 1A                         STA ball_ypos_lo
0C10F A5 30                         LDA ball_flags
0C111 09 10                         ORA #MOVE_BALL_DOWN
0C113 85 30                         STA ball_flags
0C115                           
0C115                           
0C115                           +checkHorizontalMovement:
0C115                           
0C115                               ;; Check if ball is being nudged
0C115 A5 36                         LDA nudge_counter
0C117 D0 41                         BNE +doneBallMovement
0C119                           
0C119                               ;; Check if left button is held
0C119 A5 0F                         LDA buttons_held
0C11B 29 02                         AND #BUTTON_LEFT
0C11D F0 1B                         BEQ +
0C11F                                   ;; update the low byte
0C11F A5 18                             LDA ball_xpos_lo
0C121 38                                SEC
0C122 E9 F0                             SBC #BALL_SPEED_LO
0C124 85 18                             STA ball_xpos_lo
0C126                           
0C126                                   ;; update the high byte
0C126 A5 17                             LDA ball_xpos_hi
0C128 E9 01                             SBC #BALL_SPEED_HI
0C12A 85 17                             STA ball_xpos_hi
0C12C                                   
0C12C                                   ;; Check left bound
0C12C C9 10                             CMP #BOUND_LEFT
0C12E B0 2A                             BCS +doneBallMovement
0C130                                   
0C130                                   ;; Set flag to nudge right and set nudge counter
0C130 A5 30                             LDA ball_flags
0C132 09 02                             ORA #NUDGE_BALL_RIGHT
0C134 20 42 C7                          JSR sub_InitiateNudge
0C137                           
0C137 4C 5A C1                          JMP +doneBallMovement        
0C13A                               +
0C13A                           
0C13A                               ;; Check if right button is held
0C13A A5 0F                         LDA buttons_held
0C13C 29 01                         AND #BUTTON_RIGHT
0C13E F0 1A                         BEQ +
0C140                                   ;; update the low byte
0C140 A5 18                             LDA ball_xpos_lo
0C142 18                                CLC
0C143 69 F0                             ADC #BALL_SPEED_LO
0C145 85 18                             STA ball_xpos_lo
0C147                           
0C147                                   ;; update the high byte
0C147 A5 17                             LDA ball_xpos_hi
0C149 69 01                             ADC #BALL_SPEED_HI
0C14B 85 17                             STA ball_xpos_hi     
0C14D                           
0C14D                                  ;; Check right bound
0C14D C9 E8                             CMP #BOUND_RIGHT
0C14F 90 09                             BCC +doneBallMovement
0C151 F0 07                             BEQ +doneBallMovement
0C153                                   
0C153                                   ;; Set flag to nudge left and set nudge timer
0C153 A5 30                             LDA ball_flags
0C155 29 FD                             AND #NUDGE_BALL_LEFT
0C157 20 42 C7                          JSR sub_InitiateNudge
0C15A                               +
0C15A                           
0C15A                           
0C15A                           +doneBallMovement:
0C15A                           
0C15A                               ;; Check nudge
0C15A A5 36                         LDA nudge_counter
0C15C F0 23                         BEQ +doneBallNudging
0C15E A5 30                             LDA ball_flags
0C160 29 02                             AND #NUDGE_BALL_RIGHT
0C162 F0 10                             BEQ +nudgeBallLeft
0C164                                   
0C164                                       ;; update the low byte
0C164 A5 18                                 LDA ball_xpos_lo
0C166 18                                    CLC
0C167 69 F0                                 ADC #BALL_SPEED_LO
0C169 85 18                                 STA ball_xpos_lo
0C16B                           
0C16B                                       ;; update the high byte
0C16B A5 17                                 LDA ball_xpos_hi
0C16D 69 01                                 ADC #BALL_SPEED_HI
0C16F 85 17                                 STA ball_xpos_hi  
0C171 4C 81 C1                              JMP +doneBallNudging
0C174                                   +nudgeBallLeft:
0C174                                   
0C174                                   ;; update the low byte
0C174 A5 18                             LDA ball_xpos_lo
0C176 38                                SEC
0C177 E9 F0                             SBC #BALL_SPEED_LO
0C179 85 18                             STA ball_xpos_lo
0C17B                           
0C17B                                   ;; update the high byte
0C17B A5 17                             LDA ball_xpos_hi
0C17D E9 01                             SBC #BALL_SPEED_HI
0C17F 85 17                             STA ball_xpos_hi
0C181                               +doneBallNudging:
0C181                           
0C181                               ;; Don't update position again until next frame
0C181 E6 2F                         INC ball_update_position
0C183                           
0C183                               
0C183                               ;; Do collision detection
0C183                               .include "game/include/main/collision_detection.asm"
0C183                           
0C183                               ;; Get ball's x-left, x-center, x-right position
0C183 A5 17                         LDA ball_xpos_hi
0C185 18                            CLC
0C186 69 F0                         ADC #BALL_LEFT_WGA
0C188 85 29                         STA ball_left
0C18A 18                            CLC
0C18B 69 04                         ADC #BALL_HALF_SIZE
0C18D 85 2A                         STA ball_center
0C18F 18                            CLC
0C190 69 04                         ADC #BALL_HALF_SIZE
0C192 85 2B                         STA ball_right
0C194                           
0C194                               ;; Get ball's y-top, y-middle, y-bottom position
0C194 A5 19                         LDA ball_ypos_hi
0C196 18                            CLC
0C197 69 D0                         ADC #BALL_TOP_WGA
0C199 85 2C                         STA ball_top
0C19B 18                            CLC
0C19C 69 04                         ADC #BALL_HALF_SIZE
0C19E 85 2D                         STA ball_middle
0C1A0 18                            CLC
0C1A1 69 04                         ADC #BALL_HALF_SIZE
0C1A3 85 2E                         STA ball_bottom
0C1A5                           
0C1A5                           +checkRightCollision:
0C1A5                               ;; Check if ball moves right
0C1A5                               ;; No need to check nudging here as that will never collide with a tile
0C1A5 A5 0F                         LDA buttons_held
0C1A7 29 01                         AND #BUTTON_RIGHT
0C1A9 F0 1C                         BEQ +checkLeftCollision
0C1AB                           
0C1AB                               ;; Check tile at right position
0C1AB A5 2D                         LDA ball_middle
0C1AD 85 00                         STA temp
0C1AF A5 2B                         LDA ball_right
0C1B1 85 01                         STA temp+1
0C1B3 20 9B C4                      JSR sub_ConvertXYToTileType
0C1B6 29 01                         AND #TILE_IS_SOLID
0C1B8 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1BA                           
0C1BA                               ;; Tile is solid; nudge ball and evaluate tile type
0C1BA A5 30                         LDA ball_flags
0C1BC 29 FD                         AND #NUDGE_BALL_LEFT
0C1BE 20 42 C7                      JSR sub_InitiateNudge
0C1C1 20 F4 C4                      JSR sub_EvaluateTileType
0C1C4 4C E6 C1                      JMP +checkTopCollision
0C1C7                           
0C1C7                           +checkLeftCollision:
0C1C7                               ;; Check if ball moves right
0C1C7                               ;; No need to check nudging here as that will never collide with a tile
0C1C7 A5 0F                         LDA buttons_held
0C1C9 29 02                         AND #BUTTON_LEFT
0C1CB F0 19                         BEQ +checkTopCollision
0C1CD                           
0C1CD                               ;; Check tile at right position
0C1CD A5 2D                         LDA ball_middle
0C1CF 85 00                         STA temp
0C1D1 A5 29                         LDA ball_left
0C1D3 85 01                         STA temp+1
0C1D5 20 9B C4                      JSR sub_ConvertXYToTileType
0C1D8 29 01                         AND #TILE_IS_SOLID
0C1DA F0 0A                         BEQ +checkTopCollision
0C1DC                           
0C1DC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1DC A5 30                         LDA ball_flags
0C1DE 09 02                         ORA #NUDGE_BALL_RIGHT
0C1E0 20 42 C7                      JSR sub_InitiateNudge
0C1E3 20 F4 C4                      JSR sub_EvaluateTileType
0C1E6                               
0C1E6                               
0C1E6                           +checkTopCollision:
0C1E6                               ;; Check if ball moves up
0C1E6 A5 30                         LDA ball_flags
0C1E8 29 10                         AND #BALL_MOVES_DOWN
0C1EA D0 23                         BNE +checkBottomCollision
0C1EC                           
0C1EC                               ;; Check tile at top position
0C1EC A5 2C                         LDA ball_top
0C1EE 85 00                         STA temp
0C1F0 A5 2A                         LDA ball_center
0C1F2 85 01                         STA temp+1
0C1F4 20 9B C4                      JSR sub_ConvertXYToTileType
0C1F7 29 01                         AND #TILE_IS_SOLID
0C1F9 F0 34                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1FB                           
0C1FB                               ;; Tile is solid; move ball down and evaluate tile type
0C1FB A5 1C                         LDA ball_ypos_lo_prev
0C1FD 85 1A                         STA ball_ypos_lo
0C1FF A5 1B                         LDA ball_ypos_hi_prev
0C201 85 19                         STA ball_ypos_hi
0C203 A5 30                         LDA ball_flags
0C205 09 10                         ORA #MOVE_BALL_DOWN
0C207 85 30                         STA ball_flags
0C209 20 F4 C4                      JSR sub_EvaluateTileType
0C20C 4C 2F C2                      JMP +doneCheckingCollision
0C20F                           
0C20F                           +checkBottomCollision:
0C20F                               ;; No movement check needed: since ball is not moving up, it must move down
0C20F                           
0C20F                               ;; Check tile at bottom position
0C20F A5 2E                         LDA ball_bottom
0C211 85 00                         STA temp
0C213 A5 2A                         LDA ball_center
0C215 85 01                         STA temp+1
0C217 20 9B C4                      JSR sub_ConvertXYToTileType
0C21A 29 01                         AND #TILE_IS_SOLID
0C21C F0 11                         BEQ +doneCheckingCollision
0C21E                           
0C21E                               ;; Tile is solid; move ball up and evaluate tile type
0C21E A5 1C                         LDA ball_ypos_lo_prev
0C220 85 1A                         STA ball_ypos_lo
0C222 A5 1B                         LDA ball_ypos_hi_prev
0C224 85 19                         STA ball_ypos_hi
0C226 A5 30                         LDA ball_flags
0C228 29 EF                         AND #MOVE_BALL_UP
0C22A 85 30                         STA ball_flags
0C22C 20 F4 C4                      JSR sub_EvaluateTileType
0C22F                           
0C22F                           +doneCheckingCollision:
0C22F                           
0C22F                           
0C22F                               ;; Testinging timed PPU scroll concept
0C22F                               .include "game/test/timed_ppuscroll_test.asm"
0C22F                           ;; Timed updates (test)
0C22F                           
0C22F                               ;; If B button is pressed
0C22F A5 10                         LDA buttons_pressed
0C231 29 10                         AND #BUTTON_START
0C233 F0 73                         BEQ +end
0C235                           
0C235                               ;; Disable noise channel
0C235 A9 00                         LDA #$00
0C237 8D 15 40                      STA APU_STATUS
0C23A 8D 0C 40                      STA NOISE_VOLUME
0C23D                               
0C23D                               ;; Set up loop fading
0C23D A9 00                         LDA #$00
0C23F 85 07                         STA temp+7
0C241 A0 08                         LDY #$08
0C243                               -fadeLoop:
0C243 84 08                             STY temp+8
0C245                           
0C245                                   ;; Wait for NMI to pass
0C245 20 EB C3                          JSR sub_WaitForVBlank
0C248                                   
0C248                                   ;; Now wait for No-sprite 0
0C248                                   -
0C248 AD 02 20                              LDA PPU_STATUS
0C24B 29 40                                 AND #SPRITE_0_HIT
0C24D D0 F9                             BNE -
0C24F                               
0C24F                                   ;; Now wait for Sprite 0
0C24F                                   -
0C24F AD 02 20                              LDA PPU_STATUS
0C252 29 40                                 AND #SPRITE_0_HIT
0C254 F0 F9                             BEQ -
0C256                                       
0C256                                   ;; Setup tile row loop
0C256 A0 16                             LDY #22
0C258                                   -tileLoop:
0C258                                   
0C258                                       ;; Disable drawing
0C258 A5 12                                 LDA soft_ppu_mask
0C25A 29 F7                                 AND #%11110111
0C25C 8D 01 20                              STA PPU_MASK
0C25F                                       
0C25F                                       ;; Set up scanline loop
0C25F A2 08                                 LDX #$08
0C261                                       -scanlineLoop:
0C261 E4 08                                     CPX temp+8
0C263 D0 0A                                     BNE +wasteTime
0C265                                           
0C265                                           ;; Restore drawing
0C265 A5 12                                     LDA soft_ppu_mask
0C267 09 08                                     ORA #%00001000
0C269 8D 01 20                                  STA PPU_MASK
0C26C 4C 75 C2                                  JMP +wasteMoreTime
0C26F                           
0C26F                                           ;; Waste 12 frames
0C26F                                           +wasteTime:
0C26F E6 09                                     INC temp+9   ;+5
0C271 C6 09                                     DEC temp+9   ;+5
0C273 49 00                                     EOR #$00     ;+2
0C275                                           
0C275                                           ;; Waste about 100 frames
0C275                                           +wasteMoreTime:
0C275                                           
0C275 86 01                                     STX temp+1     ;  3 down, 97 to go
0C277 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C279                                           -wasteLoop:
0C279 EA                                            NOP
0C27A 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C27C CA                                            DEX        ;  5+5L down,  95-5L to go
0C27D D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C27F                           
0C27F A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C281 CA                                        DEX            ;  9+8L down, 91-8L to go
0C282 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C284                           
0C284 88                                    DEY
0C285 D0 D1                             BNE -tileLoop
0C287                           
0C287 A4 08                             LDY temp+8
0C289                                   
0C289 E6 07                             INC temp+7
0C28B A5 07                             LDA temp+7
0C28D C9 02                             CMP #$02
0C28F D0 B2                             BNE -fadeLoop
0C291                           
0C291 A9 00                             LDA #$00
0C293 85 07                             STA temp+7
0C295 88                                DEY
0C296 D0 AB                         BNE -fadeLoop
0C298                               
0C298                               ;; Load the next level
0C298 E6 37                         INC current_level
0C29A A5 37                         LDA current_level
0C29C C9 19                         CMP #25
0C29E D0 04                         BNE +
0C2A0 A9 00                             LDA #$00
0C2A2 85 37                             STA current_level
0C2A4                               +
0C2A4                               
0C2A4 A9 81                         LDA #LOAD_GAME_SCREEN
0C2A6 85 31                         STA screen_mode
0C2A8                           
0C2A8                           
0C2A8                           +end:
0C2A8                           
0C2A8                           
0C2A8                           +skipBallMovement:
0C2A8                               ;; Add to sprite buffer
0C2A8 A6 35                         LDX sprite_ram_pointer
0C2AA A5 19                         LDA ball_ypos_hi
0C2AC 9D 00 02                      STA ADDR_SPRITERAM,x
0C2AF E8                            INX
0C2B0 A9 01                         LDA #BALL_TILE_CHR
0C2B2 9D 00 02                      STA ADDR_SPRITERAM,x
0C2B5 E8                            INX
0C2B6 A9 00                         LDA #BALL_ATTR
0C2B8 9D 00 02                      STA ADDR_SPRITERAM,x
0C2BB E8                            INX
0C2BC A5 17                         LDA ball_xpos_hi
0C2BE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2C1 E8                            INX
0C2C2 86 35                         STX sprite_ram_pointer
0C2C4 4C 13 C3                      JMP +doneScreenLoad
0C2C7                           
0C2C7                           
0C2C7                           +checkNextScreen:
0C2C7                           
0C2C7                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C2C7                               ;; Upon pressing START, the selected level will start
0C2C7                               .include "game/include/main/select_level.asm"
0C2C7 A5 10                         LDA buttons_pressed
0C2C9 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C2CB F0 3C                         BEQ +checkStartPress
0C2CD                           
0C2CD                                   ;; Select next level (1, 5, 9, 13, 17)
0C2CD A5 37                             LDA current_level
0C2CF 18                                CLC
0C2D0 69 04                             ADC #$04
0C2D2 C9 14                             CMP #$14
0C2D4 D0 02                             BNE +
0C2D6 A9 00                                 LDA #$00
0C2D8                                   +
0C2D8 85 37                             STA current_level
0C2DA                                   
0C2DA                                   ;; Convert level number to two-byte value
0C2DA A9 00                             LDA #$00
0C2DC 85 03                             STA temp+3
0C2DE A5 37                             LDA current_level
0C2E0 18                                CLC
0C2E1 69 01                             ADC #$01
0C2E3                           
0C2E3                               -
0C2E3 C9 0A                             CMP #$0A
0C2E5 90 08                             BCC +
0C2E7 E6 03                                 INC temp+3
0C2E9 38                                    SEC
0C2EA E9 0A                                 SBC #$0A
0C2EC 4C E3 C2                              JMP -
0C2EF                                   +
0C2EF                           
0C2EF                                   ;; Add level number to PPU buffer
0C2EF 18                                CLC
0C2F0 69 01                             ADC #$01
0C2F2 85 02                             STA temp+2
0C2F4 A9 20                             LDA #$20
0C2F6 85 00                             STA temp
0C2F8 A9 D0                             LDA #$D0
0C2FA 85 01                             STA temp+1
0C2FC 20 84 CB                          JSR sub_WriteByteToPPUBuffer
0C2FF                                   
0C2FF C6 01                             DEC temp+1
0C301 A4 03                             LDY temp+3
0C303 C8                                INY
0C304 84 02                             STY temp+2
0C306 20 84 CB                          JSR sub_WriteByteToPPUBuffer
0C309                                   
0C309                               +checkStartPress:
0C309                           
0C309                           
0C309                           
0C309                               ;; If START button is pressed
0C309 A5 10                         LDA buttons_pressed
0C30B 29 10                         AND #BUTTON_START
0C30D F0 04                         BEQ +
0C30F                                   ;; Start the level
0C30F A9 81                             LDA #LOAD_GAME_SCREEN
0C311 85 31                             STA screen_mode
0C313                               +
0C313                           
0C313                           
0C313                           
0C313                           +doneScreenLoad:
0C313                           
0C313                               ;; Load animations (if any)
0C313                               .include "game/include/main/load_animations.asm"
0C313                               ;; Set up loop
0C313 A2 00                         LDX #$00
0C315                               -loop_load_animation:
0C315                                   ;; Check if current animation is active. If not, goto next
0C315 BD 44 03                          LDA explosion_active,x
0C318 D0 03                             BNE +
0C31A 4C B4 C3                              JMP +next
0C31D                                   +
0C31D                           
0C31D                                   ;; Check the explosion framecounter
0C31D BD 30 03                          LDA explosion_framecounter,x
0C320 D0 26                             BNE +
0C322                                       ;; Framecounter is 0
0C322                                       ;; Reset to animation speed
0C322 A9 04                                 LDA #ANIMATION_SPEED
0C324 9D 30 03                              STA explosion_framecounter,x
0C327                           
0C327                                       ;; Set next animation frame, and check if we're done yet
0C327 FE 34 03                              INC explosion_currentframe,x
0C32A BD 34 03                              LDA explosion_currentframe,x
0C32D C9 0A                                 CMP #ANIM_SLIDES
0C32F D0 17                                 BNE +
0C331                           
0C331                                       ;; If we're done, inactivate current explosion, clean
0C331                                       ;; up sprite RAM and go to the next one
0C331 A9 00                                 LDA #$00
0C333 9D 44 03                              STA explosion_active,x
0C336                                       
0C336 A9 09                                 LDA #SLIDE_SIZE
0C338 0A                                    ASL
0C339 0A                                    ASL
0C33A A8                                    TAY
0C33B A9 EF                                 LDA #$EF
0C33D                                       -
0C33D 88                                        DEY
0C33E 99 00 02                                  STA ADDR_SPRITERAM,y
0C341 C0 00                                     CPY #00
0C343 D0 F8                                 BNE -
0C345                                       
0C345 4C B4 C3                              JMP +next
0C348                                   +
0C348                           
0C348                                   ;; Load (x,y) position in temp variables
0C348 BD 3C 03                          LDA explosion_x,x
0C34B 85 01                             STA temp+1
0C34D 85 03                             STA temp+3
0C34F BD 40 03                          LDA explosion_y,x
0C352 85 02                             STA temp+2
0C354                           
0C354                                   ;; Load attribute in temp variable
0C354 BD 38 03                          LDA explosion_attributes,x
0C357 85 04                             STA temp+4
0C359                           
0C359                                   ;; Load current frame into Y-register
0C359 BC 34 03                          LDY explosion_currentframe,x
0C35C                           
0C35C                                   ;; Load current frame ROM address from table
0C35C B9 D8 CC                          LDA explosion_anim_lo,y
0C35F 85 0C                             STA pointer
0C361 B9 CE CC                          LDA explosion_anim_hi,y
0C364 85 0D                             STA pointer+1
0C366                           
0C366                                   ;; Save x-register on stack
0C366 8A                                TXA
0C367 48                                PHA
0C368                           
0C368                                   ;; Load sprites into sprite RAM
0C368 A6 35                             LDX sprite_ram_pointer
0C36A A0 00                             LDY #$00
0C36C                           
0C36C                                   ;; Prepare (x,y) offset for loop
0C36C 84 00                             STY temp
0C36E                           
0C36E                                   -loop_load_sprite:
0C36E                                   
0C36E                                       ;; Do not draw empty sprites
0C36E B1 0C                                 LDA (pointer),y
0C370 F0 18                                 BEQ +nextSprite
0C372                                   
0C372                                           ;; Add y-position to sprite ram buffer
0C372 A5 02                                     LDA temp+2
0C374 9D 00 02                                  STA ADDR_SPRITERAM,x
0C377 E8                                        INX
0C378                           
0C378                                           ;; Get tile number from frame ROM address, and
0C378                                           ;; add it to sprite ram buffer
0C378 B1 0C                                     LDA (pointer),y
0C37A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C37D E8                                        INX
0C37E                           
0C37E                                           ;; Add attribute data to sprite ram buffer
0C37E A5 04                                     LDA temp+4
0C380 9D 00 02                                  STA ADDR_SPRITERAM,x
0C383 E8                                        INX
0C384                           
0C384                                           ;; Add x-position to sprite ram buffer
0C384 A5 03                                     LDA temp+3
0C386 9D 00 02                                  STA ADDR_SPRITERAM,x
0C389 E8                                        INX
0C38A                           
0C38A                                       +nextSprite:
0C38A                           
0C38A                                       ;; Check if all sprites are done
0C38A C8                                    INY
0C38B C0 09                                 CPY #SLIDE_SIZE
0C38D F0 21                                 BEQ +done
0C38F                           
0C38F                                       ;; Update x value
0C38F A5 03                                 LDA temp+3
0C391 18                                    CLC
0C392 69 08                                 ADC #$08
0C394 85 03                                 STA temp+3
0C396                           
0C396                                       ;; Update temp for x,y position
0C396 E6 00                                 INC temp
0C398 A5 00                                 LDA temp
0C39A C9 03                                 CMP #SLIDE_WIDTH
0C39C D0 0F                                 BNE +
0C39E                                           ;; Row is done; reset x-position
0C39E A5 01                                     LDA temp+1
0C3A0 85 03                                     STA temp+3
0C3A2                           
0C3A2                                           ;; Update y-position
0C3A2 A5 02                                     LDA temp+2
0C3A4 18                                        CLC
0C3A5 69 08                                     ADC #$08
0C3A7 85 02                                     STA temp+2
0C3A9                           
0C3A9                                           ;; Reset row counter
0C3A9 A9 00                                     LDA #$00
0C3AB 85 00                                     STA temp
0C3AD                                       +
0C3AD                           
0C3AD 4C 6E C3                          JMP -loop_load_sprite
0C3B0                           
0C3B0                               +done:
0C3B0 86 35                             STX sprite_ram_pointer
0C3B2                           
0C3B2                                   ;; Retrieve x-register from stack
0C3B2 68                                PLA
0C3B3 AA                                TAX
0C3B4                           
0C3B4                               +next:
0C3B4                                   ;; Check if all animations have been updated
0C3B4 E8                                INX
0C3B5 E0 04                             CPX #MAX_ANIMATIONS
0C3B7 F0 03                             BEQ +done
0C3B9                           
0C3B9 4C 15 C3                      JMP -loop_load_animation
0C3BC                           +done:
0C3BC                           
0C3BC                               ;; Sprite clean-up
0C3BC A6 35                         LDX sprite_ram_pointer
0C3BE A9 EF                         LDA #$EF
0C3C0                               -
0C3C0 9D 00 02                          STA ADDR_SPRITERAM,x
0C3C3 E8                                INX
0C3C4 D0 FA                         BNE -
0C3C6 4C 57 C0                      JMP MainGameLoop
0C3C9                           
0C3C9                           ;; Subroutines
0C3C9                           .include "include/subroutines.asm"
0C3C9                           
0C3C9                           ;; RNG
0C3C9                           .include "subroutine/GetRandomNumber.asm"
0C3C9                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3C9                           ;;
0C3C9                           ;; subroutine/GetRandomNumber.asm
0C3C9                           ;;
0C3C9                           ;; Simple and fast random number generator by White Flame.
0C3C9                           ;;
0C3C9                           ;; Set random_seed to an arbitrary number to randomize between
0C3C9                           ;; gaming sessions, for instance using the frame counter upon
0C3C9                           ;; pressing START on the intro screen.
0C3C9                           ;;
0C3C9                           ;;     ;; IF START PRESSED:
0C3C9                           ;;     LDA frame_counter
0C3C9                           ;;     STA random_seed
0C3C9                           ;;
0C3C9                           ;; Source:
0C3C9                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C3C9                           ;;
0C3C9                           ;;
0C3C9                           
0C3C9                           sub_GetRandomNumber:
0C3C9                               ;; Force EOR if random_seed is zero
0C3C9 A5 16                         LDA random_seed
0C3CB F0 05                         BEQ +doEor
0C3CD                           
0C3CD                               ;; Shift left, and EOR if the high bit is set
0C3CD 0A                            ASL
0C3CE F0 04                         BEQ +noEor
0C3D0 90 02                         BCC +noEor
0C3D2                           
0C3D2                           +doEor:
0C3D2 49 1D                         EOR #$1D
0C3D4                           
0C3D4                           +noEor:
0C3D4 85 16                         STA random_seed
0C3D6                           
0C3D6 60                            RTS
0C3D7                           
0C3D7                           
0C3D7                           ;; Read controller input
0C3D7                           .include "subroutine/ReadController.asm"
0C3D7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3D7                           ;;
0C3D7                           ;; subroutine/ReadController.asm
0C3D7                           ;;
0C3D7                           ;; Subroutine that polls the controller and stores the input
0C3D7                           ;; buttons in a variable. This version only handles controller
0C3D7                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C3D7                           ;;
0C3D7                           ;;
0C3D7                           
0C3D7                           sub_ReadController:
0C3D7                           
0C3D7                               ;; Set strobe bit
0C3D7 A9 01                         LDA #$01
0C3D9 8D 16 40                      STA JOYPAD_1
0C3DC                           
0C3DC                               ;; Set up ring counter
0C3DC 85 0F                         STA buttons_held
0C3DE                           
0C3DE                               ;; Clear strobe bit
0C3DE 4A                            LSR
0C3DF 8D 16 40                      STA JOYPAD_1
0C3E2                           
0C3E2                               ;; Loop through button presses
0C3E2                               -
0C3E2 AD 16 40                          LDA JOYPAD_1
0C3E5 4A                                LSR
0C3E6 26 0F                             ROL buttons_held
0C3E8                           
0C3E8                               ;; Check if ring counter is done
0C3E8 90 F8                         BCC -
0C3EA                           
0C3EA                               ;; Return from subroutine
0C3EA 60                            RTS
0C3EB                           
0C3EB                           
0C3EB                           ;; vBlank wait
0C3EB                           .include "subroutine/WaitForVBlank.asm"
0C3EB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3EB                           ;;
0C3EB                           ;; subroutine/WaitForVBlank.asm
0C3EB                           ;;
0C3EB                           ;; Subroutine that essentially pauses script execution until
0C3EB                           ;; vBlank happens.
0C3EB                           ;;
0C3EB                           ;;
0C3EB                           
0C3EB                           sub_WaitForVBlank:
0C3EB 2C 02 20                      BIT $2002
0C3EE 10 FB                         BPL sub_WaitForVBlank
0C3F0 60                            RTS
0C3F1                           
0C3F1                           
0C3F1                           ;; Game specific subroutines
0C3F1                           .include "game/include/subroutines.asm"
0C3F1                           ;; additional game-specific subroutines go here
0C3F1                           
0C3F1                           .include "game/subroutine/BackgroundNoise.asm"
0C3F1                           
0C3F1                           sub_BackgroundNoise:
0C3F1 A9 32                         LDA #$32
0C3F3 8D 0C 40                      STA NOISE_VOLUME
0C3F6 A9 0E                         LDA #$0E
0C3F8 8D 0E 40                      STA NOISE_PERIOD
0C3FB 85 3B                         STA current_noise
0C3FD 60                            RTS0C3FE                           .include "game/subroutine/ClearScreen.asm"
0C3FE                           ;; Subroutine to clear the screen
0C3FE                           ;; If it's a game screen, add noise
0C3FE                           
0C3FE                           sub_ClearScreen:
0C3FE                               ;; Check of game screen or not
0C3FE A5 31                         LDA screen_mode
0C400 29 03                         AND #CHECK_SCREEN_MODE
0C402 C9 01                         CMP #IS_GAME_SCREEN
0C404 F0 02                         BEQ +
0C406 A9 00                             LDA #$00
0C408                               +
0C408 85 01                         STA temp+1
0C40A                               
0C40A                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C40A 2C 02 20                      BIT PPU_STATUS
0C40D A9 20                         LDA #$20
0C40F 8D 06 20                      STA PPU_ADDR
0C412 A9 00                         LDA #$00
0C414 8D 06 20                      STA PPU_ADDR
0C417                               
0C417                               ;; Set up tile to draw and loop
0C417 85 00                         STA temp
0C419 AA                            TAX
0C41A A8                            TAY
0C41B                           
0C41B                               -     
0C41B                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C41B A5 00                             LDA temp
0C41D 8D 07 20                          STA PPU_DATA
0C420                           
0C420                                   ;; Check if we should draw noise next. Noise is drawn if:
0C420                                   ;; - Screen mode is game screen
0C420                                   ;; - Y between #$06 and #$19 (inclusive)
0C420                                   ;; - X between #$02 and #$1D (inclusive)
0C420                                   
0C420                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C420 A5 01                             LDA temp+1
0C422 F0 1C                             BEQ +nextTileInRow
0C424                                   
0C424                                   ;; If Y < $6, skip the check
0C424 C0 06                             CPY #$06
0C426 90 18                             BCC +nextTileInRow
0C428                                   
0C428                                   ;; If X < $1, skip the check
0C428 E0 01                             CPX #$01
0C42A 90 14                             BCC +nextTileInRow
0C42C                                   
0C42C                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C42C E0 1D                             CPX #$1D
0C42E D0 04                             BNE +
0C430 A9 00                                 LDA #$00
0C432 85 00                                 STA temp
0C434                                   +
0C434 B0 0A                             BCS +nextTileInRow
0C436                                   
0C436                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C436 20 C9 C3                          JSR sub_GetRandomNumber
0C439 29 07                             AND #%00000111
0C43B 18                                CLC
0C43C 69 68                             ADC #$68
0C43E 85 00                             STA temp
0C440                           
0C440                           +nextTileInRow:
0C440                                   
0C440                                   ;; Check if a row has been done. If not, draw the next
0C440 E8                                INX
0C441 E0 20                             CPX #$20
0C443 D0 D6                             BNE -
0C445                                   
0C445                                   ;; Go to the next row (if any left)
0C445 A2 00                             LDX #00
0C447 C8                                INY
0C448                                   
0C448                                   ;; If Y is 1A, skip noise tile check until done drawing
0C448 C0 1A                             CPY #$1A
0C44A D0 04                             BNE +
0C44C A9 00                                 LDA #$00
0C44E 85 01                                 STA temp+1
0C450                                   +
0C450                                   
0C450 C0 1E                             CPY #$1E
0C452 D0 C7                         BNE -
0C454                           
0C454                               ;; Clear attribute table
0C454 A9 23                         LDA #$23
0C456 8D 06 20                      STA PPU_ADDR
0C459 A9 C0                         LDA #$C0
0C45B 8D 06 20                      STA PPU_ADDR
0C45E A9 00                         LDA #$00
0C460 A2 40                         LDX #$40
0C462                               -
0C462 8D 07 20                          STA PPU_DATA
0C465 CA                                DEX
0C466 D0 FA                         BNE -
0C468                               
0C468 60                            RTS0C469                           .include "game/subroutine/ColorizeBall.asm"
0C469                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C469                           ;;
0C469                           ;;  Subroutine: ColorizeBall
0C469                           ;;
0C469                           ;;  Applies the color set through ball_flags to the ball sprite.
0C469                           ;;
0C469                           ;;
0C469                           
0C469                           
0C469                           sub_ColorizeBall:
0C469                           
0C469                               ;; Get color from ball_flags
0C469 4A                            LSR
0C46A 4A                            LSR
0C46B 4A                            LSR
0C46C 4A                            LSR
0C46D 4A                            LSR
0C46E AA                            TAX
0C46F                           
0C46F                               ;; Add new light color of ball to PPU palette
0C46F A9 3F                         LDA #$3F
0C471 85 00                         STA temp
0C473 A9 11                         LDA #$11
0C475 85 01                         STA temp+1
0C477 BD E8 CC                      LDA tbl_BallColorLight,x
0C47A 85 02                         STA temp+2
0C47C 20 84 CB                      JSR sub_WriteByteToPPUBuffer
0C47F                               
0C47F                               ;; Add new dark color of ball to PPU palette
0C47F E6 01                         INC temp+1
0C481 BD E2 CC                      LDA tbl_BallColorDark,x
0C484 85 02                         STA temp+2
0C486 20 84 CB                      JSR sub_WriteByteToPPUBuffer
0C489                               
0C489 60                            RTS
0C48A                           
0C48A                           .include "game/subroutine/ColorsMatch.asm"
0C48A                           
0C48A                           ;; Subroutine to check if ball color matches colliding tile color
0C48A                           
0C48A                           sub_ColorsMatch:
0C48A                               ;; Save tile color in temp variable
0C48A A5 38                         LDA colliding_tile
0C48C 29 0E                         AND #%00001110
0C48E 85 00                         STA temp
0C490                           
0C490                               ;; Get ball color
0C490 A5 30                         LDA ball_flags
0C492 29 E0                         AND #%11100000
0C494 4A                            LSR
0C495 4A                            LSR
0C496 4A                            LSR
0C497 4A                            LSR
0C498                           
0C498                               ;; Compare with tile color
0C498 C5 00                         CMP temp
0C49A 60                            RTS
0C49B                           
0C49B                           .include "game/subroutine/ConvertXYToTileType.asm"
0C49B                           
0C49B                           ;; Subroutine to convert the ball's position to a tile type
0C49B                           ;; - Expects temp to be y-position of ball within game area
0C49B                           ;; - Expects temp+1 to be x-position of ball within game area
0C49B                           ;; - Puts result in accumulator and zp variable
0C49B                           ;; - Corrupts X-register
0C49B                           
0C49B                           sub_ConvertXYToTileType:
0C49B A5 01                         LDA temp+1
0C49D 4A                            LSR
0C49E 4A                            LSR
0C49F 4A                            LSR
0C4A0 4A                            LSR
0C4A1 85 09                         STA temp+9
0C4A3 A5 00                         LDA temp
0C4A5 29 F0                         AND #%11110000
0C4A7 18                            CLC
0C4A8 65 09                         ADC temp+9
0C4AA 85 09                         STA temp+9
0C4AC AA                            TAX
0C4AD BD 00 04                      LDA tile_type, x
0C4B0 85 38                         STA colliding_tile
0C4B2 60                            RTS
0C4B3                           
0C4B3                           .include "game/subroutine/DisableEnableRendering.asm"
0C4B3                           sub_DisableRendering:
0C4B3                               ;; Force NMI skip, disable rendering
0C4B3 A9 01                     	LDA #$01
0C4B5 85 14                     	STA force_skip_nmi
0C4B7 20 EB C3                      JSR sub_WaitForVBlank
0C4BA A5 12                         LDA soft_ppu_mask
0C4BC 29 E7                         AND #%11100111
0C4BE 8D 01 20                      STA PPU_MASK
0C4C1 85 12                         STA soft_ppu_mask
0C4C3 20 EB C3                      JSR sub_WaitForVBlank
0C4C6 60                            RTS
0C4C7                           
0C4C7                           sub_EnableRendering:
0C4C7                               ;; Enable rendering
0C4C7 A9 00                     	LDA #$00
0C4C9 8D 05 20                  	STA PPU_SCROLL
0C4CC 8D 05 20                  	STA PPU_SCROLL
0C4CF 20 EB C3                      JSR sub_WaitForVBlank
0C4D2 85 14                     	STA force_skip_nmi
0C4D4 A5 12                         LDA soft_ppu_mask
0C4D6 09 18                         ORA #%00011000
0C4D8 85 12                         STA soft_ppu_mask
0C4DA 8D 01 20                      STA PPU_MASK
0C4DD 20 EB C3                      JSR sub_WaitForVBlank
0C4E0 60                            RTS
0C4E1                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C4E1                           sub_drawIntroScreenLogoTile:
0C4E1 B9 CA CB                      LDA tbl_IntroScreenLogoChr,y
0C4E4 C9 60                         CMP #$60
0C4E6 D0 08                         BNE +
0C4E8 20 C9 C3                          JSR sub_GetRandomNumber
0C4EB 29 07                             AND #$07
0C4ED 18                                CLC
0C4EE 69 60                             ADC #$60
0C4F0                               +
0C4F0 8D 07 20                      STA PPU_DATA
0C4F3 60                            RTS
0C4F4                           .include "game/subroutine/EvaluateTileType.asm"
0C4F4                           
0C4F4                           ;; Subroutine to evaluate the colliding tile type and take its
0C4F4                           ;; corresponding action (move block, kill player, ...)
0C4F4                           ;; - Expects X-register to be the tile_type offset
0C4F4                           ;; - Uses zp variable colliding_tile
0C4F4                           
0C4F4                           sub_EvaluateTileType:
0C4F4                           
0C4F4                               ;; Check if collided tile is a color block
0C4F4 A5 38                         LDA colliding_tile
0C4F6 29 80                         AND #IS_COLOR_BLOCK
0C4F8 D0 03                         BNE +
0C4FA 4C 0D C7                          JMP +checkIfPaintBlock
0C4FD                               +
0C4FD                               
0C4FD                               ;; It's a color block. Check if the colors match
0C4FD 20 8A C4                      JSR sub_ColorsMatch
0C500 F0 01                         BEQ +
0C502                                   ;; Colors don't match - return
0C502 60                                RTS
0C503                               +
0C503                           
0C503                               ;; Colors match. Destroy color block
0C503 A4 33                         LDY ppu_buffer_pointer
0C505                               
0C505                               ;; (this will be a subroutine)
0C505                               ;; Get PPU address from YX index
0C505                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C505                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C505 8A                            TXA
0C506 29 C0                         AND #%11000000
0C508 18                            CLC
0C509 2A                            ROL
0C50A 2A                            ROL
0C50B 2A                            ROL
0C50C 69 20                         ADC #$20
0C50E 85 00                         STA temp
0C510 8A                            TXA
0C511 29 0F                         AND #%00001111
0C513 0A                            ASL
0C514 85 01                         STA temp+1
0C516 8A                            TXA
0C517 29 30                         AND #%00110000
0C519 0A                            ASL
0C51A 0A                            ASL
0C51B 18                            CLC
0C51C 65 01                         ADC temp+1
0C51E 85 01                         STA temp+1
0C520 A5 00                         LDA temp
0C522 69 00                         ADC #$00
0C524 85 00                         STA temp
0C526 A5 01                         LDA temp+1
0C528 18                            CLC
0C529 69 C2                         ADC #$C2
0C52B 85 01                         STA temp+1
0C52D A5 00                         LDA temp
0C52F 69 00                         ADC #$00
0C531 85 00                         STA temp
0C533                           
0C533                               
0C533                               ;; (this will also be a subroutine eventually)
0C533                               ;; TILE 1: if metatile on top left is solid, draw
0C533                               ;; null tile, else draw random noise tile
0C533 A9 00                         LDA #%00
0C535 85 32                         STA ppu_buffer_update
0C537                               
0C537 A5 00                         LDA temp
0C539 99 00 03                      STA ppu_buffer,y
0C53C C8                            INY
0C53D A5 01                         LDA temp+1
0C53F 99 00 03                      STA ppu_buffer,y
0C542 C8                            INY
0C543                               
0C543 8A                            TXA
0C544 29 0F                         AND #%00001111
0C546 F0 11                         BEQ +drawRandomTile
0C548                           
0C548 8A                            TXA
0C549 29 F0                         AND #%11110000
0C54B F0 0C                         BEQ +drawRandomTile
0C54D                           
0C54D BD EF 03                      LDA tile_type-17,x
0C550 29 01                         AND #%00000001
0C552 F0 05                         BEQ +drawRandomTile  
0C554                           
0C554                               ;; Draw a null tile
0C554 A9 00                         LDA #$00
0C556 4C 61 C5                      JMP +addToPPUBuffer
0C559                               
0C559                           +drawRandomTile:
0C559                               ;; Draw a random tile
0C559 20 C9 C3                      JSR sub_GetRandomNumber
0C55C 29 07                         AND #%00000111
0C55E 18                            CLC
0C55F 69 68                         ADC #$68
0C561                               
0C561                               ;; Add tile to ppu buffer
0C561                           +addToPPUBuffer:
0C561 99 00 03                      STA ppu_buffer,y
0C564 C8                            INY
0C565                           
0C565                               ;; TILE 2: If metatile above is solid, draw null,
0C565                               ;; else draw random noise.
0C565 E6 01                         INC temp+1
0C567 A5 00                         LDA temp
0C569 99 00 03                      STA ppu_buffer,y
0C56C C8                            INY
0C56D A5 01                         LDA temp+1
0C56F 99 00 03                      STA ppu_buffer,y
0C572 C8                            INY
0C573                               
0C573 8A                            TXA
0C574 29 F0                         AND #%11110000
0C576 F0 0C                         BEQ +drawRandomTile
0C578                               
0C578 BD F0 03                      LDA tile_type-16,x
0C57B 29 01                         AND #%00000001
0C57D F0 05                         BEQ +drawRandomTile
0C57F                               
0C57F A9 00                         LDA #%00
0C581 4C 8C C5                      JMP +addToPPUBuffer
0C584                           
0C584                           +drawRandomTile:
0C584 20 C9 C3                      JSR sub_GetRandomNumber
0C587 29 07                         AND #%00000111
0C589 18                            CLC
0C58A 69 68                         ADC #$68
0C58C                           
0C58C                           +addToPPUBuffer:
0C58C 99 00 03                      STA ppu_buffer,y
0C58F C8                            INY
0C590                               
0C590                               ;; TILE 3 - If metatile left is solid, draw null,
0C590                               ;; else draw random noise.
0C590 A5 01                         LDA temp+1
0C592 18                            CLC
0C593 69 1F                         ADC #$1F
0C595 85 01                         STA temp+1
0C597 A5 00                         LDA temp
0C599 69 00                         ADC #$00
0C59B 85 00                         STA temp
0C59D 99 00 03                      STA ppu_buffer,y
0C5A0 C8                            INY
0C5A1 A5 01                         LDA temp+1
0C5A3 99 00 03                      STA ppu_buffer,y
0C5A6 C8                            INY
0C5A7                               
0C5A7 8A                            TXA
0C5A8 29 0F                         AND #%00001111
0C5AA F0 0C                         BEQ +drawRandomTile
0C5AC                               
0C5AC BD FF 03                      LDA tile_type-1,x
0C5AF 29 01                         AND #%00000001
0C5B1 F0 05                         BEQ +drawRandomTile
0C5B3                               
0C5B3 A9 00                         LDA #%00
0C5B5 4C C0 C5                      JMP +addToPPUBuffer
0C5B8                           
0C5B8                           +drawRandomTile:
0C5B8 20 C9 C3                      JSR sub_GetRandomNumber
0C5BB 29 07                         AND #%00000111
0C5BD 18                            CLC
0C5BE 69 68                         ADC #$68
0C5C0                               
0C5C0                           +addToPPUBuffer:
0C5C0 99 00 03                      STA ppu_buffer,y
0C5C3 C8                            INY
0C5C4                               
0C5C4                               ;; TILE 4 - Always random noise
0C5C4 E6 01                         INC temp+1
0C5C6 A5 00                         LDA temp
0C5C8 99 00 03                      STA ppu_buffer,y
0C5CB C8                            INY
0C5CC A5 01                         LDA temp+1
0C5CE 99 00 03                      STA ppu_buffer,y
0C5D1 C8                            INY
0C5D2 20 C9 C3                      JSR sub_GetRandomNumber
0C5D5 29 07                         AND #%00000111
0C5D7 18                            CLC
0C5D8 69 68                         ADC #$68
0C5DA 99 00 03                      STA ppu_buffer,y
0C5DD C8                            INY
0C5DE                           
0C5DE                               ;; TILE 5 - If tile on the right is solid, skip,
0C5DE                               ;; else draw random noise tile
0C5DE E6 01                         INC temp+1
0C5E0                               
0C5E0 8A                            TXA
0C5E1 29 0F                         AND #%00001111
0C5E3 C9 0D                         CMP #$0D
0C5E5 F0 1F                         BEQ +skipTile
0C5E7                               
0C5E7 BD 01 04                      LDA tile_type+1,x
0C5EA 29 01                         AND #%00000001
0C5EC D0 18                         BNE +skipTile
0C5EE A5 00                             LDA temp
0C5F0 99 00 03                          STA ppu_buffer,y
0C5F3 C8                                INY
0C5F4 A5 01                             LDA temp+1
0C5F6 99 00 03                          STA ppu_buffer,y
0C5F9 C8                                INY
0C5FA 20 C9 C3                          JSR sub_GetRandomNumber
0C5FD 29 07                             AND #%00000111
0C5FF 18                                CLC
0C600 69 68                             ADC #$68
0C602 99 00 03                          STA ppu_buffer,y
0C605 C8                                INY    
0C606                               +skipTile:
0C606                           
0C606                               ;; TILE 6 - If tile on bottom is solid, skip,
0C606                               ;; else draw random noise
0C606 A5 01                         LDA temp+1
0C608 18                            CLC
0C609 69 1F                         ADC #$1F
0C60B 85 01                         STA temp+1
0C60D A5 00                         LDA temp
0C60F 69 00                         ADC #$00
0C611 85 00                         STA temp
0C613                           
0C613 8A                            TXA
0C614 29 F0                         AND #%11110000
0C616 C9 90                         CMP #$90
0C618 F0 1F                         BEQ +skipTile
0C61A                           
0C61A BD 10 04                      LDA tile_type+16,x
0C61D 29 01                         AND #%00000001
0C61F D0 18                         BNE +skipTile
0C621 A5 00                             LDA temp
0C623 99 00 03                          STA ppu_buffer,y
0C626 C8                                INY
0C627 A5 01                             LDA temp+1
0C629 99 00 03                          STA ppu_buffer,y
0C62C C8                                INY
0C62D 20 C9 C3                          JSR sub_GetRandomNumber
0C630 29 07                             AND #%00000111
0C632 18                                CLC
0C633 69 68                             ADC #$68
0C635 99 00 03                          STA ppu_buffer,y
0C638 C8                                INY    
0C639                               +skipTile:
0C639                               
0C639                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C639                               ;; else draw random noise
0C639 E6 01                         INC temp+1
0C63B                           
0C63B 8A                            TXA
0C63C 29 F0                         AND #%11110000
0C63E C9 90                         CMP #$90
0C640 F0 26                         BEQ +skipTile
0C642                               
0C642 8A                            TXA
0C643 29 0F                         AND #%00001111
0C645 C9 0D                         CMP #$0D
0C647 F0 1F                         BEQ +skipTile
0C649                               
0C649 BD 11 04                      LDA tile_type+17,x
0C64C 29 01                         AND #%00000001
0C64E D0 18                         BNE +skipTile
0C650 A5 00                             LDA temp
0C652 99 00 03                          STA ppu_buffer,y
0C655 C8                                INY
0C656 A5 01                             LDA temp+1
0C658 99 00 03                          STA ppu_buffer,y
0C65B C8                                INY
0C65C 20 C9 C3                          JSR sub_GetRandomNumber
0C65F 29 07                             AND #%00000111
0C661 18                                CLC
0C662 69 68                             ADC #$68
0C664 99 00 03                          STA ppu_buffer,y
0C667 C8                                INY    
0C668                               +skipTile:   
0C668                           
0C668                           
0C668                               ;; - Update attribute table accordingly through ppu buffer
0C668 A9 23                         LDA #$23
0C66A 99 00 03                      STA ppu_buffer,y
0C66D C8                            INY
0C66E                               
0C66E 8A                            TXA
0C66F 29 F0                         AND #%11110000
0C671 4A                            LSR
0C672 4A                            LSR
0C673 4A                            LSR
0C674 4A                            LSR
0C675 18                            CLC
0C676 69 01                         ADC #1
0C678 4A                            LSR
0C679 0A                            ASL
0C67A 0A                            ASL
0C67B 0A                            ASL
0C67C 18                            CLC
0C67D 69 C8                         ADC #$C8
0C67F 85 00                         STA temp
0C681 8A                            TXA
0C682 29 0F                         AND #%00001111
0C684 18                            CLC
0C685 69 01                         ADC #$01
0C687 4A                            LSR
0C688 18                            CLC
0C689 65 00                         ADC temp
0C68B 85 00                         STA temp
0C68D 99 00 03                      STA ppu_buffer,y
0C690 C8                            INY
0C691                                  
0C691 8A                            TXA
0C692 29 10                         AND #%00010000
0C694 F0 05                         BEQ +
0C696 A9 F0                             LDA #%11110000
0C698 4C 9D C6                          JMP ++
0C69B                               +
0C69B A9 0F                         LDA #%00001111
0C69D                               ++
0C69D 85 02                         STA temp+2
0C69F                               
0C69F 8A                            TXA
0C6A0 48                            PHA
0C6A1 29 01                         AND #%00000001
0C6A3 F0 07                         BEQ +
0C6A5 A5 02                             LDA temp+2
0C6A7 09 CC                             ORA #%11001100
0C6A9 4C B0 C6                          JMP ++
0C6AC                               +
0C6AC A5 02                         LDA temp+2
0C6AE 09 33                         ORA #%00110011
0C6B0                               ++
0C6B0 85 02                         STA temp+2
0C6B2                               
0C6B2 A5 00                         LDA temp
0C6B4 38                            SEC
0C6B5 E9 C0                         SBC #$C0
0C6B7 AA                            TAX
0C6B8 BD A0 04                      LDA tile_attributes,x
0C6BB 25 02                         AND temp+2
0C6BD 9D A0 04                      STA tile_attributes,x
0C6C0 99 00 03                      STA ppu_buffer,y
0C6C3 C8                            INY
0C6C4 68                            PLA
0C6C5 AA                            TAX
0C6C6                           
0C6C6                               ;; Tell PPU to update tiles and attributes next frame
0C6C6 84 33                         STY ppu_buffer_pointer
0C6C8 A9 01                         LDA #$01
0C6CA 85 32                         STA ppu_buffer_update
0C6CC                            
0C6CC                               
0C6CC                               ;; - Load destruction animation on tile
0C6CC                               ;; Get most recent slot for explosion    
0C6CC 8A                            TXA
0C6CD 85 02                         STA temp+2
0C6CF A6 34                         LDX explosion_pointer
0C6D1                           
0C6D1                               ;; If 0, use max pointer value
0C6D1 D0 02                         BNE +
0C6D3 A2 04                             LDX #MAX_ANIMATIONS
0C6D5                               +
0C6D5                           
0C6D5                               ;; Decrease pointer by one
0C6D5 CA                            DEX
0C6D6 86 34                         STX explosion_pointer
0C6D8                           
0C6D8                               ;; Load explosion data into RAM
0C6D8 A9 00                         LDA #$00
0C6DA 9D 34 03                      STA explosion_currentframe,x
0C6DD                           
0C6DD A9 04                         LDA #ANIMATION_SPEED
0C6DF 9D 30 03                      STA explosion_framecounter,x
0C6E2                           
0C6E2 A5 02                         LDA temp+2
0C6E4 29 0F                         AND #%00001111
0C6E6 A8                            TAY
0C6E7 B9 37 D4                      LDA tbl_Times16,y
0C6EA 18                            CLC
0C6EB 69 0E                         ADC #$0E
0C6ED 9D 3C 03                      STA explosion_x,x
0C6F0                           
0C6F0 A5 02                         LDA temp+2
0C6F2 29 F0                         AND #%11110000
0C6F4 18                            CLC
0C6F5 69 29                         ADC #$29
0C6F7 9D 40 03                      STA explosion_y,x
0C6FA                           
0C6FA A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C6FC 9D 38 03                      STA explosion_attributes,x
0C6FF A9 01                         LDA #$01
0C701 9D 44 03                      STA explosion_active,x
0C704                           
0C704 A5 02                         LDA temp+2
0C706 AA                            TAX
0C707                               
0C707                               
0C707                               ;; - Write #$00 in tile type ram (makes not-solid)
0C707 A9 00                         LDA #$00
0C709 9D 00 04                      STA tile_type, x
0C70C                              
0C70C                               
0C70C                               ;; - If there are no color blocks left:
0C70C                               ;;   - Freeze ball
0C70C                               ;;   - Initiate level-win state
0C70C                               ;; [@TODO]
0C70C                               
0C70C 60                            RTS
0C70D                           
0C70D                           +checkIfPaintBlock:
0C70D                           
0C70D                           
0C70D                               ;; Check if collided tile is a paint block
0C70D A5 38                         LDA colliding_tile
0C70F 29 20                         AND #IS_PAINT_BLOCK
0C711 F0 1A                         BEQ +checkIfDeathBlock
0C713                                   ;; It's a paint block. Update ball color
0C713                                   ;; Save x-register
0C713 8A                                TXA
0C714 48                                PHA
0C715                           
0C715                                   ;; Get tile color
0C715 A5 38                             LDA colliding_tile
0C717 29 0E                             AND #%00001110
0C719 0A                                ASL
0C71A 0A                                ASL
0C71B 0A                                ASL
0C71C 0A                                ASL
0C71D 85 00                             STA temp
0C71F                           
0C71F                                   ;; Apply tile color to ball
0C71F A5 30                             LDA ball_flags
0C721 29 1F                             AND #%00011111
0C723 05 00                             ORA temp
0C725 85 30                             STA ball_flags
0C727 20 69 C4                          JSR sub_ColorizeBall
0C72A                           
0C72A                                   ;; Restore x-register
0C72A 68                                PLA
0C72B AA                                TAX
0C72C                           
0C72C                                   ;; Return
0C72C 60                                RTS
0C72D                               +checkIfDeathBlock:
0C72D                           
0C72D                               ;; Check if collided tile is a death block
0C72D A5 38                         LDA colliding_tile
0C72F 29 10                         AND #IS_DEATH_BLOCK
0C731 F0 01                         BEQ +checkIfMoveBlock
0C733                                   ;; It is a death block. Kill player and return (@TODO)
0C733                           ;        LDA ball_flags
0C733                           ;        ORA #%00000101
0C733                           ;        STA ball_flags
0C733 60                                RTS
0C734                               +checkIfMoveBlock:
0C734                           
0C734                               ;; Check if collided tile is a move block
0C734 A5 38                         LDA colliding_tile
0C736 29 40                         AND #IS_MOVE_BLOCK
0C738 F0 07                         BEQ +done
0C73A                                   ;; It is a move block. Check if colors match
0C73A 20 8A C4                          JSR sub_ColorsMatch
0C73D F0 01                             BEQ +
0C73F                                       ;; Colors don't match - return
0C73F 60                                    RTS
0C740                                   +
0C740                           
0C740                                   ;; Colors match.
0C740                                   ;; - Check if next tile is a solid
0C740                                   ;; - If not, move the tile:
0C740                                   ;;   - Add the tiles that need updating to ppu buffer
0C740                                   ;;   - Add move tile sprite over the original tile
0C740                                   ;;   - Initiate moving the sprite that way for 16px
0C740                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C740                                   ;;   - Update attribute table accordingly through ppu buffer
0C740                                   ;; - After moving the sprite, in a different routine:
0C740                                   ;;   - Add move tile data on the new tile location
0C740                                   ;;   - Write the original tile type data on new position in ram
0C740                                   ;;   - Destroy sprite
0C740                                   ;;   - Update attribute table accordingly through ppu buffer
0C740                                   ;; (@TODO)
0C740 60                                RTS
0C741                               +done:
0C741                           
0C741                               ;; Return
0C741 60                            RTS
0C742                           
0C742                           .include "game/subroutine/InitiateNudge.asm"
0C742                           
0C742                           sub_InitiateNudge:
0C742 85 30                         STA ball_flags
0C744 A9 05                         LDA #NUDGE_FRAMES
0C746 85 36                         STA nudge_counter
0C748 60                            RTS
0C749                           
0C749                           .include "game/subroutine/JumpToPointer.asm"
0C749                           sub_JumpToPointer:
0C749 6C 0C 00                      JMP (pointer)
0C74C                               ;RTS must be handled by the routine (pointer) jumps to
0C74C                           .include "game/subroutine/LoadGameScreen.asm"
0C74C                           sub_LoadGameScreen:
0C74C                           
0C74C                               ;; Clear the screen
0C74C 20 FE C3                      JSR sub_ClearScreen
0C74F                               
0C74F                               ;; Clear collision and attribute data
0C74F A2 00                         LDX #$00
0C751 8A                            TXA
0C752                               -
0C752 9D 00 04                          STA tile_type,x
0C755 E8                                INX
0C756 D0 FA                         BNE -
0C758                               
0C758                               ;; Get pointer from current level
0C758 A6 37                         LDX current_level
0C75A BD EC D3                      LDA tbl_lvl_layout_lo,x
0C75D 85 0C                         STA pointer
0C75F BD D3 D3                      LDA tbl_lvl_layout_hi,x
0C762 85 0D                         STA pointer+1
0C764                           
0C764                               ;; Set up the loop
0C764 A0 00                         LDY #$00
0C766                           -drawRowColumnLoop:
0C766                           
0C766                               ;; Load (x,y) of current set of tiles
0C766 B1 0C                         LDA (pointer),y
0C768                           
0C768                               ;; Check if level is done; if so, skip the loop
0C768 C9 FF                         CMP #LEVEL_END
0C76A D0 03                         BNE +
0C76C 4C B5 C8                          JMP +doneLevelLoad
0C76F                               +
0C76F                           
0C76F                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C76F 85 00                         STA temp
0C771 C8                            INY
0C772 B1 0C                         LDA (pointer),y
0C774 85 01                         STA temp+1
0C776                               
0C776                               ;; Convert (x,y) to PPU address
0C776                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C776 A5 00                         LDA temp
0C778 29 0F                         AND #%00001111
0C77A 4A                            LSR
0C77B 4A                            LSR
0C77C 09 20                         ORA #$20
0C77E 85 02                         STA temp+2
0C780                               
0C780                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C780 A5 00                         LDA temp
0C782 29 F0                         AND #%11110000
0C784 4A                            LSR
0C785 4A                            LSR
0C786 4A                            LSR
0C787 85 03                         STA temp+3
0C789                               
0C789 A5 00                         LDA temp
0C78B 29 03                         AND #%00000011
0C78D AA                            TAX
0C78E BD 47 D4                      LDA tbl_Times64,x
0C791 18                            CLC
0C792 65 03                         ADC temp+3
0C794 18                            CLC
0C795 69 C2                         ADC #$C2
0C797 85 03                         STA temp+3
0C799                               
0C799                               ;; Add carry to temp+2
0C799 A5 02                         LDA temp+2
0C79B 69 00                         ADC #$00
0C79D 85 02                         STA temp+2
0C79F                           
0C79F                               ;; Convert tile data to loop count and tile type
0C79F                               ;; temp+4 = color
0C79F A5 01                         LDA temp+1
0C7A1 29 07                         AND #%00000111
0C7A3 85 04                         STA temp+4
0C7A5                               
0C7A5                               ;; If color = 7, this is a wall
0C7A5 C9 07                         CMP #%00000111
0C7A7 F0 12                         BEQ +wallHack
0C7A9                                   
0C7A9                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C7A9 29 01                             AND #%00000001
0C7AB F0 02                             BEQ +
0C7AD A9 05                                 LDA #$05
0C7AF                                   +
0C7AF 85 07                             STA temp+7
0C7B1                                
0C7B1                                   ;; temp+5 = tile type
0C7B1 A5 01                             LDA temp+1
0C7B3 4A                                LSR
0C7B4 4A                                LSR
0C7B5 4A                                LSR
0C7B6 29 03                             AND #%00000011
0C7B8 4C C1 C7                          JMP +setTileType
0C7BB                               +wallHack:
0C7BB                               
0C7BB                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C7BB A9 00                         LDA #$00
0C7BD 85 07                         STA temp+7
0C7BF A9 04                         LDA #$04
0C7C1                           
0C7C1                           +setTileType:    
0C7C1 85 05                         STA temp+5
0C7C3                               
0C7C3                               ;; X = tile offset
0C7C3 18                            CLC
0C7C4 65 07                         ADC temp+7
0C7C6 AA                            TAX
0C7C7                               
0C7C7                               ;; temp+6 = number of tiles
0C7C7 A5 01                         LDA temp+1
0C7C9 29 60                         AND #%01100000
0C7CB 4A                            LSR
0C7CC 4A                            LSR
0C7CD 4A                            LSR
0C7CE 4A                            LSR
0C7CF 4A                            LSR
0C7D0 85 06                         STA temp+6
0C7D2                               
0C7D2                               ;; Translate (x,y) to (y,x) for tile RAM
0C7D2 A5 00                         LDA temp
0C7D4 0A                            ASL
0C7D5 0A                            ASL
0C7D6 0A                            ASL
0C7D7 0A                            ASL
0C7D8 85 08                         STA temp+8
0C7DA A5 00                         LDA temp
0C7DC 4A                            LSR
0C7DD 4A                            LSR
0C7DE 4A                            LSR
0C7DF 4A                            LSR
0C7E0 05 08                         ORA temp+8
0C7E2 85 00                         STA temp
0C7E4                               
0C7E4                               ;; Set up loop
0C7E4 98                            TYA
0C7E5 48                            PHA
0C7E6 A4 06                         LDY temp+6
0C7E8                           
0C7E8                               -drawTileLoop:
0C7E8                                   ;; Write PPU address
0C7E8 2C 02 20                          BIT PPU_STATUS
0C7EB A5 02                             LDA temp+2
0C7ED 8D 06 20                          STA PPU_ADDR
0C7F0 A5 03                             LDA temp+3
0C7F2 8D 06 20                          STA PPU_ADDR
0C7F5                                   
0C7F5                                   ;; Write first and second tile
0C7F5 BD 4B D4                          LDA tbl_GametileTopLeft,x
0C7F8 8D 07 20                          STA PPU_DATA
0C7FB BD 55 D4                          LDA tbl_GametileTopRight,x
0C7FE 8D 07 20                          STA PPU_DATA
0C801                                   
0C801                                   ;; Update PPU address
0C801 2C 02 20                          BIT PPU_STATUS
0C804 A5 02                             LDA temp+2
0C806 8D 06 20                          STA PPU_ADDR
0C809 A5 03                             LDA temp+3
0C80B 18                                CLC
0C80C 69 20                             ADC #$20
0C80E 8D 06 20                          STA PPU_ADDR
0C811                                   
0C811                                   ;; Write third and fourth tile
0C811 BD 5F D4                          LDA tbl_GametileBottomLeft,x
0C814 8D 07 20                          STA PPU_DATA
0C817 BD 69 D4                          LDA tbl_GametileBottomRight,x
0C81A 8D 07 20                          STA PPU_DATA
0C81D                           
0C81D                                   ;; Push x-register to stack
0C81D 8A                                TXA
0C81E 48                                PHA
0C81F                                   
0C81F                                   ;; Update tile RAM (aka collision table)
0C81F A6 05                             LDX temp+5
0C821 BD 73 D4                          LDA tbl_GameTileRamByte,x
0C824 05 04                             ORA temp+4
0C826 0A                                ASL
0C827 09 01                             ORA #%00000001
0C829 A6 00                             LDX temp
0C82B 9D 00 04                          STA tile_type,x
0C82E                           
0C82E                                   ;; Check if shade 1 should be drawn
0C82E E8                                INX
0C82F BD 00 04                          LDA tile_type,x
0C832 D0 05                             BNE +
0C834 A9 00                                 LDA #$00
0C836 8D 07 20                              STA PPU_DATA
0C839                                   +
0C839                                   
0C839                                   ;; Check if shade 2 should be drawn
0C839 A5 03                             LDA temp+3
0C83B 18                                CLC
0C83C 69 41                             ADC #$41
0C83E 85 03                             STA temp+3
0C840 A5 02                             LDA temp+2
0C842 69 00                             ADC #$00
0C844 85 02                             STA temp+2
0C846                                   
0C846 8A                                TXA
0C847 18                                CLC
0C848 69 0F                             ADC #$0F
0C84A AA                                TAX
0C84B                                   
0C84B BD 00 04                          LDA tile_type,x
0C84E D0 0F                             BNE +
0C850 A5 02                                 LDA temp+2
0C852 8D 06 20                              STA PPU_ADDR
0C855 A5 03                                 LDA temp+3
0C857 8D 06 20                              STA PPU_ADDR
0C85A A9 00                                 LDA #$00
0C85C 8D 07 20                              STA PPU_DATA
0C85F                                   +
0C85F                           
0C85F                                   ;; Check if shade 3 should be drawn
0C85F E8                                INX
0C860 E6 03                             INC temp+3
0C862 BD 00 04                          LDA tile_type,x
0C865 D0 0F                             BNE +
0C867 A5 02                                 LDA temp+2
0C869 8D 06 20                              STA PPU_ADDR
0C86C A5 03                                 LDA temp+3
0C86E 8D 06 20                              STA PPU_ADDR
0C871 A9 00                                 LDA #$00
0C873 8D 07 20                              STA PPU_DATA
0C876                                   +
0C876                                   
0C876                                   ;; Restore x-register from stack
0C876 68                                PLA
0C877 AA                                TAX
0C878                                   
0C878                                   ;; Reset pointer for next tile
0C878 A5 03                             LDA temp+3
0C87A 38                                SEC
0C87B E9 42                             SBC #$42
0C87D 85 03                             STA temp+3
0C87F A5 02                             LDA temp+2
0C881 E9 00                             SBC #$00
0C883 85 02                             STA temp+2
0C885                                   
0C885                                   ;; Draw next metatile in this loop (if any left)
0C885 88                                DEY
0C886 30 27                             BMI +doneDrawingRowColumn
0C888                                   
0C888                                   ;; Is it a row or a column?
0C888 A5 01                             LDA temp+1
0C88A 10 17                             BPL +
0C88C                                       ;; It is a column: move pointer down (+$40)
0C88C A5 03                                 LDA temp+3
0C88E 18                                    CLC
0C88F 69 40                                 ADC #$40
0C891 85 03                                 STA temp+3
0C893 A5 02                                 LDA temp+2
0C895 69 00                                 ADC #$00
0C897 85 02                                 STA temp+2
0C899                                       
0C899                                       ;; Add 16 to temp (as a tile RAM pointer)
0C899 A5 00                                 LDA temp
0C89B 18                                    CLC
0C89C 69 10                                 ADC #$10
0C89E 85 00                                 STA temp
0C8A0 4C AC C8                              JMP +drawNextTile
0C8A3                                   +
0C8A3                                   
0C8A3                                   ;; It is a row: move pointer right (+$02)
0C8A3 A5 03                             LDA temp+3
0C8A5 18                                CLC
0C8A6 69 02                             ADC #$02
0C8A8 85 03                             STA temp+3
0C8AA                                   
0C8AA                                   ;; Add 1 to temp (as a tile RAM pointer)
0C8AA E6 00                             INC temp
0C8AC                           
0C8AC                               
0C8AC                               ;; Next tile in the row/column
0C8AC                                   +drawNextTile:
0C8AC 4C E8 C7                      JMP -drawTileLoop
0C8AF                           
0C8AF                               ;; Go to the next set of tiles
0C8AF                           +doneDrawingRowColumn:
0C8AF 68                            PLA
0C8B0 A8                            TAY
0C8B1 C8                            INY
0C8B2 4C 66 C7                      JMP -drawRowColumnLoop
0C8B5                           
0C8B5                           ;; Level loading is done
0C8B5                           +doneLevelLoad:
0C8B5                           
0C8B5                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C8B5 A9 20                         LDA #$20
0C8B7 8D 06 20                      STA PPU_ADDR
0C8BA A9 A2                         LDA #$A2
0C8BC 8D 06 20                      STA PPU_ADDR
0C8BF A9 35                         LDA #$35
0C8C1 20 EB CA                      JSR sub_Draw28HorizontalTiles
0C8C4                           
0C8C4                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C8C4 A9 23                         LDA #$23
0C8C6 8D 06 20                      STA PPU_ADDR
0C8C9 A9 42                         LDA #$42
0C8CB 8D 06 20                      STA PPU_ADDR
0C8CE A9 31                         LDA #$31
0C8D0 20 EB CA                      JSR sub_Draw28HorizontalTiles
0C8D3                           
0C8D3                               ;; Left & right game bounds
0C8D3                               ;; Set PPU_ADDR and store in temp variables
0C8D3 A9 20                         LDA #$20
0C8D5 85 00                         STA temp
0C8D7 8D 06 20                      STA PPU_ADDR
0C8DA A9 C1                         LDA #$C1
0C8DC 85 01                         STA temp+1
0C8DE 8D 06 20                      STA PPU_ADDR
0C8E1                               
0C8E1                               ;; Set vertical bound tile and set up loop
0C8E1 A0 33                         LDY #$33
0C8E3 A2 14                         LDX #20
0C8E5                               -
0C8E5                                   ;; Show left tile
0C8E5 8C 07 20                          STY PPU_DATA
0C8E8                                   
0C8E8                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C8E8 A5 00                             LDA temp
0C8EA 8D 06 20                          STA PPU_ADDR
0C8ED A5 01                             LDA temp+1
0C8EF 18                                CLC
0C8F0 69 1D                             ADC #29
0C8F2 85 01                             STA temp+1
0C8F4 8D 06 20                          STA PPU_ADDR
0C8F7                           
0C8F7                                   ;; Show right tile
0C8F7 8C 07 20                          STY PPU_DATA
0C8FA                           
0C8FA                                   ;; Check if we're done yet
0C8FA CA                                DEX
0C8FB F0 18                             BEQ +drawCorners
0C8FD                                   
0C8FD                                   ;; Not done yet: add 3 to low byte for next left bound
0C8FD A5 01                             LDA temp+1
0C8FF 18                                CLC
0C900 69 03                             ADC #3
0C902 85 01                             STA temp+1
0C904                                   
0C904                                   ;; Apply carry to high byte
0C904 A5 00                             LDA temp
0C906 69 00                             ADC #$00
0C908 85 00                             STA temp
0C90A                                   
0C90A                                   ;; Store next PPU_ADDR to draw at
0C90A 8D 06 20                          STA PPU_ADDR
0C90D A5 01                             LDA temp+1
0C90F 8D 06 20                          STA PPU_ADDR
0C912 4C E5 C8                      JMP -
0C915                               
0C915                               
0C915                           
0C915                           +drawCorners:
0C915                               ;; Draw the corners of the playing field
0C915 A9 20                         LDA #$20
0C917 8D 06 20                      STA PPU_ADDR
0C91A A9 A1                         LDA #$A1
0C91C 8D 06 20                      STA PPU_ADDR
0C91F A9 39                         LDA #$39
0C921 8D 07 20                      STA PPU_DATA
0C924                           
0C924 A9 20                         LDA #$20
0C926 8D 06 20                      STA PPU_ADDR
0C929 A9 BE                         LDA #$BE
0C92B 8D 06 20                      STA PPU_ADDR
0C92E A9 3A                         LDA #$3A
0C930 8D 07 20                      STA PPU_DATA
0C933                               ;; (added background tile for Sprite-0 hit)
0C933 A9 3F                         LDA #$3F
0C935 8D 07 20                      STA PPU_DATA
0C938                           
0C938 A9 23                         LDA #$23
0C93A 8D 06 20                      STA PPU_ADDR
0C93D A9 41                         LDA #$41
0C93F 8D 06 20                      STA PPU_ADDR
0C942 A9 36                         LDA #$36
0C944 8D 07 20                      STA PPU_DATA
0C947                           
0C947 A9 23                         LDA #$23
0C949 8D 06 20                      STA PPU_ADDR
0C94C A9 5E                         LDA #$5E
0C94E 8D 06 20                      STA PPU_ADDR
0C951 A9 34                         LDA #$34
0C953 8D 07 20                      STA PPU_DATA
0C956                           
0C956                           
0C956                               ;; Draw the hud labels
0C956 A9 20                         LDA #$20
0C958 8D 06 20                      STA PPU_ADDR
0C95B A9 62                         LDA #$62
0C95D 8D 06 20                      STA PPU_ADDR
0C960 A2 00                         LDX #$00
0C962                               -
0C962 BD 78 D4                          LDA tbl_HudText,x
0C965 8D 07 20                          STA PPU_DATA
0C968 E8                                INX
0C969 E0 1C                             CPX #28
0C96B D0 F5                         BNE -
0C96D                           
0C96D                           
0C96D                               ;; Draw the current score
0C96D A9 20                         LDA #$20
0C96F 8D 06 20                      STA PPU_ADDR
0C972 A9 83                         LDA #$83
0C974 8D 06 20                      STA PPU_ADDR
0C977 A2 00                         LDX #$00
0C979                               -
0C979 B5 20                             LDA ball_score,x
0C97B 18                                CLC
0C97C 69 01                             ADC #$01
0C97E 8D 07 20                          STA PPU_DATA
0C981 E8                                INX
0C982 E0 06                             CPX #$06
0C984 D0 F3                         BNE -
0C986                           
0C986                           
0C986                               ;; Draw the level number
0C986                               ;; (with primitive HEX>DEC)
0C986 A5 37                         LDA current_level
0C988 18                            CLC
0C989 69 01                         ADC #$01
0C98B 85 01                         STA temp+1
0C98D                               
0C98D C9 14                         CMP #20
0C98F B0 13                         BCS +tempIsTwo
0C991                               
0C991 C9 0A                         CMP #10
0C993 B0 05                         BCS +tempIsOne
0C995                               
0C995 A9 00                         LDA #$00
0C997 4C AB C9                      JMP +setTemp
0C99A                               
0C99A                           +tempIsOne:
0C99A 38                            SEC
0C99B E9 0A                         SBC #10
0C99D 85 01                         STA temp+1
0C99F A9 01                         LDA #$01
0C9A1 4C AB C9                      JMP +setTemp
0C9A4                               
0C9A4                           +tempIsTwo:
0C9A4 38                            SEC
0C9A5 E9 14                         SBC #20
0C9A7 85 01                         STA temp+1
0C9A9 A9 02                         LDA #$02
0C9AB                           
0C9AB                           +setTemp:
0C9AB 85 00                         STA temp
0C9AD                               
0C9AD E6 00                         INC temp
0C9AF E6 01                         INC temp+1
0C9B1                               
0C9B1 A9 20                         LDA #$20
0C9B3 8D 06 20                      STA PPU_ADDR
0C9B6 A9 8B                         LDA #$8B
0C9B8 8D 06 20                      STA PPU_ADDR
0C9BB A5 00                         LDA temp
0C9BD 8D 07 20                      STA PPU_DATA
0C9C0 A5 01                         LDA temp+1
0C9C2 8D 07 20                      STA PPU_DATA
0C9C5                           
0C9C5                           
0C9C5                               ;; Draw lives (presumes lives to be capped at 9)
0C9C5 A9 20                         LDA #$20
0C9C7 8D 06 20                      STA PPU_ADDR
0C9CA A9 92                         LDA #$92
0C9CC 8D 06 20                      STA PPU_ADDR
0C9CF A6 1F                         LDX ball_lives
0C9D1 E8                            INX
0C9D2 8E 07 20                      STX PPU_DATA
0C9D5                           
0C9D5                           
0C9D5                               ;; Set and draw bonus
0C9D5 A9 07                         LDA #$07
0C9D7 85 26                         STA ball_bonus
0C9D9 A9 09                         LDA #$09
0C9DB 85 27                         STA ball_bonus+1
0C9DD 85 28                         STA ball_bonus+2
0C9DF                               
0C9DF A9 20                         LDA #$20
0C9E1 8D 06 20                      STA PPU_ADDR
0C9E4 A9 9A                         LDA #$9A
0C9E6 8D 06 20                      STA PPU_ADDR
0C9E9 A2 00                         LDX #$00
0C9EB                               -
0C9EB B5 26                             LDA ball_bonus,x
0C9ED 18                                CLC
0C9EE 69 01                             ADC #$01
0C9F0 8D 07 20                          STA PPU_DATA
0C9F3 E8                                INX
0C9F4 E0 03                             CPX #$03
0C9F6 D0 F3                         BNE -
0C9F8                           
0C9F8                           
0C9F8                               ;; Set attribute data to RAM
0C9F8                               
0C9F8                               ;; Byte 0-7 of attribute ram should be #%10100000
0C9F8 A2 00                         LDX #$00
0C9FA A9 A0                         LDA #$A0
0C9FC                               -
0C9FC 9D A0 04                          STA tile_attributes,x
0C9FF E8                                INX
0CA00 E0 08                             CPX #$08
0CA02 D0 F8                         BNE -
0CA04                           
0CA04                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CA04                           
0CA04                           -attributeLoop:
0CA04                               ;; Reset current attribute value
0CA04 A9 00                         LDA #$00
0CA06 85 02                         STA temp+2
0CA08                           
0CA08                               ;; Get first metatile in tile ram based on attribute index
0CA08                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CA08 8A                            TXA
0CA09                           
0CA09 38                            SEC
0CA0A E9 08                         SBC #$08
0CA0C 85 01                         STA temp+1      ; attr - 8 (temp1)
0CA0E 0A                            ASL             ; * 2
0CA0F 85 00                         STA temp        ; temp = temp1 * 2
0CA11                           
0CA11 A5 01                         LDA temp+1      ; temp1
0CA13 29 F8                         AND #%11111000  ; rounded down to 8's
0CA15 0A                            ASL             ; * 2
0CA16 18                            CLC
0CA17 65 00                         ADC temp        ; + temp1 * 2
0CA19 85 00                         STA temp        ; first metatile
0CA1B                           
0CA1B                               ;; Store first metatile in y-register
0CA1B A8                            TAY
0CA1C                           
0CA1C                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CA1C 8A                            TXA
0CA1D 29 07                         AND #%00000111
0CA1F C9 07                         CMP #%00000111
0CA21 F0 0B                         BEQ +
0CA23                           
0CA23                               ;; If X >= $30, don't apply bottom right metatile
0CA23 E0 30                         CPX #$30
0CA25 B0 07                         BCS +
0CA27                               
0CA27                               ;; Add metatile1 subpalette to attribute value
0CA27 B9 00 04                      LDA tile_type,y
0CA2A 29 0C                         AND #%00001100
0CA2C 85 02                         STA temp+2
0CA2E                               +
0CA2E                           
0CA2E                           
0CA2E                               ;; Apply second metatile
0CA2E 88                            DEY
0CA2F                           
0CA2F                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CA2F 8A                            TXA
0CA30 29 07                         AND #%00000111
0CA32 F0 10                         BEQ +
0CA34                           
0CA34                               ;; If X >= $30, don't apply bottom left metatile
0CA34 E0 30                         CPX #$30
0CA36 B0 0C                         BCS +
0CA38                           
0CA38                           
0CA38                           
0CA38                               ;; Add metatile2 subpalette to attribute value
0CA38 B9 00 04                      LDA tile_type,y
0CA3B 29 0C                         AND #%00001100
0CA3D 4A                            LSR
0CA3E 4A                            LSR
0CA3F 05 02                         ORA temp+2
0CA41 4C 46 CA                      JMP ++
0CA44                               +
0CA44 A5 02                         LDA temp+2
0CA46                               ++
0CA46 0A                            ASL
0CA47 0A                            ASL
0CA48 85 02                         STA temp+2
0CA4A                           
0CA4A                           
0CA4A                               ;; Apply third metatile
0CA4A 98                            TYA
0CA4B 38                            SEC
0CA4C E9 0F                         SBC #$0F
0CA4E A8                            TAY
0CA4F                           
0CA4F                               ;; If X MOD 8 == 7, don't apply top right metatile
0CA4F 8A                            TXA
0CA50 29 07                         AND #%00000111
0CA52 C9 07                         CMP #%00000111
0CA54 F0 11                         BEQ +
0CA56                           
0CA56                               ;; If X < $10, don't apply top right metatile
0CA56 8A                            TXA
0CA57 29 F0                         AND #%11110000
0CA59 F0 0C                         BEQ +
0CA5B                           
0CA5B                               ;; Add metatile3 subpalette to attribute value
0CA5B B9 00 04                      LDA tile_type,y
0CA5E 29 0C                         AND #%00001100
0CA60 4A                            LSR
0CA61 4A                            LSR
0CA62 05 02                         ORA temp+2
0CA64 4C 69 CA                      JMP ++
0CA67                               +
0CA67 A5 02                         LDA temp+2
0CA69                               ++
0CA69 0A                            ASL
0CA6A 0A                            ASL
0CA6B 85 02                         STA temp+2
0CA6D                           
0CA6D                           
0CA6D                               ;; Apply fourth metatile
0CA6D 88                            DEY
0CA6E                           
0CA6E                               ;; If X MOD 8 == 0, don't apply top left metatile
0CA6E 8A                            TXA
0CA6F 29 07                         AND #%00000111
0CA71 F0 11                         BEQ +
0CA73                           
0CA73                               ;; If X < $10, don't apply top left metatile
0CA73 8A                            TXA
0CA74 29 F0                         AND #%11110000
0CA76 F0 0C                         BEQ +
0CA78                           
0CA78                               ;; Add metatile4 subpalette to attribute value
0CA78 B9 00 04                      LDA tile_type,y
0CA7B 29 0C                         AND #%00001100
0CA7D 4A                            LSR
0CA7E 4A                            LSR
0CA7F 05 02                         ORA temp+2
0CA81 4C 86 CA                      JMP ++
0CA84                               +
0CA84 A5 02                         LDA temp+2
0CA86                               ++
0CA86 9D A0 04                      STA tile_attributes,x
0CA89                           
0CA89                               ;; Check the next attribute, if any left
0CA89 E8                            INX
0CA8A E0 38                         CPX #$38
0CA8C F0 03                         BEQ +
0CA8E 4C 04 CA                          JMP -attributeLoop
0CA91                               +
0CA91                           
0CA91                               ;; Stream attribute RAM to PPU
0CA91 2C 02 20                      BIT PPU_STATUS
0CA94 A9 23                         LDA #$23
0CA96 8D 06 20                      STA PPU_ADDR
0CA99 A9 C0                         LDA #$C0
0CA9B 8D 06 20                      STA PPU_ADDR
0CA9E A2 00                         LDX #$00
0CAA0                               -
0CAA0 BD A0 04                          LDA tile_attributes,x
0CAA3 8D 07 20                          STA PPU_DATA
0CAA6 E8                                INX
0CAA7 E0 40                             CPX #$40
0CAA9 D0 F5                         BNE -
0CAAB                           
0CAAB                               ;; Set initial ball position
0CAAB A6 37                         LDX current_level
0CAAD BD 05 D4                      LDA tbl_lvl_ball_startpos,x
0CAB0 29 F0                         AND #%11110000
0CAB2 18                            CLC
0CAB3 69 34                         ADC #$34
0CAB5 85 19                         STA ball_ypos_hi
0CAB7 BD 05 D4                      LDA tbl_lvl_ball_startpos,x
0CABA 0A                            ASL
0CABB 0A                            ASL
0CABC 0A                            ASL
0CABD 0A                            ASL
0CABE 18                            CLC
0CABF 69 14                         ADC #$14
0CAC1 85 17                         STA ball_xpos_hi
0CAC3 A9 00                         LDA #$00
0CAC5 85 18                         STA ball_xpos_lo
0CAC7 85 1A                         STA ball_ypos_lo
0CAC9                               
0CAC9                               ;; Set initial ball color and direction
0CAC9 BD 1E D4                      LDA tbl_lvl_ball_init,x
0CACC 29 F0                         AND #%11110000
0CACE 85 30                         STA ball_flags
0CAD0 20 69 C4                      JSR sub_ColorizeBall
0CAD3                               
0CAD3                               ;; Play background noise
0CAD3 A9 08                         LDA #$08
0CAD5 8D 15 40                      STA APU_STATUS
0CAD8 8D 0F 40                      STA NOISE_LENGTH
0CADB A9 0E                         LDA #$0E
0CADD 85 3B                         STA current_noise
0CADF A9 00                         LDA #$00
0CAE1 85 39                         STA max_noise
0CAE3 85 3C                         STA noise_counter
0CAE5 85 3A                         STA sweep_noise
0CAE7 20 F1 C3                      JSR sub_BackgroundNoise
0CAEA                           
0CAEA                               ;; Return
0CAEA 60                            RTS
0CAEB                           
0CAEB                           
0CAEB                           ;; Subroutine: draw 28 tiles in a row
0CAEB                           sub_Draw28HorizontalTiles:
0CAEB A2 1C                         LDX #28
0CAED                               -
0CAED 8D 07 20                          STA PPU_DATA
0CAF0 CA                                DEX
0CAF1 D0 FA                         BNE -
0CAF3 60                            RTS0CAF4                           .include "game/subroutine/LoadIntroScreen.asm"
0CAF4                           sub_LoadIntroScreen:
0CAF4                           
0CAF4                               ;; Load intro palette
0CAF4 2C 02 20                      BIT PPU_STATUS
0CAF7 A9 3F                         LDA #$3F
0CAF9 8D 06 20                      STA PPU_ADDR
0CAFC A9 00                         LDA #$00
0CAFE 8D 06 20                      STA PPU_ADDR
0CB01 A2 00                         LDX #$00
0CB03                               -
0CB03 BD AA CB                          LDA tbl_IntroScreenPalette,x
0CB06 8D 07 20                          STA PPU_DATA
0CB09 E8                                INX
0CB0A E0 20                             CPX #$20
0CB0C D0 F5                         BNE -
0CB0E                               
0CB0E                               ;; Put ball in the middle
0CB0E A9 7C                         LDA #$7C
0CB10 85 17                         STA ball_xpos_hi
0CB12 85 19                         STA ball_ypos_hi
0CB14                           
0CB14                               ;; Clear the screen
0CB14 20 FE C3                      JSR sub_ClearScreen
0CB17                           
0CB17                               ;; Set up intro screen draw loop
0CB17 A2 00                         LDX #$00
0CB19                           
0CB19                           -loop_IntroScreenData:
0CB19                           
0CB19                               ;; Get current byte from intro screen data
0CB19 BD D2 CB                      LDA tbl_IntroScreenData,x
0CB1C                           
0CB1C                               ;; If current byte is #$3F, we're done drawing.
0CB1C C9 3F                         CMP #$3F
0CB1E D0 03                         BNE +
0CB20 4C 6D CB                          JMP +goToEndIntroScreen
0CB23                               +
0CB23                           
0CB23                               ;; If highest bits are %11, draw a plain tile
0CB23 29 C0                         AND #%11000000
0CB25 D0 03                         BNE +
0CB27 4C 4D CB                          JMP +drawTile
0CB2A                               +
0CB2A                               
0CB2A                               ;; If highest bits are %01, set the PPU address
0CB2A                               ;; If not, draw two logo tiles
0CB2A C9 40                         CMP #%01000000
0CB2C D0 03                         BNE +drawLogo
0CB2E 4C 57 CB                          JMP +setPpuAddr
0CB31                           
0CB31                           +drawLogo:
0CB31                               ;; Get bits 0-2 and store in a temp variable
0CB31 BD D2 CB                      LDA tbl_IntroScreenData,x
0CB34 29 07                         AND #%00000111
0CB36 85 00                         STA temp
0CB38                               
0CB38                               ;; Get bits 3-5, shift over to get a value from 0-7
0CB38 BD D2 CB                      LDA tbl_IntroScreenData,x
0CB3B 4A                            LSR
0CB3C 4A                            LSR
0CB3D 4A                            LSR
0CB3E 29 07                         AND #%00000111
0CB40                               
0CB40                               ;; Draw the tile that corresponds with that value
0CB40 A8                            TAY
0CB41 20 E1 C4                      JSR sub_drawIntroScreenLogoTile
0CB44                               
0CB44                               ;; Do the same for the value stored in temp
0CB44 A4 00                         LDY temp
0CB46 20 E1 C4                      JSR sub_drawIntroScreenLogoTile
0CB49                           
0CB49                               ;; Next byte please
0CB49 E8                            INX
0CB4A 4C 19 CB                      JMP -loop_IntroScreenData
0CB4D                           
0CB4D                           +drawTile:
0CB4D                               ;; Just draw the tile value on screen
0CB4D BD D2 CB                      LDA tbl_IntroScreenData,x
0CB50 8D 07 20                      STA PPU_DATA
0CB53                               
0CB53                               ;; Next byte please
0CB53 E8                            INX
0CB54 4C 19 CB                      JMP -loop_IntroScreenData
0CB57                           
0CB57                           
0CB57                           +setPpuAddr:
0CB57                               ;; Reset the PPU latch
0CB57 2C 02 20                      BIT PPU_STATUS
0CB5A                               
0CB5A                               ;; Sanitize and write the high byte of the PPU address
0CB5A BD D2 CB                      LDA tbl_IntroScreenData,x
0CB5D 29 3F                         AND #%00111111
0CB5F 8D 06 20                      STA PPU_ADDR
0CB62                           
0CB62                               ;; Write the low byte of the PPU address
0CB62 E8                            INX
0CB63 BD D2 CB                      LDA tbl_IntroScreenData,x
0CB66 8D 06 20                      STA PPU_ADDR
0CB69                               
0CB69                               ;; PPU has been set up to draw tiles at the correct spot now.
0CB69                               
0CB69                               ;; Next byte please.
0CB69 E8                            INX
0CB6A 4C 19 CB                      JMP -loop_IntroScreenData
0CB6D                           
0CB6D                           +goToEndIntroScreen:
0CB6D                           
0CB6D                               ;; To color the 1.LEVEL: line green, we need to update two
0CB6D                               ;; values in the PPU attribute data.
0CB6D 2C 02 20                      BIT PPU_STATUS
0CB70 A9 23                         LDA #$23
0CB72 8D 06 20                      STA PPU_ADDR
0CB75 A9 CB                         LDA #$CB
0CB77 8D 06 20                      STA PPU_ADDR
0CB7A A9 0A                         LDA #%00001010
0CB7C 8D 07 20                      STA PPU_DATA
0CB7F 8D 07 20                      STA PPU_DATA
0CB82                           
0CB82 60                            RTS
0CB83                           
0CB83                           .include "game/subroutine/LoadWinScreen.asm"
0CB83                           sub_LoadWinScreen:
0CB83 60                            RTS
0CB84                           
0CB84                           .include "game/subroutine/WriteByteToPPU.asm"
0CB84                           sub_WriteByteToPPUBuffer:
0CB84                           
0CB84                               ;; Prevent updating until full 3-byte buffer is filled,
0CB84                               ;; so that graphics won't glitch out if NMI happens during
0CB84                               ;; updating the buffer
0CB84 A9 00                         LDA #$00
0CB86 85 32                         STA ppu_buffer_update
0CB88                           
0CB88                               ;; Check if buffer full; if so, wait a frame and force update
0CB88 A4 33                         LDY ppu_buffer_pointer
0CB8A C0 30                         CPY #$30
0CB8C D0 05                         BNE +
0CB8E E6 32                             INC ppu_buffer_update
0CB90 20 EB C3                          JSR sub_WaitForVBlank
0CB93                               +
0CB93                           
0CB93                               ;; Add ppu_addr high byte to buffer
0CB93 A5 00                         LDA temp
0CB95 99 00 03                      STA ppu_buffer,y
0CB98                           
0CB98                               ;; Add ppu_addr low byte to buffer
0CB98 C8                            INY
0CB99 A5 01                         LDA temp+1
0CB9B 99 00 03                      STA ppu_buffer,y
0CB9E                           
0CB9E                               ;; Add ppu_data to buffer
0CB9E C8                            INY
0CB9F A5 02                         LDA temp+2
0CBA1 99 00 03                      STA ppu_buffer,y
0CBA4                           
0CBA4                               ;; Update buffer pointer
0CBA4 C8                            INY
0CBA5 84 33                         STY ppu_buffer_pointer
0CBA7                           
0CBA7                               ;; Tell NMI to update next round
0CBA7 E6 32                         INC ppu_buffer_update
0CBA9                           
0CBA9                               ;; Return
0CBA9 60                            RTS0CBAA                           
0CBAA                           
0CBAA                           ;; LUTs
0CBAA                           .include "game/include/tables.asm"
0CBAA                           
0CBAA                           ;; Initial screen palette
0CBAA                           tbl_IntroScreenPalette:
0CBAA 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CBAE 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CBB2 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CBB6 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CBBA                           
0CBBA 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CBBE 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CBC2 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CBC6 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CBCA                           
0CBCA                           
0CBCA                           ;; Intro: mapping logo index to chr tile
0CBCA                           tbl_IntroScreenLogoChr:
0CBCA 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CBD2                           
0CBD2                           
0CBD2                           ;; Intro screen data
0CBD2                           tbl_IntroScreenData:
0CBD2                           
0CBD2                               ;; Set PPU address $20AC and draw
0CBD2 60 AC                         .db #$60, #$AC
0CBD4 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CBDC                           
0CBDC                               ;; Set PPU address $20CF and draw
0CBDC 60 CF                         .db #$60, #$CF
0CBDE 01 02                         .db #_0, #_1
0CBE0                               
0CBE0                               ;; Set PPU address $2122 and draw
0CBE0 61 22                         .db #$61, #$22
0CBE2 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CBE9 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CBEF 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CBF7 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CBFC                               
0CBFC                               ;; Set PPU address $2147 and draw
0CBFC 61 47                         .db #$61, #$47
0CBFE 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CC05 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CC09 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CC0F 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CC15                               
0CC15                               ;; Set PPU address $218B and draw
0CC15 61 8B                         .db #$61, #$8B
0CC17 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CC1D 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CC22                               
0CC22                               ;; Set PPU address $21E6 and draw
0CC22 61 E6                         .db #$61, #$E6
0CC24 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CC2C 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CC30 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CC37                               
0CC37                               ;; Set PPU address $222D and draw
0CC37 62 2D                         .db #$62, #$2D
0CC39 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CC3F                               
0CC3F                               ;; Set PPU address $2281
0CC3F 62 81                         .db #$62, #$81
0CC41                               
0CC41                               ;; Draw the Crillion logo
0CC41 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CC45 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC49 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CC4D E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CC51                               
0CC51 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CC55 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC59 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC5D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC61                               
0CC61 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CC65 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC69 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC6D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC71                           
0CC71 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CC75 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC79 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC7D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC81                               
0CC81 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CC85 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CC89 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CC8D D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CC91                           
0CC91 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CC95 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CC99 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CC9D F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CCA0                           
0CCA0                               ;; End of intro
0CCA0 3F                            .db #$3F
0CCA1                           
0CCA1                           
0CCA1                           ;; Animation frames table
0CCA1                           .include "game/include/table/animation_frames.asm"
0CCA1                           ;; CHR tile-id's per slide of explosion
0CCA1                           explosion_slide0:
0CCA1 00 00 00                      .db #$00, #$00, #$00
0CCA4 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CCA7 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CCAA                           
0CCAA                           explosion_slide1:
0CCAA 00 00 00                      .db #$00, #$00, #$00
0CCAD 29 2A 2B                      .db #$29, #$2A, #$2B
0CCB0 39 3A 3B                      .db #$39, #$3A, #$3B
0CCB3                           
0CCB3                           explosion_slide2:
0CCB3 16 00 00                      .db #$16, #$00, #$00
0CCB6 26 27 28                      .db #$26, #$27, #$28
0CCB9 36 37 38                      .db #$36, #$37, #$38
0CCBC                           
0CCBC                           explosion_slide3:
0CCBC 00 14 15                      .db #$00, #$14, #$15
0CCBF 23 24 25                      .db #$23, #$24, #$25
0CCC2 33 34 35                      .db #$33, #$34, #$35
0CCC5                           
0CCC5                           explosion_slide4:
0CCC5 10 11 12                      .db #$10, #$11, #$12
0CCC8 20 21 22                      .db #$20, #$21, #$22
0CCCB 30 31 32                      .db #$30, #$31, #$32
0CCCE                           
0CCCE                           ;; High and low bytes of animation slides
0CCCE                           explosion_anim_hi:
0CCCE CC                            .db >#explosion_slide0
0CCCF CC                            .db >#explosion_slide1
0CCD0 CC                            .db >#explosion_slide2
0CCD1 CC                            .db >#explosion_slide3
0CCD2 CC                            .db >#explosion_slide4
0CCD3 CC                            .db >#explosion_slide4
0CCD4 CC                            .db >#explosion_slide3
0CCD5 CC                            .db >#explosion_slide2
0CCD6 CC                            .db >#explosion_slide1
0CCD7 CC                            .db >#explosion_slide0
0CCD8                           
0CCD8                           explosion_anim_lo:
0CCD8 A1                            .db <#explosion_slide0
0CCD9 AA                            .db <#explosion_slide1
0CCDA B3                            .db <#explosion_slide2
0CCDB BC                            .db <#explosion_slide3
0CCDC C5                            .db <#explosion_slide4
0CCDD C5                            .db <#explosion_slide4
0CCDE BC                            .db <#explosion_slide3
0CCDF B3                            .db <#explosion_slide2
0CCE0 AA                            .db <#explosion_slide1
0CCE1 A1                            .db <#explosion_slide0
0CCE2                           
0CCE2                           
0CCE2                           
0CCE2                           ;; Ball palette color table (CBRYGM)
0CCE2                           tbl_BallColorDark:
0CCE2 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CCE8                            
0CCE8                           tbl_BallColorLight:
0CCE8 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CCEE                           
0CCEE                               
0CCEE                           ;; Screen mode drawing routine addresses
0CCEE                           tbl_LoadScreenHi:
0CCEE CA C7 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CCF1                           
0CCF1                           tbl_LoadScreenLo:
0CCF1 F4 4C 83                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CCF4                           
0CCF4                           
0CCF4                           ;; Level data
0CCF4                           .include "game/include/table/level_data.asm"
0CCF4                           lvl_layout_01:
0CCF4 61 21                         .db #$61, #%00100001
0CCF6 52 61                         .db #$52, #%01100001
0CCF8 43 65                         .db #$43, #%01100101
0CCFA 83 05                         .db #$83, #%00000101
0CCFC 93 15                         .db #$93, #%00010101
0CCFE 34 7A                         .db #$34, #%01111010
0CD00 74 7A                         .db #$74, #%01111010
0CD02 35 7A                         .db #$35, #%01111010
0CD04 75 7A                         .db #$75, #%01111010
0CD06 46 65                         .db #$46, #%01100101
0CD08 86 25                         .db #$86, #%00100101
0CD0A 57 61                         .db #$57, #%01100001
0CD0C 68 21                         .db #$68, #%00100001
0CD0E FF                            .db #LEVEL_END
0CD0F                           
0CD0F                           lvl_layout_02:
0CD0F C0 0A                         .db #$C0, #%00001010
0CD11 11 15                         .db #$11, #%00010101
0CD13 21 62                         .db #$21, #%01100010
0CD15 61 62                         .db #$61, #%01100010
0CD17 A1 42                         .db #$A1, #%01000010
0CD19 12 67                         .db #$12, #%01100111
0CD1B 52 67                         .db #$52, #%01100111
0CD1D 92 67                         .db #$92, #%01100111
0CD1F C3 0D                         .db #$C3, #%00001101
0CD21 14 11                         .db #$14, #%00010001
0CD23 24 65                         .db #$24, #%01100101
0CD25 64 65                         .db #$64, #%01100101
0CD27 A4 45                         .db #$A4, #%01000101
0CD29 15 67                         .db #$15, #%01100111
0CD2B 55 67                         .db #$55, #%01100111
0CD2D 95 67                         .db #$95, #%01100111
0CD2F 17 12                         .db #$17, #%00010010
0CD31 27 61                         .db #$27, #%01100001
0CD33 67 61                         .db #$67, #%01100001
0CD35 A7 41                         .db #$A7, #%01000001
0CD37 38 7A                         .db #$38, #%01111010
0CD39 98 5A                         .db #$98, #%01011010
0CD3B 18 27                         .db #$18, #%00100111
0CD3D 48 27                         .db #$48, #%00100111
0CD3F 78 27                         .db #$78, #%00100111
0CD41 C8 07                         .db #$C8, #%00000111
0CD43 FF                            .db #LEVEL_END
0CD44                           
0CD44                           lvl_layout_03:
0CD44 00 7A                         .db #$00, #%01111010
0CD46 40 7A                         .db #$40, #%01111010
0CD48 80 7A                         .db #$80, #%01111010
0CD4A C0 1A                         .db #$C0, #%00011010
0CD4C 10 A1                         .db #$10, #%10100001
0CD4E 13 E1                         .db #$13, #%11100001
0CD50 17 C1                         .db #$17, #%11000001
0CD52 30 C1                         .db #$30, #%11000001
0CD54 34 C1                         .db #$34, #%11000001
0CD56 38 A1                         .db #$38, #%10100001
0CD58 50 E1                         .db #$50, #%11100001
0CD5A 55 81                         .db #$55, #%10000001
0CD5C 57 C1                         .db #$57, #%11000001
0CD5E 70 C1                         .db #$70, #%11000001
0CD60 73 A1                         .db #$73, #%10100001
0CD62 76 E1                         .db #$76, #%11100001
0CD64 90 E1                         .db #$90, #%11100001
0CD66 95 81                         .db #$95, #%10000001
0CD68 97 C1                         .db #$97, #%11000001
0CD6A B0 C1                         .db #$B0, #%11000001
0CD6C B4 C1                         .db #$B4, #%11000001
0CD6E B8 A1                         .db #$B8, #%10100001
0CD70 D0 A1                         .db #$D0, #%10100001
0CD72 D3 E1                         .db #$D3, #%11100001
0CD74 D7 C1                         .db #$D7, #%11000001
0CD76 FF                            .db #LEVEL_END
0CD77                           
0CD77                           lvl_layout_04:
0CD77 00 4C                         .db #$00, #%01001100
0CD79 40 6C                         .db #$40, #%01101100
0CD7B 80 4C                         .db #$80, #%01001100
0CD7D 81 AC                         .db #$81, #%10101100
0CD7F C1 2C                         .db #$C1, #%00101100
0CD81 02 6C                         .db #$02, #%01101100
0CD83 42 CC                         .db #$42, #%11001100
0CD85 62 EC                         .db #$62, #%11101100
0CD87 A2 CC                         .db #$A2, #%11001100
0CD89 C3 CC                         .db #$C3, #%11001100
0CD8B 04 4C                         .db #$04, #%01001100
0CD8D 84 2C                         .db #$84, #%00101100
0CD8F 25 AC                         .db #$25, #%10101100
0CD91 85 AC                         .db #$85, #%10101100
0CD93 06 AC                         .db #$06, #%10101100
0CD95 36 CC                         .db #$36, #%11001100
0CD97 56 CC                         .db #$56, #%11001100
0CD99 66 EC                         .db #$66, #%11101100
0CD9B 96 6C                         .db #$96, #%01101100
0CD9D C7 AC                         .db #$C7, #%10101100
0CD9F 08 2C                         .db #$08, #%00101100
0CDA1 78 6C                         .db #$78, #%01101100
0CDA3 D8 0C                         .db #$D8, #%00001100
0CDA5 30 A1                         .db #$30, #%10100001
0CDA7 B0 21                         .db #$B0, #%00100001
0CDA9 01 41                         .db #$01, #%01000001
0CDAB 41 61                         .db #$41, #%01100001
0CDAD 91 A1                         .db #$91, #%10100001
0CDAF A1 21                         .db #$A1, #%00100001
0CDB1 52 C1                         .db #$52, #%11000001
0CDB3 72 E1                         .db #$72, #%11100001
0CDB5 B2 C1                         .db #$B2, #%11000001
0CDB7 C2 21                         .db #$C2, #%00100001
0CDB9 03 41                         .db #$03, #%01000001
0CDBB 33 C1                         .db #$33, #%11000001
0CDBD 83 21                         .db #$83, #%00100001
0CDBF D3 E1                         .db #$D3, #%11100001
0CDC1 05 21                         .db #$05, #%00100001
0CDC3 45 E1                         .db #$45, #%11100001
0CDC5 A5 21                         .db #$A5, #%00100001
0CDC7 16 A1                         .db #$16, #%10100001
0CDC9 76 A1                         .db #$76, #%10100001
0CDCB 27 A1                         .db #$27, #%10100001
0CDCD 57 01                         .db #$57, #%00000001
0CDCF 87 41                         .db #$87, #%01000001
0CDD1 B7 A1                         .db #$B7, #%10100001
0CDD3 19 21                         .db #$19, #%00100001
0CDD5 39 41                         .db #$39, #%01000001
0CDD7 89 41                         .db #$89, #%01000001
0CDD9 C9 21                         .db #$C9, #%00100001
0CDDB D0 1A                         .db #$D0, #%00011010
0CDDD 55 1A                         .db #$55, #%00011010
0CDDF 95 1A                         .db #$95, #%00011010
0CDE1 D7 1A                         .db #$D7, #%00011010
0CDE3 09 1A                         .db #$09, #%00011010
0CDE5 79 1A                         .db #$79, #%00011010
0CDE7 FF                            .db #LEVEL_END
0CDE8                           
0CDE8                           lvl_layout_05:
0CDE8 40 0A                         .db #$40, #%00001010
0CDEA 70 1A                         .db #$70, #%00011010
0CDEC B0 42                         .db #$B0, #%01000010
0CDEE 41 A7                         .db #$41, #%10100111
0CDF0 B1 22                         .db #$B1, #%00100010
0CDF2 D1 15                         .db #$D1, #%00010101
0CDF4 22 0A                         .db #$22, #%00001010
0CDF6 52 05                         .db #$52, #%00000101
0CDF8 B2 42                         .db #$B2, #%01000010
0CDFA 03 27                         .db #$03, #%00100111
0CDFC 33 67                         .db #$33, #%01100111
0CDFE 73 67                         .db #$73, #%01100111
0CE00 B3 47                         .db #$B3, #%01000111
0CE02 05 E5                         .db #$05, #%11100101
0CE04 25 A5                         .db #$25, #%10100101
0CE06 35 25                         .db #$35, #%00100101
0CE08 65 45                         .db #$65, #%01000101
0CE0A A5 45                         .db #$A5, #%01000101
0CE0C 46 E5                         .db #$46, #%11100101
0CE0E 66 E5                         .db #$66, #%11100101
0CE10 86 E5                         .db #$86, #%11100101
0CE12 A6 E2                         .db #$A6, #%11100010
0CE14 C6 E5                         .db #$C6, #%11100101
0CE16 27 25                         .db #$27, #%00100101
0CE18 77 05                         .db #$77, #%00000101
0CE1A B7 02                         .db #$B7, #%00000010
0CE1C 09 05                         .db #$09, #%00000101
0CE1E 79 05                         .db #$79, #%00000101
0CE20 B9 02                         .db #$B9, #%00000010
0CE22 FF                            .db #LEVEL_END
0CE23                           
0CE23                           lvl_layout_06:
0CE23 00 03                         .db #$00, #%00000011
0CE25 20 03                         .db #$20, #%00000011
0CE27 40 03                         .db #$40, #%00000011
0CE29 A0 03                         .db #$A0, #%00000011
0CE2B C0 03                         .db #$C0, #%00000011
0CE2D 11 03                         .db #$11, #%00000011
0CE2F 31 03                         .db #$31, #%00000011
0CE31 51 03                         .db #$51, #%00000011
0CE33 91 03                         .db #$91, #%00000011
0CE35 B1 03                         .db #$B1, #%00000011
0CE37 D1 03                         .db #$D1, #%00000011
0CE39 02 03                         .db #$02, #%00000011
0CE3B 22 03                         .db #$22, #%00000011
0CE3D 42 03                         .db #$42, #%00000011
0CE3F A2 03                         .db #$A2, #%00000011
0CE41 C2 03                         .db #$C2, #%00000011
0CE43 13 03                         .db #$13, #%00000011
0CE45 33 03                         .db #$33, #%00000011
0CE47 53 03                         .db #$53, #%00000011
0CE49 93 03                         .db #$93, #%00000011
0CE4B B3 03                         .db #$B3, #%00000011
0CE4D D3 03                         .db #$D3, #%00000011
0CE4F 04 03                         .db #$04, #%00000011
0CE51 24 03                         .db #$24, #%00000011
0CE53 44 03                         .db #$44, #%00000011
0CE55 A4 03                         .db #$A4, #%00000011
0CE57 C4 03                         .db #$C4, #%00000011
0CE59 15 03                         .db #$15, #%00000011
0CE5B 35 03                         .db #$35, #%00000011
0CE5D 55 03                         .db #$55, #%00000011
0CE5F 95 03                         .db #$95, #%00000011
0CE61 B5 03                         .db #$B5, #%00000011
0CE63 D5 03                         .db #$D5, #%00000011
0CE65 06 03                         .db #$06, #%00000011
0CE67 26 03                         .db #$26, #%00000011
0CE69 46 03                         .db #$46, #%00000011
0CE6B A6 03                         .db #$A6, #%00000011
0CE6D C6 03                         .db #$C6, #%00000011
0CE6F 17 03                         .db #$17, #%00000011
0CE71 37 03                         .db #$37, #%00000011
0CE73 57 03                         .db #$57, #%00000011
0CE75 97 03                         .db #$97, #%00000011
0CE77 B7 03                         .db #$B7, #%00000011
0CE79 D7 03                         .db #$D7, #%00000011
0CE7B 08 03                         .db #$08, #%00000011
0CE7D 28 03                         .db #$28, #%00000011
0CE7F 48 03                         .db #$48, #%00000011
0CE81 A8 03                         .db #$A8, #%00000011
0CE83 C8 03                         .db #$C8, #%00000011
0CE85 19 03                         .db #$19, #%00000011
0CE87 39 03                         .db #$39, #%00000011
0CE89 59 03                         .db #$59, #%00000011
0CE8B 99 03                         .db #$99, #%00000011
0CE8D B9 03                         .db #$B9, #%00000011
0CE8F D9 03                         .db #$D9, #%00000011
0CE91 60 4B                         .db #$60, #%01001011
0CE93 71 CB                         .db #$71, #%11001011
0CE95 62 4B                         .db #$62, #%01001011
0CE97 64 4B                         .db #$64, #%01001011
0CE99 75 CB                         .db #$75, #%11001011
0CE9B 66 4B                         .db #$66, #%01001011
0CE9D 68 4B                         .db #$68, #%01001011
0CE9F 79 0B                         .db #$79, #%00001011
0CEA1 70 03                         .db #$70, #%00000011
0CEA3 72 03                         .db #$72, #%00000011
0CEA5 74 03                         .db #$74, #%00000011
0CEA7 76 03                         .db #$76, #%00000011
0CEA9 78 03                         .db #$78, #%00000011
0CEAB FF                            .db #LEVEL_END
0CEAC                           
0CEAC                           lvl_layout_07:
0CEAC 00 11                         .db #$00, #%00010001
0CEAE 01 FA                         .db #$01, #%11111010
0CEB0 12 BA                         .db #$12, #%10111010
0CEB2 23 DA                         .db #$23, #%11011010
0CEB4 34 FA                         .db #$34, #%11111010
0CEB6 05 DA                         .db #$05, #%11011010
0CEB8 15 FA                         .db #$15, #%11111010
0CEBA 45 BA                         .db #$45, #%10111010
0CEBC 56 DA                         .db #$56, #%11011010
0CEBE 27 BA                         .db #$27, #%10111010
0CEC0 67 DA                         .db #$67, #%11011010
0CEC2 38 3A                         .db #$38, #%00111010
0CEC4 78 BA                         .db #$78, #%10111010
0CEC6 09 3A                         .db #$09, #%00111010
0CEC8 39 3A                         .db #$39, #%00111010
0CECA 89 1A                         .db #$89, #%00011010
0CECC B0 01                         .db #$B0, #%00000001
0CECE D0 01                         .db #$D0, #%00000001
0CED0 A1 01                         .db #$A1, #%00000001
0CED2 C1 11                         .db #$C1, #%00010001
0CED4 B2 01                         .db #$B2, #%00000001
0CED6 D2 01                         .db #$D2, #%00000001
0CED8 A3 01                         .db #$A3, #%00000001
0CEDA C3 01                         .db #$C3, #%00000001
0CEDC B4 01                         .db #$B4, #%00000001
0CEDE D4 01                         .db #$D4, #%00000001
0CEE0 A5 01                         .db #$A5, #%00000001
0CEE2 C5 01                         .db #$C5, #%00000001
0CEE4 B6 01                         .db #$B6, #%00000001
0CEE6 D6 01                         .db #$D6, #%00000001
0CEE8 A7 01                         .db #$A7, #%00000001
0CEEA C7 01                         .db #$C7, #%00000001
0CEEC FF                            .db #LEVEL_END
0CEED                           
0CEED                           lvl_layout_08:
0CEED 40 B5                         .db #$40, #%10110101
0CEEF 31 0D                         .db #$31, #%00001101
0CEF1 61 10                         .db #$61, #%00010000
0CEF3 42 C7                         .db #$42, #%11000111
0CEF5 52 67                         .db #$52, #%01100111
0CEF7 63 C7                         .db #$63, #%11000111
0CEF9 83 E7                         .db #$83, #%11100111
0CEFB 05 07                         .db #$05, #%00000111
0CEFD 15 3A                         .db #$15, #%00111010
0CEFF 07 63                         .db #$07, #%01100011
0CF01 27 13                         .db #$27, #%00010011
0CF03 38 A5                         .db #$38, #%10100101
0CF05 09 14                         .db #$09, #%00010100
0CF07 19 05                         .db #$19, #%00000101
0CF09 D0 E0                         .db #$D0, #%11100000
0CF0B C2 A0                         .db #$C2, #%10100000
0CF0D B3 E0                         .db #$B3, #%11100000
0CF0F D5 E0                         .db #$D5, #%11100000
0CF11 C6 E0                         .db #$C6, #%11100000
0CF13 B0 C4                         .db #$B0, #%11000100
0CF15 C0 A4                         .db #$C0, #%10100100
0CF17 D1 A4                         .db #$D1, #%10100100
0CF19 C4 24                         .db #$C4, #%00100100
0CF1B C5 04                         .db #$C5, #%00000100
0CF1D B7 44                         .db #$B7, #%01000100
0CF1F B8 A4                         .db #$B8, #%10100100
0CF21 D9 05                         .db #$D9, #%00000101
0CF23 FF                            .db #LEVEL_END
0CF24                           
0CF24                           lvl_layout_09:
0CF24 81 04                         .db #$81, #%00000100
0CF26 D1 04                         .db #$D1, #%00000100
0CF28 32 C4                         .db #$32, #%11000100
0CF2A A2 C4                         .db #$A2, #%11000100
0CF2C C2 24                         .db #$C2, #%00100100
0CF2E 13 24                         .db #$13, #%00100100
0CF30 53 04                         .db #$53, #%00000100
0CF32 C3 27                         .db #$C3, #%00100111
0CF34 15 6C                         .db #$15, #%01101100
0CF36 55 6C                         .db #$55, #%01101100
0CF38 95 6C                         .db #$95, #%01101100
0CF3A D5 0C                         .db #$D5, #%00001100
0CF3C 27 C7                         .db #$27, #%11000111
0CF3E 47 C7                         .db #$47, #%11000111
0CF40 67 C7                         .db #$67, #%11000111
0CF42 87 C7                         .db #$87, #%11000111
0CF44 A7 C7                         .db #$A7, #%11000111
0CF46 C7 C7                         .db #$C7, #%11000111
0CF48 08 13                         .db #$08, #%00010011
0CF4A 28 15                         .db #$28, #%00010101
0CF4C 48 12                         .db #$48, #%00010010
0CF4E 68 15                         .db #$68, #%00010101
0CF50 88 11                         .db #$88, #%00010001
0CF52 A8 10                         .db #$A8, #%00010000
0CF54 C8 14                         .db #$C8, #%00010100
0CF56 09 07                         .db #$09, #%00000111
0CF58 19 03                         .db #$19, #%00000011
0CF5A 39 05                         .db #$39, #%00000101
0CF5C 59 02                         .db #$59, #%00000010
0CF5E 79 05                         .db #$79, #%00000101
0CF60 99 01                         .db #$99, #%00000001
0CF62 B9 00                         .db #$B9, #%00000000
0CF64 D9 04                         .db #$D9, #%00000100
0CF66 FF                            .db #LEVEL_END
0CF67                           
0CF67                           lvl_layout_10:
0CF67 00 02                         .db #$00, #%00000010
0CF69 10 C9                         .db #$10, #%11001001
0CF6B 50 C9                         .db #$50, #%11001001
0CF6D 90 C9                         .db #$90, #%11001001
0CF6F D0 C9                         .db #$D0, #%11001001
0CF71 31 C9                         .db #$31, #%11001001
0CF73 71 C9                         .db #$71, #%11001001
0CF75 B1 C9                         .db #$B1, #%11001001
0CF77 13 C9                         .db #$13, #%11001001
0CF79 53 C9                         .db #$53, #%11001001
0CF7B 93 C9                         .db #$93, #%11001001
0CF7D D3 C9                         .db #$D3, #%11001001
0CF7F 34 C9                         .db #$34, #%11001001
0CF81 74 C9                         .db #$74, #%11001001
0CF83 B4 C9                         .db #$B4, #%11001001
0CF85 16 C9                         .db #$16, #%11001001
0CF87 56 C9                         .db #$56, #%11001001
0CF89 96 C9                         .db #$96, #%11001001
0CF8B D6 C9                         .db #$D6, #%11001001
0CF8D 37 C9                         .db #$37, #%11001001
0CF8F 77 C9                         .db #$77, #%11001001
0CF91 B7 C9                         .db #$B7, #%11001001
0CF93 D8 12                         .db #$D8, #%00010010
0CF95 FF                            .db #LEVEL_END
0CF96                           
0CF96                           lvl_layout_11:
0CF96 00 65                         .db #$00, #%01100101
0CF98 40 45                         .db #$40, #%01000101
0CF9A 50 A7                         .db #$50, #%10100111
0CF9C 80 05                         .db #$80, #%00000101
0CF9E 90 A7                         .db #$90, #%10100111
0CFA0 A0 65                         .db #$A0, #%01100101
0CFA2 01 43                         .db #$01, #%01000011
0CFA4 31 23                         .db #$31, #%00100011
0CFA6 61 A7                         .db #$61, #%10100111
0CFA8 81 A7                         .db #$81, #%10100111
0CFAA A1 63                         .db #$A1, #%01100011
0CFAC 02 44                         .db #$02, #%01000100
0CFAE 32 44                         .db #$32, #%01000100
0CFB0 92 04                         .db #$92, #%00000100
0CFB2 A2 64                         .db #$A2, #%01100100
0CFB4 03 40                         .db #$03, #%01000000
0CFB6 33 40                         .db #$33, #%01000000
0CFB8 63 A1                         .db #$63, #%10100001
0CFBA 83 A2                         .db #$83, #%10100010
0CFBC 93 00                         .db #$93, #%00000000
0CFBE A3 60                         .db #$A3, #%01100000
0CFC0 04 41                         .db #$04, #%01000001
0CFC2 34 41                         .db #$34, #%01000001
0CFC4 94 02                         .db #$94, #%00000010
0CFC6 A4 62                         .db #$A4, #%01100010
0CFC8 05 47                         .db #$05, #%01000111
0CFCA 35 67                         .db #$35, #%01100111
0CFCC 75 0A                         .db #$75, #%00001010
0CFCE 85 47                         .db #$85, #%01000111
0CFD0 B5 47                         .db #$B5, #%01000111
0CFD2 06 E7                         .db #$06, #%11100111
0CFD4 16 5A                         .db #$16, #%01011010
0CFD6 26 11                         .db #$26, #%00010001
0CFD8 46 13                         .db #$46, #%00010011
0CFDA 56 1A                         .db #$56, #%00011010
0CFDC 66 14                         .db #$66, #%00010100
0CFDE 86 10                         .db #$86, #%00010000
0CFE0 96 5A                         .db #$96, #%01011010
0CFE2 A6 12                         .db #$A6, #%00010010
0CFE4 C6 15                         .db #$C6, #%00010101
0CFE6 D6 E7                         .db #$D6, #%11100111
0CFE8 FF                            .db #LEVEL_END
0CFE9                           
0CFE9                           lvl_layout_12:
0CFE9 00 00                         .db #$00, #%00000000
0CFEB 50 C0                         .db #$50, #%11000000
0CFED 80 00                         .db #$80, #%00000000
0CFEF 61 00                         .db #$61, #%00000000
0CFF1 22 C0                         .db #$22, #%11000000
0CFF3 82 E0                         .db #$82, #%11100000
0CFF5 C2 E0                         .db #$C2, #%11100000
0CFF7 A3 20                         .db #$A3, #%00100000
0CFF9 C3 10                         .db #$C3, #%00010000
0CFFB 04 00                         .db #$04, #%00000000
0CFFD 54 20                         .db #$54, #%00100000
0CFFF 15 0A                         .db #$15, #%00001010
0D001 25 C0                         .db #$25, #%11000000
0D003 55 E0                         .db #$55, #%11100000
0D005 86 20                         .db #$86, #%00100000
0D007 C6 E0                         .db #$C6, #%11100000
0D009 C7 A0                         .db #$C7, #%10100000
0D00B 88 00                         .db #$88, #%00000000
0D00D 59 00                         .db #$59, #%00000000
0D00F 89 20                         .db #$89, #%00100000
0D011 D9 1A                         .db #$D9, #%00011010
0D013 FF                            .db #LEVEL_END
0D014                           
0D014                           lvl_layout_13:
0D014 10 E0                         .db #$10, #%11100000
0D016 20 E0                         .db #$20, #%11100000
0D018 30 E0                         .db #$30, #%11100000
0D01A 40 40                         .db #$40, #%01000000
0D01C 80 60                         .db #$80, #%01100000
0D01E C0 E0                         .db #$C0, #%11100000
0D020 D0 E0                         .db #$D0, #%11100000
0D022 41 40                         .db #$41, #%01000000
0D024 71 60                         .db #$71, #%01100000
0D026 52 60                         .db #$52, #%01100000
0D028 A2 20                         .db #$A2, #%00100000
0D02A 43 60                         .db #$43, #%01100000
0D02C 83 60                         .db #$83, #%01100000
0D02E 14 74                         .db #$14, #%01110100
0D030 54 74                         .db #$54, #%01110100
0D032 94 74                         .db #$94, #%01110100
0D034 D4 14                         .db #$D4, #%00010100
0D036 15 0D                         .db #$15, #%00001101
0D038 55 0D                         .db #$55, #%00001101
0D03A 95 0D                         .db #$95, #%00001101
0D03C D5 0D                         .db #$D5, #%00001101
0D03E 26 0D                         .db #$26, #%00001101
0D040 46 0D                         .db #$46, #%00001101
0D042 66 0D                         .db #$66, #%00001101
0D044 86 0D                         .db #$86, #%00001101
0D046 A6 0D                         .db #$A6, #%00001101
0D048 C6 0D                         .db #$C6, #%00001101
0D04A 07 10                         .db #$07, #%00010000
0D04C 37 0D                         .db #$37, #%00001101
0D04E 77 0D                         .db #$77, #%00001101
0D050 B7 0D                         .db #$B7, #%00001101
0D052 28 0D                         .db #$28, #%00001101
0D054 48 0D                         .db #$48, #%00001101
0D056 68 0D                         .db #$68, #%00001101
0D058 88 0D                         .db #$88, #%00001101
0D05A A8 0D                         .db #$A8, #%00001101
0D05C C8 0D                         .db #$C8, #%00001101
0D05E 19 0D                         .db #$19, #%00001101
0D060 59 0D                         .db #$59, #%00001101
0D062 99 0D                         .db #$99, #%00001101
0D064 D9 0D                         .db #$D9, #%00001101
0D066 FF                            .db #LEVEL_END
0D067                           
0D067                           lvl_layout_14:
0D067 00 67                         .db #$00, #%01100111
0D069 40 67                         .db #$40, #%01100111
0D06B 80 67                         .db #$80, #%01100111
0D06D C0 27                         .db #$C0, #%00100111
0D06F 01 27                         .db #$01, #%00100111
0D071 31 C7                         .db #$31, #%11000111
0D073 51 C7                         .db #$51, #%11000111
0D075 71 C7                         .db #$71, #%11000111
0D077 91 C7                         .db #$91, #%11000111
0D079 B1 C7                         .db #$B1, #%11000111
0D07B D1 07                         .db #$D1, #%00000111
0D07D 02 E7                         .db #$02, #%11100111
0D07F 06 E7                         .db #$06, #%11100111
0D081 13 07                         .db #$13, #%00000111
0D083 D3 07                         .db #$D3, #%00000111
0D085 15 07                         .db #$15, #%00000111
0D087 35 07                         .db #$35, #%00000111
0D089 55 07                         .db #$55, #%00000111
0D08B 75 07                         .db #$75, #%00000111
0D08D 95 07                         .db #$95, #%00000111
0D08F B5 07                         .db #$B5, #%00000111
0D091 D5 07                         .db #$D5, #%00000111
0D093 17 07                         .db #$17, #%00000111
0D095 37 C7                         .db #$37, #%11000111
0D097 57 C7                         .db #$57, #%11000111
0D099 77 C7                         .db #$77, #%11000111
0D09B 97 C7                         .db #$97, #%11000111
0D09D B7 C7                         .db #$B7, #%11000111
0D09F D7 07                         .db #$D7, #%00000111
0D0A1 19 07                         .db #$19, #%00000111
0D0A3 D9 07                         .db #$D9, #%00000111
0D0A5 22 4C                         .db #$22, #%01001100
0D0A7 62 4C                         .db #$62, #%01001100
0D0A9 A2 4C                         .db #$A2, #%01001100
0D0AB 24 0C                         .db #$24, #%00001100
0D0AD 44 0C                         .db #$44, #%00001100
0D0AF 64 0C                         .db #$64, #%00001100
0D0B1 84 0C                         .db #$84, #%00001100
0D0B3 A4 0C                         .db #$A4, #%00001100
0D0B5 C4 0C                         .db #$C4, #%00001100
0D0B7 26 0C                         .db #$26, #%00001100
0D0B9 46 0C                         .db #$46, #%00001100
0D0BB 66 0C                         .db #$66, #%00001100
0D0BD 86 0C                         .db #$86, #%00001100
0D0BF A6 0C                         .db #$A6, #%00001100
0D0C1 C6 0C                         .db #$C6, #%00001100
0D0C3 28 4C                         .db #$28, #%01001100
0D0C5 68 4C                         .db #$68, #%01001100
0D0C7 A8 4C                         .db #$A8, #%01001100
0D0C9 32 04                         .db #$32, #%00000100
0D0CB 52 04                         .db #$52, #%00000100
0D0CD 72 04                         .db #$72, #%00000100
0D0CF 92 04                         .db #$92, #%00000100
0D0D1 B2 04                         .db #$B2, #%00000100
0D0D3 38 04                         .db #$38, #%00000100
0D0D5 58 04                         .db #$58, #%00000100
0D0D7 78 04                         .db #$78, #%00000100
0D0D9 98 04                         .db #$98, #%00000100
0D0DB B8 04                         .db #$B8, #%00000100
0D0DD FF                            .db #LEVEL_END
0D0DE                           
0D0DE                           lvl_layout_15:
0D0DE 00 7A                         .db #$00, #%01111010
0D0E0 40 7A                         .db #$40, #%01111010
0D0E2 80 7A                         .db #$80, #%01111010
0D0E4 C0 3A                         .db #$C0, #%00111010
0D0E6 31 04                         .db #$31, #%00000100
0D0E8 51 04                         .db #$51, #%00000100
0D0EA 81 04                         .db #$81, #%00000100
0D0EC A1 04                         .db #$A1, #%00000100
0D0EE 05 E4                         .db #$05, #%11100100
0D0F0 15 64                         .db #$15, #%01100100
0D0F2 55 64                         .db #$55, #%01100100
0D0F4 95 64                         .db #$95, #%01100100
0D0F6 D5 E4                         .db #$D5, #%11100100
0D0F8 26 04                         .db #$26, #%00000100
0D0FA 46 44                         .db #$46, #%01000100
0D0FC 76 64                         .db #$76, #%01100100
0D0FE C6 04                         .db #$C6, #%00000100
0D100 17 04                         .db #$17, #%00000100
0D102 37 64                         .db #$37, #%01100100
0D104 77 44                         .db #$77, #%01000100
0D106 B7 04                         .db #$B7, #%00000100
0D108 18 64                         .db #$18, #%01100100
0D10A 58 64                         .db #$58, #%01100100
0D10C 98 64                         .db #$98, #%01100100
0D10E FF                            .db #LEVEL_END
0D10F                           
0D10F                           lvl_layout_16:
0D10F 10 E1                         .db #$10, #%11100001
0D111 20 9A                         .db #$20, #%10011010
0D113 30 E1                         .db #$30, #%11100001
0D115 40 E1                         .db #$40, #%11100001
0D117 50 E1                         .db #$50, #%11100001
0D119 60 C1                         .db #$60, #%11000001
0D11B 70 E1                         .db #$70, #%11100001
0D11D 80 E1                         .db #$80, #%11100001
0D11F 90 E1                         .db #$90, #%11100001
0D121 A0 61                         .db #$A0, #%01100001
0D123 21 C1                         .db #$21, #%11000001
0D125 A1 1A                         .db #$A1, #%00011010
0D127 B1 41                         .db #$B1, #%01000001
0D129 A2 E1                         .db #$A2, #%11100001
0D12B B2 E1                         .db #$B2, #%11100001
0D12D C2 1A                         .db #$C2, #%00011010
0D12F D2 E1                         .db #$D2, #%11100001
0D131 63 1A                         .db #$63, #%00011010
0D133 C3 C1                         .db #$C3, #%11000001
0D135 14 61                         .db #$14, #%01100001
0D137 54 61                         .db #$54, #%01100001
0D139 94 C1                         .db #$94, #%11000001
0D13B 15 61                         .db #$15, #%01100001
0D13D 55 41                         .db #$55, #%01000001
0D13F 85 1A                         .db #$85, #%00011010
0D141 16 41                         .db #$16, #%01000001
0D143 46 1A                         .db #$46, #%00011010
0D145 56 61                         .db #$56, #%01100001
0D147 A6 61                         .db #$A6, #%01100001
0D149 17 67                         .db #$17, #%01100111
0D14B 57 67                         .db #$57, #%01100111
0D14D 97 67                         .db #$97, #%01100111
0D14F D7 07                         .db #$D7, #%00000111
0D151 28 41                         .db #$28, #%01000001
0D153 58 61                         .db #$58, #%01100001
0D155 A8 41                         .db #$A8, #%01000001
0D157 18 11                         .db #$18, #%00010001
0D159 38 11                         .db #$38, #%00010001
0D15B 98 11                         .db #$98, #%00010001
0D15D B8 11                         .db #$B8, #%00010001
0D15F D8 11                         .db #$D8, #%00010001
0D161 59 09                         .db #$59, #%00001001
0D163 FF                            .db #LEVEL_END
0D164                           
0D164                           lvl_layout_17:
0D164 10 EA                         .db #$10, #%11101010
0D166 20 E2                         .db #$20, #%11100010
0D168 30 62                         .db #$30, #%01100010
0D16A 70 02                         .db #$70, #%00000010
0D16C 80 6A                         .db #$80, #%01101010
0D16E 90 22                         .db #$90, #%00100010
0D170 01 AA                         .db #$01, #%10101010
0D172 31 6A                         .db #$31, #%01101010
0D174 81 2A                         .db #$81, #%00101010
0D176 A1 02                         .db #$A1, #%00000010
0D178 C1 02                         .db #$C1, #%00000010
0D17A D1 0A                         .db #$D1, #%00001010
0D17C 32 EA                         .db #$32, #%11101010
0D17E 42 6A                         .db #$42, #%01101010
0D180 62 02                         .db #$62, #%00000010
0D182 92 6A                         .db #$92, #%01101010
0D184 D2 E2                         .db #$D2, #%11100010
0D186 43 1A                         .db #$43, #%00011010
0D188 53 CA                         .db #$53, #%11001010
0D18A 73 02                         .db #$73, #%00000010
0D18C 83 4A                         .db #$83, #%01001010
0D18E B3 CA                         .db #$B3, #%11001010
0D190 C3 EA                         .db #$C3, #%11101010
0D192 04 0A                         .db #$04, #%00001010
0D194 14 A2                         .db #$14, #%10100010
0D196 24 AA                         .db #$24, #%10101010
0D198 44 AA                         .db #$44, #%10101010
0D19A 64 6A                         .db #$64, #%01101010
0D19C 65 6A                         .db #$65, #%01101010
0D19E A5 AA                         .db #$A5, #%10101010
0D1A0 06 EA                         .db #$06, #%11101010
0D1A2 16 62                         .db #$16, #%01100010
0D1A4 66 22                         .db #$66, #%00100010
0D1A6 86 2A                         .db #$86, #%00101010
0D1A8 17 42                         .db #$17, #%01000010
0D1AA 47 12                         .db #$47, #%00010010
0D1AC 57 6A                         .db #$57, #%01101010
0D1AE 97 4A                         .db #$97, #%01001010
0D1B0 A7 02                         .db #$A7, #%00000010
0D1B2 18 02                         .db #$18, #%00000010
0D1B4 28 0A                         .db #$28, #%00001010
0D1B6 38 22                         .db #$38, #%00100010
0D1B8 68 2A                         .db #$68, #%00101010
0D1BA 88 62                         .db #$88, #%01100010
0D1BC C8 0A                         .db #$C8, #%00001010
0D1BE D8 02                         .db #$D8, #%00000010
0D1C0 19 2A                         .db #$19, #%00101010
0D1C2 39 2A                         .db #$39, #%00101010
0D1C4 69 42                         .db #$69, #%01000010
0D1C6 99 2A                         .db #$99, #%00101010
0D1C8 B9 42                         .db #$B9, #%01000010
0D1CA FF                            .db #LEVEL_END
0D1CB                           
0D1CB                           lvl_layout_18:
0D1CB 00 12                         .db #$00, #%00010010
0D1CD 40 1A                         .db #$40, #%00011010
0D1CF 50 11                         .db #$50, #%00010001
0D1D1 70 1A                         .db #$70, #%00011010
0D1D3 80 10                         .db #$80, #%00010000
0D1D5 D0 13                         .db #$D0, #%00010011
0D1D7 01 1A                         .db #$01, #%00011010
0D1D9 22 15                         .db #$22, #%00010101
0D1DB A2 1A                         .db #$A2, #%00011010
0D1DD B2 14                         .db #$B2, #%00010100
0D1DF 03 67                         .db #$03, #%01100111
0D1E1 43 67                         .db #$43, #%01100111
0D1E3 83 67                         .db #$83, #%01100111
0D1E5 24 09                         .db #$24, #%00001001
0D1E7 74 0D                         .db #$74, #%00001101
0D1E9 C4 0A                         .db #$C4, #%00001010
0D1EB 05 A7                         .db #$05, #%10100111
0D1ED 45 27                         .db #$45, #%00100111
0D1EF 95 27                         .db #$95, #%00100111
0D1F1 16 C7                         .db #$16, #%11000111
0D1F3 36 67                         .db #$36, #%01100111
0D1F5 86 67                         .db #$86, #%01100111
0D1F7 D6 07                         .db #$D6, #%00000111
0D1F9 07 A3                         .db #$07, #%10100011
0D1FB 27 23                         .db #$27, #%00100011
0D1FD 47 C7                         .db #$47, #%11000111
0D1FF 57 A0                         .db #$57, #%10100000
0D201 67 A7                         .db #$67, #%10100111
0D203 77 20                         .db #$77, #%00100000
0D205 97 C7                         .db #$97, #%11000111
0D207 A7 A4                         .db #$A7, #%10100100
0D209 B7 A7                         .db #$B7, #%10100111
0D20B C7 24                         .db #$C7, #%00100100
0D20D 28 0B                         .db #$28, #%00001011
0D20F 38 A3                         .db #$38, #%10100011
0D211 78 08                         .db #$78, #%00001000
0D213 88 A3                         .db #$88, #%10100011
0D215 C8 0C                         .db #$C8, #%00001100
0D217 D8 A4                         .db #$D8, #%10100100
0D219 09 43                         .db #$09, #%01000011
0D21B 59 40                         .db #$59, #%01000000
0D21D A9 44                         .db #$A9, #%01000100
0D21F FF                            .db #LEVEL_END
0D220                           
0D220                           lvl_layout_19:
0D220 11 A8                         .db #$11, #%10101000
0D222 21 68                         .db #$21, #%01101000
0D224 81 28                         .db #$81, #%00101000
0D226 B1 48                         .db #$B1, #%01001000
0D228 22 48                         .db #$22, #%01001000
0D22A 62 68                         .db #$62, #%01101000
0D22C B2 28                         .db #$B2, #%00101000
0D22E 23 28                         .db #$23, #%00101000
0D230 83 28                         .db #$83, #%00101000
0D232 B3 28                         .db #$B3, #%00101000
0D234 04 E8                         .db #$04, #%11101000
0D236 24 08                         .db #$24, #%00001000
0D238 44 08                         .db #$44, #%00001000
0D23A 64 E8                         .db #$64, #%11101000
0D23C 84 E8                         .db #$84, #%11101000
0D23E C4 A8                         .db #$C4, #%10101000
0D240 D4 E8                         .db #$D4, #%11101000
0D242 15 48                         .db #$15, #%01001000
0D244 55 C8                         .db #$55, #%11001000
0D246 75 C8                         .db #$75, #%11001000
0D248 A5 08                         .db #$A5, #%00001000
0D24A 36 08                         .db #$36, #%00001000
0D24C B6 08                         .db #$B6, #%00001000
0D24E 27 48                         .db #$27, #%01001000
0D250 97 28                         .db #$97, #%00101000
0D252 C7 08                         .db #$C7, #%00001000
0D254 09 61                         .db #$09, #%01100001
0D256 19 11                         .db #$19, #%00010001
0D258 49 61                         .db #$49, #%01100001
0D25A 89 31                         .db #$89, #%00110001
0D25C A9 61                         .db #$A9, #%01100001
0D25E FF                            .db #LEVEL_END
0D25F                           
0D25F                           lvl_layout_20:
0D25F 00 60                         .db #$00, #%01100000
0D261 10 1A                         .db #$10, #%00011010
0D263 40 A7                         .db #$40, #%10100111
0D265 50 20                         .db #$50, #%00100000
0D267 70 1A                         .db #$70, #%00011010
0D269 80 40                         .db #$80, #%01000000
0D26B B0 1A                         .db #$B0, #%00011010
0D26D C0 20                         .db #$C0, #%00100000
0D26F 01 40                         .db #$01, #%01000000
0D271 31 1A                         .db #$31, #%00011010
0D273 A1 40                         .db #$A1, #%01000000
0D275 D1 1A                         .db #$D1, #%00011010
0D277 43 67                         .db #$43, #%01100111
0D279 83 47                         .db #$83, #%01000111
0D27B 44 A7                         .db #$44, #%10100111
0D27D 54 25                         .db #$54, #%00100101
0D27F 94 08                         .db #$94, #%00001000
0D281 A4 A7                         .db #$A4, #%10100111
0D283 55 05                         .db #$55, #%00000101
0D285 65 08                         .db #$65, #%00001000
0D287 06 27                         .db #$06, #%00100111
0D289 36 67                         .db #$36, #%01100111
0D28B 76 28                         .db #$76, #%00101000
0D28D A6 27                         .db #$A6, #%00100111
0D28F D6 07                         .db #$D6, #%00000111
0D291 A7 A7                         .db #$A7, #%10100111
0D293 08 60                         .db #$08, #%01100000
0D295 09 60                         .db #$09, #%01100000
0D297 18 A7                         .db #$18, #%10100111
0D299 48 A7                         .db #$48, #%10100111
0D29B 58 47                         .db #$58, #%01000111
0D29D 88 27                         .db #$88, #%00100111
0D29F B8 20                         .db #$B8, #%00100000
0D2A1 D8 1A                         .db #$D8, #%00011010
0D2A3 59 15                         .db #$59, #%00010101
0D2A5 69 60                         .db #$69, #%01100000
0D2A7 A9 60                         .db #$A9, #%01100000
0D2A9 FF                            .db #LEVEL_END
0D2AA                           
0D2AA                           lvl_layout_21:
0D2AA 00 13                         .db #$00, #%00010011
0D2AC 10 11                         .db #$10, #%00010001
0D2AE 20 67                         .db #$20, #%01100111
0D2B0 60 67                         .db #$60, #%01100111
0D2B2 A0 47                         .db #$A0, #%01000111
0D2B4 D0 15                         .db #$D0, #%00010101
0D2B6 32 63                         .db #$32, #%01100011
0D2B8 72 05                         .db #$72, #%00000101
0D2BA 82 43                         .db #$82, #%01000011
0D2BC B2 43                         .db #$B2, #%01000011
0D2BE 33 03                         .db #$33, #%00000011
0D2C0 43 2A                         .db #$43, #%00101010
0D2C2 63 7A                         .db #$63, #%01111010
0D2C4 73 2A                         .db #$73, #%00101010
0D2C6 A3 7A                         .db #$A3, #%01111010
0D2C8 34 63                         .db #$34, #%01100011
0D2CA 74 63                         .db #$74, #%01100011
0D2CC B4 43                         .db #$B4, #%01000011
0D2CE 06 63                         .db #$06, #%01100011
0D2D0 46 63                         .db #$46, #%01100011
0D2D2 86 63                         .db #$86, #%01100011
0D2D4 C6 C3                         .db #$C6, #%11000011
0D2D6 07 7A                         .db #$07, #%01111010
0D2D8 47 7A                         .db #$47, #%01111010
0D2DA 67 0A                         .db #$67, #%00001010
0D2DC 87 7A                         .db #$87, #%01111010
0D2DE 08 13                         .db #$08, #%00010011
0D2E0 18 43                         .db #$18, #%01000011
0D2E2 48 63                         .db #$48, #%01100011
0D2E4 88 63                         .db #$88, #%01100011
0D2E6 FF                            .db #LEVEL_END
0D2E7                           
0D2E7                           lvl_layout_22:
0D2E7 00 7A                         .db #$00, #%01111010
0D2E9 40 7A                         .db #$40, #%01111010
0D2EB 80 7A                         .db #$80, #%01111010
0D2ED C0 3A                         .db #$C0, #%00111010
0D2EF 13 67                         .db #$13, #%01100111
0D2F1 83 A7                         .db #$83, #%10100111
0D2F3 B3 07                         .db #$B3, #%00000111
0D2F5 14 07                         .db #$14, #%00000111
0D2F7 44 07                         .db #$44, #%00000111
0D2F9 A4 07                         .db #$A4, #%00000111
0D2FB 15 A5                         .db #$15, #%10100101
0D2FD 45 A5                         .db #$45, #%10100101
0D2FF 85 25                         .db #$85, #%00100101
0D301 86 05                         .db #$86, #%00000101
0D303 A6 05                         .db #$A6, #%00000101
0D305 17 11                         .db #$17, #%00010001
0D307 47 A1                         .db #$47, #%10100001
0D309 87 A1                         .db #$87, #%10100001
0D30B B7 A1                         .db #$B7, #%10100001
0D30D 18 41                         .db #$18, #%01000001
0D30F 68 01                         .db #$68, #%00000001
0D311 D8 01                         .db #$D8, #%00000001
0D313 FF                            .db #LEVEL_END
0D314                           
0D314                           lvl_layout_23:
0D314 00 71                         .db #$00, #%01110001
0D316 40 11                         .db #$40, #%00010001
0D318 50 43                         .db #$50, #%01000011
0D31A 80 D1                         .db #$80, #%11010001
0D31C 90 E3                         .db #$90, #%11100011
0D31E A0 63                         .db #$A0, #%01100011
0D320 01 63                         .db #$01, #%01100011
0D322 41 63                         .db #$41, #%01100011
0D324 A1 63                         .db #$A1, #%01100011
0D326 02 63                         .db #$02, #%01100011
0D328 42 63                         .db #$42, #%01100011
0D32A 62 11                         .db #$62, #%00010001
0D32C A2 67                         .db #$A2, #%01100111
0D32E 04 63                         .db #$04, #%01100011
0D330 44 23                         .db #$44, #%00100011
0D332 64 D1                         .db #$64, #%11010001
0D334 74 E3                         .db #$74, #%11100011
0D336 84 F1                         .db #$84, #%11110001
0D338 94 E3                         .db #$94, #%11100011
0D33A A4 C7                         .db #$A4, #%11000111
0D33C B4 23                         .db #$B4, #%00100011
0D33E 05 63                         .db #$05, #%01100011
0D340 45 23                         .db #$45, #%00100011
0D342 06 71                         .db #$06, #%01110001
0D344 46 11                         .db #$46, #%00010001
0D346 56 E3                         .db #$56, #%11100011
0D348 D6 07                         .db #$D6, #%00000111
0D34A 17 D1                         .db #$17, #%11010001
0D34C 27 43                         .db #$27, #%01000011
0D34E 67 D1                         .db #$67, #%11010001
0D350 A7 C7                         .db #$A7, #%11000111
0D352 C7 A7                         .db #$C7, #%10100111
0D354 D7 B3                         .db #$D7, #%10110011
0D356 28 43                         .db #$28, #%01000011
0D358 78 43                         .db #$78, #%01000011
0D35A 29 43                         .db #$29, #%01000011
0D35C 79 43                         .db #$79, #%01000011
0D35E FF                           .db #LEVEL_END
0D35F                           
0D35F                           lvl_layout_24:
0D35F 02 67                         .db #$02, #%01100111
0D361 42 67                         .db #$42, #%01100111
0D363 82 67                         .db #$82, #%01100111
0D365 05 67                         .db #$05, #%01100111
0D367 45 67                         .db #$45, #%01100111
0D369 85 67                         .db #$85, #%01100111
0D36B 08 67                         .db #$08, #%01100111
0D36D 48 67                         .db #$48, #%01100111
0D36F 88 67                         .db #$88, #%01100111
0D371 30 E7                         .db #$30, #%11100111
0D373 70 E7                         .db #$70, #%11100111
0D375 B0 E7                         .db #$B0, #%11100111
0D377 34 E7                         .db #$34, #%11100111
0D379 74 E7                         .db #$74, #%11100111
0D37B B4 E7                         .db #$B4, #%11100111
0D37D 20 13                         .db #$20, #%00010011
0D37F 40 10                         .db #$40, #%00010000
0D381 80 02                         .db #$80, #%00000010
0D383 41 05                         .db #$41, #%00000101
0D385 B1 09                         .db #$B1, #%00001001
0D387 02 09                         .db #$02, #%00001001
0D389 52 0C                         .db #$52, #%00001100
0D38B 13 11                         .db #$13, #%00010001
0D38D 33 04                         .db #$33, #%00000100
0D38F 74 0C                         .db #$74, #%00001100
0D391 B4 08                         .db #$B4, #%00001000
0D393 15 09                         .db #$15, #%00001001
0D395 55 0C                         .db #$55, #%00001100
0D397 95 0C                         .db #$95, #%00001100
0D399 47 03                         .db #$47, #%00000011
0D39B A7 12                         .db #$A7, #%00010010
0D39D 18 15                         .db #$18, #%00010101
0D39F 09 05                         .db #$09, #%00000101
0D3A1 19 03                         .db #$19, #%00000011
0D3A3 FF                            .db #LEVEL_END
0D3A4                           
0D3A4                           lvl_layout_25:
0D3A4 00 12                         .db #$00, #%00010010
0D3A6 10 63                         .db #$10, #%01100011
0D3A8 60 63                         .db #$60, #%01100011
0D3AA A0 07                         .db #$A0, #%00000111
0D3AC 01 11                         .db #$01, #%00010001
0D3AE A1 02                         .db #$A1, #%00000010
0D3B0 02 67                         .db #$02, #%01100111
0D3B2 42 07                         .db #$42, #%00000111
0D3B4 62 67                         .db #$62, #%01100111
0D3B6 A2 C7                         .db #$A2, #%11000111
0D3B8 03 61                         .db #$03, #%01100001
0D3BA 43 01                         .db #$43, #%00000001
0D3BC 63 61                         .db #$63, #%01100001
0D3BE A6 E7                         .db #$A6, #%11100111
0D3C0 B6 47                         .db #$B6, #%01000111
0D3C2 C6 01                         .db #$C6, #%00000001
0D3C4 B7 42                         .db #$B7, #%01000010
0D3C6 B8 42                         .db #$B8, #%01000010
0D3C8 C8 0A                         .db #$C8, #%00001010
0D3CA 09 7A                         .db #$09, #%01111010
0D3CC 49 7A                         .db #$49, #%01111010
0D3CE 89 3A                         .db #$89, #%00111010
0D3D0 B9 42                         .db #$B9, #%01000010
0D3D2 FF                            .db #LEVEL_END
0D3D3                           
0D3D3                           ;; Level layout address pointers
0D3D3                           tbl_lvl_layout_hi:
0D3D3 CC CD CD CD CD                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D3D8 CE CE CE CF CF                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D3DD CF CF D0 D0 D0                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D3E2 D1 D1 D1 D2 D2                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D3E7 D2 D2 D3 D3 D3                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D3EC                           
0D3EC                           tbl_lvl_layout_lo:
0D3EC F4 0F 44 77 E8                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D3F1 23 AC ED 24 67                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D3F6 96 E9 14 67 DE                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D3FB 0F 64 CB 20 5F                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D400 AA E7 14 5F A4                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D405                           
0D405                           ;; Ball start position (#$YX)
0D405                           tbl_lvl_ball_startpos:
0D405 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D40A 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D40F 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D414 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D419 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D41E                               
0D41E                           ;; Ball start direction, color and tile score
0D41E                           ;; #% ccc v tttt
0D41E                           ;;    ||| | ++++-- tile score
0D41E                           ;;    ||| +------- vertical direction, up (0) or down
0D41E                           ;;    +++--------- color (CBRYGM)
0D41E                           tbl_lvl_ball_init:
0D41E 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D423 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D428 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D42D 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D432 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D437                           
0D437                           
0D437                           
0D437                           ;; Helper table to multiply values by 16
0D437                           tbl_Times16:
0D437 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D43F 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D447                               
0D447                           
0D447                           ;; Helper table to multiply values by 64
0D447                           tbl_Times64:
0D447 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D44B                           
0D44B                           
0D44B                           ;; Metatile ID to CHR data mapper
0D44B                           tbl_GametileTopLeft:
0D44B 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D455                           
0D455                           tbl_GametileTopRight:
0D455 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D45F                           
0D45F                           tbl_GametileBottomLeft:
0D45F 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D469                           
0D469                           tbl_GametileBottomRight:
0D469 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D473                           
0D473                           ;; Metatile ID to RAM byte data mapper
0D473                           tbl_GameTileRamByte:
0D473 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D478                           
0D478                           ;; HUD text data
0D478                           tbl_HudText:
0D478 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D480 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D487 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D48F 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D494                           
0D494                           ;; NMI handler
0D494                           NMI:
0D494                               .include "interrupt/nmi.asm"
0D494                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D494                           ;;
0D494                           ;; include/nmi.asm
0D494                           ;;
0D494                           ;; Non-maskable interrupt script. This script is being executed
0D494                           ;; when vBlank hits.
0D494                           ;;
0D494                           ;;
0D494                           
0D494                               ;; Preserve accumulator through stack
0D494 48                            PHA
0D495                           
0D495                               ;; Should NMI be skipped?
0D495 A5 13                         LDA skip_nmi
0D497 F0 03                         BEQ +
0D499 4C 92 D5                          JMP +skip_nmi
0D49C                               +
0D49C                           
0D49C                               ;; When in NMI, skip additional NMI requests
0D49C A9 01                         LDA #$01
0D49E 85 13                         STA skip_nmi
0D4A0                           
0D4A0                               ;; Preserve X, Y, and PC through stack
0D4A0 8A                            TXA
0D4A1 48                            PHA
0D4A2 98                            TYA
0D4A3 48                            PHA
0D4A4 08                            PHP
0D4A5                               
0D4A5                               ;; Check forced NMI skip
0D4A5 A5 14                         LDA force_skip_nmi
0D4A7 F0 03                         BEQ +
0D4A9 4C 83 D5                          JMP +force_skip_nmi
0D4AC                               +
0D4AC                           
0D4AC                               ;; Update PPU mask
0D4AC                               ;LDA #$00
0D4AC                               ;STA PPU_CTRL
0D4AC A5 12                         LDA soft_ppu_mask
0D4AE 8D 01 20                      STA PPU_MASK
0D4B1                               
0D4B1                               
0D4B1                               ;; Additional PPU updates go here
0D4B1                               .include "game/interrupt/nmi.asm"
0D4B1                           
0D4B1                               ;; Check if ppu_buffer needs updating
0D4B1 A5 32                         LDA ppu_buffer_update
0D4B3 D0 03                         BNE +
0D4B5 4C F7 D4                          JMP +no_ppu_buffer_update
0D4B8                               +
0D4B8                           
0D4B8                               ;; Reset ppu control register and mask
0D4B8 A2 00                         LDX #$00
0D4BA 8E 00 20                      STX PPU_CTRL
0D4BD 8E 01 20                      STX PPU_MASK
0D4C0                           
0D4C0                               ;; Set up loop
0D4C0                               -
0D4C0                                   ;; Reset hi/lo latch
0D4C0 2C 02 20                          BIT PPU_STATUS
0D4C3                           
0D4C3                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D4C3 BD 00 03                          LDA ppu_buffer,x
0D4C6 8D 06 20                          STA PPU_ADDR
0D4C9 E8                                INX
0D4CA BD 00 03                          LDA ppu_buffer,x
0D4CD 8D 06 20                          STA PPU_ADDR
0D4D0                           
0D4D0                                   ;; Write ppu_buffer data to PPU_ADDR
0D4D0 E8                                INX
0D4D1 BD 00 03                          LDA ppu_buffer,x
0D4D4 8D 07 20                          STA PPU_DATA
0D4D7                           
0D4D7                                   ;; Check if updating is done (eg. X is at pointer)
0D4D7 E8                                INX
0D4D8 E4 33                             CPX ppu_buffer_pointer
0D4DA F0 03                             BEQ +
0D4DC 4C C0 D4                      JMP -
0D4DF                           +
0D4DF                           
0D4DF                               ;; Reset ppu buffer update and pointer
0D4DF A9 00                         LDA #$00
0D4E1 85 32                         STA ppu_buffer_update
0D4E3 85 33                         STA ppu_buffer_pointer
0D4E5                               
0D4E5                               ;; Reset scrolling position
0D4E5 8D 05 20                      STA PPU_SCROLL
0D4E8 8D 05 20                      STA PPU_SCROLL
0D4EB                           
0D4EB                               ;; Restore ppu control register and mask
0D4EB A9 90                         LDA #%10010000
0D4ED 8D 00 20                      STA PPU_CTRL
0D4F0 A5 12                         LDA soft_ppu_mask
0D4F2 8D 01 20                      STA PPU_MASK
0D4F5 A9 00                         LDA #$00
0D4F7                           
0D4F7                           ;; Continue other NMI stuff
0D4F7                           +no_ppu_buffer_update:
0D4F7                           
0D4F7                               ;; Reset sprite RAM, draw sprites
0D4F7 8D 03 20                      STA OAM_ADDR
0D4FA A9 02                         LDA #$02
0D4FC 8D 14 40                      STA OAM_DMA
0D4FF                           
0D4FF                               ;; Decrease explosion frame counters
0D4FF A0 04                         LDY #MAX_ANIMATIONS
0D501 A2 00                         LDX #$00
0D503                               -
0D503 BD 30 03                          LDA explosion_framecounter,x
0D506 F0 03                             BEQ +
0D508 DE 30 03                              DEC explosion_framecounter,x
0D50B                                   +
0D50B E8                                INX
0D50C 88                                DEY
0D50D F0 03                             BEQ +done        
0D50F 4C 03 D5                      JMP -
0D512                           +done:
0D512                               
0D512                               ;; Decrease nudge counter
0D512 A5 36                         LDA nudge_counter
0D514 F0 02                         BEQ +
0D516 C6 36                             DEC nudge_counter
0D518                               +
0D518                               
0D518                               ;; Test background noise
0D518 A5 31                         LDA screen_mode
0D51A 29 01                         AND #IS_GAME_SCREEN
0D51C F0 21                         BEQ +
0D51E                                   .include "game/include/main/background_sound.asm"
0D51E                               ;; At random times, set max_noise period to $03-$0A
0D51E A5 39                         LDA max_noise
0D520 D0 1D                         BNE +
0D522 20 C9 C3                          JSR sub_GetRandomNumber
0D525 29 EF                             AND #%11101111
0D527 D0 16                             BNE +
0D529                                   
0D529 A5 15                             LDA frame_counter
0D52B 85 16                             STA random_seed
0D52D 20 C9 C3                          JSR sub_GetRandomNumber
0D530 29 07                             AND #$07
0D532 69 03                             ADC #$03
0D534 85 39                             STA max_noise
0D536 A9 01                             LDA #$01
0D538 85 3A                             STA sweep_noise
0D53A A9 34                             LDA #$34
0D53C 8D 0C 40                          STA NOISE_VOLUME
0D53F                           
0D53F                               +
0D53F                           
0D53F                               ;; if sweep noise = $00: constant noise
0D53F                               ;; else if sweep noise > $80: decrease pitch
0D53F                               ;; else: inrease pitch
0D53F A5 3A                         LDA sweep_noise
0D541 F0 18                         BEQ +constantNoise
0D543 30 2A                         BMI +decreaseNoise
0D545                           
0D545                           ;; Sweep noise up to max noise pitch
0D545                           +increaseNoise:
0D545 C6 3B                         DEC current_noise
0D547 A5 3B                         LDA current_noise
0D549 8D 0E 40                      STA NOISE_PERIOD
0D54C C5 39                         CMP max_noise
0D54E D0 08                         BNE +
0D550 A9 00                             LDA #$00
0D552 85 3A                             STA sweep_noise
0D554 A9 0A                             LDA #$0A
0D556 85 3C                             STA noise_counter
0D558                               +
0D558 4C 83 D5                      JMP +endNoise
0D55B                           
0D55B                           ;; Keep noise at constant pitch
0D55B                           +constantNoise:
0D55B A5 39                         LDA max_noise
0D55D F0 24                         BEQ +endNoise
0D55F                           
0D55F A5 3C                         LDA noise_counter
0D561 D0 07                         BNE +
0D563 A9 80                             LDA #$80
0D565 85 3A                             STA sweep_noise
0D567 4C 83 D5                          JMP +endNoise
0D56A                               +
0D56A C6 3C                         DEC noise_counter
0D56C 4C 83 D5                      JMP +endNoise
0D56F                           
0D56F                           ;; Sweep noise down to initial pitch
0D56F                           +decreaseNoise:
0D56F E6 3B                         INC current_noise
0D571 A5 3B                         LDA current_noise
0D573 8D 0E 40                      STA NOISE_PERIOD
0D576 C9 0E                         CMP #$0E
0D578 D0 09                         BNE +endNoise
0D57A                           
0D57A 20 F1 C3                      JSR sub_BackgroundNoise
0D57D A9 00                         LDA #$00
0D57F 85 39                         STA max_noise
0D581 85 3A                         STA sweep_noise
0D583                           
0D583                           +endNoise:
0D583                           
0D583                               +
0D583                           
0D583                           ;; This is what happens when we forced nmi skip
0D583                           +force_skip_nmi:
0D583                           
0D583                               ;; Increase frame counters
0D583 E6 15                         INC frame_counter
0D585                           
0D585                               ;; reset ball_update_position
0D585 A9 00                         LDA #$00
0D587 85 2F                         STA ball_update_position
0D589                           
0D589                               ;; Don't skip next NMI request
0D589 A9 00                         LDA #$00
0D58B 85 13                         STA skip_nmi
0D58D                           
0D58D                               ;; Restore X, Y and PC from stack
0D58D 28                            PLP
0D58E 68                            PLA
0D58F A8                            TAY
0D590 68                            PLA
0D591 AA                            TAX
0D592                           
0D592                           +skip_nmi:
0D592                               ;; Restore accumulator from stack
0D592 68                            PLA
0D593                           
0D593                               ;; Return
0D593 40                            RTI
0D594                           
0D594                           ;; IRQ handler (empty)
0D594                           IRQ:
0D594                               .include "interrupt/irq.asm"
0D594 40                            RTI0D595                           
0D595                           ;; Interrupt vectors
0D595 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 94 D4                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 94 D5                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
